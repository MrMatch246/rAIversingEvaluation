{
    "functions": {
        "FUN_000816a6": {
            "renaming": {
                "FUN_000816a6": "do_nothing_000816a6"
            },
            "code": "\nvoid do_nothing_000816a6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a6",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_000816a6"
        },
        "FUN_000816a8": {
            "renaming": {
                "FUN_000816a8": "main_000816a8",
                "in_r0": "context",
                "_watchdogDefaultSetup": "_setWatchdogDefault",
                "init": "_initialize",
                "initVariant": "_initializeVariant",
                "delay": "_delay",
                "setup": "_setup",
                "loop": "_executeLoop",
                "DAT_000816d0": "data",
                "serialEventRun": "_runSerialEvent"
            },
            "code": "int main_000816a8(void)\n{\n  EVP_PKEY_CTX *context;\n  _watchdogDefaultSetup();\n  init(context);\n  initVariant();\n  delay(1);\n  setup();\n  do {\n    do {\n      loop();\n    } while (DAT_000816d0 == 0);\n    serialEventRun();\n  } while( true );\n}",
            "called": [
                "initVariant",
                "delay",
                "setup",
                "_watchdogDefaultSetup",
                "serialEventRun",
                "init",
                "loop"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a8",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "main_000816a8"
        },
        "FUN_00081042": {
            "renaming": {
                "FUN_00081042": "set_bits_in_uint_00081042",
                "param_1": "data",
                "param_2": "mask",
                "param_3": "start_bit",
                "param_4": "num_bits",
                "*(uint *)(param_1 + 4)": "current_data",
                "param_3 | *(uint *)(param_1 + 4) | (param_2 & 0xf) << 0x18 | (param_4 & 3) << 0x1c": "current_data | shifted_bits",
                "uint": "uint32_t"
            },
            "code": "void set_bits_in_uint_00081042(uint32_t *data, uint32_t mask, uint8_t start_bit, uint8_t num_bits) {\n    uint32_t current_data = *data;\n    uint32_t masked_bits = mask & ((1 << num_bits) - 1);\n    uint32_t shifted_bits = masked_bits << (32 - start_bit - num_bits);\n    *data = current_data | shifted_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081042",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_bits_in_uint_00081042"
        },
        "FUN_00082ac0": {
            "renaming": {
                "__sprint_r_part_0": "__write_formatted_string_r",
                "param_1": "stream",
                "param_2": "flags",
                "param_3": "buf_ptr",
                "piVar1": "buf_start",
                "iVar2": "result",
                "piVar3": "buf_end",
                "uVar4": "i",
                "puVar5": "chunk_data",
                "uVar6": "chunk_size",
                "uVar7": "unused",
                "FUN_00082ac0": "__write_formatted_string_r_00082ac0"
            },
            "code": "int __write_formatted_string_r_00082ac0(FILE* stream, int flags, int** buf_ptr) {\n  int* buf_start = *buf_ptr;\n  int* buf_end = buf_ptr[2];\n  while (buf_start != buf_end) {\n    uint32_t chunk_size = buf_start[1] >> 2;\n    if (chunk_size != 0) {\n      uint32_t i = 0;\n      uint32_t* chunk_data = (uint32_t*)(buf_start[0] - 4);\n      while (i != chunk_size) {\n        chunk_data++;\n        int result = _fputwc_r(*chunk_data, stream, flags);\n        i++;\n        if (result == -1) {\n          buf_ptr[1] = (int*)buf_start;\n          buf_ptr[2] = (int*)buf_end;\n          return -1;\n        }\n      }\n    }\n    buf_start += 2;\n  }\n  buf_ptr[1] = (int*)buf_start;\n  buf_ptr[2] = (int*)buf_end;\n  return 0;\n}",
            "called": [
                "__sfvwrite_r",
                "_fputwc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082ac0",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "__write_formatted_string_r_00082ac0"
        },
        "FUN_00080ce0": {
            "renaming": {
                "FUN_00080ce0": "checkSerialEvents_00080ce0",
                "iVar1": "availableBytes",
                "PTR_Serial_00080d14": "serialPointer1",
                "PTR_Serial1_00080d18": "serialPointer2",
                "PTR_Serial2_00080d1c": "serialPointer3",
                "PTR_Serial3_00080d20": "serialPointer4"
            },
            "code": "void checkSerialEvents_00080ce0(void)\n{\n  int availableBytes;\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial_00080d14);\n  if (availableBytes != 0) {\n    serialEvent();\n  }\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial1_00080d18);\n  if (availableBytes != 0) {\n    serialEvent1();\n  }\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial2_00080d1c);\n  if (availableBytes != 0) {\n    serialEvent2();\n  }\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial3_00080d20);\n  if (availableBytes != 0) {\n    serialEvent3();\n  }\n  return;\n}",
            "called": [
                "serialEvent",
                "available",
                "serialEvent2",
                "serialEvent3",
                "serialEvent1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ce0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "checkSerialEvents_00080ce0"
        },
        "FUN_00081164": {
            "renaming": {
                "FUN_00081164": "wait_forever_00081164"
            },
            "code": "void wait_forever_00081164(void)\n{\n    while(true)\n    {\n        //Do nothing\n    }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081164",
            "calling": [
                "__halt"
            ],
            "imported": false,
            "current_name": "wait_forever_00081164"
        },
        "FUN_00081682": {
            "renaming": {
                "FUN_00081682::FUN_00081682": "String::String",
                "this": "self",
                "cstr": "str",
                "buffer": "str_buffer",
                "capacity": "str_capacity",
                "len": "str_length",
                "length": "str_len",
                "copy": "copy_string",
                "FUN_00081682": "String_00081682"
            },
            "code": "String_00081682 * __thiscall String_00081682::String_00081682(String_00081682 *this,char *str) {\n  size_t str_len;\n  \n  this->buffer = nullptr;\n  this->capacity = 0;\n  this->len = 0;\n  \n  if (str != nullptr) {\n    str_len = strlen(str);\n    copy_string(this, str, str_len);\n  }\n  \n  return this;\n}",
            "called": [
                "strlen",
                "copy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081682",
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "imported": false,
            "current_name": "String_00081682"
        },
        "FUN_00081166": {
            "renaming": {
                "FUN_00081166": "infinite_loop_00081166"
            },
            "code": "void infinite_loop_00081166(void)\n{\n  while(true) {\n    // Do nothing\n  }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081166",
            "calling": [],
            "imported": false,
            "current_name": "infinite_loop_00081166"
        },
        "FUN_00081200": {
            "renaming": {
                "FUN_00081200": "do_nothing_00081200"
            },
            "code": "\nvoid do_nothing_00081200(int pid_UNUSED,int sig_UNUSED)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081200",
            "calling": [
                "_kill_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00081200"
        },
        "FUN_00081202": {
            "renaming": {
                "FUN_00081202": "get_invalid_pid_00081202"
            },
            "code": "__pid_t get_invalid_pid_00081202()\n{\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081202",
            "calling": [],
            "imported": false,
            "current_name": "get_invalid_pid_00081202"
        },
        "FUN_000815fe": {
            "renaming": {
                "_String": "freeBuffer",
                "this": "str",
                "__in_chrg": "releaseMemory",
                "FUN_000815fe": "freeBuffer_000815fe"
            },
            "code": "void* freeBuffer_000815fe(String* str, int releaseMemory) {\n\tfree(str->buffer);\n\treturn str;\n}",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815fe",
            "calling": [],
            "imported": false,
            "current_name": "freeBuffer_000815fe"
        },
        "FUN_00081720": {
            "renaming": {
                "FUN_00081720": "set_flag_at_address_00081720",
                "param_1": "address",
                "*(undefined4 *)(param_1 + 4)": "*(int *)(address + 4)"
            },
            "code": "void set_flag_at_address_00081720(int address)\n{\n    *(int *)(address + 4) = 0x8000;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081720",
            "calling": [
                "_watchdogDefaultSetup"
            ],
            "imported": false,
            "current_name": "set_flag_at_address_00081720"
        },
        "FUN_00081d1c": {
            "renaming": {
                "FUN_00081d1c": "calculate_shifted_bits_00081d1c",
                "param_1": "input_num",
                "uVar1": "shift_amount",
                "PTR_": "ptr_ or DAT_",
                "DAT_": "ptr_ or DAT_"
            },
            "code": "uint calculate_shifted_bits_00081d1c(uint input_num)\n{\n    uint shifted_num;\n    if (((input_num & 0x80000000) != 0) || (input_num << 1 < 0x7f000000)) {\n        return 0;\n    }\n    uint shift_amount = 0x9e - ((input_num << 1) >> 0x18);\n    if (-1 < (int)shift_amount) {\n        shifted_num = (input_num << 8 | 0x80000000) >> (shift_amount & 0xff);\n    }\n    else if ((shift_amount == 0xffffff9f) && ((input_num & 0x7fffff) != 0)) {\n        return 0;\n    }\n    else {\n        return 0xffffffff;\n    }\n    return shifted_num;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d1c",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_shifted_bits_00081d1c"
        },
        "FUN_00083988": {
            "renaming": {
                "FUN_00083988": "register_exit_handler_00083988",
                "__func": "__func_pointer",
                "iVar1": "exit_status"
            },
            "code": "int register_exit_handler_00083988(__func *__func_pointer) {\n  int exit_status;\n  exit_status = __register_exitproc(0, __func_pointer, 0, 0);\n  return exit_status;\n}",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083988",
            "calling": [
                "register_fini"
            ],
            "imported": false,
            "current_name": "register_exit_handler_00083988"
        },
        "FUN_000847ac": {
            "renaming": {
                "FUN_000847ac": "calculate_difference_000847ac",
                "param_1": "numerator",
                "param_2": "denominator",
                "param_3": "factor_low",
                "param_4": "factor_high",
                "param_5": "difference",
                "uVar1": "quotient",
                "lVar2": "product"
            },
            "code": "void calculate_difference_000847ac(uint numerator, int denominator, uint factor_low, uint factor_high, int *difference) {\n  uint product = numerator * ((ulonglong)factor_high << 32 | factor_low);\n  uint quotient = product / denominator;\n  difference[0] = numerator - quotient;\n  difference[1] = denominator - (int)(product >> 32) - (numerator < quotient);\n  return;\n}",
            "called": [
                "__udivdi3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847ac",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "calculate_difference_000847ac"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "execute_function_if_available_00080118",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "DAT_00080134": "global_flag",
                "PTR_object_7862_0008013c": "object_ptr",
                "PTR__etext_00080140": "etext_address",
                "DAT_00080144": "function_ptr"
            },
            "code": "void execute_function_if_available_00080118(int arg1, char* arg2, int arg3, int arg4) {\n  if (DAT_00080134 != 0) {\n    arg2 = PTR_object_7862_0008013c;\n  }\n  if ((*(int *)PTR__etext_00080140 != 0) && (DAT_00080144 != (void *)0x0)) {\n    (*DAT_00080144)(PTR__etext_00080140, arg2, arg3, DAT_00080144, arg4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "execute_function_if_available_00080118"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "do_nothing_00080aa8"
            },
            "code": "\nvoid do_nothing_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aa8"
        },
        "FUN_00081208": {
            "renaming": {
                "FUN_00081208": "getTickCount_00081208",
                "PTR__dwTickCount_0008171c": "tickCountPtr"
            },
            "code": "uint32_t getTickCount_00081208(void)\n{\n    uint32_t *PTR__dwTickCount_0008171c = (uint32_t *)PTR__dwTickCount_0008171c;\n    return *PTR__dwTickCount_0008171c;\n}",
            "called": [
                "GetTickCount"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081208",
            "calling": [
                "poll",
                "setup",
                "sendTxBuffer",
                "loop"
            ],
            "imported": false,
            "current_name": "getTickCount_00081208"
        },
        "FUN_00081728": {
            "renaming": {
                "FUN_00081728": "FUNC_00081728"
            },
            "code": "\nuint FUNC_00081728(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_1 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = param_2;\n      if (iVar7 == -1) {\n        uVar4 = uVar2;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        param_2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == param_2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        uVar2 = param_2;\n      }\n      return uVar2;\n    }\n    if (uVar2 != param_2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      param_1 = param_1 << 1;\n      if ((uVar2 & 0x80000000) != 0) {\n        param_1 = param_1 | 0x80000000;\n      }\n      return param_1;\n    }\n    if (uVar4 < 0xfe000000) {\n      return uVar2 + 0x800000;\n    }\n    uVar2 = uVar2 & 0x80000000;\nLAB_0008186a:\n    return uVar2 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return uVar2;\n  }\n  uVar4 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  uVar2 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar6 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar6 != 0);\n    uVar6 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar5 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar5 & 0xff);\n      if ((int)uVar6 < (int)uVar5) {\n        uVar4 = uVar4 >> (-(uVar6 - uVar5) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar6 - uVar5) * 0x800000;\n      }\n      return uVar4 | uVar2;\n    }\n  }\n  else {\n    uVar6 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar6 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar6 != 0) << 0x1f | uVar3 >> 1;\n      uVar6 = uVar5;\n      if (0xfd < uVar5) goto LAB_0008186a;\n    }\n  }\n  uVar4 = uVar4 + uVar6 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | uVar2;\n}\n\n",
            "called": [
                "__addsf3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081728",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00081728"
        },
        "FUN_00081c94": {
            "renaming": {
                "FUN_00081c94": "is_CY_zero_or_ZR_00081c94",
                "in_ZR": "zero",
                "in_CY": "carry"
            },
            "code": "bool is_CY_zero_or_ZR_00081c94(void)\n{\n  undefined zero;\n  undefined carry;\n\n  __aeabi_cfcmpeq();\n  return !(bool)carry || (bool)zero;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c94",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "is_CY_zero_or_ZR_00081c94"
        },
        "FUN_000810f4": {
            "renaming": {
                "FUN_000810f4": "iterate_callbacks_000810f4",
                "uVar1": "leading_zeroes",
                "uVar2": "callback_bitmask",
                "current_bitmask": "current_bitmask",
                "PTR_callbacksPioC_00081128": "PTR_callbacksPioC_00081128",
                "DAT_00081124": "DAT_00081124"
            },
            "code": "void iterate_callbacks_000810f4()\n{\n  uint current_bitmask;\n  uint callback_bitmask = *(uint *)(DAT_00081124 + 0x4c);\n  while (true) {\n    uint leading_zeroes = count_leading_zeroes(callback_bitmask);\n    if (leading_zeroes > 0x1f) break;\n    uint bit_index = 0x1f - leading_zeroes;\n    code* callback = *(code **)(PTR_callbacksPioC_00081128 + bit_index * 4);\n    if (callback != (code *)0x0) {\n      (*callback)();\n    }\n    current_bitmask = ~(1 << bit_index);\n    callback_bitmask = callback_bitmask & current_bitmask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810f4",
            "calling": [],
            "imported": false,
            "current_name": "iterate_callbacks_000810f4"
        },
        "FUN_00083b14": {
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "struct_pointer",
                "puVar5": "main_struct_pointer",
                "puVar6": "sub_struct_pointer",
                "uVar1": "constant_1",
                "uVar2": "constant_2",
                "uVar3": "constant_3",
                "uVar4": "constant_4"
            },
            "code": "void initialize_data_structures_00083b14(int param_1)\n{\n    if (*(int *)(param_1 + 0x38) == 0) {\n        undefined4 *main_struct = *(undefined4 **)(param_1 + 4);\n        undefined4 *sub_struct_1 = *(undefined4 **)(param_1 + 8);\n        undefined4 *sub_struct_2 = *(undefined4 **)(param_1 + 0xc);\n        main_struct[7] = main_struct;\n        main_struct[8] = DAT_00083bf8;\n        main_struct[9] = DAT_00083bfc;\n        main_struct[10] = DAT_00083c00;\n        main_struct[0xb] = DAT_00083c04;\n        *(undefined2 *)((int)main_struct + 0xe) = 4;\n        *main_struct = 0;\n        main_struct[1] = 0;\n        main_struct[2] = 0;\n        main_struct[0x19] = 0;\n        main_struct[4] = 0;\n        main_struct[5] = 0;\n        main_struct[6] = 0;\n        memset(main_struct + 0x17, 0, 8);\n        sub_struct_1[7] = sub_struct_1;\n        sub_struct_1[8] = DAT_00083bf8;\n        sub_struct_1[9] = DAT_00083bfc;\n        sub_struct_1[10] = DAT_00083c00;\n        sub_struct_1[0xb] = DAT_00083c04;\n        *(undefined2 *)((int)sub_struct_1 + 0xe) = 1;\n        *(undefined2 *)(sub_struct_1 + 3) = 9;\n        *sub_struct_1 = 0;\n        sub_struct_1[1] = 0;\n        sub_struct_1[2] = 0;\n        sub_struct_1[0x19] = 0;\n        sub_struct_1[4] = 0;\n        sub_struct_1[5] = 0;\n        sub_struct_1[6] = 0;\n        memset(sub_struct_1 + 0x17, 0, 8);\n        sub_struct_2[7] = sub_struct_2;\n        sub_struct_2[8] = DAT_00083bf8;\n        sub_struct_2[9] = DAT_00083bfc;\n        sub_struct_2[10] = DAT_00083c00;\n        sub_struct_2[0xb] = DAT_00083c04;\n        *(undefined2 *)(sub_struct_2 + 3) = 0x12;\n        *(undefined2 *)((int)sub_struct_2 + 0xe) = 2;\n        *sub_struct_2 = 0;\n        sub_struct_2[1] = 0;\n        sub_struct_2[2] = 0;\n        sub_struct_2[0x19] = 0;\n        sub_struct_2[4] = 0;\n        sub_struct_2[5] = 0;\n        sub_struct_2[6] = 0;\n        memset(sub_struct_2 + 0x17, 0, 8);\n        *(undefined4 *)(param_1 + 0x38) = 1;\n    }\n    return;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b14",
            "calling": [
                "_vfiprintf_r",
                "__swsetup_r",
                "_fclose_r",
                "_fflush_r",
                "__swbuf_r"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_00083b14"
        },
        "FUN_000842a4": {
            "renaming": {
                "FUN_000842a4": "processFile_000842a4",
                "param_1": "fileDescriptor",
                "param_2": "fileInfo",
                "uVar1": "fileType",
                "iVar2": "fileStatus",
                "iVar3": "allocationSize",
                "uVar4": "fileTypeBits",
                "bVar5": "isExecutable",
                "auStack_54": "nullPointer",
                "local_50": "unusedVariable",
                "DAT_00084380": "magicNumber",
                "PTR_DAT_0008437c": "fileSystemInfo"
            },
            "code": "void processFile_000842a4(int fileDescriptor, int *fileInfo)\n{\n    ushort fileType = *(ushort *)(fileInfo + 3);\n    uint fileTypeBits = (uint)fileType;\n    if ((int)(fileTypeBits << 0x1e) < 0) {\n        *fileInfo = (int)fileInfo + 0x43;\n        fileInfo[4] = (int)fileInfo + 0x43;\n        fileInfo[5] = 1;\n        return;\n    }\n    if (-1 < *(short *)((int)fileInfo + 0xe)) {\n        int fileStatus = _fstat_r(fileDescriptor, (int)*(short *)((int)fileInfo + 0xe), NULL);\n        if (-1 < fileStatus) {\n            bool isExecutable = (fileTypeBits & 0xf000) == 0x2000;\n            if (((fileTypeBits & 0xf000) == 0x8000) && (fileInfo[10] == PTR_DAT_00084380)) {\n                fileTypeBits |= 0x400;\n                *(ushort *)(fileInfo + 3) = fileTypeBits;\n                fileInfo[0x13] = 0x400;\n            }\n            else {\n                fileTypeBits |= 0x800;\n                *(ushort *)(fileInfo + 3) = fileTypeBits;\n            }\n            goto allocateMemory;\n        }\n        fileType = *(ushort *)(fileInfo + 3);\n        fileTypeBits = (uint)fileType;\n    }\n    *(ushort *)(fileInfo + 3) = fileType | 0x800;\n    int allocationSize = (fileTypeBits & 0x80) == 0 ? 0x400 : 0x40;\n    bool isTerminal = false;\n    allocateMemory:\n    int *allocatedMemory = _malloc_r(fileDescriptor, allocationSize);\n    fileType = *(ushort *)(fileInfo + 3);\n    if (allocatedMemory == 0) {\n        if (-1 < (int)((uint)fileType << 0x16)) {\n            *(ushort *)(fileInfo + 3) = fileType | 2;\n            *fileInfo = (int)fileInfo + 0x43;\n            fileInfo[4] = (int)fileInfo + 0x43;\n            fileInfo[5] = 1;\n        }\n    }\n    else {\n        *(undefined4 *)(fileDescriptor + 0x3c) = PTR_DAT_0008437c;\n        *(ushort *)(fileInfo + 3) = fileType | 0x80;\n        *fileInfo = allocatedMemory;\n        fileInfo[4] = allocatedMemory;\n        fileInfo[5] = allocationSize;\n        if ((isExecutable) && (_isatty_r(fileDescriptor, (int)*(short *)((int)fileInfo + 0xe)) != 0)) {\n            *(ushort *)(fileInfo + 3) = *(ushort *)(fileInfo + 3) | 1;\n        }\n    }\n}",
            "called": [
                "_isatty_r",
                "_fstat_r",
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "__swsetup_r"
            ],
            "imported": false,
            "current_name": "processFile_000842a4"
        },
        "FUN_00081dcc": {
            "renaming": {
                "FUN_00081dcc": "call_vf_function_with_params_00081dcc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uStack_c": "stack_param1",
                "uStack_8": "stack_param2",
                "uStack_4": "stack_param3"
            },
            "code": "void call_vf_function_with_params_00081dcc(int param1, int param2, int param3, int param4)\n{\n    int stack_param1 = param2;\n    int stack_param2 = param3;\n    int stack_param3 = param4;\n    _vf_function(*(int *)PTR__impure_ptr_00081df0, *(int *)(*(int *)PTR__impure_ptr_00081df0 + 8), param1, &stack_param1);\n    return;\n}",
            "called": [
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081dcc",
            "calling": [
                "_exit"
            ],
            "imported": false,
            "current_name": "call_vf_function_with_params_00081dcc"
        },
        "FUN_0008143c": {
            "renaming": {
                "FUN_0008143c": "waitForTransmissionCompletion_0008143c",
                "this": "UARTObject",
                "_tx_buffer": "transmitBuffer",
                "_iHead": "transmitBufferHead",
                "_iTail": "transmitBufferTail",
                "_pUart": "UARTPointer",
                "UART_SR": "UARTStatusRegister"
            },
            "code": "void __thiscall UARTClass::waitForTransmissionCompletion_0008143c(UARTClass *this)\n{\n  while (this->transmitBufferHead != this->transmitBufferTail);\n  while (-1 < (int)(this->UARTStatusRegister << 0x16));\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008143c",
            "calling": [],
            "imported": false,
            "current_name": "waitForTransmissionCompletion_0008143c"
        },
        "FUN_000846a4": {
            "renaming": {
                "FUN_000846a4": "executeFile_000846a4",
                "__stream": "__file",
                "iVar1": "result"
            },
            "code": "int executeFile_000846a4(FILE *__stream)\n{\n  int result;\n  result = executeFile_000846a4_r(*(undefined4 *)PTR__impure_ptr_000846b0,__stream);\n  return result;\n}",
            "called": [
                "_fclose_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846a4",
            "calling": [],
            "imported": false,
            "current_name": "executeFile_000846a4"
        },
        "FUN_00080f24": {
            "renaming": {
                "FUN_00080f24": "copy_initialized_data_to_ram_00080f24",
                "puVar1": "initialized_data_start",
                "puVar2": "initialized_data_end",
                "iVar3": "bss_index",
                "puVar4": "destination",
                "DAT_00080f94": "bss_start",
                "PTR__ebss_00080f8c": "bss_end",
                "PTR_exception_table_00080f90": "exception_table_start"
            },
            "code": "void copy_initialized_data_to_ram_00080f24(void)\n{\n  uint32_t *initialized_data_start = PTR_banzai_00080f80;\n  uint32_t *initialized_data_end = PTR__etext_00080f7c;\n  uint32_t *destination = (uint32_t *)PTR_completed_7857_00080f84;\n  if (initialized_data_start != initialized_data_end) {\n    while (initialized_data_start < initialized_data_end) {\n      *initialized_data_start++ = *destination++;\n    }\n  }\n  uint32_t *DAT_00080f94 = (uint32_t *)DAT_00080f94;\n  uint32_t *PTR__ebss_00080f8c = (uint32_t *)PTR__ebss_00080f8c;\n  while (DAT_00080f94 < PTR__ebss_00080f8c) {\n    *DAT_00080f94++ = 0;\n  }\n  uint32_t *PTR_exception_table_00080f90 = (uint32_t *)PTR_exception_table_00080f90 - 0x20000000;\n  *(uint32_t *)(DAT_00080f94 + 8) = (uint32_t)PTR_exception_table_00080f90 & 0x1fffff80;\n  if (PTR_exception_table_00080f90 < (uint32_t *)0x100000) {\n    *(uint32_t *)(DAT_00080f94 + 8) |= 0x20000000;\n  }\n  (*DAT_00080f98)();\n  while(1) {\n    // Do nothing block with infinite loop\n  }\n}",
            "called": [
                "banzai",
                "main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f24",
            "calling": [],
            "imported": false,
            "current_name": "copy_initialized_data_to_ram_00080f24"
        },
        "FUN_00080e04": {
            "renaming": {
                "FUN_00080e04": "check_00080e04",
                "param_1": "ptr_address",
                "param_2": "mask",
                "uVar1": "result"
            },
            "code": "uint check_00080e04(uint ptr_address, uint mask){\n  uint result = *(uint *)(ptr_address + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(ptr_address + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e04",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "check_00080e04"
        },
        "FUN_000804a8": {
            "renaming": {
                "FUN_000804a8": "initializeSystem_000804a8",
                "puVar1": "telegramPtr",
                "puVar2": "dataPtr",
                "puVar3": "data8024Ptr",
                "this": "masterPtr",
                "uVar4": "currentMillis"
            },
            "code": "void initializeSystem_000804a8(void)\n{\n  uint32_t currentMillis;\n  uint16_t *dataPtr;\n  uint8_t *telegramPtr;\n  uint8_t *data8024Ptr;\n  uint8_t *masterPtr;\n\n  pinMode(1, OUTPUT);\n  pinMode(6, INPUT);\n  pinMode(0, INPUT_PULLUP);\n  pinMode(1, INPUT_PULLUP);\n  digitalWrite(0, LOW);\n  digitalWrite(1, LOW);\n\n  telegramPtr = DAT_telegram_000805a8;\n  dataPtr = PTR_au16data_000805ac;\n  data8024Ptr = PTR_data8024_000805b0;\n  masterPtr = PTR_master_000805b4;\n\n  *(uint16_t *)(telegramPtr + 0xE) = 0x13;\n  *(uint16_t *)(telegramPtr + 0x10) = 10;\n  *(uint8_t **)(telegramPtr + 0x14) = dataPtr + 0x26;\n  telegramPtr[1] = 3;\n  telegramPtr[0x19] = 3;\n  *(uint16_t *)(telegramPtr + 0x1A) = 0x14;\n  *(uint16_t *)(telegramPtr + 0x28) = 3;\n  *(uint16_t *)(telegramPtr + 4) = 0x10;\n  *(uint8_t **)(telegramPtr + 8) = dataPtr;\n  telegramPtr[0xD] = 0x10;\n  *(uint16_t *)(telegramPtr + 0x1C) = 0xC;\n  telegramPtr[0x25] = 0x10;\n  *(uint16_t *)(telegramPtr + 0x34) = 8;\n  *(uint16_t *)(telegramPtr + 0x26) = 0x1C;\n  *(uint8_t **)(telegramPtr + 0x2C) = dataPtr + 0x38;\n  telegramPtr[0x30] = 2;\n  telegramPtr[0x31] = 2;\n  *(uint8_t **)(telegramPtr + 0x38) = data8024Ptr;\n  telegramPtr[0x3C] = 2;\n  *telegramPtr = 1;\n  telegramPtr[0xC] = 1;\n  telegramPtr[0x18] = 1;\n  telegramPtr[0x24] = 1;\n  *(uint16_t *)(telegramPtr + 0x3E) = 1;\n  *(uint16_t *)(telegramPtr + 0x40) = 1;\n  *(uint16_t *)(telegramPtr + 2) = 0;\n  *(uint8_t **)(telegramPtr + 0x20) = dataPtr + 0x28;\n  *(uint16_t *)(telegramPtr + 0x32) = 0;\n  telegramPtr[0x3D] = 5;\n  *(uint8_t **)(telegramPtr + 0x44) = data8024Ptr + 2;\n\n  Modbus::begin((Modbus *)masterPtr, 0x4B00);\n  *(uint16_t *)(masterPtr + 0x56) = 2000;\n\n  currentMillis = millis();\n  *(uint32_t *)DAT_u32wait_000805b8 = currentMillis;\n  *(uint32_t *)DAT_tiempopid1_000805bc = currentMillis + 1000;\n  *(uint32_t *)DAT_dutyalto1_000805c0 = currentMillis + 1000;\n  *(uint32_t *)DAT_dutybajo1_000805c4 = currentMillis + 1000;\n  *(uint32_t *)DAT_reloj_000805c8 = currentMillis + 1000;\n  *DAT_u8state_000805cc = 0;\n\n  startForkserver(0);\n}\n",
            "called": [
                "pinMode",
                "startForkserver",
                "digitalWrite",
                "begin",
                "millis"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000804a8",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initializeSystem_000804a8"
        },
        "FUN_00084440": {
            "renaming": {
                "FUN_00084440": "read_data_and_update_total_00084440",
                "param_1": "file_descriptor",
                "param_2": "data_address",
                "iVar1": "bytes_read",
                "PTR_": "data_address + ",
                "DAT_": ""
            },
            "code": "void read_data_and_update_total_00084440(int file_descriptor, int data_address){\n  int bytes_read;\n  \n  bytes_read = _read_r(file_descriptor, (int)*(short *)(PTR_0xe));\n  if (bytes_read >= 0) {\n    *(int *)(PTR_0x50) += bytes_read;\n    return;\n  }\n  *(ushort *)(PTR_0xc) &= 0xefff;\n  return;\n}",
            "called": [
                "_read_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084440",
            "calling": [],
            "imported": false,
            "current_name": "read_data_and_update_total_00084440"
        },
        "FUN_000802da": {
            "renaming": {
                "FUN_000802da": "build_response_000802da",
                "this": "this",
                "telegram": "telegram",
                "uVar1": "function_code",
                "in_r1": "register_address",
                "bVar3": "byte_count",
                "in_r2": "register_values",
                "puVar4": "current_register",
                "uVar5": "response_size",
                "uVar6": "register_value",
                "uVar7": "telegram_length",
                "puVar8": "register_values_end",
                "local_1c": "function_code",
                "local_1b": "byte_count",
                "local_1a": "register_address",
                "uVar2": "high_byte_address"
            },
            "code": "int8_t __thiscall Modbus::build_response_000802da(Modbus *this, modbus_t telegram)\n    {\n        uchar function_code;\n        ushort register_address;\n        byte byte_count;\n        ushort *register_values;\n        ushort *current_register;\n        uint8_t response_size;\n        ushort high_byte;\n        ushort low_byte;\n        \n        uint telegram_length = (uint)telegram;\n        \n        if (this->slave_id != \"\\0\") {\n            return -2;\n        }\n        \n        if (this->state != \"\\0\") {\n            return -1;\n        }\n        \n        if (0xf6 < (byte)(function_code - 1)) {\n            return -3;\n        }\n        \n        this->response_buffer[0] = function_code;\n        this->response_buffer[1] = byte_count;\n        this->register_values = register_values;\n        this->response_buffer[2] = (uchar)((uint)register_address >> 8);\n        this->response_buffer[3] = (uchar)register_address;\n        \n        uchar high_byte_address = (uchar)telegram_length;\n        uchar low_byte_address = (uchar)(telegram_length >> 8);\n        \n        switch(byte_count) {\n            case \"\\x01\":\n            case \"\\x02\":\n            case \"\\x03\":\n            case \"\\x04\":\n                this->response_buffer[4] = low_byte_address;\n                break;\n            case \"\\x05\":\n                ushort register_value = *register_values;\n                if (register_value != 0) {\n                    register_value = 1;\n                }\n                this->response_buffer[4] = -(char)register_value;\n                telegram_length = 0;\n                break;\n            case \"\\x06\":\n                this->response_buffer[4] = (uchar)((uint)*register_values >> 8);\n                telegram_length = (uint)*register_values;\n                break;\n            default:\n                goto switchD_0008031e_caseD_7;\n            case \"\\x0f\":\n                byte_count = (byte)(telegram_length >> 3) & 0xfe;\n                if ((telegram_length & 0xf) != 0) {\n                    byte_count = byte_count + 1;\n                }\n                this->response_buffer[5] = high_byte_address;\n                this->response_buffer[4] = low_byte_address;\n                this->response_buffer[6] = byte_count;\n                response_size = \"\\a\";\n                goto LAB_0008034a;\n            case \"\\x10\":\n                this->response_buffer[4] = low_byte_address;\n                this->response_buffer[5] = high_byte_address;\n                current_register = register_values + -1;\n                this->response_buffer[6] = high_byte_address * \"\\x02\";\n                this->response_buffer_size = \"\\a\";\n                ushort register_value;\n                ushort high_byte;\n                ushort low_byte;\n                ushort register_value_size;\n                ushort response_buffer_size;\n                ushort register_value_size_plus_one;\n                ushort response_buffer_size_plus_one;\n                while (current_register != register_values + telegram_length) {\n                    register_value = current_register[1];\n                    register_value_size = this->response_buffer_size;\n                    high_byte = (uchar)((uint)register_value >> 8);\n                    low_byte = (uchar)register_value;\n                    this->response_buffer[register_value_size] = high_byte;\n                    response_buffer_size = register_value_size + 1;\n                    this->response_buffer_size = response_buffer_size;\n                    this->response_buffer[response_buffer_size] = low_byte;\n                    register_value_size_plus_one = register_value_size + 2;\n                    this->response_buffer_size = register_value_size_plus_one;\n                    current_register = current_register + 1;\n                }\n                goto switchD_0008031e_caseD_7;\n        }\n        \n        this->response_buffer[5] = (uchar)telegram_length;\n        response_size = \"\\x06\";\n        \n        LAB_0008034a:\n        this->response_buffer_size = response_size;\n        \n        send_tx_buffer(this);\n        \n        this->state = \"\\x01\";\n        \n        return \"\\0\";\n    }",
            "called": [
                "sendTxBuffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000802da",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "build_response_000802da"
        },
        "FUN_00080f9c": {
            "renaming": {
                "FUN_00080f9c": "find_value_at_index_00080f9c",
                "param_1": "value",
                "param_2": "length",
                "param_3": "divisor",
                "param_4": "threshold",
                "local_58": "values",
                "uVar1": "quotient",
                "uVar2": "index"
            },
            "code": "uint32_t find_value_at_index_00080f9c(uint32_t *value, uint32_t length, uint32_t divisor, uint32_t threshold) {\n  uint32_t values[16];\n  values[0] = *(uint32_t *)PTR_DAT_0008102c;\n  values[1] = *(uint32_t *)(PTR_DAT_0008102c + 4);\n  values[2] = *(uint32_t *)(PTR_DAT_0008102c + 8);\n  values[3] = *(uint32_t *)(PTR_DAT_0008102c + 0xc);\n  values[4] = *(uint32_t *)(PTR_DAT_0008102c + 0x10);\n  values[5] = *(uint32_t *)(PTR_DAT_0008102c + 0x14);\n  values[6] = *(uint32_t *)(PTR_DAT_0008102c + 0x18);\n  values[7] = *(uint32_t *)(PTR_DAT_0008102c + 0x1c);\n  values[8] = *(uint32_t *)(PTR_DAT_0008102c + 0x20);\n  values[9] = *(uint32_t *)(PTR_DAT_0008102c + 0x24);\n  values[10] = *(uint32_t *)(PTR_DAT_0008102c + 0x28);\n  values[11] = *(uint32_t *)(PTR_DAT_0008102c + 0x2c);\n  values[12] = *(uint32_t *)(PTR_DAT_0008102c + 0x30);\n  values[13] = *(uint32_t *)(PTR_DAT_0008102c + 0x34);\n  values[14] = *(uint32_t *)(PTR_DAT_0008102c + 0x38);\n  values[15] = *(uint32_t *)(PTR_DAT_0008102c + 0x3c);\n  *value = 1;\n  *(value + 1) = 0;\n  *(value + 0x48) = 0x202;\n  *(value + 0x41) = 0;\n  *(value + 0x45) = 0;\n  uint32_t quotient = length / (divisor * 2);\n  if (length == divisor * 2 * quotient) {\n    quotient--;\n  }\n  uint32_t index = 0;\n  do {\n    if ((threshold * (int)(((uint64_t)length / (uint64_t)((quotient + 1) * 2)) / (uint64_t)DAT_00081030)) <= values[index]) {\n      *(value + 1) = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | *(value + 1);\n      return 0;\n    }\n    index++;\n  } while (index != 0x10);\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f9c",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "find_value_at_index_00080f9c"
        },
        "FUN_00081210": {
            "renaming": {
                "FUN_00081210": "configure_pin_00081210",
                "ulPin": "pin_number",
                "ulMode": "mode",
                "puVar1": "pin_description",
                "puVar2": "pin_status",
                "uVar3": "pin_type",
                "bVar4": "pin_mode",
                "bVar5": "pin_status_value",
                "iVar6": "pin_description_value",
                "iVar7": "pin_description_index"
            },
            "code": "void configure_pin_00081210(uint32_t pin_number, uint32_t mode)\\n{\\n  uint8_t *pin_status = PTR_g_pinStatus_00081310;\\n  uint8_t *pin_description = PTR_g_APinDescription_0008130c;\\n  if (pin_description[pin_number * 0x1c + 0xc] != \"\\0\") {\\n    if ((pin_status[pin_number] & 0xf) == 4) {\\n      adc_disable_channel(DAT_00081314, pin_description[pin_number * 0x1c + 0x19]);\\n    }\\n    uint8_t pin_status_value = pin_status[pin_number];\\n    uint8_t pin_mode = pin_status_value & 0xf;\\n    if ((pin_mode < 3) && (pin_status_value != 0)) {\\n      if (pin_mode == 2 && mode == 0) {\\n        return;\\n      }\\n      else if (pin_mode == 1 && mode == 2) {\\n        return;\\n      }\\n      else if (pin_mode == 3 && mode == 1) {\\n        return;\\n      }\\n    }\\n    if (mode != 1) {\\n      if (mode == 0) {\\n        int pin_description_index = pin_number * 0x1c;\\n        pmc_enable_periph_clk(*(undefined4 *)(pin_description + pin_description_index + 8));\\n        PIO_Configure(*(undefined4 *)(pin_description + pin_description_index), 3, *(undefined4 *)(pin_description + pin_description_index + 4), 0);\\n        pin_status_value = pin_status_value & 0xf0 | 2;\\n      }\\n      else {\\n        if (mode != 2) {\\n          return;\\n        }\\n        int pin_description_index = pin_number * 0x1c;\\n        pmc_enable_periph_clk(*(undefined4 *)(pin_description + pin_description_index + 8));\\n        PIO_Configure(*(undefined4 *)(pin_description + pin_description_index), 3, *(undefined4 *)(pin_description + pin_description_index + 4), 1);\\n        pin_status_value = pin_status_value & 0xf0 | 1;\\n      }\\n      pin_status[pin_number] = pin_status_value;\\n      return;\\n    }\\n    int pin_description_index = pin_number * 0x1c;\\n    int pin_description_value = *(int *)(pin_description + pin_description_index);\\n    uint8_t pin_direction = pin_status_value >> 4;\\n    uint8_t pin_type = (pin_direction == 0) ? 4 : 5;\\n    PIO_Configure(pin_description_value, pin_type, *(undefined4 *)(pin_description + pin_description_index + 4), *(undefined4 *)(pin_description + pin_description_index + 0x10));\\n    pin_status[pin_number] = pin_status[pin_number] & 0xf0 | 3;\\n    if (*(int *)(pin_description_value + 0x18) == -1) {\\n      pmc_disable_periph_clk(*(undefined4 *)(pin_description + pin_description_index + 8));\\n      return;\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "PIO_Configure",
                "pmc_enable_periph_clk",
                "pmc_disable_periph_clk",
                "adc_disable_channel"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081210",
            "calling": [
                "setup",
                "digitalWrite",
                "begin"
            ],
            "imported": false,
            "current_name": "configure_pin_00081210"
        },
        "FUN_00083994": {
            "renaming": {
                "FUN_00083994": "decode_data_00083994",
                "param_1": "input_data",
                "param_2": "decode_params",
                "piVar1": "decode_ptr_1",
                "iVar2": "decode_var_1",
                "uVar3": "decode_var_2",
                "uVar4": "decode_var_3",
                "iVar5": "decode_var_4",
                "pcVar6": "decode_func_ptr",
                "iVar7": "decode_var_5"
            },
            "code": "undefined4 decode_data_00083994(int *input_data, int *decode_params) {\n  int *decode_ptr_1;\n  int decode_var_1;\n  ushort decode_var_2;\n  uint decode_var_3;\n  int decode_var_4;\n  code *decode_func_ptr;\n  int decode_var_5;\n  decode_var_2 = *(ushort *)(decode_params + 3);\n  if ((int)((uint)decode_var_2 << 0x1c) < 0) {\n    decode_var_5 = decode_params[4];\n    if (decode_var_5 == 0) {\n      return 0;\n    }\n    decode_var_1 = *decode_params;\n    if ((decode_var_2 & 3) == 0) {\n      decode_var_4 = decode_params[5];\n    }\n    else {\n      decode_var_4 = 0;\n    }\n    *decode_params = decode_var_5;\n    decode_var_1 = decode_var_1 - decode_var_5;\n    decode_params[2] = decode_var_4;\n    do {\n      if (decode_var_1 < 1) {\n        return 0;\n      }\n      decode_var_4 = (*(code *)decode_params[9])(input_data, decode_params[7], decode_var_5, decode_var_1);\n      decode_var_1 = decode_var_1 - decode_var_4;\n      decode_var_5 = decode_var_5 + decode_var_4;\n    } while (0 < decode_var_4);\n    *(ushort *)(decode_params + 3) = *(ushort *)(decode_params + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(decode_params + 3) = decode_var_2 | 0x800;\n  if ((decode_params[1] < 1) && (decode_params[0xf] < 1)) {\n    return 0;\n  }\n  decode_func_ptr = (code *)decode_params[10];\n  if (decode_func_ptr == (code *)0x0) {\n    return 0;\n  }\n  decode_var_3 = (uint)(decode_var_2 | 0x800);\n  decode_var_5 = *input_data;\n  *input_data = 0;\n  if ((decode_var_2 & 0x1000) == 0) {\n    decode_var_1 = (*decode_func_ptr)(input_data, decode_params[7], decode_var_3 & 0x1000, 1);\n    if ((decode_var_1 == -1) && (decode_var_4 = *input_data, decode_var_4 != 0)) {\n      if ((decode_var_4 == 0x1d) || (decode_var_4 == 0x16)) {\n        *input_data = decode_var_5;\n        return 0;\n      }\n      *(ushort *)(decode_params + 3) = *(ushort *)(decode_params + 3) | 0x40;\n      return 0xffffffff;\n    }\n    decode_var_2 = *(ushort *)(decode_params + 3);\n    decode_func_ptr = (code *)decode_params[10];\n  }\n  else {\n    decode_var_1 = decode_params[0x14];\n  }\n  if (((int)(decode_var_3 << 0x1d) < 0) && (decode_var_1 = decode_var_1 - decode_params[1], decode_params[0xc] != 0)) {\n    decode_var_1 = decode_var_1 - decode_params[0xf];\n  }\n  decode_var_1 = (*decode_func_ptr)(input_data, decode_params[7], decode_var_1, 0);\n  if (decode_var_1 == -1) {\n    decode_var_4 = *input_data;\n    if (decode_var_4 != 0) {\n      if ((decode_var_4 != 0x1d) && (decode_var_4 != 0x16)) {\n        *(ushort *)(decode_params + 3) = *(ushort *)(decode_params + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(decode_params + 3) = *(ushort *)(decode_params + 3) & 0xf7ff;\n      *decode_params = decode_params[4];\n      decode_params[1] = 0;\n      goto LAB_00083a00;\n    }\n    decode_var_2 = *(ushort *)(decode_params + 3) & 0xf7ff;\n    decode_params[1] = 0;\n    *(ushort *)(decode_params + 3) = decode_var_2;\n    *decode_params = decode_params[4];\n  }\n  else {\n    decode_var_2 = *(ushort *)(decode_params + 3) & 0xf7ff;\n    *decode_params = decode_params[4];\n    *(ushort *)(decode_params + 3) = decode_var_2;\n    decode_params[1] = 0;\n  }\n  if ((int)((uint)decode_var_2 << 0x13) < 0) {\n    decode_params[0x14] = decode_var_1;\n  }\nLAB_00083a00:\n  decode_ptr_1 = (int *)decode_params[0xc];\n  *input_data = decode_var_5;\n  if (decode_ptr_1 == (int *)0x0) {\n    return 0;\n  }\n  if (decode_ptr_1 != decode_params + 0x10) {\n    _free_r(input_data);\n  }\n  decode_params[0xc] = 0;\n  return 0;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083994",
            "calling": [
                "_fflush_r"
            ],
            "imported": false,
            "current_name": "decode_data_00083994"
        },
        "FUN_00081454": {
            "renaming": {
                "FUN_00081454": "sendData_00081454",
                "this": "instance",
                "uc_data": "data",
                "_tx_buffer": "txBuffer",
                "_pUart": "uart",
                "UART_SR": "uartStatus",
                "_iTail": "tail",
                "_iHead": "head",
                "DAT_000814a4": "bufferSize",
                "_aucBuffer": "data",
                "UART_IER": "interruptEnable"
            },
            "code": "size_t __thiscall UARTClass::sendData_00081454(UARTClass *this, uint8_t data) {\n  RingBuffer *buffer;\n  uint status;\n  buffer = this->txBuffer;\n  if (((int)(this->uart->UART_SR << 0x1e) < 0) && (buffer->tail == buffer->head)) {\n    this->uart->UART_THR = (uint)data;\n  }\n  else {\n    status = DAT_000814a4 & buffer->head + 1U;\n    if ((int)status < 0) {\n      status = (status - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (buffer->tail == status);\n    buffer->data[buffer->head] = data;\n    this->txBuffer->head = status;\n    this->uart->UART_IER = 2;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081454",
            "calling": [],
            "imported": false,
            "current_name": "sendData_00081454"
        },
        "FUN_00081730": {
            "renaming": {
                "FUN_00081730": "FUNC_00081730"
            },
            "code": "\nuint FUNC_00081730(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_0008186a;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081730",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "FUNC_00081730"
        },
        "FUN_00084600": {
            "renaming": {
                "FUN_00084600": "close_file_with_error_handling_00084600",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "error_pointer",
                "iVar2": "close_result"
            },
            "code": "void close_file_with_error_handling_00084600(int *error_code, int file_descriptor)\n{\n    undefined *error_pointer;\n    int close_result;\n    error_pointer = PTR_errno_00084620;\n    *(undefined4 *)PTR_errno_00084620 = 0;\n    close_result = _close(file_descriptor);\n    if ((close_result == -1) && (*(int *)error_pointer != 0)) {\n        *error_code = *(int *)error_pointer;\n        return;\n    }\n    return;\n}",
            "called": [
                "_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084600",
            "calling": [
                "__sclose"
            ],
            "imported": false,
            "current_name": "close_file_with_error_handling_00084600"
        },
        "FUN_00081578": {
            "renaming": {
                "FUN_00081578": "initializeUART_00081578",
                "this": "uart",
                "dwBaudRate": "baudRate",
                "init": "initUART"
            },
            "code": "void __thiscall initializeUART_00081578(UARTClass *uart, uint32_t baudRate)\n{\n  init(uart, baudRate, 0x800);\n  return;\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081578",
            "calling": [],
            "imported": false,
            "current_name": "initializeUART_00081578"
        },
        "FUN_00080ab8": {
            "renaming": {
                "FUN_00080ab8": "do_nothing_00080ab8"
            },
            "code": "\nvoid do_nothing_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ab8",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080ab8"
        },
        "FUN_00081734": {
            "renaming": {
                "FUN_00081734": "FUNC_00081734"
            },
            "code": "\nuint FUNC_00081734(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_0008186a;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081734",
            "calling": [
                "__aeabi_frsub",
                "loop"
            ],
            "imported": false,
            "current_name": "FUNC_00081734"
        },
        "FUN_00084728": {
            "renaming": {
                "FUN_00084728": "read_file_00084728",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "errno_ptr",
                "iVar2": "read_result"
            },
            "code": "void read_file_00084728(int *error_code, int file_descriptor, char *buffer, int buffer_size) {\n                  int read_result;\n                  int *errno_ptr = PTR_errno_0008474c;\n                  *(int *)PTR_errno_0008474c = 0;\n                  read_result = _read(file_descriptor, buffer, buffer_size);\n                  if ((read_result == -1) && (*(int *)errno_ptr != 0)) {\n                    *error_code = *(int *)errno_ptr;\n                    return;\n                  }\n                  return;\n                }",
            "called": [
                "_read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084728",
            "calling": [
                "__sread"
            ],
            "imported": false,
            "current_name": "read_file_00084728"
        },
        "FUN_0008116a": {
            "renaming": {
                "FUN_0008116a": "wait_forever_0008116a"
            },
            "code": "void wait_forever_0008116a(void)\n{\n  while(true);\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008116a",
            "calling": [],
            "imported": false,
            "current_name": "wait_forever_0008116a"
        },
        "FUN_000813e0": {
            "renaming": {
                "FUN_000813e0": "isInitialized_000813e0",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "bool __thiscall UARTClass::isInitialized_000813e0(UARTClass *this)\n{\n  return true;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e0",
            "calling": [],
            "imported": false,
            "current_name": "isInitialized_000813e0"
        },
        "FUN_00083c40": {
            "renaming": {
                "FUN_00083c40": "convert_unicode_to_multibyte_00083c40",
                "param_1": "conversion_category",
                "param_2": "unicode_character",
                "param_3": "output_buffer",
                "uVar1": "status_code",
                "iVar2": "buffer_index",
                "uVar3": "multibyte_character",
                "pbVar4": "current_byte",
                "local_1c": "previous_bytes",
                "abStack_1b": "previous_bytes"
            },
            "code": "uint convert_unicode_to_multibyte_00083c40(undefined4 conversion_category, uint unicode_character, byte **output_buffer)\n{\n  uint status_code;\n  int buffer_index;\n  uint multibyte_character;\n  byte *current_byte;\n  byte previous_bytes[3];\n  \n  if (-1 < (int)((uint)*(ushort *)(output_buffer + 3) << 0x12))) {\n    *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) | 0x2000;\n    output_buffer[0x19] = (byte *)((uint)output_buffer[0x19] | 0x2000);\n  }\n  status_code = __locale_mb_cur_max();\n  if ((status_code == 1) && (unicode_character - 1 < 0xff)) {\n    multibyte_character = unicode_character & 0xff;\n    current_byte = (byte *)multibyte_character;\n  }\n  else {\n    status_code = _wcrtomb_r(conversion_category, &current_byte, unicode_character, output_buffer + 0x17);\n    if (status_code == 0xffffffff) {\n      *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (status_code == 0) {\n      return unicode_character;\n    }\n    multibyte_character = (uint)current_byte;\n  }\n  buffer_index = 0;\n  do {\n    previous_bytes = output_buffer[2] + -1;\n    output_buffer[2] = previous_bytes;\n    if ((int)previous_bytes < 0) {\n      if ((int)output_buffer[6] <= (int)previous_bytes) {\n        **output_buffer = (byte)multibyte_character;\n        previous_bytes = *output_buffer;\n        multibyte_character = (uint)*previous_bytes;\n        if (multibyte_character != 10) goto LAB_00083c90;\n      }\n      buffer_index = __swbuf_r(conversion_category, multibyte_character, output_buffer);\n      if (buffer_index == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **output_buffer = (byte)multibyte_character;\n      previous_bytes = *output_buffer;\nLAB_00083c90:\n      *output_buffer = previous_bytes + 1;\n    }\n    if (status_code <= buffer_index + 1) {\n      return unicode_character;\n    }\n    multibyte_character = (uint)previous_bytes[buffer_index];\n    buffer_index = buffer_index + 1;\n  } while( true );\n}",
            "called": [
                "__locale_mb_cur_max",
                "__swbuf_r",
                "_wcrtomb_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c40",
            "calling": [
                "__sprint_r.part.0"
            ],
            "imported": false,
            "current_name": "convert_unicode_to_multibyte_00083c40"
        },
        "FUN_0008116e": {
            "renaming": {
                "FUN_0008116e": "updateTickIfFalse_0008116e",
                "iVar1": "isFalse"
            },
            "code": "void updateTickIfFalse_0008116e(void)\n{\n  int isFalse = __false();\n  if (isFalse == 0) {\n    tickReset();\n    TimeTick_Increment();\n    return;\n  }\n  return;\n}",
            "called": [
                "__false",
                "tickReset",
                "TimeTick_Increment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008116e",
            "calling": [],
            "imported": false,
            "current_name": "updateTickIfFalse_0008116e"
        },
        "FUN_000805d0": {
            "renaming": {
                "FUN_000805d0": "FUNC_000805d0"
            },
            "code": "\nvoid FUNC_000805d0(void)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  undefined *puVar4;\n  undefined *puVar5;\n  undefined *puVar6;\n  undefined *puVar7;\n  undefined *puVar8;\n  undefined *puVar9;\n  undefined2 uVar10;\n  uint uVar11;\n  uint32_t uVar12;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  undefined4 uVar15;\n  int iVar16;\n  int iVar17;\n  int *piVar18;\n  undefined4 uVar19;\n  int iVar20;\n  \n  puVar7 = PTR_estado_0008089c;\n  puVar9 = PTR_segundos_00080898;\n  puVar8 = PTR_minutos_00080894;\n  puVar3 = PTR_mmt_0008087c;\n  puVar5 = PTR_ssres_00080878;\n  puVar4 = PTR_mmres_00080874;\n  puVar2 = PTR_duty1_00080834;\n  puVar1 = PTR_au16data_00080830;\n  if ((byte)*PTR_u8state_0008082c < 10) {\n                    /* WARNING: Could not recover jumptable at 0x000805f0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_000805f0::switchdataD_000805f4 +\n              (uint)(&switchD_000805f0::switchdataD_000805f4)[(byte)*PTR_u8state_0008082c] * 2))();\n    return;\n  }\n  iVar17 = *(int *)PTR_minutos_00080894;\n  iVar16 = iVar17 - *(int *)PTR_mmres_00080874;\n  if (iVar16 < 0) {\n    iVar16 = iVar16 + 0x3c;\n  }\n  *(int *)PTR_mmt_0008087c = iVar16;\n  puVar6 = PTR_sst_00080880;\n  uVar11 = *(uint *)puVar9;\n  iVar16 = uVar11 - *(int *)puVar5;\n  *(int *)PTR_sst_00080880 = iVar16;\n  if (iVar16 < 0) {\n    *(int *)puVar3 = *(int *)puVar3 + -1;\n    *(int *)puVar6 = iVar16 + 0x3c;\n  }\n  iVar16 = *(int *)puVar3;\n  iVar20 = *(int *)puVar6;\n  *(short *)(puVar1 + 0x36) = (short)iVar16;\n  *(short *)(puVar1 + 0x38) = (short)iVar20;\n  if ((iVar16 == 0) && (iVar20 == 0)) {\n    *(undefined4 *)PTR_terminar_ciclo_00080868 = 1;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n  }\n  puVar6 = PTR_segundosp_00080888;\n  puVar3 = PTR_minutosp_00080884;\n  if (*(int *)PTR_minutosp_00080884 == iVar17) {\n    iVar16 = 1 - uVar11;\n    if (1 < uVar11) {\n      iVar16 = 0;\n    }\n    *(int *)PTR_segundosp_00080888 = iVar16;\n    if (iVar16 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    *(int *)puVar3 = iVar17;\n    puVar3 = PTR_espera_plancha_00080a50;\n    *(uint *)puVar6 = uVar11;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    *(undefined4 *)puVar3 = 0;\n  }\n  puVar6 = PTR_espera_plancha_0008088c;\n  puVar3 = PTR_tiempo_espera_00080860;\n  iVar16 = *(int *)puVar7;\n  if (iVar16 == 0) {\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    piVar18 = (int *)PTR_espera_plancha_0008088c;\nLAB_000808f2:\n    *piVar18 = iVar16;\n  }\n  else {\n    if (iVar16 != 1) goto LAB_000808f4;\n    if (*(int *)PTR_espera_plancha_0008088c < *(int *)PTR_tiempo_espera_00080860) {\n      uVar12 = millis();\n      puVar7 = PTR_reloj_00080890;\n      if (*(uint *)PTR_reloj_00080890 < uVar12) {\n        *(int *)puVar6 = *(int *)puVar6 + 1;\n        uVar12 = millis();\n        *(uint32_t *)puVar7 = uVar12 + 1000;\n      }\n    }\n    if (*(int *)puVar6 < *(int *)puVar3) goto LAB_000808f4;\n    *(int *)PTR_espera_plancha_0008088c = *(int *)puVar3 + 1;\n    piVar18 = (int *)PTR_mmres_00080a20;\n    puVar3 = PTR_ssres_00080a1c;\n    if (*(int *)puVar4 < *(int *)puVar8) {\n      uVar12 = millis();\n      puVar3 = PTR_reloj_00080890;\n      if (*(uint *)PTR_reloj_00080890 < uVar12) {\n        *(int *)puVar5 = *(int *)puVar5 + 1;\n        uVar12 = millis();\n        *(uint32_t *)puVar3 = uVar12 + 1000;\n      }\n    }\n    else {\n      if (*(int *)puVar4 != *(int *)puVar8) goto LAB_000808f4;\n      if (*(int *)puVar9 < *(int *)puVar5) {\n        iVar16 = 0;\n        *(undefined4 *)PTR_ssres_00080a1c = 0;\n        goto LAB_000808f2;\n      }\n      uVar12 = millis();\n      puVar8 = PTR_reloj_00080a54;\n      if (*(uint *)PTR_reloj_00080a54 < uVar12) {\n        *(int *)puVar3 = *(int *)puVar3 + 1;\n        uVar12 = millis();\n        *(uint32_t *)puVar8 = uVar12 + 1000;\n      }\n    }\n    if (0x3b < *(int *)puVar5) {\n      *(undefined4 *)PTR_ssres_00080a1c = 0;\n      *(int *)puVar4 = *(int *)puVar4 + 1;\n    }\n  }\nLAB_000808f4:\n  uVar12 = millis();\n  puVar8 = PTR_kia1_00080a60;\n  puVar3 = PTR_incre_00080a5c;\n  puVar5 = PTR_tiempopid1_00080a58;\n  puVar4 = PTR_YN_00080a24;\n  if (*(uint *)PTR_tiempopid1_00080a58 < uVar12) {\n    uVar13 = __floatsisf(*(undefined4 *)PTR_tempe_z1_00080a28);\n    uVar13 = __aeabi_fsub(uVar13,*(undefined4 *)PTR_temperatura1_00080a2c);\n    *(undefined4 *)PTR_e1_00080a30 = uVar13;\n    puVar9 = PTR_ep1_00080a34;\n    uVar19 = *(undefined4 *)PTR_ep1_00080a34;\n    uVar14 = __addsf3(uVar13,uVar19);\n    uVar14 = __aeabi_fmul(uVar14,*(undefined4 *)puVar8);\n    puVar7 = PTR_kip1_00080a64;\n    uVar14 = __addsf3(uVar14,*(undefined4 *)PTR_kip1_00080a64);\n    *(undefined4 *)puVar8 = uVar14;\n    uVar19 = __aeabi_fsub(uVar13,uVar19);\n    uVar19 = __aeabi_fmul(uVar19,*(undefined4 *)PTR_kda1_00080a38);\n    puVar8 = PTR_kdp1_00080a3c;\n    uVar19 = __aeabi_fsub(uVar19,*(undefined4 *)PTR_kdp1_00080a3c);\n    *(undefined4 *)PTR_kda1_00080a38 = uVar19;\n    uVar15 = __aeabi_fmul(uVar13,*(undefined4 *)PTR_kpa1_00080a40);\n    uVar15 = __addsf3(uVar15,uVar14);\n    __addsf3(uVar15,uVar19);\n    uVar15 = __aeabi_f2iz();\n    *(undefined4 *)PTR_pid1_00080a44 = uVar15;\n    uVar15 = __floatsisf();\n    *(undefined4 *)puVar9 = uVar13;\n    *(undefined4 *)puVar4 = uVar15;\n    *(undefined4 *)puVar3 = 0;\n    *(undefined4 *)puVar7 = uVar14;\n    *(undefined4 *)puVar8 = uVar19;\n    uVar12 = millis();\n    *(uint32_t *)puVar5 = uVar12 + *(int *)puVar2;\n  }\n  uVar13 = __floatsisf(*(undefined4 *)puVar2);\n  iVar16 = __aeabi_fcmpge(*(undefined4 *)puVar4,uVar13);\n  if (iVar16 != 0) {\n    *(undefined4 *)PTR_YN_00080a24 = uVar13;\n  }\n  iVar16 = __aeabi_fcmple(*(undefined4 *)puVar4,0);\n  if (iVar16 != 0) {\n    *(undefined4 *)PTR_YN_00080a24 = 0;\n  }\n  uVar10 = __fixunssfsi(*(undefined4 *)puVar4);\n  iVar16 = *(int *)puVar3;\n  *(undefined2 *)(puVar1 + 0x2a) = uVar10;\n  *(int *)puVar3 = iVar16 + 1;\n  *(uint *)PTR_in1_00080a4c = *(ushort *)PTR_data8024_00080a48 & 1 ^ 1;\n  return;\n}\n\n",
            "called": [
                "__aeabi_f2iz",
                "__aeabi_fcmple",
                "__fixunssfsi",
                "query",
                "__aeabi_fsub",
                "poll",
                "__aeabi_fmul",
                "__aeabi_fcmpge",
                "__addsf3",
                "millis",
                "__floatsisf",
                "__floatunsisf"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000805d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUNC_000805d0"
        },
        "FUN_000813e4": {
            "renaming": {
                "FUN_000813e4": "calculateReceivedDataSize_000813e4",
                "this": "uartInstance",
                "_rx_buffer": "receiveBuffer",
                "_iHead": "headIndex",
                "_iTail": "tailIndex",
                "dataSize": "dataSize"
            },
            "code": "int __thiscall UARTClass::calculateReceivedDataSize_000813e4(UARTClass *this)\n{\n  int headIndex = this->_rx_buffer->_iHead;\n  int tailIndex = this->_rx_buffer->_iTail;\n  int dataSize = headIndex - tailIndex & 0x7f;\n  return dataSize;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e4",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "calculateReceivedDataSize_000813e4"
        },
        "FUN_00081cbc": {
            "renaming": {
                "FUN_00081cbc": "isEndOfString_00081cbc",
                "in_CY": "currentChar"
            },
            "code": "bool isEndOfString_00081cbc(void)\n{\n    char currentChar;\n    __aeabi_cfrcmple();\n    return currentChar == '\\0';\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081cbc",
            "calling": [],
            "imported": false,
            "current_name": "isEndOfString_00081cbc"
        },
        "FUN_00080aac": {
            "renaming": {
                "FUN_00080aac": "handle_UART_interrupt_00080aac",
                "PTR_Serial_00080ab4": "PTR_Serial"
            },
            "code": "void handle_UART_interrupt_00080aac(void)\n{\n  UARTClass::IrqHandler((UARTClass *)PTR_Serial_00080ab4);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aac",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_00080aac"
        },
        "FUN_0008120c": {
            "renaming": {
                "FUN_0008120c": "do_nothing_0008120c"
            },
            "code": "\nvoid do_nothing_0008120c(uint32_t ms)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008120c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_0008120c"
        },
        "FUN_00084290": {
            "renaming": {
                "FUN_00084290": "get_ctype_charset_00084290",
                "PTR_lc_ctype_charset_00084294": "ctype_charset"
            },
            "code": "const char* get_ctype_charset_00084290()\n{\n    return PTR_lc_ctype_charset_00084294;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084290",
            "calling": [
                "_wcrtomb_r"
            ],
            "imported": false,
            "current_name": "get_ctype_charset_00084290"
        },
        "FUN_000846b4": {
            "renaming": {
                "FUN_000846b4": "get_file_status_000846b4",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "file_status",
                "puVar1": "error_code_pointer",
                "iVar2": "file_status_result",
                "PTR_errno_000846d8": "error_code_ptr"
            },
            "code": "void get_file_status_000846b4(int *error_code, int file_descriptor, stat *file_status) {\n\tint file_status_result = _fstat(file_descriptor, file_status);\n\tif (file_status_result == -1 && *error_code != 0) {\n\t\t*error_code = errno;\n\t}\n}",
            "called": [
                "_fstat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846b4",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "get_file_status_000846b4"
        },
        "FUN_0008120e": {
            "renaming": {
                "FUN_0008120e": "do_nothing_0008120e"
            },
            "code": "\nvoid do_nothing_0008120e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008120e",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "do_nothing_0008120e"
        },
        "FUN_000811a8": {
            "renaming": {
                "FUN_000811a8": "find_string_difference_000811a8",
                "cOld_UNUSED": "old_string",
                "cNew_UNUSED": "new_string"
            },
            "code": "int find_string_difference_000811a8(char *old_string, char *new_string){\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811a8",
            "calling": [],
            "imported": false,
            "current_name": "find_string_difference_000811a8"
        },
        "FUN_000813a8": {
            "renaming": {
                "FUN_000813a8::FUN_000813a8": "initializeQueue",
                "this": "queue",
                "_iHead": "head",
                "_iTail": "tail",
                "FUN_000813a8": "initializeQueue_000813a8"
            },
            "code": "initializeQueue_000813a8* __thiscall initializeQueue_000813a8(initializeQueue_000813a8 *queue)\n{\n  memset(queue, 0, 0x80);\n  queue->head = 0;\n  queue->tail = 0;\n  return queue;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813a8",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "initializeQueue_000813a8"
        },
        "FUN_00083d9c": {
            "renaming": {
                "FUN_00083d9c": "FUNC_00083d9c"
            },
            "code": "\nvoid FUNC_00083d9c(undefined4 param_1,int param_2)\n\n{\n  undefined *puVar1;\n  uint uVar2;\n  int iVar3;\n  int iVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  undefined *puVar8;\n  \n  if (param_2 == 0) {\n    return;\n  }\n  __malloc_lock();\n  puVar8 = PTR___malloc_av__00083f24;\n  uVar2 = *(uint *)(param_2 + -4);\n  iVar6 = param_2 + -8;\n  uVar5 = uVar2 & 0xfffffffe;\n  iVar4 = iVar6 + uVar5;\n  uVar7 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n  if (*(int *)(PTR___malloc_av__00083f24 + 8) == iVar4) {\n    uVar7 = uVar7 + uVar5;\n    if (-1 < (int)(uVar2 << 0x1f)) {\n      iVar6 = iVar6 - *(int *)(param_2 + -8);\n      iVar3 = *(int *)(iVar6 + 0xc);\n      iVar4 = *(int *)(iVar6 + 8);\n      uVar7 = uVar7 + *(int *)(param_2 + -8);\n      *(int *)(iVar4 + 0xc) = iVar3;\n      *(int *)(iVar3 + 8) = iVar4;\n    }\n    uVar2 = *(uint *)PTR___malloc_trim_threshold_00083f2c;\n    *(uint *)(iVar6 + 4) = uVar7 | 1;\n    *(int *)(puVar8 + 8) = iVar6;\n    if (uVar2 <= uVar7) {\n      _malloc_trim_r(param_1,*(undefined4 *)PTR___malloc_top_pad_00083f30);\n    }\n  }\n  else {\n    uVar2 = uVar2 & 1;\n    *(uint *)(iVar4 + 4) = uVar7;\n    if (uVar2 == 0) {\n      iVar6 = iVar6 - *(int *)(param_2 + -8);\n      puVar1 = *(undefined **)(iVar6 + 8);\n      uVar5 = uVar5 + *(int *)(param_2 + -8);\n      if (puVar1 == puVar8 + 8) {\n        uVar2 = 1;\n      }\n      else {\n        iVar3 = *(int *)(iVar6 + 0xc);\n        *(int *)(puVar1 + 0xc) = iVar3;\n        *(undefined **)(iVar3 + 8) = puVar1;\n      }\n    }\n    else {\n      uVar2 = 0;\n    }\n    if (-1 < *(int *)(iVar4 + uVar7 + 4) << 0x1f) {\n      uVar5 = uVar5 + uVar7;\n      puVar1 = *(undefined **)(iVar4 + 8);\n      if ((uVar2 == 0) && (puVar1 == PTR_PTR___malloc_av__00083f28)) {\n        *(int *)(puVar8 + 0x14) = iVar6;\n        *(int *)(puVar8 + 0x10) = iVar6;\n        *(undefined **)(iVar6 + 0xc) = puVar1;\n        *(undefined **)(iVar6 + 8) = puVar1;\n        *(uint *)(iVar6 + 4) = uVar5 | 1;\n        *(uint *)(iVar6 + uVar5) = uVar5;\n        goto LAB_00083e30;\n      }\n      iVar4 = *(int *)(iVar4 + 0xc);\n      *(int *)(puVar1 + 0xc) = iVar4;\n      *(undefined **)(iVar4 + 8) = puVar1;\n    }\n    *(uint *)(iVar6 + 4) = uVar5 | 1;\n    *(uint *)(iVar6 + uVar5) = uVar5;\n    if (uVar2 == 0) {\n      if (uVar5 < 0x200) {\n        uVar2 = *(uint *)(puVar8 + 4);\n        puVar1 = puVar8 + (uVar5 & 0xfffffff8);\n        iVar4 = *(int *)(puVar1 + 8);\n        *(int *)(iVar6 + 8) = iVar4;\n        *(undefined **)(iVar6 + 0xc) = puVar1;\n        *(uint *)(puVar8 + 4) = uVar2 | 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU);\n        *(int *)(puVar1 + 8) = iVar6;\n        *(int *)(iVar4 + 0xc) = iVar6;\n        __malloc_unlock(param_1);\n        return;\n      }\n      uVar2 = uVar5 >> 9;\n      if (uVar2 < 5) {\n        iVar4 = (uVar5 >> 6) + 0x38;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x15) {\n        iVar4 = uVar2 + 0x5b;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x55) {\n        iVar4 = (uVar5 >> 0xc) + 0x6e;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x155) {\n        iVar4 = (uVar5 >> 0xf) + 0x77;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x555) {\n        iVar4 = (uVar5 >> 0x12) + 0x7c;\n        iVar3 = iVar4 * 2;\n      }\n      else {\n        iVar3 = 0xfc;\n        iVar4 = 0x7e;\n      }\n      puVar8 = puVar8 + iVar3 * 4;\n      puVar1 = *(undefined **)(puVar8 + 8);\n      if (puVar1 == puVar8) {\n        *(uint *)(PTR___malloc_av__00083f24 + 4) =\n             *(uint *)(PTR___malloc_av__00083f24 + 4) | 1 << (iVar4 >> 2 & 0xffU);\n        puVar8 = puVar1;\n      }\n      else {\n        do {\n          if ((*(uint *)(puVar1 + 4) & 0xfffffffc) <= uVar5) break;\n          puVar1 = *(undefined **)(puVar1 + 8);\n        } while (puVar8 != puVar1);\n        puVar8 = *(undefined **)(puVar1 + 0xc);\n      }\n      *(undefined **)(iVar6 + 0xc) = puVar8;\n      *(undefined **)(iVar6 + 8) = puVar1;\n      *(int *)(puVar8 + 8) = iVar6;\n      *(int *)(puVar1 + 0xc) = iVar6;\n    }\n  }\nLAB_00083e30:\n  __malloc_unlock(param_1);\n  return;\n}\n\n",
            "called": [
                "_malloc_trim_r",
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083d9c",
            "calling": [
                "__sfvwrite_r",
                "__swsetup_r",
                "_fclose_r",
                "_realloc_r",
                "free",
                "__sflush_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "FUNC_00083d9c"
        },
        "FUN_00083c08": {
            "renaming": {
                "FUN_00083c08": "do_nothing_00083c08"
            },
            "code": "\nvoid do_nothing_00083c08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c08",
            "calling": [
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c08"
        },
        "FUN_000818c8": {
            "renaming": {
                "FUN_000818c8": "calculate_signed_multiply_000818c8",
                "param_1": "multiplicand",
                "param_2": "multiplier",
                "uVar1": "multiplier_copy",
                "uVar2": "multiplicand_copy",
                "uVar4": "shift_amount",
                "uVar5": "sign_mask",
                "uVar7": "partial_product",
                "iVar3": "leading_zero_count",
                "iVar6": "sign_extension",
                "bVar8": "is_multiplicand_nonzero"
            },
            "code": "uint calculate_signed_multiply_000818c8(uint multiplicand, uint multiplier)\n{\n  uint result = 0;\n  bool multiplicand_is_negative = multiplicand >> 31;\n  bool multiplier_is_negative = multiplier >> 31;\n\n  if ((multiplicand | multiplier) == 0) {\n    return multiplicand;\n  }\n  if (multiplicand_is_negative) {\n    multiplicand = -multiplicand;\n  }\n  if (multiplier_is_negative) {\n    multiplier = -multiplier;\n  }\n  while (multiplier != 0) {\n    if (multiplier & 1) {\n      result += multiplicand;\n    }\n    multiplicand <<= 1;\n    multiplier >>= 1;\n  }\n  if (multiplicand_is_negative ^ multiplier_is_negative) {\n    result = -result;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000818c8",
            "calling": [],
            "imported": false,
            "current_name": "calculate_signed_multiply_000818c8"
        },
        "FUN_00081bf4": {
            "renaming": {
                "FUN_00081bf4": "calculate_result_00081bf4",
                "param_1": "input1",
                "param_2": "input2",
                "uVar2": "doubled_input1",
                "uVar3": "doubled_input2",
                "uVar4": "or_result",
                "bVar1": "is_less_than_zero",
                "bVar5": "is_zero"
            },
            "code": "uint calculate_result_00081bf4(uint input1, uint input2) {\n  bool is_negative1 = (int)input1 >> 0x18 == -1;\n  bool is_negative2 = (int)input2 >> 0x18 == -1;\n  uint doubled_input1 = input1 * 2;\n  uint doubled_input2 = input2 * 2;\n  if ((is_negative1 || is_negative2) && (((is_negative1 && ((input1 & 0x7fffff) != 0)) || ((is_negative2 && ((input2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  uint or_result = doubled_input1 | input2 & 0x7fffffff;\n  bool is_zero = or_result == 0;\n  if (!is_zero) {\n    or_result = input1 ^ input2;\n    is_zero = or_result == 0;\n  }\n  bool is_less_than_zero = -1 < (int)or_result;\n  if (is_less_than_zero) {\n    input1 = doubled_input1 + input2 * -2;\n    is_zero = input1 == 0;\n  }\n  if (is_less_than_zero && doubled_input2 <= doubled_input1 && !is_zero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!is_less_than_zero || doubled_input2 > doubled_input1) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input1 = input1 | 1;\n  }\n  return input1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081bf4",
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "imported": false,
            "current_name": "calculate_result_00081bf4"
        },
        "FUN_00081d7c": {
            "renaming": {
                "FUN_00081d7c": "execute_preinit_array_functions_00081d7c",
                "puVar1": "fini_functions_start",
                "puVar2": "fini_functions_end",
                "iVar3": "i",
                "ppcVar4": "function_pointer",
                "iVar5": "num_functions"
            },
            "code": "void execute_preinit_array_functions_00081d7c(void)\n{\n  int num_functions = (int)PTR___preinit_array_end_00081dbc - (int)PTR___preinit_array_end_00081dc0 >> 2;\n  if (num_functions != 0) {\n    code **function_pointer = (code **)(PTR___preinit_array_end_00081dc0 + -4);\n    int i = 0;\n    do {\n      i++;\n      function_pointer++;\n      (**function_pointer)();\n    } while (num_functions != i);\n  }\n  undefined *fini_functions_start = PTR___preinit_array_end_00081dc8;\n  undefined *fini_functions_end = PTR__fini_00081dc4;\n  _init();\n  num_functions = (int)fini_functions_end - (int)fini_functions_start >> 2;\n  if (num_functions != 0) {\n    code **function_pointer = (code **)(fini_functions_start + -4);\n    int i = 0;\n    do {\n      i++;\n      function_pointer++;\n      (**function_pointer)();\n    } while (num_functions != i);\n    return;\n  }\n  return;\n}",
            "called": [
                "register_fini",
                "_init",
                "frame_dummy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d7c",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "execute_preinit_array_functions_00081d7c"
        },
        "FUN_000810bc": {
            "renaming": {
                "FUN_000810bc": "processCallbacksForSetBits_000810bc",
                "uVar1": "leadingZeroCount",
                "uVar2": "setBits",
                "PTR_callbacksPioB_000810f0": "PTR_callbacksPioB",
                "DAT_000810ec": "DAT",
                "index": "callbackIndex"
            },
            "code": "void processCallbacksForSetBits_000810bc(void)\n{\n  uint setBits = *(uint *)(DAT_000810ec_000810ec + 0x4c);\n  while( true ) {\n    uint leadingZeroCount = count_leading_zeroes(setBits);\n    if (leadingZeroCount > 0x1f) break;\n    uint index = 0x1f - leadingZeroCount;\n    if (*(code **)(PTR_callbacksPioB_000810f0_000810f0 + index * 4) != (code *)0x0) {\n      (**(code **)(PTR_callbacksPioB_000810f0_000810f0 + index * 4))();\n    }\n    setBits &= ~(1 << index);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810bc",
            "calling": [],
            "imported": false,
            "current_name": "processCallbacksForSetBits_000810bc"
        },
        "FUN_00081c5c": {
            "renaming": {
                "FUN_00081c5c": "compare_and_concatenate_floats_00081c5c",
                "param_1": "float1",
                "param_2": "float2"
            },
            "code": "undefined8 compare_and_concatenate_floats_00081c5c(float float1, float float2)\n{\n  __cmpsf2();\n  return CONCAT44(float2, float1);\n}",
            "called": [
                "__cmpsf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c5c",
            "calling": [
                "__aeabi_fcmple",
                "__aeabi_fcmpeq",
                "__aeabi_fcmplt",
                "__aeabi_cfrcmple"
            ],
            "imported": false,
            "current_name": "compare_and_concatenate_floats_00081c5c"
        },
        "FUN_00081388": {
            "renaming": {
                "FUN_00081388": "check_ticks_and_call_callback_00081388",
                "iVar1": "ticks_remaining"
            },
            "code": "void check_ticks_and_call_callback_00081388(void)\n{\n  int ticks_remaining = *(int *)PTR_ticks_000813a0;\n  if ((ticks_remaining != -1) && (--ticks_remaining == 0)) {\n    (*DAT_000813a4)();\n  }\n  *(int *)PTR_ticks_000813a0 = ticks_remaining;\n  return;\n}",
            "called": [
                "banzai"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081388",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "check_ticks_and_call_callback_00081388"
        },
        "FUN_00082598": {
            "renaming": {
                "FUN_00082598": "do_nothing_00082598"
            },
            "code": "\nvoid do_nothing_00082598(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082598",
            "calling": [
                "_malloc_trim_r",
                "_free_r",
                "_realloc_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00082598"
        },
        "FUN_00082994": {
            "renaming": {
                "FUN_00082994": "copy_string_00082994",
                "__dest": "destination",
                "__src": "source",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "source_uint_ptr_2",
                "puVar4": "source_uint_ptr",
                "uVar5": "current_uint",
                "uVar6": "current_uint_2",
                "puVar7": "destination_uint_ptr",
                "puVar8": "destination_uint_ptr_2",
                "pcVar9": "destination_ptr",
                "bVar10": "is_null_byte"
            },
            "code": "char * copy_string_00082994(char *destination, char *source)\n{\n    char current_char;\n    ushort current_short;\n    uint *source_uint_ptr;\n    uint *destination_uint_ptr;\n    uint current_uint;\n    uint *source_uint_ptr_2;\n    uint *destination_uint_ptr_2;\n    bool is_null_byte;\n\n    char *destination_ptr = destination;\n    if ((((uint)destination ^ (uint)source) & 3) != 0) {\n        do {\n            current_char = *source;\n            *destination_ptr = current_char;\n            source = source + 1;\n            destination_ptr = destination_ptr + 1;\n        } while (current_char != '\\0');\n        return destination;\n    }\n    destination_uint_ptr_2 = (uint *)destination;\n    if (((uint)source & 3) != 0) {\n        source_uint_ptr = (uint *)source;\n        if (((uint)source & 1) != 0) {\n            source_uint_ptr = (uint *)(source + 1);\n            current_char = *source;\n            destination_uint_ptr_2 = (uint *)(destination + 1);\n            *destination = current_char;\n            if (current_char == '\\0') {\n                return destination;\n            }\n        }\n        source = (char *)source_uint_ptr;\n        if (((uint)source_uint_ptr & 2) != 0) {\n            source = (char *)((int)source_uint_ptr + 2);\n            current_short = *(ushort *)source_uint_ptr;\n            is_null_byte = (current_short & 0xff) == 0;\n            if (is_null_byte) {\n                *(char *)destination_uint_ptr_2 = (char)current_short;\n            }\n            else {\n                *(ushort *)destination_uint_ptr_2 = current_short;\n                is_null_byte = (current_short & 0xff00) == 0;\n                destination_uint_ptr_2 = (uint *)((int)destination_uint_ptr_2 + 2);\n            }\n            if (is_null_byte) {\n                return destination;\n            }\n        }\n    }\n    current_uint = *(uint *)source;\n    source_uint_ptr = (uint *)((int)source + 4);\n    destination_uint_ptr = destination_uint_ptr_2;\n    if (((uint)source & 4) != 0) {\n        if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) goto LAB_000829f8;\n        destination_uint_ptr = destination_uint_ptr_2 + 1;\n        *destination_uint_ptr_2 = current_uint;\n        source_uint_ptr = (uint *)((int)source + 8);\n        current_uint = *(uint *)((int)source + 4);\n    }\n    while (true) {\n        source_uint_ptr_2 = source_uint_ptr + 1;\n        current_uint = *source_uint_ptr;\n        destination_uint_ptr_2 = destination_uint_ptr;\n        if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) break;\n        destination_uint_ptr_2 = destination_uint_ptr + 1;\n        *destination_uint_ptr = current_uint;\n        current_uint = source_uint_ptr_2[1];\n        if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) break;\n        source_uint_ptr = source_uint_ptr_2 + 2;\n        destination_uint_ptr = destination_uint_ptr_2 + 2;\n        *destination_uint_ptr_2 = current_uint;\n    }\nLAB_000829f8:\n    do {\n        *(char *)destination_uint_ptr_2 = (char)current_uint;\n        uint current_byte = current_uint & 0xff;\n        current_uint = current_uint >> 8 | current_uint << 0x18;\n        destination_uint_ptr_2 = (uint *)((int)destination_uint_ptr_2 + 1);\n    } while (current_byte != 0);\n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082994",
            "calling": [
                "copy"
            ],
            "imported": false,
            "current_name": "copy_string_00082994"
        },
        "FUN_00080c0c": {
            "renaming": {
                "FUN_00080c0c": "initializeUARTBuffers_00080c0c",
                "PTR_tx_buffer1_00080ca4": "txBuffer1",
                "PTR_rx_buffer1_00080ca0": "rxBuffer1",
                "PTR_rx_buffer2_00080cd8": "rxBuffer2",
                "PTR_rx_buffer3_00080cac": "rxBuffer3",
                "PTR_rx_buffer4_00080cb4": "rxBuffer4",
                "PTR_tx_buffer2_00080cdc": "txBuffer2",
                "PTR_tx_buffer3_00080cb8": "txBuffer3",
                "PTR_tx_buffer4_00080cbc": "txBuffer4",
                "DAT_00080ca8": "baudRate1",
                "DAT_00080cc0": "baudRate2",
                "DAT_00080cc8": "baudRate3",
                "DAT_00080cd0": "baudRate4",
                "PTR_Serial_00080cb0": "serial1",
                "PTR_Serial1_00080cc4": "serial2",
                "PTR_Serial2_00080ccc": "serial3",
                "PTR_Serial3_00080cd4": "serial4",
                "RingBuffer::RingBuffer": "new RingBuffer()",
                "UARTClass::UARTClass": "new UARTClass()",
                "USARTClass::USARTClass": "new USARTClass()"
            },
            "code": "void initializeUARTBuffers_00080c0c(void)\n{\n  RingBuffer* PTR_rx_buffer1_00080ca0 = new RingBuffer();\n  RingBuffer* PTR_tx_buffer1_00080ca4 = new RingBuffer();\n  RingBuffer* PTR_rx_buffer2_00080cd8 = new RingBuffer();\n  RingBuffer* PTR_rx_buffer3_00080cac = new RingBuffer();\n  RingBuffer* PTR_rx_buffer4_00080cb4 = new RingBuffer();\n  RingBuffer* PTR_tx_buffer2_00080cdc = new RingBuffer();\n  RingBuffer* PTR_tx_buffer3_00080cb8 = new RingBuffer();\n  RingBuffer* PTR_tx_buffer4_00080cbc = new RingBuffer();\n  UARTClass* uart1 = new UARTClass(PTR_Serial_00080cb0, DAT_00080ca8, UART_IRQn, 8, PTR_rx_buffer1_00080ca0, PTR_tx_buffer1_00080ca4);\n  USARTClass* usart1 = new USARTClass(PTR_Serial1_00080cc4, DAT_00080cc0, USART0_IRQn, 0x11, PTR_rx_buffer2_00080cd8, PTR_tx_buffer2_00080cdc);\n  USARTClass* usart2 = new USARTClass(PTR_Serial2_00080ccc, DAT_00080cc8, USART1_IRQn, 0x12, PTR_rx_buffer3_00080cac, PTR_tx_buffer3_00080cb8);\n  USARTClass* usart3 = new USARTClass(PTR_Serial3_00080cd4, DAT_00080cd0, USART3_IRQn, 0x14, PTR_rx_buffer4_00080cb4, PTR_tx_buffer4_00080cbc);\n}\n",
            "called": [
                "USARTClass",
                "RingBuffer",
                "UARTClass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c0c",
            "calling": [],
            "imported": false,
            "current_name": "initializeUARTBuffers_00080c0c"
        },
        "FUN_00084418": {
            "renaming": {
                "FUN_00084418": "kill_process_and_set_error_if_any_00084418",
                "param_1": "error_code",
                "param_2": "process_id",
                "param_3": "signal",
                "puVar1": "error_ptr"
            },
            "code": "void kill_process_and_set_error_if_any_00084418(int *error_code, int process_id, int signal) {\n  undefined *error_ptr;\n  error_ptr = PTR_errno_0008443c;\n  *(undefined4 *)PTR_errno_0008443c = 0;\n  _kill(process_id, signal);\n  if ((process_id == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_kill"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084418",
            "calling": [
                "kill"
            ],
            "imported": false,
            "current_name": "kill_process_and_set_error_if_any_00084418"
        },
        "FUN_00080d2e": {
            "renaming": {
                "FUN_00080d2e": "set_parameter_00080d2e",
                "param_1": "device",
                "param_2": "parameter_type",
                "param_3": "parameter_value",
                "uVar1": "and_mask",
                "uVar2": "or_mask"
            },
            "code": "void set_parameter_00080d2e(uint32_t* device, uint32_t parameter_value, uint32_t parameter_type) {\n  *(uint32_t *)(device + 0x44) = parameter_value;\n  switch(parameter_type) {\n    case 0:\n    case 3:\n    case 4:\n    case 5:\n      return;\n    case 1:\n      uint32_t and_mask = *(uint32_t *)(device + 0x70) & *(uint32_t *)(device + 0x70) & ~parameter_value;\n      *(uint32_t *)(device + 0x70) = and_mask;\n      break;\n    case 2:\n      uint32_t or_mask = *(uint32_t *)(device + 0x70) | parameter_value;\n      *(uint32_t *)(device + 0x70) = or_mask;\n      break;\n    default:\n      *(uint32_t *)(device + 4) = parameter_value;\n      return;\n  }\n  *(uint32_t *)(device + 4) = parameter_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d2e",
            "calling": [
                "PIO_Configure"
            ],
            "imported": false,
            "current_name": "set_parameter_00080d2e"
        },
        "FUN_00081944": {
            "renaming": {
                "FUN_00081944": "FUNC_00081944"
            },
            "code": "\nuint FUNC_00081944(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_00081a94;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_00081a94:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081944",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "FUNC_00081944"
        },
        "FUN_20070000": {
            "renaming": {
                "FUN_20070000": "wait_until_flag_is_set_20070000",
                "DAT_20070020": "new_value_1",
                "DAT_20070024": "new_value_2",
                "PTR_DAT_2007001c": "pointer_to_data",
                "PTR_DAT_20070028": "pointer_to_data_2"
            },
            "code": "void wait_until_flag_is_set_20070000(void)\n{\n    disableIRQinterrupts();\n    while ((*(int *)(PTR_DAT_2007001c + 8) & (1 << 31)) == 0);\n    *(int *)(PTR_DAT_2007001c + 4) = DAT_20070020;\n    while ((*(int *)(PTR_DAT_2007001c + 8) & (1 << 31)) == 0);\n    *PTR_DAT_20070028 = DAT_20070024;\n    while (true);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x20070000",
            "calling": [
                "Reset_Handler",
                "tickReset"
            ],
            "imported": false,
            "current_name": "wait_until_flag_is_set_20070000"
        },
        "FUN_000811f0": {
            "renaming": {
                "FUN_000811f0": "exit_with_status_000811f0",
                "PTR_s_Exiting_with_status__d__000811fc": "print_exit_status",
                "status": "exit_status"
            },
            "code": "void exit_with_status_000811f0(int status)\n{\n  PTR_s_Exiting_with_status__d__000811fc(status);\n  while( true ) {} // Infinite loop\n}\n",
            "called": [
                "iprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811f0",
            "calling": [],
            "imported": false,
            "current_name": "exit_with_status_000811f0"
        },
        "FUN_00081704": {
            "renaming": {
                "FUN_00081704": "incrementTickCount_00081704",
                "PTR__dwTickCount_00081710": "tickCount"
            },
            "code": "void incrementTickCount_00081704(void)\n{\n    int* PTR__dwTickCount_00081710 = (int*)PTR__dwTickCount_00081710;\n    *PTR__dwTickCount_00081710 += 1;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081704",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "incrementTickCount_00081704"
        },
        "FUN_00083c10": {
            "renaming": {
                "FUN_00083c10": "execute_global_destructors_00083c10",
                "iVar1": "num_destructors",
                "ppcVar2": "destructor"
            },
            "code": "void execute_global_destructors_00083c10() {\n  int num_destructors = (int)PTR___fini_array_end_00083c3c - (int)PTR___do_global_dtors_aux_fini_array_entry_00083c38 >> 2;\n  if (num_destructors != 0) {\n    code **destructor = (code **)(PTR___do_global_dtors_aux_fini_array_entry_00083c38 + num_destructors * 4);\n    do {\n      num_destructors--;\n      destructor--;\n      (**destructor)();\n    } while (num_destructors != 0);\n  }\n  _fini();\n  return;\n}",
            "called": [
                "_fini",
                "__do_global_dtors_aux"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c10",
            "calling": [],
            "imported": false,
            "current_name": "execute_global_destructors_00083c10"
        },
        "FUN_00081bec": {
            "renaming": {
                "FUN_00081bec": "CheckOverflow_00081bec",
                "param_1": "x",
                "param_2": "y",
                "uVar2": "x2",
                "uVar3": "y2",
                "uVar4": "temp1",
                "bVar1": "sign",
                "bVar5": "temp2"
            },
            "code": "uint CheckOverflow_00081bec(uint x, uint y)\n{\n  bool overflow;\n  uint x2 = x * 2;\n  uint y2 = y * 2;\n  if (((int)x2 >> 0x18 == -1 || (int)y2 >> 0x18 == -1) && ((((int)x2 >> 0x18 == -1 && ((x & 0x7fffff) != 0)) || (((int)y2 >> 0x18 == -1 && ((y & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  uint temp1 = x2 | y & 0x7fffffff;\n  bool temp2 = temp1 == 0;\n  if (!temp2) {\n    temp1 = x ^ y;\n    temp2 = temp1 == 0;\n  }\n  bool sign = -1 < (int)temp1;\n  if (sign) {\n    x = x2 + y * -2;\n    temp2 = x == 0;\n  }\n  if ((sign && y2 <= x2) && !temp2) {\n    x = (int)y >> 0x1f;\n  }\n  if (!sign || y2 > x2) {\n    x = ~((int)y >> 0x1f);\n  }\n  if (!temp2) {\n    x = x | 1;\n  }\n  return x;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081bec",
            "calling": [],
            "imported": false,
            "current_name": "CheckOverflow_00081bec"
        },
        "FUN_000844c4": {
            "renaming": {
                "FUN_000844c4": "write_char_to_stream_000844c4",
                "param_1": "stream",
                "param_2": "character",
                "param_3": "stream_ptr",
                "param_4": "flush_flag",
                "uVar1": "char_type",
                "uVar2": "char_val",
                "puVar3": "buffer_ptr",
                "iVar4": "buffer_start_pos"
            },
            "code": "uint write_char_to_stream_000844c4(int stream, uint character, undefined4 *stream_ptr, undefined4 flush_flag)\n{\n  ushort char_type;\n  uint char_val;\n  undefined *buffer_ptr;\n  int buffer_start_pos;\n  \n  if ((stream != 0) && (*(int *)(stream + 0x38) == 0)) {\n    __sinit();\n  }\n  char_type = *(ushort *)(stream_ptr + 3);\n  char_val = (uint)char_type;\n  stream_ptr[2] = stream_ptr[6];\n  if ((-1 < (int)(char_val << 0x1c)) || (buffer_start_pos = stream_ptr[4], buffer_start_pos == 0)) {\n    buffer_start_pos = __swsetup_r(stream, stream_ptr, char_type, char_val, flush_flag);\n    if (buffer_start_pos != 0) {\n      return 0xffffffff;\n    }\n    char_type = *(ushort *)(stream_ptr + 3);\n    buffer_start_pos = stream_ptr[4];\n    char_val = (uint)char_type;\n  }\n  character = character & 0xff;\n  if ((int)(char_val << 0x12) < 0) {\n    buffer_ptr = (undefined *)*stream_ptr;\n    buffer_start_pos = (int)buffer_ptr - buffer_start_pos;\n    if (buffer_start_pos < (int)stream_ptr[5]) {\nLAB_000844f6:\n      buffer_start_pos = buffer_start_pos + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    stream_ptr[0x19] = stream_ptr[0x19] & 0xffffdfff;\n    buffer_ptr = (undefined *)*stream_ptr;\n    *(ushort *)(stream_ptr + 3) = char_type | 0x2000;\n    buffer_start_pos = (int)buffer_ptr - buffer_start_pos;\n    if (buffer_start_pos < (int)stream_ptr[5]) goto LAB_000844f6;\n  }\n  buffer_start_pos = _fflush_r(stream, stream_ptr);\n  if (buffer_start_pos != 0) {\n    return 0xffffffff;\n  }\n  buffer_ptr = (undefined *)*stream_ptr;\n  buffer_start_pos = 1;\nLAB_000844f8:\n  stream_ptr[2] = stream_ptr[2] + -1;\n  *stream_ptr = buffer_ptr + 1;\n  *buffer_ptr = (char)character;\n  if (((stream_ptr[5] == buffer_start_pos) || (((int)((uint)*(ushort *)(stream_ptr + 3) << 0x1f) < 0 && (character == 10)))) && (buffer_start_pos = _fflush_r(stream, stream_ptr), buffer_start_pos != 0)) {\n    return 0xffffffff;\n  }\n  return character;\n}",
            "called": [
                "__swsetup_r",
                "_fflush_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844c4",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "write_char_to_stream_000844c4"
        },
        "FUN_0008189c": {
            "renaming": {
                "FUN_0008189c": "convert_to_unsigned_0008189c",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "iVar4": "base",
                "uVar3": "sign_bit",
                "uVar5": "carry",
                "shifted_input": "shifted_input",
                "result": "result",
                "abs_input": "abs_input"
            },
            "code": "uint convert_to_unsigned_0008189c(uint input) {\n  int leading_zeroes = count_leading_zeroes(input);\n  uint sign_bit = input & 0x80000000;\n  uint abs_input = (sign_bit < 0) ? -input : input;\n  if (abs_input == 0) {\n    return 0;\n  }\n  int shift_amount = leading_zeroes - 8;\n  int base = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (leading_zeroes > 7) {\n    uint carry = 0 << (shift_amount & 0xff);\n    uint result = base + (abs_input << (shift_amount & 0xff)) + (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < carry);\n    if (carry == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shifted_input = abs_input << (leading_zeroes + 0x18U & 0xff);\n  uint result = base + ((abs_input >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)shifted_input >> 0x1f));\n  if ((shifted_input & 0x7fffffff) == 0) {\n    result = result & ~(shifted_input >> 0x1f);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008189c",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "convert_to_unsigned_0008189c"
        },
        "FUN_0008234c": {
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "__dest": "destination",
                "__src": "source",
                "__n": "size",
                "puVar1": "destination_byte",
                "puVar2": "destination_word",
                "puVar3": "destination_words",
                "puVar4": "destination_byte_ptr",
                "puVar5": "source_word",
                "puVar6": "source_byte_ptr",
                "uVar7": "remaining_size",
                "uVar8": "misalignment",
                "bVar9": "loop_condition"
            },
            "code": "void * copy_memory_0008234c(void *destination, const void *source, size_t size)\n{\n    unsigned char *destination_bytes = (unsigned char *)destination;\n    const unsigned char *source_bytes = (const unsigned char *)source;\n    if ((((unsigned int)source | (unsigned int)destination) & 3) != 0) {\n        if (size < 8) {\n            for (size_t i = 0; i < size; i++) {\n                destination_bytes[i] = source_bytes[i];\n            }\n            return destination;\n        }\n        if ((((unsigned int)source & 3) != 0) && (((unsigned int)destination & 3) != 0)) {\n            unsigned int misalignment = 4 - ((unsigned int)destination & 3);\n            size -= misalignment;\n            for (unsigned int i = 0; i < misalignment; i++) {\n                destination_bytes[i] = source_bytes[i];\n            }\n            destination_bytes += misalignment;\n            source_bytes += misalignment;\n        }\n    }\n    unsigned int blocks = size / 16;\n    for (unsigned int i = 0; i < blocks; i++) {\n        ((unsigned int *)destination_bytes)[0] = ((unsigned int *)source_bytes)[0];\n        ((unsigned int *)destination_bytes)[1] = ((unsigned int *)source_bytes)[1];\n        ((unsigned int *)destination_bytes)[2] = ((unsigned int *)source_bytes)[2];\n        ((unsigned int *)destination_bytes)[3] = ((unsigned int *)source_bytes)[3];\n        ((unsigned int *)destination_bytes)[4] = ((unsigned int *)source_bytes)[4];\n        ((unsigned int *)destination_bytes)[5] = ((unsigned int *)source_bytes)[5];\n        ((unsigned int *)destination_bytes)[6] = ((unsigned int *)source_bytes)[6];\n        ((unsigned int *)destination_bytes)[7] = ((unsigned int *)source_bytes)[7];\n        destination_bytes += 16;\n        source_bytes += 16;\n    }\n    size &= 0xF;\n    for (unsigned int i = 0; i < size; i++) {\n        destination_bytes[i] = source_bytes[i];\n    }\n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008234c",
            "calling": [
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "copy_memory_0008234c"
        },
        "FUN_00080a68": {
            "renaming": {
                "FUN_00080a68": "initializeMaster_00080a68",
                "puVar1": "rxStringPtr",
                "PTR_RxString_00080a94": "rxStringPtr",
                "PTR_s__00080a98": "masterString",
                "__aeabi_atexit": "exitHandler",
                "DAT_00080aa0": "exitFunction",
                "PTR___dso_handle_00080a9c": "exitHandle",
                "PTR_master_00080aa4": "masterPtr",
                "*(undefined2 *)(puVar1 + 0x56)": "*(uint16_t *)(masterPtr + 0x56)"
            },
            "code": "void initializeMaster_00080a68()\n{\n  String* PTR_RxString_00080a94 = PTR_RxString_00080a94;\n  String::String(PTR_RxString_00080a94, PTR_s__00080a98);\n  __aeabi_atexit(PTR_RxString_00080a94, DAT_00080aa0, PTR___dso_handle_00080a9c);\n  uint8_t* PTR_master_00080aa4 = PTR_master_00080aa4;\n  PTR_master_00080aa4[4] = 0;\n  PTR_master_00080aa4[5] = 0;\n  PTR_master_00080aa4[6] = 6;\n  *(uint16_t *)(PTR_master_00080aa4 + 0x56) = 1000;\n  return;\n}",
            "called": [
                "__aeabi_atexit",
                "String"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a68",
            "calling": [],
            "imported": false,
            "current_name": "initializeMaster_00080a68"
        },
        "FUN_0008165c": {
            "renaming": {
                "String::FUN_0008165c": "updateString",
                "this": "thisPtr",
                "cstr": "newStr",
                "length": "length",
                "uVar1": "success",
                "FUN_0008165c": "updateString_0008165c"
            },
            "code": "String* __thiscall updateString_0008165c(String* thisPtr, char* newStr, uint length) {\\n  uchar success = reserve(thisPtr, length);\\n  if (success == \"\\0\") {\\n    invalidate(thisPtr);\\n  }\\n  else {\\n    thisPtr->len = length;\\n    strcpy(thisPtr->buffer, newStr);\\n  }\\n  return thisPtr;\\n}",
            "called": [
                "strcpy",
                "invalidate",
                "reserve"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008165c",
            "calling": [
                "String"
            ],
            "imported": false,
            "current_name": "updateString_0008165c"
        },
        "FUN_000815f8": {
            "renaming": {
                "FUN_000815f8": "concatenate_bytes_000815f8",
                "h": "high_byte",
                "l": "low_byte"
            },
            "code": "uint16_t concatenate_bytes_000815f8(uint8_t high_byte, uint8_t low_byte) {\n    return CONCAT11(high_byte, low_byte);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815f8",
            "calling": [
                "get_FC3"
            ],
            "imported": false,
            "current_name": "concatenate_bytes_000815f8"
        },
        "FUN_00084384": {
            "renaming": {
                "FUN_00084384": "find_character_00084384",
                "__s": "string",
                "__c": "target_char",
                "__n": "length",
                "puVar1": "end_word",
                "puVar2": "current_word",
                "uVar3": "target_word",
                "uVar4": "test_bits",
                "pbVar5": "current_byte",
                "pbVar6": "end_byte",
                "uVar7": "xor_mask",
                "bVar8": "non_zero_byte"
            },
            "code": "void *find_character_00084384(void *string, int target_char, size_t length) {\n    uint *current_word;\n    uint *end_word;\n    uint target_word;\n    uint xor_mask;\n    byte *current_byte;\n    byte *end_byte;\n    uint test_bits;\n    bool non_zero_byte;\n\n    target_word = target_char & 0xff;\n\n    if (((uint)string & 3) == 0) {\n        current_word = (uint *)string;\n        end_word = (uint *)(string + length - 3);\n        xor_mask = target_word | target_word << 8 | target_word << 16 | target_word << 24;\n\n        while (current_word < end_word && (*current_word ^ xor_mask) == 0) {\n            current_word++;\n        }\n\n        current_byte = (byte *)current_word;\n        end_byte = (byte *)(end_word + 1);\n\n        while (current_byte < end_byte && *current_byte != target_word) {\n            current_byte++;\n        }\n\n        if (current_byte == end_byte) {\n            return NULL;\n        } else {\n            return current_byte;\n        }\n    } else {\n        current_byte = (byte *)string;\n        end_byte = (byte *)(string + length);\n\n        while (current_byte < end_byte && *current_byte != target_word) {\n            current_byte++;\n        }\n\n        if (current_byte == end_byte) {\n            return NULL;\n        } else {\n            return current_byte;\n        }\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084384",
            "calling": [
                "_vfiprintf_r",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "find_character_00084384"
        },
        "FUN_00082ab0": {
            "renaming": {
                "FUN_00082ab0": "get_signal_handler_pid_00082ab0",
                "__pid": "pid",
                "__sig": "signal_number",
                "iVar1": "result"
            },
            "code": "int get_signal_handler_pid_00082ab0(__pid_t pid, int signal_number)\n{\n  int result = _get_signal_handler_pid_00082ab0_r(*(undefined4 *)PTR__impure_ptr_00082abc, pid, signal_number);\n  return result;\n}",
            "called": [
                "_kill_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082ab0",
            "calling": [],
            "imported": false,
            "current_name": "get_signal_handler_pid_00082ab0"
        },
        "FUN_00081c6c": {
            "renaming": {
                "FUN_00081c6c": "is_not_null_00081c6c",
                "in_ZR": "input_char"
            },
            "code": "bool is_not_null_00081c6c(char input_char){\n  __aeabi_cfcmpeq();\n  return input_char != '\\0';\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c6c",
            "calling": [],
            "imported": false,
            "current_name": "is_not_null_00081c6c"
        },
        "FUN_00081034": {
            "renaming": {
                "FUN_00081034": "update_flag_00081034",
                "param_1": "flag_address",
                "param_2": "flag_value",
                "param_3": "flag_bit",
                "uint": "uint32_t",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void update_flag_00081034(uint32_t *flag_address, uint32_t flag_value, uint32_t flag_bit) {\n    uint32_t current_value = *flag_address;\n    uint32_t masked_value = flag_value | current_value | (flag_bit & 1) << 7;\n    *flag_address = masked_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081034",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "update_flag_00081034"
        },
        "FUN_000844bc": {
            "renaming": {
                "FUN_000844bc": "close_file_with_short_descriptor_000844bc",
                "param_1": "file_descriptor",
                "param_2": "short_descriptor",
                "_close_r": "_close_r",
                "(int)*(short *)(param_2 + 0xe)": "(int)*(short *)(short_descriptor + 0xe)"
            },
            "code": "void close_file_with_short_descriptor_000844bc(int file_descriptor, int short_descriptor){\n  _close_r(file_descriptor, (int)*(short *)(short_descriptor + 0xe));\n  return;\n}",
            "called": [
                "_close_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844bc",
            "calling": [],
            "imported": false,
            "current_name": "close_file_with_short_descriptor_000844bc"
        },
        "FUN_00083c0c": {
            "renaming": {
                "FUN_00083c0c": "do_nothing_00083c0c"
            },
            "code": "\nvoid do_nothing_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c0c",
            "calling": [
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c0c"
        },
        "FUN_00083974": {
            "renaming": {
                "FUN_00083974": "checkIfAtExitRegistered_00083974",
                "DAT_00083980": "data",
                "DAT_00083984": "exitFunction"
            },
            "code": "void checkIfAtExitRegistered_00083974()\n{\n    if (DAT_00083980 != 0) {\n        atexit(DAT_00083984);\n        return;\n    }\n    return;\n}",
            "called": [
                "atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083974",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "checkIfAtExitRegistered_00083974"
        },
        "FUN_00084700": {
            "renaming": {
                "FUN_00084700": "seek_file_00084700",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "puVar1": "errno_ptr",
                "iVar2": "seek_result"
            },
            "code": "void seek_file_00084700(int *result, int file_descriptor, int offset, int whence) {\n  int seek_result = 0;\n  int *errno_ptr = PTR_errno_00084724;\n  *errno_ptr = 0;\n  seek_result = _lseek(file_descriptor, offset, whence);\n  if ((seek_result == -1) && (*errno_ptr != 0)) {\n    *result = *errno_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084700",
            "calling": [
                "__swrite",
                "__sseek"
            ],
            "imported": false,
            "current_name": "seek_file_00084700"
        },
        "FUN_00085874": {
            "renaming": {
                "FUN_00085874": "do_nothing_00085874"
            },
            "code": "\nvoid do_nothing_00085874(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085874",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "do_nothing_00085874"
        },
        "FUN_00080e5c": {
            "renaming": {
                "FUN_00080e5c": "check_bit_00080e5c",
                "param_1": "bit_pos",
                "uVar1": "mask",
                "uVar2": "data_mask",
                "DAT_00080e98": "data_ptr"
            },
            "code": "int check_bit_00080e5c(uint bit_pos)\n{\n  uint mask;\n  uint* DAT_00080e98 = (bit_pos < 0x20) ? (uint*)(DAT_00080e98 + 0x18) : (uint*)(DAT_00080e98 + 0x108);\n  if (bit_pos < 0x2d)\n  {\n    mask = 1 << (bit_pos & 0xff);\n    if ((*DAT_00080e98 & mask) == mask)\n    {\n      *(DAT_00080e98 - 1) = mask;\n    }\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e5c",
            "calling": [
                "pinMode",
                "end"
            ],
            "imported": false,
            "current_name": "check_bit_00080e5c"
        },
        "FUN_00081ca8": {
            "renaming": {
                "FUN_00081ca8": "check_if_greater_than_or_equal_to_zero_00081ca8",
                "in_CY": "is_less_than_or_equal_to_zero",
                "in_ZR": "is_equal_to_zero"
            },
            "code": "bool check_if_greater_than_or_equal_to_zero_00081ca8(float input_value)\n{\n  bool is_greater_or_equal_to_zero;\n  is_greater_or_equal_to_zero = __aeabi_cfrcmple(input_value, 0.0);\n  return !is_greater_or_equal_to_zero;\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081ca8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "check_if_greater_than_or_equal_to_zero_00081ca8"
        },
        "FUN_00081318": {
            "renaming": {
                "FUN_00081318": "set_pin_state_00081318",
                "ulPin": "pin_number",
                "ulVal": "pin_value",
                "puVar1": "pin_description_ptr",
                "puVar2": "pin_status_ptr",
                "iVar3": "output_data_status",
                "uVar4": "pin_description_1",
                "uVar5": "pin_description_2",
                "uVar6": "pin_value"
            },
            "code": "void set_pin_state_00081318(uint32_t pin_number, uint32_t pin_value) {\\n  uint32_t *pin_status_ptr = PTR_g_pinStatus_00081384;\\n  uint32_t *pin_description_ptr = PTR_g_APinDescription_00081380;\\n  if (pin_description_ptr[pin_number * 0x1c + 0xc] != \"\\0\") {\\n    uint32_t pin_status = pin_status_ptr[pin_number];\\n    if ((pin_status & 0xf) == 5) {\\n      pinMode(pin_number, OUTPUT);\\n    }\\n    pin_status_ptr[pin_number] = pin_status & 0xf | (byte)(pin_value << 4);\\n    uint32_t pin_description_1 = *(uint32_t *)(pin_description_ptr + pin_number * 0x1c);\\n    uint32_t pin_description_2 = *(uint32_t *)(pin_description_ptr + pin_number * 0x1c + 4);\\n    int output_data_status = PIO_GetOutputDataStatus(pin_description_1, pin_description_2);\\n    if (output_data_status == 0) {\\n      PIO_PullUp(pin_description_1, pin_description_2, pin_value);\\n      return;\\n    }\\n    PIO_SetOutput(pin_description_1, pin_description_2, pin_value, 0, 1, pin_value);\\n  }\\n  return;\\n}",
            "called": [
                "pinMode",
                "PIO_PullUp",
                "PIO_GetOutputDataStatus",
                "PIO_SetOutput"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081318",
            "calling": [
                "setup",
                "begin",
                "getRxBuffer",
                "init",
                "sendTxBuffer"
            ],
            "imported": false,
            "current_name": "set_pin_state_00081318"
        },
        "FUN_00081714": {
            "renaming": {
                "FUN_00081714": "getTickCount_00081714",
                "PTR__dwTickCount_0008171c": "tickCountPtr"
            },
            "code": "uint32_t getTickCount_00081714(void)\n{\n    return *(uint32_t*)PTR__dwTickCount_0008171c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081714",
            "calling": [
                "millis"
            ],
            "imported": false,
            "current_name": "getTickCount_00081714"
        },
        "FUN_00081c80": {
            "renaming": {
                "FUN_00081c80": "isEndOfString_00081c80",
                "in_CY": "currentChar"
            },
            "code": "bool isEndOfString_00081c80(void)\n{\n  char currentChar;\n  __aeabi_cfcmpeq();\n  return currentChar == '\\0';\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c80",
            "calling": [],
            "imported": false,
            "current_name": "isEndOfString_00081c80"
        },
        "FUN_0008449c": {
            "renaming": {
                "FUN_0008449c": "seek_and_update_0008449c",
                "param_1": "file_descriptor",
                "param_2": "data_buffer",
                "iVar1": "seek_result",
                "uVar2": "flags"
            },
            "code": "void seek_and_update_0008449c(int file_descriptor, int* data_buffer) {\n    int seek_result = _lseek_r(file_descriptor, (int)*(short *)(data_buffer + 0xe));\n    ushort flags;\n    if (seek_result == -1) {\n        flags = *(ushort *)(data_buffer + 0xc) & 0xefff;\n    }\n    else {\n        flags = *(ushort *)(data_buffer + 0xc) | 0x1000;\n        *(int *)(data_buffer + 0x50) = seek_result;\n    }\n    *(ushort *)(data_buffer + 0xc) = flags;\n}",
            "called": [
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008449c",
            "calling": [],
            "imported": false,
            "current_name": "seek_and_update_0008449c"
        },
        "FUN_0008259c": {
            "renaming": {
                "FUN_0008259c": "do_nothing_0008259c"
            },
            "code": "\nvoid do_nothing_0008259c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008259c",
            "calling": [
                "_malloc_trim_r",
                "_free_r",
                "_realloc_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0008259c"
        },
        "FUN_0008477c": {
            "renaming": {
                "FUN_0008477c": "divide_and_multiply_0008477c",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "multiplier_low",
                "param_4": "multiplier_high",
                "param_5": "result_array",
                "uVar1": "product_low",
                "lVar2": "product"
            },
            "code": "void divide_and_multiply_0008477c(uint dividend, int divisor, uint multiplier_low, uint multiplier_high, int *result_array) {\n  uint product_low = dividend * multiplier_low;\n  uint product_high = dividend * multiplier_high;\n  uint64_t product = ((uint64_t)product_high << 32) | product_low;\n  result_array[0] = dividend - (uint)product;\n  result_array[1] = divisor - ((int)(product >> 32)) - (dividend < (uint)product);\n}",
            "called": [
                "__divdi3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008477c",
            "calling": [],
            "imported": false,
            "current_name": "divide_and_multiply_0008477c"
        },
        "FUN_000801b0": {
            "renaming": {
                "FUN_000801b0": "readModbusData_000801b0",
                "this": "modbusInstance",
                "bVar1": "bufferFull",
                "uVar2": "receivedByte",
                "uVar3": "bufferSize",
                "iVar4": "response",
                "bVar5": "currentBufferIndex"
            },
            "code": "int8_t __thiscall readModbusData_000801b0(Modbus *modbusInstance) {\n  bool bufferFull = false;\n  uchar receivedByte;\n  uint8_t bufferSize = 0;\n  byte currentBufferIndex;\n  if (modbusInstance->u8txenpin > 1) {\n    digitalWrite((uint)modbusInstance->u8txenpin, 0);\n  }\n  bufferSize = 0;\n  if (modbusInstance->u8serno < 4) {\n    while (true) {\n      int response = (**(code **)(*(int *)modbusInstance->port + 8))();\n      if (response == 0) {\n        break;\n      }\n      currentBufferIndex = bufferSize;\n      receivedByte = (**(code **)(*(int *)modbusInstance->port + 0xc))();\n      modbusInstance->au8Buffer[currentBufferIndex] = receivedByte;\n      bufferSize++;\n      if (bufferSize > 63) {\n        bufferFull = true;\n      }\n    }\n  }\n  modbusInstance->u16InCnt++;\n  uint8_t returnVal;\n  if (bufferFull) {\n    returnVal = 253;\n    modbusInstance->u16errCnt++;\n  }\n  else {\n    returnVal = bufferSize;\n  }\n  return returnVal;\n}\n",
            "called": [
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801b0",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "readModbusData_000801b0"
        },
        "FUN_000813c2": {
            "renaming": {
                "FUN_000813c2": "addDataToBuffer_000813c2",
                "this": "buffer",
                "c": "data",
                "_iHead": "headIndex",
                "_iTail": "tailIndex",
                "_aucBuffer": "dataBuffer"
            },
            "code": "void __thiscall RingBuffer::addDataToBuffer_000813c2(RingBuffer *buffer, uint8_t data)\n{\n  uint headIndex;\n  \n  headIndex = (buffer->headIndex + 1U) & 0x7f;\n  if (headIndex != buffer->tailIndex) {\n    buffer->dataBuffer[buffer->headIndex] = data;\n    buffer->headIndex = headIndex;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813c2",
            "calling": [
                "IrqHandler"
            ],
            "imported": false,
            "current_name": "addDataToBuffer_000813c2"
        },
        "FUN_000814e4": {
            "renaming": {
                "FUN_000814e4::FUN_000814e4": "UART::UART",
                "pUart": "uart",
                "dwIrq": "irq",
                "dwId": "id",
                "pRx_buffer": "rx_buffer",
                "pTx_buffer": "tx_buffer",
                "PTR_PTR_write_1_00081504": "write_ptr",
                "field_0x4": "some_field_1",
                "field_0x8": "some_field_2",
                "FUN_000814e4": "UART_000814e4"
            },
            "code": "UART_000814e4 * __thiscall UART_000814e4::UART_000814e4(UART_000814e4 *this,Uart *uart,IRQn_Type irq,uint32_t id,RingBuffer *rx_buffer,RingBuffer *tx_buffer)\\n\\\n{\\n\\\n  this->_pUart = uart;\\n\\\n  this->_dwIrq = irq;\\n\\\n  this->_dwId = id;\\n\\\n  this->_rx_buffer = rx_buffer;\\n\\\n  this->_tx_buffer = tx_buffer;\\n\\\n  this->field_0x4 = 0;\\n\\\n  this->field_0x8 = 1000;\\n\\\n  this->PTR_PTR_write_1_00081504 = PTR_PTR_write_1_00081504;\\n\\\n  return this;\\n\\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814e4",
            "calling": [
                "USARTClass",
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "UART_000814e4"
        },
        "FUN_00080d54": {
            "renaming": {
                "FUN_00080d54": "update_parameters_00080d54",
                "param_1": "params",
                "param_2": "value",
                "param_3": "bitfield",
                "bVar1": "is_negative",
                "PTR_DAT_00000044": "params[17]",
                "PTR_DAT_0000004c": "params[25]",
                "PTR_DAT_00000048": "params[24]",
                "PTR_DAT_00000020": "params[8]",
                "PTR_DAT_00000024": "params[9]",
                "PTR_DAT_00000080": "params[32]",
                "PTR_DAT_00000014": "params[5]"
            },
            "code": "void update_parameters_00080d54(int* params, int value, uint32_t bitfield) {\n    bool is_negative = (int)(bitfield << 0x1f) < 0;\n    PTR_DAT_00000044 = value;\n    if (is_negative) {\n        PTR_DAT_0000004c = value;\n    }\n    if (!is_negative) {\n        PTR_DAT_00000048 = value;\n    }\n    bool is_bit_set = (bitfield & 10) != 0;\n    if (is_bit_set) {\n        PTR_DAT_00000020 = value;\n    }\n    if (!is_bit_set) {\n        PTR_DAT_00000024 = value;\n    }\n    if (((int)(bitfield << 0x1e) < 0) || ((int)(bitfield << 0x1c) < 0)) {\n        PTR_DAT_00000080 = value;\n    }\n    PTR_DAT_00000014 = value;\n    *params = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d54",
            "calling": [
                "PIO_Configure"
            ],
            "imported": false,
            "current_name": "update_parameters_00080d54"
        },
        "FUN_0008021c": {
            "renaming": {
                "FUN_0008021c": "calculateModbusCRC_0008021c",
                "this": "modbusInstance",
                "u8length": "bufferLength",
                "pMVar1": "currentModbusInstance",
                "uVar2": "crc",
                "cVar3": "bitCounter",
                "uVar4": "lsb"
            },
            "code": "uint16_t __thiscall calculateModbusCRC_0008021c(Modbus *modbusInstance, uint8_t bufferLength) {\n  Modbus *currentModbusInstance;\n  uint16_t crc = 0xffff;\n  for (currentModbusInstance = modbusInstance; ((int)currentModbusInstance - (int)modbusInstance & 0xffU) < (uint)bufferLength; currentModbusInstance = (Modbus *)((int)&currentModbusInstance->port + 1)) {\n    crc = crc ^ currentModbusInstance->buffer[0];\n    char bitCounter = 8;\n    do {\n      uint16_t lsb = crc & 1;\n      crc = crc >> 1;\n      if (lsb != 0) {\n        crc = crc ^ 0xa001;\n      }\n      bitCounter--;\n    } while (bitCounter != 0);\n  }\n  return (ushort)(crc << 8) | (ushort)(crc >> 8);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008021c",
            "calling": [
                "sendTxBuffer"
            ],
            "imported": false,
            "current_name": "calculateModbusCRC_0008021c"
        },
        "FUN_00082b38": {
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_00082b38(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********__s;\n  bool bVar29;\n  longlong lVar30;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    __sinit();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar11 = __swsetup_r(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)__sbprintf(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082b9e:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082bee;\n        }\n        iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082bee:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar29 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082c12:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        __s = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar29 << 6, bVar29 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar29 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_000830ec;\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      __s = (byte ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar29 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar27 < 0) {\n        bVar29 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar29);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar29 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar29) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      __s = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (__s != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)strlen((char *)__s);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)memchr(__s,0,(size_t)local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)__s);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)__s)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      __s = (byte ********)PTR_s__null__00083784;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar29 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082d78:\n    lVar30 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      __s = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082da0;\n      __s = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          __s = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar30 >> 0x20);\n          cVar13 = '\\n';\n          __aeabi_uldivmod((int)lVar30,uVar28,10,0);\n          *(char *)__s = cVar13 + '0';\n          lVar30 = __aeabi_uldivmod((int)lVar30,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)__s + -1);\n        } while (lVar30 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)__s);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar23 + '0';\n      __s = (byte ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_0008337e;\n    do {\n      __s = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)__s = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)__s + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)__s);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (byte *******)0x0) {\n    __sprint_r_part_0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    __s = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)__s = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)__s + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (byte *******)((int)local_68 - (int)__s);\n    }\n    else {\n      *(undefined *)((int)__s + -1) = 0x30;\n      __s = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (byte *******)((int)local_68 - (int)__s);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  pppppppbVar20 = (byte *******)PTR_blanks_6717_000830e8;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_blanks_6717_00083710;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_000833de;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_000833de;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_zeroes_6718_0008370c;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_0008348e:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_000834b4:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_zeroes_6718_000833c8;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_000832c6:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)__s;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_0008345a;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c), iVar11 != 0\n       )) goto LAB_000833de;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00083282:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_000832aa:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])__s;\nLAB_0008345a:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_blanks_6717_000833cc;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_blanks_6717_00083788;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_00083316:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_0008333e:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "called": [
                "__sbprintf",
                "__swsetup_r",
                "strlen",
                "__sprint_r.part.0",
                "__sinit",
                "__aeabi_uldivmod",
                "memchr"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082b38",
            "calling": [
                "__sbprintf",
                "iprintf"
            ],
            "imported": false,
            "current_name": "FUNC_00082b38"
        },
        "FUN_00083b08": {
            "renaming": {
                "FUN_00083b08": "traverse_and_apply_function_to_all_pointers_00083b08",
                "param_1": "func",
                "DAT_00083b10": "ptr",
                "_fwalk": "_fwalk"
            },
            "code": "void traverse_and_apply_function_to_all_pointers_00083b08(void (*func)(void *), void *DAT_00083b10)\n{\n  _fwalk(func, DAT_00083b10);\n  return;\n}",
            "called": [
                "_fwalk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b08",
            "calling": [],
            "imported": false,
            "current_name": "traverse_and_apply_function_to_all_pointers_00083b08"
        },
        "FUN_00081e04": {
            "renaming": {
                "FUN_00081e04": "reversePointerAndCallFunction_00081e04",
                "__ptr": "__pointer",
                "_FUN_00081e04_r": "_reversePointerAndCallFunction_r"
            },
            "code": "void reversePointerAndCallFunction_00081e04(void* __pointer){\n  _reversePointerAndCallFunction_00081e04_r(*(undefined4 *)PTR__impure_ptr_00081e10,__pointer);\n  return;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e04",
            "calling": [
                "~String",
                "invalidate"
            ],
            "imported": false,
            "current_name": "reversePointerAndCallFunction_00081e04"
        },
        "FUN_000814a8": {
            "renaming": {
                "FUN_000814a8": "updateUARTBuffer_000814a8",
                "this": "uart",
                "_rx_buffer": "rxBuffer",
                "_iHead": "headIndex",
                "_iTail": "tailIndex",
                "_dwIrq": "irq",
                "_dwId": "id"
            },
            "code": "void __thiscall updateUARTBuffer_000814a8(UARTClass *uart){\n  uart->rxBuffer->headIndex = uart->rxBuffer->tailIndex;\n  (**(code **)(*(int *)uart + 0x14))();\n  *(int *)(DAT_000814e0 + (((uint)(int)uart->irq >> 5) + 0x20) * 4) = 1 << (uint)(byte)(uart->irq & 0x1f);\n  pmc_disable_periph_clk(uart->id);\n  return;\n}",
            "called": [
                "pmc_disable_periph_clk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814a8",
            "calling": [],
            "imported": false,
            "current_name": "updateUARTBuffer_000814a8"
        },
        "FUN_00081084": {
            "renaming": {
                "FUN_00081084": "processCallbacksForSetBits_00081084",
                "uVar1": "leadingZeroes",
                "uVar2": "setBits",
                "DAT_000810b4": "dataOffset",
                "PTR_callbacksPioA_000810b8": "callbacksPointer"
            },
            "code": "void processCallbacksForSetBits_00081084(void)\n{\n  uint32_t setBits = *(uint32_t *)(DAT_000810b4 + 0x4c);\n  while (true) {\n    uint32_t leadingZeroes = count_leading_zeroes(setBits);\n    if (leadingZeroes > 0x1f) break;\n    uint32_t bitIndex = 0x1f - leadingZeroes;\n    if (*(code **)(PTR_callbacksPioA_000810b8 + bitIndex * 4) != (code *)0x0) {\n      (**(code **)(PTR_callbacksPioA_000810b8 + bitIndex * 4))();\n    }\n    setBits &= ~(1 << bitIndex);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081084",
            "calling": [],
            "imported": false,
            "current_name": "processCallbacksForSetBits_00081084"
        },
        "FUN_00084750": {
            "renaming": {
                "FUN_00084750": "divide_00084750",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder"
            },
            "code": "void divide_00084750(int divide_00084750nd, int divisor, int* quotient, int* remainder)\n{\n  if ((divisor == 0) && (divide_00084750nd == 0)) {\n    if (divisor != 0 || divide_00084750nd != 0) {\n      *quotient = -1;\n    }\n    __aeabi_idiv0(*quotient);\n    return;\n  }\n  __gnu_uldivmod_helper();\n  return;\n}",
            "called": [
                "__gnu_uldivmod_helper",
                "__aeabi_idiv0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084750",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "divide_00084750"
        },
        "FUN_00080ae4": {
            "renaming": {
                "FUN_00080ae4": "initialize_adc_00080ae4",
                "*ctx": "*context",
                "puVar1": "system_core_clock_ptr",
                "puVar2": "dat_ptr",
                "iVar3": "port_b",
                "iVar4": "port_c",
                "iVar5": "port_d",
                "iVar6": "return_value",
                "ulPin": "pin_number",
                "uVar7": "next_pin_number",
                "DAT_00080bec": "adc_configuration",
                "DAT_00080bf0": "digital_pin_configuration",
                "DAT_00080bf4": "port_a",
                "DAT_00080bf8": "port_b",
                "DAT_00080bfc": "port_c",
                "DAT_00080c00": "port_d",
                "DAT_00080c04": "adc_mode",
                "DAT_00080c08": "adc_controller"
            },
            "code": "int initialize_adc_00080ae4(EVP_PKEY_CTX *context) {\n    uint32_t pin_number = 0;\n    uint32_t system_clock = 0;\n    uint32_t DAT_00080bf4 = 0;\n    uint32_t DAT_00080bf8 = 0;\n    uint32_t DAT_00080bfc = 0;\n    uint32_t DAT_00080c00 = 0;\n    uint32_t DAT_00080c08 = 0;\n    uint32_t adc_channel = 0xc;\n\n    // Initialize system clock\n    SystemInit();\n\n    // Set ADC clock to 1 MHz\n    system_clock = *(uint *)PTR_SystemCoreClock_00080be8 / 1000 - 1;\n    DAT_00080bec[1] = system_clock;\n\n    // Configure digital pins\n    for (pin_number = 0; pin_number < 0x50; pin_number++) {\n        digitalWrite(pin_number,0);\n    }\n\n    // Configure analog pins\n    DAT_00080bf4 = DAT_00080bf4;\n    DAT_00080bf8 = DAT_00080bf8;\n    DAT_00080bfc = DAT_00080bfc;\n    DAT_00080c00 = DAT_00080c00;\n    *(uint32_t *)(DAT_00080bf4 + 0xa0) = 0xffffffff;\n    *(uint32_t *)(DAT_00080bf8 + 0xa0) = 0xffffffff;\n    *(uint32_t *)(DAT_00080bfc + 0xa0) = 0xffffffff;\n    *(uint32_t *)(DAT_00080c00 + 0xa0) = 0xffffffff;\n    PIO_Configure(DAT_00080bf4, 1, 0xc000, 0);\n    PIO_Configure(DAT_00080bf8, 1, 0xc00, 0);\n    PIO_Configure(DAT_00080bfc, 2, 0x30, 0);\n    PIO_Configure(DAT_00080c00, 1, 0xc00, 0);\n\n    // Configure ADC\n    pmc_enable_periph_clk(0x25);\n    DAT_00080c08 = DAT_00080c08;\n    adc_initialize_adc_00080ae4(DAT_00080c08, system_clock, adc_channel, 0);\n    adc_configure_timing(DAT_00080c08, 0, 0x300000, 1);\n    adc_configure_trigger(DAT_00080c08, 0, 0);\n    adc_disable_interrupt(DAT_00080c08, 0xffffffff);\n    adc_disable_all_channel(DAT_00080c08);\n\n    // Initialize analog output\n    analogOutputInit();\n\n    // Return success\n    return 0;\n}",
            "called": [
                "PIO_Configure",
                "adc_init",
                "digitalWrite",
                "adc_disable_all_channel",
                "__libc_init_array",
                "pmc_enable_periph_clk",
                "adc_configure_trigger",
                "SystemInit",
                "adc_configure_timing",
                "analogOutputInit",
                "adc_disable_interrupt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ae4",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_adc_00080ae4"
        },
        "FUN_00081d5c": {
            "renaming": {
                "FUN_00081d5c": "register_exit_handler_00081d5c",
                "param_1": "func",
                "param_2": "arg"
            },
            "code": "void register_exit_handler_00081d5c(void (*func)(void), void *arg) {\n  __cxa_atexit(arg, func);\n  return;\n}",
            "called": [
                "__cxa_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d5c",
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "imported": false,
            "current_name": "register_exit_handler_00081d5c"
        },
        "FUN_00082970": {
            "renaming": {
                "FUN_00082970": "allocate_memory_00082970",
                "param_1": "out_error_code",
                "param_2": "size",
                "puVar1": "error_code_ptr",
                "pcVar2": "memory_ptr"
            },
            "code": "void allocate_memory_00082970(int *out_error_code, int size) {\n  undefined *error_code_ptr = PTR_errno_00082990;\n  *(undefined4 *)PTR_errno_00082990 = 0;\n  caddr_t memory_ptr = _sbrk(size);\n  if ((memory_ptr == (caddr_t)0xffffffff) && (*(int *)error_code_ptr != 0)) {\n    *out_error_code = *(int *)error_code_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082970",
            "calling": [
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_00082970"
        },
        "FUN_000811be": {
            "renaming": {
                "FUN_000811be": "always_returns_one_000811be",
                "file_UNUSED": "file_descriptor"
            },
            "code": "int always_returns_one_000811be(int file_descriptor){\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811be",
            "calling": [
                "_isatty_r"
            ],
            "imported": false,
            "current_name": "always_returns_one_000811be"
        },
        "FUN_00084a80": {
            "renaming": {
                "FUN_00084a80": "FUNC_00084a80"
            },
            "code": "\nundefined8 FUNC_00084a80(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084a80",
            "calling": [
                "__gnu_uldivmod_helper"
            ],
            "imported": false,
            "current_name": "FUNC_00084a80"
        },
        "FUN_0008014c": {
            "renaming": {
                "FUN_0008014c": "check_hypercall_available_0008014c",
                "ticks": "num_ticks",
                "uVar1": "result"
            },
            "code": "int check_hypercall_available_0008014c(int ticks)\n{\n    uint32_t result;\n\n    if (*(int *)PTR_noHyperCall_00080160 == 0) {\n        result = aflCall(1, ticks, 0);\n        return result;\n    }\n    return 0;\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008014c",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "check_hypercall_available_0008014c"
        },
        "FUN_00081c54": {
            "renaming": {
                "FUN_00081c54": "compareFloats_00081c54",
                "param_1": "firstFloat",
                "param_2": "secondFloat",
                "__aeabi_cfcmpeq": "N/A"
            },
            "code": "void compareFloats_00081c54(float firstFloat, float secondFloat)\n{\n    if(firstFloat == secondFloat)\n    {\n        printf(\"The floats are equal.\");\n    }\n    else\n    {\n        printf(\"The floats are not equal.\");\n    }\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c54",
            "calling": [
                "__aeabi_fcmpge",
                "__aeabi_fcmpgt"
            ],
            "imported": false,
            "current_name": "compareFloats_00081c54"
        },
        "FUN_0008163a": {
            "renaming": {
                "String::FUN_0008163a": "String::resizeBuffer",
                "this": "this",
                "size": "newSize",
                "uchar uVar1": "uchar success",
                "this->buffer": "this->buffer",
                "char *0x0": "nullptr",
                "this->capacity": "this->capacity",
                "changeBuffer": "this->changeBuffer",
                "'\\0'": "'\\0'",
                "this->len": "this->length",
                "FUN_0008163a": "resizeBuffer_0008163a"
            },
            "code": "uchar __thiscall String::resizeBuffer_0008163a(String *this, uint newSize) {\n  uchar success = 1;\n  if ((this->buffer == nullptr) || (this->capacity < newSize)) {\n    success = this->changeBuffer(newSize);\n    if (!success) {\n      return 0;\n    }\n    if (this->length == 0) {\n      *this->buffer = '\\0';\n    }\n  }\n  return 1;\n}",
            "called": [
                "changeBuffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008163a",
            "calling": [
                "copy"
            ],
            "imported": false,
            "current_name": "resizeBuffer_0008163a"
        },
        "FUN_00081aac": {
            "renaming": {
                "FUN_00081aac": "FUNC_00081aac"
            },
            "code": "\nuint FUNC_00081aac(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  uVar2 = param_1 >> 0x17 & 0xff;\n  bVar7 = uVar2 == 0;\n  if (!bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = param_4 == 0xff;\n  }\n  if (bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    uVar6 = param_1;\n    if (uVar2 == 0xff) {\n      if (((param_1 & 0x7fffff) != 0) || (uVar6 = param_2, param_4 == 0xff)) {\nLAB_00081aa2:\n        return uVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param_4 == 0xff) {\n        uVar6 = param_2;\n        if ((param_2 & 0x7fffff) == 0) {\nLAB_00081a58:\n          return (param_1 ^ param_2) & 0x80000000;\n        }\n        goto LAB_00081aa2;\n      }\n      bVar7 = (param_1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (param_2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = uVar2 == 0;\n        uVar6 = param_1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_1 = param_1 << 1;\n            bVar7 = (param_1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          uVar2 = uVar2 - 1;\n        }\n        param_1 = param_1 | uVar6;\n        bVar7 = param_4 == 0;\n        uVar6 = param_2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_2 = param_2 << 1;\n            bVar7 = (param_2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          param_4 = param_4 - 1;\n        }\n        param_2 = param_2 | uVar6;\n        goto LAB_00081ac4;\n      }\n      if ((param_1 & 0x7fffffff) == 0) {\n        if ((param_2 & 0x7fffffff) != 0) goto LAB_00081a58;\n        goto LAB_00081aa2;\n      }\n    }\n    param_1 = param_1 ^ param_2;\n  }\n  else {\nLAB_00081ac4:\n    iVar3 = uVar2 - param_4;\n    if (param_2 << 9 == 0) {\n      param_1 = (param_1 ^ param_2) & 0x80000000 | param_1 & 0x7fffff;\n      bVar9 = SCARRY4(iVar3,0x7f);\n      iVar5 = iVar3 + 0x7f;\n      bVar7 = iVar5 < 0;\n      bVar8 = iVar5 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,iVar5);\n        bVar7 = 0xff - iVar5 < 0;\n        bVar8 = iVar5 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        param_1 = param_1 | iVar5 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return param_1;\n      }\n      param_1 = param_1 | 0x800000;\n      uVar2 = 0;\n      bVar8 = SBORROW4(iVar5,1);\n      uVar4 = iVar3 + 0x7e;\n      bVar7 = uVar4 == 0;\n      uVar6 = uVar4;\n    }\n    else {\n      uVar1 = (param_2 << 9) >> 4 | 0x10000000;\n      uVar2 = (param_1 << 9) >> 4 | 0x10000000;\n      param_1 = (param_1 ^ param_2) & 0x80000000;\n      bVar7 = uVar1 <= uVar2;\n      if (!bVar7) {\n        uVar2 = uVar2 << 1;\n      }\n      uVar4 = iVar3 + 0x7d + (uint)bVar7;\n      uVar6 = 0x800000;\n      do {\n        if (uVar1 <= uVar2) {\n          uVar2 = uVar2 - uVar1;\n          param_1 = param_1 | uVar6;\n        }\n        bVar7 = uVar1 >> 1 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 1);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 1;\n        }\n        bVar7 = uVar1 >> 2 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 2);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 2;\n        }\n        bVar7 = uVar1 >> 3 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 3);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 3;\n        }\n        uVar2 = uVar2 * 0x10;\n        bVar7 = uVar2 == 0;\n        if (!bVar7) {\n          uVar6 = uVar6 >> 4;\n          bVar7 = uVar6 == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      bVar7 = uVar4 == 0xfd;\n      uVar6 = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        param_1 = param_1 + uVar4 * 0x800000 + (uint)(uVar1 <= uVar2);\n        if (uVar2 - uVar1 == 0) {\n          param_1 = param_1 & 0xfffffffe;\n        }\n        return param_1;\n      }\n    }\n    if (bVar7 || (int)uVar6 < 0 != bVar8) {\n      bVar7 = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        param_1 = param_1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        return param_1;\n      }\n      uVar6 = (param_1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = param_1 << (uVar4 + 0x20 & 0xff);\n      uVar6 = ((uint)((param_1 & 0x80000000) != 0) << 0x1f | uVar6 >> 1) + (uint)((byte)uVar6 & 1);\n      if ((uVar2 | uVar4 << 1) == 0) {\n        uVar6 = uVar6 & ~(uVar4 >> 0x1f);\n      }\n      return uVar6;\n    }\n  }\n  return param_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081aac",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00081aac"
        },
        "FUN_000825a0": {
            "renaming": {
                "FUN_000825a0": "allocate_memory_000825a0",
                "__ptr": "ptr",
                "__size": "size",
                "pvVar1": "allocated_memory",
                "_FUN_000825a0_r": "allocate_memory_r"
            },
            "code": "void * allocate_memory_000825a0(void *ptr,size_t size)\n{\n  void *allocated_memory;\n  allocated_memory = (void *)allocate_memory_000825a0_r(*(undefined4 *)PTR__impure_ptr_000825ac,ptr,size);\n  return allocated_memory;\n}",
            "called": [
                "_realloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825a0",
            "calling": [
                "changeBuffer"
            ],
            "imported": false,
            "current_name": "allocate_memory_000825a0"
        },
        "FUN_000815d4": {
            "renaming": {
                "FUN_000815d4::FUN_000815d4": "UsartWrapper::UsartWrapper",
                "this": "thisWrapper",
                "pUsart": "usart",
                "dwIrq": "irq",
                "dwId": "id",
                "pRx_buffer": "rxBuffer",
                "pTx_buffer": "txBuffer",
                "&this->super_UARTClass": "&superUARTClass",
                "PTR_PTR_write_1_000815f4": "writePointer",
                "FUN_000815d4": "UsartWrapper_000815d4"
            },
            "code": "class UsartWrapper_000815d4 {\npublic:\n    UsartWrapper_000815d4(Usart* usart, IRQn_Type irq, uint32_t id, RingBuffer* rxBuffer, RingBuffer* txBuffer) {\n        UARTClass::UARTClass(&superUARTClass, (Uart*)usart, irq, id, rxBuffer, txBuffer);\n        PTR_PTR_write_1_000815f4 = &write;\n        this->usart = usart;\n    }\n\nprivate:\n    UARTClass superUARTClass;\n    Usart* usart;\n    void (*PTR_PTR_write_1_000815f4)(void*, uint8_t);\n\n    static void write(void* usartWrapper, uint8_t data) {\n        ((UsartWrapper_000815d4*)usartWrapper)->usart->sendData(data);\n    }\n};",
            "called": [
                "UARTClass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815d4",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "UsartWrapper_000815d4"
        },
        "FUN_00080d24": {
            "renaming": {
                "FUN_00080d24": "set_param_value_00080d24",
                "param_1": "obj_ptr",
                "param_2": "value",
                "param_3": "flag",
                "*(undefined4 *)(param_1 + 100)": "*(int *)(obj_ptr + 100)",
                "*(undefined4 *)(param_1 + 0x60)": "*(int *)(obj_ptr + 96)"
            },
            "code": "void set_param_value_00080d24(int obj_ptr, int value, int flag) {\n  if (flag != 0) {\n    *(int *)(obj_ptr + 100) = value;\n    return;\n  }\n  *(int *)(obj_ptr + 96) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d24",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "set_param_value_00080d24"
        },
        "FUN_00081e14": {
            "renaming": {
                "FUN_00081e14": "FUNC_00081e14"
            },
            "code": "\nint * FUNC_00081e14(undefined4 *param_1,uint param_2)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  uint uVar3;\n  uint uVar4;\n  undefined *puVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined4 *puVar10;\n  undefined *puVar11;\n  undefined *puVar12;\n  undefined *puVar13;\n  undefined4 *puVar14;\n  uint uVar15;\n  undefined4 *puVar16;\n  undefined *puVar17;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081e7a;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081e7a:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  __malloc_lock(param_1);\n  puVar1 = PTR___malloc_av__00082140;\n  if (uVar15 < 0x1f8) {\n    puVar13 = *(undefined **)(PTR___malloc_av__00082140 + uVar15 + 0xc);\n    if ((puVar13 != PTR___malloc_av__00082140 + uVar15) ||\n       (puVar12 = puVar13 + 8, puVar13 = *(undefined **)(puVar13 + 0x14), puVar12 != puVar13)) {\n      uVar9 = *(uint *)(puVar13 + 4);\n      iVar6 = *(int *)(puVar13 + 0xc);\n      uVar15 = *(uint *)(puVar13 + (uVar9 & 0xfffffffc) + 4);\n      iVar2 = *(int *)(puVar13 + 8);\n      *(int *)(iVar2 + 0xc) = iVar6;\n      *(int *)(iVar6 + 8) = iVar2;\n      *(uint *)(puVar13 + (uVar9 & 0xfffffffc) + 4) = uVar15 | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    uVar9 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar9 = uVar15 >> 9;\n    if (uVar9 == 0) {\n      iVar6 = 0x7e;\n      iVar2 = 0x3f;\n    }\n    else if (uVar9 < 5) {\n      iVar2 = (uVar15 >> 6) + 0x38;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x15) {\n      iVar2 = uVar9 + 0x5b;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x55) {\n      iVar2 = (uVar15 >> 0xc) + 0x6e;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x155) {\n      iVar2 = (uVar15 >> 0xf) + 0x77;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x555) {\n      iVar2 = (uVar15 >> 0x12) + 0x7c;\n      iVar6 = iVar2 * 2;\n    }\n    else {\n      iVar6 = 0xfc;\n      iVar2 = 0x7e;\n    }\n    for (puVar13 = *(undefined **)(PTR___malloc_av__00082140 + iVar6 * 4 + 0xc);\n        PTR___malloc_av__00082140 + iVar6 * 4 != puVar13; puVar13 = *(undefined **)(puVar13 + 0xc))\n    {\n      uVar9 = *(uint *)(puVar13 + 4) & 0xfffffffc;\n      if (0xf < (int)(uVar9 - uVar15)) {\n        iVar2 = iVar2 + -1;\n        break;\n      }\n      if (-1 < (int)(uVar9 - uVar15)) {\n        uVar15 = *(uint *)(puVar13 + uVar9 + 4);\n        iVar6 = *(int *)(puVar13 + 0xc);\n        iVar2 = *(int *)(puVar13 + 8);\n        *(int *)(iVar2 + 0xc) = iVar6;\n        *(int *)(iVar6 + 8) = iVar2;\n        *(uint *)(puVar13 + uVar9 + 4) = uVar15 | 1;\n        __malloc_unlock(param_1);\n        return (int *)(puVar13 + 8);\n      }\n    }\n    uVar9 = iVar2 + 1;\n  }\n  puVar13 = *(undefined **)(PTR___malloc_av__00082140 + 0x10);\n  puVar12 = PTR___malloc_av__00082140 + 8;\n  if (puVar13 == puVar12) {\n    uVar3 = *(uint *)(PTR___malloc_av__00082140 + 4);\n  }\n  else {\n    uVar3 = *(uint *)(puVar13 + 4);\n    uVar4 = uVar3 & 0xfffffffc;\n    uVar7 = uVar4 - uVar15;\n    if (0xf < (int)uVar7) {\n      puVar5 = puVar13 + uVar15;\n      *(uint *)(puVar13 + 4) = uVar15 | 1;\n      *(undefined **)(puVar1 + 0x14) = puVar5;\n      *(undefined **)(puVar1 + 0x10) = puVar5;\n      *(undefined **)(puVar5 + 0xc) = puVar12;\n      *(undefined **)(puVar5 + 8) = puVar12;\n      *(uint *)(puVar5 + 4) = uVar7 | 1;\n      *(uint *)(puVar5 + uVar7) = uVar7;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    *(undefined **)(PTR___malloc_av__00082140 + 0x14) = puVar12;\n    *(undefined **)(puVar1 + 0x10) = puVar12;\n    if (-1 < (int)uVar7) {\n      *(uint *)(puVar13 + uVar4 + 4) = *(uint *)(puVar13 + uVar4 + 4) | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    if (uVar4 < 0x200) {\n      puVar5 = puVar1 + (uVar3 & 0xfffffff8);\n      iVar2 = *(int *)(puVar5 + 8);\n      uVar3 = 1 << ((int)(uVar3 >> 3) >> 2 & 0xffU) | *(uint *)(puVar1 + 4);\n      *(int *)(puVar13 + 8) = iVar2;\n      *(undefined **)(puVar13 + 0xc) = puVar5;\n      *(uint *)(puVar1 + 4) = uVar3;\n      *(undefined **)(puVar5 + 8) = puVar13;\n      *(undefined **)(iVar2 + 0xc) = puVar13;\n    }\n    else {\n      uVar7 = uVar3 >> 9;\n      if (uVar7 < 5) {\n        iVar6 = (uVar3 >> 6) + 0x38;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x15) {\n        iVar6 = uVar7 + 0x5b;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x55) {\n        iVar6 = (uVar3 >> 0xc) + 0x6e;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x155) {\n        iVar6 = (uVar3 >> 0xf) + 0x77;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x555) {\n        iVar6 = (uVar3 >> 0x12) + 0x7c;\n        iVar2 = iVar6 * 2;\n      }\n      else {\n        iVar2 = 0xfc;\n        iVar6 = 0x7e;\n      }\n      puVar5 = puVar1 + iVar2 * 4;\n      puVar17 = *(undefined **)(puVar5 + 8);\n      if (puVar17 == puVar5) {\n        uVar3 = *(uint *)(PTR___malloc_av__00082348 + 4) | 1 << (iVar6 >> 2 & 0xffU);\n        *(uint *)(PTR___malloc_av__00082348 + 4) = uVar3;\n        puVar11 = puVar17;\n      }\n      else {\n        do {\n          puVar11 = puVar17;\n          if ((*(uint *)(puVar17 + 4) & 0xfffffffc) <= uVar4) break;\n          puVar17 = *(undefined **)(puVar17 + 8);\n          puVar11 = puVar17;\n        } while (puVar5 != puVar17);\n        puVar17 = *(undefined **)(puVar11 + 0xc);\n        uVar3 = *(uint *)(puVar1 + 4);\n      }\n      *(undefined **)(puVar13 + 0xc) = puVar17;\n      *(undefined **)(puVar13 + 8) = puVar11;\n      *(undefined **)(puVar17 + 8) = puVar13;\n      *(undefined **)(puVar11 + 0xc) = puVar13;\n    }\n  }\n  uVar4 = 1 << ((int)uVar9 >> 2 & 0xffU);\n  if (uVar4 <= uVar3) {\n    if ((uVar3 & uVar4) == 0) {\n      uVar9 = uVar9 & 0xfffffffc;\n      do {\n        uVar4 = uVar4 << 1;\n        uVar9 = uVar9 + 4;\n      } while ((uVar3 & uVar4) == 0);\n    }\n    do {\n      puVar16 = (undefined4 *)(puVar1 + uVar9 * 8);\n      puVar14 = puVar16;\n      uVar3 = uVar9;\n      do {\n        for (puVar10 = (undefined4 *)puVar14[3]; puVar14 != puVar10;\n            puVar10 = (undefined4 *)puVar10[3]) {\n          uVar7 = puVar10[1] & 0xfffffffc;\n          uVar8 = uVar7 - uVar15;\n          if (0xf < (int)uVar8) {\n            iVar6 = puVar10[2];\n            iVar2 = puVar10[3];\n            puVar13 = (undefined *)(uVar15 + (int)puVar10);\n            puVar10[1] = uVar15 | 1;\n            *(int *)(iVar6 + 0xc) = iVar2;\n            *(int *)(iVar2 + 8) = iVar6;\n            *(undefined **)(puVar1 + 0x14) = puVar13;\n            *(undefined **)(puVar1 + 0x10) = puVar13;\n            *(undefined **)(puVar13 + 0xc) = puVar12;\n            *(undefined **)(puVar13 + 8) = puVar12;\n            *(uint *)(puVar13 + 4) = uVar8 | 1;\n            *(uint *)(puVar13 + uVar8) = uVar8;\n            __malloc_unlock(param_1);\n            return puVar10 + 2;\n          }\n          if (-1 < (int)uVar8) {\n            iVar2 = puVar10[2];\n            iVar6 = puVar10[3];\n            *(uint *)((int)puVar10 + uVar7 + 4) = *(uint *)((int)puVar10 + uVar7 + 4) | 1;\n            *(int *)(iVar2 + 0xc) = iVar6;\n            *(int *)(iVar6 + 8) = iVar2;\n            __malloc_unlock(param_1);\n            return puVar10 + 2;\n          }\n        }\n        uVar3 = uVar3 + 1;\n        puVar14 = puVar14 + 2;\n      } while ((uVar3 & 3) != 0);\n      do {\n        uVar7 = uVar9 & 3;\n        puVar14 = puVar16 + -2;\n        uVar9 = uVar9 - 1;\n        if (uVar7 == 0) {\n          uVar7 = *(uint *)(puVar1 + 4) & ~uVar4;\n          *(uint *)(puVar1 + 4) = uVar7;\n          goto LAB_00082262;\n        }\n        puVar16 = (undefined4 *)*puVar16;\n      } while (puVar16 == puVar14);\n      uVar7 = *(uint *)(puVar1 + 4);\nLAB_00082262:\n      uVar4 = uVar4 * 2;\n      if ((uVar7 <= uVar4 && uVar4 - uVar7 != 0) || (uVar9 = uVar3, uVar4 == 0)) break;\n      for (; (uVar7 & uVar4) == 0; uVar4 = uVar4 << 1) {\n        uVar9 = uVar9 + 4;\n      }\n    } while( true );\n  }\n  puVar13 = PTR___malloc_sbrk_base_00082148;\n  puVar12 = *(undefined **)(puVar1 + 8);\n  uVar9 = *(uint *)(puVar12 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar9) && (uVar3 = uVar9 - uVar15, puVar5 = puVar12, 0xf < (int)uVar3))\n  goto LAB_0008211e;\n  puVar17 = puVar12 + uVar9;\n  if (*(int *)PTR___malloc_sbrk_base_00082148 == -1) {\n    uVar3 = uVar15 + *(int *)PTR___malloc_top_pad_00082144 + 0x10;\n  }\n  else {\n    uVar3 = uVar15 + *(int *)PTR___malloc_top_pad_00082144 + 0x100f & 0xfffff000;\n  }\n  puVar5 = (undefined *)_sbrk_r(param_1,uVar3);\n  puVar11 = PTR___malloc_current_mallinfo_00082154;\n  if ((puVar5 == (undefined *)0xffffffff) || ((puVar5 < puVar17 && (puVar12 != puVar1)))) {\n    puVar5 = *(undefined **)(puVar1 + 8);\n    uVar9 = *(uint *)(puVar5 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar4 = *(int *)PTR___malloc_current_mallinfo_00082154 + uVar3;\n    *(uint *)PTR___malloc_current_mallinfo_00082154 = uVar4;\n    if ((puVar17 == puVar5) && (((uint)puVar17 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(puVar1 + 8) + 4) = uVar3 + uVar9 | 1;\n    }\n    else {\n      if (*(int *)puVar13 == -1) {\n        *(undefined **)PTR___malloc_sbrk_base_00082148 = puVar5;\n      }\n      else {\n        *(undefined **)puVar11 = puVar5 + (uVar4 - (int)puVar17);\n      }\n      uVar4 = (uint)puVar5 & 7;\n      if (uVar4 == 0) {\n        iVar2 = 0x1000;\n      }\n      else {\n        puVar5 = puVar5 + (8 - uVar4);\n        iVar2 = 0x1008 - uVar4;\n      }\n      iVar2 = iVar2 - ((uint)(puVar5 + uVar3) & 0xfff);\n      iVar6 = _sbrk_r(param_1,iVar2);\n      if (iVar6 == -1) {\n        uVar3 = 1;\n        iVar2 = 0;\n      }\n      else {\n        uVar3 = (iVar6 - (int)puVar5) + iVar2 | 1;\n      }\n      uVar4 = *(int *)puVar11 + iVar2;\n      *(undefined **)(puVar1 + 8) = puVar5;\n      *(uint *)puVar11 = uVar4;\n      *(uint *)(puVar5 + 4) = uVar3;\n      puVar13 = PTR___malloc_current_mallinfo_00082154;\n      if (puVar12 != puVar1) {\n        if (uVar9 < 0x10) {\n          *(undefined4 *)(puVar5 + 4) = 1;\n          uVar9 = 0;\n          goto LAB_00082108;\n        }\n        uVar9 = uVar9 - 0xc & 0xfffffff8;\n        *(uint *)(puVar12 + 4) = uVar9 | *(uint *)(puVar12 + 4) & 1;\n        *(undefined4 *)(puVar12 + uVar9 + 4) = 5;\n        *(undefined4 *)(puVar12 + uVar9 + 8) = 5;\n        if (0xf < uVar9) {\n          _free_r(param_1,puVar12 + 8);\n          uVar4 = *(uint *)puVar13;\n        }\n      }\n    }\n    puVar5 = *(undefined **)(puVar1 + 8);\n    if (*(uint *)PTR___malloc_max_sbrked_mem_0008214c < uVar4) {\n      *(uint *)PTR___malloc_max_sbrked_mem_0008214c = uVar4;\n    }\n    if (*(uint *)PTR___malloc_max_total_mem_00082150 < uVar4) {\n      *(uint *)PTR___malloc_max_total_mem_00082150 = uVar4;\n    }\n    uVar9 = *(uint *)(puVar5 + 4) & 0xfffffffc;\n  }\nLAB_00082108:\n  uVar3 = uVar9 - uVar15;\n  if ((uVar9 < uVar15) || ((int)uVar3 < 0x10)) {\n    __malloc_unlock(param_1);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  *(uint *)(puVar5 + 4) = uVar15 | 1;\n  *(undefined **)(puVar1 + 8) = puVar5 + uVar15;\n  *(uint *)(puVar5 + uVar15 + 4) = uVar3 | 1;\n  __malloc_unlock(param_1);\n  return (int *)(puVar5 + 8);\n}\n\n",
            "called": [
                "_free_r",
                "__malloc_lock",
                "_sbrk_r",
                "__malloc_unlock"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081e14",
            "calling": [
                "__sfvwrite_r",
                "malloc",
                "_realloc_r",
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "FUNC_00081e14"
        },
        "FUN_000818b8": {
            "renaming": {
                "FUN_000818b8": "calculate_000818b8",
                "param_1": "num1",
                "param_2": "num2",
                "uVar1": "x",
                "uVar2": "y",
                "iVar3": "leading_zeroes",
                "uVar4": "shift_amount",
                "iVar5": "multiplier",
                "uVar6": "shifted_num1"
            },
            "code": "uint calculate_000818b8(uint num1, uint num2)\n{\n  if ((num1 | num2) == 0) {\n    return num1;\n  }\n  uint x = num1;\n  uint y = num2;\n  if (num2 == 0) {\n    x = 0;\n    y = num1;\n  }\n  int multiplier = 0x5b000000;\n  if (num2 == 0) {\n    multiplier = 0x4b000000;\n  }\n  int leading_zeroes = count_leading_zeroes(y);\n  uint shift_amount = leading_zeroes - 8;\n  multiplier = multiplier + -0x800000 + shift_amount * -0x800000;\n  if (leading_zeroes < 8) {\n    uint shifted_num = y << (leading_zeroes + 0x18U & 0xff);\n    y = multiplier + ((y >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)shifted_num >> 0x1f));\n    if ((x | shifted_num << 1) == 0) {\n      y = y & ~(shifted_num >> 0x1f);\n    }\n    return y;\n  }\n  uint shifted_num1 = x << (shift_amount & 0xff);\n  y = multiplier + (y << (shift_amount & 0xff)) + (x >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < shifted_num1);\n  if (shifted_num1 == 0x80000000) {\n    y = y & 0xfffffffe;\n  }\n  return y;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000818b8",
            "calling": [],
            "imported": false,
            "current_name": "calculate_000818b8"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "initializeModbus_00080164",
                "this": "modbusInstance",
                "u32speed": "baudRate",
                "puVar1": "serialPtr",
                "iVar2": "readResult",
                "PTR_Serial_000801ac": "originalSerialPointer",
                "port": "serialPort",
                "u8txenpin": "transmitEnablePin",
                "u8BufferSize": "bufferSize",
                "u8lastRec": "lastReceived",
                "u16errCnt": "errorCount",
                "u16OutCnt": "outgoingMessageCount",
                "u16InCnt": "incomingMessageCount"
            },
            "code": "void __thiscall initializeModbus_00080164(Modbus *modbusInstance, long baudRate)\n{\n  undefined *serialPtr;\n  int readResult;\n  serialPtr = PTR_Serial_000801ac;\n  modbusInstance->serialPort = (HardwareSerial *)serialPtr;\n  (**(code **)(*(int *)serialPtr + 0x18))(serialPtr);\n  if (1 < modbusInstance->transmitEnablePin) {\n    pinMode((uint)modbusInstance->transmitEnablePin, OUTPUT);\n    digitalWrite((uint)modbusInstance->transmitEnablePin, LOW);\n  }\n  do {\n    readResult = (**(code **)(*(int *)modbusInstance->serialPort + 0xc))();\n  } while (-1 < readResult);\n  modbusInstance->bufferSize = 0;\n  modbusInstance->lastReceived = 0;\n  modbusInstance->errorCount = 0;\n  modbusInstance->outgoingMessageCount = 0;\n  modbusInstance->incomingMessageCount = 0;\n  return;\n}",
            "called": [
                "pinMode",
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initializeModbus_00080164"
        },
        "FUN_000811cc": {
            "renaming": {
                "FUN_000811cc": "copy_string_to_dat_000811cc",
                "file_UNUSED": "file_unused",
                "ptr": "source_string",
                "len": "length",
                "iVar1": "i"
            },
            "code": "int copy_string_to_dat_000811cc(int file_unused, char *source_string, int length)\n{\n  int i;\n  for (i = 0; i < length; i++) {\n    do {\n    } while (-1 < *(int *)(DAT_000811ec + 0x14) << 0x1e);\n    *(uint *)(DAT_000811ec + 0x1c) = (uint)(byte)source_string[i];\n  }\n  return length & ~(length >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811cc",
            "calling": [
                "_write_r"
            ],
            "imported": false,
            "current_name": "copy_string_to_dat_000811cc"
        },
        "FUN_000846dc": {
            "renaming": {
                "FUN_000846dc": "check_if_terminal_000846dc",
                "param_1": "error_code",
                "param_2": "fd",
                "puVar1": "error_ptr",
                "iVar2": "is_terminal"
            },
            "code": "void check_if_terminal_000846dc(int *error_code, int fd) {\n    undefined *error_ptr;\n    int is_terminal;\n    \n    error_ptr = PTR_errno_000846fc;\n    *(undefined4 *)PTR_errno_000846fc = 0;\n    is_terminal = _isatty(fd);\n    if ((is_terminal == -1) && (*(int *)error_ptr != 0)) {\n        *error_code = *(int *)error_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "_isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846dc",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "check_if_terminal_000846dc"
        },
        "FUN_00081be4": {
            "renaming": {
                "FUN_00081be4": "calculate_result_00081be4",
                "param_1": "num1",
                "param_2": "num2",
                "uVar2": "double_num1",
                "uVar3": "double_num2",
                "uVar4": "combined_nums",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "code": "uint calculate_result_00081be4(uint num1, uint num2) {\n  bool is_negative;\n  uint double_num1 = num1 * 2;\n  uint double_num2 = num2 * 2;\n  \n  if (((int)double_num1 >> 0x18 == -1 || (int)double_num2 >> 0x18 == -1) &&\n     ((((int)double_num1 >> 0x18 == -1 && ((num1 & 0x7fffff) != 0)) ||\n      (((int)double_num2 >> 0x18 == -1 && ((num2 & 0x7fffff) != 0)))))) {\n    return 0xffffffff;\n  }\n  \n  uint combined_nums = double_num1 | num2 & 0x7fffffff;\n  bool is_zero = combined_nums == 0;\n  if (!is_zero) {\n    combined_nums = num1 ^ num2;\n    is_zero = combined_nums == 0;\n  }\n  \n  is_negative = -1 < (int)combined_nums;\n  if (is_negative) {\n    num1 = double_num1 + num2 * -2;\n    is_zero = num1 == 0;\n  }\n  \n  if (is_negative && double_num2 <= double_num1 && !is_zero) {\n    num1 = (int)num2 >> 0x1f;\n  }\n  \n  if (!is_negative || double_num2 > double_num1) {\n    num1 = ~((int)num2 >> 0x1f);\n  }\n  \n  if (!is_zero) {\n    num1 = num1 | 1;\n  }\n  \n  return num1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081be4",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_00081be4"
        },
        "FUN_000815ca": {
            "renaming": {
                "FUN_000815ca": "initialize_USART_000815ca",
                "this": "USART",
                "dwBaudRate": "baud_rate"
            },
            "code": "void __thiscall initialize_USART_000815ca(USARTClass *USART, uint32_t baud_rate) {\n  UARTClass::init(&USART->super_UARTClass, baud_rate, 0x8c0);\n  return;\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815ca",
            "calling": [],
            "imported": false,
            "current_name": "initialize_USART_000815ca"
        },
        "FUN_00081894": {
            "renaming": {
                "FUN_00081894": "calculate_hash_00081894",
                "param_1": "input_num",
                "iVar1": "leading_zeroes_count",
                "uVar2": "shift_amount",
                "iVar3": "shift_sign",
                "uVar4": "shift_mask",
                "hash_value": "hash_value",
                "sign_mask": "sign_mask"
            },
            "code": "uint calculate_hash_00081894(uint input_num)\n{\n  int leading_zeroes_count;\n  uint shift_amount;\n  int shift_sign;\n  uint hash_value;\n  uint shift_mask;\n  uint sign_mask;\n  \n  if (input_num == 0) {\n    return 0;\n  }\n  leading_zeroes_count = count_leading_zeroes(input_num);\n  shift_amount = leading_zeroes_count - 8;\n  shift_sign = shift_amount * -0x800000 + 0x4a800000;\n  if (7 < leading_zeroes_count) {\n    shift_mask = 0 << (shift_amount & 0xff);\n    hash_value = shift_sign + (input_num << (shift_amount & 0xff)) + (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < shift_mask);\n    if (shift_mask == 0x80000000) {\n      hash_value = hash_value & 0xfffffffe;\n    }\n    return hash_value;\n  }\n  sign_mask = param_1 << (leading_zeroes_count + 0x18U & 0xff);\n  hash_value = shift_sign + ((input_num >> (0x20 - (leading_zeroes_count + 0x18U) & 0xff)) - ((int)sign_mask >> 0x1f));\n  if ((sign_mask & 0x7fffffff) == 0) {\n    hash_value = hash_value & ~(sign_mask >> 0x1f);\n  }\n  return hash_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081894",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_hash_00081894"
        },
        "FUN_00084248": {
            "renaming": {
                "FUN_00084248": "process_data_00084248",
                "param_1": "data",
                "param_2": "callback",
                "piVar5": "data_ptr",
                "uVar4": "result",
                "iVar2": "inner_data",
                "iVar3": "inner_data_count",
                "*(ushort *)(iVar2 + 0xc)": "*(ushort *)(inner_data + 0xc)",
                "*(short *)(iVar2 + 0xe)": "*(short *)(inner_data + 0xe)",
                "uVar1": "callback_result"
            },
            "code": "uint process_data_00084248(int data, code *callback)\n{\n  uint result = 0;\n  int *data_ptr = (int *)(data + 0x2e0);\n  if (data_ptr != (int *)0x0) {\n    do {\n      int inner_data = data_ptr[2];\n      int inner_data_count = data_ptr[1] + -1;\n      if (-1 < inner_data_count) {\n        do {\n          inner_data_count--;\n          if ((1 < *(ushort *)(inner_data + 0xc)) && (*(short *)(inner_data + 0xe) != -1)) {\n            uint callback_result = (*callback)(inner_data);\n            result |= callback_result;\n          }\n          inner_data += 0x68;\n        } while (inner_data_count != -1);\n      }\n      data_ptr = (int *)*data_ptr;\n    } while (data_ptr != (int *)0x0);\n    return result;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084248",
            "calling": [
                "_cleanup_r"
            ],
            "imported": false,
            "current_name": "process_data_00084248"
        },
        "FUN_000845bc": {
            "renaming": {
                "FUN_000845bc": "write_byte_to_memory_if_possible_000845bc",
                "param_1": "memory",
                "param_2": "byte",
                "param_3": "size",
                "*param_1": "*memory",
                "*param_2": "byte",
                "(undefined *)0x0": "NULL",
                "0x100": "256",
                "(char)": "(unsigned char)",
                "*param_1 = 0x8a;": "*memory = 138;",
                "0xffffffff": "-1"
            },
            "code": "int write_byte_to_memory_if_possible_000845bc(int *memory, unsigned char byte, uint size) {\n  if (memory == NULL) {\n    return 0;\n  }\n  if (size < 256) {\n    *memory = byte;\n    return 1;\n  }\n  *memory = 138;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845bc",
            "calling": [
                "_wcrtomb_r"
            ],
            "imported": false,
            "current_name": "write_byte_to_memory_if_possible_000845bc"
        },
        "FUN_00081412": {
            "renaming": {
                "FUN_00081412": "readByte_00081412",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__nbytes": "numBytes",
                "bVar1": "byteToRead",
                "pRVar2": "rxBuffer"
            },
            "code": "ssize_t __thiscall UARTClass::readByte_00081412(UARTClass *this, int fileDescriptor, void *buffer, size_t numBytes) {\n  byte byteToRead;\n  RingBuffer *rxBuffer;\n\n  rxBuffer = this->_rx_buffer;\n  if (rxBuffer->_iHead != rxBuffer->_iTail) {\n    byteToRead = rxBuffer->_aucBuffer[rxBuffer->_iTail];\n    rxBuffer->_iTail = (rxBuffer->_iTail + 1U) & 0x7f;\n    return (uint)byteToRead;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081412",
            "calling": [],
            "imported": false,
            "current_name": "readByte_00081412"
        },
        "FUN_000838cc": {
            "renaming": {
                "FUN_000838cc": "add_to_array_000838cc",
                "param_1": "value",
                "param_2": "array",
                "param_3": "size",
                "param_4": "array_end",
                "puVar1": "current_array",
                "uVar2": "array_size",
                "uVar4": "bit_mask",
                "iVar3": "impure_ptr_value"
            },
            "code": "int add_to_array_000838cc(int value, int* array, int size, int* array_end){\n  int* current_array;\n  uint array_size;\n  int impure_ptr_value = *(int *)PTR__global_impure_ptr_0008396c;\n  current_array = *(int **)(impure_ptr_value + 0x148);\n  if (current_array == (int *)0x0) {\n    current_array = (int *)(impure_ptr_value + 0x14c);\n    *(int **)(impure_ptr_value + 0x148) = current_array;\n  }\n  array_size = current_array[1];\n  if (0x1f < (int)array_size) {\n    if (DAT_00083970 != 0) {\n      current_array = (int *)malloc(400);\n      if (current_array != (int *)0x0) {\n        *current_array = *(int *)(impure_ptr_value + 0x148);\n        current_array[1] = 0;\n        array_size = 0;\n        *(int **)(impure_ptr_value + 0x148) = current_array;\n        current_array[0x62] = 0;\n        current_array[99] = 0;\n        goto LAB_00083922;\n      }\n    }\n    return -1;\n  }\nLAB_00083922:\n  if (value != 0) {\n    uint bit_mask = 1 << (array_size & 0xff);\n    current_array[array_size + 0x22] = size;\n    current_array[0x62] = current_array[0x62] | bit_mask;\n    current_array[array_size + 0x42] = (int)array_end;\n    if (value == 2) {\n      current_array[99] = bit_mask | current_array[99];\n    }\n  }\n  current_array[1] = array_size + 1;\n  current_array[array_size + 2] = (int)array;\n  return 0;\n}",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000838cc",
            "calling": [
                "__cxa_atexit",
                "atexit"
            ],
            "imported": false,
            "current_name": "add_to_array_000838cc"
        },
        "FUN_00085858": {
            "renaming": {
                "FUN_00085858": "do_nothing_00085858"
            },
            "code": "\nvoid do_nothing_00085858(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085858",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "do_nothing_00085858"
        },
        "FUN_00082504": {
            "renaming": {
                "FUN_00082504": "fill_memory_with_byte_00082504",
                "__s": "ptr",
                "__c": "byte",
                "__n": "size",
                "puVar1": "aligned_ptr",
                "puVar2": "current_ptr",
                "puVar3": "next_ptr",
                "uVar4": "pattern",
                "uVar5": "remaining_size",
                "bVar6": "size_is_zero"
            },
            "code": "void* fill_memory_with_byte_00082504(void* ptr, int byte, size_t size)\n{\n  uint32_t* current_ptr = (uint32_t*)ptr;\n  if (((uint32_t)ptr & 3) != 0) {\n    bool size_is_zero = size == 0;\n    uint32_t* aligned_ptr = (uint32_t*)ptr;\n    size = size - 1;\n    if (size_is_zero) {\n      return ptr;\n    }\n    while (true) {\n      current_ptr = (uint32_t*)((int)aligned_ptr + 1);\n      *(char*)aligned_ptr = (char)byte;\n      if (((uint32_t)current_ptr & 3) == 0) {\n        break;\n      }\n      size_is_zero = size == 0;\n      aligned_ptr = current_ptr;\n      size = size - 1;\n      if (size_is_zero) {\n        return ptr;\n      }\n    }\n  }\n  if (3 < size) {\n    uint32_t pattern = byte & 0xffU | (byte & 0xffU) << 8;\n    pattern = pattern | pattern << 0x10;\n    uint32_t* aligned_ptr = current_ptr;\n    if (0xf < size) {\n      uint32_t remaining_size = size - 0x10;\n      do {\n        *aligned_ptr = pattern;\n        aligned_ptr[1] = pattern;\n        aligned_ptr[2] = pattern;\n        aligned_ptr[3] = pattern;\n        aligned_ptr = aligned_ptr + 4;\n      } while (aligned_ptr != (uint32_t*)((int)current_ptr + (remaining_size & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      current_ptr = current_ptr + ((remaining_size >> 4) + 1) * 4;\n      aligned_ptr = current_ptr;\n      if (size < 4) {\n        goto LAB_00082580;\n      }\n    }\n    do {\n      size = size - 4;\n      *current_ptr = pattern;\n      current_ptr = current_ptr + 1;\n    } while (3 < size);\n    aligned_ptr = (uint32_t*)((int)aligned_ptr + (size - 4 & 0xfffffffc) + 4);\n    size = size & 3;\n  }\nLAB_00082580:\n  if (size != 0) {\n    uint32_t* aligned_ptr = current_ptr;\n    do {\n      uint32_t* next_ptr = (uint32_t*)((int)aligned_ptr + 1);\n      *(char*)aligned_ptr = (char)byte;\n      aligned_ptr = next_ptr;\n    } while (aligned_ptr != (uint32_t*)(size + (int)current_ptr));\n  }\n  return ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082504",
            "calling": [
                "RingBuffer",
                "__sinit"
            ],
            "imported": false,
            "current_name": "fill_memory_with_byte_00082504"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "check_if_completed_000800f4",
                "*PTR_completed_7857_0008010c": "completed_flag",
                "DAT_00080110": "data_flag",
                "PTR__etext_00080114": "end_of_text"
            },
            "code": "char *check_if_completed_000800f4(char *param_1)\n{\n  if (**PTR_completed_7857_0008010c == '\\0') {\n    if (DAT_00080110 != 0) {\n      param_1 = PTR__etext_00080114;\n    }\n    **PTR_completed_7857_0008010c = 1;\n  }\n  return param_1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "check_if_completed_000800f4"
        },
        "FUN_0008378c": {
            "renaming": {
                "FUN_0008378c": "print_formatted_string_0008378c",
                "param_1": "file_pointer",
                "param_2": "parameter_2",
                "iVar1": "printf_return_value",
                "iVar2": "fflush_return_value",
                "local_488": "stack_buffer",
                "local_480": "local_1c",
                "local_47c": "local_24",
                "local_47a": "local_28",
                "local_478": "local_buffer",
                "local_474": "local_30",
                "local_470": "local_38",
                "local_464": "local_28",
                "local_424": "local_3c",
                "auStack_420": "local_3c"
            },
            "code": "int print_formatted_string_0008378c(FILE* file_pointer, int parameter_2)\n{\n  int printf_return_value;\n  int fflush_return_value;\n  char* stack_buffer[2];\n  char* local_buffer;\n  int local_1c;\n  int local_24;\n  int local_28;\n  int local_30;\n  int local_38;\n  char local_3c[1024];\n  \n  local_38 = *(int*)(parameter_2 + 100);\n  local_28 = *(int*)(parameter_2 + 28);\n  local_24 = *(short*)(parameter_2 + 14);\n  local_30 = *(int*)(parameter_2 + 36);\n  stack_buffer[0] = local_3c;\n  local_1c = *(short*)(parameter_2 + 12) & 0xFFFD;\n  local_buffer = stack_buffer[0];\n  printf_return_value = vfprintf(file_pointer, stack_buffer);\n  if ((printf_return_value >= 0) && (fflush_return_value = fflush(file_pointer), fflush_return_value != 0)) {\n    printf_return_value = -1;\n  }\n  if ((int)((unsigned int)local_1c << 0x19) < 0) {\n    *(short*)(parameter_2 + 12) = *(short*)(parameter_2 + 12) | 0x40;\n  }\n  return printf_return_value;\n}",
            "called": [
                "_vfiprintf_r",
                "_fflush_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008378c",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "print_formatted_string_0008378c"
        },
        "FUN_00083adc": {
            "renaming": {
                "FUN_00083adc": "initialize_if_not_already_initialized_00083adc",
                "param_1": "obj_address",
                "param_2": "flag_address",
                "*(int *)(param_1 + 0x38)": "*obj_initialized",
                "*(short *)(param_2 + 0xc)": "*flag"
            },
            "code": "void initialize_if_not_already_initialized_00083adc(int obj_address, int flag_address) {\n  int* obj_initialized = (int*)(obj_address + 0x38);\n  short* flag = (short*)(flag_address + 0xc);\n  if (obj_address != 0 && *obj_initialized == 0) {\n    __sinit();\n  }\n  if (*flag == 0) {\n    return;\n  }\n  __sflush_r(obj_address);\n  return;\n}",
            "called": [
                "__sinit",
                "__sflush_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083adc",
            "calling": [
                "__sfvwrite_r",
                "__sbprintf",
                "_fclose_r",
                "__swbuf_r"
            ],
            "imported": false,
            "current_name": "initialize_if_not_already_initialized_00083adc"
        },
        "FUN_000825b0": {
            "renaming": {
                "FUN_000825b0": "FUNC_000825b0"
            },
            "code": "\nint * FUNC_000825b0(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  size_t sVar5;\n  uint uVar6;\n  int *piVar7;\n  uint uVar8;\n  uint uVar9;\n  int *piVar10;\n  int iVar11;\n  \n  if (param_2 == (int *)0x0) {\n    piVar3 = (int *)_malloc_r(param_1,param_3);\n    return piVar3;\n  }\n  __malloc_lock();\n  puVar1 = PTR___malloc_av__0008296c;\n  uVar6 = param_2[-1];\n  uVar8 = uVar6 & 0xfffffffc;\n  piVar3 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar9 = 0x10;\n  }\n  else {\n    uVar9 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar9 < 0) goto LAB_0008267c;\n  }\n  if (uVar9 < param_3) {\nLAB_0008267c:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar8 < (int)uVar9) {\n    iVar2 = (int)piVar3 + uVar8;\n    iVar11 = *(int *)(PTR___malloc_av__0008296c + 8);\n    if (iVar11 == iVar2) {\n      uVar4 = *(uint *)(iVar11 + 4) & 0xfffffffc;\n      iVar2 = iVar11;\n      if ((int)(uVar9 + 0x10) <= (int)(uVar4 + uVar8)) {\n        *(uint *)(PTR___malloc_av__0008296c + 8) = (int)piVar3 + uVar9;\n        *(uint *)((int)piVar3 + uVar9 + 4) = (uVar4 + uVar8) - uVar9 | 1;\n        param_2[-1] = uVar9 | param_2[-1] & 1U;\n        __malloc_unlock(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar2 + 4) & 0xfffffffe) + iVar2 + 4) & 1) == 0) {\n      uVar4 = *(uint *)(iVar2 + 4) & 0xfffffffc;\n      if ((int)uVar9 <= (int)(uVar4 + uVar8)) {\n        iVar11 = *(int *)(iVar2 + 0xc);\n        iVar2 = *(int *)(iVar2 + 8);\n        *(int *)(iVar2 + 0xc) = iVar11;\n        *(int *)(iVar11 + 8) = iVar2;\n        uVar8 = uVar4 + uVar8;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      uVar4 = 0;\n      iVar2 = 0;\n    }\n    if (-1 < (int)(uVar6 << 0x1f)) {\n      piVar10 = (int *)((int)piVar3 - param_2[-2]);\n      uVar6 = (piVar10[1] & 0xfffffffcU) + uVar8;\n      if (iVar2 != 0) {\n        if (iVar2 == iVar11) {\n          if ((int)(uVar9 + 0x10) <= (int)(uVar4 + uVar6)) {\n            piVar3 = piVar10 + 2;\n            iVar2 = *piVar3;\n            iVar11 = piVar10[3];\n            sVar5 = uVar8 - 4;\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            if (sVar5 < 0x25) {\n              piVar7 = piVar3;\n              if (0x13 < sVar5) {\n                piVar10[2] = *param_2;\n                piVar10[3] = param_2[1];\n                if (sVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar7 = piVar10 + 4;\n                }\n                else {\n                  piVar10[4] = param_2[2];\n                  piVar10[5] = param_2[3];\n                  if (sVar5 == 0x24) {\n                    piVar10[6] = param_2[4];\n                    piVar7 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar10[7] = *piVar7;\n                    piVar7 = piVar10 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar7 = piVar10 + 6;\n                  }\n                }\n              }\n              *piVar7 = *param_2;\n              piVar7[1] = param_2[1];\n              piVar7[2] = param_2[2];\n            }\n            else {\n              memmove(piVar3,param_2,sVar5);\n            }\n            *(uint *)(puVar1 + 8) = (int)piVar10 + uVar9;\n            *(uint *)((int)piVar10 + uVar9 + 4) = (uVar4 + uVar6) - uVar9 | 1;\n            piVar10[1] = uVar9 | piVar10[1] & 1U;\n            __malloc_unlock(param_1);\n            return piVar3;\n          }\n        }\n        else {\n          uVar4 = uVar4 + uVar6;\n          if ((int)uVar9 <= (int)uVar4) {\n            iVar11 = *(int *)(iVar2 + 0xc);\n            iVar2 = *(int *)(iVar2 + 8);\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            piVar7 = piVar10 + 2;\n            iVar2 = *piVar7;\n            iVar11 = piVar10[3];\n            sVar5 = uVar8 - 4;\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            uVar8 = uVar4;\n            if (sVar5 < 0x25) {\n              piVar3 = piVar7;\n              if (0x13 < sVar5) {\n                piVar10[2] = *param_2;\n                piVar10[3] = param_2[1];\n                if (sVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar3 = piVar10 + 4;\n                }\n                else {\n                  piVar10[4] = param_2[2];\n                  piVar10[5] = param_2[3];\n                  if (sVar5 == 0x24) {\n                    piVar10[6] = param_2[4];\n                    piVar3 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar10[7] = *piVar3;\n                    piVar3 = piVar10 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar3 = piVar10 + 6;\n                  }\n                }\n              }\n              *piVar3 = *param_2;\n              piVar3[1] = param_2[1];\n              piVar3[2] = param_2[2];\n              uVar6 = piVar10[1];\n              piVar3 = piVar10;\n              param_2 = piVar7;\n            }\n            else {\n              memmove(piVar7,param_2,sVar5);\n              uVar6 = piVar10[1];\n              piVar3 = piVar10;\n              param_2 = piVar7;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)uVar9 <= (int)uVar6) {\n        piVar7 = piVar10 + 2;\n        iVar2 = *piVar7;\n        iVar11 = piVar10[3];\n        sVar5 = uVar8 - 4;\n        *(int *)(iVar2 + 0xc) = iVar11;\n        *(int *)(iVar11 + 8) = iVar2;\n        uVar8 = uVar6;\n        if (sVar5 < 0x25) {\n          piVar3 = piVar7;\n          if (0x13 < sVar5) {\n            piVar10[2] = *param_2;\n            piVar10[3] = param_2[1];\n            if (sVar5 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar3 = piVar10 + 4;\n            }\n            else {\n              piVar10[4] = param_2[2];\n              piVar10[5] = param_2[3];\n              if (sVar5 == 0x24) {\n                piVar10[6] = param_2[4];\n                piVar3 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar10[7] = *piVar3;\n                piVar3 = piVar10 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar3 = piVar10 + 6;\n              }\n            }\n          }\n          *piVar3 = *param_2;\n          piVar3[1] = param_2[1];\n          piVar3[2] = param_2[2];\n          uVar6 = piVar10[1];\n          piVar3 = piVar10;\n          param_2 = piVar7;\n        }\n        else {\n          memmove(piVar7,param_2,sVar5);\n          uVar6 = piVar10[1];\n          piVar3 = piVar10;\n          param_2 = piVar7;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    piVar10 = (int *)_malloc_r(param_1,param_3);\n    if (piVar10 == (int *)0x0) goto LAB_000826a4;\n    uVar6 = param_2[-1];\n    if (piVar10 + -2 != (int *)((uVar6 & 0xfffffffe) + (int)piVar3)) {\n      sVar5 = uVar8 - 4;\n      if (sVar5 < 0x25) {\n        piVar3 = param_2;\n        piVar7 = piVar10;\n        if (0x13 < sVar5) {\n          *piVar10 = *param_2;\n          piVar10[1] = param_2[1];\n          if (sVar5 < 0x1c) {\n            piVar3 = param_2 + 2;\n            piVar7 = piVar10 + 2;\n          }\n          else {\n            piVar10[2] = param_2[2];\n            piVar10[3] = param_2[3];\n            if (sVar5 == 0x24) {\n              piVar10[4] = param_2[4];\n              piVar10[5] = param_2[5];\n              piVar3 = param_2 + 6;\n              piVar7 = piVar10 + 6;\n            }\n            else {\n              piVar3 = param_2 + 4;\n              piVar7 = piVar10 + 4;\n            }\n          }\n        }\n        *piVar7 = *piVar3;\n        piVar7[1] = piVar3[1];\n        piVar7[2] = piVar3[2];\n      }\n      else {\n        memmove(piVar10,param_2,sVar5);\n      }\n      _free_r(param_1,param_2);\n      goto LAB_000826a4;\n    }\n    uVar8 = uVar8 + (piVar10[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  uVar4 = uVar8 - uVar9;\n  piVar10 = param_2;\n  if (uVar4 < 0x10) {\n    piVar3[1] = uVar6 & 1 | uVar8;\n    *(uint *)((int)piVar3 + uVar8 + 4) = *(uint *)((int)piVar3 + uVar8 + 4) | 1;\n  }\n  else {\n    piVar3[1] = uVar6 & 1 | uVar9;\n    *(uint *)((int)piVar3 + uVar9 + 4) = uVar4 | 1;\n    *(uint *)((int)piVar3 + uVar4 + uVar9 + 4) = *(uint *)((int)piVar3 + uVar4 + uVar9 + 4) | 1;\n    _free_r(param_1,(int)piVar3 + uVar9 + 8);\n  }\nLAB_000826a4:\n  __malloc_unlock(param_1);\n  return piVar10;\n}\n\n",
            "called": [
                "memmove",
                "_free_r",
                "__malloc_lock",
                "__malloc_unlock",
                "_malloc_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000825b0",
            "calling": [
                "__sfvwrite_r",
                "realloc"
            ],
            "imported": false,
            "current_name": "FUNC_000825b0"
        },
        "FUN_0008112c": {
            "renaming": {
                "FUN_0008112c": "process_callbacks_0008112c",
                "uVar1": "leading_zeroes_count",
                "uVar2": "bitmask",
                "PTR_callbacksPioD_00081160": "PTR_callbacks_array",
                "DAT_0008115c": "data_start_address"
            },
            "code": "void process_callbacks_0008112c() {\n  uint bitmask;\n  uint leading_zeroes_count;\n  uint callback_index;\n\n  bitmask = *(uint *)(DAT_0008115c + 0x4c);\n  while( true ) {\n    leading_zeroes_count = count_leading_zeroes(bitmask);\n    if (leading_zeroes_count > 0x1f) break;\n    callback_index = 0x1f - leading_zeroes_count;\n    if (*(code **)(PTR_callbacksPioD_00081160 + callback_index * 4) != (code *)0x0) {\n      (**(code **)(PTR_callbacksPioD_00081160 + callback_index * 4))();\n    }\n    bitmask = bitmask & ~(1 << callback_index);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008112c",
            "calling": [],
            "imported": false,
            "current_name": "process_callbacks_0008112c"
        },
        "FUN_000803d4": {
            "renaming": {
                "FUN_000803d4": "checkBufferValidity_000803d4",
                "iVar1": "bufferIndex",
                "bufferLength": "bufferLength",
                "bufferValue": "bufferValue",
                "u16errCnt": "errorCount",
                "au8Buffer": "buffer",
                "PTR_fctsupported_0008040c": "supportedFunctions",
                "unsupportedFunctionFlag": "unsupportedFunctionFlag",
                "successFlag": "successFlag",
                "errorFlag": "errorFlag"
            },
            "code": "uint8_t __thiscall Modbus::checkBufferValidity_000803d4(Modbus *this)\n{\n  int bufferIndex;\n  int bufferLength = 8;\n  int bufferValue = (uint)this->au8Buffer[1] << 0x18;\n  uint8_t errorFlag = 0x01;\n  uint8_t successFlag = 0x00;\n  uint8_t unsupportedFunctionFlag = 0xfb;\n\n  if (bufferValue < 0)\n  {\n    this->u16errCnt++;\n    return unsupportedFunctionFlag;\n  }\n  for (bufferIndex = 0; bufferIndex < bufferLength; bufferIndex++)\n  {\n    if (PTR_fctsupported_0008040c[bufferIndex] == this->au8Buffer[1])\n    {\n      return successFlag;\n    }\n  }\n  this->u16errCnt++;\n  return errorFlag;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803d4",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "checkBufferValidity_000803d4"
        },
        "FUN_000845d8": {
            "renaming": {
                "FUN_000845d8": "write_to_file_000845d8",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "errno_ptr",
                "iVar2": "write_result"
            },
            "code": "void write_to_file_000845d8(int *error_code, int file_descriptor, char *buffer, int buffer_size) {\n  undefined *errno_ptr;\n  int write_result;\n  errno_ptr = PTR_errno_000845fc;\n  *(undefined4 *)PTR_errno_000845fc = 0;\n  write_result = _write(file_descriptor, buffer, buffer_size);\n  if ((write_result == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845d8",
            "calling": [
                "__swrite"
            ],
            "imported": false,
            "current_name": "write_to_file_000845d8"
        },
        "FUN_0008043e": {
            "renaming": {
                "FUN_0008043e": "readData_0008043e",
                "__fds": "__fileDescriptorSet",
                "__nfds": "__numberOfFileDescriptors",
                "__timeout": "__timeout",
                "byte bVar1": "byte readByte",
                "uint8_t uVar2": "uint8_t rxByte",
                "uint32_t uVar3": "uint32_t currentTime",
                "uint unaff_r6": "uint rxState",
                "u8serno": "serialNumber",
                "u32timeOut": "timeout",
                "u8lastError": "lastError",
                "u8state": "state",
                "u16errCnt": "errorCount",
                "au8Buffer": "buffer",
                "getRxBuffer": "getRxBuffer",
                "validateAnswer": "validateAnswer",
                "get_FC3": "getFunctionCode3"
            },
            "code": "int __thiscall Modbus::readData_0008043e(Modbus *this, fd_set *__fds, int __nfds, int __timeout) {\\n    byte readByte;\\n    uint8_t rxByte;\\n    uint32_t currentTime = millis();\\n    uint rxState;\\n\\n    if (this->serialNumber < 4) {\\n        readByte = (**(code **)(*(int *)this->port + 8))();\\n        rxState = (uint)readByte;\\n    }\\n\\n    if (this->timeout < currentTime) {\\n        this->lastError = 0xff;\\n        this->state = \"\\0\";\\n        this->errorCount = this->errorCount + 1;\\n    } else if (7 < rxState) {\\n        getRxBuffer(this);\\n        rxByte = validateAnswer(this);\\n        if (rxByte == \"\\0\") {\\n            if (this->buffer[1] - 3 < 2) {\\n                getFunctionCode3(this);\\n            }\\n            this->state = \"\\0\";\\n            rxByte = this->bufferSize;\\n        } else {\\n            this->state = \"\\0\";\\n        }\\n        return (int)(char)rxByte;\\n    }\\n    return 0;\\n}",
            "called": [
                "get_FC3",
                "validateAnswer",
                "getRxBuffer",
                "millis"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008043e",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "readData_0008043e"
        },
        "FUN_0008160c": {
            "renaming": {
                "String::FUN_0008160c": "freeStringBuffer",
                "this": "str",
                "this->buffer": "str->buffer",
                "this->len": "str->len",
                "this->capacity": "str->capacity",
                "FUN_0008160c": "freeStringBuffer_0008160c"
            },
            "code": "void freeStringBuffer_0008160c(String *str) {\n  if (str->buffer != NULL) {\n    free(str->buffer);\n  }\n  str->buffer = NULL;\n  str->len = 0;\n  str->capacity = 0;\n  return;\n}",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008160c",
            "calling": [
                "copy"
            ],
            "imported": false,
            "current_name": "freeStringBuffer_0008160c"
        },
        "FUN_00080e18": {
            "renaming": {
                "FUN_00080e18": "is_param_valid_00080e18",
                "param_1": "param",
                "uVar1": "bit_mask"
            },
            "code": "int is_param_valid_00080e18(uint param) {\n    uint bit_mask;\n    if (param < 45) {\n        if (param < 32) {\n            bit_mask = 1 << (param & 0xff);\n            if ((bit_mask & *(uint *)(DAT_00080e58 + 0x18)) != bit_mask) {\n                *(uint *)(DAT_00080e58 + 0x10) = bit_mask;\n            }\n        }\n        else {\n            bit_mask = 1 << (param - 0x20 & 0xff);\n            if ((bit_mask & *(uint *)(DAT_00080e58 + 0x108)) != bit_mask) {\n                *(uint *)(DAT_00080e58 + 0x100) = bit_mask;\n            }\n        }\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e18",
            "calling": [
                "pinMode",
                "init",
                "init"
            ],
            "imported": false,
            "current_name": "is_param_valid_00080e18"
        },
        "FUN_00081184": {
            "renaming": {
                "FUN_00081184": "returnZero_00081184"
            },
            "code": "int returnZero_00081184(void) \n{\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081184",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "returnZero_00081184"
        },
        "FUN_00081580": {
            "renaming": {
                "FUN_00081580": "receiveData_00081580",
                "this": "uart",
                "_pUart": "peripheralUart",
                "UART_SR": "uartStatus",
                "_rx_buffer": "rx_buffer",
                "_tx_buffer": "tx_buffer",
                "_iTail": "tailIndex",
                "_iHead": "headIndex",
                "_aucBuffer": "buffer",
                "UART_RHR": "receivedData",
                "UART_THR": "transmittedData",
                "UART_IDR": "interruptDisableRegister"
            },
            "code": "void __thiscall UARTClass::receiveData_00081580(UARTClass *uart) {\n  RingBuffer *rx_buffer = uart->_rx_buffer;\n  RoReg uartStatus = uart->_pUart->UART_SR;\n  if ((int)(uartStatus << 31) < 0) {\n    RingBuffer::store_char(rx_buffer, (uint8_t)uart->_pUart->UART_RHR);\n  }\n  if ((int)(uartStatus << 30) < 0) {\n    RingBuffer *tx_buffer = uart->_tx_buffer;\n    if (tx_buffer->_iTail != tx_buffer->_iHead) {\n      uart->_pUart->UART_THR = (uint)tx_buffer->_aucBuffer[tx_buffer->_iTail];\n      tx_buffer->_iTail = (tx_buffer->_iTail + 1U) & 0x7f;\n      return;\n    }\n    uart->_pUart->UART_IDR = 2;\n  }\n  return;\n}",
            "called": [
                "store_char"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081580",
            "calling": [
                "UART_Handler",
                "USART1_Handler",
                "USART0_Handler",
                "USART3_Handler"
            ],
            "imported": false,
            "current_name": "receiveData_00081580"
        },
        "FUN_00084298": {
            "renaming": {
                "FUN_00084298": "getMaxMultibyteCharLength_00084298",
                "PTR___mb_cur_max_000842a0": "mb_cur_max_ptr"
            },
            "code": "getMaxMultibyteCharLength_00084298() {\n    return *(undefined4 *)PTR___mb_cur_max_000842a0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084298",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "getMaxMultibyteCharLength_00084298"
        },
        "FUN_00080ac0": {
            "renaming": {
                "FUN_00080ac0": "handle_UART_IRQ_00080ac0",
                "PTR_Serial1_00080ac8": "serial1"
            },
            "code": "void handle_UART_IRQ_00080ac0(void)\n{\n  UARTClass* PTR_Serial1_00080ac8 = (UARTClass *)PTR_Serial1_00080ac8;\n  PTR_Serial1_00080ac8->IrqHandler();\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ac0",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_IRQ_00080ac0"
        },
        "FUN_00081066": {
            "renaming": {
                "FUN_00081066": "setDefaultErrorCode_00081066",
                "param_1": "errorCode",
                "*(undefined4 *)(param_1 + 0x14)": "*(int *)(errorCode + 0x14)"
            },
            "code": "void setDefaultErrorCode_00081066(int errorCode)\n{\n    *(int *)(errorCode + 0x14) = 0xffff;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081066",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "setDefaultErrorCode_00081066"
        },
        "FUN_00081cd0": {
            "renaming": {
                "FUN_00081cd0": "convert_to_signed_int_00081cd0",
                "param_1": "unsigned_int",
                "uVar1": "shift_count",
                "uVar2": "shift_amount",
                "uVar3": "shifted"
            },
            "code": "uint convert_to_signed_int_00081cd0(uint unsigned_int) {\n  uint shift = unsigned_int << 1;\n  if (shift < 0x7f000000) {\n    return 0;\n  }\n  uint shift_count = shift >> 0x18;\n  uint shift_amount = 0x9e - shift_count;\n  if (shift_count < 0x9f && shift_amount != 0) {\n    uint shifted = (unsigned_int << 8 | 0x80000000) >> (shift_amount & 0xff);\n    if ((unsigned_int & 0x80000000) != 0) {\n      shifted = -shifted;\n    }\n    return shifted;\n  }\n  if ((shift_amount == 0xffffff9f) && ((unsigned_int & 0x7fffff) != 0)) {\n    return 0;\n  }\n  unsigned_int = unsigned_int & 0x80000000;\n  if (unsigned_int == 0) {\n    unsigned_int = 0x7fffffff;\n  }\n  return unsigned_int;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081cd0",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "convert_to_signed_int_00081cd0"
        },
        "FUN_00081188": {
            "renaming": {
                "FUN_00081188": "infiniteLoop_00081188"
            },
            "code": "void infiniteLoop_00081188(void)\n{\n  while( true ) { }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081188",
            "calling": [
                "SVC_Handler",
                "__halt",
                "PendSV_Handler"
            ],
            "imported": false,
            "current_name": "infiniteLoop_00081188"
        },
        "FUN_00081df4": {
            "renaming": {
                "FUN_00081df4": "allocate_memory_00081df4",
                "__size": "size",
                "pvVar1": "allocated_memory"
            },
            "code": "void * allocate_memory_00081df4(size_t size){\n  void *allocated_memory;\n  allocated_memory = (void *)_allocate_memory_00081df4_r(*(undefined4 *)PTR__impure_ptr_00081e00,size);\n  return allocated_memory;\n}",
            "called": [
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081df4",
            "calling": [
                "__register_exitproc"
            ],
            "imported": false,
            "current_name": "allocate_memory_00081df4"
        },
        "FUN_00080410": {
            "renaming": {
                "FUN_00080410": "decode_registers_00080410",
                "uVar1": "reg_value",
                "uVar2": "buffer_index",
                "bVar3": "reg_index",
                "uVar4": "buffer_length",
                "puVar5": "registers"
            },
            "code": "void __thiscall decode_registers_00080410(Modbus *this)\n{\n  uint16_t reg_value;\n  uint8_t reg_index;\n  uint8_t buffer_index;\n  uint8_t buffer_length = this->au8Buffer[2] >> 1;\n  uint16_t *registers = this->au16regs;\n\n  for(reg_index = 0; reg_index < buffer_length; reg_index++) {\n    buffer_index = reg_index * 2 + 3 & 0xff;\n    reg_value = makeWord(this->au8Buffer[buffer_index], this->au8Buffer[buffer_index + 1]);\n    registers[reg_index] = reg_value;\n  }\n}\n",
            "called": [
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080410",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "decode_registers_00080410"
        },
        "FUN_00080da0": {
            "renaming": {
                "FUN_00080da0": "process_data_00080da0",
                "param_1": "data_ptr",
                "param_2": "data_type",
                "param_3": "data_value",
                "param_4": "flags",
                "bVar1": "is_negative_flag"
            },
            "code": "int process_data_00080da0(int data_ptr, int data_type, int data_value, unsigned int flags) {\n  bool is_negative_flag = (int)(flags << 0x1f) < 0;\n  switch(data_type) {\n    case 1:\n    case 2:\n      (*data_ptr)(data_type, data_value, data_ptr);\n      *(int *)(data_ptr + 0x44) = data_value;\n      if (is_negative_flag) {\n        *(int *)(data_ptr + 100) = data_value;\n      }\n      if (!is_negative_flag) {\n        *(int *)(data_ptr + 0x60) = data_value;\n      }\n      break;\n    case 3:\n      (*data_ptr)(data_value, flags, data_ptr, data_ptr, data_ptr);\n      break;\n    case 4:\n    case 5:\n      (*data_ptr)(data_value, data_type == 5, (flags << 0x1d) >> 0x1f, flags & 1, data_type, data_value);\n      break;\n    default:\n      return 0;\n  }\n  return 1;\n}",
            "called": [
                "PIO_SetPeripheral",
                "PIO_SetOutput",
                "PIO_SetInput"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080da0",
            "calling": [
                "pinMode",
                "init"
            ],
            "imported": false,
            "current_name": "process_data_00080da0"
        },
        "FUN_00080258": {
            "renaming": {
                "FUN_00080258": "sendModbusMessage_00080258",
                "this": "modbusInstance",
                "u8length": "bufferLength",
                "uVar1": "crc",
                "uVar2": "currentTime",
                "iVar3": "errorCode",
                "u8BufferSize": "messageLength",
                "au8Buffer": "messageBuffer",
                "u8txenpin": "transmitEnablePin",
                "u8serno": "serialNumber",
                "port": "serialPort",
                "u16timeOut": "timeOutDuration",
                "u32timeOut": "timeOut",
                "u16OutCnt": "outgoingMessageCount"
            },
            "code": "void __thiscall sendModbusMessage_00080258(Modbus *modbusInstance) {\n  byte bufferLength;\n  uint16_t crc;\n  uint32_t currentTime;\n  int errorCode;\n  \n  bufferLength = modbusInstance->messageLength;\n  crc = calculateCRC(modbusInstance, bufferLength);\n  modbusInstance->messageBuffer[bufferLength] = (uchar)((uint)crc >> 8);\n  modbusInstance->messageBuffer[(bufferLength + 1) & 0xff] = (uchar)crc;\n  modbusInstance->messageLength = bufferLength + 2;\n  if (modbusInstance->transmitEnablePin > 1) {\n    digitalWrite((uint)modbusInstance->transmitEnablePin, 1);\n  }\n  if (modbusInstance->serialNumber < 4) {\n    (**(code **)(*(int *)modbusInstance->serialPort + 4))(modbusInstance->serialPort, modbusInstance->messageBuffer, modbusInstance->messageLength);\n  }\n  if (modbusInstance->transmitEnablePin > 1) {\n    digitalWrite((uint)modbusInstance->transmitEnablePin, 0);\n  }\n  if (modbusInstance->serialNumber < 4) {\n    do {\n      errorCode = (**(code **)(*(int *)modbusInstance->serialPort + 0xc))();\n    } while (-1 < errorCode);\n  }\n  modbusInstance->messageLength = 0;\n  currentTime = millis();\n  modbusInstance->timeOut = currentTime + modbusInstance->timeOutDuration;\n  modbusInstance->outgoingMessageCount = modbusInstance->outgoingMessageCount + 1;\n  return;\n}",
            "called": [
                "calcCRC",
                "digitalWrite",
                "millis"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080258",
            "calling": [
                "query"
            ],
            "imported": false,
            "current_name": "sendModbusMessage_00080258"
        },
        "FUN_00081622": {
            "renaming": {
                "String::FUN_00081622": "allocate_string_buffer",
                "*this": "str",
                "maxStrLen": "max_len",
                "pcVar1": "new_buffer",
                "FUN_00081622": "allocate_string_buffer_00081622"
            },
            "code": "uchar allocate_string_buffer_00081622(String *str, uint max_len){\n  char *new_buffer = (char *)realloc(str->buffer, max_len + 1);\n  if (new_buffer != NULL) {\n    str->buffer = new_buffer;\n    str->capacity = max_len;\n    return 1;\n  }\n  return 0;\n}",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081622",
            "calling": [
                "reserve"
            ],
            "imported": false,
            "current_name": "allocate_string_buffer_00081622"
        },
        "FUN_00082438": {
            "renaming": {
                "FUN_00082438": "reverse_copy_00082438",
                "__dest": "dest",
                "__src": "src",
                "__n": "n",
                "iVar1": "i",
                "puVar2": "dest_ptr32",
                "puVar3": "src_ptr32",
                "puVar4": "dest_ptr32",
                "puVar5": "src_ptr",
                "puVar7": "dest_ptr",
                "uVar6": "n",
                "uVar8": "n"
            },
            "code": "void * reverse_copy_00082438(void *dest, const void *src, size_t n) {\n  int i;\n  uint8_t *src_ptr = (uint8_t *)src + n;\n  uint8_t *dest_ptr = (uint8_t *)dest + n;\n  if (src < dest && dest < src_ptr) {\n    while (n--) {\n      *(--dest_ptr) = *(--src_ptr);\n    }\n  } else {\n    if (n >= 16 && (((uintptr_t)dest | (uintptr_t)src) & 3) == 0) {\n      uint32_t *src_ptr32 = (uint32_t *)src;\n      uint32_t *dest_ptr32 = (uint32_t *)dest;\n      do {\n        dest_ptr32[0] = src_ptr32[0];\n        dest_ptr32[1] = src_ptr32[1];\n        dest_ptr32[2] = src_ptr32[2];\n        dest_ptr32[3] = src_ptr32[3];\n        src_ptr32 += 4;\n        dest_ptr32 += 4;\n      } while ((n -= 16) >= 16);\n      if (n & 8) {\n        dest_ptr32[0] = src_ptr32[0];\n        dest_ptr32[1] = src_ptr32[1];\n        dest_ptr32 += 2;\n        src_ptr32 += 2;\n      }\n      if (n & 4) {\n        dest_ptr32[0] = src_ptr32[0];\n        dest_ptr32 += 1;\n        src_ptr32 += 1;\n      }\n      n &= 3;\n      src_ptr = (uint8_t *)src_ptr32;\n      dest_ptr = (uint8_t *)dest_ptr32;\n    }\n    while (n--) {\n      *(dest_ptr++) = *(src_ptr++);\n    }\n  }\n  return dest;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082438",
            "calling": [
                "__sfvwrite_r",
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "reverse_copy_00082438"
        },
        "FUN_00081508": {
            "renaming": {
                "FUN_00081508": "initializeUART_00081508",
                "this": "uart",
                "dwBaudRate": "baudRate",
                "modeReg": "modeReg",
                "_dwId": "peripheralId",
                "_pUart": "uartInstance",
                "PTR_SystemCoreClock_00081570": "SystemCoreClock",
                "DAT_00081574": "interruptEnableRegister",
                "_dwIrq": "irqNumber",
                "_rx_buffer": "rxBuffer",
                "_tx_buffer": "txBuffer"
            },
            "code": "void __thiscall initializeUART_00081508(UARTClass *uart, uint32_t baudRate, uint32_t modeReg) {\n  pmc_enable_periph_clk(uart->peripheralId);\n  Uart *uartInstance = uart->uartInstance;\n  uartInstance->UART_PTCR = 0x202;\n  uartInstance->UART_CR = 0xac;\n  uartInstance->UART_MR = modeReg;\n  uartInstance->UART_BRGR = *(uint *)PTR_SystemCoreClock_00081570 / baudRate >> 4;\n  uartInstance->UART_IDR = 0xffffffff;\n  uartInstance->UART_IER = 0x61;\n  uint32_t *DAT_00081574 = (uint32_t *)(0xE000E100 + ((uint32_t)uart->irqNumber >> 5) * 4);\n  *DAT_00081574 = 1 << (uint32_t)(uart->irqNumber & 0x1f);\n  RingBuffer *rxBuffer = uart->rxBuffer;\n  rxBuffer->tailIndex = 0;\n  rxBuffer->headIndex = 0;\n  RingBuffer *txBuffer = uart->txBuffer;\n  txBuffer->tailIndex = 0;\n  txBuffer->headIndex = 0;\n  uartInstance->UART_CR = 0x50;\n}",
            "called": [
                "pmc_enable_periph_clk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081508",
            "calling": [
                "begin",
                "begin"
            ],
            "imported": false,
            "current_name": "initializeUART_00081508"
        },
        "FUN_00083808": {
            "renaming": {
                "FUN_00083808": "initialize_buffer_00083808",
                "param_1": "buffer_status",
                "param_2": "buffer",
                "uVar1": "buffer_flag",
                "iVar2": "buffer_size",
                "uVar3": "buffer_flags_shifted",
                "uVar4": "buffer_flags"
            },
            "code": "int initialize_buffer_00083808(int *buffer_status, int *buffer) {\n  uint16_t buffer_flags;\n  uint32_t buffer_flags_shifted;\n  int buffer_size;\n\n  if (*PTR__impure_ptr_000838c8 != 0 && *(int *)(*PTR__impure_ptr_000838c8 + 0x38) == 0) {\n    __sinit();\n  }\n\n  buffer_flags = *(uint16_t *)(buffer + 3);\n  buffer_flags_shifted = (uint32_t)buffer_flags;\n\n  if ((int)(buffer_flags_shifted << 0x1c) < 0) {\n    buffer_size = buffer[4];\n  }\n  else {\n    if (-1 < (int)(buffer_flags_shifted << 0x1b)) {\n      *buffer_status = 9;\n      *(uint16_t *)(buffer + 3) = buffer_flags | 0x40;\n      return -1;\n    }\n    if ((int)(buffer_flags_shifted << 0x1d) < 0) {\n      if ((int *)buffer[0xc] != (int *)0x0) {\n        if ((int *)buffer[0xc] != buffer + 0x10) {\n          _free_r(buffer_status);\n          buffer_flags = *(uint16_t *)(buffer + 3);\n        }\n        buffer[0xc] = 0;\n      }\n      buffer_size = buffer[4];\n      buffer_flags &= 0xffdb;\n      *buffer = buffer_size;\n      buffer[1] = 0;\n    }\n    else {\n      buffer_size = buffer[4];\n    }\n    *(uint16_t *)(buffer + 3) = buffer_flags | 8;\n    buffer_flags_shifted = (uint32_t)(buffer_flags | 8);\n  }\n\n  if (buffer_size == 0 && ((buffer_flags_shifted & 0x280) != 0x200)) {\n    __smakebuf_r(buffer_status, buffer);\n    buffer_flags_shifted = (uint32_t)*(uint16_t *)(buffer + 3);\n    buffer_size = buffer[4];\n  }\n\n  uint32_t buffer_flag = buffer_flags_shifted & 1;\n  if (buffer_flag == 0) {\n    if (-1 < (int)(buffer_flags_shifted << 0x1e)) {\n      buffer_size = buffer[5];\n    }\n    buffer[2] = buffer_size;\n  }\n  else {\n    buffer[6] = -buffer[5];\n    buffer[2] = 0;\n  }\n\n  if (buffer_size == 0 && ((int)(buffer_flags_shifted << 0x18) < 0)) {\n    *(uint16_t *)(buffer + 3) = *(uint16_t *)(buffer + 3) | 0x40;\n    return -1;\n  }\n  return 0;\n}",
            "called": [
                "_free_r",
                "__smakebuf_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083808",
            "calling": [
                "_vfiprintf_r",
                "__sfvwrite_r",
                "__swbuf_r"
            ],
            "imported": false,
            "current_name": "initialize_buffer_00083808"
        },
        "FUN_000847e0": {
            "renaming": {
                "FUN_000847e0": "FUNC_000847e0"
            },
            "code": "\nundefined8 FUNC_000847e0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000847e0",
            "calling": [
                "__gnu_ldivmod_helper"
            ],
            "imported": false,
            "current_name": "FUNC_000847e0"
        },
        "FUN_0008105c": {
            "renaming": {
                "FUN_0008105c": "set_bit_in_int_array_0008105c",
                "param_1": "array",
                "param_2": "bit_position",
                "*(int *)(param_1 + 0x14)": "target_int",
                "1 << (param_2 & 0xff)": "bit_mask"
            },
            "code": "void set_bit_in_int_array_0008105c(int* array, uint bit_position) {\n  int* target_int = array + 0x14;\n  int bit_mask = 1 << (bit_position & 0xff);\n  *target_int = bit_mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008105c",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "set_bit_in_int_array_0008105c"
        },
        "FUN_0008456c": {
            "renaming": {
                "FUN_0008456c": "convert_wide_char_to_multibyte_string_0008456c",
                "param_1": "output_string",
                "param_2": "output_string_size",
                "param_3": "wide_char_string",
                "param_4": "wide_char_string_size",
                "uVar1": "locale_charset",
                "iVar2": "conversion_result",
                "pcVar3": "conversion_function",
                "auStack_24": "temporary_multibyte_string"
            },
            "code": "void convert_wide_char_to_multibyte_string_0008456c(char* output_string, int output_string_size, wchar_t* wide_char_string, size_t wide_char_string_size) {\n  \n  code* conversion_function = *(code**)PTR___wctomb_000845b8;\n  \n  if (wide_char_string_size == 0) {\n    undefined4 locale_charset = __locale_charset();\n    int conversion_result = (*conversion_function)(output_string, auStack_24, 0, locale_charset, &wide_char_string_size);\n  }\n  else {\n    undefined4 locale_charset = __locale_charset();\n    int conversion_result = (*conversion_function)(output_string, output_string_size, wide_char_string, locale_charset, &wide_char_string_size);\n  }\n  \n  if (conversion_result == -1) {\n    *wide_char_string_size = 0;\n    *output_string = 0x8a;\n  }\n}\n",
            "called": [
                "__locale_charset",
                "__ascii_wctomb"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008456c",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "convert_wide_char_to_multibyte_string_0008456c"
        },
        "FUN_00080aba": {
            "renaming": {
                "FUN_00080aba": "do_nothing_00080aba"
            },
            "code": "\nvoid do_nothing_00080aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aba",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aba"
        },
        "FUN_00080abc": {
            "renaming": {
                "FUN_00080abc": "do_nothing_00080abc"
            },
            "code": "\nvoid do_nothing_00080abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080abc",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080abc"
        },
        "FUN_000811b4": {
            "renaming": {
                "FUN_000811b4": "set_file_mode_to_binary_000811b4",
                "file_UNUSED": "unused_file",
                "st": "file_stats",
                "st->st_mode": "file_stats->st_mode",
                "0x2000": "S_IFREG | S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH",
                "return": "return"
            },
            "code": "int set_file_mode_to_binary_000811b4(stat* file_stats){\n  file_stats->st_mode = S_IFREG | S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b4",
            "calling": [
                "_fstat_r"
            ],
            "imported": false,
            "current_name": "set_file_mode_to_binary_000811b4"
        },
        "FUN_000813f6": {
            "renaming": {
                "FUN_000813f6": "get_next_byte_from_rx_buffer_000813f6",
                "this": "uart_obj",
                "pRVar2": "rx_buffer",
                "uVar1": "next_byte",
                "_iHead": "_iHead",
                "_iTail": "_iTail",
                "_aucBuffer": "_aucBuffer"
            },
            "code": "unsigned int __thiscall get_next_byte_from_rx_buffer_000813f6(UARTClass *uart_obj)\n{\n  unsigned int next_byte;\n  RingBuffer *rx_buffer = uart_obj->_rx_buffer;\n  if (rx_buffer->_iHead == rx_buffer->_iTail) {\n    next_byte = 0xffffffff;\n  }\n  else {\n    next_byte = (unsigned int)rx_buffer->_aucBuffer[rx_buffer->_iTail];\n  }\n  return next_byte;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813f6",
            "calling": [],
            "imported": false,
            "current_name": "get_next_byte_from_rx_buffer_000813f6"
        },
        "FUN_000816d4": {
            "renaming": {
                "FUN_000816d4": "disable_watchdog_timer_000816d4",
                "DAT_000816dc": "watchdog_timer_address"
            },
            "code": "void disable_watchdog_timer_000816d4(void)\n{\n  WDT_Disable(DAT_000816dc);\n  return;\n}",
            "called": [
                "WDT_Disable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d4",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "disable_watchdog_timer_000816d4"
        },
        "FUN_00083f34": {
            "renaming": {
                "FUN_00083f34": "FUNC_00083f34"
            },
            "code": "\nundefined4 FUNC_00083f34(undefined4 *param_1,void **param_2,undefined4 *param_3)\n\n{\n  void **ppvVar1;\n  int iVar2;\n  void *pvVar3;\n  void *pvVar4;\n  ushort uVar5;\n  uint uVar6;\n  int iVar7;\n  void **ppvVar8;\n  void *pvVar9;\n  void *pvVar10;\n  void *pvVar11;\n  void *pvVar12;\n  void *__n;\n  size_t __n_00;\n  void *local_2c;\n  \n  if (param_3[2] != 0) {\n    uVar5 = *(ushort *)(param_2 + 3);\n    uVar6 = (uint)uVar5;\n    if (((int)(uVar6 << 0x1c) < 0) && (param_2[4] != (void *)0x0)) {\n      ppvVar8 = (void **)*param_3;\n      pvVar3 = DAT_00084244;\n    }\n    else {\n      iVar2 = __swsetup_r(param_1,param_2);\n      if (iVar2 != 0) {\n        return 0xffffffff;\n      }\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar6 = (uint)uVar5;\n      ppvVar8 = (void **)*param_3;\n      pvVar3 = DAT_00084244;\n    }\n    DAT_00084244 = pvVar3;\n    if ((uVar5 & 2) == 0) {\n      pvVar3 = (void *)(uVar6 & 2);\n      pvVar11 = (void *)(uVar6 & 1);\n      pvVar9 = pvVar3;\n      pvVar10 = pvVar3;\n      local_2c = pvVar3;\n      pvVar12 = pvVar11;\n      if (pvVar11 == (void *)0x0) {\n        while( true ) {\n          while (pvVar11 == (void *)0x0) {\n            pvVar12 = *ppvVar8;\n            ppvVar1 = ppvVar8 + 1;\n            ppvVar8 = ppvVar8 + 2;\n            pvVar11 = *ppvVar1;\n          }\n          pvVar3 = param_2[2];\n          if ((int)(uVar6 << 0x16) < 0) {\n            if (pvVar11 < pvVar3) {\n              pvVar9 = *param_2;\n              pvVar3 = pvVar11;\n            }\n            else if ((uVar6 & 0x480) == 0) {\n              pvVar9 = *param_2;\n            }\n            else {\n              __n_00 = (int)*param_2 - (int)param_2[4];\n              pvVar3 = (void *)(__n_00 + 1 + (int)pvVar11);\n              pvVar9 = (void *)(((int)param_2[5] * 3) / 2);\n              if (pvVar3 <= pvVar9) {\n                pvVar3 = pvVar9;\n              }\n              if ((int)(uVar6 << 0x15) < 0) {\n                pvVar10 = (void *)_malloc_r(param_1,pvVar3);\n                if (pvVar10 == (void *)0x0) {\n                  *param_1 = 0xc;\n                  uVar5 = *(ushort *)(param_2 + 3);\n                  goto LAB_00084030;\n                }\n                memcpy(pvVar10,param_2[4],__n_00);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                pvVar10 = (void *)_realloc_r(param_1);\n                if (pvVar10 == (void *)0x0) {\n                  _free_r(param_1,param_2[4]);\n                  uVar5 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              pvVar9 = (void *)((int)pvVar10 + __n_00);\n              param_2[4] = pvVar10;\n              param_2[5] = pvVar3;\n              *param_2 = pvVar9;\n              param_2[2] = (void *)((int)pvVar3 - __n_00);\n              pvVar3 = pvVar11;\n            }\n            memmove(pvVar9,pvVar12,(size_t)pvVar3);\n            param_2[2] = (void *)((int)param_2[2] - (int)pvVar3);\n            *param_2 = (void *)((int)*param_2 + (int)pvVar3);\n            pvVar3 = pvVar11;\n          }\n          else if ((param_2[4] < *param_2) || (pvVar9 = param_2[5], pvVar11 < pvVar9)) {\n            if (pvVar11 < pvVar3) {\n              pvVar3 = pvVar11;\n            }\n            memmove(*param_2,pvVar12,(size_t)pvVar3);\n            pvVar9 = param_2[2];\n            param_2[2] = (void *)((int)pvVar9 - (int)pvVar3);\n            *param_2 = (void *)((int)*param_2 + (int)pvVar3);\n            if (((void *)((int)pvVar9 - (int)pvVar3) == (void *)0x0) &&\n               (iVar2 = _fflush_r(param_1,param_2), iVar2 != 0)) goto LAB_0008402e;\n          }\n          else {\n            pvVar3 = (void *)0x7fffffff;\n            if (pvVar11 < (void *)0x7fffffff) {\n              pvVar3 = pvVar11;\n            }\n            pvVar3 = (void *)(*(code *)param_2[9])\n                                       (param_1,param_2[7],pvVar12,\n                                        ((uint)pvVar3 / (uint)pvVar9) * (int)pvVar9);\n            if ((int)pvVar3 < 1) goto LAB_0008402e;\n          }\n          iVar2 = param_3[2];\n          pvVar11 = (void *)((int)pvVar11 - (int)pvVar3);\n          param_3[2] = iVar2 - (int)pvVar3;\n          if (iVar2 - (int)pvVar3 == 0) break;\n          uVar6 = (uint)*(ushort *)(param_2 + 3);\n          pvVar12 = (void *)((int)pvVar12 + (int)pvVar3);\n        }\n      }\n      else {\n        do {\n          while (pvVar3 == (void *)0x0) {\n            pvVar10 = *ppvVar8;\n            pvVar3 = ppvVar8[1];\n            local_2c = (void *)0x0;\n            ppvVar8 = ppvVar8 + 2;\n          }\n          if (local_2c == (void *)0x0) {\n            pvVar9 = memchr(pvVar10,10,(size_t)pvVar3);\n            if (pvVar9 == (void *)0x0) {\n              pvVar9 = (void *)((int)pvVar3 + 1);\n              local_2c = (void *)0x1;\n            }\n            else {\n              pvVar9 = (void *)((int)pvVar9 + (1 - (int)pvVar10));\n              local_2c = (void *)0x1;\n            }\n          }\n          pvVar12 = *param_2;\n          pvVar11 = pvVar9;\n          if (pvVar3 <= pvVar9) {\n            pvVar11 = pvVar3;\n          }\n          pvVar4 = param_2[5];\n          if ((param_2[4] < pvVar12) &&\n             (__n = (void *)((int)param_2[2] + (int)pvVar4), (int)__n < (int)pvVar11)) {\n            memmove(pvVar12,pvVar10,(size_t)__n);\n            *param_2 = (void *)((int)*param_2 + (int)__n);\n            iVar2 = _fflush_r(param_1,param_2);\n            if (iVar2 != 0) goto LAB_0008402e;\n          }\n          else if ((int)pvVar11 < (int)pvVar4) {\n            memmove(pvVar12,pvVar10,(size_t)pvVar11);\n            param_2[2] = (void *)((int)param_2[2] - (int)pvVar11);\n            *param_2 = (void *)((int)pvVar11 + (int)*param_2);\n            __n = pvVar11;\n          }\n          else {\n            __n = (void *)(*(code *)param_2[9])(param_1,param_2[7],pvVar10,pvVar4);\n            if ((int)__n < 1) goto LAB_0008402e;\n          }\n          pvVar9 = (void *)((int)pvVar9 - (int)__n);\n          if ((pvVar9 == (void *)0x0) &&\n             (iVar2 = _fflush_r(param_1,param_2), local_2c = pvVar9, iVar2 != 0)) goto LAB_0008402e;\n          iVar2 = param_3[2];\n          pvVar10 = (void *)((int)pvVar10 + (int)__n);\n          pvVar3 = (void *)((int)pvVar3 - (int)__n);\n          param_3[2] = iVar2 - (int)__n;\n        } while (iVar2 - (int)__n != 0);\n      }\n    }\n    else {\n      pvVar10 = (void *)0x0;\n      pvVar9 = (void *)0x0;\n      do {\n        while( true ) {\n          pvVar11 = pvVar9;\n          if (pvVar3 <= pvVar9) {\n            pvVar11 = pvVar3;\n          }\n          if (pvVar9 != (void *)0x0) break;\n          pvVar10 = *ppvVar8;\n          pvVar9 = ppvVar8[1];\n          ppvVar8 = ppvVar8 + 2;\n        }\n        iVar2 = (*(code *)param_2[9])(param_1,param_2[7],pvVar10,pvVar11);\n        if (iVar2 < 1) {\nLAB_0008402e:\n          uVar5 = *(ushort *)(param_2 + 3);\nLAB_00084030:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n          return 0xffffffff;\n        }\n        iVar7 = param_3[2];\n        pvVar10 = (void *)((int)pvVar10 + iVar2);\n        pvVar9 = (void *)((int)pvVar9 - iVar2);\n        param_3[2] = iVar7 - iVar2;\n      } while (iVar7 - iVar2 != 0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "memcpy",
                "_free_r",
                "__swsetup_r",
                "memmove",
                "_realloc_r",
                "_fflush_r",
                "memchr",
                "_malloc_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083f34",
            "calling": [
                "__sprint_r.part.0"
            ],
            "imported": false,
            "current_name": "FUNC_00083f34"
        },
        "FUN_00081074": {
            "renaming": {
                "FUN_00081074": "execute_isr_if_present_00081074",
                "PTR_gpf_isr_00081080": "isr_function_pointer",
                "code": "function_pointer_type"
            },
            "code": "void execute_isr_if_present_00081074(void)\n{\n  if (*PTR_gpf_isr_00081080 != NULL)\n  {\n    (*PTR_gpf_isr_00081080)();\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081074",
            "calling": [],
            "imported": false,
            "current_name": "execute_isr_if_present_00081074"
        },
        "FUN_00080d7a": {
            "renaming": {
                "FUN_00080d7a": "update_parameters_00080d7a",
                "param_1": "parameters",
                "param_2": "new_value",
                "param_3": "should_update_first",
                "param_4": "should_update_second",
                "param_5": "should_update_third",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void update_parameters_00080d7a(int *parameters, int new_value, int should_update_first, int should_update_second, int should_update_third) {\\n  parameters[17] = new_value;\\n  if (should_update_third == 0) {\\n    parameters[24] = new_value;\\n  }\\n  else {\\n    parameters[25] = new_value;\\n  }\\n  if (should_update_second == 0) {\\n    parameters[21] = new_value;\\n  }\\n  else {\\n    parameters[20] = new_value;\\n  }\\n  if (should_update_first == 0) {\\n    parameters[13] = new_value;\\n  }\\n  else {\\n    parameters[12] = new_value;\\n  }\\n  parameters[4] = new_value;\\n  *parameters = new_value;\\n  return;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d7a",
            "calling": [
                "PIO_Configure",
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "update_parameters_00080d7a"
        },
        "FUN_00080e9c": {
            "renaming": {
                "FUN_00080e9c": "initializeSystemClock_00080e9c",
                "puVar1": "systemCoreClockPointer",
                "iVar2": "flashLatencyPointer",
                "DAT_00080f08": "PTR_FLASH_ACR_00080f0c",
                "DAT_00080f0c": "PTR_FLASH_ACR_00080f0c",
                "DAT_00080f10": "0x300",
                "DAT_00080f14": "5 << 4",
                "DAT_00080f18": "1",
                "PTR_SystemCoreClock_00080f20": "PTR_SystemCoreClock_00080f20",
                "PTR_FLASH_ACR_00080f0c": "PTR_FLASH_ACR_00080f0c",
                "flashLatencyPointer": "flashLatencyPointer",
                "flashLatency": "flashLatency"
            },
            "code": "void initializeSystemClock_00080e9c(void)\n{\n  uint32_t *systemCoreClockPointer;\n  uint32_t *flashLatencyPointer;\n  int flashLatency;\n  systemCoreClockPointer = PTR_SystemCoreClock_00080f20;\n  *DAT_00080f08 |= 0x400;\n  *(DAT_00080f08 + 0x80) |= 0x400;\n  flashLatency = *DAT_00080f08 >> 4 & 0xF;\n  if (flashLatency < 5) {\n    *DAT_00080f08 = (*DAT_00080f08 & ~(0xF << 4)) | (DAT_00080fDAT_00080f184);\n    do {\n    } while ((*DAT_00080f08 & (0xF << 4)) != (DAT_00080fDAT_00080f184));\n  }\n  flashLatencyPointer = DAT_00080f08 + 0x20;\n  *flashLatencyPointer = DAT_00080fDAT_00080f180;\n  do {\n  } while ((*DAT_00080f08 & (0xF << 4)) != (DAT_00080fDAT_00080f184));\n  *DAT_00080f08 |= DAT_00080f18;\n  do {\n  } while ((*DAT_00080f08 & DAT_00080f18) != DAT_00080f18);\n  *DAT_00080f08 |= 2;\n  do {\n  } while ((*DAT_00080f08 & 2) != 2);\n  systemCoreClockPointer = PTR_SystemCoreClock_00080f20;\n  *systemCoreClockPointer = 8000000;\n  do {\n  } while (*systemCoreClockPointer != 8000000);\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e9c",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "initializeSystemClock_00080e9c"
        },
        "FUN_00084464": {
            "renaming": {
                "FUN_00084464": "write_data_to_file_00084464",
                "param_1": "file_descriptor",
                "param_2": "data_offset",
                "param_3": "data",
                "param_4": "data_size",
                "uVar1": "data_value"
            },
            "code": "void write_data_to_file_00084464(FILE *file_descriptor, int data_offset, void *data, size_t data_size) {\n    ushort data_value = *(ushort *)(data_offset + 0xc);\n    if ((int)((uint)data_value << 0x17) < 0) {\n        _lseek_r(file_descriptor, (int)*(short *)(data_offset + 0xe), 0, 2);\n        data_value = *(ushort *)(data_offset + 0xc);\n    }\n    *(ushort *)(data_offset + 0xc) = data_value & 0xefff;\n    _write_r(file_descriptor, (int)*(short *)(data_offset + 0xe), data, data_size);\n    return;\n}",
            "called": [
                "_lseek_r",
                "_write_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084464",
            "calling": [],
            "imported": false,
            "current_name": "write_data_to_file_00084464"
        },
        "FUN_000847dc": {
            "renaming": {
                "FUN_000847dc": "do_nothing_000847dc"
            },
            "code": "\nvoid do_nothing_000847dc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847dc",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "do_nothing_000847dc"
        },
        "FUN_000811ae": {
            "renaming": {
                "FUN_000811ae": "return_error_000811ae",
                "file_UNUSED": "file_unused"
            },
            "code": "int return_error_000811ae(int file_unused) {\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ae",
            "calling": [
                "_close_r"
            ],
            "imported": false,
            "current_name": "return_error_000811ae"
        },
        "FUN_00080148": {
            "renaming": {
                "FUN_00080148": "perform_software_interrupt_00080148",
                "a0": "interrupt_code",
                "a1": "data",
                "a2": "flag"
            },
            "code": "uint32_t perform_software_interrupt_00080148(uint32_t interrupt_code, uint32_t data, int32_t flag) {\n  software_interrupt(interrupt_code);\n  return data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080148",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "perform_software_interrupt_00080148"
        },
        "FUN_00080ad8": {
            "renaming": {
                "FUN_00080ad8": "handleSerial3Interrupt_00080ad8",
                "PTR_Serial3_00080ae0": "&Serial3"
            },
            "code": "void handleSerial3Interrupt_00080ad8(void)\n{\n  UARTClass::IrqHandler(PTR_Serial3_00080ae0);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ad8",
            "calling": [],
            "imported": false,
            "current_name": "handleSerial3Interrupt_00080ad8"
        },
        "FUN_00084624": {
            "renaming": {
                "FUN_00084624": "flush_and_free_00084624",
                "param_1": "file_descriptor",
                "param_2": "stream",
                "uVar1": "result",
                "iVar2": "operation_result",
                "should_free_buffer": "should_free_buffer",
                "should_free_stream": "should_free_stream"
            },
            "code": "int flush_and_free_00084624(int file_descriptor, int stream)\n{\n    int result = 0;\n    int should_free_buffer = 0;\n    int should_free_stream = 0;\n\n    if (stream != 0) {\n        if ((file_descriptor != 0) && (*(int *)(file_descriptor + 0x38) == 0)) {\n            __sinit();\n        }\n        if (*(short *)(stream + 0xc) != 0) {\n            result = _fflush_r(file_descriptor, stream);\n            if ((*(code **)(stream + 0x2c) != (code *)0x0) &&\n                (result = (**(code **)(stream + 0x2c))(file_descriptor,*(undefined4 *)(stream + 0x1c)), result < 0)\n            ) {\n                result = -1;\n            }\n            should_free_buffer = ((int)((uint)*(ushort *)(stream + 0xc) << 0x18) < 0);\n            should_free_stream = (*(int *)(stream + 0x30) != 0);\n        }\n    }\n\n    if (should_free_buffer) {\n        _free_r(file_descriptor,*(undefined4 *)(stream + 0x10));\n    }\n\n    if (should_free_stream) {\n        if (*(int *)(stream + 0x30) != stream + 0x40) {\n            _free_r(file_descriptor);\n        }\n        *(undefined4 *)(stream + 0x30) = 0;\n    }\n\n    if (*(int *)(stream + 0x44) != 0) {\n        _free_r(file_descriptor);\n        *(undefined4 *)(stream + 0x44) = 0;\n    }\n\n    __sfp_lock_acquire();\n    *(undefined2 *)(stream + 0xc) = 0;\n    __sfp_lock_release();\n    return result;\n}",
            "called": [
                "__sfp_lock_release",
                "_free_r",
                "_fflush_r",
                "__sfp_lock_acquire",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084624",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "flush_and_free_00084624"
        },
        "FUN_0008118c": {
            "renaming": {
                "FUN_0008118c": "allocate_memory_0008118c",
                "incr": "size",
                "puVar1": "heap_start",
                "pcVar2": "allocated_memory"
            },
            "code": "caddr_t allocate_memory_0008118c(int size) {\n  undefined *heap_start = PTR_heap_000811a0;\n  if (*(int *)heap_start == 0) {\n    *(undefined **)heap_start = PTR__ebss_000811a4;\n  }\n  caddr_t allocated_memory = *(caddr_t *)heap_start;\n  *(caddr_t *)heap_start = allocated_memory + size;\n  return allocated_memory;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008118c",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_0008118c"
        },
        "FUN_00082a50": {
            "renaming": {
                "FUN_00082a50": "count_characters_00082a50",
                "__s": "str",
                "sVar1": "offset",
                "puVar2": "word_ptr",
                "uVar3": "word",
                "bVar4": "is_last_word"
            },
            "code": "size_t count_characters_00082a50(char* str) {\n    size_t count = 0;\n    uint32_t* word_ptr = (uint32_t*)((uint32_t)str & 0xfffffffc);\n    size_t offset = -((uint32_t)str & 3);\n    uint32_t word = *word_ptr;\n    if (((uint32_t)str & 3) != 0) {\n      word = word | 0xffffffffU >> ((offset + 4 & 0x1f) << 3);\n    }\n    while (word + 0xfefefeff & ~word & 0x80808080) == 0) {\n      offset += 4;\n      word = *(++word_ptr);\n    }\n    bool is_last_word = (word & 0xff) == 0;\n    if (!is_last_word) {\n      offset += 1;\n      is_last_word = (word & 0xff00) == 0;\n    }\n    if (!is_last_word) {\n      offset += 1;\n      is_last_word = (word & 0xff0000) == 0;\n    }\n    if (!is_last_word) {\n      offset += 1;\n    }\n    count = offset + (word >> 24);\n    return count;\n  }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082a50",
            "calling": [
                "_vfiprintf_r",
                "String"
            ],
            "imported": false,
            "current_name": "count_characters_00082a50"
        },
        "FUN_0008106e": {
            "renaming": {
                "FUN_0008106e": "set_param_at_offset_0008106e",
                "param_1": "base_address",
                "param_2": "value",
                "*(undefined4 *)(param_1 + 0x28)": "*(int *)(base_address + offset)"
            },
            "code": "void set_param_at_offset_0008106e(int base_address, int offset, int value)\n{\n  *(int *)(base_address + offset) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008106e",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_param_at_offset_0008106e"
        },
        "FUN_000811c2": {
            "renaming": {
                "FUN_000811c2": "file_descriptor_unused_000811c2",
                "file_UNUSED": "file_descriptor_unused",
                "ptr_UNUSED": "pointer_unused",
                "dir_UNUSED": "directory_unused"
            },
            "code": "int file_descriptor_unused_000811c2(int file_descriptor_unused_000811c2, int pointer_unused, int directory_unused) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c2",
            "calling": [
                "_lseek_r"
            ],
            "imported": false,
            "current_name": "file_descriptor_unused_000811c2"
        },
        "FUN_000816e0": {
            "renaming": {
                "__thiscall Print::FUN_000816e0": "printBuffer",
                "this": "this",
                "buffer": "buffer",
                "size": "size",
                "pPVar1": "currentPrint",
                "sVar2": "bytesPrinted",
                "FUN_000816e0": "printBuffer_000816e0"
            },
            "code": "size_t __thiscall printBuffer_000816e0(Print *this, uint8_t *buffer, size_t size)\n{\n  Print *currentPrint = this;\n  size_t bytesPrinted = 0;\n  while (bytesPrinted != size && currentPrint != nullptr) {\n    currentPrint = (Print *)(*this->_vptr_Print)(currentPrint, (uint)buffer[bytesPrinted]);\n    bytesPrinted++;\n  }\n  return bytesPrinted;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816e0",
            "calling": [],
            "imported": false,
            "current_name": "printBuffer_000816e0"
        },
        "FUN_00080acc": {
            "renaming": {
                "FUN_00080acc": "handleSerial2Interrupt_00080acc",
                "PTR_Serial2_00080ad4": "serial2Ptr"
            },
            "code": "void handleSerial2Interrupt_00080acc(void)\n{\n  // Call the IRQ handler of the UARTClass for Serial2\n  UARTClass::IrqHandler((UARTClass *)PTR_Serial2_00080ad4);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080acc",
            "calling": [],
            "imported": false,
            "current_name": "handleSerial2Interrupt_00080acc"
        },
        "FUN_000811c6": {
            "renaming": {
                "FUN_000811c6": "calculate_checksum_000811c6",
                "file_UNUSED": "fileDescriptor",
                "ptr_UNUSED": "buffer",
                "len_UNUSED": "bufferLength"
            },
            "code": "int calculate_checksum_000811c6(int fileDescriptor, char *buffer, int bufferLength) {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c6",
            "calling": [
                "_read_r"
            ],
            "imported": false,
            "current_name": "calculate_checksum_000811c6"
        },
        "FUN_00083d00": {
            "renaming": {
                "FUN_00083d00": "allocate_memory_block_00083d00",
                "param_1": "heap_lock",
                "param_2": "block_size",
                "puVar1": "malloc_av",
                "puVar2": "malloc_info",
                "iVar3": "sbrk_result",
                "uVar4": "page_size",
                "iVar5": "padding",
                "PTR___malloc_av__00083d90": "malloc_av",
                "__malloc_lock": "lock_heap",
                "_sbrk_r": "extend_heap",
                "PTR___malloc_current_mallinfo_00083d94": "malloc_info",
                "PTR___malloc_sbrk_base_00083d98": "malloc_sbrk_base",
                "__malloc_unlock": "unlock_heap"
            },
            "code": "int allocate_memory_block_00083d00(void* heap_lock, int block_size) {\n  void* PTR___malloc_av__00083d90 = PTR___PTR___malloc_av__00083d90__00083d90;\n  __malloc_lock();\n  uint32_t page_size = *(uint32_t*)(*(int*)(PTR___malloc_av__00083d90 + 8) + 4) & 0xfffffffc;\n  int padding = ((page_size - block_size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < padding) {\n    int sbrk_result = _sbrk_r(heap_lock, 0);\n    if (sbrk_result == *(int*)(PTR___malloc_av__00083d90 + 8) + page_size) {\n      sbrk_result = _sbrk_r(heap_lock, -padding);\n      void* PTR___malloc_current_mallinfo_00083d94 = PTR___malloc_current_mallinfo_00083d94;\n      if (sbrk_result != -1) {\n        int info_result = *(int*)PTR___malloc_current_mallinfo_00083d94;\n        *(uint32_t*)(*(int*)(PTR___malloc_av__00083d90 + 8) + 4) = page_size - padding | 1;\n        *(int*)PTR___malloc_current_mallinfo_00083d94 = info_result - padding;\n        __malloc_unlock(heap_lock);\n        return 1;\n      }\n      int sbrk_result_2 = _sbrk_r(heap_lock, 0);\n      void* PTR___malloc_sbrk_base_00083d98 = PTR___PTR___malloc_sbrk_base_00083d98_00083d98;\n      uint32_t diff = sbrk_result_2 - *(int*)(PTR___malloc_av__00083d90 + 8);\n      if (0xf < (int)diff) {\n        int info_result_2 = *(int*)PTR___malloc_current_mallinfo_00083d94;\n        *(uint32_t*)(*(int*)(PTR___malloc_av__00083d90 + 8) + 4) = diff | 1;\n        *(int*)PTR___malloc_current_mallinfo_00083d94 = sbrk_result_2 - *(int*)PTR___malloc_sbrk_base_00083d98;\n      }\n    }\n  }\n  __malloc_unlock(heap_lock);\n  return 0;\n}",
            "called": [
                "_sbrk_r",
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d00",
            "calling": [
                "_free_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00083d00"
        },
        "FUN_00081d68": {
            "renaming": {
                "FUN_00081d68": "register_exit_proc_00081d68",
                "param_1": "exit_code",
                "param_2": "func_ptr",
                "param_3": "arg",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void register_exit_proc_00081d68(int exit_code, void (*func_ptr)(void), void *arg, void *dso_handle){\n\t__register_exitproc(exit_code, func_ptr, arg, dso_handle);\n\treturn;\n}",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d68",
            "calling": [
                "__aeabi_atexit"
            ],
            "imported": false,
            "current_name": "register_exit_proc_00081d68"
        }
    },
    "used_tokens": 126584,
    "layers": [
        [
            "FUN_000816a8",
            "FUN_00081042",
            "FUN_00080ce0",
            "FUN_00081164",
            "FUN_00081166",
            "FUN_00081202",
            "FUN_00081720",
            "FUN_00081d1c",
            "FUN_00083988",
            "FUN_000847ac",
            "FUN_00080118",
            "FUN_00081208",
            "FUN_00081c94",
            "FUN_000810f4",
            "FUN_00083b14",
            "FUN_000842a4",
            "FUN_0008143c",
            "FUN_00080f24",
            "FUN_00080e04",
            "FUN_000804a8",
            "FUN_00084440",
            "FUN_000802da",
            "FUN_00080f9c",
            "FUN_00081210",
            "FUN_00083994",
            "FUN_00081454",
            "FUN_00084600",
            "FUN_00081578",
            "FUN_00084728",
            "FUN_0008116a",
            "FUN_000813e0",
            "FUN_00083c40",
            "FUN_0008116e",
            "FUN_000813e4",
            "FUN_00081cbc",
            "FUN_00080aac",
            "FUN_00084290",
            "FUN_000846b4",
            "FUN_000811a8",
            "FUN_000818c8",
            "FUN_00081bf4",
            "FUN_00081d7c",
            "FUN_000810bc",
            "FUN_00081c5c",
            "FUN_00081388",
            "FUN_00082994",
            "FUN_00080c0c",
            "FUN_00084418",
            "FUN_00080d2e",
            "FUN_20070000",
            "FUN_000811f0",
            "FUN_00081704",
            "FUN_00083c10",
            "FUN_00081bec",
            "FUN_000844c4",
            "FUN_0008189c",
            "FUN_0008234c",
            "FUN_00080a68",
            "FUN_0008165c",
            "FUN_000815f8",
            "FUN_00084384",
            "FUN_00081c6c",
            "FUN_00081034",
            "FUN_000844bc",
            "FUN_00083974",
            "FUN_00084700",
            "FUN_00080e5c",
            "FUN_00081ca8",
            "FUN_00081318",
            "FUN_00081714",
            "FUN_00081c80",
            "FUN_0008449c",
            "FUN_0008477c",
            "FUN_000801b0",
            "FUN_000813c2",
            "FUN_000814e4",
            "FUN_00080d54",
            "FUN_0008021c",
            "FUN_00083b08",
            "FUN_000814a8",
            "FUN_00081084",
            "FUN_00084750",
            "FUN_00081d5c",
            "FUN_00082970",
            "FUN_000811be",
            "FUN_0008014c",
            "FUN_00081c54",
            "FUN_0008163a",
            "FUN_00080d24",
            "FUN_000818b8",
            "FUN_00080164",
            "FUN_000811cc",
            "FUN_000846dc",
            "FUN_00081be4",
            "FUN_000815ca",
            "FUN_00081894",
            "FUN_00084248",
            "FUN_000845bc",
            "FUN_00081412",
            "FUN_000838cc",
            "FUN_00082504",
            "FUN_000800f4",
            "FUN_0008378c",
            "FUN_00083adc",
            "FUN_0008112c",
            "FUN_000803d4",
            "FUN_000845d8",
            "FUN_0008160c",
            "FUN_00080e18",
            "FUN_00081184",
            "FUN_00081580",
            "FUN_00084298",
            "FUN_00080ac0",
            "FUN_00081066",
            "FUN_00081cd0",
            "FUN_00081188",
            "FUN_00080410",
            "FUN_00080da0",
            "FUN_00080258",
            "FUN_00081622",
            "FUN_00082438",
            "FUN_00081508",
            "FUN_00083808",
            "FUN_0008105c",
            "FUN_0008456c",
            "FUN_000811b4",
            "FUN_000813f6",
            "FUN_000816d4",
            "FUN_00081074",
            "FUN_00080d7a",
            "FUN_00080e9c",
            "FUN_00084464",
            "FUN_000811ae",
            "FUN_00080148",
            "FUN_00080ad8",
            "FUN_00084624",
            "FUN_0008118c",
            "FUN_00082a50",
            "FUN_0008106e",
            "FUN_000811c2",
            "FUN_000816e0",
            "FUN_00080acc",
            "FUN_000811c6",
            "FUN_00083d00",
            "FUN_00081d68"
        ],
        [
            "FUN_00082ac0",
            "FUN_00081682",
            "FUN_000815fe",
            "FUN_00081dcc",
            "FUN_000846a4",
            "FUN_000813a8",
            "FUN_00082ab0",
            "FUN_00081e04",
            "FUN_00080ae4",
            "FUN_000825a0",
            "FUN_000815d4",
            "FUN_0008043e",
            "FUN_00081df4"
        ]
    ],
    "locked_functions": []
}