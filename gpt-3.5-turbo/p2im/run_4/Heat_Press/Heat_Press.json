{
    "functions": {
        "FUN_000816a6": {
            "renaming": {
                "FUN_000816a6": "do_nothing_000816a6"
            },
            "code": "\nvoid do_nothing_000816a6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a6",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "do_nothing_000816a6"
        },
        "FUN_000816a8": {
            "renaming": {
                "FUN_000816a8": "process_data_forever_000816a8",
                "set_default_value_000816d4": "set_default_values",
                "initialize_and_process_data_00080ae4": "initialize_data",
                "do_nothing_000816a6": "do_nothing",
                "do_nothing_0008120c": "enable_data_processing",
                "process_input_and_process_data_000804a8": "do_something",
                "FUNC_000805d0": "do_something",
                "DAT_000816d0": "data_is_not_ready",
                "check_differences_in_pointers_00080ce0": "check_for_changes"
            },
            "code": "void process_data_forever_000816a8(void)\n{\n  set_default_values();\n  initialize_data();\n  do_nothing();\n  enable_data_processing();\n  do {\n    do {\n      do_something();\n    } while (DAT_000816d0());\n    check_for_changes();\n  } while(true);\n}",
            "called": [
                "FUN_00080ae4",
                "FUN_000804a8",
                "FUN_0008120c",
                "FUN_000816d4",
                "FUN_000816a6",
                "FUN_00080ce0",
                "FUN_000805d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a8",
            "calling": [
                "FUN_00080f24"
            ],
            "imported": false,
            "current_name": "process_data_forever_000816a8"
        },
        "FUN_00081042": {
            "renaming": {
                "FUN_00081042": "set_bits_in_memory_00081042",
                "param_1": "memory_address",
                "param_2": "mask",
                "param_3": "shift",
                "param_4": "value",
                "uint": "uint32_t",
                "PTR_": "",
                "DAT_": "",
                "*(": "*",
                ") =": " =",
                "| (": " |= (",
                "+ 4)": " + 4)",
                "& 0xf)": " & 0xf)",
                "& 3)": " & 0x3)",
                "return;": "return;"
            },
            "code": "void set_bits_in_memory_00081042(uint32_t *memory_address, uint32_t mask, uint32_t shift, uint32_t value)\n{\n  uint32_t *memory_contents = memory_address;\n  uint32_t shifted_value = (value & 0x3) << 0x1c;\n  shifted_value |= (shift & 0xf) << 0x18;\n  shifted_value |= *memory_contents;\n  shifted_value |= mask;\n  *memory_contents = shifted_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081042",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "set_bits_in_memory_00081042"
        },
        "FUN_00082ac0": {
            "renaming": {
                "FUN_00082ac0": "process_input_and_return_result_00082ac0",
                "param_1": "input",
                "param_2": "size",
                "param_3": "data",
                "piVar1": "current_data_ptr",
                "iVar2": "result",
                "piVar3": "current_size_ptr",
                "uVar4": "loop_counter",
                "puVar5": "current_input_ptr",
                "uVar6": "size_shifted",
                "uVar7": "current_size"
            },
            "code": "int process_input_and_return_result_00082ac0(int input, int size, int **data)\n{\n  int *current_data_ptr;\n  int result;\n  int *current_size_ptr;\n  uint size_shifted;\n  undefined4 *current_input_ptr;\n  uint loop_counter;\n  uint current_size;\n  \n  if (-1 < *(int *)(size + 100) << 0x12) {\n    result = FUNC_00083f34();\n    data[2] = (int *)0x0;\n    data[1] = (int *)0x0;\n    return result;\n  }\n  current_size_ptr = data[2];\n  current_data_ptr = *data;\n  while (current_size_ptr != (int *)0x0) {\n    size_shifted = current_data_ptr[1] >> 2;\n    if (size_shifted != 0) {\n      current_input_ptr = (undefined4 *)(*current_data_ptr + -4);\n      loop_counter = 0;\n      do {\n        current_input_ptr = current_input_ptr + 1;\n        result = process_input_00083c40(input,*current_input_ptr,size);\n        loop_counter = loop_counter + 1;\n        if (result == -1) goto LAB_00082b00;\n      } while (size_shifted != loop_counter);\n      current_size_ptr = data[2];\n    }\n    current_size = current_data_ptr[1] & 0xfffffffc;\n    current_size_ptr = (int *)((int)current_size_ptr - current_size);\n    data[2] = current_size_ptr;\n    current_data_ptr = current_data_ptr + 2;\n  }\n  result = 0;\nLAB_00082b00:\n  data[2] = (int *)0x0;\n  data[1] = (int *)0x0;\n  return result;\n}",
            "called": [
                "FUN_00083c40",
                "FUN_00083f34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082ac0",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "process_input_and_return_result_00082ac0"
        },
        "FUN_00080ce0": {
            "renaming": {
                "FUN_00080ce0": "check_differences_in_pointers_00080ce0",
                "calculate_difference_000813e4": "calculate_difference",
                "PTR_DAT_00080d14": "pointer1",
                "PTR_DAT_00080d18": "pointer2",
                "PTR_DAT_00080d1c": "pointer3",
                "PTR_DAT_00080d20": "pointer4",
                "iVar1": "difference"
            },
            "code": "void check_differences_in_pointers_00080ce0()\n{\n  int difference;\n  difference = calculate_difference(PTR_DAT_00080d14);\n  if (difference != 0) {\n    do_nothing_00080aa8();\n  }\n  difference = calculate_difference(PTR_DAT_00080d18);\n  if (difference != 0) {\n    do_nothing_00080ab8();\n  }\n  difference = calculate_difference(PTR_DAT_00080d1c);\n  if (difference != 0) {\n    do_nothing_00080aba();\n  }\n  difference = calculate_difference(PTR_DAT_00080d20);\n  if (difference != 0) {\n    do_nothing_00080abc();\n  }\n  return;\n}",
            "called": [
                "FUN_000813e4",
                "FUN_00080abc",
                "FUN_00080ab8",
                "FUN_00080aba",
                "FUN_00080aa8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ce0",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "check_differences_in_pointers_00080ce0"
        },
        "FUN_00081682": {
            "renaming": {
                "FUN_00081682": "copy_string_to_array_00081682",
                "param_1": "array",
                "param_2": "string_address",
                "uVar1": "string_length",
                "count_bytes_until_null_00082a50": "count_bytes_until_null",
                "update_params_and_copy_string_0008165c": "update_array_and_copy_string"
            },
            "code": "undefined4* copy_string_to_array_00081682(undefined4 *array, int string_address)\n{\n    undefined4 string_length;\n    array[0] = 0;\n    array[1] = 0;\n    array[2] = 0;\n    if (string_address != 0) {\n        string_length = count_bytes_until_null(string_address);\n        update_array_and_copy_string(array, string_address, string_length);\n    }\n    return array;\n}",
            "called": [
                "FUN_0008165c",
                "FUN_00082a50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081682",
            "calling": [
                "FUN_00080a68"
            ],
            "imported": false,
            "current_name": "copy_string_to_array_00081682"
        },
        "FUN_000815fe": {
            "renaming": {
                "FUN_000815fe": "000815fe_000815fe",
                "param_1": "param",
                "*param_1": "*param",
                "allocate_memory_block_00081e04": "allocate_memory_block",
                "*memory_block": "*memory_block"
            },
            "code": "void 000815fe_000815fe(void *memory_block) {\n    allocate_memory_block(memory_block);\n}\n\nvoid *000815fe_000815fe(void *param) {\n    000815fe_000815fe(*param);\n    return param;\n}",
            "called": [
                "FUN_00081e04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815fe",
            "calling": [],
            "imported": false,
            "current_name": "000815fe_000815fe"
        },
        "FUN_00081d1c": {
            "renaming": {
                "FUN_00081d1c": "decode_00081d1c",
                "param_1": "encoded_value",
                "uVar1": "shift_amount",
                "shift_mask": "shift_mask",
                "shift_result": "shift_result",
                "shift_value": "shift_value"
            },
            "code": "uint decode_00081d1c(uint encoded_value) {\n    uint decode_00081d1cd_value;\n\n    if (((encoded_value & 0x80000000) != 0) || (encoded_value << 1 < 0x7f000000)) {\n        return 0;\n    }\n\n    uint shift_amount = (encoded_value << 1) >> 0x18;\n    uint shift_mask = 0xff;\n    uint shift_result = shift_amount & shift_mask;\n    uint shift_value = (encoded_value << 8 | 0x80000000) >> shift_result;\n\n    if (shift_amount < 0) {\n        return 0xffffffff;\n    }\n\n    if ((shift_amount == 0xffffff9f) && ((encoded_value & 0x7fffff) != 0)) {\n        return 0;\n    }\n\n    return shift_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d1c",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "decode_00081d1c"
        },
        "FUN_000847ac": {
            "renaming": {
                "FUN_000847ac": "calculate_difference_000847ac",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "result_array",
                "uVar1": "product_lower",
                "lVar2": "product_upper",
                "*param_5": "result_array[0]",
                "param_5[1]": "result_array[1]"
            },
            "code": "void calculate_difference_000847ac(uint input_1, int input_2, uint32_t param_3, uint32_t param_4, int *result_array)\n{\n  uint32_t product_lower = FUNC_00084a80() * ((uint64_t)param_4 << 32 | param_3);\n  uint32_t input_diff = input_1 - product_lower;\n  uint32_t product_upper = product_lower >> 32;\n  uint32_t input_2_diff = input_2 - product_upper - (input_1 < product_lower);\n  result_array[0] = input_diff;\n  result_array[1] = input_2_diff;\n}",
            "called": [
                "FUN_00084a80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847ac",
            "calling": [
                "FUN_00084750"
            ],
            "imported": false,
            "current_name": "calculate_difference_000847ac"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "process_data_00080118",
                "param_1": "flag",
                "param_2": "data_ptr",
                "param_3": "data_size",
                "param_4": "func_ptr",
                "DAT_00080134": "flag_value",
                "PTR_DAT_0008013c": "data_buffer",
                "DAT_00080140": "func_value",
                "DAT_00080144": "data_processing_func"
            },
            "code": "void process_data_00080118(undefined4 flag, undefined *data_ptr, undefined4 data_size, undefined4 func_ptr)\n{\n  if (flag != 0) {\n    data_ptr = PTR_DAT_0008013c;\n  }\n  if ((*func_ptr != 0) && (DAT_00080144 != (code *)0x0)) {\n    (*DAT_00080144)(func_ptr, data_ptr, data_size, DAT_00080144, PTR_DAT_0008013c);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "process_data_00080118"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "do_nothing_00080aa8"
            },
            "code": "\nvoid do_nothing_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aa8"
        },
        "FUN_00081c94": {
            "renaming": {
                "FUN_00081c94": "check_for_zero_values_00081c94",
                "in_CY": "is_carry_zero",
                "in_ZR": "is_result_zero",
                "concatenate_two_uint32_t_00081c5c": "concatenate_two_numbers"
            },
            "code": "bool check_for_zero_values_00081c94(void)\n{\n  bool is_carry_zero = concatenate_two_numbers();\n  bool is_result_zero = !is_carry_zero;\n  return is_carry_zero || is_result_zero;\n}",
            "called": [
                "FUN_00081c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c94",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "check_for_zero_values_00081c94"
        },
        "FUN_00083b14": {
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "data_structure",
                "puVar1": "pointer_1",
                "uVar2": "value_1",
                "puVar3": "pointer_2",
                "puVar4": "pointer_3",
                "puVar5": "data_structure_1",
                "puVar6": "data_structure_2"
            },
            "code": "void initialize_data_structures_00083b14(int data_structure)\n{\n  undefined *pointer_1;\n  undefined4 value_1;\n  undefined *pointer_2;\n  undefined *pointer_3;\n  undefined4 *data_structure_1;\n  undefined4 *data_structure_2;\n  \n  if (*(int *)(data_structure + 0x38) == 0) {\n    data_structure_1 = *(undefined4 **)(data_structure + 4);\n    *(undefined **)(data_structure + 0x3c) = LAB_00083b08_1_00083bf4;\n    *(undefined4 *)(data_structure + 0x2e4) = 3;\n    *(int *)(data_structure + 0x2e8) = data_structure + 0x2ec;\n    *(undefined4 *)(data_structure + 0x2e0) = 0;\n    *(undefined2 *)(data_structure_1 + 3) = 4;\n    *data_structure_1 = 0;\n    data_structure_1[1] = 0;\n    data_structure_1[2] = 0;\n    data_structure_1[0x19] = 0;\n    *(undefined2 *)((int)data_structure_1 + 0xe) = 0;\n    data_structure_1[4] = 0;\n    data_structure_1[5] = 0;\n    data_structure_1[6] = 0;\n    fill_memory_with_value_00082504(data_structure_1 + 0x17, 0, 8);\n    pointer_2 = LAB_000844bc_1_00083c04;\n    pointer_3 = updateValue_0008449c_1_00083c00;\n    value_1 = DAT_00083bfc;\n    pointer_1 = LAB_00084440_1_00083bf8;\n    data_structure_2 = *(undefined4 **)(data_structure + 8);\n    data_structure_1[7] = data_structure_1;\n    data_structure_1[8] = pointer_1;\n    data_structure_1[9] = value_1;\n    data_structure_1[10] = pointer_3;\n    data_structure_1[0xb] = pointer_2;\n    *(undefined2 *)((int)data_structure_2 + 0xe) = 1;\n    *(undefined2 *)(data_structure_2 + 3) = 9;\n    *data_structure_2 = 0;\n    data_structure_2[1] = 0;\n    data_structure_2[2] = 0;\n    data_structure_2[0x19] = 0;\n    data_structure_2[4] = 0;\n    data_structure_2[5] = 0;\n    data_structure_2[6] = 0;\n    fill_memory_with_value_00082504(data_structure_2 + 0x17, 0, 8);\n    data_structure_1 = *(undefined4 **)(data_structure + 0xc);\n    data_structure_2[7] = data_structure_2;\n    data_structure_2[8] = pointer_1;\n    data_structure_2[9] = value_1;\n    data_structure_2[10] = pointer_3;\n    data_structure_2[0xb] = pointer_2;\n    *(undefined2 *)(data_structure_1 + 3) = 0x12;\n    *(undefined2 *)((int)data_structure_1 + 0xe) = 2;\n    *data_structure_1 = 0;\n    data_structure_1[1] = 0;\n    data_structure_1[2] = 0;\n    data_structure_1[0x19] = 0;\n    data_structure_1[4] = 0;\n    data_structure_1[5] = 0;\n    data_structure_1[6] = 0;\n    fill_memory_with_value_00082504(data_structure_1 + 0x17, 0, 8);\n    data_structure_1[7] = data_structure_1;\n    data_structure_1[8] = pointer_1;\n    data_structure_1[9] = value_1;\n    data_structure_1[10] = pointer_3;\n    data_structure_1[0xb] = pointer_2;\n    *(undefined4 *)(data_structure + 0x38) = 1;\n  }\n  return;\n}",
            "called": [
                "FUN_00082504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b14",
            "calling": [
                "FUN_00083adc",
                "FUN_000844c4",
                "FUN_00083808",
                "FUN_00082b38",
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_00083b14"
        },
        "FUN_000842a4": {
            "renaming": {
                "FUN_000842a4": "validate_data_000842a4",
                "param_1": "data",
                "param_2": "parameters",
                "uVar1": "flags",
                "iVar2": "set_memory_flags_result",
                "iVar3": "memory_result",
                "uVar4": "flags_as_uint",
                "bVar5": "is_flag_8000",
                "auStack_54": "memory_flags",
                "local_50": "memory_flags_uint"
            },
            "code": "void validate_data_000842a4(int data, int *parameters)\n{\n  ushort flags = *(ushort *)(parameters + 3);\n  uint flags_as_uint = (uint)flags;\n  bool is_flag_negative = (int)(flags_as_uint << 0x1e) < 0;\n  undefined memory_flags [4];\n  uint memory_flags_uint;\n\n  if (is_flag_negative) {\n    *parameters = (int)parameters + 0x43;\n    parameters[4] = (int)parameters + 0x43;\n    parameters[5] = 1;\n    return;\n  }\n  \n  if (-1 < *(short *)((int)parameters + 0xe)) {\n    int set_memory_flags_result = set_memory_flags(data,(int)*(short *)((int)parameters + 0xe),memory_flags);\n    if (-1 < set_memory_flags_result) {\n      bool is_flag_8000 = (flags_as_uint & 0xf000) == 0x8000;\n      if (is_flag_8000 && ((undefined *)parameters[10] == PTR_FUN_0008449c_1_00084380)) {\n        int flag_400 = 0x400;\n        *(ushort *)(parameters + 3) = flags | 0x400;\n        parameters[0x13] = 0x400;\n      }\n      else {\n        int flag_400 = 0x400;\n        *(ushort *)(parameters + 3) = flags | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    flags = *(ushort *)(parameters + 3);\n    flags_as_uint = (uint)flags;\n  }\n  \n  *(ushort *)(parameters + 3) = flags | 0x800;\n  int flag_400 = (flags_as_uint & 0x80) == 0 ? 0x400 : 0x40;\n  bool is_flag_2000 = (flags_as_uint & 0xf000) == 0x2000;\n\nLAB_00084300:\n  int memory_result = set_memory(data, flag_400);\n  flags = *(ushort *)(parameters + 3);\n  uint flags_as_uint_again = (uint)flags;\n\n  if (memory_result == 0) {\n    if (-1 < (int)((uint)flags_as_uint_again << 0x16)) {\n      *(ushort *)(parameters + 3) = flags | 2;\n      *parameters = (int)parameters + 0x43;\n      parameters[4] = (int)parameters + 0x43;\n      parameters[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(data + 0x3c) = PTR_LAB_00083b08_1_0008437c;\n    *(ushort *)(parameters + 3) = flags | 0x80;\n    *parameters = memory_result;\n    parameters[4] = memory_result;\n    parameters[5] = flag_400;\n    if (is_flag_2000 && get_value(data,(int)*(short *)((int)parameters + 0xe)) != 0) {\n      *(ushort *)(parameters + 3) = *(ushort *)(parameters + 3) | 1;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_000846b4",
                "FUN_000846dc",
                "FUN_00081e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "FUN_00083808"
            ],
            "imported": false,
            "current_name": "validate_data_000842a4"
        },
        "FUN_000846a4": {
            "renaming": {
                "FUN_000846a4": "process_data_000846a4",
                "param_1": "data_ptr",
                "uVar1": "result",
                "iVar2": "result_code",
                "iVar3": "data_struct_ptr",
                "PTR_DAT_000846b0": "data_struct_ptr_ptr"
            },
            "code": "undefined4 process_data_000846a4(int data_ptr)\n{\n    undefined4 result;\n    int data_struct_ptr = *PTR_DAT_000846b0;\n    \n    if (data_ptr == 0)\n    {\n        return 0;\n    }\n    \n    if ((data_struct_ptr != 0) && (*(int *)(data_struct_ptr + 0x38) == 0))\n    {\n        initialize_data_structures();\n    }\n    \n    if (*(short *)(data_ptr + 0xc) != 0)\n    {\n        result = process_data_000846a4_00083adc(data_struct_ptr, data_ptr);\n        \n        if ((*(code **)(data_ptr + 0x2c) != (code *)0x0) &&\n            (result = (**(code **)(data_ptr + 0x2c))(data_struct_ptr, *(undefined4 *)(data_ptr + 0x1c))), result < 0)\n        {\n            result = 0xffffffff;\n        }\n        \n        if ((int)((uint)*(ushort *)(data_ptr + 0xc) << 0x18) < 0)\n        {\n            allocate_memory_block(data_struct_ptr, *(undefined4 *)(data_ptr + 0x10));\n        }\n        \n        if (*(int *)(data_ptr + 0x30) != 0)\n        {\n            if (*(int *)(data_ptr + 0x30) != data_ptr + 0x40)\n            {\n                allocate_memory_block(data_struct_ptr);\n            }\n            *(undefined4 *)(data_ptr + 0x30) = 0;\n        }\n        \n        if (*(int *)(data_ptr + 0x44) != 0)\n        {\n            allocate_memory_block(data_struct_ptr);\n            *(undefined4 *)(data_ptr + 0x44) = 0;\n        }\n        \n        do_nothing_00083c08();\n        *(undefined2 *)(data_ptr + 0xc) = 0;\n        do_nothing_00083c0c();\n        \n        return result;\n    }\n    \n    return 0;\n}\n",
            "called": [
                "FUN_00083adc",
                "FUN_00083b14",
                "FUN_00083d9c",
                "FUN_00083c0c",
                "FUN_00083c08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846a4",
            "calling": [],
            "imported": false,
            "current_name": "process_data_000846a4"
        },
        "FUN_00080f24": {
            "renaming": {
                "FUN_00080f24": "initialize_memory_00080f24",
                "puVar1": "rel_array",
                "puVar2": "data_array",
                "iVar3": "i",
                "puVar4": "dat_ptr",
                "dat_ptr_2": "dat_ptr_2"
            },
            "code": "void initialize_memory_00080f24(void)\n{\n  uint32_t *rel_array = PTR_Elf32_Rel_ARRAY_00080f80;\n  uint32_t *data_array = DAT_00080f7c;\n  uint32_t *dat_ptr = (uint32_t *)PTR_DAT_00080f84;\n  if (DAT_00080f7c != PTR_Elf32_Rel_ARRAY_00080f80) {\n    for (int i = 0; rel_array + i < (uint32_t *)PTR_DAT_00080f88; i += 4) {\n      *(uint32_t *)(rel_array + i) = *(uint32_t *)(data_array + i);\n    }\n  }\n  for (; dat_ptr < (uint32_t *)DAT_00080f8c; dat_ptr++) {\n    *dat_ptr = 0;\n  }\n  uint32_t *dat_ptr_2 = PTR_DAT_00080f90 + -0x20000000;\n  *(uint32_t *)(DAT_00080f94 + 8) = (uint32_t)PTR_DAT_00080f90 & 0x1fffff80;\n  if (dat_ptr_2 < (uint32_t *)0x100000) {\n    *(uint32_t *)(DAT_00080f94 + 8) |= 0x20000000;\n  }\n  (*DAT_00080f98)();\n  while(true) {\n    // Do nothing block with infinite loop\n  }\n}",
            "called": [
                "FUN_000816a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f24",
            "calling": [],
            "imported": false,
            "current_name": "initialize_memory_00080f24"
        },
        "FUN_00080e04": {
            "renaming": {
                "FUN_00080e04": "check_bit_00080e04",
                "param_1": "data",
                "param_2": "mask",
                "uVar1": "result"
            },
            "code": "uint check_bit_00080e04(uint* data, uint mask)\n{\n  uint result = *(data + 1) & mask;\n  if (result != 0) {\n    if ((mask & *(data + 6)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e04",
            "calling": [
                "FUN_00081318"
            ],
            "imported": false,
            "current_name": "check_bit_00080e04"
        },
        "FUN_000804a8": {
            "renaming": {
                "FUN_000804a8": "process_input_and_process_data_000804a8",
                "puVar1": "input_ptr",
                "puVar2": "data_ptr",
                "puVar3": "ptr3",
                "puVar4": "ptr4",
                "uVar5": "value",
                "iVar6": "result"
            },
            "code": "undefined8 process_input_and_process_data_000804a8(void)\n{\n  // Process input\n  process_input(1, 0);\n  process_input(6, 1);\n  process_input(0, 1);\n  process_input(1, 1);\n  process_input(0, 0);\n  process_input(1, 0);\n\n  // Define variables\n  undefined *input_ptr = PTR_INPUT;\n  undefined *data_ptr = PTR_DATA;\n  undefined *ptr1 = PTR_1;\n  undefined *ptr2 = PTR_2;\n  undefined *ptr3 = PTR_3;\n  undefined4 value = 0;\n  int result = 0;\n\n  *(undefined2 *)(input_ptr + 0xe) = 0x13;\n  *(undefined2 *)(input_ptr + 0x10) = 10;\n  *(undefined **)(input_ptr + 0x14) = ptr1 + 0x26;\n  input_ptr[1] = 3;\n  input_ptr[0x19] = 3;\n  *(undefined2 *)(input_ptr + 0x1a) = 0x14;\n  *(undefined2 *)(input_ptr + 0x28) = 3;\n  *(undefined2 *)(input_ptr + 4) = 0x10;\n  *(undefined **)(input_ptr + 8) = ptr1;\n  input_ptr[0xd] = 0x10;\n  *(undefined2 *)(input_ptr + 0x1c) = 0xc;\n  input_ptr[0x25] = 0x10;\n  *(undefined2 *)(input_ptr + 0x34) = 8;\n  *(undefined2 *)(input_ptr + 0x26) = 0x1c;\n  *(undefined **)(input_ptr + 0x2c) = ptr1 + 0x38;\n  input_ptr[0x30] = 2;\n  input_ptr[0x31] = 2;\n  *(undefined **)(input_ptr + 0x38) = ptr2;\n  input_ptr[0x3c] = 2;\n  *input_ptr = 1;\n  input_ptr[0xc] = 1;\n  input_ptr[0x18] = 1;\n  input_ptr[0x24] = 1;\n  *(undefined2 *)(input_ptr + 0x3e) = 1;\n  *(undefined2 *)(input_ptr + 0x40) = 1;\n  *(undefined2 *)(input_ptr + 2) = 0;\n  *(undefined **)(input_ptr + 0x20) = ptr1 + 0x28;\n  *(undefined2 *)(input_ptr + 0x32) = 0;\n  input_ptr[0x3d] = 5;\n  *(undefined **)(input_ptr + 0x44) = ptr2 + 2;\n\n  // Process data\n  process_data(ptr3, 0x4b00);\n  *(undefined2 *)(ptr3 + 0x56) = 2000;\n\n  // Get values from pointer thunk\n  value = get_value_from_pointer_thunk(PTR_4);\n  *(undefined4 *)PTR_5 = value;\n  result = get_value_from_pointer_thunk(PTR_6);\n  *(int *)PTR_7 = result + 1000;\n  result = get_value_from_pointer_thunk(PTR_8);\n  *(int *)PTR_9 = result + 1000;\n  result = get_value_from_pointer_thunk(PTR_10);\n  *(int *)PTR_11 = result + 1000;\n  result = get_value_from_pointer_thunk(PTR_12);\n  *(int *)PTR_13 = result + 1000;\n\n  // Check for software interrupt\n  if (*(int *)PTR_INTERRUPT == 0) {\n    software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_00081210",
                "FUN_00080164",
                "thunk_FUN_00081714",
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000804a8",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "process_input_and_process_data_000804a8"
        },
        "FUN_000802da": {
            "renaming": {
                "FUN_000802da": "validate_and_update_data_000802da",
                "param_1": "data_ptr",
                "param_2": "data_len",
                "param_3": "data",
                "cVar1": "error_code",
                "bVar2": "byte_val",
                "uVar3": "undefined_val",
                "uVar4": "short_val",
                "uVar5": "data_len_uint",
                "puVar6": "data_ptr_temp",
                "local_1c": "local_char_val",
                "local_1b": "local_undefined_val",
                "local_1a": "local_short_val"
            },
            "code": "int validate_and_update_data_000802da(int data_ptr, unsigned short data_len, unsigned short *data)\n{\n    char error_code;\n    byte byte_val;\n    undefined undefined_val;\n    unsigned short short_val;\n    uint data_len_uint = (uint)data_len;\n    char local_char_val;\n    undefined local_undefined_val;\n    unsigned short local_short_val;\n    if (*(char *)(data_ptr + 4) != '\\0') {\n        error_code = -2;\n        goto LAB_000803cc;\n    }\n    if (*(char *)(data_ptr + 7) != '\\0') {\n        error_code = -1;\n        goto LAB_000803cc;\n    }\n    if (0xf6 < (byte)(local_char_val - 1U)) {\n        error_code = -3;\n        goto LAB_000803cc;\n    }\n    *(char *)(data_ptr + 9) = local_char_val;\n    *(undefined *)(data_ptr + 10) = local_undefined_val;\n    *(unsigned short **)(data_ptr + 0x4c) = data;\n    *(char *)(data_ptr + 0xb) = (char)((uint)local_short_val >> 8);\n    *(char *)(data_ptr + 0xc) = (char)local_short_val;\n    error_code = (char)data_len;\n    undefined_val = (undefined)(data_len_uint >> 8);\n    switch(local_undefined_val) {\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n            *(undefined *)(data_ptr + 0xd) = undefined_val;\n            break;\n        case 5:\n            short_val = *data;\n            if (short_val != 0) {\n                short_val = 1;\n            }\n            *(char *)(data_ptr + 0xd) = -(char)short_val;\n            data_len_uint = 0;\n            break;\n        case 6:\n            *(char *)(data_ptr + 0xd) = (char)((uint)*data >> 8);\n            data_len_uint = (uint)*data;\n            break;\n        default:\n            goto switchD_0008031e_caseD_7;\n        case 0xf:\n            byte_val = (byte)(data_len >> 3) & 0xfe;\n            if ((data_len & 0xf) != 0) {\n                byte_val = byte_val + 1;\n            }\n            *(char *)(data_ptr + 0xe) = error_code;\n            *(undefined *)(data_ptr + 0xd) = undefined_val;\n            *(byte *)(data_ptr + 0xf) = byte_val;\n            undefined_val = 7;\n            goto LAB_0008034a;\n        case 0x10:\n            *(undefined *)(data_ptr + 0xd) = undefined_val;\n            *(char *)(data_ptr + 0xe) = error_code;\n            data = data + -1;\n            *(char *)(data_ptr + 0xf) = error_code * '\\x02';\n            *(undefined *)(data_ptr + 0x49) = 7;\n            unsigned short *data_ptr_temp = data + data_len_uint;\n            while (data != data_ptr_temp) {\n                byte_val = *(byte *)(data_ptr + 0x49);\n                *(char *)(data_ptr + (uint)byte_val + 9) = (char)((uint)data[1] >> 8);\n                data_len_uint = byte_val + 1 & 0xff;\n                *(char *)(data_ptr + 0x49) = (char)data_len_uint;\n                data = data + 1;\n                *(char *)(data_len_uint + data_ptr + 9) = (char)*data;\n                *(byte *)(data_ptr + 0x49) = byte_val + 2;\n            }\n            goto switchD_0008031e_caseD_7;\n    }\n    *(char *)(data_ptr + 0xe) = (char)data_len_uint;\n    undefined_val = 6;\nLAB_0008034a:\n    *(undefined *)(data_ptr + 0x49) = undefined_val;\nswitchD_0008031e_caseD_7:\n    calculate_crc_and_update_data(data_ptr);\n    *(undefined *)(data_ptr + 7) = 1;\n    error_code = '\\0';\nLAB_000803cc:\n    return (int)error_code;\n}\n",
            "called": [
                "FUN_00080258"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000802da",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "validate_and_update_data_000802da"
        },
        "FUN_00080f9c": {
            "renaming": {
                "FUN_00080f9c": "find_value_at_index_00080f9c",
                "param_1": "result",
                "param_2": "value",
                "param_3": "divisor",
                "param_4": "max_value",
                "local_58": "local_values",
                "uVar1": "quotient",
                "uVar2": "index"
            },
            "code": "uint32_t find_value_at_index_00080f9c(uint32_t *result, uint32_t value, int divisor, int max_value)\n{\n    uint32_t local_values[16];\n    local_values[0] = *(uint32_t *)PTR_DAT_0008102c;\n    local_values[1] = *(uint32_t *)(PTR_DAT_0008102c + 4);\n    local_values[2] = *(uint32_t *)(PTR_DAT_0008102c + 8);\n    local_values[3] = *(uint32_t *)(PTR_DAT_0008102c + 0xc);\n    local_values[4] = *(uint32_t *)(PTR_DAT_0008102c + 0x10);\n    local_values[5] = *(uint32_t *)(PTR_DAT_0008102c + 0x14);\n    local_values[6] = *(uint32_t *)(PTR_DAT_0008102c + 0x18);\n    local_values[7] = *(uint32_t *)(PTR_DAT_0008102c + 0x1c);\n    local_values[8] = *(uint32_t *)(PTR_DAT_0008102c + 0x20);\n    local_values[9] = *(uint32_t *)(PTR_DAT_0008102c + 0x24);\n    local_values[10] = *(uint32_t *)(PTR_DAT_0008102c + 0x28);\n    local_values[11] = *(uint32_t *)(PTR_DAT_0008102c + 0x2c);\n    local_values[12] = *(uint32_t *)(PTR_DAT_0008102c + 0x30);\n    local_values[13] = *(uint32_t *)(PTR_DAT_0008102c + 0x34);\n    local_values[14] = *(uint32_t *)(PTR_DAT_0008102c + 0x38);\n    local_values[15] = *(uint32_t *)(PTR_DAT_0008102c + 0x3c);\n    *result = 1;\n    result[1] = 0;\n    result[0x48] = 0x202;\n    result[0x41] = 0;\n    result[0x45] = 0;\n    uint32_t quotient = value / (uint32_t)(divisor * 2);\n    if (value == divisor * 2 * quotient) {\n        quotient--;\n    }\n    uint32_t index = 0;\n    do {\n        if ((uint32_t)(max_value * (int)(((uint64_t)value / (uint64_t)((quotient + 1) * 2)) / (uint64_t)DAT_00081030)) <= local_values[index]) {\n            result[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | result[1];\n            return 0;\n        }\n        index++;\n    } while (index != 0x10);\n    return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f9c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "find_value_at_index_00080f9c"
        },
        "FUN_00081210": {
            "renaming": {
                "FUN_00081210": "process_input_00081210",
                "param_1": "input_value",
                "param_2": "mode",
                "puVar1": "input_data_ptr",
                "puVar2": "bitmask_ptr",
                "iVar3": "output_value",
                "uVar4": "bitmask_value",
                "uVar5": "bitmask_length",
                "uVar6": "bitmask_result",
                "bVar7": "input_byte",
                "bVar8": "bitmask_byte",
                "iVar9": "input_data_index",
                "iVar10": "output_data_ptr"
            },
            "code": "int process_input_00081210(int input_value, int mode)\\n{\\n  undefined *input_data_ptr;\\n  undefined *bitmask_ptr;\\n  int output_value;\\n  uint bitmask_value;\\n  byte input_byte;\\n  byte bitmask_byte;\\n  int input_data_index;\\n  int bitmask_index;\\n  \\n  bitmask_ptr = PTR_DAT_00081310;\\n  input_data_ptr = PTR_DAT_0008130c;\\n  output_value = input_value;\\n  input_data_index = input_value * 0x1c;\\n  \\n  if (input_data_ptr[input_data_index + 0xc] != \"\\0\") {\\n    if ((bitmask_ptr[input_value] & 0xf) == 4) {\\n      output_value = set_bit_at_position_0008105c(DAT_00081314,input_data_ptr[input_data_index + 0x19]);\\n    }\\n    input_byte = bitmask_ptr[input_value];\\n    bitmask_byte = input_byte & 0xf;\\n    if ((bitmask_byte < 3) && (input_byte != 0)) {\\n      if (bitmask_byte == 2) {\\n        if (mode == 0) {\\n          return output_value;\\n        }\\n      }\\n      else if (bitmask_byte == 1) {\\n        if (mode == 2) {\\n          return output_value;\\n        }\\n      }\\n      else if (bitmask_byte == 3) {\\n        if (mode == 1) {\\n          return output_value;\\n        }\\n        goto LAB_0008126c;\\n      }\\n    }\\n    if (mode != 1) {\\nLAB_0008126c:\\n      if (mode == 0) {\\n        check_input(*(undefined4 *)(input_data_ptr + input_data_index + 8));\\n        output_value = process_data(*(undefined4 *)(input_data_ptr + input_data_index),3,*(undefined4 *)(input_data_ptr + input_data_index + 4),0);\\n        bitmask_byte = bitmask_ptr[input_value] & 0xf0 | 2;\\n      }\\n      else {\\n        if (mode != 2) {\\n          return output_value;\\n        }\\n        check_input(*(undefined4 *)(input_data_ptr + input_data_index + 8));\\n        output_value = process_data(*(undefined4 *)(input_data_ptr + input_data_index),3,*(undefined4 *)(input_data_ptr + input_data_index + 4),1);\\n        bitmask_byte = bitmask_ptr[input_value] & 0xf0 | 1;\\n      }\\n      bitmask_ptr[input_value] = bitmask_byte;\\n      return output_value;\\n    }\\n    bitmask_index = input_value * 0x1c;\\n    output_value = *(int *)(input_data_ptr + bitmask_index);\\n    if (input_byte >> 4 == 0) {\\n      bitmask_value = 4;\\n    }\\n    else {\\n      bitmask_value = 5;\\n    }\\n    output_value = process_data(output_value,bitmask_value,*(undefined4 *)(input_data_ptr + bitmask_index + 4),*(undefined4 *)(input_data_ptr + bitmask_index + 0x10));\\n    bitmask_ptr[input_value] = bitmask_ptr[input_value] & 0xf0 | 3;\\n    if (*(int *)(output_value + 0x18) == -1) {\\n      bitmask_value = *(uint *)(input_data_ptr + bitmask_index + 8);\\n      if (0x2c < bitmask_value) {\\n        return 1;\\n      }\\n      if (bitmask_value < 0x20) {\\n        bitmask_value = 1 << (bitmask_value & 0xff);\\n        bitmask_byte = *(uint *)(DAT_00080e98 + 0x18) & bitmask_value;\\n        if (bitmask_byte == bitmask_value) {\\n          *(uint *)(DAT_00080e98 + 0x14) = bitmask_byte;\\n        }\\n      }\\n      else {\\n        bitmask_value = 1 << (bitmask_value - 0x20 & 0xff);\\n        bitmask_byte = *(uint *)(DAT_00080e98 + 0x108) & bitmask_value;\\n        if (bitmask_byte == bitmask_value) {\\n          *(uint *)(DAT_00080e98 + 0x104) = bitmask_byte;\\n        }\\n      }\\n      return 0;\\n    }\\n  }\\n  return output_value;\\n}",
            "called": [
                "FUN_00080da0",
                "FUN_00080e18",
                "FUN_0008105c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081210",
            "calling": [
                "FUN_000804a8",
                "FUN_00080164",
                "FUN_00081318"
            ],
            "imported": false,
            "current_name": "process_input_00081210"
        },
        "FUN_00081454": {
            "renaming": {
                "FUN_00081454": "write_data_to_buffer_00081454",
                "param_1": "buffer_address",
                "param_2": "data",
                "iVar1": "buffer_ptr",
                "uVar2": "buffer_index",
                "buffer_size": "buffer_size",
                "buffer_capacity": "buffer_capacity",
                "buffer_count": "buffer_count"
            },
            "code": "int write_data_to_buffer_00081454(int buffer_address, int data){\n    int buffer_ptr = *(int *)(buffer_address + 0x14);\n    int buffer_size = *(int *)(buffer_address + 0x18);\n    int buffer_capacity = *(int *)(buffer_ptr + 0x80);\n    int buffer_count = *(int *)(buffer_ptr + 0x84);\n    if ((*(int *)(buffer_size + 0x14) << 0x1e < 0) &&\n     (*(int *)(buffer_ptr + 0x84) == *(int *)(buffer_ptr + 0x80))) {\n        *(int *)(buffer_size + 0x1c) = data;\n    }\n    else {\n        uint buffer_index = DAT_000814a4 & buffer_capacity + 1U;\n        if ((int)buffer_index < 0) {\n            buffer_index = (buffer_index - 1 | 0xffffff80) + 1;\n        }\n        do {\n        } while (*(uint *)(buffer_ptr + 0x84) == buffer_index);\n        *(char *)(buffer_ptr + buffer_capacity) = (char)data;\n        *(uint *)(buffer_ptr + 0x80) = buffer_index;\n        *(int *)(buffer_size + 8) = 2;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081454",
            "calling": [],
            "imported": false,
            "current_name": "write_data_to_buffer_00081454"
        },
        "FUN_00081730": {
            "renaming": {
                "FUN_00081730": "FUNC_00081730"
            },
            "code": "\nuint FUNC_00081730(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_0008186a;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081730",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081730"
        },
        "FUN_00080ab8": {
            "renaming": {
                "FUN_00080ab8": "do_nothing_00080ab8"
            },
            "code": "\nvoid do_nothing_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ab8",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080ab8"
        },
        "FUN_00081734": {
            "renaming": {
                "FUN_00081734": "FUNC_00081734"
            },
            "code": "\nuint FUNC_00081734(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_0008186a;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081734",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081734"
        },
        "FUN_00084728": {
            "renaming": {
                "FUN_00084728": "process_input_00084728",
                "param_1": "output",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "ptr",
                "iVar2": "result"
            },
            "code": "void process_input_00084728(int *output, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n  undefined *ptr = PTR_DAT_0008474c;\n  *(undefined4 *)PTR_DAT_0008474c = 0;\n  int result = return_zero_000811c6(arg1, arg2, arg3);\n  if ((result == -1) && (*(int *)ptr != 0)) {\n    *output = *(int *)ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084728",
            "calling": [],
            "imported": false,
            "current_name": "process_input_00084728"
        },
        "FUN_00083c40": {
            "renaming": {
                "FUN_00083c40": "process_input_00083c40",
                "param_1": "input_value",
                "param_2": "input_size",
                "param_3": "input_buffer",
                "uVar1": "first_value",
                "iVar2": "process_input_result",
                "uVar3": "current_byte",
                "pbVar4": "current_buffer",
                "uVar5": "buffer_index",
                "local_1c": "current_byte",
                "abStack_1b": "stack_byte"
            },
            "code": "uint process_input_00083c40(uint input_size, uint input_value, byte **input_buffer)\n{\n  uint first_value = get_first_value();\n  byte current_byte;\n  uint buffer_index = 0;\n  byte stack_byte;\n  \n  if (-1 < (int)((uint)*(ushort *)(input_buffer + 3) << 0x12)) {\n    *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) | 0x2000;\n    input_buffer[0x19] = (byte *)((uint)input_buffer[0x19] | 0x2000);\n  }\n  if ((first_value == 1) && (input_size - 1 < 0xff)) {\n    current_byte = (byte)(input_size & 0xff);\n  }\n  else {\n    uint function_result = execute_function(input_value,&current_byte,input_size,input_buffer + 0x17);\n    if (function_result == 0xffffffff) {\n      *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (function_result == 0) {\n      return input_size;\n    }\n  }\n  while( true ) {\n    byte *current_buffer = input_buffer[2] + -1;\n    input_buffer[2] = current_buffer;\n    if ((int)current_buffer < 0) {\n      if ((int)input_buffer[6] <= (int)current_buffer) {\n        **input_buffer = (byte)current_byte;\n        current_buffer = *input_buffer;\n        current_byte = (byte)*current_buffer;\n        if (current_byte != 10) goto LAB_00083c90;\n      }\n      int process_input_00083c40_result = process_input_00083c40_function(input_value,current_byte,input_buffer);\n      if (process_input_00083c40_result == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **input_buffer = (byte)current_byte;\n      current_buffer = *input_buffer;\nLAB_00083c90:\n      *input_buffer = current_buffer + 1;\n    }\n    if (first_value <= buffer_index + 1) {\n      return input_size;\n    }\n    current_byte = (byte)stack_byte[buffer_index];\n    buffer_index = buffer_index + 1;\n  }\n}",
            "called": [
                "FUN_000844c4",
                "FUN_00084298",
                "FUN_0008456c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c40",
            "calling": [
                "FUN_00082ac0"
            ],
            "imported": false,
            "current_name": "process_input_00083c40"
        },
        "FUN_000805d0": {
            "renaming": {
                "FUN_000805d0": "FUNC_000805d0"
            },
            "code": "\nvoid FUNC_000805d0(void)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  undefined *puVar4;\n  undefined *puVar5;\n  undefined *puVar6;\n  undefined *puVar7;\n  undefined *puVar8;\n  undefined *puVar9;\n  undefined2 uVar10;\n  uint uVar11;\n  undefined4 uVar12;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  int iVar16;\n  int *piVar17;\n  undefined4 uVar18;\n  int iVar19;\n  \n  puVar7 = PTR_DAT_0008089c;\n  puVar9 = PTR_DAT_00080898;\n  puVar8 = PTR_DAT_00080894;\n  puVar3 = PTR_DAT_0008087c;\n  puVar5 = PTR_DAT_00080878;\n  puVar4 = PTR_DAT_00080874;\n  puVar2 = PTR_DAT_00080834;\n  puVar1 = PTR_DAT_00080830;\n  if ((byte)*PTR_DAT_0008082c < 10) {\n                    /* WARNING: Could not recover jumptable at 0x000805f0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_000805f0::switchdataD_000805f4 +\n              (uint)(&switchD_000805f0::switchdataD_000805f4)[(byte)*PTR_DAT_0008082c] * 2))();\n    return;\n  }\n  iVar16 = *(int *)PTR_DAT_00080894;\n  iVar15 = iVar16 - *(int *)PTR_DAT_00080874;\n  if (iVar15 < 0) {\n    iVar15 = iVar15 + 0x3c;\n  }\n  *(int *)PTR_DAT_0008087c = iVar15;\n  puVar6 = PTR_DAT_00080880;\n  uVar11 = *(uint *)puVar9;\n  iVar15 = uVar11 - *(int *)puVar5;\n  *(int *)PTR_DAT_00080880 = iVar15;\n  if (iVar15 < 0) {\n    *(int *)puVar3 = *(int *)puVar3 + -1;\n    *(int *)puVar6 = iVar15 + 0x3c;\n  }\n  iVar15 = *(int *)puVar3;\n  iVar19 = *(int *)puVar6;\n  *(short *)(puVar1 + 0x36) = (short)iVar15;\n  *(short *)(puVar1 + 0x38) = (short)iVar19;\n  if ((iVar15 == 0) && (iVar19 == 0)) {\n    *(undefined4 *)PTR_DAT_00080868 = 1;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n  }\n  puVar6 = PTR_DAT_00080888;\n  puVar3 = PTR_DAT_00080884;\n  if (*(int *)PTR_DAT_00080884 == iVar16) {\n    iVar15 = 1 - uVar11;\n    if (1 < uVar11) {\n      iVar15 = 0;\n    }\n    *(int *)PTR_DAT_00080888 = iVar15;\n    if (iVar15 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    *(int *)puVar3 = iVar16;\n    puVar3 = PTR_DAT_00080a50;\n    *(uint *)puVar6 = uVar11;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    *(undefined4 *)puVar3 = 0;\n  }\n  puVar6 = PTR_DAT_0008088c;\n  puVar3 = PTR_DAT_00080860;\n  iVar15 = *(int *)puVar7;\n  if (iVar15 == 0) {\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    piVar17 = (int *)PTR_DAT_0008088c;\nLAB_000808f2:\n    *piVar17 = iVar15;\n  }\n  else {\n    if (iVar15 != 1) goto LAB_000808f4;\n    if (*(int *)PTR_DAT_0008088c < *(int *)PTR_DAT_00080860) {\n      uVar11 = get_value_from_pointer_thunk_00081714();\n      puVar7 = PTR_DAT_00080890;\n      if (*(uint *)PTR_DAT_00080890 < uVar11) {\n        *(int *)puVar6 = *(int *)puVar6 + 1;\n        iVar15 = get_value_from_pointer_thunk_00081714();\n        *(int *)puVar7 = iVar15 + 1000;\n      }\n    }\n    if (*(int *)puVar6 < *(int *)puVar3) goto LAB_000808f4;\n    *(int *)PTR_DAT_0008088c = *(int *)puVar3 + 1;\n    piVar17 = (int *)PTR_DAT_00080a20;\n    puVar3 = PTR_DAT_00080a1c;\n    if (*(int *)puVar4 < *(int *)puVar8) {\n      uVar11 = get_value_from_pointer_thunk_00081714();\n      puVar3 = PTR_DAT_00080890;\n      if (*(uint *)PTR_DAT_00080890 < uVar11) {\n        *(int *)puVar5 = *(int *)puVar5 + 1;\n        iVar15 = get_value_from_pointer_thunk_00081714();\n        *(int *)puVar3 = iVar15 + 1000;\n      }\n    }\n    else {\n      if (*(int *)puVar4 != *(int *)puVar8) goto LAB_000808f4;\n      if (*(int *)puVar9 < *(int *)puVar5) {\n        iVar15 = 0;\n        *(undefined4 *)PTR_DAT_00080a1c = 0;\n        goto LAB_000808f2;\n      }\n      uVar11 = get_value_from_pointer_thunk_00081714();\n      puVar8 = PTR_DAT_00080a54;\n      if (*(uint *)PTR_DAT_00080a54 < uVar11) {\n        *(int *)puVar3 = *(int *)puVar3 + 1;\n        iVar15 = get_value_from_pointer_thunk_00081714();\n        *(int *)puVar8 = iVar15 + 1000;\n      }\n    }\n    if (0x3b < *(int *)puVar5) {\n      *(undefined4 *)PTR_DAT_00080a1c = 0;\n      *(int *)puVar4 = *(int *)puVar4 + 1;\n    }\n  }\nLAB_000808f4:\n  uVar11 = get_value_from_pointer_thunk_00081714();\n  puVar8 = PTR_DAT_00080a60;\n  puVar3 = PTR_DAT_00080a5c;\n  puVar5 = PTR_DAT_00080a58;\n  puVar4 = PTR_DAT_00080a24;\n  if (*(uint *)PTR_DAT_00080a58 < uVar11) {\n    uVar12 = reverse_bits_0008189c(*(undefined4 *)PTR_DAT_00080a28);\n    uVar12 = FUNC_00081730(uVar12,*(undefined4 *)PTR_DAT_00080a2c);\n    *(undefined4 *)PTR_DAT_00080a30 = uVar12;\n    puVar9 = PTR_DAT_00080a34;\n    uVar18 = *(undefined4 *)PTR_DAT_00080a34;\n    uVar13 = FUNC_00081734(uVar12,uVar18);\n    uVar13 = FUNC_00081944(uVar13,*(undefined4 *)puVar8);\n    puVar7 = PTR_DAT_00080a64;\n    uVar13 = FUNC_00081734(uVar13,*(undefined4 *)PTR_DAT_00080a64);\n    *(undefined4 *)puVar8 = uVar13;\n    uVar18 = FUNC_00081730(uVar12,uVar18);\n    uVar18 = FUNC_00081944(uVar18,*(undefined4 *)PTR_DAT_00080a38);\n    puVar8 = PTR_DAT_00080a3c;\n    uVar18 = FUNC_00081730(uVar18,*(undefined4 *)PTR_DAT_00080a3c);\n    *(undefined4 *)PTR_DAT_00080a38 = uVar18;\n    uVar14 = FUNC_00081944(uVar12,*(undefined4 *)PTR_DAT_00080a40);\n    uVar14 = FUNC_00081734(uVar14,uVar13);\n    FUNC_00081734(uVar14,uVar18);\n    uVar14 = convert_param_to_int_00081cd0();\n    *(undefined4 *)PTR_DAT_00080a44 = uVar14;\n    uVar14 = reverse_bits_0008189c();\n    *(undefined4 *)puVar9 = uVar12;\n    *(undefined4 *)puVar4 = uVar14;\n    *(undefined4 *)puVar3 = 0;\n    *(undefined4 *)puVar7 = uVar13;\n    *(undefined4 *)puVar8 = uVar18;\n    iVar15 = get_value_from_pointer_thunk_00081714();\n    *(int *)puVar5 = iVar15 + *(int *)puVar2;\n  }\n  uVar12 = reverse_bits_0008189c(*(undefined4 *)puVar2);\n  iVar15 = check_concatenation_result_00081ca8(*(undefined4 *)puVar4,uVar12);\n  if (iVar15 != 0) {\n    *(undefined4 *)PTR_DAT_00080a24 = uVar12;\n  }\n  iVar15 = check_for_zero_values_00081c94(*(undefined4 *)puVar4,0);\n  if (iVar15 != 0) {\n    *(undefined4 *)PTR_DAT_00080a24 = 0;\n  }\n  uVar10 = decode_00081d1c(*(undefined4 *)puVar4);\n  iVar15 = *(int *)puVar3;\n  *(undefined2 *)(puVar1 + 0x2a) = uVar10;\n  *(int *)puVar3 = iVar15 + 1;\n  *(uint *)PTR_DAT_00080a4c = *(ushort *)PTR_DAT_00080a48 & 1 ^ 1;\n  return;\n}\n\n",
            "called": [
                "FUN_000802da",
                "FUN_00081730",
                "FUN_00081894",
                "FUN_00081ca8",
                "FUN_00081d1c",
                "FUN_00081734",
                "FUN_00081c94",
                "thunk_FUN_00081714",
                "FUN_00081944",
                "FUN_0008189c",
                "FUN_0008043e",
                "FUN_00081cd0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000805d0",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "FUNC_000805d0"
        },
        "FUN_000813e4": {
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "input_param",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x80)": "ptr_1",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x84)": "ptr_2",
                "difference": "difference"
            },
            "code": "int calculate_difference_000813e4(int input_param) {\n    int* ptr_1 = (int*)(*(int*)(input_param + 0x10) + 0x80);\n    int* ptr_2 = (int*)(*(int*)(input_param + 0x10) + 0x84);\n    int difference = *ptr_1 - *ptr_2;\n    return difference & 0x7f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e4",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "calculate_difference_000813e4"
        },
        "FUN_0008120c": {
            "renaming": {
                "FUN_0008120c": "do_nothing_0008120c"
            },
            "code": "\nvoid do_nothing_0008120c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008120c",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "do_nothing_0008120c"
        },
        "FUN_00084290": {
            "renaming": {
                "FUN_00084290": "get_dat_value_00084290",
                "DAT_00084294": "dat_value"
            },
            "code": "int get_dat_value_00084290(void) {\n    int DAT_00084294 = DAT_00084294;\n    return DAT_00084294;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084290",
            "calling": [
                "FUN_0008456c"
            ],
            "imported": false,
            "current_name": "get_dat_value_00084290"
        },
        "FUN_000846b4": {
            "renaming": {
                "FUN_000846b4": "set_memory_flags_000846b4",
                "param_1": "result",
                "param_2": "start_address",
                "param_3": "end_address",
                "param_4": "flags",
                "puVar1": "ptr",
                "iVar2": "set_result"
            },
            "code": "void set_memory_flags_000846b4(int* result, int start_address, int end_address, int value, int flags) {\n  undefined* ptr = PTR_DAT_000846d8;\n  *(int*)PTR_DAT_000846d8 = 0;\n  int set_result = set_memory_flags_000846b4_000811b4(start_address, end_address, value, 0, flags);\n  if (set_result == -1 && *(int*)ptr != 0) {\n    *result = *(int*)ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846b4",
            "calling": [
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "set_memory_flags_000846b4"
        },
        "FUN_000813a8": {
            "renaming": {
                "FUN_000813a8": "initialize_memory_000813a8",
                "param_1": "memory_address",
                "fill_memory_with_value_00082504": "fill_memory_with_value",
                "PTR_": "no renaming",
                "DAT_": "no renaming"
            },
            "code": "int initialize_memory_000813a8(int memory_address)\n{\n\tint memory_size = 128;\n\tint initial_value = 0;\n\tfill_memory_with_value(memory_address, initial_value, memory_size);\n\t*(int *)(memory_address + 128) = 0;\n\t*(int *)(memory_address + 132) = 0;\n\treturn memory_address;\n}\n",
            "called": [
                "FUN_00082504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813a8",
            "calling": [
                "FUN_00080c0c"
            ],
            "imported": false,
            "current_name": "initialize_memory_000813a8"
        },
        "FUN_00083d9c": {
            "renaming": {
                "FUN_00083d9c": "allocate_memory_block_00083d9c",
                "param_1": "heap",
                "param_2": "block_size",
                "iVar1": "prev_block_size",
                "uVar2": "flags",
                "iVar3": "curr_block_offset",
                "uVar4": "curr_block_size",
                "iVar5": "prev_block_offset",
                "iVar6": "next_block_offset",
                "uVar7": "next_block_size",
                "iVar8": "heap_start_offset",
                "DAT_00083f24": "heap_start_offset",
                "DAT_00083f2c": "heap_end_ptr",
                "PTR_DAT_00083f30": "size_threshold"
            },
            "code": "void allocate_memory_block_00083d9c(void* heap, int block_size) {\n  int prev_block_size;\n  uint flags;\n  int curr_block_offset;\n  uint curr_block_size;\n  int prev_block_offset;\n  int next_block_offset;\n  uint next_block_size;\n  int DAT_00083f24 = DAT_00083f24;\n  if (block_size == 0) {\n    return;\n  }\n  do_nothing_00082598();\n  flags = *(uint*)(block_size - 4);\n  prev_block_offset = block_size - 8;\n  curr_block_size = flags & 0xfffffffe;\n  curr_block_offset = prev_block_offset + curr_block_size;\n  next_block_size = *(uint*)(curr_block_offset + 4) & 0xfffffffc;\n  if (*(int*)(DAT_00083f24 + 8) == curr_block_offset) {\n    next_block_size += curr_block_size;\n    if (-1 < (int)(flags << 0x1f)) {\n      prev_block_offset -= *(int*)(block_size - 8);\n      int prev_block_contents = *(int*)(prev_block_offset + 0xc);\n      int next_block_contents = *(int*)(prev_block_offset + 8);\n      next_block_size += *(int*)(block_size - 8);\n      *(int*)(next_block_contents + 0xc) = prev_block_contents;\n      *(int*)(prev_block_contents + 8) = next_block_contents;\n    }\n    uint* DAT_00083f2c = *DAT_00083f2c;\n    *(uint*)(prev_block_offset + 4) = next_block_size | 1;\n    *(int*)(DAT_00083f24 + 8) = prev_block_offset;\n    if (DAT_00083f2c <= prev_block_offset) {\n      calculate_and_set_size_00083d00(heap, *(undefined4*)PTR_DAT_00083f30);\n    }\n  }\n  else {\n    flags = flags & 1;\n    *(uint*)(curr_block_offset + 4) = next_block_size;\n    if (flags == 0) {\n      prev_block_offset -= *(int*)(block_size - 8);\n      int prev_block_contents = *(int*)(prev_block_offset + 8);\n      curr_block_size = curr_block_size + *(int*)(block_size - 8);\n      if (prev_block_contents == DAT_00083f24 + 8) {\n        flags = 1;\n      }\n      else {\n        int next_block_contents = *(int*)(prev_block_offset + 0xc);\n        *(int*)(prev_block_contents + 0xc) = next_block_contents;\n        *(int*)(next_block_contents + 8) = prev_block_contents;\n      }\n    }\n    else {\n      flags = 0;\n    }\n    if (-1 < *(int*)(curr_block_offset + next_block_size + 4) << 0x1f) {\n      curr_block_size = curr_block_size + next_block_size;\n      int next_block_contents = *(int*)(curr_block_offset + 8);\n      if ((flags == 0) && (next_block_contents == DAT_00083f28)) {\n        *(int*)(DAT_00083f24 + 0x14) = prev_block_offset;\n        *(int*)(DAT_00083f24 + 0x10) = prev_block_offset;\n        *(int*)(prev_block_offset + 0xc) = next_block_contents;\n        *(int*)(prev_block_offset + 8) = next_block_contents;\n        *(uint*)(prev_block_offset + 4) = curr_block_size | 1;\n        *(uint*)(prev_block_offset + curr_block_size) = curr_block_size;\n        goto LAB_00083e30;\n      }\n      int curr_block_contents = *(int*)(curr_block_offset + 0xc);\n      *(int*)(next_block_contents + 0xc) = curr_block_contents;\n      *(int*)(curr_block_contents + 8) = next_block_contents;\n    }\n    *(uint*)(prev_block_offset + 4) = curr_block_size | 1;\n    *(uint*)(prev_block_offset + curr_block_size) = curr_block_size;\n    if (flags == 0) {\n      if (curr_block_size < 0x200) {\n        uint heap_end_flags = *(uint*)(DAT_00083f24 + 4);\n        int heap_end_offset = DAT_00083f24 + (curr_block_size & 0xfffffff8);\n        int next_block_contents = *(int*)(heap_end_offset + 8);\n        *(int*)(prev_block_offset + 8) = next_block_contents;\n        *(int*)(prev_block_offset + 0xc) = heap_end_offset;\n        *(uint*)(DAT_00083f24 + 4) = heap_end_flags | 1 << ((int)(curr_block_size >> 3) >> 2 & 0xffU);\n        *(int*)(heap_end_offset + 8) = prev_block_offset;\n        *(int*)(next_block_contents + 0xc) = prev_block_offset;\n        do_nothing_0008259c(heap);\n        return;\n      }\n      uint size_divisor = curr_block_size >> 9;\n      if (size_divisor < 5) {\n        int index = (curr_block_size >> 6) + 0x38;\n        prev_block_offset = index * 2;\n      }\n      else if (size_divisor < 0x15) {\n        int index = size_divisor + 0x5b;\n        prev_block_offset = index * 2;\n      }\n      else if (size_divisor < 0x55) {\n        int index = (curr_block_size >> 0xc) + 0x6e;\n        prev_block_offset = index * 2;\n      }\n      else if (size_divisor < 0x155) {\n        int index = (curr_block_size >> 0xf) + 0x77;\n        prev_block_offset = index * 2;\n      }\n      else if (size_divisor < 0x555) {\n        int index = (curr_block_size >> 0x12) + 0x7c;\n        prev_block_offset = index * 2;\n      }\n      else {\n        prev_block_offset = 0xfc;\n        int index = 0x7e;\n      }\n      int heap_end_offset = DAT_00083f24 + prev_block_offset * 4;\n      int next_block_contents = *(int*)(heap_end_offset + 8);\n      if (next_block_contents == heap_end_offset) {\n        *(uint*)(DAT_00083f24 + 4) = *(uint*)(DAT_00083f24 + 4) | 1 << (index >> 2 & 0xffU);\n        heap_end_offset = next_block_contents;\n      }\n      else {\n        do {\n          if ((*(uint*)(next_block_contents + 4) & 0xfffffffc) <= curr_block_size) break;\n          next_block_contents = *(int*)(next_block_contents + 8);\n        } while (heap_end_offset != next_block_contents);\n        heap_end_offset = *(int*)(next_block_contents + 0xc);\n      }\n      *(int*)(prev_block_offset + 0xc) = heap_end_offset;\n      *(int*)(prev_block_offset + 8) = next_block_contents;\n      *(int*)(heap_end_offset + 8) = prev_block_offset;\n      *(int*)(next_block_contents + 0xc) = prev_block_offset;\n    }\n  }\nLAB_00083e30:\n  do_nothing_0008259c(heap);\n  return;\n}",
            "called": [
                "FUN_00083d00",
                "FUN_00082598",
                "FUN_0008259c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d9c",
            "calling": [
                "FUN_00083adc",
                "FUN_00083808",
                "FUN_000825b0",
                "FUN_00081e04",
                "FUN_00083f34",
                "FUN_00081e14",
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00083d9c"
        },
        "FUN_00083c08": {
            "renaming": {
                "FUN_00083c08": "do_nothing_00083c08"
            },
            "code": "\nvoid do_nothing_00083c08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c08",
            "calling": [
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c08"
        },
        "FUN_00081bf4": {
            "renaming": {
                "FUN_00081bf4": "calculate_result_00081bf4",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "doubled_input_1",
                "uVar3": "doubled_input_2",
                "uVar4": "input_1_without_sign",
                "bVar1": "is_input_1_xor_input_2_negative",
                "bVar5": "is_input_1_zero"
            },
            "code": "uint calculate_result_00081bf4(uint input_1, uint input_2)\n{\n  bool is_negative_1 = false;\n  bool is_negative_2 = false;\n  uint doubled_input_1 = input_1 * 2;\n  uint doubled_input_2 = input_2 * 2;\n  \n  if ((int)(doubled_input_1 >> 0x18) == -1 || (int)(doubled_input_2 >> 0x18) == -1)\n  {\n    if ((int)(doubled_input_1 >> 0x18) == -1 && ((input_1 & 0x7fffff) != 0))\n    {\n      return 1;\n    }\n    if ((int)(doubled_input_2 >> 0x18) == -1 && ((input_2 & 0x7fffff) != 0))\n    {\n      return 1;\n    }\n  }\n  \n  uint input_1_without_sign = input_1 & 0x7fffffff;\n  bool is_input_1_zero = (input_1_without_sign == 0);\n  if (!is_input_1_zero)\n  {\n    uint input_1_xor_input_2 = input_1 ^ input_2;\n    is_input_1_zero = (input_1_xor_input_2 == 0);\n  }\n  \n  bool is_input_1_xor_input_2_negative = -1 < (int)(input_1 ^ input_2);\n  if (is_input_1_xor_input_2_negative)\n  {\n    uint input_1_minus_2_times_input_2 = doubled_input_2 * -2 + doubled_input_1;\n    is_input_1_zero = (input_1_minus_2_times_input_2 == 0);\n  }\n  \n  if (is_input_1_xor_input_2_negative && doubled_input_2 <= doubled_input_1 && !is_input_1_zero)\n  {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  \n  if (!is_input_1_xor_input_2_negative || doubled_input_2 > doubled_input_1)\n  {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  \n  if (!is_input_1_zero)\n  {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081bf4",
            "calling": [
                "FUN_00081c5c"
            ],
            "imported": false,
            "current_name": "calculate_result_00081bf4"
        },
        "FUN_00081d7c": {
            "renaming": {
                "FUN_00081d7c": "execute_functions_00081d7c",
                "puVar1": "data_pointer",
                "puVar2": "data_start",
                "iVar3": "i",
                "ppcVar4": "function_pointer",
                "iVar5": "num_functions",
                "PTR_DAT_00081dbc": "function_pointers_end",
                "PTR_DAT_00081dc0": "function_pointers_start",
                "PTR_LAB_00081dc4": "data_end",
                "PTR_DAT_00081dc8": "data_start"
            },
            "code": "void execute_functions_00081d7c() {\n  void **PTR_DAT_00081dbc = PTR_DAT_00081dbc;\n  void **PTR_DAT_00081dc0 = PTR_DAT_00081dc0;\n  int num_functions = (int)PTR_DAT_00081dbc - (int)PTR_DAT_00081dc0 >> 2;\n  if (num_functions != 0) {\n    void **function_pointer = PTR_DAT_00081dc0 - 1;\n    int i = 0;\n    do {\n      i++;\n      function_pointer++;\n      (**(void(**)())function_pointer)();\n    } while (num_functions != i);\n  }\n  void *PTR_LAB_00081dc4 = PTR_LAB_00081dc4;\n  void *PTR_DAT_00081dc8 = PTR_DAT_00081dc8;\n  do_nothing_00085858();\n  int num_data = (int)PTR_LAB_00081dc4 - (int)PTR_DAT_00081dc8 >> 2;\n  if (num_data != 0) {\n    void **data_pointer = PTR_DAT_00081dc8 - 1;\n    int i = 0;\n    do {\n      i++;\n      data_pointer++;\n      (**(void(**)())data_pointer)();\n    } while (num_data != i);\n  }\n}",
            "called": [
                "FUN_00083974",
                "FUN_00080118",
                "FUN_00085858"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d7c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "execute_functions_00081d7c"
        },
        "FUN_00081c5c": {
            "renaming": {
                "FUN_00081c5c": "concatenate_two_uint32_t_00081c5c",
                "param_1": "first_num",
                "param_2": "second_num",
                "CONCAT44": "bitwise_concatenation",
                "calculate_result_00081bf4": "calculate_result"
            },
            "code": "uint64_t concatenate_two_uint32_t_00081c5c(uint32_t first_num, uint32_t second_num) {\n    calculate_result();\n    return ((uint64_t)second_num << 32) | first_num;\n}",
            "called": [
                "FUN_00081bf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c5c",
            "calling": [
                "FUN_00081c94",
                "FUN_00081c54"
            ],
            "imported": false,
            "current_name": "concatenate_two_uint32_t_00081c5c"
        },
        "FUN_00081388": {
            "renaming": {
                "FUN_00081388": "decrement_and_call_if_zero_00081388",
                "iVar1": "count"
            },
            "code": "void decrement_and_call_if_zero_00081388(void)\n{\n  int count = *DAT_000813a0;\n  if ((count != -1) && (--count == 0)) {\n    (*DAT_000813a4)();\n  }\n  *DAT_000813a0 = count;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081388",
            "calling": [],
            "imported": false,
            "current_name": "decrement_and_call_if_zero_00081388"
        },
        "FUN_00082598": {
            "renaming": {
                "FUN_00082598": "do_nothing_00082598"
            },
            "code": "\nvoid do_nothing_00082598(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082598",
            "calling": [
                "FUN_00083d00",
                "FUN_00083d9c",
                "FUN_000825b0",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "do_nothing_00082598"
        },
        "FUN_00082994": {
            "renaming": {
                "FUN_00082994": "copy_string_00082994",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "source_ptr",
                "puVar4": "destination_ptr",
                "uVar5": "current_uint",
                "uVar6": "next_uint",
                "puVar7": "destination_ptr",
                "bVar8": "is_null"
            },
            "code": "void copy_string_00082994(uint *destination, uint *source)\n{\n  char current_char;\n  ushort current_short;\n  uint *source_ptr;\n  uint *destination_ptr;\n  uint current_uint;\n  bool is_null;\n  \n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      current_char = *(char *)source;\n      *(char *)destination = current_char;\n      source = (uint *)((int)source + 1);\n      destination = (uint *)((int)destination + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    source_ptr = source;\n    if (((uint)source & 1) != 0) {\n      source_ptr = (uint *)((int)source + 1);\n      current_char = *(char *)source;\n      *(char *)destination = current_char;\n      destination = (uint *)((int)destination + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    source = source_ptr;\n    if (((uint)source_ptr & 2) != 0) {\n      source = (uint *)((int)source_ptr + 2);\n      current_short = *(ushort *)source_ptr;\n      is_null = (current_short & 0xff) == 0;\n      if (is_null) {\n        *(char *)destination = (char)current_short;\n      }\n      else {\n        *(ushort *)destination = current_short;\n        is_null = (current_short & 0xff00) == 0;\n        destination = (uint *)((int)destination + 2);\n      }\n      if (is_null) {\n        return;\n      }\n    }\n  }\n  current_uint = *source;\n  source_ptr = source + 1;\n  destination_ptr = destination;\n  if (((uint)source & 4) != 0) {\n    if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) goto LAB_000829f8;\n    destination_ptr = destination + 1;\n    *destination = current_uint;\n    source_ptr = source + 2;\n    current_uint = source[1];\n  }\n  while( true ) {\n    source = source_ptr + 1;\n    current_uint = *source_ptr;\n    destination = destination_ptr;\n    if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) break;\n    destination = destination_ptr + 1;\n    *destination_ptr = current_uint;\n    current_uint = current_uint;\n    if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) break;\n    source_ptr = source_ptr + 2;\n    current_uint = *source;\n    destination_ptr = destination_ptr + 2;\n    *destination = current_uint;\n  }\nLAB_000829f8:\n  do {\n    *(char *)destination = (char)current_uint;\n    current_uint = current_uint & 0xff;\n    current_uint = current_uint >> 8 | current_uint << 0x18;\n    destination = (uint *)((int)destination + 1);\n  } while (current_uint != 0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082994",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "copy_string_00082994"
        },
        "FUN_00080c0c": {
            "renaming": {
                "FUN_00080c0c": "initialize_buffers_00080c0c",
                "param_1": "buffer1",
                "param_2": "buffer2",
                "param_3": "size",
                "puVar1": "start_buffer1",
                "puVar2": "end_buffer1",
                "puVar3": "start_buffer2",
                "puVar4": "end_buffer2",
                "puVar5": "buffer3_start",
                "puVar6": "buffer3_end",
                "puVar7": "buffer4_start",
                "puVar8": "buffer4_end",
                "puVar9": "buffer5_start",
                "puVar10": "buffer5_end"
            },
            "code": "void initialize_buffers_00080c0c(undefined4 buffer1, undefined4 buffer2, undefined4 size)\n{\n    undefined *start_buffer1 = PTR_DAT_00080ca0;\n    undefined *end_buffer1 = PTR_DAT_00080ca4;\n    undefined *start_buffer2 = PTR_DAT_00080cac;\n    undefined *end_buffer2 = PTR_DAT_00080cd8;\n    undefined *buffer3_start = PTR_DAT_00080cb0;\n    undefined *buffer3_end = PTR_DAT_00080cb4;\n    undefined *buffer4_start = PTR_DAT_00080cb8;\n    undefined *buffer4_end = PTR_DAT_00080cbc;\n    undefined *buffer5_start = PTR_DAT_00080ccc;\n    undefined *buffer5_end = PTR_DAT_00080cd4;\n    initialize_memory_000813a8(start_buffer1);\n    initialize_memory_000813a8(end_buffer1);\n    initialize_memory_000813a8(start_buffer2);\n    initialize_memory_000813a8(end_buffer2);\n    initialize_memory_000813a8(buffer3_start);\n    initialize_memory_000813a8(buffer3_end);\n    initialize_memory_000813a8(buffer4_start);\n    initialize_memory_000813a8(buffer4_end);\n    initialize_memory_000813a8(buffer5_start);\n    initialize_memory_000813a8(buffer5_end);\n    write_data_to_buffer_000815d4(PTR_DAT_00080cc4, DAT_00080cc0, 0x11, 0x11, end_buffer2, buffer5_start);\n    write_data_to_buffer_000815d4(PTR_DAT_00080ccc, DAT_00080cc8, 0x12, 0x12, start_buffer2, buffer4_start);\n    write_data_to_buffer_000815d4(PTR_DAT_00080cd4, DAT_00080cd0, 0x14, 0x14, buffer3_end, buffer4_end);\n}",
            "called": [
                "FUN_000814e4",
                "FUN_000815d4",
                "FUN_000813a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c0c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_buffers_00080c0c"
        },
        "FUN_00080d2e": {
            "renaming": {
                "FUN_00080d2e": "update_flags_00080d2e",
                "param_1": "base_address",
                "param_2": "flag_value",
                "param_3": "flag_mask",
                "uVar1": "new_flag_value"
            },
            "code": "void update_flags_00080d2e(int base_address, uint32_t flag_value, uint32_t flag_mask)\n{\n  *(uint32_t *)(base_address + 0x44) = flag_mask;\n  switch(flag_value) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    uint32_t new_flag_value = *(uint32_t *)(base_address + 0x70) & *(uint32_t *)(base_address + 0x70) & ~flag_mask;\n    *(uint32_t *)(base_address + 0x70) = new_flag_value;\n    break;\n  case 2:\n    uint32_t new_flag_value = *(uint32_t *)(base_address + 0x70) | flag_mask;\n    *(uint32_t *)(base_address + 0x70) = new_flag_value;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint32_t *)(base_address + 4) = flag_mask;\n  return;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d2e",
            "calling": [
                "FUN_00080da0"
            ],
            "imported": false,
            "current_name": "update_flags_00080d2e"
        },
        "FUN_00081944": {
            "renaming": {
                "FUN_00081944": "FUNC_00081944"
            },
            "code": "\nuint FUNC_00081944(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_00081a94;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_00081a94:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081944",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081944"
        },
        "FUN_000844c4": {
            "renaming": {
                "FUN_000844c4": "process_input_000844c4",
                "param_1": "input_length",
                "param_2": "input_char",
                "param_3": "data_struct_ptr",
                "param_4": "data_struct_size",
                "uVar1": "current_char",
                "uVar2": "current_char_as_uint",
                "puVar3": "current_ptr",
                "iVar4": "current_offset"
            },
            "code": "uint process_input_000844c4(int input_length, uint input_char, undefined4 *data_struct_ptr, undefined4 data_struct_size)\n{\n  ushort current_char;\n  uint current_char_as_uint;\n  undefined *current_ptr;\n  int current_offset;\n  \n  if ((input_length != 0) && (*(int *)(input_length + 0x38) == 0)) {\n    initialize_data_structures();\n  }\n  current_char = *(ushort *)(data_struct_ptr + 3);\n  current_char_as_uint = (uint)current_char;\n  data_struct_ptr[2] = data_struct_ptr[6];\n  if ((-1 < (int)(current_char_as_uint << 0x1c)) || (current_offset = data_struct_ptr[4], current_offset == 0)) {\n    current_offset = validate_and_modify_data(input_length, data_struct_ptr, current_char, current_char_as_uint, data_struct_size);\n    if (current_offset != 0) {\n      return 0xffffffff;\n    }\n    current_char = *(ushort *)(data_struct_ptr + 3);\n    current_offset = data_struct_ptr[4];\n    current_char_as_uint = (uint)current_char;\n  }\n  input_char = input_char & 0xff;\n  if ((int)(current_char_as_uint << 0x12) < 0) {\n    current_ptr = (undefined *)*data_struct_ptr;\n    current_offset = (int)current_ptr - current_offset;\n    if (current_offset < (int)data_struct_ptr[5]) {\nLAB_000844f6:\n      current_offset = current_offset + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    data_struct_ptr[0x19] = data_struct_ptr[0x19] & 0xffffdfff;\n    current_ptr = (undefined *)*data_struct_ptr;\n    *(ushort *)(data_struct_ptr + 3) = current_char | 0x2000;\n    current_offset = (int)current_ptr - current_offset;\n    if (current_offset < (int)data_struct_ptr[5]) goto LAB_000844f6;\n  }\n  current_offset = process_data(input_length, data_struct_ptr);\n  if (current_offset != 0) {\n    return 0xffffffff;\n  }\n  current_ptr = (undefined *)*data_struct_ptr;\n  current_offset = 1;\nLAB_000844f8:\n  data_struct_ptr[2] = data_struct_ptr[2] + -1;\n  *data_struct_ptr = current_ptr + 1;\n  *current_ptr = (char)input_char;\n  if (((data_struct_ptr[5] == current_offset) || (((int)((uint)*(ushort *)(data_struct_ptr + 3) << 0x1f) < 0 && (input_char == 10)))) && (current_offset = process_data(input_length, data_struct_ptr), current_offset != 0)) {\n    return 0xffffffff;\n  }\n  return input_char;\n}",
            "called": [
                "FUN_00083adc",
                "FUN_00083808",
                "FUN_00083b14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844c4",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "process_input_000844c4"
        },
        "FUN_0008189c": {
            "renaming": {
                "FUN_0008189c": "reverse_bits_0008189c",
                "param_1": "input",
                "uVar2": "shift_amount",
                "uVar3": "sum",
                "iVar1": "leading_zeros",
                "iVar4": "constant",
                "uVar5": "high_bits",
                "count_leading_zeroes": "count_leading_zeros"
            },
            "code": "uint reverse_bits_0008189c(uint input) {\n  uint msb = input & 0x80000000;\n  if ((int)msb < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  int leading_zeros = count_leading_zeroes(input);\n  uint shift_amount = leading_zeros - 8;\n  int constant = ((msb | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (leading_zeros > 7) {\n    uint shift = shift_amount & 0xff;\n    uint high_bits = 0 << shift;\n    uint low_bits = 0U >> (0x20 - shift & 0xff);\n    uint shifted_input = input << shift;\n    uint sum = constant + shifted_input + high_bits + (uint)(0x7fffffff < high_bits);\n    if (high_bits == 0x80000000) {\n      sum = sum & 0xfffffffe;\n    }\n    return sum;\n  }\n  uint shift = (leading_zeros + 0x18U) & 0xff;\n  uint high_bits = input << shift;\n  uint shifted_input = input >> (0x20 - shift & 0xff);\n  uint sum = constant + shifted_input - ((int)high_bits >> 0x1f);\n  if ((high_bits & 0x7fffffff) == 0) {\n    sum = sum & ~(high_bits >> 0x1f);\n  }\n  return sum;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008189c",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "reverse_bits_0008189c"
        },
        "FUN_0008234c": {
            "renaming": {
                "FUN_0008234c": "copyMemory_0008234c",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "dest_ptr",
                "puVar3": "source_ptr",
                "uVar4": "i",
                "uVar5": "remaining_bytes",
                "bVar6": "more_than_sixteen"
            },
            "code": "undefined4 *copyMemory_0008234c(undefined4 *destination, undefined4 *source, uint size)\n{\n  undefined4 *dest_ptr;\n  undefined4 *source_ptr;\n  uint remaining_bytes;\n  uint i;\n  bool more_than_sixteen;\n  \n  dest_ptr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      remaining_bytes = size - 4;\n      if (3 < size) {\n        do {\n          source_ptr = source;\n          dest_ptr = dest_ptr;\n          more_than_sixteen = remaining_bytes != 0;\n          remaining_bytes = remaining_bytes - 1;\n          *(undefined *)dest_ptr = *(undefined *)source_ptr;\n          dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n          source = (undefined4 *)((int)source_ptr + 1);\n        } while (more_than_sixteen);\n        *(undefined *)(undefined4 *)((int)dest_ptr + 1) =\n             *(undefined *)(undefined4 *)((int)source_ptr + 1);\n        *(undefined *)((int)dest_ptr + 2) = *(undefined *)((int)source_ptr + 2);\n        *(undefined *)((int)dest_ptr + 3) = *(undefined *)((int)source_ptr + 3);\n        return destination;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      remaining_bytes = 4 - ((uint)destination & 3);\n      size = size - remaining_bytes;\n      source_ptr = source;\n      dest_ptr = destination;\n      if (((uint)destination & 1) != 0) {\n        source_ptr = (undefined4 *)((int)source + 1);\n        dest_ptr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      dest_ptr = dest_ptr;\n      source = source_ptr;\n      if ((remaining_bytes & 2) != 0) {\n        source = (undefined4 *)((int)source_ptr + 2);\n        dest_ptr = (undefined4 *)((int)dest_ptr + 2);\n        *(undefined2 *)dest_ptr = *(undefined2 *)source_ptr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    for (i = 0; i < 16; i++) {\n      dest_ptr[i] = source[i];\n    }\n    dest_ptr = dest_ptr + 16;\n    source = source + 16;\n    size = size - 0x40;\n  }\n  remaining_bytes = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      for (i = 0; i < 4; i++) {\n        dest_ptr[i] = source[i];\n      }\n      dest_ptr = dest_ptr + 4;\n      source = source + 4;\n      more_than_sixteen = 0xf < remaining_bytes;\n      remaining_bytes = remaining_bytes - 0x10;\n    } while (more_than_sixteen);\n  }\n  size = remaining_bytes + 0xc;\n  source_ptr = source;\n  dest_ptr = dest_ptr;\n  if (0xfffffff3 < remaining_bytes) {\n    do {\n      source = source_ptr + 1;\n      *dest_ptr = *source_ptr;\n      more_than_sixteen = 3 < size;\n      size = size - 4;\n      dest_ptr = dest_ptr + 1;\n      source_ptr = source_ptr + 1;\n    } while (more_than_sixteen);\n  }\nLAB_000823d0:\n  if (size + 4 != 0) {\n    source_ptr = source;\n    dest_ptr = dest_ptr;\n    if ((size & 1) != 0) {\n      source_ptr = (undefined4 *)((int)source + 1);\n      dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = *(undefined *)source;\n    }\n    if ((size + 4 & 2) != 0) {\n      *(undefined2 *)dest_ptr = *(undefined2 *)source_ptr;\n    }\n  }\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008234c",
            "calling": [
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "copyMemory_0008234c"
        },
        "FUN_00080a68": {
            "renaming": {
                "FUN_00080a68": "copy_string_and_add_to_buffer_00080a68",
                "puVar1": "buffer_pointer",
                "PTR_DAT_00080a94": "buffer_start",
                "PTR_s__00080a98": "string_to_copy",
                "DAT_00080aa0": "buffer_data",
                "DAT_00080a9c": "buffer_data_size",
                "PTR_DAT_00080aa4": "buffer_end"
            },
            "code": "void copy_string_and_add_to_buffer_00080a68(void)\n{\n  undefined *PTR_DAT_00080a94 = PTR_DAT_00080a94;\n  copy_string_to_array_00081682(PTR_DAT_00080a94,PTR_s__00080a98);\n  add_to_buffer_00081d5c(PTR_DAT_00080a94,DAT_00080aa0,DAT_00080a9c);\n  undefined *PTR_DAT_00080aa4 = PTR_DAT_00080aa4;\n  PTR_DAT_00080aa4[4] = 0;\n  PTR_DAT_00080aa4[5] = 0;\n  PTR_DAT_00080aa4[6] = 6;\n  *(undefined2 *)(PTR_DAT_00080aa4 + 0x56) = 1000;\n  return;\n}",
            "called": [
                "FUN_00081682",
                "FUN_00081d5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a68",
            "calling": [],
            "imported": false,
            "current_name": "copy_string_and_add_to_buffer_00080a68"
        },
        "FUN_0008165c": {
            "renaming": {
                "FUN_0008165c": "update_params_and_copy_string_0008165c",
                "param_1": "params",
                "param_2": "string_to_copy",
                "param_3": "new_param",
                "iVar1": "check_result",
                "checkAndUpdateParams_0008163a": "check_and_update_params",
                "reset_memory_0008160c": "reset_memory",
                "copy_string_00082994": "copy_string"
            },
            "code": "undefined4 * update_params_and_copy_string_0008165c(undefined4 *params, undefined4 new_param, undefined4 string_to_copy){\n  int check_result = check_and_update_params(params, new_param);\n  if (check_result == 0) {\n    reset_memory(params);\n  }\n  else {\n    params[2] = new_param;\n    copy_string(*params, string_to_copy);\n  }\n  return params;\n}",
            "called": [
                "FUN_00082994",
                "FUN_0008160c",
                "FUN_0008163a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008165c",
            "calling": [
                "FUN_00081682"
            ],
            "imported": false,
            "current_name": "update_params_and_copy_string_0008165c"
        },
        "FUN_000815f8": {
            "renaming": {
                "FUN_000815f8": "combine_values_000815f8",
                "param_1": "value1",
                "param_2": "value2"
            },
            "code": "uint16_t combine_values_000815f8(int8_t value1, uint8_t value2)\n{\n    return value2 | (value1 << 8);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815f8",
            "calling": [
                "FUN_00080410"
            ],
            "imported": false,
            "current_name": "combine_values_000815f8"
        },
        "FUN_00084384": {
            "renaming": {
                "FUN_00084384": "find_char_in_buffer_00084384",
                "param_1": "buffer",
                "param_2": "target_char",
                "param_3": "buffer_size",
                "puVar1": "buffer_ptr",
                "uVar2": "xored",
                "pcVar3": "char_ptr",
                "pcVar4": "end_ptr",
                "bVar5": "found_target_char"
            },
            "code": "uint * find_char_in_buffer_00084384(uint *buffer, char target_char, uint *buffer_size)\n{\n    uint *buffer_ptr;\n    uint buffer_remaining_size;\n    char *char_ptr;\n    char *end_ptr;\n    bool found_target_char;\n\n    if (((uint)buffer & 3) == 0) {\n        buffer_ptr = buffer;\n        if ((uint *)0x3 < buffer_size) {\n            do {\n                uint xored = *buffer ^ CONCAT22(CONCAT11(target_char,target_char),CONCAT11(target_char,target_char));\n                buffer_ptr = buffer;\n                if ((xored + 0xfefefeff & ~xored & 0x80808080) != 0) break;\n                buffer_size = buffer_size + -1;\n                buffer_ptr = buffer_ptr + 1;\n                buffer = buffer + 1;\n            } while ((uint *)0x3 < buffer_size);\n        }\n        buffer = buffer_size;\n        end_ptr = (char *)((int)buffer - 1);\n        if ((buffer != (uint *)0x0) && (buffer = buffer_ptr, *(char *)buffer_ptr != target_char)) {\n            char_ptr = (char *)0x0;\n            do {\n                buffer = (uint *)((int)buffer + 1);\n                found_target_char = char_ptr == end_ptr;\n                char_ptr = char_ptr + 1;\n                if (found_target_char) goto LAB_000843dc;\n            } while (*(char *)buffer != target_char);\n        }\n    }\n    else if (buffer_size == (uint *)0x0) {\nLAB_000843dc:\n        buffer = (uint *)0x0;\n    }\n    else if (*(char *)buffer != target_char) {\n        buffer_ptr = (uint *)((int)buffer + 1);\n        buffer_size = (uint *)((int)buffer_size + -1);\n        do {\n            buffer = buffer_ptr;\n            if (((uint)buffer & 3) == 0) goto LAB_000843b4;\n            if (buffer_size == (uint *)0x0) goto LAB_000843dc;\n            buffer_ptr = (uint *)((int)buffer + 1);\n            buffer_size = (uint *)((int)buffer_size + -1);\n        } while (*(char *)buffer != target_char);\n    }\n    return buffer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084384",
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "find_char_in_buffer_00084384"
        },
        "FUN_00081034": {
            "renaming": {
                "FUN_00081034": "update_flag_00081034",
                "param_1": "flag_address",
                "param_2": "flag_value",
                "param_3": "flag_bit",
                "PTR_": "",
                "DAT_": "",
                "*": "",
                "|": "bitwise OR",
                "&": "bitwise AND"
            },
            "code": "void update_flag_00081034(uint32_t *flag_address, uint32_t flag_value, uint32_t flag_bit)\n{\n    uint32_t *flag_ptr = flag_address + 1;\n    uint32_t current_flag_value = *flag_ptr;\n    uint32_t modified_flag_value = current_flag_value | flag_value | ((flag_bit & 1) << 7);\n    *flag_ptr = modified_flag_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081034",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "update_flag_00081034"
        },
        "FUN_00083c0c": {
            "renaming": {
                "FUN_00083c0c": "do_nothing_00083c0c"
            },
            "code": "\nvoid do_nothing_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c0c",
            "calling": [
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c0c"
        },
        "FUN_00083974": {
            "renaming": {
                "FUN_00083974": "add_data_to_list_00083974",
                "param_1": "input_data",
                "puVar1": "data_pointer",
                "puVar2": "list_pointer",
                "iVar3": "list_length",
                "iVar4": "list_capacity"
            },
            "code": "undefined4 add_data_to_list_00083974(undefined4 input_data)\n{\n    undefined* data_pointer;\n    undefined4* list_pointer;\n    int list_length;\n    int list_capacity;\n    \n    data_pointer = PTR_DAT_00083984;\n    if (DAT_00083980 == 0) {\n        return input_data;\n    }\n    \n    list_capacity = *(int*)PTR_DAT_0008396c;\n    list_pointer = *(undefined4**)(list_capacity + 0x148);\n    if (list_pointer == (undefined4*)0x0) {\n        list_pointer = (undefined4*)(list_capacity + 0x14c);\n        *(undefined4**)(list_capacity + 0x148) = list_pointer;\n    }\n    \n    list_length = list_pointer[1];\n    if (0x1f < list_length) {\n        if ((DAT_00083970 == 0) || (list_pointer = (undefined4*)execute_function_with_data_pointer_and_argument_00081df4(400), list_pointer == (undefined4*)0x0)) {\n            return 0xffffffff;\n        }\n        \n        *list_pointer = *(undefined4*)(list_capacity + 0x148);\n        list_pointer[1] = 0;\n        list_length = 0;\n        *(undefined4**)(list_capacity + 0x148) = list_pointer;\n        list_pointer[0x62] = 0;\n        list_pointer[99] = 0;\n    }\n    \n    list_pointer[1] = list_length + 1;\n    list_pointer[list_length + 2] = data_pointer;\n    return 0;\n}",
            "called": [
                "FUN_00081df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083974",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "add_data_to_list_00083974"
        },
        "FUN_00084700": {
            "renaming": {
                "FUN_00084700": "get_default_value_or_use_default_00084700",
                "param_1": "output_value",
                "param_2": "input_1",
                "param_3": "input_2",
                "param_4": "input_3",
                "puVar1": "default_value_ptr",
                "iVar2": "default_value"
            },
            "code": "void get_default_value_or_use_default_00084700(int *output_value, undefined4 input_1, undefined4 input_2, undefined4 input_3) {\n    undefined *default_value_ptr;\n    int default_value;\n    \n    default_value_ptr = PTR_DAT_00084724;\n    *(undefined4 *)PTR_DAT_00084724 = 0;\n    default_value = get_default_value_000811c2(input_1, input_2, input_3);\n    if (default_value == -1 && *(int *)default_value_ptr != 0) {\n        *output_value = *(int *)default_value_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_000811c2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084700",
            "calling": [
                "FUN_00084464",
                "FUN_0008449c"
            ],
            "imported": false,
            "current_name": "get_default_value_or_use_default_00084700"
        },
        "thunk_FUN_00081714": {
            "renaming": {
                "thunk_FUN_00081714": "get_value_from_pointer_thunk_00081714",
                "PTR_DAT_0008171c": "PTR_DATA",
                "undefined4": "int"
            },
            "code": "int get_value_from_pointer_thunk_00081714() {\n    int *pointer_to_value = (int *)PTR_DAT_0008171c;\n    return *pointer_to_value;\n}",
            "called": [
                "FUN_00081714"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081208",
            "calling": [
                "FUN_00080258",
                "FUN_000804a8",
                "FUN_0008043e",
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_thunk_00081714"
        },
        "FUN_00081ca8": {
            "renaming": {
                "FUN_00081ca8": "check_concatenation_result_00081ca8",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_nonzero",
                "concatenate_00081c54": "concatenate_strings"
            },
            "code": "bool check_concatenation_result_00081ca8(void)\n{\n  bool is_CY_zero = (bool)in_CY;\n  bool is_ZR_nonzero = (bool)in_ZR;\n  concatenate_strings();\n  return !is_CY_zero || is_ZR_nonzero;\n}",
            "called": [
                "FUN_00081c54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081ca8",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "check_concatenation_result_00081ca8"
        },
        "FUN_00081318": {
            "renaming": {
                "FUN_00081318": "process_input_00081318",
                "param_1": "input_index",
                "param_2": "input_value",
                "param_3": "input_param",
                "puVar1": "input_array",
                "puVar2": "input_flags",
                "iVar3": "bit_check",
                "uVar4": "input_int2",
                "iVar5": "input_int1"
            },
            "code": "void process_input_00081318(int input_index, int input_value, int input_param) {\n  \n  int* input_array = PTR_DAT_00081380;\n  int* input_flags = PTR_DAT_00081384;\n  \n  if (input_array[input_index * 0x1c + 0xc] != 0) {\n    if ((input_flags[input_index] & 0xf) == 5) {\n      process_input_00081318_00081210(input_index, 1, input_param, 5, input_index, input_value, input_param);\n    }\n    input_flags[input_index] = input_flags[input_index] & 0xf | (byte)(input_value << 4);\n    int input_int1 = *(int *)(input_array + input_index * 0x1c);\n    int input_int2 = *(int *)(input_array + input_index * 0x1c + 4);\n    int bit_check = check_bit_00080e04(input_int1, input_int2);\n    if (bit_check == 0) {\n      if (input_value != 0) {\n        *(int *)(input_int1 + 100) = input_int2;\n        return;\n      }\n      *(int *)(input_int1 + 0x60) = input_int2;\n      return;\n    }\n    update_values_00080d7a(input_int1, input_int2, input_value, 0, 1);\n  }\n  return;\n}",
            "called": [
                "FUN_00081210",
                "FUN_00080e04",
                "FUN_00080d7a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081318",
            "calling": [
                "FUN_00080ae4",
                "FUN_00080258",
                "FUN_000801b0",
                "FUN_000804a8",
                "FUN_00080164"
            ],
            "imported": false,
            "current_name": "process_input_00081318"
        },
        "FUN_00081714": {
            "renaming": {
                "FUN_00081714": "get_pointer_value_from_dat_section_00081714",
                "PTR_DAT_0008171c": "pointer_to_dat_section"
            },
            "code": "get_pointer_value_from_dat_section_00081714() {\n  return *(undefined4 *)PTR_DAT_0008171c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081714",
            "calling": [
                "thunk_FUN_00081714"
            ],
            "imported": false,
            "current_name": "get_pointer_value_from_dat_section_00081714"
        },
        "FUN_0008449c": {
            "renaming": {
                "FUN_0008449c": "updateValue_0008449c",
                "param_1": "value",
                "param_2": "ptr",
                "iVar1": "defaultValue",
                "uVar2": "mask"
            },
            "code": "void updateValue_0008449c(int value, int* ptr){\n  int defaultValue = get_default_value_or_use_default(ptr, (int)*(short *)(ptr + 0xe));\n  ushort mask = 0xefff;\n  if (defaultValue != -1) {\n    *(int *)(ptr + 0x50) = defaultValue;\n    mask |= 0x1000;\n  }\n  *(ushort *)(ptr + 0xc) &= mask;\n  return;\n}",
            "called": [
                "FUN_00084700"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008449c",
            "calling": [],
            "imported": false,
            "current_name": "updateValue_0008449c"
        },
        "FUN_0008259c": {
            "renaming": {
                "FUN_0008259c": "do_nothing_0008259c"
            },
            "code": "\nvoid do_nothing_0008259c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008259c",
            "calling": [
                "FUN_00083d00",
                "FUN_000825b0",
                "FUN_00083d9c",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "do_nothing_0008259c"
        },
        "FUN_0008477c": {
            "renaming": {
                "FUN_0008477c": "calculate_difference_0008477c",
                "param_1": "minuend",
                "param_2": "subtrahend",
                "param_3": "multiplier_low",
                "param_4": "multiplier_high",
                "param_5": "difference",
                "uVar1": "subtractor",
                "lVar2": "product"
            },
            "code": "void calculate_difference_0008477c(uint32_t minuend, int32_t subtrahend, uint32_t multiplier_low, uint32_t multiplier_high, int32_t *difference)\n{\n  uint64_t product = FUNC_000847e0();\n  product *= (uint64_t)multiplier_high << 32 | multiplier_low;\n  uint32_t subtractor = (uint32_t)product;\n  difference[0] = minuend - subtractor;\n  difference[1] = subtrahend - (int32_t)(product >> 32) - (minuend < subtractor);\n  return;\n}",
            "called": [
                "FUN_000847e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008477c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_0008477c"
        },
        "FUN_000801b0": {
            "renaming": {
                "FUN_000801b0": "process_input_000801b0",
                "param_1": "input_buffer",
                "bVar1": "input_overflow",
                "uVar2": "input_char",
                "cVar3": "return_value",
                "iVar4": "function_result",
                "bVar5": "input_index"
            },
            "code": "int process_input_000801b0(int **input_buffer)\n{\n  bool input_overflow = false;\n  int input_length = *(byte *)((int)input_buffer + 6);\n  if (input_length > 1)\n  {\n    process_input_000801b0_00081318(input_length, 0);\n  }\n  *(undefined *)((int)input_buffer + 0x49) = 0;\n  if (*(byte *)((int)input_buffer + 5) < 4)\n  {\n    while (true)\n    {\n      int function_result = (**(code **)(**input_buffer + 8))();\n      if (function_result == 0)\n      {\n        break;\n      }\n      byte input_index = *(byte *)((int)input_buffer + 0x49);\n      undefined input_char = (**(code **)(**input_buffer + 0xc))();\n      *(undefined *)((int)input_buffer + input_index + 9) = input_char;\n      input_index++;\n      *(byte *)((int)input_buffer + 0x49) = input_index;\n      if (input_index > 0x3f)\n      {\n        input_overflow = true;\n        break;\n      }\n    }\n  }\n  *(short *)(input_buffer + 0x14) = *(short *)(input_buffer + 0x14) + 1;\n  char return_value;\n  if (input_overflow)\n  {\n    *(short *)(input_buffer + 0x15) = *(short *)(input_buffer + 0x15) + 1;\n    return_value = -3;\n  }\n  else\n  {\n    return_value = *(char *)((int)input_buffer + 0x49);\n  }\n  return (int)return_value;\n}",
            "called": [
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801b0",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "process_input_000801b0"
        },
        "FUN_000813c2": {
            "renaming": {
                "FUN_000813c2": "update_buffer_000813c2",
                "param_1": "buffer_address",
                "param_2": "new_value",
                "uVar1": "updated_index"
            },
            "code": "void update_buffer_000813c2(int buffer_address, undefined new_value)\n{\n  uint updated_index;\n  updated_index = *(int *)(buffer_address + 0x80) + 1U & 0x7f;\n  if (updated_index != *(uint *)(buffer_address + 0x84)) {\n    *(undefined *)(buffer_address + *(int *)(buffer_address + 0x80)) = new_value;\n    *(uint *)(buffer_address + 0x80) = updated_index;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813c2",
            "calling": [],
            "imported": false,
            "current_name": "update_buffer_000813c2"
        },
        "FUN_000814e4": {
            "renaming": {
                "FUN_000814e4": "initialize_array_000814e4",
                "param_1": "array",
                "param_2": "size",
                "param_3": "value",
                "param_4": "param_4",
                "param_5": "param_5",
                "param_6": "param_6",
                "puVar1": "ptr"
            },
            "code": "void initialize_array_000814e4(undefined4 *array, undefined4 size, undefined value, undefined4 param_4, undefined4 param_5, undefined4 param_6)\n{\n  undefined *ptr;\n  array[0] = PTR_PTR_FUN_00081454_1_00081504;\n  array[1] = 0;\n  array[2] = 1000;\n  array[3] = size;\n  array[4] = param_4;\n  array[5] = param_5;\n  array[6] = value;\n  array[7] = param_6;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814e4",
            "calling": [
                "FUN_000815d4",
                "FUN_00080c0c"
            ],
            "imported": false,
            "current_name": "initialize_array_000814e4"
        },
        "FUN_00080d54": {
            "renaming": {
                "FUN_00080d54": "update_data_00080d54",
                "param_1": "data",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "is_negative",
                "PTR_": "data_",
                "DAT_": "value_"
            },
            "code": "void update_data_00080d54(uint32_t* data, uint32_t value, uint32_t flags) {\n  bool is_negative = (int)(flags << 0x1f) < 0;\n  data[0x11] = value;\n  if (is_negative) {\n    data[0x19] = value;\n  }\n  if (!is_negative) {\n    data[0x18] = value;\n  }\n  bool is_bit_set = (flags & 10) != 0;\n  if (is_bit_set) {\n    data[8] = value;\n  }\n  if (!is_bit_set) {\n    data[9] = value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    data[0x20] = value;\n  }\n  data[5] = value;\n  *data = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d54",
            "calling": [
                "FUN_00080da0"
            ],
            "imported": false,
            "current_name": "update_data_00080d54"
        },
        "FUN_0008021c": {
            "renaming": {
                "FUN_0008021c": "calculate_crc_0008021c",
                "param_1": "start_index",
                "param_2": "length",
                "iVar1": "current_index",
                "uVar2": "crc",
                "cVar3": "bit_index",
                "uVar4": "bit"
            },
            "code": "uint calculate_crc_0008021c(int start_index, uint length)\n{\n  int current_index;\n  uint crc = 0xffff;\n  for (current_index = start_index; (current_index - start_index & 0xffU) < length; current_index = current_index + 1) {\n    crc = crc ^ *(byte *)(current_index + 9);\n    char bit_index = 8;\n    do {\n      uint bit = crc & 1;\n      crc = crc >> 1;\n      if (bit != 0) {\n        crc = crc ^ 0xa001;\n      }\n      bit_index = bit_index - 1;\n    } while (bit_index != 0);\n  }\n  return (crc & 0xff) << 8 | crc >> 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008021c",
            "calling": [
                "FUN_00080258"
            ],
            "imported": false,
            "current_name": "calculate_crc_0008021c"
        },
        "FUN_00082b38": {
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_00082b38(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********ppppppppbVar29;\n  bool bVar30;\n  longlong lVar31;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar11 = validate_and_modify_data_00083808(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)process_data_and_return_result_0008378c(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082b9e:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082bee;\n        }\n        iVar11 = process_input_and_return_result_00082ac0(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082bee:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar30 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082c12:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        ppppppppbVar29 = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar30 << 6, bVar30 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar30 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_000830ec;\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      ppppppppbVar29 = (byte ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar27 < 0) {\n        bVar30 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar30);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar30 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar30) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      ppppppppbVar29 = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppbVar29 != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)count_bytes_until_null_00082a50(ppppppppbVar29);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)find_char_in_buffer_00084384(ppppppppbVar29,0,local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppbVar29 = (byte ********)PTR_s__null__00083784;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082d78:\n    lVar31 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      ppppppppbVar29 = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082da0;\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          ppppppppbVar29 = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar31 >> 0x20);\n          cVar13 = '\\n';\n          calculate_difference_00084750((int)lVar31,uVar28,10,0);\n          *(char *)ppppppppbVar29 = cVar13 + '0';\n          lVar31 = calculate_difference_00084750((int)lVar31,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n        } while (lVar31 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar23 + '0';\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_0008337e;\n    do {\n      ppppppppbVar29 = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)ppppppppbVar29 = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (byte *******)0x0) {\n    process_input_and_return_result_00082ac0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    ppppppppbVar29 = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)ppppppppbVar29 = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    }\n    else {\n      *(undefined *)((int)ppppppppbVar29 + -1) = 0x30;\n      ppppppppbVar29 = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_000830e8;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00083710;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = process_input_and_return_result_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_000833de;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = process_input_and_return_result_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = process_input_and_return_result_00082ac0(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_000833de;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = process_input_and_return_result_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_DAT_0008370c;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_0008348e:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_input_and_return_result_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_000834b4:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = process_input_and_return_result_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_DAT_000833c8;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_000832c6:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)ppppppppbVar29;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_0008345a;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = process_input_and_return_result_00082ac0(param_1,param_2,&local_9c), iVar11 != 0))\n    goto LAB_000833de;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00083282:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_input_and_return_result_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_000832aa:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = process_input_and_return_result_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])ppppppppbVar29;\nLAB_0008345a:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_000833cc;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_00083788;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_00083316:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_input_and_return_result_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_0008333e:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar11 = process_input_and_return_result_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = process_input_and_return_result_00082ac0(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "called": [
                "FUN_00084384",
                "FUN_00083808",
                "FUN_0008378c",
                "FUN_00083b14",
                "FUN_00084750",
                "FUN_00082ac0",
                "FUN_00082a50"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082b38",
            "calling": [
                "FUN_0008378c"
            ],
            "imported": false,
            "current_name": "FUNC_00082b38"
        },
        "FUN_00081e04": {
            "renaming": {
                "FUN_00081e04": "allocate_memory_block_00081e04",
                "param_1": "size",
                "*DAT_00081e10": "ptr"
            },
            "code": "void allocate_memory_block_00081e04(void* *DAT_00081e10, int size)\n{\n  allocate_memory_block_00081e04_00083d9c(**DAT_00081e10, size);\n  return;\n}",
            "called": [
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e04",
            "calling": [
                "FUN_000815fe",
                "FUN_0008160c"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00081e04"
        },
        "FUN_00084750": {
            "renaming": {
                "FUN_00084750": "calculate_difference_00084750",
                "param_1": "first_number",
                "param_2": "second_number",
                "param_3": "third_number",
                "param_4": "fourth_number",
                "iVar1": "result"
            },
            "code": "int calculate_difference_00084750(int first_number, int second_number, int third_number, int fourth_number)\n{\n  int result;\n  if ((fourth_number == 0) && (third_number == 0)) {\n    if (second_number != 0 || first_number != 0) {\n      first_number = -1;\n    }\n    return first_number;\n  }\n  result = calculate_difference_00084750_000847ac();\n  return result;\n}",
            "called": [
                "FUN_000847ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084750",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "calculate_difference_00084750"
        },
        "FUN_00080ae4": {
            "renaming": {
                "FUN_00080ae4": "initialize_and_process_data_00080ae4",
                "puVar1": "data_ptr",
                "puVar2": "ptr_to_data",
                "iVar3": "i",
                "iVar4": "j",
                "iVar5": "k",
                "iVar6": "l",
                "iVar7": "m",
                "iVar8": "n",
                "initialize_memory_00080e9c": "initialize_memory",
                "execute_functions_00081d7c": "execute_functions",
                "process_input_00081318": "process_input",
                "process_data_00080da0": "process_data",
                "check_input_00080e18": "check_input",
                "find_value_at_index_00080f9c": "find_value_at_index",
                "set_bits_in_memory_00081042": "set_bits_in_memory",
                "update_flag_00081034": "update_flag",
                "set_parameter_0008106e": "set_parameter",
                "set_default_value_00081066": "set_default_value",
                "DAT_00080be8": "data_array",
                "DAT_00080bec": "data_array_2",
                "DAT_00080bf0": "data_array_3",
                "DAT_00080bf4": "data_array_7",
                "DAT_00080bf8": "data_array_6",
                "DAT_00080bfc": "data_array_5",
                "DAT_00080c00": "data_array_4",
                "DAT_00080c04": "data_array_9",
                "DAT_00080c08": "data_array_8"
            },
            "code": "void initialize_and_process_data_00080ae4()\n{\n  uint *data_ptr;\n  undefined4 *ptr_to_data;\n  int i;\n  int j;\n  int k;\n  int l;\n  int m;\n  int n;\n  \n  data_ptr = DAT_00080be8;\n  initialize_memory();\n  ptr_to_data = DAT_00080bec;\n  DAT_00080bec[1] = *data_ptr / 1000 - 1;\n  *(undefined *)(DAT_00080bf0 + 0x23) = 0xf0;\n  ptr_to_data[2] = 0;\n  *ptr_to_data = 7;\n  execute_functions();\n  n = 0;\n  do {\n    m = n + 1;\n    process_input(n, 0);\n    l = DAT_00080c00;\n    k = DAT_00080bfc;\n    j = DAT_00080bf8;\n    i = DAT_00080bf4;\n    n = m;\n  } while (m != 0x4f);\n  *(undefined4 *)(i + 0xa0) = 0xffffffff;\n  *(undefined4 *)(j + 0xa0) = 0xffffffff;\n  *(undefined4 *)(k + 0xa0) = 0xffffffff;\n  *(undefined4 *)(l + 0xa0) = 0xffffffff;\n  process_data(i, 1, 0x300, 0);\n  process_input(0, 1);\n  process_data(i, 1, 0xc00, 0);\n  process_data(i, 1, 0x3000, 0);\n  process_data(k, 2, 0x30, 0);\n  process_data(l, 1, 0xc00, 0);\n  process_data(i, 1, 3, 0);\n  process_data(l, 1, 0xc000, 0);\n  check_input(0x25);\n  find_value_at_index(DAT_00080c08, *data_ptr, DAT_00080c04, 0xc);\n  set_bits_in_memory(DAT_00080c08, 0, 0x300000, 1);\n  update_flag(DAT_00080c08, 0, 0);\n  set_parameter(DAT_00080c08, 0xffffffff);\n  set_default_value(DAT_00080c08);\n  return;\n}\n",
            "called": [
                "FUN_00081034",
                "FUN_00080f9c",
                "FUN_00080da0",
                "FUN_00081042",
                "FUN_0008106e",
                "FUN_00080e18",
                "FUN_00081318",
                "FUN_00080e9c",
                "FUN_00081d7c",
                "FUN_00081066"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ae4",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "initialize_and_process_data_00080ae4"
        },
        "FUN_00081d5c": {
            "renaming": {
                "FUN_00081d5c": "add_to_buffer_00081d5c",
                "param_1": "val1",
                "param_2": "val2",
                "param_3": "val3",
                "puVar1": "buffer_start",
                "uVar2": "buffer_index",
                "uVar4": "buffer_mask",
                "PTR_DAT_0008396c": "BUFFER_START_PTR",
                "DAT_00083970": "BUFFER_START_OFFSET"
            },
            "code": "int add_to_buffer_00081d5c(int val1, int val2, int val3) {\n\tint* buffer_start = *(int **)buffer_ptr;\n\tif (buffer_start == NULL) {\n\t\tbuffer_start = (int *)(*(int *)PTR_DAT_0008396c + DAT_00083970);\n\t\t*(int **)buffer_ptr = buffer_start;\n\t}\n\tuint32_t buffer_index = buffer_start[1];\n\tif (buffer_index > 31) {\n\t\tif ((DAT_00083970 == 0) || ((buffer_start = (int*)allocate_buffer(400)) == NULL)) {\n\t\t\treturn -1;\n\t\t}\n\t\t*buffer_start = *(int **)buffer_ptr;\n\t\tbuffer_start[1] = 0;\n\t\tbuffer_index = 0;\n\t\t*(int **)buffer_ptr = buffer_start;\n\t\tbuffer_start[0x62] = 0;\n\t\tbuffer_start[99] = 0;\n\t}\n\tuint32_t buffer_mask = 1 << (buffer_index & 0xff);\n\tbuffer_start[buffer_index + 0x22] = val1;\n\tbuffer_start[0x62] |= buffer_mask;\n\tbuffer_start[buffer_index + 0x42] = val3;\n\tbuffer_start[99] |= buffer_mask;\n\tbuffer_start[1] = buffer_index + 1;\n\tbuffer_start[buffer_index + 2] = val2;\n\treturn 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d5c",
            "calling": [
                "FUN_00080a68"
            ],
            "imported": false,
            "current_name": "add_to_buffer_00081d5c"
        },
        "FUN_00082970": {
            "renaming": {
                "FUN_00082970": "calculate_sum_and_set_if_valid_00082970",
                "param_1": "result",
                "param_2": "input",
                "puVar1": "data_pointer",
                "iVar2": "sum"
            },
            "code": "void calculate_sum_and_set_if_valid_00082970(int* result, undefined4 input)\n{\n  undefined* data_pointer;\n  int sum;\n  data_pointer = PTR_DAT_00082990;\n  *(int*)PTR_DAT_00082990 = 0;\n  sum = calculate_sum(input);\n  if (sum != -1 && *(int*)data_pointer == 0)\n  {\n    return;\n  }\n  *result = *(int*)data_pointer;\n  return;\n}",
            "called": [
                "FUN_0008118c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082970",
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "calculate_sum_and_set_if_valid_00082970"
        },
        "FUN_000811be": {
            "renaming": {
                "FUN_000811be": "get_one_000811be",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int get_one_000811be()\n{\n    int result = 1;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811be",
            "calling": [
                "FUN_000846dc"
            ],
            "imported": false,
            "current_name": "get_one_000811be"
        },
        "FUN_00084a80": {
            "renaming": {
                "FUN_00084a80": "FUNC_00084a80"
            },
            "code": "\nundefined8 FUNC_00084a80(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084a80",
            "calling": [
                "FUN_000847ac"
            ],
            "imported": false,
            "current_name": "FUNC_00084a80"
        },
        "FUN_00081c54": {
            "renaming": {
                "FUN_00081c54": "concatenate_00081c54",
                "param_1": "dest",
                "param_2": "src",
                "concatenate_two_uint32_t_00081c5c": "concatenate",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void concatenate_00081c54(uint32_t* dest, uint32_t* src)\n{\n    *dest = (*dest << 32) | *src;\n}\n",
            "called": [
                "FUN_00081c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c54",
            "calling": [
                "FUN_00081ca8"
            ],
            "imported": false,
            "current_name": "concatenate_00081c54"
        },
        "FUN_0008163a": {
            "renaming": {
                "FUN_0008163a": "checkAndUpdateParams_0008163a",
                "param_1": "params",
                "param_2": "paramLimit",
                "iVar1": "checkResult"
            },
            "code": "int checkAndUpdateParams_0008163a(int *params, uint paramLimit)\n{\n  int checkResult;\n\n  if ((params[0] == 0) || ((uint)params[1] < paramLimit)) {\n    checkResult = check_and_update_params_00081622(params);\n    if (checkResult == 0) {\n      return 0;\n    }\n    if (params[2] == 0) {\n      *(undefined *)*params = 0;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_00081622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008163a",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "checkAndUpdateParams_0008163a"
        },
        "FUN_000825a0": {
            "renaming": {
                "FUN_000825a0": "call_function_with_params_000825a0",
                "param_1": "param1",
                "param_2": "param2",
                "FUNC_000825b0": "function_ptr",
                "*DAT_000825ac": "function_ptr"
            },
            "code": "void call_function_with_params_000825a0(int* *DAT_000825ac, int param1, int param2)\n{\n  (**DAT_000825ac)(param1, param2);\n  return;\n}",
            "called": [
                "FUN_000825b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825a0",
            "calling": [
                "FUN_00081622"
            ],
            "imported": false,
            "current_name": "call_function_with_params_000825a0"
        },
        "FUN_000815d4": {
            "renaming": {
                "FUN_000815d4": "write_data_to_buffer_000815d4",
                "param_1": "buffer",
                "param_2": "data",
                "initialize_array_000814e4": "initialize_array",
                "*param_1": "*buffer",
                "PTR_PTR_write_data_to_buffer_00081454_1_000815f4": "write_data_to_buffer_func_ptr",
                "param_1[9]": "buffer[9]"
            },
            "code": "undefined4* write_data_to_buffer_000815d4(undefined4* buffer, undefined4 data){\n    initialize_array();\n    *buffer = PTR_PTR_write_data_to_buffer_000815d4_00081454_1_000815f4;\n    buffer[9] = data;\n    return buffer;\n}",
            "called": [
                "FUN_000814e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815d4",
            "calling": [
                "FUN_00080c0c"
            ],
            "imported": false,
            "current_name": "write_data_to_buffer_000815d4"
        },
        "FUN_00081e14": {
            "renaming": {
                "FUN_00081e14": "FUNC_00081e14"
            },
            "code": "\nint * FUNC_00081e14(undefined4 *param_1,uint param_2)\n\n{\n  uint uVar1;\n  uint *puVar2;\n  undefined *puVar3;\n  int iVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  int iVar9;\n  int *piVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  int *piVar14;\n  uint uVar15;\n  int *piVar16;\n  uint uVar17;\n  uint uVar18;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081e7a;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081e7a:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  do_nothing_00082598(param_1);\n  uVar1 = DAT_00082140;\n  if (uVar15 < 0x1f8) {\n    iVar13 = *(int *)(DAT_00082140 + uVar15 + 0xc);\n    if ((iVar13 != DAT_00082140 + uVar15) ||\n       (iVar4 = iVar13 + 8, iVar13 = *(int *)(iVar13 + 0x14), iVar4 != iVar13)) {\n      iVar7 = *(int *)(iVar13 + 0xc);\n      iVar9 = (*(uint *)(iVar13 + 4) & 0xfffffffc) + iVar13;\n      uVar15 = *(uint *)(iVar9 + 4);\n      iVar4 = *(int *)(iVar13 + 8);\n      *(int *)(iVar4 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar9 + 4) = uVar15 | 1;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    uVar18 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar18 = uVar15 >> 9;\n    if (uVar18 == 0) {\n      iVar4 = 0x7e;\n      iVar13 = 0x3f;\n    }\n    else if (uVar18 < 5) {\n      iVar13 = (uVar15 >> 6) + 0x38;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x15) {\n      iVar13 = uVar18 + 0x5b;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x55) {\n      iVar13 = (uVar15 >> 0xc) + 0x6e;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x155) {\n      iVar13 = (uVar15 >> 0xf) + 0x77;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x555) {\n      iVar13 = (uVar15 >> 0x12) + 0x7c;\n      iVar4 = iVar13 * 2;\n    }\n    else {\n      iVar4 = 0xfc;\n      iVar13 = 0x7e;\n    }\n    iVar7 = DAT_00082140 + iVar4 * 4;\n    for (iVar4 = *(int *)(iVar7 + 0xc); iVar7 != iVar4; iVar4 = *(int *)(iVar4 + 0xc)) {\n      uVar18 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n      iVar9 = uVar18 - uVar15;\n      if (0xf < iVar9) {\n        iVar13 = iVar13 + -1;\n        break;\n      }\n      if (-1 < iVar9) {\n        iVar7 = uVar18 + iVar4;\n        uVar15 = *(uint *)(iVar7 + 4);\n        iVar9 = *(int *)(iVar4 + 0xc);\n        iVar13 = *(int *)(iVar4 + 8);\n        *(int *)(iVar13 + 0xc) = iVar9;\n        *(int *)(iVar9 + 8) = iVar13;\n        *(uint *)(iVar7 + 4) = uVar15 | 1;\n        do_nothing_0008259c(param_1);\n        return (int *)(iVar4 + 8);\n      }\n    }\n    uVar18 = iVar13 + 1;\n  }\n  iVar13 = *(int *)(DAT_00082140 + 0x10);\n  iVar4 = DAT_00082140 + 8;\n  if (iVar13 == iVar4) {\n    uVar5 = *(uint *)(DAT_00082140 + 4);\n  }\n  else {\n    uVar5 = *(uint *)(iVar13 + 4);\n    uVar6 = uVar5 & 0xfffffffc;\n    uVar8 = uVar6 - uVar15;\n    if (0xf < (int)uVar8) {\n      iVar7 = uVar15 + iVar13;\n      *(uint *)(iVar13 + 4) = uVar15 | 1;\n      *(int *)(uVar1 + 0x14) = iVar7;\n      *(int *)(uVar1 + 0x10) = iVar7;\n      *(int *)(iVar7 + 0xc) = iVar4;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar7 + 4) = uVar8 | 1;\n      *(uint *)(iVar7 + uVar8) = uVar8;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    *(int *)(DAT_00082140 + 0x14) = iVar4;\n    *(int *)(uVar1 + 0x10) = iVar4;\n    if (-1 < (int)uVar8) {\n      *(uint *)(uVar6 + iVar13 + 4) = *(uint *)(uVar6 + iVar13 + 4) | 1;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    if (uVar6 < 0x200) {\n      iVar9 = uVar1 + (uVar5 & 0xfffffff8);\n      iVar7 = *(int *)(iVar9 + 8);\n      uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(uVar1 + 4);\n      *(int *)(iVar13 + 8) = iVar7;\n      *(int *)(iVar13 + 0xc) = iVar9;\n      *(uint *)(uVar1 + 4) = uVar5;\n      *(int *)(iVar9 + 8) = iVar13;\n      *(int *)(iVar7 + 0xc) = iVar13;\n    }\n    else {\n      uVar8 = uVar5 >> 9;\n      if (uVar8 < 5) {\n        iVar9 = (uVar5 >> 6) + 0x38;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x15) {\n        iVar9 = uVar8 + 0x5b;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x55) {\n        iVar9 = (uVar5 >> 0xc) + 0x6e;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x155) {\n        iVar9 = (uVar5 >> 0xf) + 0x77;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x555) {\n        iVar9 = (uVar5 >> 0x12) + 0x7c;\n        iVar7 = iVar9 * 2;\n      }\n      else {\n        iVar7 = 0xfc;\n        iVar9 = 0x7e;\n      }\n      iVar7 = uVar1 + iVar7 * 4;\n      iVar12 = *(int *)(iVar7 + 8);\n      if (iVar12 == iVar7) {\n        uVar5 = *(uint *)(DAT_00082348 + 4) | 1 << (iVar9 >> 2 & 0xffU);\n        *(uint *)(DAT_00082348 + 4) = uVar5;\n        iVar9 = iVar12;\n      }\n      else {\n        do {\n          iVar9 = iVar12;\n          if ((*(uint *)(iVar12 + 4) & 0xfffffffc) <= uVar6) break;\n          iVar12 = *(int *)(iVar12 + 8);\n          iVar9 = iVar12;\n        } while (iVar7 != iVar12);\n        iVar12 = *(int *)(iVar9 + 0xc);\n        uVar5 = *(uint *)(uVar1 + 4);\n      }\n      *(int *)(iVar13 + 0xc) = iVar12;\n      *(int *)(iVar13 + 8) = iVar9;\n      *(int *)(iVar12 + 8) = iVar13;\n      *(int *)(iVar9 + 0xc) = iVar13;\n    }\n  }\n  uVar6 = 1 << ((int)uVar18 >> 2 & 0xffU);\n  if (uVar6 <= uVar5) {\n    if ((uVar5 & uVar6) == 0) {\n      uVar18 = uVar18 & 0xfffffffc;\n      do {\n        uVar6 = uVar6 << 1;\n        uVar18 = uVar18 + 4;\n      } while ((uVar5 & uVar6) == 0);\n    }\n    do {\n      piVar16 = (int *)(uVar1 + uVar18 * 8);\n      piVar14 = piVar16;\n      uVar5 = uVar18;\n      do {\n        for (piVar10 = (int *)piVar14[3]; piVar14 != piVar10; piVar10 = (int *)piVar10[3]) {\n          uVar8 = piVar10[1] & 0xfffffffc;\n          uVar17 = uVar8 - uVar15;\n          if (0xf < (int)uVar17) {\n            iVar9 = piVar10[2];\n            iVar13 = piVar10[3];\n            iVar7 = uVar15 + (int)piVar10;\n            piVar10[1] = uVar15 | 1;\n            *(int *)(iVar9 + 0xc) = iVar13;\n            *(int *)(iVar13 + 8) = iVar9;\n            *(int *)(uVar1 + 0x14) = iVar7;\n            *(int *)(uVar1 + 0x10) = iVar7;\n            *(int *)(iVar7 + 0xc) = iVar4;\n            *(int *)(iVar7 + 8) = iVar4;\n            *(uint *)(iVar7 + 4) = uVar17 | 1;\n            *(uint *)(iVar7 + uVar17) = uVar17;\n            do_nothing_0008259c(param_1);\n            return piVar10 + 2;\n          }\n          if (-1 < (int)uVar17) {\n            iVar13 = piVar10[2];\n            iVar4 = piVar10[3];\n            *(uint *)((int)piVar10 + uVar8 + 4) = *(uint *)((int)piVar10 + uVar8 + 4) | 1;\n            *(int *)(iVar13 + 0xc) = iVar4;\n            *(int *)(iVar4 + 8) = iVar13;\n            do_nothing_0008259c(param_1);\n            return piVar10 + 2;\n          }\n        }\n        uVar5 = uVar5 + 1;\n        piVar14 = piVar14 + 2;\n      } while ((uVar5 & 3) != 0);\n      do {\n        uVar8 = uVar18 & 3;\n        piVar14 = piVar16 + -2;\n        uVar18 = uVar18 - 1;\n        if (uVar8 == 0) {\n          uVar8 = *(uint *)(uVar1 + 4) & ~uVar6;\n          *(uint *)(uVar1 + 4) = uVar8;\n          goto LAB_00082262;\n        }\n        piVar16 = (int *)*piVar16;\n      } while (piVar16 == piVar14);\n      uVar8 = *(uint *)(uVar1 + 4);\nLAB_00082262:\n      uVar6 = uVar6 * 2;\n      if ((uVar8 <= uVar6 && uVar6 - uVar8 != 0) || (uVar18 = uVar5, uVar6 == 0)) break;\n      for (; (uVar8 & uVar6) == 0; uVar6 = uVar6 << 1) {\n        uVar18 = uVar18 + 4;\n      }\n    } while( true );\n  }\n  puVar2 = DAT_00082148;\n  uVar18 = *(uint *)(uVar1 + 8);\n  uVar5 = *(uint *)(uVar18 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar5) && (uVar8 = uVar5 - uVar15, uVar6 = uVar18, 0xf < (int)uVar8))\n  goto LAB_0008211e;\n  uVar8 = uVar18 + uVar5;\n  if (*DAT_00082148 == 0xffffffff) {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00082144 + 0x10;\n  }\n  else {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00082144 + 0x100f & 0xfffff000;\n  }\n  uVar6 = calculate_sum_and_set_if_valid_00082970(param_1,uVar17);\n  puVar3 = PTR_DAT_00082154;\n  if ((uVar6 == 0xffffffff) || ((uVar6 < uVar8 && (uVar18 != uVar1)))) {\n    uVar6 = *(uint *)(uVar1 + 8);\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar11 = *(int *)PTR_DAT_00082154 + uVar17;\n    *(uint *)PTR_DAT_00082154 = uVar11;\n    if ((uVar8 == uVar6) && ((uVar8 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(uVar1 + 8) + 4) = uVar17 + uVar5 | 1;\n    }\n    else {\n      if (*puVar2 == 0xffffffff) {\n        *DAT_00082148 = uVar6;\n      }\n      else {\n        *(uint *)puVar3 = uVar11 + (uVar6 - uVar8);\n      }\n      uVar8 = uVar6 & 7;\n      if (uVar8 == 0) {\n        iVar13 = 0x1000;\n      }\n      else {\n        uVar6 = uVar6 + (8 - uVar8);\n        iVar13 = 0x1008 - uVar8;\n      }\n      iVar13 = iVar13 - (uVar17 + uVar6 & 0xfff);\n      iVar4 = calculate_sum_and_set_if_valid_00082970(param_1,iVar13);\n      if (iVar4 == -1) {\n        uVar8 = 1;\n        iVar13 = 0;\n      }\n      else {\n        uVar8 = (iVar4 - uVar6) + iVar13 | 1;\n      }\n      uVar11 = *(int *)puVar3 + iVar13;\n      *(uint *)(uVar1 + 8) = uVar6;\n      *(uint *)puVar3 = uVar11;\n      *(uint *)(uVar6 + 4) = uVar8;\n      puVar3 = PTR_DAT_00082154;\n      if (uVar18 != uVar1) {\n        if (uVar5 < 0x10) {\n          *(undefined4 *)(uVar6 + 4) = 1;\n          uVar18 = 0;\n          goto LAB_00082108;\n        }\n        uVar5 = uVar5 - 0xc & 0xfffffff8;\n        *(uint *)(uVar18 + 4) = uVar5 | *(uint *)(uVar18 + 4) & 1;\n        *(undefined4 *)(uVar18 + uVar5 + 4) = 5;\n        *(undefined4 *)(uVar18 + uVar5 + 8) = 5;\n        if (0xf < uVar5) {\n          allocate_memory_block_00083d9c(param_1,uVar18 + 8);\n          uVar11 = *(uint *)puVar3;\n        }\n      }\n    }\n    uVar6 = *(uint *)(uVar1 + 8);\n    if (*(uint *)PTR_DAT_0008214c < uVar11) {\n      *(uint *)PTR_DAT_0008214c = uVar11;\n    }\n    if (*(uint *)PTR_DAT_00082150 < uVar11) {\n      *(uint *)PTR_DAT_00082150 = uVar11;\n    }\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\nLAB_00082108:\n  uVar8 = uVar18 - uVar15;\n  if ((uVar18 < uVar15) || ((int)uVar8 < 0x10)) {\n    do_nothing_0008259c(param_1);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  *(uint *)(uVar6 + 4) = uVar15 | 1;\n  *(uint *)(uVar1 + 8) = uVar15 + uVar6;\n  *(uint *)(uVar15 + uVar6 + 4) = uVar8 | 1;\n  do_nothing_0008259c(param_1);\n  return (int *)(uVar6 + 8);\n}\n\n",
            "called": [
                "FUN_00082970",
                "FUN_00083d9c",
                "FUN_00082598",
                "FUN_0008259c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081e14",
            "calling": [
                "FUN_00081df4",
                "FUN_000842a4",
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "FUNC_00081e14"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "process_data_00080164",
                "param_1": "data",
                "puVar1": "data_pointer",
                "iVar2": "result"
            },
            "code": "void process_data_00080164(int **data) {\n  undefined *data_pointer;\n  int result;\n  data_pointer = data_pointer_global;\n  *data = (int *)data_pointer_global;\n  (**(code **)(*(int *)data_pointer + 0x18))(data_pointer_global);\n  if (1 < *(byte *)((int)data + 6)) {\n    process_input_00081210(*(byte *)((int)data + 6),1);\n    process_input_00081318(*(undefined *)((int)data + 6),0);\n  }\n  do {\n    result = (**(code **)(**data + 0xc))();\n  } while (-1 < result);\n  *(undefined *)((int)data + 0x49) = 0;\n  *(undefined *)((int)data + 0x4a) = 0;\n  *(undefined2 *)(data + 0x15) = 0;\n  *(undefined2 *)((int)data + 0x52) = 0;\n  *(undefined2 *)(data + 0x14) = 0;\n  return;\n}",
            "called": [
                "FUN_00081210",
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "FUN_000804a8"
            ],
            "imported": false,
            "current_name": "process_data_00080164"
        },
        "FUN_000811cc": {
            "renaming": {
                "FUN_000811cc": "copy_bytes_000811cc",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "count",
                "iVar1": "i"
            },
            "code": "uint copy_bytes_000811cc(uint8_t* destination, uint8_t* source, uint count) {\n    int i = 0;\n    for (i = 0; i < (int)count; i++) {\n        do {\n        } while (-1 < *(int *)(DAT_000811ec + 0x14) << 0x1e);\n        *(uint *)(DAT_000811ec + 0x1c) = (uint)*(byte *)(source + i);\n    }\n    return count & ~((int)count >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811cc",
            "calling": [
                "FUN_00084464"
            ],
            "imported": false,
            "current_name": "copy_bytes_000811cc"
        },
        "FUN_000846dc": {
            "renaming": {
                "FUN_000846dc": "get_value_000846dc",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "data_pointer",
                "iVar2": "result"
            },
            "code": "void get_value_000846dc(int *output, undefined4 input) {\n    undefined *data_pointer;\n    int result = 0;\n    data_pointer = PTR_DAT_000846fc;\n    *(undefined4 *)PTR_DAT_000846fc = 0;\n    result = get_one(input);\n    if ((result == -1) && (*(int *)data_pointer != 0)) {\n        *output = *(int *)data_pointer;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_000811be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846dc",
            "calling": [
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "get_value_000846dc"
        },
        "FUN_00081894": {
            "renaming": {
                "FUN_00081894": "calculate_00081894",
                "param_1": "number",
                "iVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "iVar3": "multiplier",
                "uVar4": "carry",
                "shifted_number": "shifted_number",
                "sign_extension": "sign_extension",
                "shifted_multiplier": "shifted_multiplier"
            },
            "code": "uint calculate_00081894(uint number)\n{\n  int leading_zeroes = count_leading_zeroes(number);\n  int shift_amount = leading_zeroes - 8;\n  int multiplier = shift_amount * -0x800000 + 0x4a800000;\n\n  if (leading_zeroes > 7) {\n    uint shifted_number = number << (shift_amount & 0xff);\n    uint carry = (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < (0 << (shift_amount & 0xff)));\n    uint result = multiplier + shifted_number + carry;\n    if ((0 << (shift_amount & 0xff)) == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shifted_number = number << (leading_zeroes + 0x18U & 0xff);\n  int sign_extension = (int)shifted_number >> 0x1f;\n  uint shifted_multiplier = multiplier + ((number >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - sign_extension);\n  if ((shifted_number & 0x7fffffff) == 0) {\n    shifted_multiplier = shifted_multiplier & ~(shifted_number >> 0x1f);\n  }\n  return shifted_multiplier;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081894",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "calculate_00081894"
        },
        "FUN_000845bc": {
            "renaming": {
                "FUN_000845bc": "write_byte_or_return_error_000845bc",
                "param_1": "output_buffer",
                "param_2": "byte_to_write",
                "param_3": "buffer_size",
                "*param_1": "*output_buffer",
                "*param_2": "*byte_to_write"
            },
            "code": "int write_byte_or_return_error_000845bc(uint8_t *output_buffer, uint8_t byte_to_write, uint32_t buffer_size) {\n  if (output_buffer == NULL) {\n    return 0;\n  }\n  if (buffer_size < 256) {\n    *output_buffer = byte_to_write;\n    return 1;\n  }\n  *output_buffer = 0x8a;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845bc",
            "calling": [
                "FUN_0008456c"
            ],
            "imported": false,
            "current_name": "write_byte_or_return_error_000845bc"
        },
        "FUN_00085858": {
            "renaming": {
                "FUN_00085858": "do_nothing_00085858"
            },
            "code": "\nvoid do_nothing_00085858(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085858",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "do_nothing_00085858"
        },
        "FUN_00082504": {
            "renaming": {
                "FUN_00082504": "fill_memory_with_value_00082504",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "current_ptr",
                "puVar2": "next_ptr",
                "uVar3": "value_32bit",
                "uVar4": "remaining_size",
                "bVar5": "is_size_zero"
            },
            "code": "void fill_memory_with_value_00082504(uint32_t* memory, uint8_t value, uint32_t size)\n{\n  uint32_t* current_ptr;\n  uint32_t value_32bit;\n  uint32_t remaining_size;\n  bool is_size_zero = (size == 0);\n  if (((uint)memory & 3) != 0) {\n    remaining_size = size - 1;\n    if (is_size_zero) {\n      return;\n    }\n    current_ptr = memory;\n    while(true) {\n      memory = (uint32_t*)((int)current_ptr + 1);\n      *(uint8_t*)current_ptr = value;\n      if (((uint)memory & 3) == 0) break;\n      remaining_size = remaining_size - 1;\n      if (remaining_size == 0) {\n        return;\n      }\n      current_ptr = memory;\n    }\n  }\n  if (3 < size) {\n    value_32bit = (value << 24) | (value << 16) | (value << 8) | value;\n    remaining_size = size;\n    current_ptr = memory;\n    if (0xf < size) {\n      remaining_size = size - 0x10;\n      do {\n        *current_ptr = value_32bit;\n        current_ptr[1] = value_32bit;\n        current_ptr[2] = value_32bit;\n        current_ptr[3] = value_32bit;\n        current_ptr = current_ptr + 4;\n      } while (current_ptr != (uint32_t*)((int)memory + (remaining_size & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      memory = memory + ((remaining_size >> 4) + 1) * 4;\n      remaining_size = size;\n      if (size < 4) {\n        goto END;\n      }\n    }\n    do {\n      remaining_size = remaining_size - 4;\n      *memory = value_32bit;\n      memory = memory + 1;\n    } while (3 < remaining_size);\n    memory = (uint32_t*)((int)current_ptr + (size - 4 & 0xfffffffc) + 4);\n    remaining_size = size & 3;\n  }\n  END:\n  if (remaining_size != 0) {\n    current_ptr = memory;\n    do {\n      uint32_t* next_ptr = (uint32_t*)((int)current_ptr + 1);\n      *(uint8_t*)current_ptr = value;\n      current_ptr = next_ptr;\n    } while (current_ptr != (uint32_t*)(remaining_size + (int)memory));\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082504",
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "imported": false,
            "current_name": "fill_memory_with_value_00082504"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "get_param_if_not_set_000800f4",
                "param_1": "param",
                "*PTR_DAT_0008010c": "is_param_set",
                "DAT_00080110": "is_param_initialized",
                "DAT_00080114": "initialized_param_value"
            },
            "code": "int get_param_if_not_set_000800f4(int param) {\\n  if (**PTR_DAT_0008010c == \"\\0\") {\\n    if (DAT_00080110 != 0) {\\n      param = DAT_00080114;\\n    }\\n    **PTR_DAT_0008010c = 1;\\n  }\\n  return param;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [],
            "imported": false,
            "current_name": "get_param_if_not_set_000800f4"
        },
        "FUN_0008378c": {
            "renaming": {
                "FUN_0008378c": "process_data_and_return_result_0008378c",
                "param_1": "input_data",
                "param_2": "input_data_size",
                "iVar1": "result",
                "iVar2": "processing_result",
                "local_488": "buffer_ptrs",
                "local_480": "buffer_size",
                "local_47c": "flag",
                "local_47a": "short_val",
                "local_478": "buffer_ptr",
                "local_474": "ptr_1",
                "local_470": "ptr_2",
                "local_46c": "ptr_3",
                "local_464": "ptr_4",
                "local_424": "stack_buffer"
            },
            "code": "int process_data_and_return_result_0008378c(void* input_data, int input_data_size)\n{\n  int result = -1;\n  int processing_result;\n  void* buffer_ptrs[2];\n  void* buffer_ptr = NULL;\n  int buffer_size = 1024;\n  unsigned short flag = *(unsigned short*)(input_data + 0xc) & 0xfffd;\n  unsigned int flag_shifted = (unsigned int)flag << 0x19;\n  int ptr_1 = *(int*)(input_data + 100);\n  int ptr_2 = *(int*)(input_data + 0x1c);\n  unsigned short short_val = *(unsigned short*)(input_data + 0xe);\n  int ptr_3 = *(int*)(input_data + 0x24);\n  buffer_ptrs[0] = buffer_ptr;\n  processing_result = process_data(input_data, buffer_ptrs);\n  if (processing_result != 0)\n  {\n    result = -1;\n  }\n  else if (processing_result >= -1)\n  {\n    result = processing_result;\n  }\n  if (flag_shifted < 0)\n  {\n    *(unsigned short*)(input_data + 0xc) = *(unsigned short*)(input_data + 0xc) | 0x40;\n  }\n  return result;\n}",
            "called": [
                "FUN_00083adc",
                "FUN_00082b38"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008378c",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "process_data_and_return_result_0008378c"
        },
        "FUN_00083adc": {
            "renaming": {
                "FUN_00083adc": "process_data_00083adc",
                "param_1": "data_ptr",
                "param_2": "info_ptr",
                "piVar1": "block_ptr",
                "iVar2": "block_size",
                "uVar3": "flags",
                "uVar4": "temp",
                "iVar5": "bytes_processed",
                "pcVar6": "func_ptr",
                "unaff_r4": "result",
                "iVar7": "data_len"
            },
            "code": "undefined4 process_data_00083adc(int *data_ptr, int *info_ptr) {\n  int *block_ptr;\n  int block_size;\n  ushort flags;\n  uint temp;\n  int bytes_processed;\n  code *func_ptr;\n  undefined4 result;\n  int data_len;\n  \n  if ((data_ptr != NULL) && (data_ptr[14] == 0)) {\n    initialize_data_structures();\n  }\n  if (*(short *)(info_ptr + 6) == 0) {\n    return 0;\n  }\n  flags = *(ushort *)(info_ptr + 6);\n  if ((int)((uint)flags << 0x1c) < 0) {\n    block_size = info_ptr[4];\n    if (block_size == 0) {\n      return 0;\n    }\n    data_len = *info_ptr;\n    if ((flags & 3) == 0) {\n      bytes_processed = info_ptr[5];\n    }\n    else {\n      bytes_processed = 0;\n    }\n    *info_ptr = block_size;\n    data_len -= block_size;\n    info_ptr[2] = bytes_processed;\n    do {\n      if (data_len < 1) {\n        return 0;\n      }\n      bytes_processed = (*(code *)info_ptr[9])(data_ptr, info_ptr[7], block_size, data_len, result);\n      data_len -= bytes_processed;\n      block_size += bytes_processed;\n    } while (bytes_processed > 0);\n    *(ushort *)(info_ptr + 6) = flags | 0x40;\n    return 0xFFFFFFFF;\n  }\n  *(ushort *)(info_ptr + 6) = flags | 0x800;\n  if ((info_ptr[1] < 1) && (info_ptr[15] < 1)) {\n    return 0;\n  }\n  func_ptr = (code *)info_ptr[10];\n  if (func_ptr == NULL) {\n    return 0;\n  }\n  temp = (uint)(flags | 0x800);\n  data_len = *data_ptr;\n  *data_ptr = 0;\n  if ((flags & 0x1000) == 0) {\n    bytes_processed = (*func_ptr)(data_ptr, info_ptr[7], temp & 0x1000, 1);\n    if ((bytes_processed == -1) && (*data_ptr != 0)) {\n      if ((*data_ptr == 29) || (*data_ptr == 22)) {\n        *data_ptr = data_len;\n        return 0;\n      }\n      *(ushort *)(info_ptr + 6) = flags | 0x40;\n      return 0xFFFFFFFF;\n    }\n    flags = *(ushort *)(info_ptr + 6);\n    func_ptr = (code *)info_ptr[10];\n  }\n  else {\n    bytes_processed = info_ptr[20];\n  }\n  if (((int)(temp << 0x1d) < 0) && (bytes_processed = bytes_processed - info_ptr[1], info_ptr[12] != 0)) {\n    bytes_processed -= info_ptr[15];\n  }\n  bytes_processed = (*func_ptr)(data_ptr, info_ptr[7], bytes_processed, 0);\n  if (bytes_processed == -1) {\n    data_len = *data_ptr;\n    if (data_len != 0) {\n      if ((data_len != 29) && (data_len != 22)) {\n        *(ushort *)(info_ptr + 6) = flags | 0x40;\n        return 0xFFFFFFFF;\n      }\n      *(ushort *)(info_ptr + 6) &= 0xF7FF;\n      *info_ptr = info_ptr[4];\n      info_ptr[1] = 0;\n      goto LAB_00083a00;\n    }\n    flags = *(ushort *)(info_ptr + 6) & 0xF7FF;\n    info_ptr[1] = 0;\n    *(ushort *)(info_ptr + 6) = flags;\n    *info_ptr = info_ptr[4];\n  }\n  else {\n    flags = *(ushort *)(info_ptr + 6) & 0xF7FF;\n    *info_ptr = info_ptr[4];\n    *(ushort *)(info_ptr + 6) = flags;\n    info_ptr[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    info_ptr[20] = bytes_processed;\n  }\nLAB_00083a00:\n  block_ptr = (int *)info_ptr[12];\n  *data_ptr = data_len;\n  if (block_ptr == NULL) {\n    return 0;\n  }\n  if (block_ptr != info_ptr + 16) {\n    allocate_memory_block(data_ptr);\n  }\n  info_ptr[12] = 0;\n  return 0;\n}",
            "called": [
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083adc",
            "calling": [
                "FUN_000844c4",
                "FUN_0008378c",
                "FUN_00083f34",
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "process_data_00083adc"
        },
        "FUN_000825b0": {
            "renaming": {
                "FUN_000825b0": "FUNC_000825b0"
            },
            "code": "\nint * FUNC_000825b0(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  int iVar1;\n  int *piVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  int *piVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  int iVar10;\n  \n  if (param_2 == (int *)0x0) {\n    piVar2 = (int *)FUNC_00081e14(param_1,param_3);\n    return piVar2;\n  }\n  do_nothing_00082598();\n  iVar4 = DAT_0008296c;\n  uVar5 = param_2[-1];\n  uVar7 = uVar5 & 0xfffffffc;\n  piVar2 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar8 = 0x10;\n  }\n  else {\n    uVar8 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar8 < 0) goto LAB_0008267c;\n  }\n  if (uVar8 < param_3) {\nLAB_0008267c:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar7 < (int)uVar8) {\n    iVar1 = (int)piVar2 + uVar7;\n    iVar10 = *(int *)(DAT_0008296c + 8);\n    if (iVar10 == iVar1) {\n      uVar3 = *(uint *)(iVar10 + 4) & 0xfffffffc;\n      iVar1 = iVar10;\n      if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar7)) {\n        *(uint *)(DAT_0008296c + 8) = (int)piVar2 + uVar8;\n        *(uint *)((int)piVar2 + uVar8 + 4) = (uVar3 + uVar7) - uVar8 | 1;\n        param_2[-1] = uVar8 | param_2[-1] & 1U;\n        do_nothing_0008259c(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar1 + 4) & 0xfffffffe) + iVar1 + 4) & 1) == 0) {\n      uVar3 = *(uint *)(iVar1 + 4) & 0xfffffffc;\n      if ((int)uVar8 <= (int)(uVar3 + uVar7)) {\n        iVar10 = *(int *)(iVar1 + 0xc);\n        iVar4 = *(int *)(iVar1 + 8);\n        *(int *)(iVar4 + 0xc) = iVar10;\n        *(int *)(iVar10 + 8) = iVar4;\n        uVar7 = uVar3 + uVar7;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      uVar3 = 0;\n      iVar1 = 0;\n    }\n    if (-1 < (int)(uVar5 << 0x1f)) {\n      piVar9 = (int *)((int)piVar2 - param_2[-2]);\n      uVar5 = (piVar9[1] & 0xfffffffcU) + uVar7;\n      if (iVar1 != 0) {\n        if (iVar1 == iVar10) {\n          if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar5)) {\n            piVar2 = piVar9 + 2;\n            iVar1 = *piVar2;\n            iVar10 = piVar9[3];\n            uVar7 = uVar7 - 4;\n            *(int *)(iVar1 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar1;\n            if (uVar7 < 0x25) {\n              piVar6 = piVar2;\n              if (0x13 < uVar7) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar7 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar6 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar7 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar6 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar6;\n                    piVar6 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar6 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar6 = *param_2;\n              piVar6[1] = param_2[1];\n              piVar6[2] = param_2[2];\n            }\n            else {\n              reverse_copy_00082438(piVar2,param_2);\n            }\n            *(uint *)(iVar4 + 8) = (int)piVar9 + uVar8;\n            *(uint *)((int)piVar9 + uVar8 + 4) = (uVar3 + uVar5) - uVar8 | 1;\n            piVar9[1] = uVar8 | piVar9[1] & 1U;\n            do_nothing_0008259c(param_1);\n            return piVar2;\n          }\n        }\n        else {\n          uVar3 = uVar3 + uVar5;\n          if ((int)uVar8 <= (int)uVar3) {\n            iVar10 = *(int *)(iVar1 + 0xc);\n            iVar4 = *(int *)(iVar1 + 8);\n            *(int *)(iVar4 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar4;\n            piVar6 = piVar9 + 2;\n            iVar4 = *piVar6;\n            iVar1 = piVar9[3];\n            uVar5 = uVar7 - 4;\n            *(int *)(iVar4 + 0xc) = iVar1;\n            *(int *)(iVar1 + 8) = iVar4;\n            uVar7 = uVar3;\n            if (uVar5 < 0x25) {\n              piVar2 = piVar6;\n              if (0x13 < uVar5) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar2 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar5 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar2 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar2;\n                    piVar2 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar2 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar2 = *param_2;\n              piVar2[1] = param_2[1];\n              piVar2[2] = param_2[2];\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            else {\n              reverse_copy_00082438(piVar6,param_2);\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)uVar8 <= (int)uVar5) {\n        piVar6 = piVar9 + 2;\n        iVar4 = *piVar6;\n        iVar1 = piVar9[3];\n        uVar3 = uVar7 - 4;\n        *(int *)(iVar4 + 0xc) = iVar1;\n        *(int *)(iVar1 + 8) = iVar4;\n        uVar7 = uVar5;\n        if (uVar3 < 0x25) {\n          piVar2 = piVar6;\n          if (0x13 < uVar3) {\n            piVar9[2] = *param_2;\n            piVar9[3] = param_2[1];\n            if (uVar3 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar9 + 4;\n            }\n            else {\n              piVar9[4] = param_2[2];\n              piVar9[5] = param_2[3];\n              if (uVar3 == 0x24) {\n                piVar9[6] = param_2[4];\n                piVar2 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar9[7] = *piVar2;\n                piVar2 = piVar9 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar9 + 6;\n              }\n            }\n          }\n          *piVar2 = *param_2;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        else {\n          reverse_copy_00082438(piVar6,param_2);\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    piVar9 = (int *)FUNC_00081e14(param_1,param_3);\n    if (piVar9 == (int *)0x0) goto LAB_000826a4;\n    uVar5 = param_2[-1];\n    if (piVar9 + -2 != (int *)((uVar5 & 0xfffffffe) + (int)piVar2)) {\n      uVar7 = uVar7 - 4;\n      if (uVar7 < 0x25) {\n        piVar2 = param_2;\n        piVar6 = piVar9;\n        if (0x13 < uVar7) {\n          *piVar9 = *param_2;\n          piVar9[1] = param_2[1];\n          if (uVar7 < 0x1c) {\n            piVar2 = param_2 + 2;\n            piVar6 = piVar9 + 2;\n          }\n          else {\n            piVar9[2] = param_2[2];\n            piVar9[3] = param_2[3];\n            if (uVar7 == 0x24) {\n              piVar9[4] = param_2[4];\n              piVar9[5] = param_2[5];\n              piVar2 = param_2 + 6;\n              piVar6 = piVar9 + 6;\n            }\n            else {\n              piVar2 = param_2 + 4;\n              piVar6 = piVar9 + 4;\n            }\n          }\n        }\n        *piVar6 = *piVar2;\n        piVar6[1] = piVar2[1];\n        piVar6[2] = piVar2[2];\n      }\n      else {\n        reverse_copy_00082438(piVar9,param_2);\n      }\n      allocate_memory_block_00083d9c(param_1,param_2);\n      goto LAB_000826a4;\n    }\n    uVar7 = uVar7 + (piVar9[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  uVar3 = uVar7 - uVar8;\n  piVar9 = param_2;\n  if (uVar3 < 0x10) {\n    piVar2[1] = uVar5 & 1 | uVar7;\n    *(uint *)((int)piVar2 + uVar7 + 4) = *(uint *)((int)piVar2 + uVar7 + 4) | 1;\n  }\n  else {\n    piVar2[1] = uVar5 & 1 | uVar8;\n    *(uint *)((int)piVar2 + uVar8 + 4) = uVar3 | 1;\n    *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) = *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) | 1;\n    allocate_memory_block_00083d9c(param_1,(int)piVar2 + uVar8 + 8);\n  }\nLAB_000826a4:\n  do_nothing_0008259c(param_1);\n  return piVar9;\n}\n\n",
            "called": [
                "FUN_00082438",
                "FUN_00083d9c",
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00081e14"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000825b0",
            "calling": [
                "FUN_000825a0",
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "FUNC_000825b0"
        },
        "FUN_000803d4": {
            "renaming": {
                "FUN_000803d4": "check_byte_value_000803d4",
                "param_1": "input_byte",
                "iVar1": "i",
                "short_ptr": "short_ptr",
                "PTR_DAT_0008040c": "PTR_DAT_0008040c",
                "*(byte *)(param_1 + 10)": "*(byte*)(input_byte + 10)",
                "*(short *)(param_1 + 0x54)": "*(short*)(input_byte + 0x54)"
            },
            "code": "int check_byte_value_000803d4(int input_byte) {\n    int i;\n    if ((input_byte << 24) < 0) {\n        short* short_ptr = (short*)(input_byte + 0x54);\n        *short_ptr += 1;\n        return 0xfb;\n    }\n    for (i = 0; i < 8; i++) {\n        if (PTR_DAT_0008040c[i] == *(byte*)(input_byte + 10)) {\n            return 0;\n        }\n    }\n    short* short_ptr = (short*)(input_byte + 0x54);\n    *short_ptr += 1;\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803d4",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "check_byte_value_000803d4"
        },
        "FUN_0008043e": {
            "renaming": {
                "FUN_0008043e": "process_input_and_check_0008043e",
                "param_1": "input_param",
                "cVar1": "result_char",
                "uVar2": "input_value",
                "piVar3": "value_from_pointer",
                "iVar4": "compare_result",
                "unaff_r6": "input_length"
            },
            "code": "int process_input_and_check_0008043e(int **input_param)\n{\n  char result_char;\n  uint input_value;\n  int *value_from_pointer;\n  int compare_result;\n  uint input_length = *(byte *)((int)input_param + 5);\n  if (input_length < 4) {\n    input_value = (**(code **)(**input_param + 8))();\n    input_length = input_value & 0xff;\n  }\n  value_from_pointer = (int *)get_value_from_pointer_thunk_00081714();\n  if (input_param[0x17] < value_from_pointer) {\n    *(undefined *)(input_param + 2) = 0xff;\n    *(undefined *)((int)input_param + 7) = 0;\n    *(short *)(input_param + 0x15) = *(short *)(input_param + 0x15) + 1;\n  }\n  else if (input_length > 7) {\n    process_input_000801b0(input_param);\n    compare_result = check_byte_value_000803d4(input_param);\n    if (compare_result == 0) {\n      if (*(byte *)((int)input_param + 10) - 3 < 2) {\n        convert_values_00080410(input_param);\n      }\n      *(undefined *)((int)input_param + 7) = 0;\n      result_char = *(char *)((int)input_param + 0x49);\n    }\n    else {\n      *(undefined *)((int)input_param + 7) = 0;\n      result_char = (char)compare_result;\n    }\n    goto LAB_000804a2;\n  }\n  result_char = '\\0';\nLAB_000804a2:\n  return (int)result_char;\n}",
            "called": [
                "FUN_000801b0",
                "FUN_000803d4",
                "thunk_FUN_00081714",
                "FUN_00080410"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008043e",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "process_input_and_check_0008043e"
        },
        "FUN_0008160c": {
            "renaming": {
                "FUN_0008160c": "reset_memory_0008160c",
                "param_1": "memory",
                "*param_1": "*memory",
                "allocate_memory_block_00081e04": "allocate_memory_block"
            },
            "code": "void reset_memory_0008160c(int *memory)\n{\n  if (*memory != 0) {\n    allocate_memory_block();\n  }\n  *memory = 0;\n  memory[2] = 0;\n  memory[1] = 0;\n  return;\n}",
            "called": [
                "FUN_00081e04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008160c",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "reset_memory_0008160c"
        },
        "FUN_00080e18": {
            "renaming": {
                "FUN_00080e18": "check_input_00080e18",
                "param_1": "input",
                "uVar1": "mask",
                "DAT_00080e58": "ptr1",
                "ptr1": "ptr1",
                "ptr2": "ptr2",
                "ptr3": "ptr3",
                "ptr4": "ptr4"
            },
            "code": "int check_input_00080e18(uint input)\n{\n    uint mask;\n    if (input < 45) {\n        if (input < 32) {\n            mask = 1 << (input & 0xff);\n            if ((mask & *DAT_00080e58) != mask) {\n                *ptr2 = mask;\n            }\n        }\n        else {\n            mask = 1 << (input - 32 & 0xff);\n            if ((mask & *ptr3) != mask) {\n                *ptr4 = mask;\n            }\n        }\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e18",
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210",
                "FUN_00081508"
            ],
            "imported": false,
            "current_name": "check_input_00080e18"
        },
        "FUN_00081184": {
            "renaming": {
                "FUN_00081184": "returnZero_00081184"
            },
            "code": "int returnZero_00081184() {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081184",
            "calling": [],
            "imported": false,
            "current_name": "returnZero_00081184"
        },
        "FUN_00084298": {
            "renaming": {
                "FUN_00084298": "get_first_value_00084298",
                "*DAT_000842a0": "*first_value_ptr",
                "PTR_000842a0": "first_value_ptr",
                "first_value": "first_value"
            },
            "code": "int get_first_value_00084298(void)\n{\n    int* PTR_000842a0 = PTR_000842a0;\n    int first_value = *DAT_000842a0;\n    return first_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084298",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "get_first_value_00084298"
        },
        "FUN_00081066": {
            "renaming": {
                "FUN_00081066": "set_default_value_00081066",
                "param_1": "address",
                "*(undefined4 *)(param_1 + 0x14)": "*(int *)(address + 0x14)"
            },
            "code": "void set_default_value_00081066(int address)\n{\n    *(int *)(address + 0x14) = 0xffff;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081066",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "set_default_value_00081066"
        },
        "FUN_00081cd0": {
            "renaming": {
                "FUN_00081cd0": "convert_param_to_int_00081cd0",
                "param_1": "param",
                "uVar1": "shifted_param1",
                "uVar2": "shifted_param2",
                "shifted_param": "shifted_param",
                "shifted_param2": "shifted_param2",
                "shifted_param3": "shifted_param3",
                "result": "result"
            },
            "code": "uint convert_param_to_int_00081cd0(uint param)\n{\n  uint shifted_param = param << 1;\n  if (shifted_param < 0x7f000000) {\n    return 0;\n  }\n  uint uVar1 = shifted_param >> 0x18;\n  uint uVar2 = 0x9e - uVar1;\n  if (uVar1 < 0x9f && uVar2 != 0) {\n    uint shifted_param2 = param << 8 | 0x80000000;\n    uint shifted_param3 = shifted_param2 >> (uVar2 & 0xff);\n    if ((param & 0x80000000) != 0) {\n      shifted_param3 = -shifted_param3;\n    }\n    return shifted_param3;\n  }\n  if ((uVar2 == 0xffffff9f) && ((param & 0x7fffff) != 0)) {\n    return 0;\n  }\n  uint result = param & 0x80000000;\n  if (result == 0) {\n    result = 0x7fffffff;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081cd0",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "convert_param_to_int_00081cd0"
        },
        "FUN_00081df4": {
            "renaming": {
                "FUN_00081df4": "execute_function_with_data_pointer_and_argument_00081df4",
                "param_1": "argument",
                "FUNC_00081e14": "call_function_with_data_pointer_and_argument",
                "*DAT_00081e00": "data_pointer"
            },
            "code": "void execute_function_with_*execute_function_with_data_pointer_and_argument_00081df4(void* *DAT_00081e00, int argument)\n{\n  call_function_with_*execute_function_with_data_pointer_and_argument_00081df4(**DAT_00081e00, argument);\n  return;\n}",
            "called": [
                "FUN_00081e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081df4",
            "calling": [
                "FUN_00083974"
            ],
            "imported": false,
            "current_name": "execute_function_with_data_pointer_and_argument_00081df4"
        },
        "FUN_00080410": {
            "renaming": {
                "FUN_00080410": "convert_values_00080410",
                "param_1": "array_address",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "index",
                "iVar2": "element_address",
                "bVar3": "index_byte",
                "uVar4": "index_uint",
                "iVar5": "result_array_address",
                "combine_values_000815f8": "combine_values",
                "*(byte *)(param_1 + 0xb)": "*(uint8_t *)(array_address + 0xb)",
                "*(undefined *)(iVar2 + 9)": "*(uint8_t *)(element_address + 9)",
                "*(undefined *)(iVar2 + 10)": "*(uint8_t *)(element_address + 10)",
                "*(int *)(param_1 + 0x4c)": "*(int *)(array_address + 0x4c)",
                "*(undefined2 *)(iVar5 + uVar4 * 2)": "*(uint16_t *)(result_array_address + index_uint * 2)"
            },
            "code": "void convert_values_00080410(int array_address, int param2, int param3, int param4) {\n  int index = 0;\n  while (true) {\n    uint32_t uVar1 = (uint32_t)index;\n    index++;\n    if (*(uint8_t *)(array_address + 0xb) >> 1 <= uVar1) break;\n    int element_address = (uVar1 * 2 + 3 & 0xff) + array_address;\n    int result_array_address = *(int *)(array_address + 0x4c);\n    uint16_t converted_value = combine_values(*(uint8_t *)(element_address + 9), *(uint8_t *)(element_address + 10), element_address, *(uint8_t *)(array_address + 0xb), param4);\n    *(uint16_t *)(result_array_address + uVar1 * 2) = converted_value;\n  }\n  return;\n}\n",
            "called": [
                "FUN_000815f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080410",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "convert_values_00080410"
        },
        "FUN_00080da0": {
            "renaming": {
                "FUN_00080da0": "process_data_00080da0",
                "param_1": "data_id",
                "param_2": "data_type",
                "param_3": "data_value",
                "param_4": "flags",
                "bVar1": "is_negative_flag"
            },
            "code": "int process_data_00080da0(int data_id, int data_type, int data_value, unsigned int flags) {\n    bool is_negative_flag = (int)(flags << 0x1f) < 0;\n\n    switch(data_type) {\n        case 1:\n        case 2:\n            (*PTR_data_handler)(data_id, data_type, data_value);\n            *(int *)(data_id + 0x44) = data_value;\n            if (is_negative_flag) {\n                *(int *)(data_id + 100) = data_value;\n            }\n            if (!is_negative_flag) {\n                *(int *)(data_id + 0x60) = data_value;\n            }\n            break;\n        case 3:\n            (*PTR_data_handler)(data_id, data_value, flags, PTR_data_handler, data_id);\n            break;\n        case 4:\n        case 5:\n            (*PTR_data_handler)(data_id, data_value, data_type == 5, (flags << 0x1d) >> 0x1f, flags & 1, data_type, data_value);\n            break;\n        default:\n            return 0;\n    }\n\n    return 1;\n}",
            "called": [
                "FUN_00080d54",
                "FUN_00080d2e",
                "FUN_00080d7a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080da0",
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210"
            ],
            "imported": false,
            "current_name": "process_data_00080da0"
        },
        "FUN_00080258": {
            "renaming": {
                "FUN_00080258": "calculate_crc_and_update_data_00080258",
                "param_1": "data",
                "param_2": "data_length",
                "param_3": "offset",
                "param_4": "crc_offset",
                "bVar1": "current_byte",
                "uVar2": "calculated_crc",
                "iVar3": "result",
                "uVar4": "current_index"
            },
            "code": "void calculate_crc_and_update_data_00080258(int **data, int data_length, int offset, int crc_offset)\n{\n    byte current_byte = *(byte *)((int)data + crc_offset);\n    uint current_index = (uint)current_byte;\n    uint calculated_crc = calculate_crc_0008021c(data, current_index, data_length, offset, offset);\n    *(char *)((int)data + current_index + 9) = (char)((ushort)calculated_crc >> 8);\n    *(char *)((int)data + ((current_index + 1) & 0xff) + 9) = (char)calculated_crc;\n    *(byte *)((int)data + crc_offset) = current_byte + 2;\n    if (1 < *(byte *)((int)data + 6)) {\n        process_input_00081318(*(byte *)((int)data + 6), 1);\n    }\n    if (*(byte *)((int)data + 5) < 4) {\n        (**(code **)(**data + 4))(*data, (int)data + 9, *(undefined *)((int)data + crc_offset));\n    }\n    if (1 < *(byte *)((int)data + 6)) {\n        process_input_00081318(*(byte *)((int)data + 6), 0);\n    }\n    if (*(byte *)((int)data + 5) < 4) {\n        do {\n            int result = (**(code **)(**data + 0xc))();\n        } while (-1 < result);\n    }\n    *(undefined *)((int)data + crc_offset) = 0;\n    int value_from_pointer_thunk = get_value_from_pointer_thunk_00081714();\n    data[0x17] = (int *)(value_from_pointer_thunk + (uint)*(ushort *)((int)data + 0x56));\n    *(short *)((int)data + 0x52) = *(short *)((int)data + 0x52) + 1;\n    return;\n}",
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_0008021c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080258",
            "calling": [
                "FUN_000802da"
            ],
            "imported": false,
            "current_name": "calculate_crc_and_update_data_00080258"
        },
        "FUN_00081622": {
            "renaming": {
                "FUN_00081622": "check_and_update_params_00081622",
                "param_1": "param_array",
                "param_2": "num_params",
                "iVar1": "result"
            },
            "code": "int check_and_update_params_00081622(int *param_array, int num_params, undefined4 param_3, undefined4 param_4) {\n  int result;\n  result = call_function_with_params(*param_array, num_params + 1, param_3, param_4, param_4);\n  if (result != 0) {\n    *param_array = result;\n    param_array[1] = num_params;\n    result = 1;\n  }\n  return result;\n}",
            "called": [
                "FUN_000825a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081622",
            "calling": [
                "FUN_0008163a"
            ],
            "imported": false,
            "current_name": "check_and_update_params_00081622"
        },
        "FUN_00082438": {
            "renaming": {
                "FUN_00082438": "reverse_copy_00082438",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "iVar1": "remaining_length",
                "puVar2": "dest_ptr",
                "puVar3": "src_byte_ptr",
                "puVar4": "dest_byte_ptr",
                "uVar5": "i",
                "puVar6": "dest_byte_ptr",
                "uVar7": "remaining_length"
            },
            "code": "void reverse_copy_00082438(uint32_t* destination, uint32_t* source, uint32_t length)\n{\n  uint32_t* dest_ptr;\n  uint32_t* src_ptr;\n  uint32_t remaining_length;\n  uint32_t i;\n  uint8_t* dest_byte_ptr;\n  uint8_t* src_byte_ptr;\n\n  if (source < destination && (source + length) > destination)\n  {\n    dest_byte_ptr = (uint8_t*)(destination + length);\n    remaining_length = length;\n    while (remaining_length > 0)\n    {\n      dest_byte_ptr--;\n      remaining_length--;\n      *dest_byte_ptr = *((uint8_t*)(--source + length));\n    }\n  }\n  else if (length >= 16 && (((uint32_t)source | (uint32_t)destination) & 3) == 0)\n  {\n    dest_ptr = destination;\n    src_ptr = source;\n    i = (length - 16) >> 4;\n    while (i--)\n    {\n      dest_ptr[3] = src_ptr[3];\n      dest_ptr[2] = src_ptr[2];\n      dest_ptr[1] = src_ptr[1];\n      dest_ptr[0] = src_ptr[0];\n      dest_ptr += 4;\n      src_ptr += 4;\n    }\n    switch (length & 15)\n    {\n      case 15:\n        dest_ptr[2] = src_ptr[2];\n        [[fallthrough]];\n      case 14:\n        dest_ptr[1] = src_ptr[1];\n        [[fallthrough]];\n      case 13:\n        dest_ptr[0] = src_ptr[0];\n        return;\n      case 12:\n        dest_ptr[3] = src_ptr[3];\n        [[fallthrough]];\n      case 11:\n        dest_ptr[2] = src_ptr[2];\n        [[fallthrough]];\n      case 10:\n        dest_ptr[1] = src_ptr[1];\n        [[fallthrough]];\n      case 9:\n        dest_ptr[0] = src_ptr[0];\n        return;\n      case 8:\n        dest_ptr[3] = src_ptr[3];\n        [[fallthrough]];\n      case 7:\n        dest_ptr[2] = src_ptr[2];\n        [[fallthrough]];\n      case 6:\n        dest_ptr[1] = src_ptr[1];\n        [[fallthrough]];\n      case 5:\n        dest_ptr[0] = src_ptr[0];\n        return;\n      case 4:\n        dest_ptr[3] = src_ptr[3];\n        [[fallthrough]];\n      case 3:\n        dest_ptr[2] = src_ptr[2];\n        [[fallthrough]];\n      case 2:\n        dest_ptr[1] = src_ptr[1];\n        [[fallthrough]];\n      case 1:\n        dest_ptr[0] = src_ptr[0];\n        return;\n      default:\n        return;\n    }\n  }\n  else if (length != 0)\n  {\n    dest_ptr = destination;\n    src_ptr = source;\n    while (length--)\n    {\n      *dest_ptr++ = *src_ptr++;\n    }\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082438",
            "calling": [
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "reverse_copy_00082438"
        },
        "FUN_00081508": {
            "renaming": {
                "FUN_00081508": "initialize_data_structures_00081508",
                "param_1": "data_struct_addr",
                "param_2": "divisor",
                "param_3": "value",
                "puVar1": "read_write_ptr",
                "iVar2": "int_var",
                "puVar3": "data_struct_ptr"
            },
            "code": "void initialize_data_structures_00081508(int data_struct_addr, uint divisor, undefined4 value)\n{\n  uint *read_write_ptr;\n  int int_var;\n  undefined4 *data_struct_ptr;\n  check_input(*(undefined4 *)(data_struct_addr + 0x20));\n  data_struct_ptr = *(undefined4 **)(data_struct_addr + 0x18);\n  data_struct_ptr[0x48] = 0x202;\n  *data_struct_ptr = 0xac;\n  read_write_ptr = original_data;\n  data_struct_ptr[1] = value;\n  data_struct_ptr[8] = *read_write_ptr / divisor >> 4;\n  data_struct_ptr[3] = 0xffffffff;\n  data_struct_ptr[2] = 0x61;\n  *(int *)(original_data + ((uint)(int)(char)*(byte *)(data_struct_addr + 0x1c) >> 5) * 4) = 1 << (uint)(*(byte *)(data_struct_addr + 0x1c) & 0x1f);\n  int_var = *(int *)(data_struct_addr + 0x10);\n  *(undefined4 *)(int_var + 0x84) = 0;\n  *(undefined4 *)(int_var + 0x80) = 0;\n  int_var = *(int *)(data_struct_addr + 0x14);\n  *(undefined4 *)(int_var + 0x84) = 0;\n  *(undefined4 *)(int_var + 0x80) = 0;\n  *data_struct_ptr = 0x50;\n  return;\n}",
            "called": [
                "FUN_00080e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081508",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_structures_00081508"
        },
        "FUN_00083808": {
            "renaming": {
                "FUN_00083808": "validate_and_modify_data_00083808",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "data_and_1",
                "iVar2": "var1",
                "uVar3": "data",
                "uVar4": "data_short"
            },
            "code": "int validate_and_modify_data_00083808(int *output, int *input) {\n    uint16_t data = *(uint16_t *)(input + 3);\n    uint32_t data_shifted = (uint32_t)data << 28;\n    if ((int)data_shifted < 0) {\n        int var1 = input[4];\n    }\n    else {\n        if ((int)((uint32_t)data << 27) >= 0) {\n            *output = 9;\n            *(uint16_t *)(input + 3) = data | 0x40;\n            return -1;\n        }\n        if ((int)((uint32_t)data << 29) < 0) {\n            if ((int *)input[0xc] != NULL) {\n                if ((int *)input[0xc] != input + 0x10) {\n                    allocate_memory_block(output);\n                    data = *(uint16_t *)(input + 3);\n                }\n                input[0xc] = NULL;\n            }\n            int var1 = input[4];\n            data &= 0xffdb;\n            *input = var1;\n            input[1] = 0;\n        }\n        else {\n            var1 = input[4];\n        }\n        *(uint16_t *)(input + 3) = data | 8;\n        data |= 8;\n    }\n    if (var1 == 0 && (data & 0x280) != 0x200) {\n        validate_data(output, input);\n        data = *(uint16_t *)(input + 3);\n        var1 = input[4];\n    }\n    uint32_t data_and_1 = data & 1;\n    if (data_and_1 == 0) {\n        if ((int)((uint32_t)data << 30) >= 0) {\n            data_and_1 = input[5];\n        }\n        input[2] = data_and_1;\n    }\n    else {\n        input[6] = -input[5];\n        input[2] = 0;\n    }\n    if (var1 == 0 && (int)((uint32_t)data << 24) < 0) {\n        *(uint16_t *)(input + 3) = *(uint16_t *)(input + 3) | 0x40;\n        return -1;\n    }\n    return 0;\n}",
            "called": [
                "FUN_000842a4",
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083808",
            "calling": [
                "FUN_000844c4",
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "validate_and_modify_data_00083808"
        },
        "FUN_000847e0": {
            "renaming": {
                "FUN_000847e0": "FUNC_000847e0"
            },
            "code": "\nundefined8 FUNC_000847e0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000847e0",
            "calling": [
                "FUN_0008477c"
            ],
            "imported": false,
            "current_name": "FUNC_000847e0"
        },
        "FUN_0008105c": {
            "renaming": {
                "FUN_0008105c": "set_bit_at_position_0008105c",
                "param_1": "array",
                "param_2": "position"
            },
            "code": "void set_bit_at_position_0008105c(int *array, uint8_t position) {\n    uint8_t bit_to_set = 1 << (position & 0xff);\n    *(array + 0x14) = bit_to_set;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008105c",
            "calling": [
                "FUN_00081210"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_0008105c"
        },
        "FUN_0008456c": {
            "renaming": {
                "FUN_0008456c": "execute_function_0008456c",
                "param_1": "output",
                "param_2": "input_length",
                "param_3": "input_value",
                "param_4": "error_code",
                "uVar1": "function_pointer",
                "iVar2": "function_result",
                "pcVar3": "function_code_pointer",
                "auStack_24": "temporary_stack"
            },
            "code": "void execute_function_0008456c(int* output, int input_length, int input_value, int* error_code)\n{\n  undefined4 function_pointer;\n  int function_result;\n  code *function_code_pointer;\n  undefined temporary_stack[12];\n  \n  if (input_length == 0) {\n    function_code_pointer = *(code **)PTR_DAT_000845b8;\n    function_pointer = get_dat_value_00084290();\n    function_result = (*function_code_pointer)(output, temporary_stack, 0, function_pointer, error_code);\n  }\n  else {\n    function_code_pointer = *(code **)PTR_DAT_000845b8;\n    function_pointer = get_dat_value_00084290();\n    function_result = (*function_code_pointer)(output, input_length, input_value, function_pointer, error_code);\n  }\n  if (function_result == -1) {\n    *error_code = 0;\n    *output = 0x8a;\n  }\n  return;\n}",
            "called": [
                "FUN_000845bc",
                "FUN_00084290"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008456c",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "execute_function_0008456c"
        },
        "FUN_00080aba": {
            "renaming": {
                "FUN_00080aba": "do_nothing_00080aba"
            },
            "code": "\nvoid do_nothing_00080aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aba",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aba"
        },
        "FUN_00080abc": {
            "renaming": {
                "FUN_00080abc": "do_nothing_00080abc"
            },
            "code": "\nvoid do_nothing_00080abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080abc",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080abc"
        },
        "FUN_000811b4": {
            "renaming": {
                "FUN_000811b4": "set_memory_flags_000811b4",
                "param_1": "buffer",
                "param_2": "size",
                "*(undefined4 *)(param_2 + 4)": "*(int*)(buffer + 4)",
                "0x2000": "MEMORY_FLAG"
            },
            "code": "void set_memory_flags_000811b4(int* buffer, int size)\n{\n    const int MEMORY_FLAG = 0x2000;\n    *(int*)(buffer + 4) = MEMORY_FLAG;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b4",
            "calling": [
                "FUN_000846b4"
            ],
            "imported": false,
            "current_name": "set_memory_flags_000811b4"
        },
        "FUN_000816d4": {
            "renaming": {
                "FUN_000816d4": "set_default_value_000816d4",
                "DAT_000816dc": "data_pointer"
            },
            "code": "void set_default_value_000816d4(void)\n{\n    int* ptr_data = (int*)(DAT_000816dc + 4);\n    *ptr_data = 32768;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d4",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "set_default_value_000816d4"
        },
        "FUN_00083f34": {
            "renaming": {
                "FUN_00083f34": "FUNC_00083f34"
            },
            "code": "\nundefined4 FUNC_00083f34(undefined4 *param_1,uint *param_2,uint **param_3)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint *puVar5;\n  uint *puVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint local_2c;\n  \n  if (param_3[2] != (uint *)0x0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar4 = (uint)uVar3;\n    if (((int)(uVar4 << 0x1c) < 0) && (param_2[4] != 0)) {\n      puVar6 = *param_3;\n      uVar2 = DAT_00084244;\n    }\n    else {\n      iVar1 = validate_and_modify_data_00083808(param_1,param_2);\n      if (iVar1 != 0) {\n        return 0xffffffff;\n      }\n      uVar3 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar3;\n      puVar6 = *param_3;\n      uVar2 = DAT_00084244;\n    }\n    DAT_00084244 = uVar2;\n    if ((uVar3 & 2) == 0) {\n      uVar2 = uVar4 & 2;\n      uVar8 = uVar4 & 1;\n      uVar7 = uVar2;\n      uVar10 = uVar2;\n      local_2c = uVar2;\n      uVar9 = uVar8;\n      if (uVar8 == 0) {\n        while( true ) {\n          while (uVar8 == 0) {\n            uVar9 = *puVar6;\n            puVar5 = puVar6 + 1;\n            puVar6 = puVar6 + 2;\n            uVar8 = *puVar5;\n          }\n          uVar2 = param_2[2];\n          if ((int)(uVar4 << 0x16) < 0) {\n            if (uVar8 < uVar2) {\n              uVar4 = *param_2;\n              uVar2 = uVar8;\n            }\n            else if ((uVar4 & 0x480) == 0) {\n              uVar4 = *param_2;\n            }\n            else {\n              iVar1 = *param_2 - param_2[4];\n              uVar2 = iVar1 + 1 + uVar8;\n              uVar7 = (int)(param_2[5] * 3) / 2;\n              if (uVar2 <= uVar7) {\n                uVar2 = uVar7;\n              }\n              if ((int)(uVar4 << 0x15) < 0) {\n                uVar7 = FUNC_00081e14(param_1,uVar2);\n                if (uVar7 == 0) {\n                  *param_1 = 0xc;\n                  uVar3 = *(ushort *)(param_2 + 3);\n                  goto LAB_00084030;\n                }\n                copyMemory_0008234c(uVar7,param_2[4],iVar1);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                uVar7 = FUNC_000825b0(param_1);\n                if (uVar7 == 0) {\n                  allocate_memory_block_00083d9c(param_1,param_2[4]);\n                  uVar3 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              uVar4 = uVar7 + iVar1;\n              param_2[4] = uVar7;\n              param_2[5] = uVar2;\n              *param_2 = uVar4;\n              param_2[2] = uVar2 - iVar1;\n              uVar2 = uVar8;\n            }\n            reverse_copy_00082438(uVar4,uVar9,uVar2);\n            param_2[2] = param_2[2] - uVar2;\n            *param_2 = *param_2 + uVar2;\n            uVar2 = uVar8;\n          }\n          else if ((param_2[4] < *param_2) || (uVar4 = param_2[5], uVar8 < uVar4)) {\n            if (uVar8 < uVar2) {\n              uVar2 = uVar8;\n            }\n            reverse_copy_00082438(*param_2,uVar9,uVar2);\n            uVar4 = param_2[2];\n            param_2[2] = uVar4 - uVar2;\n            *param_2 = *param_2 + uVar2;\n            if ((uVar4 - uVar2 == 0) && (iVar1 = process_data_00083adc(param_1,param_2), iVar1 != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            uVar2 = 0x7fffffff;\n            if (uVar8 < 0x7fffffff) {\n              uVar2 = uVar8;\n            }\n            uVar2 = (*(code *)param_2[9])(param_1,param_2[7],uVar9,(uVar2 / uVar4) * uVar4);\n            if ((int)uVar2 < 1) goto LAB_0008402e;\n          }\n          puVar5 = param_3[2];\n          uVar8 = uVar8 - uVar2;\n          param_3[2] = (uint *)((int)puVar5 - uVar2);\n          if ((uint *)((int)puVar5 - uVar2) == (uint *)0x0) break;\n          uVar4 = (uint)*(ushort *)(param_2 + 3);\n          uVar9 = uVar9 + uVar2;\n        }\n      }\n      else {\n        do {\n          while (uVar2 == 0) {\n            uVar10 = *puVar6;\n            uVar2 = puVar6[1];\n            local_2c = 0;\n            puVar6 = puVar6 + 2;\n          }\n          if (local_2c == 0) {\n            iVar1 = find_char_in_buffer_00084384(uVar10,10,uVar2);\n            if (iVar1 == 0) {\n              uVar7 = uVar2 + 1;\n              local_2c = 1;\n            }\n            else {\n              uVar7 = (iVar1 + 1) - uVar10;\n              local_2c = 1;\n            }\n          }\n          uVar8 = *param_2;\n          uVar4 = uVar7;\n          if (uVar2 <= uVar7) {\n            uVar4 = uVar2;\n          }\n          uVar9 = param_2[5];\n          if ((param_2[4] < uVar8) && (uVar11 = param_2[2] + uVar9, (int)uVar11 < (int)uVar4)) {\n            reverse_copy_00082438(uVar8,uVar10,uVar11);\n            *param_2 = *param_2 + uVar11;\n            iVar1 = process_data_00083adc(param_1,param_2);\n            if (iVar1 != 0) goto LAB_0008402e;\n          }\n          else if ((int)uVar4 < (int)uVar9) {\n            reverse_copy_00082438(uVar8,uVar10,uVar4);\n            param_2[2] = param_2[2] - uVar4;\n            *param_2 = uVar4 + *param_2;\n            uVar11 = uVar4;\n          }\n          else {\n            uVar11 = (*(code *)param_2[9])(param_1,param_2[7],uVar10,uVar9);\n            if ((int)uVar11 < 1) goto LAB_0008402e;\n          }\n          uVar7 = uVar7 - uVar11;\n          if ((uVar7 == 0) && (iVar1 = process_data_00083adc(param_1,param_2), local_2c = uVar7, iVar1 != 0))\n          goto LAB_0008402e;\n          puVar5 = param_3[2];\n          uVar10 = uVar10 + uVar11;\n          uVar2 = uVar2 - uVar11;\n          param_3[2] = (uint *)((int)puVar5 - uVar11);\n        } while ((uint *)((int)puVar5 - uVar11) != (uint *)0x0);\n      }\n    }\n    else {\n      uVar7 = 0;\n      uVar4 = 0;\n      do {\n        while( true ) {\n          uVar10 = uVar4;\n          if (uVar2 <= uVar4) {\n            uVar10 = uVar2;\n          }\n          if (uVar4 != 0) break;\n          uVar7 = *puVar6;\n          uVar4 = puVar6[1];\n          puVar6 = puVar6 + 2;\n        }\n        iVar1 = (*(code *)param_2[9])(param_1,param_2[7],uVar7,uVar10);\n        if (iVar1 < 1) {\nLAB_0008402e:\n          uVar3 = *(ushort *)(param_2 + 3);\nLAB_00084030:\n          *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n          return 0xffffffff;\n        }\n        puVar5 = param_3[2];\n        uVar7 = uVar7 + iVar1;\n        uVar4 = uVar4 - iVar1;\n        param_3[2] = (uint *)((int)puVar5 - iVar1);\n      } while ((uint *)((int)puVar5 - iVar1) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00082438",
                "FUN_00083adc",
                "FUN_00084384",
                "FUN_00083808",
                "FUN_0008234c",
                "FUN_00083d9c",
                "FUN_000825b0",
                "FUN_00081e14"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083f34",
            "calling": [
                "FUN_00082ac0"
            ],
            "imported": false,
            "current_name": "FUNC_00083f34"
        },
        "FUN_00080d7a": {
            "renaming": {
                "FUN_00080d7a": "update_values_00080d7a",
                "param_1": "values",
                "param_2": "new_value",
                "param_3": "is_param_3_zero",
                "param_4": "is_param_4_zero",
                "param_5": "is_param_5_zero",
                "0x11": "index_0",
                "0x18": "index_1",
                "0x19": "index_2",
                "0x15": "index_3",
                "0x14": "index_4",
                "0xd": "index_5",
                "0xc": "index_6",
                "4": "index_7"
            },
            "code": "void update_values_00080d7a(int* values, int new_value, int is_param_3_zero, int is_param_4_zero, int is_param_5_zero) {\n  values[0] = new_value;\n  if (is_param_5_zero) {\n    values[3] = new_value;\n  }\n  else {\n    values[4] = new_value;\n  }\n  if (is_param_4_zero) {\n    values[1] = new_value;\n  }\n  else {\n    values[2] = new_value;\n  }\n  if (is_param_3_zero) {\n    values[5] = new_value;\n  }\n  else {\n    values[6] = new_value;\n  }\n  values[7] = new_value;\n  values[0] = new_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d7a",
            "calling": [
                "FUN_00080da0",
                "FUN_00081318"
            ],
            "imported": false,
            "current_name": "update_values_00080d7a"
        },
        "FUN_00080e9c": {
            "renaming": {
                "FUN_00080e9c": "initialize_memory_00080e9c",
                "puVar1": "memory_address",
                "iVar2": "memory_control",
                "DAT_00080f08": "memory_start",
                "DAT_00080f0c": "memory_control_start",
                "DAT_00080f10": "memory_control_init_2",
                "DAT_00080f14": "memory_control_init",
                "DAT_00080f18": "memory_control_init_3",
                "DAT_00080f20": "memory_end",
                "*puVar1": "*memory_start",
                "*(int *)(DAT_00080f0c + 0x20)": "*(int *)(memory_control_start + 0x20)",
                "*(int *)(iVar2 + 0x68)": "*(int *)(memory_control + 0x68)",
                "*(unsigned int *)(DAT_00080f0c + 0x30)": "*(unsigned int *)(memory_control_start + 0x30)",
                "*DAT_00080f20": "*memory_end"
            },
            "code": "void initialize_memory_00080e9c(void)\n{\n  int *memory_address = DAT_00080f08;\n  *DAT_00080f08 = 0x400;\n  memory_address[0x80] = 0x400;\n  int *memory_control = DAT_00080f0c;\n  if (-1 < *(int *)(DAT_00080f0c + 0x20) << 7) {\n    *(int *)(DAT_00080f0c + 0x20) = DAT_00080f14;\n    while (-1 < *(int *)(memory_control + 0x68) << 0x1f));\n  }\n  *(int *)(DAT_00080f0c + 0x20) = DAT_00080f10;\n  while (-1 < *(int *)(memory_control + 0x68) << 0xf));\n  *(unsigned int *)(DAT_00080f0c + 0x30) = *(unsigned int *)(DAT_00080f0c + 0x30) & 0xfffffffc | 1;\n  while (-1 < *(int *)(memory_control + 0x68) << 0x1c));\n  *(int *)(DAT_00080f0c + 0x28) = DAT_00080f18;\n  while (-1 < *(int *)(memory_control + 0x68) << 0x1e));\n  *(unsigned int *)(DAT_00080f0c + 0x30) = 0x11;\n  while (-1 < *(int *)(memory_control + 0x68) << 0x1c));\n  *(unsigned int *)(DAT_00080f0c + 0x30) = 0x12;\n  while (-1 < *(int *)(memory_control + 0x68) << 0x1c));\n  *DAT_00080f20 = DAT_00080f20_init;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e9c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "initialize_memory_00080e9c"
        },
        "FUN_00084464": {
            "renaming": {
                "FUN_00084464": "copy_and_set_default_values_00084464",
                "param_1": "output_buffer",
                "param_2": "input_buffer_address",
                "param_3": "buffer_size",
                "param_4": "default_value",
                "sVar1": "input_buffer_size",
                "puVar2": "temporary_pointer",
                "iVar3": "copy_result",
                "uVar4": "input_buffer_flags"
            },
            "code": "void copy_and_set_default_values_00084464(int *output_buffer, int input_buffer_address, int buffer_size, int default_value) {\n    short input_buffer_size = *(short *)(input_buffer_address + 0xe);\n    ushort input_buffer_flags = *(ushort *)(input_buffer_address + 0xc);\n    if ((int)((uint)input_buffer_flags << 0x17) < 0) {\n        get_default_value_or_use_default_00084700(output_buffer, input_buffer_size, 0, default_value);\n        input_buffer_flags = *(ushort *)(input_buffer_address + 0xc);\n    }\n    *(ushort *)(input_buffer_address + 0xc) = input_buffer_flags & 0xefff;\n    undefined *temporary_pointer = PTR_DAT_000845fc;\n    *(undefined4 *)temporary_pointer = 0;\n    int copy_result = copy_bytes_000811cc((int)input_buffer_size, buffer_size, default_value, default_value, unaff_r4, unaff_r5, unaff_r6, in_lr);\n    if ((copy_result == -1) && (*(int *)temporary_pointer != 0)) {\n        *output_buffer = *(int *)temporary_pointer;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084464",
            "calling": [],
            "imported": false,
            "current_name": "copy_and_set_default_values_00084464"
        },
        "FUN_000811ae": {
            "renaming": {
                "FUN_000811ae": "return_error_code_000811ae"
            },
            "code": "int32_t return_error_code_000811ae(void) {\n\treturn -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ae",
            "calling": [],
            "imported": false,
            "current_name": "return_error_code_000811ae"
        },
        "FUN_0008118c": {
            "renaming": {
                "FUN_0008118c": "calculate_sum_0008118c",
                "param_1": "input_num",
                "puVar1": "data_ptr",
                "iVar2": "current_sum"
            },
            "code": "int calculate_sum_0008118c(int input_num) {\n  undefined *data_ptr;\n  int current_sum;\n  data_ptr = PTR_DAT_000811a0;\n  if (*(int *)PTR_DAT_000811a0 == 0) {\n    *(undefined4 *)PTR_DAT_000811a0 = DAT_000811a4;\n  }\n  current_sum = *(int *)data_ptr;\n  *(int *)data_ptr = input_num + current_sum;\n  return current_sum;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008118c",
            "calling": [
                "FUN_00082970"
            ],
            "imported": false,
            "current_name": "calculate_sum_0008118c"
        },
        "FUN_00082a50": {
            "renaming": {
                "FUN_00082a50": "count_bytes_until_null_00082a50",
                "param_1": "address",
                "iVar1": "byte_count",
                "puVar2": "word_address",
                "uVar3": "word",
                "bVar4": "is_null"
            },
            "code": "int count_bytes_until_null_00082a50(uint32_t address) {\n  int byte_count = 0;\n  uint32_t *word_address = (uint32_t *)(address & 0xfffffffc);\n  int offset = -(address & 3);\n  uint32_t word = *word_address;\n  if ((address & 3) != 0) {\n    word = word | 0xffffffffU >> ((offset + 4U & 0x1f) << 3);\n  }\n  while (word + 0xfefefeffU & ~word & 0x80808080U) {\n    byte_count += 4;\n    word_address++;\n    word = *word_address;\n  }\n  if ((word & 0xff) != 0) {\n    byte_count++;\n    if ((word & 0xff00) != 0) {\n      byte_count++;\n      if ((word & 0xff0000) != 0) {\n        byte_count++;\n      }\n    }\n  }\n  return byte_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082a50",
            "calling": [
                "FUN_00081682",
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "count_bytes_until_null_00082a50"
        },
        "FUN_0008106e": {
            "renaming": {
                "FUN_0008106e": "set_parameter_0008106e",
                "param_1": "base_address",
                "param_2": "parameter_value"
            },
            "code": "void set_parameter_0008106e(int base_address, int parameter_value)\n{\n    *(int*)(base_address + 0x28) = parameter_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008106e",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "set_parameter_0008106e"
        },
        "FUN_000811c2": {
            "renaming": {
                "FUN_000811c2": "get_default_value_000811c2"
            },
            "code": "int get_default_value_000811c2() {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c2",
            "calling": [
                "FUN_00084700"
            ],
            "imported": false,
            "current_name": "get_default_value_000811c2"
        },
        "FUN_000811c6": {
            "renaming": {
                "FUN_000811c6": "return_zero_000811c6"
            },
            "code": "int return_zero_000811c6(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c6",
            "calling": [
                "FUN_00084728"
            ],
            "imported": false,
            "current_name": "return_zero_000811c6"
        },
        "FUN_00083d00": {
            "renaming": {
                "FUN_00083d00": "calculate_and_set_size_00083d00",
                "param_1": "starting_address",
                "param_2": "size",
                "iVar1": "data_section_start",
                "puVar2": "new_size_ptr",
                "iVar3": "sum",
                "uVar4": "mask",
                "iVar5": "new_end_address"
            },
            "code": "int calculate_and_set_size_00083d00(int starting_address, int size)\n{\n  int data_section_start = DAT_00083d90;\n  do_nothing_00082598();\n  uint32_t mask = *(uint32_t *)(*(int *)(data_section_start + 8) + 4) & 0xfffffffc;\n  int new_end_address = ((mask - size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < new_end_address) {\n    int sum = calculate_sum_and_set_if_valid_00082970(starting_address,0);\n    if (sum == *(int *)(data_section_start + 8) + mask) {\n      sum = calculate_sum_and_set_if_valid_00082970(starting_address,-new_end_address);\n      undefined *new_size_ptr = PTR_DAT_00083d94;\n      if (sum != -1) {\n        int old_size = *(int *)PTR_DAT_00083d94;\n        *(uint32_t *)(*(int *)(data_section_start + 8) + 4) = mask - new_end_address | 1;\n        *(int *)new_size_ptr = old_size - new_end_address;\n        do_nothing_0008259c(starting_address);\n        return 1;\n      }\n      new_end_address = calculate_sum_and_set_if_valid_00082970(starting_address,0);\n      new_size_ptr = PTR_DAT_00083d94;\n      mask = new_end_address - *(int *)(data_section_start + 8);\n      if (0xf < mask) {\n        int old_start = *DAT_00083d98;\n        *(uint32_t *)(*(int *)(data_section_start + 8) + 4) = mask | 1;\n        *(int *)new_size_ptr = new_end_address - old_start;\n      }\n    }\n  }\n  do_nothing_0008259c(starting_address);\n  return 0;\n}",
            "called": [
                "FUN_00082970",
                "FUN_00082598",
                "FUN_0008259c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d00",
            "calling": [
                "FUN_00083d9c"
            ],
            "imported": false,
            "current_name": "calculate_and_set_size_00083d00"
        }
    },
    "used_tokens": 96991,
    "layers": [
        [
            "FUN_00081042",
            "FUN_00081d1c",
            "FUN_000847ac",
            "FUN_00080118",
            "FUN_00080f24",
            "FUN_00080e04",
            "FUN_00080f9c",
            "FUN_00081454",
            "FUN_000813e4",
            "FUN_00084290",
            "FUN_00081bf4",
            "FUN_00081d7c",
            "FUN_00081388",
            "FUN_00082994",
            "FUN_00080d2e",
            "FUN_0008189c",
            "FUN_0008234c",
            "FUN_000815f8",
            "FUN_00084384",
            "FUN_00081034",
            "thunk_FUN_00081714",
            "FUN_00081714",
            "FUN_0008477c",
            "FUN_000813c2",
            "FUN_000814e4",
            "FUN_00080d54",
            "FUN_0008021c",
            "FUN_00081d5c",
            "FUN_000811be",
            "FUN_000825a0",
            "FUN_000811cc",
            "FUN_00081894",
            "FUN_000845bc",
            "FUN_00082504",
            "FUN_000800f4",
            "FUN_000803d4",
            "FUN_00080e18",
            "FUN_00081184",
            "FUN_00084298",
            "FUN_00081066",
            "FUN_00081cd0",
            "FUN_00081df4",
            "FUN_00080da0",
            "FUN_00082438",
            "FUN_0008105c",
            "FUN_000811b4",
            "FUN_000816d4",
            "FUN_00080d7a",
            "FUN_00080e9c",
            "FUN_000811ae",
            "FUN_0008118c",
            "FUN_00082a50",
            "FUN_0008106e",
            "FUN_000811c2",
            "FUN_000811c6"
        ],
        [
            "FUN_00080ce0",
            "FUN_00083b14",
            "FUN_00081210",
            "FUN_00084728",
            "FUN_000846b4",
            "FUN_000813a8",
            "FUN_00081c5c",
            "FUN_00083974",
            "FUN_00084700",
            "FUN_00084750",
            "FUN_00082970",
            "FUN_000815d4",
            "FUN_000846dc",
            "FUN_00080410",
            "FUN_00081622",
            "FUN_00081508",
            "FUN_0008456c"
        ],
        [
            "FUN_00081c94",
            "FUN_000842a4",
            "FUN_00080c0c",
            "FUN_00081318",
            "FUN_0008449c",
            "FUN_00081c54",
            "FUN_0008163a",
            "FUN_00084464",
            "FUN_00083d00"
        ],
        [
            "FUN_00083d9c",
            "FUN_00081ca8",
            "FUN_000801b0",
            "FUN_00080ae4",
            "FUN_00080164",
            "FUN_00080258"
        ],
        [
            "FUN_000804a8",
            "FUN_000802da",
            "FUN_00081e04",
            "FUN_00083adc",
            "FUN_0008043e",
            "FUN_00083808"
        ],
        [
            "FUN_000816a8",
            "FUN_000815fe",
            "FUN_000846a4",
            "FUN_000844c4",
            "FUN_0008378c",
            "FUN_0008160c"
        ],
        [
            "FUN_00083c40",
            "FUN_0008165c"
        ],
        [
            "FUN_00082ac0",
            "FUN_00081682"
        ],
        [
            "FUN_00080a68"
        ]
    ],
    "locked_functions": []
}