{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initializeFlag_000800f4(undefined4 inputValue)\n\n{\n  if ((char)DAT_2007089c == '\\0') {\n    DAT_2007089c._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_flag_000800f4",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_system_00080164",
            "code": "\nvoid initializeSystem_00080164(int **systemData)\n\n{\n  int returnValue;\n  \n  *systemData = &DAT_20070b60;\n  (**(code **)(DAT_20070b60 + 0x18))(&DAT_20070b60);\n  if (1 < *(byte *)((int)systemData + 6)) {\n    updateParameterValues1(*(byte *)((int)systemData + 6),1);\n    updateParameterValues2(*(undefined *)((int)systemData + 6),0);\n  }\n  do {\n    returnValue = (**(code **)(**systemData + 0xc))();\n  } while (-1 < returnValue);\n  *(undefined *)((int)systemData + 0x49) = 0;\n  *(undefined *)((int)systemData + 0x4a) = 0;\n  *(undefined2 *)(systemData + 0x15) = 0;\n  *(undefined2 *)((int)systemData + 0x52) = 0;\n  *(undefined2 *)(systemData + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_system_00080164",
                "param_1": "systemData",
                "iVar1": "returnValue",
                "update_param_value_00081210": "updateParameterValues1",
                "update_param_and_set_values_00081318": "updateParameterValues2"
            },
            "calling": [
                "FUN_000804a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801b0": {
            "entrypoint": "0x000801b0",
            "current_name": "process_param_000801b0",
            "code": "\nint processParam_000801b0(int **param)\n\n{\n  bool isOverflow;\n  undefined newValue;\n  char charValue;\n  int result;\n  byte counter;\n  \n  if (1 < *(byte *)((int)param + 6)) {\n    update_param_and_set_values_00081318(*(byte *)((int)param + 6),0);\n  }\n  isOverflow = false;\n  *(undefined *)((int)param + 0x49) = 0;\n  if (*(byte *)((int)param + 5) < 4) {\n    while (result = (**(code **)(**param + 8))(), result != 0) {\n      counter = *(byte *)((int)param + 0x49);\n      newValue = (**(code **)(**param + 0xc))();\n      charValue = *(char *)((int)param + 0x49);\n      *(undefined *)((int)param + counter + 9) = newValue;\n      counter = charValue + 1;\n      *(byte *)((int)param + 0x49) = counter;\n      if (0x3f < counter) {\n        isOverflow = true;\n      }\n    }\n  }\n  *(short *)(param + 0x14) = *(short *)(param + 0x14) + 1;\n  if (isOverflow) {\n    charValue = -3;\n    *(short *)(param + 0x15) = *(short *)(param + 0x15) + 1;\n  }\n  else {\n    charValue = *(char *)((int)param + 0x49);\n  }\n  return (int)charValue;\n}\n\n",
            "renaming": {
                "FUN_000801b0": "process_param_000801b0",
                "param_1": "param",
                "bVar1": "isOverflow",
                "uVar2": "newValue",
                "cVar3": "charValue",
                "iVar4": "result",
                "bVar5": "counter"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008021c": {
            "entrypoint": "0x0008021c",
            "current_name": "calculate_crc_0008021c",
            "code": "\nuint calculateCRC_0008021c(int startAddress,uint length)\n\n{\n  int currentAddress;\n  uint crc;\n  char bitCount;\n  uint bitValue;\n  \n  crc = 0xffff;\n  for (currentAddress = startAddress; (currentAddress - startAddress & 0xffU) < length; currentAddress = currentAddress + 1) {\n    crc = crc ^ *(byte *)(currentAddress + 9);\n    bitCount = '\\b';\n    do {\n      bitValue = crc & 1;\n      crc = crc >> 1;\n      if (bitValue != 0) {\n        crc = crc ^ 0xa001;\n      }\n      bitCount = bitCount + -1;\n    } while (bitCount != '\\0');\n  }\n  return (crc & 0xff) << 8 | crc >> 8;\n}\n\n",
            "renaming": {
                "FUN_0008021c": "calculate_crc_0008021c",
                "param_1": "startAddress",
                "param_2": "length",
                "iVar1": "currentAddress",
                "uVar2": "crc",
                "cVar3": "bitCount",
                "uVar4": "bitValue"
            },
            "calling": [
                "FUN_00080258"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080258": {
            "entrypoint": "0x00080258",
            "current_name": "update_parameter_and_set_value_00080258",
            "code": "\nvoid updateParameterAndSetValue_00080258(int **pointer,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte byteValue;\n  undefined2 calculatedCRC;\n  int integerValue;\n  uint uintValue;\n  \n  byteValue = *(byte *)((int)pointer + 0x49);\n  uintValue = (uint)byteValue;\n  calculatedCRC = calculate_crc_0008021c(pointer,uintValue,param3,param4,param4);\n  *(char *)((int)pointer + uintValue + 9) = (char)((ushort)calculatedCRC >> 8);\n  *(char *)((int)pointer + (uintValue + 1 & 0xff) + 9) = (char)calculatedCRC;\n  *(byte *)((int)pointer + 0x49) = byteValue + 2;\n  if (1 < *(byte *)((int)pointer + 6)) {\n    update_param_and_set_values_00081318(*(byte *)((int)pointer + 6),1);\n  }\n  if (*(byte *)((int)pointer + 5) < 4) {\n    (**(code **)(**pointer + 4))(*pointer,(int)pointer + 9,*(undefined *)((int)pointer + 0x49));\n  }\n  if (1 < *(byte *)((int)pointer + 6)) {\n    update_param_and_set_values_00081318(*(byte *)((int)pointer + 6),0);\n  }\n  if (*(byte *)((int)pointer + 5) < 4) {\n    do {\n      integerValue = (**(code **)(**pointer + 0xc))();\n    } while (-1 < integerValue);\n  }\n  *(undefined *)((int)pointer + 0x49) = 0;\n  integerValue = get_data_value_thunk_00081714();\n  pointer[0x17] = (int *)(integerValue + (uint)*(ushort *)((int)pointer + 0x56));\n  *(short *)((int)pointer + 0x52) = *(short *)((int)pointer + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080258": "update_parameter_and_set_value_00080258",
                "param_1": "pointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "byteValue",
                "uVar2": "calculatedCRC",
                "iVar3": "integerValue",
                "uVar4": "uintValue"
            },
            "calling": [
                "FUN_000802da"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_0008021c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000802da": {
            "entrypoint": "0x000802da",
            "current_name": "validate_and_update_parameters_000802da",
            "code": "\nint validate_and_update_parameters_000802da(int param_ptr,uint flag_value,uint param_value,ushort *data_ptr)\n\n{\n  char error_code;\n  byte byte_var;\n  undefined undefined_var;\n  ushort ushort_var;\n  uint uint_var;\n  ushort *ushort_ptr;\n  undefined lower_byte;\n  undefined upper_byte;\n  ushort ushort_val;\n  \n  lower_byte = (undefined)flag_value;\n  upper_byte = (undefined)(flag_value >> 8);\n  ushort_val = (ushort)param_value;\n  uint_var = param_value & 0xffff;\n  if (*(char *)(param_ptr + 4) != '\\0') {\n    error_code = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(param_ptr + 7) != '\\0') {\n    error_code = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < ((flag_value & 0xff) - 1 & 0xff)) {\n    error_code = -3;\n    goto LAB_000803cc;\n  }\n  *(undefined *)(param_ptr + 9) = lower_byte;\n  *(undefined *)(param_ptr + 10) = upper_byte;\n  *(ushort **)(param_ptr + 0x4c) = data_ptr;\n  *(char *)(param_ptr + 0xb) = (char)(flag_value >> 0x18);\n  *(char *)(param_ptr + 0xc) = (char)(flag_value >> 0x10);\n  undefined_var = (undefined)(param_value >> 8);\n  switch(upper_byte) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(param_ptr + 0xd) = undefined_var;\n    break;\n  case 5:\n    ushort_var = *data_ptr;\n    if (ushort_var != 0) {\n      ushort_var = 1;\n    }\n    *(char *)(param_ptr + 0xd) = -(char)ushort_var;\n    uint_var = 0;\n    break;\n  case 6:\n    *(char *)(param_ptr + 0xd) = (char)(*data_ptr >> 8);\n    uint_var = (uint)*data_ptr;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    byte_var = (byte)(ushort_val >> 3) & 0xfe;\n    if ((param_value & 0xf) != 0) {\n      byte_var = byte_var + 1;\n    }\n    *(char *)(param_ptr + 0xe) = (char)param_value;\n    *(undefined *)(param_ptr + 0xd) = undefined_var;\n    *(byte *)(param_ptr + 0xf) = byte_var;\n    undefined_var = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(param_ptr + 0xd) = undefined_var;\n    *(char *)(param_ptr + 0xe) = (char)param_value;\n    data_ptr = data_ptr + -1;\n    *(char *)(param_ptr + 0xf) = (char)uint_var * '\\x02';\n    *(undefined *)(param_ptr + 0x49) = 7;\n    ushort_ptr = data_ptr + uint_var;\n    while (data_ptr != ushort_ptr) {\n      byte_var = *(byte *)(param_ptr + 0x49);\n      *(char *)(param_ptr + (uint)byte_var + 9) = (char)(data_ptr[1] >> 8);\n      uint_var = byte_var + 1 & 0xff;\n      *(char *)(param_ptr + 0x49) = (char)uint_var;\n      data_ptr = data_ptr + 1;\n      *(char *)(uint_var + param_ptr + 9) = (char)*data_ptr;\n      *(byte *)(param_ptr + 0x49) = byte_var + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(param_ptr + 0xe) = (char)uint_var;\n  undefined_var = 6;\nLAB_0008034a:\n  *(undefined *)(param_ptr + 0x49) = undefined_var;\nswitchD_0008031e_caseD_7:\n  update_parameter_and_set_value_00080258(param_ptr);\n  *(undefined *)(param_ptr + 7) = 1;\n  error_code = '\\0';\nLAB_000803cc:\n  return (int)error_code;\n}\n\n",
            "renaming": {
                "FUN_000802da": "validate_and_update_parameters_000802da",
                "param_1": "param_ptr",
                "param_2": "flag_value",
                "param_3": "param_value",
                "param_4": "data_ptr",
                "cVar1": "error_code",
                "bVar2": "byte_var",
                "uVar3": "undefined_var",
                "uVar4": "ushort_var",
                "uVar5": "uint_var",
                "puVar6": "ushort_ptr",
                "local_1c": "lower_byte",
                "local_1b": "upper_byte",
                "local_18": "ushort_val"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00080258"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803d4": {
            "entrypoint": "0x000803d4",
            "current_name": "check_and_update_value_000803d4",
            "code": "\nundefined4 checkAndUpdateValue_000803d4(int inputValue)\n\n{\n  int index;\n  \n  if ((int)((uint)*(byte *)(inputValue + 10) << 0x18) < 0) {\n    *(short *)(inputValue + 0x54) = *(short *)(inputValue + 0x54) + 1;\n    return 0xfb;\n  }\n  index = 0;\n  do {\n    if ((&DAT_00084d10)[index] == *(byte *)(inputValue + 10)) {\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 8);\n  *(short *)(inputValue + 0x54) = *(short *)(inputValue + 0x54) + 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000803d4": "check_and_update_value_000803d4",
                "param_1": "inputValue",
                "iVar1": "index"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080410": {
            "entrypoint": "0x00080410",
            "current_name": "process_data_00080410",
            "code": "\nvoid processData_00080410(int dataPointer,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 combinedParams;\n  int offset;\n  byte counter;\n  uint convertedCounter;\n  int dataArrayPointer;\n  \n  counter = 0;\n  while( true ) {\n    convertedCounter = (uint)counter;\n    counter = counter + 1;\n    if (*(byte *)(dataPointer + 0xb) >> 1 <= convertedCounter) break;\n    offset = (convertedCounter * 2 + 3 & 0xff) + dataPointer;\n    dataArrayPointer = *(int *)(dataPointer + 0x4c);\n    combinedParams = combine_params_000815f8(*(undefined *)(offset + 9),*(undefined *)(offset + 10),offset,\n                         *(byte *)(dataPointer + 0xb),param4);\n    *(undefined2 *)(dataArrayPointer + convertedCounter * 2) = combinedParams;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080410": "process_data_00080410",
                "param_1": "dataPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "combinedParams",
                "iVar2": "offset",
                "bVar3": "counter",
                "uVar4": "convertedCounter",
                "iVar5": "dataArrayPointer"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_000815f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008043e": {
            "entrypoint": "0x0008043e",
            "current_name": "process_data_0008043e",
            "code": "\nint processData_0008043e(int **inputParams)\n\n{\n  char result;\n  uint returnValue;\n  int *dataValue;\n  int checkResult;\n  uint maskedValue;\n  \n  if (*(byte *)((int)inputParams + 5) < 4) {\n    returnValue = (**(code **)(**inputParams + 8))();\n    maskedValue = returnValue & 0xff;\n  }\n  dataValue = (int *)get_data_value_thunk_00081714();\n  if (inputParams[0x17] < dataValue) {\n    *(undefined *)(inputParams + 2) = 0xff;\n    *(undefined *)((int)inputParams + 7) = 0;\n    *(short *)(inputParams + 0x15) = *(short *)(inputParams + 0x15) + 1;\n  }\n  else if (7 < maskedValue) {\n    process_param_000801b0(inputParams);\n    checkResult = check_and_update_value_000803d4(inputParams);\n    if (checkResult == 0) {\n      if (*(byte *)((int)inputParams + 10) - 3 < 2) {\n        process_data_00080410(inputParams);\n      }\n      *(undefined *)((int)inputParams + 7) = 0;\n      result = *(char *)((int)inputParams + 0x49);\n    }\n    else {\n      *(undefined *)((int)inputParams + 7) = 0;\n      result = (char)checkResult;\n    }\n    goto LAB_000804a2;\n  }\n  result = '\\0';\nLAB_000804a2:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_0008043e": "process_data_0008043e",
                "param_1": "inputParams",
                "cVar1": "result",
                "uVar2": "returnValue",
                "piVar3": "dataValue",
                "iVar4": "checkResult",
                "unaff_r6": "maskedValue"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "thunk_FUN_00081714",
                "FUN_000801b0",
                "FUN_00080410",
                "FUN_000803d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000804a8": {
            "entrypoint": "0x000804a8",
            "current_name": "initialize_system_000804a8",
            "code": "\nundefined8 initialize_system_000804a8(void)\n\n{\n  int value;\n  \n  updateParamValue(1,0);\n  updateParamValue(6,1);\n  updateParamValue(0,1);\n  updateParamValue(1,1);\n  updateParamAndSetValues(0,0);\n  updateParamAndSetValues(1,0);\n  DAT_2007098a = 0x13;\n  DAT_2007098c._0_2_ = 10;\n  DAT_20070990 = &DAT_200708f2;\n  DAT_2007097d = 3;\n  DAT_20070995 = 3;\n  DAT_20070996 = 0x14;\n  DAT_200709a4._0_2_ = 3;\n  DAT_20070980._0_2_ = 0x10;\n  DAT_20070984 = &DAT_200708cc;\n  DAT_20070989 = 0x10;\n  DAT_20070998._0_2_ = 0xc;\n  DAT_200709a1 = 0x10;\n  DAT_200709b0._0_2_ = 8;\n  DAT_200709a2 = 0x1c;\n  DAT_200709a8 = &DAT_20070904;\n  DAT_200709ac = 2;\n  DAT_200709ad = 2;\n  DAT_200709b4 = &DAT_200709cc;\n  DAT_200709b8 = 2;\n  DAT_2007097c = 1;\n  DAT_20070988 = 1;\n  DAT_20070994 = 1;\n  DAT_200709a0 = 1;\n  DAT_200709ba = 1;\n  DAT_200709bc = 1;\n  DAT_2007097e = 0;\n  DAT_2007099c = &DAT_200708f4;\n  DAT_200709ae = 0;\n  DAT_200709b9 = 5;\n  DAT_200709c0 = &DAT_200709ce;\n  initializeSystem(&DAT_200709e4,0x4b00);\n  DAT_20070a3a = 2000;\n  DAT_200708c8 = getDataValueThunk();\n  value = getDataValueThunk();\n  DAT_200709e0 = value + 1000;\n  value = getDataValueThunk();\n  DAT_20070a48 = value + 1000;\n  value = getDataValueThunk();\n  DAT_20070934 = value + 1000;\n  value = getDataValueThunk();\n  DAT_200708c0 = value + 1000;\n  DAT_20070948 = 0;\n  if (DAT_200708b8 == 0) {\n    performSoftwareInterrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000804a8": "initialize_system_000804a8",
                "update_param_value_00081210": "updateParamValue",
                "update_param_and_set_values_00081318": "updateParamAndSetValues",
                "software_interrupt": "performSoftwareInterrupt",
                "get_data_value_thunk_00081714": "getDataValueThunk",
                "initialize_system_00080164": "initializeSystem",
                "iVar1": "value"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_00080164",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805d0": {
            "entrypoint": "0x000805d0",
            "current_name": "process_data_and_calculate_values_000805d0",
            "code": "\n\n\nvoid processDataAndCalculateValues_000805d0(void)\n\n{\n  uint dataValue1;\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  int dataValue2;\n  uint *ptr1;\n  undefined4 *ptr2;\n  \n  switch(DAT_20070948) {\n  case '\\0':\n    dataValue1 = get_data_value_thunk_00081714();\n    if (DAT_200708c8 < dataValue1) goto LAB_000806ca;\n    break;\n  case '\\x01':\n    process_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      validate_and_update_parameters_000802da(&DAT_200709e4,_DAT_2007097c,DAT_20070980,DAT_20070984);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_data_value_thunk_00081714();\n      DAT_20070940 = (uint)DAT_200708ce;\n      DAT_20070944 = (uint)DAT_200708d0;\n      DAT_20070a4c = calculate_value_00081894(DAT_200708d8);\n      DAT_2007094c = calculate_unsigned_value_0008189c(DAT_200708da / 10);\n      DAT_200709c4 = calculate_value_00081894(DAT_200708dc);\n      DAT_20070974 = (uint)DAT_200708e4;\n      DAT_20070970 = (uint)DAT_200708de;\n      DAT_20070924 = (uint)DAT_200708e8;\n      DAT_20070928 = (uint)DAT_200708ea;\n    }\n    break;\n  case '\\x02':\n  case '\\x04':\n  case '\\x06':\n  case '\\b':\n    process_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_data_value_thunk_00081714();\n    }\n    break;\n  case '\\x03':\n    process_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      validate_and_update_parameters_000802da(&DAT_200709e4,_DAT_20070994,DAT_20070998,DAT_2007099c);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_data_value_thunk_00081714();\n      DAT_20070938 = (uint)DAT_20070908;\n      DAT_20070920 = (uint)DAT_20070906;\n    }\n    break;\n  case '\\x05':\n    process_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      ptr2 = (undefined4 *)&DAT_20070988;\nLAB_000806c4:\n      validate_and_update_parameters_000802da(&DAT_200709e4,*ptr2,ptr2[1],ptr2[2]);\n      goto LAB_000806ca;\n    }\n    break;\n  case '\\a':\n    process_data_0008043e(&DAT_200709e4);\n    if ((DAT_20070918 == 1) && (DAT_200709eb == '\\0')) {\n      DAT_20070906 = 0;\n      ptr2 = (undefined4 *)&DAT_200709a0;\n      DAT_20070918 = 0;\n      goto LAB_000806c4;\n    }\nLAB_000806ca:\n    DAT_20070948 = DAT_20070948 + '\\x01';\n    break;\n  case '\\t':\n    process_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      validate_and_update_parameters_000802da(&DAT_200709e4,_DAT_200709ac,DAT_200709b0,DAT_200709b4);\n      DAT_200708c8 = get_data_value_thunk_00081714();\n    }\n    DAT_20070948 = '\\0';\n  }\n  DAT_20070978 = DAT_20070924 - DAT_20070950;\n  if (DAT_20070978 < 0) {\n    DAT_20070978 = DAT_20070978 + 0x3c;\n  }\n  DAT_200708bc = DAT_20070928 - DAT_2007090c;\n  if ((int)DAT_200708bc < 0) {\n    DAT_20070978 = DAT_20070978 + -1;\n    DAT_200708bc = DAT_200708bc + 0x3c;\n  }\n  DAT_20070902 = (undefined2)DAT_20070978;\n  DAT_20070904 = (undefined2)DAT_200708bc;\n  if ((DAT_20070978 == 0) && (DAT_200708bc == 0)) {\n    DAT_20070918 = 1;\n    DAT_20070950 = DAT_200708bc;\n    DAT_2007090c = DAT_200708bc;\n  }\n  if (DAT_20070964 == DAT_20070924) {\n    DAT_20070968 = 1 - DAT_20070928;\n    if (1 < DAT_20070928) {\n      DAT_20070968 = 0;\n    }\n    if (DAT_20070968 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    DAT_20070968 = DAT_20070928;\n    DAT_20070950 = 0;\n    DAT_2007090c = 0;\n    DAT_20070960 = 0;\n    DAT_20070964 = DAT_20070924;\n  }\n  if (DAT_20070920 == 0) {\n    DAT_20070950 = DAT_20070920;\n    DAT_2007090c = DAT_20070920;\n    ptr1 = (uint *)&DAT_20070960;\nLAB_000808f2:\n    *ptr1 = DAT_2007090c;\n  }\n  else {\n    if (DAT_20070920 != 1) goto LAB_000808f4;\n    if ((DAT_20070960 < (int)DAT_20070938) && (dataValue1 = get_data_value_thunk_00081714(), DAT_200708c0 < dataValue1))\n    {\n      DAT_20070960 = DAT_20070960 + 1;\n      dataValue2 = get_data_value_thunk_00081714();\n      DAT_200708c0 = dataValue2 + 1000;\n    }\n    if (DAT_20070960 < (int)DAT_20070938) goto LAB_000808f4;\n    DAT_20070960 = DAT_20070938 + 1;\n    if ((int)DAT_20070950 < (int)DAT_20070924) {\n      dataValue1 = get_data_value_thunk_00081714();\n      if (DAT_200708c0 < dataValue1) {\n        DAT_2007090c = DAT_2007090c + 1;\n        dataValue2 = get_data_value_thunk_00081714();\n        DAT_200708c0 = dataValue2 + 1000;\n      }\n    }\n    else {\n      if (DAT_20070950 != DAT_20070924) goto LAB_000808f4;\n      if ((int)DAT_20070928 < (int)DAT_2007090c) {\n        ptr1 = &DAT_20070950;\n        DAT_2007090c = 0;\n        goto LAB_000808f2;\n      }\n      dataValue1 = get_data_value_thunk_00081714();\n      if (DAT_200708c0 < dataValue1) {\n        DAT_2007090c = DAT_2007090c + 1;\n        dataValue2 = get_data_value_thunk_00081714();\n        DAT_200708c0 = dataValue2 + 1000;\n      }\n    }\n    if (0x3b < (int)DAT_2007090c) {\n      DAT_2007090c = 0;\n      DAT_20070950 = DAT_20070950 + 1;\n    }\n  }\nLAB_000808f4:\n  dataValue1 = get_data_value_thunk_00081714();\n  if (DAT_200709e0 < dataValue1) {\n    result1 = calculate_unsigned_value_0008189c(DAT_20070940);\n    result2 = calculate_floating_point_00081730(result1,DAT_200709c8);\n    result1 = DAT_200708c4;\n    DAT_20070930 = result2;\n    result3 = floating_point_addition_00081734(result2,DAT_200708c4);\n    result3 = compute_float_00081944(result3,DAT_2007094c);\n    result3 = floating_point_addition_00081734(result3,DAT_20070914);\n    DAT_2007094c = result3;\n    result1 = calculate_floating_point_00081730(result2,result1);\n    result1 = compute_float_00081944(result1,DAT_200709c4);\n    result1 = calculate_floating_point_00081730(result1,DAT_2007096c);\n    DAT_200709c4 = result1;\n    result4 = compute_float_00081944(result2,DAT_20070a4c);\n    result4 = floating_point_addition_00081734(result4,result3);\n    floating_point_addition_00081734(result4,result1);\n    DAT_20070910 = decode_value_00081cd0();\n    DAT_2007091c = calculate_unsigned_value_0008189c();\n    DAT_2007092c = 0;\n    DAT_200708c4 = result2;\n    DAT_20070914 = result3;\n    DAT_2007096c = result1;\n    dataValue2 = get_data_value_thunk_00081714();\n    DAT_200709e0 = dataValue2 + DAT_20070970;\n  }\n  result1 = calculate_unsigned_value_0008189c(DAT_20070970);\n  dataValue2 = check_concatenated_parameters_00081ca8(DAT_2007091c,result1);\n  if (dataValue2 != 0) {\n    DAT_2007091c = result1;\n  }\n  dataValue2 = check_parameter_concatenation_00081c94(DAT_2007091c,0);\n  if (dataValue2 != 0) {\n    DAT_2007091c = 0;\n  }\n  DAT_200708f6 = reverse_bit_pattern_00081d1c(DAT_2007091c);\n  DAT_2007092c = DAT_2007092c + 1;\n  DAT_2007093c = DAT_200709cc & 1 ^ 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805d0": "process_data_and_calculate_values_000805d0",
                "uVar1": "dataValue1",
                "uVar2": "result1",
                "uVar3": "result2",
                "uVar4": "result3",
                "uVar5": "result4",
                "iVar6": "dataValue2",
                "puVar7": "ptr1",
                "puVar8": "ptr2"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081734",
                "thunk_FUN_00081714",
                "FUN_00081944",
                "FUN_00081d1c",
                "FUN_00081894",
                "FUN_00081730",
                "FUN_0008189c",
                "FUN_000802da",
                "FUN_00081cd0",
                "FUN_00081c94",
                "FUN_00081ca8",
                "FUN_0008043e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a68": {
            "entrypoint": "0x00080a68",
            "current_name": "initialize_function_00080a68",
            "code": "\nvoid initializeFunction_00080a68(void)\n\n{\n  initialize_parameters_00081682(&DAT_20070954,\"\");\n  updateRelocationEntry(&DAT_20070954,0x815ff,0x2007002c);\n  DAT_200709e8 = 0;\n  DAT_200709e9 = 0;\n  DAT_200709ea = 6;\n  DAT_20070a3a = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a68": "initialize_function_00080a68",
                "update_relocation_entry_00081d5c": "updateRelocationEntry"
            },
            "calling": [],
            "called": [
                "FUN_00081d5c",
                "FUN_00081682"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "FUNC_00080aa8",
            "code": "\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ab8": {
            "entrypoint": "0x00080ab8",
            "current_name": "FUNC_00080ab8",
            "code": "\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080aba": {
            "entrypoint": "0x00080aba",
            "current_name": "FUNC_00080aba",
            "code": "\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080abc": {
            "entrypoint": "0x00080abc",
            "current_name": "FUNC_00080abc",
            "code": "\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ae4": {
            "entrypoint": "0x00080ae4",
            "current_name": "initialize_and_update_parameters_00080ae4",
            "code": "\n\n\nvoid initialize_and_update_parameters_00080ae4(void)\n\n{\n  int index;\n  int nextIndex;\n  \n  initialize_memory_00080e9c();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  execute_functions_00081d7c();\n  index = 0;\n  do {\n    nextIndex = index + 1;\n    update_param_and_set_values_00081318(index,0);\n    index = nextIndex;\n  } while (nextIndex != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  update_param_value_00080da0(0x400e0e00,1,0x300,0);\n  update_param_and_set_values_00081318(0,1);\n  update_param_value_00080da0(0x400e0e00,1,0xc00,0);\n  update_param_value_00080da0(0x400e0e00,1,0x3000,0);\n  update_param_value_00080da0(0x400e1400,2,0x30,0);\n  update_param_value_00080da0(0x400e1000,1,0xc00,0);\n  update_param_value_00080da0(0x400e0e00,1,3,0);\n  update_param_value_00080da0(0x400e1000,1,0xc000,0);\n  check_and_set_bit_00080e18(0x25);\n  calculate_index_00080f9c(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  set_parameters_00081042(0x400c0000,0,0x300000,1);\n  set_bitwise_flag_00081034(0x400c0000,0,0);\n  set_param_value_0008106e(0x400c0000,0xffffffff);\n  initialize_value_00081066(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ae4": "initialize_and_update_parameters_00080ae4",
                "iVar1": "index",
                "iVar2": "nextIndex"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00080f9c",
                "FUN_00081034",
                "FUN_0008106e",
                "FUN_00080e18",
                "FUN_00081066",
                "FUN_00081042",
                "FUN_00080e9c",
                "FUN_00080da0",
                "FUN_00081d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c0c": {
            "entrypoint": "0x00080c0c",
            "current_name": "initialize_and_set_up_memory_00080c0c",
            "code": "\nvoid initializeAndSetUpMemory_00080c0c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  initialize_memory_000813a8(&DAT_20070b84);\n  initialize_memory_000813a8(&DAT_20070ad8);\n  initialize_function_000814e4(&DAT_20070b60,0x400e0800,8,8,&DAT_20070b84,&DAT_20070ad8,param3);\n  initialize_memory_000813a8(&DAT_20070de4);\n  initialize_memory_000813a8(&DAT_20070e6c);\n  initialize_memory_000813a8(&DAT_20070ef4);\n  initialize_memory_000813a8(&DAT_20070a50);\n  initialize_memory_000813a8(&DAT_20070c84);\n  initialize_memory_000813a8(&DAT_20070d0c);\n  initialize_and_update_data_000815d4(&DAT_20070c0c,0x40098000,0x11,0x11,&DAT_20070de4,&DAT_20070a50);\n  initialize_and_update_data_000815d4(&DAT_20070c34,0x4009c000,0x12,0x12,&DAT_20070e6c,&DAT_20070c84);\n  initialize_and_update_data_000815d4(&DAT_20070c5c,0x400a4000,0x14,0x14,&DAT_20070ef4,&DAT_20070d0c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080c0c": "initialize_and_set_up_memory_00080c0c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [],
            "called": [
                "FUN_000815d4",
                "FUN_000814e4",
                "FUN_000813a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ce0": {
            "entrypoint": "0x00080ce0",
            "current_name": "check_and_call_functions_00080ce0",
            "code": "\nvoid checkAndCallFunctions_00080ce0(void)\n\n{\n  int result;\n  \n  result = calculateDifference(&DAT_20070b60);\n  if (result != 0) {\n    FUNC_00080aa8();\n  }\n  result = calculateDifference(&DAT_20070c0c);\n  if (result != 0) {\n    FUNC_00080ab8();\n  }\n  result = calculateDifference(&DAT_20070c34);\n  if (result != 0) {\n    FUNC_00080aba();\n  }\n  result = calculateDifference(&DAT_20070c5c);\n  if (result != 0) {\n    FUNC_00080abc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ce0": "check_and_call_functions_00080ce0",
                "iVar1": "result",
                "calculate_difference_000813e4": "calculateDifference"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080aba",
                "FUN_00080ab8",
                "FUN_00080aa8",
                "FUN_000813e4",
                "FUN_00080abc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d2e": {
            "entrypoint": "0x00080d2e",
            "current_name": "update_value_00080d2e",
            "code": "\nvoid updateValue_00080d2e(int objAddress,undefined4 mode,uint newValue)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(objAddress + 0x44) = newValue;\n  switch(mode) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(objAddress + 0x70) & *(uint *)(objAddress + 0x70) & ~newValue;\n    break;\n  case 2:\n    updatedValue = *(uint *)(objAddress + 0x70) | newValue;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint *)(objAddress + 0x70) = updatedValue;\nswitchD_00080d34_caseD_6:\n  *(uint *)(objAddress + 4) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d2e": "update_value_00080d2e",
                "param_1": "objAddress",
                "param_2": "mode",
                "param_3": "newValue",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d54": {
            "entrypoint": "0x00080d54",
            "current_name": "update_param_values_00080d54",
            "code": "\nvoid updateParamValues_00080d54(undefined4 *paramArray,undefined4 newValue,uint bitmask)\n\n{\n  bool isNegative;\n  \n  isNegative = (int)(bitmask << 0x1f) < 0;\n  paramArray[17] = newValue;\n  if (isNegative) {\n    paramArray[25] = newValue;\n  }\n  if (!isNegative) {\n    paramArray[24] = newValue;\n  }\n  isNegative = (bitmask & 10) != 0;\n  if (isNegative) {\n    paramArray[8] = newValue;\n  }\n  if (!isNegative) {\n    paramArray[9] = newValue;\n  }\n  if (((int)(bitmask << 0x1e) < 0) || ((int)(bitmask << 0x1c) < 0)) {\n    paramArray[32] = newValue;\n  }\n  paramArray[5] = newValue;\n  *paramArray = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d54": "update_param_values_00080d54",
                "param_1": "paramArray",
                "param_2": "newValue",
                "param_3": "bitmask",
                "bVar1": "isNegative",
                "param_1[0x11]": "paramArray[17]",
                "param_1[0x19]": "paramArray[25]",
                "param_1[0x18]": "paramArray[24]",
                "param_1[8]": "paramArray[8]",
                "param_1[9]": "paramArray[9]",
                "param_1[0x20]": "paramArray[32]",
                "param_1[5]": "paramArray[5]"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d7a": {
            "entrypoint": "0x00080d7a",
            "current_name": "set_param_values_00080d7a",
            "code": "\nvoid set_param_values_00080d7a(undefined4 *param_array,undefined4 param_value,int flag_1,int flag_2,int flag_3)\n\n{\n  param_array[0x11] = param_value;\n  if (flag_3 == 0) {\n    param_array[0x18] = param_value;\n  }\n  else {\n    param_array[0x19] = param_value;\n  }\n  if (flag_2 == 0) {\n    param_array[0x15] = param_value;\n  }\n  else {\n    param_array[0x14] = param_value;\n  }\n  if (flag_1 == 0) {\n    param_array[0xd] = param_value;\n  }\n  else {\n    param_array[0xc] = param_value;\n  }\n  param_array[4] = param_value;\n  *param_array = param_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d7a": "set_param_values_00080d7a",
                "param_1": "param_array",
                "param_2": "param_value",
                "param_3": "flag_1",
                "param_4": "flag_2",
                "param_5": "flag_3"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080da0": {
            "entrypoint": "0x00080da0",
            "current_name": "update_param_value_00080da0",
            "code": "\nundefined4 updateParamValue_00080da0(int data,int option,undefined4 value,uint flags)\n\n{\n  bool isNegative;\n  \n  switch(option) {\n  case 1:\n  case 2:\n    updateValue(data,option,value);\n    isNegative = (int)(flags << 0x1f) < 0;\n    *(undefined4 *)(data + 0x44) = value;\n    if (isNegative) {\n      *(undefined4 *)(data + 100) = value;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(data + 0x60) = value;\n    }\n    break;\n  case 3:\n    updateParamValue_00080da0s(data,value,flags,0x80d55,data);\n    break;\n  case 4:\n  case 5:\n    setParamValues(data,value,option == 5,(flags << 0x1d) >> 0x1f,flags & 1,option,value)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080da0": "update_param_value_00080da0",
                "param_1": "data",
                "param_2": "option",
                "param_3": "value",
                "param_4": "flags",
                "bVar1": "isNegative",
                "update_value_00080d2e": "updateValue",
                "update_param_values_00080d54": "updateParamValues",
                "set_param_values_00080d7a": "setParamValues"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210"
            ],
            "called": [
                "FUN_00080d54",
                "FUN_00080d7a",
                "FUN_00080d2e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e04": {
            "entrypoint": "0x00080e04",
            "current_name": "check_bitwise_conditions_00080e04",
            "code": "\nuint check_bitwise_conditions_00080e04(int input_value,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(input_value + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(input_value + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080e04": "check_bitwise_conditions_00080e04",
                "param_1": "input_value",
                "param_2": "mask",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081318"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e18": {
            "entrypoint": "0x00080e18",
            "current_name": "check_and_set_bit_00080e18",
            "code": "\n\n\nundefined4 check_and_set_bit_00080e18(uint bit_position)\n\n{\n  uint bit_mask;\n  \n  if (bit_position < 0x2d) {\n    if (bit_position < 0x20) {\n      bit_mask = 1 << (bit_position & 0xff);\n      if ((bit_mask & _DAT_400e0618) != bit_mask) {\n        _DAT_400e0610 = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (bit_position - 0x20 & 0xff);\n      if ((bit_mask & _DAT_400e0708) != bit_mask) {\n        _DAT_400e0700 = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080e18": "check_and_set_bit_00080e18",
                "param_1": "bit_position",
                "uVar1": "bit_mask"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00081508",
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e9c": {
            "entrypoint": "0x00080e9c",
            "current_name": "initialize_memory_00080e9c",
            "code": "\n\n\nvoid initializeMemory_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  arrayOfRelocations[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e9c": "initialize_memory_00080e9c",
                "Elf32_Rel_ARRAY_20070000": "arrayOfRelocations"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080f24",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_2007089c\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_0008588c + iVar1);\n  }\n  for (puVar2 = &DAT_2007089c; puVar2 < (undefined4 *)0x200711c0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  main_loop_000816a8();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000816a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "entrypoint": "0x00080f9c",
            "current_name": "calculate_index_00080f9c",
            "code": "\nundefined4 calculateIndex_00080f9c(undefined4 *output,uint inputSize,int factor1,int factor2)\n\n{\n  uint quotient;\n  uint uIndex;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *output = 1;\n  output[1] = 0;\n  output[0x48] = 0x202;\n  output[0x41] = 0;\n  output[0x45] = 0;\n  quotient = inputSize / (uint)(factor1 * 2);\n  if (inputSize == factor1 * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  uIndex = 0;\n  do {\n    if ((uint)(factor2 * (int)(((ulonglong)inputSize / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        thresholds[uIndex]) {\n      output[1] = (uIndex & 0xf) << 0x10 | (quotient & 0xff) << 8 | output[1];\n      return 0;\n    }\n    uIndex = uIndex + 1;\n  } while (uIndex != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080f9c": "calculate_index_00080f9c",
                "param_1": "output",
                "param_2": "inputSize",
                "param_3": "factor1",
                "param_4": "factor2",
                "local_58": "thresholds",
                "uVar1": "quotient",
                "uVar2": "uIndex"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081034": {
            "entrypoint": "0x00081034",
            "current_name": "set_bitwise_flag_00081034",
            "code": "\nvoid setBitwiseFlag_00081034(int baseAddress,uint value,uint flag)\n\n{\n  *(uint *)(baseAddress + 4) = value | *(uint *)(baseAddress + 4) | (flag & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081034": "set_bitwise_flag_00081034",
                "param_1": "baseAddress",
                "param_2": "value",
                "param_3": "flag"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081042": {
            "entrypoint": "0x00081042",
            "current_name": "set_parameters_00081042",
            "code": "\nvoid setParameters_00081042(int buffer,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(buffer + 4) =\n       value2 | *(uint *)(buffer + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081042": "set_parameters_00081042",
                "param_1": "buffer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008105c": {
            "entrypoint": "0x0008105c",
            "current_name": "set_bit_0008105c",
            "code": "\nvoid setBit_0008105c(int baseAddress,uint bitPosition)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008105c": "set_bit_0008105c",
                "param_1": "baseAddress",
                "param_2": "bitPosition"
            },
            "calling": [
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081066": {
            "entrypoint": "0x00081066",
            "current_name": "initialize_value_00081066",
            "code": "\nvoid initializeValue_00081066(int baseAddress)\n\n{\n  *(undefined4 *)(baseAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081066": "initialize_value_00081066",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008106e": {
            "entrypoint": "0x0008106e",
            "current_name": "set_param_value_0008106e",
            "code": "\nvoid setParamValue_0008106e(int objectAddress,undefined4 newValue)\n\n{\n  *(undefined4 *)(objectAddress + 0x28) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008106e": "set_param_value_0008106e",
                "param_1": "objectAddress",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081184": {
            "entrypoint": "0x00081184",
            "current_name": "return_zero_00081184",
            "code": "\nundefined4 return_zero_00081184(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081184": "return_zero_00081184"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008118c": {
            "entrypoint": "0x0008118c",
            "current_name": "calculate_sum_0008118c",
            "code": "\nint calculateSum_0008118c(int inputNumber)\n\n{\n  int previousSum;\n  \n  if (DAT_20071180 == 0) {\n    DAT_20071180 = 0x200711c0;\n  }\n  previousSum = DAT_20071180;\n  DAT_20071180 = inputNumber + DAT_20071180;\n  return previousSum;\n}\n\n",
            "renaming": {
                "FUN_0008118c": "calculate_sum_0008118c",
                "param_1": "inputNumber",
                "iVar1": "previousSum"
            },
            "calling": [
                "FUN_00082970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ae": {
            "entrypoint": "0x000811ae",
            "current_name": "get_default_value_000811ae",
            "code": "\nuint32_t get_default_value_000811ae(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000811ae": "get_default_value_000811ae",
                "undefined4": "uint32_t"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b4": {
            "entrypoint": "0x000811b4",
            "current_name": "initialize_memory_000811b4",
            "code": "\nundefined4 initializeMemory_000811b4(undefined4 param,int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811b4": "initialize_memory_000811b4",
                "param_1": "param",
                "param_2": "memoryAddress"
            },
            "calling": [
                "FUN_000846b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811be": {
            "entrypoint": "0x000811be",
            "current_name": "check_if_one_000811be",
            "code": "\nundefined4 checkIfOne_000811be(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000811be": "check_if_one_000811be"
            },
            "calling": [
                "FUN_000846dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c2": {
            "entrypoint": "0x000811c2",
            "current_name": "initialize_application_000811c2",
            "code": "\nvoid initializeApplication_000811c2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c2": "initialize_application_000811c2",
                "undefined4": "void"
            },
            "calling": [
                "FUN_00084700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c6": {
            "entrypoint": "0x000811c6",
            "current_name": "clear_memory_000811c6",
            "code": "\nvoid clearMemory_000811c6(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c6": "clear_memory_000811c6",
                "undefined4": "void"
            },
            "calling": [
                "FUN_00084728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811cc": {
            "entrypoint": "0x000811cc",
            "current_name": "process_data_000811cc",
            "code": "\n\n\nuint processData_000811cc(undefined4 arg1,int arg2,uint arg3)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)arg3; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(arg2 + index);\n  }\n  return arg3 & ~((int)arg3 >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_000811cc": "process_data_000811cc",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "iVar1": "index"
            },
            "calling": [
                "FUN_00084464"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00081714": {
            "entrypoint": "0x00081208",
            "current_name": "get_data_value_thunk_00081714",
            "code": "\nundefined4 get_data_value_thunk_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "thunk_FUN_00081714": "get_data_value_thunk_00081714"
            },
            "calling": [
                "FUN_000804a8",
                "FUN_00080258",
                "FUN_000805d0",
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008120c": {
            "entrypoint": "0x0008120c",
            "current_name": "FUNC_0008120c",
            "code": "\nvoid FUNC_0008120c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081210": {
            "entrypoint": "0x00081210",
            "current_name": "update_param_value_00081210",
            "code": "\n\n\nint updateParamValue_00081210(int param1,int param2)\n\n{\n  int result;\n  uint value1;\n  undefined4 value2;\n  uint value3;\n  byte var1;\n  byte var2;\n  int temp1;\n  int temp2;\n  \n  result = param1;\n  if ((&DAT_00084d24)[param1 * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[param1] & 0xf) == 4) {\n      result = set_bit_0008105c(0x400c0000,(&DAT_00084d31)[param1 * 0x1c]);\n    }\n    var2 = (&DAT_20070d94)[param1];\n    var1 = var2 & 0xf;\n    if ((var1 < 3) && (var2 != 0)) {\n      if (var1 == 2) {\n        if (param2 == 0) {\n          return result;\n        }\n      }\n      else if (var1 == 1) {\n        if (param2 == 2) {\n          return result;\n        }\n      }\n      else if (var1 == 3) {\n        if (param2 == 1) {\n          return result;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (param2 != 1) {\nLAB_0008126c:\n      if (param2 == 0) {\n        result = param1 * 0x1c;\n        check_and_set_bit_00080e18(*(undefined4 *)(&DAT_00084d20 + result));\n        result = update_param_value_00080da0(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),0);\n        var2 = (&DAT_20070d94)[param1] & 0xf0 | 2;\n      }\n      else {\n        if (param2 != 2) {\n          return result;\n        }\n        result = param1 * 0x1c;\n        check_and_set_bit_00080e18(*(undefined4 *)(&DAT_00084d20 + result));\n        result = update_param_value_00080da0(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),1);\n        var2 = (&DAT_20070d94)[param1] & 0xf0 | 1;\n      }\n      (&DAT_20070d94)[param1] = var2;\n      return result;\n    }\n    temp1 = param1 * 0x1c;\n    temp2 = *(int *)(&DAT_00084d18 + temp1);\n    if (var2 >> 4 == 0) {\n      value2 = 4;\n    }\n    else {\n      value2 = 5;\n    }\n    result = update_param_value_00080da0(temp2,value2,*(undefined4 *)(&DAT_00084d1c + temp1),\n                         *(undefined4 *)(&DAT_00084d28 + temp1));\n    (&DAT_20070d94)[param1] = (&DAT_20070d94)[param1] & 0xf0 | 3;\n    if (*(int *)(temp2 + 0x18) == -1) {\n      value1 = *(uint *)(&DAT_00084d20 + temp1);\n      if (0x2c < value1) {\n        return 1;\n      }\n      if (value1 < 0x20) {\n        value1 = 1 << (value1 & 0xff);\n        value3 = _DAT_400e0618 & value1;\n        if (value3 == value1) {\n          _DAT_400e0614 = value3;\n        }\n      }\n      else {\n        value1 = 1 << (value1 - 0x20 & 0xff);\n        value3 = _DAT_400e0708 & value1;\n        if (value3 == value1) {\n          _DAT_400e0704 = value3;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081210": "update_param_value_00081210",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "iVar7": "temp1",
                "iVar8": "temp2",
                "uVar2": "value1",
                "uVar3": "value2",
                "uVar4": "value3",
                "bVar5": "var1",
                "bVar6": "var2"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080164",
                "FUN_000804a8"
            ],
            "called": [
                "FUN_0008105c",
                "FUN_00080e18",
                "FUN_00080da0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081318": {
            "entrypoint": "0x00081318",
            "current_name": "update_param_and_set_values_00081318",
            "code": "\nvoid updateParamAndSetValues_00081318(int index,int value,undefined4 newValue)\n\n{\n  int result;\n  undefined4 paramValue;\n  int paramAddress;\n  \n  if ((&DAT_00084d24)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[index] & 0xf) == 5) {\n      update_param_value_00081210(index,1,newValue,5,index,value,newValue);\n    }\n    (&DAT_20070d94)[index] = (&DAT_20070d94)[index] & 0xf | (byte)(value << 4);\n    paramAddress = *(int *)(&DAT_00084d18 + index * 0x1c);\n    paramValue = *(undefined4 *)(&DAT_00084d1c + index * 0x1c);\n    result = check_bitwise_conditions_00080e04(paramAddress,paramValue);\n    if (result == 0) {\n      if (value != 0) {\n        *(undefined4 *)(paramAddress + 100) = paramValue;\n        return;\n      }\n      *(undefined4 *)(paramAddress + 0x60) = paramValue;\n      return;\n    }\n    set_param_values_00080d7a(paramAddress,paramValue,value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081318": "update_param_and_set_values_00081318",
                "param_1": "index",
                "param_2": "value",
                "param_3": "newValue",
                "iVar1": "result",
                "uVar2": "paramValue",
                "iVar3": "paramAddress"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00080164",
                "FUN_000804a8",
                "FUN_000801b0",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00080e04",
                "FUN_00081210",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081388": {
            "entrypoint": "0x00081388",
            "current_name": "execute_if_relocation_offset_is_zero_00081388",
            "code": "\nvoid executeIfRelocationOffsetIsZero_00081388(void)\n\n{\n  if ((relArray[6].relocationInfo != 0xffffffff) &&\n     (relArray[6].relocationInfo = relArray[6].relocationInfo - 1,\n     relArray[6].relocationInfo == 0)) {\n    (*(functionToExecute *)((int)&relArray[0].relocationOffset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081388": "execute_if_relocation_offset_is_zero_00081388",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "r_info": "relocationInfo",
                "r_offset": "relocationOffset",
                "code": "functionToExecute"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813a8": {
            "entrypoint": "0x000813a8",
            "current_name": "initialize_memory_000813a8",
            "code": "\nint initializeMemory_000813a8(int memoryAddress)\n\n{\n  fillMemory(memoryAddress,0,0x80);\n  *(undefined4 *)(memoryAddress + 0x80) = 0;\n  *(undefined4 *)(memoryAddress + 0x84) = 0;\n  return memoryAddress;\n}\n\n",
            "renaming": {
                "FUN_000813a8": "initialize_memory_000813a8",
                "param_1": "memoryAddress",
                "fill_memory_00082504": "fillMemory"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813c2": {
            "entrypoint": "0x000813c2",
            "current_name": "update_and_store_byte_000813c2",
            "code": "\nvoid updateAndStoreByte_000813c2(int data,undefined value)\n\n{\n  uint updatedIndex;\n  \n  updatedIndex = *(int *)(data + 0x80) + 1U & 0x7f;\n  if (updatedIndex != *(uint *)(data + 0x84)) {\n    *(undefined *)(data + *(int *)(data + 0x80)) = value;\n    *(uint *)(data + 0x80) = updatedIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813c2": "update_and_store_byte_000813c2",
                "param_1": "data",
                "param_2": "value",
                "uVar1": "updatedIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813e4": {
            "entrypoint": "0x000813e4",
            "current_name": "calculate_difference_000813e4",
            "code": "\nuint calculate_difference_000813e4(int input_value)\n\n{\n  return *(int *)(*(int *)(input_value + 0x10) + 0x80) - *(int *)(*(int *)(input_value + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081454": {
            "entrypoint": "0x00081454",
            "current_name": "update_data_00081454",
            "code": "\nundefined4 updateData_00081454(int dataStruct,undefined4 newData)\n\n{\n  int ptrData;\n  uint newIndex;\n  \n  ptrData = *(int *)(dataStruct + 0x14);\n  if ((*(int *)(*(int *)(dataStruct + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(ptrData + 0x84) == *(int *)(ptrData + 0x80))) {\n    *(undefined4 *)(*(int *)(dataStruct + 0x18) + 0x1c) = newData;\n  }\n  else {\n    newIndex = *(int *)(ptrData + 0x80) + 1U & 0x8000007f;\n    if ((int)newIndex < 0) {\n      newIndex = (newIndex - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(ptrData + 0x84) == newIndex);\n    *(char *)(ptrData + *(int *)(ptrData + 0x80)) = (char)newData;\n    *(uint *)(*(int *)(dataStruct + 0x14) + 0x80) = newIndex;\n    *(undefined4 *)(*(int *)(dataStruct + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081454": "update_data_00081454",
                "param_1": "dataStruct",
                "param_2": "newData",
                "iVar1": "ptrData",
                "uVar2": "newIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814e4": {
            "entrypoint": "0x000814e4",
            "current_name": "initialize_function_000814e4",
            "code": "\nvoid initializeFunction_000814e4(undefined4 *outputArray,undefined4 inputValue,undefined flag,undefined4 valueA,\n                 undefined4 valueB,undefined4 valueC)\n\n{\n  outputArray[1] = 0;\n  outputArray[2] = 1000;\n  outputArray[6] = inputValue;\n  *outputArray = &PTR_FUN_00081454_1_000857a8;\n  *(undefined *)(outputArray + 7) = flag;\n  outputArray[4] = valueB;\n  outputArray[8] = valueA;\n  outputArray[5] = valueC;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000814e4": "initialize_function_000814e4",
                "param_1": "outputArray",
                "param_2": "inputValue",
                "param_3": "flag",
                "param_4": "valueA",
                "param_5": "valueB",
                "param_6": "valueC"
            },
            "calling": [
                "FUN_000815d4",
                "FUN_00080c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081508": {
            "entrypoint": "0x00081508",
            "current_name": "set_config_values_00081508",
            "code": "\nvoid setConfigValues_00081508(int configPtr,uint factor,undefined4 value)\n\n{\n  int offset;\n  undefined4 *configDataPtr;\n  \n  check_and_set_bit_00080e18(*(undefined4 *)(configPtr + 0x20));\n  configDataPtr = *(undefined4 **)(configPtr + 0x18);\n  configDataPtr[0x48] = 0x202;\n  *configDataPtr = 0xac;\n  configDataPtr[1] = value;\n  configDataPtr[8] = Elf32_Rel_ARRAY_20070000[6].r_offset / factor >> 4;\n  configDataPtr[3] = 0xffffffff;\n  configDataPtr[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(configPtr + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(configPtr + 0x1c) & 0x1f);\n  offset = *(int *)(configPtr + 0x10);\n  *(undefined4 *)(offset + 0x84) = 0;\n  *(undefined4 *)(offset + 0x80) = 0;\n  offset = *(int *)(configPtr + 0x14);\n  *(undefined4 *)(offset + 0x84) = 0;\n  *(undefined4 *)(offset + 0x80) = 0;\n  *configDataPtr = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081508": "set_config_values_00081508",
                "param_1": "configPtr",
                "param_2": "factor",
                "param_3": "value",
                "iVar1": "offset",
                "puVar2": "configDataPtr"
            },
            "calling": [],
            "called": [
                "FUN_00080e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815d4": {
            "entrypoint": "0x000815d4",
            "current_name": "initialize_and_update_data_000815d4",
            "code": "\nundefined4 * initializeAndUpdateData_000815d4(undefined4 *outputData,undefined4 inputData)\n\n{\n  initialize_function_000814e4();\n  *outputData = &PTR_update_data_00081454_1_000857d8;\n  outputData[9] = inputData;\n  return outputData;\n}\n\n",
            "renaming": {
                "FUN_000815d4": "initialize_and_update_data_000815d4",
                "param_1": "outputData",
                "param_2": "inputData"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815f8": {
            "entrypoint": "0x000815f8",
            "current_name": "combine_params_000815f8",
            "code": "\nuint combineParams_000815f8(int value1,uint value2)\n\n{\n  return value2 | value1 << 8;\n}\n\n",
            "renaming": {
                "FUN_000815f8": "combine_params_000815f8",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_00080410"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815fe": {
            "entrypoint": "0x000815fe",
            "current_name": "execute_function_000815fe",
            "code": "\nundefined4 * executeFunction_000815fe(undefined4 *inputArray)\n\n{\n  FUNC_00081e04(*inputArray);\n  return inputArray;\n}\n\n",
            "renaming": {
                "FUN_000815fe": "execute_function_000815fe",
                "param_1": "inputArray"
            },
            "calling": [],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008160c": {
            "entrypoint": "0x0008160c",
            "current_name": "reset_parameters_0008160c",
            "code": "\nvoid resetParameters_0008160c(int *parameter)\n\n{\n  if (*parameter != 0) {\n    FUNC_00081e04();\n  }\n  *parameter = 0;\n  parameter[2] = 0;\n  parameter[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008160c": "reset_parameters_0008160c",
                "param_1": "parameter",
                "param_1[2]": "parameter[2]",
                "param_1[1]": "parameter[1]"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081622": {
            "entrypoint": "0x00081622",
            "current_name": "reallocate_and_update_memory_00081622",
            "code": "\nint reallocateAndUpdateMemory_00081622(int *memoryPointer,int size,undefined4 argument1,undefined4 argument2)\n\n{\n  int newMemoryPointer;\n  \n  newMemoryPointer = reallocate_memory_000825a0(*memoryPointer,size + 1,argument1,argument2,argument2);\n  if (newMemoryPointer != 0) {\n    *memoryPointer = newMemoryPointer;\n    memoryPointer[1] = size;\n    newMemoryPointer = 1;\n  }\n  return newMemoryPointer;\n}\n\n",
            "renaming": {
                "FUN_00081622": "reallocate_and_update_memory_00081622",
                "param_1": "memoryPointer",
                "param_2": "size",
                "param_3": "argument1",
                "param_4": "argument2",
                "iVar1": "newMemoryPointer"
            },
            "calling": [
                "FUN_0008163a"
            ],
            "called": [
                "FUN_000825a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008163a": {
            "entrypoint": "0x0008163a",
            "current_name": "check_and_reallocate_memory_0008163a",
            "code": "\nundefined4 checkAndReallocateMemory_0008163a(int *memory,uint requiredSize)\n\n{\n  int reallocateResult;\n  \n  if ((*memory == 0) || ((uint)memory[1] < requiredSize)) {\n    reallocateResult = reallocate_and_update_memory_00081622(memory);\n    if (reallocateResult == 0) {\n      return 0;\n    }\n    if (memory[2] == 0) {\n      *(undefined *)*memory = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0008163a": "check_and_reallocate_memory_0008163a",
                "param_1": "memory",
                "param_2": "requiredSize",
                "iVar1": "reallocateResult"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008165c": {
            "entrypoint": "0x0008165c",
            "current_name": "update_parameters_0008165c",
            "code": "\nundefined4 * updateParameters_0008165c(undefined4 *parameters,undefined4 sourceString,undefined4 newSize)\n\n{\n  int memoryCheckResult;\n  \n  memoryCheckResult = check_and_reallocate_memory_0008163a(parameters,newSize);\n  if (memoryCheckResult == 0) {\n    reset_parameters_0008160c(parameters);\n  }\n  else {\n    parameters[2] = newSize;\n    copy_string_00082994(*parameters,sourceString);\n  }\n  return parameters;\n}\n\n",
            "renaming": {
                "FUN_0008165c": "update_parameters_0008165c",
                "param_1": "parameters",
                "param_2": "sourceString",
                "param_3": "newSize",
                "iVar1": "memoryCheckResult"
            },
            "calling": [
                "FUN_00081682"
            ],
            "called": [
                "FUN_00082994",
                "FUN_0008160c",
                "FUN_0008163a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081682": {
            "entrypoint": "0x00081682",
            "current_name": "initialize_parameters_00081682",
            "code": "\nundefined4 * initializeParameters_00081682(undefined4 *parameters,int inputValue)\n\n{\n  undefined4 leadingZeros;\n  \n  *parameters = 0;\n  parameters[1] = 0;\n  parameters[2] = 0;\n  if (inputValue != 0) {\n    leadingZeros = countLeadingZeros(inputValue);\n    updateParameters(parameters,inputValue,leadingZeros);\n  }\n  return parameters;\n}\n\n",
            "renaming": {
                "FUN_00081682": "initialize_parameters_00081682",
                "param_1": "parameters",
                "param_2": "inputValue",
                "uVar1": "leadingZeros",
                "count_leading_zeros_00082a50": "countLeadingZeros",
                "update_parameters_0008165c": "updateParameters"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [
                "FUN_00082a50",
                "FUN_0008165c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816a6": {
            "entrypoint": "0x000816a6",
            "current_name": "FUNC_000816a6",
            "code": "\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000816a8": {
            "entrypoint": "0x000816a8",
            "current_name": "main_loop_000816a8",
            "code": "\nvoid mainLoop_000816a8(void)\n\n{\n  initializeMemory();\n  initializeAndUpdateParameters();\n  FUNC_000816a6();\n  FUNC_0008120c(1);\n  initializeSystem();\n  do {\n    processDataAndCalculateValues();\n    checkAndCallFunctions();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816a8": "main_loop_000816a8",
                "initialize_memory_000816d4": "initializeMemory",
                "initialize_and_update_parameters_00080ae4": "initializeAndUpdateParameters",
                "initialize_system_000804a8": "initializeSystem",
                "process_data_and_calculate_values_000805d0": "processDataAndCalculateValues",
                "check_and_call_functions_00080ce0": "checkAndCallFunctions"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00080ae4",
                "FUN_000816d4",
                "FUN_000816a6",
                "FUN_000804a8",
                "FUN_00080ce0",
                "FUN_000805d0",
                "FUN_0008120c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d4": {
            "entrypoint": "0x000816d4",
            "current_name": "initialize_memory_000816d4",
            "code": "\n\n\nvoid initializeMemory_000816d4(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816d4": "initialize_memory_000816d4"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081714": {
            "entrypoint": "0x00081714",
            "current_name": "get_data_00081714",
            "code": "\nundefined4 get_data_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "FUN_00081714": "get_data_00081714"
            },
            "calling": [
                "thunk_FUN_00081714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081730": {
            "entrypoint": "0x00081730",
            "current_name": "calculate_floating_point_00081730",
            "code": "\nuint calculateFloatingPoint_00081730(uint input1,uint input2,undefined4 input3,uint output)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint mask1;\n  uint mask2;\n  uint result1;\n  uint result2;\n  uint difference;\n  bool boolCheck;\n  \n  mask1 = input2 ^ 0x80000000;\n  result1 = input1 << 1;\n  boolCheck = result1 == 0;\n  if (!boolCheck) {\n    output = input2 << 1;\n    boolCheck = output == 0;\n  }\n  if (!boolCheck) {\n    boolCheck = result1 == output;\n  }\n  shiftedInput1 = (int)result1 >> 0x18;\n  if (!boolCheck) {\n    boolCheck = shiftedInput1 == -1;\n  }\n  if (!boolCheck) {\n    boolCheck = (int)output >> 0x18 == -1;\n  }\n  if (boolCheck) {\n    shiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      result1 = mask1;\n      if (shiftedInput1 == -1) {\n        result1 = input1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        mask1 = result1;\n      }\n      boolCheck = (result1 & 0x7fffff) == 0;\n      if (boolCheck) {\n        boolCheck = (mask1 & 0x7fffff) == 0;\n      }\n      if (boolCheck) {\n        boolCheck = result1 == mask1;\n      }\n      if (!boolCheck) {\n        result1 = result1 | 0x400000;\n      }\n      return result1;\n    }\n    if (((input1 ^ mask1) & 0x7fffffff) != 0) {\n      if (result1 == 0) {\n        input1 = mask1;\n      }\n      return input1;\n    }\n    if (input1 != mask1) {\n      return 0;\n    }\n    if ((result1 & 0xff000000) == 0) {\n      mask1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        mask1 = mask1 | 0x80000000;\n      }\n      return mask1;\n    }\n    if (result1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  result1 = result1 >> 0x18;\n  output = output >> 0x18;\n  difference = output - result1;\n  boolCheck = difference != 0;\n  result2 = result1;\n  if (boolCheck && result1 <= output) {\n    result2 = result1 + difference;\n  }\n  if (boolCheck && result1 <= output) {\n    mask1 = mask1 ^ input1;\n  }\n  if (boolCheck && result1 <= output) {\n    input1 = input1 ^ mask1;\n  }\n  if (boolCheck && result1 <= output) {\n    mask1 = mask1 ^ input1;\n  }\n  if (output < result1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  result1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  mask2 = mask1 & 0xffffff | 0x800000;\n  if ((mask1 & 0x80000000) != 0) {\n    mask2 = -mask2;\n  }\n  if (result2 == difference) {\n    mask2 = mask2 ^ 0x800000;\n    if (result2 == 0) {\n      result1 = result1 ^ 0x800000;\n      result2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result1 = result1 + ((int)mask2 >> (difference & 0xff));\n  mask2 = mask2 << (0x20 - difference & 0xff);\n  input1 = result1 & 0x80000000;\n  if ((int)result1 < 0) {\n    boolCheck = mask2 != 0;\n    mask2 = -mask2;\n    result1 = -result1 - (uint)boolCheck;\n  }\n  if (result1 < 0x800000) {\n    mask1 = mask2 & 0x80000000;\n    mask2 = mask2 << 1;\n    result1 = result1 * 2 + (uint)(mask1 != 0);\n    mask1 = result2 - 2;\n    if ((result1 & 0x800000) == 0) {\n      difference = LZCOUNT(result1) - 8;\n      result1 = result1 << (difference & 0xff);\n      if ((int)mask1 < (int)difference) {\n        result1 = result1 >> (-(mask1 - difference) & 0xff);\n      }\n      else {\n        result1 = result1 + (mask1 - difference) * 0x800000;\n      }\n      return result1 | input1;\n    }\n  }\n  else {\n    mask1 = result2 - 1;\n    if (0xffffff < result1) {\n      mask1 = result1 & 1;\n      result1 = result1 >> 1;\n      mask2 = (uint)(mask1 != 0) << 0x1f | mask2 >> 1;\n      mask1 = result2;\n      if (0xfd < result2) goto LAB_0008186a;\n    }\n  }\n  result1 = result1 + mask1 * 0x800000 + (uint)(0x7fffffff < mask2);\n  if (mask2 == 0x80000000) {\n    result1 = result1 & 0xfffffffe;\n  }\n  return result1 | input1;\n}\n\n",
            "renaming": {
                "FUN_00081730": "calculate_floating_point_00081730",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "output",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "mask1",
                "uVar4": "mask2",
                "uVar5": "result1",
                "uVar6": "result2",
                "uVar7": "difference",
                "bVar8": "boolCheck"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081734": {
            "entrypoint": "0x00081734",
            "current_name": "floating_point_addition_00081734",
            "code": "\nuint floatingPointAddition_00081734(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint modifiedInput1;\n  uint modifiedInput2;\n  uint difference;\n  uint shiftAmount;\n  bool isEqual;\n  \n  modifiedInput2 = input1 << 1;\n  isEqual = modifiedInput2 == 0;\n  if (!isEqual) {\n    input4 = input2 << 1;\n    isEqual = input4 == 0;\n  }\n  if (!isEqual) {\n    isEqual = modifiedInput2 == input4;\n  }\n  shiftedInput1 = (int)modifiedInput2 >> 0x18;\n  if (!isEqual) {\n    isEqual = shiftedInput1 == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)input4 >> 0x18 == -1;\n  }\n  if (isEqual) {\n    shiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      modifiedInput2 = input2;\n      if (shiftedInput1 == -1) {\n        modifiedInput2 = input1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        input2 = modifiedInput2;\n      }\n      isEqual = (modifiedInput2 & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (input2 & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = modifiedInput2 == input2;\n      }\n      if (!isEqual) {\n        modifiedInput2 = modifiedInput2 | 0x400000;\n      }\n      return modifiedInput2;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (modifiedInput2 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((modifiedInput2 & 0xff000000) == 0) {\n      modifiedInput2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        modifiedInput2 = modifiedInput2 | 0x80000000;\n      }\n      return modifiedInput2;\n    }\n    if (modifiedInput2 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  modifiedInput2 = modifiedInput2 >> 0x18;\n  input4 = input4 >> 0x18;\n  shiftAmount = input4 - modifiedInput2;\n  isEqual = shiftAmount != 0;\n  difference = modifiedInput2;\n  if (isEqual && modifiedInput2 <= input4) {\n    difference = modifiedInput2 + shiftAmount;\n  }\n  if (isEqual && modifiedInput2 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (isEqual && modifiedInput2 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (isEqual && modifiedInput2 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < modifiedInput2) {\n    shiftAmount = -shiftAmount;\n  }\n  if (0x19 < shiftAmount) {\n    return input1;\n  }\n  modifiedInput2 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    modifiedInput2 = -modifiedInput2;\n  }\n  modifiedInput1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    modifiedInput1 = -modifiedInput1;\n  }\n  if (difference == shiftAmount) {\n    modifiedInput1 = modifiedInput1 ^ 0x800000;\n    if (difference == 0) {\n      modifiedInput2 = modifiedInput2 ^ 0x800000;\n      difference = 1;\n    }\n    else {\n      shiftAmount = shiftAmount - 1;\n    }\n  }\n  modifiedInput2 = modifiedInput2 + ((int)modifiedInput1 >> (shiftAmount & 0xff));\n  modifiedInput1 = modifiedInput1 << (0x20 - shiftAmount & 0xff);\n  input1 = modifiedInput2 & 0x80000000;\n  if ((int)modifiedInput2 < 0) {\n    isEqual = modifiedInput1 != 0;\n    modifiedInput1 = -modifiedInput1;\n    modifiedInput2 = -modifiedInput2 - (uint)isEqual;\n  }\n  if (modifiedInput2 < 0x800000) {\n    shiftAmount = modifiedInput1 & 0x80000000;\n    modifiedInput1 = modifiedInput1 << 1;\n    modifiedInput2 = modifiedInput2 * 2 + (uint)(shiftAmount != 0);\n    shiftAmount = difference - 2;\n    if ((modifiedInput2 & 0x800000) == 0) {\n      difference = LZCOUNT(modifiedInput2) - 8;\n      modifiedInput2 = modifiedInput2 << (difference & 0xff);\n      if ((int)shiftAmount < (int)difference) {\n        modifiedInput2 = modifiedInput2 >> (-(shiftAmount - difference) & 0xff);\n      }\n      else {\n        modifiedInput2 = modifiedInput2 + (shiftAmount - difference) * 0x800000;\n      }\n      return modifiedInput2 | input1;\n    }\n  }\n  else {\n    shiftAmount = difference - 1;\n    if (0xffffff < modifiedInput2) {\n      shiftAmount = modifiedInput2 & 1;\n      modifiedInput2 = modifiedInput2 >> 1;\n      modifiedInput1 = (uint)(shiftAmount != 0) << 0x1f | modifiedInput1 >> 1;\n      shiftAmount = difference;\n      if (0xfd < difference) goto LAB_0008186a;\n    }\n  }\n  modifiedInput2 = modifiedInput2 + shiftAmount * 0x800000 + (uint)(0x7fffffff < modifiedInput1);\n  if (modifiedInput1 == 0x80000000) {\n    modifiedInput2 = modifiedInput2 & 0xfffffffe;\n  }\n  return modifiedInput2 | input1;\n}\n\n",
            "renaming": {
                "FUN_00081734": "floating_point_addition_00081734",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "modifiedInput1",
                "uVar4": "modifiedInput2",
                "uVar5": "difference",
                "uVar6": "shiftAmount",
                "bVar7": "isEqual"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081894": {
            "entrypoint": "0x00081894",
            "current_name": "calculate_value_00081894",
            "code": "\nuint calculateValue_00081894(uint inputValue)\n\n{\n  uint result;\n  uint shiftedValue;\n  int intermediateValue;\n  uint mask;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  result = LZCOUNT(inputValue);\n  shiftedValue = result - 8;\n  intermediateValue = shiftedValue * -0x800000 + 0x4a800000;\n  if (7 < result) {\n    mask = 0 << (shiftedValue & 0xff);\n    result = intermediateValue + (inputValue << (shiftedValue & 0xff)) +\n            (0U >> (0x20 - shiftedValue & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  shiftedValue = inputValue << result + 0x18;\n  result = intermediateValue + ((inputValue >> (0x20 - (result + 0x18) & 0xff)) - ((int)shiftedValue >> 0x1f));\n  if ((shiftedValue & 0x7fffffff) == 0) {\n    result = result & ~(shiftedValue >> 0x1f);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081894": "calculate_value_00081894",
                "param_1": "inputValue",
                "uVar1": "result",
                "uVar2": "shiftedValue",
                "iVar3": "intermediateValue",
                "uVar4": "mask"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008189c": {
            "entrypoint": "0x0008189c",
            "current_name": "calculate_unsigned_value_0008189c",
            "code": "\nuint calculateUnsignedValue_0008189c(uint inputValue)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  uint isNegative;\n  int intermediateResult;\n  \n  isNegative = inputValue & 0x80000000;\n  if ((int)isNegative < 0) {\n    inputValue = -inputValue;\n  }\n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputValue);\n  shiftAmount = leadingZeros - 8;\n  intermediateResult = ((isNegative | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftAmount & 0xff);\n    isNegative = intermediateResult + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      isNegative = isNegative & 0xfffffffe;\n    }\n    return isNegative;\n  }\n  shiftAmount = inputValue << leadingZeros + 0x18;\n  isNegative = intermediateResult + ((inputValue >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    isNegative = isNegative & ~(shiftAmount >> 0x1f);\n  }\n  return isNegative;\n}\n\n",
            "renaming": {
                "FUN_0008189c": "calculate_unsigned_value_0008189c",
                "param_1": "inputValue",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "uVar3": "isNegative",
                "iVar4": "intermediateResult"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081944": {
            "entrypoint": "0x00081944",
            "current_name": "compute_float_00081944",
            "code": "\nuint computeFloat_00081944(uint value1,uint value2,undefined4 otherValue,uint moreValue)\n\n{\n  longlong result;\n  uint float1;\n  uint byte1;\n  int result1;\n  int result2;\n  uint float2;\n  int result3;\n  uint result4;\n  bool isZero;\n  bool isNegative;\n  \n  byte1 = value1 >> 0x17 & 0xff;\n  isZero = byte1 == 0;\n  if (!isZero) {\n    moreValue = value2 >> 0x17 & 0xff;\n    isZero = moreValue == 0;\n  }\n  if (!isZero) {\n    isZero = byte1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = moreValue == 0xff;\n  }\n  if (isZero) {\n    moreValue = value2 >> 0x17 & 0xff;\n    if (byte1 == 0xff || moreValue == 0xff) {\n      isZero = value1 == 0 || value1 == 0x80000000;\n      float1 = value2;\n      if (value1 != 0 && value1 != 0x80000000) {\n        isZero = value2 == 0;\n        float1 = value1;\n      }\n      if (!isZero) {\n        isZero = value2 == 0x80000000;\n      }\n      result4 = float1;\n      if (((isZero) || ((byte1 == 0xff && ((float1 & 0x7fffff) != 0)))) ||\n         ((moreValue == 0xff && (result4 = value2, (value2 & 0x7fffff) != 0)))) {\n        return result4 | 0x7fc00000;\n      }\n      float1 = float1 ^ value2;\n      goto LAB_00081a94;\n    }\n    isZero = (value1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (value2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (value1 ^ value2) & 0x80000000;\n    }\n    isZero = byte1 == 0;\n    float1 = value1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        value1 = value1 << 1;\n        isZero = (value1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      byte1 = byte1 - 1;\n    }\n    value1 = value1 | float1;\n    isZero = moreValue == 0;\n    float1 = value2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        value2 = value2 << 1;\n        isZero = (value2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      moreValue = moreValue - 1;\n    }\n    value2 = value2 | float1;\n  }\n  result1 = byte1 + moreValue;\n  result4 = value1 ^ value2;\n  byte1 = value1 << 9;\n  isZero = byte1 == 0;\n  if (!isZero) {\n    value2 = value2 << 9;\n    isZero = value2 == 0;\n  }\n  if (isZero) {\n    if (byte1 == 0) {\n      value2 = value2 << 9;\n    }\n    float1 = result4 & 0x80000000 | value1 & 0x7fffff | value2 >> 9;\n    isNegative = SBORROW4(result1,0x7f);\n    result2 = result1 + -0x7f;\n    isZero = result2 == 0;\n    result3 = result2;\n    if (!isZero && 0x7e < result1) {\n      isNegative = SBORROW4(0xff,result2);\n      result3 = 0xff - result2;\n      isZero = result2 == 0xff;\n    }\n    if (!isZero && result3 < 0 == isNegative) {\n      float1 = float1 | result2 * 0x800000;\n    }\n    if (!isZero && result3 < 0 == isNegative) {\n      return float1;\n    }\n    float1 = float1 | 0x800000;\n    float2 = 0;\n    isNegative = SBORROW4(result2,1);\n    result4 = result1 - 0x80;\n    isZero = result4 == 0;\n    byte1 = result4;\n  }\n  else {\n    result = (ulonglong)(byte1 >> 5 | 0x8000000) * (ulonglong)(value2 >> 5 | 0x8000000);\n    float2 = (uint)result;\n    float1 = (uint)((ulonglong)result >> 0x20);\n    isZero = float1 < 0x800000;\n    if (isZero) {\n      float1 = float1 << 1;\n    }\n    if (isZero) {\n      float1 = float1 | float2 >> 0x1f;\n      float2 = float2 << 1;\n    }\n    float1 = result4 & 0x80000000 | float1;\n    result4 = (result1 + -0x7f) - (uint)isZero;\n    isNegative = SBORROW4(result4,0xfd);\n    isZero = result4 == 0xfd;\n    byte1 = result4 - 0xfd;\n    if (result4 < 0xfe) {\n      float1 = float1 + result4 * 0x800000 + (uint)(0x7fffffff < float2);\n      if (float2 == 0x80000000) {\n        float1 = float1 & 0xfffffffe;\n      }\n      return float1;\n    }\n  }\n  if (isZero || (int)byte1 < 0 != isNegative) {\n    isZero = (int)(result4 + 0x19) < 0;\n    if (result4 == 0xffffffe7 || isZero != SCARRY4(result4,0x19)) {\n      float1 = float1 & 0x80000000;\n    }\n    if (result4 != 0xffffffe7 && isZero == SCARRY4(result4,0x19)) {\n      byte1 = (float1 << 1) >> (-result4 & 0xff);\n      result4 = float1 << (result4 + 0x20 & 0xff);\n      byte1 = ((uint)((float1 & 0x80000000) != 0) << 0x1f | byte1 >> 1) + (uint)((byte)byte1 & 1);\n      if ((float2 | result4 << 1) == 0) {\n        byte1 = byte1 & ~(result4 >> 0x1f);\n      }\n      return byte1;\n    }\n    return float1;\n  }\nLAB_00081a94:\n  return float1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_00081944": "compute_float_00081944",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "otherValue",
                "param_4": "moreValue",
                "lVar1": "result",
                "uVar2": "float1",
                "uVar3": "byte1",
                "iVar4": "result1",
                "iVar5": "result2",
                "uVar6": "float2",
                "iVar7": "result3",
                "uVar8": "result4",
                "bVar9": "isZero",
                "bVar10": "isNegative"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081bf4": {
            "entrypoint": "0x00081bf4",
            "current_name": "calculate_result_00081bf4",
            "code": "\nuint calculateResult_00081bf4(uint input1,uint input2)\n\n{\n  bool isNegative;\n  uint doubledInput1;\n  uint doubledInput2;\n  uint combinedInputs;\n  bool isZero;\n  \n  doubledInput1 = input1 * 2;\n  doubledInput2 = input2 * 2;\n  if (((int)doubledInput1 >> 0x18 == -1 || (int)doubledInput2 >> 0x18 == -1) &&\n     ((((int)doubledInput1 >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) ||\n      (((int)doubledInput2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combinedInputs = doubledInput1 | input2 & 0x7fffffff;\n  isZero = combinedInputs == 0;\n  if (!isZero) {\n    combinedInputs = input1 ^ input2;\n    isZero = combinedInputs == 0;\n  }\n  isNegative = -1 < (int)combinedInputs;\n  if (isNegative) {\n    input1 = doubledInput1 + input2 * -2;\n    isZero = input1 == 0;\n  }\n  if ((isNegative && doubledInput2 <= doubledInput1) && !isZero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!isNegative || doubledInput2 > doubledInput1) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!isZero) {\n    input1 = input1 | 1;\n  }\n  return input1;\n}\n\n",
            "renaming": {
                "FUN_00081bf4": "calculate_result_00081bf4",
                "param_1": "input1",
                "param_2": "input2",
                "uVar2": "doubledInput1",
                "uVar3": "doubledInput2",
                "uVar4": "combinedInputs",
                "bVar1": "isNegative",
                "bVar5": "isZero"
            },
            "calling": [
                "FUN_00081c5c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c54": {
            "entrypoint": "0x00081c54",
            "current_name": "concatenate_parameters_00081c54",
            "code": "\nvoid concatenateParameters_00081c54(undefined4 destination,undefined4 source)\n\n{\n  concatenate_parameters_00081c5c(source,destination);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081c54": "concatenate_parameters_00081c54",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [
                "FUN_00081ca8"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c5c": {
            "entrypoint": "0x00081c5c",
            "current_name": "concatenate_parameters_00081c5c",
            "code": "\nundefined8 concatenateParameters_00081c5c(undefined4 source,undefined4 destination)\n\n{\n  calculate_result_00081bf4();\n  return CONCAT44(destination,source);\n}\n\n",
            "renaming": {
                "FUN_00081c5c": "concatenate_parameters_00081c5c",
                "param_1": "source",
                "param_2": "destination"
            },
            "calling": [
                "FUN_00081c54",
                "FUN_00081c94"
            ],
            "called": [
                "FUN_00081bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c94": {
            "entrypoint": "0x00081c94",
            "current_name": "check_parameter_concatenation_00081c94",
            "code": "\nbool check_parameter_concatenation_00081c94(void)\n\n{\n  undefined is_zero_return;\n  undefined is_carry;\n  \n  concatenate_parameters();\n  return !(bool)is_carry || (bool)is_zero_return;\n}\n\n",
            "renaming": {
                "FUN_00081c94": "check_parameter_concatenation_00081c94",
                "in_ZR": "is_zero_return",
                "in_CY": "is_carry",
                "concatenate_parameters_00081c5c": "concatenate_parameters"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081ca8": {
            "entrypoint": "0x00081ca8",
            "current_name": "check_concatenated_parameters_00081ca8",
            "code": "\nbool checkConcatenatedParameters_00081ca8(void)\n\n{\n  undefined isZero;\n  undefined isCarry;\n  \n  concatenateParameters();\n  return !(bool)isCarry || (bool)isZero;\n}\n\n",
            "renaming": {
                "FUN_00081ca8": "check_concatenated_parameters_00081ca8",
                "in_ZR": "isZero",
                "in_CY": "isCarry",
                "concatenate_parameters_00081c54": "concatenateParameters"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081cd0": {
            "entrypoint": "0x00081cd0",
            "current_name": "decode_value_00081cd0",
            "code": "\nuint decodeValue_00081cd0(uint inputValue)\n\n{\n  uint shiftCount;\n  uint difference;\n  \n  if (inputValue << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftCount = (inputValue << 1) >> 0x18;\n  difference = 0x9e - shiftCount;\n  if (shiftCount < 0x9f && difference != 0) {\n    shiftCount = (inputValue << 8 | 0x80000000) >> (difference & 0xff);\n    if ((inputValue & 0x80000000) != 0) {\n      shiftCount = -shiftCount;\n    }\n    return shiftCount;\n  }\n  if ((difference == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  inputValue = inputValue & 0x80000000;\n  if (inputValue == 0) {\n    inputValue = 0x7fffffff;\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_00081cd0": "decode_value_00081cd0",
                "param_1": "inputValue",
                "uVar1": "shiftCount",
                "uVar2": "difference"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d1c": {
            "entrypoint": "0x00081d1c",
            "current_name": "reverse_bit_pattern_00081d1c",
            "code": "\nuint reverseBitPattern_00081d1c(uint inputValue)\n\n{\n  uint shiftedValue;\n  \n  if (((inputValue & 0x80000000) != 0) || (inputValue << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shiftedValue = 0x9e - ((inputValue << 1) >> 0x18);\n  if (-1 < (int)shiftedValue) {\n    return (inputValue << 8 | 0x80000000) >> (shiftedValue & 0xff);\n  }\n  if ((shiftedValue == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081d1c": "reverse_bit_pattern_00081d1c",
                "param_1": "inputValue",
                "uVar1": "shiftedValue"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d5c": {
            "entrypoint": "0x00081d5c",
            "current_name": "update_relocation_entry_00081d5c",
            "code": "\nundefined4 updateRelocationEntry_00081d5c(dword address,dword value,dword flag)\n\n{\n  dword *relocEntry;\n  uint entryIndex;\n  uint flagBit;\n  \n  if (relocationTable[48].offset == 0) {\n    relocationTable[48].offset = 0x20070184;\n  }\n  entryIndex = *(uint *)(relocationTable[48].offset + 4);\n  relocEntry = (dword *)relocationTable[48].offset;\n  if (0x1f < (int)entryIndex) {\n    relocEntry = (dword *)relocate_elf_relocations_00081df4(400);\n    if (relocEntry == (dword *)0x0) {\n      return 0xffffffff;\n    }\n    *relocEntry = relocationTable[48].offset;\n    relocEntry[1] = 0;\n    entryIndex = 0;\n    relocationTable[48].offset = (dword)relocEntry;\n    relocEntry[0x62] = 0;\n    relocEntry[99] = 0;\n  }\n  flagBit = 1 << (entryIndex & 0xff);\n  relocEntry[entryIndex + 0x22] = address;\n  relocEntry[0x62] = relocEntry[0x62] | flagBit;\n  relocEntry[entryIndex + 0x42] = flag;\n  relocEntry[99] = flagBit | relocEntry[99];\n  relocEntry[1] = entryIndex + 1;\n  relocEntry[entryIndex + 2] = value;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081d5c": "update_relocation_entry_00081d5c",
                "param_1": "address",
                "param_2": "value",
                "param_3": "flag",
                "Elf32_Rel_ARRAY_20070000": "relocationTable",
                "pdVar1": "relocEntry",
                "uVar2": "entryIndex",
                "uVar3": "flagBit",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d7c": {
            "entrypoint": "0x00081d7c",
            "current_name": "execute_functions_00081d7c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid execute_functions_00081d7c(void)\n\n{\n  int iteration_count;\n  code **function_pointers;\n  \n  FUNC_00085858();\n  function_pointers = (code **)0x85860;\n  iteration_count = 0;\n  do {\n    iteration_count = iteration_count + 1;\n    function_pointers = function_pointers + 1;\n    (**function_pointers)();\n  } while (iteration_count != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d7c": "execute_functions_00081d7c",
                "iVar1": "iteration_count",
                "ppcVar2": "function_pointers"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00085858",
                "FUN_00080118",
                "FUN_00083974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081df4": {
            "entrypoint": "0x00081df4",
            "current_name": "relocate_elf_relocations_00081df4",
            "code": "\nvoid relocateElfRelocations_00081df4(undefined4 param)\n\n{\n  relocate_elf_relocations_00081e14(elfRelocations[140].relocationOffset,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081df4": "relocate_elf_relocations_00081df4",
                "param_1": "param",
                "Elf32_Rel_ARRAY_20070000": "elfRelocations",
                "r_offset": "relocationOffset"
            },
            "calling": [
                "FUN_00083974"
            ],
            "called": [
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e04": {
            "entrypoint": "0x00081e04",
            "current_name": "FUNC_00081e04",
            "code": "\nvoid FUNC_00081e04(undefined4 param_1)\n\n{\n  update_elf_relocation_00083d9c(Elf32_Rel_ARRAY_20070000[140].r_offset,param_1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e04": "FUNC_00081e04"
            },
            "calling": [
                "FUN_0008160c",
                "FUN_000815fe"
            ],
            "called": [
                "FUN_00083d9c"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081e14": {
            "entrypoint": "0x00081e14",
            "current_name": "relocate_elf_relocations_00081e14",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * relocateElfRelocations_00081e14(undefined4 *elfHeader,uint relocationCount)\n\n{\n  dword prevRelType;\n  int i;\n  uint alignmentMask;\n  uint alignedRelocationOffset;\n  int iVar5;\n  uint uVar6;\n  dword outputRelocationInfo;\n  uint uVar8;\n  int iVar9;\n  undefined *iterRel;\n  dword prevRelTable;\n  dword relRepair;\n  int j;\n  dword *relocationPtr;\n  uint alignedRelocationCount;\n  undefined *newRel;\n  dword *relList;\n  uint remainingRelocationCount;\n  \n  if (relocationCount + 0xb < 0x17) {\n    alignedRelocationCount = 0x10;\n    if (0x10 < relocationCount) goto LAB_00081e7a;\n  }\n  else {\n    alignedRelocationCount = relocationCount + 0xb & 0xfffffff8;\n    if (((int)alignedRelocationCount < 0) || (alignedRelocationCount < relocationCount)) {\nLAB_00081e7a:\n      *elfHeader = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00082598(elfHeader);\n  prevRelType = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (alignedRelocationCount < 0x1f8) {\n    j = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + alignedRelocationCount);\n    if ((j != alignedRelocationCount + 0x20070464) ||\n       (i = j + 8, j = *(int *)(j + 0x14), i != j)) {\n      iVar5 = *(int *)(j + 0xc);\n      iVar9 = (*(uint *)(j + 4) & 0xfffffffc) + j;\n      alignedRelocationCount = *(uint *)(iVar9 + 4);\n      i = *(int *)(j + 8);\n      *(int *)(i + 0xc) = iVar5;\n      *(int *)(iVar5 + 8) = i;\n      *(uint *)(iVar9 + 4) = alignedRelocationCount | 1;\n      FUNC_0008259c(elfHeader);\n      return (int *)(j + 8);\n    }\n    remainingRelocationCount = (alignedRelocationCount >> 3) + 2;\n  }\n  else {\n    remainingRelocationCount = alignedRelocationCount >> 9;\n    if (remainingRelocationCount == 0) {\n      i = 0x7e;\n      j = 0x3f;\n    }\n    else if (remainingRelocationCount < 5) {\n      j = (alignedRelocationCount >> 6) + 0x38;\n      i = j * 2;\n    }\n    else if (remainingRelocationCount < 0x15) {\n      j = remainingRelocationCount + 0x5b;\n      i = j * 2;\n    }\n    else if (remainingRelocationCount < 0x55) {\n      j = (alignedRelocationCount >> 0xc) + 0x6e;\n      i = j * 2;\n    }\n    else if (remainingRelocationCount < 0x155) {\n      j = (alignedRelocationCount >> 0xf) + 0x77;\n      i = j * 2;\n    }\n    else if (remainingRelocationCount < 0x555) {\n      j = (alignedRelocationCount >> 0x12) + 0x7c;\n      i = j * 2;\n    }\n    else {\n      i = 0xfc;\n      j = 0x7e;\n    }\n    for (outputRelocationInfo = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[i]; i * 4 + 0x20070464U != outputRelocationInfo\n        ; outputRelocationInfo = *(dword *)(outputRelocationInfo + 0xc)) {\n      remainingRelocationCount = *(uint *)(outputRelocationInfo + 4) & 0xfffffffc;\n      iVar5 = remainingRelocationCount - alignedRelocationCount;\n      if (0xf < iVar5) {\n        j = j + -1;\n        break;\n      }\n      if (-1 < iVar5) {\n        i = remainingRelocationCount + outputRelocationInfo;\n        alignedRelocationCount = *(uint *)(i + 4);\n        iVar5 = *(int *)(outputRelocationInfo + 0xc);\n        j = *(int *)(outputRelocationInfo + 8);\n        *(int *)(j + 0xc) = iVar5;\n        *(int *)(iVar5 + 8) = j;\n        *(uint *)(i + 4) = alignedRelocationCount | 1;\n        FUNC_0008259c(elfHeader);\n        return (int *)(outputRelocationInfo + 8);\n      }\n    }\n    remainingRelocationCount = j + 1;\n  }\n  outputRelocationInfo = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    alignmentMask = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    alignedRelocationOffset = alignmentMask & 0xfffffffc;\n    uVar6 = alignedRelocationOffset - alignedRelocationCount;\n    if (0xf < (int)uVar6) {\n      outputRelocationInfo = alignedRelocationCount + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = alignedRelocationCount | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = outputRelocationInfo;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = outputRelocationInfo;\n      *(undefined4 *)(outputRelocationInfo + 0xc) = 0x2007046c;\n      *(undefined4 *)(outputRelocationInfo + 8) = 0x2007046c;\n      *(uint *)(outputRelocationInfo + 4) = uVar6 | 1;\n      *(uint *)(outputRelocationInfo + uVar6) = uVar6;\n      FUNC_0008259c(elfHeader);\n      return (int *)(prevRelType + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)uVar6) {\n      *(uint *)(alignedRelocationOffset + prevRelType + 4) = *(uint *)(alignedRelocationOffset + prevRelType + 4) | 1;\n      FUNC_0008259c(elfHeader);\n      return (int *)(prevRelType + 8);\n    }\n    if (alignedRelocationOffset < 0x200) {\n      alignedRelocationOffset = alignmentMask & 0xfffffff8;\n      j = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + alignedRelocationOffset);\n      outputRelocationInfo = 1 << ((int)(alignmentMask >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(prevRelType + 8) = j;\n      *(uint *)(prevRelType + 0xc) = alignedRelocationOffset + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = outputRelocationInfo;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + alignedRelocationOffset) = prevRelType;\n      *(dword *)(j + 0xc) = prevRelType;\n    }\n    else {\n      uVar6 = alignmentMask >> 9;\n      if (uVar6 < 5) {\n        i = (alignmentMask >> 6) + 0x38;\n        j = i * 2;\n      }\n      else if (uVar6 < 0x15) {\n        i = uVar6 + 0x5b;\n        j = i * 2;\n      }\n      else if (uVar6 < 0x55) {\n        i = (alignmentMask >> 0xc) + 0x6e;\n        j = i * 2;\n      }\n      else if (uVar6 < 0x155) {\n        i = (alignmentMask >> 0xf) + 0x77;\n        j = i * 2;\n      }\n      else if (uVar6 < 0x555) {\n        i = (alignmentMask >> 0x12) + 0x7c;\n        j = i * 2;\n      }\n      else {\n        j = 0xfc;\n        i = 0x7e;\n      }\n      outputRelocationInfo = j * 4 + 0x20070464;\n      prevRelTable = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[j];\n      if (prevRelTable == outputRelocationInfo) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (i >> 2 & 0xffU);\n        relRepair = prevRelTable;\n      }\n      else {\n        do {\n          relRepair = prevRelTable;\n          if ((*(uint *)(prevRelTable + 4) & 0xfffffffc) <= alignedRelocationOffset) break;\n          prevRelTable = *(dword *)(prevRelTable + 8);\n          relRepair = prevRelTable;\n        } while (outputRelocationInfo != prevRelTable);\n        prevRelTable = *(dword *)(relRepair + 0xc);\n      }\n      outputRelocationInfo = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(prevRelType + 0xc) = prevRelTable;\n      *(dword *)(prevRelType + 8) = relRepair;\n      *(dword *)(prevRelTable + 8) = prevRelType;\n      *(dword *)(relRepair + 0xc) = prevRelType;\n    }\n  }\n  prevRelType = Elf32_Rel_ARRAY_20070000[141].r_info;\n  alignmentMask = 1 << ((int)remainingRelocationCount >> 2 & 0xffU);\n  if (alignmentMask <= outputRelocationInfo) {\n    if ((outputRelocationInfo & alignmentMask) == 0) {\n      remainingRelocationCount = remainingRelocationCount & 0xfffffffc;\n      do {\n        alignmentMask = alignmentMask << 1;\n        remainingRelocationCount = remainingRelocationCount + 4;\n      } while ((outputRelocationInfo & alignmentMask) == 0);\n    }\n    do {\n      relList = &Elf32_Rel_ARRAY_20070000[remainingRelocationCount + 0x8c].r_info;\n      relocationPtr = relList;\n      alignedRelocationOffset = remainingRelocationCount;\n      do {\n        for (iterRel = (undefined *)relocationPtr[3]; relocationPtr != (dword *)iterRel;\n            iterRel = *(undefined **)(iterRel + 0xc)) {\n          uVar6 = *(uint *)(iterRel + 4) & 0xfffffffc;\n          uVar8 = uVar6 - alignedRelocationCount;\n          if (0xf < (int)uVar8) {\n            i = *(int *)(iterRel + 8);\n            j = *(int *)(iterRel + 0xc);\n            newRel = iterRel + alignedRelocationCount;\n            *(uint *)(iterRel + 4) = alignedRelocationCount | 1;\n            *(int *)(i + 0xc) = j;\n            *(int *)(j + 8) = i;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)newRel;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)newRel;\n            *(undefined4 *)(newRel + 0xc) = 0x2007046c;\n            *(undefined4 *)(newRel + 8) = 0x2007046c;\n            *(uint *)(newRel + 4) = uVar8 | 1;\n            *(uint *)(newRel + uVar8) = uVar8;\n            FUNC_0008259c(elfHeader);\n            return (int *)(iterRel + 8);\n          }\n          if (-1 < (int)uVar8) {\n            j = *(int *)(iterRel + 8);\n            i = *(int *)(iterRel + 0xc);\n            *(uint *)(iterRel + uVar6 + 4) = *(uint *)(iterRel + uVar6 + 4) | 1;\n            *(int *)(j + 0xc) = i;\n            *(int *)(i + 8) = j;\n            FUNC_0008259c(elfHeader);\n            return (int *)(iterRel + 8);\n          }\n        }\n        alignedRelocationOffset = alignedRelocationOffset + 1;\n        relocationPtr = relocationPtr + 2;\n      } while ((alignedRelocationOffset & 3) != 0);\n      do {\n        uVar6 = remainingRelocationCount & 3;\n        iterRel = (undefined *)(relList + -2);\n        remainingRelocationCount = remainingRelocationCount - 1;\n        if (uVar6 == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~alignmentMask;\n          break;\n        }\n        relList = (dword *)*relList;\n      } while (relList == (dword *)iterRel);\n      alignmentMask = alignmentMask * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= alignmentMask &&\n           alignmentMask - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (remainingRelocationCount = alignedRelocationOffset, alignmentMask == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & alignmentMask) == 0; alignmentMask = alignmentMask << 1) {\n        remainingRelocationCount = remainingRelocationCount + 4;\n      }\n    } while( true );\n  }\n  remainingRelocationCount = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((alignedRelocationCount <= remainingRelocationCount) &&\n     (alignmentMask = remainingRelocationCount - alignedRelocationCount, outputRelocationInfo = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)alignmentMask))\n  goto LAB_0008211e;\n  alignmentMask = Elf32_Rel_ARRAY_20070000[141].r_info + remainingRelocationCount;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    alignedRelocationOffset = alignedRelocationCount + DAT_20071190 + 0x10;\n  }\n  else {\n    alignedRelocationOffset = alignedRelocationCount + DAT_20071190 + 0x100f & 0xfffff000;\n  }\n  outputRelocationInfo = update_parameter_if_sum_negative_00082970(elfHeader,alignedRelocationOffset);\n  if ((outputRelocationInfo == 0xffffffff) || ((outputRelocationInfo < alignmentMask && (prevRelType != 0x20070464)))) {\n    remainingRelocationCount = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    outputRelocationInfo = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    uVar6 = DAT_20071194 + alignedRelocationOffset;\n    DAT_20071194 = uVar6;\n    if ((alignmentMask == outputRelocationInfo) && ((alignmentMask & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = alignedRelocationOffset + remainingRelocationCount | 1;\n    }\n    else {\n      prevRelTable = outputRelocationInfo;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        prevRelTable = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_20071194 = uVar6 + (outputRelocationInfo - alignmentMask);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = prevRelTable;\n      alignmentMask = outputRelocationInfo & 7;\n      if (alignmentMask == 0) {\n        j = 0x1000;\n      }\n      else {\n        outputRelocationInfo = outputRelocationInfo + (8 - alignmentMask);\n        j = 0x1008 - alignmentMask;\n      }\n      j = j - (alignedRelocationOffset + outputRelocationInfo & 0xfff);\n      i = update_parameter_if_sum_negative_00082970(elfHeader,j);\n      if (i == -1) {\n        alignmentMask = 1;\n        j = 0;\n      }\n      else {\n        alignmentMask = (i - outputRelocationInfo) + j | 1;\n      }\n      uVar6 = DAT_20071194 + j;\n      Elf32_Rel_ARRAY_20070000[141].r_info = outputRelocationInfo;\n      DAT_20071194 = uVar6;\n      *(uint *)(outputRelocationInfo + 4) = alignmentMask;\n      if (prevRelType != 0x20070464) {\n        if (remainingRelocationCount < 0x10) {\n          *(undefined4 *)(outputRelocationInfo + 4) = 1;\n          remainingRelocationCount = 0;\n          goto LAB_00082108;\n        }\n        remainingRelocationCount = remainingRelocationCount - 0xc & 0xfffffff8;\n        *(uint *)(prevRelType + 4) = remainingRelocationCount | *(uint *)(prevRelType + 4) & 1;\n        *(undefined4 *)(prevRelType + remainingRelocationCount + 4) = 5;\n        *(undefined4 *)(prevRelType + remainingRelocationCount + 8) = 5;\n        if (0xf < remainingRelocationCount) {\n          update_elf_relocation_00083d9c(elfHeader,prevRelType + 8);\n          uVar6 = DAT_20071194;\n        }\n      }\n    }\n    if (DAT_2007118c < uVar6) {\n      DAT_2007118c = uVar6;\n    }\n    if (DAT_20071188 < uVar6) {\n      DAT_20071188 = uVar6;\n    }\n    remainingRelocationCount = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    outputRelocationInfo = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00082108:\n  alignmentMask = remainingRelocationCount - alignedRelocationCount;\n  if ((remainingRelocationCount < alignedRelocationCount) || ((int)alignmentMask < 0x10)) {\n    FUNC_0008259c(elfHeader);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  Elf32_Rel_ARRAY_20070000[141].r_info = alignedRelocationCount + outputRelocationInfo;\n  *(uint *)(outputRelocationInfo + 4) = alignedRelocationCount | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = alignmentMask | 1;\n  FUNC_0008259c(elfHeader);\n  return (int *)(outputRelocationInfo + 8);\n}\n\n",
            "renaming": {
                "FUN_00081e14": "relocate_elf_relocations_00081e14",
                "param_1": "elfHeader",
                "param_2": "relocationCount",
                "uVar15": "alignedRelocationCount",
                "dVar1": "prevRelType",
                "iVar2": "i",
                "uVar3": "alignmentMask",
                "uVar4": "alignedRelocationOffset",
                "dVar7": "outputRelocationInfo",
                "iVar13": "j",
                "dVar11": "prevRelTable",
                "dVar12": "relRepair",
                "pdVar14": "relocationPtr",
                "uVar18": "remainingRelocationCount",
                "puVar10": "iterRel",
                "pdVar17": "relList",
                "puVar16": "newRel"
            },
            "calling": [
                "FUN_000842a4",
                "FUN_000825b0",
                "FUN_00083f34",
                "FUN_00081df4"
            ],
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00083d9c",
                "FUN_00082970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008234c": {
            "entrypoint": "0x0008234c",
            "current_name": "copy_memory_0008234c",
            "code": "\nundefined4 * copyMemory_0008234c(undefined4 *destination,undefined4 *source,uint count)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *dest;\n  undefined4 *src_ptr;\n  uint remaining_size;\n  uint loop_count;\n  bool loop_flag;\n  \n  dest = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (count < 8) {\n      loop_count = count - 4;\n      if (3 < count) {\n        do {\n          dest_ptr = source;\n          src_ptr = dest;\n          loop_flag = loop_count != 0;\n          loop_count = loop_count - 1;\n          *(undefined *)src_ptr = *(undefined *)dest_ptr;\n          dest = (undefined4 *)((int)src_ptr + 1);\n          source = (undefined4 *)((int)dest_ptr + 1);\n        } while (loop_flag);\n        *(undefined *)(undefined4 *)((int)src_ptr + 1) =\n             *(undefined *)(undefined4 *)((int)dest_ptr + 1);\n        *(undefined *)((int)src_ptr + 2) = *(undefined *)((int)dest_ptr + 2);\n        *(undefined *)((int)src_ptr + 3) = *(undefined *)((int)dest_ptr + 3);\n        return destination;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      loop_count = 4 - ((uint)destination & 3);\n      count = count - loop_count;\n      dest_ptr = destination;\n      src_ptr = source;\n      if (((uint)destination & 1) != 0) {\n        src_ptr = (undefined4 *)((int)source + 1);\n        dest_ptr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      dest = dest_ptr;\n      source = src_ptr;\n      if ((loop_count & 2) != 0) {\n        source = (undefined4 *)((int)src_ptr + 2);\n        dest = (undefined4 *)((int)dest_ptr + 2);\n        *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n      }\n    }\n  }\n  while (0x3f < count) {\n    *dest = *source;\n    dest[1] = source[1];\n    dest[2] = source[2];\n    dest[3] = source[3];\n    dest[4] = source[4];\n    dest[5] = source[5];\n    dest[6] = source[6];\n    dest[7] = source[7];\n    dest[8] = source[8];\n    dest[9] = source[9];\n    dest[10] = source[10];\n    dest[0xb] = source[0xb];\n    dest[0xc] = source[0xc];\n    dest[0xd] = source[0xd];\n    dest[0xe] = source[0xe];\n    dest[0xf] = source[0xf];\n    dest = dest + 0x10;\n    source = source + 0x10;\n    count = count - 0x40;\n  }\n  remaining_size = count - 0x10;\n  if (0xffffffcf < count - 0x40) {\n    do {\n      *dest = *source;\n      dest[1] = source[1];\n      dest[2] = source[2];\n      dest[3] = source[3];\n      dest = dest + 4;\n      source = source + 4;\n      loop_flag = 0xf < remaining_size;\n      remaining_size = remaining_size - 0x10;\n    } while (loop_flag);\n  }\n  loop_count = remaining_size + 0xc;\n  src_ptr = dest;\n  dest_ptr = source;\n  if (0xfffffff3 < remaining_size) {\n    do {\n      source = dest_ptr + 1;\n      *src_ptr = *dest_ptr;\n      loop_flag = 3 < loop_count;\n      loop_count = loop_count - 4;\n      dest = src_ptr + 1;\n      src_ptr = src_ptr + 1;\n      dest_ptr = source;\n    } while (loop_flag);\n  }\nLAB_000823d0:\n  if (loop_count + 4 != 0) {\n    dest_ptr = dest;\n    src_ptr = source;\n    if ((loop_count & 1) != 0) {\n      src_ptr = (undefined4 *)((int)source + 1);\n      dest_ptr = (undefined4 *)((int)dest + 1);\n      *(undefined *)dest = *(undefined *)source;\n    }\n    if ((loop_count + 4 & 2) != 0) {\n      *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "count",
                "puVar1": "dest_ptr",
                "puVar2": "dest",
                "puVar3": "src_ptr",
                "uVar4": "remaining_size",
                "uVar5": "loop_count",
                "bVar6": "loop_flag"
            },
            "calling": [
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082438": {
            "entrypoint": "0x00082438",
            "current_name": "reverse_copy_00082438",
            "code": "\nvoid reverseCopy_00082438(undefined4 *dest,undefined4 *src,uint length)\n\n{\n  int i;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *tempPtr;\n  uint temp;\n  undefined *tempPtr;\n  uint remainingLength;\n  \n  if ((src < dest) && (tempPtr = (undefined4 *)((int)src + length), dest < tempPtr)) {\n    tempPtr = (undefined *)((int)dest + length);\n    i = length - 1;\n    if (length != 0) {\n      do {\n        tempPtr = (undefined4 *)((int)tempPtr + -1);\n        i = i + -1;\n        tempPtr = tempPtr + -1;\n        *tempPtr = *(undefined *)tempPtr;\n      } while (i != -1);\n    }\n    return;\n  }\n  if (length < 0x10) {\n    if (length == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    tempPtr = dest;\n    srcPtr = src;\n    do {\n      destPtr = tempPtr + 4;\n      *tempPtr = *srcPtr;\n      tempPtr[1] = srcPtr[1];\n      tempPtr[2] = srcPtr[2];\n      tempPtr[3] = srcPtr[3];\n      tempPtr = destPtr;\n      srcPtr = srcPtr + 4;\n    } while (destPtr != (undefined4 *)((int)dest + (length - 0x10 & 0xfffffff0) + 0x10));\n    i = (length - 0x10 >> 4) + 1;\n    remainingLength = length & 0xf;\n    src = src + i * 4;\n    dest = dest + i * 4;\n    temp = remainingLength;\n    tempPtr = dest;\n    srcPtr = src;\n    if (3 < remainingLength) {\n      do {\n        temp = temp - 4;\n        *tempPtr = *srcPtr;\n        tempPtr = tempPtr + 1;\n        srcPtr = srcPtr + 1;\n      } while (3 < temp);\n      i = (remainingLength - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + i);\n      src = (undefined4 *)((int)src + i);\n      remainingLength = length & 3;\n    }\n    length = remainingLength;\n    if (length == 0) {\n      return;\n    }\n  }\n  tempPtr = dest;\n  do {\n    srcPtr = (undefined4 *)((int)tempPtr + 1);\n    *(undefined *)tempPtr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    tempPtr = srcPtr;\n  } while (srcPtr != (undefined4 *)(length + (int)dest));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082438": "reverse_copy_00082438",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "iVar1": "i",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "puVar4": "tempPtr",
                "uVar5": "temp",
                "puVar6": "tempPtr",
                "uVar7": "remainingLength"
            },
            "calling": [
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082504": {
            "entrypoint": "0x00082504",
            "current_name": "fill_memory_00082504",
            "code": "\nvoid fillMemory_00082504(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *tempPtr;\n  undefined4 pattern;\n  uint count;\n  bool isZero;\n  \n  if (((uint)dest & 3) != 0) {\n    isZero = size == 0;\n    destPtr = dest;\n    size = size - 1;\n    if (isZero) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = value;\n      if (((uint)dest & 3) == 0) break;\n      isZero = size == 0;\n      destPtr = dest;\n      size = size - 1;\n      if (isZero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    pattern = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    count = size;\n    destPtr = dest;\n    if (0xf < size) {\n      count = size - 0x10;\n      do {\n        *destPtr = pattern;\n        destPtr[1] = pattern;\n        destPtr[2] = pattern;\n        destPtr[3] = pattern;\n        destPtr = destPtr + 4;\n      } while (destPtr != (undefined4 *)((int)dest + (count & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      dest = dest + ((count >> 4) + 1) * 4;\n      count = size;\n      destPtr = dest;\n      if (size < 4) goto LAB_00082580;\n    }\n    do {\n      size = size - 4;\n      *dest = pattern;\n      dest = dest + 1;\n    } while (3 < size);\n    dest = (undefined4 *)((int)destPtr + (count - 4 & 0xfffffffc) + 4);\n    size = count & 3;\n  }\nLAB_00082580:\n  if (size != 0) {\n    destPtr = dest;\n    do {\n      tempPtr = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = value;\n      destPtr = tempPtr;\n    } while (tempPtr != (undefined4 *)(size + (int)dest));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082504": "fill_memory_00082504",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "tempPtr",
                "uVar3": "pattern",
                "uVar4": "count",
                "bVar5": "isZero"
            },
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082598": {
            "entrypoint": "0x00082598",
            "current_name": "FUNC_00082598",
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d9c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008259c": {
            "entrypoint": "0x0008259c",
            "current_name": "FUNC_0008259c",
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d9c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000825a0": {
            "entrypoint": "0x000825a0",
            "current_name": "reallocate_memory_000825a0",
            "code": "\nvoid reallocateMemory_000825a0(undefined4 memoryAddress,undefined4 size)\n\n{\n  reallocate_memory_000825b0(relocationArray[140].r_offset,memoryAddress,size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825a0": "reallocate_memory_000825a0",
                "param_1": "memoryAddress",
                "param_2": "size",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [
                "FUN_00081622"
            ],
            "called": [
                "FUN_000825b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825b0": {
            "entrypoint": "0x000825b0",
            "current_name": "reallocate_memory_000825b0",
            "code": "\nint * reallocateMemory_000825b0(undefined4 *elfHeader,int *oldMemory,uint size)\n\n{\n  dword dwordVar1;\n  int *newMemory;\n  uint tempVar1;\n  int iVar1;\n  uint tempVar2;\n  int iVar2;\n  int *tempPtr1;\n  uint tempVar3;\n  uint tempVar4;\n  int *tempPtr2;\n  \n  if (oldMemory == (int *)0x0) {\n    newMemory = (int *)relocate_elf_relocations_00081e14(elfHeader,size);\n    return newMemory;\n  }\n  FUNC_00082598();\n  tempVar2 = oldMemory[-1];\n  tempVar3 = tempVar2 & 0xfffffffc;\n  newMemory = oldMemory + -2;\n  if (size + 0xb < 0x17) {\n    tempVar4 = 0x10;\n  }\n  else {\n    tempVar4 = size + 0xb & 0xfffffff8;\n    if ((int)tempVar4 < 0) goto LAB_0008267c;\n  }\n  if (tempVar4 < size) {\nLAB_0008267c:\n    *elfHeader = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)tempVar3 < (int)tempVar4) {\n    dwordVar1 = (int)newMemory + tempVar3;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == dwordVar1) {\n      tempVar1 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      dwordVar1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(tempVar4 + 0x10) <= (int)(tempVar1 + tempVar3)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)newMemory + tempVar4;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (tempVar1 + tempVar3) - tempVar4 | 1;\n        oldMemory[-1] = tempVar4 | oldMemory[-1] & 1U;\n        FUNC_0008259c(elfHeader);\n        return oldMemory;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(dwordVar1 + 4) & 0xfffffffe) + dwordVar1 + 4) & 1) == 0) {\n      tempVar1 = *(uint *)(dwordVar1 + 4) & 0xfffffffc;\n      if ((int)tempVar4 <= (int)(tempVar1 + tempVar3)) {\n        iVar2 = *(int *)(dwordVar1 + 0xc);\n        iVar1 = *(int *)(dwordVar1 + 8);\n        *(int *)(iVar1 + 0xc) = iVar2;\n        *(int *)(iVar2 + 8) = iVar1;\n        tempVar3 = tempVar1 + tempVar3;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      tempVar1 = 0;\n      dwordVar1 = 0;\n    }\n    if (-1 < (int)(tempVar2 << 0x1f)) {\n      tempPtr2 = (int *)((int)newMemory - oldMemory[-2]);\n      tempVar2 = (tempPtr2[1] & 0xfffffffcU) + tempVar3;\n      if (dwordVar1 != 0) {\n        if (dwordVar1 == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(tempVar4 + 0x10) <= (int)(tempVar1 + tempVar2)) {\n            newMemory = tempPtr2 + 2;\n            iVar1 = *newMemory;\n            iVar2 = tempPtr2[3];\n            tempVar3 = tempVar3 - 4;\n            *(int *)(iVar1 + 0xc) = iVar2;\n            *(int *)(iVar2 + 8) = iVar1;\n            if (tempVar3 < 0x25) {\n              tempPtr1 = newMemory;\n              if (0x13 < tempVar3) {\n                tempPtr2[2] = *oldMemory;\n                tempPtr2[3] = oldMemory[1];\n                if (tempVar3 < 0x1c) {\n                  oldMemory = oldMemory + 2;\n                  tempPtr1 = tempPtr2 + 4;\n                }\n                else {\n                  tempPtr2[4] = oldMemory[2];\n                  tempPtr2[5] = oldMemory[3];\n                  if (tempVar3 == 0x24) {\n                    tempPtr2[6] = oldMemory[4];\n                    tempPtr1 = oldMemory + 5;\n                    oldMemory = oldMemory + 6;\n                    tempPtr2[7] = *tempPtr1;\n                    tempPtr1 = tempPtr2 + 8;\n                  }\n                  else {\n                    oldMemory = oldMemory + 4;\n                    tempPtr1 = tempPtr2 + 6;\n                  }\n                }\n              }\n              *tempPtr1 = *oldMemory;\n              tempPtr1[1] = oldMemory[1];\n              tempPtr1[2] = oldMemory[2];\n            }\n            else {\n              reverse_copy_00082438(newMemory,oldMemory);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)tempPtr2 + tempVar4;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (tempVar1 + tempVar2) - tempVar4 | 1;\n            tempPtr2[1] = tempVar4 | tempPtr2[1] & 1U;\n            FUNC_0008259c(elfHeader);\n            return newMemory;\n          }\n        }\n        else {\n          tempVar1 = tempVar1 + tempVar2;\n          if ((int)tempVar4 <= (int)tempVar1) {\n            iVar2 = *(int *)(dwordVar1 + 0xc);\n            iVar1 = *(int *)(dwordVar1 + 8);\n            *(int *)(iVar1 + 0xc) = iVar2;\n            *(int *)(iVar2 + 8) = iVar1;\n            tempPtr1 = tempPtr2 + 2;\n            iVar1 = *tempPtr1;\n            iVar2 = tempPtr2[3];\n            tempVar2 = tempVar3 - 4;\n            *(int *)(iVar1 + 0xc) = iVar2;\n            *(int *)(iVar2 + 8) = iVar1;\n            tempVar3 = tempVar1;\n            if (tempVar2 < 0x25) {\n              newMemory = tempPtr1;\n              if (0x13 < tempVar2) {\n                tempPtr2[2] = *oldMemory;\n                tempPtr2[3] = oldMemory[1];\n                if (tempVar2 < 0x1c) {\n                  oldMemory = oldMemory + 2;\n                  newMemory = tempPtr2 + 4;\n                }\n                else {\n                  tempPtr2[4] = oldMemory[2];\n                  tempPtr2[5] = oldMemory[3];\n                  if (tempVar2 == 0x24) {\n                    tempPtr2[6] = oldMemory[4];\n                    newMemory = oldMemory + 5;\n                    oldMemory = oldMemory + 6;\n                    tempPtr2[7] = *newMemory;\n                    newMemory = tempPtr2 + 8;\n                  }\n                  else {\n                    oldMemory = oldMemory + 4;\n                    newMemory = tempPtr2 + 6;\n                  }\n                }\n              }\n              *newMemory = *oldMemory;\n              newMemory[1] = oldMemory[1];\n              newMemory[2] = oldMemory[2];\n              tempVar2 = tempPtr2[1];\n              newMemory = tempPtr2;\n              oldMemory = tempPtr1;\n            }\n            else {\n              reverse_copy_00082438(tempPtr1,oldMemory);\n              tempVar2 = tempPtr2[1];\n              newMemory = tempPtr2;\n              oldMemory = tempPtr1;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)tempVar4 <= (int)tempVar2) {\n        tempPtr1 = tempPtr2 + 2;\n        iVar1 = *tempPtr1;\n        iVar2 = tempPtr2[3];\n        tempVar1 = tempVar3 - 4;\n        *(int *)(iVar1 + 0xc) = iVar2;\n        *(int *)(iVar2 + 8) = iVar1;\n        tempVar3 = tempVar2;\n        if (tempVar1 < 0x25) {\n          newMemory = tempPtr1;\n          if (0x13 < tempVar1) {\n            tempPtr2[2] = *oldMemory;\n            tempPtr2[3] = oldMemory[1];\n            if (tempVar1 < 0x1c) {\n              oldMemory = oldMemory + 2;\n              newMemory = tempPtr2 + 4;\n            }\n            else {\n              tempPtr2[4] = oldMemory[2];\n              tempPtr2[5] = oldMemory[3];\n              if (tempVar1 == 0x24) {\n                tempPtr2[6] = oldMemory[4];\n                newMemory = oldMemory + 5;\n                oldMemory = oldMemory + 6;\n                tempPtr2[7] = *newMemory;\n                newMemory = tempPtr2 + 8;\n              }\n              else {\n                oldMemory = oldMemory + 4;\n                newMemory = tempPtr2 + 6;\n              }\n            }\n          }\n          *newMemory = *oldMemory;\n          newMemory[1] = oldMemory[1];\n          newMemory[2] = oldMemory[2];\n          tempVar2 = tempPtr2[1];\n          newMemory = tempPtr2;\n          oldMemory = tempPtr1;\n        }\n        else {\n          reverse_copy_00082438(tempPtr1,oldMemory);\n          tempVar2 = tempPtr2[1];\n          newMemory = tempPtr2;\n          oldMemory = tempPtr1;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    tempPtr2 = (int *)relocate_elf_relocations_00081e14(elfHeader,size);\n    if (tempPtr2 == (int *)0x0) goto LAB_000826a4;\n    tempVar2 = oldMemory[-1];\n    if (tempPtr2 + -2 != (int *)((tempVar2 & 0xfffffffe) + (int)newMemory)) {\n      tempVar3 = tempVar3 - 4;\n      if (tempVar3 < 0x25) {\n        newMemory = oldMemory;\n        tempPtr1 = tempPtr2;\n        if (0x13 < tempVar3) {\n          *tempPtr2 = *oldMemory;\n          tempPtr2[1] = oldMemory[1];\n          if (tempVar3 < 0x1c) {\n            newMemory = oldMemory + 2;\n            tempPtr1 = tempPtr2 + 2;\n          }\n          else {\n            tempPtr2[2] = oldMemory[2];\n            tempPtr2[3] = oldMemory[3];\n            if (tempVar3 == 0x24) {\n              tempPtr2[4] = oldMemory[4];\n              tempPtr2[5] = oldMemory[5];\n              newMemory = oldMemory + 6;\n              tempPtr1 = tempPtr2 + 6;\n            }\n            else {\n              newMemory = oldMemory + 4;\n              tempPtr1 = tempPtr2 + 4;\n            }\n          }\n        }\n        *tempPtr1 = *newMemory;\n        tempPtr1[1] = newMemory[1];\n        tempPtr1[2] = newMemory[2];\n      }\n      else {\n        reverse_copy_00082438(tempPtr2,oldMemory);\n      }\n      update_elf_relocation_00083d9c(elfHeader,oldMemory);\n      goto LAB_000826a4;\n    }\n    tempVar3 = tempVar3 + (tempPtr2[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  tempVar1 = tempVar3 - tempVar4;\n  tempPtr2 = oldMemory;\n  if (tempVar1 < 0x10) {\n    newMemory[1] = tempVar2 & 1 | tempVar3;\n    *(uint *)((int)newMemory + tempVar3 + 4) = *(uint *)((int)newMemory + tempVar3 + 4) | 1;\n  }\n  else {\n    newMemory[1] = tempVar2 & 1 | tempVar4;\n    *(uint *)((int)newMemory + tempVar4 + 4) = tempVar1 | 1;\n    *(uint *)((int)newMemory + tempVar1 + tempVar4 + 4) = *(uint *)((int)newMemory + tempVar1 + tempVar4 + 4) | 1;\n    update_elf_relocation_00083d9c(elfHeader,(int)newMemory + tempVar4 + 8);\n  }\nLAB_000826a4:\n  FUNC_0008259c(elfHeader);\n  return tempPtr2;\n}\n\n",
            "renaming": {
                "FUN_000825b0": "reallocate_memory_000825b0",
                "param_1": "elfHeader",
                "param_2": "oldMemory",
                "param_3": "size",
                "dVar1": "dwordVar1",
                "piVar2": "newMemory",
                "uVar3": "tempVar1",
                "iVar4": "iVar1",
                "uVar5": "tempVar2",
                "iVar6": "iVar2",
                "piVar7": "tempPtr1",
                "uVar8": "tempVar3",
                "uVar9": "tempVar4",
                "piVar10": "tempPtr2"
            },
            "calling": [
                "FUN_00083f34",
                "FUN_000825a0"
            ],
            "called": [
                "FUN_00081e14",
                "FUN_00082598",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082970": {
            "entrypoint": "0x00082970",
            "current_name": "update_parameter_if_sum_negative_00082970",
            "code": "\nvoid updateParameterIfSumNegative_00082970(int *result,undefined4 inputValue)\n\n{\n  int sum;\n  \n  DAT_200711bc = 0;\n  sum = calculate_sum_0008118c(inputValue);\n  if ((sum == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082970": "update_parameter_if_sum_negative_00082970",
                "param_1": "result",
                "param_2": "inputValue",
                "iVar1": "sum"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "called": [
                "FUN_0008118c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082994": {
            "entrypoint": "0x00082994",
            "current_name": "copy_string_00082994",
            "code": "\nvoid copyString_00082994(uint *destination,uint *source)\n\n{\n  char currentChar;\n  ushort currentShort;\n  uint *nextPointer;\n  uint *tempPointer;\n  uint currentWord;\n  uint currentByte;\n  uint *destinationPointer;\n  bool isZeroByte;\n  \n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      source = (uint *)((int)source + 1);\n      destination = (uint *)((int)destination + 1);\n    } while (currentChar != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    tempPointer = source;\n    if (((uint)source & 1) != 0) {\n      tempPointer = (uint *)((int)source + 1);\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      destination = (uint *)((int)destination + 1);\n      if (currentChar == '\\0') {\n        return;\n      }\n    }\n    source = tempPointer;\n    if (((uint)tempPointer & 2) != 0) {\n      source = (uint *)((int)tempPointer + 2);\n      currentShort = *(ushort *)tempPointer;\n      isZeroByte = (currentShort & 0xff) == 0;\n      if (isZeroByte) {\n        *(char *)destination = (char)currentShort;\n      }\n      else {\n        *(ushort *)destination = currentShort;\n        isZeroByte = (currentShort & 0xff00) == 0;\n        destination = (uint *)((int)destination + 2);\n      }\n      if (isZeroByte) {\n        return;\n      }\n    }\n  }\n  currentWord = *source;\n  tempPointer = source + 1;\n  destinationPointer = destination;\n  if (((uint)source & 4) != 0) {\n    if ((currentWord + 0xfefefeff & ~currentWord & 0x80808080) != 0) goto LAB_000829f8;\n    destinationPointer = destination + 1;\n    *destination = currentWord;\n    tempPointer = source + 2;\n    currentWord = source[1];\n  }\n  while( true ) {\n    nextPointer = tempPointer + 1;\n    currentByte = *tempPointer;\n    destination = destinationPointer;\n    if ((currentWord + 0xfefefeff & ~currentWord & 0x80808080) != 0) break;\n    destination = destinationPointer + 1;\n    *destinationPointer = currentWord;\n    currentWord = currentByte;\n    if ((currentByte + 0xfefefeff & ~currentByte & 0x80808080) != 0) break;\n    tempPointer = tempPointer + 2;\n    currentWord = *nextPointer;\n    destinationPointer = destinationPointer + 2;\n    *destination = currentByte;\n  }\nLAB_000829f8:\n  do {\n    *(char *)destination = (char)currentWord;\n    currentByte = currentWord & 0xff;\n    currentWord = currentWord >> 8 | currentWord << 0x18;\n    destination = (uint *)((int)destination + 1);\n  } while (currentByte != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082994": "copy_string_00082994",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentChar",
                "uVar2": "currentShort",
                "puVar3": "nextPointer",
                "puVar4": "tempPointer",
                "uVar5": "currentWord",
                "uVar6": "currentByte",
                "puVar7": "destinationPointer",
                "bVar8": "isZeroByte"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082a50": {
            "entrypoint": "0x00082a50",
            "current_name": "count_leading_zeros_00082a50",
            "code": "\nint countLeadingZeros_00082a50(uint value)\n\n{\n  int leadingZeros;\n  uint *ptr;\n  uint currentValue;\n  bool isZero;\n  \n  ptr = (uint *)(value & 0xfffffffc);\n  leadingZeros = -(value & 3);\n  currentValue = *ptr;\n  if ((value & 3) != 0) {\n    currentValue = currentValue | 0xffffffffU >> ((leadingZeros + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (currentValue + 0xfefefeff & ~currentValue & 0x80808080) == 0) {\n    leadingZeros = leadingZeros + 4;\n    currentValue = *ptr;\n  }\n  isZero = (currentValue & 0xff) == 0;\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (currentValue & 0xff00) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (currentValue & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_00082a50": "count_leading_zeros_00082a50",
                "param_1": "value",
                "iVar1": "leadingZeros",
                "puVar2": "ptr",
                "uVar3": "currentValue",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00081682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082ac0": {
            "entrypoint": "0x00082ac0",
            "current_name": "process_and_validate_data_00082ac0",
            "code": "\nint processAndValidateData_00082ac0(undefined4 data,int size,int **dataPointer)\n\n{\n  int *currentPointer;\n  int result;\n  int *tempPointer;\n  uint iteration;\n  undefined4 *dataValue;\n  uint shiftedValue;\n  uint shiftedCount;\n  \n  if (-1 < *(int *)(size + 100) << 0x12) {\n    result = process_data_00083f34();\n    dataPointer[2] = (int *)0x0;\n    dataPointer[1] = (int *)0x0;\n    return result;\n  }\n  tempPointer = dataPointer[2];\n  currentPointer = *dataPointer;\n  while (tempPointer != (int *)0x0) {\n    shiftedValue = currentPointer[1];\n    shiftedCount = shiftedValue >> 2;\n    if (shiftedCount != 0) {\n      dataValue = (undefined4 *)(*currentPointer + -4);\n      iteration = 0;\n      do {\n        dataValue = dataValue + 1;\n        result = process_data_00083c40(data,*dataValue,size);\n        iteration = iteration + 1;\n        if (result == -1) goto LAB_00082b00;\n      } while (shiftedCount != iteration);\n      tempPointer = dataPointer[2];\n    }\n    tempPointer = (int *)((int)tempPointer - (shiftedValue & 0xfffffffc));\n    dataPointer[2] = tempPointer;\n    currentPointer = currentPointer + 2;\n  }\n  result = 0;\nLAB_00082b00:\n  dataPointer[2] = (int *)0x0;\n  dataPointer[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082ac0": "process_and_validate_data_00082ac0",
                "param_1": "data",
                "param_2": "size",
                "param_3": "dataPointer",
                "piVar1": "currentPointer",
                "iVar2": "result",
                "piVar3": "tempPointer",
                "uVar4": "iteration",
                "puVar5": "dataValue",
                "uVar6": "shiftedValue",
                "uVar7": "shiftedCount"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00083c40",
                "FUN_00083f34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082b38": {
            "entrypoint": "0x00082b38",
            "current_name": "FUNC_00082b38",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint FUNC_00082b38(int param_1,int param_2,int *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  int ********ppppppppiVar6;\n  int *piVar7;\n  int iVar8;\n  char cVar9;\n  int *******pppppppiVar10;\n  uint uVar11;\n  int **ppiVar12;\n  uint uVar13;\n  uint uVar14;\n  int iVar15;\n  int ********ppppppppiVar16;\n  int iVar17;\n  int *******pppppppiVar18;\n  int *piVar19;\n  int *******pppppppiVar20;\n  uint uVar21;\n  int *piVar22;\n  int *******pppppppiVar23;\n  undefined4 uVar24;\n  int ********ppppppppiVar25;\n  bool bVar26;\n  longlong lVar27;\n  int *******local_dc;\n  int *******local_d4;\n  int **local_c8;\n  int local_c4;\n  char *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  int ********local_9c;\n  int local_98;\n  int *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  int *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  uVar13 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar13 = uVar13 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar13;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar13 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar13 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar8 = initialize_data_structures_00083808(param_1,param_2);\n    if (iVar8 != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    iVar8 = process_data_0008378c(param_1,param_2,param_3,param_4);\n    return iVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (char *)0x0;\n  local_94 = (int *******)0x0;\n  local_98 = 0;\n  local_c4 = 0;\n  ppppppppiVar6 = (int ********)local_68;\n  local_c8 = param_4;\n  local_9c = (int ********)local_68;\nLAB_00082b9e:\n  pppppppiVar10 = param_3;\n  if ((*(char *)param_3 != '\\0') && (*(char *)param_3 != '%')) {\n    do {\n      pppppppiVar10 = (int *******)((int)pppppppiVar10 + 1);\n      if (*(char *)pppppppiVar10 == '\\0') break;\n    } while (*(char *)pppppppiVar10 != '%');\n    pppppppiVar20 = (int *******)((int)pppppppiVar10 - (int)param_3);\n    if (pppppppiVar20 != (int *******)0x0) {\n      local_98 = local_98 + 1;\n      local_94 = (int *******)((int)local_94 + (int)pppppppiVar20);\n      *ppppppppiVar6 = param_3;\n      ppppppppiVar6[1] = pppppppiVar20;\n      if (local_98 < 8) {\n        ppppppppiVar6 = ppppppppiVar6 + 2;\n      }\n      else {\n        if (local_94 == (int *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppiVar20;\n          local_98 = 0;\n          ppppppppiVar6 = (int ********)local_68;\n          goto LAB_00082bee;\n        }\n        iVar8 = process_and_validate_data_00082ac0(param_1,param_2,&local_9c);\n        ppppppppiVar6 = (int ********)local_68;\n        if (iVar8 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppiVar20;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)pppppppiVar10 != '\\0') {\n    local_a1 = '\\0';\n    uVar14 = (uint)*(byte *)((int)pppppppiVar10 + 1);\n    uVar13 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar26 = false;\n    pppppppiVar20 = (int *******)0x0;\n    local_d4 = (int *******)0xffffffff;\n    param_3 = (int *******)((int)pppppppiVar10 + 1);\nLAB_00082c12:\n    param_3 = (int *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar14) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar14 != 0) {\n        local_dc = (int *******)0x1;\n        local_d4 = (int *******)0x1;\n        ppppppppiVar25 = (int ********)&local_90;\n        local_90 = (char)uVar14;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppiVar20 = (int *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppiVar20 < 0) {\n        pppppppiVar20 = (int *******)-(int)pppppppiVar20;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar14 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar13 = uVar13 | 4;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar14 = (uint)*(byte *)param_3;\n      pppppppiVar10 = (int *******)((int)param_3 + 1);\n      if (uVar14 == 0x2a) {\n        uVar14 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (int *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppiVar10;\n        if ((int)local_d4 < 0) {\n          local_d4 = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar11 = uVar14 - 0x30;\n      if (uVar11 < 10) {\n        uVar21 = 0;\n        do {\n          param_3 = (int *******)((int)pppppppiVar10 + 1);\n          uVar14 = (uint)*(byte *)pppppppiVar10;\n          uVar21 = uVar11 + uVar21 * 10;\n          uVar11 = uVar14 - 0x30;\n          pppppppiVar10 = param_3;\n        } while (uVar11 < 10);\n        local_d4 = (int *******)(uVar21 | (int)uVar21 >> 0x1f);\n      }\n      else {\n        local_d4 = (int *******)0x0;\n        param_3 = pppppppiVar10;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar13 = uVar13 | 0x80;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar19 = *local_c8;\n      piVar22 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar8 = (uint)bVar2 << 4;\n      iVar15 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar15 = (uint)bVar26 << 6, bVar26 != 0)) {\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        iVar8 = iVar15;\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar26 == false)) {\n        iVar8 = 1;\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar8 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = \"0123456789ABCDEF\";\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar19 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (int *******)0x1;\n      local_90 = SUB41(piVar19,0);\n      local_d4 = (int *******)0x1;\n      ppppppppiVar25 = (int ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar26 != false)) {\n        piVar19 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar22 < 0) {\n        bVar26 = piVar19 != (int *)0x0;\n        piVar19 = (int *)-(int)piVar19;\n        piVar22 = (int *)(-(int)piVar22 - (uint)bVar26);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar8 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar13 = uVar13 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar14 = (uint)piVar19 | (uint)piVar22;\n      iVar8 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar26 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar14 = (uint)*(byte *)param_3;\n      if (uVar14 == 0x6c) {\n        bVar1 = true;\n        uVar14 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (int *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar26) {\n            piVar19 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar19 = (short)local_c4;\n          }\n          else {\n            piVar19 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *piVar19 = local_c4;\n          }\n        }\n        else {\n          piVar19 = *local_c8;\n          local_c8 = local_c8 + 1;\n          *piVar19 = local_c4;\n        }\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        *piVar19 = local_c4;\n        piVar19[1] = local_c4 >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      iVar8 = 0;\n      break;\n    case 0x70:\n      piVar19 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar22 = (int *)0x0;\n      local_a0 = 0x30;\n      local_c0 = \"0123456789abcdef\";\n      iVar8 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      ppppppppiVar25 = (int ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppiVar25 != (int ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (int *******)count_leading_zeros_00082a50(ppppppppiVar25);\n          pppppppiVar10 = (int *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          iVar8 = find_first_occurrence_00084384(ppppppppiVar25,0,local_d4);\n          cVar4 = local_a1;\n          if (iVar8 == 0) {\n            pppppppiVar10 = (int *******)0x0;\n          }\n          else {\n            pppppppiVar18 = (int *******)(iVar8 - (int)ppppppppiVar25);\n            if ((int)local_d4 <= (int)(int *******)(iVar8 - (int)ppppppppiVar25)) {\n              pppppppiVar18 = local_d4;\n            }\n            pppppppiVar10 = (int *******)0x0;\n            local_d4 = pppppppiVar18;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < local_d4) {\n        local_d4 = (int *******)0x6;\n      }\n      local_dc = (int *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppiVar25 = (int ********)&UNK_00085840;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppiVar10 = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      iVar8 = 1;\n      break;\n    case 0x78:\n      local_c0 = \"0123456789abcdef\";\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar26 != false)) {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar19 | (uint)piVar22) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar8 = 2;\n        local_9f = (char)uVar14;\n      }\n      else {\n        iVar8 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar13 = uVar13 & 0xffffff7f;\n    }\n    uVar14 = (uint)piVar19 | (uint)piVar22;\njoined_r0x00082d78:\n    lVar27 = CONCAT44(piVar22,piVar19);\n    pppppppiVar10 = local_d4;\n    if ((uVar14 == 0) && (local_d4 == (int *******)0x0)) {\n      ppppppppiVar25 = (int ********)local_68;\n      if ((iVar8 != 0) || (!bVar3)) goto LAB_00082da0;\n      ppppppppiVar25 = (int ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar8 == 1) {\n      if (piVar22 != (int *)0x0 || (int *)0x9 < piVar19) {\n        ppppppppiVar16 = (int ********)(&cStack_6a + 1);\n        do {\n          ppppppppiVar25 = ppppppppiVar16;\n          uVar24 = (undefined4)((ulonglong)lVar27 >> 0x20);\n          cVar9 = '\\n';\n          calculate_result_00084750((int)lVar27,uVar24,10,0);\n          *(char *)ppppppppiVar25 = cVar9 + '0';\n          lVar27 = calculate_result_00084750((int)lVar27,uVar24,10,0);\n          ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n        } while (lVar27 != 0);\n        local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar19 + '0';\n      ppppppppiVar25 = (int ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppiVar16 = (int ********)(&cStack_6a + 1);\n    if (iVar8 != 2) goto LAB_0008337e;\n    do {\n      ppppppppiVar25 = ppppppppiVar16;\n      uVar14 = (uint)piVar19 & 0xf;\n      piVar19 = (int *)((uint)piVar19 >> 4 | (int)piVar22 << 0x1c);\n      piVar22 = (int *)((uint)piVar22 >> 4);\n      *(char *)ppppppppiVar25 = local_c0[uVar14];\n      ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    } while (((uint)piVar19 | (uint)piVar22) != 0);\n    local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (int *******)0x0) {\n    process_and_validate_data_00082ac0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    ppppppppiVar25 = ppppppppiVar16;\n    piVar7 = (int *)((uint)piVar19 >> 3 | (int)piVar22 << 0x1d);\n    piVar22 = (int *)((uint)piVar22 >> 3);\n    iVar8 = ((uint)piVar19 & 7) + 0x30;\n    *(char *)ppppppppiVar25 = (char)iVar8;\n    ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    piVar19 = piVar7;\n  } while (((uint)piVar7 | (uint)piVar22) != 0);\n  if (bVar3) {\n    if (iVar8 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    }\n    else {\n      *(undefined *)((int)ppppppppiVar25 + -1) = 0x30;\n      ppppppppiVar25 = ppppppppiVar16;\n      local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar16);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppiVar10) {\n    local_dc = pppppppiVar10;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (int *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  if (bVar5) {\n    local_dc = (int *******)((int)local_dc + 2);\n  }\n  if ((uVar13 == 0) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar18)) {\n    if ((int)pppppppiVar18 < 0x11) {\n      local_98 = local_98 + 1;\n    }\n    else {\n      do {\n        pppppppiVar23 = pppppppiVar18;\n        iVar8 = local_98 + 1;\n        local_94 = local_94 + 4;\n        *ppppppppiVar6 = (int *******)0x85808;\n        ppppppppiVar6[1] = (int *******)0x10;\n        if (iVar8 < 8) {\n          iVar15 = local_98 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\n          local_98 = iVar8;\n        }\n        else if (local_94 == (int *******)0x0) {\n          iVar15 = 1;\n          ppppppppiVar6 = (int ********)local_68;\n          local_98 = 0;\n        }\n        else {\n          local_98 = iVar8;\n          iVar8 = process_and_validate_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 != 0) goto LAB_000833de;\n          iVar15 = local_98 + 1;\n          ppppppppiVar6 = (int ********)local_68;\n        }\n        pppppppiVar18 = pppppppiVar23 + -4;\n      } while (0x10 < (int)pppppppiVar18);\n      pppppppiVar18 = pppppppiVar23 + -4;\n      local_98 = iVar15;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar18);\n    *ppppppppiVar6 = (int *******)0x85808;\n    ppppppppiVar6[1] = pppppppiVar18;\n    if (local_98 < 8) {\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_and_validate_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  else {\n    iVar8 = local_98 + 1;\n  }\n  iVar15 = iVar8;\n  if (local_a1 != '\\0') {\n    local_94 = (int *******)((int)local_94 + 1);\n    iVar15 = 1;\n    *ppppppppiVar6 = (int *******)&local_a1;\n    ppppppppiVar6[1] = (int *******)0x1;\n    local_98 = iVar8;\n    if (iVar8 < 8) {\n      iVar15 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_and_validate_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar15 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  iVar8 = iVar15;\n  iVar17 = local_98;\n  if (bVar5) {\n    local_94 = (int *******)((int)local_94 + 2);\n    *ppppppppiVar6 = (int *******)&local_a0;\n    ppppppppiVar6[1] = (int *******)0x2;\n    if (iVar15 < 8) {\n      iVar8 = iVar15 + 1;\n      iVar17 = iVar15;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      iVar17 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      local_98 = iVar15;\n      iVar8 = process_and_validate_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      iVar17 = local_98;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  local_98 = iVar17;\n  if ((uVar13 == 0x80) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar18)) {\n    if (0x10 < (int)pppppppiVar18) {\n      do {\n        while( true ) {\n          pppppppiVar23 = pppppppiVar18;\n          local_98 = iVar17 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar6 = (int *******)&DAT_00085848;\n          ppppppppiVar6[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar8 = iVar17 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\nLAB_0008348e:\n          iVar17 = local_98;\n          pppppppiVar18 = pppppppiVar23 + -4;\n          if ((int)(pppppppiVar23 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_and_validate_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar8 = local_98 + 1;\n            ppppppppiVar6 = (int ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        iVar8 = 1;\n        iVar17 = 0;\n        pppppppiVar18 = pppppppiVar23 + -4;\n        ppppppppiVar6 = (int ********)local_68;\n      } while (0x10 < (int)(pppppppiVar23 + -4));\nLAB_000834b4:\n      pppppppiVar18 = pppppppiVar23 + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar18);\n    *ppppppppiVar6 = (int *******)&DAT_00085848;\n    ppppppppiVar6[1] = pppppppiVar18;\n    local_98 = iVar8;\n    if (iVar8 < 8) {\n      iVar8 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_and_validate_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  pppppppiVar10 = (int *******)((int)pppppppiVar10 - (int)local_d4);\n  ppppppppiVar16 = (int ********)local_68;\n  if ((int)pppppppiVar10 < 1) {\nLAB_000832c6:\n    local_94 = (int *******)((int)local_94 + (int)local_d4);\n    *ppppppppiVar6 = (int *******)ppppppppiVar25;\n    ppppppppiVar6[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = iVar8;\n    if (iVar8 < 8) goto LAB_0008345a;\n    if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n    }\n    else {\n      iVar8 = process_and_validate_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    iVar15 = local_98;\n    if (0x10 < (int)pppppppiVar10) {\n      do {\n        while( true ) {\n          pppppppiVar18 = pppppppiVar10;\n          local_98 = iVar15 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar6 = (int *******)&DAT_00085848;\n          ppppppppiVar6[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar8 = iVar15 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\nLAB_00083282:\n          iVar15 = local_98;\n          pppppppiVar10 = pppppppiVar18 + -4;\n          if ((int)(pppppppiVar18 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_and_validate_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar8 = local_98 + 1;\n            ppppppppiVar6 = (int ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        iVar8 = 1;\n        ppppppppiVar6 = (int ********)local_68;\n        iVar15 = 0;\n        pppppppiVar10 = pppppppiVar18 + -4;\n      } while (0x10 < (int)(pppppppiVar18 + -4));\nLAB_000832aa:\n      pppppppiVar10 = pppppppiVar18 + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar10);\n    *ppppppppiVar6 = (int *******)&DAT_00085848;\n    ppppppppiVar6[1] = pppppppiVar10;\n    if (iVar8 < 8) {\n      iVar8 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (int *******)0x0) {\n      local_98 = iVar8;\n      iVar8 = process_and_validate_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = 1;\n    ppppppppiVar6 = (int ********)local_68;\n    local_68 = (undefined  [4])ppppppppiVar25;\nLAB_0008345a:\n    ppppppppiVar16 = ppppppppiVar6 + 2;\n    local_94 = local_d4;\n  }\n  if (((uVar13 & 4) != 0) &&\n     (pppppppiVar10 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar10)) {\n    iVar8 = local_98;\n    if ((int)pppppppiVar10 < 0x11) {\n      iVar15 = local_98 + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = iVar8 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar16 = (int *******)0x85808;\n          ppppppppiVar16[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar15 = iVar8 + 2;\n          ppppppppiVar16 = ppppppppiVar16 + 2;\nLAB_00083316:\n          pppppppiVar10 = pppppppiVar10 + -4;\n          iVar8 = local_98;\n          if ((int)pppppppiVar10 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_and_validate_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar15 = local_98 + 1;\n            ppppppppiVar16 = (int ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppiVar10 = pppppppiVar10 + -4;\n        iVar15 = 1;\n        iVar8 = 0;\n        ppppppppiVar16 = (int ********)local_68;\n      } while (0x10 < (int)pppppppiVar10);\n    }\nLAB_0008333e:\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar10);\n    *ppppppppiVar16 = (int *******)0x85808;\n    ppppppppiVar16[1] = pppppppiVar10;\n    local_98 = iVar15;\n    if (7 < iVar15) {\n      if (local_94 == (int *******)0x0) {\n        if ((int)local_dc < (int)pppppppiVar20) {\n          local_dc = pppppppiVar20;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar8 = process_and_validate_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppiVar20) {\n    local_dc = pppppppiVar20;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (int *******)0x0) &&\n     (iVar8 = process_and_validate_data_00082ac0(param_1,param_2,&local_9c), iVar8 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = 0;\n  ppppppppiVar6 = (int ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar11 = uVar14 - 0x30;\n  pppppppiVar20 = (int *******)0x0;\n  pppppppiVar10 = param_3;\n  do {\n    param_3 = (int *******)((int)pppppppiVar10 + 1);\n    uVar14 = (uint)*(byte *)pppppppiVar10;\n    pppppppiVar20 = (int *******)(uVar11 + (int)pppppppiVar20 * 10);\n    uVar11 = uVar14 - 0x30;\n    pppppppiVar10 = param_3;\n  } while (uVar11 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar14 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "calling": [
                "FUN_0008378c"
            ],
            "called": [
                "FUN_00084750",
                "FUN_0008378c",
                "FUN_00082a50",
                "FUN_00082ac0",
                "FUN_00084384",
                "FUN_00083b14",
                "FUN_00083808"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008378c": {
            "entrypoint": "0x0008378c",
            "current_name": "process_data_0008378c",
            "code": "\nint processData_0008378c(undefined4 arg1,int arg2)\n\n{\n  int result;\n  int processData_0008378cResult;\n  undefined *buffer [2];\n  undefined4 bufferSize;\n  ushort maskedValue;\n  undefined2 value;\n  undefined *bufferPtr;\n  undefined4 const1;\n  undefined4 const2;\n  undefined4 const3;\n  undefined4 const4;\n  undefined4 const5;\n  undefined dataBuffer [1024];\n  \n  const5 = *(undefined4 *)(arg2 + 100);\n  const3 = *(undefined4 *)(arg2 + 0x1c);\n  value = *(undefined2 *)(arg2 + 0xe);\n  const4 = *(undefined4 *)(arg2 + 0x24);\n  buffer[0] = dataBuffer;\n  maskedValue = *(ushort *)(arg2 + 0xc) & 0xfffd;\n  bufferSize = 0x400;\n  const1 = 0x400;\n  const2 = 0;\n  bufferPtr = buffer[0];\n  result = FUNC_00082b38(arg1,buffer);\n  if ((-1 < result) && (processData_0008378cResult = process_data_00083adc(arg1,buffer), processData_0008378cResult != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)maskedValue << 0x19) < 0) {\n    *(ushort *)(arg2 + 0xc) = *(ushort *)(arg2 + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008378c": "process_data_0008378c",
                "param_1": "arg1",
                "param_2": "arg2",
                "iVar1": "result",
                "iVar2": "processDataResult",
                "local_488": "buffer",
                "local_480": "bufferSize",
                "local_47c": "maskedValue",
                "local_47a": "value",
                "local_478": "bufferPtr",
                "local_474": "const1",
                "local_470": "const2",
                "local_46c": "const3",
                "local_464": "const4",
                "local_424": "const5",
                "auStack_420": "dataBuffer"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00082b38",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint FUN_0008378c(undefined4 param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined *local_488 [2];\n  undefined4 local_480;\n  ushort local_47c;\n  undefined2 local_47a;\n  undefined *local_478;\n  undefined4 local_474;\n  undefined4 local_470;\n  undefined4 local_46c;\n  undefined4 local_464;\n  undefined4 local_424;\n  undefined auStack_420 [1024];\n  \n  local_424 = *(undefined4 *)(param_2 + 100);\n  local_46c = *(undefined4 *)(param_2 + 0x1c);\n  local_47a = *(undefined2 *)(param_2 + 0xe);\n  local_464 = *(undefined4 *)(param_2 + 0x24);\n  local_488[0] = auStack_420;\n  local_47c = *(ushort *)(param_2 + 0xc) & 0xfffd;\n  local_480 = 0x400;\n  local_474 = 0x400;\n  local_470 = 0;\n  local_478 = local_488[0];\n  iVar1 = FUNC_00082b38(param_1,local_488);\n  if ((-1 < iVar1) && (iVar2 = process_data_00083adc(param_1,local_488), iVar2 != 0)) {\n    iVar1 = -1;\n  }\n  if ((int)((uint)local_47c << 0x19) < 0) {\n    *(ushort *)(param_2 + 0xc) = *(ushort *)(param_2 + 0xc) | 0x40;\n  }\n  return iVar1;\n}\n\n"
        },
        "FUN_00083808": {
            "entrypoint": "0x00083808",
            "current_name": "initialize_data_structures_00083808",
            "code": "\nundefined4 initialize_data_structures_00083808(undefined4 *output_value,int *input_values)\n\n{\n  int tmp_var1;\n  int tmp_var2;\n  uint tmp_var3;\n  ushort tmp_var4;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    initialize_data_structures_00083808_00083b14();\n  }\n  tmp_var4 = *(ushort *)(input_values + 3);\n  tmp_var3 = (uint)tmp_var4;\n  if ((int)(tmp_var3 << 0x1c) < 0) {\n    tmp_var2 = input_values[4];\n  }\n  else {\n    if (-1 < (int)(tmp_var3 << 0x1b)) {\n      *output_value = 9;\n      *(ushort *)(input_values + 3) = tmp_var4 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(tmp_var3 << 0x1d) < 0) {\n      if ((int *)input_values[0xc] != (int *)0x0) {\n        if ((int *)input_values[0xc] != input_values + 0x10) {\n          update_elf_relocation_00083d9c(output_value);\n          tmp_var4 = *(ushort *)(input_values + 3);\n        }\n        input_values[0xc] = 0;\n      }\n      tmp_var2 = input_values[4];\n      tmp_var4 = tmp_var4 & 0xffdb;\n      *input_values = tmp_var2;\n      input_values[1] = 0;\n    }\n    else {\n      tmp_var2 = input_values[4];\n    }\n    *(ushort *)(input_values + 3) = tmp_var4 | 8;\n    tmp_var3 = (uint)(tmp_var4 | 8);\n  }\n  if ((tmp_var2 == 0) && ((tmp_var3 & 0x280) != 0x200)) {\n    verify_and_initialize_000842a4(output_value,input_values);\n    tmp_var3 = (uint)*(ushort *)(input_values + 3);\n    tmp_var2 = input_values[4];\n  }\n  if ((tmp_var3 & 1) == 0) {\n    tmp_var1 = 0;\n    if (-1 < (int)(tmp_var3 << 0x1e)) {\n      tmp_var1 = input_values[5];\n    }\n    input_values[2] = tmp_var1;\n  }\n  else {\n    input_values[6] = -input_values[5];\n    input_values[2] = 0;\n  }\n  if ((tmp_var2 == 0) && ((int)((uint)*(ushort *)(input_values + 3) << 0x18) < 0)) {\n    *(ushort *)(input_values + 3) = *(ushort *)(input_values + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083808": "initialize_data_structures_00083808",
                "param_1": "output_value",
                "param_2": "input_values",
                "iVar1": "tmp_var1",
                "iVar2": "tmp_var2",
                "uVar3": "tmp_var3",
                "uVar4": "tmp_var4"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_000842a4",
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083974": {
            "entrypoint": "0x00083974",
            "current_name": "copy_data_00083974",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x000838cc) */\n/* WARNING: Removing unreachable block (ram,0x00083960) */\n/* WARNING: Removing unreachable block (ram,0x000838de) */\n/* WARNING: Removing unreachable block (ram,0x000838e4) */\n/* WARNING: Removing unreachable block (ram,0x000838f0) */\n/* WARNING: Removing unreachable block (ram,0x0008390a) */\n/* WARNING: Removing unreachable block (ram,0x000838e8) */\n/* WARNING: Removing unreachable block (ram,0x00083922) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n/* WARNING: Removing unreachable block (ram,0x00083924) */\n\nundefined4 copyData_00083974(undefined4 inputData)\n\n{\n  return inputData;\n}\n\n",
            "renaming": {
                "FUN_00083974": "copy_data_00083974",
                "param_1": "inputData"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [
                "FUN_00081df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083adc": {
            "entrypoint": "0x00083adc",
            "current_name": "process_data_00083adc",
            "code": "\nundefined4 processData_00083adc(int *dataArray,int *infoArray)\n\n{\n  int *ptrVar1;\n  int intVar2;\n  ushort ushortVar3;\n  uint uintVar;\n  int intVar2;\n  code *functionVar;\n  undefined4 unaffVar;\n  int intVar3;\n  \n  if ((dataArray != (int *)0x0) && (dataArray[0xe] == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  if (*(short *)(infoArray + 3) == 0) {\n    return 0;\n  }\n  ushortVar3 = *(ushort *)(infoArray + 3);\n  if ((int)((uint)ushortVar3 << 0x1c) < 0) {\n    intVar3 = infoArray[4];\n    if (intVar3 == 0) {\n      return 0;\n    }\n    intVar2 = *infoArray;\n    if ((ushortVar3 & 3) == 0) {\n      intVar2 = infoArray[5];\n    }\n    else {\n      intVar2 = 0;\n    }\n    *infoArray = intVar3;\n    intVar2 = intVar2 - intVar3;\n    infoArray[2] = intVar2;\n    do {\n      if (intVar2 < 1) {\n        return 0;\n      }\n      intVar2 = (*(code *)infoArray[9])(dataArray,infoArray[7],intVar3,intVar2,unaffVar);\n      intVar2 = intVar2 - intVar2;\n      intVar3 = intVar3 + intVar2;\n    } while (0 < intVar2);\nLAB_00083a54:\n    *(ushort *)(infoArray + 3) = *(ushort *)(infoArray + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(infoArray + 3) = ushortVar3 | 0x800;\n  if ((infoArray[1] < 1) && (infoArray[0xf] < 1)) {\n    return 0;\n  }\n  functionVar = (code *)infoArray[10];\n  if (functionVar == (code *)0x0) {\n    return 0;\n  }\n  uintVar = (uint)(ushortVar3 | 0x800);\n  intVar3 = *dataArray;\n  *dataArray = 0;\n  if ((ushortVar3 & 0x1000) == 0) {\n    intVar2 = (*functionVar)(dataArray,infoArray[7],uintVar & 0x1000,1);\n    if ((intVar2 == -1) && (intVar2 = *dataArray, intVar2 != 0)) {\n      if ((intVar2 == 0x1d) || (intVar2 == 0x16)) {\n        *dataArray = intVar3;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    uintVar = (uint)*(ushort *)(infoArray + 3);\n    functionVar = (code *)infoArray[10];\n  }\n  else {\n    intVar2 = infoArray[0x14];\n  }\n  if (((int)(uintVar << 0x1d) < 0) && (intVar2 = intVar2 - infoArray[1], infoArray[0xc] != 0)) {\n    intVar2 = intVar2 - infoArray[0xf];\n  }\n  intVar2 = (*functionVar)(dataArray,infoArray[7],intVar2,0);\n  if (intVar2 == -1) {\n    intVar2 = *dataArray;\n    if (intVar2 != 0) {\n      if ((intVar2 != 0x1d) && (intVar2 != 0x16)) {\n        *(ushort *)(infoArray + 3) = *(ushort *)(infoArray + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(infoArray + 3) = *(ushort *)(infoArray + 3) & 0xf7ff;\n      *infoArray = infoArray[4];\n      infoArray[1] = 0;\n      goto LAB_00083a00;\n    }\n    ushortVar3 = *(ushort *)(infoArray + 3) & 0xf7ff;\n    infoArray[1] = 0;\n    *(ushort *)(infoArray + 3) = ushortVar3;\n    *infoArray = infoArray[4];\n  }\n  else {\n    ushortVar3 = *(ushort *)(infoArray + 3) & 0xf7ff;\n    *infoArray = infoArray[4];\n    *(ushort *)(infoArray + 3) = ushortVar3;\n    infoArray[1] = 0;\n  }\n  if ((int)((uint)ushortVar3 << 0x13) < 0) {\n    infoArray[0x14] = intVar2;\n  }\nLAB_00083a00:\n  ptrVar1 = (int *)infoArray[0xc];\n  *dataArray = intVar3;\n  if (ptrVar1 == (int *)0x0) {\n    return 0;\n  }\n  if (ptrVar1 != infoArray + 0x10) {\n    update_elf_relocation_00083d9c(dataArray);\n  }\n  infoArray[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083adc": "process_data_00083adc",
                "param_1": "dataArray",
                "param_2": "infoArray",
                "piVar": "ptrVar",
                "iVar": "intVar",
                "uVar": "ushortVar",
                "uVar4": "uintVar",
                "iVar5": "intVar2",
                "pcVar6": "functionVar",
                "unaff_r4": "unaffVar",
                "iVar7": "intVar3"
            },
            "calling": [
                "FUN_0008378c",
                "FUN_00083f34",
                "FUN_000846a4",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b14": {
            "entrypoint": "0x00083b14",
            "current_name": "initialize_data_structures_00083b14",
            "code": "\nvoid initializeDataStructures_00083b14(int dataStruct)\n\n{\n  undefined4 *ptrVar1;\n  undefined4 *ptrVar2;\n  \n  if (*(int *)(dataStruct + 0x38) == 0) {\n    ptrVar1 = *(undefined4 **)(dataStruct + 4);\n    *(undefined **)(dataStruct + 0x3c) = &LAB_00083b08_1;\n    *(undefined4 *)(dataStruct + 0x2e4) = 3;\n    *(int *)(dataStruct + 0x2e8) = dataStruct + 0x2ec;\n    *(undefined4 *)(dataStruct + 0x2e0) = 0;\n    *(undefined2 *)(ptrVar1 + 3) = 4;\n    *ptrVar1 = 0;\n    ptrVar1[1] = 0;\n    ptrVar1[2] = 0;\n    ptrVar1[0x19] = 0;\n    *(undefined2 *)((int)ptrVar1 + 0xe) = 0;\n    ptrVar1[4] = 0;\n    ptrVar1[5] = 0;\n    ptrVar1[6] = 0;\n    fill_memory_00082504(ptrVar1 + 0x17,0,8);\n    ptrVar2 = *(undefined4 **)(dataStruct + 8);\n    ptrVar1[7] = ptrVar1;\n    ptrVar1[8] = &LAB_00084440_1;\n    ptrVar1[9] = 0x84465;\n    ptrVar1[10] = 0x8449d;\n    ptrVar1[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)((int)ptrVar2 + 0xe) = 1;\n    *(undefined2 *)(ptrVar2 + 3) = 9;\n    *ptrVar2 = 0;\n    ptrVar2[1] = 0;\n    ptrVar2[2] = 0;\n    ptrVar2[0x19] = 0;\n    ptrVar2[4] = 0;\n    ptrVar2[5] = 0;\n    ptrVar2[6] = 0;\n    fill_memory_00082504(ptrVar2 + 0x17,0,8);\n    ptrVar1 = *(undefined4 **)(dataStruct + 0xc);\n    ptrVar2[7] = ptrVar2;\n    ptrVar2[8] = &LAB_00084440_1;\n    ptrVar2[9] = 0x84465;\n    ptrVar2[10] = 0x8449d;\n    ptrVar2[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)(ptrVar1 + 3) = 0x12;\n    *(undefined2 *)((int)ptrVar1 + 0xe) = 2;\n    *ptrVar1 = 0;\n    ptrVar1[1] = 0;\n    ptrVar1[2] = 0;\n    ptrVar1[0x19] = 0;\n    ptrVar1[4] = 0;\n    ptrVar1[5] = 0;\n    ptrVar1[6] = 0;\n    fill_memory_00082504(ptrVar1 + 0x17,0,8);\n    ptrVar1[7] = ptrVar1;\n    ptrVar1[8] = &LAB_00084440_1;\n    ptrVar1[9] = 0x84465;\n    ptrVar1[10] = 0x8449d;\n    ptrVar1[0xb] = &LAB_000844bc_1;\n    *(undefined4 *)(dataStruct + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "dataStruct",
                "puVar1": "ptrVar1",
                "puVar2": "ptrVar2"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_000846a4",
                "FUN_000844c4",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083c08": {
            "entrypoint": "0x00083c08",
            "current_name": "FUNC_00083c08",
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c0c": {
            "entrypoint": "0x00083c0c",
            "current_name": "FUNC_00083c0c",
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c40": {
            "entrypoint": "0x00083c40",
            "current_name": "process_data_00083c40",
            "code": "\nuint processData_00083c40(undefined4 param1,uint param2,byte **paramPtr)\n\n{\n  int relocationInfo;\n  uint result;\n  uint data;\n  byte *bytePtr;\n  uint counter;\n  byte localData;\n  byte stackArray [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(paramPtr + 3) << 0x12)) {\n    *(ushort *)(paramPtr + 3) = *(ushort *)(paramPtr + 3) | 0x2000;\n    paramPtr[0x19] = (byte *)((uint)paramPtr[0x19] | 0x2000);\n  }\n  relocationInfo = get_relocation_info_00084298();\n  if ((relocationInfo == 1) && (param2 - 1 < 0xff)) {\n    data = param2 & 0xff;\n    localData = (byte)data;\n    result = 1;\n  }\n  else {\n    result = check_and_execute_function_0008456c(param1,&localData,param2,paramPtr + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(paramPtr + 3) = *(ushort *)(paramPtr + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return param2;\n    }\n    data = (uint)localData;\n  }\n  counter = 0;\n  do {\n    bytePtr = paramPtr[2] + -1;\n    paramPtr[2] = bytePtr;\n    if ((int)bytePtr < 0) {\n      if ((int)paramPtr[6] <= (int)bytePtr) {\n        **paramPtr = (byte)data;\n        bytePtr = *paramPtr;\n        data = (uint)*bytePtr;\n        if (data != 10) goto LAB_00083c90;\n      }\n      relocationInfo = process_data_000844c4(param1,data,paramPtr);\n      if (relocationInfo == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **paramPtr = (byte)data;\n      bytePtr = *paramPtr;\nLAB_00083c90:\n      *paramPtr = bytePtr + 1;\n    }\n    if (result <= counter + 1) {\n      return param2;\n    }\n    data = (uint)stackArray[counter];\n    counter = counter + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00083c40": "process_data_00083c40",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "paramPtr",
                "iVar1": "relocationInfo",
                "uVar2": "result",
                "uVar3": "data",
                "pbVar4": "bytePtr",
                "uVar5": "counter",
                "local_1c": "localData",
                "abStack_1b": "stackArray"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008456c",
                "FUN_00084298",
                "FUN_000844c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d00": {
            "entrypoint": "0x00083d00",
            "current_name": "update_elf_relocation_00083d00",
            "code": "\nundefined4 updateElfRelocation_00083d00(undefined4 param1,int param2)\n\n{\n  int result;\n  uint maskedInfo;\n  int adjustedOffset;\n  \n  FUNC_00082598();\n  maskedInfo = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  adjustedOffset = ((maskedInfo - param2) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjustedOffset) {\n    result = update_parameter_if_sum_negative_00082970(param1,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + maskedInfo) {\n      result = update_parameter_if_sum_negative_00082970(param1,-adjustedOffset);\n      if (result != -1) {\n        DAT_20071194 = DAT_20071194 - adjustedOffset;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = maskedInfo - adjustedOffset | 1;\n        FUNC_0008259c(param1);\n        return 1;\n      }\n      adjustedOffset = update_parameter_if_sum_negative_00082970(param1,0);\n      if (0xf < (int)(adjustedOffset - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_20071194 = adjustedOffset - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             adjustedOffset - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_0008259c(param1);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083d00": "update_elf_relocation_00083d00",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "uVar2": "maskedInfo",
                "iVar3": "adjustedOffset"
            },
            "calling": [
                "FUN_00083d9c"
            ],
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00082970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d9c": {
            "entrypoint": "0x00083d9c",
            "current_name": "update_elf_relocation_00083d9c",
            "code": "\nvoid updateElfRelocation_00083d9c(undefined4 param1,int param2)\n\n{\n  int index1;\n  bool isFlagSet;\n  uint flag;\n  dword address;\n  int index2;\n  uint offset;\n  dword entry;\n  uint size;\n  dword nextEntry;\n  \n  if (param2 == 0) {\n    return;\n  }\n  FUNC_00082598();\n  flag = *(uint *)(param2 + -4);\n  entry = param2 - 8;\n  offset = flag & 0xfffffffe;\n  address = entry + offset;\n  size = *(uint *)(address + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == address) {\n    size = size + offset;\n    if (-1 < (int)(flag << 0x1f)) {\n      entry = entry - *(int *)(param2 + -8);\n      index2 = *(int *)(entry + 0xc);\n      index1 = *(int *)(entry + 8);\n      size = size + *(int *)(param2 + -8);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    address = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(entry + 4) = size | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = entry;\n    if (address <= size) {\n      update_elf_relocation_00083d00(param1,DAT_20071190);\n    }\n  }\n  else {\n    *(uint *)(address + 4) = size;\n    if ((flag & 1) == 0) {\n      entry = entry - *(int *)(param2 + -8);\n      index1 = *(int *)(entry + 8);\n      offset = offset + *(int *)(param2 + -8);\n      if (index1 == 0x2007046c) {\n        isFlagSet = true;\n      }\n      else {\n        index2 = *(int *)(entry + 0xc);\n        *(int *)(index1 + 0xc) = index2;\n        *(int *)(index2 + 8) = index1;\n        isFlagSet = false;\n      }\n    }\n    else {\n      isFlagSet = false;\n    }\n    if (-1 < *(int *)(address + size + 4) << 0x1f) {\n      offset = offset + size;\n      index1 = *(int *)(address + 8);\n      if ((!isFlagSet) && (index1 == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = entry;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = entry;\n        *(undefined4 *)(entry + 0xc) = 0x2007046c;\n        *(undefined4 *)(entry + 8) = 0x2007046c;\n        *(uint *)(entry + 4) = offset | 1;\n        *(uint *)(entry + offset) = offset;\n        goto LAB_00083e30;\n      }\n      index2 = *(int *)(address + 0xc);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    *(uint *)(entry + 4) = offset | 1;\n    *(uint *)(entry + offset) = offset;\n    if (!isFlagSet) {\n      if (offset < 0x200) {\n        flag = offset & 0xfffffff8;\n        index1 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + flag);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(offset >> 3) >> 2 & 0xffU);\n        *(int *)(entry + 8) = index1;\n        *(uint *)(entry + 0xc) = flag + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + flag) = entry;\n        *(dword *)(index1 + 0xc) = entry;\n        FUNC_0008259c(param1);\n        return;\n      }\n      flag = offset >> 9;\n      if (flag < 5) {\n        index1 = (offset >> 6) + 0x38;\n        index2 = index1 * 2;\n      }\n      else if (flag < 0x15) {\n        index1 = flag + 0x5b;\n        index2 = index1 * 2;\n      }\n      else if (flag < 0x55) {\n        index1 = (offset >> 0xc) + 0x6e;\n        index2 = index1 * 2;\n      }\n      else if (flag < 0x155) {\n        index1 = (offset >> 0xf) + 0x77;\n        index2 = index1 * 2;\n      }\n      else if (flag < 0x555) {\n        index1 = (offset >> 0x12) + 0x7c;\n        index2 = index1 * 2;\n      }\n      else {\n        index2 = 0xfc;\n        index1 = 0x7e;\n      }\n      nextEntry = index2 * 4 + 0x20070464;\n      address = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[index2];\n      if (address == nextEntry) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (index1 >> 2 & 0xffU);\n        nextEntry = address;\n      }\n      else {\n        do {\n          if ((*(uint *)(address + 4) & 0xfffffffc) <= offset) break;\n          address = *(dword *)(address + 8);\n        } while (nextEntry != address);\n        nextEntry = *(dword *)(address + 0xc);\n      }\n      *(dword *)(entry + 0xc) = nextEntry;\n      *(dword *)(entry + 8) = address;\n      *(dword *)(nextEntry + 8) = entry;\n      *(dword *)(address + 0xc) = entry;\n    }\n  }\nLAB_00083e30:\n  FUNC_0008259c(param1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083d9c": "update_elf_relocation_00083d9c",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "index1",
                "bVar2": "isFlagSet",
                "uVar3": "flag",
                "dVar4": "address",
                "iVar5": "index2",
                "uVar6": "offset",
                "dVar7": "entry",
                "uVar8": "size",
                "dVar9": "nextEntry"
            },
            "calling": [
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083f34",
                "FUN_00081e04",
                "FUN_000846a4",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "called": [
                "FUN_00083d00",
                "FUN_00082598",
                "FUN_0008259c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083f34": {
            "entrypoint": "0x00083f34",
            "current_name": "process_data_00083f34",
            "code": "\nundefined4 processData_00083f34(undefined4 *outputData,uint *inputData,uint **paramArray)\n\n{\n  int result;\n  uint num1;\n  uint num2;\n  ushort flag;\n  uint temp;\n  uint *ptr1;\n  uint *ptr2;\n  uint var1;\n  uint var2;\n  uint var3;\n  uint var4;\n  uint localVar;\n  \n  if (paramArray[2] != (uint *)0x0) {\n    flag = *(ushort *)(inputData + 3);\n    temp = (uint)flag;\n    if (((int)(temp << 0x1c) < 0) && (inputData[4] != 0)) {\n      ptr2 = *paramArray;\n    }\n    else {\n      result = initialize_data_structures_00083808(outputData,inputData);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flag = *(ushort *)(inputData + 3);\n      temp = (uint)flag;\n      ptr2 = *paramArray;\n    }\n    if ((flag & 2) == 0) {\n      num1 = temp & 2;\n      var3 = num1;\n      var1 = num1;\n      localVar = num1;\n      if ((temp & 1) == 0) {\n        num1 = 0;\n        var3 = 0;\n        while( true ) {\n          while (num1 == 0) {\n            var3 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            num1 = *ptr1;\n          }\n          var1 = inputData[2];\n          if ((int)(temp << 0x16) < 0) {\n            if (num1 < var1) {\n              temp = *inputData;\n              var1 = num1;\n            }\n            else if ((temp & 0x480) == 0) {\n              temp = *inputData;\n            }\n            else {\n              result = *inputData - inputData[4];\n              var1 = result + 1 + num1;\n              var2 = (int)(inputData[5] * 3) / 2;\n              if (var1 <= var2) {\n                var1 = var2;\n              }\n              if ((int)(temp << 0x15) < 0) {\n                var2 = relocate_elf_relocations_00081e14(outputData,var1);\n                if (var2 == 0) {\n                  *outputData = 0xc;\n                  flag = *(ushort *)(inputData + 3);\n                  goto LAB_00084030;\n                }\n                copy_memory_0008234c(var2,inputData[4],result);\n                *(ushort *)(inputData + 3) = *(ushort *)(inputData + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                var2 = reallocate_memory_000825b0(outputData);\n                if (var2 == 0) {\n                  update_elf_relocation_00083d9c(outputData,inputData[4]);\n                  flag = *(ushort *)(inputData + 3) & 0xff7f;\n                  *outputData = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              temp = var2 + result;\n              inputData[4] = var2;\n              inputData[5] = var1;\n              *inputData = temp;\n              inputData[2] = var1 - result;\n              var1 = num1;\n            }\n            reverse_copy_00082438(temp,var3,var1);\n            inputData[2] = inputData[2] - var1;\n            *inputData = *inputData + var1;\n            var1 = num1;\n          }\n          else if ((inputData[4] < *inputData) || (temp = inputData[5], num1 < temp)) {\n            if (num1 < var1) {\n              var1 = num1;\n            }\n            reverse_copy_00082438(*inputData,var3,var1);\n            temp = inputData[2];\n            inputData[2] = temp - var1;\n            *inputData = *inputData + var1;\n            if ((temp - var1 == 0) && (result = process_data_00083adc(outputData,inputData), result != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            var1 = 0x7fffffff;\n            if (num1 < 0x7fffffff) {\n              var1 = num1;\n            }\n            var1 = (*(code *)inputData[9])(outputData,inputData[7],var3,(var1 / temp) * temp);\n            if ((int)var1 < 1) goto LAB_0008402e;\n          }\n          ptr1 = paramArray[2];\n          var3 = var3 + var1;\n          num1 = num1 - var1;\n          paramArray[2] = (uint *)((int)ptr1 - var1);\n          if ((uint *)((int)ptr1 - var1) == (uint *)0x0) break;\n          temp = (uint)*(ushort *)(inputData + 3);\n        }\n      }\n      else {\n        do {\n          while (num1 == 0) {\n            var1 = *ptr2;\n            num1 = ptr2[1];\n            localVar = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (localVar == 0) {\n            result = find_first_occurrence_00084384(var1,10,num1);\n            if (result == 0) {\n              var3 = num1 + 1;\n              localVar = 1;\n            }\n            else {\n              var3 = (result + 1) - var1;\n              localVar = 1;\n            }\n          }\n          var2 = *inputData;\n          temp = var3;\n          if (num1 <= var3) {\n            temp = num1;\n          }\n          num2 = inputData[5];\n          if ((inputData[4] < var2) && (var4 = inputData[2] + num2, (int)var4 < (int)temp)) {\n            reverse_copy_00082438(var2,var1,var4);\n            *inputData = *inputData + var4;\n            result = process_data_00083adc(outputData,inputData);\n            if (result != 0) goto LAB_0008402e;\n          }\n          else if ((int)temp < (int)num2) {\n            reverse_copy_00082438(var2,var1,temp);\n            inputData[2] = inputData[2] - temp;\n            *inputData = temp + *inputData;\n            var4 = temp;\n          }\n          else {\n            var4 = (*(code *)inputData[9])(outputData,inputData[7],var1,num2);\n            if ((int)var4 < 1) goto LAB_0008402e;\n          }\n          var3 = var3 - var4;\n          if (var3 == 0) {\n            result = process_data_00083adc(outputData,inputData);\n            if (result != 0) goto LAB_0008402e;\n            localVar = 0;\n          }\n          ptr1 = paramArray[2];\n          var1 = var1 + var4;\n          num1 = num1 - var4;\n          paramArray[2] = (uint *)((int)ptr1 - var4);\n        } while ((uint *)((int)ptr1 - var4) != (uint *)0x0);\n      }\n    }\n    else {\n      num1 = 0;\n      temp = 0;\n      do {\n        while( true ) {\n          var3 = temp;\n          if (0x7ffffbff < temp) {\n            var3 = 0x7ffffc00;\n          }\n          if (temp != 0) break;\n          num1 = *ptr2;\n          temp = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)inputData[9])(outputData,inputData[7],num1,var3);\n        if (result < 1) {\nLAB_0008402e:\n          flag = *(ushort *)(inputData + 3);\nLAB_00084030:\n          *(ushort *)(inputData + 3) = flag | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = paramArray[2];\n        num1 = num1 + result;\n        temp = temp - result;\n        paramArray[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083f34": "process_data_00083f34",
                "param_1": "outputData",
                "param_2": "inputData",
                "param_3": "paramArray",
                "iVar1": "result",
                "uVar2": "num1",
                "uVar3": "num2",
                "uVar4": "flag",
                "uVar5": "temp",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar8": "var1",
                "uVar9": "var2",
                "uVar10": "var3",
                "uVar11": "var4",
                "local_2c": "localVar"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008234c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00084384",
                "FUN_00083d9c",
                "FUN_00083adc",
                "FUN_00083808",
                "FUN_00082438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084290": {
            "entrypoint": "0x00084290",
            "current_name": "get_memory_address_00084290",
            "code": "\nundefined4 getMemoryAddress_00084290(void)\n\n{\n  return 0x20070874;\n}\n\n",
            "renaming": {
                "FUN_00084290": "get_memory_address_00084290"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084298": {
            "entrypoint": "0x00084298",
            "current_name": "get_relocation_info_00084298",
            "code": "\ndword getRelocationInfo_00084298(void)\n\n{\n  return relArray[274].relocationInfo;\n}\n\n",
            "renaming": {
                "FUN_00084298": "get_relocation_info_00084298",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "r_info": "relocationInfo"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "verify_and_initialize_000842a4",
            "code": "\nvoid verifyAndInitialize_000842a4(int param1,int *param2)\n\n{\n  ushort variable1;\n  int variable2;\n  int variable3;\n  uint variable4;\n  bool variable5;\n  undefined stackArray [4];\n  uint localVariable;\n  \n  variable1 = *(ushort *)(param2 + 3);\n  variable4 = (uint)variable1;\n  if ((int)(variable4 << 0x1e) < 0) {\n    *param2 = (int)param2 + 0x43;\n    param2[4] = (int)param2 + 0x43;\n    param2[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)param2 + 0xe)) {\n    variable2 = initialize_and_check_memory_000846b4(param1,(int)*(short *)((int)param2 + 0xe),stackArray);\n    if (-1 < variable2) {\n      variable5 = (localVariable & 0xf000) == 0x2000;\n      if (((localVariable & 0xf000) == 0x8000) && (param2[10] == 0x8449d)) {\n        variable2 = 0x400;\n        *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 0x400;\n        param2[0x13] = 0x400;\n      }\n      else {\n        variable2 = 0x400;\n        *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    variable1 = *(ushort *)(param2 + 3);\n    variable4 = (uint)variable1;\n  }\n  *(ushort *)(param2 + 3) = variable1 | 0x800;\n  if ((variable4 & 0x80) == 0) {\n    variable2 = 0x400;\n  }\n  else {\n    variable2 = 0x40;\n  }\n  variable5 = false;\nLAB_00084300:\n  variable3 = relocate_elf_relocations_00081e14(param1,variable2);\n  variable1 = *(ushort *)(param2 + 3);\n  if (variable3 == 0) {\n    if (-1 < (int)((uint)variable1 << 0x16)) {\n      *(ushort *)(param2 + 3) = variable1 | 2;\n      *param2 = (int)param2 + 0x43;\n      param2[4] = (int)param2 + 0x43;\n      param2[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(param1 + 0x3c) = &LAB_00083b08_1;\n    *(ushort *)(param2 + 3) = variable1 | 0x80;\n    *param2 = variable3;\n    param2[4] = variable3;\n    param2[5] = variable2;\n    if ((variable5) && (variable2 = extract_data_and_check_000846dc(param1,(int)*(short *)((int)param2 + 0xe)), variable2 != 0))\n    {\n      *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "verify_and_initialize_000842a4",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "variable1",
                "iVar2": "variable2",
                "iVar3": "variable3",
                "uVar4": "variable4",
                "bVar5": "variable5",
                "auStack_54": "stackArray",
                "local_50": "localVariable"
            },
            "calling": [
                "FUN_00083808"
            ],
            "called": [
                "FUN_000846b4",
                "FUN_00081e14",
                "FUN_000846dc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084384": {
            "entrypoint": "0x00084384",
            "current_name": "find_first_occurrence_00084384",
            "code": "\nuint * find_first_occurrence_00084384(uint *data,char target,uint length)\n\n{\n  uint result;\n  int index;\n  uint *ptr;\n  bool found;\n  \n  if (((uint)data & 3) == 0) {\nLAB_000843b4:\n    if (3 < length) {\n      ptr = data;\n      do {\n        result = *ptr ^ CONCAT22(CONCAT11(target,target),CONCAT11(target,target));\n        data = ptr;\n        if ((result + 0xfefefeff & ~result & 0x80808080) != 0) break;\n        length = length - 4;\n        data = ptr + 1;\n        ptr = ptr + 1;\n      } while (3 < length);\n    }\n    if (length == 0) {\n      data = (uint *)0x0;\n    }\n    else if (*(char *)data != target) {\n      index = 0;\n      do {\n        data = (uint *)((int)data + 1);\n        found = index == length - 1;\n        index = index + 1;\n        if (found) goto LAB_000843dc;\n      } while (*(char *)data != target);\n    }\n  }\n  else if (length == 0) {\nLAB_000843dc:\n    data = (uint *)0x0;\n  }\n  else if (*(char *)data != target) {\n    ptr = (uint *)((int)data + 1);\n    length = length - 1;\n    do {\n      data = ptr;\n      if (((uint)data & 3) == 0) goto LAB_000843b4;\n      if (length == 0) goto LAB_000843dc;\n      ptr = (uint *)((int)data + 1);\n      length = length - 1;\n    } while (*(char *)data != target);\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_00084384": "find_first_occurrence_00084384",
                "param_1": "data",
                "param_2": "target",
                "param_3": "length",
                "uVar1": "result",
                "iVar2": "index",
                "puVar3": "ptr",
                "bVar4": "found"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084464": {
            "entrypoint": "0x00084464",
            "current_name": "process_data_00084464",
            "code": "\nvoid processData_00084464(int *result,int data,undefined4 paramA,undefined4 paramB)\n\n{\n  int returnValue;\n  ushort shortValue;\n  undefined4 unusedVar1;\n  undefined4 unusedVar2;\n  undefined4 unusedVar3;\n  undefined4 unusedVar4;\n  \n  shortValue = *(ushort *)(data + 0xc);\n  if ((int)((uint)shortValue << 0x17) < 0) {\n    initializeApplication(result,(int)*(short *)(data + 0xe),0,2);\n    shortValue = *(ushort *)(data + 0xc);\n  }\n  *(ushort *)(data + 0xc) = shortValue & 0xefff;\n  DAT_200711bc = 0;\n  returnValue = processData_00084464Helper((int)*(short *)(data + 0xe),paramA,paramB,paramB,unusedVar1,unusedVar2,\n                       unusedVar3,unusedVar4);\n  if ((returnValue == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084464": "process_data_00084464",
                "param_1": "result",
                "param_2": "data",
                "param_3": "paramA",
                "param_4": "paramB",
                "unaff_r4": "unusedVar1",
                "unaff_r5": "unusedVar2",
                "unaff_r6": "unusedVar3",
                "in_lr": "unusedVar4",
                "uVar2": "shortValue",
                "initialize_application_00084700": "initializeApplication",
                "iVar1": "returnValue",
                "process_data_000811cc": "processDataHelper"
            },
            "calling": [],
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008449c": {
            "entrypoint": "0x0008449c",
            "current_name": "initialize_application_status_0008449c",
            "code": "\nvoid initializeApplicationStatus_0008449c(undefined4 param1,int param2)\n\n{\n  int appStatus;\n  ushort updatedFlags;\n  \n  appStatus = initialize_application_00084700(param1,(int)*(short *)(param2 + 0xe));\n  if (appStatus == -1) {\n    updatedFlags = *(ushort *)(param2 + 0xc) & 0xefff;\n  }\n  else {\n    updatedFlags = *(ushort *)(param2 + 0xc) | 0x1000;\n  }\n  if (appStatus != -1) {\n    *(int *)(param2 + 0x50) = appStatus;\n  }\n  *(ushort *)(param2 + 0xc) = updatedFlags;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008449c": "initialize_application_status_0008449c",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "appStatus",
                "uVar2": "updatedFlags"
            },
            "calling": [],
            "called": [
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844c4": {
            "entrypoint": "0x000844c4",
            "current_name": "process_data_000844c4",
            "code": "\nuint process_data_000844c4(int input_param,uint byte_to_process,undefined4 *data_struct,undefined4 constant_param)\n\n{\n  ushort ushort_value;\n  uint uint_value;\n  undefined *ptr_value;\n  int temp_var;\n  \n  if ((input_param != 0) && (*(int *)(input_param + 0x38) == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  ushort_value = *(ushort *)(data_struct + 3);\n  uint_value = (uint)ushort_value;\n  data_struct[2] = data_struct[6];\n  if ((-1 < (int)(uint_value << 0x1c)) || (temp_var = data_struct[4], temp_var == 0)) {\n    temp_var = initialize_data_structures_00083808(input_param,data_struct,ushort_value,uint_value,constant_param);\n    if (temp_var != 0) {\n      return 0xffffffff;\n    }\n    ushort_value = *(ushort *)(data_struct + 3);\n    temp_var = data_struct[4];\n    uint_value = (uint)ushort_value;\n  }\n  byte_to_process = byte_to_process & 0xff;\n  if ((int)(uint_value << 0x12) < 0) {\n    ptr_value = (undefined *)*data_struct;\n    temp_var = (int)ptr_value - temp_var;\n    if (temp_var < (int)data_struct[5]) {\nLAB_000844f6:\n      temp_var = temp_var + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    data_struct[0x19] = data_struct[0x19] & 0xffffdfff;\n    ptr_value = (undefined *)*data_struct;\n    *(ushort *)(data_struct + 3) = ushort_value | 0x2000;\n    temp_var = (int)ptr_value - temp_var;\n    if (temp_var < (int)data_struct[5]) goto LAB_000844f6;\n  }\n  temp_var = process_data_000844c4_00083adc(input_param,data_struct);\n  if (temp_var != 0) {\n    return 0xffffffff;\n  }\n  ptr_value = (undefined *)*data_struct;\n  temp_var = 1;\nLAB_000844f8:\n  data_struct[2] = data_struct[2] + -1;\n  *data_struct = ptr_value + 1;\n  *ptr_value = (char)byte_to_process;\n  if (((data_struct[5] == temp_var) ||\n      (((int)((uint)*(ushort *)(data_struct + 3) << 0x1f) < 0 && (byte_to_process == 10)))) &&\n     (temp_var = process_data_000844c4_00083adc(input_param,data_struct), temp_var != 0)) {\n    return 0xffffffff;\n  }\n  return byte_to_process;\n}\n\n",
            "renaming": {
                "FUN_000844c4": "process_data_000844c4",
                "param_1": "input_param",
                "param_2": "byte_to_process",
                "param_3": "data_struct",
                "param_4": "constant_param",
                "uVar1": "ushort_value",
                "uVar2": "uint_value",
                "puVar3": "ptr_value",
                "iVar4": "temp_var"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00083b14",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008456c": {
            "entrypoint": "0x0008456c",
            "current_name": "check_and_execute_function_0008456c",
            "code": "\nvoid checkAndExecuteFunction_0008456c(undefined4 *result,int length,undefined4 value,undefined4 *status)\n\n{\n  code *functionPointer;\n  undefined4 memoryAddress;\n  int returnValue;\n  undefined stackData [12];\n  \n  functionPointer = DAT_20070898;\n  if (length == 0) {\n    memoryAddress = get_memory_address_00084290();\n    returnValue = (*functionPointer)(result,stackData,0,memoryAddress,status);\n  }\n  else {\n    memoryAddress = get_memory_address_00084290();\n    returnValue = (*functionPointer)(result,length,value,memoryAddress,status);\n  }\n  if (returnValue == -1) {\n    *status = 0;\n    *result = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008456c": "check_and_execute_function_0008456c",
                "param_1": "result",
                "param_2": "length",
                "param_3": "value",
                "param_4": "status",
                "pcVar1": "functionPointer",
                "uVar2": "memoryAddress",
                "iVar3": "returnValue",
                "auStack_24": "stackData"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_000845bc",
                "FUN_00084290"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845bc": {
            "entrypoint": "0x000845bc",
            "current_name": "initialize_character_000845bc",
            "code": "\nundefined4 initializeCharacter_000845bc(undefined4 *result,undefined *characterBuffer,uint characterCode)\n\n{\n  if (characterBuffer == (undefined *)0x0) {\n    return 0;\n  }\n  if (characterCode < 0x100) {\n    *characterBuffer = (char)characterCode;\n    return 1;\n  }\n  *result = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000845bc": "initialize_character_000845bc",
                "param_1": "result",
                "param_2": "characterBuffer",
                "param_3": "characterCode"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846a4": {
            "entrypoint": "0x000846a4",
            "current_name": "process_and_initialize_000846a4",
            "code": "\nundefined4 processAndInitialize_000846a4(int input)\n\n{\n  dword r_offset;\n  undefined4 result;\n  int returnValue;\n  \n  r_offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (input != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      initialize_data_structures_00083b14();\n    }\n    if (*(short *)(input + 0xc) != 0) {\n      result = process_data_00083adc(r_offset,input);\n      if ((*(code **)(input + 0x2c) != (code *)0x0) &&\n         (returnValue = (**(code **)(input + 0x2c))(r_offset,*(undefined4 *)(input + 0x1c)), returnValue < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(input + 0xc) << 0x18) < 0) {\n        update_elf_relocation_00083d9c(r_offset,*(undefined4 *)(input + 0x10));\n      }\n      if (*(int *)(input + 0x30) != 0) {\n        if (*(int *)(input + 0x30) != input + 0x40) {\n          update_elf_relocation_00083d9c(r_offset);\n        }\n        *(undefined4 *)(input + 0x30) = 0;\n      }\n      if (*(int *)(input + 0x44) != 0) {\n        update_elf_relocation_00083d9c(r_offset);\n        *(undefined4 *)(input + 0x44) = 0;\n      }\n      FUNC_00083c08();\n      *(undefined2 *)(input + 0xc) = 0;\n      FUNC_00083c0c();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000846a4": "process_and_initialize_000846a4",
                "param_1": "input",
                "dVar1": "r_offset",
                "uVar2": "result",
                "iVar3": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_00083c0c",
                "FUN_00083b14",
                "FUN_00083d9c",
                "FUN_00083adc",
                "FUN_00083c08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846b4": {
            "entrypoint": "0x000846b4",
            "current_name": "initialize_and_check_memory_000846b4",
            "code": "\nvoid initializeAndCheckMemory_000846b4(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int initResult;\n  \n  DAT_200711bc = 0;\n  initResult = initialize_memory_000811b4(arg1,arg2,arg2,0,arg3);\n  if ((initResult == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846b4": "initialize_and_check_memory_000846b4",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "initResult"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846dc": {
            "entrypoint": "0x000846dc",
            "current_name": "extract_data_and_check_000846dc",
            "code": "\nvoid extractDataAndCheck_000846dc(int *outputData,undefined4 inputData)\n\n{\n  int checkResult;\n  \n  DAT_200711bc = 0;\n  checkResult = check_if_one_000811be(inputData);\n  if ((checkResult == -1) && (DAT_200711bc != 0)) {\n    *outputData = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846dc": "extract_data_and_check_000846dc",
                "param_1": "outputData",
                "param_2": "inputData",
                "iVar1": "checkResult"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084700": {
            "entrypoint": "0x00084700",
            "current_name": "initialize_application_00084700",
            "code": "\nvoid initializeApplication_00084700(int *output,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = initialize_application_000811c2(arg1,arg2,arg3);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084700": "initialize_application_00084700",
                "param_1": "output",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008449c",
                "FUN_00084464"
            ],
            "called": [
                "FUN_000811c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084728": {
            "entrypoint": "0x00084728",
            "current_name": "initialize_memory_00084728",
            "code": "\nvoid initializeMemory_00084728(int *output,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = clear_memory_000811c6(input1,input2,input3);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084728": "initialize_memory_00084728",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_000811c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084750": {
            "entrypoint": "0x00084750",
            "current_name": "calculate_result_00084750",
            "code": "\nint calculateResult_00084750(int input1,int input2,int condition1,int condition2)\n\n{\n  int result;\n  \n  if ((condition2 == 0) && (condition1 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input1 = -1;\n    }\n    return input1;\n  }\n  result = subtract_and_shift_000847ac();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084750": "calculate_result_00084750",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "condition1",
                "param_4": "condition2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_000847ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008477c": {
            "entrypoint": "0x0008477c",
            "current_name": "calculate_difference_and_store_0008477c",
            "code": "\nvoid calculateDifferenceAndStore_0008477c(uint value1,int value2,undefined4 multiplier1,undefined4 multiplier2,int *resultArray)\n\n{\n  uint result;\n  longlong product;\n  \n  product = divide_with_remainder_000847e0();\n  product = product * CONCAT44(multiplier2,multiplier1);\n  result = (uint)product;\n  *resultArray = value1 - result;\n  resultArray[1] = (value2 - (int)((ulonglong)product >> 0x20)) - (uint)(value1 < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008477c": "calculate_difference_and_store_0008477c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "multiplier1",
                "param_4": "multiplier2",
                "param_5": "resultArray",
                "uVar1": "result",
                "lVar2": "product"
            },
            "calling": [],
            "called": [
                "FUN_000847e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847ac": {
            "entrypoint": "0x000847ac",
            "current_name": "subtract_and_shift_000847ac",
            "code": "\nvoid subtractAndShift_000847ac(uint inputValue,int shiftAmount,undefined4 lowBits,undefined4 highBits,int *resultArray)\n\n{\n  uint unsignedResult;\n  longlong product;\n  \n  product = division_with_carry_00084a80();\n  product = product * CONCAT44(highBits,lowBits);\n  unsignedResult = (uint)product;\n  *resultArray = inputValue - unsignedResult;\n  resultArray[1] = (shiftAmount - (int)((ulonglong)product >> 0x20)) - (uint)(inputValue < unsignedResult);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000847ac": "subtract_and_shift_000847ac",
                "param_1": "inputValue",
                "param_2": "shiftAmount",
                "param_3": "lowBits",
                "param_4": "highBits",
                "param_5": "resultArray",
                "uVar1": "unsignedResult",
                "lVar2": "product"
            },
            "calling": [
                "FUN_00084750"
            ],
            "called": [
                "FUN_00084a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847e0": {
            "entrypoint": "0x000847e0",
            "current_name": "divide_with_remainder_000847e0",
            "code": "\nundefined8 divideWithRemainder_000847e0(uint dividend,uint dividendExtension,uint divisorUpper,uint divisorLower)\n\n{\n  longlong result;\n  uint quotientUpper;\n  uint quotientLower;\n  uint temp1;\n  uint temp2;\n  int iVar6;\n  uint multiplicationResultUpper;\n  uint multiplicationResultLower;\n  uint isDividendNegative;\n  uint isDivisorNegative;\n  uint adjustedQuotient;\n  uint tempDivisor;\n  bool bVar13;\n  \n  if ((int)dividendExtension < 0) {\n    bVar13 = dividend != 0;\n    dividend = -dividend;\n    dividendExtension = -dividendExtension - (uint)bVar13;\n    isDividendNegative = 0xffffffff;\n  }\n  else {\n    isDividendNegative = 0;\n  }\n  if ((int)divisorLower < 0) {\n    isDividendNegative = ~isDividendNegative;\n    bVar13 = divisorUpper != 0;\n    divisorUpper = -divisorUpper;\n    divisorLower = -divisorLower - (uint)bVar13;\n  }\n  if (divisorLower == 0) {\n    if (dividendExtension < divisorUpper) {\n      iVar6 = LZCOUNT(divisorUpper);\n      if (iVar6 != 0) {\n        quotientLower = dividend >> (0x20U - iVar6 & 0xff);\n        divisorUpper = divisorUpper << iVar6;\n        dividend = dividend << iVar6;\n        dividendExtension = dividendExtension << iVar6 | quotientLower;\n      }\n      quotientUpper = divisorUpper >> 0x10;\n      temp1 = dividendExtension / quotientUpper;\n      multiplicationResultUpper = (divisorUpper & 0xffff) * temp1;\n      isDivisorNegative = dividend >> 0x10 | (dividendExtension - quotientUpper * temp1) * 0x10000;\n      quotientLower = temp1;\n      if (isDivisorNegative <= multiplicationResultUpper && multiplicationResultUpper - isDivisorNegative != 0) {\n        bVar13 = CARRY4(isDivisorNegative,divisorUpper);\n        isDivisorNegative = isDivisorNegative + divisorUpper;\n        quotientLower = temp1 - 1;\n        if ((bVar13 == false) && (isDivisorNegative <= multiplicationResultUpper && multiplicationResultUpper - isDivisorNegative != 0)) {\n          quotientLower = temp1 - 2;\n          isDivisorNegative = isDivisorNegative + divisorUpper;\n        }\n      }\n      multiplicationResultLower = (isDivisorNegative - multiplicationResultUpper) / quotientUpper;\n      temp1 = (divisorUpper & 0xffff) * multiplicationResultLower;\n      multiplicationResultUpper = dividend & 0xffff | ((isDivisorNegative - multiplicationResultUpper) - quotientUpper * multiplicationResultLower) * 0x10000;\n      quotientUpper = multiplicationResultLower;\n      if (multiplicationResultUpper <= temp1 && temp1 - multiplicationResultUpper != 0) {\n        quotientUpper = multiplicationResultLower - 1;\n        if ((CARRY4(multiplicationResultUpper,divisorUpper) == false) &&\n           (multiplicationResultUpper + divisorUpper <= temp1 && temp1 - (multiplicationResultUpper + divisorUpper) != 0)) {\n          quotientUpper = multiplicationResultLower - 2;\n        }\n      }\n      quotientUpper = quotientUpper | quotientLower << 0x10;\n      quotientLower = 0;\n    }\n    else {\n      if (divisorUpper == 0) {\n        divisorUpper = 1 / 0;\n      }\n      iVar6 = LZCOUNT(divisorUpper);\n      if (iVar6 == 0) {\n        dividendExtension = dividendExtension - divisorUpper;\n        temp1 = divisorUpper >> 0x10;\n        tempDivisor = divisorUpper & 0xffff;\n        quotientLower = 1;\n      }\n      else {\n        divisorUpper = divisorUpper << iVar6;\n        quotientLower = dividendExtension >> (0x20U - iVar6 & 0xff);\n        temp1 = divisorUpper >> 0x10;\n        isDivisorNegative = quotientLower / temp1;\n        tempDivisor = divisorUpper & 0xffff;\n        multiplicationResultUpper = tempDivisor * isDivisorNegative;\n        multiplicationResultLower = dividend >> (0x20U - iVar6 & 0xff) | dividendExtension << iVar6;\n        quotientLower = multiplicationResultLower >> 0x10 | (quotientLower - temp1 * isDivisorNegative) * 0x10000;\n        dividend = dividend << iVar6;\n        quotientUpper = isDivisorNegative;\n        if (quotientLower <= multiplicationResultUpper && multiplicationResultUpper - quotientLower != 0) {\n          bVar13 = CARRY4(quotientLower,divisorUpper);\n          quotientLower = quotientLower + divisorUpper;\n          quotientUpper = isDivisorNegative - 1;\n          if ((bVar13 == false) && (quotientLower <= multiplicationResultUpper && multiplicationResultUpper - quotientLower != 0)) {\n            quotientUpper = isDivisorNegative - 2;\n            quotientLower = quotientLower + divisorUpper;\n          }\n        }\n        temp2 = (quotientLower - multiplicationResultUpper) / temp1;\n        isDivisorNegative = tempDivisor * temp2;\n        dividendExtension = multiplicationResultLower & 0xffff | ((quotientLower - multiplicationResultUpper) - temp1 * temp2) * 0x10000;\n        quotientLower = temp2;\n        if (dividendExtension <= isDivisorNegative && isDivisorNegative - dividendExtension != 0) {\n          bVar13 = CARRY4(dividendExtension,divisorUpper);\n          dividendExtension = dividendExtension + divisorUpper;\n          quotientLower = temp2 - 1;\n          if ((bVar13 == false) && (dividendExtension <= isDivisorNegative && isDivisorNegative - dividendExtension != 0)) {\n            quotientLower = temp2 - 2;\n            dividendExtension = dividendExtension + divisorUpper;\n          }\n        }\n        dividendExtension = dividendExtension - isDivisorNegative;\n        quotientLower = quotientLower | quotientUpper << 0x10;\n      }\n      quotientUpper = dividendExtension / temp1;\n      isDivisorNegative = tempDivisor * quotientUpper;\n      multiplicationResultLower = dividend >> 0x10 | (dividendExtension - temp1 * quotientUpper) * 0x10000;\n      multiplicationResultUpper = quotientUpper;\n      if (multiplicationResultLower <= isDivisorNegative && isDivisorNegative - multiplicationResultLower != 0) {\n        bVar13 = CARRY4(multiplicationResultLower,divisorUpper);\n        multiplicationResultLower = multiplicationResultLower + divisorUpper;\n        multiplicationResultUpper = quotientUpper - 1;\n        if ((bVar13 == false) && (multiplicationResultLower <= isDivisorNegative && isDivisorNegative - multiplicationResultLower != 0)) {\n          multiplicationResultUpper = quotientUpper - 2;\n          multiplicationResultLower = multiplicationResultLower + divisorUpper;\n        }\n      }\n      temp2 = (multiplicationResultLower - isDivisorNegative) / temp1;\n      tempDivisor = tempDivisor * temp2;\n      temp1 = dividend & 0xffff | ((multiplicationResultLower - isDivisorNegative) - temp1 * temp2) * 0x10000;\n      quotientUpper = temp2;\n      if (temp1 <= tempDivisor && tempDivisor - temp1 != 0) {\n        quotientUpper = temp2 - 1;\n        if ((CARRY4(temp1,divisorUpper) == false) &&\n           (temp1 + divisorUpper <= tempDivisor && tempDivisor - (temp1 + divisorUpper) != 0)) {\n          quotientUpper = temp2 - 2;\n        }\n      }\n      quotientUpper = quotientUpper | multiplicationResultUpper << 0x10;\n    }\n  }\n  else if (dividendExtension < divisorLower) {\n    quotientLower = 0;\n    quotientUpper = 0;\n  }\n  else {\n    iVar6 = LZCOUNT(divisorLower);\n    if (iVar6 == 0) {\n      if ((divisorLower < dividendExtension) || (divisorUpper <= dividend)) {\n        quotientLower = 0;\n        quotientUpper = 1;\n      }\n      else {\n        quotientUpper = 0;\n        quotientLower = 0;\n      }\n    }\n    else {\n      quotientLower = 0x20 - iVar6;\n      temp1 = dividendExtension >> (quotientLower & 0xff);\n      tempDivisor = divisorUpper >> (quotientLower & 0xff) | divisorLower << iVar6;\n      isDivisorNegative = tempDivisor >> 0x10;\n      quotientUpper = temp1 / isDivisorNegative;\n      multiplicationResultLower = (tempDivisor & 0xffff) * quotientUpper;\n      multiplicationResultUpper = dividendExtension << iVar6 | dividend >> (quotientLower & 0xff);\n      temp1 = multiplicationResultUpper >> 0x10 | (temp1 - isDivisorNegative * quotientUpper) * 0x10000;\n      quotientLower = quotientUpper;\n      if (temp1 <= multiplicationResultLower && multiplicationResultLower - temp1 != 0) {\n        bVar13 = CARRY4(temp1,tempDivisor);\n        temp1 = temp1 + tempDivisor;\n        quotientLower = quotientUpper - 1;\n        if ((bVar13 == false) && (temp1 <= multiplicationResultLower && multiplicationResultLower - temp1 != 0)) {\n          quotientLower = quotientUpper - 2;\n          temp1 = temp1 + tempDivisor;\n        }\n      }\n      temp2 = (temp1 - multiplicationResultLower) / isDivisorNegative;\n      adjustedQuotient = (tempDivisor & 0xffff) * temp2;\n      temp1 = multiplicationResultUpper & 0xffff | ((temp1 - multiplicationResultLower) - isDivisorNegative * temp2) * 0x10000;\n      quotientUpper = temp2;\n      if (temp1 <= adjustedQuotient && adjustedQuotient - temp1 != 0) {\n        bVar13 = CARRY4(temp1,tempDivisor);\n        temp1 = temp1 + tempDivisor;\n        quotientUpper = temp2 - 1;\n        if ((bVar13 == false) && (temp1 <= adjustedQuotient && adjustedQuotient - temp1 != 0)) {\n          quotientUpper = temp2 - 2;\n          temp1 = temp1 + tempDivisor;\n        }\n      }\n      quotientUpper = quotientUpper | quotientLower << 0x10;\n      result = (ulonglong)quotientUpper * (ulonglong)(divisorUpper << iVar6);\n      multiplicationResultUpper = (uint)((ulonglong)result >> 0x20);\n      quotientLower = 0;\n      if ((temp1 - adjustedQuotient < multiplicationResultUpper) ||\n         ((temp1 - adjustedQuotient == multiplicationResultUpper && (dividend << iVar6 < (uint)result)))) {\n        quotientUpper = quotientUpper - 1;\n        quotientLower = 0;\n      }\n    }\n  }\n  if (isDividendNegative != 0) {\n    bVar13 = quotientUpper != 0;\n    quotientUpper = -quotientUpper;\n    quotientLower = -quotientLower - (uint)bVar13;\n  }\n  return CONCAT44(quotientLower,quotientUpper);\n}\n\n",
            "renaming": {
                "FUN_000847e0": "divide_with_remainder_000847e0",
                "param_1": "dividend",
                "param_2": "dividendExtension",
                "param_3": "divisorUpper",
                "param_4": "divisorLower",
                "lVar1": "result",
                "uVar2": "quotientUpper",
                "uVar3": "quotientLower",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar7": "multiplicationResultUpper",
                "uVar8": "multiplicationResultLower",
                "uVar9": "isDividendNegative",
                "uVar10": "isDivisorNegative",
                "uVar11": "adjustedQuotient",
                "uVar12": "tempDivisor"
            },
            "calling": [
                "FUN_0008477c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084a80": {
            "entrypoint": "0x00084a80",
            "current_name": "division_with_carry_00084a80",
            "code": "\nulonglong divisionWithCarry_00084a80(uint dividend,uint divisor,uint temp1,uint temp2)\n\n{\n  longlong product;\n  uint quotient;\n  uint divisorHigh;\n  uint productLow;\n  uint dividendLow;\n  uint dividendHigh;\n  uint quotientLow;\n  uint quotientHigh;\n  uint remainder;\n  int shiftCount;\n  bool carryFlag;\n  \n  if (temp2 == 0) {\n    if (temp1 <= divisor) {\n      if (temp1 == 0) {\n        temp1 = 1 / 0;\n      }\n      shiftCount = LZCOUNT(temp1);\n      if (shiftCount == 0) {\n        divisor = divisor - temp1;\n        divisorHigh = temp1 >> 0x10;\n        dividendLow = temp1 & 0xffff;\n        quotient = 1;\n      }\n      else {\n        temp1 = temp1 << shiftCount;\n        quotientHigh = divisor >> (0x20U - shiftCount & 0xff);\n        divisorHigh = temp1 >> 0x10;\n        remainder = quotientHigh / divisorHigh;\n        dividendLow = temp1 & 0xffff;\n        quotient = dividendLow * remainder;\n        dividendHigh = dividend >> (0x20U - shiftCount & 0xff) | divisor << shiftCount;\n        productLow = dividendHigh >> 0x10 | (quotientHigh - divisorHigh * remainder) * 0x10000;\n        dividend = dividend << shiftCount;\n        quotientHigh = remainder;\n        if (productLow <= quotient && quotient - productLow != 0) {\n          carryFlag = CARRY4(productLow,temp1);\n          productLow = productLow + temp1;\n          quotientHigh = remainder - 1;\n          if ((carryFlag == false) && (productLow <= quotient && quotient - productLow != 0)) {\n            quotientHigh = remainder - 2;\n            productLow = productLow + temp1;\n          }\n        }\n        quotientLow = (productLow - quotient) / divisorHigh;\n        remainder = dividendLow * quotientLow;\n        divisor = dividendHigh & 0xffff | ((productLow - quotient) - divisorHigh * quotientLow) * 0x10000;\n        quotient = quotientLow;\n        if (divisor <= remainder && remainder - divisor != 0) {\n          carryFlag = CARRY4(divisor,temp1);\n          divisor = divisor + temp1;\n          quotient = quotientLow - 1;\n          if ((carryFlag == false) && (divisor <= remainder && remainder - divisor != 0)) {\n            quotient = quotientLow - 2;\n            divisor = divisor + temp1;\n          }\n        }\n        divisor = divisor - remainder;\n        quotient = quotient | quotientHigh << 0x10;\n      }\n      remainder = divisor / divisorHigh;\n      productLow = dividendLow * remainder;\n      dividendHigh = dividend >> 0x10 | (divisor - divisorHigh * remainder) * 0x10000;\n      quotientHigh = remainder;\n      if (dividendHigh <= productLow && productLow - dividendHigh != 0) {\n        carryFlag = CARRY4(dividendHigh,temp1);\n        dividendHigh = dividendHigh + temp1;\n        quotientHigh = remainder - 1;\n        if ((carryFlag == false) && (dividendHigh <= productLow && productLow - dividendHigh != 0)) {\n          quotientHigh = remainder - 2;\n          dividendHigh = dividendHigh + temp1;\n        }\n      }\n      remainder = (dividendHigh - productLow) / divisorHigh;\n      dividendLow = dividendLow * remainder;\n      dividendHigh = dividend & 0xffff | ((dividendHigh - productLow) - divisorHigh * remainder) * 0x10000;\n      divisorHigh = remainder;\n      if (dividendHigh <= dividendLow && dividendLow - dividendHigh != 0) {\n        divisorHigh = remainder - 1;\n        if ((CARRY4(dividendHigh,temp1) == false) &&\n           (dividendHigh + temp1 <= dividendLow && dividendLow - (dividendHigh + temp1) != 0)) {\n          divisorHigh = remainder - 2;\n        }\n      }\n      return CONCAT44(quotient,divisorHigh | quotientHigh << 0x10);\n    }\n    shiftCount = LZCOUNT(temp1);\n    if (shiftCount != 0) {\n      quotientHigh = dividend >> (0x20U - shiftCount & 0xff);\n      temp1 = temp1 << shiftCount;\n      dividend = dividend << shiftCount;\n      divisor = quotientHigh | divisor << shiftCount;\n    }\n    quotient = temp1 >> 0x10;\n    divisorHigh = divisor / quotient;\n    dividendLow = (temp1 & 0xffff) * divisorHigh;\n    remainder = dividend >> 0x10 | (divisor - quotient * divisorHigh) * 0x10000;\n    quotientHigh = divisorHigh;\n    if (remainder <= dividendLow && dividendLow - remainder != 0) {\n      carryFlag = CARRY4(remainder,temp1);\n      remainder = remainder + temp1;\n      quotientHigh = divisorHigh - 1;\n      if ((carryFlag == false) && (remainder <= dividendLow && dividendLow - remainder != 0)) {\n        quotientHigh = divisorHigh - 2;\n        remainder = remainder + temp1;\n      }\n    }\n    dividendHigh = (remainder - dividendLow) / quotient;\n    divisorHigh = (temp1 & 0xffff) * dividendHigh;\n    dividendLow = dividend & 0xffff | ((remainder - dividendLow) - quotient * dividendHigh) * 0x10000;\n    quotient = dividendHigh;\n    if (dividendLow <= divisorHigh && divisorHigh - dividendLow != 0) {\n      quotient = dividendHigh - 1;\n      if ((CARRY4(dividendLow,temp1) == false) &&\n         (dividendLow + temp1 <= divisorHigh && divisorHigh - (dividendLow + temp1) != 0)) {\n        quotient = dividendHigh - 2;\n      }\n    }\n    quotient = quotient | quotientHigh << 0x10;\n  }\n  else {\n    if (divisor < temp2) {\n      return 0;\n    }\n    shiftCount = LZCOUNT(temp2);\n    if (shiftCount == 0) {\n      if ((temp2 < divisor) || (temp1 <= dividend)) {\n        return 1;\n      }\n      quotient = 0;\n    }\n    else {\n      quotient = 0x20 - shiftCount;\n      quotientHigh = divisor >> (quotient & 0xff);\n      divisorHigh = temp2 << shiftCount | temp1 >> (quotient & 0xff);\n      dividendLow = divisorHigh >> 0x10;\n      productLow = quotientHigh / dividendLow;\n      remainder = (divisorHigh & 0xffff) * productLow;\n      dividendHigh = dividend >> (quotient & 0xff) | divisor << shiftCount;\n      quotient = dividendHigh >> 0x10 | (quotientHigh - dividendLow * productLow) * 0x10000;\n      quotientHigh = productLow;\n      if (quotient <= remainder && remainder - quotient != 0) {\n        carryFlag = CARRY4(quotient,divisorHigh);\n        quotient = quotient + divisorHigh;\n        quotientHigh = productLow - 1;\n        if ((carryFlag == false) && (quotient <= remainder && remainder - quotient != 0)) {\n          quotientHigh = productLow - 2;\n          quotient = quotient + divisorHigh;\n        }\n      }\n      productLow = (quotient - remainder) / dividendLow;\n      quotientLow = (divisorHigh & 0xffff) * productLow;\n      dividendLow = dividendHigh & 0xffff | ((quotient - remainder) - dividendLow * productLow) * 0x10000;\n      quotient = productLow;\n      if (dividendLow <= quotientLow && quotientLow - dividendLow != 0) {\n        carryFlag = CARRY4(dividendLow,divisorHigh);\n        dividendLow = dividendLow + divisorHigh;\n        quotient = productLow - 1;\n        if ((carryFlag == false) && (dividendLow <= quotientLow && quotientLow - dividendLow != 0)) {\n          quotient = productLow - 2;\n          dividendLow = dividendLow + divisorHigh;\n        }\n      }\n      quotient = quotient | quotientHigh << 0x10;\n      product = (ulonglong)quotient * (ulonglong)(temp1 << shiftCount);\n      quotientHigh = (uint)((ulonglong)product >> 0x20);\n      if ((dividendLow - quotientLow < quotientHigh) || ((dividendLow - quotientLow == quotientHigh && (dividend << shiftCount < (uint)product)))\n         ) {\n        quotient = quotient - 1;\n      }\n    }\n  }\n  return (ulonglong)quotient;\n}\n\n",
            "renaming": {
                "FUN_00084a80": "division_with_carry_00084a80",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "temp1",
                "param_4": "temp2",
                "lVar1": "product",
                "uVar2": "quotient",
                "uVar3": "divisorHigh",
                "uVar4": "productLow",
                "uVar5": "dividendLow",
                "uVar6": "dividendHigh",
                "uVar7": "quotientLow",
                "uVar8": "quotientHigh",
                "uVar9": "remainder",
                "iVar10": "shiftCount",
                "bVar11": "carryFlag"
            },
            "calling": [
                "FUN_000847ac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085858": {
            "entrypoint": "0x00085858",
            "current_name": "FUNC_00085858",
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 96062,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_0008021c",
            "FUN_000803d4",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e9c",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081184",
            "FUN_0008118c",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "thunk_FUN_00081714",
            "FUN_00081388",
            "FUN_000813c2",
            "FUN_000813e4",
            "FUN_00081454",
            "FUN_000814e4",
            "FUN_000815f8",
            "FUN_000816d4",
            "FUN_00081714",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_00081944",
            "FUN_00081bf4",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d7c",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00083974",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_00084384",
            "FUN_000845bc",
            "FUN_000847e0",
            "FUN_00084a80"
        ],
        [
            "FUN_00080410",
            "FUN_00080ce0",
            "FUN_00080da0",
            "FUN_000813a8",
            "FUN_00081508",
            "FUN_000815d4",
            "FUN_00081c5c",
            "FUN_00082970",
            "FUN_00083b14",
            "FUN_0008456c",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_0008477c",
            "FUN_000847ac"
        ],
        [
            "FUN_00080c0c",
            "FUN_00081210",
            "FUN_00081c54",
            "FUN_00081c94",
            "FUN_00083d00",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_00084750"
        ],
        [
            "FUN_00081318",
            "FUN_00081ca8",
            "FUN_00083d9c"
        ],
        [
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_00080258",
            "FUN_00080ae4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_00083adc"
        ],
        [
            "FUN_000802da",
            "FUN_0008043e",
            "FUN_000804a8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081df4",
            "FUN_000825b0",
            "FUN_000842a4",
            "FUN_000846a4"
        ],
        [
            "FUN_000805d0",
            "FUN_000825a0",
            "FUN_00083808"
        ],
        [
            "FUN_00081622",
            "FUN_000816a8",
            "FUN_00083f34",
            "FUN_000844c4"
        ],
        [
            "FUN_0008163a",
            "FUN_00083c40"
        ],
        [
            "FUN_0008165c",
            "FUN_00082ac0"
        ],
        [
            "FUN_00081682"
        ],
        [
            "FUN_00080a68"
        ],
        [
            "FUN_0008378c"
        ]
    ],
    "locked_functions": [
        "FUN_00082b38"
    ]
}