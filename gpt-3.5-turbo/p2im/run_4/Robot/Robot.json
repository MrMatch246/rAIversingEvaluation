{
    "functions": {
        "FUN_0800071c": {
            "renaming": {
                "FUN_0800071c": "FUNC_0800071c"
            },
            "code": "\nulonglong FUNC_0800071c(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = convert_to_double_0800088a();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_0800083a;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_0800083a:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_0800088a"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800071c",
            "calling": [
                "FUN_08005838",
                "FUN_08004d78",
                "FUN_08004bd8",
                "FUN_080079e8",
                "FUN_080059f0"
            ],
            "imported": false,
            "current_name": "FUNC_0800071c"
        },
        "FUN_080036a8": {
            "renaming": {
                "FUN_080036a8": "set_bit_080036a8",
                "param_1": "bit_array",
                "param_2": "position",
                "*param_1": "*bit_array",
                "DAT_080036f4": "DAT_array_end"
            },
            "code": "void set_bit_080036a8(uint **bit_array, uint position) {\n    update_bit_at_position(*bit_array, position, 1);\n    if (*bit_array == DAT_080036f4) {\n        (*bit_array)[17] |= 0x8000;\n    }\n    **bit_array |= 1;\n}",
            "called": [
                "FUN_080041ea"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036a8",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_bit_080036a8"
        },
        "FUN_080088ec": {
            "renaming": {
                "FUN_080088ec": "FUNC_080088ec"
            },
            "code": "\nvoid FUNC_080088ec(undefined4 param_1,int param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  int iVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  undefined *puVar7;\n  undefined *puVar8;\n  undefined *puVar9;\n  uint uVar10;\n  int iVar11;\n  \n  if (param_2 == 0) {\n    return;\n  }\n  do_nothing_with_pointer_080090a8();\n  puVar8 = PTR_DAT_08008ac4;\n  uVar10 = *(uint *)(param_2 + -4);\n  iVar2 = param_2 + -8;\n  uVar5 = uVar10 & 0xfffffffe;\n  puVar3 = (uint *)(iVar2 + uVar5);\n  uVar6 = puVar3[1] & 0xfffffffc;\n  if (*(uint **)(PTR_DAT_08008ac4 + 8) == puVar3) {\n    uVar5 = uVar5 + uVar6;\n    if ((uVar10 & 1) == 0) {\n      iVar2 = iVar2 - *(int *)(param_2 + -8);\n      iVar11 = *(int *)(iVar2 + 8);\n      iVar1 = *(int *)(iVar2 + 0xc);\n      uVar5 = uVar5 + *(int *)(param_2 + -8);\n      *(int *)(iVar11 + 0xc) = iVar1;\n      *(int *)(iVar1 + 8) = iVar11;\n    }\n    uVar6 = *(uint *)PTR_DAT_08008acc;\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(int *)(puVar8 + 8) = iVar2;\n    if (uVar6 <= uVar5) {\n      check_memory_alignment_0800884c(param_1,*(undefined4 *)PTR_DAT_08008ad0);\n    }\nLAB_080089f0:\n    do_nothing_with_pointer_080090b4(param_1);\n    return;\n  }\n  puVar3[1] = uVar6;\n  if ((uVar10 & 1) == 0) {\n    iVar2 = iVar2 - *(int *)(param_2 + -8);\n    puVar9 = *(undefined **)(iVar2 + 8);\n    uVar5 = uVar5 + *(int *)(param_2 + -8);\n    uVar10 = *(uint *)((int)puVar3 + uVar6 + 4) & 1;\n    if (puVar9 == puVar8 + 8) {\n      if (uVar10 == 0) {\n        uVar10 = puVar3[2];\n        uVar4 = puVar3[3];\n        uVar5 = uVar5 + uVar6;\n        *(uint *)(uVar10 + 0xc) = uVar4;\n        *(uint *)(uVar4 + 8) = uVar10;\n        *(uint *)(iVar2 + 4) = uVar5 | 1;\n        *(uint *)(iVar2 + uVar5) = uVar5;\n      }\n      else {\n        *(uint *)(iVar2 + 4) = uVar5 | 1;\n        *puVar3 = uVar5;\n      }\n      goto LAB_080089f0;\n    }\n    iVar11 = *(int *)(iVar2 + 0xc);\n    *(int *)(puVar9 + 0xc) = iVar11;\n    *(undefined **)(iVar11 + 8) = puVar9;\n  }\n  else {\n    uVar10 = *(uint *)((int)puVar3 + uVar6 + 4) & 1;\n  }\n  if (uVar10 == 0) {\n    puVar9 = (undefined *)puVar3[2];\n    uVar5 = uVar5 + uVar6;\n    if (puVar9 == PTR_PTR_DAT_08008ac8) {\n      *(int *)(puVar8 + 0x10) = iVar2;\n      *(int *)(puVar8 + 0x14) = iVar2;\n      *(undefined **)(iVar2 + 8) = puVar9;\n      *(undefined **)(iVar2 + 0xc) = puVar9;\n      *(uint *)(iVar2 + 4) = uVar5 | 1;\n      *(uint *)(iVar2 + uVar5) = uVar5;\n      goto LAB_080089f0;\n    }\n    uVar6 = puVar3[3];\n    *(uint *)(puVar9 + 0xc) = uVar6;\n    *(undefined **)(uVar6 + 8) = puVar9;\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(uint *)(iVar2 + uVar5) = uVar5;\n  }\n  else {\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(uint *)(iVar2 + uVar5) = uVar5;\n  }\n  if (uVar5 < 0x200) {\n    iVar11 = (uVar5 >> 3) + 1;\n    uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(puVar8 + 4);\n    iVar1 = *(int *)(puVar8 + iVar11 * 8);\n    *(int *)(iVar2 + 8) = iVar1;\n    *(undefined **)(iVar2 + 0xc) = puVar8 + iVar11 * 8 + -8;\n    *(uint *)(puVar8 + 4) = uVar5;\n    *(int *)(puVar8 + iVar11 * 8) = iVar2;\n    *(int *)(iVar1 + 0xc) = iVar2;\n    do_nothing_with_pointer_080090b4(param_1,iVar2,uVar5,param_4);\n    return;\n  }\n  uVar6 = uVar5 >> 9;\n  if (uVar6 < 5) {\n    iVar11 = ((uVar5 >> 6) + 0x39) * 8;\n    iVar1 = (uVar5 >> 6) + 0x38;\n  }\n  else if (uVar6 < 0x15) {\n    iVar11 = (uVar6 + 0x5c) * 8;\n    iVar1 = uVar6 + 0x5b;\n  }\n  else if (uVar6 < 0x55) {\n    iVar11 = ((uVar5 >> 0xc) + 0x6f) * 8;\n    iVar1 = (uVar5 >> 0xc) + 0x6e;\n  }\n  else if (uVar6 < 0x155) {\n    iVar11 = ((uVar5 >> 0xf) + 0x78) * 8;\n    iVar1 = (uVar5 >> 0xf) + 0x77;\n  }\n  else if (uVar6 < 0x555) {\n    iVar11 = ((uVar5 >> 0x12) + 0x7d) * 8;\n    iVar1 = (uVar5 >> 0x12) + 0x7c;\n  }\n  else {\n    iVar11 = 0x3f8;\n    iVar1 = 0x7e;\n  }\n  puVar9 = *(undefined **)(puVar8 + iVar11);\n  puVar7 = puVar8 + iVar11 + -8;\n  if (puVar7 == puVar9) {\n    puVar9 = (undefined *)(1 << (iVar1 >> 2 & 0xffU) | *(uint *)(puVar8 + 4));\n    *(undefined **)(puVar8 + 4) = puVar9;\n    puVar8 = puVar7;\n  }\n  else {\n    do {\n      puVar8 = puVar9;\n      if ((*(uint *)(puVar9 + 4) & 0xfffffffc) <= uVar5) break;\n      puVar9 = *(undefined **)(puVar9 + 8);\n      puVar8 = puVar7;\n    } while (puVar7 != puVar9);\n    puVar7 = *(undefined **)(puVar8 + 0xc);\n  }\n  *(undefined **)(iVar2 + 8) = puVar8;\n  *(undefined **)(iVar2 + 0xc) = puVar7;\n  *(int *)(puVar7 + 8) = iVar2;\n  *(int *)(puVar8 + 0xc) = iVar2;\n  do_nothing_with_pointer_080090b4(param_1,iVar2,puVar9,param_4);\n  return;\n}\n\n",
            "called": [
                "FUN_0800884c",
                "FUN_080090b4",
                "FUN_080090a8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080088ec",
            "calling": [
                "FUN_08005e9c",
                "FUN_080097cc",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "imported": false,
            "current_name": "FUNC_080088ec"
        },
        "FUN_08005224": {
            "renaming": {
                "FUN_08005224": "initialize_program_08005224",
                "PTR_DAT_0800527c": "update_flag_if_valid_input",
                "PTR_DAT_08005284": "process_data",
                "PTR_DAT_0800528c": "get_pointer_value",
                "PTR_DAT_08005294": "PTR_data",
                "PTR_DAT_08005298": "PTR_params",
                "PTR_DAT_0800529c": "PTR_flags",
                "set_flag_and_update_data_080014f0": "set_flag_and_update_data",
                "calculate_and_set_mask_080052a0": "calculate_and_set_mask",
                "set_bit_and_param_080055f4": "set_bit_and_param",
                "initialize_values_08005348": "initialize_values",
                "initialize_data_08005598": "initialize_data",
                "initialize_program_08005500": "initialize_main_program",
                "decode_bits_080053b0": "decode_bits",
                "PTR_update_flag_if_valid_input_08004ea4_1_08005280": "update_flag_if_valid_input_1",
                "PTR_process_data_08004ee8_1_08005288": "process_data_1",
                "PTR_get_pointer_value_08004f2c_1_08005290": "get_pointer_value_1",
                "set_bit_080036a8": "set_bit",
                "initialize_params_and_calculate_hash_0800491c": "initialize_params_and_calculate_hash",
                "set_flags_0800360c": "set_flags",
                "execute_system_call_if_initialized_08004e74": "execute_system_call_if_initialized"
            },
            "code": "void initialize_program_08005224(void)\n{\n    set_flag_and_update_data();\n    calculate_and_set_mask();\n    set_bit_and_param();\n    initialize_values();\n    initialize_data();\n    initialize_main_program();\n    decode_bits();\n    PTR_DAT_0800527c = &PTR_PTR_DAT_0800527c_08004ea4_1_08005280;\n    PTR_DAT_08005284 = &PTR_PTR_DAT_08005284_08004ee8_1_08005288;\n    PTR_DAT_0800528c = &PTR_PTR_DAT_0800528c_08004f2c_1_08005290;\n    set_bit(PTR_DAT_08005294, 0);\n    set_bit(PTR_DAT_08005294, 12);\n    initialize_params_and_calculate_hash(PTR_DAT_08005298);\n    set_flags(PTR_DAT_0800529c);\n    execute_system_call_if_initialized(0);\n    while(true)\n    {\n        // Do nothing\n    }\n}",
            "called": [
                "FUN_080052a0",
                "FUN_08005598",
                "FUN_0800360c",
                "FUN_08005348",
                "FUN_080014f0",
                "FUN_080055f4",
                "FUN_080036a8",
                "FUN_08004e74",
                "FUN_0800491c",
                "FUN_08005500",
                "FUN_080053b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005224",
            "calling": [
                "FUN_080057e8"
            ],
            "imported": false,
            "current_name": "initialize_program_08005224"
        },
        "FUN_08003440": {
            "renaming": {
                "FUN_08003440": "calculate_result_08003440",
                "local_30": "value",
                "local_2c": "flags",
                "uStack_28": "data_1",
                "uStack_24": "data_2",
                "uStack_20": "data_3",
                "local_1c": "lookup_result",
                "local_18": "result",
                "local_14": "data",
                "local_10": "result",
                "local_c": "multiplier",
                "DAT_080034f0": "flags_ptr",
                "DAT_080034f8": "data_ptr",
                "PTR_DAT_080034f4": "value_ptr",
                "DAT_080034fc": "default_value",
                "DAT_08003500": "multiplier_default"
            },
            "code": "uint calculate_result_08003440(void)\n{\n  uint result;\n  uint flags;\n  uint data;\n  uint value;\n  uint multiplier;\n  uint divisor;\n  uint lookup_index;\n  uint lookup_value;\n  uint lookup_mask = 1;\n  uint* DAT_080034f0 = (uint*)PTR_DAT_080034f0;\n  uint* DAT_080034f8 = (uint*)DAT_080034f8;\n  ushort* PTR_DAT_080034f4 = (ushort*)PTR_DAT_080034f4;\n  result = 0;\n  flags = *DAT_080034f0;\n  data = *DAT_080034f8;\n  value = *PTR_DAT_080034f4;\n  if ((data & 0xc) == 4) {\n    result = DAT_080034fc;\n  }\n  else if ((data & 0xc) == 8) {\n    lookup_index = data >> 0x12 & 0xf;\n    lookup_mask <<= lookup_index;\n    lookup_value = (flags & lookup_mask) >> lookup_index;\n    if ((data & 0x10000) == 0) {\n      multiplier = DAT_08003500;\n      divisor = 1;\n    }\n    else {\n      multiplier = DAT_080034fc;\n      lookup_mask = data >> 0x11 & 1;\n      lookup_value = value >> lookup_mask & 1;\n      divisor = lookup_value;\n    }\n    result = multiplier * lookup_value / divisor;\n  }\n  else {\n    result = DAT_080034fc;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003440",
            "calling": [
                "FUN_08003260"
            ],
            "imported": false,
            "current_name": "calculate_result_08003440"
        },
        "FUN_080035fa": {
            "renaming": {
                "FUN_080035fa": "do_nothing_080035fa"
            },
            "code": "\nvoid do_nothing_080035fa(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fa",
            "calling": [
                "FUN_080035a4"
            ],
            "imported": false,
            "current_name": "do_nothing_080035fa"
        },
        "FUN_08004f2c": {
            "renaming": {
                "FUN_08004f2c": "get_pointer_value_08004f2c",
                "uVar1": "pointer_value"
            },
            "code": "int get_pointer_value_08004f2c() {\n    int pointer_value = get_pointer_value_08004f2c_080015a0();\n    return pointer_value;\n}",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f2c",
            "calling": [],
            "imported": false,
            "current_name": "get_pointer_value_08004f2c"
        },
        "FUN_08005348": {
            "renaming": {
                "FUN_08005348": "initialize_values_08005348",
                "PTR_DAT_080053a0": "ptr",
                "DAT_080053a4": "value1",
                "DAT_080053a8": "value2",
                "calculate_value_08001ab0": "calculate_value",
                "infinite_loop_08005674": "infinite_loop",
                "PTR_s____src_main_c_080053ac": "ptr_string"
            },
            "code": "void initialize_values_08005348(void)\n{\n  int result = 0;\n  int *PTR_DAT_080053a0 = PTR_DAT_080053a0;\n  *PTR_DAT_080053a0 = DAT_080053a4;\n  *(PTR_DAT_080053a0 + 1) = DAT_080053a8;\n  *(PTR_DAT_080053a0 + 2) = 0;\n  *(PTR_DAT_080053a0 + 3) = 0;\n  *(PTR_DAT_080053a0 + 4) = 0x4000;\n  *(PTR_DAT_080053a0 + 5) = 0;\n  *(PTR_DAT_080053a0 + 6) = 0;\n  *(PTR_DAT_080053a0 + 7) = 0;\n  *(PTR_DAT_080053a0 + 8) = 0;\n  result = calculate_value(PTR_DAT_080053a0);\n  if (result != 0)\n  {\n    infinite_loop(PTR_s____src_main_c_080053ac, 0x17a);\n  }\n  return;\n}\n",
            "called": [
                "FUN_08005674",
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005348",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_values_08005348"
        },
        "FUN_08004378": {
            "renaming": {
                "FUN_08004378": "do_nothing_08004378"
            },
            "code": "\nvoid do_nothing_08004378(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004378",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08004378"
        },
        "FUN_080046ec": {
            "renaming": {
                "FUN_080046ec": "calculate_value_080046ec",
                "param_1": "input",
                "*param_1": "*input",
                "lVar1": "shift1",
                "lVar2": "shift2",
                "iVar3": "value1",
                "iVar4": "value2",
                "iVar5": "value3",
                "uVar6": "unused",
                "PTR_DAT_08004914": "PTR_DAT_08004914",
                "PTR_DAT_08004918": "PTR_DAT_08004918"
            },
            "code": "void calculate_value_080046ec(int *input)\n{\n    long long shift1, shift2;\n    int value1, value2, value3, value4, value5;\n    uint *ptr1 = (uint *)(*input + 0x10);\n    uint *ptr2 = (uint *)(*input + 0xc);\n    uint *ptr3 = (uint *)(*input + 0x14);\n    *ptr1 = input[3] | (*ptr1 & 0xffffcfff);\n    *ptr2 = (*ptr2 & 0xffffe9f3) | input[5] | input[2] | input[4];\n    *ptr3 = input[6] | (*ptr3 & 0xfffffcff);\n    if (*input == PTR_DAT_08004914)\n    {\n        shift1 = (long long)PTR_DAT_08004918 * ((long long)(uint)(get_shifted_value_08003540() * 0x19) / (long long)(uint)(input[1] << 2));\n        value1 = get_shifted_value_08003540(get_shifted_value_08003540(), (int)(get_shifted_value_08003540() >> 0x20), (int)shift1);\n        value2 = input[1];\n        shift2 = (long long)PTR_DAT_08004918 * (long long)(((value1 * 0x19) / (value2 << 2)) + (((long long)(uint)(get_shifted_value_08003540() * 0x19) / (long long)(uint)(input[1] << 2)) * -100 >> 0x25) * 0x10 + 0x32);\n        value1 = get_shifted_value_08003540(get_shifted_value_08003540(), (int)(get_shifted_value_08003540() >> 0x20), (int)shift2);\n        value3 = input[1];\n        value2 = get_shifted_value_08003540();\n        *ptr1 = ((PTR_DAT_08004918 * (((value1 * 0x19) / (value3 << 2)) + (((long long)(uint)(value2 * 0x19) / (long long)(uint)(input[1] << 2)) * -100 >> 0x25) * 0x10 + 0x32)) >> 0x25 & 0xf) + ((long long)shift1 >> 0x25) * 0x10 + ((long long)shift2 >> 0x25 & 0xf0);\n    }\n    else\n    {\n        shift1 = (long long)PTR_DAT_08004918 * ((long long)(uint)(get_shifted_value_08003518() * 0x19) / (long long)(uint)(input[1] << 2));\n        value1 = get_shifted_value_08003518(get_shifted_value_08003518(), (int)(get_shifted_value_08003518() >> 0x20), (int)shift1);\n        value2 = input[1];\n        shift2 = (long long)PTR_DAT_08004918 * (long long)(((value1 * 0x19) / (value2 << 2)) + (((long long)(uint)(get_shifted_value_08003518() * 0x19) / (long long)(uint)(input[1] << 2)) * -100 >> 0x25) * 0x10 + 0x32);\n        value1 = get_shifted_value_08003518(get_shifted_value_08003518(), (int)(get_shifted_value_08003518() >> 0x20), (int)shift2);\n        value3 = input[1];\n        value2 = get_shifted_value_08003518();\n        *ptr1 = ((PTR_DAT_08004918 * (((value1 * 0x19) / (value3 << 2)) + (((long long)(uint)(value2 * 0x19) / (long long)(uint)(input[1] << 2)) * -100 >> 0x25) * 0x10 + 0x32)) >> 0x25 & 0xf) + ((long long)shift1 >> 0x25) * 0x10 + ((long long)shift2 >> 0x25 & 0xf0);\n    }\n}",
            "called": [
                "FUN_08003540",
                "FUN_08003518"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046ec",
            "calling": [
                "FUN_0800438a"
            ],
            "imported": false,
            "current_name": "calculate_value_080046ec"
        },
        "FUN_08005500": {
            "renaming": {
                "FUN_08005500": "initialize_program_08005500",
                "local_20": "flag_value",
                "local_1c": "unused_value",
                "local_18": "permissions_array",
                "iVar1": "result",
                "PTR_DAT_08005590": "PTR_PROGRAM_BASE_ADDRESS",
                "PTR_s____src_main_c_08005594": "PTR_ERROR_MESSAGE",
                "infinite_loop_08005674": "infinite_loop",
                "validate_input_data_080035a4": "validate_input_data",
                "set_permissions_and_data_08003a94": "set_permissions_and_data",
                "set_value_if_flag_set_080042de": "set_value_if_flag_set"
            },
            "code": "void initialize_program_08005500() {\n  int validation_result;\n  int permissions_result;\n  int flag_set_result;\n  int permissions_array[4];\n  *(int *)PTR_DAT_08005590 = 0x40000000;\n  *(int *)(PTR_DAT_08005590 + 4) = 36000;\n  *(int *)(PTR_DAT_08005590 + 8) = 0;\n  *(int *)(PTR_DAT_08005590 + 0xc) = 0x14;\n  *(int *)(PTR_DAT_08005590 + 0x10) = 0;\n  *(int *)(PTR_DAT_08005590 + 0x18) = 0;\n  validation_result = validate_input_data(PTR_DAT_08005590);\n  if (validation_result != 0) {\n    infinite_loop(PTR_s____src_main_c_08005594, 0x1d0);\n  }\n  permissions_array[0] = 0x1000;\n  permissions_result = set_permissions_and_data(PTR_DAT_08005590, permissions_array);\n  if (permissions_result != 0) {\n    infinite_loop(PTR_s____src_main_c_08005594, 0x1d5);\n  }\n  flag_set_result = set_value_if_flag_set(PTR_DAT_08005590, 0x20, 0);\n  if (flag_set_result != 0) {\n    infinite_loop(PTR_s____src_main_c_08005594, 0x1dc);\n  }\n  return;\n}",
            "called": [
                "FUN_08003a94",
                "FUN_08005674",
                "FUN_080042de",
                "FUN_080035a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005500",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_program_08005500"
        },
        "FUN_08002c2e": {
            "renaming": {
                "FUN_08002c2e": "check_flag_08002c2e",
                "param_1": "flag_ptr",
                "param_2": "max_ptr_value",
                "param_3": "offset",
                "iVar1": "flag_check_result"
            },
            "code": "int check_flag_08002c2e(int *flag_ptr, uint32_t max_ptr_value, int offset)\n{\n    int flag_check_result;\n    while (true) {\n        if ((*(uint32_t *)(*flag_ptr + 0x14) & 4) == 4) {\n            return 0;\n        }\n        flag_check_result = check_flag_08002c2e_08002d3c(flag_ptr);\n        if (flag_check_result != 0) {\n            break;\n        }\n        if ((max_ptr_value != 0xffffffff) && (max_ptr_value == 0 || (flag_check_result = get_pointer_value_080015a0(), max_ptr_value < (uint32_t)(flag_check_result - offset)))) {\n            flag_ptr[0x10] |= 0x20;\n            flag_ptr[0xc] = 0;\n            *(undefined *)((int)flag_ptr + 0x3d) = 0x20;\n            *(undefined *)(flag_ptr + 0xf) = 0;\n            return 3;\n        }\n    }\n    return 1;\n}",
            "called": [
                "FUN_08002d3c",
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c2e",
            "calling": [
                "FUN_08001ccc"
            ],
            "imported": false,
            "current_name": "check_flag_08002c2e"
        },
        "FUN_08003568": {
            "renaming": {
                "FUN_08003568": "count_down_08003568",
                "param_1": "num",
                "local_c": "multiplier",
                "DAT_080035a0": "global_constant",
                "PTR_DAT_0800359c": "global_pointer"
            },
            "code": "void count_down_08003568(int num)\n{\n  int multiplier = (uint)((ulonglong)DAT_080035a0 * (ulonglong)*(uint *)PTR_DAT_0800359c >> 0x29);\n  do {\n    num--;\n  } while (num != 0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003568",
            "calling": [
                "FUN_08002d98"
            ],
            "imported": false,
            "current_name": "count_down_08003568"
        },
        "FUN_080049cc": {
            "renaming": {
                "FUN_080049cc": "calculate_hash_and_store_values_080049cc",
                "param_1": "input_parameter",
                "local_20": "loop_counter",
                "local_c": "temp",
                "local_10": "temp_float",
                "local_14": "hash_value",
                "local_18": "float_value",
                "local_24": "function_pointer",
                "local_1c": "num_of_iterations",
                "reversed_bits_and_store_in_params_08004ae0": "reverse_bits_and_store_in_params",
                "calculate_float_bits_and_hash_08004d78": "calculate_float_bits_and_hash",
                "FUNC_08000aa8": "add_and_return",
                "reverse_bits_08000c10": "reverse_bits",
                "FUNC_08000e20": "multiply_and_return",
                "PTR_DAT_08004adc": "pointer_DAT_08004adc"
            },
            "code": "void calculate_hash_and_store_values_080049cc(int input_parameter)\n{\n  \n  int loop_counter = 1;\n  int hash_value = 0;\n  int float_value = 0;\n  int reversed_bits = 0;\n  int reversed_bits_float = 0;\n  int temp = 0;\n  int temp_float = 0;\n  \n  int (*function_pointer)() = **(code **)PTR_DAT_08004adc;\n  int num_of_iterations = 0;\n  \n  while(loop_counter <= num_of_iterations)\n  {\n    reversed_bits_float = 0;\n    reversed_bits = 0;\n    reverse_bits_and_store_in_params_08004ae0(input_parameter);\n    calculate_float_bits_and_hash_08004d78(input_parameter, &reversed_bits_float, &reversed_bits);\n    hash_value = FUNC_08000aa8(hash_value, reversed_bits_float);\n    float_value = FUNC_08000aa8(float_value, reversed_bits);\n    temp = FUNC_08000aa8(temp, *(undefined4 *)(input_parameter + 0x10));\n    temp_float = FUNC_08000aa8(temp_float, *(undefined4 *)(input_parameter + 0x14));\n    function_pointer = **(code **)PTR_DAT_08004adc;\n    num_of_iterations++;\n  }\n  \n  int reversed_bits_loop_counter = reverse_bits_08000c10(loop_counter);\n  int temp_hash_value = FUNC_08000e20(temp, reversed_bits_loop_counter);\n  *(undefined4 *)(input_parameter + 0x1c) = temp_hash_value;\n  \n  int reversed_bits_loop_counter_2 = reverse_bits_08000c10(loop_counter);\n  int temp_float_value = FUNC_08000e20(temp_float, reversed_bits_loop_counter_2);\n  *(undefined4 *)(input_parameter + 0x20) = temp_float_value;\n  \n  int reversed_bits_loop_counter_3 = reverse_bits_08000c10(loop_counter);\n  int temp_hash_value_2 = FUNC_08000e20(hash_value, reversed_bits_loop_counter_3);\n  *(undefined4 *)(input_parameter + 0x24) = temp_hash_value_2;\n  \n  int reversed_bits_loop_counter_4 = reverse_bits_08000c10(loop_counter);\n  int temp_float_value_2 = FUNC_08000e20(float_value, reversed_bits_loop_counter_4);\n  *(undefined4 *)(input_parameter + 0x28) = temp_float_value_2;\n  \n  return;\n}\n",
            "called": [
                "FUN_08000e20",
                "FUN_08004d78",
                "FUN_08000aa8",
                "FUN_08004ae0",
                "FUN_08000c10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049cc",
            "calling": [
                "FUN_0800491c"
            ],
            "imported": false,
            "current_name": "calculate_hash_and_store_values_080049cc"
        },
        "FUN_08003c94": {
            "renaming": {
                "FUN_08003c94": "update_parameters_08003c94",
                "param_1": "param_array_1",
                "param_2": "param_array_2",
                "local_c": "local_param_1",
                "DAT_08003d54": "PTR_DAT_08003d54",
                "DAT_08003d58": "PTR_DAT_08003d58",
                "DAT_08003d5c": "PTR_DAT_08003d5c"
            },
            "code": "void update_parameters_08003c94(uint *param_array_1, uint *param_array_2)\n{\n  uint local_param_1;\n  local_param_1 = *param_array_1;\n  if ((((param_array_1 == DAT_08003d54) || (param_array_1 == (uint *)0x40000000)) || (param_array_1 == DAT_08003d58)) || (param_array_1 == DAT_08003d5c)) {\n    local_param_1 = param_array_2[1] | local_param_1 & 0xffffff8f;\n  }\n  if (((param_array_1 == DAT_08003d54) || (param_array_1 == (uint *)0x40000000)) || ((param_array_1 == DAT_08003d58 || (param_array_1 == DAT_08003d5c)))) {\n    local_param_1 = param_array_2[3] | local_param_1 & 0xfffffcff;\n  }\n  *param_array_1 = param_array_2[5] | local_param_1 & 0xffffff7f;\n  param_array_1[11] = param_array_2[2];\n  param_array_1[10] = *param_array_2;\n  if (param_array_1 == DAT_08003d54) {\n    param_array_1[12] = param_array_2[4];\n  }\n  param_array_1[5] = 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c94",
            "calling": [
                "FUN_080035a4",
                "FUN_08003640"
            ],
            "imported": false,
            "current_name": "update_parameters_08003c94"
        },
        "FUN_08000978": {
            "renaming": {
                "FUN_08000978": "check_and_return_params_08000978",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "code": "void check_and_return_params_08000978(int param1, int param2, int param3, int param4) {\n    check_params_and_return_08000988_08000988(param3, param4, param1, param2);\n    return;\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000978",
            "calling": [
                "FUN_080009d4",
                "FUN_080009e8"
            ],
            "imported": false,
            "current_name": "check_and_return_params_08000978"
        },
        "FUN_0800884c": {
            "renaming": {
                "FUN_0800884c": "check_memory_alignment_0800884c",
                "param_1": "base_address",
                "param_2": "offset",
                "puVar1": "ptr1",
                "iVar3": "local_value",
                "iVar4": "aligned_address",
                "uVar5": "uVar1",
                "puVar2": "ptr2",
                "PTR_DAT_080088e0": "ptr1",
                "do_nothing_with_pointer_080090a8": "do_nothing_with_pointer_080090a8",
                "PTR_DAT_080088e4": "ptr2",
                "get_local_value_08009744": "get_local_value_08009744",
                "PTR_DAT_080088e8": "ptr3",
                "do_nothing_with_pointer_080090b4": "do_nothing_with_pointer_080090b4"
            },
            "code": "int check_memory_alignment_0800884c(uint32_t* base_address, int offset) {\n  uint32_t* PTR_DAT_080088e0 = PTR_DAT_080088e0;\n  do_nothing_with_pointer_080090a8();\n  uint32_t uVar1 = *(uint32_t *)(*(int *)(PTR_DAT_080088e0 + 8) + 4) & 0xfffffffc;\n  int aligned_address = ((0xfef - offset) + uVar1 & 0xfffff000) - 0x1000;\n  if (0xfff < aligned_address) {\n    int local_value = get_local_value_08009744(base_address, 0);\n    if (local_value == *(int *)(PTR_DAT_080088e0 + 8) + uVar1) {\n      int aligned_offset = get_local_value_08009744(base_address, -aligned_address);\n      undefined *PTR_DAT_080088e4 = PTR_DAT_080088e4;\n      if (aligned_offset != -1) {\n        int PTR_DAT_080088e8 = *(int *)PTR_DAT_080088e4;\n        *(uint32_t *)(*(int *)(PTR_DAT_080088e0 + 8) + 4) = uVar1 - aligned_address | 1;\n        *(int *)PTR_DAT_080088e4 = PTR_DAT_080088e8 - aligned_address;\n        do_nothing_with_pointer_080090b4(base_address);\n        return 1;\n      }\n      aligned_address = get_local_value_08009744(base_address, 0);\n      PTR_DAT_080088e4 = PTR_DAT_080088e4;\n      uVar1 = aligned_address - *(int *)(PTR_DAT_080088e0 + 8);\n      if (0xf < (int)uVar1) {\n        int PTR_DAT_080088e8 = *(int *)PTR_DAT_080088e8;\n        *(uint32_t *)(*(int *)(PTR_DAT_080088e0 + 8) + 4) = uVar1 | 1;\n        *(int *)PTR_DAT_080088e4 = aligned_address - PTR_DAT_080088e8;\n      }\n    }\n  }\n  do_nothing_with_pointer_080090b4(base_address);\n  return 0;\n}",
            "called": [
                "FUN_08009744",
                "FUN_080090b4",
                "FUN_080090a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800884c",
            "calling": [
                "FUN_080088ec"
            ],
            "imported": false,
            "current_name": "check_memory_alignment_0800884c"
        },
        "FUN_0800901c": {
            "renaming": {
                "FUN_0800901c": "find_byte_in_uint_0800901c",
                "param_1": "data",
                "param_2": "length",
                "param_3": "search",
                "puVar1": "result",
                "uVar2": "temp",
                "uVar3": "temp",
                "puVar4": "data",
                "uVar5": "search_value",
                "bVar6": "bool_value"
            },
            "code": "uint * find_byte_in_uint_0800901c(uint *data, uint length, uint *search) {\n  uint *result;\n  uint search_value = length & 0xff;\n  if (((uint)data & 3) == 0) {\n    while (search > (data + 3)) {\n      uint temp = *data ^ ((search_value << 8) | search_value);\n      data++;\n      if ((temp + 0xfefefeff & ~temp & 0x80808080) != 0) {\n        goto exit_loop;\n      }\n      search--;\n    }\n    while ((search > 0) && (*data != search_value)) {\n      data++;\n      search--;\n    }\n    if (search == 0) {\n      result = NULL;\n    } else {\n      result = data;\n    }\n  } else {\n    uint *search_end = search - 1;\n    if (search == 0) {\n      result = NULL;\n    } else if (*data != search_value) {\n      data++;\n      while ((search > 0) && (((uint)data & 3) != 0)) {\n        search--;\n        if (*data == search_value) {\n          result = data;\n          goto exit_loop;\n        }\n        data++;\n      }\n      while (search > 0) {\n        uint temp = *data ^ ((search_value << 8) | search_value);\n        data++;\n        if ((temp + 0xfefefeff & ~temp & 0x80808080) != 0) {\n          goto exit_loop;\n        }\n        search--;\n        if (*data == search_value) {\n          result = data;\n          goto exit_loop;\n        }\n      }\n      result = NULL;\n    } else {\n      result = data;\n    }\n  }\n  exit_loop:\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800901c",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "find_byte_in_uint_0800901c"
        },
        "FUN_0800177c": {
            "renaming": {
                "FUN_0800177c": "set_bit_in_dat_0800177c",
                "param_1": "bit_position",
                "DAT_080017b0": "data_pointer"
            },
            "code": "void set_bit_in_dat_0800177c(int bit_position){\n  if (bit_position == 4) {\n    *DAT_080017b0 = *DAT_080017b0 | 4;\n  }\n  else {\n    *DAT_080017b0 = *DAT_080017b0 & 0xfffffffb;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800177c",
            "calling": [
                "FUN_080052a0"
            ],
            "imported": false,
            "current_name": "set_bit_in_dat_0800177c"
        },
        "FUN_080017b4": {
            "renaming": {
                "FUN_080017b4": "process_data_and_store_result_080017b4",
                "process_and_store_result_08004f78": "process_and_store_result"
            },
            "code": "void process_data_and_store_result_080017b4() {\n  process_and_store_result(0);\n  return;\n}",
            "called": [
                "FUN_08004f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080017b4",
            "calling": [
                "FUN_08005704"
            ],
            "imported": false,
            "current_name": "process_data_and_store_result_080017b4"
        },
        "FUN_08005598": {
            "renaming": {
                "FUN_08005598": "initialize_data_08005598",
                "PTR_DAT_080055e8": "data_pointer_1",
                "DAT_080055ec": "data_value_1",
                "check_input_and_calculate_0800438a": "check_input_and_calculate",
                "infinite_loop_08005674": "infinite_loop_error",
                "PTR_s____src_main_c_080055f0": "error_message_1"
            },
            "code": "void initialize_data_08005598(void)\n{\n    int input_check_result;\n    *(undefined4 *)PTR_DAT_080055e8 = DAT_080055ec;\n    *(undefined4 *)(PTR_DAT_080055e8 + 4) = 0x1c200;\n    *(undefined4 *)(PTR_DAT_080055e8 + 8) = 0;\n    *(undefined4 *)(PTR_DAT_080055e8 + 0xc) = 0;\n    *(undefined4 *)(PTR_DAT_080055e8 + 0x10) = 0;\n    *(undefined4 *)(PTR_DAT_080055e8 + 0x14) = 0xc;\n    *(undefined4 *)(PTR_DAT_080055e8 + 0x18) = 0;\n    *(undefined4 *)(PTR_DAT_080055e8 + 0x1c) = 0;\n    input_check_result = check_input_and_calculate(PTR_DAT_080055e8);\n    if (input_check_result != 0) {\n        infinite_loop_error(PTR_s____src_main_c_080055f0, 0x1ed);\n    }\n    return;\n}",
            "called": [
                "FUN_08005674",
                "FUN_0800438a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005598",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_data_08005598"
        },
        "FUN_08001030": {
            "renaming": {
                "FUN_08001030": "check_if_input_is_null_08001030_08001030",
                "in_CY": "input_char"
            },
            "code": "bool check_if_input_is_null_08001030_08001030(void)\n{\n  char input_char;\n  concatenate_results_and_calculate_08000fc8();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_08000fc8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001030",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "check_if_input_is_null_08001030_08001030"
        },
        "FUN_080011ec": {
            "renaming": {
                "FUN_080011ec": "get_concatenated_params_080011ec",
                "param_1": "x",
                "param_2": "y",
                "param_3": "z",
                "param_4": "w",
                "uVar1": "result",
                "FUNC_0800121c": "calculate_result"
            },
            "code": "uint64_t get_concatenated_params_080011ec(int x, int y, int z, int w) {\n    if (z == 0 && w == 0) {\n        if (x != 0 || y != 0) {\n            x = -1;\n            y = -1;\n        }\n        return ((uint64_t)y << 32) | (uint64_t)x;\n    }\n    uint64_t result = calculate_result();\n    return result;\n}",
            "called": [
                "FUN_0800121c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011ec",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "get_concatenated_params_080011ec"
        },
        "FUN_08004424": {
            "renaming": {
                "FUN_08004424": "do_nothing_08004424"
            },
            "code": "\nvoid do_nothing_08004424(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004424",
            "calling": [
                "FUN_0800438a"
            ],
            "imported": false,
            "current_name": "do_nothing_08004424"
        },
        "FUN_08004f3c": {
            "renaming": {
                "FUN_08004f3c": "validate_input_and_return_08004f3c",
                "param_1": "input_ptr",
                "param_2": "input_value",
                "0x32": "50"
            },
            "code": "void validate_input_and_return_08004f3c(undefined4 input_ptr, undefined2 input_value)\n{\n  validate_input(PTR_DAT_08004f5c, input_ptr, input_value, 50);\n  return;\n}",
            "called": [
                "FUN_08004436"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "validate_input_and_return_08004f3c"
        },
        "FUN_08009adc": {
            "renaming": {
                "FUN_08009adc": "FUNC_08009adc"
            },
            "code": "\nint * FUNC_08009adc(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  undefined *puVar1;\n  int *piVar2;\n  int iVar3;\n  int *piVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  int *piVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  int iVar12;\n  \n  if (param_2 == (int *)0x0) {\n    piVar4 = (int *)FUNC_08008af8(param_1,param_3);\n    return piVar4;\n  }\n  do_nothing_with_pointer_080090a8();\n  puVar1 = PTR_DAT_08009e38;\n  uVar7 = param_2[-1];\n  uVar10 = uVar7 & 0xfffffffc;\n  piVar4 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar9 = 0x10;\n  }\n  else {\n    uVar9 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar9 < 0) goto LAB_08009b8e;\n  }\n  if (uVar9 < param_3) {\nLAB_08009b8e:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  iVar12 = (int)piVar4 + uVar10;\n  uVar11 = uVar10;\n  if ((int)uVar10 < (int)uVar9) {\n    if (*(int *)(PTR_DAT_08009e38 + 8) == iVar12) {\n      iVar12 = (*(uint *)(*(int *)(PTR_DAT_08009e38 + 8) + 4) & 0xfffffffc) + uVar10;\n      if ((int)(uVar9 + 0x10) <= iVar12) {\n        *(uint *)(PTR_DAT_08009e38 + 8) = (int)piVar4 + uVar9;\n        *(uint *)((int)piVar4 + uVar9 + 4) = iVar12 - uVar9 | 1;\n        param_2[-1] = uVar9 | param_2[-1] & 1U;\n        do_nothing_with_pointer_080090b4(param_1);\n        return param_2;\n      }\n      if (-1 < (int)(uVar7 << 0x1f)) {\n        piVar2 = (int *)((int)piVar4 - param_2[-2]);\n        uVar7 = piVar2[1] & 0xfffffffc;\n        if ((int)(uVar9 + 0x10) <= (int)(iVar12 + uVar7)) {\n          iVar6 = piVar2[3];\n          piVar4 = piVar2 + 2;\n          iVar3 = *piVar4;\n          uVar10 = uVar10 - 4;\n          *(int *)(iVar3 + 0xc) = iVar6;\n          *(int *)(iVar6 + 8) = iVar3;\n          if (uVar10 < 0x25) {\n            iVar3 = *param_2;\n            piVar8 = piVar4;\n            if (0x13 < uVar10) {\n              piVar2[2] = iVar3;\n              piVar2[3] = param_2[1];\n              iVar3 = param_2[2];\n              if (uVar10 < 0x1c) {\n                param_2 = param_2 + 2;\n                piVar8 = piVar2 + 4;\n              }\n              else {\n                piVar2[4] = iVar3;\n                piVar2[5] = param_2[3];\n                iVar3 = param_2[4];\n                if (uVar10 == 0x24) {\n                  piVar2[6] = iVar3;\n                  piVar2[7] = param_2[5];\n                  iVar3 = param_2[6];\n                  param_2 = param_2 + 6;\n                  piVar8 = piVar2 + 8;\n                }\n                else {\n                  param_2 = param_2 + 4;\n                  piVar8 = piVar2 + 6;\n                }\n              }\n            }\n            *piVar8 = iVar3;\n            piVar8[1] = param_2[1];\n            piVar8[2] = param_2[2];\n          }\n          else {\n            reverse_copy_08009a18(piVar4,param_2);\n          }\n          *(uint *)(puVar1 + 8) = (int)piVar2 + uVar9;\n          *(uint *)((int)piVar2 + uVar9 + 4) = (iVar12 + uVar7) - uVar9 | 1;\n          piVar2[1] = uVar9 | piVar2[1] & 1U;\n          do_nothing_with_pointer_080090b4(param_1);\n          return piVar4;\n        }\nLAB_08009bb0:\n        uVar11 = uVar10 + uVar7;\n        if ((int)uVar9 <= (int)uVar11) {\n          iVar6 = piVar2[3];\n          piVar8 = piVar2 + 2;\n          iVar3 = *piVar8;\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar12 = (int)piVar2 + uVar11;\n          *(int *)(iVar6 + 8) = iVar3;\n          piVar4 = piVar2;\n          if (uVar10 - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          reverse_copy_08009a18(piVar8,param_2);\n          param_2 = piVar8;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(iVar12 + 4) & 0xfffffffe) + iVar12 + 4) << 0x1f) {\n        uVar5 = *(uint *)(iVar12 + 4) & 0xfffffffc;\n        uVar11 = uVar10 + uVar5;\n        if ((int)uVar11 < (int)uVar9) {\n          if ((int)(uVar7 << 0x1f) < 0) goto LAB_08009b36;\n          piVar2 = (int *)((int)piVar4 - param_2[-2]);\n          uVar7 = piVar2[1] & 0xfffffffc;\n          uVar11 = uVar5 + uVar7 + uVar10;\n          if ((int)uVar11 < (int)uVar9) goto LAB_08009bb0;\n          iVar3 = *(int *)(iVar12 + 8);\n          iVar12 = *(int *)(iVar12 + 0xc);\n          *(int *)(iVar3 + 0xc) = iVar12;\n          *(int *)(iVar12 + 8) = iVar3;\n          piVar8 = piVar2 + 2;\n          iVar3 = *piVar8;\n          iVar6 = piVar2[3];\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar12 = (int)piVar2 + uVar11;\n          *(int *)(iVar6 + 8) = iVar3;\n          piVar4 = piVar2;\n          if (0x24 < uVar10 - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          uVar10 = uVar10 - 4;\n          iVar3 = *param_2;\n          piVar2 = piVar8;\n          if (0x13 < uVar10) {\n            piVar4[2] = iVar3;\n            piVar4[3] = param_2[1];\n            iVar3 = param_2[2];\n            if (uVar10 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar4 + 4;\n            }\n            else {\n              piVar4[4] = iVar3;\n              piVar4[5] = param_2[3];\n              iVar3 = param_2[4];\n              if (uVar10 == 0x24) {\n                piVar4[6] = iVar3;\n                piVar4[7] = param_2[5];\n                iVar3 = param_2[6];\n                param_2 = param_2 + 6;\n                piVar2 = piVar4 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar4 + 6;\n              }\n            }\n          }\n          *piVar2 = iVar3;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          param_2 = piVar8;\n        }\n        else {\n          iVar3 = *(int *)(iVar12 + 8);\n          iVar6 = *(int *)(iVar12 + 0xc);\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar12 = (int)piVar4 + uVar11;\n          *(int *)(iVar6 + 8) = iVar3;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(uVar7 << 0x1f)) {\n        piVar2 = (int *)((int)piVar4 - param_2[-2]);\n        uVar7 = piVar2[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    piVar2 = (int *)FUNC_08008af8(param_1,param_3);\n    if (piVar2 != (int *)0x0) {\n      if ((int *)((param_2[-1] & 0xfffffffeU) + (int)piVar4) == piVar2 + -2) {\n        uVar11 = uVar10 + (piVar2[-1] & 0xfffffffcU);\n        iVar12 = (int)piVar4 + uVar11;\n        goto LAB_08009c00;\n      }\n      uVar10 = uVar10 - 4;\n      if (uVar10 < 0x25) {\n        iVar12 = *param_2;\n        piVar4 = param_2;\n        piVar8 = piVar2;\n        if (0x13 < uVar10) {\n          *piVar2 = iVar12;\n          piVar2[1] = param_2[1];\n          if (uVar10 < 0x1c) {\n            iVar12 = param_2[2];\n            piVar4 = param_2 + 2;\n            piVar8 = piVar2 + 2;\n          }\n          else {\n            piVar2[2] = param_2[2];\n            piVar2[3] = param_2[3];\n            if (uVar10 == 0x24) {\n              piVar2[4] = param_2[4];\n              piVar2[5] = param_2[5];\n              iVar12 = param_2[6];\n              piVar4 = param_2 + 6;\n              piVar8 = piVar2 + 6;\n            }\n            else {\n              iVar12 = param_2[4];\n              piVar4 = param_2 + 4;\n              piVar8 = piVar2 + 4;\n            }\n          }\n        }\n        *piVar8 = iVar12;\n        piVar8[1] = piVar4[1];\n        piVar8[2] = piVar4[2];\n      }\n      else {\n        reverse_copy_08009a18(piVar2,param_2);\n      }\n      FUNC_080088ec(param_1,param_2);\n    }\n    do_nothing_with_pointer_080090b4(param_1);\n    param_2 = piVar2;\n  }\n  else {\nLAB_08009c00:\n    if (uVar11 - uVar9 < 0x10) {\n      piVar4[1] = piVar4[1] & 1U | uVar11;\n      *(uint *)(iVar12 + 4) = *(uint *)(iVar12 + 4) | 1;\n    }\n    else {\n      piVar4[1] = piVar4[1] & 1U | uVar9;\n      *(uint *)((int)piVar4 + uVar9 + 4) = uVar11 - uVar9 | 1;\n      *(uint *)(iVar12 + 4) = *(uint *)(iVar12 + 4) | 1;\n      FUNC_080088ec(param_1,(int)piVar4 + uVar9 + 8);\n    }\n    do_nothing_with_pointer_080090b4(param_1);\n  }\n  return param_2;\n}\n\n",
            "called": [
                "FUN_080090b4",
                "FUN_08009a18",
                "FUN_080090a8",
                "FUN_08008af8",
                "FUN_080088ec"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009adc",
            "calling": [
                "FUN_080097cc"
            ],
            "imported": false,
            "current_name": "FUNC_08009adc"
        },
        "FUN_08003696": {
            "renaming": {
                "FUN_08003696": "do_nothing_08003696"
            },
            "code": "\nvoid do_nothing_08003696(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003696",
            "calling": [
                "FUN_08003640"
            ],
            "imported": false,
            "current_name": "do_nothing_08003696"
        },
        "FUN_08002640": {
            "renaming": {
                "FUN_08002640": "check_and_update_flag_08002640",
                "param_1": "ptr_param",
                "param_2": "param_byte",
                "param_3": "param_short",
                "param_4": "param_uint",
                "param_5": "param_int",
                "iVar1": "result"
            },
            "code": "uint32_t check_and_update_flag_08002640(uint32_t **ptr_param, uint8_t param_byte, uint16_t param_short, uint32_t param_uint, int param_int)\n{\n    uint32_t result = 3;\n    **ptr_param |= 0x100;\n    if((~(*ptr_param)[5] & 1) == 0)\n    {\n        result = 0;\n        (*ptr_param)[4] = param_byte & 0xFE;\n        if(check_value(ptr_param, DAT_080027F0, param_uint, param_int) == 0)\n        {\n            if(check_and_update_flag_08002640(ptr_param, param_uint, param_int, (*ptr_param)[6]) == 0)\n            {\n                if(param_short == 1)\n                {\n                    (*ptr_param)[4] = (uint32_t)param_short & 0xFF;\n                    result = 0;\n                }\n                else\n                {\n                    (*ptr_param)[4] = (uint32_t)(param_short >> 8) & 0xFF;\n                    if(check_and_update_flag_08002640(ptr_param, param_uint, param_int) != 0)\n                    {\n                        if(ptr_param[16] == (uint32_t *)4)\n                        {\n                            **ptr_param |= 0x200;\n                            return 1;\n                        }\n                        return 3;\n                    }\n                    (*ptr_param)[4] = (uint32_t)param_short & 0xFF;\n                    result = 0;\n                }\n            }\n            else if(ptr_param[16] == (uint32_t *)4)\n            {\n                **ptr_param |= 0x200;\n                result = 1;\n            }\n            else\n            {\n                result = 3;\n            }\n        }\n        else if(ptr_param[16] == (uint32_t *)4)\n        {\n            result = 1;\n        }\n        else\n        {\n            result = 3;\n        }\n    }\n    else if(param_uint == 0xFFFFFFFF || (param_uint != 0 && (get_pointer_value() - param_int) <= param_uint))\n    {\n        ptr_param[12] = (uint32_t *)0;\n        *(uint8_t *)((int)ptr_param + 0x3D) = 0x20;\n        *(uint8_t *)((int)ptr_param + 0x3E) = 0;\n        *(uint32_t *)(ptr_param + 15) = 0;\n        result = 3;\n    }\n    return result;\n}",
            "called": [
                "FUN_080015a0",
                "FUN_08002bb4",
                "FUN_08002ad8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002640",
            "calling": [
                "FUN_08001ccc"
            ],
            "imported": false,
            "current_name": "check_and_update_flag_08002640"
        },
        "FUN_080008fc": {
            "renaming": {
                "FUN_080008fc": "check_if_params_match_080008fc",
                "param_1": "val1",
                "param_2": "val2",
                "param_3": "val3",
                "param_4": "val4",
                "uVar1": "xor_result",
                "bVar2": "is_val2_and_val4_equal",
                "bVar3": "is_val4_less_than_or_equal_to_val2",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint check_if_params_match_080008fc(uint val1,uint val2,uint val3,uint val4)\n{\n  uint result;\n  bool is_val1_and_val2_zero = (val1 | val2 << 1) == 0;\n  bool is_val3_and_val4_zero = (val3 | val4 << 1) == 0;\n  bool are_val2_and_val4_equal = val2 == val4;\n  bool are_val1_and_val3_equal = val1 == val3;\n  bool is_val2_xor_val4_zero = (val2 ^ val4) == 0;\n  bool is_val4_less_than_or_equal_to_val2 = val4 <= val2;\n  bool is_val3_less_than_or_equal_to_val1 = val3 <= val1;\n  if (((int)(val2 << 1) >> 0x15 == -1 || (int)(val4 << 1) >> 0x15 == -1) && (((int)(val2 << 1) >> 0x15 == -1 && ((val1 | val2 << 0xc) != 0)) || (((int)(val4 << 1) >> 0x15 == -1 && ((val3 | val4 << 0xc) != 0))))){\n    result = 1;\n  }\n  else{\n    if (!is_val1_and_val2_zero || !is_val3_and_val4_zero){\n      if (!are_val2_and_val4_equal){\n        if (!are_val1_and_val3_equal){\n          if (!is_val2_xor_val4_zero){\n            if (-1 < (int)(val2 ^ val4)){\n              are_val2_and_val4_equal = true;\n            }\n            if (-1 < (int)(val2 ^ val4) && val4 <= val2){\n              is_val4_less_than_or_equal_to_val2 = true;\n            }\n            if (are_val2_and_val4_equal){\n              if (is_val3_less_than_or_equal_to_val1){\n                result = 1;\n              }\n              else{\n                result = ~((int)val4 >> 0x1f) | 1;\n              }\n            }\n            else{\n              result = ~((int)val4 >> 0x1f) | 1;\n            }\n          }\n          else{\n            if (is_val4_less_than_or_equal_to_val2){\n              if (is_val3_less_than_or_equal_to_val1){\n                result = 1;\n              }\n              else{\n                result = ~((int)val4 >> 0x1f) | 1;\n              }\n            }\n            else{\n              result = ~((int)val4 >> 0x1f) | 1;\n            }\n          }\n        }\n        else{\n          if (is_val4_less_than_or_equal_to_val2){\n            result = 1;\n          }\n          else{\n            result = ~((int)val4 >> 0x1f) | 1;\n          }\n        }\n      }\n      else{\n        if (is_val3_less_than_or_equal_to_val1){\n          result = 1;\n        }\n        else{\n          result = ~((int)val4 >> 0x1f) | 1;\n        }\n      }\n    }\n    else{\n      result = 0;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008fc",
            "calling": [
                "FUN_08000988"
            ],
            "imported": false,
            "current_name": "check_if_params_match_080008fc"
        },
        "FUN_08000988": {
            "renaming": {
                "FUN_08000988": "check_params_and_return_08000988_08000988",
                "param_1": "input_param"
            },
            "code": "undefined4 check_params_and_return_08000988_08000988(undefined4 input_param)\n{\n    check_if_params_match_080008fc();\n    return input_param;\n}",
            "called": [
                "FUN_080008fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000988",
            "calling": [
                "FUN_08000978",
                "FUN_080009c0",
                "FUN_08000998",
                "FUN_080009ac"
            ],
            "imported": false,
            "current_name": "check_params_and_return_08000988_08000988"
        },
        "FUN_08001714": {
            "renaming": {
                "FUN_08001714": "update_data_08001714",
                "param_1": "data_ptr"
            },
            "code": "void update_data_08001714(undefined4 data_ptr){\n  update_data_08001714_080015b4(data_ptr);\n  return;\n}",
            "called": [
                "FUN_080015b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001714",
            "calling": [
                "FUN_080014f0"
            ],
            "imported": false,
            "current_name": "update_data_08001714"
        },
        "FUN_08005dfc": {
            "renaming": {
                "FUN_08005dfc": "process_string_08005dfc",
                "param_1": "string_ptr",
                "local_80": "string_end_ptr",
                "local_78": "max_string_length",
                "uStack_74": "unused_variable",
                "local_70": "string_current_ptr",
                "local_6c": "max_string_length",
                "uStack_8": "param_3",
                "uStack_4": "param_4"
            },
            "code": "void process_string_08005dfc(undefined *string_ptr, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined *string_end_ptr [2];\n  undefined4 max_string_length;\n  undefined4 uStack_74;\n  undefined *string_current_ptr;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  max_string_length = 0x7fffffff;\n  string_end_ptr[0] = string_ptr;\n  string_current_ptr = string_ptr;\n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  FUNC_08005e9c(*(undefined4 *)PTR_PTR_DAT_08005e38,string_end_ptr,param_2,&uStack_8);\n  *string_end_ptr[0] = 0;\n  return;\n}\n",
            "called": [
                "FUN_08005e9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005dfc",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "process_string_08005dfc"
        },
        "FUN_080078c0": {
            "renaming": {
                "FUN_080078c0": "divide_arrays_080078c0",
                "param_1": "array1_ptr",
                "param_2": "array2_ptr",
                "uVar1": "product",
                "puVar2": "array1",
                "iVar3": "carry",
                "iVar4": "array_size",
                "iVar5": "i",
                "uVar6": "quotient",
                "puVar7": "array2",
                "puVar8": "array1",
                "puVar9": "end_of_array2",
                "uVar10": "temp",
                "puVar11": "current_array2",
                "puVar12": "next_array2",
                "compare_arrays_080094f8": "compare_arrays"
            },
            "code": "uint divide_arrays_080078c0(int array1_ptr, int array2_ptr)\n{\n  uint quotient;\n  uint *array1 = (uint *)(array1_ptr + 0x14);\n  uint *array2 = (uint *)(array2_ptr + 0x14);\n  int array_size = *(int *)(array2_ptr + 0x10);\n  int i = array_size - 1;\n  if (*(int *)(array1_ptr + 0x10) < array_size) {\n    return 0;\n  }\n  uint divisor = array2[i] + 1;\n  quotient = array1[i] / divisor;\n  if (quotient != 0) {\n    uint carry = 0;\n    int j = 0;\n    do {\n      uint product = quotient * (array2[j] & 0xffff) + carry;\n      uint sum = carry - (product & 0xffff) + (array1[j] & 0xffff);\n      carry = (array1[j] >> 0x10) - (product >> 0x10) + (sum >> 0x10);\n      array1[j] = sum & 0xffff | carry << 0x10;\n      carry >>= 0x10;\n      j++;\n    } while (j <= i);\n    if (array1[i] == 0) {\n      if ((array1 < array1 + array_size - 2) && (array1[array_size - 2] == 0)) {\n        int k = array_size - 3;\n        do {\n          i--;\n          if (array1 <= array1) break;\n          uint value = array1[k];\n          k--;\n        } while (value == 0);\n      }\n      *(int *)(array1_ptr + 0x10) = i;\n    }\n  }\n  int cmp = compare_arrays_080094f8();\n  if (cmp >= 0) {\n    quotient++;\n    uint carry = 0;\n    int j = 0;\n    do {\n      uint diff = carry + (array1[j] & 0xffff) - (array2[j] & 0xffff);\n      carry = (array1[j] >> 0x10) - (array2[j] >> 0x10) + (diff >> 0x10);\n      array1[j] = diff & 0xffff | carry << 0x10;\n      carry >>= 0x10;\n      j++;\n    } while (j <= i);\n    if (array1[i] == 0) {\n      if ((array1 < array1 + i - 1) && (array1[i - 1] == 0)) {\n        int k = i - 2;\n        do {\n          i--;\n          if (array1 <= array1) break;\n          uint value = array1[k];\n          k--;\n        } while (value == 0);\n      }\n      *(int *)(array1_ptr + 0x10) = i;\n    }\n  }\n  return quotient;\n}",
            "called": [
                "FUN_080094f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078c0",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "divide_arrays_080078c0"
        },
        "thunk_FUN_08005838": {
            "renaming": {
                "thunk_FUN_08005838": "calculate_result_thunk_08005838",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "iVar1": "difference",
                "uVar2": "result_upper",
                "uVar3": "result_lower",
                "uVar4": "abs_fourth_param",
                "uVar5": "abs_second_param",
                "uVar6": "concatenated_result",
                "abs_third_param": "abs_third_param",
                "abs_first_param": "abs_first_param",
                "abs_fourth_param": "abs_fourth_param",
                "abs_second_param": "abs_second_param",
                "abs_difference": "abs_difference",
                "abs_fourth_param_or_third_param": "abs_fourth_param_or_third_param",
                "abs_second_param_or_first_param": "abs_second_param_or_first_param",
                "abs_difference_or_fourth_param_or_third_param_or_second_param_or_first_param": "abs_difference_or_fourth_param_or_third_param_or_second_param_or_first_param",
                "upper_part_of_result": "upper_part_of_result"
            },
            "code": "uint calculate_result_thunk_08005838(uint first_param, uint second_param, uint third_param, uint fourth_param)\n{\n  int difference;\n  undefined4 result_upper;\n  uint result_lower;\n  uint abs_third_param;\n  uint abs_first_param;\n  uint abs_fourth_param;\n  uint abs_second_param;\n  uint abs_difference;\n  uint abs_fourth_param_or_third_param;\n  uint abs_second_param_or_first_param;\n  uint abs_difference_or_fourth_param_or_third_param_or_second_param_or_first_param;\n  uint upper_part_of_result;\n  undefined8 concatenated_result;\n  \n  concatenated_result = CONCAT44(DAT_080059bc, DAT_080059b8);\n  abs_third_param = third_param & 0x7fffffff;\n  abs_first_param = first_param & 0x7fffffff;\n  abs_fourth_param = fourth_param & 0x7fffffff;\n  abs_second_param = second_param & 0x7fffffff;\n  abs_fourth_param_or_third_param = abs_fourth_param | (-third_param | third_param) >> 0x1f;\n  abs_second_param_or_first_param = abs_second_param | (-first_param | first_param) >> 0x1f;\n  if (DAT_080059e8 < abs_fourth_param_or_third_param || DAT_080059e8 < abs_second_param_or_first_param) {\n    result_lower = FUNC_0800015c(third_param, fourth_param, first_param, second_param);\n    return result_lower;\n  }\n  if ((fourth_param + 0xc0100000 | third_param) == 0) {\n    result_lower = FUNC_080059f0();\n    return result_lower;\n  }\n  abs_difference = abs_second_param - abs_fourth_param;\n  if (abs_first_param | abs_third_param) {\n    if (abs_fourth_param_or_third_param | abs_second_param_or_first_param) {\n      if (abs_fourth_param == DAT_080059e8) {\n        if (abs_second_param == abs_fourth_param) {\n          if ((int)fourth_param >> 0x1f & 2U) {\n            return DAT_080059e0;\n          }\n          if ((int)fourth_param >> 0x1f & 3U) {\n            return DAT_080059d8;\n          }\n          if ((int)fourth_param >> 0x1f & 1U) {\n            return DAT_080059d0;\n          }\n          return DAT_080059c8;\n        }\n        if ((int)fourth_param >> 0x1f & 2U) {\n          return DAT_080059b0;\n        }\n        if ((int)fourth_param >> 0x1f & 3U) {\n          return DAT_080059a0;\n        }\n        if ((int)fourth_param >> 0x1f & 1U) {\n          return 0;\n        }\n        return 0;\n      }\n      if (abs_second_param != DAT_080059e8) {\n        difference = (int)(abs_second_param - abs_fourth_param) >> 0x14;\n        if (difference < 0x3d) {\n          if ((int)fourth_param < 0 && (difference + 0x3c < 0 != SCARRY4(difference, 0x3c))) {\n            concatenated_result = 0;\n          }\n          else {\n            FUNC_0800071c(first_param, second_param, third_param, fourth_param, fourth_param);\n            do_nothing_08005d0c();\n            concatenated_result = FUNC_080059f0();\n          }\n        }\n        result_upper = (undefined4)((ulonglong)concatenated_result >> 0x20);\n        result_lower = (uint)concatenated_result;\n        if ((int)fourth_param >> 0x1f & 1U) {\n          return result_lower;\n        }\n        if ((int)fourth_param >> 0x1f & 2U) {\n          upper_part_of_result = FUNC_08000158(result_lower, result_upper, DAT_080059a8, DAT_080059ac);\n          result_lower = FUNC_08000158(DAT_080059b0, DAT_080059b4, (int)upper_part_of_result, (int)((ulonglong)upper_part_of_result >> 0x20));\n          return result_lower;\n        }\n        if ((int)fourth_param >> 0x1f & 0U) {\n          return result_lower;\n        }\n        upper_part_of_result = FUNC_08000158(result_lower, result_upper, DAT_080059a8, DAT_080059ac);\n        result_lower = FUNC_08000158((int)upper_part_of_result, (int)((ulonglong)upper_part_of_result >> 0x20), DAT_080059b0, DAT_080059b4);\n        return result_lower;\n      }\n    }\n    abs_difference_or_fourth_param_or_third_param_or_second_param_or_first_param = abs_difference | abs_fourth_param_or_third_param | abs_second_param_or_first_param;\n    result_lower = DAT_080059c0;\n    if (-1 < (int)second_param) {\n      result_lower = DAT_080059b8;\n    }\n  }\n  else {\n    if ((int)fourth_param >> 0x1f & 2U) {\n      return DAT_080059b0;\n    }\n    result_lower = DAT_080059a0;\n    if ((int)fourth_param >> 0x1f & 3U) {\n      return result_lower;\n    }\n    if ((int)fourth_param >> 0x1f & 1U) {\n      return 0;\n    }\n    return 0;\n  }\n  return result_lower;\n}",
            "called": [
                "FUN_08005838"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005834",
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "imported": false,
            "current_name": "calculate_result_thunk_08005838"
        },
        "FUN_080003f4": {
            "renaming": {
                "FUN_080003f4": "convert_to_64bit_080003f4",
                "param_1": "input",
                "uVar1": "carry",
                "uVar2": "abs_input",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeros",
                "uVar5": "shift_amount_plus_12",
                "uVar6": "sign_bit",
                "in_r12": "unused",
                "bVar7": "is_negative_shift_amount",
                "bVar8": "is_zero_shift_amount",
                "bVar9": "is_overflow_shift_amount"
            },
            "code": "unsigned long long convert_to_64bit_080003f4(uint32_t input)\n{\n  uint32_t abs_input = input;\n  uint32_t sign_bit = input & 0x80000000;\n  if (input == 0) {\n    return 0;\n  }\n  if ((int)sign_bit < 0) {\n    abs_input = -input;\n  }\n  uint32_t leading_zeros = count_leading_zeroes(abs_input);\n  uint32_t shift_amount = leading_zeros + 21;\n  if (shift_amount < 32) {\n    uint32_t carry = shift_amount + 12;\n    if (carry > 32 || (leading_zeros + 22 == carry && carry > 32)) {\n      carry = 32;\n    }\n    uint32_t high = abs_input << (shift_amount & 0xff);\n    uint32_t low = abs_input >> (carry - shift_amount & 0xff);\n    return ((unsigned long long)sign_bit << 32) | ((unsigned long long)high | low);\n  }\n  else {\n    uint32_t shift_amount = ~(leading_zeros + 21);\n    if (shift_amount > 30) {\n      return ((unsigned long long)input) & 0x80000000ffffffff;\n    }\n    int carry = shift_amount - 19;\n    if (carry == 0 || (carry < 0) != (shift_amount - 31 > 0)) {\n      shift_amount++;\n      return ((unsigned long long)sign_bit << 32) | ((unsigned long long)abs_input >> shift_amount | (uint64_t)abs_input << (32 - shift_amount));\n    }\n    return ((unsigned long long)input) & 0x80000000ffffffff;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003f4",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "convert_to_64bit_080003f4"
        },
        "FUN_080079e8": {
            "renaming": {
                "FUN_080079e8": "FUNC_080079e8"
            },
            "code": "\nchar * FUNC_080079e8(int param_1,undefined4 param_2,uint param_3,uint param_4,uint param_5,\n                   uint param_6,int *param_7,uint *param_8,char **param_9)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined4 uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  int iVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  int iVar13;\n  char *pcVar14;\n  char *pcVar15;\n  undefined4 *puVar16;\n  undefined4 uVar17;\n  char *pcVar18;\n  int iVar19;\n  bool bVar20;\n  undefined8 uVar21;\n  undefined8 uVar22;\n  undefined8 uVar23;\n  uint local_80;\n  uint local_7c;\n  uint local_74;\n  int local_70;\n  uint local_68;\n  uint local_64;\n  int local_60;\n  int local_5c;\n  uint local_58;\n  int local_54;\n  uint local_48;\n  uint uStack_44;\n  uint local_38;\n  uint local_34;\n  int local_30;\n  int local_2c [2];\n  \n  iVar9 = *(int *)(param_1 + 0x40);\n  if (iVar9 != 0) {\n    uVar12 = *(uint *)(param_1 + 0x44);\n    *(uint *)(iVar9 + 4) = uVar12;\n    *(int *)(iVar9 + 8) = 1 << (uVar12 & 0xff);\n    retrieve_data_0800910c(param_1,iVar9);\n    *(undefined4 *)(param_1 + 0x40) = 0;\n  }\n  bVar20 = (int)param_4 < 0;\n  uVar12 = param_4;\n  if (bVar20) {\n    uVar12 = param_4 & 0x7fffffff;\n  }\n  *param_8 = (uint)bVar20;\n  local_7c = param_4;\n  if (bVar20) {\n    local_7c = uVar12;\n  }\n  uVar4 = local_7c;\n  if ((DAT_08007bf8 & ~uVar12) == 0) {\n    *param_7 = 9999;\n    if ((param_3 == 0) && ((uVar12 & 0xfffff) == 0)) {\n      if (param_9 == (char **)0x0) {\n        return PTR_s_Infinity_08007c08;\n      }\n      pcVar15 = PTR_s_Infinity_08007c08 + 8;\n      pcVar18 = PTR_s_Infinity_08007c08;\n    }\n    else {\n      if (param_9 == (char **)0x0) {\n        return PTR_DAT_08007c0c;\n      }\n      pcVar15 = PTR_DAT_08007c0c + 3;\n      pcVar18 = PTR_DAT_08007c0c;\n    }\n    *param_9 = pcVar15;\n    return pcVar18;\n  }\n  uVar21 = is_input_valid_08000998(param_3,local_7c,0,0);\n  local_60 = (int)uVar21;\n  if (local_60 != 0) {\n    *param_7 = 1;\n    if (param_9 != (char **)0x0) {\n      pcVar18 = PTR_DAT_08007bfc + -1;\n      *param_9 = PTR_DAT_08007bfc;\n      return pcVar18;\n    }\n    return PTR_DAT_08007c10;\n  }\n  uVar3 = calculate_values_08009630(param_1,(int)((ulonglong)uVar21 >> 0x20),param_3,local_7c,local_2c,&local_30)\n  ;\n  iVar9 = local_30;\n  if (uVar12 >> 0x14 == 0) {\n    iVar13 = local_2c[0] + local_30;\n    iVar10 = iVar13 + 0x432;\n    if (iVar10 < 0x21) {\n      uVar12 = param_3 << (0x20U - iVar10 & 0xff);\n    }\n    else {\n      uVar12 = param_3 >> (iVar13 + 0x412U & 0xff) | uVar12 << (0x40U - iVar10 & 0xff);\n    }\n    uVar21 = calculate_shifted_value_080003d4(uVar12);\n    iVar13 = iVar13 + -1;\n    local_60 = 1;\n    uVar5 = (int)((ulonglong)uVar21 >> 0x20) + 0xfe100000;\n    uVar12 = (uint)uVar21;\n  }\n  else {\n    iVar13 = (uVar12 >> 0x14) - 0x3ff;\n    uVar5 = local_7c & 0xfffff | 0x3ff00000;\n    uVar12 = param_3;\n  }\n  uVar21 = FUNC_08000158(uVar12,uVar5,0,DAT_08007c00);\n  uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),DAT_08007be0,DAT_08007be4);\n  uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),DAT_08007be8,DAT_08007bec);\n  uVar22 = convert_to_64bit_080003f4(iVar13);\n  uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),DAT_08007bf0,DAT_08007bf4);\n  uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar22,\n                        (int)((ulonglong)uVar22 >> 0x20));\n  uVar8 = (undefined4)((ulonglong)uVar21 >> 0x20);\n  local_74 = convert_uint_to_signed_int_0800119c();\n  iVar10 = is_end_of_string_080009ac((int)uVar21,uVar8,0,0);\n  if (iVar10 != 0) {\n    uVar22 = convert_to_64bit_080003f4(local_74);\n    iVar10 = is_input_valid_08000998((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,uVar8);\n    if (iVar10 == 0) {\n      local_74 = local_74 - 1;\n    }\n  }\n  if (local_74 < 0x17) {\n    local_54 = is_end_of_string_080009e8(*(undefined4 *)(PTR_DAT_08007c04 + local_74 * 8),\n                            *(undefined4 *)((int)(PTR_DAT_08007c04 + local_74 * 8) + 4),param_3,\n                            local_7c);\n    if (local_54 != 0) {\n      local_74 = local_74 - 1;\n      local_54 = 0;\n    }\n  }\n  else {\n    local_54 = 1;\n  }\n  iVar10 = (iVar9 - iVar13) + -1;\n  if (iVar10 < 0) {\n    local_70 = 1 - (iVar9 - iVar13);\n    iVar10 = 0;\n  }\n  else {\n    local_70 = 0;\n  }\n  if ((int)local_74 < 0) {\n    local_58 = 0;\n    local_70 = local_70 - local_74;\n    local_5c = -local_74;\n  }\n  else {\n    iVar10 = iVar10 + local_74;\n    local_58 = local_74;\n    local_5c = 0;\n  }\n  if (9 < param_5) {\n    local_38 = 0xffffffff;\n    bVar20 = true;\n    local_68 = 0xffffffff;\n    local_64 = 1;\n    param_5 = 0;\n    param_6 = 0;\n    goto LAB_08007c24;\n  }\n  bVar20 = (int)param_5 < 6;\n  if (!bVar20) {\n    param_5 = param_5 - 4;\n  }\n  switch(param_5) {\n  case 2:\n    local_64 = 0;\n    break;\n  case 3:\n    local_64 = 0;\n    goto LAB_08008300;\n  case 4:\n    local_64 = 1;\n    break;\n  case 5:\n    local_64 = 1;\nLAB_08008300:\n    local_38 = local_74 + param_6;\n    local_68 = local_38 + 1;\n    uVar12 = local_68;\n    if ((int)local_68 < 1) {\n      uVar12 = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    pcVar18 = (char *)allocate_and_initialize_memory_080090c0(param_1,0);\n    local_38 = 0xffffffff;\n    local_68 = 0xffffffff;\n    param_6 = 0;\n    *(char **)(param_1 + 0x40) = pcVar18;\n    local_64 = 1;\n    goto LAB_08007e36;\n  }\n  if ((int)param_6 < 1) {\n    local_38 = 1;\n    param_6 = 1;\n    local_68 = 1;\nLAB_08007c24:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    uVar5 = local_38;\n  }\n  else {\n    local_38 = param_6;\n    local_68 = param_6;\n    uVar12 = param_6;\nLAB_08008314:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    uVar5 = local_68;\n    if (0x17 < (int)uVar12) {\n      iVar13 = 4;\n      iVar9 = 1;\n      do {\n        iVar19 = iVar9;\n        iVar13 = iVar13 * 2;\n        iVar9 = iVar19 + 1;\n      } while (iVar13 + 0x14U <= uVar12);\n      *(int *)(param_1 + 0x44) = iVar19;\n    }\n  }\n  pcVar18 = (char *)allocate_and_initialize_memory_080090c0(param_1);\n  *(char **)(param_1 + 0x40) = pcVar18;\n  if ((uVar5 < 0xf) && (bVar20)) {\n    if ((int)local_74 < 1) {\n      if (local_74 == 0) {\n        iVar9 = 2;\n        local_80 = param_3;\n      }\n      else {\n        uVar21 = FUNC_080004c8(param_3,local_7c,\n                              *(undefined4 *)(PTR_DAT_080086cc + (-local_74 & 0xf) * 8),\n                              *(undefined4 *)((int)(PTR_DAT_080086cc + (-local_74 & 0xf) * 8) + 4));\n        local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n        local_80 = (uint)uVar21;\n        iVar13 = (int)-local_74 >> 4;\n        if (iVar13 == 0) {\n          iVar9 = 2;\n        }\n        else {\n          bVar20 = false;\n          iVar9 = 2;\n          puVar16 = (undefined4 *)PTR_DAT_080086d0;\n          do {\n            if (iVar13 << 0x1f < 0) {\n              uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),*puVar16,puVar16[1]\n                                   );\n              bVar20 = true;\n              iVar9 = iVar9 + 1;\n            }\n            iVar13 = iVar13 >> 1;\n            puVar16 = puVar16 + 2;\n          } while (iVar13 != 0);\n          if (bVar20) {\n            local_80 = (uint)uVar21;\n            local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      uVar12 = (int)local_74 >> 4;\n      uVar21 = *(undefined8 *)(PTR_DAT_08007ec4 + (local_74 & 0xf) * 8);\n      if ((int)(uVar12 << 0x1b) < 0) {\n        uVar22 = FUNC_0800071c(param_3,local_7c,*(undefined4 *)(PTR_DAT_08007ec8 + 0x20),\n                              *(undefined4 *)(PTR_DAT_08007ec8 + 0x24));\n        uStack_44 = (uint)((ulonglong)uVar22 >> 0x20);\n        local_48 = (uint)uVar22;\n        iVar9 = 3;\n        uVar12 = uVar12 & 0xf;\n        puVar16 = (undefined4 *)PTR_DAT_08007ec8;\n      }\n      else {\n        iVar9 = 2;\n        uStack_44 = local_7c;\n        puVar16 = (undefined4 *)PTR_DAT_08007ec8;\n        local_48 = param_3;\n      }\n      while( true ) {\n        uVar8 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        if (uVar12 == 0) break;\n        if ((int)(uVar12 << 0x1f) < 0) {\n          uVar21 = FUNC_080004c8((int)uVar21,uVar8,*puVar16,puVar16[1]);\n          iVar9 = iVar9 + 1;\n        }\n        uVar12 = (int)uVar12 >> 1;\n        puVar16 = puVar16 + 2;\n      }\n      uVar21 = FUNC_0800071c(local_48,uStack_44,(int)uVar21,uVar8);\n      local_80 = (uint)uVar21;\n      local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n    }\n    uVar21 = CONCAT44(local_7c,local_80);\n    if ((local_54 != 0) && (iVar13 = is_end_of_string_080009ac(local_80,local_7c,0,DAT_08007ecc), iVar13 != 0)) {\n      if (local_68 == 0) {\n        uVar21 = convert_to_64bit_080003f4(iVar9);\n        uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),local_80,local_7c);\n        uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080086d4);\n        uVar8 = (undefined4)uVar21;\n        iVar9 = (int)((ulonglong)uVar21 >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)local_38) {\n        uVar21 = FUNC_080004c8(local_80,local_7c,0,DAT_0800880c);\n        uVar22 = convert_to_64bit_080003f4(iVar9 + 1);\n        uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,\n                              (int)((ulonglong)uVar21 >> 0x20));\n        uVar22 = FUNC_0800015c((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08008810);\n        uVar8 = (undefined4)uVar22;\n        local_48 = local_38;\n        local_34 = local_74 - 1;\n        iVar9 = (int)((ulonglong)uVar22 >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    uVar22 = convert_to_64bit_080003f4(iVar9);\n    uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),local_80,local_7c);\n    uVar22 = FUNC_0800015c((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08007ed0);\n    uVar8 = (undefined4)uVar22;\n    iVar9 = (int)((ulonglong)uVar22 >> 0x20) + -0x3400000;\n    if (local_68 != 0) {\n      local_34 = local_74;\n      local_48 = local_68;\nLAB_08007cfa:\n      local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n      local_80 = (uint)uVar21;\n      cVar1 = convert_uint_to_signed_int_0800119c(local_80,local_7c);\n      cVar1 = cVar1 + '0';\n      uVar11 = *(undefined4 *)(PTR_DAT_08007ec4 + local_48 * 8 + -8);\n      uVar7 = *(undefined4 *)(PTR_DAT_08007ec4 + local_48 * 8 + -4);\n      uVar21 = convert_to_64bit_080003f4();\n      uVar21 = FUNC_08000158(local_80,local_7c,(int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n      uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n      pcVar15 = pcVar18 + 1;\n      if (local_64 == 0) {\n        uVar22 = FUNC_080004c8(uVar8,iVar9,uVar11,uVar7);\n        uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n        *pcVar18 = cVar1;\n        if (local_48 != 1) {\n          pcVar14 = pcVar15;\n          do {\n            uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080086d8);\n            cVar1 = convert_uint_to_signed_int_0800119c();\n            uVar23 = convert_to_64bit_080003f4();\n            uVar21 = FUNC_08000158((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar23,\n                                  (int)((ulonglong)uVar23 >> 0x20));\n            pcVar15 = pcVar14 + 1;\n            *pcVar14 = cVar1 + '0';\n            pcVar14 = pcVar15;\n          } while (pcVar15 != pcVar18 + local_48);\n        }\n        uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        uVar23 = FUNC_0800015c((int)uVar22,uVar8,0,DAT_080086dc);\n        iVar9 = is_end_of_string_080009ac((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),(int)uVar21,uVar11);\n        if (iVar9 == 0) {\n          uVar22 = FUNC_08000158(0,DAT_08008814,(int)uVar22,uVar8);\n          iVar9 = is_end_of_string_080009e8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,uVar11);\n          pcVar14 = pcVar15;\n          if (iVar9 == 0) goto LAB_08007e36;\n          do {\n            pcVar15 = pcVar14;\n            pcVar14 = pcVar15 + -1;\n          } while (pcVar15[-1] == '0');\n          goto LAB_08008784;\n        }\n        local_74 = local_34;\n        cVar1 = pcVar15[-1];\n      }\n      else {\n        uVar22 = FUNC_0800071c(0,DAT_08007ed4,uVar11,uVar7);\n        uVar22 = FUNC_08000158((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),uVar8,iVar9);\n        uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n        *pcVar18 = cVar1;\n        iVar9 = is_end_of_string_080009e8((int)uVar22,uVar8,(int)uVar21,uVar17);\n        if (iVar9 != 0) {\nLAB_08008784:\n          local_74 = local_34;\n          goto LAB_08008294;\n        }\n        uVar23 = FUNC_08000158(0,DAT_08007ecc,(int)uVar21,uVar17);\n        iVar9 = is_end_of_string_080009e8((int)uVar22,uVar8,(int)uVar23,(int)((ulonglong)uVar23 >> 0x20));\n        if (iVar9 == 0) {\n          if (local_48 != 1) {\n            pcVar14 = pcVar15;\n            do {\n              uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08007ed8);\n              uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n              uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_08007ed8);\n              cVar1 = convert_uint_to_signed_int_0800119c();\n              uVar23 = convert_to_64bit_080003f4();\n              uVar21 = FUNC_08000158((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar23,\n                                    (int)((ulonglong)uVar23 >> 0x20));\n              uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n              cVar1 = cVar1 + '0';\n              pcVar15 = pcVar14 + 1;\n              *pcVar14 = cVar1;\n              iVar9 = is_end_of_string_080009ac((int)uVar21,uVar11,(int)uVar22,uVar8);\n              if (iVar9 != 0) {\n                local_74 = local_34;\n                goto LAB_08008294;\n              }\n              uVar23 = FUNC_08000158(0,DAT_08007ecc,(int)uVar21,uVar11);\n              iVar9 = is_end_of_string_080009ac((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),(int)uVar22,uVar8);\n              if (iVar9 != 0) goto LAB_08008798;\n              pcVar14 = pcVar15;\n            } while (pcVar15 != pcVar18 + local_48);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        local_74 = local_34;\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    uVar21 = FUNC_08000158(local_80,local_7c,0,DAT_080086c8);\n    uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n    uVar12 = is_end_of_string_080009e8((int)uVar21,uVar11,uVar8,iVar9);\n    if (uVar12 == 0) {\n      iVar9 = is_end_of_string_080009ac((int)uVar21,uVar11,uVar8,iVar9 + -0x80000000);\n      uVar5 = uVar12;\n      pcVar15 = pcVar18;\n      if (iVar9 == 0) goto LAB_08007e36;\n      goto LAB_080084f0;\n    }\n    local_68 = 0;\n    uVar12 = 0;\nLAB_08008406:\n    *pcVar18 = '1';\n    local_74 = local_74 + 1;\n    pcVar15 = pcVar18 + 1;\n    uVar5 = local_68;\nLAB_08008416:\n    retrieve_data_0800910c(param_1,uVar5);\n    if (uVar12 == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    pcVar15 = pcVar18;\n    if ((-1 < local_2c[0]) && ((int)local_74 < 0xf)) {\n      uVar8 = *(undefined4 *)(PTR_DAT_08007ec4 + local_74 * 8);\n      uVar11 = *(undefined4 *)((int)(PTR_DAT_08007ec4 + local_74 * 8) + 4);\n      if ((-1 < (int)param_6) || (0 < (int)local_68)) {\n        FUNC_0800071c(param_3,uVar4,uVar8,uVar11);\n        bVar2 = convert_uint_to_signed_int_0800119c();\n        uVar21 = convert_to_64bit_080003f4();\n        uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),uVar8,uVar11);\n        uVar21 = FUNC_08000158(param_3,uVar4,(int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n        *pcVar18 = bVar2 + 0x30;\n        pcVar15 = pcVar18 + 1;\n        if (local_68 != 1) {\n          uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_08007ed8);\n          iVar9 = is_input_valid_08000998((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,0);\n          while (iVar9 == 0) {\n            uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n            FUNC_0800071c((int)uVar21,uVar17,uVar8,uVar11);\n            bVar2 = convert_uint_to_signed_int_0800119c();\n            uVar22 = convert_to_64bit_080003f4();\n            uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),uVar8,uVar11);\n            uVar21 = FUNC_08000158((int)uVar21,uVar17,(int)uVar22,(int)((ulonglong)uVar22 >> 0x20));\n            pcVar14 = pcVar15 + 1;\n            *pcVar15 = bVar2 + 0x30;\n            pcVar15 = pcVar14;\n            if (local_68 == (int)pcVar14 - (int)pcVar18) goto LAB_08007f3a;\n            uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080081f8);\n            iVar9 = is_input_valid_08000998((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n        uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        iVar9 = is_end_of_string_080009e8((int)uVar21,uVar17,uVar8,uVar11);\n        if ((iVar9 == 0) &&\n           ((iVar9 = is_input_valid_08000998((int)uVar21,uVar17,uVar8,uVar11), iVar9 == 0 || ((bVar2 & 1) == 0)\n            ))) goto LAB_08008294;\n        cVar1 = pcVar15[-1];\nLAB_08007f7c:\n        while (pcVar14 = pcVar15 + -1, cVar1 == '9') {\n          if (pcVar18 == pcVar14) {\n            *pcVar18 = '0';\n            cVar1 = pcVar15[-1];\n            local_74 = local_74 + 1;\n            pcVar14 = pcVar18;\n            break;\n          }\n          cVar1 = pcVar15[-2];\n          pcVar15 = pcVar14;\n        }\n        *pcVar14 = cVar1 + '\\x01';\n        goto LAB_08008294;\n      }\n      if (local_68 == 0) {\n        uVar21 = FUNC_080004c8(uVar8,uVar11,0,DAT_080086c8);\n        iVar9 = check_params_and_return_result_080009d4((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),param_3,uVar4);\n        uVar12 = local_68;\n        uVar5 = local_68;\n        if (iVar9 == 0) goto LAB_08008406;\n      }\n      else {\n        uVar12 = 0;\n        uVar5 = 0;\n      }\nLAB_080084f0:\n      local_74 = ~param_6;\n      pcVar18 = pcVar15;\n      goto LAB_08008416;\n    }\n    iVar9 = local_5c;\n    if (local_64 == 0) {\n      local_60 = local_70;\n      uVar12 = local_64;\n    }\n    else {\n      if ((int)param_5 < 2) {\n        if (local_60 == 0) {\n          local_60 = local_70;\n          local_70 = local_70 + (0x36 - local_30);\n          iVar10 = iVar10 + (0x36 - local_30);\n        }\n        else {\n          local_60 = local_70;\n          local_70 = local_70 + local_2c[0] + 0x433;\n          iVar10 = iVar10 + local_2c[0] + 0x433;\n        }\n      }\n      else {\n        iVar13 = local_68 - 1;\n        if (local_5c < iVar13) {\n          local_58 = local_58 + (iVar13 - local_5c);\n          iVar9 = 0;\n          local_5c = iVar13;\n        }\n        else {\n          iVar9 = local_5c - iVar13;\n        }\n        if ((int)local_68 < 0) {\n          local_60 = local_70 - local_68;\n        }\n        else {\n          iVar10 = iVar10 + local_68;\n          local_60 = local_70;\n          local_70 = local_70 + local_68;\n        }\n      }\n      uVar12 = initialize_memory_with_value_and_flag_08009244(param_1,1);\n    }\n    if ((0 < local_60) && (0 < iVar10)) {\n      iVar13 = local_60;\n      if (iVar10 <= local_60) {\n        iVar13 = iVar10;\n      }\n      iVar10 = iVar10 - iVar13;\n      local_70 = local_70 - iVar13;\n      local_60 = local_60 - iVar13;\n    }\n    if (local_5c != 0) {\n      if (local_64 == 0) {\n        uVar3 = calculate_hash_table_080093a4(param_1,uVar3,local_5c);\n      }\n      else {\n        uVar8 = uVar3;\n        if (iVar9 != 0) {\n          uVar12 = calculate_hash_table_080093a4(param_1,uVar12,iVar9);\n          uVar8 = calculate_hash_08009258(param_1,uVar12,uVar3);\n          retrieve_data_0800910c(param_1,uVar3);\n          uVar3 = uVar8;\n          if (local_5c - iVar9 == 0) goto LAB_08008062;\n        }\n        uVar3 = calculate_hash_table_080093a4(param_1,uVar8,local_5c - iVar9);\n      }\n    }\nLAB_08008062:\n    uVar5 = initialize_memory_with_value_and_flag_08009244(param_1,1);\n    if (local_58 == 0) {\n      if (((int)param_5 < 2) && (param_3 == 0)) {\nLAB_0800835a:\n        if ((uVar4 & 0xfffff) == 0) {\n          uVar4 = uVar4 & 0x7ff00000;\n          if (uVar4 != 0) {\n            iVar10 = iVar10 + 1;\n            local_70 = local_70 + 1;\n            uVar4 = 1;\n          }\n        }\n        else {\n          uVar4 = 0;\n        }\n        bVar20 = local_58 != 0;\n        uVar6 = param_3;\n        local_58 = uVar4;\n        if (bVar20) goto LAB_080082d4;\n      }\n      iVar9 = 1;\n    }\n    else {\n      uVar21 = calculate_hash_table_080093a4(param_1,uVar5);\n      uVar5 = (uint)uVar21;\n      if (((int)param_5 < 2) && (param_3 == 0)) goto LAB_0800835a;\n      local_58 = 0;\n      uVar6 = (uint)((ulonglong)uVar21 >> 0x20);\nLAB_080082d4:\n      iVar9 = count_leading_zeros_080091a4(*(undefined4 *)(uVar5 + *(int *)(uVar5 + 0x10) * 4 + 0x10),uVar6);\n      iVar9 = 0x20 - iVar9;\n    }\n    uVar4 = iVar9 + iVar10 & 0x1f;\n    if (uVar4 == 0) {\n      iVar9 = 0x1c;\nLAB_08008096:\n      iVar10 = iVar10 + iVar9;\n      local_70 = local_70 + iVar9;\n      local_60 = local_60 + iVar9;\n    }\n    else {\n      if (4 < (int)(0x20 - uVar4)) {\n        iVar9 = 0x1c - uVar4;\n        goto LAB_08008096;\n      }\n      if (0x20 - uVar4 != 4) {\n        iVar9 = 0x3c - uVar4;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < local_70) {\n      uVar3 = allocate_and_initialize_08009444(param_1,uVar3,local_70);\n    }\n    if (0 < iVar10) {\n      uVar5 = allocate_and_initialize_08009444(param_1,uVar5,iVar10);\n    }\n    pcVar14 = pcVar18;\n    if ((local_54 != 0) && (iVar9 = compare_arrays_080094f8(uVar3,uVar5), iVar9 < 0)) {\n      local_74 = local_74 - 1;\n      uVar3 = calculate_polynomial_08009120(param_1,uVar3,10,0);\n      if (local_64 == 0) {\n        if ((0 < (int)local_38) || ((int)param_5 < 3)) {\n          local_68 = local_38;\n          goto LAB_0800820a;\n        }\n      }\n      else {\n        uVar12 = calculate_polynomial_08009120(param_1,uVar12,10,0);\n        if ((0 < (int)local_38) || ((int)param_5 < 3)) {\n          local_68 = local_38;\n          goto LAB_080080de;\n        }\n      }\n      local_68 = local_38;\nLAB_080084e8:\n      if (local_68 == 0) {\n        local_68 = calculate_polynomial_08009120(param_1,uVar5,5);\n        iVar9 = compare_arrays_080094f8(uVar3,local_68);\n        uVar5 = local_68;\n        if (0 < iVar9) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)local_68 < 1) && (2 < (int)param_5)) goto LAB_080084e8;\n    if (local_64 == 0) {\nLAB_0800820a:\n      while( true ) {\n        iVar19 = divide_arrays_080078c0(uVar3,uVar5);\n        iVar19 = iVar19 + 0x30;\n        pcVar15 = pcVar14 + 1;\n        *pcVar14 = (char)iVar19;\n        if ((int)local_68 <= (int)pcVar15 - (int)pcVar18) break;\n        uVar3 = calculate_polynomial_08009120(param_1,uVar3,10,0);\n        pcVar14 = pcVar15;\n      }\n      local_80 = 0;\n    }\n    else {\nLAB_080080de:\n      local_80 = uVar12;\n      if (0 < local_60) {\n        local_80 = allocate_and_initialize_08009444(param_1,uVar12,local_60);\n      }\n      uVar12 = local_80;\n      if (local_58 != 0) {\n        iVar9 = allocate_and_initialize_memory_080090c0(param_1,*(undefined4 *)(local_80 + 4));\n        copy_memory_block_08001084(iVar9 + 0xc,local_80 + 0xc,(*(int *)(local_80 + 0x10) + 2) * 4);\n        uVar12 = allocate_and_initialize_08009444(param_1,iVar9,1);\n      }\nLAB_08008108:\n      iVar9 = divide_arrays_080078c0(uVar3,uVar5);\n      iVar13 = compare_arrays_080094f8(uVar3,local_80);\n      iVar10 = compare_and_allocate_memory_08009530(param_1,uVar5,uVar12);\n      iVar19 = iVar9 + 0x30;\n      if (*(int *)(iVar10 + 0xc) == 0) {\n        uVar4 = compare_arrays_080094f8(uVar3);\n        retrieve_data_0800910c(param_1,iVar10);\n        if (((uVar4 != 0) || (param_5 != 0)) || (uVar4 = param_5, (param_3 & 1) != 0))\n        goto LAB_0800815a;\n        if (iVar19 != 0x39) {\n          if (0 < iVar13) {\nLAB_0800874c:\n            iVar19 = iVar9 + 0x31;\n          }\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        pcVar15 = pcVar14 + 1;\n        cVar1 = '9';\n        *pcVar14 = '9';\n        goto LAB_08008268;\n      }\n      retrieve_data_0800910c(param_1,iVar10);\n      uVar4 = 1;\nLAB_0800815a:\n      if ((iVar13 < 0) || (((iVar13 == 0 && (param_5 == 0)) && ((param_3 & 1) == 0)))) {\n        if (0 < (int)uVar4) {\n          uVar3 = allocate_and_initialize_08009444(param_1,uVar3,1);\n          iVar13 = compare_arrays_080094f8(uVar3,uVar5);\n          if ((0 < iVar13) || ((iVar13 == 0 && (iVar9 << 0x1f < 0)))) {\n            if (iVar19 != 0x39) goto LAB_0800874c;\n            goto LAB_08008752;\n          }\n        }\nLAB_080085a4:\n        pcVar15 = pcVar14 + 1;\n        *pcVar14 = (char)iVar19;\n        goto LAB_08008274;\n      }\n      pcVar15 = pcVar14 + 1;\n      if (0 < (int)uVar4) {\n        if (iVar19 == 0x39) goto LAB_08008752;\n        *pcVar14 = (char)iVar9 + '1';\n        goto LAB_08008274;\n      }\n      *pcVar14 = (char)iVar19;\n      if (pcVar18 + (local_68 - 1) != pcVar14) {\n        uVar3 = calculate_polynomial_08009120(param_1,uVar3,10,0);\n        pcVar14 = pcVar15;\n        if (local_80 == uVar12) {\n          local_80 = calculate_polynomial_08009120(param_1,local_80,10,0);\n          uVar12 = local_80;\n        }\n        else {\n          local_80 = calculate_polynomial_08009120(param_1,local_80,10,0);\n          uVar12 = calculate_polynomial_08009120(param_1,uVar12,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    uVar3 = allocate_and_initialize_08009444(param_1,uVar3,1);\n    iVar9 = compare_arrays_080094f8(uVar3,uVar5);\n    cVar1 = pcVar15[-1];\n    if ((0 < iVar9) || ((iVar9 == 0 && (iVar19 << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        pcVar14 = pcVar15 + -1;\n        if (cVar1 != '9') goto code_r0x08008270;\n        if (pcVar18 == pcVar14) {\n          *pcVar18 = '1';\n          local_74 = local_74 + 1;\n          goto LAB_08008274;\n        }\n        cVar1 = pcVar15[-2];\n        pcVar15 = pcVar14;\n      } while( true );\n    }\n    while (cVar1 == '0') {\n      cVar1 = pcVar15[-2];\n      pcVar15 = pcVar15 + -1;\n    }\nLAB_08008274:\n    retrieve_data_0800910c(param_1,uVar5);\n    if (uVar12 == 0) goto LAB_08008294;\n    if ((local_80 != 0) && (local_80 != uVar12)) {\n      retrieve_data_0800910c(param_1);\n    }\n  }\n  retrieve_data_0800910c(param_1,uVar12);\nLAB_08008294:\n  retrieve_data_0800910c(param_1,uVar3);\n  *pcVar15 = '\\0';\n  *param_7 = local_74 + 1;\n  if (param_9 == (char **)0x0) {\n    return pcVar18;\n  }\n  *param_9 = pcVar15;\n  return pcVar18;\ncode_r0x08008270:\n  *pcVar14 = cVar1 + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "called": [
                "FUN_080004c8",
                "FUN_080003f4",
                "FUN_08009630",
                "FUN_08001084",
                "FUN_0800015c",
                "FUN_080009e8",
                "FUN_0800910c",
                "FUN_080093a4",
                "FUN_08000998",
                "FUN_08009444",
                "FUN_08009120",
                "FUN_0800119c",
                "FUN_080091a4",
                "FUN_08009530",
                "FUN_080078c0",
                "FUN_08009258",
                "FUN_080003d4",
                "FUN_08009244",
                "FUN_08000158",
                "FUN_080009d4",
                "FUN_0800071c",
                "FUN_080094f8",
                "FUN_080090c0",
                "FUN_080009ac"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080079e8",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "FUNC_080079e8"
        },
        "FUN_0800166c": {
            "renaming": {
                "FUN_0800166c": "apply_mask_0800166c",
                "param_1": "mask",
                "param_2": "value",
                "param_3": "target",
                "uVar1": "bits_to_shift",
                "masked_value": "masked_value",
                "shifted_value": "shifted_value"
            },
            "code": "uint apply_mask_0800166c(uint mask, uint value, uint target) {\n  uint bits_to_keep = mask & 7;\n  uint bits_to_shift = 7 - bits_to_keep;\n  if (bits_to_shift > 3) {\n    bits_to_shift = 4;\n  }\n  if (bits_to_keep + 4 < 7) {\n    bits_to_keep = 0;\n  }\n  else {\n    bits_to_keep = bits_to_keep - 3;\n  }\n  uint masked_value = target & ~(-1 << (bits_to_keep & 0xff));\n  uint shifted_value = (~(-1 << (bits_to_shift & 0xff)) & value) << (bits_to_keep & 0xff);\n  return masked_value | shifted_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800166c",
            "calling": [
                "FUN_0800172a"
            ],
            "imported": false,
            "current_name": "apply_mask_0800166c"
        },
        "FUN_0800360c": {
            "renaming": {
                "FUN_0800360c": "set_flags_0800360c",
                "param_1": "ptr_param",
                "PTR_": "ptr_",
                "DAT_": "data_"
            },
            "code": "int set_flags_0800360c(uint **PTR_param) {\n  uint *DAT_ptr = *PTR_param;\n  DAT_ptr[3] |= 1;\n  *DAT_ptr |= 1;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800360c",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_flags_0800360c"
        },
        "FUN_08005d68": {
            "renaming": {
                "FUN_08005d68": "write_bytes_to_memory_08005d68",
                "param_1": "destination",
                "param_2": "byte_to_write",
                "param_3": "num_bytes_to_write",
                "puVar1": "current_destination",
                "puVar2": "next_destination",
                "uVar3": "num_bytes_remaining",
                "uVar4": "pattern",
                "bVar5": "is_last_byte"
            },
            "code": "void write_bytes_to_memory_08005d68(uint32_t *destination, uint8_t byte_to_write, uint32_t num_bytes_to_write)\n{\n    uint32_t *current_destination = destination;\n    uint32_t num_bytes_remaining = num_bytes_to_write;\n    uint32_t bytes_to_write;\n    uint32_t pattern = (byte_to_write << 24) | (byte_to_write << 16) | (byte_to_write << 8) | byte_to_write;\n    \n    // Handle unaligned destination address\n    if (((uint32_t)destination & 3) != 0) {\n        bytes_to_write = num_bytes_remaining - 1;\n        if (num_bytes_remaining == 0) {\n            return;\n        }\n        while (true) {\n            *current_destination = (*current_destination & ~(0xFF << (((uint32_t)destination & 3) * 8))) | (byte_to_write << (((uint32_t)destination & 3) * 8));\n            num_bytes_remaining = bytes_to_write;\n            destination = (uint32_t *)((int)current_destination + 1);\n            if (((uint32_t)destination & 3) == 0) {\n                break;\n            }\n            bytes_to_write = num_bytes_remaining - 1;\n            current_destination = destination;\n            if (bytes_to_write == 0) {\n                return;\n            }\n        }\n    }\n    \n    // Handle aligned destination address\n    while (num_bytes_remaining >= 16) {\n        current_destination[0] = pattern;\n        current_destination[1] = pattern;\n        current_destination[2] = pattern;\n        current_destination[3] = pattern;\n        current_destination += 4;\n        num_bytes_remaining -= 16;\n    }\n    \n    // Handle remaining bytes\n    if (num_bytes_remaining >= 4) {\n        current_destination[0] = pattern;\n        current_destination += 1;\n        num_bytes_remaining -= 4;\n    }\n    \n    while (num_bytes_remaining > 0) {\n        *current_destination = byte_to_write;\n        current_destination += 1;\n        num_bytes_remaining -= 1;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d68",
            "calling": [
                "FUN_08009980",
                "FUN_08004f60"
            ],
            "imported": false,
            "current_name": "write_bytes_to_memory_08005d68"
        },
        "FUN_080017c4": {
            "renaming": {
                "FUN_080017c4": "decode_bits_080017c4",
                "param_1": "bits",
                "param_2": "data",
                "uVar1": "ptr_uVar1",
                "uVar2": "ptr_uVar2",
                "uVar3": "bit_mask",
                "uVar4": "data_value",
                "uVar5": "data_value_2",
                "puVar6": "bits_ptr",
                "iVar7": "bits_index",
                "local_10": "local_offset",
                "local_c": "bit_offset"
            },
            "code": "void decode_bits_080017c4(uint *bits, uint *data) {\n  uint bit_mask;\n  uint data_value;\n  uint local_offset = 0;\n  uint bit_offset = 0;\n  do {\n    if (bit_offset > 15) {\n      return;\n    }\n    bit_mask = 1 << (bit_offset & 0xff);\n    if ((*data & bit_mask) == bit_mask) {\n      data_value = data[1];\n      if (data_value == 0x12) {\n        local_offset = data[3] + 0xc;\n      }\n      else if (data_value < 0x13) {\n        if (data_value == 2) {\n          local_offset = data[3] + 8;\n        }\n        else if (data_value < 3) {\n          if (data_value == 0) goto LAB_08001882;\n          if (data_value == 1) {\n            local_offset = data[3];\n          }\n        }\n        else if (data_value == 3) {\n          local_offset = 0;\n        }\n        else if (data_value == 0x11) {\n          local_offset = data[3] + 4;\n        }\n      }\n      else if (((data_value == PTR_DAT_08001a4c) || (((data_value == PTR_DAT_08001a50) || (data_value == PTR_DAT_08001a54)) && ((data_value == PTR_DAT_08001a5c) || (data_value == PTR_DAT_08001a58)))) || (data_value == PTR_DAT_08001a60)) {\nLAB_08001882:\n        if (data[2] == 0) {\n          local_offset = 4;\n        }\n        else if (data[2] == 1) {\n          local_offset = 8;\n          bits[4] = bit_mask;\n        }\n        else {\n          local_offset = 8;\n          bits[5] = bit_mask;\n        }\n      }\n      if ((*data & 0xff) < 0x100) {\n        uint *bits_ptr = bits;\n        uint offset = local_offset << 2;\n        bits_ptr[0] = bits_ptr[0] & ~(0xf << (offset & 0xff)) | local_offset << (offset & 0xff);\n      }\n      else {\n        uint *bits_ptr = bits + 1;\n        uint offset = (local_offset - 8) * 4;\n        bits_ptr[0] = bits_ptr[0] & ~(0xf << (offset & 0xff)) | local_offset << (offset & 0xff);\n      }\n      if ((data[1] & 0x10000000) != 0) {\n        *(uint *)(PTR_DAT_08001a64 + 0x18) = *(uint *)(PTR_DAT_08001a64 + 0x18) | 1;\n        int bits_index;\n        if (bits == PTR_DAT_08001a6c) {\n          bits_index = 0;\n        }\n        else if (bits == PTR_DAT_08001a70) {\n          bits_index = 1;\n        }\n        else if (bits == PTR_DAT_08001a74) {\n          bits_index = 2;\n        }\n        else if (bits == PTR_DAT_08001a78) {\n          bits_index = 3;\n        }\n        else {\n          bits_index = 4;\n        }\n        *(uint *)(PTR_DAT_08001a68 + ((bit_offset >> 2) + 2) * 4) = bits_index << ((bit_offset & 3) << 2) | ~(0xf << ((bit_offset & 3) << 2)) & *(uint *)(PTR_DAT_08001a68 + ((bit_offset >> 2) + 2) * 4);\n        if ((data[1] & 0x10000) == 0) {\n          *PTR_DAT_08001a7c = ~bit_mask & *PTR_DAT_08001a7c;\n        }\n        else {\n          *PTR_DAT_08001a7c = bit_mask | *PTR_DAT_08001a7c;\n        }\n        if ((data[1] & 0x20000) == 0) {\n          PTR_DAT_08001a7c[1] = ~bit_mask & PTR_DAT_08001a7c[1];\n        }\n        else {\n          PTR_DAT_08001a7c[1] = bit_mask | PTR_DAT_08001a7c[1];\n        }\n        if ((data[1] & 0x100000) == 0) {\n          PTR_DAT_08001a7c[2] = ~bit_mask & PTR_DAT_08001a7c[2];\n        }\n        else {\n          PTR_DAT_08001a7c[2] = bit_mask | PTR_DAT_08001a7c[2];\n        }\n        if ((data[1] & 0x200000) == 0) {\n          PTR_DAT_08001a7c[3] = ~bit_mask & PTR_DAT_08001a7c[3];\n        }\n        else {\n          PTR_DAT_08001a7c[3] = bit_mask | PTR_DAT_08001a7c[3];\n        }\n      }\n    }\n    bit_offset++;\n  } while( true );\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080017c4",
            "calling": [
                "FUN_08005680",
                "FUN_080055f4"
            ],
            "imported": false,
            "current_name": "decode_bits_080017c4"
        },
        "FUN_080035a4": {
            "renaming": {
                "FUN_080035a4": "validate_input_data_080035a4",
                "param_1": "input_data",
                "uVar1": "result",
                "NULL": "NULL",
                "*(char *)((int)param_1 + 0x3d)": "input_data[15]",
                "*(undefined *)(param_1 + 0xf)": "input_data[6]",
                "do_nothing_080035fa": "process_input_data",
                "*(undefined *)((int)param_1 + 0x3d)": "input_data[15]",
                "update_parameters_08003c94": "update_parameters"
            },
            "code": "int validate_input_data_080035a4(int *input_data)\n{\n  int result = 0;\n  if (input_data == NULL)\n  {\n    result = 1;\n  }\n  else\n  {\n    if (input_data[15] == 0)\n    {\n      input_data[6] = 0;\n      process_input_data(input_data);\n    }\n    input_data[15] = 2;\n    update_parameters(input_data[0], &input_data[1]);\n    input_data[15] = 1;\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_080035fa",
                "FUN_08003c94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035a4",
            "calling": [
                "FUN_08005500",
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "validate_input_data_080035a4"
        },
        "FUN_080041ea": {
            "renaming": {
                "FUN_080041ea": "update_bit_at_position_080041ea",
                "param_1": "data",
                "param_2": "position",
                "param_3": "bit_value",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void update_bit_at_position_080041ea(int* data, uint position, int bit_value)\n{\n    uint mask = ~(1 << (position & 0xff));\n    *data = (*data & mask) | (bit_value << (position & 0xff));\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041ea",
            "calling": [
                "FUN_080036a8"
            ],
            "imported": false,
            "current_name": "update_bit_at_position_080041ea"
        },
        "FUN_08004ae0": {
            "renaming": {
                "FUN_08004ae0": "reverse_bits_and_store_in_params_08004ae0",
                "param_1": "params",
                "local_2c": "buffer[0]",
                "local_2b": "buffer[1]",
                "local_2a": "buffer[2]",
                "local_29": "buffer[3]",
                "local_28": "buffer[4]",
                "local_27": "buffer[5]",
                "local_26": "buffer[6]",
                "local_25": "buffer[7]",
                "local_24": "buffer[8]",
                "local_23": "buffer[9]",
                "local_22": "buffer[10]",
                "local_21": "buffer[11]",
                "local_20": "buffer[12]",
                "local_1f": "buffer[13]",
                "local_1e": "reversed_bits[6]",
                "local_1c": "reversed_bits[5]",
                "local_1a": "reversed_bits[4]",
                "local_18": "reversed_bits[3]",
                "local_16": "reversed_bits[2]",
                "local_14": "reversed_bits[1]"
            },
            "code": "void reverse_bits_and_store_in_params_08004ae0(uint32_t *params)\n{\n    uint32_t reversed_bits;\n    uint8_t buffer[14];\n    (**(code **)PTR_DAT_08004bd4)(0xd0, 0x3b, buffer, 0xe);\n\n    reversed_bits = reverse_bits_08000c10((int)CONCAT11(buffer[0], buffer[1]));\n    params[0] = reversed_bits;\n    reversed_bits = reverse_bits_08000c10((int)CONCAT11(buffer[2], buffer[3]));\n    params[1] = reversed_bits;\n    reversed_bits = reverse_bits_08000c10((int)CONCAT11(buffer[4], buffer[5]));\n    params[2] = reversed_bits;\n    reversed_bits = reverse_bits_08000c10((int)CONCAT11(buffer[6], buffer[7]));\n    params[3] = reversed_bits;\n    reversed_bits = reverse_bits_08000c10((int)CONCAT11(buffer[8], buffer[9]));\n    params[4] = reversed_bits;\n    reversed_bits = reverse_bits_08000c10((int)CONCAT11(buffer[10], buffer[11]));\n    params[5] = reversed_bits;\n    reversed_bits = reverse_bits_08000c10((int)CONCAT11(buffer[12], buffer[13]));\n    params[6] = reversed_bits;\n}\n",
            "called": [
                "FUN_08000c10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ae0",
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "reverse_bits_and_store_in_params_08004ae0"
        },
        "FUN_08001044": {
            "renaming": {
                "FUN_08001044": "validate_input_08001044",
                "param_1": "input",
                "uVar1": "count",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint validate_input_08001044(uint input) {\n  uint result;\n  bool is_negative = (input & 0x80000000) != 0;\n  bool is_overflow = input << 1 < 0x7f000000;\n  if (is_negative || is_overflow) {\n    result = 0;\n  }\n  else {\n    uint count = 0x9e - ((input << 1) >> 0x18);\n    if (count >= 0) {\n      result = (input << 8 | 0x80000000) >> (count & 0xff);\n    }\n    else if (count == 0xffffff9f && (input & 0x7fffff) != 0) {\n      result = 0;\n    }\n    else {\n      result = 0xffffffff;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001044",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "validate_input_08001044"
        },
        "FUN_08009444": {
            "renaming": {
                "FUN_08009444": "allocate_and_initialize_08009444",
                "param_1": "num_bits",
                "param_2": "bit_array",
                "param_3": "num_elements",
                "iVar1": "temp1",
                "iVar2": "temp2",
                "iVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "temp5",
                "iVar6": "temp6",
                "puVar7": "temp7",
                "puVar8": "temp8",
                "puVar9": "temp9",
                "puVar10": "temp10",
                "puVar11": "temp11",
                "iVar12": "num_words_to_zero",
                "iVar13": "num_words",
                "uVar14": "carry",
                "allocate_and_initialize_memory_080090c0": "allocate_and_initialize_memory",
                "SBORROW4": "signed_int_overflow"
            },
            "code": "void allocate_and_initialize_08009444(uint32_t num_bits, uint32_t* bit_array, uint32_t num_elements) {\n  uint32_t num_words = (num_bits >> 5) + bit_array[4] + 1;\n  uint32_t num_words_to_zero = num_words - bit_array[2];\n  if (bit_array[2] < num_words) {\n    do {\n      bit_array[1]++;\n      bit_array[2] *= 2;\n    } while (num_words != bit_array[2] && ((int32_t)num_words + (-2 * bit_array[2])) < 0);\n  }\n  uint32_t* memory = allocate_and_initialize_08009444_memory(num_elements, bit_array[1]);\n  uint32_t* bit_array_data = memory + 5;\n  if (num_words_to_zero > 0) {\n    memset(bit_array_data, 0, num_words_to_zero * sizeof(uint32_t));\n  }\n  uint32_t num_words_to_shift = num_bits & 0x1f;\n  uint32_t* bit_array_copy = bit_array + 5;\n  uint32_t carry = 0;\n  if (num_words_to_shift == 0) {\n    memcpy(bit_array_data, bit_array_copy, bit_array[4] * sizeof(uint32_t));\n  }\n  else {\n    for (uint32_t i = 0; i < bit_array[4]; i++) {\n      bit_array_data[i] = (bit_array_copy[i] << num_words_to_shift) | carry;\n      carry = bit_array_copy[i] >> (32 - num_words_to_shift);\n    }\n    bit_array_data[bit_array[4]] = carry;\n    if (carry != 0) {\n      bit_array[1]++;\n    }\n  }\n  uint32_t** ptr_array = (uint32_t**)memory;\n  uint32_t index = bit_array[1];\n  uint32_t* old_ptr = ptr_array[index];\n  uint32_t old_data = *old_ptr;\n  *old_ptr = (uint32_t)bit_array;\n  ptr_array[old_data] = bit_array_copy;\n}\n",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009444",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_08009444"
        },
        "FUN_080015fc": {
            "renaming": {
                "FUN_080015fc": "get_shifted_value_080015fc",
                "DAT_08001614": "PTR_data",
                "uint": "unsigned int",
                "shifted_value": "data_value",
                "masked_value": "masked_data"
            },
            "code": "uint get_shifted_value_080015fc(void)\n{\n    uint shifted_value = *(uint *)(DAT_08001614 + 0xc);\n    uint masked_value = shifted_value >> 8 & 7;\n    return masked_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015fc",
            "calling": [
                "FUN_0800172a"
            ],
            "imported": false,
            "current_name": "get_shifted_value_080015fc"
        },
        "FUN_08004436": {
            "renaming": {
                "FUN_08004436": "validate_input_08004436",
                "param_1": "param_array",
                "param_2": "input_buffer",
                "param_3": "input_length",
                "param_4": "max_input_length",
                "iVar1": "start_time",
                "iVar2": "remaining_length",
                "uVar3": "return_value",
                "local_58": "input_ptr",
                "get_pointer_value_080015a0": "get_pointer_value"
            },
            "code": "undefined4 validate_input_08004436(uint **param_array, ushort *input_buffer, short input_length, uint max_input_length) {\n    int start_time = get_pointer_value_080015a0();\n    uint **param_ptr = param_array;\n    ushort *input_ptr = input_buffer;\n    uint remaining_length = input_length;\n\n    if (**(char **)(param_array + 0x39) == ' ') {\n        if (input_buffer == NULL || input_length == 0) {\n            return 1;\n        }\n        else if (**(char **)(param_array + 0xe) == '\\x01') {\n            return 2;\n        }\n        else {\n            **(char **)(param_array + 0xe) = 1;\n            *(param_array + 0xf) = NULL;\n            **(char **)(param_array + 0x39) = 0x21;\n            *(short *)(param_array + 9) = input_length;\n            *(short *)((int)param_array + 0x26) = input_length;\n            while (*(short *)((int)param_array + 0x26) != 0) {\n                *(short *)((int)param_array + 0x26) = *(short *)((int)param_array + 0x26) + -1;\n                if (*param_array[2] == 0x1000) {\n                    while ((**param_array & 0x80) != 0x80) {\n                        if (max_input_length != 0xffffffff && (get_pointer_value_080015a0() - start_time) > max_input_length) {\n                            (*param_array)[3] &= 0xfffffe5f;\n                            (*param_array)[5] &= 0xfffffffe;\n                            **(char **)(param_array + 0x39) = 0x20;\n                            **(char **)(param_array + 0x3a) = 0x20;\n                            **(char **)(param_array + 0xe) = 0;\n                            return 3;\n                        }\n                    }\n                    if (max_input_length != 0xffffffff && (get_pointer_value_080015a0() - start_time) > max_input_length) {\n                        (*param_array)[3] &= 0xfffffe5f;\n                        (*param_array)[5] &= 0xfffffffe;\n                        **(char **)(param_array + 0x39) = 0x20;\n                        **(char **)(param_array + 0x3a) = 0x20;\n                        **(char **)(param_array + 0xe) = 0;\n                        return 3;\n                    }\n                    (*param_array)[1] = *input_ptr & 0x1ff;\n                    if (param_array[4] == NULL) {\n                        input_ptr++;\n                    }\n                    else {\n                        input_ptr = (ushort *)((int)input_ptr + 1);\n                    }\n                }\n                else {\n                    while ((**param_array & 0x80) != 0x80) {\n                        if (max_input_length != 0xffffffff && (get_pointer_value_080015a0() - start_time) > max_input_length) {\n                            (*param_array)[3] &= 0xfffffe5f;\n                            (*param_array)[5] &= 0xfffffffe;\n                            **(char **)(param_array + 0x39) = 0x20;\n                            **(char **)(param_array + 0x3a) = 0x20;\n                            **(char **)(param_array + 0xe) = 0;\n                            return 3;\n                        }\n                    }\n                    if (max_input_length != 0xffffffff && (get_pointer_value_080015a0() - start_time) > max_input_length) {\n                        (*param_array)[3] &= 0xfffffe5f;\n                        (*param_array)[5] &= 0xfffffffe;\n                        **(char **)(param_array + 0x39) = 0x20;\n                        **(char **)(param_array + 0x3a) = 0x20;\n                        **(char **)(param_array + 0xe) = 0;\n                        return 3;\n                    }\n                    (*param_array)[1] = (uint)*(byte *)input_ptr;\n                    input_ptr = (ushort *)((int)input_ptr + 1);\n                }\n            }\n            while ((**param_array & 0x40) != 0x40) {\n                if (max_input_length != 0xffffffff && (get_pointer_value_080015a0() - start_time) > max_input_length) {\n                    (*param_array)[3] &= 0xfffffe5f;\n                    (*param_array)[5] &= 0xfffffffe;\n                    **(char **)(param_array + 0x39) = 0x20;\n                    **(char **)(param_array + 0x3a) = 0x20;\n                    **(char **)(param_array + 0xe) = 0;\n                    return 3;\n                }\n            }\n            **(char **)(param_array + 0x39) = 0x20;\n            **(char **)(param_array + 0xe) = 0;\n            return 0;\n        }\n    }\n    else {\n        return 2;\n    }\n}",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004436",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": false,
            "current_name": "validate_input_08004436"
        },
        "FUN_08000110": {
            "renaming": {
                "FUN_08000110": "check_and_set_initialized_flag_08000110",
                "param_1": "param",
                "*PTR_DAT_08000128": "*PTR_INITIALIZED_FLAG",
                "DAT_0800012c": "DAT_HAS_BEEN_INITIALIZED",
                "PTR_FUN_08000130": "PTR_INITIALIZED_FUNCTION"
            },
            "code": "undefined * check_and_set_initialized_flag_08000110(undefined *param) {\\n    if (*PTR_DAT_08000128 == \"\\0\") {\\n        if (DAT_0800012c != 0) {\\n            param = PTR_FUN_08000130;\\n        }\\n        *PTR_DAT_08000128 = 1;\\n    }\\n    return param;\\n}",
            "called": [
                "FUN_08009e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000110",
            "calling": [],
            "imported": false,
            "current_name": "check_and_set_initialized_flag_08000110"
        },
        "FUN_08003504": {
            "renaming": {
                "FUN_08003504": "get_value_from_pointer_08003504",
                "PTR_DAT_08003514": "PTR_DATA"
            },
            "code": "int get_value_from_pointer_08003504() {\n    int* data_pointer = (int*)PTR_DAT_08003514;\n    return *data_pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003504",
            "calling": [
                "FUN_080052a0",
                "FUN_08003540",
                "FUN_08003518"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08003504"
        },
        "FUN_08000aa4": {
            "renaming": {
                "FUN_08000aa4": "FUNC_08000aa4"
            },
            "code": "\nuint FUNC_08000aa4(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000bde:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_08000bde;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000aa4",
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "imported": false,
            "current_name": "FUNC_08000aa4"
        },
        "FUN_08004ee8": {
            "renaming": {
                "FUN_08004ee8": "process_data_08004ee8",
                "param_1": "data_ptr",
                "param_2": "data_ptr2",
                "param_3": "data_size",
                "param_4": "data_flag",
                "FUNC_08001f6c": "call_function_with_args",
                "PTR_DAT_08004f28": "function_ptr_array",
                "PTR_DAT_08004f24": "function_ptr_array_size"
            },
            "code": "void process_data_08004ee8(void* data_ptr, void* data_ptr2, int data_size, short data_flag)\n{\n  call_function_with_args(PTR_DAT_08004f28, data_ptr, data_ptr2, 1, data_size, data_flag, *(int *)PTR_DAT_08004f24);\n  return;\n}",
            "called": [
                "FUN_08001f6c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ee8",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08004ee8"
        },
        "FUN_080094f8": {
            "renaming": {
                "FUN_080094f8": "compare_arrays_080094f8",
                "param_1": "array1",
                "param_2": "array2",
                "iVar1": "difference",
                "puVar2": "ptr1",
                "iVar3": "length",
                "puVar4": "ptr2"
            },
            "code": "int compare_arrays_080094f8(int* array1, int* array2, int length) {\n  int difference = array1[0x10] - array2[0x10];\n  if (difference == 0) {\n    int* ptr1 = array1 + 0x14 + array2[0x10] * 4;\n    int* ptr2 = array2 + 0x14 + array2[0x10] * 4;\n    for (int i = 0; i < length; i++) {\n      ptr1--;\n      ptr2--;\n      if (*ptr1 != *ptr2) {\n        if (*ptr2 <= *ptr1) {\n          return 1;\n        }\n        return -1;\n      }\n    }\n  }\n  return difference;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080094f8",
            "calling": [
                "FUN_080079e8",
                "FUN_080078c0"
            ],
            "imported": false,
            "current_name": "compare_arrays_080094f8"
        },
        "FUN_08000998": {
            "renaming": {
                "FUN_08000998": "is_input_valid_08000998",
                "in_ZR": "input_char",
                "check_params_and_return_08000988_08000988": "check_params_and_return"
            },
            "code": "bool is_input_valid_08000998(void)\\n{\\n  char input_char;\\n  check_params_and_return();\\n  return input_char != \"\\0\";\\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "is_input_valid_08000998"
        },
        "FUN_08000aa8": {
            "renaming": {
                "FUN_08000aa8": "FUNC_08000aa8"
            },
            "code": "\nuint FUNC_08000aa8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000bde:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_08000bde;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000aa8",
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "FUNC_08000aa8"
        },
        "FUN_080009ac": {
            "renaming": {
                "FUN_080009ac": "is_end_of_string_080009ac",
                "in_CY": "input_char"
            },
            "code": "bool is_end_of_string_080009ac(void)\n{\n  char input_char;\n  check_params_and_return_08000988_08000988();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009ac",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "is_end_of_string_080009ac"
        },
        "FUN_08000fc8": {
            "renaming": {
                "FUN_08000fc8": "concatenate_results_and_calculate_08000fc8",
                "param_1": "result_length",
                "param_2": "input_string",
                "calculate_and_concatenate_result_08000fd0_08000fd0": "calculate_and_concatenate_result",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void concatenate_results_and_calculate_08000fc8(int result_length, char* result, char* input_string) {\n    calculate_result(result, input_string, result_length);\n    concatenate_result(result, input_string);\n    return;\n}",
            "called": [
                "FUN_08000fd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fc8",
            "calling": [
                "FUN_08001030"
            ],
            "imported": false,
            "current_name": "concatenate_results_and_calculate_08000fc8"
        },
        "FUN_08001cb8": {
            "renaming": {
                "FUN_08001cb8": "do_nothing_08001cb8"
            },
            "code": "\nvoid do_nothing_08001cb8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cb8",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "do_nothing_08001cb8"
        },
        "FUN_0800438a": {
            "renaming": {
                "FUN_0800438a": "check_input_and_calculate_0800438a",
                "param_1": "input_array",
                "uVar1": "is_null_pointer",
                "do_nothing_08004424": "do_nothing"
            },
            "code": "int check_input_and_calculate_0800438a(int *input_array) {\\n\\tint is_null_pointer = 0;\\n\\tif (input_array == NULL) {\\n\\t\\tis_null_pointer = 1;\\n\\t}\\n\\telse {\\n\\t\\tint is_input_empty = (*(char *)((int)input_array + 0x39) == \"\\0\");\\n\\t\\tif (is_input_empty) {\\n\\t\\t\\t*(undefined *)(input_array + 0xe) = 0;\\n\\t\\t\\tdo_nothing(input_array);\\n\\t\\t}\\n\\t\\t*(undefined *)((int)input_array + 0x39) = 0x24;\\n\\t\\t*(uint *)(*input_array + 0xc) &= 0xffffdfff;\\n\\t\\tcalculate_value(input_array);\\n\\t\\t*(uint *)(*input_array + 0x10) &= 0xffffb7ff;\\n\\t\\t*(uint *)(*input_array + 0x14) &= 0xffffffd5;\\n\\t\\t*(uint *)(*input_array + 0xc) |= 0x2000;\\n\\t\\tinput_array[0xf] = 0;\\n\\t\\t*(undefined *)((int)input_array + 0x39) = 0x20;\\n\\t\\t*(undefined *)((int)input_array + 0x3a) = 0x20;\\n\\t}\\n\\treturn is_null_pointer;\\n}",
            "called": [
                "FUN_080046ec",
                "FUN_08004424"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800438a",
            "calling": [
                "FUN_08005598"
            ],
            "imported": false,
            "current_name": "check_input_and_calculate_0800438a"
        },
        "FUN_080014f0": {
            "renaming": {
                "FUN_080014f0": "set_flag_and_update_data_080014f0",
                "*DAT_08001518": "*PTR_DAT_08001518",
                "0x10": "flag",
                "update_data_08001714": "update_data",
                "validate_input_0800151c": "validate_input",
                "do_nothing_08002d8a": "do_nothing"
            },
            "code": "int set_flag_and_update_data_080014f0(void)\n{\n    int flag = 0x10;\n    *DAT_08001518 |= flag;\n    update_data_08001714(3);\n    validate_input_0800151c(0xf);\n    do_nothing_08002d8a();\n    return 0;\n}",
            "called": [
                "FUN_08002d8a",
                "FUN_08001714",
                "FUN_0800151c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014f0",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_flag_and_update_data_080014f0"
        },
        "FUN_08003908": {
            "renaming": {
                "FUN_08003908": "update_values_08003908",
                "param_1": "ptr_array",
                "param_2": "array_size",
                "param_3": "value_type",
                "uVar1": "return_value"
            },
            "code": "int update_values_08003908(int *ptr_array, int array_size, int value_type) {\n  int return_value;\n  if (*(char *)(ptr_array + 0xf) == '\\x01') {\n    return_value = 2;\n  }\n  else {\n    *(undefined *)(ptr_array + 0xf) = 1;\n    *(undefined *)((int)ptr_array + 0x3d) = 2;\n    switch(value_type) {\n    case 0:\n      set_flags_and_values(*ptr_array, array_size);\n      *(uint *)(*ptr_array + 0x18) = *(uint *)(*ptr_array + 0x18) | 8;\n      *(uint *)(*ptr_array + 0x18) = *(uint *)(*ptr_array + 0x18) & 0xfffffffb;\n      *(uint *)(*ptr_array + 0x18) = *(uint *)(array_size + 0x10) | *(uint *)(*ptr_array + 0x18);\n      break;\n    case 4:\n      update_values_08003908(*ptr_array, array_size);\n      *(uint *)(*ptr_array + 0x18) = *(uint *)(*ptr_array + 0x18) | 0x800;\n      *(uint *)(*ptr_array + 0x18) = *(uint *)(*ptr_array + 0x18) & 0xfffffbff;\n      *(uint *)(*ptr_array + 0x18) = *(int *)(array_size + 0x10) << 8 | *(uint *)(*ptr_array + 0x18);\n      break;\n    case 8:\n      update_data(*ptr_array, array_size);\n      *(uint *)(*ptr_array + 0x1c) = *(uint *)(*ptr_array + 0x1c) | 8;\n      *(uint *)(*ptr_array + 0x1c) = *(uint *)(*ptr_array + 0x1c) & 0xfffffffb;\n      *(uint *)(*ptr_array + 0x1c) = *(uint *)(array_size + 0x10) | *(uint *)(*ptr_array + 0x1c);\n      break;\n    case 0xc:\n      update_data(*ptr_array, array_size);\n      *(uint *)(*ptr_array + 0x1c) = *(uint *)(*ptr_array + 0x1c) | 0x800;\n      *(uint *)(*ptr_array + 0x1c) = *(uint *)(*ptr_array + 0x1c) & 0xfffffbff;\n      *(uint *)(*ptr_array + 0x1c) = *(int *)(array_size + 0x10) << 8 | *(uint *)(*ptr_array + 0x1c);\n    }\n    *(undefined *)((int)ptr_array + 0x3d) = 1;\n    *(undefined *)(ptr_array + 0xf) = 0;\n    return_value = 0;\n  }\n  return return_value;\n}",
            "called": [
                "FUN_08003d60",
                "FUN_08003f18",
                "FUN_08003ff8",
                "FUN_08003e38"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003908",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "update_values_08003908"
        },
        "FUN_08004f60": {
            "renaming": {
                "FUN_08004f60": "clear_memory_08004f60",
                "PTR_DAT_08004f74": "memory_address",
                "write_bytes_to_memory_08005d68": "write_bytes_to_memory"
            },
            "code": "void clear_memory_08004f60(void)\n{\n  write_bytes_to_memory(PTR_DAT_08004f74, 0, 64);\n  return;\n}",
            "called": [
                "FUN_08005d68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f60",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "clear_memory_08004f60"
        },
        "FUN_080009c0": {
            "renaming": {
                "FUN_080009c0": "check_params_and_return_080009c0",
                "in_ZR": "zero_return",
                "in_CY": "carry_return"
            },
            "code": "bool check_params_and_return_080009c0() {\n  undefined zero_return;\n  undefined carry_return;\n  check_params_and_return_080009c0_08000988_08000988();\n  return !(bool)carry_return || (bool)zero_return;\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c0",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "check_params_and_return_080009c0"
        },
        "FUN_08001170": {
            "renaming": {
                "FUN_08001170": "is_valid_input_08001170",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "int is_valid_input_08001170(uint32_t input1, int input2, uint32_t input3, int input4) {\n\tint result = 0;\n\tif ((((input2 << 1) >> 0x15) != -1 || ((input1 | (input2 << 0xc)) == 0)) && (((input4 << 1) >> 0x15) != -1 || ((input3 | (input4 << 0xc)) == 0)))) {\n\t\tresult = 1;\n\t}\n\treturn result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001170",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "is_valid_input_08001170"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "update_data_08003f18",
                "param_1": "data_address",
                "param_2": "new_data",
                "uVar1": "first_value",
                "uVar2": "second_value",
                "local_10": "local_value"
            },
            "code": "void update_data_08003f18(int data_address, uint *new_data)\n{\n  uint first_value;\n  uint second_value;\n  uint local_value;\n  \n  *(uint *)(data_address + 0x20) = *(uint *)(data_address + 0x20) & 0xfffffeff;\n  local_value = *(uint *)(data_address + 4);\n  first_value = *new_data;\n  second_value = new_data[2] << 8 | *(uint *)(data_address + 0x20) & 0xfffffdff;\n  if (data_address == PTR_DAT_08003ff4) {\n    second_value = (new_data[3] << 8 | second_value & 0xfffff7ff) & 0xfffffbff;\n    local_value = new_data[6] << 4 | new_data[5] << 4 | local_value & 0xffffcfff;\n  }\n  *(uint *)(data_address + 4) = local_value;\n  *(uint *)(data_address + 0x1c) = first_value | *(uint *)(data_address + 0x1c) & 0xffffff8c;\n  *(uint *)(data_address + 0x3c) = new_data[1];\n  *(uint *)(data_address + 0x20) = second_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "FUN_08003908"
            ],
            "imported": false,
            "current_name": "update_data_08003f18"
        },
        "FUN_080097cc": {
            "renaming": {
                "FUN_080097cc": "reverse_copy_and_update_080097cc",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "source_end",
                "iVar1": "current_destination_index",
                "uVar2": "source_data",
                "iVar3": "destination_offset",
                "iVar4": "new_destination_length",
                "uVar5": "source_length",
                "uVar6": "source_data_length",
                "puVar7": "source_data_pointer",
                "puVar8": "next_source_data_pointer",
                "uVar9": "temp",
                "copy_memory_block_08001084": "memcpy",
                "FUNC_08008af8": "malloc",
                "FUNC_08009adc": "malloc",
                "FUNC_080088ec": "memcpy"
            },
            "code": "int reverse_copy_and_update_080097cc(int *destination, int *source, int *source_end){\n  int current_destination_index = *destination;\n  int source_index = *source;\n  int source_length = source[2];\n  int source_data = *(int *)*source_end;\n  int source_data_length = *(int *)(*source_end + 4);\n  \n  if (source_data_length != 0) {\n    do {\n      while (source_data_length != 0) {\n        source_data_length--;\n        source_data = *(int *)(*source_end + 8 + (source_data_length << 2));\n        if (source_length <= source_data && ((unsigned short *)(source + 3))[0] & 0x480) {\n          int destination_offset = current_destination_index - source[4];\n          int new_destination_length = (source[5] * 3) / 2 + source_data + 1 + destination_offset;\n          if (new_destination_length > source[2]) {\n            source[2] = new_destination_length;\n          }\n          if (((int)((unsigned short *)(source + 3))[0] << 0x15) < 0) {\n            int new_destination = malloc(new_destination_length);\n            if (new_destination == 0) {\n              *destination = 0xc;\n              ((unsigned short *)(source + 3))[0] |= 0x40;\n              source_end[1] = 0;\n              source_end[2] = 0;\n              return -1;\n            }\n            memcpy(new_destination + source[4], destination + destination_offset, source_data);\n            ((unsigned short *)(source + 3))[0] &= 0xfb7f;\n            source[5] = new_destination_length;\n            source[4] = new_destination - *destination_end;\n            *destination = new_destination + destination_offset;\n            source[2] = new_destination_length - destination_offset;\n          } else {\n            int new_destination = malloc(source[2]);\n            if (new_destination == 0) {\n              memcpy(destination + destination_offset, source + 4, source_data);\n              source_end[1] = 0;\n              return -1;\n            }\n            memcpy(new_destination, destination, source[4]);\n            free(destination);\n            destination = new_destination;\n            *destination = current_destination_index;\n            source[5] = source[2];\n          }\n          current_destination_index = *destination;\n          source_length = source[2] - source_data;\n        }\n        memcpy(destination + current_destination_index, (void *)source_data, source_data_length);\n        int source_end_length = source_end[2];\n        source_length = source[2] - source_data_length;\n        current_destination_index += source_data_length;\n        source_end[2] = source_end_length - source_data;\n      }\n    } while (source_end[2] != 0);\n  }\n  source_end[1] = 0;\n  return 0;\n}",
            "called": [
                "FUN_08001084",
                "FUN_08009a18",
                "FUN_08009adc",
                "FUN_08008af8",
                "FUN_080088ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080097cc",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "reverse_copy_and_update_080097cc"
        },
        "FUN_08001f6c": {
            "renaming": {
                "FUN_08001f6c": "FUNC_08001f6c"
            },
            "code": "\nundefined4\nFUNC_08001f6c(uint **param_1,undefined2 param_2,undefined2 param_3,undefined2 param_4,uint *param_5,\n            undefined2 param_6,uint param_7)\n\n{\n  int iVar1;\n  uint uVar2;\n  char cVar3;\n  uint uVar4;\n  int iVar5;\n  undefined4 uVar6;\n  uint *puVar7;\n  bool bVar8;\n  \n  iVar1 = get_pointer_value_080015a0();\n  uVar2 = DAT_080021e0;\n  if (*(char *)((int)param_1 + 0x3d) == ' ') {\n    do {\n      if ((uVar2 >> 0x10 & 0xff) == 1) {\n        uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n        bVar8 = uVar4 == 0;\n        if (bVar8) {\n          uVar4 = 1;\n        }\n        cVar3 = (char)uVar4;\n        if (!bVar8) {\n          cVar3 = '\\0';\n        }\n      }\n      else {\n        uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n        bVar8 = uVar4 == 0;\n        if (bVar8) {\n          uVar4 = 1;\n        }\n        cVar3 = (char)uVar4;\n        if (!bVar8) {\n          cVar3 = '\\0';\n        }\n      }\n      if (cVar3 != '\\x01') {\n        iVar5 = 0;\n        goto LAB_08002040;\n      }\n      iVar5 = get_pointer_value_080015a0();\n    } while ((uint)(iVar5 - iVar1) < 0x1a);\n    param_1[0xc] = (uint *)0x0;\n    *(undefined *)((int)param_1 + 0x3d) = 0x20;\n    *(undefined *)((int)param_1 + 0x3e) = 0;\n    *(undefined *)(param_1 + 0xf) = 0;\n    iVar5 = 3;\nLAB_08002040:\n    if (iVar5 == 0) {\n      if (*(char *)(param_1 + 0xf) == '\\x01') {\n        uVar6 = 2;\n      }\n      else {\n        *(undefined *)(param_1 + 0xf) = 1;\n        if ((**param_1 & 1) != 1) {\n          **param_1 = **param_1 | 1;\n        }\n        **param_1 = **param_1 & 0xfffff7ff;\n        *(undefined *)((int)param_1 + 0x3d) = 0x22;\n        *(undefined *)((int)param_1 + 0x3e) = 0x40;\n        param_1[0x10] = (uint *)0x0;\n        param_1[9] = param_5;\n        *(undefined2 *)((int)param_1 + 0x2a) = param_6;\n        param_1[0xb] = DAT_080021e4;\n        *(undefined2 *)(param_1 + 10) = *(undefined2 *)((int)param_1 + 0x2a);\n        iVar5 = check_and_update_flag_080027f4(param_1,param_2,param_3,param_4,param_7,iVar1);\n        if (iVar5 == 0) {\n          if (*(short *)(param_1 + 10) == 0) {\n            **param_1 = **param_1 | 0x200;\n          }\n          else if (*(short *)(param_1 + 10) == 1) {\n            **param_1 = **param_1 & 0xfffffbff;\n            disableIRQinterrupts();\n            **param_1 = **param_1 | 0x200;\n            enableIRQinterrupts();\n          }\n          else if (*(short *)(param_1 + 10) == 2) {\n            **param_1 = **param_1 | 0x800;\n            disableIRQinterrupts();\n            **param_1 = **param_1 & 0xfffffbff;\n            enableIRQinterrupts();\n          }\n          else {\n            **param_1 = **param_1 | 0x400;\n          }\n          while (uVar2 = DAT_080024bc, *(short *)(param_1 + 10) != 0) {\n            if (*(ushort *)(param_1 + 10) < 4) {\n              if (*(short *)(param_1 + 10) == 1) {\n                iVar5 = check_pointer_08002ca8(param_1,param_7,iVar1);\n                if (iVar5 != 0) {\n                  if (param_1[0x10] == (uint *)0x20) {\n                    return 3;\n                  }\n                  return 1;\n                }\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n              else if (*(short *)(param_1 + 10) == 2) {\n                do {\n                  if ((uVar2 >> 0x10 & 0xff) == 1) {\n                    uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  if (cVar3 != '\\0') {\n                    iVar5 = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (iVar5 = get_pointer_value_080015a0(), (uint)(iVar5 - iVar1) <= param_7)\n                         )));\n                param_1[0xc] = (uint *)0x0;\n                *(undefined *)((int)param_1 + 0x3d) = 0x20;\n                *(undefined *)((int)param_1 + 0x3e) = 0;\n                *(undefined *)(param_1 + 0xf) = 0;\n                iVar5 = 3;\nLAB_080022fa:\n                if (iVar5 != 0) {\n                  return 3;\n                }\n                disableIRQinterrupts();\n                **param_1 = **param_1 | 0x200;\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n                enableIRQinterrupts();\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n              else {\n                do {\n                  if ((uVar2 >> 0x10 & 0xff) == 1) {\n                    uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  if (cVar3 != '\\0') {\n                    iVar5 = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (iVar5 = get_pointer_value_080015a0(), (uint)(iVar5 - iVar1) <= param_7)\n                         )));\n                param_1[0xc] = (uint *)0x0;\n                *(undefined *)((int)param_1 + 0x3d) = 0x20;\n                *(undefined *)((int)param_1 + 0x3e) = 0;\n                *(undefined *)(param_1 + 0xf) = 0;\n                iVar5 = 3;\nLAB_08002418:\n                if (iVar5 != 0) {\n                  return 3;\n                }\n                **param_1 = **param_1 & 0xfffffbff;\n                disableIRQinterrupts();\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n                uVar2 = DAT_080024bc;\n                do {\n                  if ((uVar2 >> 0x10 & 0xff) == 1) {\n                    uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  if (cVar3 != '\\0') {\n                    iVar5 = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (iVar5 = get_pointer_value_080015a0(), (uint)(iVar5 - iVar1) <= param_7)\n                         )));\n                param_1[0xc] = (uint *)0x0;\n                *(undefined *)((int)param_1 + 0x3d) = 0x20;\n                *(undefined *)((int)param_1 + 0x3e) = 0;\n                *(undefined *)(param_1 + 0xf) = 0;\n                iVar5 = 3;\nLAB_0800250a:\n                if (iVar5 != 0) {\n                  return 3;\n                }\n                **param_1 = **param_1 | 0x200;\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n                enableIRQinterrupts();\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n            }\n            else {\n              iVar5 = check_pointer_08002ca8(param_1,param_7,iVar1);\n              if (iVar5 != 0) {\n                if (param_1[0x10] == (uint *)0x20) {\n                  return 3;\n                }\n                return 1;\n              }\n              uVar2 = (*param_1)[4];\n              puVar7 = param_1[9];\n              param_1[9] = (uint *)((int)puVar7 + 1);\n              *(char *)puVar7 = (char)uVar2;\n              *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n              *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              if (((*param_1)[5] & 4) == 4) {\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n            }\n          }\n          *(undefined *)((int)param_1 + 0x3d) = 0x20;\n          *(undefined *)((int)param_1 + 0x3e) = 0;\n          *(undefined *)(param_1 + 0xf) = 0;\n          uVar6 = 0;\n        }\n        else if (param_1[0x10] == (uint *)0x4) {\n          *(undefined *)(param_1 + 0xf) = 0;\n          uVar6 = 1;\n        }\n        else {\n          *(undefined *)(param_1 + 0xf) = 0;\n          uVar6 = 3;\n        }\n      }\n    }\n    else {\n      uVar6 = 2;\n    }\n  }\n  else {\n    uVar6 = 2;\n  }\n  return uVar6;\n}\n\n",
            "called": [
                "FUN_08002ca8",
                "FUN_080015a0",
                "FUN_080027f4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001f6c",
            "calling": [
                "FUN_08004ee8"
            ],
            "imported": false,
            "current_name": "FUNC_08001f6c"
        },
        "FUN_08002ad8": {
            "renaming": {
                "FUN_08002ad8": "check_value_08002ad8",
                "param_1": "pointer_array",
                "param_2": "value",
                "param_3": "max_value",
                "param_4": "base_address",
                "iVar1": "current_address",
                "cVar2": "result",
                "uVar3": "mask",
                "bVar4": "is_mask_nonzero"
            },
            "code": "uint32_t check_value_08002ad8(uint32_t **pointer_array, uint32_t value, uint32_t max_value, int base_address) {\n  int current_address;\n  char result;\n  uint32_t mask;\n  bool is_mask_nonzero;\n  do {\n    if ((value >> 16 & 0xff) == 1) {\n      mask = ~(*pointer_array)[5] & 0xffff;\n      is_mask_nonzero = mask != 0;\n      if (is_mask_nonzero) {\n        mask = 1;\n      }\n      result = (char)mask;\n      if (!is_mask_nonzero) {\n        result = 0;\n      }\n    }\n    else {\n      mask = ~(*pointer_array)[6] & 0xffff;\n      is_mask_nonzero = mask != 0;\n      if (is_mask_nonzero) {\n        mask = 1;\n      }\n      result = (char)mask;\n      if (!is_mask_nonzero) {\n        result = 0;\n      }\n    }\n    if (result == 0) {\n      return 0;\n    }\n    if (((*pointer_array)[5] & 0x400) == 0x400) {\n      **pointer_array |= 0x200;\n      (*pointer_array)[5] = 0xfffffbff;\n      pointer_array[0x10] = (uint32_t *)0x4;\n      pointer_array[0xc] = (uint32_t *)0x0;\n      *((char *)pointer_array + 0x3d) = 0x20;\n      *((char *)pointer_array + 0x3c) = 0;\n      return 1;\n    }\n  } while ((max_value == 0xffffffff) || ((max_value != 0 && (current_address = get_pointer_value_080015a0(), (uint32_t)(current_address - base_address) <= max_value))));\n  pointer_array[0xc] = (uint32_t *)0x0;\n  *((char *)pointer_array + 0x3d) = 0x20;\n  *((char *)pointer_array + 0x3c) = 0;\n  return 3;\n}",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "FUN_08002640",
                "FUN_080027f4"
            ],
            "imported": false,
            "current_name": "check_value_08002ad8"
        },
        "FUN_08000fd0": {
            "renaming": {
                "FUN_08000fd0": "calculate_and_concatenate_result_08000fd0_08000fd0",
                "param_1": "first_parameter",
                "param_2": "second_parameter"
            },
            "code": "undefined8 calculate_and_concatenate_result_08000fd0_08000fd0(undefined4 first_parameter, undefined4 second_parameter) {\n  calculate_result_08000f68();\n  return CONCAT44(second_parameter, first_parameter);\n}",
            "called": [
                "FUN_08000f68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fd0",
            "calling": [
                "FUN_08000ff4",
                "FUN_08000fc8"
            ],
            "imported": false,
            "current_name": "calculate_and_concatenate_result_08000fd0_08000fd0"
        },
        "FUN_08003d60": {
            "renaming": {
                "FUN_08003d60": "set_flags_and_values_08003d60",
                "param_1": "target_address",
                "param_2": "source_data",
                "uVar1": "value1",
                "uVar2": "value2",
                "local_10": "local_value",
                "DAT_08003e34": "special_address"
            },
            "code": "void set_flags_and_values_08003d60(int target_address, uint *source_data)\n{\n  uint value1;\n  uint value2;\n  uint local_value;\n\n  uint *target_flags = (uint *)(target_address + 0x20);\n  uint *target_value1 = (uint *)(target_address + 0x18);\n  uint *target_value2 = (uint *)(target_address + 0x34);\n  uint *source_value1 = source_data;\n  uint *source_value2 = source_data + 2;\n\n  *target_flags = (*target_flags & 0xfffffffe) | 0x0;\n  local_value = *(uint *)(target_address + 4);\n  value1 = *source_value1;\n  value2 = *source_value2 | (*target_flags & 0xfffffffd);\n  if (target_address == DAT_08003e34) {\n    value2 = (source_data[3] | value2 & 0xfffffff7) & 0xfffffffb;\n    local_value = source_data[6] | source_data[5] | local_value & 0xfffffcff;\n  }\n  *(uint *)(target_address + 4) = local_value;\n  *target_value1 = value1 | (*target_value1 & 0xffffff8c);\n  *target_value2 = source_data[1];\n  *target_flags = value2;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d60",
            "calling": [
                "FUN_08003908"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_08003d60"
        },
        "FUN_08009e68": {
            "renaming": {
                "FUN_08009e68": "do_nothing_08009e68"
            },
            "code": "\nvoid do_nothing_08009e68(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e68",
            "calling": [
                "FUN_08005d20",
                "FUN_08000134",
                "FUN_08000110"
            ],
            "imported": false,
            "current_name": "do_nothing_08009e68"
        },
        "FUN_08003518": {
            "renaming": {
                "FUN_08003518": "get_shifted_value_08003518",
                "uVar1": "value",
                "PTR_DAT_0800353c": "shift_amounts",
                "DAT_08003538": "data"
            },
            "code": "uint get_shifted_value_08003518(void)\n{\n  uint value = get_value_from_pointer();\n  uint index = *(uint *)(DAT_08003538 + 4) >> 8 & 7;\n  uint shifted_value = value >> PTR_DAT_0800353c[index];\n  return shifted_value;\n}",
            "called": [
                "FUN_08003504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003518",
            "calling": [
                "FUN_080046ec",
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "get_shifted_value_08003518"
        },
        "FUN_08001618": {
            "renaming": {
                "FUN_08001618": "set_byte_at_address_based_on_sign_of_input_08001618",
                "param_1": "input_byte",
                "param_2": "input_uint",
                "DAT_08001664": "data_1",
                "DAT_08001668": "data_2"
            },
            "code": "void set_byte_at_address_based_on_sign_of_input_08001618(byte input_byte, uint input_uint) {\n  if (input_byte < 0) {\n    *(char *)((input_byte & 0xf) + DAT_08001664 + 0x14) = (char)((input_uint & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)input_byte + DAT_08001668 + 0x300) = (char)((input_uint & 0xff) << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001618",
            "calling": [
                "FUN_080016d0",
                "FUN_0800172a"
            ],
            "imported": false,
            "current_name": "set_byte_at_address_based_on_sign_of_input_08001618"
        },
        "FUN_080091a4": {
            "renaming": {
                "FUN_080091a4": "count_leading_zeros_080091a4",
                "param_1": "x",
                "iVar1": "leading_zeros"
            },
            "code": "int count_leading_zeros_080091a4(uint32_t x) {\n    int leading_zeros = 0;\n    if ((x & 0xffff0000) == 0) {\n        x <<= 16;\n        leading_zeros += 16;\n    }\n    if ((x & 0xff000000) == 0) {\n        x <<= 8;\n        leading_zeros += 8;\n    }\n    if ((x & 0xf0000000) == 0) {\n        x <<= 4;\n        leading_zeros += 4;\n    }\n    if ((x & 0xc0000000) == 0) {\n        x <<= 2;\n        leading_zeros += 2;\n    }\n    if ((int)x >= 0) {\n        if ((int)(x << 1) < 0) {\n            return leading_zeros + 1;\n        }\n        leading_zeros = 32;\n    }\n    return leading_zeros;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091a4",
            "calling": [
                "FUN_08009630",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "count_leading_zeros_080091a4"
        },
        "FUN_08004f78": {
            "renaming": {
                "FUN_08004f78": "process_and_store_result_08004f78",
                "uVar1": "result",
                "iVar2": "is_null",
                "uVar3": "input_hash",
                "uVar4": "hash_value",
                "uVar5": "input_xor_value",
                "local_11": "input_byte"
            },
            "code": "void process_and_store_result_08004f78(void)\n{\n  uint32_t hash_value;\n  int is_null;\n  int is_end_of_string;\n  uint8_t input_byte;\n  uint32_t result;\n  uint32_t input_hash;\n  uint32_t input_xor_value;\n  uint32_t input_value = *(uint32_t*)PTR_DAT_080051e4;\n  reverse_bits_and_store_in_params(PTR_DAT_080051e0);\n  calculate_result(PTR_DAT_080051e0, PTR_DAT_080051e4);\n  clear_memory();\n  hash_value = calculate_hash(*(uint32_t*)PTR_DAT_080051e4);\n  process_string(PTR_DAT_080051ec, PTR_s_Pitch___f_080051e8, (int)hash_value,(int)((uint64_t)hash_value >> 0x20));\n  result = reverse_engineered_function(PTR_DAT_080051ec);\n  validate_input_and_return(PTR_DAT_080051ec, result);\n  result = FUNC_08000aa4(*(uint32_t*)PTR_DAT_080051f0, *(uint32_t*)PTR_DAT_080051e4);\n  *(uint32_t*)PTR_DAT_080051f4 = result;\n  result = FUNC_08000cb8(*(uint32_t*)PTR_DAT_080051f8, *(uint32_t*)PTR_DAT_080051f4);\n  *(uint32_t*)PTR_DAT_080051fc = result;\n  input_xor_value = *(uint32_t*)PTR_DAT_08005210 ^ 0x80000000;\n  input_hash = calculate_hash(*((uint32_t*)PTR_DAT_08005210));\n  result = FUNC_08000aa8(input_xor_value, *(uint32_t*)PTR_DAT_08005204);\n  result = FUNC_08000aa8(result, *(uint32_t*)PTR_DAT_08005218);\n  is_null = check_if_input_is_null(result, reverse_bits(*((uint32_t*)PTR_DAT_08005208)));\n  if (is_null == 0) {\n    is_end_of_string = isEndOfString(result, reverse_bits(*((uint32_t*)PTR_DAT_08005204)));\n    if (is_end_of_string == 0) {\n      input_byte = validate_input(result);\n    }\n    else {\n      input_byte = *((uint8_t*)PTR_DAT_0800520c);\n    }\n  }\n  else {\n    input_byte = *((uint8_t*)PTR_DAT_08005208);\n  }\n  *(uint32_t*)PTR_DAT_08005214 = *(uint32_t*)PTR_DAT_080051f4;\n  is_null = check_if_input_is_null(*(uint32_t*)PTR_DAT_080051f4, 0);\n  set_param_at_address(DAT_0800521c, 2, is_null != 0);\n  is_null = check_if_input_is_null(*(uint32_t*)PTR_DAT_080051f4, 0);\n  set_param_at_address(DAT_0800521c, 4, is_null == 0);\n  is_null = check_if_input_is_null(*(uint32_t*)PTR_DAT_080051f4, 0);\n  set_param_at_address(DAT_0800521c, 8, is_null != 0);\n  is_null = check_if_input_is_null(*(uint32_t*)PTR_DAT_080051f4, 0);\n  set_param_at_address(DAT_0800521c, 0x10, is_null == 0);\n  *(uint32_t*)(*(int*)PTR_DAT_08005220 + 0x34) = (uint32_t)input_byte;\n  *(uint32_t*)(*(int*)PTR_DAT_08005220 + 0x40) = (uint32_t)input_byte;\n}\n",
            "called": [
                "FUN_08004f60",
                "FUN_08005dfc",
                "FUN_08004f3c",
                "FUN_08001044",
                "FUN_08000c10",
                "FUN_08000aa4",
                "FUN_08000cb8",
                "FUN_08001a80",
                "FUN_08000ff4",
                "FUN_08005e40",
                "FUN_08000aa8",
                "FUN_08001030",
                "FUN_08000418",
                "FUN_08000c08",
                "FUN_08004bd8",
                "FUN_08004ae0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f78",
            "calling": [
                "FUN_080017b4",
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "process_and_store_result_08004f78"
        },
        "FUN_080015a0": {
            "renaming": {
                "FUN_080015a0": "get_pointer_value_080015a0",
                "PTR_DAT_080015b0": "PTR_DATA"
            },
            "code": "int get_pointer_value_080015a0(void)\n{\n    return *(int *)PTR_DAT_080015b0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015a0",
            "calling": [
                "FUN_08002640",
                "FUN_08004436",
                "FUN_08002c2e",
                "FUN_08002ca8",
                "FUN_08001f6c",
                "FUN_08003260",
                "FUN_08002ad8",
                "FUN_08002bb4",
                "FUN_080027f4",
                "FUN_08002d98",
                "FUN_08004f2c",
                "FUN_08001ccc"
            ],
            "imported": false,
            "current_name": "get_pointer_value_080015a0"
        },
        "FUN_08002d98": {
            "renaming": {
                "FUN_08002d98": "FUNC_08002d98"
            },
            "code": "\nundefined4 FUNC_08002d98(uint *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined4 uVar3;\n  bool bVar4;\n  \n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08002ffc[1] & 0xc) == 4) ||\n       (((DAT_08002ffc[1] & 0xc) == 8 && ((DAT_08002ffc[1] & 0x10000) == 0x10000)))) {\n      if (((*DAT_08002ffc & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (param_1[1] == 0x10000) {\n        *DAT_08002ffc = *DAT_08002ffc | 0x10000;\n      }\n      else if (param_1[1] == 0) {\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffeffff;\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffbffff;\n      }\n      else if (param_1[1] == 0x50000) {\n        *DAT_08002ffc = *DAT_08002ffc | 0x40000;\n        *DAT_08002ffc = *DAT_08002ffc | 0x10000;\n      }\n      else {\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffeffff;\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar1 = get_pointer_value_080015a0();\n        while ((*DAT_08002ffc & 0x20000) != 0) {\n          iVar2 = get_pointer_value_080015a0();\n          if (100 < (uint)(iVar2 - iVar1)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar1 = get_pointer_value_080015a0();\n        while ((*DAT_08002ffc & 0x20000) == 0) {\n          iVar2 = get_pointer_value_080015a0();\n          if (100 < (uint)(iVar2 - iVar1)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08002ffc[1] & 0xc) == 0) ||\n       (((DAT_08002ffc[1] & 0xc) == 8 && ((DAT_08002ffc[1] & 0x10000) == 0)))) {\n      if (((*DAT_08002ffc & 2) != 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n      *DAT_08002ffc = param_1[5] << 3 | *DAT_08002ffc & 0xffffff07;\n    }\n    else if (param_1[4] == 0) {\n      *DAT_08003000 = 0;\n      iVar1 = get_pointer_value_080015a0();\n      while ((*DAT_08002ffc & 2) != 0) {\n        iVar2 = get_pointer_value_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08003000 = 1;\n      iVar1 = get_pointer_value_080015a0();\n      while ((*DAT_08002ffc & 2) == 0) {\n        iVar2 = get_pointer_value_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n      *DAT_08002ffc = param_1[5] << 3 | *DAT_08002ffc & 0xffffff07;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[6] == 0) {\n      *DAT_08003004 = 0;\n      iVar1 = get_pointer_value_080015a0();\n      while ((DAT_08003254[9] & 2) != 0) {\n        iVar2 = get_pointer_value_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08003004 = 1;\n      iVar1 = get_pointer_value_080015a0();\n      while ((DAT_08002ffc[9] & 2) == 0) {\n        iVar2 = get_pointer_value_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n      count_down_08003568(1);\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar4 = (DAT_08003254[7] & 0x10000000) == 0;\n    if (bVar4) {\n      DAT_08003254[7] = DAT_08003254[7] | 0x10000000;\n    }\n    if ((*DAT_08003258 & 0x100) == 0) {\n      *DAT_08003258 = *DAT_08003258 | 0x100;\n      iVar1 = get_pointer_value_080015a0();\n      while ((*DAT_08003258 & 0x100) == 0) {\n        iVar2 = get_pointer_value_080015a0();\n        if (100 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    if (param_1[3] == 1) {\n      DAT_08003254[8] = DAT_08003254[8] | 1;\n    }\n    else if (param_1[3] == 0) {\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffe;\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffb;\n    }\n    else if (param_1[3] == 5) {\n      DAT_08003254[8] = DAT_08003254[8] | 4;\n      DAT_08003254[8] = DAT_08003254[8] | 1;\n    }\n    else {\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffe;\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffb;\n    }\n    if (param_1[3] == 0) {\n      iVar1 = get_pointer_value_080015a0();\n      while ((DAT_08003254[8] & 2) != 0) {\n        iVar2 = get_pointer_value_080015a0();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar1 = get_pointer_value_080015a0();\n      while ((DAT_08003254[8] & 2) == 0) {\n        iVar2 = get_pointer_value_080015a0();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar4) {\n      DAT_08003254[7] = DAT_08003254[7] & 0xefffffff;\n    }\n  }\n  if (param_1[7] == 0) {\nLAB_0800324a:\n    uVar3 = 0;\n  }\n  else if ((DAT_08003254[1] & 0xc) == 8) {\n    uVar3 = 1;\n  }\n  else if (param_1[7] == 2) {\n    *DAT_0800325c = 0;\n    iVar1 = get_pointer_value_080015a0();\n    do {\n      if ((*DAT_08003254 & 0x2000000) == 0) {\n        if (param_1[8] == 0x10000) {\n          DAT_08003254[1] = param_1[2] | DAT_08003254[1] & 0xfffdffff;\n        }\n        DAT_08003254[1] = param_1[9] | param_1[8] | DAT_08003254[1] & 0xffc2ffff;\n        *DAT_0800325c = 1;\n        iVar1 = get_pointer_value_080015a0();\n        while ((*DAT_08003254 & 0x2000000) == 0) {\n          iVar2 = get_pointer_value_080015a0();\n          if (2 < (uint)(iVar2 - iVar1)) {\n            return 3;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      iVar2 = get_pointer_value_080015a0();\n    } while ((uint)(iVar2 - iVar1) < 3);\n    uVar3 = 3;\n  }\n  else {\n    *DAT_0800325c = 0;\n    iVar1 = get_pointer_value_080015a0();\n    do {\n      if ((*DAT_08003254 & 0x2000000) == 0) goto LAB_0800324a;\n      iVar2 = get_pointer_value_080015a0();\n    } while ((uint)(iVar2 - iVar1) < 3);\n    uVar3 = 3;\n  }\n  return uVar3;\n}\n\n",
            "called": [
                "FUN_08003568",
                "FUN_080015a0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08002d98",
            "calling": [
                "FUN_080052a0"
            ],
            "imported": false,
            "current_name": "FUNC_08002d98"
        },
        "FUN_0800172a": {
            "renaming": {
                "FUN_0800172a": "apply_mask_and_set_byte_0800172a",
                "param_1": "byte_address",
                "param_2": "mask_2",
                "param_3": "mask_3",
                "uVar1": "shifted_value",
                "get_shifted_value_080015fc": "get_shifted_value",
                "apply_mask_0800166c": "apply_mask",
                "set_byte_at_address_based_on_sign_of_input_08001618": "set_byte_at_address_based_on_sign"
            },
            "code": "void apply_mask_and_set_byte_0800172a(char byte_address, unsigned int shifted_value, unsigned int mask_2, unsigned int mask_3)\n{\n    unsigned int shifted_value_with_mask = apply_mask(shifted_value, mask_2, mask_3);\n    set_byte_at_address_based_on_sign(byte_address, shifted_value_with_mask);\n    return;\n}",
            "called": [
                "FUN_080015fc",
                "FUN_0800166c",
                "FUN_08001618"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800172a",
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "imported": false,
            "current_name": "apply_mask_and_set_byte_0800172a"
        },
        "FUN_080009d4": {
            "renaming": {
                "FUN_080009d4": "check_params_and_return_result_080009d4",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag",
                "check_and_return_params_08000978": "check_and_return_params"
            },
            "code": "bool check_params_and_return_result_080009d4(void)\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  check_and_return_params();\n  return !(bool)carry_flag || (bool)zero_flag;\n}",
            "called": [
                "FUN_08000978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009d4",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "check_params_and_return_result_080009d4"
        },
        "FUN_08002d8a": {
            "renaming": {
                "FUN_08002d8a": "do_nothing_08002d8a"
            },
            "code": "\nvoid do_nothing_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d8a",
            "calling": [
                "FUN_080014f0"
            ],
            "imported": false,
            "current_name": "do_nothing_08002d8a"
        },
        "FUN_08005780": {
            "renaming": {
                "FUN_08005780": "enable_interrupts_08005780",
                "DAT_080057dc": "interrupt_flag_register",
                "DAT_080057e0": "interrupt_mask_register"
            },
            "code": "void enable_interrupts_08005780(void)\n{\n  *DAT_080057dc = *DAT_080057dc | 0x1;\n  DAT_080057e0[1] = DAT_080057e0[1] & DAT_080057dc[0];\n  *DAT_080057dc = *DAT_080057dc & 0xfef6ffff;\n  *DAT_080057dc = *DAT_080057dc & 0xfffbffff;\n  DAT_080057e0[1] = DAT_080057e0[1] & 0xff80ffff;\n  DAT_080057e0[2] = 0x9f0000;\n  *(unsigned int *)(DAT_080057e0 + 0x8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005780",
            "calling": [
                "FUN_080057e8"
            ],
            "imported": false,
            "current_name": "enable_interrupts_08005780"
        },
        "FUN_08009744": {
            "renaming": {
                "FUN_08009744": "get_local_value_08009744",
                "param_1": "result",
                "param_2": "input",
                "puVar1": "ptr_to_data",
                "iVar2": "local_value"
            },
            "code": "void get_local_value_08009744(int *result, undefined4 input) {\n  undefined *ptr_to_data = PTR_DAT_08009764;\n  *(undefined4 *)ptr_to_data = 0;\n  int local_value = get_local_value_08009744_08005728(input);\n  if ((local_value == -1) && (*(int *)ptr_to_data != 0)) {\n    *result = *(int *)ptr_to_data;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08005728"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009744",
            "calling": [
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "imported": false,
            "current_name": "get_local_value_08009744"
        },
        "FUN_08003640": {
            "renaming": {
                "FUN_08003640": "validate_params_08003640",
                "param_1": "params",
                "uVar1": "result",
                "do_nothing_08003696": "do_nothing",
                "*param_1": "*params",
                "update_parameters_08003c94": "update_params"
            },
            "code": "int validate_params_08003640(int *params)\n{\n  int result;\n  if (params == NULL) {\n    result = 1;\n  }\n  else {\n    if (*(params + 0x3d) == 0) {\n      *(params + 0xf) = 0;\n      do_nothing(params);\n    }\n    *(params + 0x3d) = 2;\n    update_params(*params, params + 1);\n    *(params + 0x3d) = 1;\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08003696",
                "FUN_08003c94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003640",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "validate_params_08003640"
        },
        "FUN_08009980": {
            "renaming": {
                "FUN_08009980": "allocate_memory_and_initialize_to_zero_08009980",
                "param_1": "starting_address",
                "param_2": "num_rows",
                "param_3": "row_size",
                "puVar1": "allocated_memory",
                "uVar2": "adjusted_size",
                "puVar3": "current_address"
            },
            "code": "undefined4 *allocate_memory_and_initialize_to_zero_08009980(undefined4 starting_address, int num_rows, int row_size)\n{\n    undefined4 *allocated_memory;\n    uint32_t memory_size = num_rows * row_size;\n    allocated_memory = (undefined4 *)FUNC_08008af8(starting_address, memory_size);\n    if (allocated_memory == (undefined4 *)0x0) {\n        return (undefined4 *)0x0;\n    }\n    uint32_t adjusted_size = (allocated_memory[-1] & 0xfffffffc) - 4;\n    if (adjusted_size < 0x25) {\n        undefined4 *current_address = allocated_memory;\n        if (0x13 < adjusted_size) {\n            *allocated_memory = 0;\n            allocated_memory[1] = 0;\n            if (0x1b < adjusted_size) {\n                allocated_memory[2] = 0;\n                allocated_memory[3] = 0;\n                if (adjusted_size == 0x24) {\n                    allocated_memory[4] = 0;\n                    allocated_memory[5] = 0;\n                    current_address = allocated_memory + 6;\n                }\n                else {\n                    current_address = allocated_memory + 4;\n                }\n                *current_address = 0;\n                current_address[1] = 0;\n                current_address[2] = 0;\n                return allocated_memory;\n            }\n            current_address = allocated_memory + 2;\n        }\n        *current_address = 0;\n        current_address[1] = 0;\n        current_address[2] = 0;\n        return allocated_memory;\n    }\n    write_bytes_to_memory_08005d68(allocated_memory, 0);\n    return allocated_memory;\n}",
            "called": [
                "FUN_08005d68",
                "FUN_08008af8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009980",
            "calling": [
                "FUN_080090c0"
            ],
            "imported": false,
            "current_name": "allocate_memory_and_initialize_to_zero_08009980"
        },
        "FUN_08005e9c": {
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n/* WARNING: Could not reconcile some variable overlaps */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  int **ppiVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  int iVar8;\n  int *piVar9;\n  undefined4 uVar10;\n  int **ppiVar11;\n  undefined uVar12;\n  ushort uVar13;\n  int **ppiVar14;\n  byte **ppbVar15;\n  int *piVar16;\n  int **ppiVar17;\n  char *pcVar18;\n  uint uVar19;\n  undefined *puVar20;\n  int *piVar21;\n  int *piVar22;\n  int *piVar23;\n  int *piVar24;\n  int *piVar25;\n  byte *pbVar26;\n  int *piVar27;\n  int *piVar28;\n  undefined4 *puVar29;\n  byte *pbVar30;\n  bool bVar31;\n  longlong lVar32;\n  undefined8 uVar33;\n  undefined8 uVar34;\n  undefined4 local_188;\n  int *piStack_184;\n  int **local_180;\n  undefined *puStack_17c;\n  int **local_178;\n  undefined4 *local_16c;\n  int *local_168;\n  byte *local_164;\n  int *local_160;\n  int *local_15c;\n  int **local_158;\n  int **local_154;\n  undefined8 local_150;\n  int *local_148;\n  int *local_144;\n  int *local_140;\n  int **local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  uint local_12c;\n  undefined4 local_128;\n  undefined4 local_124;\n  undefined4 local_120;\n  undefined *local_11c;\n  int *local_118;\n  int *local_114;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  int *local_100;\n  int *local_fc;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0;\n  undefined auStack_ec [4];\n  char local_e8;\n  undefined local_e7;\n  char local_e6 [6];\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int *local_d4;\n  int *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  local_16c = param_1;\n  local_160 = param_2;\n  local_154 = param_4;\n  ppiVar2 = (int **)get_data_pointer_08008ad4();\n  local_114 = *ppiVar2;\n  local_118 = (int *)reverse_engineered_function_08005e40(local_114);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = FUNC_08008af8(local_16c,0x40);\n    *local_160 = iVar3;\n    local_160[4] = iVar3;\n    if (iVar3 == 0) {\n      *local_16c = 0xc;\n      return (byte *)0xffffffff;\n    }\n    local_160[5] = 0x40;\n  }\n  local_128 = 0;\n  local_138 = (int *)0x0;\n  local_12c = 0;\n  local_d4 = (int *)0x0;\n  local_d0 = (int *)0x0;\n  local_11c = (undefined *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  local_124 = 0;\n  local_120 = 0;\n  ppiVar2 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar2;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)piVar27);\n        *ppiVar2 = param_3;\n        *(int **)((int)ppiVar2 + 4) = piVar27;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = (int **)((int)ppiVar2 + 8);\n        }\n        else {\n          iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800604a;\n          ppiVar2 = local_cc;\n        }\n        local_164 = local_164 + (int)piVar27;\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    piVar25 = (int *)0x0;\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    puVar29 = local_16c;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    switch(piVar24) {\n    case (int *)0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (piVar24 == (int *)0x0) goto LAB_08006216;\n      piVar16 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (int **)0x1;\n      piVar23 = (int *)&local_8c;\n      piVar22 = piVar16;\n      local_8c = (char)piVar24;\n      goto LAB_08006298;\n    case (int *)0x23:\n      piVar25 = (int *)((uint)piVar25 | 1);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x27:\n      iVar3 = get_data_pointer_08008ad4(local_16c);\n      local_110 = *(int **)(iVar3 + 4);\n      piVar24 = (int *)reverse_engineered_function_08005e40(local_110);\n      local_104 = piVar24;\n      iVar3 = get_data_pointer_08008ad4(puVar29);\n      local_108 = *(byte **)(iVar3 + 8);\n      if (piVar24 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 0x400);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2a:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2b:\n      local_f5 = 0x2b;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x2d:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\nLAB_08006602:\n      piVar25 = (int *)((uint)piVar25 | 4);\n      goto LAB_08005f4a;\n    case (int *)0x2e:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x2a) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (piVar24 + -0xc < (int *)0xa) {\n        piVar27 = (int *)((int)(piVar24 + -0xc) + (int)piVar27 * 10);\n        piVar24 = (int *)(uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case (int *)0x30:\n      piVar25 = (int *)((uint)piVar25 | 0x80);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x31:\n    case (int *)0x32:\n    case (int *)0x33:\n    case (int *)0x34:\n    case (int *)0x35:\n    case (int *)0x36:\n    case (int *)0x37:\n    case (int *)0x38:\n    case (int *)0x39:\n      goto switchD_08005f58_caseD_31;\n    case (int *)0x41:\n    case (int *)0x45:\n    case (int *)0x46:\n    case (int *)0x47:\n    case (int *)0x61:\n    case (int *)0x65:\n    case (int *)0x66:\n    case (int *)0x67:\n      puVar29 = (undefined4 *)((int)local_154 + 7U & 0xfffffff8);\n      uVar10 = *puVar29;\n      local_12c = puVar29[1];\n      local_168 = (int *)(local_12c & 0x7fffffff);\n      local_154 = (int **)(puVar29 + 2);\n      local_128 = uVar10;\n      iVar3 = is_valid_input_08001170(uVar10,local_168,0xffffffff,DAT_08006724);\n      if ((iVar3 == 0) &&\n         (iVar3 = check_params_and_return_080009c0(uVar10,local_168,0xffffffff,DAT_08006724), iVar3 == 0)) {\n        iVar3 = is_end_of_string_080009ac(local_128,local_12c,local_124,local_120);\n        piVar23 = (int *)PTR_DAT_08006728;\n        piVar27 = (int *)PTR_DAT_0800672c;\n        if (iVar3 == 0) {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (piVar24 < (int *)0x48) {\n          piVar23 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar25 = (int *)((uint)piVar25 & 0xffffff7f);\n        local_158 = (int **)0x3;\n        local_13c = (int **)0x0;\n        piVar22 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      piVar22 = (int *)is_valid_input_08001170(local_128,local_12c,local_128,local_12c);\n      if (piVar22 != (int *)0x0) {\n        piVar23 = (int *)PTR_DAT_08007898;\n        piVar27 = (int *)PTR_DAT_0800789c;\n        if ((int)local_12c < 0) {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        goto LAB_08006524;\n      }\n      piVar16 = piVar27;\n      if (piVar24 == (int *)0x61) {\n        uVar12 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar12,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          piVar25 = (int *)((uint)piVar25 | 2);\n        }\n        else {\n          param_3 = (int *)FUNC_08008af8(local_16c,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar13 = *(ushort *)(local_160 + 3) | 0x40;\n            *(ushort *)(local_160 + 3) = uVar13;\n            goto LAB_0800604e;\n          }\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          piVar25 = (int *)((uint)piVar25 | 2);\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        piVar27 = piVar16;\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          uVar19 = local_12c + 0x80000000;\n          piVar16 = piVar27;\n        }\n        else {\n          local_144 = (int *)0x0;\n          uVar19 = local_12c;\n        }\n        local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n        local_158 = (int **)local_128;\n        if (piVar24 == (int *)0x61) {\n          uVar33 = calculate_float_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUNC_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = is_input_valid_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 != 0) {\n            local_f0 = (int *)0x1;\n          }\n          local_158 = (int **)PTR_s_0123456789abcdef_08007888;\n          local_13c = ppiVar2;\n          local_138 = piVar28;\n          local_134 = piVar24;\n          local_130 = piVar16;\n          local_100 = piVar25;\n          local_fc = param_3;\n          puVar20 = PTR_s_0123456789abcdef_08007888;\n          uVar33 = local_150;\n          goto LAB_080072ba;\n        }\n        piVar27 = piVar16;\n        if (piVar24 == (int *)0x41) {\n          uVar33 = calculate_float_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUNC_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = is_input_valid_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 == 0) {\n            local_158 = (int **)PTR_s_0123456789ABCDEF_0800739c;\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar16;\n            local_100 = piVar25;\n            local_fc = param_3;\n            puVar20 = PTR_s_0123456789ABCDEF_0800739c;\n            uVar33 = local_150;\n          }\n          else {\n            local_f0 = (int *)0x1;\n            local_158 = (int **)PTR_s_0123456789ABCDEF_08007894;\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar16;\n            local_100 = piVar25;\n            local_fc = param_3;\n            puVar20 = PTR_s_0123456789ABCDEF_08007894;\n            uVar33 = local_150;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (piVar24 == (int *)0x41) {\n          uVar12 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = (int *)((uint)piVar25 | 0x100);\n        local_148 = piVar22;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar16 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if (((uint)piVar24 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar16 = (int *)0x1;\n            local_148 = piVar27;\n          }\n          goto LAB_0800724a;\n        }\n        uVar19 = local_12c;\n        local_144 = piVar22;\n        if ((int)local_12c < 0) goto LAB_08007414;\n      }\n      local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n      piStack_184 = piVar27;\n      local_158 = (int **)local_128;\n      if (piVar24 == (int *)0x66) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUNC_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar22 = (int *)((int)piVar23 + (int)piVar27);\n        local_150._0_4_ = piVar27;\nLAB_0800764c:\n        if ((*(byte *)piVar23 == 0x30) &&\n           (iVar3 = is_input_valid_08000998(local_158,uVar19,local_124,local_120), iVar3 == 0)) {\n          local_f0 = (int *)(1 - (int)(int *)local_150);\n        }\n        piVar22 = (int *)((int)piVar22 + (int)local_f0);\n      }\n      else if (piVar24 == (int *)0x46) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUNC_080079e8(local_16c,local_180,local_128,uVar19);\n        local_150._0_4_ = piVar27;\nLAB_08007760:\n        piVar22 = (int *)((int)piVar23 + (int)(int *)local_150);\n        if (piVar24 == (int *)0x46) goto LAB_0800764c;\n      }\n      else {\n        local_178 = &local_e0;\n        local_150._0_4_ = piVar27;\n        if (local_168 == (int *)0x45) {\n          local_150._0_4_ = (int *)((int)piVar27 + 1);\n        }\n        local_188 = 2;\n        piStack_184 = (int *)local_150;\n        local_180 = &local_f0;\n        puStack_17c = auStack_ec;\n        piVar23 = (int *)FUNC_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar16 = local_e0;\n        if (piVar24 == (int *)0x67) {\n          if (((uint)piVar25 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (piVar24 == (int *)0x47) {\n          if (((uint)piVar25 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar22 = (int *)((int)(int *)local_150 + (int)piVar23);\n      }\n      iVar3 = is_input_valid_08000998(local_158,uVar19,local_124,local_120);\n      piVar16 = piVar22;\n      if (iVar3 == 0) {\n        for (; piVar16 = local_e0, local_e0 < piVar22; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)piVar16 - (int)piVar23);\n      goto LAB_08006cb0;\n    case (int *)0x43:\n    case (int *)0x63:\n      piVar16 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      piVar22 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (int **)0x1;\n      local_8c = SUB41(piVar27,0);\n      piVar23 = (int *)&local_8c;\n      goto LAB_08006298;\n    case (int *)0x44:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_08006102;\n    case (int *)0x4c:\n      piVar25 = (int *)((uint)piVar25 | 8);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x4f:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n    case (int *)0x6f:\n      if (((uint)piVar25 & 0x20) == 0) {\n        ppiVar14 = local_154 + 1;\n        if (((uint)piVar25 & 0x10) == 0) {\n          if (((uint)piVar25 & 0x40) == 0) {\n            if (((uint)piVar25 & 0x200) == 0) goto LAB_08006be2;\n            piVar22 = (int *)(uint)*(byte *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n          else {\n            piVar22 = (int *)(uint)*(ushort *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar22 = *local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\n        ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar22 = *ppiVar14;\n        piVar16 = ppiVar14[1];\n        local_154 = ppiVar14 + 2;\n      }\n      iVar3 = 0;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n      break;\n    case (int *)0x53:\n    case (int *)0x73:\n      local_f5 = 0;\n      piVar22 = *local_154;\n      ppiVar14 = local_154 + 1;\n      if (piVar22 == (int *)0x0) {\n        piVar16 = piVar22;\n        piVar23 = (int *)PTR_s__null__08007084;\n        local_168 = piVar27;\n        local_158 = (int **)piVar27;\n        local_154 = ppiVar14;\n        local_148 = piVar22;\n        local_13c = (int **)piVar22;\n        local_134 = piVar22;\n        local_130 = piVar22;\n        if ((int *)0x5 < piVar27) {\n          local_158 = (int **)0x6;\n          local_168 = (int *)local_158;\n        }\n        goto LAB_08006538;\n      }\n      piVar23 = piVar22;\n      if (piVar27 == (int *)0xffffffff) {\n        local_158 = (int **)reverse_engineered_function_08005e40(piVar22);\n      }\n      else {\n        local_148 = (int *)find_byte_in_uint_0800901c(piVar22,0,piVar27);\n        if (local_148 == (int *)0x0) {\n          piVar16 = (int *)(uint)local_f5;\n          piVar22 = local_148;\n          local_168 = piVar27;\n          local_158 = (int **)piVar27;\n          local_154 = ppiVar14;\n          local_13c = (int **)local_148;\n          local_134 = local_148;\n          local_130 = local_148;\n          goto LAB_08006538;\n        }\n        local_158 = (int **)((int)local_148 - (int)piVar22);\n      }\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      piVar16 = (int *)(uint)local_f5;\n      piVar22 = (int *)0x0;\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      local_154 = ppiVar14;\n      goto LAB_08006538;\n    case (int *)0x55:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      iVar3 = 1;\n      local_154 = ppiVar14 + 2;\n      break;\n    case (int *)0x58:\n      local_11c = PTR_s_0123456789ABCDEF_08006730;\n      if (((uint)piVar25 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_080061be;\n    case (int *)0x64:\n    case (int *)0x69:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bcc:\n        piVar22 = *local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(int)*(short *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bcc;\n        piVar22 = (int *)(int)*(char *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\nLAB_08006102:\n      if ((int)piVar16 < 0) {\n        bVar31 = piVar22 != (int *)0x0;\n        piVar22 = (int *)-(int)piVar22;\n        piVar16 = (int *)(-(int)piVar16 - (uint)bVar31);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar3 = 1;\n        iVar8 = 1;\n        piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n        if (((uint)piVar22 | (uint)piVar16) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      piVar21 = piVar25;\n      if (piVar16 != (int *)0x0 || (int *)0x9 < piVar22) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case (int *)0x68:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x68) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar25 = (int *)((uint)piVar25 | 0x200);\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        piVar25 = (int *)((uint)piVar25 | 0x40);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x6a:\n    case (int *)0x71:\n      piVar25 = (int *)((uint)piVar25 | 0x20);\n    case (int *)0x74:\n    case (int *)0x7a:\nswitchD_08005f58_caseD_74:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case (int *)0x6e:\n      ppiVar14 = local_154 + 1;\n      ppbVar15 = (byte **)*local_154;\n      local_154 = ppiVar14;\n      if (((uint)piVar25 & 0x20) != 0) {\n        *ppbVar15 = local_164;\n        ppbVar15[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) != 0) {\n          *(short *)ppbVar15 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if (((uint)piVar25 & 0x200) != 0) {\n          *(char *)ppbVar15 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar15 = local_164;\n      goto LAB_0800620e;\n    case (int *)0x70:\n      local_f4 = 0x7830;\n      local_11c = PTR_s_0123456789abcdef_08006434;\n      piVar22 = *local_154;\n      piVar25 = (int *)((uint)piVar25 | 2);\n      piVar16 = (int *)0x0;\n      iVar3 = 2;\n      piVar24 = (int *)0x78;\n      local_154 = local_154 + 1;\n      break;\n    case (int *)0x75:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bf2:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(uint)*(ushort *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bf2;\n        piVar22 = (int *)(uint)*(byte *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      break;\n    case (int *)0x78:\n      local_11c = PTR_s_0123456789abcdef_08006434;\n      if (((uint)piVar25 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar14 = local_154 + 1;\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) == 0) {\n          if (((uint)piVar25 & 0x200) == 0) goto LAB_08006bbc;\n          piVar22 = (int *)(uint)*(byte *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n        else {\n          piVar22 = (int *)(uint)*(ushort *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        local_154 = ppiVar14;\n      }\nLAB_080061be:\n      if ((((uint)piVar25 & 1) != 0) && (((uint)piVar22 | (uint)piVar16) != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 2);\n        local_f4 = CONCAT11((char)piVar24,0x30);\n      }\n      iVar3 = 2;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      if (iVar3 != 1) goto LAB_08006136;\nLAB_08006980:\n      piVar21 = piVar25;\n      if (piVar16 == (int *)0x0 && piVar22 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar32 = CONCAT44(piVar16,piVar22);\n      piVar23 = (int *)(&bStack_2a + 2);\n      piVar22 = (int *)0x0;\n      pbVar26 = local_108;\n      local_168 = piVar23;\n      local_158 = ppiVar2;\n      local_150._0_4_ = piVar25;\n      local_148 = piVar24;\n      do {\n        iVar3 = (int)((ulonglong)lVar32 >> 0x20);\n        uVar19 = (uint)lVar32;\n        cVar6 = '\\n';\n        get_concatenated_params_080011ec(uVar19,iVar3,10,0);\n        *(byte *)((int)piVar23 + -1) = cVar6 + 0x30;\n        piVar22 = (int *)((int)piVar22 + 1);\n        piVar23 = (int *)((int)piVar23 + -1);\n        if ((((((uint)piVar25 & 0x400) != 0) && (piVar22 == (int *)(uint)*pbVar26)) &&\n            (piVar22 != (int *)0xff)) && (iVar3 != 0 || 9 < uVar19)) {\n          piVar23 = (int *)((int)piVar23 - (int)local_104);\n          copy_string_08009768(piVar23,local_110,local_104);\n          piVar22 = (int *)(uint)pbVar26[1];\n          if (piVar22 != (int *)0x0) {\n            pbVar26 = pbVar26 + 1;\n            piVar22 = (int *)0x0;\n          }\n        }\n        lVar32 = get_concatenated_params_080011ec(uVar19,iVar3,10,0);\n      } while (lVar32 != 0);\n      piVar24 = local_148;\n      piVar25 = (int *)local_150;\n      ppiVar2 = local_158;\n      local_158 = (int **)((int)local_168 - (int)piVar23);\n      local_138 = piVar22;\n      local_108 = pbVar26;\n    }\n    else {\n      piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n      iVar8 = iVar3;\n      if (((uint)piVar22 | (uint)piVar16) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar3 == 0) {\n            local_158 = (int **)((uint)piVar25 & 1);\n            if (local_158 == (int **)0x0) {\n              piVar23 = (int *)(&bStack_2a + 2);\n              piVar25 = piVar21;\n            }\n            else {\n              piVar23 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n              piVar25 = piVar21;\n            }\n          }\n          else {\n            piVar23 = (int *)(&bStack_2a + 2);\n            piVar25 = piVar21;\n            local_158 = (int **)piVar27;\n          }\n        }\n        else {\n          piVar25 = piVar21;\n          if (iVar3 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar22 + '0';\n          piVar23 = (int *)(&bStack_2a + 1);\n          local_158 = (int **)0x1;\n          piVar25 = piVar21;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar3 = iVar8;\n        piVar25 = piVar21;\n        if (iVar8 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar3 == 2) {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = (int *)((uint)piVar22 >> 4 | (int)piVar16 << 0x1c);\n            piVar16 = (int *)((uint)piVar16 >> 4);\n            piVar23 = (int *)((int)piVar23 + -1);\n            *(undefined *)piVar23 = local_11c[(uint)piVar22 & 0xf];\n            piVar22 = piVar21;\n          } while (((uint)piVar21 | (uint)piVar16) != 0);\n        }\n        else {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = piVar23;\n            piVar9 = (int *)((uint)piVar22 >> 3 | (int)piVar16 << 0x1d);\n            piVar16 = (int *)((uint)piVar16 >> 3);\n            iVar3 = ((uint)piVar22 & 7) + 0x30;\n            *(byte *)((int)piVar21 + -1) = (byte)iVar3;\n            piVar23 = (int *)((int)piVar21 + -1);\n            piVar22 = piVar9;\n          } while (((uint)piVar9 | (uint)piVar16) != 0);\n          if ((((uint)piVar25 & 1) != 0) && (iVar3 != 0x30)) {\n            piVar23 = (int *)((int)piVar21 + -2);\n            *(byte *)((int)piVar21 + -2) = 0x30;\n            local_158 = (int **)(&bStack_2a + (2 - (int)piVar23));\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (int **)(&bStack_2a + (2 - (int)piVar23));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = piVar27;\n    local_168 = (int *)local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  piVar28 = local_160;\n  if (local_d0 == (int *)0x0) {\nLAB_0800604a:\n    uVar13 = *(ushort *)(local_160 + 3);\n  }\n  else {\n    reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n    uVar13 = *(ushort *)(piVar28 + 3);\n  }\nLAB_0800604e:\n  if ((uVar13 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (piVar24 == (int *)0x6c) {\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    piVar25 = (int *)((uint)piVar25 | 0x20);\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    piVar25 = (int *)((uint)piVar25 | 0x10);\n  }\n  goto LAB_08005f4a;\n  while( true ) {\n    iVar8 = is_input_valid_08000998((int)uVar33,uVar10,local_124,local_120);\n    if (iVar8 != 0) break;\nLAB_080072ba:\n    piVar22 = param_3;\n    piVar16 = (int *)((int)piVar16 + -1);\n    uVar33 = FUNC_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,DAT_080073a0);\n    iVar3 = convert_uint_to_signed_int_0800119c();\n    uVar34 = convert_to_64bit_080003f4();\n    uVar33 = FUNC_08000158((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar34,\n                          (int)((ulonglong)uVar34 >> 0x20));\n    uVar10 = (undefined4)((ulonglong)uVar33 >> 0x20);\n    param_3 = (int *)((int)piVar22 + 1);\n    *(undefined *)piVar22 = puVar20[iVar3];\n    if (piVar16 == (int *)0xffffffff) break;\n  }\n  piVar23 = local_fc;\n  piVar25 = local_100;\n  piVar27 = local_130;\n  piVar24 = local_134;\n  piVar28 = local_138;\n  ppiVar2 = local_13c;\n  local_13c = (int **)piVar16;\n  local_134 = piVar22;\n  local_150 = uVar33;\n  iVar8 = is_end_of_string_080009e8((int)uVar33,uVar10,0,DAT_080073a4);\n  if (iVar8 == 0) {\n    iVar8 = is_input_valid_08000998((int *)local_150,local_150._4_4_,0,DAT_080073a4);\n    if ((iVar8 != 0) && (iVar3 << 0x1f < 0)) goto LAB_0800748a;\n    if (-1 < (int)local_13c) {\n      piVar16 = (int *)((byte *)((int)local_13c + 1) + (int)param_3);\n      piVar22 = param_3;\n      do {\n        param_3 = (int *)((int)piVar22 + 1);\n        *(byte *)piVar22 = 0x30;\n        piVar22 = param_3;\n      } while (piVar16 != param_3);\n    }\n  }\n  else {\nLAB_0800748a:\n    bVar1 = *(byte *)((int)local_158 + 0xf);\n    bVar7 = *(byte *)piVar22;\n    piVar22 = param_3;\n    local_e0 = local_134;\n    while (bVar1 == bVar7) {\n      *(byte *)((int)piVar22 + -1) = 0x30;\n      bVar7 = *(byte *)((int)local_e0 + -1);\n      piVar22 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar7 == 0x39) {\n      bVar7 = *(byte *)((int)local_158 + 10);\n    }\n    else {\n      bVar7 = bVar7 + 1;\n    }\n    *(byte *)((int)piVar22 + -1) = bVar7;\n  }\n  local_138 = (int *)((int)param_3 - (int)piVar23);\nLAB_08006cb0:\n  local_134 = local_f0;\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0 + 3) < 0 == SCARRY4((int)local_f0,3)) &&\n       ((int)local_f0 <= (int)piVar27)) {\n      if ((int)local_f0 < (int)local_138) {\n        local_158 = (int **)((int)local_138 + (int)local_118);\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (int **)((int)local_158 + (1 - (int)local_f0));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        piVar24 = (int *)0x67;\n      }\n      else {\n        if ((int)piVar25 << 0x1f < 0) {\n          local_158 = (int **)((int)local_f0 + (int)local_118);\n        }\n        else {\n          local_158 = (int **)local_f0;\n        }\n        if (-1 < (int)piVar25 << 0x15) {\n          piVar24 = (int *)0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074fc;\n        }\n        piVar24 = (int *)0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    piVar24 = (int *)((int)piVar24 + -2);\n    local_168 = (int *)((uint)piVar24 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8 = (char)piVar24;\n    if (local_168 == (int *)0x41) {\n      local_e8 = local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0 + -1);\n    if ((int)piVar27 < 0) {\n      local_e7 = 0x2d;\n      local_f0 = (int *)(1 - (int)local_f0);\n    }\n    else {\n      local_e7 = 0x2b;\n      local_f0 = piVar27;\n    }\n    if ((int)local_f0 < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e6[0] = 0x30;\n        pcVar18 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar18 = (char)local_f0 + '0';\n      pcVar18 = pcVar18 + 1;\n    }\n    else {\n      pbVar30 = abStack_dc + 3;\n      pbVar26 = pbVar30;\n      do {\n        pbVar5 = pbVar26;\n        piVar22 = (int *)((ulonglong)DAT_08007890 * ZEXT48(local_f0) >> 0x23);\n        pbVar5[-1] = (char)local_f0 + (char)piVar22 * -10 + 0x30;\n        pbVar26 = pbVar5 + -1;\n        local_f0 = piVar22;\n      } while ((int *)0x9 < piVar22);\n      uVar19 = (uint)(piVar22 + 0xc) & 0xff;\n      pbVar5[-2] = (byte)uVar19;\n      if (pbVar5 + -2 < pbVar30) {\n        pbVar5 = pbVar26;\n        puVar20 = (undefined *)((int)&local_e8 + 2);\n        while( true ) {\n          *puVar20 = (char)uVar19;\n          if (pbVar30 == pbVar5) break;\n          uVar19 = (uint)*pbVar5;\n          pbVar5 = pbVar5 + 1;\n          puVar20 = puVar20 + 1;\n        }\n        pcVar18 = (char *)(((int)&local_188 * 2 - (int)pbVar26) + 0x152);\n      }\n      else {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar18 + -(int)&local_e8);\n    local_158 = (int **)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)piVar25 << 0x1f < 0)) {\n      local_158 = (int **)((int)local_158 + (int)local_118);\n    }\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    piVar25 = (int *)((uint)piVar25 & 0xfffffbff | 0x100);\n    local_f0 = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0 < 1) {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_168 = (int *)0x1;\n        local_158 = (int **)0x1;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (int **)((byte *)((int)local_118 + 1) + (int)piVar27);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      piVar25 = local_140;\n    }\n    else {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_158 = (int **)local_f0;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (int **)((byte *)((int)local_f0 + (int)local_118) + (int)piVar27);\n      }\nLAB_080074f8:\n      if (-1 < (int)piVar25 << 0x15) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      uVar19 = (uint)*local_108;\n      while (uVar19 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar19) goto LAB_08007524;\n          uVar4 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar19);\n          if (uVar4 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar19 = uVar4;\n          if (uVar4 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int **)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (int **)((int)local_158 + (int)local_104 * (int)((int)local_130 + (int)local_13c))\n      ;\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      piVar25 = local_140;\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = local_144;\nLAB_08006538:\n    if (piVar16 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar16 = (int *)0x2d;\n    piVar22 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n  }\nLAB_08006298:\n  piVar27 = local_160;\n  puVar29 = local_16c;\n  local_150._0_4_ = (int *)((uint)piVar25 & 2);\n  if ((int *)local_150 != (int *)0x0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  local_144 = (int *)((uint)piVar25 & 0x84);\n  if ((local_144 == (int *)0x0) &&\n     (piVar21 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar21)) {\n    if (0x10 < (int)piVar21) {\n      piVar16 = (int *)0x10;\n      local_100 = piVar24;\n      do {\n        piVar9 = piVar21;\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006438;\n        ppiVar2[1] = piVar16;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n          piVar24 = local_100;\n        }\n        else {\n          local_140 = piVar16;\n          iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = local_140;\n          piVar24 = local_100;\n        }\n        piVar21 = piVar9 + -4;\n        local_100 = piVar24;\n      } while (0x10 < (int)piVar21);\n      piVar21 = piVar9 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar21);\n    *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006438;\n    ppiVar2[1] = piVar21;\n    if ((int)local_d4 < 8) {\n      piVar16 = (int *)(uint)local_f5;\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar16 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar16 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 1);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f5;\n    ppiVar2[1] = (int *)0x1;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if ((int *)local_150 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 2);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f4;\n    ppiVar2[1] = (int *)0x2;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  puVar20 = PTR_s_0000000000000000Infinity_08006a54;\n  if ((local_144 == (int *)0x80) &&\n     (piVar16 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar16)) {\n    if (0x10 < (int)piVar16) {\n      do {\n        while( true ) {\n          piVar21 = piVar16;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)puVar20;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = reverse_copy_and_update_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = piVar21 + -4;\n          if ((int)(piVar21 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar16 = piVar21 + -4;\n      } while (0x10 < (int)(piVar21 + -4));\nLAB_08006882:\n      piVar16 = piVar21 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar16);\n    *ppiVar2 = (int *)puVar20;\n    ppiVar2[1] = piVar16;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  puVar20 = PTR_s_0000000000000000Infinity_0800643c;\n  piVar22 = (int *)((int)piVar22 - (int)local_158);\n  if (0 < (int)piVar22) {\n    piVar16 = (int *)PTR_s_0000000000000000Infinity_08007088;\n    if (0x10 < (int)piVar22) {\n      do {\n        while( true ) {\n          piVar16 = piVar22;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)puVar20;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = reverse_copy_and_update_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar22 = piVar16 + -4;\n          if ((int)(piVar16 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar22 = piVar16 + -4;\n      } while (0x10 < (int)(piVar16 + -4));\nLAB_080063d2:\n      piVar22 = piVar16 + -4;\n      piVar16 = (int *)puVar20;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar22);\n    *ppiVar2 = piVar16;\n    ppiVar2[1] = piVar22;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_d0;\n  if (((uint)piVar25 & 0x100) == 0) {\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)local_158);\n    *ppiVar2 = piVar23;\n    ppiVar2[1] = (int *)local_158;\n    if ((int)local_d4 < 8) {\nLAB_0800640e:\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else if ((int)piVar24 < 0x66) {\n    local_158 = (int **)((int)local_d0 + 1);\n    piVar27 = (int *)((int)local_d4 + 1);\n    ppiVar14 = ppiVar2 + 2;\n    local_d0 = (int *)local_158;\n    if (((int)local_138 < 2) && (((uint)piVar25 & 1) == 0)) {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)piVar27 < 8) {\n        local_150._0_4_ = (int *)((int)local_d4 + 2);\n        ppiVar2 = ppiVar2 + 4;\n      }\n      else {\n        local_d4 = piVar27;\n        iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        local_150._0_4_ = (int *)((int)local_d4 + 1);\n        ppiVar14 = local_cc;\n        local_158 = (int **)local_d0;\n        ppiVar2 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      local_d4 = piVar27;\n      if (7 < (int)piVar27) {\n        iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar14 = local_cc;\n        local_158 = (int **)local_d0;\n      }\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_158 = (int **)((int)local_158 + (int)local_118);\n      *ppiVar14 = local_114;\n      ppiVar14[1] = local_118;\n      local_d0 = (int *)local_158;\n      if ((int)local_d4 < 8) {\n        ppiVar17 = ppiVar14 + 2;\n      }\n      else {\n        iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar17 = local_cc;\n      }\n      piVar24 = local_d4;\n      local_150._0_4_ = (int *)((int)local_d4 + 1);\n      piVar22 = (int *)((int)local_138 + -1);\n      ppiVar11 = ppiVar17 + 2;\n      local_158 = (int **)local_d0;\n      local_144 = (int *)local_150;\n      iVar3 = is_input_valid_08000998(local_128,local_12c,local_124,local_120);\n      piVar27 = local_160;\n      puVar29 = local_16c;\n      puVar20 = PTR_s_0000000000000000Infinity_08006d94;\n      if (iVar3 == 0) {\n        local_158 = (int **)((int)local_158 + (int)piVar22);\n        *ppiVar17 = (int *)((int)piVar23 + 1);\n        ppiVar17[1] = piVar22;\n        local_d0 = (int *)local_158;\n        if ((int)(int *)local_150 < 8) {\n          local_150._0_4_ = (int *)((int)piVar24 + 2);\n          ppiVar14 = ppiVar11;\n          ppiVar2 = ppiVar17 + 4;\n        }\n        else {\nLAB_08006d9c:\n          local_158 = (int **)local_d0;\n          local_d4 = (int *)local_150;\n          iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          local_150._0_4_ = (int *)((int)local_d4 + 1);\n          local_158 = (int **)local_d0;\n          ppiVar14 = local_cc;\n          ppiVar2 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar14 = ppiVar17;\n        ppiVar2 = ppiVar11;\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)local_158;\n          piVar24 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n          local_d4 = local_144;\n          if (0x10 < (int)piVar22) {\n            while( true ) {\n              local_d0 = local_d0 + 4;\n              *ppiVar17 = (int *)puVar20;\n              ppiVar17[1] = (int *)0x10;\n              if ((int)local_d4 < 8) {\n                ppiVar17 = ppiVar17 + 2;\n              }\n              else {\n                iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar27,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar17 = local_cc;\n              }\n              piVar22 = piVar22 + -4;\n              if ((int)piVar22 < 0x11) break;\n              local_d4 = (int *)((int)local_d4 + 1);\n            }\n            local_150._0_4_ = (int *)((int)local_d4 + 1);\n            ppiVar11 = ppiVar17 + 2;\n            piVar24 = (int *)puVar20;\n            local_158 = (int **)local_d0;\n          }\n          *ppiVar17 = piVar24;\n          ppiVar17[1] = piVar22;\n          local_158 = (int **)((int)local_158 + (int)piVar22);\n          local_d0 = (int *)local_158;\n          if (7 < (int)(int *)local_150) goto LAB_08006d9c;\n          local_150._0_4_ = (int *)((int)(int *)local_150 + 1);\n          ppiVar2 = ppiVar11 + 2;\n          ppiVar14 = ppiVar11;\n        }\n      }\n    }\n    ppiVar14[1] = local_10c;\n    local_d0 = (int *)((int)local_158 + (int)local_10c);\n    local_d4 = (int *)local_150;\n    *ppiVar14 = (int *)&local_e8;\n    piVar27 = local_d0;\n    if (7 < (int)(int *)local_150) {\n      iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else {\n    iVar3 = is_input_valid_08000998(local_128,local_12c,local_124,local_120);\n    if (iVar3 == 0) {\n      if ((int)local_f0 < 1) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)piVar27 + 1);\n        *ppiVar2 = (int *)PTR_DAT_08006d98;\n        ppiVar2[1] = (int *)0x1;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        if (((local_f0 != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)local_d0 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n          }\n          puVar29 = local_16c;\n          puVar20 = PTR_s_0000000000000000Infinity_0800788c;\n          if ((int)local_f0 < 0) {\n            piVar27 = (int *)-(int)local_f0;\n            if ((int)(local_f0 + 4) < 0 != SCARRY4((int)local_f0,0x10)) {\n              do {\n                local_d4 = (int *)((int)local_d4 + 1);\n                local_d0 = local_d0 + 4;\n                *ppiVar2 = (int *)puVar20;\n                ppiVar2[1] = (int *)0x10;\n                if ((int)local_d4 < 8) {\n                  ppiVar2 = ppiVar2 + 2;\n                }\n                else {\n                  iVar3 = reverse_copy_and_update_080097cc(puVar29,local_160,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  ppiVar2 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)local_d0 + (int)piVar27);\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = piVar27;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\n          local_d0 = (int *)((int)local_d0 + (int)local_138);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar24 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar24 = local_138;\n        }\n        if (0 < (int)piVar24) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar24);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = piVar24;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08006d94;\n        piVar22 = local_134;\n        if (-1 < (int)piVar24) {\n          piVar22 = (int *)((int)local_134 - (int)piVar24);\n        }\n        piVar24 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n        if (0 < (int)piVar22) {\n          for (; 0x10 < (int)piVar22; piVar22 = piVar22 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = piVar27 + 4;\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n            piVar24 = (int *)puVar20;\n          }\n          local_d4 = (int *)((int)local_d4 + 1);\n          piVar27 = (int *)((int)piVar27 + (int)piVar22);\n          *ppiVar2 = piVar24;\n          ppiVar2[1] = piVar22;\n          local_d0 = piVar27;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar22 = local_104;\n        piVar24 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08007398;\n        piVar16 = (int *)((int)local_134 + (int)piVar23);\n        if (((uint)piVar25 & 0x400) != 0) {\n          local_158 = (int **)((int)piVar23 + (int)local_138);\n          pbVar26 = local_108;\n          local_150._0_4_ = piVar28;\n          local_144 = piVar25;\n          local_140 = piVar23;\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int **)0x0) goto LAB_0800717e;\n          pbVar26 = pbVar26 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)piVar27 + (int)piVar22);\n            *ppiVar2 = local_110;\n            ppiVar2[1] = piVar22;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar24,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = (int *)(uint)*pbVar26;\n            piVar28 = (int *)((int)local_158 - (int)piVar16);\n            if ((int)piVar27 <= (int)(int *)((int)local_158 - (int)piVar16)) {\n              piVar28 = piVar27;\n            }\n            if (0 < (int)piVar28) {\n              local_d0 = (int *)((int)local_d0 + (int)piVar28);\n              local_d4 = (int *)((int)local_d4 + 1);\n              *ppiVar2 = piVar16;\n              ppiVar2[1] = piVar28;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar2 = local_cc;\n                piVar27 = (int *)(uint)*pbVar26;\n              }\n            }\n            piVar25 = piVar27;\n            if (-1 < (int)piVar28) {\n              piVar25 = (int *)((int)piVar27 - (int)piVar28);\n            }\n            if (0 < (int)piVar25) {\n              for (; 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n                while( true ) {\n                  local_d4 = (int *)((int)local_d4 + 1);\n                  local_d0 = local_d0 + 4;\n                  *ppiVar2 = (int *)puVar20;\n                  ppiVar2[1] = (int *)0x10;\n                  if ((int)local_d4 < 8) break;\n                  iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar24,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  piVar25 = piVar25 + -4;\n                  ppiVar2 = local_cc;\n                  if ((int)piVar25 < 0x11) goto LAB_08007156;\n                }\n                ppiVar2 = ppiVar2 + 2;\n              }\nLAB_08007156:\n              local_d4 = (int *)((int)local_d4 + 1);\n              local_d0 = (int *)((int)local_d0 + (int)piVar25);\n              *ppiVar2 = (int *)puVar20;\n              ppiVar2[1] = piVar25;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = local_cc;\n              }\n            }\n            piVar16 = (int *)((int)piVar16 + (int)piVar27);\n            piVar27 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int **)0x0) {\n              piVar23 = local_140;\n              piVar25 = local_144;\n              piVar28 = (int *)local_150;\n              local_108 = pbVar26;\n              if ((int *)((int)local_140 + (int)local_138) <= piVar16) {\n                piVar16 = (int *)((int)local_140 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int **)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0 < (int)local_138) || (((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)piVar27 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar24 = (int *)((int)local_138 - (int)local_f0);\n        piVar22 = (int *)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16);\n        if ((int)piVar24 <= (int)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16)) {\n          piVar22 = piVar24;\n        }\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar22);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar16;\n          ppiVar2[1] = piVar22;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar24 = (int *)((int)local_138 - (int)local_f0);\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08007088;\n        if (-1 < (int)piVar22) {\n          piVar24 = (int *)((int)piVar24 - (int)piVar22);\n        }\n        piVar22 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n        if (0 < (int)piVar24) {\n          for (; local_d0 = piVar27, 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n            piVar22 = (int *)puVar20;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_d0 = (int *)((int)piVar27 + 1);\n      *ppiVar2 = (int *)PTR_DAT_08006a50;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)local_d4 < 8) {\n        ppiVar2 = ppiVar2 + 2;\n      }\n      else {\n        iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar2 = local_cc;\n      }\n      if (((int)local_f0 < (int)local_138) || (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)local_118);\n        *ppiVar2 = local_114;\n        ppiVar2[1] = local_118;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08006a54;\n        piVar24 = (int *)((int)local_138 + -1);\n        piVar27 = local_d0;\n        piVar22 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n        if (0 < (int)piVar24) {\n          for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar22 = (int *)puVar20;\n          }\nLAB_08007014:\n          local_d0 = (int *)((int)local_d0 + (int)piVar24);\n          *ppiVar2 = piVar22;\n          ppiVar2[1] = piVar24;\njoined_r0x08006a1c:\n          local_d4 = (int *)((int)local_d4 + 1);\n          if (7 < (int)local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  piVar24 = local_160;\n  puVar29 = local_16c;\n  if ((((uint)piVar25 & 4) != 0) &&\n     (piVar25 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar25)) {\n    for (; local_d0 = piVar27, 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n      while( true ) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006720;\n        ppiVar2[1] = (int *)0x10;\n        if ((int)local_d4 < 8) break;\n        iVar3 = reverse_copy_and_update_080097cc(puVar29,piVar24,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        piVar25 = piVar25 + -4;\n        ppiVar2 = local_cc;\n        if ((int)piVar25 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar25);\n    *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006720;\n    ppiVar2[1] = piVar25;\n    piVar27 = local_d0;\n    if ((7 < (int)local_d4) &&\n       (iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8), piVar27 = local_d0, iVar3 != 0))\n    goto LAB_0800603e;\n  }\n  piVar24 = local_15c;\n  if ((int)local_15c < (int)local_168) {\n    piVar24 = local_168;\n  }\n  local_164 = local_164 + (int)piVar24;\n  if ((piVar27 == (int *)0x0) || (iVar3 = reverse_copy_and_update_080097cc(local_16c,local_160,&local_d8), iVar3 == 0))\n  {\n    local_d4 = (int *)0x0;\n    if (local_148 != (int *)0x0) {\n      FUNC_080088ec(local_16c,local_148);\n    }\n    ppiVar2 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    FUNC_080088ec(local_16c,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  piVar16 = piVar24 + -0xc;\n  piVar22 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar22 + 1);\n    piVar24 = (int *)(uint)*(byte *)piVar22;\n    local_15c = (int *)((int)piVar16 + (int)local_15c * 10);\n    piVar16 = piVar24 + -0xc;\n    piVar22 = piVar28;\n  } while (piVar16 < (int *)0xa);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "called": [
                "FUN_080004c8",
                "FUN_080003f4",
                "FUN_080011ec",
                "FUN_080009e8",
                "FUN_080009c0",
                "FUN_08000998",
                "FUN_0800119c",
                "FUN_08001170",
                "FUN_08008ad4",
                "FUN_08000158",
                "FUN_080096e0",
                "FUN_080097cc",
                "FUN_08005e40",
                "FUN_080079e8",
                "FUN_08009768",
                "FUN_08008af8",
                "FUN_0800901c",
                "FUN_080088ec",
                "FUN_080009ac"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005e9c",
            "calling": [
                "FUN_08005dfc"
            ],
            "imported": false,
            "current_name": "FUNC_08005e9c"
        },
        "FUN_08000134": {
            "renaming": {
                "FUN_08000134": "concatenate_values_08000134",
                "param_1": "value1",
                "param_2": "value2",
                "DAT_08000144": "global_flag",
                "PTR_FUN_0800014c": "global_value1",
                "PTR_DAT_08000148": "global_value2"
            },
            "code": "uint64_t concatenate_values_08000134(uint64_t *value1, uint64_t *value2) {\n  if (DAT_08000144 != 0) {\n    value1 = PTR_FUN_0800014c;\n    value2 = PTR_DAT_08000148;\n  }\n  return CONCAT44(value2, value1);\n}",
            "called": [
                "FUN_08009e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000134",
            "calling": [
                "FUN_08005d20"
            ],
            "imported": false,
            "current_name": "concatenate_values_08000134"
        },
        "FUN_08005704": {
            "renaming": {
                "FUN_08005704": "process_data_and_store_result_080017b4_08005704",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void process_data_and_store_result_080017b4_08005704(void) {\n  add_byte_to_uint_and_store_0800157c();\n  return;\n}",
            "called": [
                "FUN_080017b4",
                "FUN_0800157c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005704",
            "calling": [],
            "imported": false,
            "current_name": "process_data_and_store_result_080017b4_08005704"
        },
        "FUN_08000418": {
            "renaming": {
                "FUN_08000418": "calculate_hash_08000418",
                "param_1": "input_value",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "shift_value1",
                "uVar2": "shift_value2",
                "uVar3": "shift_value3",
                "uVar4": "shift_value4",
                "uVar5": "shift_value5",
                "bVar8": "is_zero1",
                "bVar9": "is_zero2",
                "bVar10": "is_zero3",
                "iVar6": "count_leading_zeros",
                "in_r12": "in_r12"
            },
            "code": "ulonglong calculate_hash_08000418(uint input_value, undefined4 param_2, undefined4 param_3, uint param_4)\n{\n  uint shift_value1;\n  uint shift_value2;\n  uint shift_value3;\n  uint shift_value4;\n  uint shift_value5;\n  int count_leading_zeros;\n  uint result1;\n  uint result2;\n  uint in_r12;\n  bool is_zero1;\n  bool is_zero2;\n  bool is_zero3;\n  \n  shift_value5 = input_value << 1;\n  is_zero1 = shift_value5 == 0;\n  shift_value1 = (uint)((input_value & 0x80000000) != 0) << 0x1f;\n  shift_value4 = (uint)((int)shift_value5 >> 3) >> 1;\n  shift_value3 = shift_value1 | shift_value4;\n  input_value = input_value << 0x1d;\n  if (!is_zero1) {\n    param_4 = shift_value5 & 0xff000000;\n    is_zero1 = param_4 == 0;\n  }\n  if (!is_zero1) {\n    is_zero1 = param_4 == 0xff000000;\n  }\n  if (!is_zero1) {\n    return CONCAT44(shift_value3, input_value) ^ 0x3800000000000000;\n  }\n  if ((shift_value5 & 0xffffff) == 0) {\n    return CONCAT44(shift_value3, input_value);\n  }\n  if (param_4 == 0xff000000) {\n    return CONCAT44(shift_value3, input_value) | 0x8000000000000;\n  }\n  shift_value2 = input_value;\n  shift_value5 = shift_value4;\n  if (shift_value4 == 0) {\n    shift_value2 = 0;\n    shift_value5 = input_value;\n  }\n  count_leading_zeros = count_leading_zeroes(shift_value5);\n  if (shift_value4 == 0) {\n    count_leading_zeros = count_leading_zeros + 0x20;\n  }\n  result1 = count_leading_zeros - 0xb;\n  is_zero3 = SBORROW4(result1,0x20);\n  shift_value4 = count_leading_zeros - 0x2b;\n  is_zero2 = (int)shift_value4 < 0;\n  is_zero1 = shift_value4 == 0;\n  if ((int)result1 < 0x20) {\n    is_zero3 = SCARRY4(shift_value4,0xc);\n    count_leading_zeros = count_leading_zeros + -0x1f;\n    is_zero2 = count_leading_zeros < 0;\n    is_zero1 = count_leading_zeros == 0;\n    shift_value4 = result1;\n    if (!is_zero1 && is_zero2 == is_zero3) {\n      shift_value2 = shift_value5 << (result1 & 0xff);\n      shift_value5 = shift_value5 >> (0xcU - count_leading_zeros & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_zero1 || is_zero2 != is_zero3) {\n    in_r12 = 0x20 - shift_value4;\n  }\n  shift_value5 = shift_value5 << (shift_value4 & 0xff);\n  if (is_zero1 || is_zero2 != is_zero3) {\n    shift_value5 = shift_value5 | shift_value2 >> (in_r12 & 0xff);\n  }\n  if (is_zero1 || is_zero2 != is_zero3) {\n    shift_value2 = shift_value2 << (shift_value4 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)result1 < 0x381) {\n    return CONCAT44(shift_value5 + (0x380 - result1) * 0x100000 | shift_value1,shift_value2);\n  }\n  shift_value4 = ~(0x380 - result1);\n  if (0x1e < (int)shift_value4) {\n    return CONCAT44(shift_value3,shift_value5 >> (shift_value4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  count_leading_zeros = shift_value4 - 0x13;\n  if (count_leading_zeros == 0 || count_leading_zeros < 0 != SCARRY4(shift_value4 - 0x1f,0xc)) {\n    shift_value4 = shift_value4 + 1;\n    return CONCAT44(shift_value1 | shift_value5 >> (shift_value4 & 0xff),\n                    shift_value2 >> (shift_value4 & 0xff) | shift_value5 << (0x20 - shift_value4 & 0xff));\n  }\n  return CONCAT44(shift_value3,shift_value2 >> (0x20 - (0xcU - count_leading_zeros) & 0xff) | shift_value5 << (0xcU - count_leading_zeros & 0xff)) &\n         0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000418",
            "calling": [
                "FUN_08004d78",
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "imported": false,
            "current_name": "calculate_hash_08000418"
        },
        "FUN_08002ca8": {
            "renaming": {
                "FUN_08002ca8": "check_pointer_08002ca8",
                "param_1": "pointer",
                "param_2": "size",
                "param_3": "offset",
                "iVar1": "value"
            },
            "code": "int check_pointer_08002ca8(int *pointer, uint size, int offset) {\n  int value;\n  while (true) {\n    if ((*(uint *)(*pointer + 0x14) & 0x40) == 0x40) {\n      return 0;\n    }\n    if ((*(uint *)(*pointer + 0x14) & 0x10) == 0x10) {\n      break;\n    }\n    if ((size == 0) || (value = get_pointer_value(), size < (uint)(value - offset))) {\n      pointer[0x10] |= 0x20;\n      *(undefined *)((int)pointer + 0x3d) = 0x20;\n      *(undefined *)(pointer + 0xf) = 0;\n      return 3;\n    }\n  }\n  *(undefined4 *)(*pointer + 0x14) = 0xffffffef;\n  pointer[0x10] = 0;\n  pointer[0xc] = 0;\n  *(undefined *)((int)pointer + 0x3d) = 0x20;\n  *(undefined *)(pointer + 0xf) = 0;\n  return 1;\n}",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca8",
            "calling": [
                "FUN_08001f6c"
            ],
            "imported": false,
            "current_name": "check_pointer_08002ca8"
        },
        "FUN_08003a94": {
            "renaming": {
                "FUN_08003a94": "set_permissions_and_data_08003a94",
                "param_1": "memory_address",
                "param_2": "permissions_and_data",
                "uVar1": "return_value",
                "uVar2": "permission_value"
            },
            "code": "int set_permissions_and_data_08003a94(int *memory_address,uint *permissions_and_data)\n{\n  int return_value;\n  uint permission_value;\n  if (*(char *)(memory_address + 0xf) == '\\x01') {\n    return_value = 2;\n  }\n  else {\n    *(undefined *)(memory_address + 0xf) = 1;\n    *(undefined *)((int)memory_address + 0x3d) = 2;\n    *(uint *)(*memory_address + 8) = *(uint *)(*memory_address + 8) & 0xffff0088;\n    permission_value = *permissions_and_data;\n    if (permission_value == 0x40) {\n      set_bits_and_shift_left(*memory_address,permissions_and_data[1],permissions_and_data[3]);\n      set_permissions(*memory_address,0x40);\n    }\n    else if (permission_value < 0x41) {\n      if (permission_value == 0x10) {\n        set_permissions(*memory_address,0x10);\n      }\n      else if (permission_value < 0x11) {\n        if (permission_value == 0) {\n          set_permissions(*memory_address,0);\n        }\n      }\n      else if (permission_value == 0x20) {\n        set_permissions(*memory_address,0x20);\n      }\n      else if (permission_value == 0x30) {\n        set_permissions(*memory_address,0x30);\n      }\n    }\n    else if (permission_value == 0x70) {\n      set_data_in_memory(*memory_address,permissions_and_data[2],permissions_and_data[1],permissions_and_data[3]);\n      *(uint *)(*memory_address + 8) = *(uint *)(*memory_address + 8) & 0xffffff88 | 0x77;\n    }\n    else if (permission_value < 0x71) {\n      if (permission_value == 0x50) {\n        set_bits_and_shift_left(*memory_address,permissions_and_data[1],permissions_and_data[3]);\n        set_permissions(*memory_address,0x50);\n      }\n      else if (permission_value == 0x60) {\n        update_flags_and_values(*memory_address,permissions_and_data[1],permissions_and_data[3]);\n        set_permissions(*memory_address,0x60);\n      }\n    }\n    else if (permission_value == 0x1000) {\n      *(uint *)(*memory_address + 8) = *(uint *)(*memory_address + 8) & 0xfffffff8;\n    }\n    else if (permission_value == 0x2000) {\n      set_data_in_memory(*memory_address,permissions_and_data[2],permissions_and_data[1],permissions_and_data[3]);\n      *(uint *)(*memory_address + 8) = *(uint *)(*memory_address + 8) | 0x4000;\n    }\n    *(undefined *)((int)memory_address + 0x3d) = 1;\n    *(undefined *)(memory_address + 0xf) = 0;\n    return_value = 0;\n  }\n  return return_value;\n}",
            "called": [
                "FUN_0800416a",
                "FUN_080041a8",
                "FUN_080040a0",
                "FUN_08004104"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a94",
            "calling": [
                "FUN_08005500",
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "set_permissions_and_data_08003a94"
        },
        "FUN_0800416a": {
            "renaming": {
                "FUN_0800416a": "set_permissions_0800416a",
                "param_1": "memory_address",
                "param_2": "permissions",
                "*(uint *)(param_1 + 8)": "current_permissions",
                "*(uint *)(param_1 + 8) & 0xffffff8f | (uint)(param_2 | 7)": "new_permissions",
                "return": "return"
            },
            "code": "void set_permissions_0800416a(uint32_t* memory_address, uint16_t permissions) {\n    uint32_t* permissions_address = memory_address + 2;\n    uint32_t current_permissions = *permissions_address;\n    uint32_t new_permissions = (current_permissions & 0xffffff8f) | (permissions | 7);\n    *permissions_address = new_permissions;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800416a",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": false,
            "current_name": "set_permissions_0800416a"
        },
        "FUN_080055f4": {
            "renaming": {
                "FUN_080055f4": "set_bit_and_param_080055f4",
                "local_18": "param1",
                "local_14": "param2",
                "local_c": "param3",
                "*(uint *)(DAT_0800566c + 0x18)": "flags"
            },
            "code": "void set_bit_and_param_080055f4(void)\n{\n  uint32_t *(uint *)(DAT_0800566c + 0x18) = 0;\n  uint32_t param1 = 0x1e;\n  uint32_t param2 = 1;\n  uint32_t param3 = 2;\n  *(uint *)(DAT_0800566c + 0x18) |= 0x20;\n  *(uint *)(DAT_0800566c + 0x18) |= 4;\n  *(uint *)(DAT_0800566c + 0x18) |= 8;\n  *(uint32_t *)(DAT_0800566c + 0x18) = *(uint *)(DAT_0800566c + 0x18);\n  set_param_at_address_08001a80(DAT_08005670, param1, 0, ((*(uint *)(DAT_0800566c + 0x18) & 8) != 0));\n  decode_bits_080017c4(DAT_08005670, &param1);\n}",
            "called": [
                "FUN_080017c4",
                "FUN_08001a80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055f4",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_bit_and_param_080055f4"
        },
        "FUN_080059f0": {
            "renaming": {
                "FUN_080059f0": "FUNC_080059f0"
            },
            "code": "\nulonglong FUNC_080059f0(int param_1,uint param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  uint uVar7;\n  int iVar8;\n  undefined8 uVar9;\n  undefined8 uVar10;\n  ulonglong uVar11;\n  \n  uVar9 = CONCAT44(param_2,param_1);\n  uVar7 = param_2 & 0x7fffffff;\n  if (DAT_08005cd8 < (int)uVar7) {\n    if ((uVar7 == DAT_08005cdc || (int)uVar7 < (int)DAT_08005cdc) &&\n       ((uVar7 != DAT_08005cdc || (param_1 == 0)))) {\n      uVar1 = DAT_08005ce4;\n      if (0 < (int)param_2) {\n        uVar1 = DAT_08005ce0;\n      }\n      return CONCAT44(uVar1,DAT_08005ce8);\n    }\n    uVar11 = FUNC_0800015c(param_1,param_2,param_1,param_2,param_4);\n  }\n  else {\n    if (DAT_08005cec < (int)uVar7) {\n      uVar9 = do_nothing_08005d0c();\n      uVar4 = (undefined4)((ulonglong)uVar9 >> 0x20);\n      uVar1 = (undefined4)uVar9;\n      if (DAT_08005cfc < (int)uVar7) {\n        if (DAT_08005d00 < (int)uVar7) {\n          uVar9 = FUNC_0800071c(0,DAT_08005d08,uVar1,uVar4);\n          iVar8 = 3;\n        }\n        else {\n          uVar9 = FUNC_08000158(uVar1,uVar4,0,DAT_08005d04);\n          uVar10 = FUNC_080004c8(uVar1,uVar4,0,DAT_08005d04);\n          uVar10 = FUNC_0800015c((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005cf8);\n          uVar9 = FUNC_0800071c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                               (int)((ulonglong)uVar10 >> 0x20));\n          iVar8 = 2;\n        }\n      }\n      else if (DAT_08005cfc + -0xd0000 < (int)uVar7) {\n        uVar9 = FUNC_08000158(uVar1,uVar4,0,DAT_08005cf8);\n        uVar10 = FUNC_0800015c(uVar1,uVar4,0,DAT_08005cf8);\n        uVar9 = FUNC_0800071c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                             (int)((ulonglong)uVar10 >> 0x20));\n        iVar8 = 1;\n      }\n      else {\n        uVar9 = FUNC_0800015c(uVar1,uVar4,uVar1,uVar4);\n        uVar9 = FUNC_08000158((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),0,DAT_08005cf8);\n        uVar10 = FUNC_0800015c(uVar1,uVar4,0,0x40000000);\n        uVar9 = FUNC_0800071c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                             (int)((ulonglong)uVar10 >> 0x20));\n        iVar8 = 0;\n      }\n    }\n    else {\n      if ((int)uVar7 <= DAT_08005cec + -0x1bc0000) {\n        uVar10 = FUNC_0800015c(param_1,param_2,DAT_08005cd0,DAT_08005cd4,param_4);\n        iVar8 = is_end_of_string_080009e8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005cf8);\n        if (iVar8 != 0) {\n          return CONCAT44(param_2,param_1);\n        }\n      }\n      iVar8 = -1;\n    }\n    uVar6 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar5 = (undefined4)uVar9;\n    uVar9 = FUNC_080004c8(uVar5,uVar6,uVar5,uVar6);\n    uVar2 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar1 = (undefined4)uVar9;\n    uVar9 = FUNC_080004c8(uVar1,uVar2,uVar1,uVar2);\n    uVar3 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar4 = (undefined4)uVar9;\n    uVar9 = FUNC_080004c8(uVar4,uVar3,DAT_08005c78,DAT_08005c7c);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c80,DAT_08005c84);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c88,DAT_08005c8c);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c90,DAT_08005c94);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c98,DAT_08005c9c);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005ca0,DAT_08005ca4);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar1,uVar2);\n    uVar10 = FUNC_080004c8(uVar4,uVar3,DAT_08005ca8,DAT_08005cac);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cb0,DAT_08005cb4);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cb8,DAT_08005cbc);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cc0,DAT_08005cc4);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cc8,DAT_08005ccc);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                         (int)((ulonglong)uVar10 >> 0x20));\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar5,uVar6);\n    uVar1 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    if (iVar8 == -1) {\n      uVar11 = FUNC_08000158(uVar5,uVar6,(int)uVar9,uVar1);\n      return uVar11;\n    }\n    uVar9 = FUNC_08000158((int)uVar9,uVar1,*(undefined4 *)(PTR_DAT_08005cf0 + iVar8 * 8),\n                         *(undefined4 *)((int)(PTR_DAT_08005cf0 + iVar8 * 8) + 4));\n    uVar9 = FUNC_08000158((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar5,uVar6);\n    uVar11 = FUNC_08000158(*(undefined4 *)(PTR_DAT_08005cf4 + iVar8 * 8),\n                          *(undefined4 *)((int)(PTR_DAT_08005cf4 + iVar8 * 8) + 4),(int)uVar9,\n                          (int)((ulonglong)uVar9 >> 0x20));\n    if ((int)param_2 < 0) {\n      return uVar11 & 0xffffffff | (ulonglong)((int)(uVar11 >> 0x20) + 0x80000000) << 0x20;\n    }\n  }\n  return uVar11;\n}\n\n",
            "called": [
                "FUN_08000158",
                "FUN_080004c8",
                "FUN_0800015c",
                "FUN_080009e8",
                "FUN_0800071c",
                "FUN_08005d0c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080059f0",
            "calling": [
                "FUN_08005838"
            ],
            "imported": false,
            "current_name": "FUNC_080059f0"
        },
        "FUN_080053b0": {
            "renaming": {
                "FUN_080053b0": "decode_bits_080053b0",
                "iVar1": "result",
                "local_58": "flag_true_value",
                "local_54": "",
                "local_50": "",
                "local_4c": "",
                "local_48": "",
                "local_44": "local_44",
                "local_40": "",
                "local_3c": "local_3c",
                "local_38": "",
                "local_34": "",
                "local_30": "",
                "local_2c": "",
                "local_28": "",
                "local_24": "",
                "local_20": "flag_value",
                "local_1c": "local_1c",
                "PTR_DAT_080054f4": "data_pointer",
                "DAT_080054f8": "data_value",
                "PTR_DAT_080054f4 + 4": "",
                "PTR_DAT_080054f4 + 8": "",
                "PTR_DAT_080054f4 + 12": "",
                "PTR_DAT_080054f4 + 16": "",
                "PTR_DAT_080054f4 + 20": "",
                "PTR_DAT_080054f4 + 24": "",
                "PTR_DAT_080054f4 + 0xc": "",
                "PTR_DAT_080054f4 + 0x10": "",
                "PTR_DAT_080054f4 + 0x14": "",
                "PTR_DAT_080054f4 + 0x18": "",
                "validate_input_data_080035a4": "validate_input_data",
                "infinite_loop_08005674": "infinite_loop",
                "set_permissions_and_data_08003a94": "set_permissions_and_data",
                "validate_params_08003640": "validate_params",
                "set_value_if_flag_set_080042de": "set_value_if_flag_set",
                "update_values_08003908": "update_values",
                "set_value_if_flag_is_true_0800422e": "set_value_if_flag_is_true",
                "decode_bits_08005680": "decode_bits_08005680"
            },
            "code": "void decode_bits_080053b0()\n{\n    int input_validation_result;\n    int permission_setting_result;\n    int parameter_validation_result;\n    int flag_value;\n    int update_values_result;\n    int flag_true_value;\n    int local_1c[4];\n    int local_20;\n    int local_3c = 96;\n    int local_44 = 8192;\n    int local_58;\n\n    *PTR_DAT_080054f4 = DAT_080054f8;\n    *(PTR_DAT_080054f4 + 4) = 1800;\n    *(PTR_DAT_080054f4 + 8) = 0;\n    *(PTR_DAT_080054f4 + 12) = 100;\n    *(PTR_DAT_080054f4 + 16) = 0;\n    *(PTR_DAT_080054f4 + 20) = 0;\n    *(PTR_DAT_080054f4 + 24) = 0;\n    input_validation_result = validate_input_data(PTR_DAT_080054f4);\n    if (input_validation_result != 0) {\n        infinite_loop(PTR_s____src_main_c_080054fc, 399);\n    }\n    local_1c[0] = 4096;\n    permission_setting_result = set_permissions_and_data(PTR_DAT_080054f4, local_1c);\n    if (permission_setting_result != 0) {\n        infinite_loop(PTR_s____src_main_c_080054fc, 404);\n    }\n    parameter_validation_result = validate_params(PTR_DAT_080054f4);\n    if (parameter_validation_result != 0) {\n        infinite_loop(PTR_s____src_main_c_080054fc, 408);\n    }\n    local_20 = 0;\n    flag_value = set_value_if_flag_set(PTR_DAT_080054f4, &local_20);\n    if (flag_value != 0) {\n        infinite_loop(PTR_s____src_main_c_080054fc, 415);\n    }\n    update_values_result = update_values(PTR_DAT_080054f4, &local_3c, 0);\n    if (update_values_result != 0) {\n        infinite_loop(PTR_s____src_main_c_080054fc, 427);\n    }\n    update_values_result = update_values(PTR_DAT_080054f4, &local_3c, 12);\n    if (update_values_result != 0) {\n        infinite_loop(PTR_s____src_main_c_080054fc, 432);\n    }\n    local_58 = 0;\n    flag_true_value = set_value_if_flag_is_true(PTR_DAT_080054f4, &local_58);\n    if (flag_true_value != 0) {\n        infinite_loop(PTR_s____src_main_c_080054fc, 438);\n    }\n    decode_bits_080053b0_08005680(PTR_DAT_080054f4);\n}\n",
            "called": [
                "FUN_08005674",
                "FUN_08003a94",
                "FUN_08005680",
                "FUN_080042de",
                "FUN_080035a4",
                "FUN_08003908",
                "FUN_08003640",
                "FUN_0800422e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053b0",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "decode_bits_080053b0"
        },
        "FUN_08009e74": {
            "renaming": {
                "FUN_08009e74": "do_nothing_08009e74"
            },
            "code": "\nvoid do_nothing_08009e74(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e74",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08009e74"
        },
        "FUN_0800088a": {
            "renaming": {
                "FUN_0800088a": "convert_to_double_0800088a",
                "param_1": "a",
                "param_2": "b",
                "param_3": "c",
                "param_4": "d",
                "uVar1": "temp4",
                "unaff_r4": "temp5",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "bVar4": "flag"
            },
            "code": "ulonglong convert_to_double_0800088a(uint32_t a, uint32_t b, uint32_t c, uint32_t d) {\n  uint32_t temp1 = c & d >> 0x14;\n  uint32_t temp2 = b;\n  if (a != temp1 || temp1 != c) {\n    if (a == c) {\n      if ((a | b << 0xc) == 0 && temp1 != c) {\n        return (ulonglong)((b ^ d) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (temp1 == c) {\n      if ((c | d << 0xc) == 0) {\n        return (ulonglong)((b ^ d) & 0x80000000) << 0x20;\n      }\n      a = c;\n      temp2 = d;\n    }\n    else {\n      bool bVar = (a | b << 1) == 0;\n      if (!bVar) {\n        bVar = (c | d << 1) == 0;\n      }\n      if (!bVar) {\n        if (a == 0) {\n          uint32_t temp3 = b & 0x80000000;\n          do {\n            uint32_t temp4 = a & 0x80000000;\n            a = a << 1;\n            b = b * 2 + (uint32_t)(temp4 != 0);\n          } while ((b & 0x100000) == 0);\n          b |= temp3;\n          if (temp1 != 0) {\n            return ((ulonglong)d << 0x20) | a;\n          }\n        }\n        do {\n          temp2 = c & 0x80000000;\n          c = c << 1;\n          d = d * 2 + (uint32_t)(temp2 != 0);\n        } while ((d & 0x100000) == 0);\n        return ((ulonglong)b << 0x20) | a;\n      }\n      if ((a | b << 1) != 0) {\n        return (ulonglong)((b ^ d) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n      if ((c | d << 1) != 0) {\n        return (ulonglong)((b ^ d) & 0x80000000) << 0x20;\n      }\n    }\n  }\n  return ((ulonglong)temp2 << 0x20) | a | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800088a",
            "calling": [
                "FUN_0800071c"
            ],
            "imported": false,
            "current_name": "convert_to_double_0800088a"
        },
        "FUN_080016d0": {
            "renaming": {
                "FUN_080016d0": "check_input_080016d0",
                "param_1": "input",
                "bVar1": "is_valid_input",
                "DAT_08001710": "data_ptr"
            },
            "code": "bool check_input_080016d0(int input) {\n  bool is_valid_input = input - 1U < 0x1000000;\n  if (is_valid_input) {\n    int* DAT_08001710 = DAT_08001710;\n    *(DAT_08001710 + 1) = input - 1;\n    set_byte_at_address_based_on_sign_of_input_08001618(0xffffffff, 0xf);\n    *(DAT_08001710 + 2) = 0;\n    *DAT_08001710 = 7;\n  }\n  return !is_valid_input;\n}",
            "called": [
                "FUN_08001618"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016d0",
            "calling": [
                "FUN_08001762"
            ],
            "imported": false,
            "current_name": "check_input_080016d0"
        },
        "FUN_08001ccc": {
            "renaming": {
                "FUN_08001ccc": "check_and_update_flag_08001ccc",
                "param_1": "flag",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5",
                "param_6": "param_6",
                "param_7": "param_7",
                "uVar1": "flag_value",
                "iVar2": "start_pointer_value",
                "cVar3": "char_var",
                "uVar4": "c_var",
                "iVar5": "loop_result",
                "uVar6": "result",
                "puVar7": "data",
                "bVar8": "bool_var",
                "DAT_08001f64": "u_var",
                "DAT_08001f68": "data_end",
                "**param_1": "*flag",
                "(*param_1)[5]": "(*flag)[5]",
                "(*param_1)[6]": "(*flag)[6]",
                "param_1[0xc]": "flag[0xc]",
                "param_1[9]": "flag[9]",
                "param_1[0x10]": "flag[0x10]",
                "*(undefined *)((int)param_1 + 0x3d)": "*(undefined *)((int)flag + 0x3d)",
                "*(undefined *)((int)param_1 + 0x3e)": "*(undefined *)((int)flag + 0x3e)",
                "*(undefined *)(param_1 + 0xf)": "*(undefined *)(flag + 0xf)",
                "(uint)(iVar5 - iVar2)": "(uint32_t)(iVar5 - start_pointer_value)",
                "*(short *)(param_1 + 10)": "*(short *)((int)flag + 0x2a)",
                "*(short *)((int)param_1 + 0x2a)": "*(short *)((int)flag + 0x2a)",
                "(*param_1)[4]": "(*flag)[4]",
                "param_1[0xb]": "DAT_08001f68",
                "*(undefined2 *)((int)param_1 + 0x2a)": "*(undefined2 *)((int)flag + 0x2a)",
                "check_and_update_flag_08002640": "check_and_update_flag_08002640",
                "check_and_update_flag_08002bb4": "check_and_update_flag_08002bb4",
                "check_flag_08002c2e": "check_flag_08002c2e"
            },
            "code": "uint32_t check_and_update_flag_08001ccc(uint32_t **flag, uint16_t param_2, uint16_t param_3, uint16_t param_4, uint32_t *param_5, uint16_t param_6, uint32_t param_7)\n{\n  uint32_t flag_value = **flag;\n  uint32_t result = 2;\n  uint32_t *data = flag[9];\n  uint32_t *DAT_08001f68 = flag[9] + *(int32_t *)(*flag + 0xc);\n  uint32_t *data_start = data;\n  uint32_t data_length = *(int32_t *)(*flag + 0xc);\n  uint32_t c_var = 0;\n  char char_var = ' ';\n  uint32_t DAT_08001f64 = DAT_08001f64;\n  uint32_t iVar1 = get_pointer_value_080015a0();\n  if (*(char *)((int)flag + 0x3d) == ' ')\n  {\n    do\n    {\n      if ((DAT_08001f64 >> 0x10 & 0xff) == 1)\n      {\n        c_var = DAT_08001f64 & ~(*flag)[5] & 0xffff;\n        if (c_var == 0)\n        {\n          c_var = 1;\n        }\n        char_var = (char)c_var;\n        if (c_var != 0)\n        {\n          char_var = '\\0';\n        }\n      }\n      else\n      {\n        c_var = DAT_08001f64 & ~(*flag)[6] & 0xffff;\n        if (c_var == 0)\n        {\n          c_var = 1;\n        }\n        char_var = (char)c_var;\n        if (c_var != 0)\n        {\n          char_var = '\\0';\n        }\n      }\n      if (char_var != '\\x01')\n      {\n        result = 0;\n        break;\n      }\n      iVar1 = get_pointer_value_080015a0();\n    } while ((uint32_t)(iVar1 - iVar2) < 0x1a);\n    flag[0xc] = (uint32_t *)0x0;\n    *(undefined *)((int)flag + 0x3d) = 0x20;\n    *(undefined *)((int)flag + 0x3e) = 0;\n    *(undefined *)(flag + 0xf) = 0;\n    result = 3;\n  }\n  else\n  {\n    result = 2;\n  }\n  return result;\n}",
            "called": [
                "FUN_08002640",
                "FUN_08002c2e",
                "FUN_080015a0",
                "FUN_08002bb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ccc",
            "calling": [
                "FUN_08004ea4"
            ],
            "imported": false,
            "current_name": "check_and_update_flag_08001ccc"
        },
        "FUN_0800157c": {
            "renaming": {
                "FUN_0800157c": "add_byte_to_uint_and_store_0800157c",
                "PTR_DAT_0800159c": "uint_ptr",
                "PTR_DAT_08001598": "byte_ptr",
                "*PTR_DAT_0800159c": "*uint_ptr",
                "*PTR_DAT_08001598": "*byte_ptr"
            },
            "code": "void add_byte_to_uint_and_store_0800157c(void)\n{\n  uint* PTR_DAT_0800159c = (uint*)PTR_DAT_0800159c;\n  int* int_ptr = (int*)PTR_DAT_0800159c;\n  byte* PTR_DAT_08001598 = (byte*)PTR_DAT_08001598;\n  uint byte_as_uint = (uint)*PTR_DAT_08001598;\n  *PTR_DAT_0800159c = *int_ptr + byte_as_uint;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "FUN_08005704"
            ],
            "imported": false,
            "current_name": "add_byte_to_uint_and_store_0800157c"
        },
        "FUN_08000e20": {
            "renaming": {
                "FUN_08000e20": "FUNC_08000e20"
            },
            "code": "\nuint FUNC_08000e20(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  uVar2 = param_1 >> 0x17 & 0xff;\n  bVar7 = uVar2 == 0;\n  if (!bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = param_4 == 0xff;\n  }\n  if (bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    uVar6 = param_1;\n    if (uVar2 == 0xff) {\n      if (((param_1 & 0x7fffff) != 0) || (uVar6 = param_2, param_4 == 0xff)) {\nLAB_08000e16:\n        return uVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param_4 == 0xff) {\n        uVar6 = param_2;\n        if ((param_2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (param_1 ^ param_2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      bVar7 = (param_1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (param_2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = uVar2 == 0;\n        uVar6 = param_1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_1 = param_1 << 1;\n            bVar7 = (param_1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          uVar2 = uVar2 - 1;\n        }\n        param_1 = param_1 | uVar6;\n        bVar7 = param_4 == 0;\n        uVar6 = param_2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_2 = param_2 << 1;\n            bVar7 = (param_2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          param_4 = param_4 - 1;\n        }\n        param_2 = param_2 | uVar6;\n        goto LAB_08000e38;\n      }\n      if ((param_1 & 0x7fffffff) == 0) {\n        if ((param_2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    param_1 = param_1 ^ param_2;\n  }\n  else {\nLAB_08000e38:\n    iVar3 = uVar2 - param_4;\n    if (param_2 << 9 == 0) {\n      param_1 = (param_1 ^ param_2) & 0x80000000 | param_1 & 0x7fffff;\n      bVar9 = SCARRY4(iVar3,0x7f);\n      iVar5 = iVar3 + 0x7f;\n      bVar7 = iVar5 < 0;\n      bVar8 = iVar5 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,iVar5);\n        bVar7 = 0xff - iVar5 < 0;\n        bVar8 = iVar5 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        param_1 = param_1 | iVar5 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return param_1;\n      }\n      param_1 = param_1 | 0x800000;\n      uVar2 = 0;\n      bVar8 = SBORROW4(iVar5,1);\n      uVar4 = iVar3 + 0x7e;\n      bVar7 = uVar4 == 0;\n      uVar6 = uVar4;\n    }\n    else {\n      uVar1 = (param_2 << 9) >> 4 | 0x10000000;\n      uVar2 = (param_1 << 9) >> 4 | 0x10000000;\n      param_1 = (param_1 ^ param_2) & 0x80000000;\n      bVar7 = uVar1 <= uVar2;\n      if (!bVar7) {\n        uVar2 = uVar2 << 1;\n      }\n      uVar4 = iVar3 + 0x7d + (uint)bVar7;\n      uVar6 = 0x800000;\n      do {\n        if (uVar1 <= uVar2) {\n          uVar2 = uVar2 - uVar1;\n          param_1 = param_1 | uVar6;\n        }\n        bVar7 = uVar1 >> 1 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 1);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 1;\n        }\n        bVar7 = uVar1 >> 2 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 2);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 2;\n        }\n        bVar7 = uVar1 >> 3 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 3);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 3;\n        }\n        uVar2 = uVar2 * 0x10;\n        bVar7 = uVar2 == 0;\n        if (!bVar7) {\n          uVar6 = uVar6 >> 4;\n          bVar7 = uVar6 == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      bVar7 = uVar4 == 0xfd;\n      uVar6 = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        param_1 = param_1 + uVar4 * 0x800000 + (uint)(uVar1 <= uVar2);\n        if (uVar2 - uVar1 == 0) {\n          param_1 = param_1 & 0xfffffffe;\n        }\n        return param_1;\n      }\n    }\n    if (bVar7 || (int)uVar6 < 0 != bVar8) {\n      bVar7 = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        param_1 = param_1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        return param_1;\n      }\n      uVar6 = (param_1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = param_1 << (uVar4 + 0x20 & 0xff);\n      uVar6 = ((uint)((param_1 & 0x80000000) != 0) << 0x1f | uVar6 >> 1) + (uint)((byte)uVar6 & 1);\n      if ((uVar2 | uVar4 << 1) == 0) {\n        uVar6 = uVar6 & ~(uVar4 >> 0x1f);\n      }\n      return uVar6;\n    }\n  }\n  return param_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000e20",
            "calling": [
                "FUN_080049cc",
                "FUN_08004d78"
            ],
            "imported": false,
            "current_name": "FUNC_08000e20"
        },
        "FUN_0800121c": {
            "renaming": {
                "FUN_0800121c": "FUNC_0800121c"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 FUNC_0800121c(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  ulonglong uVar1;\n  uint uVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint *puVar9;\n  uint *puVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  undefined8 uVar15;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar6 = count_leading_zeroes(param_3);\n      if (uVar6 != 0) {\n        param_3 = param_3 << (uVar6 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar6 & 0xff) | param_2 << (uVar6 & 0xff);\n        param_1 = param_1 << (uVar6 & 0xff);\n      }\n      uVar12 = param_3 >> 0x10;\n      uVar8 = param_2 / uVar12;\n      uVar11 = uVar8 * (param_3 & 0xffff);\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar12 * uVar8) * 0x10000;\n      uVar4 = uVar8;\n      if (uVar7 <= uVar11 && uVar11 - uVar7 != 0) {\n        bVar14 = CARRY4(param_3,uVar7);\n        uVar7 = param_3 + uVar7;\n        uVar4 = uVar8 - 1;\n        if ((bVar14 == false) && (uVar7 <= uVar11 && uVar11 - uVar7 != 0)) {\n          uVar4 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar2 = (uVar7 - uVar11) / uVar12;\n      uVar5 = uVar2 * (param_3 & 0xffff);\n      uVar8 = param_1 & 0xffff | ((uVar7 - uVar11) - uVar12 * uVar2) * 0x10000;\n      uVar7 = uVar2;\n      if (uVar8 <= uVar5 && uVar5 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar7 = uVar2 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar5 && uVar5 - uVar8 != 0)) {\n          uVar7 = uVar2 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      puVar3 = (uint *)(uVar7 | uVar4 << 0x10);\n      puVar9 = (uint *)0x0;\n      uVar8 = uVar8 - uVar5;\n    }\n    else {\n      if (param_3 == 0) {\n                    /* WARNING: Could not recover jumptable at 0x08001302. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (code *)software_udf(0xff,0x8001302);\n        uVar15 = (*UNRECOVERED_JUMPTABLE)();\n        return uVar15;\n      }\n      uVar6 = count_leading_zeroes(param_3);\n      if (uVar6 == 0) {\n        puVar9 = (uint *)0x1;\n        param_2 = param_2 - param_3;\n        uVar12 = param_3 >> 0x10;\n        uVar2 = param_3 & 0xffff;\n      }\n      else {\n        param_3 = param_3 << (uVar6 & 0xff);\n        uVar4 = param_2 >> (0x20 - uVar6 & 0xff);\n        uVar12 = param_3 >> 0x10;\n        uVar11 = uVar4 / uVar12;\n        uVar2 = param_3 & 0xffff;\n        uVar5 = uVar11 * uVar2;\n        uVar8 = param_1 >> (0x20 - uVar6 & 0xff) | param_2 << (uVar6 & 0xff);\n        uVar7 = uVar8 >> 0x10 | (uVar4 - uVar12 * uVar11) * 0x10000;\n        param_1 = param_1 << (uVar6 & 0xff);\n        uVar4 = uVar11;\n        if (uVar7 <= uVar5 && uVar5 - uVar7 != 0) {\n          bVar14 = CARRY4(param_3,uVar7);\n          uVar7 = param_3 + uVar7;\n          uVar4 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar5 && uVar5 - uVar7 != 0)) {\n            uVar4 = uVar11 - 2;\n            uVar7 = uVar7 + param_3;\n          }\n        }\n        uVar11 = (uVar7 - uVar5) / uVar12;\n        uVar13 = uVar11 * uVar2;\n        param_2 = uVar8 & 0xffff | ((uVar7 - uVar5) - uVar12 * uVar11) * 0x10000;\n        uVar7 = uVar11;\n        if (param_2 <= uVar13 && uVar13 - param_2 != 0) {\n          bVar14 = CARRY4(param_3,param_2);\n          param_2 = param_3 + param_2;\n          uVar7 = uVar11 - 1;\n          if ((bVar14 == false) && (param_2 <= uVar13 && uVar13 - param_2 != 0)) {\n            uVar7 = uVar11 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar13;\n        puVar9 = (uint *)(uVar7 | uVar4 << 0x10);\n      }\n      uVar11 = param_2 / uVar12;\n      uVar7 = uVar2 * uVar11;\n      uVar8 = param_1 >> 0x10 | (param_2 - uVar12 * uVar11) * 0x10000;\n      uVar4 = uVar11;\n      if (uVar8 <= uVar7 && uVar7 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar4 = uVar11 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar7 && uVar7 - uVar8 != 0)) {\n          uVar4 = uVar11 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar11 = (uVar8 - uVar7) / uVar12;\n      uVar2 = uVar2 * uVar11;\n      uVar8 = param_1 & 0xffff | ((uVar8 - uVar7) - uVar12 * uVar11) * 0x10000;\n      uVar7 = uVar11;\n      if (uVar8 <= uVar2 && uVar2 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar7 = uVar11 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar2 && uVar2 - uVar8 != 0)) {\n          uVar7 = uVar11 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar8 = uVar8 - uVar2;\n      puVar3 = (uint *)(uVar7 | uVar4 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar8 >> (uVar6 & 0xff);\n      param_5[1] = 0;\n    }\n  }\n  else {\n    puVar9 = param_5;\n    if (param_2 < param_4) {\n      puVar3 = param_5;\n      if (param_5 != (uint *)0x0) {\n        *param_5 = param_1;\n        param_5[1] = param_2;\n        return 0;\n      }\n    }\n    else {\n      puVar10 = (uint *)count_leading_zeroes(param_4);\n      if (puVar10 == (uint *)0x0) {\n        if ((param_4 < param_2) || (puVar3 = puVar10, param_3 <= param_1)) {\n          bVar14 = param_1 < param_3;\n          param_1 = param_1 - param_3;\n          param_2 = (param_2 - param_4) - (uint)bVar14;\n          puVar3 = (uint *)0x1;\n        }\n        puVar9 = puVar10;\n        if (param_5 != (uint *)0x0) {\n          *param_5 = param_1;\n          param_5[1] = param_2;\n        }\n      }\n      else {\n        uVar8 = 0x20 - (int)puVar10;\n        uVar2 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar10 & 0xff);\n        uVar6 = param_2 >> (uVar8 & 0xff);\n        uVar5 = uVar2 >> 0x10;\n        uVar11 = uVar6 / uVar5;\n        uVar12 = uVar11 * (uVar2 & 0xffff);\n        uVar4 = param_2 << ((uint)puVar10 & 0xff) | param_1 >> (uVar8 & 0xff);\n        uVar7 = uVar4 >> 0x10 | (uVar6 - uVar5 * uVar11) * 0x10000;\n        param_3 = param_3 << ((uint)puVar10 & 0xff);\n        param_1 = param_1 << ((uint)puVar10 & 0xff);\n        uVar6 = uVar11;\n        if (uVar7 <= uVar12 && uVar12 - uVar7 != 0) {\n          bVar14 = CARRY4(uVar2,uVar7);\n          uVar7 = uVar2 + uVar7;\n          uVar6 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar12 && uVar12 - uVar7 != 0)) {\n            uVar6 = uVar11 - 2;\n            uVar7 = uVar7 + uVar2;\n          }\n        }\n        uVar11 = (uVar7 - uVar12) / uVar5;\n        uVar13 = uVar11 * (uVar2 & 0xffff);\n        uVar7 = uVar4 & 0xffff | ((uVar7 - uVar12) - uVar5 * uVar11) * 0x10000;\n        uVar4 = uVar11;\n        if (uVar7 <= uVar13 && uVar13 - uVar7 != 0) {\n          bVar14 = CARRY4(uVar2,uVar7);\n          uVar7 = uVar2 + uVar7;\n          uVar4 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar13 && uVar13 - uVar7 != 0)) {\n            uVar4 = uVar11 - 2;\n            uVar7 = uVar7 + uVar2;\n          }\n        }\n        puVar3 = (uint *)(uVar4 | uVar6 << 0x10);\n        uVar1 = ZEXT48(puVar3) * (ulonglong)param_3;\n        if (CONCAT44(uVar7 - uVar13,param_1) < uVar1) {\n          puVar3 = (uint *)((int)puVar3 + -1);\n          uVar1 = uVar1 - CONCAT44(uVar2,param_3);\n        }\n        if (param_5 != (uint *)0x0) {\n          uVar6 = ((uVar7 - uVar13) - (int)(uVar1 >> 0x20)) - (uint)(param_1 < (uint)uVar1);\n          *param_5 = uVar6 << (uVar8 & 0xff) | param_1 - (uint)uVar1 >> ((uint)puVar10 & 0xff);\n          param_5[1] = uVar6 >> ((uint)puVar10 & 0xff);\n          puVar9 = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(puVar9,puVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800121c",
            "calling": [
                "FUN_080011ec"
            ],
            "imported": false,
            "current_name": "FUNC_0800121c"
        },
        "FUN_08005d14": {
            "renaming": {
                "FUN_08005d14": "get_value_from_pointer_to_pointer_08005d14",
                "PTR_PTR_DAT_08005d1c": "PTR_PTR_DATA",
                "undefined4": "int",
                "*": "*",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int get_value_from_pointer_to_pointer_08005d14() {\n    int* pointer_to_value = *(int**)PTR_PTR_DAT_08005d1c;\n    int value = *pointer_to_value;\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d14",
            "calling": [
                "FUN_08005728"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_to_pointer_08005d14"
        },
        "FUN_080015b4": {
            "renaming": {
                "FUN_080015b4": "update_data_080015b4",
                "param_1": "new_data",
                "DAT_080015f8": "data_start",
                "PTR_080015f8": "data_ptr",
                "PTR_080015f8_00": "current_data",
                "PTR_080015f8_01": "mask",
                "PTR_080015f8_02": "shifted_data",
                "PTR_080015f8_03": "constant",
                "PTR_080015f8_04": "updated_data"
            },
            "code": "void update_data_080015b4(uint new_data)\n{\n  uint* PTR_080015f8 = (uint*)(DAT_080015f8 + 0xc);\n  uint PTR_080015f8_00 = *PTR_080015f8;\n  uint PTR_080015f8_01 = 0xf8ff;\n  uint PTR_080015f8_02 = (new_data & 7) << 8;\n  uint PTR_080015f8_03 = 0x5fa0000;\n  uint PTR_080015f8_04 = (PTR_080015f8_00 & PTR_080015f8_01) | PTR_080015f8_02 | PTR_080015f8_03;\n  *PTR_080015f8 = PTR_080015f8_04;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b4",
            "calling": [
                "FUN_08001714"
            ],
            "imported": false,
            "current_name": "update_data_080015b4"
        },
        "FUN_080036f8": {
            "renaming": {
                "FUN_080036f8": "process_data_080036f8"
            },
            "code": "void process_data_080036f8(int *data)\n{\n    uint32_t *ptr1 = (uint32_t *)(*data + 0x10);\n    uint32_t *ptr2 = (uint32_t *)(*data + 0xc);\n\n    if ((*ptr1 & 2) && (*ptr2 & 2)) {\n        *ptr1 = 0xfffffffd;\n        data[7] = 1;\n        if ((*(uint *)(*data + 0x18) & 3) == 0) {\n            do_nothing_08003c4a(data);\n            do_nothing_08003c6e(data);\n        }\n        else {\n            do_nothing_08003c5c(data);\n        }\n        data[7] = 0;\n    }\n\n    if ((*ptr1 & 4) && (*ptr2 & 4)) {\n        *ptr1 = 0xfffffffb;\n        data[7] = 2;\n        if ((*(uint *)(*data + 0x18) & 0x300) == 0) {\n            do_nothing_08003c4a(data);\n            do_nothing_08003c6e(data);\n        }\n        else {\n            do_nothing_08003c5c(data);\n        }\n        data[7] = 0;\n    }\n\n    if ((*ptr1 & 8) && (*ptr2 & 8)) {\n        *ptr1 = 0xfffffff7;\n        data[7] = 4;\n        if ((*(uint *)(*data + 0x1c) & 3) == 0) {\n            do_nothing_08003c4a(data);\n            do_nothing_08003c6e(data);\n        }\n        else {\n            do_nothing_08003c5c(data);\n        }\n        data[7] = 0;\n    }\n\n    if ((*ptr1 & 0x10) && (*ptr2 & 0x10)) {\n        *ptr1 = 0xffffffef;\n        data[7] = 8;\n        if ((*(uint *)(*data + 0x1c) & 0x300) == 0) {\n            do_nothing_08003c4a(data);\n            do_nothing_08003c6e(data);\n        }\n        else {\n            do_nothing_08003c5c(data);\n        }\n        data[7] = 0;\n    }\n\n    if ((*ptr1 & 1) && (*ptr2 & 1)) {\n        *ptr1 = 0xfffffffe;\n        process_and_store_result_08004f78(data);\n    }\n\n    if ((*ptr1 & 0x80) && (*ptr2 & 0x80)) {\n        *ptr1 = 0xffffff7f;\n        do_nothing_08004378(data);\n    }\n\n    if ((*ptr1 & 0x40) && (*ptr2 & 0x40)) {\n        *ptr1 = 0xffffffbf;\n        do_nothing_08003c80(data);\n    }\n\n    if ((*ptr1 & 0x20) && (*ptr2 & 0x20)) {\n        *ptr1 = 0xffffffdf;\n        do_nothing_08004366(data);\n    }\n}",
            "called": [
                "FUN_08003c80",
                "FUN_08003c5c",
                "FUN_08004366",
                "FUN_08003c6e",
                "FUN_08004f78",
                "FUN_08003c4a",
                "FUN_08004378"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036f8",
            "calling": [
                "FUN_08005714"
            ],
            "imported": false,
            "current_name": "process_data_080036f8"
        },
        "FUN_080041a8": {
            "renaming": {
                "FUN_080041a8": "set_data_in_memory_080041a8",
                "param_1": "memory_address",
                "param_2": "data",
                "param_3": "byte_offset",
                "param_4": "mask",
                "PTR_": "memory_pointer",
                "DAT_": "current_data",
                "*": "dereferenced"
            },
            "code": "void set_data_in_memory_080041a8(int memory_address, uint32_t data, uint8_t byte_offset, int mask) {\n    uint32_t* PTR_ = (uint32_t*)(memory_address + 8);\n    uint32_t DAT_ = *PTR_ & 0xffff00ff;\n    uint32_t shifted_data = data | ((uint32_t)mask << 8) | byte_offset;\n    *PTR_ = DAT_ | shifted_data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041a8",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": false,
            "current_name": "set_data_in_memory_080041a8"
        },
        "FUN_080004c8": {
            "renaming": {
                "FUN_080004c8": "FUNC_080004c8"
            },
            "code": "\nulonglong FUNC_080004c8(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = calculate_result_080006a4();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006a4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004c8",
            "calling": [
                "FUN_080096e0",
                "FUN_08005e9c",
                "FUN_08004d78",
                "FUN_08004bd8",
                "FUN_080079e8",
                "FUN_080059f0"
            ],
            "imported": false,
            "current_name": "FUNC_080004c8"
        },
        "FUN_08008ad4": {
            "renaming": {
                "FUN_08008ad4": "get_data_pointer_08008ad4",
                "puVar1": "data_pointer",
                "PTR_PTR_DAT_08008ae8": "ptr_ptr_data",
                "PTR_DAT_08008aec": "ptr_data"
            },
            "code": "char* get_data_pointer_08008ad4()\n{\n  char* data_pointer;\n  data_pointer = *(char**)(*(int*)PTR_PTR_DAT_08008ae8 + 0x34);\n  if (*(char**)(*(int*)PTR_PTR_DAT_08008ae8 + 0x34) == NULL) {\n    data_pointer = PTR_DAT_08008aec;\n  }\n  return data_pointer + 0xf0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ad4",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "get_data_pointer_08008ad4"
        },
        "FUN_080009e8": {
            "renaming": {
                "FUN_080009e8": "is_end_of_string_080009e8",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_080009e8(void)\n{\n  char current_char;\n  check_and_return_params();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_08000978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009e8",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_080059f0"
            ],
            "imported": false,
            "current_name": "is_end_of_string_080009e8"
        },
        "FUN_08005674": {
            "renaming": {
                "FUN_08005674": "infinite_loop_08005674"
            },
            "code": "void infinite_loop_08005674(void)\n{\n  while(true) {\n    // do nothing\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005674",
            "calling": [
                "FUN_080052a0",
                "FUN_08005598",
                "FUN_08005348",
                "FUN_08005500",
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "infinite_loop_08005674"
        },
        "FUN_08003c4a": {
            "renaming": {
                "FUN_08003c4a": "do_nothing_08003c4a"
            },
            "code": "\nvoid do_nothing_08003c4a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c4a",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c4a"
        },
        "FUN_08009630": {
            "renaming": {
                "FUN_08009630": "calculate_values_08009630",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "param_5": "output_param_1",
                "param_6": "output_param_2",
                "iVar1": "allocated_memory",
                "uVar2": "leading_zeros_count",
                "iVar3": "count_leading_zeros",
                "iVar4": "integer_value",
                "uVar5": "shifted_value",
                "uVar6": "modified_fourth_param",
                "uVar7": "count_leading_zeros"
            },
            "code": "int calculate_values_08009630(int first_param, int second_param, uint third_param, uint fourth_param, int *output_param_1, int *output_param_2) {\n  int allocated_memory = allocate_and_initialize_memory_080090c0(first_param, 1);\n  uint modified_fourth_param = (fourth_param << 1) >> 0x15;\n  uint modified_third_param = fourth_param & 0xfffff;\n  if (modified_fourth_param != 0) {\n    modified_third_param = modified_third_param | 0x100000;\n  }\n  if (third_param == 0) {\n    int count_leading_zeros = count_leading_zeros_080091e4(&modified_third_param);\n    int integer_value = 1;\n    uint leading_zeros_count = count_leading_zeros + 0x20;\n    *(undefined4 *)(allocated_memory + 0x10) = 1;\n    *(uint *)(allocated_memory + 0x14) = modified_third_param;\n  }\n  else {\n    uint modified_third_param_copy = modified_third_param;\n    uint count_leading_zeros = count_leading_zeros_080091e4(&third_param);\n    if (count_leading_zeros == 0) {\n      *(uint *)(allocated_memory + 0x14) = third_param;\n    }\n    else {\n      uint shifted_value = modified_third_param << (0x20 - count_leading_zeros & 0xff);\n      modified_third_param = modified_third_param >> (count_leading_zeros & 0xff);\n      *(uint *)(allocated_memory + 0x14) = shifted_value | third_param;\n    }\n    int integer_value = (modified_third_param == 0) ? 1 : 2;\n    *(uint *)(allocated_memory + 0x18) = modified_third_param;\n    *(int *)(allocated_memory + 0x10) = integer_value;\n  }\n  if (modified_fourth_param == 0) {\n    *output_param_1 = leading_zeros_count - 0x432;\n    uint count_leading_zeros = count_leading_zeros_080091a4(*(undefined4 *)(allocated_memory + integer_value * 4 + 0x10));\n    *output_param_2 = (int)((ulonglong)count_leading_zeros >> 0x20) * 0x20 - (int)count_leading_zeros;\n    return allocated_memory;\n  }\n  *output_param_1 = (modified_fourth_param - 0x433) + leading_zeros_count;\n  *output_param_2 = 0x35 - leading_zeros_count;\n  return allocated_memory;\n}",
            "called": [
                "FUN_080091e4",
                "FUN_080091a4",
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009630",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_values_08009630"
        },
        "FUN_08004104": {
            "renaming": {
                "FUN_08004104": "update_flags_and_values_08004104",
                "param_1": "data_ptr",
                "param_2": "new_value",
                "param_3": "flag_value",
                "*(uint *)(param_1 + 0x20)": "flags",
                "*(uint *)(param_1 + 0x18)": "values",
                "0xffffffef": "0b11101111",
                "0xffff0fff": "0b11111111111100001111",
                "param_2 << 4": "new_value << 4",
                "param_3 << 0xc": "flag_value << 0xc"
            },
            "code": "void update_flags_and_values_08004104(int data_ptr, int new_value, int flag_value) {\n    uint* flags = (uint*)(data_ptr + 0x20);\n    uint* values = (uint*)(data_ptr + 0x18);\n    *flags = (*flags & 0xffffffef) | (new_value << 4);\n    *values = (*values & 0xffff0fff) | (flag_value << 0xc);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004104",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": false,
            "current_name": "update_flags_and_values_08004104"
        },
        "FUN_08000ff4": {
            "renaming": {
                "FUN_08000ff4": "isEndOfString_08000ff4",
                "in_CY": "currentChar",
                "calculate_and_concatenate_result_08000fd0_08000fd0": "calculateAndConcatenateResult"
            },
            "code": "bool isEndOfString_08000ff4(void)\n{\n  char currentChar;\n  calculateAndConcatenateResult();\n  return currentChar == '\\0';\n}",
            "called": [
                "FUN_08000fd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ff4",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "isEndOfString_08000ff4"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "process_data_wrapper_08005714",
                "PTR_DAT_08005724": "PTR_DATA",
                "process_data_080036f8": "process_data"
            },
            "code": "void process_data_wrapper_08005714(void)\n{\n  process_data(PTR_DAT_08005724);\n  return;\n}",
            "called": [
                "FUN_080036f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [],
            "imported": false,
            "current_name": "process_data_wrapper_08005714"
        },
        "FUN_08005d0c": {
            "renaming": {
                "FUN_08005d0c": "do_nothing_08005d0c"
            },
            "code": "\nvoid do_nothing_08005d0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d0c",
            "calling": [
                "FUN_08005838",
                "FUN_080059f0"
            ],
            "imported": false,
            "current_name": "do_nothing_08005d0c"
        },
        "FUN_08005e40": {
            "renaming": {
                "FUN_08005e40": "reverse_engineered_function_08005e40",
                "param_1": "input",
                "puVar2": "ptr",
                "iVar1": "index",
                "uVar4": "value"
            },
            "code": "int reverse_engineered_function_08005e40(uint x) {\n  int n = 0;\n  if (x <= 0x0000FFFFU) { n = n + 16; x = x << 16; }\n  if (x <= 0x00FFFFFFU) { n = n + 8; x = x << 8; }\n  if (x <= 0x0FFFFFFFU) { n = n + 4; x = x << 4; }\n  if (x <= 0x3FFFFFFFU) { n = n + 2; x = x << 2; }\n  if (x <= 0x7FFFFFFFU) { n = n + 1; }\n  return n;\n}\n\nint reverse_engineered_function_08005e40(uint input) {\n  int index = -(input & 3);\n  uint *ptr = (uint *)(input & 0xfffffffc);\n  uint value = *ptr;\n  if ((input & 3) != 0) {\n    value |= 0xffffffffU >> ((index + 4U & 0x1f) << 3);\n  }\n  while (true) {\n    ptr++;\n    value = value + 0xfefefeff & ~value & 0x80808080;\n    if (value != 0) { break; }\n    value = *ptr;\n    index += 4;\n  }\n  int leading_zeroes = reverse_engineered_function_08005e40(value & -value);\n  return index + (0x1fU - leading_zeroes >> 3);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e40",
            "calling": [
                "FUN_08005e9c",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "reverse_engineered_function_08005e40"
        },
        "FUN_08005d20": {
            "renaming": {
                "FUN_08005d20": "execute_functions_08005d20",
                "puVar1": "function_pointer",
                "iVar2": "i",
                "ppcVar3": "function_array",
                "iVar4": "function_count"
            },
            "code": "void execute_functions_08005d20(void)\n{\n  undefined *function_pointer;\n  int function_count;\n  code **function_array;\n  int i;\n  \n  function_count = (int)PTR_DAT_08005d58 - (int)PTR_DAT_08005d5c >> 2;\n  if (function_count != 0) {\n    i = 0;\n    function_array = (code **)PTR_DAT_08005d5c;\n    do {\n      i++;\n      (**function_array)();\n      function_array++;\n    } while (function_count != i);\n  }\n  \n  function_array = (code **)PTR_DAT_08005d64;\n  function_pointer = PTR_DAT_08005d60;\n  do_nothing_08009e68();\n  function_count = (int)function_pointer - (int)function_array >> 2;\n  if (function_count != 0) {\n    i = 0;\n    do {\n      i++;\n      (**function_array)();\n      function_array++;\n    } while (function_count != i);\n  }\n  return;\n}",
            "called": [
                "FUN_08000134",
                "FUN_080078a0",
                "FUN_08009e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d20",
            "calling": [
                "FUN_080057e8"
            ],
            "imported": false,
            "current_name": "execute_functions_08005d20"
        },
        "FUN_08001a80": {
            "renaming": {
                "FUN_08001a80": "set_param_at_address_08001a80",
                "param_1": "address",
                "param_2": "value",
                "param_3": "is_high_byte",
                "*(uint *)(param_1 + 0x10)": "*(uint32_t *)(address + 0x10)",
                "uint": "uint32_t"
            },
            "code": "void set_param_at_address_08001a80(uint32_t address, uint16_t value, char is_high_byte){\n  if (is_high_byte == '\\0') {\n    *(uint32_t *)(address + 0x10) = (uint32_t)value << 0x10;\n  }\n  else {\n    *(uint32_t *)(address + 0x10) = (uint32_t)value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a80",
            "calling": [
                "FUN_080055f4",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "set_param_at_address_08001a80"
        },
        "FUN_08005838": {
            "renaming": {
                "FUN_08005838": "calculate_result_08005838",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "difference",
                "uVar2": "result1",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result2",
                "uVar6": "concat_input3_input4"
            },
            "code": "uint calculate_result_08005838(uint input1, uint input2, uint input3, uint input4)\n{\n  int difference;\n  undefined4 result1;\n  uint result2;\n  uint result3;\n  uint result4;\n  undefined8 concat_input3_input4;\n  \n  concat_input3_input4 = CONCAT44(DAT_080059bc, DAT_080059b8);\n  result4 = input4 & 0x7fffffff;\n  if ((DAT_080059e8 < (result4 | (-input3 | input3) >> 0x1f)) || (result3 = input2 & 0x7fffffff, DAT_080059e8 < (result3 | (-input1 | input1) >> 0x1f))) {\n    result4 = FUNC_0800015c(input3, input4, input1, input2);\n    return result4;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    result4 = FUNC_080059f0();\n    return result4;\n  }\n  result2 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((result3 | input1) == 0) {\n    if (result2 == 2) {\n      return DAT_080059b0;\n    }\n    result4 = DAT_080059a0;\n    if (result2 != 3) {\n      return input1;\n    }\n  }\n  else {\n    if ((result4 | input3) != 0) {\n      if (result4 == DAT_080059e8) {\n        if (result3 == result4) {\n          if (result2 == 2) {\n            return DAT_080059e0;\n          }\n          if (result2 == 3) {\n            return DAT_080059d8;\n          }\n          if (result2 == 1) {\n            return DAT_080059d0;\n          }\n          return DAT_080059c8;\n        }\n        if (result2 == 2) {\n          return DAT_080059b0;\n        }\n        if (result2 == 3) {\n          return DAT_080059a0;\n        }\n        if (result2 == 1) {\n          return 0;\n        }\n        return 0;\n      }\n      if (result3 != DAT_080059e8) {\n        difference = (int)(result3 - result4) >> 0x14;\n        if (difference < 0x3d) {\n          if (((int)input4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference, 0x3c))) {\n            concat_input3_input4 = 0;\n          }\n          else {\n            FUNC_0800071c(input1, input2, input3, input4, input4);\n            do_nothing_08005d0c();\n            concat_input3_input4 = FUNC_080059f0();\n          }\n        }\n        result1 = (undefined4)((ulonglong)concat_input3_input4 >> 0x20);\n        result4 = (uint)concat_input3_input4;\n        if (result2 == 1) {\n          return result4;\n        }\n        if (result2 == 2) {\n          concat_input3_input4 = FUNC_08000158(result4, result1, DAT_080059a8, DAT_080059ac);\n          result4 = FUNC_08000158(DAT_080059b0, DAT_080059b4, (int)concat_input3_input4, (int)((ulonglong)concat_input3_input4 >> 0x20));\n          return result4;\n        }\n        if (result2 == 0) {\n          return result4;\n        }\n        concat_input3_input4 = FUNC_08000158(result4, result1, DAT_080059a8, DAT_080059ac);\n        result4 = FUNC_08000158((int)concat_input3_input4, (int)((ulonglong)concat_input3_input4 >> 0x20), DAT_080059b0, DAT_080059b4);\n        return result4;\n      }\n    }\n    result4 = DAT_080059c0;\n    if (-1 < (int)input2) {\n      result4 = DAT_080059b8;\n    }\n  }\n  return result4;\n}\n",
            "called": [
                "FUN_08000158",
                "FUN_0800015c",
                "FUN_0800071c",
                "FUN_08005d0c",
                "FUN_080059f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005838",
            "calling": [
                "thunk_FUN_08005838"
            ],
            "imported": false,
            "current_name": "calculate_result_08005838"
        },
        "FUN_080090a8": {
            "renaming": {
                "FUN_080090a8": "do_nothing_with_pointer_080090a8",
                "PTR_DAT_080090b0": "PTR_data"
            },
            "code": "void do_nothing_with_pointer_080090a8(void)\n{\n  do_nothing(PTR_DAT_080090b0);\n  return;\n}",
            "called": [
                "FUN_08008af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090a8",
            "calling": [
                "FUN_0800884c",
                "FUN_08009adc",
                "FUN_08008af8",
                "FUN_080088ec"
            ],
            "imported": false,
            "current_name": "do_nothing_with_pointer_080090a8"
        },
        "FUN_08004e74": {
            "renaming": {
                "FUN_08004e74": "execute_system_call_if_initialized_08004e74",
                "param_1": "arg",
                "uVar1": "result",
                "PTR_DAT_08004ea0": "initialized",
                "print_system_call_08004e6c": "print_system_call"
            },
            "code": "int execute_system_call_if_initialized_08004e74(int arg){\n  int PTR_DAT_08004ea0 = *(int *)PTR_DAT_08004ea0;\n  if (PTR_DAT_08004ea0 == 0) {\n    int result = print_system_call_08004e6c(1, arg, 0);\n    return result;\n  }\n  else {\n    return 0;\n  }\n}",
            "called": [
                "FUN_08004e6c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "execute_system_call_if_initialized_08004e74"
        },
        "FUN_080096e0": {
            "renaming": {
                "FUN_080096e0": "calculate_float_080096e0",
                "param_1": "exponent",
                "param_2": "mantissa",
                "param_3": "result",
                "param_4": "rounding_mode",
                "iVar1": "max_exponent",
                "uVar3": "abs_mantissa",
                "uVar4": "combined",
                "iVar2": "shift"
            },
            "code": "uint32_t calculate_float_080096e0(uint32_t exponent, uint32_t mantissa, int *result, uint32_t rounding_mode) {\n    int max_exponent = MAX_EXPONENT;\n    uint64_t combined = ((uint64_t)mantissa << 32) | exponent;\n    int shift = 0;\n    *result = 0;\n    if (((int)mantissa <= max_exponent) && ((mantissa | exponent) != 0)) {\n        if (mantissa < 0x100000) {\n            combined = calculate_combined(mantissa, exponent, 0, ROUNDING_CONSTANT, rounding_mode);\n            shift = -54;\n            mantissa = (uint32_t)(combined >> 32) & 0x7fffffff;\n        }\n        exponent = (uint32_t)combined;\n        mantissa = ((uint32_t)(combined >> 32) & 0x800fffff) | 0x3fe00000;\n        *result = ((int)mantissa >> 20) - 0x3fe + shift;\n    }\n    return ((uint64_t)mantissa << 32) | exponent;\n}",
            "called": [
                "FUN_080004c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080096e0",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "calculate_float_080096e0"
        },
        "FUN_0800910c": {
            "renaming": {
                "FUN_0800910c": "retrieve_data_0800910c",
                "param_1": "data_address",
                "param_2": "output_data",
                "iVar1": "data_ptr"
            },
            "code": "void retrieve_data_0800910c(int data_address, undefined4 *output_data)\n{\n  int data_ptr;\n\n  if (output_data != (undefined4 *)0x0) {\n    data_ptr = *(int *)(data_address + 0x4c);\n    *output_data = *(undefined4 *)(data_ptr + output_data[1] * 4);\n    *(undefined4 **)(data_ptr + output_data[1] * 4) = output_data;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800910c",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "retrieve_data_0800910c"
        },
        "FUN_080052a0": {
            "renaming": {
                "FUN_080052a0": "calculate_and_set_mask_080052a0",
                "local_44": "bit_mask",
                "local_40": "bit_shift",
                "local_3c": "byte_mask",
                "local_38": "zero",
                "local_34": "zero",
                "local_30": "one",
                "local_2c": "sixteen",
                "local_28": "zero",
                "local_20": "one",
                "local_14": "two",
                "local_10": "sixteen",
                "iVar2": "result",
                "PTR_s____src_main_c_08005340": "s_main_c",
                "DAT_08005344": "twenty_eight",
                "get_value_from_pointer_08003504": "get_value_from_pointer",
                "FUNC_08002d98": "calculate_value",
                "check_input_and_calculate_08003260": "check_input_and_calculate",
                "validate_input_08001762": "validate_input",
                "set_bit_in_dat_0800177c": "set_bit_in_dat",
                "apply_mask_and_set_byte_0800172a": "apply_mask_and_set_byte"
            },
            "code": "void calculate_and_set_mask_080052a0() {\n  long long product;\n  int result;\n  unsigned long long value;\n  unsigned int bit_mask = 0xf;\n  unsigned int bit_shift = 2;\n  unsigned int byte_mask = 0x80;\n  unsigned int zero = 0;\n  unsigned int one = 1;\n  unsigned int sixteen = 0x10000;\n  unsigned int DAT_08005344 = 0x1c0000;\n  result = calculate_value(&one);\n  if (result != 0) {\n    infinite_loop(\"s____src_main_c_08005340\", 0x151);\n  }\n  result = check_input_and_calculate(&bit_mask, bit_shift);\n  if (result != 0) {\n    infinite_loop(\"s____src_main_c_08005340\", 0x15e);\n  }\n  value = get_value_from_pointer();\n  product = (long long)DAT_08005344 * (value & 0xffffffff);\n  validate_input((unsigned int)(product >> 0x26), (unsigned int)(value >> 0x20), (int)product);\n  set_bit_in_dat(4);\n  apply_mask_and_set_byte(0xffffffff, zero, zero);\n}\n",
            "called": [
                "FUN_08005674",
                "FUN_08003504",
                "FUN_08001762",
                "FUN_08003260",
                "FUN_0800177c",
                "FUN_08002d98",
                "FUN_0800172a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052a0",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "calculate_and_set_mask_080052a0"
        },
        "FUN_08009120": {
            "renaming": {
                "FUN_08009120": "calculate_polynomial_08009120",
                "param_1": "degree",
                "param_2": "coefficients",
                "param_3": "base",
                "param_4": "accumulator",
                "puVar1": "result",
                "uVar2": "carry",
                "iVar3": "num_coefficients",
                "puVar4": "current_coefficient",
                "iVar5": "mem_location"
            },
            "code": "undefined4 * calculate_polynomial_08009120(int degree, undefined4 *coefficients, int base, uint64_t accumulator)\n{\n  undefined4 *result;\n  uint64_t carry;\n  int i;\n  int num_coefficients = coefficients[4];\n  uint32_t *current_coefficient = coefficients + 5;\n  for (i = 0; i < num_coefficients; i++) {\n    accumulator = base * (*current_coefficient & 0xffff) + accumulator;\n    carry = base * (*current_coefficient >> 0x10) + (accumulator >> 0x10);\n    *current_coefficient = (accumulator & 0xffff) + carry * 0x10000;\n    accumulator = carry >> 0x10;\n    current_coefficient++;\n  }\n  result = coefficients;\n  if (accumulator != 0) {\n    if ((int)coefficients[2] <= num_coefficients) {\n      result = (undefined4 *)allocate_and_initialize_memory_080090c0(degree, coefficients[1] + 1);\n      copy_memory_block_08001084(result + 3, coefficients + 3, (coefficients[4] + 2) * 4);\n      int mem_location = *(int *)(degree + 0x4c);\n      *coefficients = *(undefined4 *)(mem_location + coefficients[1] * 4);\n      *(undefined4 **)(mem_location + coefficients[1] * 4) = coefficients;\n    }\n    result[num_coefficients + 5] = accumulator;\n    result[4] = num_coefficients + 1;\n  }\n  return result;\n}",
            "called": [
                "FUN_08001084",
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009120",
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_polynomial_08009120"
        },
        "FUN_08001084": {
            "renaming": {
                "FUN_08001084": "copy_memory_block_08001084",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "uVar4": "i",
                "uVar5": "remaining_size",
                "bVar6": "is_aligned"
            },
            "code": "undefined4 *copy_memory_block_08001084(undefined4 *destination, undefined4 *source, uint32_t size)\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  uint32_t remaining_size;\n  uint32_t i;\n  bool is_aligned;\n  \n  dest_ptr = destination;\n  is_aligned = (((uint32_t)source | (uint32_t)destination) & 3) == 0;\n  if (!is_aligned) {\n    if (size < 8) {\n      remaining_size = size - 4;\n      if (remaining_size > 3) {\n        do {\n          src_ptr = source;\n          dest_ptr = dest_ptr;\n          remaining_size--;\n          *(undefined *)dest_ptr = *(undefined *)src_ptr;\n          dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n          source = (undefined4 *)((int)src_ptr + 1);\n        } while (remaining_size != 0);\n        *(undefined *)(undefined4 *)((int)dest_ptr + 1) = *(undefined *)(undefined4 *)((int)src_ptr + 1);\n        *(undefined *)((int)dest_ptr + 2) = *(undefined *)((int)src_ptr + 2);\n        *(undefined *)((int)dest_ptr + 3) = *(undefined *)((int)src_ptr + 3);\n        return destination;\n      }\n      goto LAB_08001108;\n    }\n    if ((((uint32_t)source & 3) != 0) && (((uint32_t)destination & 3) != 0)) {\n      remaining_size = 4 - ((uint32_t)destination & 3);\n      size = size - remaining_size;\n      src_ptr = source;\n      dest_ptr = destination;\n      if (((uint32_t)destination & 1) != 0) {\n        src_ptr = (undefined4 *)((int)source + 1);\n        dest_ptr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      if ((remaining_size & 2) != 0) {\n        dest_ptr = (undefined4 *)((int)dest_ptr + 2);\n        src_ptr = (undefined4 *)((int)src_ptr + 2);\n        *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n      }\n    }\n  }\n  for (i = 0; i < size / 16; i++) {\n    *dest_ptr = *source;\n    dest_ptr[1] = source[1];\n    dest_ptr[2] = source[2];\n    dest_ptr[3] = source[3];\n    dest_ptr[4] = source[4];\n    dest_ptr[5] = source[5];\n    dest_ptr[6] = source[6];\n    dest_ptr[7] = source[7];\n    dest_ptr[8] = source[8];\n    dest_ptr[9] = source[9];\n    dest_ptr[10] = source[10];\n    dest_ptr[11] = source[11];\n    dest_ptr[12] = source[12];\n    dest_ptr[13] = source[13];\n    dest_ptr[14] = source[14];\n    dest_ptr[15] = source[15];\n    dest_ptr += 16;\n    source += 16;\n  }\n  remaining_size = size - (i * 16);\n  if (remaining_size > 15) {\n    do {\n      *dest_ptr = *source;\n      dest_ptr[1] = source[1];\n      dest_ptr[2] = source[2];\n      dest_ptr[3] = source[3];\n      dest_ptr += 4;\n      source += 4;\n      remaining_size -= 16;\n    } while (remaining_size > 15);\n  }\n  if (remaining_size > 3) {\n    do {\n      source = source + 1;\n      *dest_ptr = *source;\n      remaining_size -= 4;\n      dest_ptr = dest_ptr + 1;\n    } while (remaining_size > 3);\n  }\n  if (remaining_size != 0) {\n    if ((remaining_size & 1) != 0) {\n      *(undefined *)dest_ptr = *(undefined *)source;\n      source = (undefined4 *)((int)source + 1);\n      dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n    }\n    if ((remaining_size & 2) != 0) {\n      *(undefined2 *)dest_ptr = *(undefined2 *)source;\n    }\n  }\n  return destination;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001084",
            "calling": [
                "FUN_080097cc",
                "FUN_08009120",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "copy_memory_block_08001084"
        },
        "FUN_08005680": {
            "renaming": {
                "FUN_08005680": "decode_bits_08005680",
                "*param_1": "*input_bits",
                "local_18": "target_bits",
                "local_14": "num_bits",
                "local_c": "bit_offset",
                "decode_bits_080017c4": "decode_bits_helper"
            },
            "code": "void decode_bits_08005680(int *input_bits)\n{\n  int target_bits = 0x900;\n  int num_bits = 2;\n  int bit_offset = 2;\n  if (*input_bits == target_bits) {\n    decode_bits_08005680_helper(DAT_080056b8, &target_bits);\n  }\n  return;\n}",
            "called": [
                "FUN_080017c4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005680",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "decode_bits_08005680"
        },
        "FUN_08003260": {
            "renaming": {
                "FUN_08003260": "check_input_and_calculate_08003260",
                "param_1": "input_array",
                "param_2": "input_size",
                "uVar3": "calculated_result",
                "uVar4": "return_value",
                "iVar1": "pointer_diff_1",
                "iVar2": "pointer_diff_2",
                "DAT_08003430": "input_size_ptr",
                "DAT_08003434": "input_data_ptr",
                "PTR_DAT_0800343c": "result_ptr",
                "PTR_DAT_08003438": "shift_amount",
                "validate_input_0800151c": "validate_input",
                "get_pointer_value_080015a0": "get_pointer_diff",
                "calculate_result_08003440": "calculate_result"
            },
            "code": "int check_input_and_calculate_08003260(uint *input_array, uint input_size) {\n  int pointer_diff_1;\n  int pointer_diff_2;\n  uint calculated_result;\n  int return_value;\n  if (((*DAT_08003430 & 7) < input_size) && (*DAT_08003430 = input_size | *DAT_08003430 & 0xfffffff8, input_size != (*DAT_08003430 & 7))) {\n    return_value = 1;\n  }\n  else {\n    if ((*input_array & 2) != 0) {\n      DAT_08003434[1] = input_array[2] | DAT_08003434[1] & 0xffffff0f;\n    }\n    if ((*input_array & 1) == 0) {\n      while (1) {\n        if ((input_size < (*DAT_08003430 & 7)) && (*DAT_08003430 = input_size | *DAT_08003430 & 0xfffffff8, input_size != (*DAT_08003430 & 7))) {\n          return_value = 1;\n          break;\n        }\n        else {\n          if ((*input_array & 4) != 0) {\n            DAT_08003434[1] = input_array[3] | DAT_08003434[1] & 0xfffff8ff;\n          }\n          if ((*input_array & 8) != 0) {\n            DAT_08003434[1] = input_array[4] << 3 | DAT_08003434[1] & 0xffffc7ff;\n          }\n          calculated_result = calculate_result();\n          *(uint *)PTR_DAT_0800343c = calculated_result >> PTR_DAT_08003438[DAT_08003434[1] >> 4 & 0xf];\n          validate_input(0xf);\n          return_value = 0;\n          break;\n        }\n      }\n    }\n    else {\n      if (input_array[1] == 1) {\n        if ((*DAT_08003434 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((input_array[1] != 2) && ((*DAT_08003434 & 2) == 0)) {\n        return 1;\n      }\n      DAT_08003434[1] = input_array[1] | DAT_08003434[1] & 0xfffffffc;\n      pointer_diff_1 = get_pointer_diff();\n      if (input_array[1] == 1) {\n        while (1) {\n          if ((DAT_08003434[1] & 0xc) == 4) {\n            break;\n          }\n          pointer_diff_2 = get_pointer_diff();\n          if ((uint)(pointer_diff_2 - pointer_diff_1) >= 0x1389) {\n            return_value = 3;\n            break;\n          }\n        }\n      }\n      else if (input_array[1] == 2) {\n        while (1) {\n          if ((DAT_08003434[1] & 0xc) == 8) {\n            break;\n          }\n          pointer_diff_2 = get_pointer_diff();\n          if ((uint)(pointer_diff_2 - pointer_diff_1) >= 0x1389) {\n            return_value = 3;\n            break;\n          }\n        }\n      }\n      else {\n        while (1) {\n          if ((DAT_08003434[1] & 0xc) == 0) {\n            break;\n          }\n          pointer_diff_2 = get_pointer_diff();\n          if ((uint)(pointer_diff_2 - pointer_diff_1) >= 0x1389) {\n            return_value = 3;\n            break;\n          }\n        }\n      }\n    }\n  }\n  return return_value;\n}",
            "called": [
                "FUN_08003440",
                "FUN_0800151c",
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003260",
            "calling": [
                "FUN_080052a0"
            ],
            "imported": false,
            "current_name": "check_input_and_calculate_08003260"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "calculate_value_08001ab0",
                "param_1": "params",
                "uVar1": "value1",
                "cVar2": "is_valid_value",
                "uVar3": "result",
                "uVar4": "value2",
                "bVar5": "is_zero"
            },
            "code": "int calculate_value_08001ab0(uint **params)\\n{\\n  uint value1;\\n  char is_valid_value;\\n  int result;\\n  uint value2;\\n  bool is_zero;\\n  \\n  if (params == NULL) {\\n    result = 1;\\n  }\\n  else {\\n    if (*(char *)((int)params + 0x3d) == \"\\0\") {\\n      *(undefined *)(params + 0xf) = 0;\\n      do_nothing(params);\\n    }\\n    *(undefined *)((int)params + 0x3d) = 0x24;\\n    **params = **params & 0xfffffffe;\\n    value1 = get_shifted_value();\\n    if (DAT_08001ca4 < params[1]) {\\n      value2 = value1;\\n      if (value1 <= DAT_08001cac) {\\n        value2 = 1;\\n      }\\n      is_valid_value = (char)value2;\\n      if (DAT_08001cac < value1) {\\n        is_valid_value = \"\\0\";\\n      }\\n    }\\n    else {\\n      value2 = value1;\\n      if (value1 <= DAT_08001ca8) {\\n        value2 = 1;\\n      }\\n      is_valid_value = (char)value2;\\n      if (DAT_08001ca8 < value1) {\\n        is_valid_value = \"\\0\";\\n      }\\n    }\\n    if (is_valid_value == \"\\0\") {\\n      value2 = (uint)((ulonglong)DAT_08001cb0 * (ulonglong)value1 >> 0x32);\\n      (*params)[1] = value2;\\n      if (DAT_08001ca4 < params[1]) {\\n        value2 = (uint)((ulonglong)DAT_08001cb4 * (ulonglong)(value2 * 300) >> 0x26);\\n      }\\n      (*params)[8] = value2 + 1;\\n      if (DAT_08001ca4 < params[1]) {\\n        if (params[2] == NULL) {\\n          value2 = (value1 - 1) / (uint)((int)params[1] * 3) + 1 & 0xfff;\\n          is_zero = value2 == 0;\\n          if (is_zero) {\\n            value2 = 1;\\n          }\\n          is_valid_value = (char)value2;\\n          if (!is_zero) {\\n            is_valid_value = \"\\0\";\\n          }\\n        }\\n        else {\\n          value2 = (value1 - 1) / (uint)((int)params[1] * 0x19) + 1 & 0xfff;\\n          is_zero = value2 == 0;\\n          if (is_zero) {\\n            value2 = 1;\\n          }\\n          is_valid_value = (char)value2;\\n          if (!is_zero) {\\n            is_valid_value = \"\\0\";\\n          }\\n        }\\n        if (is_valid_value == \"\\0\") {\\n          if (params[2] == NULL) {\\n            value1 = (value1 - 1) / (uint)((int)params[1] * 3) + 1 & 0xfff | 0x8000;\\n          }\\n          else {\\n            value1 = (value1 - 1) / (uint)((int)params[1] * 0x19) + 1 & 0xfff | 0xc000;\\n          }\\n        }\\n        else {\\n          value1 = 1;\\n        }\\n      }\\n      else {\\n        value1 = (value1 - 1) / (uint)((int)params[1] << 1) + 1 & 0xfff;\\n        if (value1 < 4) {\\n          value1 = 4;\\n        }\\n      }\\n      **params = (uint)params[8] | (uint)params[7];\\n      (*params)[2] = (uint)params[3] | (uint)params[4];\\n      (*params)[3] = (uint)params[6] | (uint)params[5];\\n      **params = **params | 1;\\n      params[0x10] = NULL;\\n      *(undefined *)((int)params + 0x3d) = 0x20;\\n      params[0xc] = NULL;\\n      *(undefined *)((int)params + 0x3e) = 0;\\n      result = 0;\\n    }\\n    else {\\n      result = 1;\\n    }\\n  }\\n  return result;\\n}",
            "called": [
                "FUN_08001cb8",
                "FUN_08003518"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08005348"
            ],
            "imported": false,
            "current_name": "calculate_value_08001ab0"
        },
        "FUN_08003540": {
            "renaming": {
                "FUN_08003540": "get_shifted_value_08003540",
                "uVar1": "value",
                "get_value_from_pointer_08003504": "get_value",
                "PTR_DAT_08003564": "data_pointer",
                "DAT_08003560": "data"
            },
            "code": "uint get_shifted_value_08003540(void)\n{\n  uint value = get_value();\n  uint shift_amount = *(uint *)(PTR_DAT_08003564 + 4) >> 0xb & 7;\n  return value >> shift_amount;\n}",
            "called": [
                "FUN_08003504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003540",
            "calling": [
                "FUN_080046ec"
            ],
            "imported": false,
            "current_name": "get_shifted_value_08003540"
        },
        "FUN_08009244": {
            "renaming": {
                "FUN_08009244": "initialize_memory_with_value_and_flag_08009244",
                "param_1": "size",
                "param_2": "flag",
                "iVar1": "memory_address"
            },
            "code": "void initialize_memory_with_value_and_flag_08009244(int size, int flag) {\n  int memory_address = allocate_and_initialize_memory_080090c0(size, 1);\n  *(int *)(memory_address + 16) = 1;\n  *(int *)(memory_address + 20) = flag;\n  return;\n}",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009244",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "initialize_memory_with_value_and_flag_08009244"
        },
        "FUN_08003c5c": {
            "renaming": {
                "FUN_08003c5c": "do_nothing_08003c5c"
            },
            "code": "\nvoid do_nothing_08003c5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c5c",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c5c"
        },
        "FUN_08004e6c": {
            "renaming": {
                "FUN_08004e6c": "print_system_call_08004e6c",
                "PTR_": "",
                "DAT_": "",
                "0x3f": "SYSTEM_CALL",
                "software_interrupt": "syscall"
            },
            "code": "void print_system_call_08004e6c(void)\n{\n  software_interrupt(SYSTEM_CALL);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e6c",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": false,
            "current_name": "print_system_call_08004e6c"
        },
        "FUN_08001762": {
            "renaming": {
                "FUN_08001762": "validate_input_08001762",
                "param_1": "input",
                "uVar1": "is_valid",
                "check_input_080016d0": "check_input"
            },
            "code": "int validate_input_08001762(int input) {\n  int is_valid = check_input(input);\n  return is_valid;\n}",
            "called": [
                "FUN_080016d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001762",
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "imported": false,
            "current_name": "validate_input_08001762"
        },
        "FUN_08000158": {
            "renaming": {
                "FUN_08000158": "FUNC_08000158"
            },
            "code": "\nulonglong FUNC_08000158(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_08000268;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000158",
            "calling": [
                "FUN_08005838",
                "FUN_08005e9c",
                "FUN_08004bd8",
                "FUN_080079e8",
                "FUN_080059f0"
            ],
            "imported": false,
            "current_name": "FUNC_08000158"
        },
        "FUN_08009768": {
            "renaming": {
                "FUN_08009768": "copy_string_08009768",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "cVar1": "current_char",
                "puVar2": "src_ptr",
                "puVar3": "dest_ptr",
                "uVar4": "current_word"
            },
            "code": "void copy_string_08009768(uint *destination, uint *source, uint length)\n{\n    char current_char;\n    uint *dest_ptr;\n    uint *src_ptr;\n    uint current_word;\n    \n    if (((uint)destination | (uint)source) & 3) != 0 || length <= 3) {\n        goto handle_remaining_bytes;\n    }\n    \n    dest_ptr = destination;\n    src_ptr = source;\n    \n    while (length > 3) {\n        current_word = *src_ptr;\n        if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) {\n            goto handle_remaining_bytes;\n        }\n        length -= 4;\n        *dest_ptr = current_word;\n        dest_ptr++;\n        src_ptr++;\n    }\n    \nhandle_remaining_bytes:\n    current_char = *(char *)src_ptr;\n    *(char *)dest_ptr = current_char;\n    \n    while (current_char != '\\0') {\n        dest_ptr = (uint *)((int)dest_ptr + 1);\n        length--;\n        if (length == 0) {\n            return;\n        }\n        src_ptr = (uint *)((int)src_ptr + 1);\n        current_char = *(char *)src_ptr;\n        *(char *)dest_ptr = current_char;\n    }\n    \n    while (length != 0) {\n        dest_ptr = (uint *)((int)dest_ptr + 1);\n        length--;\n        *(char *)dest_ptr = '\\0';\n    }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009768",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "copy_string_08009768"
        },
        "FUN_08003ff8": {
            "renaming": {
                "FUN_08003ff8": "update_data_08003ff8",
                "param_1": "data_ptr",
                "param_2": "data_array",
                "local_c": "flag",
                "iVar1": "data_value_1",
                "iVar2": "data_value_2"
            },
            "code": "void update_data_08003ff8(int data_ptr, int *data_array){\n    int data_value_1;\n    int data_value_2;\n    uint16_t flag;\n  \n    // Clear the 12th bit of the flag at data_ptr + 0x20\n    *(uint16_t *)(data_ptr + 0x20) = *(uint16_t *)(data_ptr + 0x20) & 0xffffefff;\n  \n    // Store the value at data_ptr + 4 in local variable flag\n    flag = *(uint16_t *)(data_ptr + 4);\n  \n    // Store the values of data_array[0] and data_array[2] in local variables\n    data_value_1 = *data_array;\n    data_value_2 = data_array[2];\n  \n    // If data_ptr is equal to DAT_0800409c, then update the flag accordingly\n    if (data_ptr == DAT_0800409c) {\n        flag = data_array[5] << 6 | flag & 0xffffbfff;\n    }\n  \n    // Update the flag value at data_ptr + 4 with the local variable value\n    *(uint16_t *)(data_ptr + 4) = flag;\n  \n    // Update the value at data_ptr + 0x1c with data_array[0] shifted left by 8 bits\n    *(uint16_t *)(data_ptr + 0x1c) = data_value_1 << 8 | *(uint16_t *)(data_ptr + 0x1c) & 0xffff8cff;\n  \n    // Update the value at data_ptr + 0x40 with data_array[1]\n    *(int *)(data_ptr + 0x40) = data_array[1];\n  \n    // Update the flag value at data_ptr + 0x20 with data_array[2] shifted left by 12 bits\n    *(uint16_t *)(data_ptr + 0x20) = data_value_2 << 0xc | *(uint16_t *)(data_ptr + 0x20) & 0xffffdfff;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ff8",
            "calling": [
                "FUN_08003908"
            ],
            "imported": false,
            "current_name": "update_data_08003ff8"
        },
        "FUN_08004ea4": {
            "renaming": {
                "FUN_08004ea4": "update_flag_if_valid_input_08004ea4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "PTR_DAT_08004ee4": "PTR_FLAG_ARRAY",
                "PTR_DAT_08004ee0": "PTR_FLAG_POINTER"
            },
            "code": "void update_flag_if_valid_input_08004ea4(char* input_1, char* input_2, int input_3, short input_4)\n{\n  check_and_update_flag(PTR_DAT_08004ee4, input_1, input_2, 1, input_3, input_4, *(int*)PTR_DAT_08004ee0);\n  return;\n}",
            "called": [
                "FUN_08001ccc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ea4",
            "calling": [],
            "imported": false,
            "current_name": "update_flag_if_valid_input_08004ea4"
        },
        "FUN_080040a0": {
            "renaming": {
                "FUN_080040a0": "set_bits_and_shift_left_080040a0",
                "param_1": "mem_address",
                "param_2": "value_to_set",
                "param_3": "shift_amount",
                "uVar1": "original_value"
            },
            "code": "void set_bits_and_shift_left_080040a0(int mem_address, uint32_t value_to_set, int shift_amount){\n  uint32_t original_value = *(uint32_t *)(mem_address + 0x20);\n  *(uint32_t *)(mem_address + 0x20) = original_value & 0xfffffffe;\n  *(uint32_t *)(mem_address + 0x18) = (shift_amount << 4) | (*(uint32_t *)(mem_address + 0x18) & 0xffffff0f);\n  *(uint32_t *)(mem_address + 0x20) = value_to_set | (original_value & 0xfffffff5);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040a0",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": false,
            "current_name": "set_bits_and_shift_left_080040a0"
        },
        "FUN_08009a18": {
            "renaming": {
                "FUN_08009a18": "reverse_copy_08009a18",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "len",
                "puVar1": "dest32",
                "puVar2": "src32",
                "iVar3": "i",
                "puVar4": "end",
                "puVar5": "unused",
                "uVar6": "unused",
                "uVar7": "unused"
            },
            "code": "void reverse_copy_08009a18(uint8_t *dest, const uint8_t *src, uint32_t len) {\n    if (src < dest && src + len > dest) {\n        uint8_t *end = dest + len;\n        while (src != end) {\n            *(--end) = *(--src);\n        }\n    } else {\n        uint32_t i;\n        uint32_t *dest32 = (uint32_t *)dest;\n        const uint32_t *src32 = (const uint32_t *)src;\n        for (i = 0; i < len / 16; i++) {\n            dest32[0] = src32[0];\n            dest32[1] = src32[1];\n            dest32[2] = src32[2];\n            dest32[3] = src32[3];\n            dest32 += 4;\n            src32 += 4;\n        }\n        for (i = 0; i < len % 16; i++) {\n            dest[len - i - 1] = src[len - i - 1];\n        }\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009a18",
            "calling": [
                "FUN_080097cc",
                "FUN_08009adc"
            ],
            "imported": false,
            "current_name": "reverse_copy_08009a18"
        },
        "FUN_0800119c": {
            "renaming": {
                "FUN_0800119c": "convert_uint_to_signed_int_0800119c",
                "param_1": "unsigned_int_input",
                "param_2": "signed_int_input",
                "uVar1": "shifted_value",
                "iVar2": "shifted_signed_input",
                "uVar3": "shifted_value_negated",
                "shifted_value": "shifted_value",
                "shifted_value_negated": "shifted_value_negated",
                "shifted_input": "shifted_input"
            },
            "code": "uint convert_uint_to_signed_int_0800119c(uint unsigned_int_input,uint signed_int_input)\n{\n  uint result;\n  int shifted_signed_input = signed_int_input * 2 + 0x200000;\n  if (signed_int_input * 2 < 0xffe00000) {\n    if (shifted_signed_input >= 0) {\n      return 0;\n    }\n    uint shifted_value = shifted_signed_input >> 0x15;\n    uint shifted_value_negated = -shifted_value - 0x3e1;\n    if (shifted_value < 0xfffffc20 && shifted_value_negated != 0) {\n      uint shifted_input = (signed_int_input << 0xb | 0x80000000 | unsigned_int_input >> 0x15) >> (shifted_value_negated & 0xff);\n      if ((signed_int_input & 0x80000000) != 0) {\n        shifted_input = -shifted_input;\n      }\n      return shifted_input;\n    }\n  }\n  else if ((unsigned_int_input | signed_int_input << 0xc) != 0) {\n    return 0;\n  }\n  signed_int_input = signed_int_input & 0x80000000;\n  if (signed_int_input == 0) {\n    signed_int_input = 0x7fffffff;\n  }\n  return signed_int_input;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800119c",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "convert_uint_to_signed_int_0800119c"
        },
        "FUN_08005728": {
            "renaming": {
                "FUN_08005728": "get_local_value_08005728",
                "param_1": "input_value",
                "puVar1": "local_pointer",
                "auStack_18": "local_array",
                "local_14": "local_variable",
                "local_c": "return_value"
            },
            "code": "int get_local_value_08005728(int input_value)\n{\n    undefined4 *local_pointer;\n    undefined local_array[4];\n    int local_variable;\n    undefined4 return_value;\n    \n    if (*(int *)PTR_DAT_08005778 == 0)\n    {\n        *(undefined **)PTR_DAT_08005778 = PTR_DAT_0800577c;\n    }\n    \n    return_value = *(undefined4 *)PTR_DAT_08005778;\n    \n    if (local_array < (undefined *)(input_value + *(int *)PTR_DAT_08005778))\n    {\n        local_variable = input_value;\n        local_pointer = (undefined4 *)get_value_from_pointer_to_pointer_08005d14();\n        *local_pointer = 0xc;\n        return_value = 0xffffffff;\n    }\n    else\n    {\n        *(int *)PTR_DAT_08005778 = input_value + *(int *)PTR_DAT_08005778;\n    }\n    \n    return return_value;\n}",
            "called": [
                "FUN_08005d14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "FUN_08009744"
            ],
            "imported": false,
            "current_name": "get_local_value_08005728"
        },
        "FUN_080090b4": {
            "renaming": {
                "FUN_080090b4": "do_nothing_with_pointer_080090b4",
                "PTR_DAT_080090bc": "PTR_pointer"
            },
            "code": "void do_nothing_with_pointer_080090b4(void)\n{\n  do_nothing(PTR_DAT_080090bc);\n  return;\n}",
            "called": [
                "FUN_08008af4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090b4",
            "calling": [
                "FUN_0800884c",
                "FUN_08009adc",
                "FUN_08008af8",
                "FUN_080088ec"
            ],
            "imported": false,
            "current_name": "do_nothing_with_pointer_080090b4"
        },
        "FUN_0800422e": {
            "renaming": {
                "FUN_0800422e": "set_value_if_flag_is_true_0800422e",
                "param_1": "ptr_param_1",
                "param_2": "ptr_param_2",
                "uVar1": "return_value"
            },
            "code": "int set_value_if_flag_is_true_0800422e(int *ptr_param_1, uint *ptr_param_2) {\n    int return_value;\n    if (*(char *)(ptr_param_1 + 0xf) == '\\x01') {\n        return_value = 2;\n    }\n    else {\n        *(undefined *)(ptr_param_1 + 0xf) = 1;\n        *(uint *)(*ptr_param_1 + 0x44) = ptr_param_2[6] | (ptr_param_2[6] | (ptr_param_2[5] | (ptr_param_2[4] | (*ptr_param_2 | (ptr_param_2[1] | (ptr_param_2[2] | ptr_param_2[3] & 0xfffffcff) & 0xfffffbff) & 0xfffff7ff) & 0xffffefff) & 0xffffdfff) & 0xffffbfff) & 0xffff7fff;\n        *(undefined *)(ptr_param_1 + 0xf) = 0;\n        return_value = 0;\n    }\n    return return_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800422e",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "set_value_if_flag_is_true_0800422e"
        },
        "FUN_08008af4": {
            "renaming": {
                "FUN_08008af4": "do_nothing_08008af4"
            },
            "code": "\nvoid do_nothing_08008af4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af4",
            "calling": [
                "FUN_080098c0",
                "FUN_080090b4"
            ],
            "imported": false,
            "current_name": "do_nothing_08008af4"
        },
        "FUN_08003e38": {
            "renaming": {
                "FUN_08003e38": "update_values_08003e38",
                "param_1": "struct_address",
                "param_2": "values_array",
                "iVar1": "value1",
                "uVar2": "value2",
                "local_10": "local_value",
                "DAT_08003f14": "special_struct_address",
                "PTR_08003e3c": "bitmask"
            },
            "code": "void update_values_08003e38(int struct_address, int *values_array) {\n  int index = 0;\n  uint PTR_08003e3c = 0;\n  uint local_value = *(uint *)(struct_address + 4);\n  uint value1 = *values_array;\n  uint value2 = values_array[2] << 4 | *(uint *)(struct_address + 0x20) & 0xffffffdf;\n  if (struct_address == DAT_08003f14) {\n    value2 = (values_array[3] << 4 | value2 & 0xffffff7f) & 0xffffffbf;\n    local_value = values_array[6] << 2 | values_array[5] << 2 | local_value & 0xfffff3ff;\n  }\n  *(uint *)(struct_address + 4) = local_value;\n  *(uint *)(struct_address + 0x18) = value1 << 8 | *(uint *)(struct_address + 0x18) & 0xffff8cff;\n  *(int *)(struct_address + 0x38) = values_array[1];\n  *(uint *)(struct_address + 0x20) = value2;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e38",
            "calling": [
                "FUN_08003908"
            ],
            "imported": false,
            "current_name": "update_values_08003e38"
        },
        "FUN_08008af0": {
            "renaming": {
                "FUN_08008af0": "do_nothing_08008af0"
            },
            "code": "\nvoid do_nothing_08008af0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af0",
            "calling": [
                "FUN_080098c0",
                "FUN_080090a8"
            ],
            "imported": false,
            "current_name": "do_nothing_08008af0"
        },
        "FUN_0800151c": {
            "renaming": {
                "FUN_0800151c": "validate_input_0800151c",
                "param_1": "input",
                "iVar1": "is_valid",
                "uVar2": "return_value",
                "PTR_DAT_08001570": "input_divisor_ptr",
                "PTR_DAT_08001574": "input_multiplier_ptr",
                "PTR_DAT_08001578": "input_ptr",
                "apply_mask_and_set_byte_0800172a": "apply_mask_and_set_byte"
            },
            "code": "int validate_input_0800151c(int input) {\n    int is_valid = validate_input_0800151c_helper((int)((unsigned long long)*(uint *)PTR_DAT_08001570 / (1000 / (unsigned long long)(byte)*PTR_DAT_08001574)));\n    if (is_valid == 0) {\n        if (input < 16) {\n            apply_mask_and_set_byte(0xffffffff, input, 0);\n            *(uint *)PTR_DAT_08001578 = input;\n            return 0;\n        }\n    }\n    return 1;\n}\n",
            "called": [
                "FUN_08001762",
                "FUN_0800172a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800151c",
            "calling": [
                "FUN_080014f0",
                "FUN_08003260"
            ],
            "imported": false,
            "current_name": "validate_input_0800151c"
        },
        "FUN_080006a4": {
            "renaming": {
                "FUN_080006a4": "calculate_result_080006a4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_1",
                "unaff_r4": "temp_2",
                "uVar2": "temp_3",
                "uVar3": "temp_4",
                "in_r12": "temp_5",
                "bVar4": "flag_1"
            },
            "code": "ulonglong calculate_result_080006a4(uint input_1, uint input_2, uint input_3, uint input_4) {\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  uint temp_6;\n  bool flag_1;\n  bool flag_2;\n  temp_1 = input_4 >> 0x14;\n  if (input_2 != input_3 && temp_1 != input_3) {\n    flag_1 = (input_1 | input_2 << 1) == 0;\n    if (!flag_1) {\n      flag_1 = (input_3 | input_4 << 1) == 0;\n    }\n    if (flag_1) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (input_3 == 0) {\n      temp_2 = input_2 & 0x80000000;\n      do {\n        temp_3 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(temp_3 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | temp_2;\n      if (temp_1 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      temp_1 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(temp_1 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  flag_1 = (input_1 | input_2 << 1) == 0;\n  if (flag_1) {\n    temp_2 = input_4;\n    temp_1 = input_3;\n  }\n  if (!flag_1) {\n    flag_2 = (input_3 | input_4 << 1) == 0;\n  }\n  temp_5 = input_2;\n  temp_6 = input_4;\n  if (((!flag_2) && ((input_2 != input_3 || ((input_1 | input_2 << 0xc) == 0)))) && ((temp_1 != input_3 || (input_1 = input_3, temp_5 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp_5,input_1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006a4",
            "calling": [
                "FUN_080004c8"
            ],
            "imported": false,
            "current_name": "calculate_result_080006a4"
        },
        "FUN_08000f68": {
            "renaming": {
                "FUN_08000f68": "calculate_result_08000f68",
                "param_1": "input_1",
                "param_2": "input_2",
                "bVar1": "is_negative_1",
                "uVar2": "result_1",
                "uVar3": "result_2",
                "uVar4": "temp_result",
                "bVar5": "is_zero"
            },
            "code": "uint calculate_result_08000f68(uint input_1, uint input_2)\n{\n    bool is_negative_1 = false;\n    bool is_negative_2 = false;\n    uint result_1 = input_1 * 2;\n    uint result_2 = input_2 * 2;\n    \n    if (((int)result_1 >> 0x18 == -1 || (int)result_2 >> 0x18 == -1) && ((((int)result_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) || (((int)result_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0))))))\n    {\n        return 1;\n    }\n    \n    uint temp_result = result_1 | input_2 & 0x7fffffff;\n    bool is_zero = temp_result == 0;\n    \n    if (!is_zero)\n    {\n        temp_result = input_1 ^ input_2;\n        is_zero = temp_result == 0;\n    }\n    \n    is_negative_1 = -1 < (int)temp_result;\n    \n    if (is_negative_1)\n    {\n        result_1 = result_1 + input_2 * -2;\n        is_zero = result_1 == 0;\n    }\n    \n    if (is_negative_1 && result_2 <= result_1 && !is_zero)\n    {\n        input_1 = (int)input_2 >> 0x1f;\n    }\n    \n    if (!is_negative_1 || result_2 > result_1)\n    {\n        input_1 = ~((int)input_2 >> 0x1f);\n    }\n    \n    if (!is_zero)\n    {\n        input_1 = input_1 | 1;\n    }\n    \n    return input_1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f68",
            "calling": [
                "FUN_08000fd0"
            ],
            "imported": false,
            "current_name": "calculate_result_08000f68"
        },
        "FUN_08009258": {
            "renaming": {
                "FUN_08009258": "calculate_hash_08009258",
                "param_1": "hash",
                "param_2": "hash_length",
                "param_3": "data",
                "iVar3": "i",
                "uVar4": "product",
                "puVar5": "data_ptr",
                "uVar6": "word",
                "puVar7": "hash_ptr",
                "uVar8": "carry",
                "iVar9": "j",
                "iVar10": "hash_length_plus_4",
                "iVar12": "data_length",
                "iVar13": "hash_length",
                "iVar16": "i_plus_1"
            },
            "code": "void calculate_hash_08009258(uint8_t* hash, int hash_length, uint8_t* data, int data_length)\n{\n  uint32_t* data_ptr = (uint32_t*)(data + 0x14);\n  uint32_t* hash_ptr = (uint32_t*)malloc((hash_length + 5) * sizeof(uint32_t));\n  int i, j;\n  for (i = 0; i < hash_length + 5; i++) {\n    hash_ptr[i] = 0;\n  }\n  for (i = 0; i < data_length - 0x14; i += 4) {\n    uint32_t word = *data_ptr++;\n    if (word == 0) {\n      continue;\n    }\n    uint32_t carry = 0;\n    for (j = 0; j < hash_length + 4; j++) {\n      uint32_t product = (uint32_t)word * (uint32_t)hash_ptr[j] + carry;\n      hash_ptr[j] = product & 0xFFFF;\n      carry = product >> 16;\n    }\n    hash_ptr[j] += carry;\n  }\n  for (i = hash_length + 4; i >= 0; i--) {\n    if (hash_ptr[i] != 0) {\n      break;\n    }\n  }\n  *(int*)(hash + 0x10) = i + 1;\n  for (i = 0; i <= *(int*)(hash + 0x10) - 1; i++) {\n    *(uint8_t*)(hash + i + 0x14) = (uint8_t)(hash_ptr[i / 4] >> ((i % 4) * 8));\n  }\n  free(hash_ptr);\n}\n",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009258",
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_hash_08009258"
        },
        "FUN_08000c08": {
            "renaming": {
                "FUN_08000c08": "calculate_hash_08000c08",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "iVar3": "multiplier",
                "uVar4": "temp1",
                "temp2": "temp2",
                "result": "result",
                "carry": "carry"
            },
            "code": "uint calculate_hash_08000c08(uint input)\n{\n  int leading_zeroes = count_leading_zeroes(input);\n  int shift_amount = leading_zeroes - 8;\n  int multiplier = shift_amount * -0x800000 + 0x4a800000;\n  if (leading_zeroes > 7) {\n    uint temp1 = input << (shift_amount & 0xff);\n    uint temp2 = 0U >> (0x20 - shift_amount & 0xff);\n    uint carry = (uint)(0x7fffffff < temp1);\n    uint result = multiplier + temp1 + temp2 + carry;\n    if (temp1 == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint temp1 = input << (leading_zeroes + 0x18U & 0xff);\n  uint temp2 = (input >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)temp1 >> 0x1f);\n  if ((temp1 & 0x7fffffff) == 0) {\n    temp2 = temp2 & ~(temp1 >> 0x1f);\n  }\n  return multiplier + temp2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c08",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "calculate_hash_08000c08"
        },
        "FUN_08003c6e": {
            "renaming": {
                "FUN_08003c6e": "do_nothing_08003c6e"
            },
            "code": "\nvoid do_nothing_08003c6e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c6e",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c6e"
        },
        "FUN_080042de": {
            "renaming": {
                "FUN_080042de": "set_value_if_flag_set_080042de",
                "param_1": "data",
                "param_2": "value",
                "uVar1": "result",
                "*(char *)(param_1 + 0xf)": "flag",
                "*(undefined *)(param_1 + 0xf)": "flag_value",
                "*(undefined *)((int)param_1 + 0x3d)": "temp_value",
                "*(uint *)(*param_1 + 4)": "data_value_1",
                "*(uint *)(*param_1 + 8)": "data_value_2"
            },
            "code": "int set_value_if_flag_set_080042de(int *data, uint *value){\n    if (*(char *)(data + 0xf) == '\\x01') {\n        return 2;\n    }\n    else {\n        *(undefined *)(data + 0xf) = 1;\n        *(undefined *)((int)data + 0x3d) = 2;\n        *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xffffff8f;\n        *(uint *)(*data + 4) = *value | *(uint *)(*data + 4);\n        *(uint *)(*data + 8) = *(uint *)(*data + 8) & 0xffffff7f;\n        *(uint *)(*data + 8) = value[1] | *(uint *)(*data + 8);\n        *(undefined *)((int)data + 0x3d) = 1;\n        *(undefined *)(data + 0xf) = 0;\n        return 0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042de",
            "calling": [
                "FUN_08005500",
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "set_value_if_flag_set_080042de"
        },
        "FUN_08004366": {
            "renaming": {
                "FUN_08004366": "do_nothing_08004366"
            },
            "code": "\nvoid do_nothing_08004366(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004366",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08004366"
        },
        "FUN_08009530": {
            "renaming": {
                "FUN_08009530": "compare_and_allocate_memory_08009530",
                "param_1": "length",
                "param_2": "source",
                "param_3": "target",
                "param_4": "param_4",
                "iVar1": "allocate_mem",
                "iVar12": "carry_over",
                "iVar5": "difference",
                "puVar10": "source_ptr_next",
                "puVar11": "target_end",
                "puVar13": "source_end_ptr",
                "puVar2": "target_ptr_2",
                "puVar6": "source_ptr",
                "puVar7": "target_ptr",
                "puVar8": "target_ptr_next",
                "puVar9": "source_start",
                "uVar14": "target_len",
                "uVar3": "source_len",
                "uVar4": "difference"
            },
            "code": "void compare_and_allocate_memory_08009530(uint32_t param_1,uint32_t *source,uint32_t *target,uint32_t param_4)\n{\n  int difference;\n  uint32_t *source_end;\n  uint32_t *target_end;\n  uint32_t *source_ptr;\n  uint32_t *target_ptr;\n  uint32_t *source_end_ptr;\n  int allocate_mem;\n  uint32_t *target_start;\n  uint32_t *source_start;\n  uint32_t *target_ptr_2;\n  uint32_t *source_ptr_2;\n  uint32_t *target_end_ptr;\n  int carry_over = 0;\n  uint32_t target_len = target[4];\n  uint32_t source_len = source[4];\n  if (source_len - (int)target[4] == 0) {\n    source_end = source + target[4];\n    target_end = target + target[4];\n    while( true ) {\n      source_end = source_end - 1;\n      target_end = target_end - 1;\n      if (*source_end != *target_end) break;\n      if (source_end <= source + 5) {\n        allocate_mem = allocate_and_initialize_memory(param_1,0,source_end,target_end,param_4);\n        *(int *)(allocate_mem + 0x10) = 1;\n        *(undefined4 *)(allocate_mem + 0x14) = 0;\n        return;\n      }\n    }\n    if (*target_end <= *source_end) goto LAB_08009578;\n  }\n  else if ((int)target[4] - (int)source_len < 0) {\n    allocate_mem = allocate_and_initialize_memory(param_1,target[1],source,target,param_4);\n    difference = 1;\n    source_start = source;\n    target_start = target + 5;\n    source_ptr_2 = source_start;\n    target_ptr_2 = target_start;\n    source_end_ptr = source_start + source_len;\n    target_end_ptr = target_start + target_len;\n  }\n  else {\n    allocate_mem = allocate_and_initialize_memory(param_1,target[1],target + 5,source,param_4);\n    difference = 0;\n    source_start = target + 5;\n    target_start = source;\n    source_ptr_2 = target + 5;\n    target_ptr_2 = source;\n    source_end_ptr = source + source_len;\n    target_end_ptr = target + target_len;\n  }\n  *(int *)(allocate_mem + 0xc) = difference;\n  source_ptr = source_start;\n  target_ptr = target_start;\n  while (target_ptr < target_end_ptr) {\n    uint32_t *target_ptr_next = target_ptr + 1;\n    uint32_t *source_ptr_next = source_ptr + 1;\n    uint32_t difference = ((*target_ptr & 0xffff) + carry_over) - (*source_ptr & 0xffff);\n    carry_over = ((*target_ptr >> 0x10) - (*source_ptr >> 0x10)) + ((int)difference >> 0x10);\n    difference = difference & 0xffff | carry_over * 0x10000;\n    target_ptr_2 = target_ptr_2 + 1;\n    *target_ptr_2 = difference;\n    carry_over = carry_over >> 0x10;\n    target_ptr = target_ptr_next;\n    source_ptr = source_ptr_next;\n  }\n  target_ptr_2 = target_ptr + 1;\n  while (target_ptr_2 < target_end_ptr) {\n    source_ptr_2 = target_ptr_2 + 1;\n    uint32_t sum = (*target_ptr_2 & 0xffff) + carry_over;\n    carry_over = ((int)sum >> 0x10) + (*target_ptr_2 >> 0x10);\n    uint32_t difference = sum & 0xffff | carry_over * 0x10000;\n    *target_ptr_2 = difference;\n    carry_over = carry_over >> 0x10;\n    target_ptr_2 = target_ptr_2 + 1;\n  }\n  source_end_ptr = target_ptr + (~(int)target_ptr_2 + (int)target_end_ptr + 4 & -4) / 4;\n  source_end_ptr = source_end_ptr + allocate_mem;\n  while (*source_end_ptr == 0) {\n    source_end_ptr = source_end_ptr - 1;\n    target_len = target_len - 1;\n  }\n  *(uint32_t *)(allocate_mem + 0x10) = target_len;\n  return;\n}\n",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009530",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "compare_and_allocate_memory_08009530"
        },
        "FUN_08008af8": {
            "renaming": {
                "FUN_08008af8": "FUNC_08008af8"
            },
            "code": "\nint * FUNC_08008af8(undefined4 *param_1,uint param_2)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint *puVar6;\n  int iVar7;\n  undefined *puVar8;\n  uint uVar9;\n  uint uVar10;\n  undefined4 *puVar11;\n  undefined *puVar12;\n  undefined *puVar13;\n  uint uVar14;\n  uint uVar15;\n  int iVar16;\n  undefined4 *puVar17;\n  undefined4 *puVar18;\n  \n  uVar14 = param_2 + 0xb;\n  if (uVar14 < 0x17) {\n    if (0x10 < param_2) goto LAB_08008c7a;\n    do_nothing_with_pointer_080090a8();\n    uVar15 = 0x10;\n    iVar7 = 0x18;\n    uVar14 = 2;\nLAB_08008b18:\n    puVar8 = PTR_DAT_08008e4c + iVar7;\n    puVar12 = *(undefined **)(puVar8 + 4);\n    if ((puVar12 != puVar8 + -8) || (puVar12 = *(undefined **)(puVar8 + 0xc), puVar8 != puVar12)) {\n      iVar7 = *(int *)(puVar12 + 0xc);\n      puVar8 = puVar12 + (*(uint *)(puVar12 + 4) & 0xfffffffc);\n      uVar14 = *(uint *)(puVar8 + 4);\nLAB_08008b34:\n      iVar16 = *(int *)(puVar12 + 8);\n      *(int *)(iVar16 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar16;\n      *(uint *)(puVar8 + 4) = uVar14 | 1;\n      do_nothing_with_pointer_080090b4(param_1);\n      return (int *)(puVar12 + 8);\n    }\n    uVar14 = uVar14 + 2;\n  }\n  else {\n    uVar15 = uVar14 & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_08008c7a:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n    do_nothing_with_pointer_080090a8();\n    if (uVar15 < 0x1f8) {\n      uVar14 = uVar14 >> 3;\n      iVar7 = uVar15 + 8;\n      goto LAB_08008b18;\n    }\n    uVar4 = uVar14 >> 9;\n    if (uVar4 == 0) {\n      iVar7 = 0x200;\n      uVar9 = 0x40;\n      uVar4 = 0x3f;\n    }\n    else if (uVar4 < 5) {\n      uVar9 = (uVar14 >> 6) + 0x39;\n      uVar4 = (uVar14 >> 6) + 0x38;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x15) {\n      uVar9 = uVar4 + 0x5c;\n      uVar4 = uVar4 + 0x5b;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x55) {\n      uVar9 = (uVar14 >> 0xc) + 0x6f;\n      uVar4 = (uVar14 >> 0xc) + 0x6e;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x155) {\n      uVar9 = (uVar14 >> 0xf) + 0x78;\n      uVar4 = (uVar14 >> 0xf) + 0x77;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x555) {\n      uVar9 = (uVar14 >> 0x12) + 0x7d;\n      uVar4 = (uVar14 >> 0x12) + 0x7c;\n      iVar7 = uVar9 * 8;\n    }\n    else {\n      iVar7 = 0x3f8;\n      uVar9 = 0x7f;\n      uVar4 = 0x7e;\n    }\n    for (puVar12 = *(undefined **)(PTR_DAT_08008e4c + iVar7 + 4); uVar14 = uVar9,\n        PTR_DAT_08008e4c + iVar7 + -8 != puVar12; puVar12 = *(undefined **)(puVar12 + 0xc)) {\n      iVar16 = (*(uint *)(puVar12 + 4) & 0xfffffffc) - uVar15;\n      uVar14 = uVar4;\n      if (0xf < iVar16) break;\n      if (-1 < iVar16) {\n        puVar8 = puVar12 + (*(uint *)(puVar12 + 4) & 0xfffffffc);\n        uVar14 = *(uint *)(puVar8 + 4);\n        iVar7 = *(int *)(puVar12 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  puVar8 = PTR_PTR_DAT_08008e60;\n  puVar12 = PTR_DAT_08008e4c;\n  puVar13 = *(undefined **)(PTR_DAT_08008e4c + 0x10);\n  if (puVar13 == PTR_PTR_DAT_08008e60) {\n    uVar4 = *(uint *)(PTR_DAT_08008e4c + 4);\n    uVar9 = 1 << ((int)uVar14 >> 2 & 0xffU);\n    if (uVar9 <= uVar4) goto LAB_08008c06;\n  }\n  else {\n    uVar9 = *(uint *)(puVar13 + 4);\n    uVar10 = uVar9 & 0xfffffffc;\n    uVar4 = uVar10 - uVar15;\n    if (0xf < (int)uVar4) {\n      puVar3 = puVar13 + uVar15;\n      *(uint *)(puVar13 + 4) = uVar15 | 1;\n      *(undefined **)(puVar12 + 0x10) = puVar3;\n      *(undefined **)(puVar12 + 0x14) = puVar3;\n      *(undefined **)(puVar3 + 8) = puVar8;\n      *(undefined **)(puVar3 + 0xc) = puVar8;\n      *(uint *)(puVar3 + 4) = uVar4 | 1;\n      *(uint *)(puVar13 + uVar10) = uVar4;\n      do_nothing_with_pointer_080090b4(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    *(undefined **)(PTR_DAT_08008e4c + 0x10) = PTR_PTR_DAT_08008e60;\n    *(undefined **)(puVar12 + 0x14) = puVar8;\n    if (-1 < (int)uVar4) {\n      *(uint *)(puVar13 + uVar10 + 4) = *(uint *)(puVar13 + uVar10 + 4) | 1;\n      do_nothing_with_pointer_080090b4(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    if (uVar10 < 0x200) {\n      iVar7 = (uVar9 >> 3) + 1;\n      iVar16 = *(int *)(puVar12 + iVar7 * 8);\n      uVar4 = 1 << ((int)(uVar9 >> 3) >> 2 & 0xffU) | *(uint *)(puVar12 + 4);\n      *(int *)(puVar13 + 8) = iVar16;\n      *(undefined **)(puVar13 + 0xc) = puVar12 + iVar7 * 8 + -8;\n      *(uint *)(puVar12 + 4) = uVar4;\n      *(undefined **)(puVar12 + iVar7 * 8) = puVar13;\n      *(undefined **)(iVar16 + 0xc) = puVar13;\n    }\n    else {\n      uVar4 = uVar9 >> 9;\n      if (uVar4 < 5) {\n        iVar7 = ((uVar9 >> 6) + 0x39) * 8;\n        iVar16 = (uVar9 >> 6) + 0x38;\n      }\n      else if (uVar4 < 0x15) {\n        iVar7 = (uVar4 + 0x5c) * 8;\n        iVar16 = uVar4 + 0x5b;\n      }\n      else if (uVar4 < 0x55) {\n        iVar7 = ((uVar9 >> 0xc) + 0x6f) * 8;\n        iVar16 = (uVar9 >> 0xc) + 0x6e;\n      }\n      else if (uVar4 < 0x155) {\n        iVar7 = ((uVar9 >> 0xf) + 0x78) * 8;\n        iVar16 = (uVar9 >> 0xf) + 0x77;\n      }\n      else if (uVar4 < 0x555) {\n        iVar7 = ((uVar9 >> 0x12) + 0x7d) * 8;\n        iVar16 = (uVar9 >> 0x12) + 0x7c;\n      }\n      else {\n        iVar7 = 0x3f8;\n        iVar16 = 0x7e;\n      }\n      puVar3 = *(undefined **)(puVar12 + iVar7);\n      puVar1 = puVar12 + iVar7 + -8;\n      if (puVar1 == puVar3) {\n        uVar4 = 1 << (iVar16 >> 2 & 0xffU) | *(uint *)(puVar12 + 4);\n        *(uint *)(puVar12 + 4) = uVar4;\n      }\n      else {\n        do {\n          if ((*(uint *)(puVar3 + 4) & 0xfffffffc) <= uVar10) break;\n          puVar3 = *(undefined **)(puVar3 + 8);\n        } while (puVar1 != puVar3);\n        puVar1 = *(undefined **)(puVar3 + 0xc);\n        uVar4 = *(uint *)(puVar12 + 4);\n      }\n      *(undefined **)(puVar13 + 8) = puVar3;\n      *(undefined **)(puVar13 + 0xc) = puVar1;\n      *(undefined **)(puVar1 + 8) = puVar13;\n      *(undefined **)(puVar3 + 0xc) = puVar13;\n    }\n    uVar9 = 1 << ((int)uVar14 >> 2 & 0xffU);\n    if (uVar9 <= uVar4) {\nLAB_08008c06:\n      if ((uVar9 & uVar4) == 0) {\n        uVar14 = uVar14 & 0xfffffffc;\n        do {\n          uVar9 = uVar9 << 1;\n          uVar14 = uVar14 + 4;\n        } while ((uVar9 & uVar4) == 0);\n      }\n      do {\n        puVar17 = (undefined4 *)(puVar12 + uVar14 * 8);\n        uVar4 = uVar14;\n        puVar18 = puVar17;\n        do {\n          for (puVar11 = (undefined4 *)puVar18[3]; puVar18 != puVar11;\n              puVar11 = (undefined4 *)puVar11[3]) {\n            uVar10 = puVar11[1] & 0xfffffffc;\n            uVar5 = uVar10 - uVar15;\n            if (0xf < (int)uVar5) {\n              iVar16 = puVar11[2];\n              iVar7 = puVar11[3];\n              puVar13 = (undefined *)(uVar15 + (int)puVar11);\n              puVar11[1] = uVar15 | 1;\n              *(int *)(iVar16 + 0xc) = iVar7;\n              *(int *)(iVar7 + 8) = iVar16;\n              *(undefined **)(puVar12 + 0x10) = puVar13;\n              *(undefined **)(puVar12 + 0x14) = puVar13;\n              *(undefined **)(puVar13 + 8) = puVar8;\n              *(undefined **)(puVar13 + 0xc) = puVar8;\n              *(uint *)(puVar13 + 4) = uVar5 | 1;\n              *(uint *)((int)puVar11 + uVar10) = uVar5;\n              do_nothing_with_pointer_080090b4(param_1);\n              return puVar11 + 2;\n            }\n            if (-1 < (int)uVar5) {\n              iVar7 = puVar11[3];\n              iVar16 = puVar11[2];\n              *(uint *)((int)puVar11 + uVar10 + 4) = *(uint *)((int)puVar11 + uVar10 + 4) | 1;\n              *(int *)(iVar16 + 0xc) = iVar7;\n              *(int *)(iVar7 + 8) = iVar16;\n              do_nothing_with_pointer_080090b4(param_1);\n              return puVar11 + 2;\n            }\n          }\n          uVar4 = uVar4 + 1;\n          puVar18 = puVar18 + 2;\n        } while ((uVar4 & 3) != 0);\n        do {\n          uVar10 = uVar14 & 3;\n          puVar18 = puVar17 + -2;\n          uVar14 = uVar14 - 1;\n          if (uVar10 == 0) {\n            uVar10 = *(uint *)(puVar12 + 4) & ~uVar9;\n            *(uint *)(puVar12 + 4) = uVar10;\n            goto LAB_08008f24;\n          }\n          puVar17 = (undefined4 *)*puVar17;\n        } while (puVar17 == puVar18);\n        uVar10 = *(uint *)(puVar12 + 4);\nLAB_08008f24:\n        uVar9 = uVar9 * 2;\n        if ((uVar10 <= uVar9 && uVar9 - uVar10 != 0) || (uVar14 = uVar4, uVar9 == 0)) break;\n        for (; (uVar9 & uVar10) == 0; uVar9 = uVar9 << 1) {\n          uVar14 = uVar14 + 4;\n        }\n      } while( true );\n    }\n  }\n  puVar8 = PTR_DAT_08008e64;\n  puVar13 = *(undefined **)(puVar12 + 8);\n  uVar14 = *(uint *)(puVar13 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar14) && (uVar4 = uVar14 - uVar15, 0xf < (int)uVar4)) goto LAB_08008dac;\n  if (*(int *)PTR_DAT_08008e64 == -1) {\n    uVar4 = uVar15 + *(int *)PTR_DAT_08008e50 + 0x10;\n  }\n  else {\n    uVar4 = uVar15 + *(int *)PTR_DAT_08008e50 + 0x100f & 0xfffff000;\n  }\n  puVar1 = (undefined *)get_local_value_08009744(param_1,uVar4);\n  puVar6 = (uint *)PTR_DAT_08009018;\n  puVar3 = PTR_DAT_08008e54;\n  if (puVar1 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    puVar13 = *(undefined **)(puVar12 + 8);\n    uVar14 = *(uint *)(puVar13 + 4);\n  }\n  else {\n    puVar2 = puVar13 + uVar14;\n    if (puVar2 < puVar1 || puVar2 == puVar1) {\n      uVar9 = *(int *)PTR_DAT_08008e54 + uVar4;\n      *(uint *)PTR_DAT_08008e54 = uVar9;\n      puVar6 = (uint *)puVar3;\n      if ((puVar2 != puVar1) || (((uint)puVar2 & 0xfff) != 0)) goto LAB_08008d02;\n      *(uint *)(*(int *)(puVar12 + 8) + 4) = uVar14 + uVar4 | 1;\n    }\n    else {\n      if (puVar13 != puVar12) goto LAB_08008ed8;\n      uVar9 = *(int *)PTR_DAT_08009018 + uVar4;\n      *(uint *)PTR_DAT_08009018 = uVar9;\nLAB_08008d02:\n      if (*(int *)puVar8 == -1) {\n        *(undefined **)puVar8 = puVar1;\n      }\n      else {\n        *puVar6 = (uint)(puVar1 + (uVar9 - (int)puVar2));\n      }\n      uVar9 = (uint)puVar1 & 7;\n      if (uVar9 == 0) {\n        iVar7 = 0x1000;\n      }\n      else {\n        puVar1 = puVar1 + (8 - uVar9);\n        iVar7 = 0x1008 - uVar9;\n      }\n      iVar7 = iVar7 - ((uint)(puVar1 + uVar4) & 0xfff);\n      iVar16 = get_local_value_08009744(param_1,iVar7);\n      if (iVar16 == -1) {\n        uVar4 = 1;\n        iVar7 = 0;\n      }\n      else {\n        uVar4 = (iVar16 - (int)puVar1) + iVar7 | 1;\n      }\n      uVar9 = *puVar6 + iVar7;\n      *(undefined **)(puVar12 + 8) = puVar1;\n      *puVar6 = uVar9;\n      *(uint *)(puVar1 + 4) = uVar4;\n      if (puVar13 != puVar12) {\n        if (uVar14 < 0x10) {\n          *(undefined4 *)(puVar1 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        uVar14 = uVar14 - 0xc & 0xfffffff8;\n        *(uint *)(puVar13 + 4) = *(uint *)(puVar13 + 4) & 1 | uVar14;\n        *(undefined4 *)(puVar13 + uVar14 + 4) = 5;\n        *(undefined4 *)(puVar13 + uVar14 + 8) = 5;\n        if (0xf < uVar14) {\n          FUNC_080088ec(param_1,puVar13 + 8);\n          uVar9 = *puVar6;\n        }\n      }\n    }\n    puVar8 = PTR_DAT_08008e5c;\n    puVar13 = *(undefined **)(puVar12 + 8);\n    uVar4 = *(uint *)PTR_DAT_08008e5c;\n    if (*(uint *)PTR_DAT_08008e58 < uVar9) {\n      *(uint *)PTR_DAT_08008e58 = uVar9;\n    }\n    uVar14 = *(uint *)(puVar13 + 4);\n    if (uVar4 < uVar9) {\n      *(uint *)puVar8 = uVar9;\n    }\n  }\n  uVar4 = (uVar14 & 0xfffffffc) - uVar15;\n  if ((uVar15 <= (uVar14 & 0xfffffffc)) && (0xf < (int)uVar4)) {\nLAB_08008dac:\n    *(uint *)(puVar13 + 4) = uVar15 | 1;\n    *(undefined **)(puVar12 + 8) = puVar13 + uVar15;\n    *(uint *)(puVar13 + uVar15 + 4) = uVar4 | 1;\n    do_nothing_with_pointer_080090b4(param_1);\n    return (int *)(puVar13 + 8);\n  }\nLAB_08008eee:\n  do_nothing_with_pointer_080090b4(param_1);\n  return (int *)0x0;\n}\n\n",
            "called": [
                "FUN_08009744",
                "FUN_080090b4",
                "FUN_080090a8",
                "FUN_080088ec"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008af8",
            "calling": [
                "FUN_08009980",
                "FUN_08005e9c",
                "FUN_080097cc",
                "FUN_08009adc"
            ],
            "imported": false,
            "current_name": "FUNC_08008af8"
        },
        "FUN_08002bb4": {
            "renaming": {
                "FUN_08002bb4": "check_and_update_flag_08002bb4",
                "param_1": "memory_block",
                "param_2": "block_size",
                "param_3": "offset",
                "iVar1": "check_result"
            },
            "code": "int check_and_update_flag_08002bb4(int *memory_block, uint block_size, int offset) {\n  int check_result;\n  while (true) {\n    if ((*(uint *)(*memory_block + 0x14) & 0x80) == 0x80) {\n      return 0;\n    }\n    check_result = check_flag(memory_block);\n    if (check_result != 0) {\n      break;\n    }\n    if ((block_size != 0xffffffff) && ((block_size == 0 || (check_result = get_pointer_value(), block_size < (uint)(check_result - offset))))) {\n      memory_block[0x10] |= 0x20;\n      memory_block[0xc] = 0;\n      *(undefined *)((int)memory_block + 0x3d) = 0x20;\n      *(undefined *)(memory_block + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_08002d3c",
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002bb4",
            "calling": [
                "FUN_08002640",
                "FUN_080027f4",
                "FUN_08001ccc"
            ],
            "imported": false,
            "current_name": "check_and_update_flag_08002bb4"
        },
        "FUN_08002d3c": {
            "renaming": {
                "FUN_08002d3c": "check_flag_08002d3c",
                "param_1": "flag_ptr",
                "bVar1": "flag",
                "*param_1": "*flag_ptr",
                "0x14": "offset",
                "0x400": "mask",
                "undefined4": "four_bytes",
                "0xfffffbff": "new_value",
                "0x10": "index_10",
                "0xc": "index_c",
                "undefined": "one_byte",
                "(int)param_1 + 0x3d": "offset_3d",
                "0x20": "new_byte_value",
                "param_1 + 0xf": "array_index_f"
            },
            "code": "bool check_flag_08002d3c(int *flag_ptr) {\n  bool flag = (*(uint *)(*flag_ptr + 0x14) & 0x400) == 0x400;\n  if (flag) {\n    *(undefined4 *)(*flag_ptr + 0x14) = 0xfffffbff;\n    flag_ptr[0x10] = 4;\n    flag_ptr[0xc] = 0;\n    *(undefined *)((int)flag_ptr + 0x3d) = 0x20;\n    *(undefined *)(flag_ptr + 0xf) = 0;\n  }\n  return flag;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d3c",
            "calling": [
                "FUN_08002c2e",
                "FUN_08002bb4"
            ],
            "imported": false,
            "current_name": "check_flag_08002d3c"
        },
        "FUN_08004bd8": {
            "renaming": {
                "FUN_08004bd8": "calculate_result_08004bd8",
                "param_1": "input",
                "param_2": "output",
                "uVar1": "first_hash",
                "uVar2": "second_hash",
                "uVar3": "third_hash",
                "PTR_DAT_08004d60": "float_bits_ptr",
                "calculate_hash_08000418": "calculate_hash",
                "FUNC_08000aa4": "calculate_first_hash",
                "FUNC_080004c8": "calculate_fourth_hash",
                "FUNC_0800015c": "calculate_fifth_hash",
                "calculate_float_bits_080009fc": "calculate_float_bits",
                "DAT_08004d40": "fourth_hash_constant_1",
                "DAT_08004d44": "fourth_hash_constant_2",
                "DAT_08004d64": "sixth_hash_constant",
                "calculate_result_thunk_08005838": "calculate_sixth_hash",
                "DAT_08004d68": "seventh_hash_constant",
                "DAT_08004d48": "eighth_hash_constant_1",
                "DAT_08004d4c": "eighth_hash_constant_2",
                "DAT_08004d58": "ninth_hash_constant_1",
                "DAT_08004d5c": "ninth_hash_constant_2",
                "DAT_08004d70": "bool_ptr"
            },
            "code": "void calculate_result_08004bd8(int input, int* output) {\n    int first_hash = FUNC_08000aa4(*(int *)(input + 0x10), *(int *)(input + 0x1c));\n    int second_hash = calculate_hash_08000418(*(int *)PTR_DAT_08004d60);\n    int third_hash = calculate_hash_08000418(first_hash);\n    third_hash = FUNC_080004c8(third_hash, third_hash >> 0x20, DAT_08004d40, DAT_08004d44);\n    second_hash = FUNC_0800015c(second_hash, second_hash >> 0x20, third_hash, third_hash >> 0x20);\n    int float_bits = calculate_float_bits_080009fc(second_hash, second_hash >> 0x20);\n    *(int *)PTR_DAT_08004d60 = float_bits;\n    int fourth_hash = calculate_hash_08000418(*(int *)(input + 4));\n    fourth_hash = FUNC_0800071c(fourth_hash, fourth_hash >> 0x20, 0, DAT_08004d64);\n    int fifth_hash = calculate_hash_08000418(*(int *)(input + 8));\n    fifth_hash = FUNC_0800071c(fifth_hash, fifth_hash >> 0x20, 0, DAT_08004d64);\n    int sixth_hash = calculate_result_08004bd8_thunk_08005838(fourth_hash, fourth_hash >> 0x20, fifth_hash, fifth_hash >> 0x20);\n    sixth_hash = FUNC_080004c8(sixth_hash, sixth_hash >> 0x20, 0, DAT_08004d68);\n    sixth_hash = FUNC_0800071c(sixth_hash, sixth_hash >> 0x20, DAT_08004d48, DAT_08004d4c);\n    int seventh_hash = calculate_hash_08000418(*(int *)(input + 0x24));\n    sixth_hash = FUNC_08000158(sixth_hash, sixth_hash >> 0x20, seventh_hash, seventh_hash >> 0x20);\n    sixth_hash = FUNC_0800015c(sixth_hash, sixth_hash >> 0x20, 0, DAT_08004d6c);\n    if (*PTR_DAT_08004d70 == 0) {\n        int eighth_hash = calculate_hash_08000418(*(int *)PTR_DAT_08004d60);\n        eighth_hash = FUNC_080004c8(eighth_hash, eighth_hash >> 0x20, DAT_08004d50, DAT_08004d54);\n        int ninth_hash = calculate_hash_08000418(float_bits);\n        ninth_hash = FUNC_080004c8(ninth_hash, ninth_hash >> 0x20, DAT_08004d58, DAT_08004d5c);\n        eighth_hash = FUNC_0800015c(eighth_hash, eighth_hash >> 0x20, ninth_hash, ninth_hash >> 0x20);\n        float_bits = calculate_float_bits_080009fc(eighth_hash, eighth_hash >> 0x20);\n        *(int *)PTR_DAT_08004d60 = float_bits;\n    }\n    else {\n        *(int *)PTR_DAT_08004d60 = float_bits;\n        *PTR_DAT_08004d70 = 0;\n    }\n    *output = *(int *)PTR_DAT_08004d60;\n}",
            "called": [
                "FUN_08000158",
                "FUN_080004c8",
                "FUN_0800015c",
                "FUN_080009fc",
                "FUN_0800071c",
                "FUN_08000418",
                "FUN_08000aa4",
                "thunk_FUN_08005838"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bd8",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "calculate_result_08004bd8"
        },
        "FUN_080090c0": {
            "renaming": {
                "FUN_080090c0": "allocate_and_initialize_memory_080090c0",
                "param_1": "mem_address",
                "param_2": "index",
                "puVar1": "memory_pointer",
                "iVar2": "allocated_mem_address",
                "allocate_memory_and_initialize_to_zero_08009980": "allocate_memory_zero"
            },
            "code": "undefined4 * allocate_and_initialize_memory_080090c0(int mem_address, uint index) {\n  undefined4 *memory_pointer;\n  int allocated_mem_address = *(int *)(mem_address + 0x4c);\n  if (allocated_mem_address == 0) {\n    allocated_mem_address = allocate_memory_and_initialize_to_zero_08009980(mem_address, 4, 0x21);\n    *(int *)(mem_address + 0x4c) = allocated_mem_address;\n    if (allocated_mem_address == 0) {\n      return (undefined4 *)0x0;\n    }\n  }\n  memory_pointer = *(undefined4 **)(allocated_mem_address + index * 4);\n  if (memory_pointer == (undefined4 *)0x0) {\n    int mem_size = 1 << (index & 0xff);\n    memory_pointer = (undefined4 *)allocate_memory_and_initialize_to_zero_08009980(mem_address, 1, (mem_size + 5) * 4);\n    if (memory_pointer == (undefined4 *)0x0) {\n      return (undefined4 *)0x0;\n    }\n    memory_pointer[1] = index;\n    memory_pointer[2] = mem_size;\n  }\n  else {\n    *(undefined4 *)(allocated_mem_address + index * 4) = *memory_pointer;\n  }\n  memory_pointer[3] = 0;\n  memory_pointer[4] = 0;\n  return memory_pointer;\n}",
            "called": [
                "FUN_08009980"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090c0",
            "calling": [
                "FUN_08009244",
                "FUN_08009630",
                "FUN_080093a4",
                "FUN_08009120",
                "FUN_08009444",
                "FUN_080079e8",
                "FUN_08009530",
                "FUN_08009258"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_memory_080090c0"
        },
        "FUN_080091e4": {
            "renaming": {
                "FUN_080091e4": "count_leading_zeros_080091e4",
                "*param_1": "*num",
                "uVar1": "count",
                "uVar2": "n"
            },
            "code": "uint count_leading_zeros_080091e4(uint *num)\n{\n  uint n = *num;\n  uint count = 0;\n  if ((n & 7) == 0) {\n    if ((n & 0xffff) == 0) {\n      n = n >> 0x10;\n      count = 0x10;\n    }\n    if ((n & 0xff) == 0) {\n      n = n >> 8;\n      count += 8;\n    }\n    if ((n & 0xf) == 0) {\n      n = n >> 4;\n      count += 4;\n    }\n    if ((n & 3) == 0) {\n      n = n >> 2;\n      count += 2;\n    }\n    if (-1 < (int)(n << 0x1f)) {\n      n = n >> 1;\n      if (n == 0) {\n        return 0x20;\n      }\n      count++;\n    }\n    *num = n;\n    return count;\n  }\n  if (-1 < (int)(n << 0x1f)) {\n    if ((int)(n << 0x1e) < 0) {\n      *num = n >> 1;\n      return 1;\n    }\n    *num = n >> 2;\n    return 2;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091e4",
            "calling": [
                "FUN_08009630"
            ],
            "imported": false,
            "current_name": "count_leading_zeros_080091e4"
        },
        "FUN_080009fc": {
            "renaming": {
                "FUN_080009fc": "calculate_float_bits_080009fc",
                "param_1": "float_bits",
                "param_2": "float_exponent",
                "uVar1": "result",
                "uVar2": "exponent_shifted",
                "uVar3": "exponent_offset",
                "in_r12": "exponent_offset_alt",
                "bVar4": "is_zero",
                "bVar5": "is_small_exponent",
                "uVar4": "shift_amount",
                "uVar5": "significand",
                "uVar6": "exponent_bits"
            },
            "code": "uint calculate_float_bits_080009fc(uint float_bits, uint float_exponent) {\n  uint exponent_shifted = float_exponent * 2;\n  bool is_small_exponent = exponent_shifted < 0x70000000;\n  uint exponent_offset = exponent_shifted + 0x90000000;\n  uint result = exponent_offset;\n  if (!is_small_exponent) {\n    uint exponent_offset_alt = exponent_shifted + 0x8fe00000;\n    result = exponent_offset_alt;\n  }\n  bool is_zero = result == 0;\n  if (!is_small_exponent && exponent_offset >= 0x200000) {\n    is_zero = exponent_offset_alt == 0x1fc00000;\n  }\n  if (((is_small_exponent || exponent_offset < 0x200000) || 0x1fc00000 < exponent_offset_alt) || is_zero) {\n    if ((float_exponent & 0x40000000) != 0) {\n      if (((int)exponent_shifted >> 0x15 == -1) && ((float_bits | float_exponent << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return float_exponent & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(exponent_shifted + 0x92e00000) < 0 != SCARRY4(exponent_offset,0x2e00000)) {\n      return float_exponent & 0x80000000;\n    }\n    uint shift_amount = 0x18 - (exponent_shifted + 0x92e00000 >> 0x15);\n    uint significand = float_bits >> (shift_amount & 0xff);\n    if (float_bits << (0x20 - shift_amount & 0xff) != 0) {\n      significand = significand | 1;\n    }\n    uint exponent_bits = float_exponent & 0x1fffff | 0x100000;\n    float_bits = significand | exponent_bits << (0x20 - shift_amount & 0xff);\n    exponent_bits = (exponent_bits >> (shift_amount & 0xff)) << 1;\n  }\n  result = (float_exponent & 0x80000000 | float_bits >> 0x1d) + exponent_bits * 4 + (uint)(0x7fffffff < float_bits * 8);\n  if (float_bits * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009fc",
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "imported": false,
            "current_name": "calculate_float_bits_080009fc"
        },
        "FUN_08000cb8": {
            "renaming": {
                "FUN_08000cb8": "FUNC_08000cb8"
            },
            "code": "\nuint FUNC_08000cb8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_08000e08;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_08000e08:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cb8",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "FUNC_08000cb8"
        },
        "FUN_080093a4": {
            "renaming": {
                "FUN_080093a4": "calculate_hash_table_080093a4",
                "param_1": "hash_table_address",
                "param_2": "data",
                "param_3": "length",
                "iVar1": "hash_table_address_2",
                "iVar2": "num_words",
                "puVar3": "current_data",
                "puVar4": "next_hash_table",
                "hash_table": "hash_table",
                "DAT_08009440": "DAT_08009440",
                "PTR_DAT_08009440": "PTR_DAT_08009440",
                "calculate_polynomial_08009120": "calculate_polynomial",
                "allocate_and_initialize_memory_080090c0": "allocate_and_initialize_memory",
                "calculate_hash_08009258": "calculate_hash"
            },
            "code": "uint32_t * calculate_hash_table_080093a4(int hash_table_address, uint32_t *data, uint length)\n{\n  int remainder = length % 4;\n  if (remainder != 0) {\n    data = (uint32_t *) calculate_polynomial(hash_table_address, data, *(uint32_t *)(PTR_DAT_08009440 + ((remainder - 1) * 4)), 0);\n  }\n  int num_words = length >> 2;\n  if (num_words != 0) {\n    uint32_t *hash_table = *(uint32_t **)(hash_table_address + 0x48);\n    if (hash_table == NULL) {\n      hash_table = (uint32_t *) allocate_and_initialize_memory(hash_table_address, 1);\n      hash_table[4] = 1;\n      hash_table[5] = 0x271;\n      *(uint32_t **)(hash_table_address + 0x48) = hash_table;\n      *hash_table = 0;\n    }\n    uint32_t *current_data = data;\n    if (num_words << 0x1f >= 0) {\n      goto LAB_080093d2;\n    }\nLAB_080093c4:\n    num_words = num_words >> 1;\n    current_data = hash_table;\n    if (num_words != 0) {\n      while (true) {\n        uint32_t *next_hash_table = (uint32_t *) *current_data;\n        if (next_hash_table == NULL) {\n          next_hash_table = (uint32_t *) calculate_hash(hash_table_address, current_data, current_data);\n          *current_data = next_hash_table;\n          *next_hash_table = 0;\n        }\n        current_data = data;\n        if (-1 < num_words << 0x1f) {\n          break;\n        }\nLAB_080093d2:\n        data = (uint32_t *) calculate_hash(hash_table_address, current_data, next_hash_table);\n        if (current_data == NULL) {\n          break;\n        }\n        int hash_table_address_2 = *(int *)(hash_table_address + 0x4c);\n        num_words = num_words >> 1;\n        *current_data = *(uint32_t *)(hash_table_address_2 + current_data[1] * 4);\n        *(uint32_t **)(hash_table_address_2 + current_data[1] * 4) = current_data;\n        current_data = next_hash_table;\n        if (num_words == 0) {\n          return data;\n        }\n      }\n      goto LAB_080093c4;\n    }\n  }\n  return data;\n}",
            "called": [
                "FUN_08009120",
                "FUN_08009258",
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080093a4",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_hash_table_080093a4"
        },
        "FUN_080098c0": {
            "renaming": {
                "FUN_080098c0": "add_to_list_080098c0",
                "param_1": "list_num",
                "param_2": "val1",
                "param_3": "val2",
                "param_4": "val3",
                "puVar1": "ptr",
                "uVar2": "result",
                "uVar3": "mask",
                "uVar4": "list_size",
                "iVar5": "list_head",
                "iVar6": "list_ptr",
                "iVar7": "new_index"
            },
            "code": "undefined4 add_to_list_080098c0(int list_num, undefined4 val1, undefined4 val2, undefined4 val3)\n{\n    undefined *ptr = PTR_PTR_DAT_08009974;\n    do_nothing_08008af0(*(undefined4 *)PTR_PTR_DAT_08009974);\n    int list_ptr = *(int *)PTR_PTR_DAT_08009978;\n    int list_head = *(int *)(list_ptr + 0x148);\n    if (list_head == 0) {\n        list_head = list_ptr + 0x14c;\n        *(int *)(list_ptr + 0x148) = list_head;\n    }\n    uint list_size = *(uint *)(list_head + 4);\n    int new_index;\n    if ((int)list_size < 0x20) {\n        new_index = list_size + 1;\n    }\n    else {\n        if (DAT_0800997c == 0) {\n            do_nothing_08008af4(*(undefined4 *)ptr);\n            return 0xffffffff;\n        }\n        int list_ptr = 400;\n        list_size = 0;\n        _DAT_00000190 = *(undefined4 *)(list_ptr + 0x148);\n        new_index = 1;\n        _DAT_00000194 = 0;\n        *(undefined4 *)(list_ptr + 0x148) = 400;\n        _DAT_00000318 = 0;\n        _DAT_0000031c = 0;\n    }\n    if (list_num != 0) {\n        int new_item = list_head + list_size * 4;\n        *(undefined4 *)(new_item + 0x88) = val2;\n        uint mask = 1 << (list_size & 0xff);\n        *(uint *)(list_head + 0x188) = *(uint *)(list_head + 0x188) | mask;\n        *(undefined4 *)(new_item + 0x108) = val3;\n        if (list_num == 2) {\n            *(uint *)(list_head + 0x18c) = mask | *(uint *)(list_head + 0x18c);\n        }\n    }\n    *(int *)(list_head + 4) = new_index;\n    undefined4 result = *(undefined4 *)ptr;\n    *(undefined4 *)(list_head + (list_size + 2) * 4) = val1;\n    do_nothing_08008af4(result);\n    return 0;\n}",
            "called": [
                "FUN_08008af4",
                "FUN_08008af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098c0",
            "calling": [
                "FUN_080078a0"
            ],
            "imported": false,
            "current_name": "add_to_list_080098c0"
        },
        "FUN_08003c80": {
            "renaming": {
                "FUN_08003c80": "do_nothing_08003c80"
            },
            "code": "\nvoid do_nothing_08003c80(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c80",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c80"
        },
        "FUN_0800015c": {
            "renaming": {
                "FUN_0800015c": "FUNC_0800015c"
            },
            "code": "\nulonglong FUNC_0800015c(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_08000268;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800015c",
            "calling": [
                "FUN_08005838",
                "FUN_08004bd8",
                "FUN_080079e8",
                "FUN_080059f0"
            ],
            "imported": false,
            "current_name": "FUNC_0800015c"
        },
        "FUN_080027f4": {
            "renaming": {
                "FUN_080027f4": "check_and_update_flag_080027f4",
                "param_1": "flag",
                "param_2": "flag_value",
                "param_3": "param_3",
                "param_4": "flag_mask",
                "param_5": "max_offset",
                "param_6": "base_address",
                "iVar1": "check_result",
                "uVar2": "result"
            },
            "code": "undefined4 check_and_update_flag_080027f4(uint **flag, byte flag_value, undefined2 param_3, short flag_mask, uint max_offset, int base_address)\n{\n    int check_result;\n    undefined4 result;\n    **flag |= 0x400;\n    **flag |= 0x100;\n    do {\n        if ((~(*flag)[5] & 1) == 0) {\n            check_result = 0;\n            goto LAB_080028d2;\n        }\n    } while ((max_offset == 0xffffffff) || ((max_offset != 0 && (check_result = get_pointer_value(base_address), (uint)(check_result - base_address) <= max_offset))));\n    flag[0xc] = (uint *)0x0;\n    *(undefined *)((int)flag + 0x3d) = 0x20;\n    *(undefined *)((int)flag + 0x3e) = 0;\n    *(undefined *)(flag + 0xf) = 0;\n    check_result = 3;\nLAB_080028d2:\n    if (check_result == 0) {\n        (*flag)[4] = flag_value & 0xfe;\n        check_result = check_value(flag, flag_mask, max_offset, base_address);\n        if (check_result == 0) {\n            check_result = check_and_update_flag_080027f4_08002bb4(flag, max_offset, base_address, (*flag)[6]);\n            if (check_result == 0) {\n                if (param_3 == 1) {\n                    (*flag)[4] = (uint)(byte)flag_mask;\n                }\n                else {\n                    (*flag)[4] = (uint)(byte)((ushort)flag_mask >> 8);\n                    check_result = check_and_update_flag_080027f4_08002bb4(flag, max_offset, base_address);\n                    if (check_result != 0) {\n                        if (flag[0x10] == (uint *)0x4) {\n                            **flag |= 0x200;\n                            result = 1;\n                            return result;\n                        }\n                        result = 3;\n                        return result;\n                    }\n                    (*flag)[4] = (uint)(byte)flag_mask;\n                }\n                check_result = check_and_update_flag_080027f4_08002bb4(flag, max_offset, base_address);\n                if (check_result == 0) {\n                    **flag |= 0x100;\n                    do {\n                        if ((~(*flag)[5] & 1) == 0) {\n                            check_result = 0;\n                            goto LAB_08002a90;\n                        }\n                    } while ((max_offset == 0xffffffff) || ((max_offset != 0 && (check_result = get_pointer_value(base_address), (uint)(check_result - base_address) <= max_offset))));\n                    flag[0xc] = (uint *)0x0;\n                    *(undefined *)((int)flag + 0x3d) = 0x20;\n                    *(undefined *)((int)flag + 0x3e) = 0;\n                    *(undefined *)(flag + 0xf) = 0;\n                    check_result = 3;\nLAB_08002a90:\n                    if (check_result == 0) {\n                        (*flag)[4] = (uint)(flag_value | 1);\n                        check_result = check_value(flag, flag_mask, max_offset, base_address);\n                        if (check_result == 0) {\n                            result = 0;\n                            return result;\n                        }\n                        else if (flag[0x10] == (uint *)0x4) {\n                            result = 1;\n                            return result;\n                        }\n                        else {\n                            result = 3;\n                            return result;\n                        }\n                    }\n                    else if (flag[0x10] == (uint *)0x4) {\n                        **flag |= 0x200;\n                        result = 1;\n                        return result;\n                    }\n                    else {\n                        result = 3;\n                        return result;\n                    }\n                }\n                else if (flag[0x10] == (uint *)0x4) {\n                    **flag |= 0x200;\n                    result = 1;\n                    return result;\n                }\n                else {\n                    result = 3;\n                    return result;\n                }\n            }\n            else if (flag[0x10] == (uint *)0x4) {\n                **flag |= 0x200;\n                result = 1;\n                return result;\n            }\n            else {\n                result = 3;\n                return result;\n            }\n        }\n        else if (flag[0x10] == (uint *)0x4) {\n            result = 1;\n            return result;\n        }\n        else {\n            result = 3;\n            return result;\n        }\n    }\n    else {\n        result = 3;\n        return result;\n    }\n}\n",
            "called": [
                "FUN_080015a0",
                "FUN_08002bb4",
                "FUN_08002ad8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080027f4",
            "calling": [
                "FUN_08001f6c"
            ],
            "imported": false,
            "current_name": "check_and_update_flag_080027f4"
        },
        "FUN_080003d4": {
            "renaming": {
                "FUN_080003d4": "calculate_shifted_value_080003d4",
                "param_1": "input_value",
                "uVar1": "shifted_value_high",
                "uVar2": "shift_amount",
                "iVar3": "leading_zeroes_count",
                "uVar4": "temp_shift_amount",
                "in_r12": "padding_bits",
                "bVar5": "is_shift_amount_less_than_0",
                "bVar6": "is_shift_amount_equal_to_11",
                "bVar7": "is_shift_amount_negative"
            },
            "code": "ulonglong calculate_shifted_value_080003d4(uint input_value)\n{\n  uint leading_zeroes_count = count_leading_zeroes(input_value);\n  uint shift_amount = leading_zeroes_count + 21;\n  bool is_shift_amount_negative = SBORROW4(shift_amount, 32);\n  bool is_shift_amount_less_than_11 = (int)(leading_zeroes_count - 11) < 0;\n  bool is_shift_amount_equal_to_11 = leading_zeroes_count == 11;\n  uint shifted_value = 0;\n  uint remaining_bits = 0;\n  uint padding_bits = 0;\n  if (input_value == 0) {\n    return 0;\n  }\n  if ((int)shift_amount < 32) {\n    is_shift_amount_negative = SCARRY4(leading_zeroes_count, 12);\n    leading_zeroes_count++;\n    is_shift_amount_less_than_11 = leading_zeroes_count < 0;\n    is_shift_amount_equal_to_11 = leading_zeroes_count == 0;\n    shift_amount = shift_amount < 32 ? shift_amount : 32;\n    if (!is_shift_amount_equal_to_11 && is_shift_amount_less_than_11 == is_shift_amount_negative) {\n      shifted_value = input_value << (shift_amount & 0xff);\n      input_value = input_value >> ((12 - leading_zeroes_count) & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_shift_amount_equal_to_11 || is_shift_amount_less_than_11 != is_shift_amount_negative) {\n    remaining_bits = 32 - shift_amount;\n  }\n  shifted_value = input_value << (leading_zeroes_count & 0xff);\n  if (is_shift_amount_equal_to_11 || is_shift_amount_less_than_11 != is_shift_amount_negative) {\n    padding_bits = 0U >> (remaining_bits & 0xff);\n    shifted_value |= padding_bits;\n  }\n  if (is_shift_amount_equal_to_11 || is_shift_amount_less_than_11 != is_shift_amount_negative) {\n    shifted_value = 0 << (leading_zeroes_count & 0xff);\n  }\nLAB_080002e0:\n  if ((int)shift_amount < 1075) {\n    return CONCAT44(shifted_value + (1074 - shift_amount) * 0x100000, 0);\n  }\n  uint inverted_shift_amount = ~(1074 - shift_amount);\n  if (30 < (int)inverted_shift_amount) {\n    return (ulonglong)(input_value >> (inverted_shift_amount - 31 & 0xff));\n  }\n  int shifted_bits = inverted_shift_amount - 19;\n  if (shifted_bits == 0 || shifted_bits < 0 != SCARRY4(inverted_shift_amount - 31, 12)) {\n    inverted_shift_amount++;\n    return CONCAT44(input_value >> (inverted_shift_amount & 0xff), shifted_value >> (inverted_shift_amount & 0xff) | input_value << (32 - inverted_shift_amount & 0xff));\n  }\n  return (ulonglong)(shifted_value >> (32 - (12 - shifted_bits) & 0xff) | input_value << (12 - shifted_bits & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003d4",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_080003d4"
        },
        "FUN_08004d78": {
            "renaming": {
                "FUN_08004d78": "calculate_float_bits_and_hash_08004d78",
                "param_1": "input_array",
                "param_2": "output_hash",
                "param_3": "output_float_bits",
                "uVar1": "hash_input_1",
                "uVar2": "hash_input_2",
                "uVar3": "hash_input_3",
                "uVar4": "hash_result_1",
                "uVar5": "hash_result_2",
                "calculate_hash_08000418": "calculate_hash",
                "calculate_result_thunk_08005838": "calculate_result_thunk",
                "FUNC_080004c8": "calculate_hash_with_input",
                "FUNC_0800071c": "calculate_hash_with_inputs",
                "calculate_float_bits_080009fc": "calculate_float_bits"
            },
            "code": "void calculate_float_bits_and_hash_08004d78(undefined4 *input_array, undefined4 *output_hash, undefined4 *output_float_bits) {\n  \n  undefined4 hash_input_1 = FUNC_08000e20(input_array[0], 0x45800000);\n  undefined4 hash_input_2 = FUNC_08000e20(input_array[1], 0x45800000);\n  undefined4 hash_input_3 = FUNC_08000e20(input_array[2], 0x45800000);\n  \n  undefined8 hash_result_1 = calculate_hash_08000418(hash_input_2);\n  undefined8 hash_result_2 = calculate_hash_08000418(hash_input_3);\n  \n  undefined8 result_thunk = calculate_result_thunk_08005838((int)hash_result_1, (int)((ulonglong)hash_result_1 >> 0x20), (int)hash_result_2, (int)((ulonglong)hash_result_2 >> 0x20));\n  \n  undefined8 hash_result_3 = FUNC_080004c8((int)result_thunk, (int)((ulonglong)result_thunk >> 0x20), 0, DAT_08004e68);\n  \n  undefined8 hash_result_4 = FUNC_0800071c((int)hash_result_3, (int)((ulonglong)hash_result_3 >> 0x20), DAT_08004e60, DAT_08004e64);\n  \n  undefined4 float_bits = calculate_float_bits_080009fc((int)hash_result_4, (int)((ulonglong)hash_result_4 >> 0x20));\n  \n  hash_result_1 = calculate_hash_08000418(hash_input_1);\n  hash_result_2 = calculate_hash_08000418(hash_input_3);\n  \n  result_thunk = calculate_result_thunk_08005838((int)hash_result_1, (int)((ulonglong)hash_result_1 >> 0x20), (int)hash_result_2, (int)((ulonglong)hash_result_2 >> 0x20));\n  \n  hash_result_3 = FUNC_080004c8((int)result_thunk, (int)((ulonglong)result_thunk >> 0x20), 0, DAT_08004e68);\n  \n  hash_result_4 = FUNC_0800071c((int)hash_result_3, (int)((ulonglong)hash_result_3 >> 0x20), DAT_08004e60, DAT_08004e64);\n  \n  undefined4 float_bits_2 = calculate_float_bits_080009fc((int)hash_result_4, (int)((ulonglong)hash_result_4 >> 0x20));\n  \n  *output_hash = float_bits;\n  *output_float_bits = float_bits_2;\n}\n",
            "called": [
                "FUN_080004c8",
                "FUN_080009fc",
                "FUN_08000e20",
                "FUN_0800071c",
                "FUN_08000418",
                "thunk_FUN_08005838"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d78",
            "calling": [
                "FUN_080049cc"
            ],
            "imported": false,
            "current_name": "calculate_float_bits_and_hash_08004d78"
        },
        "FUN_08000c10": {
            "renaming": {
                "FUN_08000c10": "reverse_bits_08000c10",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit",
                "iVar4": "result",
                "uVar5": "carry",
                "count_leading_zeroes": "count_leading_zeroes"
            },
            "code": "uint reverse_bits_08000c10(uint input)\n{\n  int leading_zeroes = count_leading_zeroes(input);\n  uint shift_amount = leading_zeroes - 8;\n  uint sign_bit = input & 0x80000000;\n  if (sign_bit)\n  {\n    input = -input;\n  }\n  if (input == 0)\n  {\n    return 0;\n  }\n  uint result = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (leading_zeroes > 7)\n  {\n    uint shifted_input = input << (shift_amount & 0xff);\n    uint shifted_zero = 0U >> (0x20 - shift_amount & 0xff);\n    uint carry = (uint)(0x7fffffff < shifted_zero);\n    result += shifted_input + shifted_zero + carry;\n    if (shifted_zero == 0x80000000)\n    {\n      result &= 0xfffffffe;\n    }\n    return result;\n  }\n  uint shifted_input = input << (leading_zeroes + 0x18U & 0xff);\n  uint shifted_output = (input >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)shifted_input >> 0x1f);\n  if ((shifted_input & 0x7fffffff) == 0)\n  {\n    shifted_output &= ~(shifted_input >> 0x1f);\n  }\n  return result + shifted_output;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c10",
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78",
                "FUN_08004ae0"
            ],
            "imported": false,
            "current_name": "reverse_bits_08000c10"
        },
        "FUN_0800491c": {
            "renaming": {
                "FUN_0800491c": "initialize_params_and_calculate_hash_0800491c",
                "param_1": "params",
                "local_13": "padding_byte",
                "local_12": "block_size",
                "local_11": "salt",
                "PTR_DAT_080049c8": "DoNotRename_PTR_DAT_080049c8",
                "calculate_hash_and_store_values_080049cc": "calculate_hash_and_store_values",
                "undefined": "uint8_t",
                "0xd0": "DoNotRename_0xd0",
                "0x6b": "DoNotRename_0x6b",
                "0x1c": "DoNotRename_0x1c",
                "0x1b": "DoNotRename_0x1b"
            },
            "code": "void initialize_params_and_calculate_hash_0800491c(uint32_t *params)\n{\n  uint8_t padding_byte = 0;\n  uint8_t block_size = 16;\n  uint8_t salt[5] = {0,0,0,0,0};\n  uint8_t hash_type = 8;\n  uint8_t hash_length = 11;\n  memset(params, 0, 11*sizeof(uint32_t));\n  calculate_hash_and_store_values(params, salt, hash_type, hash_length);\n}\n",
            "called": [
                "FUN_080049cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800491c",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_params_and_calculate_hash_0800491c"
        },
        "FUN_080078a0": {
            "renaming": {
                "FUN_080078a0": "checkAndAddToList_080078a0",
                "DAT_080078ac": "hasData",
                "PTR_LAB_08008818_1_080078b0": "labelPointer",
                "add_to_list_080098c0": "addToList"
            },
            "code": "void checkAndAddToList_080078a0(void)\n{\n  if (DAT_080078ac) {\n    addToList(0, PTR_LAB_08008818_1_080078b0, 0);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_080098c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078a0",
            "calling": [
                "FUN_08005d20"
            ],
            "imported": false,
            "current_name": "checkAndAddToList_080078a0"
        },
        "FUN_080057e8": {
            "renaming": {
                "FUN_080057e8": "copy_data_and_clear_bss_080057e8",
                "iVar1": "index",
                "puVar2": "destination_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void copy_data_and_clear_bss_080057e8(void)\n{\n  int index;\n  undefined4 *destination_ptr;\n  code *jump_table;\n  for (index = 0; PTR_DATA_START + index < PTR_DATA_END; index += 4) {\n    *(undefined4 *)(PTR_DATA_START + index) = *(undefined4 *)(DAT_COPY_START + index);\n  }\n  for (destination_ptr = (undefined4 *)PTR_BSS_START; destination_ptr < PTR_BSS_END; destination_ptr++) {\n    *destination_ptr = 0;\n  }\n  enable_interrupts();\n  execute_functions();\n  jump_table = (code *)0x800581a;\n  initialize_program();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_08005d20",
                "FUN_08005224",
                "FUN_08005780"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057e8",
            "calling": [],
            "imported": false,
            "current_name": "copy_data_and_clear_bss_080057e8"
        }
    },
    "used_tokens": 146776,
    "layers": [
        [
            "FUN_08003440",
            "FUN_08003568",
            "FUN_08003c94",
            "FUN_0800901c",
            "FUN_0800177c",
            "FUN_080011ec",
            "FUN_080008fc",
            "FUN_08005dfc",
            "thunk_FUN_08005838",
            "FUN_080003f4",
            "FUN_0800166c",
            "FUN_0800360c",
            "FUN_08005d68",
            "FUN_080017c4",
            "FUN_080041ea",
            "FUN_08001044",
            "FUN_080015fc",
            "FUN_08000110",
            "FUN_08003504",
            "FUN_08004ee8",
            "FUN_080094f8",
            "FUN_08001170",
            "FUN_08003f18",
            "FUN_08003d60",
            "FUN_08001618",
            "FUN_080091a4",
            "FUN_080015a0",
            "FUN_08005780",
            "FUN_08000134",
            "FUN_08000418",
            "FUN_0800416a",
            "FUN_0800088a",
            "FUN_0800157c",
            "FUN_08005d14",
            "FUN_080015b4",
            "FUN_080041a8",
            "FUN_08008ad4",
            "FUN_08005674",
            "FUN_08004104",
            "FUN_08005e40",
            "FUN_08005d20",
            "FUN_08001a80",
            "FUN_08005838",
            "FUN_080090a8",
            "FUN_080096e0",
            "FUN_0800910c",
            "FUN_08001084",
            "FUN_08004e6c",
            "FUN_08009768",
            "FUN_08003ff8",
            "FUN_080040a0",
            "FUN_08009a18",
            "FUN_0800119c",
            "FUN_080090b4",
            "FUN_0800422e",
            "FUN_08003e38",
            "FUN_080006a4",
            "FUN_08000f68",
            "FUN_08000c08",
            "FUN_080042de",
            "FUN_08002d3c",
            "FUN_080091e4",
            "FUN_080009fc",
            "FUN_080098c0",
            "FUN_080003d4",
            "FUN_08000c10"
        ],
        [
            "FUN_080036a8",
            "FUN_08004f2c",
            "FUN_08002c2e",
            "FUN_08000988",
            "FUN_08001714",
            "FUN_080078c0",
            "FUN_080035a4",
            "FUN_08004ae0",
            "FUN_08004436",
            "FUN_08003908",
            "FUN_08004f60",
            "FUN_080097cc",
            "FUN_08002ad8",
            "FUN_08000fd0",
            "FUN_08003518",
            "FUN_0800172a",
            "FUN_08003640",
            "FUN_08009980",
            "FUN_08002ca8",
            "FUN_08003a94",
            "FUN_080055f4",
            "FUN_080016d0",
            "FUN_08004e74",
            "FUN_08005680",
            "FUN_08003540",
            "FUN_08005728",
            "FUN_08002bb4",
            "FUN_08004bd8",
            "FUN_08004d78",
            "FUN_080078a0"
        ],
        [
            "FUN_080046ec",
            "FUN_08005500",
            "FUN_080049cc",
            "FUN_08000978",
            "FUN_08004f3c",
            "FUN_08002640",
            "FUN_08000998",
            "FUN_080009ac",
            "FUN_08000fc8",
            "FUN_080009c0",
            "FUN_08009744",
            "FUN_080053b0",
            "FUN_08000ff4",
            "FUN_08001ab0",
            "FUN_08001762",
            "FUN_080090c0",
            "FUN_080027f4"
        ],
        [
            "FUN_08005348",
            "FUN_0800884c",
            "FUN_08001030",
            "FUN_08009444",
            "FUN_0800438a",
            "FUN_080009d4",
            "FUN_08001ccc",
            "FUN_080009e8",
            "FUN_08009630",
            "FUN_08009120",
            "FUN_08009244",
            "FUN_0800151c",
            "FUN_08009258",
            "FUN_08009530",
            "FUN_0800491c"
        ],
        [
            "FUN_08005598",
            "FUN_080014f0",
            "FUN_08004f78",
            "FUN_08003260",
            "FUN_08004ea4",
            "FUN_080093a4"
        ],
        [
            "FUN_080017b4",
            "FUN_080036f8",
            "FUN_080052a0"
        ],
        [
            "FUN_08005224",
            "FUN_08005704",
            "FUN_08005714"
        ],
        [
            "FUN_080057e8"
        ]
    ],
    "locked_functions": []
}