{
    "functions": {
        "FUN_0800071c": {
            "renaming": {
                "FUN_0800071c": "FUNC_0800071c"
            },
            "code": "\nulonglong FUNC_0800071c(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = calculate_result_0800088a();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_0800083a;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_0800083a:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_0800088a"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800071c",
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "_dtoa_r",
                "__ieee754_atan2",
                "mpu6050_calc_pitch",
                "atan"
            ],
            "imported": false,
            "current_name": "FUNC_0800071c"
        },
        "FUN_08003440": {
            "renaming": {
                "FUN_08003440": "calculate_system_clock_frequency_08003440",
                "aPredivFactorTable": "prediv_factor_table",
                "aPLLMULFactorTable": "pll_mul_factor_table",
                "pllmul": "pllmul",
                "prediv": "prediv",
                "tmpreg": "tmp_reg",
                "sysclockfreq": "sys_clock_freq",
                "pllclk": "pll_clk",
                "PTR__etext_080034f0": "PTR__etext_080034f0",
                "PTR_DAT_080034f4": "PTR_DAT_080034f4",
                "DAT_080034f8": "DAT_080034f8",
                "DAT_080034fc": "DAT_080034fc",
                "DAT_08003500": "DAT_08003500"
            },
            "code": "uint32_t calculate_system_clock_frequency_08003440(void)\n{\n  uint8_t prediv_factor_table[2];\n  uint8_t pll_mul_factor_table[16];\n  uint32_t pllmul;\n  uint32_t prediv;\n  uint32_t tmp_reg;\n  uint32_t sys_clock_freq;\n  uint32_t pll_clk;\n  \n  pll_mul_factor_table[0] = *(undefined4 *)PTR__etext_080034f0;\n  pll_mul_factor_table[1] = *(undefined4 *)(PTR__etext_080034f0 + 4);\n  pll_mul_factor_table[2] = *(undefined4 *)(PTR__etext_080034f0 + 8);\n  pll_mul_factor_table[3] = *(undefined4 *)(PTR__etext_080034f0 + 0xc);\n  prediv_factor_table = *(uint8_t (*) [2])PTR_DAT_080034f4;\n  uint32_t reg_value = *(uint *)(DAT_080034f8 + 4);\n  if ((reg_value & 0xc) == 4)\n  {\n    sys_clock_freq = DAT_080034fc;\n  }\n  else if ((reg_value & 0xc) == 8)\n  {\n    if ((reg_value & 0x10000) == 0)\n    {\n      pll_clk = DAT_08003500 * (uint)pll_mul_factor_table[reg_value >> 0x12 & 0xf];\n    }\n    else\n    {\n      pll_clk = (DAT_080034fc * pll_mul_factor_table[reg_value >> 0x12 & 0xf]) / (uint)prediv_factor_table[*(uint *)(DAT_080034f8 + 4) >> 0x11 & 1];\n    }\n    sys_clock_freq = pll_clk;\n  }\n  else\n  {\n    sys_clock_freq = DAT_080034fc;\n  }\n  return sys_clock_freq;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003440",
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "calculate_system_clock_frequency_08003440"
        },
        "FUN_080035fa": {
            "renaming": {
                "FUN_080035fa": "do_nothing_080035fa"
            },
            "code": "\nvoid do_nothing_080035fa(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fa",
            "calling": [
                "HAL_TIM_Base_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_080035fa"
        },
        "FUN_08004f2c": {
            "renaming": {
                "FUN_08004f2c": "get_current_tick_08004f2c",
                "uVar1": "current_tick"
            },
            "code": "uint32_t get_current_tick_08004f2c(void)\n{\n  uint32_t current_tick = HAL_GetTick();\n  return current_tick;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f2c",
            "calling": [],
            "imported": false,
            "current_name": "get_current_tick_08004f2c"
        },
        "FUN_080056bc": {
            "renaming": {
                "FUN_080056bc": "do_nothing_080056bc"
            },
            "code": "\nvoid do_nothing_080056bc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056bc",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080056bc"
        },
        "FUN_080046ec": {
            "renaming": {
                "FUN_080046ec": "set_uart_config_080046ec",
                "huart": "uart_handle",
                "uVar1": "mantissa",
                "uVar2": "usart_div",
                "uVar3": "fraction",
                "uVar4": "pclk_freq",
                "uVar5": "pclk_freq",
                "uVar6": "pclk_freq",
                "uVar7": "pclk_freq",
                "uVar8": "pclk_freq",
                "uVar9": "baud_rate",
                "uVar10": "baud_rate",
                "uVar11": "baud_rate",
                "uVar12": "baud_rate",
                "tmpreg": "tmpreg",
                "DAT_08004914": "PTR_08004914"
            },
            "code": "void set_uart_config_080046ec(UART_HandleTypeDef *uart_handle)\n{\n  uint32_t pclk_freq;\n  uint32_t tmpreg;\n  uint32_t baud_rate = uart_handle->Init.BaudRate;\n  uint32_t stop_bits = uart_handle->Init.StopBits;\n  uint32_t mode = uart_handle->Init.Mode;\n  uint32_t word_length = uart_handle->Init.WordLength;\n  uint32_t parity = uart_handle->Init.Parity;\n  uint32_t hw_flow_ctl = uart_handle->Init.HwFlowCtl;\n  \n  if (uart_handle->Instance == DAT_08004914) {\n    pclk_freq = HAL_RCC_GetPCLK2Freq();\n  }\n  else {\n    pclk_freq = HAL_RCC_GetPCLK1Freq();\n  }\n  \n  uint32_t usart_div = (uint32_t)((float)(pclk_freq * 2) / (float)(baud_rate));\n  uint32_t mantissa = usart_div >> 4;\n  uint32_t fraction = (usart_div - (mantissa << 4));\n  \n  uart_handle->Instance->BRR = (mantissa << 4) | fraction;\n  uart_handle->Instance->CR2 = (stop_bits | (uart_handle->Instance->CR2 & 0xFFFFCFFF));\n  uart_handle->Instance->CR1 = ((uart_handle->Instance->CR1 & 0xFFFFE9F3) | mode | word_length | parity);\n  uart_handle->Instance->CR3 = (hw_flow_ctl | (uart_handle->Instance->CR3 & 0xFFFFFCFF));\n}\n",
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046ec",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "set_uart_config_080046ec"
        },
        "FUN_08005500": {
            "renaming": {
                "FUN_08005500": "initialize_timer_08005500",
                "HVar1": "status",
                "sMasterConfig": "master_config",
                "sClockSourceConfig": "clock_config"
            },
            "code": "void initialize_timer_08005500(void)\n{\n  HAL_StatusTypeDef status;\n  TIM_MasterConfigTypeDef master_config;\n  TIM_ClockConfigTypeDef clock_config;\n  \n  *(uint32_t *)htim2 = 0x40000000;\n  *(uint32_t *)(htim2 + 4) = 36000;\n  *(uint32_t *)(htim2 + 8) = 0;\n  *(uint32_t *)(htim2 + 0xc) = 0x14;\n  *(uint32_t *)(htim2 + 0x10) = 0;\n  *(uint32_t *)(htim2 + 0x18) = 0;\n  status = HAL_TIM_Base_Init((TIM_HandleTypeDef *)htim2);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  clock_config.ClockSource = TIM_CLOCKSOURCE_INTERNAL;\n  status = HAL_TIM_ConfigClockSource((TIM_HandleTypeDef *)htim2, &clock_config);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  master_config.MasterOutputTrigger = TIM_TRGO_OC1REF;\n  master_config.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;\n  status = HAL_TIMEx_MasterConfigSynchronization((TIM_HandleTypeDef *)htim2, &master_config);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  return;\n}\n",
            "called": [
                "HAL_TIM_ConfigClockSource",
                "_Error_Handler",
                "HAL_TIMEx_MasterConfigSynchronization",
                "HAL_TIM_Base_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005500",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_timer_08005500"
        },
        "FUN_08003568": {
            "renaming": {
                "FUN_08003568": "delay_08003568",
                "mdelay": "millisecond",
                "Delay": "cycles"
            },
            "code": "void delay_08003568(uint32_t millisecond)\n{\n  uint32_t cycles = millisecond * ((uint64_t)SYSTICK_FREQ * (uint64_t)*SystemCoreClock / (1ULL << 32));\n  while (cycles--);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003568",
            "calling": [
                "HAL_RCC_OscConfig"
            ],
            "imported": false,
            "current_name": "delay_08003568"
        },
        "FUN_08002c2e": {
            "renaming": {
                "FUN_08002c2e": "check_i2c_ack_08002c2e",
                "hi2c": "i2c_handle",
                "Timeout": "timeout",
                "Tickstart": "start_tick",
                "HVar1": "status",
                "uVar2": "current_tick"
            },
            "code": "HAL_StatusTypeDef check_i2c_ack_08002c2e(I2C_HandleTypeDef *i2c_handle, uint32_t timeout, uint32_t start_tick)\n{\n  HAL_StatusTypeDef status;\n  uint32_t current_tick;\n  while (1) {\n    if ((i2c_handle->Instance->SR1 & I2C_SR1_BTF) == I2C_SR1_BTF) {\n      return HAL_OK;\n    }\n    status = I2C_IsAcknowledgeFailed(i2c_handle);\n    if (status != HAL_OK) {\n      break;\n    }\n    if ((timeout != 0xffffffff) && ((timeout == 0) || ((current_tick = HAL_GetTick()) - start_tick > timeout))) {\n      i2c_handle->ErrorCode |= I2C_ERROR_TIMEOUT;\n      i2c_handle->PreviousState = 0;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      i2c_handle->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  }\n  return HAL_ERROR;\n}",
            "called": [
                "I2C_IsAcknowledgeFailed",
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c2e",
            "calling": [
                "HAL_I2C_Mem_Write"
            ],
            "imported": false,
            "current_name": "check_i2c_ack_08002c2e"
        },
        "FUN_080008ec": {
            "renaming": {
                "FUN_080008ec": "compareValues_080008ec",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "valuesAreDifferent",
                "bVar2": "valuesAreZero",
                "bVar3": "valuesAreDifferentAndValue4IsLessThanValue2",
                "result": "result"
            },
            "code": "uint compareValues_080008ec(uint value1, uint value2, uint value3, uint value4)\n{\n    uint result = 0;\n    bool valuesAreZero = ((value1 | (value2 << 1)) == 0) && ((value3 | (value4 << 1)) == 0);\n    bool valuesAreEqual = (value1 == value3) && (value2 == value4);\n    bool valuesAreInverted = (value2 == value4) && (value1 == value3);\n    bool valuesAreDifferent = value2 ^ value4;\n    bool valuesAreDifferentAndValue4IsLessThanValue2 = (-1 < (int)valuesAreDifferent) && (value4 <= value2);\n    bool valuesAreDifferentAndValue3IsLessThanValue1 = valuesAreDifferent && (value3 <= value1);\n    bool valuesAreNegative = ((int)(value2 << 1) >> 0x15 == -1) || ((int)(value4 << 1) >> 0x15 == -1);\n    if (valuesAreNegative && ((int)(value2 << 1) >> 0x15 == -1) && ((value1 | (value2 << 0xc)) != 0))\n    {\n        result = 0xffffffff;\n    }\n    else if (valuesAreNegative && ((int)(value4 << 1) >> 0x15 == -1) && ((value3 | (value4 << 0xc)) != 0))\n    {\n        result = 0xffffffff;\n    }\n    else if (!valuesAreZero && !valuesAreEqual && !valuesAreInverted)\n    {\n        if (valuesAreDifferentAndValue4IsLessThanValue2 || (valuesAreDifferent && valuesAreEqual && valuesAreDifferentAndValue3IsLessThanValue1))\n        {\n            result = ~((int)value4 >> 0x1f) | 1;\n        }\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008ec",
            "calling": [],
            "imported": false,
            "current_name": "compareValues_080008ec"
        },
        "FUN_08000978": {
            "renaming": {
                "FUN_08000978": "compare_double_values_08000978",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "result_if_equal",
                "param_4": "result_if_not_equal"
            },
            "code": "void compare_double_values_08000978(double value1, double value2, double result_if_equal, double result_if_not_equal){\n  __aeabi_cdcmpeq(value1, value2, result_if_equal, result_if_not_equal);\n  return;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000978",
            "calling": [
                "__aeabi_dcmpgt",
                "__aeabi_dcmpge"
            ],
            "imported": false,
            "current_name": "compare_double_values_08000978"
        },
        "FUN_0800101c": {
            "renaming": {
                "FUN_0800101c": "is_smaller_or_equal_0800101c",
                "in_ZR": "is_zero",
                "in_CY": "is_greater"
            },
            "code": "bool is_smaller_or_equal_0800101c(float a, float b) {\n    bool is_greater = __aeabi_cfrcmple(b, a);\n    bool is_equal = (a == b);\n    return !is_greater || is_equal;\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800101c",
            "calling": [],
            "imported": false,
            "current_name": "is_smaller_or_equal_0800101c"
        },
        "FUN_080056d4": {
            "renaming": {
                "FUN_080056d4": "wait_forever_080056d4"
            },
            "code": "void wait_forever_080056d4(void)\n{\n  while( true )\n  {\n    // Do nothing\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d4",
            "calling": [],
            "imported": false,
            "current_name": "wait_forever_080056d4"
        },
        "FUN_080078b4": {
            "renaming": {
                "FUN_080078b4": "register_exit_process_080078b4",
                "__func": "func_ptr",
                "iVar1": "exit_proc_id"
            },
            "code": "int register_exit_process_080078b4(__func* func_ptr) {\n  int exit_proc_id = __register_exitproc(0, func_ptr, 0);\n  return exit_proc_id;\n}",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078b4",
            "calling": [
                "register_fini"
            ],
            "imported": false,
            "current_name": "register_exit_process_080078b4"
        },
        "FUN_080017b4": {
            "renaming": {
                "FUN_080017b4": "period_elapsed_callback_080017b4",
                "TIM_HandleTypeDef*": "tim_handler",
                "(TIM_HandleTypeDef *)0x0": "tim_handler = (TIM_HandleTypeDef*)0x0;",
                "HAL_TIM_PeriodElapsedCallback": "HAL_TIM_PeriodElapsedCallback"
            },
            "code": "void period_elapsed_callback_080017b4(void)\n{\n  TIM_HandleTypeDef* tim_handler = (TIM_HandleTypeDef*)0x0;\n  HAL_TIM_PeriodElapsedCallback(tim_handler);\n  return;\n}",
            "called": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080017b4",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "period_elapsed_callback_080017b4"
        },
        "FUN_08001030": {
            "renaming": {
                "FUN_08001030": "is_end_of_string_08001030",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_08001030(void)\n{\n  char current_char;\n  __aeabi_cfrcmple();\n  return current_char == '\\0';\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001030",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "is_end_of_string_08001030"
        },
        "FUN_080011ec": {
            "renaming": {
                "FUN_080011ec": "divide_numbers_080011ec",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder"
            },
            "code": "void divide_numbers_080011ec(int dividend, int divisor, int quotient, int remainder) {\n  if ((remainder == 0) && (quotient == 0)) {\n    if (divisor != 0 || dividend != 0) {\n      divisor = -1;\n      dividend = -1;\n    }\n    __aeabi_idiv0(dividend,divisor);\n    return;\n  }\n  __udivmoddi4();\n  return;\n}",
            "called": [
                "__udivmoddi4",
                "__aeabi_idiv0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011ec",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "divide_numbers_080011ec"
        },
        "FUN_080056ce": {
            "renaming": {
                "FUN_080056ce": "infinite_loop_080056ce"
            },
            "code": "void infinite_loop_080056ce() {\n  while (true) {\n    // Do nothing\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056ce",
            "calling": [],
            "imported": false,
            "current_name": "infinite_loop_080056ce"
        },
        "FUN_08004424": {
            "renaming": {
                "FUN_08004424": "do_nothing_08004424"
            },
            "code": "\nvoid do_nothing_08004424(UART_HandleTypeDef *huart)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004424",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08004424"
        },
        "FUN_08004f3c": {
            "renaming": {
                "FUN_08004f3c": "transmit_uart_data_08004f3c",
                "str": "data_buffer",
                "len": "buffer_length",
                "PTR_huart1_08004f5c": "&huart1"
            },
            "code": "void transmit_uart_data_08004f3c(char *data_buffer, uint32_t buffer_length) {\n  HAL_UART_Transmit(PTR_huart1_08004f5c, (uint8_t *)data_buffer, (uint16_t)buffer_length, 50);\n  return;\n}",
            "called": [
                "HAL_UART_Transmit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "transmit_uart_data_08004f3c"
        },
        "FUN_08003696": {
            "renaming": {
                "FUN_08003696": "do_nothing_08003696"
            },
            "code": "\nvoid do_nothing_08003696(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003696",
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08003696"
        },
        "FUN_080008fc": {
            "renaming": {
                "FUN_080008fc": "check_collision_080008fc",
                "param_1": "x1",
                "param_2": "y1",
                "param_3": "x2",
                "param_4": "y2",
                "uVar1": "x_diff",
                "bVar2": "is_point1_origin",
                "bVar3": "is_y_diff_negative",
                "is_y1_edge": "is_y1_edge",
                "is_y2_edge": "is_y2_edge",
                "is_x_diff_zero": "is_x_diff_zero",
                "sign": "sign"
            },
            "code": "uint check_collision_080008fc(uint x1, uint y1, uint x2, uint y2)\n{\n  bool is_y1_edge = (y1 << 1) >> 0x15 == -1;\n  bool is_y2_edge = (y2 << 1) >> 0x15 == -1;\n  if (is_y1_edge || is_y2_edge) {\n    if ((is_y1_edge && ((x1 | (y1 << 0xc)) != 0)) || ((is_y2_edge && ((x2 | (y2 << 0xc)) != 0))))) {\n      return 1;\n    }\n  }\n  bool is_point1_origin = (x1 | (y1 << 1)) == 0;\n  bool is_point2_origin = (x2 | (y2 << 1)) == 0;\n  if (!is_point1_origin && !is_point2_origin) {\n    if (x1 == x2 && y1 == y2) {\n      return 1;\n    }\n    uint x_diff = x1 ^ x2;\n    bool is_x_diff_zero = x_diff == 0;\n    if (-1 < (int)x_diff) {\n      is_x_diff_zero = x1 == x2;\n    }\n    bool is_y_diff_negative = -1 < (int)x_diff && y2 <= y1;\n    if (is_x_diff_zero) {\n      is_y_diff_negative = y1 <= y2;\n    }\n    int sign = (int)y2 >> 0x1f;\n    if (!is_y_diff_negative) {\n      sign = ~sign;\n    }\n    return sign | 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008fc",
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "imported": false,
            "current_name": "check_collision_080008fc"
        },
        "FUN_08001714": {
            "renaming": {
                "FUN_08001714": "set_NVIC_priority_group_08001714",
                "PriorityGroup": "priority_group"
            },
            "code": "void set_NVIC_priority_group_08001714(uint32_t priority_group)\n{\n  NVIC_SetPriorityGrouping(priority_group);\n  return;\n}",
            "called": [
                "NVIC_SetPriorityGrouping"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001714",
            "calling": [
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "set_NVIC_priority_group_08001714"
        },
        "FUN_08000988": {
            "renaming": {
                "FUN_08000988": "convert_double_to_float_08000988",
                "param_1": "input_float"
            },
            "code": "undefined4 convert_double_to_float_08000988(undefined4 input_float)\n{\n  __nedf2();\n  return input_float;\n}",
            "called": [
                "__nedf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000988",
            "calling": [
                "__aeabi_dcmpeq",
                "__aeabi_dcmple",
                "__aeabi_cdrcmple",
                "__aeabi_dcmplt"
            ],
            "imported": false,
            "current_name": "convert_double_to_float_08000988"
        },
        "FUN_080078c0": {
            "renaming": {
                "FUN_080078c0": "divide_and_multiply_080078c0",
                "param_1": "numerator",
                "param_2": "denominator",
                "uVar1": "quotient",
                "puVar2": "numerator_ptr",
                "iVar3": "carry",
                "iVar4": "comparison_result",
                "iVar5": "denominator_length",
                "uVar6": "quotient",
                "puVar7": "denominator_ptr",
                "puVar8": "numerator_ptr",
                "puVar9": "denominator_end_ptr",
                "puVar11": "denominator_ptr",
                "puVar12": "denominator_ptr",
                "temp_ptr": "numerator_ptr"
            },
            "code": "uint divide_and_multiply_080078c0(uint numerator, uint denominator)\n{\n    uint quotient;\n    uint *denominator_ptr;\n    uint *numerator_ptr;\n    int numerator_length;\n    int denominator_length;\n    uint carry;\n    uint *denominator_end_ptr;\n    uint *numerator_end_ptr;\n    uint *denominator_start_ptr;\n    uint *numerator_start_ptr;\n    uint *temp_ptr;\n    int comparison_result;\n\n    denominator_length = *(int *)(denominator + 0x10);\n    numerator_length = *(int *)(numerator + 0x10);\n    denominator_start_ptr = (uint *)(denominator + 0x14);\n    numerator_start_ptr = (uint *)(numerator + 0x14);\n\n    if (numerator_length < denominator_length)\n    {\n        return 0;\n    }\n\n    denominator_end_ptr = denominator_start_ptr + denominator_length - 1;\n    numerator_end_ptr = numerator_start_ptr + denominator_length - 1;\n    quotient = numerator_end_ptr / (*denominator_end_ptr + 1);\n\n    if (quotient != 0)\n    {\n        carry = 0;\n        temp_ptr = numerator_start_ptr;\n        denominator_ptr = denominator_start_ptr;\n\n        do\n        {\n            numerator_ptr = temp_ptr + 1;\n            carry = quotient * (*denominator_ptr & 0xffff) + carry;\n            quotient = quotient * (*denominator_ptr >> 0x10) + (carry >> 0x10);\n            carry = (carry & 0xffff) - (*temp_ptr & 0xffff) + (*numerator_ptr & 0xffff);\n            *temp_ptr = carry & 0xffff | ((int)quotient - (quotient & 0x8000)) * 0x10000;\n            quotient = quotient >> 0x10;\n            carry = carry >> 0x10;\n            temp_ptr = numerator_ptr;\n            denominator_ptr++;\n        } while (denominator_ptr <= denominator_end_ptr);\n\n        if (*numerator_end_ptr == 0)\n        {\n            if ((numerator_start_ptr < numerator_start_ptr + numerator_length - 2) && (*(numerator_start_ptr + numerator_length - 2) == 0))\n            {\n                temp_ptr = numerator_start_ptr + numerator_length - 3;\n\n                do\n                {\n                    denominator_length--;\n                    if (temp_ptr <= numerator_start_ptr)\n                    {\n                        break;\n                    }\n\n                    quotient = *temp_ptr;\n                    temp_ptr--;\n                } while (quotient == 0);\n            }\n\n            *(int *)(numerator + 0x10) = denominator_length;\n        }\n    }\n\n    comparison_result = __mcmp();\n\n    if (comparison_result >= 0)\n    {\n        quotient++;\n        carry = 0;\n        temp_ptr = numerator_start_ptr;\n        denominator_ptr = denominator_start_ptr;\n\n        do\n        {\n            numerator_ptr = temp_ptr + 1;\n            carry = carry - (*denominator_ptr & 0xffff) + (*numerator_ptr & 0xffff);\n            *temp_ptr = carry & 0xffff | ((int)quotient - (quotient & 0x8000)) * 0x10000;\n            quotient = quotient * (*denominator_ptr >> 0x10) + (carry >> 0x10) + ((*numerator_ptr >> 0x10) - (*denominator_ptr >> 0x10));\n            carry = carry >> 0x10;\n            temp_ptr = numerator_ptr;\n            denominator_ptr++;\n        } while (denominator_ptr <= denominator_end_ptr);\n\n        if (*numerator_end_ptr == 0)\n        {\n            if ((numerator_start_ptr < numerator_start_ptr + denominator_length - 1) && (*(numerator_start_ptr + denominator_length - 1) == 0))\n            {\n                numerator_end_ptr = numerator_start_ptr + denominator_length - 2;\n\n                do\n                {\n                    denominator_length--;\n                    if (numerator_end_ptr <= numerator_start_ptr)\n                    {\n                        break;\n                    }\n\n                    quotient = *numerator_end_ptr;\n                    numerator_end_ptr--;\n                } while (quotient == 0);\n            }\n\n            *(int *)(numerator + 0x10) = denominator_length;\n        }\n    }\n\n    return quotient;\n}",
            "called": [
                "__mcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078c0",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "divide_and_multiply_080078c0"
        },
        "FUN_080056e0": {
            "renaming": {
                "FUN_080056e0": "do_nothing_080056e0"
            },
            "code": "\nvoid do_nothing_080056e0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056e0",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080056e0"
        },
        "FUN_080079e8": {
            "renaming": {
                "FUN_080079e8": "FUNC_080079e8"
            },
            "code": "\nchar * FUNC_080079e8(int param_1,undefined4 param_2,uint param_3,uint param_4,uint param_5,uint param_6,\n              int *param_7,uint *param_8,char **param_9)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined4 uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  int iVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  int iVar13;\n  char *pcVar14;\n  char *pcVar15;\n  undefined4 *puVar16;\n  undefined4 uVar17;\n  char *pcVar18;\n  int iVar19;\n  bool bVar20;\n  undefined8 uVar21;\n  undefined8 uVar22;\n  undefined8 uVar23;\n  uint local_80;\n  uint local_7c;\n  uint local_74;\n  int local_70;\n  uint local_68;\n  uint local_64;\n  int local_60;\n  int local_5c;\n  uint local_58;\n  int local_54;\n  uint local_48;\n  uint uStack_44;\n  uint local_38;\n  uint local_34;\n  int local_30;\n  int local_2c [2];\n  \n  iVar9 = *(int *)(param_1 + 0x40);\n  if (iVar9 != 0) {\n    uVar12 = *(uint *)(param_1 + 0x44);\n    *(uint *)(iVar9 + 4) = uVar12;\n    *(int *)(iVar9 + 8) = 1 << (uVar12 & 0xff);\n    _Bfree(param_1,iVar9);\n    *(undefined4 *)(param_1 + 0x40) = 0;\n  }\n  bVar20 = (int)param_4 < 0;\n  uVar12 = param_4;\n  if (bVar20) {\n    uVar12 = param_4 & 0x7fffffff;\n  }\n  *param_8 = (uint)bVar20;\n  local_7c = param_4;\n  if (bVar20) {\n    local_7c = uVar12;\n  }\n  uVar4 = local_7c;\n  if ((DAT_08007bf8 & ~uVar12) == 0) {\n    *param_7 = 9999;\n    if ((param_3 == 0) && ((uVar12 & 0xfffff) == 0)) {\n      if (param_9 == (char **)0x0) {\n        return PTR_s_Infinity_08007c08;\n      }\n      pcVar15 = PTR_s_Infinity_08007c08 + 8;\n      pcVar18 = PTR_s_Infinity_08007c08;\n    }\n    else {\n      if (param_9 == (char **)0x0) {\n        return PTR_DAT_08007c0c;\n      }\n      pcVar15 = PTR_DAT_08007c0c + 3;\n      pcVar18 = PTR_DAT_08007c0c;\n    }\n    *param_9 = pcVar15;\n    return pcVar18;\n  }\n  uVar21 = __aeabi_dcmpeq(param_3,local_7c,0,0);\n  local_60 = (int)uVar21;\n  if (local_60 != 0) {\n    *param_7 = 1;\n    if (param_9 != (char **)0x0) {\n      pcVar18 = PTR_DAT_08007bfc + -1;\n      *param_9 = PTR_DAT_08007bfc;\n      return pcVar18;\n    }\n    return PTR_DAT_08007c10;\n  }\n  uVar3 = __d2b(param_1,(int)((ulonglong)uVar21 >> 0x20),param_3,local_7c,local_2c,&local_30);\n  iVar9 = local_30;\n  if (uVar12 >> 0x14 == 0) {\n    iVar13 = local_2c[0] + local_30;\n    iVar10 = iVar13 + 0x432;\n    if (iVar10 < 0x21) {\n      uVar12 = param_3 << (0x20U - iVar10 & 0xff);\n    }\n    else {\n      uVar12 = param_3 >> (iVar13 + 0x412U & 0xff) | uVar12 << (0x40U - iVar10 & 0xff);\n    }\n    uVar21 = __floatunsidf(uVar12);\n    iVar13 = iVar13 + -1;\n    local_60 = 1;\n    uVar5 = (int)((ulonglong)uVar21 >> 0x20) + 0xfe100000;\n    uVar12 = (uint)uVar21;\n  }\n  else {\n    iVar13 = (uVar12 >> 0x14) - 0x3ff;\n    uVar5 = local_7c & 0xfffff | 0x3ff00000;\n    uVar12 = param_3;\n  }\n  uVar21 = __subdf3(uVar12,uVar5,0,DAT_08007c00);\n  uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),DAT_08007be0,DAT_08007be4);\n  uVar21 = __aeabi_dadd((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),DAT_08007be8,DAT_08007bec);\n  uVar22 = __aeabi_i2d(iVar13);\n  uVar22 = __muldf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),DAT_08007bf0,DAT_08007bf4);\n  uVar21 = __aeabi_dadd((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar22,\n                        (int)((ulonglong)uVar22 >> 0x20));\n  uVar8 = (undefined4)((ulonglong)uVar21 >> 0x20);\n  local_74 = __aeabi_d2iz();\n  iVar10 = __aeabi_dcmplt((int)uVar21,uVar8,0,0);\n  if (iVar10 != 0) {\n    uVar22 = __aeabi_i2d(local_74);\n    iVar10 = __aeabi_dcmpeq((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,uVar8);\n    if (iVar10 == 0) {\n      local_74 = local_74 - 1;\n    }\n  }\n  if (local_74 < 0x17) {\n    local_54 = __aeabi_dcmpgt(*(undefined4 *)(PTR___mprec_tens_08007c04 + local_74 * 8),\n                              *(undefined4 *)((int)(PTR___mprec_tens_08007c04 + local_74 * 8) + 4),\n                              param_3,local_7c);\n    if (local_54 != 0) {\n      local_74 = local_74 - 1;\n      local_54 = 0;\n    }\n  }\n  else {\n    local_54 = 1;\n  }\n  iVar10 = (iVar9 - iVar13) + -1;\n  if (iVar10 < 0) {\n    local_70 = 1 - (iVar9 - iVar13);\n    iVar10 = 0;\n  }\n  else {\n    local_70 = 0;\n  }\n  if ((int)local_74 < 0) {\n    local_58 = 0;\n    local_70 = local_70 - local_74;\n    local_5c = -local_74;\n  }\n  else {\n    iVar10 = iVar10 + local_74;\n    local_58 = local_74;\n    local_5c = 0;\n  }\n  if (9 < param_5) {\n    local_38 = 0xffffffff;\n    bVar20 = true;\n    local_68 = 0xffffffff;\n    local_64 = 1;\n    param_5 = 0;\n    param_6 = 0;\n    goto LAB_08007c24;\n  }\n  bVar20 = (int)param_5 < 6;\n  if (!bVar20) {\n    param_5 = param_5 - 4;\n  }\n  switch(param_5) {\n  case 2:\n    local_64 = 0;\n    break;\n  case 3:\n    local_64 = 0;\n    goto LAB_08008300;\n  case 4:\n    local_64 = 1;\n    break;\n  case 5:\n    local_64 = 1;\nLAB_08008300:\n    local_38 = local_74 + param_6;\n    local_68 = local_38 + 1;\n    uVar12 = local_68;\n    if ((int)local_68 < 1) {\n      uVar12 = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    pcVar18 = (char *)_Balloc(param_1,0);\n    local_38 = 0xffffffff;\n    local_68 = 0xffffffff;\n    param_6 = 0;\n    *(char **)(param_1 + 0x40) = pcVar18;\n    local_64 = 1;\n    goto LAB_08007e36;\n  }\n  if ((int)param_6 < 1) {\n    local_38 = 1;\n    param_6 = 1;\n    local_68 = 1;\nLAB_08007c24:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    uVar5 = local_38;\n  }\n  else {\n    local_38 = param_6;\n    local_68 = param_6;\n    uVar12 = param_6;\nLAB_08008314:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    uVar5 = local_68;\n    if (0x17 < (int)uVar12) {\n      iVar13 = 4;\n      iVar9 = 1;\n      do {\n        iVar19 = iVar9;\n        iVar13 = iVar13 * 2;\n        iVar9 = iVar19 + 1;\n      } while (iVar13 + 0x14U <= uVar12);\n      *(int *)(param_1 + 0x44) = iVar19;\n    }\n  }\n  pcVar18 = (char *)_Balloc(param_1);\n  *(char **)(param_1 + 0x40) = pcVar18;\n  if ((uVar5 < 0xf) && (bVar20)) {\n    if ((int)local_74 < 1) {\n      if (local_74 == 0) {\n        iVar9 = 2;\n        local_80 = param_3;\n      }\n      else {\n        uVar21 = __muldf3(param_3,local_7c,\n                          *(undefined4 *)(PTR___mprec_tens_080086cc + (-local_74 & 0xf) * 8),\n                          *(undefined4 *)\n                           ((int)(PTR___mprec_tens_080086cc + (-local_74 & 0xf) * 8) + 4));\n        local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n        local_80 = (uint)uVar21;\n        iVar13 = (int)-local_74 >> 4;\n        if (iVar13 == 0) {\n          iVar9 = 2;\n        }\n        else {\n          bVar20 = false;\n          iVar9 = 2;\n          puVar16 = (undefined4 *)PTR___mprec_bigtens_080086d0;\n          do {\n            if (iVar13 << 0x1f < 0) {\n              uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),*puVar16,puVar16[1]);\n              bVar20 = true;\n              iVar9 = iVar9 + 1;\n            }\n            iVar13 = iVar13 >> 1;\n            puVar16 = puVar16 + 2;\n          } while (iVar13 != 0);\n          if (bVar20) {\n            local_80 = (uint)uVar21;\n            local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      uVar12 = (int)local_74 >> 4;\n      uVar21 = *(undefined8 *)(PTR___mprec_tens_08007ec4 + (local_74 & 0xf) * 8);\n      if ((int)(uVar12 << 0x1b) < 0) {\n        uVar22 = __divdf3(param_3,local_7c,*(undefined4 *)(PTR___mprec_bigtens_08007ec8 + 0x20),\n                          *(undefined4 *)(PTR___mprec_bigtens_08007ec8 + 0x24));\n        uStack_44 = (uint)((ulonglong)uVar22 >> 0x20);\n        local_48 = (uint)uVar22;\n        iVar9 = 3;\n        uVar12 = uVar12 & 0xf;\n        puVar16 = (undefined4 *)PTR___mprec_bigtens_08007ec8;\n      }\n      else {\n        iVar9 = 2;\n        uStack_44 = local_7c;\n        puVar16 = (undefined4 *)PTR___mprec_bigtens_08007ec8;\n        local_48 = param_3;\n      }\n      while( true ) {\n        uVar8 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        if (uVar12 == 0) break;\n        if ((int)(uVar12 << 0x1f) < 0) {\n          uVar21 = __muldf3((int)uVar21,uVar8,*puVar16,puVar16[1]);\n          iVar9 = iVar9 + 1;\n        }\n        uVar12 = (int)uVar12 >> 1;\n        puVar16 = puVar16 + 2;\n      }\n      uVar21 = __divdf3(local_48,uStack_44,(int)uVar21,uVar8);\n      local_80 = (uint)uVar21;\n      local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n    }\n    uVar21 = CONCAT44(local_7c,local_80);\n    if ((local_54 != 0) && (iVar13 = __aeabi_dcmplt(local_80,local_7c,0,DAT_08007ecc), iVar13 != 0))\n    {\n      if (local_68 == 0) {\n        uVar21 = __aeabi_i2d(iVar9);\n        uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),local_80,local_7c);\n        uVar21 = __aeabi_dadd((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080086d4);\n        uVar8 = (undefined4)uVar21;\n        iVar9 = (int)((ulonglong)uVar21 >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)local_38) {\n        uVar21 = __muldf3(local_80,local_7c,0,DAT_0800880c);\n        uVar22 = __aeabi_i2d(iVar9 + 1);\n        uVar22 = __muldf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,\n                          (int)((ulonglong)uVar21 >> 0x20));\n        uVar22 = __aeabi_dadd((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08008810);\n        uVar8 = (undefined4)uVar22;\n        local_48 = local_38;\n        local_34 = local_74 - 1;\n        iVar9 = (int)((ulonglong)uVar22 >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    uVar22 = __aeabi_i2d(iVar9);\n    uVar22 = __muldf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),local_80,local_7c);\n    uVar22 = __aeabi_dadd((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08007ed0);\n    uVar8 = (undefined4)uVar22;\n    iVar9 = (int)((ulonglong)uVar22 >> 0x20) + -0x3400000;\n    if (local_68 != 0) {\n      local_34 = local_74;\n      local_48 = local_68;\nLAB_08007cfa:\n      local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n      local_80 = (uint)uVar21;\n      cVar1 = __aeabi_d2iz(local_80,local_7c);\n      cVar1 = cVar1 + '0';\n      uVar11 = *(undefined4 *)(PTR___mprec_tens_08007ec4 + local_48 * 8 + -8);\n      uVar7 = *(undefined4 *)(PTR___mprec_tens_08007ec4 + local_48 * 8 + -4);\n      uVar21 = __aeabi_i2d();\n      uVar21 = __subdf3(local_80,local_7c,(int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n      uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n      pcVar15 = pcVar18 + 1;\n      if (local_64 == 0) {\n        uVar22 = __muldf3(uVar8,iVar9,uVar11,uVar7);\n        uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n        *pcVar18 = cVar1;\n        if (local_48 != 1) {\n          pcVar14 = pcVar15;\n          do {\n            uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080086d8);\n            cVar1 = __aeabi_d2iz();\n            uVar23 = __aeabi_i2d();\n            uVar21 = __subdf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar23,\n                              (int)((ulonglong)uVar23 >> 0x20));\n            pcVar15 = pcVar14 + 1;\n            *pcVar14 = cVar1 + '0';\n            pcVar14 = pcVar15;\n          } while (pcVar15 != pcVar18 + local_48);\n        }\n        uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        uVar23 = __aeabi_dadd((int)uVar22,uVar8,0,DAT_080086dc);\n        iVar9 = __aeabi_dcmplt((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),(int)uVar21,uVar11);\n        if (iVar9 == 0) {\n          uVar22 = __subdf3(0,DAT_08008814,(int)uVar22,uVar8);\n          iVar9 = __aeabi_dcmpgt((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,uVar11);\n          pcVar14 = pcVar15;\n          if (iVar9 == 0) goto LAB_08007e36;\n          do {\n            pcVar15 = pcVar14;\n            pcVar14 = pcVar15 + -1;\n          } while (pcVar15[-1] == '0');\n          goto LAB_08008784;\n        }\n        local_74 = local_34;\n        cVar1 = pcVar15[-1];\n      }\n      else {\n        uVar22 = __divdf3(0,DAT_08007ed4,uVar11,uVar7);\n        uVar22 = __subdf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),uVar8,iVar9);\n        uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n        *pcVar18 = cVar1;\n        iVar9 = __aeabi_dcmpgt((int)uVar22,uVar8,(int)uVar21,uVar17);\n        if (iVar9 != 0) {\nLAB_08008784:\n          local_74 = local_34;\n          goto LAB_08008294;\n        }\n        uVar23 = __subdf3(0,DAT_08007ecc,(int)uVar21,uVar17);\n        iVar9 = __aeabi_dcmpgt((int)uVar22,uVar8,(int)uVar23,(int)((ulonglong)uVar23 >> 0x20));\n        if (iVar9 == 0) {\n          if (local_48 != 1) {\n            pcVar14 = pcVar15;\n            do {\n              uVar22 = __muldf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08007ed8);\n              uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n              uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_08007ed8);\n              cVar1 = __aeabi_d2iz();\n              uVar23 = __aeabi_i2d();\n              uVar21 = __subdf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar23,\n                                (int)((ulonglong)uVar23 >> 0x20));\n              uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n              cVar1 = cVar1 + '0';\n              pcVar15 = pcVar14 + 1;\n              *pcVar14 = cVar1;\n              iVar9 = __aeabi_dcmplt((int)uVar21,uVar11,(int)uVar22,uVar8);\n              if (iVar9 != 0) {\n                local_74 = local_34;\n                goto LAB_08008294;\n              }\n              uVar23 = __subdf3(0,DAT_08007ecc,(int)uVar21,uVar11);\n              iVar9 = __aeabi_dcmplt((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),(int)uVar22,uVar8)\n              ;\n              if (iVar9 != 0) goto LAB_08008798;\n              pcVar14 = pcVar15;\n            } while (pcVar15 != pcVar18 + local_48);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        local_74 = local_34;\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    uVar21 = __subdf3(local_80,local_7c,0,DAT_080086c8);\n    uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n    uVar12 = __aeabi_dcmpgt((int)uVar21,uVar11,uVar8,iVar9);\n    if (uVar12 == 0) {\n      iVar9 = __aeabi_dcmplt((int)uVar21,uVar11,uVar8,iVar9 + -0x80000000);\n      uVar5 = uVar12;\n      pcVar15 = pcVar18;\n      if (iVar9 == 0) goto LAB_08007e36;\n      goto LAB_080084f0;\n    }\n    local_68 = 0;\n    uVar12 = 0;\nLAB_08008406:\n    *pcVar18 = '1';\n    local_74 = local_74 + 1;\n    pcVar15 = pcVar18 + 1;\n    uVar5 = local_68;\nLAB_08008416:\n    _Bfree(param_1,uVar5);\n    if (uVar12 == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    pcVar15 = pcVar18;\n    if ((-1 < local_2c[0]) && ((int)local_74 < 0xf)) {\n      uVar8 = *(undefined4 *)(PTR___mprec_tens_08007ec4 + local_74 * 8);\n      uVar11 = *(undefined4 *)((int)(PTR___mprec_tens_08007ec4 + local_74 * 8) + 4);\n      if ((-1 < (int)param_6) || (0 < (int)local_68)) {\n        __divdf3(param_3,uVar4,uVar8,uVar11);\n        bVar2 = __aeabi_d2iz();\n        uVar21 = __aeabi_i2d();\n        uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),uVar8,uVar11);\n        uVar21 = __subdf3(param_3,uVar4,(int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n        *pcVar18 = bVar2 + 0x30;\n        pcVar15 = pcVar18 + 1;\n        if (local_68 != 1) {\n          uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_08007ed8);\n          iVar9 = __aeabi_dcmpeq((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,0);\n          while (iVar9 == 0) {\n            uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n            __divdf3((int)uVar21,uVar17,uVar8,uVar11);\n            bVar2 = __aeabi_d2iz();\n            uVar22 = __aeabi_i2d();\n            uVar22 = __muldf3((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),uVar8,uVar11);\n            uVar21 = __subdf3((int)uVar21,uVar17,(int)uVar22,(int)((ulonglong)uVar22 >> 0x20));\n            pcVar14 = pcVar15 + 1;\n            *pcVar15 = bVar2 + 0x30;\n            pcVar15 = pcVar14;\n            if (local_68 == (int)pcVar14 - (int)pcVar18) goto LAB_08007f3a;\n            uVar21 = __muldf3((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080081f8);\n            iVar9 = __aeabi_dcmpeq((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        uVar21 = __aeabi_dadd((int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n        uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        iVar9 = __aeabi_dcmpgt((int)uVar21,uVar17,uVar8,uVar11);\n        if ((iVar9 == 0) &&\n           ((iVar9 = __aeabi_dcmpeq((int)uVar21,uVar17,uVar8,uVar11), iVar9 == 0 ||\n            ((bVar2 & 1) == 0)))) goto LAB_08008294;\n        cVar1 = pcVar15[-1];\nLAB_08007f7c:\n        while (pcVar14 = pcVar15 + -1, cVar1 == '9') {\n          if (pcVar18 == pcVar14) {\n            *pcVar18 = '0';\n            cVar1 = pcVar15[-1];\n            local_74 = local_74 + 1;\n            pcVar14 = pcVar18;\n            break;\n          }\n          cVar1 = pcVar15[-2];\n          pcVar15 = pcVar14;\n        }\n        *pcVar14 = cVar1 + '\\x01';\n        goto LAB_08008294;\n      }\n      if (local_68 == 0) {\n        uVar21 = __muldf3(uVar8,uVar11,0,DAT_080086c8);\n        iVar9 = __aeabi_dcmpge((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),param_3,uVar4);\n        uVar12 = local_68;\n        uVar5 = local_68;\n        if (iVar9 == 0) goto LAB_08008406;\n      }\n      else {\n        uVar12 = 0;\n        uVar5 = 0;\n      }\nLAB_080084f0:\n      local_74 = ~param_6;\n      pcVar18 = pcVar15;\n      goto LAB_08008416;\n    }\n    iVar9 = local_5c;\n    if (local_64 == 0) {\n      local_60 = local_70;\n      uVar12 = local_64;\n    }\n    else {\n      if ((int)param_5 < 2) {\n        if (local_60 == 0) {\n          local_60 = local_70;\n          local_70 = local_70 + (0x36 - local_30);\n          iVar10 = iVar10 + (0x36 - local_30);\n        }\n        else {\n          local_60 = local_70;\n          local_70 = local_70 + local_2c[0] + 0x433;\n          iVar10 = iVar10 + local_2c[0] + 0x433;\n        }\n      }\n      else {\n        iVar13 = local_68 - 1;\n        if (local_5c < iVar13) {\n          local_58 = local_58 + (iVar13 - local_5c);\n          iVar9 = 0;\n          local_5c = iVar13;\n        }\n        else {\n          iVar9 = local_5c - iVar13;\n        }\n        if ((int)local_68 < 0) {\n          local_60 = local_70 - local_68;\n        }\n        else {\n          iVar10 = iVar10 + local_68;\n          local_60 = local_70;\n          local_70 = local_70 + local_68;\n        }\n      }\n      uVar12 = __i2b(param_1,1);\n    }\n    if ((0 < local_60) && (0 < iVar10)) {\n      iVar13 = local_60;\n      if (iVar10 <= local_60) {\n        iVar13 = iVar10;\n      }\n      iVar10 = iVar10 - iVar13;\n      local_70 = local_70 - iVar13;\n      local_60 = local_60 - iVar13;\n    }\n    if (local_5c != 0) {\n      if (local_64 == 0) {\n        uVar3 = __pow5mult(param_1,uVar3,local_5c);\n      }\n      else {\n        uVar8 = uVar3;\n        if (iVar9 != 0) {\n          uVar12 = __pow5mult(param_1,uVar12,iVar9);\n          uVar8 = __multiply(param_1,uVar12,uVar3);\n          _Bfree(param_1,uVar3);\n          uVar3 = uVar8;\n          if (local_5c - iVar9 == 0) goto LAB_08008062;\n        }\n        uVar3 = __pow5mult(param_1,uVar8,local_5c - iVar9);\n      }\n    }\nLAB_08008062:\n    uVar5 = __i2b(param_1,1);\n    if (local_58 == 0) {\n      if (((int)param_5 < 2) && (param_3 == 0)) {\nLAB_0800835a:\n        if ((uVar4 & 0xfffff) == 0) {\n          uVar4 = uVar4 & 0x7ff00000;\n          if (uVar4 != 0) {\n            iVar10 = iVar10 + 1;\n            local_70 = local_70 + 1;\n            uVar4 = 1;\n          }\n        }\n        else {\n          uVar4 = 0;\n        }\n        bVar20 = local_58 != 0;\n        uVar6 = param_3;\n        local_58 = uVar4;\n        if (bVar20) goto LAB_080082d4;\n      }\n      iVar9 = 1;\n    }\n    else {\n      uVar21 = __pow5mult(param_1,uVar5);\n      uVar5 = (uint)uVar21;\n      if (((int)param_5 < 2) && (param_3 == 0)) goto LAB_0800835a;\n      local_58 = 0;\n      uVar6 = (uint)((ulonglong)uVar21 >> 0x20);\nLAB_080082d4:\n      iVar9 = __hi0bits(*(undefined4 *)(uVar5 + *(int *)(uVar5 + 0x10) * 4 + 0x10),uVar6);\n      iVar9 = 0x20 - iVar9;\n    }\n    uVar4 = iVar9 + iVar10 & 0x1f;\n    if (uVar4 == 0) {\n      iVar9 = 0x1c;\nLAB_08008096:\n      iVar10 = iVar10 + iVar9;\n      local_70 = local_70 + iVar9;\n      local_60 = local_60 + iVar9;\n    }\n    else {\n      if (4 < (int)(0x20 - uVar4)) {\n        iVar9 = 0x1c - uVar4;\n        goto LAB_08008096;\n      }\n      if (0x20 - uVar4 != 4) {\n        iVar9 = 0x3c - uVar4;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < local_70) {\n      uVar3 = __lshift(param_1,uVar3,local_70);\n    }\n    if (0 < iVar10) {\n      uVar5 = __lshift(param_1,uVar5,iVar10);\n    }\n    pcVar14 = pcVar18;\n    if ((local_54 != 0) && (iVar9 = __mcmp(uVar3,uVar5), iVar9 < 0)) {\n      local_74 = local_74 - 1;\n      uVar3 = __multadd(param_1,uVar3,10,0);\n      if (local_64 == 0) {\n        if ((0 < (int)local_38) || ((int)param_5 < 3)) {\n          local_68 = local_38;\n          goto LAB_0800820a;\n        }\n      }\n      else {\n        uVar12 = __multadd(param_1,uVar12,10,0);\n        if ((0 < (int)local_38) || ((int)param_5 < 3)) {\n          local_68 = local_38;\n          goto LAB_080080de;\n        }\n      }\n      local_68 = local_38;\nLAB_080084e8:\n      if (local_68 == 0) {\n        local_68 = __multadd(param_1,uVar5,5);\n        iVar9 = __mcmp(uVar3,local_68);\n        uVar5 = local_68;\n        if (0 < iVar9) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)local_68 < 1) && (2 < (int)param_5)) goto LAB_080084e8;\n    if (local_64 == 0) {\nLAB_0800820a:\n      while( true ) {\n        iVar19 = quorem(uVar3,uVar5);\n        iVar19 = iVar19 + 0x30;\n        pcVar15 = pcVar14 + 1;\n        *pcVar14 = (char)iVar19;\n        if ((int)local_68 <= (int)pcVar15 - (int)pcVar18) break;\n        uVar3 = __multadd(param_1,uVar3,10,0);\n        pcVar14 = pcVar15;\n      }\n      local_80 = 0;\n    }\n    else {\nLAB_080080de:\n      local_80 = uVar12;\n      if (0 < local_60) {\n        local_80 = __lshift(param_1,uVar12,local_60);\n      }\n      uVar12 = local_80;\n      if (local_58 != 0) {\n        iVar9 = _Balloc(param_1,*(undefined4 *)(local_80 + 4));\n        memcpy((void *)(iVar9 + 0xc),(void *)(local_80 + 0xc),(*(int *)(local_80 + 0x10) + 2) * 4);\n        uVar12 = __lshift(param_1,iVar9,1);\n      }\nLAB_08008108:\n      iVar9 = quorem(uVar3,uVar5);\n      iVar13 = __mcmp(uVar3,local_80);\n      iVar10 = __mdiff(param_1,uVar5,uVar12);\n      iVar19 = iVar9 + 0x30;\n      if (*(int *)(iVar10 + 0xc) == 0) {\n        uVar4 = __mcmp(uVar3);\n        _Bfree(param_1,iVar10);\n        if (((uVar4 != 0) || (param_5 != 0)) || (uVar4 = param_5, (param_3 & 1) != 0))\n        goto LAB_0800815a;\n        if (iVar19 != 0x39) {\n          if (0 < iVar13) {\nLAB_0800874c:\n            iVar19 = iVar9 + 0x31;\n          }\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        pcVar15 = pcVar14 + 1;\n        cVar1 = '9';\n        *pcVar14 = '9';\n        goto LAB_08008268;\n      }\n      _Bfree(param_1,iVar10);\n      uVar4 = 1;\nLAB_0800815a:\n      if ((iVar13 < 0) || (((iVar13 == 0 && (param_5 == 0)) && ((param_3 & 1) == 0)))) {\n        if (0 < (int)uVar4) {\n          uVar3 = __lshift(param_1,uVar3,1);\n          iVar13 = __mcmp(uVar3,uVar5);\n          if ((0 < iVar13) || ((iVar13 == 0 && (iVar9 << 0x1f < 0)))) {\n            if (iVar19 != 0x39) goto LAB_0800874c;\n            goto LAB_08008752;\n          }\n        }\nLAB_080085a4:\n        pcVar15 = pcVar14 + 1;\n        *pcVar14 = (char)iVar19;\n        goto LAB_08008274;\n      }\n      pcVar15 = pcVar14 + 1;\n      if (0 < (int)uVar4) {\n        if (iVar19 == 0x39) goto LAB_08008752;\n        *pcVar14 = (char)iVar9 + '1';\n        goto LAB_08008274;\n      }\n      *pcVar14 = (char)iVar19;\n      if (pcVar18 + (local_68 - 1) != pcVar14) {\n        uVar3 = __multadd(param_1,uVar3,10,0);\n        pcVar14 = pcVar15;\n        if (local_80 == uVar12) {\n          local_80 = __multadd(param_1,local_80,10,0);\n          uVar12 = local_80;\n        }\n        else {\n          local_80 = __multadd(param_1,local_80,10,0);\n          uVar12 = __multadd(param_1,uVar12,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    uVar3 = __lshift(param_1,uVar3,1);\n    iVar9 = __mcmp(uVar3,uVar5);\n    cVar1 = pcVar15[-1];\n    if ((0 < iVar9) || ((iVar9 == 0 && (iVar19 << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        pcVar14 = pcVar15 + -1;\n        if (cVar1 != '9') goto code_r0x08008270;\n        if (pcVar18 == pcVar14) {\n          *pcVar18 = '1';\n          local_74 = local_74 + 1;\n          goto LAB_08008274;\n        }\n        cVar1 = pcVar15[-2];\n        pcVar15 = pcVar14;\n      } while( true );\n    }\n    while (cVar1 == '0') {\n      cVar1 = pcVar15[-2];\n      pcVar15 = pcVar15 + -1;\n    }\nLAB_08008274:\n    _Bfree(param_1,uVar5);\n    if (uVar12 == 0) goto LAB_08008294;\n    if ((local_80 != 0) && (local_80 != uVar12)) {\n      _Bfree(param_1);\n    }\n  }\n  _Bfree(param_1,uVar12);\nLAB_08008294:\n  _Bfree(param_1,uVar3);\n  *pcVar15 = '\\0';\n  *param_7 = local_74 + 1;\n  if (param_9 == (char **)0x0) {\n    return pcVar18;\n  }\n  *param_9 = pcVar15;\n  return pcVar18;\ncode_r0x08008270:\n  *pcVar14 = cVar1 + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "called": [
                "__aeabi_dcmpeq",
                "__aeabi_dcmpgt",
                "__muldf3",
                "__floatunsidf",
                "_Bfree",
                "__lshift",
                "__pow5mult",
                "__multadd",
                "__aeabi_dcmplt",
                "__divdf3",
                "__i2b",
                "__multiply",
                "__aeabi_i2d",
                "__mcmp",
                "_Balloc",
                "__subdf3",
                "__d2b",
                "__mdiff",
                "__hi0bits",
                "memcpy",
                "__aeabi_d2iz",
                "quorem",
                "__aeabi_dcmpge",
                "__aeabi_dadd"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080079e8",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "FUNC_080079e8"
        },
        "FUN_080017c4": {
            "renaming": {
                "FUN_080017c4": "configure_GPIO_pins_080017c4",
                "GPIO_TypeDef": "GPIO_Port_TypeDef",
                "GPIO_InitTypeDef": "GPIO_ConfigTypeDef",
                "GPIOx": "GPIO_port",
                "GPIO_Init": "GPIO_config",
                "configregister": "config_register",
                "registeroffset": "register_offset",
                "iocurrent": "io_current",
                "ioposition": "io_position",
                "tmpreg": "temp_reg",
                "uVar1": "var1",
                "uVar2": "var2",
                "uVar3": "var3",
                "uVar4": "var4",
                "uVar5": "var5",
                "pGVar6": "pG_var6",
                "iVar7": "var7",
                "config": "config_value",
                "position": "pin_position",
                "DAT_08001a4c": "data_08001a4c",
                "DAT_08001a50": "data_08001a50",
                "DAT_08001a54": "data_08001a54",
                "DAT_08001a58": "data_08001a58",
                "DAT_08001a5c": "data_08001a5c",
                "DAT_08001a60": "data_08001a60",
                "DAT_08001a64": "data_08001a64",
                "DAT_08001a68": "data_08001a68",
                "DAT_08001a6c": "data_08001a6c",
                "DAT_08001a70": "data_08001a70",
                "DAT_08001a74": "data_08001a74",
                "DAT_08001a78": "data_08001a78",
                "DAT_08001a7c": "data_08001a7c"
            },
            "code": "void configure_GPIO_pins_080017c4(GPIO_TypeDef *GPIO_port, GPIO_InitTypeDef *GPIO_config) {\n  uint32_t pin_position = 0;\n  uint32_t pin_mask = 0;\n  uint32_t config_value = 0;\n\n  while (pin_position <= 15) {\n    pin_mask = 1 << pin_position;\n    if (GPIO_config->Pin & pin_mask) {\n      switch (GPIO_config->Mode) {\n        case GPIO_MODE_INPUT:\n          if (GPIO_config->Pull == GPIO_NOPULL) {\n            config_value = 4;\n          } else if (GPIO_config->Pull == GPIO_PULLUP) {\n            config_value = 8;\n            GPIO_port->BSRR = pin_mask;\n          } else {\n            config_value = 8;\n            GPIO_port->BRR = pin_mask;\n          }\n          break;\n        case GPIO_MODE_OUTPUT_PP:\n          if (GPIO_config->Speed == GPIO_SPEED_FREQ_HIGH) {\n            config_value = GPIO_CONFIG_OUTPUT_PP_SPEED_HIGH;\n          } else {\n            config_value = GPIO_CONFIG_OUTPUT_PP_SPEED_LOW;\n          }\n          break;\n        case GPIO_MODE_OUTPUT_OD:\n          if (GPIO_config->Speed == GPIO_SPEED_FREQ_HIGH) {\n            config_value = GPIO_CONFIG_OUTPUT_OD_SPEED_HIGH;\n          } else {\n            config_value = GPIO_CONFIG_OUTPUT_OD_SPEED_LOW;\n          }\n          break;\n        case GPIO_MODE_AF_PP:\n          if (GPIO_config->Speed == GPIO_SPEED_FREQ_HIGH) {\n            config_value = GPIO_CONFIG_AF_PP_SPEED_HIGH;\n          } else {\n            config_value = GPIO_CONFIG_AF_PP_SPEED_LOW;\n          }\n          break;\n        case GPIO_MODE_AF_OD:\n          if (GPIO_config->Speed == GPIO_SPEED_FREQ_HIGH) {\n            config_value = GPIO_CONFIG_AF_OD_SPEED_HIGH;\n          } else {\n            config_value = GPIO_CONFIG_AF_OD_SPEED_LOW;\n          }\n          break;\n        default:\n          break;\n      }\n      if (pin_position <= 7) {\n        GPIO_port->CRL &= ~(0xFU << (pin_position * 4));\n        GPIO_port->CRL |= config_value << (pin_position * 4);\n      } else {\n        GPIO_port->CRH &= ~(0xFU << ((pin_position - 8) * 4));\n        GPIO_port->CRH |= config_value << ((pin_position - 8) * 4);\n      }\n    }\n    pin_position++;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080017c4",
            "calling": [
                "HAL_TIM_MspPostInit",
                "MX_GPIO_Init"
            ],
            "imported": false,
            "current_name": "configure_GPIO_pins_080017c4"
        },
        "FUN_080056da": {
            "renaming": {
                "FUN_080056da": "wait_forever_080056da"
            },
            "code": "void wait_forever_080056da(void)\n{\n  while(true) {\n    // Do nothing\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056da",
            "calling": [],
            "imported": false,
            "current_name": "wait_forever_080056da"
        },
        "FUN_08001044": {
            "renaming": {
                "FUN_08001044": "calculate_shifted_value_08001044",
                "param_1": "input_value",
                "uVar1": "shift_amount",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "uint calculate_shifted_value_08001044(uint input_value) {\n  uint shifted_value = input_value << 1;\n  if ((input_value & 0x80000000) || (shifted_value < 0x7f000000)) {\n    return 0;\n  }\n  uint shift_amount = 0x9e - (shifted_value >> 0x18);\n  if (shift_amount >= 0) {\n    return (shifted_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001044",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08001044"
        },
        "FUN_08009444": {
            "renaming": {
                "FUN_08009444": "encode_bits_08009444",
                "param_1": "bit_count",
                "param_2": "bit_array",
                "param_3": "array_length",
                "iVar1": "temp_int_1",
                "iVar2": "bit_array_size",
                "iVar3": "word_count",
                "uVar4": "temp_uint_1",
                "iVar5": "bits_per_word",
                "iVar6": "temp_int_2",
                "puVar7": "word_array",
                "puVar8": "bit_array_data",
                "puVar9": "next_word_array",
                "puVar10": "next_bit_array_data",
                "puVar11": "end_word_array",
                "iVar12": "words_needed",
                "iVar13": "temp_int_3",
                "uVar14": "carry",
                "bit_array_data_pointer": "bit_array_data_pointer",
                "word_index": "word_index",
                "word_pointer": "word_pointer"
            },
            "code": "void encode_bits_08009444(int bit_count, undefined4 *bit_array, uint array_length)\n{\n  int bits_per_word = bit_array[4];\n  int words_needed = (int)array_length >> 5;\n  words_needed += bits_per_word + 1;\n  int word_count = bit_array[1];\n  int bit_array_size = bit_array[2];\n  if (bit_array_size < words_needed) {\n    do {\n      word_count++;\n      bit_array_size *= 2;\n    } while (words_needed != bit_array_size && words_needed + (-2 * bit_array_size) < 0 == SBORROW4(words_needed, bit_array_size));\n  }\n  bit_array_size = _Balloc(bit_count, word_count);\n  uint *word_array = (uint *)(bit_array_size + 0x14);\n  if (0 < words_needed) {\n    uint *end_word_array = word_array + words_needed;\n    uint *current_word_array = word_array;\n    do {\n      uint *next_word_array = current_word_array + 1;\n      *current_word_array = 0;\n      current_word_array = next_word_array;\n    } while (current_word_array != end_word_array);\n  }\n  words_needed = bit_array[4];\n  uint *bit_array_data = bit_array + 5;\n  array_length = array_length & 0x1f;\n  if (array_length == 0) {\n    word_array--;\n    uint *end_bit_array_data = bit_array_data + words_needed;\n    do {\n      uint *next_bit_array_data = bit_array_data + 1;\n      word_array++;\n      *word_array = *bit_array_data;\n      bit_array_data = next_bit_array_data;\n    } while (next_bit_array_data < end_bit_array_data);\n  }\n  else {\n    uint carry = 0;\n    uint *end_bit_array_data = bit_array_data + words_needed;\n    do {\n      uint *next_word_array = word_array;\n      *next_word_array = *bit_array_data << array_length | carry;\n      uint *next_bit_array_data = bit_array_data + 1;\n      carry = *bit_array_data >> (0x20 - array_length & 0xff);\n      word_array = next_word_array + 1;\n      bit_array_data = next_bit_array_data;\n    } while (bit_array_data < end_bit_array_data);\n    if (carry != 0) {\n      words_needed = words_needed + bits_per_word + 2;\n    }\n  }\n  int bit_array_data_pointer = *(int *)(bit_count + 0x4c);\n  int word_index = bit_array[1];\n  undefined4 *word_pointer = *(undefined4 **)(bit_array_data_pointer + word_index * 4);\n  *(int *)(bit_array_size + 0x10) = words_needed - 1;\n  *bit_array = *word_pointer;\n  *(undefined4 **)(bit_array_data_pointer + word_index * 4) = bit_array;\n  return;\n}",
            "called": [
                "_Balloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009444",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "encode_bits_08009444"
        },
        "FUN_08004436": {
            "renaming": {
                "FUN_08004436": "transmitData_08004436",
                "huart": "uartHandle",
                "pData": "data",
                "Size": "size",
                "Timeout": "timeout",
                "uVar1": "startTime",
                "uVar2": "elapsedTime",
                "HVar3": "status",
                "iVar4": "errorFlag",
                "local_58": "dataPtr16",
                "tmp": "dataPtr8"
            },
            "code": "HAL_StatusTypeDef transmitData_08004436(UART_HandleTypeDef *uartHandle, uint8_t *data, uint16_t size, uint32_t timeout)\n{\n  uint32_t startTime;\n  uint32_t elapsedTime;\n  HAL_StatusTypeDef status;\n  int errorFlag;\n  ushort *dataPtr16;\n  uint16_t *dataPtr8;\n  if (uartHandle->gState == HAL_UART_STATE_READY) {\n    if ((data == (uint8_t *)0x0) || (size == 0)) {\n      status = HAL_ERROR;\n    }\n    else if (uartHandle->Lock == HAL_LOCKED) {\n      status = HAL_BUSY;\n    }\n    else {\n      uartHandle->Lock = HAL_LOCKED;\n      uartHandle->ErrorCode = 0;\n      uartHandle->gState = HAL_UART_STATE_BUSY_TX;\n      startTime = HAL_GetTick();\n      uartHandle->TxXferSize = size;\n      uartHandle->TxXferCount = size;\n      dataPtr16 = (ushort *)data;\n      while (uartHandle->TxXferCount != 0) {\n        uartHandle->TxXferCount -= 1;\n        if ((uartHandle->Init).WordLength == 0x1000) {\n          do {\n            if ((uartHandle->Instance->SR & 0x80) == 0x80) {\n              errorFlag = 0;\n              goto LAB_0800454c;\n            }\n          } while ((timeout == 0xffffffff) || ((timeout != 0 && (elapsedTime = HAL_GetTick() - startTime, elapsedTime <= timeout))));\n          uartHandle->Instance->CR1 &= 0xfffffe5f;\n          uartHandle->Instance->CR3 &= 0xfffffffe;\n          uartHandle->gState = HAL_UART_STATE_READY;\n          uartHandle->RxState = HAL_UART_STATE_READY;\n          uartHandle->Lock = HAL_UNLOCKED;\n          errorFlag = 3;\n          goto LAB_0800454c;\n        }\n        do {\n          if ((uartHandle->Instance->SR & 0x80) == 0x80) {\n            errorFlag = 0;\n            goto LAB_08004614;\n          }\n        } while ((timeout == 0xffffffff) || ((timeout != 0 && (elapsedTime = HAL_GetTick() - startTime, elapsedTime <= timeout))));\n        uartHandle->Instance->CR1 &= 0xfffffe5f;\n        uartHandle->Instance->CR3 &= 0xfffffffe;\n        uartHandle->gState = HAL_UART_STATE_READY;\n        uartHandle->RxState = HAL_UART_STATE_READY;\n        uartHandle->Lock = HAL_UNLOCKED;\n        errorFlag = 3;\n        goto LAB_08004614;\n        LAB_0800454c:\n        if (errorFlag != 0) {\n          status = HAL_TIMEOUT;\n          goto END_transmitData_08004436;\n        }\n        uartHandle->Instance->DR = *dataPtr16 & 0x1ff;\n        if ((uartHandle->Init).Parity == 0) {\n          dataPtr16++;\n        }\n        else {\n          dataPtr16 = (ushort *)((int)dataPtr16 + 1);\n        }\n      }\n      do {\n        if ((uartHandle->Instance->SR & 0x40) == 0x40) {\n          errorFlag = 0;\n          goto LAB_080046c6;\n        }\n      } while ((timeout == 0xffffffff) || ((timeout != 0 && (elapsedTime = HAL_GetTick() - startTime, elapsedTime <= timeout))));\n      uartHandle->Instance->CR1 &= 0xfffffe5f;\n      uartHandle->Instance->CR3 &= 0xfffffffe;\n      uartHandle->gState = HAL_UART_STATE_READY;\n      uartHandle->RxState = HAL_UART_STATE_READY;\n      uartHandle->Lock = HAL_UNLOCKED;\n      errorFlag = 3;\n      LAB_08004614:\n      if (errorFlag != 0) {\n        status = HAL_TIMEOUT;\n        goto END_transmitData_08004436;\n      }\n      status = HAL_OK;\n      LAB_080046c6:\n      if (errorFlag == 0) {\n        uartHandle->gState = HAL_UART_STATE_READY;\n        uartHandle->Lock = HAL_UNLOCKED;\n      }\n      else {\n        status = HAL_TIMEOUT;\n      }\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  END_transmitData_08004436:\n  return status;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004436",
            "calling": [
                "uart_print"
            ],
            "imported": false,
            "current_name": "transmitData_08004436"
        },
        "FUN_08009e50": {
            "renaming": {
                "FUN_08009e50": "write_byte_to_memory_08009e50",
                "param_1": "byte_pointer",
                "param_2": "byte",
                "param_3": "byte_limit",
                "undefined": "uint8_t",
                "*param_2": "*byte_pointer",
                "(undefined *)0x0": "NULL",
                "0x100": "256",
                "(undefined *)0x1": "byte_pointer + 1",
                "(undefined *)0xffffffff": "NULL",
                "*param_1": "*byte_pointer"
            },
            "code": "undefined* write_byte_to_memory_08009e50(uint8_t* byte_pointer, uint8_t byte, uint byte_limit){\n                    if (byte_pointer != NULL){\n                        if (byte_limit < 256){\n                            *byte_pointer = byte;\n                            byte_pointer = byte_pointer + 1;\n                        }\n                        else {\n                            byte_pointer = NULL;\n                            *byte_pointer = 0x8a;\n                        }\n                    }\n                    return byte_pointer;\n                }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e50",
            "calling": [],
            "imported": false,
            "current_name": "write_byte_to_memory_08009e50"
        },
        "FUN_08004ee8": {
            "renaming": {
                "FUN_08004ee8": "read_i2c_data_08004ee8",
                "addr": "device_address",
                "reg": "register_address",
                "data": "data_buffer",
                "len": "data_length"
            },
            "code": "void read_i2c_data_08004ee8(uint8_t device_address, uint8_t register_address, uint8_t *data_buffer, uint16_t data_length) {\n  HAL_I2C_Mem_Read((I2C_HandleTypeDef *)PTR_hi2c1_08004f28, (uint16_t)device_address, (uint16_t)register_address, 1, data_buffer, data_length, *(uint32_t *)PTR_I2C_TIMEOUT_08004f24);\n  return;\n}",
            "called": [
                "HAL_I2C_Mem_Read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ee8",
            "calling": [],
            "imported": false,
            "current_name": "read_i2c_data_08004ee8"
        },
        "FUN_080094f8": {
            "renaming": {
                "FUN_080094f8": "compare_arrays_080094f8",
                "param_1": "array1",
                "param_2": "array2",
                "iVar1": "difference",
                "puVar2": "ptr1",
                "iVar3": "index",
                "puVar4": "ptr2"
            },
            "code": "int compare_arrays_080094f8(int* array1, int* array2, int length) {\n  int index = *(int *)(array2 + 0x10);\n  int difference = *(int *)(array1 + 0x10) - index;\n  if (difference == 0) {\n    uint *ptr1 = (uint *)(array2 + 0x14 + index * 4);\n    uint *ptr2 = (uint *)(array1 + 0x14) + index;\n    do {\n      ptr2 = ptr2 + -1;\n      ptr1 = ptr1 + -1;\n      if (*ptr2 != *ptr1) {\n        if (*ptr1 <= *ptr2) {\n          return 1;\n        }\n        return -1;\n      }\n    } while ((uint *)(array1 + 0x14) < ptr2);\n  }\n  return difference;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080094f8",
            "calling": [
                "_dtoa_r",
                "quorem"
            ],
            "imported": false,
            "current_name": "compare_arrays_080094f8"
        },
        "FUN_08000998": {
            "renaming": {
                "FUN_08000998": "check_if_not_null_08000998",
                "in_ZR": "input_char"
            },
            "code": "bool check_if_not_null_08000998(char input_char){\\n  __aeabi_cdcmpeq();\\n  return input_char != \"\\0\";\\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "_dtoa_r",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "check_if_not_null_08000998"
        },
        "FUN_08000fc8": {
            "renaming": {
                "FUN_08000fc8": "compare_values_08000fc8",
                "param_1": "value1",
                "param_2": "value2",
                "__aeabi_cfcmpeq": "N/A"
            },
            "code": "void compare_values_08000fc8(int value1, int value2)\n{\n  if(value1 == value2)\n  {\n    // do something\n  }\n  return;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fc8",
            "calling": [
                "__aeabi_fcmpge",
                "__aeabi_fcmpgt"
            ],
            "imported": false,
            "current_name": "compare_values_08000fc8"
        },
        "FUN_08003908": {
            "renaming": {
                "FUN_08003908": "set_timer_output_compare_08003908",
                "*htim": "*timer_handle",
                "*sConfig": "*output_compare_config",
                "HVar1": "status",
                "HAL_StatusTypeDef": "HAL_Status",
                "Channel": "channel"
            },
            "code": "HAL_StatusTypeDef set_timer_output_compare_08003908(TIM_HandleTypeDef *timer_handle, TIM_OC_InitTypeDef *output_compare_config, uint32_t channel)\n{\n  HAL_StatusTypeDef status;\n  if (timer_handle->Lock == HAL_LOCKED) {\n    status = HAL_BUSY;\n  }\n  else {\n    timer_handle->Lock = HAL_LOCKED;\n    timer_handle->State = HAL_TIM_STATE_BUSY;\n    switch(channel) {\n    case 0:\n      TIM_OC1_SetConfig(timer_handle->Instance, output_compare_config);\n      timer_handle->Instance->CCMR1 |= 0x8;\n      timer_handle->Instance->CCMR1 &= 0xfffffffb;\n      timer_handle->Instance->CCMR1 = output_compare_config->OCFastMode | timer_handle->Instance->CCMR1;\n      break;\n    case 4:\n      TIM_OC2_SetConfig(timer_handle->Instance, output_compare_config);\n      timer_handle->Instance->CCMR1 |= 0x800;\n      timer_handle->Instance->CCMR1 &= 0xfffffbff;\n      timer_handle->Instance->CCMR1 = (output_compare_config->OCFastMode << 8) | timer_handle->Instance->CCMR1;\n      break;\n    case 8:\n      TIM_OC3_SetConfig(timer_handle->Instance, output_compare_config);\n      timer_handle->Instance->CCMR2 |= 0x8;\n      timer_handle->Instance->CCMR2 &= 0xfffffffb;\n      timer_handle->Instance->CCMR2 = output_compare_config->OCFastMode | timer_handle->Instance->CCMR2;\n      break;\n    case 0xc:\n      TIM_OC4_SetConfig(timer_handle->Instance, output_compare_config);\n      timer_handle->Instance->CCMR2 |= 0x800;\n      timer_handle->Instance->CCMR2 &= 0xfffffbff;\n      timer_handle->Instance->CCMR2 = (output_compare_config->OCFastMode << 8) | timer_handle->Instance->CCMR2;\n    }\n    timer_handle->State = HAL_TIM_STATE_READY;\n    timer_handle->Lock = HAL_UNLOCKED;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [
                "TIM_OC3_SetConfig",
                "TIM_OC2_SetConfig",
                "TIM_OC4_SetConfig",
                "TIM_OC1_SetConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003908",
            "calling": [
                "MX_TIM1_Init"
            ],
            "imported": false,
            "current_name": "set_timer_output_compare_08003908"
        },
        "FUN_08004f60": {
            "renaming": {
                "FUN_08004f60": "clear_string_buffer_08004f60",
                "PTR_strbuf_08004f74": "string_buffer",
                "DAT_08004f74": "BUFFER_SIZE"
            },
            "code": "void clear_string_buffer_08004f60(void)\n{\n  memset(PTR_strbuf_08004f74, 0, DAT_08004f74);\n  return;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f60",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "clear_string_buffer_08004f60"
        },
        "FUN_080056f8": {
            "renaming": {
                "FUN_080056f8": "do_nothing_080056f8"
            },
            "code": "\nvoid do_nothing_080056f8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056f8",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080056f8"
        },
        "FUN_08001170": {
            "renaming": {
                "FUN_08001170": "is_valid_input_08001170",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "int is_valid_input_08001170(uint32_t input1, int32_t input2, uint32_t input3, int32_t input4) {\n    int is_input2_valid = ((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0);\n    int is_input4_valid = ((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0));\n    if (is_input2_valid && is_input4_valid) {\n        return 1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001170",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "is_valid_input_08001170"
        },
        "FUN_080056ec": {
            "renaming": {
                "FUN_080056ec": "do_nothing_080056ec"
            },
            "code": "\nvoid do_nothing_080056ec(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056ec",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080056ec"
        },
        "FUN_08002ad8": {
            "renaming": {
                "FUN_08002ad8": "check_I2C_status_08002ad8",
                "*hi2c": "*i2c_handle",
                "Flag": "flag",
                "Timeout": "timeout",
                "Tickstart": "tick_start",
                "uVar1": "status_tick",
                "cVar2": "status_bit_set",
                "uVar3": "status_bit",
                "bVar4": "status_bit_valid"
            },
            "code": "HAL_StatusTypeDef check_I2C_status_08002ad8(I2C_HandleTypeDef *i2c_handle, uint32_t flag, uint32_t timeout, uint32_t tick_start)\n{\n    uint32_t status_bit;\n    bool status_bit_set;\n    do {\n        if ((flag >> 0x10 & 0xff) == 1) {\n            status_bit = flag & ~i2c_handle->Instance->SR1 & 0xffff;\n            status_bit_set = status_bit != 0;\n            if (status_bit_set) {\n                status_bit = 1;\n            }\n        }\n        else {\n            status_bit = flag & ~i2c_handle->Instance->SR2 & 0xffff;\n            status_bit_set = status_bit != 0;\n            if (status_bit_set) {\n                status_bit = 1;\n            }\n        }\n        if (!status_bit_set) {\n            return HAL_OK;\n        }\n        if ((i2c_handle->Instance->SR1 & 0x400) == 0x400) {\n            i2c_handle->Instance->CR1 |= 0x200;\n            i2c_handle->Instance->SR1 = 0xfffffbff;\n            i2c_handle->ErrorCode = 4;\n            i2c_handle->PreviousState = 0;\n            i2c_handle->State = HAL_I2C_STATE_READY;\n            i2c_handle->Lock = HAL_UNLOCKED;\n            return HAL_ERROR;\n        }\n    } while ((timeout == 0xffffffff) || ((timeout != 0 && (HAL_GetTick() - tick_start <= timeout))));\n    i2c_handle->PreviousState = 0;\n    i2c_handle->State = HAL_I2C_STATE_READY;\n    i2c_handle->Lock = HAL_UNLOCKED;\n    return HAL_TIMEOUT;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "I2C_RequestMemoryRead",
                "I2C_RequestMemoryWrite"
            ],
            "imported": false,
            "current_name": "check_I2C_status_08002ad8"
        },
        "FUN_08000fd0": {
            "renaming": {
                "FUN_08000fd0": "compare_and_concat_08000fd0",
                "param_1": "float32_t_val_1",
                "param_2": "float32_t_val_2"
            },
            "code": "float32_t compare_and_concat_08000fd0(float32_t param_1, float32_t param_2)\n{\n  __cmpsf2();\n  return CONCAT44(param_2,param_1);\n}",
            "called": [
                "__cmpsf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fd0",
            "calling": [
                "__aeabi_cfrcmple",
                "__aeabi_fcmplt",
                "__aeabi_fcmple",
                "__aeabi_fcmpeq"
            ],
            "imported": false,
            "current_name": "compare_and_concat_08000fd0"
        },
        "FUN_08003d60": {
            "renaming": {
                "FUN_08003d60": "configure_timer_08003d60",
                "TIMx": "timer",
                "OC_Config": "oc_config",
                "tmpccmrx": "ccmr1",
                "tmpcr2": "cr2",
                "tmpccer": "ccer",
                "uVar1": "oc_mode",
                "uVar2": "oc_polarity"
            },
            "code": "void configure_timer_08003d60(TIM_TypeDef *timer, TIM_OC_InitTypeDef *oc_config) {\n  uint32_t ccmr1;\n  uint32_t ccer;\n  uint32_t cr2;\n  \n  ccer = timer->CCER & 0xfffffffe;\n  cr2 = timer->CR2;\n  uint32_t oc_mode = oc_config->OCMode;\n  uint32_t oc_polarity = oc_config->OCPolarity | timer->CCER & 0xfffffffd;\n  if (timer == PTR_08003e34) {\n    oc_polarity = (oc_config->OCNPolarity | oc_polarity & 0xfffffff7) & 0xfffffffb;\n    cr2 = oc_config->OCNIdleState | oc_config->OCIdleState | cr2 & 0xfffffcff;\n  }\n  timer->CR2 = cr2;\n  ccmr1 = oc_mode | timer->CCMR1 & 0xffffff8c;\n  timer->CCR1 = oc_config->Pulse;\n  timer->CCER = oc_polarity;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d60",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_timer_08003d60"
        },
        "FUN_08009e68": {
            "renaming": {
                "FUN_08009e68": "get_evp_pkey_ctx_address_08009e68",
                "ctx": "evp_pkey_ctx"
            },
            "code": "int get_evp_pkey_ctx_address_08009e68(EVP_PKEY_CTX *evp_pkey_ctx){\n  return (int)evp_pkey_ctx;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e68",
            "calling": [
                "__libc_init_array",
                "__do_global_dtors_aux",
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "get_evp_pkey_ctx_address_08009e68"
        },
        "FUN_08001618": {
            "renaming": {
                "FUN_08001618": "setInterruptPriority_08001618",
                "IRQn": "interrupt",
                "priority": "priority",
                "WWDG_IRQn": "watchdogInterrupt",
                "DAT_08001664": "interruptPriorityOffsetLow",
                "DAT_08001668": "interruptPriorityOffsetHigh"
            },
            "code": "void setInterruptPriority_08001618(IRQn_Type interrupt, uint32_t priority) {\n  if (interrupt < WWDG_IRQn) {\n    *(char *)(((byte)interrupt & 0xf) + DAT_08001664 + 0x14) = (char)((priority & 0xff) << 4);\n  }\n  else {\n    *(char *)(interrupt + DAT_08001668) = (char)((priority & 0xff) << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001618",
            "calling": [
                "HAL_NVIC_SetPriority",
                "SysTick_Config"
            ],
            "imported": false,
            "current_name": "setInterruptPriority_08001618"
        },
        "FUN_080091a4": {
            "renaming": {
                "FUN_080091a4": "count_bits_set_to_one_080091a4",
                "param_1": "input",
                "iVar1": "bit_count"
            },
            "code": "int count_bits_set_to_one_080091a4(uint input){\n    int bit_count = 0;\n    if ((input & 0xffff0000) == 0) {\n        input = input << 0x10;\n        bit_count = 0x10;\n    }\n    if ((input & 0xff000000) == 0) {\n        input = input << 8;\n        bit_count += 8;\n    }\n    if ((input & 0xf0000000) == 0) {\n        input = input << 4;\n        bit_count += 4;\n    }\n    if ((input & 0xc0000000) == 0) {\n        input = input << 2;\n        bit_count += 2;\n    }\n    if (-1 < (int)input) {\n        if ((int)(input << 1) < 0) {\n            return bit_count + 1;\n        }\n        bit_count = 0x20;\n    }\n    return bit_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091a4",
            "calling": [
                "_dtoa_r",
                "__d2b"
            ],
            "imported": false,
            "current_name": "count_bits_set_to_one_080091a4"
        },
        "FUN_08004f78": {
            "renaming": {
                "FUN_08004f78": "control_motor_speed_08004f78",
                "htim": "timer",
                "len": "length",
                "uVar1": "setpoint_error",
                "iVar2": "comparison_result",
                "uVar3": "temp_float",
                "uVar4": "Kd",
                "uVar5": "pitch",
                "pid_pwm": "pid_pwm",
                "out_pwm": "output_pwm",
                "mpu6050_update": "update_mpu6050",
                "mpu6050_calc_pitch": "calculate_mpu6050_pitch",
                "flush_strbuf": "flush_string_buffer",
                "PTR_mpu6050_080051e0": "&mpu6050",
                "PTR_pitch_080051e4": "&pitch",
                "PTR_strbuf_080051ec": "string_buffer",
                "PTR_s_Pitch___f_080051e8": "string_format_pitch",
                "strlen": "strlen",
                "uart_print": "print_uart",
                "PTR_setpoint_080051f0": "&setpoint",
                "PTR_error_080051f4": "&setpoint_error",
                "PTR_Kp_080051f8": "&Kp",
                "PTR_Ki_08005200": "&Ki",
                "PTR_I_08005204": "&I",
                "PTR_maxPwm_08005208": "&max_pwm",
                "PTR_minPwm_0800520c": "&min_pwm",
                "PTR_Kd_08005210": "&Kd",
                "PTR_lastError_08005214": "&last_error",
                "PTR_D_08005218": "&derivative",
                "HAL_GPIO_WritePin": "write_gpio_pin"
            },
            "code": "void control_motor_speed_08004f78(TIM_HandleTypeDef *timer)\n{\n  size_t length;\n  float pitch, setpoint_error, proportional, integral, derivative, pid_pwm;\n  uint8_t output_pwm;\n  mpu6050_update(PTR_mpu6050_080051e0);\n  mpu6050_calc_pitch(PTR_mpu6050_080051e0, PTR_pitch_080051e4);\n  flush_PTR_strbuf_080051ec();\n  length = strlen(PTR_strbuf_080051ec);\n  uart_print(PTR_strbuf_080051ec, length);\n  setpoint_error = setpoint - pitch;\n  proportional = Kp * setpoint_error;\n  integral = Ki * setpoint_error + I;\n  if (integral > max_pwm) {\n    integral = max_pwm;\n  }\n  else if (integral < min_pwm) {\n    integral = min_pwm;\n  }\n  I = integral;\n  derivative = Kd * (setpoint_error - last_error);\n  pid_pwm = proportional + integral + derivative;\n  if (pid_pwm > max_pwm) {\n    output_pwm = max_pwm;\n  }\n  else if (pid_pwm < min_pwm) {\n    output_pwm = min_pwm;\n  }\n  else {\n    output_pwm = (uint8_t)pid_pwm;\n  }\n  last_error = setpoint_error;\n  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, setpoint_error > 0);\n  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, setpoint_error <= 0);\n  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, setpoint_error > 0);\n  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, setpoint_error <= 0);\n  *(uint *)(timer->Instance + 0x34) = (uint)output_pwm;\n  *(uint *)(timer->Instance + 0x40) = (uint)output_pwm;\n}\n",
            "called": [
                "sprintf",
                "__aeabi_fcmplt",
                "uart_print",
                "strlen",
                "HAL_GPIO_WritePin",
                "mpu6050_update",
                "__fixunssfsi",
                "__aeabi_fcmpgt",
                "__floatsisf",
                "__aeabi_fmul",
                "__floatunsisf",
                "__addsf3",
                "__aeabi_f2d",
                "__aeabi_fsub",
                "flush_strbuf",
                "mpu6050_calc_pitch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f78",
            "calling": [
                "HAL_TIM_IRQHandler",
                "HAL_SYSTICK_IRQHandler"
            ],
            "imported": false,
            "current_name": "control_motor_speed_08004f78"
        },
        "FUN_080015a0": {
            "renaming": {
                "FUN_080015a0": "get_uwTick_value_080015a0",
                "PTR_uwTick_080015b0": "ptr_uwTick_address"
            },
            "code": "uint32_t get_uwTick_value_080015a0(void)\n{\n  uint32_t* PTR_uwTick_080015b0 = (uint32_t*) PTR_uwTick_080015b0;\n  uint32_t uwTick_value = *PTR_uwTick_080015b0;\n  return uwTick_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015a0",
            "calling": [
                "I2C_WaitOnBTFFlagUntilTimeout",
                "I2C_WaitOnRXNEFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "I2C_RequestMemoryRead",
                "HAL_I2C_Mem_Write",
                "HAL_I2C_Mem_Read",
                "I2C_RequestMemoryWrite",
                "HAL_RCC_OscConfig",
                "HAL_RCC_ClockConfig",
                "HAL_UART_Transmit",
                "_get_ms_tick",
                "I2C_WaitOnMasterAddressFlagUntilTimeout"
            ],
            "imported": false,
            "current_name": "get_uwTick_value_080015a0"
        },
        "FUN_08002d98": {
            "renaming": {
                "FUN_08002d98": "FUNC_08002d98"
            },
            "code": "\nHAL_StatusTypeDef FUNC_08002d98(RCC_OscInitTypeDef *RCC_OscInitStruct)\n\n{\n  uint32_t uVar1;\n  uint32_t uVar2;\n  HAL_StatusTypeDef HVar3;\n  bool bVar4;\n  uint32_t tmpreg;\n  uint32_t tickstart;\n  FlagStatus pwrclkchanged;\n  \n  if ((RCC_OscInitStruct->OscillatorType & 1) != 0) {\n    if (((DAT_08002ffc[1] & 0xc) == 4) ||\n       (((DAT_08002ffc[1] & 0xc) == 8 && ((DAT_08002ffc[1] & 0x10000) == 0x10000)))) {\n      if (((*DAT_08002ffc & 0x20000) != 0) && (RCC_OscInitStruct->HSEState == 0)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      if (RCC_OscInitStruct->HSEState == 0x10000) {\n        *DAT_08002ffc = *DAT_08002ffc | 0x10000;\n      }\n      else if (RCC_OscInitStruct->HSEState == 0) {\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffeffff;\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffbffff;\n      }\n      else if (RCC_OscInitStruct->HSEState == 0x50000) {\n        *DAT_08002ffc = *DAT_08002ffc | 0x40000;\n        *DAT_08002ffc = *DAT_08002ffc | 0x10000;\n      }\n      else {\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffeffff;\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffbffff;\n      }\n      if (RCC_OscInitStruct->HSEState == 0) {\n        uVar1 = HAL_GetTick();\n        while ((*DAT_08002ffc & 0x20000) != 0) {\n          uVar2 = HAL_GetTick();\n          if (100 < uVar2 - uVar1) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else {\n        uVar1 = HAL_GetTick();\n        while ((*DAT_08002ffc & 0x20000) == 0) {\n          uVar2 = HAL_GetTick();\n          if (100 < uVar2 - uVar1) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 2) != 0) {\n    if (((DAT_08002ffc[1] & 0xc) == 0) ||\n       (((DAT_08002ffc[1] & 0xc) == 8 && ((DAT_08002ffc[1] & 0x10000) == 0)))) {\n      if (((*DAT_08002ffc & 2) != 0) && (RCC_OscInitStruct->HSIState != 1)) {\n        return HAL_ERROR;\n      }\n      *DAT_08002ffc = RCC_OscInitStruct->HSICalibrationValue << 3 | *DAT_08002ffc & 0xffffff07;\n    }\n    else if (RCC_OscInitStruct->HSIState == 0) {\n      *DAT_08003000 = 0;\n      uVar1 = HAL_GetTick();\n      while ((*DAT_08002ffc & 2) != 0) {\n        uVar2 = HAL_GetTick();\n        if (2 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_08003000 = 1;\n      uVar1 = HAL_GetTick();\n      while ((*DAT_08002ffc & 2) == 0) {\n        uVar2 = HAL_GetTick();\n        if (2 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n      *DAT_08002ffc = RCC_OscInitStruct->HSICalibrationValue << 3 | *DAT_08002ffc & 0xffffff07;\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 8) != 0) {\n    if (RCC_OscInitStruct->LSIState == 0) {\n      *DAT_08003004 = 0;\n      uVar1 = HAL_GetTick();\n      while ((DAT_08003254[9] & 2) != 0) {\n        uVar2 = HAL_GetTick();\n        if (2 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_08003004 = 1;\n      uVar1 = HAL_GetTick();\n      while ((DAT_08002ffc[9] & 2) == 0) {\n        uVar2 = HAL_GetTick();\n        if (2 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n      RCC_Delay(1);\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 4) != 0) {\n    bVar4 = (DAT_08003254[7] & 0x10000000) == 0;\n    if (bVar4) {\n      DAT_08003254[7] = DAT_08003254[7] | 0x10000000;\n    }\n    if ((*DAT_08003258 & 0x100) == 0) {\n      *DAT_08003258 = *DAT_08003258 | 0x100;\n      uVar1 = HAL_GetTick();\n      while ((*DAT_08003258 & 0x100) == 0) {\n        uVar2 = HAL_GetTick();\n        if (100 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    if (RCC_OscInitStruct->LSEState == 1) {\n      DAT_08003254[8] = DAT_08003254[8] | 1;\n    }\n    else if (RCC_OscInitStruct->LSEState == 0) {\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffe;\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffb;\n    }\n    else if (RCC_OscInitStruct->LSEState == 5) {\n      DAT_08003254[8] = DAT_08003254[8] | 4;\n      DAT_08003254[8] = DAT_08003254[8] | 1;\n    }\n    else {\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffe;\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffb;\n    }\n    if (RCC_OscInitStruct->LSEState == 0) {\n      uVar1 = HAL_GetTick();\n      while ((DAT_08003254[8] & 2) != 0) {\n        uVar2 = HAL_GetTick();\n        if (5000 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      uVar1 = HAL_GetTick();\n      while ((DAT_08003254[8] & 2) == 0) {\n        uVar2 = HAL_GetTick();\n        if (5000 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    if (bVar4) {\n      DAT_08003254[7] = DAT_08003254[7] & 0xefffffff;\n    }\n  }\n  if ((RCC_OscInitStruct->PLL).PLLState == 0) {\nLAB_0800324a:\n    HVar3 = HAL_OK;\n  }\n  else if ((DAT_08003254[1] & 0xc) == 8) {\n    HVar3 = HAL_ERROR;\n  }\n  else if ((RCC_OscInitStruct->PLL).PLLState == 2) {\n    *DAT_0800325c = 0;\n    uVar1 = HAL_GetTick();\n    do {\n      if ((*DAT_08003254 & 0x2000000) == 0) {\n        if ((RCC_OscInitStruct->PLL).PLLSource == 0x10000) {\n          DAT_08003254[1] = RCC_OscInitStruct->HSEPredivValue | DAT_08003254[1] & 0xfffdffff;\n        }\n        DAT_08003254[1] =\n             (RCC_OscInitStruct->PLL).PLLMUL | (RCC_OscInitStruct->PLL).PLLSource |\n             DAT_08003254[1] & 0xffc2ffff;\n        *DAT_0800325c = 1;\n        uVar1 = HAL_GetTick();\n        while ((*DAT_08003254 & 0x2000000) == 0) {\n          uVar2 = HAL_GetTick();\n          if (2 < uVar2 - uVar1) {\n            return HAL_TIMEOUT;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      uVar2 = HAL_GetTick();\n    } while (uVar2 - uVar1 < 3);\n    HVar3 = HAL_TIMEOUT;\n  }\n  else {\n    *DAT_0800325c = 0;\n    uVar1 = HAL_GetTick();\n    do {\n      if ((*DAT_08003254 & 0x2000000) == 0) goto LAB_0800324a;\n      uVar2 = HAL_GetTick();\n    } while (uVar2 - uVar1 < 3);\n    HVar3 = HAL_TIMEOUT;\n  }\n  return HVar3;\n}\n\n",
            "called": [
                "HAL_GetTick",
                "RCC_Delay"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08002d98",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "FUNC_08002d98"
        },
        "FUN_0800172a": {
            "renaming": {
                "FUN_0800172a": "setInterruptPriority_0800172a",
                "IRQn": "irq",
                "PreemptPriority": "preemptPriority",
                "SubPriority": "subPriority",
                "uVar1": "priorityGroup",
                "prioritygroup": "priorityEncoded"
            },
            "code": "void setInterruptPriority_0800172a(IRQn_Type irq, uint32_t preemptPriority, uint32_t subPriority)\n{\n  uint32_t priorityGroup;\n  uint32_t priorityEncoded;\n  \n  priorityGroup = NVIC_GetPriorityGrouping();\n  priorityEncoded = NVIC_EncodePriority(priorityGroup, preemptPriority, subPriority);\n  NVIC_SetPriority(irq, priorityEncoded);\n  return;\n}",
            "called": [
                "NVIC_GetPriorityGrouping",
                "NVIC_SetPriority",
                "NVIC_EncodePriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800172a",
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "setInterruptPriority_0800172a"
        },
        "FUN_080009d4": {
            "renaming": {
                "FUN_080009d4": "is_not_CY_or_ZR_080009d4",
                "in_CY": "is_CY",
                "in_ZR": "in_ZR"
            },
            "code": "bool is_not_CY_or_ZR_080009d4(void)\n{\n  bool is_CY = __aeabi_cdrcmple();\n  return !is_CY || (bool)in_ZR;\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009d4",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "is_not_CY_or_ZR_080009d4"
        },
        "FUN_08009744": {
            "renaming": {
                "FUN_08009744": "allocate_memory_08009744",
                "param_1": "error_code",
                "param_2": "size",
                "puVar1": "errno_ptr",
                "pcVar2": "allocation_ptr"
            },
            "code": "void allocate_memory_08009744(int *error_code, int size) {\n  undefined *errno_ptr;\n  caddr_t allocation_ptr;\n  errno_ptr = PTR_errno_08009764;\n  *(undefined4 *)PTR_errno_08009764 = 0;\n  allocation_ptr = _sbrk(size);\n  if ((allocation_ptr == (caddr_t)0xffffffff) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009744",
            "calling": [
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_08009744"
        },
        "FUN_08003640": {
            "renaming": {
                "FUN_08003640": "initialize_timer_08003640",
                "htim": "timer",
                "HVar1": "status",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_TIM_STATE_RESET": "HAL_TIM_STATE_RESET",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_TIM_PWM_MspInit": "HAL_TIM_PWM_MspInit",
                "HAL_TIM_STATE_BUSY": "HAL_TIM_STATE_BUSY",
                "TIM_Base_SetConfig": "TIM_Base_SetConfig",
                "HAL_TIM_STATE_READY": "HAL_TIM_STATE_READY",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef initialize_timer_08003640(TIM_HandleTypeDef *timer)\n{\n  HAL_StatusTypeDef status;\n  if (timer == NULL) {\n    status = HAL_ERROR;\n  }\n  else {\n    if (timer->State == HAL_TIM_STATE_RESET) {\n      timer->Lock = HAL_UNLOCKED;\n      HAL_TIM_PWM_MspInit(timer);\n    }\n    timer->State = HAL_TIM_STATE_BUSY;\n    TIM_Base_SetConfig(timer->Instance,&timer->Init);\n    timer->State = HAL_TIM_STATE_READY;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [
                "TIM_Base_SetConfig",
                "HAL_TIM_PWM_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003640",
            "calling": [
                "MX_TIM1_Init"
            ],
            "imported": false,
            "current_name": "initialize_timer_08003640"
        },
        "FUN_08009980": {
            "renaming": {
                "FUN_08009980": "FUNC_08009980"
            },
            "code": "\nundefined4 * FUNC_08009980(undefined4 param_1,int param_2,int param_3)\n\n{\n  undefined4 *__s;\n  size_t __n;\n  undefined4 *puVar1;\n  \n  __s = (undefined4 *)_malloc_r(param_1,param_3 * param_2);\n  if (__s == (undefined4 *)0x0) {\n    return (undefined4 *)0x0;\n  }\n  __n = (__s[-1] & 0xfffffffc) - 4;\n  if (__n < 0x25) {\n    puVar1 = __s;\n    if (0x13 < __n) {\n      *__s = 0;\n      __s[1] = 0;\n      if (0x1b < __n) {\n        __s[2] = 0;\n        __s[3] = 0;\n        if (__n == 0x24) {\n          __s[4] = 0;\n          __s[5] = 0;\n          puVar1 = __s + 6;\n        }\n        else {\n          puVar1 = __s + 4;\n        }\n        *puVar1 = 0;\n        puVar1[1] = 0;\n        puVar1[2] = 0;\n        return __s;\n      }\n      puVar1 = __s + 2;\n    }\n    *puVar1 = 0;\n    puVar1[1] = 0;\n    puVar1[2] = 0;\n    return __s;\n  }\n  memset(__s,0,__n);\n  return __s;\n}\n\n",
            "called": [
                "_malloc_r",
                "memset"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009980",
            "calling": [
                "_Balloc"
            ],
            "imported": false,
            "current_name": "FUNC_08009980"
        },
        "FUN_08005e9c": {
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n/* WARNING: Could not reconcile some variable overlaps */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  undefined *puVar2;\n  int **ppiVar3;\n  int *piVar4;\n  int iVar5;\n  int iVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  byte *pbVar9;\n  char cVar10;\n  byte bVar11;\n  int *piVar12;\n  int **ppiVar13;\n  undefined uVar14;\n  ushort uVar15;\n  int *__s;\n  int **ppiVar16;\n  byte **ppbVar17;\n  int *piVar18;\n  int *piVar19;\n  int **ppiVar20;\n  char *pcVar21;\n  uint uVar22;\n  byte *pbVar23;\n  int *piVar24;\n  uint uVar25;\n  uint uVar26;\n  int *piVar27;\n  int *piVar28;\n  byte *pbVar29;\n  bool bVar30;\n  longlong lVar31;\n  undefined8 uVar32;\n  undefined8 uVar33;\n  undefined4 in_stack_fffffe78;\n  int *in_stack_fffffe7c;\n  int *local_168;\n  byte *local_164;\n  int *local_15c;\n  int *local_158;\n  int **local_154;\n  int *local_150;\n  int *local_148;\n  int *local_144;\n  uint local_140;\n  int *local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  int *local_12c;\n  int *local_128;\n  undefined *local_11c;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0 [2];\n  undefined4 local_e8;\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int local_d4;\n  byte *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  ppiVar3 = (int **)_localeconv_r();\n  __s = *ppiVar3;\n  piVar4 = (int *)strlen((char *)__s);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar5 = _malloc_r(param_1,0x40);\n    *param_2 = iVar5;\n    param_2[4] = iVar5;\n    if (iVar5 == 0) {\n      *param_1 = 0xc;\n      return (byte *)0xffffffff;\n    }\n    param_2[5] = 0x40;\n  }\n  local_128 = (int *)0x0;\n  local_138 = (int *)0x0;\n  local_12c = (int *)0x0;\n  local_d4 = 0;\n  local_d0 = (byte *)0x0;\n  local_11c = (undefined *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  ppiVar3 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar3;\n  local_154 = param_4;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = local_d4 + 1;\n        local_d0 = (byte *)((int)local_d0 + (int)piVar27);\n        *ppiVar3 = param_3;\n        *(int **)((int)ppiVar3 + 4) = piVar27;\n        if (local_d4 < 8) {\n          ppiVar3 = (int **)((int)ppiVar3 + 8);\n        }\n        else {\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800604a;\n          ppiVar3 = local_cc;\n        }\n        local_164 = (byte *)((int)local_164 + (int)piVar27);\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    uVar26 = 0;\n    uVar25 = (uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    local_158 = piVar27;\n    local_168 = piVar27;\n    switch(uVar25) {\n    case 0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (uVar25 == 0) goto LAB_08006216;\n      piVar18 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int *)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (int *)0x1;\n      param_3 = (int *)&local_8c;\n      local_144 = piVar18;\n      local_8c = (char)uVar25;\n      goto LAB_08006298;\n    case 0x23:\n      uVar26 = uVar26 | 1;\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x27:\n      iVar5 = _localeconv_r(param_1);\n      local_110 = *(int **)(iVar5 + 4);\n      local_104 = (int *)strlen((char *)local_110);\n      iVar5 = _localeconv_r(param_1);\n      local_108 = *(byte **)(iVar5 + 8);\n      if (local_104 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      uVar25 = (uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        uVar26 = uVar26 | 0x400;\n      }\n      goto LAB_08005f4a;\n    case 0x2a:\n      uVar25 = (uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case 0x2b:\n      local_f5 = 0x2b;\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x2d:\n      uVar25 = (uint)*(byte *)piVar28;\nLAB_08006602:\n      uVar26 = uVar26 | 4;\n      goto LAB_08005f4a;\n    case 0x2e:\n      uVar25 = (uint)*(byte *)piVar28;\n      if (uVar25 == 0x2a) {\n        uVar25 = (uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (uVar25 - 0x30 < 10) {\n        piVar27 = (int *)((uVar25 - 0x30) + (int)piVar27 * 10);\n        uVar25 = (uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case 0x30:\n      uVar26 = uVar26 | 0x80;\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_08005f58_caseD_31;\n    case 0x41:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x61:\n    case 0x65:\n    case 0x66:\n    case 0x67:\n      local_154 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      local_128 = *local_154;\n      local_12c = local_154[1];\n      local_154 = local_154 + 2;\n      iVar5 = __unorddf2(local_128,(uint)local_12c & 0x7fffffff,0xffffffff,DAT_08006724);\n      if ((iVar5 == 0) &&\n         (iVar5 = __aeabi_dcmple(local_128,(uint)local_12c & 0x7fffffff,0xffffffff,DAT_08006724),\n         iVar5 == 0)) {\n        iVar5 = __aeabi_dcmplt(local_128,local_12c,0,0);\n        param_3 = (int *)PTR_DAT_08006728;\n        piVar27 = (int *)PTR_DAT_0800672c;\n        if (iVar5 == 0) {\n          piVar18 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar18 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (uVar25 < 0x48) {\n          param_3 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        local_158 = (int *)0x3;\n        local_13c = (int *)0x0;\n        local_140 = uVar26 & 0xffffff7f;\n        local_144 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      local_148 = (int *)__unorddf2(local_128,local_12c,local_128,local_12c);\n      if (local_148 != (int *)0x0) {\n        param_3 = (int *)PTR_DAT_08007898;\n        piVar27 = (int *)PTR_DAT_0800789c;\n        if ((int)local_12c < 0) {\n          piVar18 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar18 = (int *)(uint)local_f5;\n        }\n        goto LAB_08006524;\n      }\n      piVar18 = local_12c;\n      piVar24 = piVar27;\n      if (uVar25 == 0x61) {\n        uVar14 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar14,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = uVar26 | 0x102;\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          uVar26 = uVar26 | 2;\n        }\n        else {\n          param_3 = (int *)_malloc_r(param_1,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar15 = *(ushort *)(param_2 + 3) | 0x40;\n            *(ushort *)(param_2 + 3) = uVar15;\n            goto LAB_0800604e;\n          }\n          local_140 = uVar26 | 0x102;\n          uVar26 = uVar26 | 2;\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        piVar27 = piVar24;\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          piVar18 = local_12c + -0x20000000;\n          piVar24 = piVar27;\n        }\n        else {\n          local_144 = (int *)0x0;\n        }\n        if (uVar25 == 0x61) {\n          frexp((double)CONCAT44(in_stack_fffffe7c,in_stack_fffffe78),local_128);\n          uVar32 = __muldf3();\n          iVar5 = __aeabi_dcmpeq((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,0);\n          if (iVar5 != 0) {\n            local_f0[0] = (int *)0x1;\n          }\n          local_158 = (int *)PTR_s_0123456789abcdef_08007888;\n          local_138 = param_3;\n          piVar27 = piVar24;\n          goto LAB_080072ba;\n        }\n        if (uVar25 == 0x41) {\n          frexp((double)CONCAT44(in_stack_fffffe7c,in_stack_fffffe78),local_128);\n          uVar32 = __muldf3();\n          iVar5 = __aeabi_dcmpeq((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,0);\n          if (iVar5 == 0) {\n            local_158 = (int *)PTR_s_0123456789ABCDEF_0800739c;\n            local_138 = param_3;\n            piVar27 = piVar24;\n          }\n          else {\n            local_f0[0] = (int *)0x1;\n            local_158 = (int *)PTR_s_0123456789ABCDEF_08007894;\n            local_138 = param_3;\n            piVar27 = piVar24;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (uVar25 == 0x41) {\n          uVar14 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = uVar26 | 0x100;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar24 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if ((uVar25 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar24 = (int *)0x1;\n            local_148 = piVar27;\n          }\n          goto LAB_0800724a;\n        }\n        local_144 = local_148;\n        if ((int)local_12c < 0) goto LAB_08007414;\n      }\n      local_168 = (int *)(uVar25 & 0xffffffdf);\n      in_stack_fffffe7c = piVar24;\n      local_150 = piVar24;\n      if (uVar25 == 0x66) {\n        in_stack_fffffe78 = 3;\n        param_3 = (int *)_dtoa_r(param_1,local_f0,local_128,piVar18);\n        piVar27 = (int *)((int)param_3 + (int)piVar24);\nLAB_0800764c:\n        if ((*(byte *)param_3 == 0x30) &&\n           (iVar5 = __aeabi_dcmpeq(local_128,piVar18,0,0), iVar5 == 0)) {\n          local_f0[0] = (int *)(1 - (int)local_150);\n        }\n        piVar27 = (int *)((int)piVar27 + (int)local_f0[0]);\n      }\n      else if (uVar25 == 0x46) {\n        in_stack_fffffe78 = 3;\n        param_3 = (int *)_dtoa_r(param_1,local_f0,local_128,piVar18);\nLAB_08007760:\n        piVar27 = (int *)((int)param_3 + (int)local_150);\n        if (uVar25 == 0x46) goto LAB_0800764c;\n      }\n      else {\n        if (local_168 == (int *)0x45) {\n          local_150 = (int *)((int)piVar24 + 1);\n        }\n        in_stack_fffffe78 = 2;\n        in_stack_fffffe7c = local_150;\n        param_3 = (int *)_dtoa_r(param_1,local_f0,local_128,piVar18);\n        local_138 = local_e0;\n        if (uVar25 == 0x67) {\n          if ((uVar26 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (uVar25 == 0x47) {\n          if ((uVar26 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar27 = (int *)((int)local_150 + (int)param_3);\n      }\n      iVar5 = __aeabi_dcmpeq(local_128,piVar18,0,0);\n      local_138 = piVar27;\n      if (iVar5 == 0) {\n        for (; local_138 = local_e0, local_e0 < piVar27; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)local_138 - (int)param_3);\n      goto LAB_08006cb0;\n    case 0x43:\n    case 99:\n      piVar18 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_144 = (int *)0x0;\n      local_13c = (int *)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (int *)0x1;\n      local_8c = SUB41(piVar27,0);\n      param_3 = (int *)&local_8c;\n      goto LAB_08006298;\n    case 0x44:\n      uVar26 = uVar26 | 0x10;\n      if ((int)(uVar26 << 0x1a) < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar16 = local_154 + 1;\n      if ((int)(uVar26 << 0x1b) < 0) {\nLAB_08006bcc:\n        piVar18 = *local_154;\n        piVar24 = (int *)((int)piVar18 >> 0x1f);\n        local_154 = ppiVar16;\n      }\n      else if ((int)(uVar26 << 0x19) < 0) {\n        piVar18 = (int *)(int)*(short *)local_154;\n        piVar24 = (int *)((int)piVar18 >> 0x1f);\n        local_154 = ppiVar16;\n      }\n      else {\n        if (-1 < (int)(uVar26 << 0x16)) goto LAB_08006bcc;\n        piVar18 = (int *)(int)*(char *)local_154;\n        piVar24 = (int *)((int)piVar18 >> 0x1f);\n        local_154 = ppiVar16;\n      }\n      goto LAB_08006102;\n    case 0x4c:\n      uVar26 = uVar26 | 8;\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x4f:\n      uVar26 = uVar26 | 0x10;\n    case 0x6f:\n      if ((uVar26 & 0x20) == 0) {\n        ppiVar16 = local_154 + 1;\n        if ((uVar26 & 0x10) == 0) {\n          if ((uVar26 & 0x40) == 0) {\n            if ((uVar26 & 0x200) == 0) goto LAB_08006be2;\n            piVar18 = (int *)(uint)*(byte *)local_154;\n            piVar24 = (int *)0x0;\n            local_154 = ppiVar16;\n          }\n          else {\n            piVar18 = (int *)(uint)*(ushort *)local_154;\n            piVar24 = (int *)0x0;\n            local_154 = ppiVar16;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar18 = *local_154;\n          piVar24 = (int *)0x0;\n          local_154 = ppiVar16;\n        }\n      }\n      else {\n        ppiVar16 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar18 = *ppiVar16;\n        piVar24 = ppiVar16[1];\n        local_154 = ppiVar16 + 2;\n      }\n      iVar5 = 0;\n      uVar26 = uVar26 & 0xfffffbff;\n      break;\n    case 0x53:\n    case 0x73:\n      local_f5 = 0;\n      local_144 = *local_154;\n      local_154 = local_154 + 1;\n      local_140 = uVar26;\n      if (local_144 == (int *)0x0) {\n        piVar18 = local_144;\n        param_3 = (int *)PTR_s__null__08007084;\n        local_148 = local_144;\n        local_13c = local_144;\n        local_134 = local_144;\n        local_130 = local_144;\n        if ((int *)0x5 < piVar27) {\n          local_158 = (int *)0x6;\n          local_168 = local_158;\n        }\n        goto LAB_08006538;\n      }\n      param_3 = local_144;\n      if (piVar27 == (int *)0xffffffff) {\n        local_158 = (int *)strlen((char *)local_144);\n      }\n      else {\n        local_148 = (int *)memchr(local_144,0,(size_t)piVar27);\n        if (local_148 == (int *)0x0) {\n          piVar18 = (int *)(uint)local_f5;\n          local_144 = local_148;\n          local_13c = local_148;\n          local_134 = local_148;\n          local_130 = local_148;\n          goto LAB_08006538;\n        }\n        local_158 = (int *)((int)local_148 - (int)local_144);\n      }\n      local_148 = (int *)0x0;\n      local_13c = (int *)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      piVar18 = (int *)(uint)local_f5;\n      local_144 = (int *)0x0;\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      goto LAB_08006538;\n    case 0x55:\n      uVar26 = uVar26 | 0x10;\n      if ((int)(uVar26 << 0x1a) < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar16 = local_154 + 1;\n      if ((int)(uVar26 << 0x1b) < 0) {\nLAB_08006bf2:\n        piVar18 = *local_154;\n        piVar24 = (int *)0x0;\n        iVar5 = 1;\n        local_154 = ppiVar16;\n      }\n      else if ((int)(uVar26 << 0x19) < 0) {\n        piVar18 = (int *)(uint)*(ushort *)local_154;\n        piVar24 = (int *)0x0;\n        iVar5 = 1;\n        local_154 = ppiVar16;\n      }\n      else {\n        if (-1 < (int)(uVar26 << 0x16)) goto LAB_08006bf2;\n        piVar18 = (int *)(uint)*(byte *)local_154;\n        piVar24 = (int *)0x0;\n        iVar5 = 1;\n        local_154 = ppiVar16;\n      }\n      break;\n    case 0x58:\n      local_11c = PTR_s_0123456789ABCDEF_08006730;\n      if ((uVar26 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar16 = local_154 + 1;\n      if ((uVar26 & 0x10) == 0) {\n        if ((uVar26 & 0x40) == 0) {\n          if ((uVar26 & 0x200) == 0) goto LAB_08006bbc;\n          piVar18 = (int *)(uint)*(byte *)local_154;\n          piVar24 = (int *)0x0;\n          local_154 = ppiVar16;\n        }\n        else {\n          piVar18 = (int *)(uint)*(ushort *)local_154;\n          piVar24 = (int *)0x0;\n          local_154 = ppiVar16;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar18 = *local_154;\n        piVar24 = (int *)0x0;\n        local_154 = ppiVar16;\n      }\n      goto LAB_080061be;\n    case 100:\n    case 0x69:\n      if (-1 < (int)(uVar26 << 0x1a)) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar16 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar18 = *ppiVar16;\n      piVar24 = ppiVar16[1];\n      local_154 = ppiVar16 + 2;\nLAB_08006102:\n      if ((int)piVar24 < 0) {\n        bVar30 = piVar18 != (int *)0x0;\n        piVar18 = (int *)-(int)piVar18;\n        piVar24 = (int *)(-(int)piVar24 - (uint)bVar30);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar5 = 1;\n        iVar6 = 1;\n        local_140 = uVar26 & 0xffffff7f;\n        if (((uint)piVar18 | (uint)piVar24) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      local_140 = uVar26;\n      if (piVar24 != (int *)0x0 || (int *)0x9 < piVar18) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case 0x68:\n      uVar25 = (uint)*(byte *)piVar28;\n      if (uVar25 == 0x68) {\n        uVar25 = (uint)*(byte *)((int)piVar28 + 1);\n        uVar26 = uVar26 | 0x200;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        uVar26 = uVar26 | 0x40;\n      }\n      goto LAB_08005f4a;\n    case 0x6a:\n    case 0x71:\n      uVar26 = uVar26 | 0x20;\n    case 0x74:\n    case 0x7a:\nswitchD_08005f58_caseD_74:\n      uVar25 = (uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case 0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case 0x6e:\n      ppiVar16 = local_154 + 1;\n      ppbVar17 = (byte **)*local_154;\n      local_154 = ppiVar16;\n      if ((uVar26 & 0x20) != 0) {\n        *ppbVar17 = local_164;\n        ppbVar17[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if ((uVar26 & 0x10) == 0) {\n        if ((uVar26 & 0x40) != 0) {\n          *(short *)ppbVar17 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if ((uVar26 & 0x200) != 0) {\n          *(char *)ppbVar17 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar17 = local_164;\n      goto LAB_0800620e;\n    case 0x70:\n      local_f4 = 0x7830;\n      local_11c = PTR_s_0123456789abcdef_08006434;\n      piVar18 = *local_154;\n      uVar26 = uVar26 | 2;\n      piVar24 = (int *)0x0;\n      iVar5 = 2;\n      uVar25 = 0x78;\n      local_154 = local_154 + 1;\n      break;\n    case 0x75:\n      if (-1 < (int)(uVar26 << 0x1a)) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar16 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar18 = *ppiVar16;\n      piVar24 = ppiVar16[1];\n      iVar5 = 1;\n      local_154 = ppiVar16 + 2;\n      break;\n    case 0x78:\n      local_11c = PTR_s_0123456789abcdef_08006434;\n      if ((uVar26 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar16 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar18 = *ppiVar16;\n      piVar24 = ppiVar16[1];\n      local_154 = ppiVar16 + 2;\nLAB_080061be:\n      if (((uVar26 & 1) != 0) && (((uint)piVar18 | (uint)piVar24) != 0)) {\n        uVar26 = uVar26 | 2;\n        local_f4 = CONCAT11((char)uVar25,0x30);\n      }\n      iVar5 = 2;\n      uVar26 = uVar26 & 0xfffffbff;\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      local_140 = uVar26;\n      if (iVar5 != 1) goto LAB_08006136;\nLAB_08006980:\n      local_140 = uVar26;\n      if (piVar24 == (int *)0x0 && piVar18 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar31 = CONCAT44(piVar24,piVar18);\n      local_138 = (int *)0x0;\n      param_3 = (int *)(&bStack_2a + 2);\n      do {\n        iVar5 = (int)((ulonglong)lVar31 >> 0x20);\n        uVar26 = (uint)lVar31;\n        cVar10 = '\\n';\n        __aeabi_uldivmod(uVar26,iVar5,10,0);\n        *(byte *)((int)param_3 + -1) = cVar10 + 0x30;\n        local_138 = (int *)((int)local_138 + 1);\n        param_3 = (int *)((int)param_3 + -1);\n        if (((((local_140 & 0x400) != 0) && (local_138 == (int *)(uint)*local_108)) &&\n            (local_138 != (int *)0xff)) && (iVar5 != 0 || 9 < uVar26)) {\n          param_3 = (int *)((int)param_3 - (int)local_104);\n          strncpy((char *)param_3,(char *)local_110,(size_t)local_104);\n          local_138 = (int *)(uint)local_108[1];\n          if (local_138 != (int *)0x0) {\n            local_108 = local_108 + 1;\n            local_138 = (int *)0x0;\n          }\n        }\n        lVar31 = __aeabi_uldivmod(uVar26,iVar5,10,0);\n      } while (lVar31 != 0);\n      local_158 = (int *)((int)(&bStack_2a + 2) - (int)param_3);\n    }\n    else {\n      local_140 = uVar26 & 0xffffff7f;\n      iVar6 = iVar5;\n      if (((uint)piVar18 | (uint)piVar24) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar5 == 0) {\n            local_158 = (int *)(uVar26 & 1);\n            if (local_158 == (int *)0x0) {\n              param_3 = (int *)(&bStack_2a + 2);\n            }\n            else {\n              param_3 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n            }\n          }\n          else {\n            param_3 = (int *)(&bStack_2a + 2);\n          }\n        }\n        else {\n          if (iVar5 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar18 + '0';\n          param_3 = (int *)(&bStack_2a + 1);\n          local_158 = (int *)0x1;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar5 = iVar6;\n        uVar26 = local_140;\n        if (iVar6 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar5 == 2) {\n          param_3 = (int *)(&bStack_2a + 2);\n          do {\n            piVar19 = (int *)((uint)piVar18 >> 4 | (int)piVar24 << 0x1c);\n            piVar24 = (int *)((uint)piVar24 >> 4);\n            param_3 = (int *)((int)param_3 + -1);\n            *(undefined *)param_3 = local_11c[(uint)piVar18 & 0xf];\n            piVar18 = piVar19;\n          } while (((uint)piVar19 | (uint)piVar24) != 0);\n        }\n        else {\n          param_3 = (int *)(&bStack_2a + 2);\n          do {\n            piVar19 = param_3;\n            piVar12 = (int *)((uint)piVar18 >> 3 | (int)piVar24 << 0x1d);\n            piVar24 = (int *)((uint)piVar24 >> 3);\n            iVar5 = ((uint)piVar18 & 7) + 0x30;\n            *(byte *)((int)piVar19 + -1) = (byte)iVar5;\n            param_3 = (int *)((int)piVar19 + -1);\n            piVar18 = piVar12;\n          } while (((uint)piVar12 | (uint)piVar24) != 0);\n          if (((local_140 & 1) != 0) && (iVar5 != 0x30)) {\n            param_3 = (int *)((int)piVar19 + -2);\n            local_158 = (int *)(&bStack_2a + (2 - (int)param_3));\n            *(byte *)((int)piVar19 + -2) = 0x30;\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (int *)(&bStack_2a + (2 - (int)param_3));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int *)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar18 = (int *)(uint)local_f5;\n    local_144 = piVar27;\n    local_168 = local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  if (local_d0 == (byte *)0x0) {\nLAB_0800604a:\n    uVar15 = *(ushort *)(param_2 + 3);\n  }\n  else {\n    __ssprint_r(param_1,param_2,&local_d8);\n    uVar15 = *(ushort *)(param_2 + 3);\n  }\nLAB_0800604e:\n  if ((uVar15 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  uVar25 = (uint)*(byte *)piVar28;\n  if (uVar25 == 0x6c) {\n    uVar25 = (uint)*(byte *)((int)piVar28 + 1);\n    uVar26 = uVar26 | 0x20;\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    uVar26 = uVar26 | 0x10;\n  }\n  goto LAB_08005f4a;\n  while (iVar6 = __aeabi_dcmpeq(uVar7,uVar8,0,0), iVar6 == 0) {\nLAB_080072ba:\n    piVar18 = piVar27;\n    piVar19 = local_138;\n    piVar27 = (int *)((int)piVar18 + -1);\n    uVar32 = __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_080073a0);\n    iVar5 = __aeabi_d2iz();\n    uVar33 = __aeabi_i2d();\n    uVar32 = __subdf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),(int)uVar33,\n                      (int)((ulonglong)uVar33 >> 0x20));\n    uVar8 = (undefined4)((ulonglong)uVar32 >> 0x20);\n    uVar7 = (undefined4)uVar32;\n    local_138 = (int *)((int)piVar19 + 1);\n    *(byte *)piVar19 = *(byte *)((int)local_158 + iVar5);\n    if (piVar27 == (int *)0xffffffff) break;\n  }\n  iVar6 = __aeabi_dcmpgt(uVar7,uVar8,0,DAT_080073a4);\n  if ((iVar6 == 0) &&\n     ((iVar6 = __aeabi_dcmpeq(uVar7,uVar8,0,DAT_080073a4), iVar6 == 0 || (-1 < iVar5 << 0x1f)))) {\n    if (-1 < (int)piVar27) {\n      piVar18 = (int *)((int)piVar18 + (int)local_138);\n      piVar27 = local_138;\n      do {\n        local_138 = (int *)((int)piVar27 + 1);\n        *(byte *)piVar27 = 0x30;\n        piVar27 = local_138;\n      } while (piVar18 != local_138);\n    }\n  }\n  else {\n    bVar1 = *(byte *)((int)local_158 + 0xf);\n    bVar11 = *(byte *)piVar19;\n    piVar27 = local_138;\n    local_e0 = piVar19;\n    while (bVar1 == bVar11) {\n      *(byte *)((int)piVar27 + -1) = 0x30;\n      bVar11 = *(byte *)((int)local_e0 + -1);\n      piVar27 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar11 == 0x39) {\n      bVar11 = *(byte *)((int)local_158 + 10);\n    }\n    else {\n      bVar11 = bVar11 + 1;\n    }\n    *(byte *)((int)piVar27 + -1) = bVar11;\n  }\n  local_138 = (int *)((int)local_138 - (int)param_3);\nLAB_08006cb0:\n  local_168 = (int *)(uVar25 & 0xffffffdf);\n  local_134 = local_f0[0];\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0[0] + 3) < 0 == SCARRY4((int)local_f0[0],3)) &&\n       ((int)local_f0[0] <= (int)piVar24)) {\n      if ((int)local_f0[0] < (int)local_138) {\n        local_158 = (int *)((int)local_138 + (int)piVar4);\n        if (0 < (int)local_f0[0]) {\n          uVar25 = 0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (int *)((int)local_158 + (1 - (int)local_f0[0]));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        uVar25 = 0x67;\n      }\n      else {\n        if ((int)(uVar26 << 0x1f) < 0) {\n          local_158 = (int *)((int)local_f0[0] + (int)piVar4);\n        }\n        else {\n          local_158 = local_f0[0];\n        }\n        if (-1 < (int)(uVar26 << 0x15)) {\n          uVar25 = 0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0[0]) {\n          uVar25 = 0x67;\n          goto LAB_080074fc;\n        }\n        uVar25 = 0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    uVar25 = uVar25 - 2;\n    local_168 = (int *)(uVar25 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8._0_1_ = (char)uVar25;\n    if (local_168 == (int *)0x41) {\n      local_e8._0_1_ = (char)local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0[0] + -1);\n    if ((int)piVar27 < 0) {\n      local_e8._1_1_ = 0x2d;\n      local_f0[0] = (int *)(1 - (int)local_f0[0]);\n    }\n    else {\n      local_e8._1_1_ = 0x2b;\n      local_f0[0] = piVar27;\n    }\n    if ((int)local_f0[0] < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar21 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e8._2_1_ = 0x30;\n        pcVar21 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar21 = (char)local_f0[0] + '0';\n      pcVar21 = pcVar21 + 1;\n    }\n    else {\n      pbVar29 = abStack_dc + 3;\n      pbVar23 = pbVar29;\n      do {\n        pbVar9 = pbVar23;\n        piVar18 = (int *)((ulonglong)DAT_08007890 * ZEXT48(local_f0[0]) >> 0x23);\n        pbVar9[-1] = (char)local_f0[0] + (char)piVar18 * -10 + 0x30;\n        pbVar23 = pbVar9 + -1;\n        local_f0[0] = piVar18;\n      } while ((int *)0x9 < piVar18);\n      uVar22 = (uint)(piVar18 + 0xc) & 0xff;\n      pbVar9[-2] = (byte)uVar22;\n      if (pbVar9 + -2 < pbVar29) {\n        pbVar9 = pbVar23;\n        pcVar21 = (char *)((int)&local_e8 + 2);\n        while( true ) {\n          *pcVar21 = (char)uVar22;\n          if (pbVar29 == pbVar9) break;\n          uVar22 = (uint)*pbVar9;\n          pbVar9 = pbVar9 + 1;\n          pcVar21 = pcVar21 + 1;\n        }\n        pcVar21 = (char *)(((int)&stack0xfffffe78 * 2 - (int)pbVar23) + 0x152);\n      }\n      else {\n        pcVar21 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar21 + -(int)&local_e8);\n    local_158 = (int *)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)(uVar26 << 0x1f) < 0)) {\n      local_158 = (int *)((int)local_158 + (int)piVar4);\n    }\n    local_13c = (int *)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    local_140 = uVar26 & 0xfffffbff | 0x100;\n    local_f0[0] = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0[0] < 1) {\n      if ((piVar24 == (int *)0x0) && (-1 < (int)(uVar26 << 0x1f))) {\n        uVar25 = 0x66;\n        local_168 = (int *)0x1;\n        local_158 = (int *)0x1;\n      }\n      else {\n        uVar25 = 0x66;\n        local_158 = (int *)((byte *)((int)piVar4 + 1) + (int)piVar24);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int *)0x0;\n      local_130 = (int *)0x0;\n    }\n    else {\n      if ((piVar24 == (int *)0x0) && (-1 < (int)(uVar26 << 0x1f))) {\n        uVar25 = 0x66;\n        local_158 = local_f0[0];\n      }\n      else {\n        uVar25 = 0x66;\n        local_158 = (int *)((byte *)((int)local_f0[0] + (int)piVar4) + (int)piVar24);\n      }\nLAB_080074f8:\n      if (-1 < (int)(uVar26 << 0x15)) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int *)0x0;\n      local_130 = (int *)0x0;\n      uVar26 = (uint)*local_108;\n      while (uVar26 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar26) goto LAB_08007524;\n          uVar22 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar26);\n          if (uVar22 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar26 = uVar22;\n          if (uVar22 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int *)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (int *)((int)local_104 * (int)((int)local_130 + (int)local_13c) + (int)local_158);\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar18 = (int *)(uint)local_f5;\nLAB_08006538:\n    uVar26 = local_140;\n    if (piVar18 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar18 = (int *)0x2d;\n    local_144 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n    uVar26 = local_140;\n  }\nLAB_08006298:\n  if ((uVar26 & 2) != 0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  if (((uVar26 & 0x84) == 0) &&\n     (piVar27 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar27)) {\n    if (0x10 < (int)piVar27) {\n      do {\n        piVar18 = piVar27;\n        local_d4 = local_d4 + 1;\n        local_d0 = local_d0 + 0x10;\n        *ppiVar3 = (int *)PTR_blanks_7315_08006438;\n        ppiVar3[1] = (int *)0x10;\n        if (local_d4 < 8) {\n          ppiVar3 = ppiVar3 + 2;\n        }\n        else {\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          ppiVar3 = local_cc;\n        }\n        piVar27 = piVar18 + -4;\n      } while (0x10 < (int)piVar27);\n      piVar27 = piVar18 + -4;\n    }\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)piVar27;\n    *ppiVar3 = (int *)PTR_blanks_7315_08006438;\n    ppiVar3[1] = piVar27;\n    if (local_d4 < 8) {\n      piVar18 = (int *)(uint)local_f5;\n      ppiVar3 = ppiVar3 + 2;\n    }\n    else {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n      piVar18 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar18 != (int *)0x0) {\n    local_d0 = local_d0 + 1;\n    local_d4 = local_d4 + 1;\n    *ppiVar3 = (int *)&local_f5;\n    ppiVar3[1] = (int *)0x1;\n    if (local_d4 < 8) {\n      ppiVar3 = ppiVar3 + 2;\n    }\n    else {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n    }\n  }\n  if ((uVar26 & 2) != 0) {\n    local_d0 = local_d0 + 2;\n    local_d4 = local_d4 + 1;\n    *ppiVar3 = (int *)&local_f4;\n    ppiVar3[1] = (int *)0x2;\n    if (local_d4 < 8) {\n      ppiVar3 = ppiVar3 + 2;\n    }\n    else {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n    }\n  }\n  puVar2 = PTR_zeroes_7316_08006a54;\n  if (((uVar26 & 0x84) == 0x80) &&\n     (piVar27 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar27)) {\n    if (0x10 < (int)piVar27) {\n      do {\n        while( true ) {\n          piVar18 = piVar27;\n          local_d4 = local_d4 + 1;\n          local_d0 = local_d0 + 0x10;\n          *ppiVar3 = (int *)puVar2;\n          ppiVar3[1] = (int *)0x10;\n          if (local_d4 < 8) break;\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          ppiVar3 = local_cc;\n          piVar27 = piVar18 + -4;\n          if ((int)(piVar18 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar3 = ppiVar3 + 2;\n        piVar27 = piVar18 + -4;\n      } while (0x10 < (int)(piVar18 + -4));\nLAB_08006882:\n      piVar27 = piVar18 + -4;\n    }\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)piVar27;\n    *ppiVar3 = (int *)puVar2;\n    ppiVar3[1] = piVar27;\n    if (local_d4 < 8) {\n      ppiVar3 = ppiVar3 + 2;\n    }\n    else {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n    }\n  }\n  puVar2 = PTR_zeroes_7316_0800643c;\n  local_144 = (int *)((int)local_144 - (int)local_158);\n  if (0 < (int)local_144) {\n    piVar27 = (int *)PTR_zeroes_7316_08007088;\n    if (0x10 < (int)local_144) {\n      do {\n        while( true ) {\n          piVar27 = local_144;\n          local_d4 = local_d4 + 1;\n          local_d0 = local_d0 + 0x10;\n          *ppiVar3 = (int *)puVar2;\n          ppiVar3[1] = (int *)0x10;\n          if (local_d4 < 8) break;\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          ppiVar3 = local_cc;\n          local_144 = piVar27 + -4;\n          if ((int)(piVar27 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar3 = ppiVar3 + 2;\n        local_144 = piVar27 + -4;\n      } while (0x10 < (int)(piVar27 + -4));\nLAB_080063d2:\n      local_144 = piVar27 + -4;\n      piVar27 = (int *)puVar2;\n    }\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)local_144;\n    *ppiVar3 = piVar27;\n    ppiVar3[1] = local_144;\n    if (local_d4 < 8) {\n      ppiVar3 = ppiVar3 + 2;\n    }\n    else {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n    }\n  }\n  pbVar23 = local_d0;\n  if ((uVar26 & 0x100) == 0) {\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)local_158;\n    *ppiVar3 = param_3;\n    ppiVar3[1] = local_158;\n    if (local_d4 < 8) {\nLAB_0800640e:\n      ppiVar3 = ppiVar3 + 2;\n      pbVar23 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n      pbVar23 = local_d0;\n    }\n  }\n  else if ((int)uVar25 < 0x66) {\n    local_158 = (int *)(local_d0 + 1);\n    iVar5 = local_d4 + 1;\n    ppiVar16 = ppiVar3 + 2;\n    local_d0 = (byte *)local_158;\n    if (((int)local_138 < 2) && ((uVar26 & 1) == 0)) {\n      *ppiVar3 = param_3;\n      ppiVar3[1] = (int *)0x1;\n      if (iVar5 < 8) {\n        local_150 = (int *)(local_d4 + 2);\n        ppiVar3 = ppiVar3 + 4;\n      }\n      else {\n        local_d4 = iVar5;\n        iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar5 != 0) goto LAB_0800603e;\n        local_150 = (int *)(local_d4 + 1);\n        ppiVar16 = local_cc;\n        local_158 = (int *)local_d0;\n        ppiVar3 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar3 = param_3;\n      ppiVar3[1] = (int *)0x1;\n      local_d4 = iVar5;\n      if (7 < iVar5) {\n        iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar5 != 0) goto LAB_0800603e;\n        ppiVar16 = local_cc;\n        local_158 = (int *)local_d0;\n      }\n      local_d4 = local_d4 + 1;\n      local_d0 = (byte *)((int)local_158 + (int)piVar4);\n      *ppiVar16 = __s;\n      ppiVar16[1] = piVar4;\n      if (local_d4 < 8) {\n        ppiVar20 = ppiVar16 + 2;\n      }\n      else {\n        iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar5 != 0) goto LAB_0800603e;\n        ppiVar20 = local_cc;\n      }\n      local_158 = (int *)local_d0;\n      iVar5 = local_d4;\n      local_150 = (int *)(local_d4 + 1);\n      piVar27 = (int *)((int)local_138 + -1);\n      ppiVar13 = ppiVar20 + 2;\n      iVar6 = __aeabi_dcmpeq(local_128,local_12c,0,0);\n      puVar2 = PTR_zeroes_7316_08006d94;\n      local_d4 = (int)local_150;\n      if (iVar6 == 0) {\n        local_158 = (int *)((int)local_158 + (int)piVar27);\n        *ppiVar20 = (int *)((int)param_3 + 1);\n        ppiVar20[1] = piVar27;\n        local_d0 = (byte *)local_158;\n        if ((int)local_150 < 8) {\n          local_150 = (int *)(iVar5 + 2);\n          ppiVar16 = ppiVar13;\n          ppiVar3 = ppiVar20 + 4;\n        }\n        else {\nLAB_08006d9c:\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          local_150 = (int *)(local_d4 + 1);\n          local_158 = (int *)local_d0;\n          ppiVar16 = local_cc;\n          ppiVar3 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar16 = ppiVar20;\n        ppiVar3 = ppiVar13;\n        if (0 < (int)piVar27) {\n          piVar18 = (int *)PTR_zeroes_7316_0800788c;\n          if (0x10 < (int)piVar27) {\n            while( true ) {\n              local_d0 = (byte *)((int)local_158 + 0x10);\n              *ppiVar20 = (int *)puVar2;\n              ppiVar20[1] = (int *)0x10;\n              if (local_d4 < 8) {\n                ppiVar20 = ppiVar20 + 2;\n              }\n              else {\n                iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n                if (iVar5 != 0) goto LAB_0800603e;\n                ppiVar20 = local_cc;\n              }\n              piVar27 = piVar27 + -4;\n              local_158 = (int *)local_d0;\n              if ((int)piVar27 < 0x11) break;\n              local_d4 = local_d4 + 1;\n            }\n            local_150 = (int *)(local_d4 + 1);\n            ppiVar13 = ppiVar20 + 2;\n            piVar18 = (int *)puVar2;\n          }\n          *ppiVar20 = piVar18;\n          ppiVar20[1] = piVar27;\n          local_158 = (int *)((int)local_158 + (int)piVar27);\n          local_d4 = (int)local_150;\n          local_d0 = (byte *)local_158;\n          if (7 < (int)local_150) goto LAB_08006d9c;\n          local_150 = (int *)((int)local_150 + 1);\n          ppiVar3 = ppiVar13 + 2;\n          ppiVar16 = ppiVar13;\n        }\n      }\n    }\n    ppiVar16[1] = local_10c;\n    local_d0 = (byte *)((int)local_158 + (int)local_10c);\n    local_d4 = (int)local_150;\n    *ppiVar16 = &local_e8;\n    pbVar23 = local_d0;\n    if (7 < (int)local_150) {\n      iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n      if (iVar5 != 0) goto LAB_0800603e;\n      ppiVar3 = local_cc;\n      pbVar23 = local_d0;\n    }\n  }\n  else {\n    iVar5 = __aeabi_dcmpeq(local_128,local_12c,0,0);\n    if (iVar5 == 0) {\n      if ((int)local_f0[0] < 1) {\n        local_d4 = local_d4 + 1;\n        local_d0 = pbVar23 + 1;\n        *ppiVar3 = (int *)PTR_DAT_08006d98;\n        ppiVar3[1] = (int *)0x1;\n        if (local_d4 < 8) {\n          ppiVar3 = ppiVar3 + 2;\n        }\n        else {\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          ppiVar3 = local_cc;\n        }\n        if (((local_f0[0] != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (pbVar23 = local_d0, (uVar26 & 1) != 0)) {\n          local_d4 = local_d4 + 1;\n          local_d0 = local_d0 + (int)piVar4;\n          *ppiVar3 = __s;\n          ppiVar3[1] = piVar4;\n          if (local_d4 < 8) {\n            ppiVar3 = ppiVar3 + 2;\n          }\n          else {\n            iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar5 != 0) goto LAB_0800603e;\n            ppiVar3 = local_cc;\n          }\n          puVar2 = PTR_zeroes_7316_0800788c;\n          if ((int)local_f0[0] < 0) {\n            piVar27 = (int *)-(int)local_f0[0];\n            if ((int)(local_f0[0] + 4) < 0 != SCARRY4((int)local_f0[0],0x10)) {\n              do {\n                local_d4 = local_d4 + 1;\n                local_d0 = local_d0 + 0x10;\n                *ppiVar3 = (int *)puVar2;\n                ppiVar3[1] = (int *)0x10;\n                if (local_d4 < 8) {\n                  ppiVar3 = ppiVar3 + 2;\n                }\n                else {\n                  iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n                  if (iVar5 != 0) goto LAB_0800603e;\n                  ppiVar3 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = local_d4 + 1;\n            local_d0 = local_d0 + (int)piVar27;\n            *ppiVar3 = (int *)puVar2;\n            ppiVar3[1] = piVar27;\n            if (local_d4 < 8) {\n              ppiVar3 = ppiVar3 + 2;\n            }\n            else {\n              iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar5 != 0) goto LAB_0800603e;\n              ppiVar3 = local_cc;\n            }\n          }\n          local_d0 = local_d0 + (int)local_138;\n          *ppiVar3 = param_3;\n          ppiVar3[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar27 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar27 = local_138;\n        }\n        if (0 < (int)piVar27) {\n          local_d0 = pbVar23 + (int)piVar27;\n          local_d4 = local_d4 + 1;\n          *ppiVar3 = param_3;\n          ppiVar3[1] = piVar27;\n          if (local_d4 < 8) {\n            ppiVar3 = ppiVar3 + 2;\n            pbVar23 = local_d0;\n          }\n          else {\n            iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar5 != 0) goto LAB_0800603e;\n            ppiVar3 = local_cc;\n            pbVar23 = local_d0;\n          }\n        }\n        puVar2 = PTR_zeroes_7316_08006d94;\n        piVar18 = local_134;\n        if (-1 < (int)piVar27) {\n          piVar18 = (int *)((int)local_134 - (int)piVar27);\n        }\n        piVar27 = (int *)PTR_zeroes_7316_0800788c;\n        if (0 < (int)piVar18) {\n          for (; 0x10 < (int)piVar18; piVar18 = piVar18 + -4) {\n            local_d4 = local_d4 + 1;\n            local_d0 = pbVar23 + 0x10;\n            *ppiVar3 = (int *)puVar2;\n            ppiVar3[1] = (int *)0x10;\n            if (local_d4 < 8) {\n              ppiVar3 = ppiVar3 + 2;\n            }\n            else {\n              iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar5 != 0) goto LAB_0800603e;\n              ppiVar3 = local_cc;\n            }\n            pbVar23 = local_d0;\n            piVar27 = (int *)puVar2;\n          }\n          local_d4 = local_d4 + 1;\n          pbVar23 = pbVar23 + (int)piVar18;\n          *ppiVar3 = piVar27;\n          ppiVar3[1] = piVar18;\n          local_d0 = pbVar23;\n          if (local_d4 < 8) {\n            ppiVar3 = ppiVar3 + 2;\n          }\n          else {\n            iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar5 != 0) goto LAB_0800603e;\n            ppiVar3 = local_cc;\n            pbVar23 = local_d0;\n          }\n        }\n        puVar2 = PTR_zeroes_7316_08007398;\n        local_134 = (int *)((int)local_134 + (int)param_3);\n        if ((uVar26 & 0x400) != 0) {\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int *)0x0) goto LAB_0800717e;\n          local_108 = local_108 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = local_d4 + 1;\n            local_d0 = pbVar23 + (int)local_104;\n            *ppiVar3 = local_110;\n            ppiVar3[1] = local_104;\n            if (local_d4 < 8) {\n              ppiVar3 = ppiVar3 + 2;\n            }\n            else {\n              iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar5 != 0) goto LAB_0800603e;\n              ppiVar3 = local_cc;\n            }\n            piVar18 = (int *)(uint)*local_108;\n            piVar27 = (int *)((byte *)((int)param_3 + (int)local_138) + -(int)local_134);\n            if ((int)piVar18 <= (int)((byte *)((int)param_3 + (int)local_138) + -(int)local_134)) {\n              piVar27 = piVar18;\n            }\n            if (0 < (int)piVar27) {\n              local_d0 = local_d0 + (int)piVar27;\n              local_d4 = local_d4 + 1;\n              *ppiVar3 = local_134;\n              ppiVar3[1] = piVar27;\n              if (local_d4 < 8) {\n                piVar18 = (int *)(uint)*local_108;\n                ppiVar3 = ppiVar3 + 2;\n              }\n              else {\n                iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n                if (iVar5 != 0) goto LAB_0800603e;\n                ppiVar3 = local_cc;\n                piVar18 = (int *)(uint)*local_108;\n              }\n            }\n            piVar24 = piVar18;\n            if (-1 < (int)piVar27) {\n              piVar24 = (int *)((int)piVar18 - (int)piVar27);\n            }\n            if (0 < (int)piVar24) {\n              for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n                while( true ) {\n                  local_d4 = local_d4 + 1;\n                  local_d0 = local_d0 + 0x10;\n                  *ppiVar3 = (int *)puVar2;\n                  ppiVar3[1] = (int *)0x10;\n                  if (local_d4 < 8) break;\n                  iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n                  if (iVar5 != 0) goto LAB_0800603e;\n                  piVar24 = piVar24 + -4;\n                  ppiVar3 = local_cc;\n                  if ((int)piVar24 < 0x11) goto LAB_08007156;\n                }\n                ppiVar3 = ppiVar3 + 2;\n              }\nLAB_08007156:\n              local_d4 = local_d4 + 1;\n              local_d0 = local_d0 + (int)piVar24;\n              *ppiVar3 = (int *)puVar2;\n              ppiVar3[1] = piVar24;\n              if (local_d4 < 8) {\n                piVar18 = (int *)(uint)*local_108;\n                ppiVar3 = ppiVar3 + 2;\n              }\n              else {\n                iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n                if (iVar5 != 0) goto LAB_0800603e;\n                piVar18 = (int *)(uint)*local_108;\n                ppiVar3 = local_cc;\n              }\n            }\n            local_134 = (int *)((int)local_134 + (int)piVar18);\n            pbVar23 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int *)0x0) {\n              if ((int *)((int)param_3 + (int)local_138) <= local_134) {\n                local_134 = (int *)((int)param_3 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int *)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0[0] < (int)local_138) || ((uVar26 & 1) != 0)) {\n          local_d4 = local_d4 + 1;\n          local_d0 = pbVar23 + (int)piVar4;\n          *ppiVar3 = __s;\n          ppiVar3[1] = piVar4;\n          if (local_d4 < 8) {\n            ppiVar3 = ppiVar3 + 2;\n            pbVar23 = local_d0;\n          }\n          else {\n            iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar5 != 0) goto LAB_0800603e;\n            ppiVar3 = local_cc;\n            pbVar23 = local_d0;\n          }\n        }\n        piVar27 = (int *)((int)local_138 - (int)local_f0[0]);\n        piVar18 = (int *)((byte *)((int)param_3 + (int)local_138) + -(int)local_134);\n        if ((int)piVar27 <= (int)((byte *)((int)param_3 + (int)local_138) + -(int)local_134)) {\n          piVar18 = piVar27;\n        }\n        if (0 < (int)piVar18) {\n          local_d0 = pbVar23 + (int)piVar18;\n          local_d4 = local_d4 + 1;\n          *ppiVar3 = local_134;\n          ppiVar3[1] = piVar18;\n          if (local_d4 < 8) {\n            ppiVar3 = ppiVar3 + 2;\n            pbVar23 = local_d0;\n          }\n          else {\n            iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n            if (iVar5 != 0) goto LAB_0800603e;\n            ppiVar3 = local_cc;\n            piVar27 = (int *)((int)local_138 - (int)local_f0[0]);\n            pbVar23 = local_d0;\n          }\n        }\n        puVar2 = PTR_zeroes_7316_08007088;\n        if (-1 < (int)piVar18) {\n          piVar27 = (int *)((int)piVar27 - (int)piVar18);\n        }\n        piVar18 = (int *)PTR_zeroes_7316_0800788c;\n        if (0 < (int)piVar27) {\n          for (; 0x10 < (int)piVar27; piVar27 = piVar27 + -4) {\n            local_d4 = local_d4 + 1;\n            local_d0 = pbVar23 + 0x10;\n            *ppiVar3 = (int *)puVar2;\n            ppiVar3[1] = (int *)0x10;\n            if (local_d4 < 8) {\n              ppiVar3 = ppiVar3 + 2;\n            }\n            else {\n              iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar5 != 0) goto LAB_0800603e;\n              ppiVar3 = local_cc;\n            }\n            pbVar23 = local_d0;\n            piVar18 = (int *)puVar2;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = local_d4 + 1;\n      local_d0 = pbVar23 + 1;\n      *ppiVar3 = (int *)PTR_DAT_08006a50;\n      ppiVar3[1] = (int *)0x1;\n      if (local_d4 < 8) {\n        ppiVar3 = ppiVar3 + 2;\n      }\n      else {\n        iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar5 != 0) goto LAB_0800603e;\n        ppiVar3 = local_cc;\n      }\n      if (((int)local_f0[0] < (int)local_138) || (pbVar23 = local_d0, (uVar26 & 1) != 0)) {\n        local_d4 = local_d4 + 1;\n        local_d0 = local_d0 + (int)piVar4;\n        *ppiVar3 = __s;\n        ppiVar3[1] = piVar4;\n        if (local_d4 < 8) {\n          ppiVar3 = ppiVar3 + 2;\n        }\n        else {\n          iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n          if (iVar5 != 0) goto LAB_0800603e;\n          ppiVar3 = local_cc;\n        }\n        puVar2 = PTR_zeroes_7316_08006a54;\n        piVar27 = (int *)((int)local_138 + -1);\n        pbVar23 = local_d0;\n        piVar18 = (int *)PTR_zeroes_7316_0800788c;\n        if (0 < (int)piVar27) {\n          for (; 0x10 < (int)piVar27; piVar27 = piVar27 + -4) {\n            local_d4 = local_d4 + 1;\n            local_d0 = pbVar23 + 0x10;\n            *ppiVar3 = (int *)puVar2;\n            ppiVar3[1] = (int *)0x10;\n            if (local_d4 < 8) {\n              ppiVar3 = ppiVar3 + 2;\n            }\n            else {\n              iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n              if (iVar5 != 0) goto LAB_0800603e;\n              ppiVar3 = local_cc;\n            }\n            piVar18 = (int *)puVar2;\n            pbVar23 = local_d0;\n          }\nLAB_08007014:\n          local_d0 = pbVar23 + (int)piVar27;\n          *ppiVar3 = piVar18;\n          ppiVar3[1] = piVar27;\njoined_r0x08006a1c:\n          local_d4 = local_d4 + 1;\n          if (7 < local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  if (((uVar26 & 4) != 0) && (piVar27 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar27))\n  {\n    for (; local_d0 = pbVar23, 0x10 < (int)piVar27; piVar27 = piVar27 + -4) {\n      while( true ) {\n        local_d4 = local_d4 + 1;\n        local_d0 = local_d0 + 0x10;\n        *ppiVar3 = (int *)PTR_blanks_7315_08006720;\n        ppiVar3[1] = (int *)0x10;\n        if (local_d4 < 8) break;\n        iVar5 = __ssprint_r(param_1,param_2,&local_d8);\n        if (iVar5 != 0) goto LAB_0800603e;\n        piVar27 = piVar27 + -4;\n        ppiVar3 = local_cc;\n        if ((int)piVar27 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar3 = ppiVar3 + 2;\n      pbVar23 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = local_d4 + 1;\n    local_d0 = local_d0 + (int)piVar27;\n    *ppiVar3 = (int *)PTR_blanks_7315_08006720;\n    ppiVar3[1] = piVar27;\n    pbVar23 = local_d0;\n    if ((7 < local_d4) &&\n       (iVar5 = __ssprint_r(param_1,param_2,&local_d8), pbVar23 = local_d0, iVar5 != 0))\n    goto LAB_0800603e;\n  }\n  if ((int)local_15c < (int)local_168) {\n    local_15c = local_168;\n  }\n  local_164 = local_164 + (int)local_15c;\n  if ((pbVar23 == (byte *)0x0) || (iVar5 = __ssprint_r(param_1,param_2,&local_d8), iVar5 == 0)) {\n    local_d4 = 0;\n    if (local_148 != (int *)0x0) {\n      _free_r(param_1,local_148);\n    }\n    ppiVar3 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    _free_r(param_1,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  uVar22 = uVar25 - 0x30;\n  piVar18 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar18 + 1);\n    uVar25 = (uint)*(byte *)piVar18;\n    local_15c = (int *)(uVar22 + (int)local_15c * 10);\n    uVar22 = uVar25 - 0x30;\n    piVar18 = piVar28;\n  } while (uVar22 < 10);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  uVar25 = (uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "called": [
                "__aeabi_dcmpeq",
                "__aeabi_dcmpgt",
                "_dtoa_r",
                "_malloc_r",
                "__muldf3",
                "strncpy",
                "__aeabi_dcmple",
                "strlen",
                "__aeabi_dcmplt",
                "__aeabi_uldivmod",
                "__ssprint_r",
                "__unorddf2",
                "__aeabi_i2d",
                "__subdf3",
                "_localeconv_r",
                "_free_r",
                "frexp",
                "memchr",
                "__aeabi_d2iz"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005e9c",
            "calling": [
                "sprintf"
            ],
            "imported": false,
            "current_name": "FUNC_08005e9c"
        },
        "FUN_08000134": {
            "renaming": {
                "FUN_08000134": "get_concatenated_values_08000134",
                "param_1": "init_value",
                "param_2": "object_value",
                "DAT_08000144": "DAT_global_flag",
                "PTR__init_0800014c": "PTR_init_value",
                "PTR_object_8660_08000148": "PTR_object_value"
            },
            "code": "typedef unsigned long long uint64_t;\n\nuint64_t get_concatenated_values_08000134(uint64_t *init_value, uint64_t *object_value)\n{\n    if (DAT_08000144 != 0)\n    {\n        init_value = PTR__init_0800014c;\n        object_value = PTR_object_8660_08000148;\n    }\n    return ((uint64_t)object_value << 32) | (uint64_t)init_value;\n}",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000134",
            "calling": [
                "__libc_init_array",
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "get_concatenated_values_08000134"
        },
        "FUN_08005704": {
            "renaming": {
                "FUN_08005704": "increment_tick_and_handle_systick_interrupt_08005704"
            },
            "code": "void increment_tick_and_handle_systick_interrupt_08005704(void)\n{\n  HAL_IncTick();\n  HAL_SYSTICK_IRQHandler();\n  return;\n}",
            "called": [
                "HAL_IncTick",
                "HAL_SYSTICK_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005704",
            "calling": [],
            "imported": false,
            "current_name": "increment_tick_and_handle_systick_interrupt_08005704"
        },
        "FUN_08002ca8": {
            "renaming": {
                "FUN_08002ca8": "wait_for_i2c_flag_08002ca8",
                "*hi2c": "*i2c_handle",
                "Timeout": "timeout",
                "Tickstart": "tickstart",
                "uVar1": "current_tick"
            },
            "code": "HAL_StatusTypeDef wait_for_i2c_flag_08002ca8(I2C_HandleTypeDef *i2c_handle, uint32_t timeout, uint32_t tickstart)\n{\n  uint32_t current_tick;\n  while(true)\n  {\n    if((i2c_handle->Instance->SR1 & 0x40) == 0x40)\n    {\n      return HAL_OK;\n    }\n    if((i2c_handle->Instance->SR1 & 0x10) == 0x10)\n    {\n      break;\n    }\n    if((timeout == 0) || ((current_tick = HAL_GetTick()) - tickstart > timeout))\n    {\n      i2c_handle->ErrorCode |= 0x20;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      i2c_handle->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  }\n  i2c_handle->Instance->SR1 &= 0xffffffef;\n  i2c_handle->ErrorCode = 0;\n  i2c_handle->PreviousState = 0;\n  i2c_handle->State = HAL_I2C_STATE_READY;\n  i2c_handle->Lock = HAL_UNLOCKED;\n  return HAL_ERROR;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca8",
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "imported": false,
            "current_name": "wait_for_i2c_flag_08002ca8"
        },
        "FUN_08003a94": {
            "renaming": {
                "FUN_08003a94": "configureTimer_08003a94",
                "htim": "timerHandle",
                "sClockSourceConfig": "clockConfig",
                "HVar1": "status",
                "tmpsmcr": "smcrValue",
                "ClockSource": "clockSource",
                "HAL_LOCKED": "HAL_LOCKED",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_TIM_STATE_BUSY": "HAL_TIM_STATE_BUSY",
                "HAL_TIM_STATE_READY": "HAL_TIM_STATE_READY",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "SMCR": "SMCR",
                "ClockPolarity": "clockPolarity",
                "ClockFilter": "clockFilter",
                "ClockPrescaler": "clockPrescaler",
                "TIM_CLOCKSOURCE_TI1": "TIM_CLOCKSOURCE_TI1",
                "TIM_CLOCKSOURCE_INTERNAL": "TIM_CLOCKSOURCE_INTERNAL",
                "TIM_CLOCKSOURCE_ETRMODE2": "TIM_CLOCKSOURCE_ETRMODE2",
                "TIM_CLOCKSOURCE_TI2": "TIM_CLOCKSOURCE_TI2",
                "TIM_CLOCKSOURCE_ETRMODE1": "TIM_CLOCKSOURCE_ETRMODE1",
                "TIM_CLOCKSOURCE_EXTERNAL": "TIM_CLOCKSOURCE_EXTERNAL",
                "TIM_CLOCKSOURCE_ITR1": "TIM_CLOCKSOURCE_ITR1",
                "TIM_CLOCKSOURCE_ITR2": "TIM_CLOCKSOURCE_ITR2",
                "TIM_CLOCKSOURCE_ITR3": "TIM_CLOCKSOURCE_ITR3",
                "TIM_TI1_ConfigInputStage": "TIM_TI1_ConfigInputStage",
                "TIM_TI2_ConfigInputStage": "TIM_TI2_ConfigInputStage",
                "TIM_ITRx_SetConfig": "TIM_ITRx_SetConfig",
                "TIM_ETR_SetConfig": "TIM_ETR_SetConfig",
                "TIM_TS_TI1": "TIM_TS_TI1",
                "TIM_TS_ITR0": "TIM_TS_ITR0",
                "TIM_TS_TI2": "TIM_TS_TI2",
                "TIM_TS_ITR1": "TIM_TS_ITR1",
                "TIM_TS_ITR2": "TIM_TS_ITR2",
                "TIM_TS_ITR3": "TIM_TS_ITR3"
            },
            "code": "HAL_StatusTypeDef configureTimer_08003a94(TIM_HandleTypeDef *timerHandle, TIM_ClockConfigTypeDef *clockConfig)\n{\n  HAL_StatusTypeDef status;\n  uint32_t clockSource = clockConfig->ClockSource;\n  uint32_t smcrValue;\n  \n  if (timerHandle->Lock == HAL_LOCKED) {\n    status = HAL_BUSY;\n  }\n  else {\n    timerHandle->Lock = HAL_LOCKED;\n    timerHandle->State = HAL_TIM_STATE_BUSY;\n    \n    // Clear bits 7-0 and 15-8 in SMCR register\n    timerHandle->Instance->SMCR &= 0xffff0088;\n    \n    switch (clockSource) {\n      case TIM_CLOCKSOURCE_TI1:\n        TIM_TI1_ConfigInputStage(timerHandle->Instance, clockConfig->ClockPolarity, clockConfig->ClockFilter);\n        TIM_ITRx_SetConfig(timerHandle->Instance, TIM_TS_TI1);\n        break;\n      case TIM_CLOCKSOURCE_INTERNAL:\n        TIM_ITRx_SetConfig(timerHandle->Instance, TIM_TS_ITR0);\n        break;\n      case TIM_CLOCKSOURCE_ETRMODE2:\n        TIM_ETR_SetConfig(timerHandle->Instance, clockConfig->ClockPrescaler, clockConfig->ClockPolarity, clockConfig->ClockFilter);\n        smcrValue = (timerHandle->Instance->SMCR & 0xffffff88) | 0x77;\n        timerHandle->Instance->SMCR = smcrValue;\n        break;\n      case TIM_CLOCKSOURCE_TI2:\n        TIM_TI2_ConfigInputStage(timerHandle->Instance, clockConfig->ClockPolarity, clockConfig->ClockFilter);\n        TIM_ITRx_SetConfig(timerHandle->Instance, TIM_TS_TI2);\n        break;\n      case TIM_CLOCKSOURCE_ETRMODE1:\n        TIM_ETR_SetConfig(timerHandle->Instance, clockConfig->ClockPrescaler, clockConfig->ClockPolarity, clockConfig->ClockFilter);\n        timerHandle->Instance->SMCR &= 0xfffffff8;\n        break;\n      case TIM_CLOCKSOURCE_EXTERNAL:\n        TIM_ITRx_SetConfig(timerHandle->Instance, TIM_TS_ITR1);\n        break;\n      case TIM_CLOCKSOURCE_ITR1:\n        TIM_ITRx_SetConfig(timerHandle->Instance, TIM_TS_ITR1);\n        break;\n      case TIM_CLOCKSOURCE_ITR2:\n        TIM_ITRx_SetConfig(timerHandle->Instance, TIM_TS_ITR2);\n        break;\n      case TIM_CLOCKSOURCE_ITR3:\n        TIM_ITRx_SetConfig(timerHandle->Instance, TIM_TS_ITR3);\n        break;\n      default:\n        break;\n    }\n    \n    timerHandle->State = HAL_TIM_STATE_READY;\n    timerHandle->Lock = HAL_UNLOCKED;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [
                "TIM_ETR_SetConfig",
                "TIM_ITRx_SetConfig",
                "TIM_TI1_ConfigInputStage",
                "TIM_TI2_ConfigInputStage"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a94",
            "calling": [
                "MX_TIM1_Init",
                "MX_TIM2_Init"
            ],
            "imported": false,
            "current_name": "configureTimer_08003a94"
        },
        "FUN_0800416a": {
            "renaming": {
                "FUN_0800416a": "configure_timer_0800416a",
                "TIMx": "timer",
                "InputTriggerSource": "input_trigger_source",
                "tmpsmcr": "smcr",
                "0xffffff8f": "SMCR_MASK",
                "7": "TRIGGER_OFFSET"
            },
            "code": "void configure_timer_0800416a(TIM_TypeDef *timer, uint16_t input_trigger_source)\n{\n    const uint32_t SMCR_MASK = 0xffffff8f;\n    const uint32_t TRIGGER_OFFSET = 7;\n    uint32_t smcr = timer->SMCR;\n    smcr &= SMCR_MASK;\n    smcr |= (uint32_t)(input_trigger_source | TRIGGER_OFFSET);\n    timer->SMCR = smcr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800416a",
            "calling": [
                "HAL_TIM_ConfigClockSource"
            ],
            "imported": false,
            "current_name": "configure_timer_0800416a"
        },
        "FUN_080059f0": {
            "renaming": {
                "FUN_080059f0": "FUNC_080059f0"
            },
            "code": "\ndouble FUNC_080059f0(double __x)\n\n{\n  int in_r0;\n  undefined4 uVar1;\n  undefined4 uVar2;\n  uint in_r1;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 extraout_r1;\n  undefined4 in_r3;\n  undefined4 unaff_r4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  uint uVar7;\n  int iVar8;\n  double in_d0;\n  double dVar9;\n  double extraout_d0;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  \n  uVar10 = CONCAT44(in_r1,in_r0);\n  uVar7 = in_r1 & 0x7fffffff;\n  if (DAT_08005cd8 < (int)uVar7) {\n    if ((uVar7 == DAT_08005cdc || (int)uVar7 < (int)DAT_08005cdc) &&\n       ((uVar7 != DAT_08005cdc || (in_r0 == 0)))) {\n      return in_d0;\n    }\n    dVar9 = (double)__aeabi_dadd();\n  }\n  else {\n    if (DAT_08005cec < (int)uVar7) {\n      fabs((double)CONCAT44(unaff_r4,in_r3));\n      if (DAT_08005cfc < (int)uVar7) {\n        if (DAT_08005d00 < (int)uVar7) {\n          uVar10 = __divdf3(0,DAT_08005d08,in_r0,extraout_r1);\n          iVar8 = 3;\n        }\n        else {\n          uVar10 = __subdf3();\n          uVar11 = __muldf3(in_r0,extraout_r1,0,DAT_08005d04);\n          uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_08005cf8);\n          uVar10 = __divdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                            (int)((ulonglong)uVar11 >> 0x20));\n          iVar8 = 2;\n        }\n      }\n      else if (DAT_08005cfc + -0xd0000 < (int)uVar7) {\n        uVar10 = __subdf3();\n        uVar11 = __aeabi_dadd(in_r0,extraout_r1,0,DAT_08005cf8);\n        uVar10 = __divdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n        iVar8 = 1;\n      }\n      else {\n        uVar10 = __aeabi_dadd();\n        uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005cf8);\n        uVar11 = __aeabi_dadd(in_r0,extraout_r1,0,0x40000000);\n        uVar10 = __divdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n        iVar8 = 0;\n      }\n    }\n    else {\n      if ((int)uVar7 <= DAT_08005cec + -0x1bc0000) {\n        uVar11 = __aeabi_dadd(in_r0,in_r1,DAT_08005cd0,DAT_08005cd4);\n        iVar8 = __aeabi_dcmpgt((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_08005cf8);\n        if (iVar8 != 0) {\n          return extraout_d0;\n        }\n      }\n      iVar8 = -1;\n    }\n    uVar6 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar5 = (undefined4)uVar10;\n    uVar10 = __muldf3(uVar5,uVar6,uVar5,uVar6);\n    uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar1 = (undefined4)uVar10;\n    uVar10 = __muldf3(uVar1,uVar3,uVar1,uVar3);\n    uVar4 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar2 = (undefined4)uVar10;\n    uVar10 = __muldf3(uVar2,uVar4,DAT_08005c78,DAT_08005c7c);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005c80,DAT_08005c84);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar4);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005c88,DAT_08005c8c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar4);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005c90,DAT_08005c94);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar4);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005c98,DAT_08005c9c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar4);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005ca0,DAT_08005ca4);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar1,uVar3);\n    uVar11 = __muldf3(uVar2,uVar4,DAT_08005ca8,DAT_08005cac);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005cb0,DAT_08005cb4);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar4);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005cb8,DAT_08005cbc);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar4);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005cc0,DAT_08005cc4);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar4);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005cc8,DAT_08005ccc);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar4);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar5,uVar6);\n    uVar1 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    if (iVar8 == -1) {\n      dVar9 = (double)__subdf3(uVar5,uVar6,(int)uVar10,uVar1);\n      return dVar9;\n    }\n    uVar10 = __subdf3((int)uVar10,uVar1,*(undefined4 *)(PTR_FUNC_080059f0lo_08005cf0 + iVar8 * 8),\n                      *(undefined4 *)((int)(PTR_FUNC_080059f0lo_08005cf0 + iVar8 * 8) + 4));\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar5,uVar6);\n    dVar9 = (double)__subdf3(*(undefined4 *)(PTR_FUNC_080059f0hi_08005cf4 + iVar8 * 8),\n                             *(undefined4 *)((int)(PTR_FUNC_080059f0hi_08005cf4 + iVar8 * 8) + 4),(int)uVar10\n                             ,(int)((ulonglong)uVar10 >> 0x20));\n    if ((int)in_r1 < 0) {\n      return dVar9;\n    }\n  }\n  return dVar9;\n}\n\n",
            "called": [
                "__subdf3",
                "__aeabi_dcmpgt",
                "__muldf3",
                "__divdf3",
                "__aeabi_dadd",
                "fabs"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080059f0",
            "calling": [
                "__ieee754_atan2"
            ],
            "imported": false,
            "current_name": "FUNC_080059f0"
        },
        "FUN_08001ccc": {
            "renaming": {
                "FUN_08001ccc": "write_i2c_memory_08001ccc",
                "*hi2c": "*i2c_handle",
                "DevAddress": "device_address",
                "MemAddress": "memory_address",
                "MemAddSize": "memory_address_size",
                "*pData": "*data",
                "Size": "size",
                "Timeout": "timeout",
                "Tickstart": "start_time",
                "uVar1": "status_reg",
                "HVar2": "status",
                "uVar3": "current_time",
                "cVar4": "is_busy",
                "uVar5": "transfer_size",
                "iVar6": "loop_counter",
                "*pbVar7": "*buffer_ptr",
                "bVar8": "is_zero",
                "tickstart": "tickstart"
            },
            "code": "HAL_StatusTypeDef write_i2c_memory_08001ccc(I2C_HandleTypeDef *i2c_handle, uint16_t device_address, uint16_t memory_address, uint16_t memory_address_size, uint8_t *data, uint16_t size, uint32_t timeout)\n{\n  uint32_t start_time;\n  uint32_t current_time;\n  uint32_t tickstart;\n  uint16_t transfer_size;\n  uint8_t *buffer_ptr;\n  bool is_busy;\n  HAL_StatusTypeDef status;\n\n  start_time = HAL_GetTick();\n  transfer_size = size;\n  buffer_ptr = data;\n  is_busy = false;\n\n  if (i2c_handle->State == HAL_I2C_STATE_READY) {\n    do {\n      if ((PTR_DAT_08001f64 >> 0x10 & 0xff) == 1) {\n        uint16_t status_reg_1 = PTR_DAT_08001f64 & ~i2c_handle->Instance->SR1 & 0xffff;\n        is_busy = (status_reg_1 == 0);\n      }\n      else {\n        uint16_t status_reg_2 = PTR_DAT_08001f64 & ~i2c_handle->Instance->SR2 & 0xffff;\n        is_busy = (status_reg_2 == 0);\n      }\n      if (is_busy) {\n        current_time = HAL_GetTick();\n      }\n    } while (is_busy && current_time - start_time < timeout);\n\n    if (!is_busy) {\n      i2c_handle->PreviousState = 0;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      i2c_handle->Mode = HAL_I2C_MODE_NONE;\n      i2c_handle->Lock = HAL_UNLOCKED;\n      status = HAL_TIMEOUT;\n    }\n    else {\n      if (i2c_handle->Lock == HAL_LOCKED) {\n        status = HAL_BUSY;\n      }\n      else {\n        i2c_handle->Lock = HAL_LOCKED;\n        if ((i2c_handle->Instance->CR1 & 1) != 1) {\n          i2c_handle->Instance->CR1 |= 1;\n        }\n        i2c_handle->Instance->CR1 &= 0xfffff7ff;\n        i2c_handle->State = HAL_I2C_STATE_BUSY_TX;\n        i2c_handle->Mode = HAL_I2C_MODE_MEM;\n        i2c_handle->ErrorCode = 0;\n        i2c_handle->pBuffPtr = buffer_ptr;\n        i2c_handle->XferCount = size;\n        i2c_handle->XferOptions = PTR_DAT_08001f68;\n        i2c_handle->XferSize = transfer_size;\n        status = I2C_RequestMemoryWrite(i2c_handle, device_address, memory_address, memory_address_size, timeout, start_time);\n\n        if (status == HAL_OK) {\n          while (i2c_handle->XferSize != 0) {\n            status = I2C_WaitOnTXEFlagUntilTimeout(i2c_handle, timeout, start_time);\n            if (status != HAL_OK) {\n              if (i2c_handle->ErrorCode == 4) {\n                i2c_handle->Instance->CR1 |= 0x200;\n                return HAL_ERROR;\n              }\n              return HAL_TIMEOUT;\n            }\n            *i2c_handle->pBuffPtr++ = i2c_handle->Instance->DR;\n            i2c_handle->XferSize--;\n            i2c_handle->XferCount--;\n\n            if (((i2c_handle->Instance->SR1 & 4) == 4) && (i2c_handle->XferSize != 0)) {\n              *i2c_handle->pBuffPtr++ = i2c_handle->Instance->DR;\n              i2c_handle->XferSize--;\n              i2c_handle->XferCount--;\n            }\n          }\n          status = I2C_WaitOnBTFFlagUntilTimeout(i2c_handle, timeout, start_time);\n          if (status == HAL_OK) {\n            i2c_handle->Instance->CR1 |= 0x200;\n            i2c_handle->State = HAL_I2C_STATE_READY;\n            i2c_handle->Mode = HAL_I2C_MODE_NONE;\n            i2c_handle->Lock = HAL_UNLOCKED;\n            status = HAL_OK;\n          }\n          else if (i2c_handle->ErrorCode == 4) {\n            i2c_handle->Instance->CR1 |= 0x200;\n            status = HAL_ERROR;\n          }\n          else {\n            status = HAL_TIMEOUT;\n          }\n        }\n        else if (i2c_handle->ErrorCode == 4) {\n          i2c_handle->Lock = HAL_UNLOCKED;\n          status = HAL_ERROR;\n        }\n        else {\n          i2c_handle->Lock = HAL_UNLOCKED;\n          status = HAL_TIMEOUT;\n        }\n      }\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}",
            "called": [
                "I2C_WaitOnBTFFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "HAL_GetTick",
                "I2C_RequestMemoryWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ccc",
            "calling": [
                "_i2c_write_reg"
            ],
            "imported": false,
            "current_name": "write_i2c_memory_08001ccc"
        },
        "FUN_0800157c": {
            "renaming": {
                "FUN_0800157c": "update_uwTick_0800157c",
                "PTR_uwTick_0800159c": "uwTick",
                "PTR_uwTickFreq_08001598": "uwTickFreq"
            },
            "code": "void update_uwTick_0800157c(void)\n{\n    uint32_t *PTR_uwTick_0800159c = (uint32_t *)PTR_PTR_uwTick_0800159c_0800159c;\n    int32_t *PTR_PTR_uwTick_0800159cFreq_08001598 = (int32_t *)PTR_PTR_PTR_uwTick_0800159cFreq_08001598_08001598;\n    *PTR_uwTick_0800159c += (uint32_t)((uint8_t)*PTR_PTR_uwTick_0800159cFreq_08001598);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "update_uwTick_0800157c"
        },
        "FUN_0800121c": {
            "renaming": {
                "FUN_0800121c": "FUNC_0800121c"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 FUNC_0800121c(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  ulonglong uVar1;\n  uint uVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint *puVar9;\n  uint *puVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  undefined8 uVar15;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar6 = count_leading_zeroes(param_3);\n      if (uVar6 != 0) {\n        param_3 = param_3 << (uVar6 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar6 & 0xff) | param_2 << (uVar6 & 0xff);\n        param_1 = param_1 << (uVar6 & 0xff);\n      }\n      uVar12 = param_3 >> 0x10;\n      uVar8 = param_2 / uVar12;\n      uVar11 = uVar8 * (param_3 & 0xffff);\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar12 * uVar8) * 0x10000;\n      uVar4 = uVar8;\n      if (uVar7 <= uVar11 && uVar11 - uVar7 != 0) {\n        bVar14 = CARRY4(param_3,uVar7);\n        uVar7 = param_3 + uVar7;\n        uVar4 = uVar8 - 1;\n        if ((bVar14 == false) && (uVar7 <= uVar11 && uVar11 - uVar7 != 0)) {\n          uVar4 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar2 = (uVar7 - uVar11) / uVar12;\n      uVar5 = uVar2 * (param_3 & 0xffff);\n      uVar8 = param_1 & 0xffff | ((uVar7 - uVar11) - uVar12 * uVar2) * 0x10000;\n      uVar7 = uVar2;\n      if (uVar8 <= uVar5 && uVar5 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar7 = uVar2 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar5 && uVar5 - uVar8 != 0)) {\n          uVar7 = uVar2 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      puVar3 = (uint *)(uVar7 | uVar4 << 0x10);\n      puVar9 = (uint *)0x0;\n      uVar8 = uVar8 - uVar5;\n    }\n    else {\n      if (param_3 == 0) {\n                    /* WARNING: Could not recover jumptable at 0x08001302. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (code *)software_udf(0xff,0x8001302);\n        uVar15 = (*UNRECOVERED_JUMPTABLE)();\n        return uVar15;\n      }\n      uVar6 = count_leading_zeroes(param_3);\n      if (uVar6 == 0) {\n        puVar9 = (uint *)0x1;\n        param_2 = param_2 - param_3;\n        uVar12 = param_3 >> 0x10;\n        uVar2 = param_3 & 0xffff;\n      }\n      else {\n        param_3 = param_3 << (uVar6 & 0xff);\n        uVar4 = param_2 >> (0x20 - uVar6 & 0xff);\n        uVar12 = param_3 >> 0x10;\n        uVar11 = uVar4 / uVar12;\n        uVar2 = param_3 & 0xffff;\n        uVar5 = uVar11 * uVar2;\n        uVar8 = param_1 >> (0x20 - uVar6 & 0xff) | param_2 << (uVar6 & 0xff);\n        uVar7 = uVar8 >> 0x10 | (uVar4 - uVar12 * uVar11) * 0x10000;\n        param_1 = param_1 << (uVar6 & 0xff);\n        uVar4 = uVar11;\n        if (uVar7 <= uVar5 && uVar5 - uVar7 != 0) {\n          bVar14 = CARRY4(param_3,uVar7);\n          uVar7 = param_3 + uVar7;\n          uVar4 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar5 && uVar5 - uVar7 != 0)) {\n            uVar4 = uVar11 - 2;\n            uVar7 = uVar7 + param_3;\n          }\n        }\n        uVar11 = (uVar7 - uVar5) / uVar12;\n        uVar13 = uVar11 * uVar2;\n        param_2 = uVar8 & 0xffff | ((uVar7 - uVar5) - uVar12 * uVar11) * 0x10000;\n        uVar7 = uVar11;\n        if (param_2 <= uVar13 && uVar13 - param_2 != 0) {\n          bVar14 = CARRY4(param_3,param_2);\n          param_2 = param_3 + param_2;\n          uVar7 = uVar11 - 1;\n          if ((bVar14 == false) && (param_2 <= uVar13 && uVar13 - param_2 != 0)) {\n            uVar7 = uVar11 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar13;\n        puVar9 = (uint *)(uVar7 | uVar4 << 0x10);\n      }\n      uVar11 = param_2 / uVar12;\n      uVar7 = uVar2 * uVar11;\n      uVar8 = param_1 >> 0x10 | (param_2 - uVar12 * uVar11) * 0x10000;\n      uVar4 = uVar11;\n      if (uVar8 <= uVar7 && uVar7 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar4 = uVar11 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar7 && uVar7 - uVar8 != 0)) {\n          uVar4 = uVar11 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar11 = (uVar8 - uVar7) / uVar12;\n      uVar2 = uVar2 * uVar11;\n      uVar8 = param_1 & 0xffff | ((uVar8 - uVar7) - uVar12 * uVar11) * 0x10000;\n      uVar7 = uVar11;\n      if (uVar8 <= uVar2 && uVar2 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar7 = uVar11 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar2 && uVar2 - uVar8 != 0)) {\n          uVar7 = uVar11 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar8 = uVar8 - uVar2;\n      puVar3 = (uint *)(uVar7 | uVar4 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar8 >> (uVar6 & 0xff);\n      param_5[1] = 0;\n    }\n  }\n  else {\n    puVar9 = param_5;\n    if (param_2 < param_4) {\n      puVar3 = param_5;\n      if (param_5 != (uint *)0x0) {\n        *param_5 = param_1;\n        param_5[1] = param_2;\n        return 0;\n      }\n    }\n    else {\n      puVar10 = (uint *)count_leading_zeroes(param_4);\n      if (puVar10 == (uint *)0x0) {\n        if ((param_4 < param_2) || (puVar3 = puVar10, param_3 <= param_1)) {\n          bVar14 = param_1 < param_3;\n          param_1 = param_1 - param_3;\n          param_2 = (param_2 - param_4) - (uint)bVar14;\n          puVar3 = (uint *)0x1;\n        }\n        puVar9 = puVar10;\n        if (param_5 != (uint *)0x0) {\n          *param_5 = param_1;\n          param_5[1] = param_2;\n        }\n      }\n      else {\n        uVar8 = 0x20 - (int)puVar10;\n        uVar2 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar10 & 0xff);\n        uVar6 = param_2 >> (uVar8 & 0xff);\n        uVar5 = uVar2 >> 0x10;\n        uVar11 = uVar6 / uVar5;\n        uVar12 = uVar11 * (uVar2 & 0xffff);\n        uVar4 = param_2 << ((uint)puVar10 & 0xff) | param_1 >> (uVar8 & 0xff);\n        uVar7 = uVar4 >> 0x10 | (uVar6 - uVar5 * uVar11) * 0x10000;\n        param_3 = param_3 << ((uint)puVar10 & 0xff);\n        param_1 = param_1 << ((uint)puVar10 & 0xff);\n        uVar6 = uVar11;\n        if (uVar7 <= uVar12 && uVar12 - uVar7 != 0) {\n          bVar14 = CARRY4(uVar2,uVar7);\n          uVar7 = uVar2 + uVar7;\n          uVar6 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar12 && uVar12 - uVar7 != 0)) {\n            uVar6 = uVar11 - 2;\n            uVar7 = uVar7 + uVar2;\n          }\n        }\n        uVar11 = (uVar7 - uVar12) / uVar5;\n        uVar13 = uVar11 * (uVar2 & 0xffff);\n        uVar7 = uVar4 & 0xffff | ((uVar7 - uVar12) - uVar5 * uVar11) * 0x10000;\n        uVar4 = uVar11;\n        if (uVar7 <= uVar13 && uVar13 - uVar7 != 0) {\n          bVar14 = CARRY4(uVar2,uVar7);\n          uVar7 = uVar2 + uVar7;\n          uVar4 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar13 && uVar13 - uVar7 != 0)) {\n            uVar4 = uVar11 - 2;\n            uVar7 = uVar7 + uVar2;\n          }\n        }\n        puVar3 = (uint *)(uVar4 | uVar6 << 0x10);\n        uVar1 = ZEXT48(puVar3) * (ulonglong)param_3;\n        if (CONCAT44(uVar7 - uVar13,param_1) < uVar1) {\n          puVar3 = (uint *)((int)puVar3 + -1);\n          uVar1 = uVar1 - CONCAT44(uVar2,param_3);\n        }\n        if (param_5 != (uint *)0x0) {\n          uVar6 = ((uVar7 - uVar13) - (int)(uVar1 >> 0x20)) - (uint)(param_1 < (uint)uVar1);\n          *param_5 = uVar6 << (uVar8 & 0xff) | param_1 - (uint)uVar1 >> ((uint)puVar10 & 0xff);\n          param_5[1] = uVar6 >> ((uint)puVar10 & 0xff);\n          puVar9 = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(puVar9,puVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800121c",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "FUNC_0800121c"
        },
        "FUN_080036f8": {
            "renaming": {
                "FUN_080036f8": "handle_timer_interrupt_080036f8",
                "htim": "timer_handle",
                "Instance": "instance",
                "SR": "status_register",
                "DIER": "interrupt_enable_register",
                "Channel": "channel"
            },
            "code": "void handle_timer_interrupt_080036f8(TIM_HandleTypeDef *timer_handle)\n{\n    uint32_t status_register = timer_handle->Instance->SR;\n    uint32_t interrupt_enable_register = timer_handle->Instance->DIER;\n\n    if ((status_register & TIM_SR_CC1IF) && (interrupt_enable_register & TIM_DIER_CC1IE)) {\n        timer_handle->Instance->SR &= ~(TIM_SR_CC1IF);\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_1;\n\n        if ((timer_handle->Instance->CCMR1 & TIM_CCMR1_OC1M) == 0) {\n            HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n            HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n        }\n        else {\n            HAL_TIM_IC_CaptureCallback(timer_handle);\n        }\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n    }\n\n    if ((status_register & TIM_SR_CC2IF) && (interrupt_enable_register & TIM_DIER_CC2IE)) {\n        timer_handle->Instance->SR &= ~(TIM_SR_CC2IF);\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_2;\n\n        if ((timer_handle->Instance->CCMR1 & TIM_CCMR1_OC2M) == 0) {\n            HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n            HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n        }\n        else {\n            HAL_TIM_IC_CaptureCallback(timer_handle);\n        }\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n    }\n\n    if ((status_register & TIM_SR_CC3IF) && (interrupt_enable_register & TIM_DIER_CC3IE)) {\n        timer_handle->Instance->SR &= ~(TIM_SR_CC3IF);\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_3;\n\n        if ((timer_handle->Instance->CCMR2 & TIM_CCMR2_OC3M) == 0) {\n            HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n            HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n        }\n        else {\n            HAL_TIM_IC_CaptureCallback(timer_handle);\n        }\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n    }\n\n    if ((status_register & TIM_SR_CC4IF) && (interrupt_enable_register & TIM_DIER_CC4IE)) {\n        timer_handle->Instance->SR &= ~(TIM_SR_CC4IF);\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_4;\n\n        if ((timer_handle->Instance->CCMR2 & TIM_CCMR2_OC4M) == 0) {\n            HAL_TIM_OC_DelayElapsedCallback(timer_handle);\n            HAL_TIM_PWM_PulseFinishedCallback(timer_handle);\n        }\n        else {\n            HAL_TIM_IC_CaptureCallback(timer_handle);\n        }\n        timer_handle->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n    }\n\n    if ((status_register & TIM_SR_UIF) && (interrupt_enable_register & TIM_DIER_UIE)) {\n        timer_handle->Instance->SR &= ~(TIM_SR_UIF);\n        HAL_TIM_PeriodElapsedCallback(timer_handle);\n    }\n\n    if ((status_register & TIM_SR_BIF) && (interrupt_enable_register & TIM_DIER_BIE)) {\n        timer_handle->Instance->SR &= ~(TIM_SR_BIF);\n        HAL_TIMEx_BreakCallback(timer_handle);\n    }\n\n    if ((status_register & TIM_SR_TIF) && (interrupt_enable_register & TIM_DIER_TIE)) {\n        timer_handle->Instance->SR &= ~(TIM_SR_TIF);\n        HAL_TIM_TriggerCallback(timer_handle);\n    }\n\n    if ((status_register & TIM_SR_COMIF) && (interrupt_enable_register & TIM_DIER_COMIE)) {\n        timer_handle->Instance->SR &= ~(TIM_SR_COMIF);\n        HAL_TIMEx_CommutationCallback(timer_handle);\n    }\n}\n",
            "called": [
                "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIM_IC_CaptureCallback",
                "HAL_TIM_TriggerCallback",
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIMEx_CommutationCallback",
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIMEx_BreakCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036f8",
            "calling": [
                "TIM2_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_timer_interrupt_080036f8"
        },
        "FUN_080009e8": {
            "renaming": {
                "FUN_080009e8": "isEndOfString_080009e8",
                "in_CY": "currentChar"
            },
            "code": "bool isEndOfString_080009e8(void)\n{\n  char currentChar;\n  __aeabi_cdrcmple();\n  return currentChar == '\\0';\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009e8",
            "calling": [
                "_dtoa_r",
                "_svfprintf_r",
                "atan"
            ],
            "imported": false,
            "current_name": "isEndOfString_080009e8"
        },
        "FUN_08009630": {
            "renaming": {
                "FUN_08009630": "allocate_memory_and_set_values_08009630",
                "param_1": "mem_size",
                "param_2": "param_2",
                "param_3": "bit_shift",
                "param_4": "param_4",
                "param_5": "out_param_5",
                "param_6": "out_param_6",
                "iVar1": "mem_ptr",
                "uVar2": "value1",
                "iVar3": "bit_count",
                "iVar4": "num_values",
                "uVar5": "remaining_bits",
                "uVar6": "value2",
                "uVar7": "bit_index",
                "local_20": "local_bit_shift",
                "local_1c": "local_value"
            },
            "code": "int allocate_memory_and_set_values_08009630(undefined4 mem_size, undefined4 param_2, uint bit_shift, uint param_4, int *out_param_5, int *out_param_6) {\n  int mem_ptr;\n  uint bit_count;\n  int num_values;\n  int remaining_bits;\n  uint value1;\n  uint value2;\n  undefined8 bit_index;\n  uint local_20;\n  uint local_1c;\n  \n  mem_ptr = _Balloc(mem_size, 1);\n  value2 = (param_4 << 1) >> 0x15;\n  local_1c = param_4 & 0xfffff;\n  if (value2 != 0) {\n    local_1c = local_1c | 0x100000;\n  }\n  if (bit_shift == 0) {\n    bit_count = __lo0bits(&local_1c);\n    num_values = 1;\n    value1 = bit_count + 0x20;\n    *(undefined4 *)(mem_ptr + 0x10) = 1;\n    *(uint *)(mem_ptr + 0x14) = local_1c;\n  }\n  else {\n    local_20 = bit_shift;\n    value1 = __lo0bits(&local_20);\n    if (value1 == 0) {\n      *(uint *)(mem_ptr + 0x14) = local_20;\n    }\n    else {\n      remaining_bits = local_1c << (0x20 - value1 & 0xff);\n      local_1c = local_1c >> (value1 & 0xff);\n      *(uint *)(mem_ptr + 0x14) = remaining_bits | local_20;\n    }\n    if (local_1c == 0) {\n      num_values = 1;\n    }\n    else {\n      num_values = 2;\n    }\n    *(uint *)(mem_ptr + 0x18) = local_1c;\n    *(int *)(mem_ptr + 0x10) = num_values;\n  }\n  if (value2 == 0) {\n    *out_param_5 = value1 - 0x432;\n    bit_index = __hi0bits(*(undefined4 *)(mem_ptr + num_values * 4 + 0x10));\n    *out_param_6 = (int)((ulonglong)bit_index >> 0x20) * 0x20 - (int)bit_index;\n    return mem_ptr;\n  }\n  *out_param_5 = (value2 - 0x433) + value1;\n  *out_param_6 = 0x35 - value1;\n  return mem_ptr;\n}",
            "called": [
                "_Balloc",
                "__hi0bits",
                "__lo0bits"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009630",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_and_set_values_08009630"
        },
        "FUN_08005830": {
            "renaming": {
                "FUN_08005830": "infiniteLoop_08005830"
            },
            "code": "void infiniteLoop_08005830(void)\n{\n  while( true ) {\n    // do nothing\n  }\n}",
            "called": [
                "USBWakeUp_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005830",
            "calling": [
                "USBWakeUp_IRQHandler"
            ],
            "imported": false,
            "current_name": "infiniteLoop_08005830"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "handle_timer_interrupt_08005714",
                "PTR_htim2_08005724": "timer_handler"
            },
            "code": "void handle_timer_interrupt_08005714(void)\n{\n  HAL_TIM_IRQHandler(&PTR_htim2_08005724);\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08005714"
        },
        "FUN_08005834": {
            "renaming": {
                "FUN_08005834": "calculate_trig_values_08005834",
                "param_1": "numerator_1",
                "param_2": "numerator_2",
                "param_3": "denominator_1",
                "param_4": "denominator_2",
                "param_5": "angle_in_radians",
                "iVar1": "difference",
                "unaff_r4": "undefined_variable",
                "uVar2": "sign_bit",
                "uVar3": "absolute_denominator_1",
                "uVar4": "absolute_denominator_2",
                "uVar5": "subtraction_result"
            },
            "code": "void calculate_trig_values_08005834(uint numerator_1, uint numerator_2, uint denominator_1, uint denominator_2, double angle_in_radians) {\n  int difference;\n  undefined4 undefined_variable;\n  uint absolute_denominator_1;\n  uint absolute_denominator_2;\n  uint sign_bit;\n  undefined8 subtraction_result;\n  \n  absolute_denominator_1 = denominator_1 & 0x7fffffff;\n  absolute_denominator_2 = denominator_2 & 0x7fffffff;\n  if ((DAT_080059e8 < (absolute_denominator_1 | (-numerator_1 | numerator_1) >> 0x1f)) || (DAT_080059e8 < (absolute_denominator_2 | (-numerator_2 | numerator_2) >> 0x1f))) {\n    __aeabi_dadd(denominator_1, denominator_2, numerator_1, numerator_2);\n  }\n  else {\n    if ((denominator_1 + 0xc0100000 | denominator_2) == 0) {\n      atan(angle_in_radians);\n      return;\n    }\n    sign_bit = (int)denominator_1 >> 0x1e & 2U | denominator_2 >> 0x1f;\n    if (((((absolute_denominator_2 | denominator_1) != 0) && ((absolute_denominator_1 | denominator_2) != 0)) && (absolute_denominator_1 != DAT_080059e8)) && (absolute_denominator_2 != DAT_080059e8)) {\n      difference = (int)(absolute_denominator_2 - absolute_denominator_1) >> 0x14;\n      if ((difference < 0x3d) && ((-1 < (int)denominator_1 || (difference + 0x3c < 0 == SCARRY4(difference,0x3c))))) {\n        __divdf3(numerator_1, numerator_2);\n        fabs((double)CONCAT44(undefined_variable, denominator_1));\n        atan((double)CONCAT44(undefined_variable, denominator_1));\n      }\n      if (sign_bit != 1) {\n        if (sign_bit == 2) {\n          subtraction_result = __subdf3();\n          __subdf3(DAT_080059b0, DAT_080059b4, (int)subtraction_result, (int)((ulonglong)subtraction_result >> 0x20));\n        }\n        else if (sign_bit != 0) {\n          subtraction_result = __subdf3();\n          __subdf3((int)subtraction_result, (int)((ulonglong)subtraction_result >> 0x20), DAT_080059b0, DAT_080059b4);\n        }\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "__ieee754_atan2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005834",
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "mpu6050_calc_pitch"
            ],
            "imported": false,
            "current_name": "calculate_trig_values_08005834"
        },
        "FUN_08005838": {
            "renaming": {
                "FUN_08005838": "calculate_and_print_arctan_if_possible_08005838",
                "param_1": "dividend_low",
                "param_2": "dividend_high",
                "param_3": "divisor_low",
                "param_4": "divisor_high",
                "param_5": "arc_tan_input",
                "uVar2": "sign_bits",
                "uVar3": "divisor_absolute_value",
                "uVar4": "dividend_absolute_value",
                "uVar5": "result",
                "iVar1": "difference",
                "unaff_r4": "unused_variable"
            },
            "code": "void calculate_and_print_arctan_if_possible_08005838(uint32_t dividend_low, uint32_t dividend_high, uint32_t divisor_low, uint32_t divisor_high, double arc_tan_input) {\n  uint32_t divisor_absolute_value = divisor_high & 0x7fffffff;\n  uint32_t dividend_absolute_value = dividend_high & 0x7fffffff;\n  if ((DAT_080059e8 < (divisor_absolute_value | (-divisor_low | divisor_low) >> 0x1f)) ||\n     (DAT_080059e8 < (dividend_absolute_value | (-dividend_low | dividend_low) >> 0x1f))) {\n    __aeabi_dadd(divisor_low, divisor_high, dividend_low, dividend_high);\n  }\n  else {\n    if ((divisor_high + 0xc0100000 | divisor_low) == 0) {\n      atan(arc_tan_input);\n      return;\n    }\n    uint32_t sign_bits = (int)divisor_high >> 0x1e & 2U | dividend_high >> 0x1f;\n    if (((((dividend_high | dividend_low) != 0) && ((divisor_absolute_value | divisor_low) != 0)) && (divisor_absolute_value != DAT_080059e8)) &&\n       (dividend_absolute_value != DAT_080059e8)) {\n      int32_t difference = (int32_t)(dividend_absolute_value - divisor_absolute_value) >> 0x14;\n      if ((difference < 0x3d) && ((-1 < (int32_t)divisor_high || (difference + 0x3c < 0 == SCARRY4(difference,0x3c))))) {\n        __divdf3(dividend_low, dividend_high, divisor_low, divisor_high);\n        fabs((double)CONCAT44(unaff_r4, divisor_high));\n        atan((double)CONCAT44(unaff_r4, divisor_high));\n      }\n      if (sign_bits != 1) {\n        if (sign_bits == 2) {\n          uint64_t result = __subdf3(DAT_080059b0, DAT_080059b4, divisor_low, divisor_high);\n          divisor_low = (uint32_t)result;\n          divisor_high = (uint32_t)(result >> 32);\n        }\n        else if (sign_bits != 0) {\n          uint64_t result = __subdf3(divisor_low, divisor_high, DAT_080059b0, DAT_080059b4);\n          divisor_low = (uint32_t)result;\n          divisor_high = (uint32_t)(result >> 32);\n        }\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "__subdf3",
                "__divdf3",
                "__aeabi_dadd",
                "atan",
                "fabs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005838",
            "calling": [
                "atan2"
            ],
            "imported": false,
            "current_name": "calculate_and_print_arctan_if_possible_08005838"
        },
        "FUN_080096e0": {
            "renaming": {
                "FUN_080096e0": "calculate_power_080096e0",
                "__x": "base",
                "__exponent": "exponent",
                "iVar1": "max_exponent",
                "iVar2": "exponent_difference",
                "in_r1": "absolute_exponent",
                "in_r2": "exponent",
                "uVar3": "absolute_exponent",
                "in_d0": "multiplied",
                "__muldf3": "__multiply_double_float"
            },
            "code": "double calculate_power_080096e0(double base, int* exponent) {\n  int max_exponent = 0x80;\n  int exponent_difference = 0;\n  uint absolute_exponent = base < 0 ? -base : base;\n  *exponent = 0;\n  if (absolute_exponent <= max_exponent && (absolute_exponent | (uint)exponent) != 0) {\n    if (absolute_exponent < 0x100000) {\n      double multiplied = (double)__muldf3(exponent, base, 0, 0);\n      exponent_difference = -54;\n      absolute_exponent &= 0x7fffffff;\n    }\n    *exponent = ((int)absolute_exponent >> 0x14) + -0x3fe + exponent_difference;\n  }\n  return multiplied;\n}",
            "called": [
                "__muldf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080096e0",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "calculate_power_080096e0"
        },
        "FUN_08003540": {
            "renaming": {
                "FUN_08003540": "get_HCLK_Divider_08003540",
                "uVar1": "HCLK_Freq",
                "DAT_08003560": "Data_Address",
                "APB_PrescTable_08003564": "APB_Prescaler_Table",
                "PTR_APBPrescTable_08003564": "HCLK_Divider_Table"
            },
            "code": "uint32_t get_HCLK_Divider_08003540(void)\n{\n  uint32_t HCLK_Freq = HAL_RCC_GetHCLKFreq();\n  uint32_t APB_Prescaler = *(uint *)(DAT_08003560 + 4) >> 0xb & 7;\n  uint32_t HCLK_Divider = PTR_APBPrescTable_08003564[APB_Prescaler];\n  return HCLK_Freq >> HCLK_Divider;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003540",
            "calling": [
                "UART_SetConfig"
            ],
            "imported": false,
            "current_name": "get_HCLK_Divider_08003540"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "initializeI2C_08001ab0",
                "hi2c": "i2c",
                "uVar1": "pclk1",
                "cVar2": "validClockSpeed",
                "HVar3": "status",
                "uVar4": "freqrange",
                "uVar5": "calculatedCCR",
                "bVar6": "tempBool"
            },
            "code": "HAL_StatusTypeDef initializeI2C_08001ab0(I2C_HandleTypeDef *i2c)\n{\n    uint32_t pclk1;\n    uint32_t freqrange;\n    uint32_t calculatedCCR;\n    uint32_t calculatedTRISE;\n    HAL_StatusTypeDef status;\n    bool validClockSpeed = false;\n\n    if (i2c == NULL) {\n        status = HAL_ERROR;\n    }\n    else {\n        if (i2c->State == HAL_I2C_STATE_RESET) {\n            i2c->Lock = HAL_UNLOCKED;\n            HAL_I2C_MspInit(i2c);\n        }\n        i2c->State = HAL_I2C_STATE_BUSY;\n        i2c->Instance->CR1 &= ~(1);\n        pclk1 = HAL_RCC_GetPCLK1Freq();\n        if (i2c->Init.ClockSpeed <= 100000) {\n            if (pclk1 <= 10000000) {\n                freqrange = pclk1 / 1000000;\n                validClockSpeed = true;\n            }\n        }\n        else {\n            if (pclk1 <= 4000000) {\n                freqrange = pclk1 / 4000000;\n                validClockSpeed = true;\n            }\n        }\n        if (validClockSpeed) {\n            calculatedCCR = pclk1 / (i2c->Init.ClockSpeed * (freqrange << 1));\n            if (calculatedCCR < 4) {\n                calculatedCCR = 4;\n            }\n            calculatedTRISE = (freqrange + 1);\n            i2c->Instance->TRISE = calculatedTRISE;\n            i2c->Instance->CCR = calculatedCCR;\n            i2c->Instance->CR1 = i2c->Init.NoStretchMode | i2c->Init.GeneralCallMode | 1;\n            i2c->Instance->OAR1 = i2c->Init.OwnAddress1 | i2c->Init.AddressingMode;\n            i2c->Instance->OAR2 = i2c->Init.OwnAddress2 | i2c->Init.DualAddressMode;\n            i2c->ErrorCode = 0;\n            i2c->State = HAL_I2C_STATE_READY;\n            i2c->PreviousState = 0;\n            i2c->Mode = HAL_I2C_MODE_NONE;\n            status = HAL_OK;\n        }\n        else {\n            status = HAL_ERROR;\n        }\n    }\n    return status;\n}",
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_I2C_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "MX_I2C1_Init"
            ],
            "imported": false,
            "current_name": "initializeI2C_08001ab0"
        },
        "FUN_08000150": {
            "renaming": {
                "FUN_08000150": "FUNC_08000150"
            },
            "code": "\nulonglong FUNC_08000150(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar4 = param_2 ^ 0x80000000;\n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((uVar4 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = uVar4;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((uVar4 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        uVar4 = param_4;\n      }\n      return CONCAT44(uVar4,param_1);\n    }\n    if (uVar4 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(uVar4,uVar4) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(uVar4 + 0x100000,param_1);\n    }\n    uVar4 = uVar4 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(uVar4 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar12 = uVar4;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar12 = param_4;\n    param_3 = param_1;\n    param_4 = uVar4;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar12,uVar8);\n  }\n  uVar9 = uVar12 & 0xfffff | 0x100000;\n  if ((uVar12 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar4 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar4 = uVar4 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar5 = uVar4 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar5;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar4 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar11 = uVar4 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar4 = (int)uVar4 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar4;\n    uVar9 = uVar9 + ((int)uVar4 >> 0x1f) + (uint)CARRY4(uVar8,uVar4);\n  }\n  uVar4 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | uVar4,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_08000268;\n  uVar3 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar3 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar3 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar3 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar3 = uVar3 << (uVar10 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | uVar4,uVar3);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar3 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(uVar4 | uVar7 >> (uVar10 & 0xff),\n                    uVar3 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [
                "__aeabi_dadd"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000150",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08000150"
        },
        "FUN_08000158": {
            "renaming": {
                "FUN_08000158": "FUNC_08000158"
            },
            "code": "\nulonglong FUNC_08000158(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_08000268;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000158",
            "calling": [
                "_dtoa_r",
                "__ieee754_atan2",
                "mpu6050_calc_pitch",
                "_svfprintf_r",
                "atan"
            ],
            "imported": false,
            "current_name": "FUNC_08000158"
        },
        "FUN_08009768": {
            "renaming": {
                "FUN_08009768": "copy_string_08009768",
                "__dest": "destination",
                "__src": "source",
                "__n": "n",
                "cVar1": "c",
                "puVar2": "src_ptr",
                "puVar3": "dest_ptr",
                "puVar4": "temp_ptr",
                "uVar5": "word"
            },
            "code": "char* copy_string_08009768(char* destination, const char* source, size_t n)\n{\n    char c;\n    uint32_t* dest_ptr = (uint32_t*) destination;\n    const uint32_t* src_ptr = (const uint32_t*) source;\n    if (((uint32_t)destination | (uint32_t)source) & 3) {\n        for (; n > 0; --n) {\n            c = *source++;\n            *destination++ = c;\n            if (c == '\\0') {\n                return destination - 1;\n            }\n        }\n    } else {\n        for (; n >= 4; n -= 4) {\n            uint32_t word = *src_ptr++;\n            if ((word + 0xfefefeff & ~word & 0x80808080) != 0) {\n                break;\n            }\n            *dest_ptr++ = word;\n        }\n        destination = (char*) dest_ptr;\n        source = (const char*) src_ptr;\n        while (n-- > 0) {\n            c = *source++;\n            *destination++ = c;\n            if (c == '\\0') {\n                return destination - 1;\n            }\n        }\n    }\n    while (n-- > 0) {\n        *destination++ = '\\0';\n    }\n    return destination - 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009768",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "copy_string_08009768"
        },
        "FUN_08001008": {
            "renaming": {
                "FUN_08001008": "is_not_equal_to_zero_08001008",
                "in_ZR": "in_zero_register",
                "in_CY": "in_carry_flag"
            },
            "code": "bool is_not_equal_to_zero_08001008(void)\n{\n  bool is_CY_zero = __aeabi_cfcmpeq();\n  return !is_CY_zero || in_ZR;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001008",
            "calling": [],
            "imported": false,
            "current_name": "is_not_equal_to_zero_08001008"
        },
        "FUN_08003ff8": {
            "renaming": {
                "FUN_08003ff8": "configure_tim_oc_08003ff8",
                "TIMx": "timer",
                "OC_Config": "config",
                "uVar1": "oc_mode",
                "uVar2": "oc_polarity",
                "tmpccer": "unused",
                "tmpccmrx": "unused",
                "tmpcr2": "cr2"
            },
            "code": "void configure_tim_oc_08003ff8(TIM_TypeDef *timer, TIM_OC_InitTypeDef *config) {\n  uint32_t oc_mode = config->OCMode;\n  uint32_t oc_polarity = config->OCPolarity;\n  uint32_t oc_idle_state = config->OCIdleState;\n  uint32_t pulse = config->Pulse;\n  \n  timer->CCER &= 0xffffefff;\n  uint32_t cr2 = timer->CR2;\n  if (timer == PTR_0800409c) {\n    cr2 = (oc_idle_state << 6) | (cr2 & 0xffffbfff);\n  }\n  timer->CR2 = cr2;\n  timer->CCMR2 = (oc_mode << 8) | (timer->CCMR2 & 0xffff8cff);\n  timer->CCR4 = pulse;\n  timer->CCER = (oc_polarity << 0xc) | (timer->CCER & 0xffffdfff);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ff8",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_tim_oc_08003ff8"
        },
        "FUN_08004ea4": {
            "renaming": {
                "FUN_08004ea4": "write_data_to_i2c_device_08004ea4",
                "addr": "device_address",
                "reg": "register_address",
                "*data": "data_buffer",
                "len": "data_length"
            },
            "code": "void write_data_to_i2c_device_08004ea4(uint8_t device_address, uint8_t register_address, uint8_t *data_buffer, uint16_t data_length)\n    {\n        HAL_I2C_Mem_Write((I2C_HandleTypeDef *)PTR_hi2c1_08004ee4, (uint16_t)device_address, (uint16_t)register_address, 1, data_buffer, data_length, *(uint32_t *)PTR_I2C_TIMEOUT_08004ee0);\n        return;\n    }",
            "called": [
                "HAL_I2C_Mem_Write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ea4",
            "calling": [],
            "imported": false,
            "current_name": "write_data_to_i2c_device_08004ea4"
        },
        "FUN_08005728": {
            "renaming": {
                "FUN_08005728": "allocate_memory_08005728",
                "incr": "size",
                "puVar1": "errno_ptr",
                "auStack_18": "stack_var",
                "local_14": "local_var",
                "prev_heap_end": "prev_heap_end",
                "PTR_heap_end_08005778": "heap_end_ptr",
                "PTR_end_0800577c": "end_ptr"
            },
            "code": "caddr_t allocate_memory_08005728(int size)\n{\n  undefined4 *errno_ptr;\n  undefined stack_var[4];\n  int local_var;\n  char *prev_heap_end;\n  \n  if (*(int *)PTR_heap_end_08005778 == 0) {\n    *(undefined **)PTR_heap_end_08005778 = PTR_end_0800577c;\n  }\n  prev_heap_end = *(char **)PTR_heap_end_08005778;\n  if (stack_var < (undefined *)(size + *(int *)PTR_heap_end_08005778)) {\n    local_var = size;\n    errno_ptr = (undefined4 *)__errno();\n    *errno_ptr = 0xc;\n    prev_heap_end = (caddr_t)0xffffffff;\n  }\n  else {\n    *(int *)PTR_heap_end_08005778 = size + *(int *)PTR_heap_end_08005778;\n  }\n  return prev_heap_end;\n}",
            "called": [
                "__errno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_08005728"
        },
        "FUN_08003e38": {
            "renaming": {
                "FUN_08003e38": "configure_tim_oc_08003e38",
                "TIMx": "tim",
                "OC_Config": "oc_config",
                "uVar1": "oc_mode",
                "uVar2": "oc_polarity",
                "tmpccmrx": "tmp_ccmr1",
                "tmpcr2": "tmp_cr2",
                "tmpccer": "tmp_ccer",
                "DAT_08003f14": "TIM2"
            },
            "code": "void configure_tim_oc_08003e38(TIM_TypeDef *tim, TIM_OC_InitTypeDef *oc_config)\n{\n  uint32_t oc_mode = oc_config->OCMode;\n  uint32_t oc_polarity = oc_config->OCPolarity;\n  uint32_t oc_npolarity = oc_config->OCNPolarity;\n  uint32_t oc_idle_state = oc_config->OCIdleState;\n  uint32_t oc_nidle_state = oc_config->OCNIdleState;\n  uint32_t pulse = oc_config->Pulse;\n  uint32_t tmp_ccer = tim->CCER & 0xffffffdf;\n  uint32_t tmp_ccmr1 = tim->CCMR1 & 0xffff8cff;\n  uint32_t tmp_cr2 = tim->CR2;\n  tim->CCER = tmp_ccer & 0xffffffef;\n  if (tim == DAT_08003f14) {\n    tmp_ccmr1 |= oc_mode << 8;\n    tmp_cr2 &= 0xfffff3ff;\n    tmp_cr2 |= oc_nidle_state << 2;\n    tmp_cr2 |= oc_idle_state << 2;\n    tmp_ccer |= oc_npolarity << 4;\n    tmp_ccer &= 0xffffffbf;\n  }\n  tim->CCR2 = pulse;\n  tim->CCMR1 = tmp_ccmr1;\n  tim->CR2 = tmp_cr2;\n  tim->CCER = tmp_ccer;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e38",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_tim_oc_08003e38"
        },
        "FUN_080006a4": {
            "renaming": {
                "FUN_080006a4": "calculate_080006a4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "check3",
                "unaff_r4": "temp2",
                "uVar2": "check1",
                "uVar3": "check4",
                "in_r12": "mask",
                "bVar4": "isZero"
            },
            "code": "unsigned long long calculate_080006a4(uint32_t input1, uint32_t input2, uint32_t input3, uint32_t input4) {\n  uint32_t temp1, temp2, temp3, temp4;\n  bool isZero;\n  uint32_t mask = 0x80000000;\n  uint32_t bitCheck = 0x100000;\n  uint32_t shift1 = 0x14;\n  uint32_t shift2 = 0xc;\n  uint32_t result = 0;\n\n  temp1 = input1;\n  temp2 = input2;\n  temp3 = input3;\n  temp4 = input4;\n\n  uint32_t check1 = temp4 >> shift1;\n\n  if (temp2 != temp4 && check1 != temp4) {\n    isZero = ((input1 | (input2 << 1)) == 0);\n    if (!isZero) {\n      isZero = ((input3 | (input4 << 1)) == 0);\n    }\n    if (isZero) {\n      result = ((input2 ^ input4) & mask) << 0x20;\n    }\n    if (temp2 == 0) {\n      uint32_t check2 = temp2 & mask;\n      do {\n        uint32_t check3 = temp1 & mask;\n        temp1 = temp1 << 1;\n        temp2 = temp2 * 2 + (uint32_t)(check3 != 0);\n      } while ((temp2 & bitCheck) == 0);\n      temp2 |= check2;\n      if (check1 != 0) {\n        result = ((uint64_t)temp2 << 0x20) | temp1;\n        return result;\n      }\n    }\n    do {\n      uint32_t check4 = temp3 & mask;\n      temp3 = temp3 << 1;\n      temp4 = temp4 * 2 + (uint32_t)(check4 != 0);\n    } while ((temp4 & bitCheck) == 0);\n    result = ((uint64_t)temp2 << 0x20) | temp1;\n    return result;\n  }\n  isZero = ((input1 | (input2 << 1)) == 0);\n  if (isZero) {\n    temp2 = input4;\n    temp1 = input3;\n  }\n  if (!isZero) {\n    isZero = ((input3 | (input4 << 1)) == 0);\n  }\n  temp3 = temp2;\n  if (((!isZero) && ((temp2 != temp4 || ((input1 | (input2 << shift2)) == 0)))) && ((check1 != temp4 || (temp1 = input3, temp3 = input4, ((input3 | (input4 << shift2)) == 0)))) {\n    result = ((input2 ^ input4) & mask | 0x7ff00000) << 0x20;\n  }\n  result |= 0x7ff8000000000000;\n  result |= ((uint64_t)temp3 << 0x20) | temp1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006a4",
            "calling": [
                "__muldf3"
            ],
            "imported": false,
            "current_name": "calculate_080006a4"
        },
        "FUN_08009530": {
            "renaming": {
                "FUN_08009530": "compare_and_allocate_08009530",
                "param_1": "param1",
                "param_2": "source1",
                "param_3": "source2",
                "param_4": "param4",
                "iVar1": "allocation",
                "iVar5": "difference",
                "iVar12": "carry",
                "puVar2": "source1_end",
                "puVar6": "source1_current",
                "puVar7": "source2_current",
                "puVar8": "temp_ptr",
                "puVar9": "source1",
                "puVar10": "temp_ptr2",
                "puVar11": "source2_end",
                "puVar13": "source2"
            },
            "code": "void compare_and_allocate_08009530(uint32_t param1, uint32_t *source1, uint32_t *source2, uint32_t param4)\n{\n  int difference = 0;\n  uint32_t *source1_end = source1 + 5 + source1[4];\n  uint32_t *source2_end = source2 + 5 + source2[4];\n  uint32_t *source1_current = source1 + 5;\n  uint32_t *source2_current = source2 + 5;\n  while (source1_current < source1_end && source2_current < source2_end)\n  {\n    difference += (*source1_current & 0xffff) - (*source2_current & 0xffff);\n    difference += (*source1_current >> 0x10) - (*source2_current >> 0x10);\n    ++source1_current;\n    ++source2_current;\n  }\n  if (source1_current == source1_end && source2_current == source2_end)\n  {\n    if (difference == 0)\n    {\n      uint32_t *allocation = _Balloc(param1, 0, source1_end - 1, source2_end - 1, param4);\n      allocation[4] = source1[4];\n      allocation[5] = 1;\n      allocation[6] = 0;\n      return;\n    }\n  }\n  else if (source1_current == source1_end)\n  {\n    difference -= (int)(source2_end - source2_current);\n  }\n  else\n  {\n    difference += (int)(source1_end - source1_current);\n    source1_current = source2;\n    source1_end = source2_end;\n  }\n  uint32_t *allocation = _Balloc(param1, source2[1], source1_current - 1, source2_current - 1, param4);\n  allocation[4] = source2[4];\n  allocation[5] = difference < 0 ? -1 : difference > 0;\n}",
            "called": [
                "_Balloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009530",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "compare_and_allocate_08009530"
        },
        "FUN_08002bb4": {
            "renaming": {
                "FUN_08002bb4": "check_I2C_status_08002bb4",
                "hi2c": "i2c_handler",
                "Timeout": "timeout_value",
                "Tickstart": "tick_start_time",
                "HVar1": "status",
                "uVar2": "current_time"
            },
            "code": "HAL_StatusTypeDef check_I2C_status_08002bb4(I2C_HandleTypeDef *i2c_handler, uint32_t timeout_value, uint32_t tick_start_time)\n{\n  HAL_StatusTypeDef status;\n  uint32_t current_time;\n  \n  while( true ) {\n    if ((i2c_handler->Instance->SR1 & 0x80) == 0x80) {\n      return HAL_OK;\n    }\n    status = I2C_IsAcknowledgeFailed(i2c_handler);\n    if (status != HAL_OK) break;\n    if ((timeout_value != 0xffffffff) && ((timeout_value == 0 || (current_time = HAL_GetTick(), timeout_value < current_time - tick_start_time)))) {\n      i2c_handler->ErrorCode = i2c_handler->ErrorCode | 0x20;\n      i2c_handler->PreviousState = 0;\n      i2c_handler->State = HAL_I2C_STATE_READY;\n      i2c_handler->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  }\n  return HAL_ERROR;\n}",
            "called": [
                "I2C_IsAcknowledgeFailed",
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002bb4",
            "calling": [
                "I2C_RequestMemoryRead",
                "HAL_I2C_Mem_Write",
                "I2C_RequestMemoryWrite"
            ],
            "imported": false,
            "current_name": "check_I2C_status_08002bb4"
        },
        "FUN_08002d3c": {
            "renaming": {
                "FUN_08002d3c": "check_i2c_bus_08002d3c",
                "hi2c": "i2c_handle",
                "bVar1": "bus_busy",
                "SR1": "status_register_1",
                "ErrorCode": "error_code",
                "PreviousState": "previous_state",
                "State": "current_state",
                "Lock": "lock_status"
            },
            "code": "HAL_StatusTypeDef check_i2c_bus_08002d3c(I2C_HandleTypeDef *i2c_handle)\n{\n  bool bus_busy = (i2c_handle->Instance->SR1 & 0x400) == 0x400;\n  if (bus_busy) {\n    i2c_handle->Instance->SR1 = 0xfffffbff;\n    i2c_handle->ErrorCode = 4;\n    i2c_handle->PreviousState = 0;\n    i2c_handle->State = HAL_I2C_STATE_READY;\n    i2c_handle->Lock = HAL_UNLOCKED;\n  }\n  return bus_busy;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d3c",
            "calling": [
                "I2C_WaitOnBTFFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "imported": false,
            "current_name": "check_i2c_bus_08002d3c"
        },
        "FUN_080009fc": {
            "renaming": {
                "FUN_080009fc": "calculate_float_bits_080009fc",
                "param_1": "exponent",
                "param_2": "mantissa",
                "uVar1": "float_bits",
                "uVar2": "mantissa_shifted",
                "uVar3": "mantissa_adjusted",
                "in_r12": "sticky_bits",
                "bVar4": "is_zero",
                "bVar5": "is_normal"
            },
            "code": "uint calculate_float_bits_080009fc(uint exponent, uint mantissa) {\n  uint sign_bit = mantissa & 0x80000000;\n  uint exponent_bits = exponent << 23;\n  uint mantissa_bits = mantissa & 0x7FFFFF;\n  if (exponent == 0) {\n    return sign_bit | mantissa_bits << 1;\n  }\n  if (exponent == 0xFF) {\n    if (mantissa == 0) {\n      return sign_bit | 0x7F800000;\n    } else {\n      return sign_bit | 0x7FC00000;\n    }\n  }\n  uint exponent_adjusted = exponent - 127 + 1;\n  if (exponent_adjusted >= 31) {\n    return sign_bit | 0x7F800000;\n  }\n  if (exponent_adjusted <= 0) {\n    uint shift = 1 - exponent_adjusted;\n    uint shifted_mantissa = mantissa_bits >> shift;\n    uint sticky_bit = (mantissa_bits << (33 - shift) != 0);\n    mantissa_bits = shifted_mantissa | sticky_bit;\n    exponent_bits = 0;\n  } else {\n    exponent_bits |= exponent_adjusted << 23;\n  }\n  return sign_bit | exponent_bits | mantissa_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009fc",
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "mpu6050_calc_pitch"
            ],
            "imported": false,
            "current_name": "calculate_float_bits_080009fc"
        },
        "FUN_080093a4": {
            "renaming": {
                "FUN_080093a4": "calculate_power_080093a4",
                "param_1": "base",
                "param_2": "result",
                "param_3": "exponent",
                "puVar3": "current_power",
                "puVar4": "power_array",
                "iVar1": "index",
                "iVar2": "quotient",
                "remainder": "remainder",
                "next_power": "next_power"
            },
            "code": "undefined4 * calculate_power_080093a4(int base, undefined4 *result, uint exponent)\n{\n  int remainder = exponent & 3;\n  if (remainder != 0) {\n    result = (undefined4 *)\n              __multadd(base,result,*(undefined4 *)(PTR_p05_6092_08009440 + ((remainder - 1) * 4)),0);\n  }\n  int quotient = (int)exponent >> 2;\n  if (quotient != 0) {\n    undefined4 *power_array = *(undefined4 **)(base + 0x48);\n    if (power_array == (undefined4 *)0x0) {\n      power_array = (undefined4 *)_Balloc(base,1);\n      power_array[4] = 1;\n      power_array[5] = 0x271;\n      *(undefined4 **)(base + 0x48) = power_array;\n      *power_array = 0;\n    }\n    undefined4 *current_power = result;\n    if (quotient << 0x1f >= 0) {\n        goto LAB_080093c4;\n    }\nLAB_080093d2:\n    quotient = quotient >> 1;\n    current_power = power_array;\n    if (quotient != 0) {\n      while( true ) {\n        undefined4 *next_power = (undefined4 *)*current_power;\n        if (next_power == (undefined4 *)0x0) {\n          next_power = (undefined4 *)__multiply(base,current_power,current_power);\n          *current_power = next_power;\n          *next_power = 0;\n        }\n        current_power = result;\n        if (-1 < quotient << 0x1f) {\n            break;\n        }\nLAB_080093c4:\n        result = (undefined4 *)__multiply(base,current_power,power_array);\n        if (current_power == (undefined4 *)0x0) {\n            break;\n        }\n        int index = *(int *)(base + 0x4c);\n        quotient = quotient >> 1;\n        *current_power = *(undefined4 *)(index + current_power[1] * 4);\n        *(undefined4 **)(index + current_power[1] * 4) = current_power;\n        current_power = next_power;\n        if (quotient == 0) {\n          return result;\n        }\n      }\n      goto LAB_080093d2;\n    }\n  }\n  return result;\n}",
            "called": [
                "_Balloc",
                "__multadd",
                "__multiply"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080093a4",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "calculate_power_080093a4"
        },
        "FUN_0800015c": {
            "renaming": {
                "FUN_0800015c": "FUNC_0800015c"
            },
            "code": "\nulonglong FUNC_0800015c(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_08000268;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800015c",
            "calling": [
                "_dtoa_r",
                "__ieee754_atan2",
                "__aeabi_drsub",
                "mpu6050_calc_pitch",
                "atan"
            ],
            "imported": false,
            "current_name": "FUNC_0800015c"
        },
        "FUN_080078a0": {
            "renaming": {
                "FUN_080078a0": "check_if_initialized_080078a0",
                "DAT_080078ac": "is_initialized",
                "atexit": "register_cleanup_function",
                "DAT_080078b0": "clean_up"
            },
            "code": "void check_if_initialized_080078a0(void)\n{\n  if (DAT_080078ac != 0) {\n    atexit(DAT_080078b0);\n    return;\n  }\n  return;\n}",
            "called": [
                "atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078a0",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "check_if_initialized_080078a0"
        },
        "FUN_080056c8": {
            "renaming": {
                "FUN_080056c8": "wait_forever_080056c8"
            },
            "code": "void wait_forever_080056c8(void)\n{\n  while(true)\n  {\n    // Do nothing\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056c8",
            "calling": [],
            "imported": false,
            "current_name": "wait_forever_080056c8"
        },
        "FUN_080057e8": {
            "renaming": {
                "FUN_080057e8": "initialize_system_080057e8",
                "iVar1": "i",
                "puVar2": "completed_ptr",
                "UNRECOVERED_JUMPTABLE": "jumptable_ptr",
                "PTR_completed_8655_08005828": "completed_ptr",
                "PTR_uwTickPrio_08005820": "tick_prio_ptr",
                "PTR_completed_8655_08005824": "completed_end_ptr",
                "PTR__ebss_0800582c": "ebss_ptr",
                "PTR___fini_array_end_0800581c": "fini_array_end_ptr"
            },
            "code": "void initialize_system_080057e8(void)\n{\n  int i;\n  undefined4 *PTR_completed_8655_08005828 = (undefined4 *)PTR_completed_8655_08005828;\n  undefined4 *PTR_uwTickPrio_08005820 = (undefined4 *)PTR_uwTickPrio_08005820;\n  undefined4 *PTR__ebss_0800582c = (undefined4 *)PTR__ebss_0800582c;\n  code *jumptable_ptr = (code *)0x800581a;\n  \n  for (i = 0; PTR_uwTickPrio_08005820 + i < (undefined4 *)PTR_completed_8655_08005824; i += 4) {\n    *(undefined4 *)(PTR_uwTickPrio_08005820 + i) =\n         *(undefined4 *)(PTR___fini_array_end_0800581c + i);\n  }\n  for (; PTR_completed_8655_08005828 < PTR__ebss_0800582c; PTR_completed_8655_08005828++) {\n    *PTR_completed_8655_08005828 = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jumptable_ptr();\n}\n",
            "called": [
                "SystemInit",
                "__libc_init_array",
                "main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057e8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_system_080057e8"
        },
        "FUN_080008f4": {
            "renaming": {
                "FUN_080008f4": "check_collision_080008f4",
                "param_1": "x1",
                "param_2": "y1",
                "param_3": "x2",
                "param_4": "y2",
                "bVar2": "is_x1_y1_zero",
                "bVar3": "is_x2_y2_zero",
                "uVar1": "xor_xy"
            },
            "code": "uint check_collision_080008f4(uint x1, uint y1, uint x2, uint y2)\n{\n  bool is_x1_y1_zero = (x1 | y1 << 1) == 0;\n  bool is_x2_y2_zero = (x2 | y2 << 1) == 0;\n  if (is_x1_y1_zero && is_x2_y2_zero)\n    return 1;\n  if (x1 == x2 && y1 == y2)\n    return 1;\n  if ((x1 ^ x2 | y1 ^ y2) == 0)\n    return 1;\n  if (x1 == x2 || y1 == y2)\n    return 1;\n  if (abs((int)x1 - (int)x2) >= abs((int)y1 - (int)y2))\n    return y1 <= y2;\n  return x1 <= x2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008f4",
            "calling": [],
            "imported": false,
            "current_name": "check_collision_080008f4"
        },
        "FUN_080036a8": {
            "renaming": {
                "FUN_080036a8": "enable_timer_channel_080036a8",
                "*htim": "timer_handle",
                "Channel": "channel",
                "DAT_080036f4": "special_timer_instance",
                "Instance": "timer_instance",
                "BDTR": "break_and_deadtime_register",
                "CR1": "control_register_1"
            },
            "code": "HAL_StatusTypeDef enable_timer_channel_080036a8(TIM_HandleTypeDef *timer_handle, uint32_t channel) {\n  TIM_CCxChannelCmd(timer_handle->Instance, channel, ENABLE);\n  if (timer_handle->Instance == DAT_080036f4) {\n    timer_handle->Instance->BDTR |= TIM_BDTR_MOE;\n  }\n  timer_handle->Instance->CR1 |= TIM_CR1_CEN;\n  return HAL_OK;\n}",
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036a8",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "enable_timer_channel_080036a8"
        },
        "FUN_080088ec": {
            "renaming": {
                "FUN_080088ec": "FUNC_080088ec"
            },
            "code": "\nvoid FUNC_080088ec(undefined4 param_1,int param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  int iVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  undefined *puVar7;\n  undefined *puVar8;\n  undefined *puVar9;\n  uint uVar10;\n  int iVar11;\n  \n  if (param_2 == 0) {\n    return;\n  }\n  __malloc_lock();\n  puVar8 = PTR___malloc_av__08008ac4;\n  uVar10 = *(uint *)(param_2 + -4);\n  iVar2 = param_2 + -8;\n  uVar5 = uVar10 & 0xfffffffe;\n  puVar3 = (uint *)(iVar2 + uVar5);\n  uVar6 = puVar3[1] & 0xfffffffc;\n  if (*(uint **)(PTR___malloc_av__08008ac4 + 8) == puVar3) {\n    uVar5 = uVar5 + uVar6;\n    if ((uVar10 & 1) == 0) {\n      iVar2 = iVar2 - *(int *)(param_2 + -8);\n      iVar11 = *(int *)(iVar2 + 8);\n      iVar1 = *(int *)(iVar2 + 0xc);\n      uVar5 = uVar5 + *(int *)(param_2 + -8);\n      *(int *)(iVar11 + 0xc) = iVar1;\n      *(int *)(iVar1 + 8) = iVar11;\n    }\n    uVar6 = *(uint *)PTR___malloc_trim_threshold_08008acc;\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(int *)(puVar8 + 8) = iVar2;\n    if (uVar6 <= uVar5) {\n      _malloc_trim_r(param_1,*(undefined4 *)PTR___malloc_top_pad_08008ad0);\n    }\nLAB_080089f0:\n    __malloc_unlock(param_1);\n    return;\n  }\n  puVar3[1] = uVar6;\n  if ((uVar10 & 1) == 0) {\n    iVar2 = iVar2 - *(int *)(param_2 + -8);\n    puVar9 = *(undefined **)(iVar2 + 8);\n    uVar5 = uVar5 + *(int *)(param_2 + -8);\n    uVar10 = *(uint *)((int)puVar3 + uVar6 + 4) & 1;\n    if (puVar9 == puVar8 + 8) {\n      if (uVar10 == 0) {\n        uVar10 = puVar3[2];\n        uVar4 = puVar3[3];\n        uVar5 = uVar5 + uVar6;\n        *(uint *)(uVar10 + 0xc) = uVar4;\n        *(uint *)(uVar4 + 8) = uVar10;\n        *(uint *)(iVar2 + 4) = uVar5 | 1;\n        *(uint *)(iVar2 + uVar5) = uVar5;\n      }\n      else {\n        *(uint *)(iVar2 + 4) = uVar5 | 1;\n        *puVar3 = uVar5;\n      }\n      goto LAB_080089f0;\n    }\n    iVar11 = *(int *)(iVar2 + 0xc);\n    *(int *)(puVar9 + 0xc) = iVar11;\n    *(undefined **)(iVar11 + 8) = puVar9;\n  }\n  else {\n    uVar10 = *(uint *)((int)puVar3 + uVar6 + 4) & 1;\n  }\n  if (uVar10 == 0) {\n    puVar9 = (undefined *)puVar3[2];\n    uVar5 = uVar5 + uVar6;\n    if (puVar9 == PTR_PTR___malloc_av__08008ac8) {\n      *(int *)(puVar8 + 0x10) = iVar2;\n      *(int *)(puVar8 + 0x14) = iVar2;\n      *(undefined **)(iVar2 + 8) = puVar9;\n      *(undefined **)(iVar2 + 0xc) = puVar9;\n      *(uint *)(iVar2 + 4) = uVar5 | 1;\n      *(uint *)(iVar2 + uVar5) = uVar5;\n      goto LAB_080089f0;\n    }\n    uVar6 = puVar3[3];\n    *(uint *)(puVar9 + 0xc) = uVar6;\n    *(undefined **)(uVar6 + 8) = puVar9;\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(uint *)(iVar2 + uVar5) = uVar5;\n  }\n  else {\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(uint *)(iVar2 + uVar5) = uVar5;\n  }\n  if (uVar5 < 0x200) {\n    iVar11 = (uVar5 >> 3) + 1;\n    uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(puVar8 + 4);\n    iVar1 = *(int *)(puVar8 + iVar11 * 8);\n    *(int *)(iVar2 + 8) = iVar1;\n    *(undefined **)(iVar2 + 0xc) = puVar8 + iVar11 * 8 + -8;\n    *(uint *)(puVar8 + 4) = uVar5;\n    *(int *)(puVar8 + iVar11 * 8) = iVar2;\n    *(int *)(iVar1 + 0xc) = iVar2;\n    __malloc_unlock(param_1,iVar2,uVar5,param_4);\n    return;\n  }\n  uVar6 = uVar5 >> 9;\n  if (uVar6 < 5) {\n    iVar11 = ((uVar5 >> 6) + 0x39) * 8;\n    iVar1 = (uVar5 >> 6) + 0x38;\n  }\n  else if (uVar6 < 0x15) {\n    iVar11 = (uVar6 + 0x5c) * 8;\n    iVar1 = uVar6 + 0x5b;\n  }\n  else if (uVar6 < 0x55) {\n    iVar11 = ((uVar5 >> 0xc) + 0x6f) * 8;\n    iVar1 = (uVar5 >> 0xc) + 0x6e;\n  }\n  else if (uVar6 < 0x155) {\n    iVar11 = ((uVar5 >> 0xf) + 0x78) * 8;\n    iVar1 = (uVar5 >> 0xf) + 0x77;\n  }\n  else if (uVar6 < 0x555) {\n    iVar11 = ((uVar5 >> 0x12) + 0x7d) * 8;\n    iVar1 = (uVar5 >> 0x12) + 0x7c;\n  }\n  else {\n    iVar11 = 0x3f8;\n    iVar1 = 0x7e;\n  }\n  puVar9 = *(undefined **)(puVar8 + iVar11);\n  puVar7 = puVar8 + iVar11 + -8;\n  if (puVar7 == puVar9) {\n    puVar9 = (undefined *)(1 << (iVar1 >> 2 & 0xffU) | *(uint *)(puVar8 + 4));\n    *(undefined **)(puVar8 + 4) = puVar9;\n    puVar8 = puVar7;\n  }\n  else {\n    do {\n      puVar8 = puVar9;\n      if ((*(uint *)(puVar9 + 4) & 0xfffffffc) <= uVar5) break;\n      puVar9 = *(undefined **)(puVar9 + 8);\n      puVar8 = puVar7;\n    } while (puVar7 != puVar9);\n    puVar7 = *(undefined **)(puVar8 + 0xc);\n  }\n  *(undefined **)(iVar2 + 8) = puVar8;\n  *(undefined **)(iVar2 + 0xc) = puVar7;\n  *(int *)(puVar7 + 8) = iVar2;\n  *(int *)(puVar8 + 0xc) = iVar2;\n  __malloc_unlock(param_1,iVar2,puVar9,param_4);\n  return;\n}\n\n",
            "called": [
                "__malloc_lock",
                "__malloc_unlock",
                "_malloc_trim_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080088ec",
            "calling": [
                "_malloc_r",
                "_realloc_r",
                "__ssprint_r",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "FUNC_080088ec"
        },
        "FUN_08005224": {
            "renaming": {
                "FUN_08005224": "initializeSystem_08005224",
                "PTR_I2C_Write_Reg_0800527c": "i2cWriteReg",
                "DAT_08005280": "i2cWriteData",
                "PTR_I2C_Read_Reg_08005284": "i2cReadReg",
                "DAT_08005288": "i2cReadData",
                "PTR_Get_ms_tick_0800528c": "getMsTickReg",
                "DAT_08005290": "getMsTickData",
                "PTR_htim1_08005294": "htim1",
                "PTR_mpu6050_08005298": "mpu6050",
                "PTR_htim2_0800529c": "htim2"
            },
            "code": "int initializeSystem_08005224(void)\n{\n  HAL_Init();\n  SystemClock_Config();\n  initializeGPIO();\n  initializeI2C();\n  initializeUART();\n  initializeTimer2();\n  initializeTimer1();\n  *(undefined4 *)PTR_I2C_Write_Reg_0800527c = DAT_08005280;\n  *(undefined4 *)PTR_I2C_Read_Reg_08005284 = DAT_08005288;\n  *(undefined4 *)PTR_Get_ms_tick_0800528c = DAT_08005290;\n  startPWM((TIM_HandleTypeDef *)PTR_htim1_08005294,0);\n  startPWM((TIM_HandleTypeDef *)PTR_htim1_08005294,0xc);\n  initializeMpu6050((Mpu6050 *)PTR_mpu6050_08005298);\n  startTimer2();\n  startForkserver(0);\n  do {\n    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}",
            "called": [
                "HAL_TIM_PWM_Start",
                "HAL_TIM_Base_Start_IT",
                "MX_I2C1_Init",
                "startForkserver",
                "MX_TIM1_Init",
                "MX_GPIO_Init",
                "MX_USART1_UART_Init",
                "MX_TIM2_Init",
                "SystemClock_Config",
                "HAL_Init",
                "mpu6050_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005224",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "initializeSystem_08005224"
        },
        "FUN_08005348": {
            "renaming": {
                "FUN_08005348": "initialize_I2C1_08005348",
                "HVar1": "status",
                "PTR_hi2c1_080053a0": "i2c_handle",
                "DAT_080053a4": "0",
                "DAT_080053a8": "0",
                "i2c_config[0]": "I2C_CR1_REG",
                "i2c_config[1]": "I2C_CR2_REG",
                "i2c_config[2]": "I2C_OAR1_REG",
                "i2c_config[3]": "I2C_OAR2_REG",
                "i2c_config[4]": "I2C_TIMINGR_REG"
            },
            "code": "void initialize_I2C1_08005348(void)\n{\n  HAL_StatusTypeDef status;\n  uint32_t i2c_config[5] = {DAT_DAT_080053a88DAT_080053a8DAT_080053a853a4};\n  i2c_config[DAT_DAT_080053a88DAT_080053a8DAT_080053a853a4] = DAT_DAT_080053a88DAT_080053a8DAT_080053a853a4x4DAT_DAT_080053a88DAT_080053a8DAT_080053a853a4DAT_DAT_080053a88DAT_080053a8DAT_080053a853a4DAT_DAT_080053a88DAT_080053a8DAT_080053a853a4;\n  status = HAL_I2C_Init((I2C_HandleTypeDef *)PTR_hi2c1_DAT_DAT_080053a88DAT_080053a8DAT_080053a853a48DAT_DAT_080053a88DAT_080053a8DAT_080053a853a4DAT_DAT_080053a88DAT_080053a8DAT_080053a853a453aDAT_DAT_080053a88DAT_080053a8DAT_080053a853a4);\n  if (status != HAL_OK)\n  {\n    _Error_Handler(PTR_s____src_main_c_DAT_DAT_080053a88DAT_080053a8DAT_080053a853a48DAT_DAT_080053a88DAT_080053a8DAT_080053a853a4DAT_DAT_080053a88DAT_080053a8DAT_080053a853a453ac,DAT_DAT_080053a88DAT_080053a8DAT_080053a853a4x17a);\n  }\n  return;\n}",
            "called": [
                "_Error_Handler",
                "HAL_I2C_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005348",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_I2C1_08005348"
        },
        "FUN_08004378": {
            "renaming": {
                "FUN_08004378": "do_nothing_08004378"
            },
            "code": "\nvoid do_nothing_08004378(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004378",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08004378"
        },
        "FUN_080049cc": {
            "renaming": {
                "FUN_080049cc": "calculate_offsets_080049cc",
                "mpu6050": "mpu",
                "now": "current_time",
                "num_samples": "num_samples",
                "i": "i",
                "offset_accRoll": "offset_acc_roll",
                "offset_accPitch": "offset_acc_pitch",
                "offset_gyroY": "offset_gyro_Y",
                "offset_gyroX": "offset_gyro_X",
                "acc_roll": "acc_roll",
                "acc_pitch": "acc_pitch"
            },
            "code": "void calculate_offsets_080049cc(Mpu6050 *mpu6050)\n{\n  uint32_t current_time;\n  int num_samples = 1;\n  float offset_gyro_X = 0.0;\n  float offset_gyro_Y = 0.0;\n  float offset_acc_pitch = 0.0;\n  float offset_acc_roll = 0.0;\n  for(int i = 0; i < num_samples; i++) {\n    float acc_pitch = 0.0;\n    float acc_roll = 0.0;\n    mpu6050_update(mpu6050);\n    mpu6050_calc_acc_pitch_roll(mpu6050,&acc_pitch,&acc_roll);\n    offset_acc_pitch += acc_pitch;\n    offset_acc_roll += acc_roll;\n    offset_gyro_X += mpu6050->gyroX;\n    offset_gyro_Y += mpu6050->gyroY;\n    current_time = (**(code **)PTR_Get_ms_tick_08004adc)();\n  }\n  mpu6050->offset_gyroX = offset_gyro_X / num_samples;\n  mpu6050->offset_gyroY = offset_gyro_Y / num_samples;\n  mpu6050->offset_acc_pitch = offset_acc_pitch / num_samples;\n  mpu6050->offset_acc_roll = offset_acc_roll / num_samples;\n}",
            "called": [
                "mpu6050_calc_acc_pitch_roll",
                "__addsf3",
                "__aeabi_fdiv",
                "mpu6050_update",
                "__floatsisf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049cc",
            "calling": [
                "mpu6050_init"
            ],
            "imported": false,
            "current_name": "calculate_offsets_080049cc"
        },
        "FUN_08003c94": {
            "renaming": {
                "FUN_08003c94": "configure_timer_08003c94",
                "TIMx": "timer",
                "Structure": "config",
                "tmpcr1": "cr1",
                "DAT_08003d54": "timer1",
                "DAT_08003d58": "timer2",
                "DAT_08003d5c": "timer3"
            },
            "code": "void configure_timer_08003c94(TIM_TypeDef *timer, TIM_Base_InitTypeDef *config) {\n  uint32_t cr1 = timer->CR1;\n  if ((((timer == DAT_08003d54) || (timer == (TIM_TypeDef *)0x40000000)) || (timer == DAT_08003d58)) || (timer == DAT_08003d5c)) {\n    cr1 = config->CounterMode | cr1 & 0xffffff8f;\n  }\n  if (((timer == DAT_08003d54) || (timer == (TIM_TypeDef *)0x40000000)) || ((timer == DAT_08003d58 || (timer == DAT_08003d5c)))) {\n    cr1 = config->ClockDivision | cr1 & 0xfffffcff;\n  }\n  timer->CR1 = config->AutoReloadPreload | cr1 & 0xffffff7f;\n  timer->ARR = config->Period;\n  timer->PSC = config->Prescaler;\n  if (timer == DAT_08003d54) {\n    timer->RCR = config->RepetitionCounter;\n  }\n  timer->EGR = 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c94",
            "calling": [
                "HAL_TIM_Base_Init",
                "HAL_TIM_PWM_Init"
            ],
            "imported": false,
            "current_name": "configure_timer_08003c94"
        },
        "FUN_0800884c": {
            "renaming": {
                "FUN_0800884c": "allocate_memory_block_0800884c",
                "param_1": "size",
                "param_2": "alignment",
                "puVar1": "malloc_av",
                "puVar2": "malloc_mallinfo",
                "iVar3": "sbrk_result",
                "iVar4": "block_size",
                "uVar5": "mask"
            },
            "code": "int allocate_memory_block_0800884c(int size, int alignment) {\n  void* malloc_av = PTR___malloc_av__080088e0;\n  __malloc_lock();\n  uint mask = *(uint *)(*(int *)(malloc_av + 8) + 4) & 0xfffffffc;\n  int block_size = ((0xfef - alignment) + mask & 0xfffff000) - 0x1000;\n  if (0xfff < block_size) {\n    int sbrk_result = _sbrk_r(size, 0);\n    if (sbrk_result == *(int *)(malloc_av + 8) + mask) {\n      sbrk_result = _sbrk_r(size, -block_size);\n      void* malloc_mallinfo = PTR___malloc_current_mallinfo_080088e4;\n      if (sbrk_result != -1) {\n        int current_mallinfo = *(int *)malloc_mallinfo;\n        *(uint *)(*(int *)(malloc_av + 8) + 4) = mask - block_size | 1;\n        *(int *)malloc_mallinfo = current_mallinfo - block_size;\n        __malloc_unlock(size);\n        return 1;\n      }\n      block_size = _sbrk_r(size, 0);\n      void* malloc_sbrk_base = PTR___malloc_sbrk_base_080088e8;\n      mask = block_size - *(int *)(malloc_av + 8);\n      if (0xf < (int)mask) {\n        int sbrk_base = *(int *)malloc_sbrk_base;\n        *(uint *)(*(int *)(malloc_av + 8) + 4) = mask | 1;\n        *(int *)malloc_mallinfo = block_size - sbrk_base;\n      }\n    }\n  }\n  __malloc_unlock(size);\n  return 0;\n}",
            "called": [
                "__malloc_lock",
                "_sbrk_r",
                "__malloc_unlock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800884c",
            "calling": [
                "_free_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_0800884c"
        },
        "FUN_0800901c": {
            "renaming": {
                "FUN_0800901c": "verify_memory_0800901c",
                "__s": "memory",
                "__c": "value",
                "__n": "size",
                "uVar1": "xor_value",
                "uVar2": "xor_result",
                "puVar3": "pMemory",
                "puVar4": "pMemoryNext",
                "uVar5": "uValue",
                "bVar6": "is_end_of_memory"
            },
            "code": "void * verify_memory_0800901c(void *memory, int value, size_t size) {\n    uint uValue = value & 0xff;\n    uint *pMemory = (uint *)memory;\n    if (((uint)memory & 3) == 0) {\n        while (size > 3) {\n            uint *pMemoryNext = pMemory + 1;\n            uint uXor = *pMemory ^ ((value & 0xffU) << 8 | uValue | ((value & 0xffU) << 24) | ((uValue << 16) & 0xff0000));\n            if ((uXor + 0xfefefeff & ~uXor & 0x80808080) != 0) {\n                return pMemory;\n            }\n            size -= 4;\n            pMemory = pMemoryNext;\n        }\n    }\n    while (size-- > 0) {\n        if (*pMemory++ != uValue) {\n            return pMemory - 1;\n        }\n    }\n    return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800901c",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "verify_memory_0800901c"
        },
        "FUN_0800177c": {
            "renaming": {
                "FUN_0800177c": "set_clock_source_0800177c",
                "CLKSource": "clock_source",
                "DAT_080017b0": "clock_control_register"
            },
            "code": "void set_clock_source_0800177c(uint32_t clock_source) {\n  if (clock_source == 4) {\n    *DAT_080017b0 |= 0x4;\n  }\n  else {\n    *DAT_080017b0 &= 0xfffffffb;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800177c",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "set_clock_source_0800177c"
        },
        "FUN_080099ec": {
            "renaming": {
                "FUN_080099ec": "read_first_byte_080099ec",
                "param_1": "default_value",
                "param_2": "out_value",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "uVar1": "result",
                "uStack_4": "temp_value"
            },
            "code": "uint read_first_byte_080099ec(uint default_value, uint* out_value, byte* buffer, int buffer_size) {\n  uint result = default_value;\n  uint temp_value = 0;\n  if (out_value == (uint*)0x0) {\n    out_value = &temp_value;\n  }\n  if (buffer == (byte*)0x0 || buffer_size == 0) {\n    return result;\n  }\n  *out_value = (uint)*buffer;\n  result = (uint)*buffer;\n  if (result != 0) {\n    result = 1;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080099ec",
            "calling": [],
            "imported": false,
            "current_name": "read_first_byte_080099ec"
        },
        "FUN_08005598": {
            "renaming": {
                "FUN_08005598": "initialize_UART_08005598",
                "PTR_huart1_080055e8": "huart1_init_struct.Instance",
                "DAT_080055ec": "9600",
                "_Error_Handler": "error_handler",
                "PTR_s____src_main_c_080055f0": "N/A",
                "HAL_StatusTypeDef": "HAL_StatusTypeDef",
                "HAL_UART_Init": "HAL_UART_Init"
            },
            "code": "void initialize_UART_08005598(void)\n{\n  uint32_t baud_rate = DAT_080055ec;\n  uint32_t word_length = UART_WORDLENGTH_8B;\n  uint32_t stop_bits = UART_STOPBITS_1;\n  uint32_t parity = UART_PARITY_NONE;\n  uint32_t mode = UART_MODE_TX_RX;\n  uint32_t hardware_flow_control = UART_HWCONTROL_NONE;\n  \n  *(uint32_t *)PTR_huart1_080055e8 = baud_rate;\n  *(uint32_t *)(PTR_huart1_080055e8 + 4) = word_length;\n  *(uint32_t *)(PTR_huart1_080055e8 + 8) = stop_bits;\n  *(uint32_t *)(PTR_huart1_080055e8 + 0xc) = parity;\n  *(uint32_t *)(PTR_huart1_080055e8 + 0x10) = mode;\n  *(uint32_t *)(PTR_huart1_080055e8 + 0x14) = hardware_flow_control;\n  \n  HAL_StatusTypeDef status = HAL_UART_Init(&huart1_init_struct);\n  if (status != HAL_OK) {\n    error_handler();\n  }\n  return;\n}",
            "called": [
                "_Error_Handler",
                "HAL_UART_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005598",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_UART_08005598"
        },
        "FUN_08009adc": {
            "renaming": {
                "FUN_08009adc": "FUNC_08009adc"
            },
            "code": "\nint * FUNC_08009adc(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  undefined *puVar1;\n  int *piVar2;\n  int iVar3;\n  int *piVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  size_t sVar8;\n  int *piVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  int iVar13;\n  \n  if (param_2 == (int *)0x0) {\n    piVar4 = (int *)_malloc_r(param_1,param_3);\n    return piVar4;\n  }\n  __malloc_lock();\n  puVar1 = PTR___malloc_av__08009e38;\n  uVar7 = param_2[-1];\n  uVar11 = uVar7 & 0xfffffffc;\n  piVar4 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar10 = 0x10;\n  }\n  else {\n    uVar10 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar10 < 0) goto LAB_08009b8e;\n  }\n  if (uVar10 < param_3) {\nLAB_08009b8e:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  iVar13 = (int)piVar4 + uVar11;\n  uVar12 = uVar11;\n  if ((int)uVar11 < (int)uVar10) {\n    if (*(int *)(PTR___malloc_av__08009e38 + 8) == iVar13) {\n      iVar13 = (*(uint *)(*(int *)(PTR___malloc_av__08009e38 + 8) + 4) & 0xfffffffc) + uVar11;\n      if ((int)(uVar10 + 0x10) <= iVar13) {\n        *(uint *)(PTR___malloc_av__08009e38 + 8) = (int)piVar4 + uVar10;\n        *(uint *)((int)piVar4 + uVar10 + 4) = iVar13 - uVar10 | 1;\n        param_2[-1] = uVar10 | param_2[-1] & 1U;\n        __malloc_unlock(param_1);\n        return param_2;\n      }\n      if (-1 < (int)(uVar7 << 0x1f)) {\n        piVar2 = (int *)((int)piVar4 - param_2[-2]);\n        uVar7 = piVar2[1] & 0xfffffffc;\n        if ((int)(uVar10 + 0x10) <= (int)(iVar13 + uVar7)) {\n          iVar6 = piVar2[3];\n          piVar4 = piVar2 + 2;\n          iVar3 = *piVar4;\n          sVar8 = uVar11 - 4;\n          *(int *)(iVar3 + 0xc) = iVar6;\n          *(int *)(iVar6 + 8) = iVar3;\n          if (sVar8 < 0x25) {\n            iVar3 = *param_2;\n            piVar9 = piVar4;\n            if (0x13 < sVar8) {\n              piVar2[2] = iVar3;\n              piVar2[3] = param_2[1];\n              iVar3 = param_2[2];\n              if (sVar8 < 0x1c) {\n                param_2 = param_2 + 2;\n                piVar9 = piVar2 + 4;\n              }\n              else {\n                piVar2[4] = iVar3;\n                piVar2[5] = param_2[3];\n                iVar3 = param_2[4];\n                if (sVar8 == 0x24) {\n                  piVar2[6] = iVar3;\n                  piVar2[7] = param_2[5];\n                  iVar3 = param_2[6];\n                  param_2 = param_2 + 6;\n                  piVar9 = piVar2 + 8;\n                }\n                else {\n                  param_2 = param_2 + 4;\n                  piVar9 = piVar2 + 6;\n                }\n              }\n            }\n            *piVar9 = iVar3;\n            piVar9[1] = param_2[1];\n            piVar9[2] = param_2[2];\n          }\n          else {\n            memmove(piVar4,param_2,sVar8);\n          }\n          *(uint *)(puVar1 + 8) = (int)piVar2 + uVar10;\n          *(uint *)((int)piVar2 + uVar10 + 4) = (iVar13 + uVar7) - uVar10 | 1;\n          piVar2[1] = uVar10 | piVar2[1] & 1U;\n          __malloc_unlock(param_1);\n          return piVar4;\n        }\nLAB_08009bb0:\n        uVar12 = uVar11 + uVar7;\n        if ((int)uVar10 <= (int)uVar12) {\n          iVar6 = piVar2[3];\n          piVar9 = piVar2 + 2;\n          iVar3 = *piVar9;\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar13 = (int)piVar2 + uVar12;\n          *(int *)(iVar6 + 8) = iVar3;\n          piVar4 = piVar2;\n          if (uVar11 - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          memmove(piVar9,param_2,uVar11 - 4);\n          param_2 = piVar9;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(iVar13 + 4) & 0xfffffffe) + iVar13 + 4) << 0x1f) {\n        uVar5 = *(uint *)(iVar13 + 4) & 0xfffffffc;\n        uVar12 = uVar11 + uVar5;\n        if ((int)uVar12 < (int)uVar10) {\n          if ((int)(uVar7 << 0x1f) < 0) goto LAB_08009b36;\n          piVar2 = (int *)((int)piVar4 - param_2[-2]);\n          uVar7 = piVar2[1] & 0xfffffffc;\n          uVar12 = uVar5 + uVar7 + uVar11;\n          if ((int)uVar12 < (int)uVar10) goto LAB_08009bb0;\n          iVar3 = *(int *)(iVar13 + 8);\n          iVar13 = *(int *)(iVar13 + 0xc);\n          *(int *)(iVar3 + 0xc) = iVar13;\n          *(int *)(iVar13 + 8) = iVar3;\n          piVar9 = piVar2 + 2;\n          iVar3 = *piVar9;\n          iVar6 = piVar2[3];\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar13 = (int)piVar2 + uVar12;\n          *(int *)(iVar6 + 8) = iVar3;\n          piVar4 = piVar2;\n          if (0x24 < uVar11 - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          uVar11 = uVar11 - 4;\n          iVar3 = *param_2;\n          piVar2 = piVar9;\n          if (0x13 < uVar11) {\n            piVar4[2] = iVar3;\n            piVar4[3] = param_2[1];\n            iVar3 = param_2[2];\n            if (uVar11 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar4 + 4;\n            }\n            else {\n              piVar4[4] = iVar3;\n              piVar4[5] = param_2[3];\n              iVar3 = param_2[4];\n              if (uVar11 == 0x24) {\n                piVar4[6] = iVar3;\n                piVar4[7] = param_2[5];\n                iVar3 = param_2[6];\n                param_2 = param_2 + 6;\n                piVar2 = piVar4 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar4 + 6;\n              }\n            }\n          }\n          *piVar2 = iVar3;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          param_2 = piVar9;\n        }\n        else {\n          iVar3 = *(int *)(iVar13 + 8);\n          iVar6 = *(int *)(iVar13 + 0xc);\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar13 = (int)piVar4 + uVar12;\n          *(int *)(iVar6 + 8) = iVar3;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(uVar7 << 0x1f)) {\n        piVar2 = (int *)((int)piVar4 - param_2[-2]);\n        uVar7 = piVar2[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    piVar2 = (int *)_malloc_r(param_1,param_3);\n    if (piVar2 != (int *)0x0) {\n      if ((int *)((param_2[-1] & 0xfffffffeU) + (int)piVar4) == piVar2 + -2) {\n        uVar12 = uVar11 + (piVar2[-1] & 0xfffffffcU);\n        iVar13 = (int)piVar4 + uVar12;\n        goto LAB_08009c00;\n      }\n      sVar8 = uVar11 - 4;\n      if (sVar8 < 0x25) {\n        iVar13 = *param_2;\n        piVar4 = param_2;\n        piVar9 = piVar2;\n        if (0x13 < sVar8) {\n          *piVar2 = iVar13;\n          piVar2[1] = param_2[1];\n          if (sVar8 < 0x1c) {\n            iVar13 = param_2[2];\n            piVar4 = param_2 + 2;\n            piVar9 = piVar2 + 2;\n          }\n          else {\n            piVar2[2] = param_2[2];\n            piVar2[3] = param_2[3];\n            if (sVar8 == 0x24) {\n              piVar2[4] = param_2[4];\n              piVar2[5] = param_2[5];\n              iVar13 = param_2[6];\n              piVar4 = param_2 + 6;\n              piVar9 = piVar2 + 6;\n            }\n            else {\n              iVar13 = param_2[4];\n              piVar4 = param_2 + 4;\n              piVar9 = piVar2 + 4;\n            }\n          }\n        }\n        *piVar9 = iVar13;\n        piVar9[1] = piVar4[1];\n        piVar9[2] = piVar4[2];\n      }\n      else {\n        memmove(piVar2,param_2,sVar8);\n      }\n      _free_r(param_1,param_2);\n    }\n    __malloc_unlock(param_1);\n    param_2 = piVar2;\n  }\n  else {\nLAB_08009c00:\n    if (uVar12 - uVar10 < 0x10) {\n      piVar4[1] = piVar4[1] & 1U | uVar12;\n      *(uint *)(iVar13 + 4) = *(uint *)(iVar13 + 4) | 1;\n    }\n    else {\n      piVar4[1] = piVar4[1] & 1U | uVar10;\n      *(uint *)((int)piVar4 + uVar10 + 4) = uVar12 - uVar10 | 1;\n      *(uint *)(iVar13 + 4) = *(uint *)(iVar13 + 4) | 1;\n      _free_r(param_1,(int)piVar4 + uVar10 + 8);\n    }\n    __malloc_unlock(param_1);\n  }\n  return param_2;\n}\n\n",
            "called": [
                "__malloc_lock",
                "__malloc_unlock",
                "memmove",
                "_malloc_r",
                "_free_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009adc",
            "calling": [
                "__ssprint_r"
            ],
            "imported": false,
            "current_name": "FUNC_08009adc"
        },
        "FUN_08002640": {
            "renaming": {
                "FUN_08002640": "i2c_read_data_08002640",
                "hi2c": "i2c_handle",
                "DevAddress": "device_address",
                "MemAddress": "memory_address",
                "MemAddSize": "memory_address_size",
                "Timeout": "timeout",
                "Tickstart": "start_tick",
                "HVar1": "status",
                "uVar2": "current_tick",
                "tmpreg": "temp_register"
            },
            "code": "HAL_StatusTypeDef i2c_read_data_08002640(I2C_HandleTypeDef *i2c_handle, uint16_t device_address, uint16_t memory_address, uint16_t memory_address_size, uint32_t timeout, uint32_t start_tick) {\n  HAL_StatusTypeDef status = HAL_OK;\n  uint32_t current_tick = 0;\n  i2c_handle->Instance->CR1 |= 0x100;\n  do {\n    if ((~i2c_handle->Instance->SR1 & 1) == 0) {\n      status = HAL_TIMEOUT;\n      break;\n    }\n    current_tick = HAL_GetTick();\n  } while ((timeout == 0xffffffff) || ((timeout != 0) && (current_tick - start_tick <= timeout)));\n  if (status == HAL_OK) {\n    i2c_handle->PreviousState = 0;\n    i2c_handle->State = HAL_I2C_STATE_READY;\n    i2c_handle->Mode = HAL_I2C_MODE_NONE;\n    i2c_handle->Lock = HAL_UNLOCKED;\n    i2c_handle->Instance->DR = (uint8_t)(device_address & 0xfe);\n    status = I2C_WaitOnMasterAddressFlagUntilTimeout(i2c_handle, DAT_080027f0, timeout, start_tick);\n    if (status == HAL_OK) {\n      status = I2C_WaitOnTXEFlagUntilTimeout(i2c_handle, timeout, start_tick);\n      if (status == HAL_OK) {\n        if (memory_address_size == 1) {\n          i2c_handle->Instance->DR = (uint8_t)memory_address;\n        }\n        else {\n          i2c_handle->Instance->DR = (uint8_t)(memory_address >> 8);\n          status = I2C_WaitOnTXEFlagUntilTimeout(i2c_handle, timeout, start_tick);\n          if (status != HAL_OK) {\n            if (i2c_handle->ErrorCode == 4) {\n              i2c_handle->Instance->CR1 |= 0x200;\n              status = HAL_ERROR;\n            }\n            else {\n              status = HAL_TIMEOUT;\n            }\n            break;\n          }\n          i2c_handle->Instance->DR = (uint8_t)memory_address;\n        }\n      }\n      else {\n        if (i2c_handle->ErrorCode == 4) {\n          i2c_handle->Instance->CR1 |= 0x200;\n          status = HAL_ERROR;\n        }\n        else {\n          status = HAL_TIMEOUT;\n        }\n        break;\n      }\n    }\n    else {\n      if (i2c_handle->ErrorCode == 4) {\n        status = HAL_ERROR;\n      }\n      else {\n        status = HAL_TIMEOUT;\n      }\n      break;\n    }\n  }\n  return status;\n}",
            "called": [
                "I2C_WaitOnTXEFlagUntilTimeout",
                "HAL_GetTick",
                "I2C_WaitOnMasterAddressFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002640",
            "calling": [
                "HAL_I2C_Mem_Write"
            ],
            "imported": false,
            "current_name": "i2c_read_data_08002640"
        },
        "FUN_08005dfc": {
            "renaming": {
                "FUN_08005dfc": "print_formatted_string_08005dfc",
                "__s": "destination",
                "__format": "format",
                "local_80": "destination_array",
                "local_78": "destination_array_size",
                "uStack_74": "current_locale",
                "local_70": "current_destination",
                "local_6c": "maximum_characters",
                "uStack_8": "arg_pointer",
                "uStack_4": "unknown_argument",
                "iVar1": "characters_written",
                "PTR__impure_ptr_08005e38": "impure_ptr"
            },
            "code": "int print_formatted_string_08005dfc(char *destination, char *format, ...)\n{\n  int characters_written;\n  va_list args;\n  va_start(args, format);\n  characters_written = vsnprintf(destination, INT_MAX, format, args);\n  va_end(args);\n  return characters_written;\n}",
            "called": [
                "_svfprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005dfc",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "print_formatted_string_08005dfc"
        },
        "FUN_080003f4": {
            "renaming": {
                "FUN_080003f4": "reverse_bits_080003f4",
                "param_1": "num",
                "uVar1": "high_bits",
                "uVar2": "abs_num",
                "uVar3": "shift_amount",
                "uVar5": "shift_amount2",
                "iVar4": "leading_zeroes",
                "in_r12": "unused",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "is_overflow"
            },
            "code": "ulonglong reverse_bits_080003f4(uint num) {\n  uint abs_num = num & 0x7fffffff;\n  if (abs_num == 0) {\n    return 0;\n  }\n  int leading_zeroes = count_leading_zeroes(abs_num);\n  uint shift_amount = leading_zeroes + 21;\n  if (shift_amount < 32) {\n    uint high_bits = (num & 0x80000000) >> 31;\n    uint shifted_num = abs_num << shift_amount;\n    uint shifted_high_bits = high_bits << shift_amount;\n    return ((ulonglong) shifted_num) | shifted_high_bits;\n  }\n  else if (shift_amount < 1075) {\n    uint shift_amount2 = ~(shift_amount - 32);\n    if (shift_amount2 > 30) {\n      shift_amount2 = 30;\n    }\n    uint shifted_num1 = abs_num << shift_amount2;\n    uint shifted_num2 = abs_num >> (shift_amount - 32);\n    uint high_bits = (num & 0x80000000) >> 31;\n    uint shifted_high_bits = high_bits << shift_amount2;\n    return ((ulonglong) shifted_num1) | ((ulonglong) shifted_num2) | shifted_high_bits;\n  }\n  else {\n    uint high_bits = (num & 0x80000000) >> 31;\n    uint shifted_num = abs_num >> (shift_amount - 1059);\n    uint shifted_high_bits = high_bits << 11;\n    return ((ulonglong) shifted_num) | shifted_high_bits;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003f4",
            "calling": [
                "_dtoa_r",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "reverse_bits_080003f4"
        },
        "FUN_0800045c": {
            "renaming": {
                "FUN_0800045c": "calculate_0800045c",
                "param_1": "first_number",
                "param_2": "second_number",
                "bVar1": "byte_var_1",
                "uVar2": "uint_var_2",
                "uVar3": "uint_var_3",
                "uVar4": "uint_var_4",
                "shift_count": "shift_count",
                "iVar5": "int_var_5",
                "uVar6": "uint_var_6",
                "iVar7": "iteration_count",
                "uVar8": "uint_var_8",
                "carry_flag": "carry_flag",
                "msb_set": "msb_set",
                "overflow_flag": "overflow_flag"
            },
            "code": "ulonglong calculate_0800045c(uint first_number, uint second_number)\n{\n  byte bVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  int shift_count;\n  uint uVar6;\n  int iteration_count;\n  uint uVar8;\n  bool carry_flag;\n  bool msb_set;\n  bool overflow_flag;\n  \n  if ((first_number | second_number) == 0) {\n    return CONCAT44(second_number, first_number);\n  }\n  iteration_count = 0x432;\n  uVar8 = second_number >> 0x16;\n  if (uVar8 != 0) {\n    iteration_count = 3;\n    if (second_number >> 0x19 != 0) {\n      iteration_count = 6;\n    }\n    if (second_number >> 0x1c != 0) {\n      iteration_count = iteration_count + 3;\n    }\n    shift_count = iteration_count - ((int)second_number >> 0x1f);\n    uVar8 = first_number << (0x20 - shift_count & 0xff);\n    first_number = first_number >> (shift_count & 0xff) | second_number << (0x20 - shift_count & 0xff);\n    second_number = second_number >> (shift_count & 0xff);\n    iteration_count = shift_count + 0x432;\n  }\n  if (0xfffff < second_number) {\n    if (0x1fffff < second_number) {\n      uVar4 = second_number & 1;\n      second_number = second_number >> 1;\n      bVar1 = (byte)first_number;\n      first_number = (uint)(uVar4 != 0) << 0x1f | first_number >> 1;\n      uVar8 = (uint)(bVar1 & 1) << 0x1f | uVar8 >> 1;\n      iteration_count = iteration_count + 1;\n      if (0xffbfffff < (uint)(iteration_count * 0x200000)) {\n        return 0x7ff0000000000000;\n      }\n    }\nLAB_08000268:\n    msb_set = 0x7fffffff < uVar8;\n    if (uVar8 == 0x80000000) {\n      msb_set = (first_number & 1) != 0;\n    }\n    return CONCAT44(second_number + iteration_count * 0x100000 + (uint)CARRY4(first_number,(uint)msb_set),first_number + msb_set\n                   );\n  }\n  carry_flag = (uVar8 & 0x80000000) != 0;\n  uVar8 = uVar8 << 1;\n  uVar4 = first_number * 2;\n  overflow_flag = CARRY4(first_number,first_number);\n  first_number = first_number * 2 + (uint)carry_flag;\n  second_number = second_number * 2 + (uint)(overflow_flag || CARRY4(uVar4,(uint)carry_flag));\n  iteration_count = iteration_count + -1;\n  if ((second_number & 0x100000) != 0) goto LAB_08000268;\n  uVar2 = first_number;\n  uVar4 = second_number;\n  if (second_number == 0) {\n    uVar2 = 0;\n    uVar4 = first_number;\n  }\n  shift_count = count_leading_zeroes(uVar4);\n  if (second_number == 0) {\n    shift_count = shift_count + 0x20;\n  }\n  uVar6 = shift_count - 0xb;\n  carry_flag = SBORROW4(uVar6,0x20);\n  uVar3 = shift_count - 0x2b;\n  msb_set = (int)uVar3 < 0;\n  overflow_flag = uVar3 == 0;\n  if ((int)uVar6 < 0x20) {\n    carry_flag = SCARRY4(uVar3,0xc);\n    shift_count = shift_count + -0x1f;\n    msb_set = shift_count < 0;\n    overflow_flag = shift_count == 0;\n    uVar6 = uVar6;\n    if (!overflow_flag && msb_set == carry_flag) {\n      uVar8 = uVar4 << (uVar6 & 0xff);\n      uVar4 = uVar4 >> (0xcU - shift_count & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (overflow_flag || msb_set != carry_flag) {\n    shift_count = 0x20 - uVar6;\n  }\n  uVar4 = uVar4 << (uVar6 & 0xff);\n  if (overflow_flag || msb_set != carry_flag) {\n    uVar4 = uVar4 | uVar2 >> (shift_count & 0xff);\n  }\n  if (overflow_flag || msb_set != carry_flag) {\n    uVar2 = uVar2 << (uVar6 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar6 <= iteration_count) {\n    return CONCAT44(uVar4 + (iteration_count - uVar6) * 0x100000,uVar2);\n  }\n  uVar8 = ~(iteration_count - uVar6);\n  if (0x1e < (int)uVar8) {\n    return (ulonglong)(uVar4 >> (uVar8 - 0x1f & 0xff));\n  }\n  shift_count = uVar8 - 0x13;\n  if (shift_count == 0 || shift_count < 0 != SCARRY4(uVar8 - 0x1f,0xc)) {\n    uVar8 = uVar8 + 1;\n    return CONCAT44(uVar4 >> (uVar8 & 0xff),uVar2 >> (uVar8 & 0xff) | uVar4 << (0x20 - uVar8 & 0xff)\n                   );\n  }\n  return (ulonglong)(uVar2 >> (0x20 - (0xcU - shift_count) & 0xff) | uVar4 << (0xcU - shift_count & 0xff));\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800045c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_0800045c"
        },
        "FUN_0800166c": {
            "renaming": {
                "FUN_0800166c": "calculate_priority_0800166c",
                "PriorityGroup": "priority_group",
                "PreemptPriority": "preempt_priority",
                "SubPriority": "sub_priority",
                "SubPriorityBits": "sub_priority_bits",
                "PreemptPriorityBits": "preempt_priority_bits",
                "PriorityGroupTmp": "priority_group_tmp",
                "uVar1": "priority_group_bits",
                "uVar2": "sub_priority_shift"
            },
            "code": "uint32_t calculate_priority_0800166c(uint32_t priority_group, uint32_t preempt_priority, uint32_t sub_priority) {\n  uint32_t sub_priority_bits;\n  uint32_t preempt_priority_bits;\n  uint32_t priority_group_tmp;\n  uint32_t priority_group_bits = priority_group & 7;\n  uint32_t sub_priority_shift = priority_group_bits - 3;\n  if (sub_priority_shift >= 4) {\n    sub_priority_shift = 4;\n  }\n  if (priority_group_bits < 3) {\n    sub_priority_shift = 0;\n  }\n  preempt_priority_bits = (7 - priority_group_bits) & 0xff;\n  sub_priority_bits = sub_priority & ~(-1 << (sub_priority_shift & 0xff));\n  preempt_priority_bits &= ~(-1 << (sub_priority_shift & 0xff));\n  preempt_priority_bits <<= (sub_priority_shift & 0xff);\n  return sub_priority_bits | preempt_priority_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800166c",
            "calling": [
                "HAL_NVIC_SetPriority"
            ],
            "imported": false,
            "current_name": "calculate_priority_0800166c"
        },
        "FUN_0800360c": {
            "renaming": {
                "FUN_0800360c": "enable_timer_interrupts_0800360c",
                "htim": "timer",
                "Instance": "instance",
                "DIER": "dier",
                "CR1": "cr1"
            },
            "code": "HAL_StatusTypeDef enable_timer_interrupts_0800360c(TIM_HandleTypeDef *timer)\n{\n  timer->Instance->DIER |= 1;\n  timer->Instance->CR1 |= 1;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800360c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "enable_timer_interrupts_0800360c"
        },
        "FUN_08005d68": {
            "renaming": {
                "FUN_08005d68": "fill_memory_with_value_08005d68",
                "__s": "memory",
                "__c": "value",
                "__n": "size",
                "puVar1": "current_word",
                "puVar2": "word_aligned_start",
                "puVar3": "next_word",
                "uVar4": "remaining_bytes",
                "uVar5": "value_as_uint",
                "bVar6": "is_start_word_unaligned"
            },
            "code": "void * fill_memory_with_value_08005d68(void *memory, int value, size_t size)\n{\n  uint *current_word;\n  uint *word_aligned_start;\n  uint *word_aligned_end;\n  uint value_as_uint;\n  uint remaining_bytes;\n  bool is_start_word_unaligned;\n\n  word_aligned_start = (uint *)memory;\n  is_start_word_unaligned = ((uint)memory & 3) != 0;\n\n  if (is_start_word_unaligned)\n  {\n    remaining_bytes = size - 1;\n    current_word = (uint *)memory;\n    if (size == 0)\n    {\n      return memory;\n    }\n    while (true)\n    {\n      current_word = (uint *)((int)current_word + 1);\n      *(char *)current_word = (char)value;\n      size = remaining_bytes;\n      if (((uint)current_word & 3) == 0)\n      {\n        break;\n      }\n      remaining_bytes = remaining_bytes - 1;\n      if (remaining_bytes == 0)\n      {\n        return memory;\n      }\n    }\n  }\n\n  if (size >= 4)\n  {\n    value_as_uint = value & 0xffU | (value & 0xffU) << 8;\n    value_as_uint = value_as_uint | value_as_uint << 0x10;\n    word_aligned_end = (uint *)((int)word_aligned_start + (size & 0xfffffff0));\n    while (word_aligned_start != word_aligned_end)\n    {\n      word_aligned_start[0] = value_as_uint;\n      word_aligned_start[1] = value_as_uint;\n      word_aligned_start[2] = value_as_uint;\n      word_aligned_start[3] = value_as_uint;\n      word_aligned_start = word_aligned_start + 4;\n    }\n    size = size & 0xf;\n    current_word = word_aligned_end;\n    if (size < 4)\n    {\n      goto write_remaining_bytes;\n    }\n  }\n  else\n  {\n    current_word = word_aligned_start;\n  }\n\n  remaining_bytes = size;\n\nwrite_remaining_bytes:\n  if (remaining_bytes != 0)\n  {\n    word_aligned_end = (uint *)((int)current_word + remaining_bytes);\n    while (current_word != word_aligned_end)\n    {\n      *(char *)current_word = (char)value;\n      current_word = (uint *)((int)current_word + 1);\n    }\n  }\n  return memory;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d68",
            "calling": [
                "_calloc_r",
                "flush_strbuf"
            ],
            "imported": false,
            "current_name": "fill_memory_with_value_08005d68"
        },
        "FUN_080035a4": {
            "renaming": {
                "FUN_080035a4": "initialize_timer_080035a4",
                "*htim": "*timer",
                "HVar1": "status",
                "HAL_TIM_STATE_RESET": "HAL_TIM_STATE_RESET",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_TIM_STATE_BUSY": "HAL_TIM_STATE_BUSY",
                "HAL_TIM_STATE_READY": "HAL_TIM_STATE_READY",
                "HAL_OK": "HAL_OK",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_TIM_Base_MspInit": "HAL_TIM_Base_MspInit",
                "TIM_Base_SetConfig": "TIM_Base_SetConfig",
                "htim->State": "timer->State",
                "htim->Lock": "timer->Lock",
                "htim->Instance": "timer->Instance",
                "htim->Init": "timer->Init"
            },
            "code": "HAL_StatusTypeDef initialize_timer_080035a4(TIM_HandleTypeDef *timer)\n{\n  HAL_StatusTypeDef status;\n  \n  if (timer == NULL) {\n    status = HAL_ERROR;\n  }\n  else {\n    if (timer->State == HAL_TIM_STATE_RESET) {\n      timer->Lock = HAL_UNLOCKED;\n      HAL_TIM_Base_MspInit(timer);\n    }\n    timer->State = HAL_TIM_STATE_BUSY;\n    TIM_Base_SetConfig(timer->Instance, &(timer->Init));\n    timer->State = HAL_TIM_STATE_READY;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [
                "HAL_TIM_Base_MspInit",
                "TIM_Base_SetConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035a4",
            "calling": [
                "MX_TIM1_Init",
                "MX_TIM2_Init"
            ],
            "imported": false,
            "current_name": "initialize_timer_080035a4"
        },
        "FUN_080041ea": {
            "renaming": {
                "FUN_080041ea": "setChannelState_080041ea",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelState": "channelState",
                "tmp": "bitShift",
                "CCER": "mask"
            },
            "code": "void setChannelState_080041ea(TIM_TypeDef *timer, uint32_t channel, uint32_t channelState) {\n  uint32_t bitShift = channel & 0xff;\n  uint32_t mask = ~(1 << bitShift);\n  timer->CCER = (timer->CCER & mask) | (channelState << bitShift);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041ea",
            "calling": [
                "HAL_TIM_PWM_Start"
            ],
            "imported": false,
            "current_name": "setChannelState_080041ea"
        },
        "FUN_08004ae0": {
            "renaming": {
                "FUN_08004ae0": "read_Mpu6050_data_08004ae0",
                "mpu6050": "mpu",
                "raw": "raw_data",
                "fVar1": "",
                "gz": "",
                "gy": "",
                "gx": "",
                "t": "",
                "az": "",
                "ay": "",
                "ax": "",
                "PTR_I2C_Read_Reg_08004bd4": ""
            },
            "code": "void read_Mpu6050_data_08004ae0(Mpu6050 *mpu6050)\n{\n  float acc_x, acc_y, acc_z, temp, gyro_x, gyro_y, gyro_z;\n  uint8_t raw_data[14];\n  int16_t gz, gy, gx, t, az, ay, ax;\n  (**(code **)PTR_I2C_Read_Reg_08004bd4)(0xd0, 0x3b, raw_data, 0xe);\n  acc_x = (float)__floatsisf((int)CONCAT11(raw_data[0], raw_data[1]));\n  mpu6050->accX = acc_x;\n  acc_y = (float)__floatsisf((int)CONCAT11(raw_data[2], raw_data[3]));\n  mpu6050->accY = acc_y;\n  acc_z = (float)__floatsisf((int)CONCAT11(raw_data[4], raw_data[5]));\n  mpu6050->accZ = acc_z;\n  temp = (float)__floatsisf((int)CONCAT11(raw_data[6], raw_data[7]));\n  mpu6050->temp = temp;\n  gyro_x = (float)__floatsisf((int)CONCAT11(raw_data[8], raw_data[9]));\n  mpu6050->gyroX = gyro_x;\n  gyro_y = (float)__floatsisf((int)CONCAT11(raw_data[10], raw_data[11]));\n  mpu6050->gyroY = gyro_y;\n  gyro_z = (float)__floatsisf((int)CONCAT11(raw_data[12], raw_data[13]));\n  mpu6050->gyroZ = gyro_z;\n  return;\n}",
            "called": [
                "__floatsisf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ae0",
            "calling": [
                "mpu6050_calibrate",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "read_Mpu6050_data_08004ae0"
        },
        "FUN_080015fc": {
            "renaming": {
                "FUN_080015fc": "get_data_shifted_bits_080015fc",
                "DAT_08001614": "data_address"
            },
            "code": "uint32_t get_data_shifted_bits_080015fc(void)\n{\n    uint32_t DAT_08001614 = (uint32_t)DAT_08001614 + 0xc;\n    uint32_t data = *(uint32_t*)DAT_08001614;\n    uint32_t shifted_data = data >> 8;\n    uint32_t masked_data = shifted_data & 7;\n    return masked_data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015fc",
            "calling": [
                "HAL_NVIC_SetPriority"
            ],
            "imported": false,
            "current_name": "get_data_shifted_bits_080015fc"
        },
        "FUN_08000110": {
            "renaming": {
                "FUN_08000110": "is_completed_08000110",
                "param_1": "ptr_init",
                "*PTR_completed_8655_08000128": "*ptr_completed",
                "DAT_0800012c": "dat",
                "PTR__init_08000130": "ptr_init"
            },
            "code": "bool is_completed_08000110(bool* ptr_completed, int DAT_0800012c){\n    if (*PTR_completed_8655_08000128 == false) {\n        if (DAT_0800012c != 0) {\n            return true;\n        }\n        *PTR_completed_8655_08000128 = true;\n    }\n    return false;\n}",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000110",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "is_completed_08000110"
        },
        "FUN_08003504": {
            "renaming": {
                "FUN_08003504": "getSystemCoreClockFrequency_08003504",
                "PTR_SystemCoreClock_08003514": "systemCoreClockFrequencyPtr"
            },
            "code": "uint32_t getSystemCoreClockFrequency_08003504(void)\n{\n  return *(uint32_t *)PTR_SystemCoreClock_08003514;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003504",
            "calling": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "getSystemCoreClockFrequency_08003504"
        },
        "FUN_08000aa4": {
            "renaming": {
                "FUN_08000aa4": "FUNC_08000aa4"
            },
            "code": "\nuint FUNC_08000aa4(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000bde:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_08000bde;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000aa4",
            "calling": [
                "mpu6050_calc_pitch",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "FUNC_08000aa4"
        },
        "FUN_08000c2c": {
            "renaming": {
                "FUN_08000c2c": "calculate_08000c2c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "result",
                "uVar2": "shift_count",
                "iVar3": "leading_zeros",
                "uVar4": "mask",
                "iVar5": "mask",
                "uVar6": "shifted_input_1"
            },
            "code": "uint calculate_08000c2c(uint input_1, uint input_2)\n{\n  uint result = 0;\n  uint shift_count = 0;\n  uint mask = 0x80000000;\n  if ((input_1 | input_2) == 0) {\n    return input_1;\n  }\n  uint temp_input_1 = input_1;\n  uint temp_input_2 = input_2;\n  if (input_2 == 0) {\n    temp_input_1 = 0;\n    temp_input_2 = input_1;\n  }\n  if (input_2 == 0) {\n    mask = 0x40000000;\n  }\n  int leading_zeros = count_leading_zeroes(temp_input_2);\n  shift_count = leading_zeros - 8;\n  mask += shift_count * -0x800000;\n  if (leading_zeros < 8) {\n    uint shifted_input_2 = temp_input_2 << (leading_zeros + 0x18U & 0xff);\n    result = mask + ((temp_input_2 >> (0x20 - (leading_zeros + 0x18U) & 0xff)) - ((int)shifted_input_2 >> 0x1f));\n    if ((temp_input_1 | shifted_input_2 << 1) == 0) {\n      result = result & ~(shifted_input_2 >> 0x1f);\n    }\n    return result;\n  }\n  uint shifted_input_1 = temp_input_1 << (shift_count & 0xff);\n  result = mask + (temp_input_2 << (shift_count & 0xff)) + (temp_input_1 >> (0x20 - shift_count & 0xff)) + (uint)(0x7fffffff < shifted_input_1);\n  if (shifted_input_1 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c2c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_08000c2c"
        },
        "FUN_08000aa8": {
            "renaming": {
                "FUN_08000aa8": "FUNC_08000aa8"
            },
            "code": "\nuint FUNC_08000aa8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000bde:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_08000bde;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000aa8",
            "calling": [
                "mpu6050_calibrate",
                "HAL_TIM_PeriodElapsedCallback",
                "__aeabi_frsub"
            ],
            "imported": false,
            "current_name": "FUNC_08000aa8"
        },
        "FUN_080009ac": {
            "renaming": {
                "FUN_080009ac": "isEndOfString_080009ac",
                "in_CY": "currentChar"
            },
            "code": "bool isEndOfString_080009ac(void)\n{\n  char currentChar;\n  __aeabi_cdcmpeq();\n  return currentChar == '\\0';\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009ac",
            "calling": [
                "_dtoa_r",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "isEndOfString_080009ac"
        },
        "FUN_08001cb8": {
            "renaming": {
                "FUN_08001cb8": "do_nothing_08001cb8"
            },
            "code": "\nvoid do_nothing_08001cb8(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cb8",
            "calling": [
                "HAL_I2C_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08001cb8"
        },
        "FUN_0800438a": {
            "renaming": {
                "FUN_0800438a": "initialize_uart_0800438a",
                "*huart": "huart",
                "HVar1": "status",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_UART_MspInit": "HAL_UART_MspInit",
                "HAL_UART_STATE_RESET": "HAL_UART_STATE_RESET",
                "huart->gState": "huart_gState",
                "huart->Lock": "huart_Lock",
                "huart->Instance->CR1": "huart_CR1",
                "UART_SetConfig": "UART_SetConfig",
                "huart->Instance->CR2": "huart_CR2",
                "huart->Instance->CR3": "huart_CR3",
                "huart->ErrorCode": "huart_ErrorCode",
                "huart->RxState": "huart_RxState",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef initialize_uart_0800438a(UART_HandleTypeDef *huart)\n{\n  HAL_StatusTypeDef status;\n  if (huart == NULL) {\n    status = HAL_ERROR;\n  }\n  else {\n    if (huart->gState == HAL_UART_STATE_RESET) {\n      huart->Lock = HAL_UNLOCKED;\n      HAL_UART_MspInit(huart);\n    }\n    huart->gState = HAL_UART_STATE_BUSY;\n    huart->Instance->CR1 &= ~(1 << 13);\n    UART_SetConfig(huart);\n    huart->Instance->CR2 &= ~(1 << 11);\n    huart->Instance->CR3 &= ~(1 << 2);\n    huart->Instance->CR1 |= (1 << 13);\n    huart->ErrorCode = 0;\n    huart->gState = HAL_UART_STATE_READY;\n    huart->RxState = HAL_UART_STATE_READY;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [
                "UART_SetConfig",
                "HAL_UART_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800438a",
            "calling": [
                "MX_USART1_UART_Init"
            ],
            "imported": false,
            "current_name": "initialize_uart_0800438a"
        },
        "FUN_080014f0": {
            "renaming": {
                "FUN_080014f0": "initializeHardware_080014f0",
                "FUN_080014f0Tick": "initializeHardwareTick",
                "DAT_08001518": "hardwareStatusRegister",
                "HAL_StatusTypeDef": "HAL status type definition",
                "HAL_NVIC_SetPriorityGrouping": "Set NVIC priority grouping",
                "HAL_MspInit": "Initialize Msp"
            },
            "code": "HAL_StatusTypeDef initializeHardware_080014f0(void) {\\n\"\n                     \"    *DAT_08001518 = *DAT_08001518 | 0x10;\\n\"\n                     \"    HAL_NVIC_SetPriorityGrouping(3);\\n\"\n                     \"    initializeHardware_080014f0Tick(0xf);\\n\"\n                     \"    HAL_MspInit();\\n\"\n                     \"    return HAL_OK;\\n\"\n                     \"}",
            "called": [
                "HAL_InitTick",
                "HAL_MspInit",
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initializeHardware_080014f0"
        },
        "FUN_0800046c": {
            "renaming": {
                "FUN_0800046c": "multiply_and_add_0800046c",
                "param_1": "multiplicand",
                "param_2": "multiplier",
                "bVar1": "byte_val",
                "uVar2": "low_bits",
                "uVar3": "high_bits",
                "uVar4": "shifted_multiplier",
                "iVar5": "shift_amount",
                "uVar6": "shifted_multiplicand",
                "iVar7": "num_shifts",
                "uVar8": "sign_bit_set",
                "uVar9": "overflow_flag",
                "bVar10": "carry_flag",
                "bVar11": "overflow_flag",
                "bVar12": "overflow_flag"
            },
            "code": "ulonglong multiply_and_add_0800046c(uint multiplicand, uint multiplier) {\n  byte bVar1;\n  uint shift_amount;\n  uint shifted_multiplicand;\n  uint shifted_multiplier;\n  int num_shifts;\n  uint high_bits;\n  uint low_bits;\n  bool carry_flag;\n  bool overflow_flag;\n  bool sign_bit_set;\n  if ((multiplicand | multiplier) == 0) {\n    return CONCAT44(multiplier, multiplicand);\n  }\n  sign_bit_set = (multiplier & 0x80000000) != 0;\n  shifted_multiplier = multiplier;\n  if (sign_bit_set) {\n    carry_flag = multiplicand != 0;\n    multiplicand = -multiplicand;\n    shifted_multiplier = -multiplier - (uint)carry_flag;\n  }\n  num_shifts = 0x432;\n  high_bits = shifted_multiplier >> 0x16;\n  if (high_bits != 0) {\n    num_shifts = 3;\n    if (shifted_multiplier >> 0x19 != 0) {\n      num_shifts = 6;\n    }\n    if (shifted_multiplier >> 0x1c != 0) {\n      num_shifts = num_shifts + 3;\n    }\n    shift_amount = num_shifts - ((int)shifted_multiplier >> 0x1f);\n    shifted_multiplicand = multiplicand << (0x20 - shift_amount & 0xff);\n    multiplicand = multiplicand >> (shift_amount & 0xff) | shifted_multiplier << (0x20 - shift_amount & 0xff);\n    shifted_multiplier = shifted_multiplier >> (shift_amount & 0xff);\n    num_shifts = shift_amount + 0x432;\n  }\n  if (0xfffff < shifted_multiplier) {\n    if (0x1fffff < shifted_multiplier) {\n      low_bits = shifted_multiplier & 1;\n      shifted_multiplier = shifted_multiplier >> 1;\n      bVar1 = (byte)multiplicand;\n      multiplicand = (uint)(low_bits != 0) << 0x1f | multiplicand >> 1;\n      shifted_multiplicand = (uint)(bVar1 & 1) << 0x1f | shifted_multiplicand >> 1;\n      num_shifts = num_shifts + 1;\n      if (0xffbfffff < (uint)(num_shifts * 0x200000)) {\n        return (ulonglong)(sign_bit_set | 0x7ff00000) << 0x20;\n      }\n    }\nLABEL_08000268:\n    carry_flag = 0x7fffffff < shifted_multiplicand;\n    if (shifted_multiplicand == 0x80000000) {\n      carry_flag = (multiplicand & 1) != 0;\n    }\n    return CONCAT44(shifted_multiplier + num_shifts * 0x100000 + (uint)CARRY4(multiplicand, (uint)carry_flag) | sign_bit_set,\n                    multiplicand + carry_flag);\n  }\n  overflow_flag = (high_bits & 0x80000000) != 0;\n  high_bits = high_bits << 1;\n  low_bits = multiplicand * 2;\n  carry_flag = CARRY4(multiplicand, multiplicand);\n  multiplicand = multiplicand * 2 + (uint)overflow_flag;\n  shifted_multiplier = shifted_multiplier * 2 + (uint)(carry_flag || CARRY4(low_bits, (uint)overflow_flag));\n  num_shifts = num_shifts + -1;\n  if ((shifted_multiplier & 0x100000) != 0) {\n    goto LABEL_08000268;\n  }\n  shift_amount = count_leading_zeroes(shifted_multiplier);\n  if (shifted_multiplier == 0) {\n    shift_amount = shift_amount + 0x20;\n  }\n  shift_amount = shift_amount - 0xb;\n  overflow_flag = SBORROW4(shift_amount, 0x20);\n  num_shifts = shift_amount - 0x2b;\n  carry_flag = (int)num_shifts < 0;\n  sign_bit_set = num_shifts == 0;\n  if ((int)overflow_flag < 0x20) {\n    overflow_flag = SCARRY4(num_shifts, 0xc);\n    shift_amount = shift_amount + -0x1f;\n    carry_flag = shift_amount < 0;\n    sign_bit_set = shift_amount == 0;\n    num_shifts = overflow_flag;\n    if (!sign_bit_set && carry_flag == overflow_flag) {\n      shifted_multiplicand = shifted_multiplier << (shift_amount & 0xff);\n      shifted_multiplier = shifted_multiplier >> (0xcU - num_shifts & 0xff);\n      goto LABEL_080002e0;\n    }\n  }\n  if (sign_bit_set || carry_flag != overflow_flag) {\n    shift_amount = 0x20 - shift_amount;\n  }\n  shifted_multiplier = shifted_multiplier << (shift_amount & 0xff);\n  if (sign_bit_set || carry_flag != overflow_flag) {\n    shifted_multiplier = shifted_multiplier | low_bits >> (shift_amount & 0xff);\n  }\n  if (sign_bit_set || carry_flag != overflow_flag) {\n    low_bits = low_bits << (shift_amount & 0xff);\n  }\nLABEL_080002e0:\n  if ((int)num_shifts <= num_shifts) {\n    return CONCAT44(shifted_multiplier + (num_shifts - shift_amount) * 0x100000 | sign_bit_set,\n                     low_bits);\n  }\n  shift_amount = ~(num_shifts - shift_amount);\n  if (0x1e < (int)shift_amount) {\n    return CONCAT44(multiplier, shifted_multiplier >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  num_shifts = shift_amount - 0x13;\n  if (num_shifts == 0 || num_shifts < 0 != SCARRY4(shift_amount - 0x1f, 0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(sign_bit_set | shifted_multiplier >> (shift_amount & 0xff),\n                    low_bits >> (shift_amount & 0xff) | shifted_multiplier << (0x20 - shift_amount & 0xff));\n  }\n  return CONCAT44(multiplier, low_bits >> (0x20 - (0xcU - num_shifts) & 0xff) | shifted_multiplier << (0xcU - num_shifts & 0xff)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800046c",
            "calling": [],
            "imported": false,
            "current_name": "multiply_and_add_0800046c"
        },
        "FUN_080009c0": {
            "renaming": {
                "FUN_080009c0": "is_not_equal_080009c0",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_nonzero"
            },
            "code": "bool is_not_equal_080009c0(void)\n{\n  bool is_CY_zero;\n  bool is_ZR_nonzero;\n  __aeabi_cdcmpeq();\n  return !is_CY_zero || is_ZR_nonzero;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c0",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "is_not_equal_080009c0"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "configure_timer_08003f18",
                "TIMx": "timer",
                "OC_Config": "output_channel_config",
                "uVar1": "output_compare_mode",
                "uVar2": "tmp_ccer",
                "tmpccmrx": "tmp_ccmrx",
                "tmpcr2": "control_register_2",
                "tmpccer": "tmp_ccer",
                "DAT_08003ff4": "PTR_08003ff4"
            },
            "code": "void configure_timer_08003f18(TIM_TypeDef *timer, TIM_OC_InitTypeDef *output_channel_config)\n{\n  uint32_t control_register_2;\n  uint32_t tmp_ccer;\n  uint32_t tmp_ccmrx;\n  uint32_t output_compare_mode;\n\n  timer->CCER &= 0xfffffeff;\n  control_register_2 = timer->CR2;\n  output_compare_mode = output_channel_config->OCMode;\n  tmp_ccer = output_channel_config->OCPolarity << 8 | timer->CCER & 0xfffffdff;\n  if (timer == DAT_08003ff4) {\n    tmp_ccer = (output_channel_config->OCNPolarity << 8 | tmp_ccer & 0xfffff7ff) & 0xfffffbff;\n    control_register_2 = output_channel_config->OCNIdleState << 4 | output_channel_config->OCIdleState << 4 | control_register_2 & 0xffffcfff;\n  }\n  timer->CR2 = control_register_2;\n  timer->CCMR2 = output_compare_mode | timer->CCMR2 & 0xffffff8c;\n  timer->CCR3 = output_channel_config->Pulse;\n  timer->CCER = tmp_ccer;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_timer_08003f18"
        },
        "FUN_080097cc": {
            "renaming": {
                "FUN_080097cc": "process_data_080097cc",
                "param_1": "error_code",
                "param_2": "data",
                "param_3": "data_size",
                "pvVar1": "src_ptr",
                "pvVar2": "copy_size",
                "iVar3": "remaining_size",
                "pvVar4": "buffer_end",
                "pvVar5": "dst_ptr",
                "ppvVar6": "current_data_ptr",
                "ppvVar7": "next_data_ptr",
                "__src": "src_ptr",
                "__n": "copy_size",
                "memcpy": "memcpy",
                "_malloc_r": "_malloc_r",
                "_realloc_r": "_realloc_r",
                "_free_r": "_free_r"
            },
            "code": "undefined4 process_data_080097cc(undefined4 *error_code, void **data, int *data_size)\n{\n  void *src_ptr;\n  void *dst_ptr;\n  int remaining_size;\n  void *buffer_start;\n  void *buffer_end;\n  void **current_data_ptr;\n  void **next_data_ptr;\n  void *temp_ptr;\n  size_t copy_size;\n  \n  if (data_size[2] == 0)\n  {\n    data_size[1] = 0;\n    return 0;\n  }\n  \n  current_data_ptr = (void **)*data_size;\n  buffer_start = *data;\n  buffer_end = data[2];\n  \n  do\n  {\n    next_data_ptr = current_data_ptr + 2;\n    src_ptr = *current_data_ptr;\n    dst_ptr = current_data_ptr[1];\n    current_data_ptr = next_data_ptr;\n  \n    if (dst_ptr != NULL)\n    {\n      if (buffer_end <= dst_ptr)\n      {\n        copy_size = (int)buffer_start - (int)data[1];\n        buffer_end = (void *)(((int)data[5] * 3) / 2);\n        dst_ptr = (void *)((int)dst_ptr + copy_size + 1);\n        if (buffer_end < dst_ptr)\n        {\n          buffer_end = dst_ptr;\n        }\n        \n        if ((int)((uint)data[3] << 0x15) < 0)\n        {\n          temp_ptr = (void *)_malloc_r(error_code, buffer_end);\n          if (temp_ptr == NULL)\n          {\n            *error_code = 0xc;\n            data_size[1] = 0;\n            data_size[2] = 0;\n            return 0xffffffff;\n          }\n          memcpy(temp_ptr, data[1], copy_size);\n          data[3] = data[3] & 0xfb7f | 0x80;\n        }\n        else\n        {\n          temp_ptr = (void *)_realloc_r(error_code, data[1], buffer_end);\n          if (temp_ptr == NULL)\n          {\n            _free_r(error_code, data[1]);\n            *error_code = 0xc;\n            data_size[1] = 0;\n            data_size[2] = 0;\n            return 0xffffffff;\n          }\n        }\n        dst_ptr = (void *)((int)temp_ptr + copy_size);\n        data[5] = buffer_end;\n        data[1] = temp_ptr;\n        *data = dst_ptr;\n        data[2] = (void *)((int)buffer_end - copy_size);\n      }\n      \n      copy_size = (size_t)dst_ptr;\n      memmove(*data, src_ptr, copy_size);\n      remaining_size = data_size[2];\n      buffer_end = (void *)((int)data[2] - (int)dst_ptr);\n      *data = (void *)((int)*data + (int)dst_ptr);\n      data_size[2] = remaining_size - (int)copy_size;\n    }\n  } while (remaining_size - (int)dst_ptr != 0);\n  \n  data_size[1] = 0;\n  return 0;\n}",
            "called": [
                "_malloc_r",
                "memmove",
                "_free_r",
                "_realloc_r",
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080097cc",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "process_data_080097cc"
        },
        "FUN_08001f6c": {
            "renaming": {
                "FUN_08001f6c": "FUNC_08001f6c"
            },
            "code": "\nHAL_StatusTypeDef\nFUNC_08001f6c(I2C_HandleTypeDef *hi2c,uint16_t DevAddress,uint16_t MemAddress,uint16_t MemAddSize\n                ,uint8_t *pData,uint16_t Size,uint32_t Timeout)\n\n{\n  uint uVar1;\n  HAL_StatusTypeDef HVar2;\n  uint32_t Tickstart;\n  uint32_t uVar3;\n  char cVar4;\n  uint uVar5;\n  int iVar6;\n  uint8_t *puVar7;\n  bool bVar8;\n  uint32_t tmpreg_3;\n  uint32_t tmpreg_2;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg;\n  uint32_t tickstart;\n  \n  Tickstart = HAL_GetTick();\n  uVar1 = DAT_080021e0;\n  if (hi2c->State == HAL_I2C_STATE_READY) {\n    do {\n      if ((uVar1 >> 0x10 & 0xff) == 1) {\n        uVar5 = uVar1 & ~hi2c->Instance->SR1 & 0xffff;\n        bVar8 = uVar5 == 0;\n        if (bVar8) {\n          uVar5 = 1;\n        }\n        cVar4 = (char)uVar5;\n        if (!bVar8) {\n          cVar4 = '\\0';\n        }\n      }\n      else {\n        uVar5 = uVar1 & ~hi2c->Instance->SR2 & 0xffff;\n        bVar8 = uVar5 == 0;\n        if (bVar8) {\n          uVar5 = 1;\n        }\n        cVar4 = (char)uVar5;\n        if (!bVar8) {\n          cVar4 = '\\0';\n        }\n      }\n      if (cVar4 != '\\x01') {\n        iVar6 = 0;\n        goto LAB_08002040;\n      }\n      uVar3 = HAL_GetTick();\n    } while (uVar3 - Tickstart < 0x1a);\n    hi2c->PreviousState = 0;\n    hi2c->State = HAL_I2C_STATE_READY;\n    hi2c->Mode = HAL_I2C_MODE_NONE;\n    hi2c->Lock = HAL_UNLOCKED;\n    iVar6 = 3;\nLAB_08002040:\n    if (iVar6 == 0) {\n      if (hi2c->Lock == HAL_LOCKED) {\n        HVar2 = HAL_BUSY;\n      }\n      else {\n        hi2c->Lock = HAL_LOCKED;\n        if ((hi2c->Instance->CR1 & 1) != 1) {\n          hi2c->Instance->CR1 = hi2c->Instance->CR1 | 1;\n        }\n        hi2c->Instance->CR1 = hi2c->Instance->CR1 & 0xfffff7ff;\n        hi2c->State = HAL_I2C_STATE_BUSY_RX;\n        hi2c->Mode = HAL_I2C_MODE_MEM;\n        hi2c->ErrorCode = 0;\n        hi2c->pBuffPtr = pData;\n        hi2c->XferCount = Size;\n        hi2c->XferOptions = DAT_080021e4;\n        hi2c->XferSize = hi2c->XferCount;\n        HVar2 = I2C_RequestMemoryRead(hi2c,DevAddress,MemAddress,MemAddSize,Timeout,Tickstart);\n        if (HVar2 == HAL_OK) {\n          if (hi2c->XferSize == 0) {\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x200;\n          }\n          else if (hi2c->XferSize == 1) {\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 & 0xfffffbff;\n            disableIRQinterrupts();\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x200;\n            enableIRQinterrupts();\n          }\n          else if (hi2c->XferSize == 2) {\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x800;\n            disableIRQinterrupts();\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 & 0xfffffbff;\n            enableIRQinterrupts();\n          }\n          else {\n            hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x400;\n          }\n          while (uVar1 = DAT_080024bc, hi2c->XferSize != 0) {\n            if (hi2c->XferSize < 4) {\n              if (hi2c->XferSize == 1) {\n                HVar2 = I2C_WaitOnRXNEFlagUntilTimeout(hi2c,Timeout,Tickstart);\n                if (HVar2 != HAL_OK) {\n                  if (hi2c->ErrorCode == 0x20) {\n                    return HAL_TIMEOUT;\n                  }\n                  return HAL_ERROR;\n                }\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n              }\n              else if (hi2c->XferSize == 2) {\n                do {\n                  if ((uVar1 >> 0x10 & 0xff) == 1) {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR1 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR2 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  if (cVar4 != '\\0') {\n                    iVar6 = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((Timeout == 0xffffffff) ||\n                        ((Timeout != 0 && (uVar3 = HAL_GetTick(), uVar3 - Tickstart <= Timeout))));\n                hi2c->PreviousState = 0;\n                hi2c->State = HAL_I2C_STATE_READY;\n                hi2c->Mode = HAL_I2C_MODE_NONE;\n                hi2c->Lock = HAL_UNLOCKED;\n                iVar6 = 3;\nLAB_080022fa:\n                if (iVar6 != 0) {\n                  return HAL_TIMEOUT;\n                }\n                disableIRQinterrupts();\n                hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x200;\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n                enableIRQinterrupts();\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n              }\n              else {\n                do {\n                  if ((uVar1 >> 0x10 & 0xff) == 1) {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR1 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR2 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  if (cVar4 != '\\0') {\n                    iVar6 = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((Timeout == 0xffffffff) ||\n                        ((Timeout != 0 && (uVar3 = HAL_GetTick(), uVar3 - Tickstart <= Timeout))));\n                hi2c->PreviousState = 0;\n                hi2c->State = HAL_I2C_STATE_READY;\n                hi2c->Mode = HAL_I2C_MODE_NONE;\n                hi2c->Lock = HAL_UNLOCKED;\n                iVar6 = 3;\nLAB_08002418:\n                if (iVar6 != 0) {\n                  return HAL_TIMEOUT;\n                }\n                hi2c->Instance->CR1 = hi2c->Instance->CR1 & 0xfffffbff;\n                disableIRQinterrupts();\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n                uVar1 = DAT_080024bc;\n                do {\n                  if ((uVar1 >> 0x10 & 0xff) == 1) {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR1 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar5 = uVar1 & ~hi2c->Instance->SR2 & 0xffff;\n                    bVar8 = uVar5 == 0;\n                    if (bVar8) {\n                      uVar5 = 1;\n                    }\n                    cVar4 = (char)uVar5;\n                    if (!bVar8) {\n                      cVar4 = '\\0';\n                    }\n                  }\n                  if (cVar4 != '\\0') {\n                    iVar6 = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((Timeout == 0xffffffff) ||\n                        ((Timeout != 0 && (uVar3 = HAL_GetTick(), uVar3 - Tickstart <= Timeout))));\n                hi2c->PreviousState = 0;\n                hi2c->State = HAL_I2C_STATE_READY;\n                hi2c->Mode = HAL_I2C_MODE_NONE;\n                hi2c->Lock = HAL_UNLOCKED;\n                iVar6 = 3;\nLAB_0800250a:\n                if (iVar6 != 0) {\n                  return HAL_TIMEOUT;\n                }\n                hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x200;\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n                enableIRQinterrupts();\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n              }\n            }\n            else {\n              HVar2 = I2C_WaitOnRXNEFlagUntilTimeout(hi2c,Timeout,Tickstart);\n              if (HVar2 != HAL_OK) {\n                if (hi2c->ErrorCode == 0x20) {\n                  return HAL_TIMEOUT;\n                }\n                return HAL_ERROR;\n              }\n              uVar3 = hi2c->Instance->DR;\n              puVar7 = hi2c->pBuffPtr;\n              hi2c->pBuffPtr = puVar7 + 1;\n              *puVar7 = (uint8_t)uVar3;\n              hi2c->XferSize = hi2c->XferSize - 1;\n              hi2c->XferCount = hi2c->XferCount - 1;\n              if ((hi2c->Instance->SR1 & 4) == 4) {\n                uVar3 = hi2c->Instance->DR;\n                puVar7 = hi2c->pBuffPtr;\n                hi2c->pBuffPtr = puVar7 + 1;\n                *puVar7 = (uint8_t)uVar3;\n                hi2c->XferSize = hi2c->XferSize - 1;\n                hi2c->XferCount = hi2c->XferCount - 1;\n              }\n            }\n          }\n          hi2c->State = HAL_I2C_STATE_READY;\n          hi2c->Mode = HAL_I2C_MODE_NONE;\n          hi2c->Lock = HAL_UNLOCKED;\n          HVar2 = HAL_OK;\n        }\n        else if (hi2c->ErrorCode == 4) {\n          hi2c->Lock = HAL_UNLOCKED;\n          HVar2 = HAL_ERROR;\n        }\n        else {\n          hi2c->Lock = HAL_UNLOCKED;\n          HVar2 = HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      HVar2 = HAL_BUSY;\n    }\n  }\n  else {\n    HVar2 = HAL_BUSY;\n  }\n  return HVar2;\n}\n\n",
            "called": [
                "I2C_WaitOnRXNEFlagUntilTimeout",
                "I2C_RequestMemoryRead",
                "HAL_GetTick"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001f6c",
            "calling": [
                "_i2c_read_reg"
            ],
            "imported": false,
            "current_name": "FUNC_08001f6c"
        },
        "FUN_080014ec": {
            "renaming": {
                "FUN_080014ec": "do_nothing_080014ec"
            },
            "code": "\nvoid do_nothing_080014ec(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ec",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "do_nothing_080014ec"
        },
        "FUN_08000c3c": {
            "renaming": {
                "FUN_08000c3c": "calculate_quotient_08000c3c",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "uVar2": "dividend_copy",
                "iVar3": "leading_zeroes",
                "uVar4": "shift_amount",
                "iVar6": "adjustment",
                "uVar5": "sign_bit",
                "uVar7": "left_shifted_dividend"
            },
            "code": "uint calculate_quotient_08000c3c(uint dividend, uint divisor)\n{\n  uint quotient = 0;\n  uint sign_bit = divisor & 0x80000000;\n  if (sign_bit != 0) {\n    bool dividend_is_nonzero = dividend != 0;\n    dividend = -dividend;\n    divisor = -divisor - (uint)dividend_is_nonzero;\n  }\n  if (divisor == 0) {\n    return 0;\n  }\n  if (dividend == 0) {\n    return 0;\n  }\n  sign_bit = sign_bit | 0x5b000000;\n  if (divisor == 0) {\n    sign_bit = sign_bit + 0xf0000000;\n  }\n  int leading_zeroes = count_leading_zeroes(divisor);\n  uint shift_amount = leading_zeroes - 8;\n  int adjustment = (sign_bit - 0x800000) + shift_amount * -0x800000;\n  if (leading_zeroes < 8) {\n    uint shifted_divisor = divisor << (leading_zeroes + 0x18U & 0xff);\n    uint shifted_dividend = dividend << (leading_zeroes + 0x18U & 0xff);\n    uint quotient_candidate = (shifted_dividend >> 0x1f) + (shifted_dividend + shifted_divisor) / divisor;\n    if ((dividend | shifted_divisor << 1) == 0) {\n      quotient_candidate = quotient_candidate & ~(shifted_divisor >> 0x1f);\n    }\n    quotient = quotient_candidate;\n  }\n  else {\n    uint left_shifted_dividend = dividend << shift_amount;\n    uint left_shifted_divisor = divisor << shift_amount;\n    uint quotient_candidate = (left_shifted_dividend + left_shifted_divisor / 2) / left_shifted_divisor;\n    quotient = quotient_candidate;\n  }\n  if ((dividend ^ divisor) & 0x80000000) {\n    quotient = -quotient;\n  }\n  return quotient;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c3c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_quotient_08000c3c"
        },
        "FUN_08003518": {
            "renaming": {
                "FUN_08003518": "get_HCLK_frequency_divided_by_APB_Prescaler_08003518",
                "uVar1": "HCLK_frequency",
                "DAT_08003538": "data_pointer",
                "APB_prescaler": "APB_prescaler_value",
                "PTR_APBPrescTable_0800353c": "APB_prescaler_division_table",
                "HCLK_frequency_divided_by_APB_prescaler": "HCLK_frequency_divided_by_APB_prescaler"
            },
            "code": "uint32_t get_HCLK_frequency_divided_by_APB_Prescaler_08003518(void)\n{\n  uint32_t HCLK_frequency = HAL_RCC_GetHCLKFreq();\n  uint32_t APB_prescaler = *(uint *)(DAT_08003538 + 4) >> 8 & 7;\n  uint32_t APB_prescaler_division_factor = PTR_APBPrescTable_0800353c[APB_prescaler];\n  uint32_t HCLK_frequency_divided_by_APB_prescaler = HCLK_frequency >> APB_prescaler_division_factor;\n  return HCLK_frequency_divided_by_APB_prescaler;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003518",
            "calling": [
                "UART_SetConfig",
                "HAL_I2C_Init"
            ],
            "imported": false,
            "current_name": "get_HCLK_frequency_divided_by_APB_Prescaler_08003518"
        },
        "FUN_08002d8a": {
            "renaming": {
                "FUN_08002d8a": "do_nothing_08002d8a"
            },
            "code": "\nvoid do_nothing_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d8a",
            "calling": [
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08002d8a"
        },
        "FUN_08005780": {
            "renaming": {
                "FUN_08005780": "set_flag_08005780",
                "DAT_080057dc": "flag_ptr",
                "DAT_080057e0": "flag_mask1",
                "flag_mask2": "0xfef6ffff",
                "flag_mask3": "0xfffbffff",
                "flag_mask4": "0xff80ffff",
                "flag_value1": "0x9f0000",
                "DAT_080057e4": "flag_ptr2",
                "flag_value2": "0x8000000"
            },
            "code": "\\\nvoid set_flag_08005780(void)\\n\\\n{\\n\\\n  *DAT_080057dc = *DAT_080057dc | 1;\\n\\\n  DAT_080057dc[1] = DAT_080057dc[1] & DAT_080057e0;\\n\\\n  *DAT_080057dc = *DAT_080057dc & flag_mask2;\\n\\\n  *DAT_080057dc = *DAT_080057dc & flag_mask3;\\n\\\n  DAT_080057dc[1] = DAT_080057dc[1] & flag_mask4;\\n\\\n  DAT_080057dc[2] = flag_value1;\\n\\\n  *(undefined4 *)(DAT_080057e4 + 8) = flag_value2;\\n\\\n  return;\\n\\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005780",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "set_flag_08005780"
        },
        "FUN_08000fe0": {
            "renaming": {
                "FUN_08000fe0": "check_if_char_not_null_08000fe0",
                "in_ZR": "input_char",
                "__aeabi_cfcmpeq": "comparison_result"
            },
            "code": "bool check_if_char_not_null_08000fe0(char input_char) {\n  int comparison_result = __aeabi_cfcmpeq();\n  return input_char != '\\0';\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fe0",
            "calling": [],
            "imported": false,
            "current_name": "check_if_char_not_null_08000fe0"
        },
        "FUN_08008818": {
            "renaming": {
                "FUN_08008818": "execute_global_destructors_08008818",
                "iVar1": "num_destructors",
                "ppcVar2": "destructor_ptr"
            },
            "code": "void execute_global_destructors_08008818(void)\n{\n  int num_destructors = (int)PTR___fini_array_end_08008844 - (int)PTR___do_global_dtors_aux_fini_array_entry_08008848 >> 2;\n  if (num_destructors != 0) {\n    code **destructor_ptr = (code **)(PTR___do_global_dtors_aux_fini_array_entry_08008848 + (num_destructors + 0x3fffffff) * 4);\n    do {\n      num_destructors--;\n      (**destructor_ptr)();\n      destructor_ptr--;\n    } while (num_destructors != 0);\n  }\n  _fini();\n  return;\n}",
            "called": [
                "__do_global_dtors_aux",
                "_fini",
                "frame_dummy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008818",
            "calling": [],
            "imported": false,
            "current_name": "execute_global_destructors_08008818"
        },
        "FUN_08000418": {
            "renaming": {
                "FUN_08000418": "convert_uint_to_ull_08000418",
                "param_1": "input",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "sign_bit",
                "uVar2": "temp_input",
                "uVar3": "shift_32_minus_1",
                "uVar4": "shift_right_3",
                "uVar5": "shift_left_1",
                "uVar7": "shift_amount_1",
                "iVar6": "num_leading_zeroes",
                "bVar8": "is_shift_amount_1_zero",
                "bVar9": "is_shift_left_1_zero",
                "bVar10": "is_shift_amount_1_negative",
                "mask": "mask"
            },
            "code": "unsigned long long convert_uint_to_ull_08000418(uint input, undefined4 param_2, undefined4 param_3, uint param_4)\n{\n  uint shift_left_1 = input << 1;\n  bool is_shift_left_1_zero = shift_left_1 == 0;\n  uint sign_bit = ((input & 0x80000000) != 0) << 0x1f;\n  uint shift_right_3 = ((int)shift_left_1 >> 3) >> 1;\n  uint shift_32_minus_1 = sign_bit | shift_right_3;\n  input = input << 0x1d;\n  if (!is_shift_left_1_zero) {\n    uint mask = shift_left_1 & 0xff000000;\n    is_shift_left_1_zero = mask == 0;\n  }\n  if (!is_shift_left_1_zero) {\n    is_shift_left_1_zero = mask == 0xff000000;\n  }\n  if (!is_shift_left_1_zero) {\n    return CONCAT44(shift_32_minus_1, input) ^ 0x3800000000000000;\n  }\n  if ((shift_left_1 & 0xffffff) == 0) {\n    return CONCAT44(shift_32_minus_1, input);\n  }\n  if (mask == 0xff000000) {\n    return CONCAT44(shift_32_minus_1, input) | 0x8000000000000;\n  }\n  uint temp_input = input;\n  uint temp_shift_right_3 = shift_right_3;\n  if (shift_right_3 == 0) {\n    temp_input = 0;\n    temp_shift_right_3 = input;\n  }\n  int num_leading_zeroes = count_leading_zeroes(temp_shift_right_3);\n  if (shift_right_3 == 0) {\n    num_leading_zeroes = num_leading_zeroes + 0x20;\n  }\n  uint shift_amount_1 = num_leading_zeroes - 0xb;\n  bool is_shift_amount_1_negative = shift_amount_1 < 0;\n  bool is_shift_amount_1_zero = shift_amount_1 == 0;\n  if (shift_amount_1 < 0x20) {\n    is_shift_amount_1_negative = (shift_amount_1 - 0xc) < 0;\n    num_leading_zeroes = num_leading_zeroes + -0x1f;\n    is_shift_amount_1_zero = num_leading_zeroes == 0;\n    shift_amount_1 = shift_amount_1 - 0xc;\n    if (!is_shift_amount_1_zero && is_shift_amount_1_negative == is_shift_amount_1_zero) {\n      temp_input = temp_shift_right_3 << (shift_amount_1 & 0xff);\n      temp_shift_right_3 = temp_shift_right_3 >> (0xcU - num_leading_zeroes & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_shift_amount_1_zero || is_shift_amount_1_negative != is_shift_amount_1_zero) {\n    uint shift_amount_2 = 0x20 - shift_amount_1;\n    temp_shift_right_3 = temp_shift_right_3 << (shift_amount_1 & 0xff);\n    if (is_shift_amount_1_zero || is_shift_amount_1_negative != is_shift_amount_1_zero) {\n      temp_shift_right_3 = temp_shift_right_3 | temp_input >> (shift_amount_2 & 0xff);\n    }\n    if (is_shift_amount_1_zero || is_shift_amount_1_negative != is_shift_amount_1_zero) {\n      temp_input = temp_input << (shift_amount_1 & 0xff);\n    }\n  }\nLAB_080002e0:\n  if (shift_amount_1 < 0x381) {\n    return CONCAT44(temp_shift_right_3 + (0x380 - shift_amount_1) * 0x100000 | sign_bit, temp_input);\n  }\n  uint shift_amount_3 = ~(0x380 - shift_amount_1);\n  if (0x1e < shift_amount_3) {\n    return CONCAT44(shift_32_minus_1, temp_shift_right_3 >> (shift_amount_3 - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  int shift_amount_4 = shift_amount_3 - 0x13;\n  if (shift_amount_4 == 0 || shift_amount_4 < 0 != SCARRY4(shift_amount_3 - 0x1f,0xc)) {\n    shift_amount_3 = shift_amount_3 + 1;\n    return CONCAT44(sign_bit | temp_shift_right_3 >> (shift_amount_3 & 0xff),\n                    temp_input >> (shift_amount_3 & 0xff) | temp_shift_right_3 << (0x20 - shift_amount_3 & 0xff));\n  }\n  return CONCAT44(shift_32_minus_1,temp_input >> (0x20 - (0xcU - shift_amount_4) & 0xff) | temp_shift_right_3 << (0xcU - shift_amount_4 & 0xff)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000418",
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "mpu6050_calc_pitch",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "convert_uint_to_ull_08000418"
        },
        "FUN_080055f4": {
            "renaming": {
                "FUN_080055f4": "initializeGPIO_080055f4",
                "GPIO_InitStruct": "GPIO_Init",
                "tmpreg_1": "pin_mask_1",
                "tmpreg_2": "pin_mask_2",
                "tmpreg": "pin_mask_3"
            },
            "code": "void initializeGPIO_080055f4(void)\n{\n  uint32_t pin_mask_1 = 0x20;\n  uint32_t pin_mask_2 = 0x4;\n  uint32_t pin_mask_3 = 0x8;\n  GPIO_InitTypeDef GPIO_InitStruct;\n  *(uint *)(DAT_0800566c + 0x18) |= pin_mask_1;\n  *(uint *)(DAT_0800566c + 0x18) |= pin_mask_2;\n  *(uint *)(DAT_0800566c + 0x18) |= pin_mask_3;\n  HAL_GPIO_WritePin(DAT_08005670, 0x1e, GPIO_PIN_RESET);\n  GPIO_InitStruct.Pin = 0x1e;\n  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;\n  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;\n  HAL_GPIO_Init(DAT_08005670, &GPIO_InitStruct);\n  return;\n}",
            "called": [
                "HAL_GPIO_Init",
                "HAL_GPIO_WritePin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055f4",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initializeGPIO_080055f4"
        },
        "FUN_080053b0": {
            "renaming": {
                "FUN_080053b0": "initialize_TIM1_PWM_080053b0",
                "HVar1": "status",
                "sBreakDeadTimeConfig": "break_dead_time_config",
                "sConfigOC": "output_compare_config",
                "sMasterConfig": "master_config",
                "sClockSourceConfig": "clock_source_config",
                "PTR_htim1_080054f4": "htim1",
                "DAT_080054f8": "TIM1",
                "HAL_TIM_Base_Init": "HAL_TIM_Base_Init",
                "_Error_Handler": "_Error_Handler",
                "HAL_TIM_ConfigClockSource": "HAL_TIM_ConfigClockSource",
                "HAL_TIM_PWM_Init": "HAL_TIM_PWM_Init",
                "HAL_TIMEx_MasterConfigSynchronization": "HAL_TIMEx_MasterConfigSynchronization",
                "HAL_TIM_PWM_ConfigChannel": "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIMEx_ConfigBreakDeadTime": "HAL_TIMEx_ConfigBreakDeadTime",
                "HAL_TIM_MspPostInit": "HAL_TIM_MspPostInit",
                "ClockSource": "ClockSource",
                "OCMode": "OCMode",
                "Pulse": "Pulse",
                "OCPolarity": "OCPolarity",
                "OCNPolarity": "OCNPolarity",
                "OCFastMode": "OCFastMode",
                "OCIdleState": "OCIdleState",
                "OCNIdleState": "OCNIdleState",
                "OffStateRunMode": "OffStateRunMode",
                "OffStateIDLEMode": "OffStateIDLEMode",
                "LockLevel": "LockLevel",
                "DeadTime": "DeadTime",
                "BreakState": "BreakState",
                "BreakPolarity": "BreakPolarity",
                "AutomaticOutput": "AutomaticOutput"
            },
            "code": "void initialize_TIM1_PWM_080053b0(void)\n{\n  HAL_StatusTypeDef status;\n  TIM_BreakDeadTimeConfigTypeDef break_dead_time_config;\n  TIM_OC_InitTypeDef output_compare_config;\n  TIM_MasterConfigTypeDef master_config;\n  TIM_ClockConfigTypeDef clock_source_config;\n  PTR_htim1_080054f4.Instance = DAT_080054f8;\n  PTR_htim1_080054f4.Init.Prescaler = 0;\n  PTR_htim1_080054f4.Init.CounterMode = TIM_COUNTERMODE_UP;\n  PTR_htim1_080054f4.Init.Period = 100;\n  PTR_htim1_080054f4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;\n  PTR_htim1_080054f4.Init.RepetitionCounter = 0;\n  status = HAL_TIM_Base_Init(&PTR_htim1_080054f4);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  clock_source_config.ClockSource = TIM_CLOCKSOURCE_INTERNAL;\n  status = HAL_TIM_ConfigClockSource(&PTR_htim1_080054f4, &clock_source_config);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  status = HAL_TIM_PWM_Init(&PTR_htim1_080054f4);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  master_config.MasterOutputTrigger = TIM_TRGO_RESET;\n  master_config.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;\n  status = HAL_TIMEx_MasterConfigSynchronization(&PTR_htim1_080054f4, &master_config);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  output_compare_config.OCMode = TIM_OCMODE_PWM1;\n  output_compare_config.Pulse = 0;\n  output_compare_config.OCPolarity = TIM_OCPOLARITY_HIGH;\n  output_compare_config.OCFastMode = TIM_OCFAST_DISABLE;\n  output_compare_config.OCIdleState = TIM_OCIDLESTATE_RESET;\n  status = HAL_TIM_PWM_ConfigChannel(&PTR_htim1_080054f4, &output_compare_config, TIM_CHANNEL_1);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  status = HAL_TIM_PWM_ConfigChannel(&PTR_htim1_080054f4, &output_compare_config, TIM_CHANNEL_3);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  break_dead_time_config.OffStateRunMode = TIM_OSSR_DISABLE;\n  break_dead_time_config.OffStateIDLEMode = TIM_OSSI_DISABLE;\n  break_dead_time_config.LockLevel = TIM_LOCKLEVEL_OFF;\n  break_dead_time_config.DeadTime = 0;\n  break_dead_time_config.BreakState = TIM_BREAK_DISABLE;\n  break_dead_time_config.BreakPolarity = TIM_BREAKPOLARITY_HIGH;\n  break_dead_time_config.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;\n  status = HAL_TIMEx_ConfigBreakDeadTime(&PTR_htim1_080054f4, &break_dead_time_config);\n  if (status != HAL_OK) {\n    _Error_Handler(__FILE__, __LINE__);\n  }\n  HAL_TIM_MspPostInit(&PTR_htim1_080054f4);\n}\n",
            "called": [
                "HAL_TIM_ConfigClockSource",
                "HAL_TIMEx_ConfigBreakDeadTime",
                "HAL_TIM_MspPostInit",
                "_Error_Handler",
                "HAL_TIMEx_MasterConfigSynchronization",
                "HAL_TIM_Base_Init",
                "HAL_TIM_PWM_Init",
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_TIM1_PWM_080053b0"
        },
        "FUN_08009e74": {
            "renaming": {
                "FUN_08009e74": "do_nothing_08009e74"
            },
            "code": "\nvoid do_nothing_08009e74(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e74",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "do_nothing_08009e74"
        },
        "FUN_080016d0": {
            "renaming": {
                "FUN_080016d0": "calculate_ticks_remaining_080016d0",
                "ticks": "ticks_remaining",
                "bVar1": "ticks_less_than_max",
                "DAT_08001710": "ptr_to_dat_08001710"
            },
            "code": "uint32_t calculate_ticks_remaining_080016d0(uint32_t ticks)\n{\n  bool ticks_less_than_max = ticks - 1 < 0x1000000;\n  if (ticks_less_than_max)\n  {\n    uint32_t* DAT_08001710 = (uint32_t*)0x08001710;\n    DAT_08001710[1] = ticks - 1;\n    NVIC_SetPriority(SysTick_IRQn, 0xf);\n    DAT_08001710[2] = 0;\n    *DAT_08001710 = 7;\n  }\n  return (uint32_t)!ticks_less_than_max;\n}",
            "called": [
                "NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016d0",
            "calling": [
                "HAL_SYSTICK_Config"
            ],
            "imported": false,
            "current_name": "calculate_ticks_remaining_080016d0"
        },
        "FUN_0800088a": {
            "renaming": {
                "FUN_0800088a": "calculate_result_0800088a",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "var1",
                "unaff_r4": "var2",
                "uVar2": "mask",
                "uVar3": "var3",
                "in_r12": "unused_variable",
                "bVar4": "is_equal"
            },
            "code": "ulonglong calculate_result_0800088a(uint input1, uint input2, uint input3, uint input4)\n{\n  uint var1;\n  uint var2;\n  uint var3;\n  uint mask = input4 >> 0x14;\n  bool is_equal = input3 == input4 || mask == input4;\n  if (!is_equal)\n  {\n    bool is_zero1 = input1 == 0 && (input2 << 0xc) == 0;\n    bool is_zero2 = input3 == 0 && (input4 << 0xc) == 0;\n    if (is_zero1 && mask != input4)\n    {\n      return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n    }\n    else if (is_zero2)\n    {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    else\n    {\n      bool is_zero3 = input1 == 0 && (input2 << 1) == 0;\n      bool is_zero4 = input3 == 0 && (input4 << 1) == 0;\n      if (!is_zero3 && !is_zero4)\n      {\n        if (input3 == 0)\n        {\n          var2 = input2 & 0x80000000;\n          do\n          {\n            var1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(var1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | var2;\n          if (mask != 0)\n          {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do\n        {\n          var3 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(var3 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      else if (is_zero3)\n      {\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n      else\n      {\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n  }\n  return CONCAT44(input2,input1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800088a",
            "calling": [
                "__divdf3"
            ],
            "imported": false,
            "current_name": "calculate_result_0800088a"
        },
        "FUN_08000e20": {
            "renaming": {
                "FUN_08000e20": "FUNC_08000e20"
            },
            "code": "\nuint FUNC_08000e20(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  uVar2 = param_1 >> 0x17 & 0xff;\n  bVar7 = uVar2 == 0;\n  if (!bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = param_4 == 0xff;\n  }\n  if (bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    uVar6 = param_1;\n    if (uVar2 == 0xff) {\n      if (((param_1 & 0x7fffff) != 0) || (uVar6 = param_2, param_4 == 0xff)) {\nLAB_08000e16:\n        return uVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param_4 == 0xff) {\n        uVar6 = param_2;\n        if ((param_2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (param_1 ^ param_2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      bVar7 = (param_1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (param_2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = uVar2 == 0;\n        uVar6 = param_1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_1 = param_1 << 1;\n            bVar7 = (param_1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          uVar2 = uVar2 - 1;\n        }\n        param_1 = param_1 | uVar6;\n        bVar7 = param_4 == 0;\n        uVar6 = param_2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_2 = param_2 << 1;\n            bVar7 = (param_2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          param_4 = param_4 - 1;\n        }\n        param_2 = param_2 | uVar6;\n        goto LAB_08000e38;\n      }\n      if ((param_1 & 0x7fffffff) == 0) {\n        if ((param_2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    param_1 = param_1 ^ param_2;\n  }\n  else {\nLAB_08000e38:\n    iVar3 = uVar2 - param_4;\n    if (param_2 << 9 == 0) {\n      param_1 = (param_1 ^ param_2) & 0x80000000 | param_1 & 0x7fffff;\n      bVar9 = SCARRY4(iVar3,0x7f);\n      iVar5 = iVar3 + 0x7f;\n      bVar7 = iVar5 < 0;\n      bVar8 = iVar5 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,iVar5);\n        bVar7 = 0xff - iVar5 < 0;\n        bVar8 = iVar5 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        param_1 = param_1 | iVar5 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return param_1;\n      }\n      param_1 = param_1 | 0x800000;\n      uVar2 = 0;\n      bVar8 = SBORROW4(iVar5,1);\n      uVar4 = iVar3 + 0x7e;\n      bVar7 = uVar4 == 0;\n      uVar6 = uVar4;\n    }\n    else {\n      uVar1 = (param_2 << 9) >> 4 | 0x10000000;\n      uVar2 = (param_1 << 9) >> 4 | 0x10000000;\n      param_1 = (param_1 ^ param_2) & 0x80000000;\n      bVar7 = uVar1 <= uVar2;\n      if (!bVar7) {\n        uVar2 = uVar2 << 1;\n      }\n      uVar4 = iVar3 + 0x7d + (uint)bVar7;\n      uVar6 = 0x800000;\n      do {\n        if (uVar1 <= uVar2) {\n          uVar2 = uVar2 - uVar1;\n          param_1 = param_1 | uVar6;\n        }\n        bVar7 = uVar1 >> 1 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 1);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 1;\n        }\n        bVar7 = uVar1 >> 2 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 2);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 2;\n        }\n        bVar7 = uVar1 >> 3 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 3);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 3;\n        }\n        uVar2 = uVar2 * 0x10;\n        bVar7 = uVar2 == 0;\n        if (!bVar7) {\n          uVar6 = uVar6 >> 4;\n          bVar7 = uVar6 == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      bVar7 = uVar4 == 0xfd;\n      uVar6 = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        param_1 = param_1 + uVar4 * 0x800000 + (uint)(uVar1 <= uVar2);\n        if (uVar2 - uVar1 == 0) {\n          param_1 = param_1 & 0xfffffffe;\n        }\n        return param_1;\n      }\n    }\n    if (bVar7 || (int)uVar6 < 0 != bVar8) {\n      bVar7 = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        param_1 = param_1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        return param_1;\n      }\n      uVar6 = (param_1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = param_1 << (uVar4 + 0x20 & 0xff);\n      uVar6 = ((uint)((param_1 & 0x80000000) != 0) << 0x1f | uVar6 >> 1) + (uint)((byte)uVar6 & 1);\n      if ((uVar2 | uVar4 << 1) == 0) {\n        uVar6 = uVar6 & ~(uVar4 >> 0x1f);\n      }\n      return uVar6;\n    }\n  }\n  return param_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000e20",
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "mpu6050_calibrate"
            ],
            "imported": false,
            "current_name": "FUNC_08000e20"
        },
        "FUN_08005d14": {
            "renaming": {
                "FUN_08005d14": "get_impure_ptr_value_08005d14",
                "PTR__impure_ptr_08005d1c": "PTR__impure_ptr_08005d1c"
            },
            "code": "uint32_t get_impure_ptr_value_08005d14(void)\n{\n    uint32_t* impure_ptr = (uint32_t*)PTR__impure_ptr_08005d1c;\n    return *impure_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d14",
            "calling": [
                "_sbrk"
            ],
            "imported": false,
            "current_name": "get_impure_ptr_value_08005d14"
        },
        "FUN_080015b4": {
            "renaming": {
                "FUN_080015b4": "set_priority_group_080015b4",
                "PriorityGroup": "priority_group",
                "PriorityGroupTmp": "tmp_priority_group",
                "DAT_080015f8": "priority_register",
                "reg_value": "reg_value",
                "priority_mask": "priority_mask",
                "priority_shift": "priority_shift",
                "priority_base": "priority_base"
            },
            "code": "void set_priority_group_080015b4(uint32_t priority_group) \\n\\\n{\\n\\\n  uint32_t reg_value;\\n\\\n  uint32_t tmp_priority_group;\\n\\\n  uint32_t priority_mask = 0xf8ff;\\n\\\n  uint32_t priority_shift = 8;\\n\\\n  uint32_t priority_base = 0x5fa0000;\\n\\\n  uint32_t* DAT_080015f8 = (uint32_t*)(DAT_080015f8 + 0xc);\\n\\\n  tmp_priority_group = priority_group & 7;\\n\\\n  reg_value = *DAT_080015f8;\\n\\\n  reg_value &= priority_mask;\\n\\\n  reg_value |= (tmp_priority_group << priority_shift) | priority_base;\\n\\\n  *DAT_080015f8 = reg_value;\\n\\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b4",
            "calling": [
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "imported": false,
            "current_name": "set_priority_group_080015b4"
        },
        "FUN_080041a8": {
            "renaming": {
                "FUN_080041a8": "set_external_trigger_080041a8",
                "TIMx": "timer",
                "TIM_ExtTRGPrescaler": "prescaler",
                "TIM_ExtTRGPolarity": "polarity",
                "ExtTRGFilter": "filter",
                "tmpsmcr": "smcr_value"
            },
            "code": "void set_external_trigger_080041a8(TIM_TypeDef *timer, uint32_t prescaler, uint32_t polarity, uint32_t filter) {\n  uint32_t smcr_value = timer->SMCR;\n  smcr_value &= 0xFFFF00FF;\n  smcr_value |= (prescaler | (filter << 8) | polarity);\n  timer->SMCR = smcr_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041a8",
            "calling": [
                "HAL_TIM_ConfigClockSource"
            ],
            "imported": false,
            "current_name": "set_external_trigger_080041a8"
        },
        "FUN_080004c8": {
            "renaming": {
                "FUN_080004c8": "FUNC_080004c8"
            },
            "code": "\nulonglong FUNC_080004c8(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = calculate_080006a4();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006a4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004c8",
            "calling": [
                "mpu6050_calc_acc_pitch_roll",
                "_dtoa_r",
                "frexp",
                "mpu6050_calc_pitch",
                "_svfprintf_r",
                "atan"
            ],
            "imported": false,
            "current_name": "FUNC_080004c8"
        },
        "FUN_08000a9c": {
            "renaming": {
                "FUN_08000a9c": "FUNC_08000a9c"
            },
            "code": "\nuint FUNC_08000a9c(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_1 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = param_2;\n      if (iVar7 == -1) {\n        uVar4 = uVar2;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        param_2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == param_2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        uVar2 = param_2;\n      }\n      return uVar2;\n    }\n    if (uVar2 != param_2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      param_1 = param_1 << 1;\n      if ((uVar2 & 0x80000000) != 0) {\n        param_1 = param_1 | 0x80000000;\n      }\n      return param_1;\n    }\n    if (uVar4 < 0xfe000000) {\n      return uVar2 + 0x800000;\n    }\n    uVar2 = uVar2 & 0x80000000;\nLAB_08000bde:\n    return uVar2 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return uVar2;\n  }\n  uVar4 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  uVar2 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar6 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar6 != 0);\n    uVar6 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar5 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar5 & 0xff);\n      if ((int)uVar6 < (int)uVar5) {\n        uVar4 = uVar4 >> (-(uVar6 - uVar5) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar6 - uVar5) * 0x800000;\n      }\n      return uVar4 | uVar2;\n    }\n  }\n  else {\n    uVar6 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar6 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar6 != 0) << 0x1f | uVar3 >> 1;\n      uVar6 = uVar5;\n      if (0xfd < uVar5) goto LAB_08000bde;\n    }\n  }\n  uVar4 = uVar4 + uVar6 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | uVar2;\n}\n\n",
            "called": [
                "__addsf3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000a9c",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08000a9c"
        },
        "FUN_08008ad4": {
            "renaming": {
                "FUN_08008ad4": "get_locale_08008ad4",
                "puVar1": "locale_ptr"
            },
            "code": "undefined* get_locale_08008ad4() {\n    undefined* locale_ptr = *(undefined **)(*(int *)PTR__impure_ptr_08008ae8 + 0x34);\n    if (locale_ptr == (undefined *)0x0) {\n        locale_ptr = PTR___global_locale_08008aec;\n    }\n    return locale_ptr + 0xf0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ad4",
            "calling": [
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "get_locale_08008ad4"
        },
        "FUN_08005674": {
            "renaming": {
                "FUN_08005674": "infiniteLoop_08005674",
                "file": "fileName",
                "line": "lineNumber"
            },
            "code": "void infiniteLoop_08005674(char *fileName, int lineNumber) {\n    while(true) {\n        // Do nothing\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005674",
            "calling": [
                "MX_I2C1_Init",
                "MX_TIM1_Init",
                "MX_USART1_UART_Init",
                "MX_TIM2_Init",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "infiniteLoop_08005674"
        },
        "FUN_08003c4a": {
            "renaming": {
                "FUN_08003c4a": "do_nothing_08003c4a"
            },
            "code": "\nvoid do_nothing_08003c4a(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c4a",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c4a"
        },
        "FUN_08004104": {
            "renaming": {
                "FUN_08004104": "set_TIMx_input_capture_08004104",
                "TIMx": "timer",
                "TIM_ICPolarity": "input_polarity",
                "TIM_ICFilter": "input_filter",
                "tmpccer": "ccer_register_value",
                "tmpccmr1": "ccmr1_register_value"
            },
            "code": "void set_TIMx_input_capture_08004104(TIM_TypeDef *timer, uint32_t input_polarity, uint32_t input_filter) {\\n\\\n    uint32_t ccer_register_value;\\n\\\n    uint32_t ccmr1_register_value;\\n\\\n    \\n\\\n    ccer_register_value = timer->CCER & 0xffffffef;\\n\\\n    ccmr1_register_value = (input_filter << 0xc) | (timer->CCMR1 & 0xffff0fff);\\n\\\n    ccer_register_value |= (input_polarity << 4);\\n\\\n    timer->CCER = ccer_register_value;\\n\\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004104",
            "calling": [
                "HAL_TIM_ConfigClockSource"
            ],
            "imported": false,
            "current_name": "set_TIMx_input_capture_08004104"
        },
        "FUN_08000ff4": {
            "renaming": {
                "FUN_08000ff4": "isEndOfString_08000ff4",
                "in_CY": "currentChar"
            },
            "code": "bool isEndOfString_08000ff4(void)\n{\n  char currentChar;\n  __aeabi_cfcmpeq();\n  return currentChar == '\\0';\n}\n",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ff4",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "isEndOfString_08000ff4"
        },
        "FUN_08005d0c": {
            "renaming": {
                "FUN_08005d0c": "calculate_08005d0c",
                "__x": "input",
                "in_d0": "result"
            },
            "code": "double calculate_08005d0c(double input){\n  double result;\n  // perform calculations using input and assign result\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d0c",
            "calling": [
                "__ieee754_atan2",
                "atan"
            ],
            "imported": false,
            "current_name": "calculate_08005d0c"
        },
        "FUN_08005e40": {
            "renaming": {
                "FUN_08005e40": "count_leading_zeroes_in_string_08005e40",
                "__s": "string",
                "iVar1": "offset",
                "puVar2": "ptr",
                "uVar4": "current"
            },
            "code": "size_t count_leading_zeroes_in_string_08005e40(uint num)\n{\n  size_t count = 0;\n  while (num >>= 1) count++;\n  return count;\n}\n\nsize_t count_leading_zeroes_in_string_08005e40(uint num);\n\nsize_t count_leading_zeroes_in_string_08005e40(uint num)\n{\n  size_t count = 0;\n  while (num >>= 1) count++;\n  return count;\n}\n\nsize_t count_leading_zeroes_in_string_08005e40(uint num);\n\nsize_t count_leading_zeroes_in_string_08005e40(char* string)\n{\n  uint* ptr = (uint*)((uint)string & 0xfffffffc);\n  int offset = -((uint)string & 3);\n  uint current = *ptr;\n  if (((uint)string & 3) != 0) {\n    current |= 0xffffffffU >> ((offset + 4U & 0x1f) << 3);\n  }\n  while (true) {\n    ptr++;\n    current = current + 0xfefefeff & ~current & 0x80808080;\n    if (current != 0) break;\n    current = *ptr;\n    offset += 4;\n  }\n  size_t num_leading_zeroes = count_leading_zeroes_in_string_08005e40(current & -current);\n  return offset + (0x1fU - num_leading_zeroes >> 3);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e40",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "count_leading_zeroes_in_string_08005e40"
        },
        "FUN_08005d20": {
            "renaming": {
                "FUN_08005d20": "initialize_EVP_PKEY_CTX_08005d20",
                "param_1": "ctx",
                "puVar1": "dtor_array_pointer",
                "iVar2": "i",
                "ppcVar3": "function_pointer",
                "iVar4": "num_functions",
                "PTR___preinit_array_end_08005d58": "preinit_array_end",
                "PTR___preinit_array_end_08005d5c": "preinit_array_start",
                "PTR___preinit_array_end_08005d64": "dtors_array_start",
                "PTR___do_global_dtors_aux_fini_array_entry_08005d60": "dtors_array_end"
            },
            "code": "void initialize_EVP_PKEY_CTX_08005d20(EVP_PKEY_CTX *ctx)\n{\n  int num_preinit_array_functions = (int)PTR___preinit_array_end_08005d58 - (int)PTR___PTR___preinit_array_end_08005d58_08005d5c >> 2;\n  if (num_preinit_array_functions != 0) {\n    int i = 0;\n    code **preinit_array_functions = (code **)PTR___PTR___preinit_array_end_08005d58_08005d5c;\n    do {\n      ctx = (EVP_PKEY_CTX *)(*preinit_array_functions)();\n      preinit_array_functions++;\n      i++;\n    } while (num_preinit_array_functions != i);\n  }\n  code **dtor_functions = (code **)PTR___PTR___preinit_array_end_08005d58_08005d64;\n  undefined *dtor_array_end = PTR___do_global_dtors_aux_fini_array_entry_08005d60;\n  _init(ctx);\n  int num_dtor_functions = (int)dtor_array_end - (int)dtor_functions >> 2;\n  if (num_dtor_functions != 0) {\n    int i = 0;\n    do {\n      (*dtor_functions)();\n      dtor_functions++;\n      i++;\n    } while (num_dtor_functions != i);\n  }\n  return;\n}",
            "called": [
                "register_fini",
                "_init",
                "frame_dummy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d20",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "initialize_EVP_PKEY_CTX_08005d20"
        },
        "FUN_08001a80": {
            "renaming": {
                "FUN_08001a80": "set_GPIO_pin_state_08001a80",
                "GPIOx": "port",
                "GPIO_Pin": "pin",
                "PinState": "state",
                "BSRR": "bit_set_reset_register"
            },
            "code": "void set_GPIO_pin_state_08001a80(GPIO_TypeDef *port, uint16_t pin, GPIO_PinState state) {\n  if (state == GPIO_PIN_RESET) {\n    port->BSRR = (uint32_t)pin << 16;\n  }\n  else {\n    port->BSRR = (uint32_t)pin;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a80",
            "calling": [
                "MX_GPIO_Init",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "set_GPIO_pin_state_08001a80"
        },
        "FUN_080090a8": {
            "renaming": {
                "FUN_080090a8": "acquire_malloc_recursive_mutex_080090a8",
                "PTR___lock___malloc_recursive_mutex_080090b0": "malloc_recursive_mutex"
            },
            "code": "void acquire_malloc_recursive_mutex_080090a8(void)\n{\n  __retarget_lock_acquire_recursive(PTR___lock___malloc_recursive_mutex_080090b0);\n  return;\n}",
            "called": [
                "__retarget_lock_acquire_recursive"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090a8",
            "calling": [
                "_malloc_trim_r",
                "_malloc_r",
                "_free_r",
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "acquire_malloc_recursive_mutex_080090a8"
        },
        "FUN_08004e74": {
            "renaming": {
                "FUN_08004e74": "call_afl_if_no_hypercall_08004e74",
                "ticks": "ticks",
                "uVar1": "result"
            },
            "code": "uint32_t call_afl_if_no_hypercall_08004e74(int ticks)\n{\n  uint32_t result;\n  if (*(int *)PTR_noHyperCall_08004ea0 == 0) {\n    result = aflCall(1, ticks, 0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "call_afl_if_no_hypercall_08004e74"
        },
        "FUN_0800910c": {
            "renaming": {
                "FUN_0800910c": "copy_value_to_pointer_0800910c",
                "param_1": "source_address",
                "param_2": "destination_pointer",
                "iVar1": "value_address"
            },
            "code": "void copy_value_to_pointer_0800910c(int source_address, undefined4 *destination_pointer)\n{\n  int value_address = *(int *)(source_address + 0x4c);\n  if (destination_pointer != (undefined4 *)0x0) {\n    *destination_pointer = *(undefined4 *)(value_address + destination_pointer[1] * 4);\n    *(undefined4 **)(value_address + destination_pointer[1] * 4) = destination_pointer;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800910c",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "copy_value_to_pointer_0800910c"
        },
        "FUN_080052a0": {
            "renaming": {
                "FUN_080052a0": "initializeClocksAndSysTick_080052a0",
                "RCC_ClkInitStruct": "clk_init",
                "RCC_OscInitStruct": "osc_init",
                "HVar1": "status",
                "uVar2": "freq",
                "RCC_OscInitStruct.OscillatorType": "osc_init.OscillatorType",
                "RCC_OscInitStruct.HSEState": "osc_init.HSEState",
                "RCC_OscInitStruct.HSEPredivValue": "osc_init.HSEPredivValue",
                "RCC_OscInitStruct.HSIState": "osc_init.HSIState",
                "RCC_OscInitStruct.PLL.PLLState": "osc_init.PLL.PLLState",
                "RCC_OscInitStruct.PLL.PLLSource": "osc_init.PLL.PLLSource",
                "RCC_OscInitStruct.PLL.PLLMUL": "osc_init.PLL.PLLMUL",
                "RCC_ClkInitStruct.ClockType": "clk_init.ClockType",
                "RCC_ClkInitStruct.SYSCLKSource": "clk_init.SYSCLKSource",
                "RCC_ClkInitStruct.AHBCLKDivider": "clk_init.AHBCLKDivider",
                "RCC_ClkInitStruct.APB1CLKDivider": "clk_init.APB1CLKDivider",
                "RCC_ClkInitStruct.APB2CLKDivider": "clk_init.APB2CLKDivider"
            },
            "code": "void initializeClocksAndSysTick_080052a0(void)\n{\n  HAL_StatusTypeDef status;\n  uint32_t freq;\n  RCC_OscInitTypeDef osc_init;\n  RCC_ClkInitTypeDef clk_init;\n  osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;\n  osc_init.HSEState = RCC_HSE_OFF;\n  osc_init.HSEPredivValue = RCC_HSE_PREDIV_DIV1;\n  osc_init.HSIState = RCC_HSI_ON;\n  osc_init.PLL.PLLState = RCC_PLL_ON;\n  osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI;\n  osc_init.PLL.PLLMUL = RCC_PLL_MUL16;\n  status = HAL_RCC_OscConfig(&osc_init);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s____src_main_c_08005340,0x151);\n  }\n  clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;\n  clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;\n  clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;\n  clk_init.APB1CLKDivider = RCC_HCLK_DIV2;\n  clk_init.APB2CLKDivider = RCC_HCLK_DIV1;\n  status = HAL_RCC_ClockConfig(&clk_init,FLASH_LATENCY_2);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s____src_main_c_08005340,0x15e);\n  }\n  freq = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config((uint32_t)(SYSTICK_PERIOD * (uint64_t)freq >> 0x20));\n  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);\n  HAL_NVIC_SetPriority(SysTick_IRQn,0,0);\n  return;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq",
                "HAL_SYSTICK_CLKSourceConfig",
                "HAL_SYSTICK_Config",
                "_Error_Handler",
                "HAL_NVIC_SetPriority",
                "HAL_RCC_OscConfig",
                "HAL_RCC_ClockConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initializeClocksAndSysTick_080052a0"
        },
        "FUN_08009120": {
            "renaming": {
                "FUN_08009120": "calculate_polynomial_08009120",
                "param_1": "degree",
                "param_2": "coefficients",
                "param_3": "base",
                "param_4": "accumulator",
                "puVar1": "result",
                "uVar2": "high_bits",
                "iVar3": "current_degree",
                "puVar4": "current_coefficient",
                "iVar5": "ptr"
            },
            "code": "undefined4* calculate_polynomial_08009120(int degree, undefined4* coefficients, int base, uint accumulator) {\n    undefined4* result;\n    uint carry = 0;\n    int current_degree = coefficients[4];\n    uint* current_coefficient = coefficients + 5;\n    for (int i = 0; i < current_degree; i++) {\n        accumulator = base * (*current_coefficient & 0xffff) + accumulator;\n        uint high_bits = base * (*current_coefficient >> 0x10) + (accumulator >> 0x10);\n        *current_coefficient = (accumulator & 0xffff) + high_bits * 0x10000;\n        accumulator = high_bits >> 0x10;\n        current_coefficient++;\n    }\n    result = coefficients;\n    if (accumulator != 0) {\n        if ((int)coefficients[2] <= current_degree) {\n            result = (undefined4*)_Balloc(degree, coefficients[1] + 1);\n            memcpy(result + 3, coefficients + 3, (coefficients[4] + 2) * 4);\n            int ptr = *(int*)(degree + 0x4c);\n            *coefficients = *(undefined4*)(ptr + coefficients[1] * 4);\n            *(undefined4**)(ptr + coefficients[1] * 4) = coefficients;\n        }\n        result[current_degree + 5] = accumulator;\n        result[4] = current_degree + 1;\n    }\n    return result;\n}",
            "called": [
                "_Balloc",
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009120",
            "calling": [
                "_dtoa_r",
                "__pow5mult"
            ],
            "imported": false,
            "current_name": "calculate_polynomial_08009120"
        },
        "FUN_08000f58": {
            "renaming": {
                "FUN_08000f58": "calculate_result_08000f58",
                "param_1": "input1",
                "param_2": "input2",
                "bVar1": "is_negative",
                "uVar2": "doubled_input1",
                "uVar3": "doubled_input2",
                "uVar4": "combined_input",
                "bVar5": "is_combined_zero"
            },
            "code": "uint calculate_result_08000f58(uint input1, uint input2)\n{\n  bool is_negative;\n  uint doubled_input1 = input1 * 2;\n  uint doubled_input2 = input2 * 2;\n  if (((int)doubled_input1 >> 0x18 == -1 || (int)doubled_input2 >> 0x18 == -1) && ((((int)doubled_input1 >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) || (((int)doubled_input2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    return 0xffffffff;\n  }\n  uint combined_input = doubled_input1 | input2 & 0x7fffffff;\n  bool is_combined_zero = combined_input == 0;\n  if (!is_combined_zero) {\n    combined_input = input1 ^ input2;\n    is_combined_zero = combined_input == 0;\n  }\n  is_negative = -1 < (int)combined_input;\n  if (is_negative) {\n    input1 = doubled_input1 + input2 * -2;\n    is_combined_zero = input1 == 0;\n  }\n  if ((is_negative && doubled_input2 <= doubled_input1) && !is_combined_zero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!is_negative || doubled_input2 > doubled_input1) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!is_combined_zero) {\n    input1 = input1 | 1;\n  }\n  return input1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f58",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_08000f58"
        },
        "FUN_08001084": {
            "renaming": {
                "FUN_08001084": "copy_memory_08001084",
                "__dest": "destination",
                "__src": "source",
                "__n": "size",
                "puVar1": "dest_byte",
                "puVar2": "dest_word",
                "puVar3": "dest_dword",
                "puVar4": "dest_byte_tmp",
                "puVar5": "src_dword",
                "puVar6": "src_byte_tmp",
                "uVar7": "aligned_size",
                "uVar8": "remaining_size",
                "bVar9": "loop_condition"
            },
            "code": "void * copy_memory_08001084(void *destination, const void *source, size_t size) {\n  unsigned char *dest = (unsigned char *)destination;\n  const unsigned char *src = (const unsigned char *)source;\n  if ((((unsigned int)src | (unsigned int)dest) & 3) != 0) {\n    if (size < 8) {\n      if (size > 0) {\n        do {\n          *dest++ = *src++;\n        } while (--size);\n      }\n      return destination;\n    }\n    if ((((unsigned int)src & 3) != 0) && (((unsigned int)dest & 3) != 0)) {\n      size -= 4 - ((unsigned int)dest & 3);\n      if (size > 0) {\n        *(unsigned char *)dest++ = *(unsigned char *)src++;\n        if (size > 1) {\n          *(unsigned short *)dest = *(unsigned short *)src;\n          dest += 2;\n          src += 2;\n          if (size > 3) {\n            *(unsigned int *)dest = *(unsigned int *)src;\n            dest += 4;\n            src += 4;\n            size -= 4;\n            goto l_0x08001140;\n          }\n        }\n      }\n      return destination;\n    }\n  }\n  l_0x08001140:\n  size_t aligned_size = size >> 4;\n  while (aligned_size--) {\n    *(unsigned int *)dest = *(unsigned int *)src;\n    *(unsigned int *)(dest + 4) = *(unsigned int *)(src + 4);\n    *(unsigned int *)(dest + 8) = *(unsigned int *)(src + 8);\n    *(unsigned int *)(dest + 12) = *(unsigned int *)(src + 12);\n    dest += 16;\n    src += 16;\n  }\n  size &= 0xF;\n  if (size > 0) {\n    if (size > 8) {\n      *(unsigned int *)dest = *(unsigned int *)src;\n      *(unsigned int *)(dest + 4) = *(unsigned int *)(src + 4);\n      *(unsigned int *)(dest + 8) = *(unsigned int *)(src + 8);\n      *(unsigned int *)(dest + 12) = *(unsigned int *)(src + 12);\n    } else {\n      do {\n        *dest++ = *src++;\n      } while (--size);\n    }\n  }\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001084",
            "calling": [
                "_dtoa_r",
                "__multadd",
                "__ssprint_r"
            ],
            "imported": false,
            "current_name": "copy_memory_08001084"
        },
        "FUN_08005680": {
            "renaming": {
                "FUN_08005680": "initialize_gpio_pin_08005680",
                "htim": "timer_handle",
                "Instance": "timer_instance",
                "GPIO_InitStruct": "gpio_init_struct",
                "Pin": "GPIO_PIN_9",
                "Mode": "GPIO_MODE_AF_PP",
                "Speed": "GPIO_SPEED_FREQ_HIGH",
                "HAL_GPIO_Init": "HAL_GPIO_Init",
                "DAT_080056b4": "timer_instance",
                "DAT_080056b8": "gpio_port"
            },
            "code": "void initialize_gpio_pin_08005680(TIM_HandleTypeDef *timer_handle) {\\n\\\n  GPIO_InitTypeDef gpio_init_struct;\\n\\\n  if (timer_handle->Instance == DAT_080056b4) {\\n\\\n    gpio_init_struct.Pin = GPIO_PIN_9;\\n\\\n    gpio_init_struct.Mode = GPIO_MODE_AF_PP;\\n\\\n    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;\\n\\\n    HAL_GPIO_Init(DAT_080056b8, &gpio_init_struct);\\n\\\n  }\\n\\\n  return;\\n\\\n}",
            "called": [
                "HAL_GPIO_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005680",
            "calling": [
                "MX_TIM1_Init"
            ],
            "imported": false,
            "current_name": "initialize_gpio_pin_08005680"
        },
        "FUN_08003260": {
            "renaming": {
                "FUN_08003260": "configureClocks_08003260",
                "RCC_ClkInitStruct": "clockInit",
                "FLatency": "latency",
                "DAT_08003430": "FLASH_ACR",
                "HAL_StatusTypeDef": "HAL_StatusTypeDef",
                "tickstart": "tickStart",
                "HVar3": "status",
                "uVar1": "sysClockFreq",
                "uVar2": "currentTick"
            },
            "code": "HAL_StatusTypeDef configureClocks_08003260(RCC_ClkInitTypeDef *clockInit, uint32_t latency) {\\n\"\n                     \"    uint32_t flashLatencyReg;\\n\"\n                     \"    uint32_t tickStart;\\n\"\n                     \"    HAL_StatusTypeDef status;\\n\"\n                     \"\\n\"\n                     \"    flashLatencyReg = *DAT_08003430 & 0xFFFFFFF8;\\n\"\n                     \"    if ((*DAT_08003430 & 7) < latency) {\\n\"\n                     \"        flashLatencyReg |= latency;\\n\"\n                     \"        if ((*DAT_08003430 & 7) != latency) {\\n\"\n                     \"            status = HAL_ERROR;\\n\"\n                     \"            goto end;\\n\"\n                     \"        }\\n\"\n                     \"    }\\n\"\n                     \"\\n\"\n                     \"    *DAT_08003430 = flashLatencyReg;\\n\"\n                     \"\\n\"\n                     \"    if ((clockInit->ClockType & RCC_CLOCKTYPE_HCLK) != 0) {\\n\"\n                     \"        *RCC_CFGR &= ~RCC_CFGR_HPRE;\\n\"\n                     \"        *RCC_CFGR |= clockInit->AHBCLKDivider;\\n\"\n                     \"    }\\n\"\n                     \"\\n\"\n                     \"    if ((clockInit->ClockType & RCC_CLOCKTYPE_PCLK1) != 0) {\\n\"\n                     \"        *RCC_CFGR &= ~RCC_CFGR_PPRE1;\\n\"\n                     \"        *RCC_CFGR |= clockInit->APB1CLKDivider << 10;\\n\"\n                     \"    }\\n\"\n                     \"\\n\"\n                     \"    if ((clockInit->ClockType & RCC_CLOCKTYPE_PCLK2) != 0) {\\n\"\n                     \"        *RCC_CFGR &= ~RCC_CFGR_PPRE2;\\n\"\n                     \"        *RCC_CFGR |= clockInit->APB2CLKDivider << 13;\\n\"\n                     \"    }\\n\"\n                     \"\\n\"\n                     \"    if (clockInit->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {\\n\"\n                     \"        if (HAL_RCC_GetSysClockFreq() != HAL_RCC_GetPCLK2Freq()) {\\n\"\n                     \"            status = HAL_ERROR;\\n\"\n                     \"            goto end;\\n\"\n                     \"        }\\n\"\n                     \"    }\\n\"\n                     \"\\n\"\n                     \"    *RCC_CFGR &= ~RCC_CFGR_SW;\\n\"\n                     \"    *RCC_CFGR |= clockInit->SYSCLKSource;\\n\"\n                     \"\\n\"\n                     \"    tickStart = HAL_GetTick();\\n\"\n                     \"    while (HAL_RCC_GetSysClockSource() != clockInit->SYSCLKSource) {\\n\"\n                     \"        if ((HAL_GetTick() - tickStart) > 5000) {\\n\"\n                     \"            status = HAL_TIMEOUT;\\n\"\n                     \"            goto end;\\n\"\n                     \"        }\\n\"\n                     \"    }\\n\"\n                     \"\\n\"\n                     \"    status = HAL_OK;\\n\"\n                     \"end:\\n\"\n                     \"    return status;\\n\"\n                     \"}",
            "called": [
                "HAL_InitTick",
                "HAL_RCC_GetSysClockFreq",
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003260",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "configureClocks_08003260"
        },
        "FUN_08009244": {
            "renaming": {
                "FUN_08009244": "allocate_block_and_set_values_08009244",
                "param_1": "block_size",
                "param_2": "value",
                "iVar1": "block_address"
            },
            "code": "void allocate_block_and_set_values_08009244(int block_size, int value)\n{\n  int block_address = _Balloc(block_size, 1);\n  *(int *)(block_address + 0x10) = 1;\n  *(int *)(block_address + 0x14) = value;\n  return;\n}",
            "called": [
                "_Balloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009244",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "allocate_block_and_set_values_08009244"
        },
        "FUN_08003c5c": {
            "renaming": {
                "FUN_08003c5c": "do_nothing_08003c5c"
            },
            "code": "\nvoid do_nothing_08003c5c(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c5c",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c5c"
        },
        "FUN_08004e6c": {
            "renaming": {
                "FUN_08004e6c": "read_and_return_08004e6c",
                "a0": "address",
                "a1": "data",
                "a2": "flag"
            },
            "code": "uint32_t read_and_return_08004e6c(uint32_t address, uint32_t data, int32_t flag)\n{\n  software_interrupt(0x3f);\n  return address;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e6c",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "read_and_return_08004e6c"
        },
        "FUN_08001762": {
            "renaming": {
                "FUN_08001762": "configure_systick_08001762",
                "TicksNumb": "ticks_number",
                "uVar1": "systick_config_result"
            },
            "code": "uint32_t configure_systick_08001762(uint32_t ticks_number)\n{\n  uint32_t systick_config_result;\n  systick_config_result = SysTick_Config(ticks_number);\n  return systick_config_result;\n}",
            "called": [
                "SysTick_Config"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001762",
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "configure_systick_08001762"
        },
        "FUN_080040a0": {
            "renaming": {
                "FUN_080040a0": "configure_timer_080040a0",
                "TIMx": "timer",
                "TIM_ICPolarity": "input_capture_polarity",
                "TIM_ICFilter": "input_capture_filter",
                "uVar1": "ccer_value",
                "tmpccer": "N/A",
                "tmpccmr1": "N/A"
            },
            "code": "void configure_timer_080040a0(TIM_TypeDef *timer, uint32_t input_capture_polarity, uint32_t input_capture_filter) {\n    uint32_t ccer_value = timer->CCER;\n    timer->CCER = ccer_value & 0xfffffffe;\n    timer->CCMR1 = (input_capture_filter << 4) | (timer->CCMR1 & 0xffffff0f);\n    timer->CCER = input_capture_polarity | (ccer_value & 0xfffffff5);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040a0",
            "calling": [
                "HAL_TIM_ConfigClockSource"
            ],
            "imported": false,
            "current_name": "configure_timer_080040a0"
        },
        "FUN_08009a18": {
            "renaming": {
                "FUN_08009a18": "reverse_copy_08009a18",
                "__dest": "dest",
                "__src": "src",
                "__n": "n",
                "puVar1": "ptr_uint_1",
                "puVar2": "ptr_char_1",
                "iVar3": "int_1",
                "pvVar4": "ptr_void_1",
                "puVar5": "ptr_char_2",
                "iVar6": "int_2",
                "uVar7": "uint_1",
                "iVar8": "int_3",
                "uVar9": "uint_2",
                "puVar10": "ptr_uint_2"
            },
            "code": "void *reverse_copy_08009a18(void *dest, const void *src, size_t n)\n{\n    uint remaining_bytes = n;\n    if (src < dest && (uint)(src + n) > (uint)dest) {\n        // if there is overlap, copy backwards\n        uint offset = remaining_bytes % 4;\n        uint i = remaining_bytes - offset;\n        for (; i > 0; i -= 4) {\n            *(uint *)(dest + i - 4) = *(uint *)(src + i - 4);\n        }\n        for (; offset > 0; offset--) {\n            *(char *)(dest + i - offset) = *(char *)(src + i - offset);\n        }\n    } else {\n        // if there is no overlap, copy forwards\n        uint offset = 0;\n        for (; offset <= remaining_bytes - 4; offset += 4) {\n            *(uint *)(dest + offset) = *(uint *)(src + offset);\n        }\n        for (; offset < remaining_bytes; offset++) {\n            *(char *)(dest + offset) = *(char *)(src + offset);\n        }\n    }\n    return dest;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009a18",
            "calling": [
                "_realloc_r",
                "__ssprint_r"
            ],
            "imported": false,
            "current_name": "reverse_copy_08009a18"
        },
        "FUN_0800119c": {
            "renaming": {
                "FUN_0800119c": "calculate_value_0800119c",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "temp1",
                "iVar2": "temp",
                "uVar3": "temp2"
            },
            "code": "uint calculate_value_0800119c(uint input1, uint input2)\n{\n    uint result = 0;\n    int temp = input2 * 2 + 0x200000;\n    if (input2 * 2 < 0xffe00000)\n    {\n        if (-1 < temp)\n        {\n            return 0;\n        }\n        uint temp1 = temp >> 0x15;\n        uint temp2 = -temp1 - 0x3e1;\n        if (temp1 < 0xfffffc20 && temp2 != 0)\n        {\n            result = (input2 << 0xb | 0x80000000 | input1 >> 0x15) >> (temp2 & 0xff);\n            if ((input2 & 0x80000000) != 0)\n            {\n                result = -result;\n            }\n            return result;\n        }\n    }\n    else if ((input1 | input2 << 0xc) != 0)\n    {\n        return 0;\n    }\n    input2 = input2 & 0x80000000;\n    if (input2 == 0)\n    {\n        input2 = 0x7fffffff;\n    }\n    return input2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800119c",
            "calling": [
                "_dtoa_r",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "calculate_value_0800119c"
        },
        "FUN_080090b4": {
            "renaming": {
                "FUN_080090b4": "release_recursive_malloc_lock_080090b4",
                "PTR___lock___malloc_recursive_mutex_080090bc": "malloc_recursive_mutex"
            },
            "code": "void release_recursive_malloc_lock_080090b4(void)\n{\n  __retarget_lock_release_recursive(PTR___lock___malloc_recursive_mutex_080090bc);\n  return;\n}",
            "called": [
                "__retarget_lock_release_recursive"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090b4",
            "calling": [
                "_malloc_trim_r",
                "_malloc_r",
                "_free_r",
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "release_recursive_malloc_lock_080090b4"
        },
        "FUN_08000f60": {
            "renaming": {
                "FUN_08000f60": "check_overflow_08000f60",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "double_input_1",
                "uVar3": "double_input_2",
                "uVar4": "input_1_without_sign_bit",
                "bVar1": "is_negative",
                "bVar5": "is_overflow"
            },
            "code": "uint check_overflow_08000f60(uint input_1, uint input_2)\n{\n    bool is_overflow;\n    uint double_input_1 = input_1 * 2;\n    uint double_input_2 = input_2 * 2;\n    if (((int)double_input_1 >> 0x18 == -1 || (int)double_input_2 >> 0x18 == -1) && ((((int)double_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) || (((int)double_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n        return 1;\n    }\n    uint input_1_without_sign_bit = input_1 & 0x7fffffff;\n    is_overflow = input_1_without_sign_bit == 0;\n    if (!is_overflow) {\n        input_1_without_sign_bit = input_1 ^ input_2;\n        is_overflow = input_1_without_sign_bit == 0;\n    }\n    bool is_negative = -1 < (int)input_1_without_sign_bit;\n    if (is_negative) {\n        input_1 = double_input_1 + input_2 * -2;\n        is_overflow = input_1 == 0;\n    }\n    if (is_negative && double_input_2 <= double_input_1 && !is_overflow) {\n        input_1 = (int)input_2 >> 0x1f;\n    }\n    if (!is_negative || double_input_2 > double_input_1) {\n        input_1 = ~((int)input_2 >> 0x1f);\n    }\n    if (!is_overflow) {\n        input_1 = input_1 | 1;\n    }\n    return input_1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f60",
            "calling": [],
            "imported": false,
            "current_name": "check_overflow_08000f60"
        },
        "FUN_0800422e": {
            "renaming": {
                "FUN_0800422e": "set_TIM_BreakDeadTime_0800422e",
                "htim": "tim_handle",
                "sBreakDeadTimeConfig": "break_dead_time_config",
                "HVar1": "status",
                "tmpbdtr": "tmp_bdtr",
                "Lock": "lock",
                "HAL_LOCKED": "HAL_LOCKED",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "BDTR": "BDTR",
                "AutomaticOutput": "AutomaticOutput",
                "BreakPolarity": "BreakPolarity",
                "BreakState": "BreakState",
                "OffStateRunMode": "OffStateRunMode",
                "OffStateIDLEMode": "OffStateIDLEMode",
                "LockLevel": "LockLevel",
                "DeadTime": "DeadTime",
                "TIM_HandleTypeDef": "TIM_HandleTypeDef",
                "TIM_BreakDeadTimeConfigTypeDef": "TIM_BreakDeadTimeConfigTypeDef",
                "HAL_StatusTypeDef": "HAL_StatusTypeDef",
                "uint32_t": "uint32_t",
                "TIM_BDTR_DTG_Msk": "TIM_BDTR_DTG_Msk",
                "TIM_BDTR_LOCK_Msk": "TIM_BDTR_LOCK_Msk",
                "TIM_BDTR_OSSI_Msk": "TIM_BDTR_OSSI_Msk",
                "TIM_BDTR_OSSR_Msk": "TIM_BDTR_OSSR_Msk",
                "TIM_BDTR_BKE_Msk": "TIM_BDTR_BKE_Msk",
                "TIM_BDTR_BKP_Msk": "TIM_BDTR_BKP_Msk",
                "TIM_BDTR_AOE_Msk": "TIM_BDTR_AOE_Msk",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef set_TIM_BreakDeadTime_0800422e(TIM_HandleTypeDef *tim_handle, TIM_BreakDeadTimeConfigTypeDef *break_dead_time_config)\n{\n    HAL_StatusTypeDef status;\n    uint32_t tmp_bdtr;\n\n    if (tim_handle->lock == HAL_LOCKED) {\n        status = HAL_BUSY;\n    }\n    else {\n        tim_handle->lock = HAL_LOCKED;\n        tmp_bdtr = tim_handle->Instance->BDTR;\n        tmp_bdtr &= ~(TIM_BDTR_DTG_Msk | TIM_BDTR_LOCK_Msk | TIM_BDTR_OSSI_Msk | TIM_BDTR_OSSR_Msk | TIM_BDTR_BKE_Msk | TIM_BDTR_BKP_Msk | TIM_BDTR_AOE_Msk);\n        tmp_bdtr |= (break_dead_time_config->DeadTime & TIM_BDTR_DTG_Msk) | (break_dead_time_config->LockLevel << TIM_BDTR_LOCK_Pos) | (break_dead_time_config->BreakState << TIM_BDTR_BKE_Pos) | (break_dead_time_config->BreakPolarity << TIM_BDTR_BKP_Pos) | (break_dead_time_config->AutomaticOutput << TIM_BDTR_AOE_Pos);\n        tim_handle->Instance->BDTR = tmp_bdtr;\n        tim_handle->lock = HAL_UNLOCKED;\n        status = HAL_OK;\n    }\n    return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800422e",
            "calling": [
                "MX_TIM1_Init"
            ],
            "imported": false,
            "current_name": "set_TIM_BreakDeadTime_0800422e"
        },
        "FUN_08008af4": {
            "renaming": {
                "FUN_08008af4": "do_nothing_08008af4"
            },
            "code": "\nvoid do_nothing_08008af4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af4",
            "calling": [
                "__malloc_unlock",
                "__register_exitproc"
            ],
            "imported": false,
            "current_name": "do_nothing_08008af4"
        },
        "FUN_08008af0": {
            "renaming": {
                "FUN_08008af0": "do_nothing_08008af0"
            },
            "code": "\nvoid do_nothing_08008af0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af0",
            "calling": [
                "__malloc_lock",
                "__register_exitproc"
            ],
            "imported": false,
            "current_name": "do_nothing_08008af0"
        },
        "FUN_0800151c": {
            "renaming": {
                "FUN_0800151c": "configureSysTick_0800151c",
                "TickPriority": "tickPriority",
                "uVar1": "sysTickConfig",
                "HVar2": "status",
                "PTR_SystemCoreClock_08001570": "PTR_SystemCoreClock_08001570",
                "PTR_uwTickFreq_08001574": "PTR_uwTickFreq_08001574",
                "PTR_uwTickPrio_08001578": "PTR_uwTickPrio_08001578"
            },
            "code": "HAL_StatusTypeDef configureSysTick_0800151c(uint32_t tickPriority)\n{\n  uint32_t sysClock = *(uint *)PTR_SystemCoreClock_08001570;\n  uint32_t tickFreq = (uint32_t)((uint64_t)sysClock / (1000 / (uint64_t)(byte)*PTR_uwTickFreq_08001574));\n  uint32_t sysTickConfig = HAL_SYSTICK_Config(tickFreq);\n  HAL_StatusTypeDef status = HAL_ERROR;\n  if (sysTickConfig == 0) {\n    if (tickPriority < 0x10) {\n      HAL_NVIC_SetPriority(SysTick_IRQn,tickPriority,0);\n      *(uint32_t *)PTR_uwTickPrio_08001578 = tickPriority;\n      status = HAL_OK;\n    }\n  }\n  return status;\n}",
            "called": [
                "HAL_SYSTICK_Config",
                "HAL_NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800151c",
            "calling": [
                "HAL_RCC_ClockConfig",
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "configureSysTick_0800151c"
        },
        "FUN_08000f68": {
            "renaming": {
                "FUN_08000f68": "calculate_result_08000f68",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "double_input_1",
                "uVar3": "double_input_2",
                "uVar4": "input_1_without_sign",
                "bVar1": "is_sum_negative",
                "bVar5": "is_xor_result_zero"
            },
            "code": "uint calculate_result_08000f68(uint input_1, uint input_2)\n{\n    bool is_negative_1 = false;\n    bool is_negative_2 = false;\n    uint double_input_1 = input_1 * 2;\n    uint double_input_2 = input_2 * 2;\n    if (((int)double_input_1 >> 0x18 == -1 || (int)double_input_2 >> 0x18 == -1) && ((((int)double_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) || (((int)double_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n        return 1;\n    }\n    uint input_1_without_sign = input_1 & 0x7fffffff;\n    uint xor_result = input_1_without_sign ^ input_2;\n    bool is_xor_result_zero = (xor_result == 0);\n    bool is_sum_negative = -1 < (int)xor_result;\n    if (is_sum_negative) {\n        input_1 = double_input_1 + input_2 * -2;\n        is_xor_result_zero = (input_1 == 0);\n    }\n    if (is_sum_negative && double_input_2 <= double_input_1 && !is_xor_result_zero) {\n        input_1 = (int)input_2 >> 0x1f;\n    }\n    if (!is_sum_negative || double_input_2 > double_input_1) {\n        input_1 = ~((int)input_2 >> 0x1f);\n    }\n    if (!is_xor_result_zero) {\n        input_1 = input_1 | 1;\n    }\n    return input_1;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f68",
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "imported": false,
            "current_name": "calculate_result_08000f68"
        },
        "FUN_08009258": {
            "renaming": {
                "FUN_08009258": "multiply_and_add_08009258",
                "param_1": "result",
                "param_2": "x",
                "param_3": "y",
                "iVar12": "len_x",
                "iVar9": "len_y",
                "iVar10": "min_len",
                "iVar13": "x_ptr",
                "iVar3": "alloc_size",
                "puVar18": "result_data",
                "puVar17": "result_data_end",
                "puVar5": "x_data_current",
                "uVar6": "y_val",
                "uVar11": "result_data_current_val",
                "puVar7": "x_data_end",
                "puVar16": "y_data_current",
                "puVar14": "result_data_current",
                "puVar15": "result_data_next",
                "uVar8": "mul_res",
                "uVar4": "carry",
                "puVar1": "y_data_current",
                "puVar2": "result_data_current_next",
                "last_val": "last_val",
                "i": "i",
                "j": "j",
                "len_x": "len_x",
                "len_y": "len_y",
                "len_result": "len_result",
                "alloc_size": "alloc_size",
                "x_data": "x_data",
                "y_data": "y_data",
                "result_data": "result_data",
                "result_data_end": "result_data_end",
                "x_data_current": "x_data_current",
                "y_data_current": "y_data_current",
                "y_data_end": "y_data_end",
                "x_data_end": "x_data_end",
                "result_data_current": "result_data_current",
                "result_data_next": "result_data_next",
                "mul_res": "mul_res",
                "carry": "carry",
                "result_data_current_next": "result_data_current_next",
                "y_val": "y_val",
                "result_data_current_val": "result_data_current_val"
            },
            "code": "void multiply_and_add_08009258(uint32_t* result, int* x, int* y) {\n    int len_x = *(int*)(x + 0x10);\n    int len_y = *(int*)(y + 0x10);\n    int len_result = len_x + len_y;\n    if (*(int*)(x + 8) < len_result) {\n        len_result++;\n    }\n    int alloc_size = _Balloc(result, len_result);\n    uint32_t* x_data = (uint32_t*)(x + 0x14);\n    uint32_t* y_data = (uint32_t*)(y + 0x14);\n    uint32_t* result_data = (uint32_t*)(alloc_size + 0x14);\n    for (int i = 0; i < len_result; i++) {\n        *(result_data + i) = 0;\n    }\n    for (int i = 0; i < len_x; i++) {\n        uint32_t carry = 0;\n        uint32_t x_val = *(x_data + i);\n        for (int j = 0; j < len_y; j++) {\n            uint32_t y_val = *(y_data + j);\n            uint64_t mul_res = (uint64_t)x_val * y_val + *(result_data + i + j) + carry;\n            *(result_data + i + j) = mul_res & 0xffffffff;\n            carry = mul_res >> 32;\n        }\n        *(result_data + i + len_y) = carry;\n    }\n    if (len_result > 0) {\n        uint32_t last_val = *(result_data + len_result - 1);\n        while (last_val == 0 && len_result > 1) {\n            len_result--;\n            last_val = *(result_data + len_result - 1);\n        }\n    }\n    *(int*)(alloc_size + 0x10) = len_result;\n}\n",
            "called": [
                "_Balloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009258",
            "calling": [
                "_dtoa_r",
                "__pow5mult"
            ],
            "imported": false,
            "current_name": "multiply_and_add_08009258"
        },
        "FUN_08000c08": {
            "renaming": {
                "FUN_08000c08": "calculateSquareRoot_08000c08",
                "param_1": "number",
                "iVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "iVar3": "multiplier",
                "uVar4": "shiftedNumber",
                "shiftedZero": "shiftedZero",
                "carry": "carry",
                "result": "result",
                "shiftedAmount": "shiftedAmount",
                "shiftedNumberInt": "shiftedNumberInt"
            },
            "code": "uint calculateSquareRoot_08000c08(uint number) {\n  int leadingZeros = count_leading_zeroes(number);\n  uint shiftAmount = leadingZeros - 8;\n  int multiplier = shiftAmount * -0x800000 + 0x4a800000;\n  if (leadingZeros > 7) {\n    uint shiftedNumber = number << (shiftAmount & 0xff);\n    uint shiftedZero = 0U >> (0x20 - shiftAmount & 0xff);\n    uint carry = (uint)(0x7fffffff < shiftedZero);\n    uint result = multiplier + shiftedNumber + shiftedZero + carry;\n    if (shiftedZero == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shiftedNumber = number << (leadingZeros + 0x18U & 0xff);\n  int shiftedAmount = 0x20 - (leadingZeros + 0x18U) & 0xff;\n  int shiftedNumberInt = (int)shiftedNumber >> 0x1f;\n  uint result = multiplier + ((number >> shiftedAmount) - shiftedNumberInt);\n  if ((shiftedNumber & 0x7fffffff) == 0) {\n    result = result & ~(shiftedNumber >> 0x1f);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c08",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "calculateSquareRoot_08000c08"
        },
        "FUN_08004366": {
            "renaming": {
                "FUN_08004366": "do_nothing_08004366"
            },
            "code": "\nvoid do_nothing_08004366(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004366",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08004366"
        },
        "FUN_080042de": {
            "renaming": {
                "FUN_080042de": "configureMasterTimer_080042de",
                "htim": "timer_handle",
                "sMasterConfig": "master_config",
                "HVar1": "status",
                "Lock": "lock",
                "State": "state",
                "Instance": "instance",
                "CR2": "cr2",
                "SMCR": "smcr",
                "HAL_LOCKED": "HAL_LOCKED",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_TIM_STATE_BUSY": "HAL_TIM_STATE_BUSY",
                "HAL_TIM_STATE_READY": "HAL_TIM_STATE_READY",
                "MasterOutputTrigger": "MasterOutputTrigger",
                "MasterSlaveMode": "MasterSlaveMode"
            },
            "code": "HAL_StatusTypeDef configureMasterTimer_080042de(TIM_HandleTypeDef *timer_handle, TIM_MasterConfigTypeDef *master_config)\n{\n  HAL_StatusTypeDef status;\n  if (timer_handle->lock == HAL_LOCKED) {\n    status = HAL_BUSY;\n  }\n  else {\n    timer_handle->lock = HAL_LOCKED;\n    timer_handle->state = HAL_TIM_STATE_BUSY;\n    timer_handle->Instance->CR2 &= 0xffffff8f;\n    timer_handle->Instance->CR2 |= master_config->MasterOutputTrigger;\n    timer_handle->Instance->SMCR &= 0xffffff7f;\n    timer_handle->Instance->SMCR |= master_config->MasterSlaveMode;\n    timer_handle->state = HAL_TIM_STATE_READY;\n    timer_handle->lock = HAL_UNLOCKED;\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042de",
            "calling": [
                "MX_TIM1_Init",
                "MX_TIM2_Init"
            ],
            "imported": false,
            "current_name": "configureMasterTimer_080042de"
        },
        "FUN_08003c6e": {
            "renaming": {
                "FUN_08003c6e": "do_nothing_08003c6e"
            },
            "code": "\nvoid do_nothing_08003c6e(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c6e",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c6e"
        },
        "FUN_08008af8": {
            "renaming": {
                "FUN_08008af8": "FUNC_08008af8"
            },
            "code": "\nint * FUNC_08008af8(undefined4 *param_1,uint param_2)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint *puVar6;\n  int iVar7;\n  undefined *puVar8;\n  uint uVar9;\n  uint uVar10;\n  undefined4 *puVar11;\n  undefined *puVar12;\n  undefined *puVar13;\n  uint uVar14;\n  uint uVar15;\n  int iVar16;\n  undefined4 *puVar17;\n  undefined4 *puVar18;\n  \n  uVar14 = param_2 + 0xb;\n  if (uVar14 < 0x17) {\n    if (0x10 < param_2) goto LAB_08008c7a;\n    __malloc_lock();\n    uVar15 = 0x10;\n    iVar7 = 0x18;\n    uVar14 = 2;\nLAB_08008b18:\n    puVar8 = PTR___malloc_av__08008e4c + iVar7;\n    puVar12 = *(undefined **)(puVar8 + 4);\n    if ((puVar12 != puVar8 + -8) || (puVar12 = *(undefined **)(puVar8 + 0xc), puVar8 != puVar12)) {\n      iVar7 = *(int *)(puVar12 + 0xc);\n      puVar8 = puVar12 + (*(uint *)(puVar12 + 4) & 0xfffffffc);\n      uVar14 = *(uint *)(puVar8 + 4);\nLAB_08008b34:\n      iVar16 = *(int *)(puVar12 + 8);\n      *(int *)(iVar16 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar16;\n      *(uint *)(puVar8 + 4) = uVar14 | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar12 + 8);\n    }\n    uVar14 = uVar14 + 2;\n  }\n  else {\n    uVar15 = uVar14 & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_08008c7a:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n    __malloc_lock();\n    if (uVar15 < 0x1f8) {\n      uVar14 = uVar14 >> 3;\n      iVar7 = uVar15 + 8;\n      goto LAB_08008b18;\n    }\n    uVar4 = uVar14 >> 9;\n    if (uVar4 == 0) {\n      iVar7 = 0x200;\n      uVar9 = 0x40;\n      uVar4 = 0x3f;\n    }\n    else if (uVar4 < 5) {\n      uVar9 = (uVar14 >> 6) + 0x39;\n      uVar4 = (uVar14 >> 6) + 0x38;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x15) {\n      uVar9 = uVar4 + 0x5c;\n      uVar4 = uVar4 + 0x5b;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x55) {\n      uVar9 = (uVar14 >> 0xc) + 0x6f;\n      uVar4 = (uVar14 >> 0xc) + 0x6e;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x155) {\n      uVar9 = (uVar14 >> 0xf) + 0x78;\n      uVar4 = (uVar14 >> 0xf) + 0x77;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x555) {\n      uVar9 = (uVar14 >> 0x12) + 0x7d;\n      uVar4 = (uVar14 >> 0x12) + 0x7c;\n      iVar7 = uVar9 * 8;\n    }\n    else {\n      iVar7 = 0x3f8;\n      uVar9 = 0x7f;\n      uVar4 = 0x7e;\n    }\n    for (puVar12 = *(undefined **)(PTR___malloc_av__08008e4c + iVar7 + 4); uVar14 = uVar9,\n        PTR___malloc_av__08008e4c + iVar7 + -8 != puVar12; puVar12 = *(undefined **)(puVar12 + 0xc))\n    {\n      iVar16 = (*(uint *)(puVar12 + 4) & 0xfffffffc) - uVar15;\n      uVar14 = uVar4;\n      if (0xf < iVar16) break;\n      if (-1 < iVar16) {\n        puVar8 = puVar12 + (*(uint *)(puVar12 + 4) & 0xfffffffc);\n        uVar14 = *(uint *)(puVar8 + 4);\n        iVar7 = *(int *)(puVar12 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  puVar8 = PTR_PTR___malloc_av__08008e60;\n  puVar12 = PTR___malloc_av__08008e4c;\n  puVar13 = *(undefined **)(PTR___malloc_av__08008e4c + 0x10);\n  if (puVar13 == PTR_PTR___malloc_av__08008e60) {\n    uVar4 = *(uint *)(PTR___malloc_av__08008e4c + 4);\n    uVar9 = 1 << ((int)uVar14 >> 2 & 0xffU);\n    if (uVar9 <= uVar4) goto LAB_08008c06;\n  }\n  else {\n    uVar9 = *(uint *)(puVar13 + 4);\n    uVar10 = uVar9 & 0xfffffffc;\n    uVar4 = uVar10 - uVar15;\n    if (0xf < (int)uVar4) {\n      puVar3 = puVar13 + uVar15;\n      *(uint *)(puVar13 + 4) = uVar15 | 1;\n      *(undefined **)(puVar12 + 0x10) = puVar3;\n      *(undefined **)(puVar12 + 0x14) = puVar3;\n      *(undefined **)(puVar3 + 8) = puVar8;\n      *(undefined **)(puVar3 + 0xc) = puVar8;\n      *(uint *)(puVar3 + 4) = uVar4 | 1;\n      *(uint *)(puVar13 + uVar10) = uVar4;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    *(undefined **)(PTR___malloc_av__08008e4c + 0x10) = PTR_PTR___malloc_av__08008e60;\n    *(undefined **)(puVar12 + 0x14) = puVar8;\n    if (-1 < (int)uVar4) {\n      *(uint *)(puVar13 + uVar10 + 4) = *(uint *)(puVar13 + uVar10 + 4) | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    if (uVar10 < 0x200) {\n      iVar7 = (uVar9 >> 3) + 1;\n      iVar16 = *(int *)(puVar12 + iVar7 * 8);\n      uVar4 = 1 << ((int)(uVar9 >> 3) >> 2 & 0xffU) | *(uint *)(puVar12 + 4);\n      *(int *)(puVar13 + 8) = iVar16;\n      *(undefined **)(puVar13 + 0xc) = puVar12 + iVar7 * 8 + -8;\n      *(uint *)(puVar12 + 4) = uVar4;\n      *(undefined **)(puVar12 + iVar7 * 8) = puVar13;\n      *(undefined **)(iVar16 + 0xc) = puVar13;\n    }\n    else {\n      uVar4 = uVar9 >> 9;\n      if (uVar4 < 5) {\n        iVar7 = ((uVar9 >> 6) + 0x39) * 8;\n        iVar16 = (uVar9 >> 6) + 0x38;\n      }\n      else if (uVar4 < 0x15) {\n        iVar7 = (uVar4 + 0x5c) * 8;\n        iVar16 = uVar4 + 0x5b;\n      }\n      else if (uVar4 < 0x55) {\n        iVar7 = ((uVar9 >> 0xc) + 0x6f) * 8;\n        iVar16 = (uVar9 >> 0xc) + 0x6e;\n      }\n      else if (uVar4 < 0x155) {\n        iVar7 = ((uVar9 >> 0xf) + 0x78) * 8;\n        iVar16 = (uVar9 >> 0xf) + 0x77;\n      }\n      else if (uVar4 < 0x555) {\n        iVar7 = ((uVar9 >> 0x12) + 0x7d) * 8;\n        iVar16 = (uVar9 >> 0x12) + 0x7c;\n      }\n      else {\n        iVar7 = 0x3f8;\n        iVar16 = 0x7e;\n      }\n      puVar3 = *(undefined **)(puVar12 + iVar7);\n      puVar1 = puVar12 + iVar7 + -8;\n      if (puVar1 == puVar3) {\n        uVar4 = 1 << (iVar16 >> 2 & 0xffU) | *(uint *)(puVar12 + 4);\n        *(uint *)(puVar12 + 4) = uVar4;\n      }\n      else {\n        do {\n          if ((*(uint *)(puVar3 + 4) & 0xfffffffc) <= uVar10) break;\n          puVar3 = *(undefined **)(puVar3 + 8);\n        } while (puVar1 != puVar3);\n        puVar1 = *(undefined **)(puVar3 + 0xc);\n        uVar4 = *(uint *)(puVar12 + 4);\n      }\n      *(undefined **)(puVar13 + 8) = puVar3;\n      *(undefined **)(puVar13 + 0xc) = puVar1;\n      *(undefined **)(puVar1 + 8) = puVar13;\n      *(undefined **)(puVar3 + 0xc) = puVar13;\n    }\n    uVar9 = 1 << ((int)uVar14 >> 2 & 0xffU);\n    if (uVar9 <= uVar4) {\nLAB_08008c06:\n      if ((uVar9 & uVar4) == 0) {\n        uVar14 = uVar14 & 0xfffffffc;\n        do {\n          uVar9 = uVar9 << 1;\n          uVar14 = uVar14 + 4;\n        } while ((uVar9 & uVar4) == 0);\n      }\n      do {\n        puVar17 = (undefined4 *)(puVar12 + uVar14 * 8);\n        uVar4 = uVar14;\n        puVar18 = puVar17;\n        do {\n          for (puVar11 = (undefined4 *)puVar18[3]; puVar18 != puVar11;\n              puVar11 = (undefined4 *)puVar11[3]) {\n            uVar10 = puVar11[1] & 0xfffffffc;\n            uVar5 = uVar10 - uVar15;\n            if (0xf < (int)uVar5) {\n              iVar16 = puVar11[2];\n              iVar7 = puVar11[3];\n              puVar13 = (undefined *)(uVar15 + (int)puVar11);\n              puVar11[1] = uVar15 | 1;\n              *(int *)(iVar16 + 0xc) = iVar7;\n              *(int *)(iVar7 + 8) = iVar16;\n              *(undefined **)(puVar12 + 0x10) = puVar13;\n              *(undefined **)(puVar12 + 0x14) = puVar13;\n              *(undefined **)(puVar13 + 8) = puVar8;\n              *(undefined **)(puVar13 + 0xc) = puVar8;\n              *(uint *)(puVar13 + 4) = uVar5 | 1;\n              *(uint *)((int)puVar11 + uVar10) = uVar5;\n              __malloc_unlock(param_1);\n              return puVar11 + 2;\n            }\n            if (-1 < (int)uVar5) {\n              iVar7 = puVar11[3];\n              iVar16 = puVar11[2];\n              *(uint *)((int)puVar11 + uVar10 + 4) = *(uint *)((int)puVar11 + uVar10 + 4) | 1;\n              *(int *)(iVar16 + 0xc) = iVar7;\n              *(int *)(iVar7 + 8) = iVar16;\n              __malloc_unlock(param_1);\n              return puVar11 + 2;\n            }\n          }\n          uVar4 = uVar4 + 1;\n          puVar18 = puVar18 + 2;\n        } while ((uVar4 & 3) != 0);\n        do {\n          uVar10 = uVar14 & 3;\n          puVar18 = puVar17 + -2;\n          uVar14 = uVar14 - 1;\n          if (uVar10 == 0) {\n            uVar10 = *(uint *)(puVar12 + 4) & ~uVar9;\n            *(uint *)(puVar12 + 4) = uVar10;\n            goto LAB_08008f24;\n          }\n          puVar17 = (undefined4 *)*puVar17;\n        } while (puVar17 == puVar18);\n        uVar10 = *(uint *)(puVar12 + 4);\nLAB_08008f24:\n        uVar9 = uVar9 * 2;\n        if ((uVar10 <= uVar9 && uVar9 - uVar10 != 0) || (uVar14 = uVar4, uVar9 == 0)) break;\n        for (; (uVar9 & uVar10) == 0; uVar9 = uVar9 << 1) {\n          uVar14 = uVar14 + 4;\n        }\n      } while( true );\n    }\n  }\n  puVar8 = PTR___malloc_sbrk_base_08008e64;\n  puVar13 = *(undefined **)(puVar12 + 8);\n  uVar14 = *(uint *)(puVar13 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar14) && (uVar4 = uVar14 - uVar15, 0xf < (int)uVar4)) goto LAB_08008dac;\n  if (*(int *)PTR___malloc_sbrk_base_08008e64 == -1) {\n    uVar4 = uVar15 + *(int *)PTR___malloc_top_pad_08008e50 + 0x10;\n  }\n  else {\n    uVar4 = uVar15 + *(int *)PTR___malloc_top_pad_08008e50 + 0x100f & 0xfffff000;\n  }\n  puVar1 = (undefined *)_sbrk_r(param_1,uVar4);\n  puVar6 = (uint *)PTR___malloc_current_mallinfo_08009018;\n  puVar3 = PTR___malloc_current_mallinfo_08008e54;\n  if (puVar1 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    puVar13 = *(undefined **)(puVar12 + 8);\n    uVar14 = *(uint *)(puVar13 + 4);\n  }\n  else {\n    puVar2 = puVar13 + uVar14;\n    if (puVar2 < puVar1 || puVar2 == puVar1) {\n      uVar9 = *(int *)PTR___malloc_current_mallinfo_08008e54 + uVar4;\n      *(uint *)PTR___malloc_current_mallinfo_08008e54 = uVar9;\n      puVar6 = (uint *)puVar3;\n      if ((puVar2 != puVar1) || (((uint)puVar2 & 0xfff) != 0)) goto LAB_08008d02;\n      *(uint *)(*(int *)(puVar12 + 8) + 4) = uVar14 + uVar4 | 1;\n    }\n    else {\n      if (puVar13 != puVar12) goto LAB_08008ed8;\n      uVar9 = *(int *)PTR___malloc_current_mallinfo_08009018 + uVar4;\n      *(uint *)PTR___malloc_current_mallinfo_08009018 = uVar9;\nLAB_08008d02:\n      if (*(int *)puVar8 == -1) {\n        *(undefined **)puVar8 = puVar1;\n      }\n      else {\n        *puVar6 = (uint)(puVar1 + (uVar9 - (int)puVar2));\n      }\n      uVar9 = (uint)puVar1 & 7;\n      if (uVar9 == 0) {\n        iVar7 = 0x1000;\n      }\n      else {\n        puVar1 = puVar1 + (8 - uVar9);\n        iVar7 = 0x1008 - uVar9;\n      }\n      iVar7 = iVar7 - ((uint)(puVar1 + uVar4) & 0xfff);\n      iVar16 = _sbrk_r(param_1,iVar7);\n      if (iVar16 == -1) {\n        uVar4 = 1;\n        iVar7 = 0;\n      }\n      else {\n        uVar4 = (iVar16 - (int)puVar1) + iVar7 | 1;\n      }\n      uVar9 = *puVar6 + iVar7;\n      *(undefined **)(puVar12 + 8) = puVar1;\n      *puVar6 = uVar9;\n      *(uint *)(puVar1 + 4) = uVar4;\n      if (puVar13 != puVar12) {\n        if (uVar14 < 0x10) {\n          *(undefined4 *)(puVar1 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        uVar14 = uVar14 - 0xc & 0xfffffff8;\n        *(uint *)(puVar13 + 4) = *(uint *)(puVar13 + 4) & 1 | uVar14;\n        *(undefined4 *)(puVar13 + uVar14 + 4) = 5;\n        *(undefined4 *)(puVar13 + uVar14 + 8) = 5;\n        if (0xf < uVar14) {\n          _free_r(param_1,puVar13 + 8);\n          uVar9 = *puVar6;\n        }\n      }\n    }\n    puVar8 = PTR___malloc_max_total_mem_08008e5c;\n    puVar13 = *(undefined **)(puVar12 + 8);\n    uVar4 = *(uint *)PTR___malloc_max_total_mem_08008e5c;\n    if (*(uint *)PTR___malloc_max_sbrked_mem_08008e58 < uVar9) {\n      *(uint *)PTR___malloc_max_sbrked_mem_08008e58 = uVar9;\n    }\n    uVar14 = *(uint *)(puVar13 + 4);\n    if (uVar4 < uVar9) {\n      *(uint *)puVar8 = uVar9;\n    }\n  }\n  uVar4 = (uVar14 & 0xfffffffc) - uVar15;\n  if ((uVar15 <= (uVar14 & 0xfffffffc)) && (0xf < (int)uVar4)) {\nLAB_08008dac:\n    *(uint *)(puVar13 + 4) = uVar15 | 1;\n    *(undefined **)(puVar12 + 8) = puVar13 + uVar15;\n    *(uint *)(puVar13 + uVar15 + 4) = uVar4 | 1;\n    __malloc_unlock(param_1);\n    return (int *)(puVar13 + 8);\n  }\nLAB_08008eee:\n  __malloc_unlock(param_1);\n  return (int *)0x0;\n}\n\n",
            "called": [
                "__malloc_lock",
                "_sbrk_r",
                "__malloc_unlock",
                "_free_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008af8",
            "calling": [
                "_realloc_r",
                "_calloc_r",
                "__ssprint_r",
                "_svfprintf_r"
            ],
            "imported": false,
            "current_name": "FUNC_08008af8"
        },
        "FUN_08004bd8": {
            "renaming": {
                "FUN_08004bd8": "calculate_pitch_08004bd8",
                "mpu6050": "sensor_data",
                "pitch": "result_pitch",
                "acc_pitch": "accelerometer_pitch",
                "gyro_x": "gyroscope_x",
                "uVar1": "difference",
                "uVar2": "temp_double_1",
                "uVar3": "temp_double_2"
            },
            "code": "void calculate_pitch_08004bd8(Mpu6050 *mpu6050, float *pitch) {\n    float gyro_x = mpu6050->gyroX - mpu6050->offset_gyroX;\n    float acc_pitch = atan2(mpu6050->accY / 16384.0f, mpu6050->accZ / 16384.0f) * 180.0f / 3.14159265358979323846f - mpu6050->offset_acc_pitch;\n    float total_pitch = *(float *)PTR_total_pitch_08004d60;\n    if (*PTR_first_run_08004d70 == 0) {\n        total_pitch = total_pitch * 0.94f + acc_pitch * 0.06f;\n        *(float *)PTR_total_pitch_08004d60 = total_pitch;\n    }\n    else {\n        *PTR_first_run_08004d70 = 0;\n        *(float *)PTR_total_pitch_08004d60 = acc_pitch;\n    }\n    *pitch = total_pitch;\n}",
            "called": [
                "__subdf3",
                "__muldf3",
                "__aeabi_f2d",
                "__aeabi_fsub",
                "__divdf3",
                "atan2",
                "__aeabi_dadd",
                "__truncdfsf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bd8",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "calculate_pitch_08004bd8"
        },
        "FUN_080090c0": {
            "renaming": {
                "FUN_080090c0": "allocate_memory_080090c0",
                "param_1": "heap",
                "param_2": "index",
                "puVar1": "memory_address",
                "iVar2": "heap_address"
            },
            "code": "undefined4 * allocate_memory_080090c0(int heap,uint32_t index)\n{\n  undefined4 *memory_address;\n  int heap_address;\n  \n  heap_address = *(int *)(heap + 0x4c);\n  if (heap_address == 0) {\n    heap_address = _calloc_r(heap,4,0x21);\n    *(int *)(heap + 0x4c) = heap_address;\n    if (heap_address == 0) {\n      return (undefined4 *)0x0;\n    }\n  }\n  memory_address = *(undefined4 **)(heap_address + index * 4);\n  if (memory_address == (undefined4 *)0x0) {\n    int size = 1 << (index & 0xff);\n    memory_address = (undefined4 *)_calloc_r(heap,1,(size + 5) * 4);\n    if (memory_address == (undefined4 *)0x0) {\n      return (undefined4 *)0x0;\n    }\n    memory_address[1] = index;\n    memory_address[2] = size;\n  }\n  else {\n    *(undefined4 *)(heap_address + index * 4) = *memory_address;\n  }\n  memory_address[3] = 0;\n  memory_address[4] = 0;\n  return memory_address;\n}",
            "called": [
                "_calloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090c0",
            "calling": [
                "_dtoa_r",
                "__d2b",
                "__lshift",
                "__mdiff",
                "__multadd",
                "__pow5mult",
                "__i2b",
                "__multiply"
            ],
            "imported": false,
            "current_name": "allocate_memory_080090c0"
        },
        "FUN_080091e4": {
            "renaming": {
                "FUN_080091e4": "count_set_bits_080091e4",
                "*param_1": "*num",
                "uVar1": "count",
                "uVar2": "temp"
            },
            "code": "uint count_set_bits_080091e4(uint *num)\n{\n  uint temp = *num;\n  uint count = temp & 7;\n  \n  if (count == 0) \n  {\n    if ((temp & 0xffff) == 0) \n    {\n      temp = temp >> 0x10;\n      count = 0x10;\n    }\n    if ((temp & 0xff) == 0) \n    {\n      temp = temp >> 8;\n      count += 8;\n    }\n    if ((temp & 0xf) == 0) \n    {\n      temp = temp >> 4;\n      count += 4;\n    }\n    if ((temp & 3) == 0) \n    {\n      temp = temp >> 2;\n      count += 2;\n    }\n    if (-1 < (int)(temp << 0x1f)) \n    {\n      temp = temp >> 1;\n      if (temp == 0) \n      {\n        return 0x20;\n      }\n      count += 1;\n    }\n    *num = temp;\n    return count;\n  }\n  if (-1 < (int)(temp << 0x1f)) \n  {\n    if ((int)(temp << 0x1e) < 0) \n    {\n      *num = temp >> 1;\n      return 1;\n    }\n    *num = temp >> 2;\n    return 2;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091e4",
            "calling": [
                "__d2b"
            ],
            "imported": false,
            "current_name": "count_set_bits_080091e4"
        },
        "FUN_08000cb8": {
            "renaming": {
                "FUN_08000cb8": "FUNC_08000cb8"
            },
            "code": "\nuint FUNC_08000cb8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_08000e08;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_08000e08:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cb8",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "FUNC_08000cb8"
        },
        "FUN_080098c0": {
            "renaming": {
                "FUN_080098c0": "add_data_to_list_080098c0",
                "param_1": "type",
                "param_2": "data1",
                "param_3": "data2",
                "param_4": "unused",
                "puVar1": "recursive_mutex",
                "uVar2": "ret_mutex",
                "uVar3": "node_mask",
                "uVar4": "list_size",
                "iVar5": "list_head",
                "iVar6": "global_impure_ptr",
                "iVar7": "new_list_tail"
            },
            "code": "undefined4 add_data_to_list_080098c0(int type, undefined4 data1, undefined4 data2, undefined4 unused) {\n    undefined *recursive_mutex = PTR___atexit_recursive_mutex_08009974;\n    __retarget_lock_acquire_recursive(*(undefined4 *)recursive_mutex);\n    int global_impure_ptr = *(int *)PTR__global_impure_ptr_08009978;\n    int list_head = *(int *)(global_impure_ptr + 0x148);\n    if (list_head == 0) {\n        list_head = global_impure_ptr + 0x14c;\n        *(int *)(global_impure_ptr + 0x148) = list_head;\n    }\n    uint list_size = *(uint *)(list_head + 4);\n    if ((int)list_size < 0x20) {\n        list_size++;\n    }\n    else {\n        if (DAT_0800997c == 0) {\n            __retarget_lock_release_recursive(*(undefined4 *)recursive_mutex);\n            return 0xffffffff;\n        }\n        int new_list_head = 400;\n        list_size = 0;\n        _DAT_00000190 = *(undefined4 *)(global_impure_ptr + 0x148);\n        int new_list_tail = 1;\n        _DAT_00000194 = 0;\n        *(undefined4 *)(global_impure_ptr + 0x148) = 400;\n        _DAT_00000318 = 0;\n        _DAT_0000031c = 0;\n    }\n    if (type != 0) {\n        int new_node = list_head + list_size * 4;\n        *(undefined4 *)(new_node + 0x88) = data1;\n        uint node_mask = 1 << (list_size & 0xff);\n        *(uint *)(list_head + 0x188) = *(uint *)(list_head + 0x188) | node_mask;\n        *(undefined4 *)(new_node + 0x108) = data2;\n        if (type == 2) {\n            *(uint *)(list_head + 0x18c) = node_mask | *(uint *)(list_head + 0x18c);\n        }\n    }\n    *(int *)(list_head + 4) = new_list_tail;\n    undefined4 ret_mutex = *(undefined4 *)recursive_mutex;\n    *(undefined4 *)(list_head + (list_size + 2) * 4) = unused;\n    __retarget_lock_release_recursive(ret_mutex);\n    return 0;\n}",
            "called": [
                "__retarget_lock_acquire_recursive",
                "__retarget_lock_release_recursive"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098c0",
            "calling": [
                "atexit"
            ],
            "imported": false,
            "current_name": "add_data_to_list_080098c0"
        },
        "FUN_08003c80": {
            "renaming": {
                "FUN_08003c80": "do_nothing_08003c80"
            },
            "code": "\nvoid do_nothing_08003c80(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c80",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c80"
        },
        "FUN_080027f4": {
            "renaming": {
                "FUN_080027f4": "readFromI2C_080027f4",
                "hi2c": "i2c",
                "DevAddress": "devAddress",
                "MemAddress": "memAddress",
                "MemAddSize": "memAddSize",
                "Timeout": "timeout",
                "Tickstart": "tickstart",
                "HVar1": "status",
                "uVar2": "currentTime",
                "iVar3": "timeoutOccurred"
            },
            "code": "HAL_StatusTypeDef readFromI2C_080027f4(I2C_HandleTypeDef *i2c,uint16_t devAddress,uint16_t memAddress,uint16_t memAddSize,uint32_t timeout,uint32_t tickstart)\n{\n  HAL_StatusTypeDef status;\n  uint32_t currentTime;\n  int timeoutOccurred;\n  i2c->Instance->CR1 |= 0x400;\n  i2c->Instance->CR1 |= 0x100;\n  do {\n    if ((~i2c->Instance->SR1 & 1) == 0) {\n      timeoutOccurred = 0;\n      goto masterAddressFlag;\n    }\n  } while ((timeout == 0xffffffff) || ((timeout != 0 && (currentTime = HAL_GetTick(), currentTime - tickstart <= timeout))));\n  i2c->PreviousState = 0;\n  i2c->State = HAL_I2C_STATE_READY;\n  i2c->Mode = HAL_I2C_MODE_NONE;\n  i2c->Lock = HAL_UNLOCKED;\n  return HAL_TIMEOUT;\n\nmasterAddressFlag:\n  i2c->Instance->DR = (byte)devAddress & 0xfe;\n  status = I2C_WaitOnMasterAddressFlagUntilTimeout(i2c,DAT_08002ad4,timeout,tickstart);\n  if (status == HAL_OK) {\n    status = I2C_WaitOnTXEFlagUntilTimeout(i2c,timeout,tickstart);\n    if (status == HAL_OK) {\n      if (memAddSize == 1) {\n        i2c->Instance->DR = (uint)(byte)memAddress;\n      }\n      else {\n        i2c->Instance->DR = (uint)(byte)(memAddress >> 8);\n        status = I2C_WaitOnTXEFlagUntilTimeout(i2c,timeout,tickstart);\n        if (status != HAL_OK) {\n          if (i2c->ErrorCode == 4) {\n            i2c->Instance->CR1 |= 0x200;\n            return HAL_ERROR;\n          }\n          return HAL_TIMEOUT;\n        }\n        i2c->Instance->DR = (uint)(byte)memAddress;\n      }\n      status = I2C_WaitOnTXEFlagUntilTimeout(i2c,timeout,tickstart);\n      if (status == HAL_OK) {\n        i2c->Instance->CR1 |= 0x100;\n        do {\n          if ((~i2c->Instance->SR1 & 1) == 0) {\n            timeoutOccurred = 0;\n            goto readData;\n          }\n        } while ((timeout == 0xffffffff) || ((timeout != 0 && (currentTime = HAL_GetTick(), currentTime - tickstart <= timeout))));\n        i2c->PreviousState = 0;\n        i2c->State = HAL_I2C_STATE_READY;\n        i2c->Mode = HAL_I2C_MODE_NONE;\n        i2c->Lock = HAL_UNLOCKED;\n        return HAL_TIMEOUT;\n\nreadData:\n        i2c->Instance->DR = (uint)(byte)((byte)devAddress | 1);\n        status = I2C_WaitOnMasterAddressFlagUntilTimeout(i2c,DAT_08002ad4,timeout,tickstart);\n        if (status == HAL_OK) {\n          status = HAL_OK;\n        }\n        else if (i2c->ErrorCode == 4) {\n          status = HAL_ERROR;\n        }\n        else {\n          status = HAL_TIMEOUT;\n        }\n      }\n      else if (i2c->ErrorCode == 4) {\n        i2c->Instance->CR1 |= 0x200;\n        status = HAL_ERROR;\n      }\n      else {\n        status = HAL_TIMEOUT;\n      }\n    }\n    else if (i2c->ErrorCode == 4) {\n      i2c->Instance->CR1 |= 0x200;\n      status = HAL_ERROR;\n    }\n    else {\n      status = HAL_TIMEOUT;\n    }\n  }\n  else if (i2c->ErrorCode == 4) {\n    status = HAL_ERROR;\n  }\n  else {\n    status = HAL_TIMEOUT;\n  }\n  return status;\n}",
            "called": [
                "I2C_WaitOnTXEFlagUntilTimeout",
                "HAL_GetTick",
                "I2C_WaitOnMasterAddressFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080027f4",
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "imported": false,
            "current_name": "readFromI2C_080027f4"
        },
        "FUN_080003d4": {
            "renaming": {
                "FUN_080003d4": "calculate_shifted_value_080003d4",
                "param_1": "input_value",
                "uVar1": "output_value_high",
                "uVar2": "shift_amount_2",
                "iVar3": "num_leading_zeros",
                "uVar4": "shift_amount",
                "in_r12": "unused_variable",
                "bVar5": "is_shift_amount_2_negative",
                "bVar6": "is_shift_amount_2_zero",
                "bVar7": "is_shift_amount_negative"
            },
            "code": "ulonglong calculate_shifted_value_080003d4(uint input_value)\n{\n  uint num_leading_zeros = count_leading_zeroes(input_value);\n  uint shift_amount = num_leading_zeros + 0x15;\n  bool is_shift_amount_negative = SBORROW4(shift_amount,0x20);\n  uint shift_amount_2 = num_leading_zeros - 0xb;\n  bool is_shift_amount_2_negative = (int)shift_amount_2 < 0;\n  bool is_shift_amount_2_zero = shift_amount_2 == 0;\n  ulonglong output_value = 0;\n\n  if (input_value == 0) {\n    return 0;\n  }\n\n  if ((int)shift_amount < 0x20) {\n    is_shift_amount_negative = SCARRY4(shift_amount_2,0xc);\n    num_leading_zeros = num_leading_zeros + 1;\n    is_shift_amount_2_negative = num_leading_zeros < 0;\n    is_shift_amount_2_zero = num_leading_zeros == 0;\n    shift_amount_2 = shift_amount;\n    if (!is_shift_amount_2_zero && is_shift_amount_2_negative == is_shift_amount_negative) {\n      output_value = input_value << (shift_amount & 0xff);\n      input_value = input_value >> (0xcU - num_leading_zeros & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_shift_amount_2_zero || is_shift_amount_2_negative != is_shift_amount_negative) {\n    uint shift_amount_3 = 0x20 - shift_amount_2;\n    input_value = input_value << (shift_amount_2 & 0xff);\n    if (is_shift_amount_2_zero || is_shift_amount_2_negative != is_shift_amount_negative) {\n      input_value = input_value | 0U >> (shift_amount_3 & 0xff);\n    }\n    if (is_shift_amount_2_zero || is_shift_amount_2_negative != is_shift_amount_negative) {\n      output_value = 0 << (shift_amount_2 & 0xff);\n    }\n  }\nLAB_080002e0:\n  if ((int)shift_amount < 0x433) {\n    return CONCAT44(input_value + (0x432 - shift_amount) * 0x100000,output_value);\n  }\n  uint shift_amount_4 = ~(0x432 - shift_amount);\n  if (0x1e < (int)shift_amount_4) {\n    return (ulonglong)(input_value >> (shift_amount_4 - 0x1f & 0xff));\n  }\n  uint shift_amount_5 = shift_amount_4 - 0x13;\n  if (shift_amount_5 == 0 || shift_amount_5 < 0 != SCARRY4(shift_amount_4 - 0x1f,0xc)) {\n    shift_amount_4 = shift_amount_4 + 1;\n    return CONCAT44(input_value >> (shift_amount_4 & 0xff), output_value >> (shift_amount_4 & 0xff) | input_value << (0x20 - shift_amount_4 & 0xff));\n  }\n  return (ulonglong)(output_value >> (0x20 - (0xcU - shift_amount_5) & 0xff) | input_value << (0xcU - shift_amount_5 & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003d4",
            "calling": [
                "_dtoa_r"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_080003d4"
        },
        "FUN_08004d78": {
            "renaming": {
                "FUN_08004d78": "calculate_pitch_and_roll_08004d78",
                "mpu6050": "sensor",
                "pitch": "pitch_degrees",
                "roll": "roll_degrees",
                "acc_roll": "roll_rad",
                "acc_pitch": "pitch_rad",
                "acc_z": "acc_z_normalized",
                "acc_y": "acc_y_normalized",
                "acc_x": "acc_x_normalized"
            },
            "code": "void calculate_pitch_and_roll_08004d78(Mpu6050 *mpu6050, float *pitch, float *roll) {\n  float acc_x_normalized = mpu6050->accX / 0x45800000;\n  float acc_y_normalized = mpu6050->accY / 0x45800000;\n  float acc_z_normalized = mpu6050->accZ / 0x45800000;\n  float roll_rad = atan2(acc_y_normalized, acc_z_normalized);\n  float pitch_rad = atan2(-acc_x_normalized, sqrt(acc_y_normalized * acc_y_normalized + acc_z_normalized * acc_z_normalized));\n  *pitch = pitch_rad * 180 / PI;\n  *roll = roll_rad * 180 / PI;\n}",
            "called": [
                "__muldf3",
                "__aeabi_f2d",
                "__aeabi_fdiv",
                "__divdf3",
                "atan2",
                "__truncdfsf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d78",
            "calling": [
                "mpu6050_calibrate"
            ],
            "imported": false,
            "current_name": "calculate_pitch_and_roll_08004d78"
        },
        "FUN_08000c10": {
            "renaming": {
                "FUN_08000c10": "calculate_hash_08000c10",
                "param_1": "input",
                "uVar2": "shift_amount",
                "iVar1": "leading_zeroes",
                "uVar3": "sign_bit",
                "iVar4": "constant_term",
                "uVar5": "mask",
                "shifted_input": "shifted_input",
                "shifted_constant": "shifted_constant"
            },
            "code": "uint calculate_hash_08000c10(uint input)\n{\n    int leading_zeroes = count_leading_zeroes(input);\n    uint sign_bit = input & 0x80000000;\n    uint abs_input = (int)sign_bit < 0 ? -input : input;\n    if (abs_input == 0) {\n        return 0;\n    }\n    uint shift_amount = leading_zeroes - 8;\n    uint constant_term = (sign_bit | 0x4b000000) - 0x800000 + shift_amount * -0x800000;\n    if (leading_zeroes > 7) {\n        uint mask = 0 << (shift_amount & 0xff);\n        uint shifted_input = abs_input << (shift_amount & 0xff);\n        uint shifted_constant = constant_term + shifted_input + (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < mask);\n        if (mask == 0x80000000) {\n            shifted_constant = shifted_constant & 0xfffffffe;\n        }\n        return shifted_constant;\n    }\n    uint shifted_input = abs_input << (leading_zeroes + 0x18U & 0xff);\n    uint shifted_constant = constant_term + ((abs_input >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)shifted_input >> 0x1f));\n    if ((shifted_input & 0x7fffffff) == 0) {\n        shifted_constant = shifted_constant & ~(shifted_input >> 0x1f);\n    }\n    return shifted_constant;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c10",
            "calling": [
                "mpu6050_calibrate",
                "mpu6050_update",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "imported": false,
            "current_name": "calculate_hash_08000c10"
        },
        "FUN_0800491c": {
            "renaming": {
                "FUN_0800491c": "initialize_mpu6050_0800491c",
                "mpu6050": "mpu",
                "local_13": "reg_value",
                "local_12": "gyro_config",
                "local_11": "acc_config",
                "PTR_I2C_Write_Reg_080049c8": "i2c_write_register"
            },
            "code": "void initialize_mpu6050_0800491c(Mpu6050 *mpu6050)\n{\n    uint8_t reg_value = 0;\n    uint8_t gyro_config = 0x10;\n    uint8_t acc_config = 8;\n\n    PTR_I2C_Write_Reg_080049c8(0xd0, 0x6b, &reg_value, 1);\n    PTR_I2C_Write_Reg_080049c8(0xd0, 0x1c, &gyro_config, 1);\n    PTR_I2C_Write_Reg_080049c8(0xd0, 0x1b, &acc_config, 1);\n\n    mpu6050->accX = 0.0;\n    mpu6050->accY = 0.0;\n    mpu6050->accZ = 0.0;\n    mpu6050->temp = 0.0;\n    mpu6050->gyroX = 0.0;\n    mpu6050->gyroY = 0.0;\n    mpu6050->gyroZ = 0.0;\n    mpu6050->offset_gyroX = 0.0;\n    mpu6050->offset_gyroY = 0.0;\n    mpu6050->offset_acc_pitch = 0.0;\n    mpu6050->offset_acc_roll = 0.0;\n\n    mpu6050_calibrate(mpu6050);\n    return;\n}",
            "called": [
                "mpu6050_calibrate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800491c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_mpu6050_0800491c"
        }
    },
    "used_tokens": 163506,
    "layers": [
        [
            "FUN_08003440",
            "FUN_08004f2c",
            "FUN_080046ec",
            "FUN_08005500",
            "FUN_08003568",
            "FUN_08002c2e",
            "FUN_080008ec",
            "FUN_08000978",
            "FUN_0800101c",
            "FUN_080056d4",
            "FUN_080078b4",
            "FUN_080017b4",
            "FUN_08001030",
            "FUN_080011ec",
            "FUN_080056ce",
            "FUN_08004f3c",
            "FUN_080008fc",
            "FUN_08001714",
            "FUN_08000988",
            "FUN_080078c0",
            "FUN_080017c4",
            "FUN_080056da",
            "FUN_08001044",
            "FUN_08009444",
            "FUN_08004436",
            "FUN_08009e50",
            "FUN_08004ee8",
            "FUN_080094f8",
            "FUN_08000998",
            "FUN_08000fc8",
            "FUN_08003908",
            "FUN_08004f60",
            "FUN_08001170",
            "FUN_08002ad8",
            "FUN_08000fd0",
            "FUN_08003d60",
            "FUN_08009e68",
            "FUN_08001618",
            "FUN_080091a4",
            "FUN_08004f78",
            "FUN_080015a0",
            "FUN_0800172a",
            "FUN_080009d4",
            "FUN_08009744",
            "FUN_08003640",
            "FUN_08009980",
            "FUN_08000134",
            "FUN_08005704",
            "FUN_08002ca8",
            "FUN_08003a94",
            "FUN_0800416a",
            "FUN_08001ccc",
            "FUN_0800157c",
            "FUN_080036f8",
            "FUN_080009e8",
            "FUN_08009630",
            "FUN_08005830",
            "FUN_08005714",
            "FUN_08005834",
            "FUN_08005838",
            "FUN_080096e0",
            "FUN_08003540",
            "FUN_08001ab0",
            "FUN_08009768",
            "FUN_08001008",
            "FUN_08003ff8",
            "FUN_08004ea4",
            "FUN_08005728",
            "FUN_08003e38",
            "FUN_080006a4",
            "FUN_08009530",
            "FUN_08002bb4",
            "FUN_08002d3c",
            "FUN_080009fc",
            "FUN_080093a4",
            "FUN_080078a0",
            "FUN_080056c8",
            "FUN_080057e8",
            "FUN_080008f4",
            "FUN_080036a8",
            "FUN_08005224",
            "FUN_08005348",
            "FUN_080049cc",
            "FUN_08003c94",
            "FUN_0800884c",
            "FUN_0800901c",
            "FUN_0800177c",
            "FUN_080099ec",
            "FUN_08005598",
            "FUN_08002640",
            "FUN_08005dfc",
            "FUN_080003f4",
            "FUN_0800045c",
            "FUN_0800166c",
            "FUN_0800360c",
            "FUN_08005d68",
            "FUN_080035a4",
            "FUN_080041ea",
            "FUN_08004ae0",
            "FUN_080015fc",
            "FUN_08000110",
            "FUN_08003504",
            "FUN_08000c2c",
            "FUN_080009ac",
            "FUN_0800438a",
            "FUN_0800046c",
            "FUN_080009c0",
            "FUN_08003f18",
            "FUN_080097cc",
            "FUN_08000c3c",
            "FUN_08003518",
            "FUN_08005780",
            "FUN_08000fe0",
            "FUN_08008818",
            "FUN_08000418",
            "FUN_080055f4",
            "FUN_080053b0",
            "FUN_080016d0",
            "FUN_0800088a",
            "FUN_08005d14",
            "FUN_080015b4",
            "FUN_080041a8",
            "FUN_08008ad4",
            "FUN_08005674",
            "FUN_08004104",
            "FUN_08000ff4",
            "FUN_08005d0c",
            "FUN_08005e40",
            "FUN_08005d20",
            "FUN_08001a80",
            "FUN_080090a8",
            "FUN_08004e74",
            "FUN_0800910c",
            "FUN_080052a0",
            "FUN_08009120",
            "FUN_08000f58",
            "FUN_08001084",
            "FUN_08005680",
            "FUN_08003260",
            "FUN_08009244",
            "FUN_08004e6c",
            "FUN_08001762",
            "FUN_080040a0",
            "FUN_08009a18",
            "FUN_0800119c",
            "FUN_080090b4",
            "FUN_08000f60",
            "FUN_0800422e",
            "FUN_0800151c",
            "FUN_08000f68",
            "FUN_08009258",
            "FUN_08000c08",
            "FUN_080042de",
            "FUN_08004bd8",
            "FUN_080090c0",
            "FUN_080091e4",
            "FUN_080098c0",
            "FUN_080027f4",
            "FUN_080003d4",
            "FUN_08004d78",
            "FUN_08000c10",
            "FUN_0800491c"
        ],
        [
            "FUN_080014f0"
        ]
    ],
    "locked_functions": []
}