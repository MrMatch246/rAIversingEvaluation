{
    "functions": {
        "FUN_0800071c": {
            "renaming": {
                "FUN_0800071c": "FUNC_0800071c"
            },
            "code": "\nulonglong FUNC_0800071c(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = FUN_0800088a();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_0800083a;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_0800083a:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_0800088a"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800071c",
            "calling": [
                "FUN_08005838",
                "FUN_08004d78",
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "FUNC_0800071c"
        },
        "FUN_080036a8": {
            "renaming": {
                "FUN_080036a8": "set_and_flag_080036a8",
                "param_1": "data",
                "param_2": "flag",
                "*param_1": "*data",
                "DAT_080036f4": "PTR_FLAGGED",
                "(*param_1)[0x11]": "(*data)[17]",
                "0x8000": "FLAGGED_BIT"
            },
            "code": "int set_and_flag_080036a8(uint **data, int flag) {\n  set_bit(data, flag, 1);\n  if (*data == PTR_080036f4) {\n    (*data)[0x11] |= 0x8000;\n  }\n  **data |= 1;\n  return 0;\n}",
            "called": [
                "FUN_080041ea"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036a8",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_and_flag_080036a8"
        },
        "FUN_080088ec": {
            "renaming": {
                "FUN_080088ec": "FUNC_080088ec"
            },
            "code": "\nvoid FUNC_080088ec(undefined4 param_1,int param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  int iVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  undefined *puVar7;\n  undefined *puVar8;\n  undefined *puVar9;\n  uint uVar10;\n  int iVar11;\n  \n  if (param_2 == 0) {\n    return;\n  }\n  FUN_080090a8();\n  puVar8 = PTR_DAT_08008ac4;\n  uVar10 = *(uint *)(param_2 + -4);\n  iVar2 = param_2 + -8;\n  uVar5 = uVar10 & 0xfffffffe;\n  puVar3 = (uint *)(iVar2 + uVar5);\n  uVar6 = puVar3[1] & 0xfffffffc;\n  if (*(uint **)(PTR_DAT_08008ac4 + 8) == puVar3) {\n    uVar5 = uVar5 + uVar6;\n    if ((uVar10 & 1) == 0) {\n      iVar2 = iVar2 - *(int *)(param_2 + -8);\n      iVar11 = *(int *)(iVar2 + 8);\n      iVar1 = *(int *)(iVar2 + 0xc);\n      uVar5 = uVar5 + *(int *)(param_2 + -8);\n      *(int *)(iVar11 + 0xc) = iVar1;\n      *(int *)(iVar1 + 8) = iVar11;\n    }\n    uVar6 = *(uint *)PTR_DAT_08008acc;\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(int *)(puVar8 + 8) = iVar2;\n    if (uVar6 <= uVar5) {\n      FUN_0800884c(param_1,*(undefined4 *)PTR_DAT_08008ad0);\n    }\nLAB_080089f0:\n    FUN_080090b4(param_1);\n    return;\n  }\n  puVar3[1] = uVar6;\n  if ((uVar10 & 1) == 0) {\n    iVar2 = iVar2 - *(int *)(param_2 + -8);\n    puVar9 = *(undefined **)(iVar2 + 8);\n    uVar5 = uVar5 + *(int *)(param_2 + -8);\n    uVar10 = *(uint *)((int)puVar3 + uVar6 + 4) & 1;\n    if (puVar9 == puVar8 + 8) {\n      if (uVar10 == 0) {\n        uVar10 = puVar3[2];\n        uVar4 = puVar3[3];\n        uVar5 = uVar5 + uVar6;\n        *(uint *)(uVar10 + 0xc) = uVar4;\n        *(uint *)(uVar4 + 8) = uVar10;\n        *(uint *)(iVar2 + 4) = uVar5 | 1;\n        *(uint *)(iVar2 + uVar5) = uVar5;\n      }\n      else {\n        *(uint *)(iVar2 + 4) = uVar5 | 1;\n        *puVar3 = uVar5;\n      }\n      goto LAB_080089f0;\n    }\n    iVar11 = *(int *)(iVar2 + 0xc);\n    *(int *)(puVar9 + 0xc) = iVar11;\n    *(undefined **)(iVar11 + 8) = puVar9;\n  }\n  else {\n    uVar10 = *(uint *)((int)puVar3 + uVar6 + 4) & 1;\n  }\n  if (uVar10 == 0) {\n    puVar9 = (undefined *)puVar3[2];\n    uVar5 = uVar5 + uVar6;\n    if (puVar9 == PTR_PTR_DAT_08008ac8) {\n      *(int *)(puVar8 + 0x10) = iVar2;\n      *(int *)(puVar8 + 0x14) = iVar2;\n      *(undefined **)(iVar2 + 8) = puVar9;\n      *(undefined **)(iVar2 + 0xc) = puVar9;\n      *(uint *)(iVar2 + 4) = uVar5 | 1;\n      *(uint *)(iVar2 + uVar5) = uVar5;\n      goto LAB_080089f0;\n    }\n    uVar6 = puVar3[3];\n    *(uint *)(puVar9 + 0xc) = uVar6;\n    *(undefined **)(uVar6 + 8) = puVar9;\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(uint *)(iVar2 + uVar5) = uVar5;\n  }\n  else {\n    *(uint *)(iVar2 + 4) = uVar5 | 1;\n    *(uint *)(iVar2 + uVar5) = uVar5;\n  }\n  if (uVar5 < 0x200) {\n    iVar11 = (uVar5 >> 3) + 1;\n    uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(puVar8 + 4);\n    iVar1 = *(int *)(puVar8 + iVar11 * 8);\n    *(int *)(iVar2 + 8) = iVar1;\n    *(undefined **)(iVar2 + 0xc) = puVar8 + iVar11 * 8 + -8;\n    *(uint *)(puVar8 + 4) = uVar5;\n    *(int *)(puVar8 + iVar11 * 8) = iVar2;\n    *(int *)(iVar1 + 0xc) = iVar2;\n    FUN_080090b4(param_1,iVar2,uVar5,param_4);\n    return;\n  }\n  uVar6 = uVar5 >> 9;\n  if (uVar6 < 5) {\n    iVar11 = ((uVar5 >> 6) + 0x39) * 8;\n    iVar1 = (uVar5 >> 6) + 0x38;\n  }\n  else if (uVar6 < 0x15) {\n    iVar11 = (uVar6 + 0x5c) * 8;\n    iVar1 = uVar6 + 0x5b;\n  }\n  else if (uVar6 < 0x55) {\n    iVar11 = ((uVar5 >> 0xc) + 0x6f) * 8;\n    iVar1 = (uVar5 >> 0xc) + 0x6e;\n  }\n  else if (uVar6 < 0x155) {\n    iVar11 = ((uVar5 >> 0xf) + 0x78) * 8;\n    iVar1 = (uVar5 >> 0xf) + 0x77;\n  }\n  else if (uVar6 < 0x555) {\n    iVar11 = ((uVar5 >> 0x12) + 0x7d) * 8;\n    iVar1 = (uVar5 >> 0x12) + 0x7c;\n  }\n  else {\n    iVar11 = 0x3f8;\n    iVar1 = 0x7e;\n  }\n  puVar9 = *(undefined **)(puVar8 + iVar11);\n  puVar7 = puVar8 + iVar11 + -8;\n  if (puVar7 == puVar9) {\n    puVar9 = (undefined *)(1 << (iVar1 >> 2 & 0xffU) | *(uint *)(puVar8 + 4));\n    *(undefined **)(puVar8 + 4) = puVar9;\n    puVar8 = puVar7;\n  }\n  else {\n    do {\n      puVar8 = puVar9;\n      if ((*(uint *)(puVar9 + 4) & 0xfffffffc) <= uVar5) break;\n      puVar9 = *(undefined **)(puVar9 + 8);\n      puVar8 = puVar7;\n    } while (puVar7 != puVar9);\n    puVar7 = *(undefined **)(puVar8 + 0xc);\n  }\n  *(undefined **)(iVar2 + 8) = puVar8;\n  *(undefined **)(iVar2 + 0xc) = puVar7;\n  *(int *)(puVar7 + 8) = iVar2;\n  *(int *)(puVar8 + 0xc) = iVar2;\n  FUN_080090b4(param_1,iVar2,puVar9,param_4);\n  return;\n}\n\n",
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_0800884c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080088ec",
            "calling": [
                "FUN_08009adc",
                "FUN_08005e9c",
                "FUN_08008af8",
                "FUN_080097cc"
            ],
            "imported": false,
            "current_name": "FUNC_080088ec"
        },
        "FUN_08005224": {
            "renaming": {
                "FUN_08005224": "start_program_08005224",
                "FUN_080014f0": "initialize_input",
                "FUN_080052a0": "initialize_output",
                "FUN_080055f4": "initialize_memory",
                "FUN_08005348": "initialize_graphics",
                "FUN_08005598": "initialize_sound",
                "FUN_08005500": "initialize_network",
                "FUN_080053b0": "initialize_controls",
                "PTR_DAT_0800527c": "function_pointer_1",
                "PTR_FUN_08004ea4_1_08005280": "function_1",
                "PTR_DAT_08005284": "function_pointer_2",
                "PTR_FUN_08004ee8_1_08005288": "function_2",
                "PTR_DAT_0800528c": "function_pointer_3",
                "PTR_FUN_08004f2c_1_08005290": "function_3",
                "FUN_080036a8": "initialize_data",
                "PTR_DAT_08005294": "data_pointer_1",
                "FUN_0800491c": "initialize_data",
                "PTR_DAT_08005298": "data_pointer_2",
                "FUN_0800360c": "initialize_data",
                "PTR_DAT_0800529c": "data_pointer_3",
                "FUN_08004e74": "initialize_mode"
            },
            "code": "void start_program_08005224(void)\n{\n  initialize_input();\n  initialize_output();\n  initialize_memory();\n  initialize_graphics();\n  initialize_sound();\n  initialize_network();\n  initialize_controls();\n  set_function_pointer(PTR_DAT_0800527c, PTR_FUN_08004ea4_1_08005280);\n  set_function_pointer(PTR_DAT_08005284, PTR_FUN_08004ee8_1_08005288);\n  set_function_pointer(PTR_DAT_0800528c, PTR_FUN_08004f2c_1_08005290);\n  initialize_data(PTR_DAT_08005294);\n  initialize_data(PTR_DAT_08005294 + 0xc);\n  initialize_data(PTR_DAT_08005298);\n  initialize_data(PTR_DAT_0800529c);\n  initialize_mode(0);\n  while(true) {\n    // Do nothing\n  }\n}",
            "called": [
                "FUN_08005348",
                "FUN_08005598",
                "FUN_08004e74",
                "FUN_080055f4",
                "FUN_080052a0",
                "FUN_0800360c",
                "FUN_080053b0",
                "FUN_08005500",
                "FUN_080036a8",
                "FUN_080014f0",
                "FUN_0800491c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005224",
            "calling": [
                "FUN_080057e8"
            ],
            "imported": false,
            "current_name": "start_program_08005224"
        },
        "FUN_08003440": {
            "renaming": {
                "FUN_08003440": "calculate_local_variable_08003440",
                "local_1c": "local_variable_1",
                "local_18": "ptr_variable_6",
                "local_14": "local_variable_6",
                "local_10": "local_variable_4",
                "local_c": "local_variable_2",
                "PTR_DAT_080034f0": "ptr_variable_1",
                "DAT_080034f8": "data_variable_1",
                "PTR_DAT_080034f4": "ptr_variable_5",
                "DAT_080034fc": "data_variable_2",
                "local_30": "ptr_variable_5",
                "local_2c": "ptr_variable_1",
                "uStack_28": "ptr_variable_2",
                "uStack_24": "ptr_variable_3",
                "uStack_20": "ptr_variable_4"
            },
            "code": "uint calculate_local_variable_08003440(void)\n{\n  uint local_variable_1 = 0;\n  uint local_variable_2 = 0;\n  uint local_variable_3 = 0;\n  uint local_variable_4 = 0;\n  uint local_variable_5 = 0;\n  uint local_variable_6 = *(uint *)(DAT_080034f8 + 4);\n  undefined4 PTR_DAT_080034f0 = *(undefined4 *)PTR_DAT_080034f0;\n  undefined4 ptr_variable_2 = *(undefined4 *)(PTR_DAT_080034f0 + 4);\n  undefined4 ptr_variable_3 = *(undefined4 *)(PTR_DAT_080034f0 + 8);\n  undefined4 ptr_variable_4 = *(undefined4 *)(PTR_DAT_080034f0 + 0xc);\n  uint16_t PTR_DAT_080034f4 = *(uint16_t *)PTR_DAT_080034f4;\n  undefined4 ptr_variable_6 = 0;\n  if ((local_variable_6 & 0xc) == 4) {\n    local_variable_4 = DAT_080034fc;\n  }\n  else if ((local_variable_6 & 0xc) == 8) {\n    local_variable_3 = (uint)*(byte *)((int)&PTR_DAT_080034f0 + (local_variable_6 >> 0x12 & 0xf));\n    if ((local_variable_6 & 0x10000) == 0) {\n      local_variable_2 = DAT_08003500 * local_variable_3;\n    }\n    else {\n      local_variable_2 = (DAT_080034fc * local_variable_3) / (uint)*(byte *)((int)&PTR_DAT_080034f4 + (*(uint *)(DAT_080034f8 + 4) >> 0x11 & 1));\n    }\n    local_variable_4 = local_variable_2;\n  }\n  else {\n    local_variable_4 = DAT_080034fc;\n  }\n  return local_variable_4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003440",
            "calling": [
                "FUN_08003260"
            ],
            "imported": false,
            "current_name": "calculate_local_variable_08003440"
        },
        "FUN_080035fa": {
            "renaming": {
                "FUN_080035fa": "do_nothing_080035fa"
            },
            "code": "\nvoid do_nothing_080035fa(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fa",
            "calling": [
                "FUN_080035a4"
            ],
            "imported": false,
            "current_name": "do_nothing_080035fa"
        },
        "FUN_08004f2c": {
            "renaming": {
                "FUN_08004f2c": "get_result_08004f2c",
                "uVar1": "result",
                "FUN_080015a0": "calculate"
            },
            "code": "int get_result_08004f2c(void)\n{\n  int result;\n  result = calculate();\n  return result;\n}",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f2c",
            "calling": [],
            "imported": false,
            "current_name": "get_result_08004f2c"
        },
        "FUN_08005348": {
            "renaming": {
                "FUN_08005348": "initialize_data_08005348",
                "iVar1": "result",
                "PTR_DAT_080053a0": "data_pointer",
                "DAT_080053a4": "INITIAL_VALUE_1",
                "DAT_080053a8": "INITIAL_VALUE_2",
                "FUN_08001ab0": "check_data",
                "FUN_08005674": "print_error",
                "PTR_s____src_main_c_080053ac": "MAIN_SOURCE_FILE",
                "0x17a": "ERROR_CODE"
            },
            "code": "void initialize_data_08005348() {\n  int result;\n  PTR_DAT_080053a0->value1 = DAT_080053a4;\n  PTR_DAT_080053a0->value2 = DAT_080053a8;\n  PTR_DAT_080053a0->value3 = 0;\n  PTR_DAT_080053a0->value4 = 0;\n  PTR_DAT_080053a0->value5 = 0x4000;\n  PTR_DAT_080053a0->value6 = 0;\n  PTR_DAT_080053a0->value7 = 0;\n  PTR_DAT_080053a0->value8 = 0;\n  PTR_DAT_080053a0->value9 = 0;\n  result = check_data(PTR_DAT_080053a0);\n  if (result != 0) {\n    print_error(PTR_s____src_main_c_080053ac, ERROR_CODE);\n  }\n  return;\n}",
            "called": [
                "FUN_08001ab0",
                "FUN_08005674"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005348",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_data_08005348"
        },
        "FUN_08004378": {
            "renaming": {
                "FUN_08004378": "do_nothing_08004378"
            },
            "code": "\nvoid do_nothing_08004378(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004378",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08004378"
        },
        "FUN_080046ec": {
            "renaming": {
                "FUN_080046ec": "calculate_values_080046ec",
                "param_1": "param_array",
                "*param_1": "*param_array",
                "lVar1": "first_calculation_result",
                "lVar2": "second_calculation_result",
                "iVar3": "first_fun_result",
                "iVar4": "parameter_1_value",
                "iVar5": "third_fun_result",
                "uVar6": "unused_uint",
                "ptr_1": "ptr_1",
                "ptr_2": "ptr_2",
                "ptr_3": "ptr_3",
                "ptr_4": "ptr_4",
                "ptr_5": "ptr_5",
                "DAT_08004914": "PTR_DAT_08004914",
                "DAT_08004918": "PTR_DAT_08004918"
            },
            "code": "void calculate_values_080046ec(int *param_array)\n{\n  longlong first_calculation_result;\n  longlong second_calculation_result;\n  int parameter_1_value = param_array[1];\n  int parameter_2_value = param_array[2];\n  int parameter_3_value = param_array[3];\n  int parameter_4_value = param_array[4];\n  int parameter_5_value = param_array[5];\n  int parameter_6_value = param_array[6];\n  uint *ptr_1 = (uint *)*param_array;\n  uint *ptr_2 = (uint *)(*param_array + 0xc);\n  uint *ptr_3 = (uint *)(*param_array + 0x10);\n  uint *ptr_4 = (uint *)(*param_array + 0x14);\n  uint *ptr_5 = (uint *)(*param_array + 8);\n  \n  *ptr_3 = parameter_3_value | (*ptr_3 & 0xffffcfff);\n  *ptr_2 = (*ptr_2 & 0xffffe9f3) | parameter_2_value | parameter_4_value | parameter_5_value;\n  *ptr_4 = parameter_6_value | (*ptr_4 & 0xfffffcff);\n  \n  if (*param_array == DAT_08004914) {\n    uint first_fun_result = (uint)FUN_08003540();\n    first_calculation_result = (ulonglong)DAT_08004918 * ((ulonglong)first_fun_result * 0x19 / (ulonglong)(parameter_1_value << 2));\n    int second_fun_result = FUN_08003540((int)first_fun_result, (int)((ulonglong)first_fun_result >> 0x20), (int)first_calculation_result);\n    uint second_fun_result_divided = (uint)(second_fun_result * 0x19) / (uint)(parameter_1_value << 2);\n    uint second_fun_result_multiplied = (uint)((ulonglong)DAT_08004918 * ((ulonglong)FUN_08003540() * 0x19 / (ulonglong)(parameter_1_value << 2)) >> 0x25) * -100;\n    second_calculation_result = (ulonglong)DAT_08004918 * (second_fun_result_divided + second_fun_result_multiplied + 0x32) * 0x10 + 0x32;\n    int third_fun_result = FUN_08003540((int)FUN_08003540(), (int)((ulonglong)FUN_08003540() >> 0x20), (int)second_calculation_result);\n    uint third_fun_result_divided = (uint)(third_fun_result * 0x19) / (uint)(parameter_1_value << 2);\n    uint fourth_fun_result_multiplied = (uint)((ulonglong)DAT_08004918 * ((ulonglong)FUN_08003540() * 0x19 / (ulonglong)(parameter_1_value << 2)) >> 0x25) * -100;\n    uint fourth_fun_result = (uint)(fourth_fun_result_multiplied + third_fun_result_divided + (uint)((ulonglong)first_calculation_result >> 0x25)) & 0xf;\n    uint fifth_fun_result = (uint)((ulonglong)second_calculation_result >> 0x25) & 0xf0;\n    *ptr_5 = fourth_fun_result + fifth_fun_result + (uint)((ulonglong)first_calculation_result >> 0x25) * 0x10;\n  }\n  else {\n    uint first_fun_result = (uint)FUN_08003518();\n    first_calculation_result = (ulonglong)DAT_08004918 * ((ulonglong)first_fun_result * 0x19 / (ulonglong)(parameter_1_value << 2));\n    int second_fun_result = FUN_08003518((int)first_fun_result, (int)((ulonglong)first_fun_result >> 0x20), (int)first_calculation_result);\n    uint second_fun_result_divided = (uint)(second_fun_result * 0x19) / (uint)(parameter_1_value << 2);\n    uint second_fun_result_multiplied = (uint)((ulonglong)DAT_08004918 * ((ulonglong)FUN_08003518() * 0x19 / (ulonglong)(parameter_1_value << 2)) >> 0x25) * -100;\n    second_calculation_result = (ulonglong)DAT_08004918 * (second_fun_result_divided + second_fun_result_multiplied + 0x32) * 0x10 + 0x32;\n    int third_fun_result = FUN_08003518((int)FUN_08003518(), (int)((ulonglong)FUN_08003518() >> 0x20), (int)second_calculation_result);\n    uint third_fun_result_divided = (uint)(third_fun_result * 0x19) / (uint)(parameter_1_value << 2);\n    uint fourth_fun_result_multiplied = (uint)((ulonglong)DAT_08004918 * ((ulonglong)FUN_08003518() * 0x19 / (ulonglong)(parameter_1_value << 2)) >> 0x25) * -100;\n    uint fourth_fun_result = (uint)(fourth_fun_result_multiplied + third_fun_result_divided + (uint)((ulonglong)first_calculation_result >> 0x25)) & 0xf;\n    uint fifth_fun_result = (uint)((ulonglong)second_calculation_result >> 0x25) & 0xf0;\n    *ptr_5 = fourth_fun_result + fifth_fun_result + (uint)((ulonglong)first_calculation_result >> 0x25) * 0x10;\n  }\n}",
            "called": [
                "FUN_08003518",
                "FUN_08003540"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046ec",
            "calling": [
                "FUN_0800438a"
            ],
            "imported": false,
            "current_name": "calculate_values_080046ec"
        },
        "FUN_08005500": {
            "renaming": {
                "FUN_08005500": "initialize_memory_08005500",
                "iVar1": "result",
                "local_20": "page_size",
                "local_1c": "flags",
                "local_18": "size",
                "PTR_DAT_08005590": "memory",
                "PTR_s____src_main_c_08005594": "error_message"
            },
            "code": "void initialize_memory_08005500(void)\n{\n    int result;\n    int page_size = 0x1000;\n    int flags = 0;\n    int size = 36000;\n    int protection = 0x14;\n    void *PTR_DAT_08005590 = PTR_DAT_08005590;\n\n    *(int *)PTR_DAT_08005590 = 0x40000000;\n    *(int *)(PTR_DAT_08005590 + 4) = size;\n    *(int *)(PTR_DAT_08005590 + 8) = flags;\n    *(int *)(PTR_DAT_08005590 + 0xc) = protection;\n    *(int *)(PTR_DAT_08005590 + 0x10) = 0;\n    *(int *)(PTR_DAT_08005590 + 0x18) = 0;\n\n    result = FUN_080035a4(PTR_DAT_08005590);\n    if (result != 0)\n    {\n        FUN_08005674(PTR_s____src_main_c_08005594, 0x1d0);\n    }\n\n    result = FUN_08003a94(PTR_DAT_08005590, &page_size);\n    if (result != 0)\n    {\n        FUN_08005674(PTR_s____src_main_c_08005594, 0x1d5);\n    }\n\n    result = FUN_080042de(PTR_DAT_08005590, &flags);\n    if (result != 0)\n    {\n        FUN_08005674(PTR_s____src_main_c_08005594, 0x1dc);\n    }\n}\n",
            "called": [
                "FUN_08003a94",
                "FUN_080042de",
                "FUN_08005674",
                "FUN_080035a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005500",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_memory_08005500"
        },
        "FUN_08002c2e": {
            "renaming": {
                "FUN_08002c2e": "check_for_flagged_08002c2e",
                "param_1": "ptr_param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "result",
                "FUN_08002d3c": "get_next_value",
                "FUN_080015a0": "get_current_position"
            },
            "code": "int check_for_flagged_08002c2e(int *ptr_param1, uint param2, int param3) {\n  int iVar1;\n  while (true) {\n    if ((*(uint *)(*ptr_param1 + 0x14) & 4) == 4) {\n      return 0;\n    }\n    iVar1 = get_next_value(ptr_param1);\n    if (iVar1 != 0) break;\n    if ((param2 != 0xffffffff) && ((param2 == 0 || (iVar1 = get_current_position(), param2 < (uint)(iVar1 - param3))))) {\n      ptr_param1[0x10] = ptr_param1[0x10] | 0x20;\n      ptr_param1[0xc] = 0;\n      *(undefined *)((int)ptr_param1 + 0x3d) = 0x20;\n      *(undefined *)(ptr_param1 + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c2e",
            "calling": [
                "FUN_08001ccc"
            ],
            "imported": false,
            "current_name": "check_for_flagged_08002c2e"
        },
        "FUN_08003568": {
            "renaming": {
                "FUN_08003568": "calculate_and_decrement_08003568",
                "param_1": "input_num",
                "local_c": "result",
                "bVar1": "boolean_check",
                "DAT_080035a0": "constant_value",
                "PTR_DAT_0800359c": "pointer_to_data"
            },
            "code": "void calculate_and_decrement_08003568(int input_num) {\n  int result = input_num * ((unsigned long long)DAT_080035a0 * (unsigned long long)*PTR_DAT_0800359c >> 0x29);\n  while (result != 0) {\n    result--;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003568",
            "calling": [
                "FUN_08002d98"
            ],
            "imported": false,
            "current_name": "calculate_and_decrement_08003568"
        },
        "FUN_080049cc": {
            "renaming": {
                "FUN_080049cc": "calculate_results_080049cc",
                "param_1": "input",
                "local_20": "num_iterations",
                "local_c": "sum1",
                "local_10": "sum2",
                "local_14": "sum3",
                "local_18": "sum4",
                "local_28": "var1",
                "local_2c": "var2",
                "FUN_08004ae0": "calculate",
                "FUN_08004d78": "calculate_sums",
                "PTR_DAT_08004adc": "func_result_pointer",
                "FUNC_08000aa8": "add",
                "FUNC_08000c10": "divide",
                "FUNC_08000e20": "divide_and_multiply"
            },
            "code": "void calculate_results_080049cc(int input)\n{\n  int num_iterations = 1;\n  int sum1 = 0;\n  int sum2 = 0;\n  int sum3 = 0;\n  int sum4 = 0;\n  int temp1 = 0;\n  int temp2 = 0;\n  int temp3 = 0;\n  int temp4 = 0;\n  int func_result = (**(code **)PTR_DAT_08004adc)();\n  int i = 0;\n  while (i < num_iterations) {\n    int var1 = 0;\n    int var2 = 0;\n    calculate(param_1);\n    calculate_sums(param_1, &var1, &var2);\n    sum3 = FUNC_08000aa8(sum3, var1);\n    sum4 = FUNC_08000aa8(sum4, var2);\n    sum1 = FUNC_08000aa8(sum1, *(int *)(input + 0x10));\n    sum2 = FUNC_08000aa8(sum2, *(int *)(input + 0x14));\n    func_result = (**(code **)PTR_DAT_08004adc)();\n    i++;\n  }\n  int divisor = FUNC_08000c10(num_iterations);\n  int result1 = FUNC_08000e20(sum1, divisor);\n  int result2 = FUNC_08000e20(sum2, divisor);\n  int result3 = FUNC_08000e20(sum3, divisor);\n  int result4 = FUNC_08000e20(sum4, divisor);\n  *(int *)(input + 0x1c) = result1;\n  *(int *)(input + 0x20) = result2;\n  *(int *)(input + 0x24) = result3;\n  *(int *)(input + 0x28) = result4;\n}",
            "called": [
                "FUN_08004ae0",
                "FUN_08000e20",
                "FUN_08000aa8",
                "FUN_08004d78",
                "FUN_08000c10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049cc",
            "calling": [
                "FUN_0800491c"
            ],
            "imported": false,
            "current_name": "calculate_results_080049cc"
        },
        "FUN_08003c94": {
            "renaming": {
                "FUN_08003c94": "decode_and_update_settings_08003c94",
                "param_1": "settings",
                "param_2": "encoded_settings",
                "local_c": "current_setting",
                "DAT_08003d54": "ptr_08003d54",
                "(uint *)0x40000000": "(uint *)0x40000000",
                "DAT_08003d58": "ptr_08003d58",
                "DAT_08003d5c": "ptr_08003d5c"
            },
            "code": "void decode_and_update_settings_08003c94(uint *settings, uint *encoded_settings)\n{\n  uint current_setting;\n  current_setting = *settings;\n  if ((((settings == DAT_08003d54) || (settings == (uint *)0x40000000)) || (settings == DAT_08003d58)) || (settings == DAT_08003d5c)) {\n    current_setting = encoded_settings[1] | current_setting & 0xffffff8f;\n  }\n  if (((settings == DAT_08003d54) || (settings == (uint *)0x40000000)) || ((settings == DAT_08003d58 || (settings == DAT_08003d5c)))) {\n    current_setting = encoded_settings[3] | current_setting & 0xfffffcff;\n  }\n  *settings = encoded_settings[5] | current_setting & 0xffffff7f;\n  settings[0xb] = encoded_settings[2];\n  settings[10] = *encoded_settings;\n  if (settings == DAT_08003d54) {\n    settings[0xc] = encoded_settings[4];\n  }\n  settings[5] = 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c94",
            "calling": [
                "FUN_08003640",
                "FUN_080035a4"
            ],
            "imported": false,
            "current_name": "decode_and_update_settings_08003c94"
        },
        "FUN_08000978": {
            "renaming": {
                "FUN_08000978": "execute_function_with_swapped_args_08000978",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "FUN_08000988": "execute_function"
            },
            "code": "void execute_function_with_swapped_args_08000978(void* arg1, void* arg2, void* arg3, void* arg4)\n{\n  execute_function(arg3, arg4, arg1, arg2);\n  return;\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000978",
            "calling": [
                "FUN_080009d4",
                "FUN_080009e8"
            ],
            "imported": false,
            "current_name": "execute_function_with_swapped_args_08000978"
        },
        "FUN_0800884c": {
            "renaming": {
                "FUN_0800884c": "allocate_memory_block_0800884c",
                "param_1": "heap_start_address",
                "param_2": "requested_block_size",
                "puVar1": "heap_end_address",
                "puVar2": "block_end_address",
                "iVar3": "result",
                "iVar4": "block_start_address",
                "uVar5": "block_size"
            },
            "code": "int allocate_memory_block_0800884c(void* heap_start_address, int requested_block_size){\n    void* heap_end_address;\n    void* block_start_address;\n    void* block_end_address;\n    int block_size;\n    \n    heap_end_address = PTR_DAT_080088e0;\n    initialize_heap();\n    block_size = (*(uint *)(*(int *)(heap_end_address + 8) + 4) & 0xfffffffc);\n    block_start_address = ((0xfef - requested_block_size) + block_size & 0xfffff000) - 0x1000;\n    if (0xfff < block_start_address) {\n        if (FUN_08009744(heap_start_address, 0) == *(int *)(heap_end_address + 8) + block_size) {\n            if (FUN_08009744(heap_start_address, -block_start_address) != -1) {\n                *(uint *)(*(int *)(heap_end_address + 8) + 4) = block_size - block_start_address | 1;\n                *(int *)PTR_DAT_080088e4 = *(int *)PTR_DAT_080088e8 - block_start_address;\n                finalize_heap(heap_start_address);\n                return 1;\n            }\n            block_start_address = FUN_08009744(heap_start_address, 0);\n            block_size = *(int *)(heap_end_address + 8) - block_start_address;\n            if (0xf < block_size) {\n                *(uint *)(*(int *)(heap_end_address + 8) + 4) = block_size | 1;\n                *(int *)PTR_DAT_080088e4 = *(int *)PTR_DAT_080088e8 - block_start_address;\n            }\n        }\n    }\n    finalize_heap(heap_start_address);\n    return 0;\n}",
            "called": [
                "FUN_08009744",
                "FUN_080090a8",
                "FUN_080090b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800884c",
            "calling": [
                "FUN_080088ec"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_0800884c"
        },
        "FUN_0800901c": {
            "renaming": {
                "FUN_0800901c": "find_byte_in_buffer_0800901c",
                "param_1": "buffer",
                "param_2": "buffer_size",
                "param_3": "byte_to_find",
                "puVar1": "buffer_ptr",
                "uVar2": "byte_to_find_masked",
                "uVar3": "buffer_value",
                "puVar4": "buffer_end_ptr",
                "uVar5": "buffer_size_remaining",
                "bVar6": "is_buffer_end",
                "LAB_0800904a": "buffer_aligned",
                "LAB_08009050": "byte_found"
            },
            "code": "uint* find_byte_in_buffer_0800901c(uint* buffer, uint buffer_size, uint* byte_to_find) {\n    uint* buffer_ptr;\n    uint byte_to_find_masked;\n    uint* buffer_end_ptr;\n    uint buffer_size_remaining;\n    bool is_buffer_aligned = ((uint)buffer & 3) == 0;\n\n    if (is_buffer_aligned) {\n        goto LAB_0800904a;\n    }\n    else {\n        buffer_end_ptr = byte_to_find - 1;\n        if (byte_to_find == (uint*)0x0) {\n            buffer_ptr = (uint*)0x0;\n        }\n        else if (*(byte*)buffer != (buffer_size & 0xff)) {\n            buffer_ptr = buffer + 1;\n            do {\n                buffer_ptr = buffer_ptr;\n                buffer_size_remaining = buffer_end_ptr;\n                if (((uint)buffer_ptr & 3) == 0) {\n                    goto LAB_0800904a;\n                }\n                bool is_buffer_end = buffer_end_ptr == (uint*)0x0;\n                buffer_end_ptr = buffer_end_ptr - 1;\n                if (is_buffer_end) {\n                    buffer_ptr = (uint*)0x0;\n                    break;\n                }\n                buffer_ptr = buffer_ptr + 1;\n            } while (*(byte*)buffer_ptr != (buffer_size & 0xff));\n        }\n    }\n\n    return buffer_ptr;\n\nLAB_0800904a:\n    buffer_size_remaining = byte_to_find & 0xff;\n    buffer_ptr = buffer;\n    if ((uint*)0x3 < byte_to_find) {\n        byte_to_find_masked = (buffer_size & 0xff) << 8 | buffer_size_remaining;\n        do {\n            uint buffer_value = *buffer_ptr;\n            uint xored_value = buffer_value ^ (byte_to_find_masked | byte_to_find_masked << 0x10);\n            buffer_ptr = buffer_ptr + 1;\n            if ((xored_value + 0xfefefeff & ~xored_value & 0x80808080) != 0) {\n                goto LAB_08009050;\n            }\n            buffer_size_remaining = buffer_size_remaining - 1;\n            buffer_end_ptr = buffer_size_remaining;\n        } while ((uint*)0x3 < buffer_size_remaining);\n    }\n\n    buffer_end_ptr = buffer_ptr;\n    buffer_size_remaining = buffer_end_ptr;\n    if (buffer_end_ptr != (uint*)0x0) {\nLAB_08009050:\n        buffer_ptr = buffer_end_ptr;\n        if (*(byte*)buffer_ptr != (buffer_size & 0xff)) {\n            buffer_size_remaining = buffer_size_remaining + (int)buffer_ptr;\n            do {\n                buffer_ptr = buffer_ptr + 1;\n                if (buffer_size_remaining == buffer_ptr) {\n                    break;\n                }\n            } while (*(byte*)buffer_ptr != (buffer_size & 0xff));\n        }\n    }\n\n    return buffer_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800901c",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "find_byte_in_buffer_0800901c"
        },
        "FUN_0800177c": {
            "renaming": {
                "FUN_0800177c": "set_flag_if_param_is_four_0800177c",
                "param_1": "param",
                "DAT_080017b0": "flag_ptr"
            },
            "code": "void set_flag_if_param_is_four_0800177c(int param) {\n\tif (param == 4) {\n\t\t*DAT_080017b0 = *DAT_080017b0 | 4;\n\t} else {\n\t\t*DAT_080017b0 = *DAT_080017b0 & 0xfffffffb;\n\t}\n\treturn;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800177c",
            "calling": [
                "FUN_080052a0"
            ],
            "imported": false,
            "current_name": "set_flag_if_param_is_four_0800177c"
        },
        "FUN_080017b4": {
            "renaming": {
                "FUN_080017b4": "print_hello_world_080017b4",
                "FUN_08004f78": "print_message"
            },
            "code": "void print_hello_world_080017b4(void)\n{\n  print_message(0);\n  return;\n}",
            "called": [
                "FUN_08004f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080017b4",
            "calling": [
                "FUN_08005704"
            ],
            "imported": false,
            "current_name": "print_hello_world_080017b4"
        },
        "FUN_08005598": {
            "renaming": {
                "FUN_08005598": "initialize_data_buffer_08005598",
                "PTR_DAT_080055e8": "data_buffer_ptr",
                "DAT_080055ec": "data_buffer_start"
            },
            "code": "void initialize_data_buffer_08005598() {\n  int result;\n  *PTR_DAT_080055e8 = DAT_080055ec;\n  *(PTR_DAT_080055e8 + 1) = 0x1c200;\n  *(PTR_DAT_080055e8 + 2) = 0;\n  *(PTR_DAT_080055e8 + 3) = 0;\n  *(PTR_DAT_080055e8 + 4) = 0;\n  *(PTR_DAT_080055e8 + 5) = 0xc;\n  *(PTR_DAT_080055e8 + 6) = 0;\n  *(PTR_DAT_080055e8 + 7) = 0;\n  result = FUN_0800438a(PTR_DAT_080055e8);\n  if (result != 0) {\n    FUN_08005674(\"s____src_main_c_080055f0\", 0x1ed);\n  }\n}\n",
            "called": [
                "FUN_0800438a",
                "FUN_08005674"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005598",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_data_buffer_08005598"
        },
        "FUN_08001030": {
            "renaming": {
                "FUN_08001030": "is_end_of_input_08001030",
                "in_CY": "input_char",
                "FUN_08000fc8": "read_input"
            },
            "code": "bool is_end_of_input_08001030(void)\n{\n  char input_char;\n  read_input();\n  return input_char == '\\0';\n}\n",
            "called": [
                "FUN_08000fc8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001030",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "is_end_of_input_08001030"
        },
        "FUN_080011ec": {
            "renaming": {
                "FUN_080011ec": "calculate_result_080011ec",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result",
                "FUNC_0800121c": "calculate_complex_result"
            },
            "code": "typedef unsigned long long uint64_t;\n\nuint64_t calculate_result_080011ec(uint64_t input_1, uint64_t input_2, uint64_t input_3, uint64_t input_4)\n{\n    uint64_t result;\n\n    if ((input_4 == 0) && (input_3 == 0)) {\n        if (input_2 != 0 || input_1 != 0) {\n            input_2 = -1;\n            input_1 = -1;\n        }\n        result = ((uint64_t)input_2 << 32) | input_1;\n    }\n    else {\n        result = calculate_complex_result();\n    }\n\n    return result;\n}\n",
            "called": [
                "FUN_0800121c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011ec",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "calculate_result_080011ec"
        },
        "FUN_08004424": {
            "renaming": {
                "FUN_08004424": "do_nothing_08004424"
            },
            "code": "\nvoid do_nothing_08004424(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004424",
            "calling": [
                "FUN_0800438a"
            ],
            "imported": false,
            "current_name": "do_nothing_08004424"
        },
        "FUN_08004f3c": {
            "renaming": {
                "FUN_08004f3c": "send_data_to_server_08004f3c",
                "param_1": "data",
                "param_2": "length",
                "PTR_DAT_08004f5c": "PTR_SERVER_ADDRESS"
            },
            "code": "void send_data_to_server_08004f3c(char* data, uint16_t length)\n{\n    send_data(PTR_DAT_08004f5c, data, length, 0x32);\n    return;\n}",
            "called": [
                "FUN_08004436"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "send_data_to_server_08004f3c"
        },
        "FUN_08009adc": {
            "renaming": {
                "FUN_08009adc": "FUNC_08009adc"
            },
            "code": "\nint * FUNC_08009adc(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  undefined *puVar1;\n  int *piVar2;\n  int iVar3;\n  int *piVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  int *piVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  int iVar12;\n  \n  if (param_2 == (int *)0x0) {\n    piVar4 = (int *)FUNC_08008af8(param_1,param_3);\n    return piVar4;\n  }\n  FUN_080090a8();\n  puVar1 = PTR_DAT_08009e38;\n  uVar7 = param_2[-1];\n  uVar10 = uVar7 & 0xfffffffc;\n  piVar4 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar9 = 0x10;\n  }\n  else {\n    uVar9 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar9 < 0) goto LAB_08009b8e;\n  }\n  if (uVar9 < param_3) {\nLAB_08009b8e:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  iVar12 = (int)piVar4 + uVar10;\n  uVar11 = uVar10;\n  if ((int)uVar10 < (int)uVar9) {\n    if (*(int *)(PTR_DAT_08009e38 + 8) == iVar12) {\n      iVar12 = (*(uint *)(*(int *)(PTR_DAT_08009e38 + 8) + 4) & 0xfffffffc) + uVar10;\n      if ((int)(uVar9 + 0x10) <= iVar12) {\n        *(uint *)(PTR_DAT_08009e38 + 8) = (int)piVar4 + uVar9;\n        *(uint *)((int)piVar4 + uVar9 + 4) = iVar12 - uVar9 | 1;\n        param_2[-1] = uVar9 | param_2[-1] & 1U;\n        FUN_080090b4(param_1);\n        return param_2;\n      }\n      if (-1 < (int)(uVar7 << 0x1f)) {\n        piVar2 = (int *)((int)piVar4 - param_2[-2]);\n        uVar7 = piVar2[1] & 0xfffffffc;\n        if ((int)(uVar9 + 0x10) <= (int)(iVar12 + uVar7)) {\n          iVar6 = piVar2[3];\n          piVar4 = piVar2 + 2;\n          iVar3 = *piVar4;\n          uVar10 = uVar10 - 4;\n          *(int *)(iVar3 + 0xc) = iVar6;\n          *(int *)(iVar6 + 8) = iVar3;\n          if (uVar10 < 0x25) {\n            iVar3 = *param_2;\n            piVar8 = piVar4;\n            if (0x13 < uVar10) {\n              piVar2[2] = iVar3;\n              piVar2[3] = param_2[1];\n              iVar3 = param_2[2];\n              if (uVar10 < 0x1c) {\n                param_2 = param_2 + 2;\n                piVar8 = piVar2 + 4;\n              }\n              else {\n                piVar2[4] = iVar3;\n                piVar2[5] = param_2[3];\n                iVar3 = param_2[4];\n                if (uVar10 == 0x24) {\n                  piVar2[6] = iVar3;\n                  piVar2[7] = param_2[5];\n                  iVar3 = param_2[6];\n                  param_2 = param_2 + 6;\n                  piVar8 = piVar2 + 8;\n                }\n                else {\n                  param_2 = param_2 + 4;\n                  piVar8 = piVar2 + 6;\n                }\n              }\n            }\n            *piVar8 = iVar3;\n            piVar8[1] = param_2[1];\n            piVar8[2] = param_2[2];\n          }\n          else {\n            FUN_08009a18(piVar4,param_2);\n          }\n          *(uint *)(puVar1 + 8) = (int)piVar2 + uVar9;\n          *(uint *)((int)piVar2 + uVar9 + 4) = (iVar12 + uVar7) - uVar9 | 1;\n          piVar2[1] = uVar9 | piVar2[1] & 1U;\n          FUN_080090b4(param_1);\n          return piVar4;\n        }\nLAB_08009bb0:\n        uVar11 = uVar10 + uVar7;\n        if ((int)uVar9 <= (int)uVar11) {\n          iVar6 = piVar2[3];\n          piVar8 = piVar2 + 2;\n          iVar3 = *piVar8;\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar12 = (int)piVar2 + uVar11;\n          *(int *)(iVar6 + 8) = iVar3;\n          piVar4 = piVar2;\n          if (uVar10 - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          FUN_08009a18(piVar8,param_2);\n          param_2 = piVar8;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(iVar12 + 4) & 0xfffffffe) + iVar12 + 4) << 0x1f) {\n        uVar5 = *(uint *)(iVar12 + 4) & 0xfffffffc;\n        uVar11 = uVar10 + uVar5;\n        if ((int)uVar11 < (int)uVar9) {\n          if ((int)(uVar7 << 0x1f) < 0) goto LAB_08009b36;\n          piVar2 = (int *)((int)piVar4 - param_2[-2]);\n          uVar7 = piVar2[1] & 0xfffffffc;\n          uVar11 = uVar5 + uVar7 + uVar10;\n          if ((int)uVar11 < (int)uVar9) goto LAB_08009bb0;\n          iVar3 = *(int *)(iVar12 + 8);\n          iVar12 = *(int *)(iVar12 + 0xc);\n          *(int *)(iVar3 + 0xc) = iVar12;\n          *(int *)(iVar12 + 8) = iVar3;\n          piVar8 = piVar2 + 2;\n          iVar3 = *piVar8;\n          iVar6 = piVar2[3];\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar12 = (int)piVar2 + uVar11;\n          *(int *)(iVar6 + 8) = iVar3;\n          piVar4 = piVar2;\n          if (0x24 < uVar10 - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          uVar10 = uVar10 - 4;\n          iVar3 = *param_2;\n          piVar2 = piVar8;\n          if (0x13 < uVar10) {\n            piVar4[2] = iVar3;\n            piVar4[3] = param_2[1];\n            iVar3 = param_2[2];\n            if (uVar10 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar4 + 4;\n            }\n            else {\n              piVar4[4] = iVar3;\n              piVar4[5] = param_2[3];\n              iVar3 = param_2[4];\n              if (uVar10 == 0x24) {\n                piVar4[6] = iVar3;\n                piVar4[7] = param_2[5];\n                iVar3 = param_2[6];\n                param_2 = param_2 + 6;\n                piVar2 = piVar4 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar4 + 6;\n              }\n            }\n          }\n          *piVar2 = iVar3;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          param_2 = piVar8;\n        }\n        else {\n          iVar3 = *(int *)(iVar12 + 8);\n          iVar6 = *(int *)(iVar12 + 0xc);\n          *(int *)(iVar3 + 0xc) = iVar6;\n          iVar12 = (int)piVar4 + uVar11;\n          *(int *)(iVar6 + 8) = iVar3;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(uVar7 << 0x1f)) {\n        piVar2 = (int *)((int)piVar4 - param_2[-2]);\n        uVar7 = piVar2[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    piVar2 = (int *)FUNC_08008af8(param_1,param_3);\n    if (piVar2 != (int *)0x0) {\n      if ((int *)((param_2[-1] & 0xfffffffeU) + (int)piVar4) == piVar2 + -2) {\n        uVar11 = uVar10 + (piVar2[-1] & 0xfffffffcU);\n        iVar12 = (int)piVar4 + uVar11;\n        goto LAB_08009c00;\n      }\n      uVar10 = uVar10 - 4;\n      if (uVar10 < 0x25) {\n        iVar12 = *param_2;\n        piVar4 = param_2;\n        piVar8 = piVar2;\n        if (0x13 < uVar10) {\n          *piVar2 = iVar12;\n          piVar2[1] = param_2[1];\n          if (uVar10 < 0x1c) {\n            iVar12 = param_2[2];\n            piVar4 = param_2 + 2;\n            piVar8 = piVar2 + 2;\n          }\n          else {\n            piVar2[2] = param_2[2];\n            piVar2[3] = param_2[3];\n            if (uVar10 == 0x24) {\n              piVar2[4] = param_2[4];\n              piVar2[5] = param_2[5];\n              iVar12 = param_2[6];\n              piVar4 = param_2 + 6;\n              piVar8 = piVar2 + 6;\n            }\n            else {\n              iVar12 = param_2[4];\n              piVar4 = param_2 + 4;\n              piVar8 = piVar2 + 4;\n            }\n          }\n        }\n        *piVar8 = iVar12;\n        piVar8[1] = piVar4[1];\n        piVar8[2] = piVar4[2];\n      }\n      else {\n        FUN_08009a18(piVar2,param_2);\n      }\n      FUNC_080088ec(param_1,param_2);\n    }\n    FUN_080090b4(param_1);\n    param_2 = piVar2;\n  }\n  else {\nLAB_08009c00:\n    if (uVar11 - uVar9 < 0x10) {\n      piVar4[1] = piVar4[1] & 1U | uVar11;\n      *(uint *)(iVar12 + 4) = *(uint *)(iVar12 + 4) | 1;\n    }\n    else {\n      piVar4[1] = piVar4[1] & 1U | uVar9;\n      *(uint *)((int)piVar4 + uVar9 + 4) = uVar11 - uVar9 | 1;\n      *(uint *)(iVar12 + 4) = *(uint *)(iVar12 + 4) | 1;\n      FUNC_080088ec(param_1,(int)piVar4 + uVar9 + 8);\n    }\n    FUN_080090b4(param_1);\n  }\n  return param_2;\n}\n\n",
            "called": [
                "FUN_08009a18",
                "FUN_080088ec",
                "FUN_08008af8",
                "FUN_080090a8",
                "FUN_080090b4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009adc",
            "calling": [
                "FUN_080097cc"
            ],
            "imported": false,
            "current_name": "FUNC_08009adc"
        },
        "FUN_08003696": {
            "renaming": {
                "FUN_08003696": "do_nothing_08003696"
            },
            "code": "\nvoid do_nothing_08003696(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003696",
            "calling": [
                "FUN_08003640"
            ],
            "imported": false,
            "current_name": "do_nothing_08003696"
        },
        "FUN_08002640": {
            "renaming": {
                "FUN_08002640": "update_data_08002640",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "value1",
                "param_4": "value2",
                "param_5": "limit",
                "param_6": "offset",
                "iVar1": "result"
            },
            "code": "uint32_t update_data_08002640(uint32_t **data, uint8_t flag, uint16_t value1, uint16_t value2, uint32_t limit, int offset)\\n\\\n    {\\n\\\n        uint32_t result = 3;\\n\\\n        **data = **data | 0x100;\\n\\\n        do {\\n\\\n            if (~(*data)[5] & 1) {\\n\\\n                result = 0;\\n\\\n                break;\\n\\\n            }\\n\\\n        } while ((limit == 0xffffffff) || ((limit != 0 && (offset - FUN_080015a0()) <= limit)));\\n\\\n        data[12] = NULL;\\n\\\n        data[0xf] = NULL;\\n\\\n        *(uint8_t *)((int)data + 0x3d) = 0x20;\\n\\\n        *(uint8_t *)((int)data + 0x3e) = 0;\\n\\\n        if (result == 0) {\\n\\\n            (*data)[4] = flag & 0xfe;\\n\\\n            result = FUN_08002ad8(data, DAT_080027f0, limit, offset);\\n\\\n            if (result == 0) {\\n\\\n                result = FUN_08002bb4(data, limit, offset, (*data)[6]);\\n\\\n                if (result == 0) {\\n\\\n                    if (value2 == 1) {\\n\\\n                        (*data)[4] = (uint32_t)(uint8_t)value1;\\n\\\n                    } else {\\n\\\n                        (*data)[4] = (uint32_t)(uint8_t)(value1 >> 8);\\n\\\n                        result = FUN_08002bb4(data, limit, offset);\\n\\\n                        if (result != 0) {\\n\\\n                            if (data[0x10] == (uint32_t *)0x4) {\\n\\\n                                **data = **data | 0x200;\\n\\\n                                result = 1;\\n\\\n                            } else {\\n\\\n                                result = 3;\\n\\\n                            }\\n\\\n                        } else {\\n\\\n                            (*data)[4] = (uint32_t)(uint8_t)value1;\\n\\\n                            result = 0;\\n\\\n                        }\\n\\\n                    }\\n\\\n                } else if (data[0x10] == (uint32_t *)0x4) {\\n\\\n                    **data = **data | 0x200;\\n\\\n                    result = 1;\\n\\\n                } else {\\n\\\n                    result = 3;\\n\\\n                }\\n\\\n            } else if (data[0x10] == (uint32_t *)0x4) {\\n\\\n                result = 1;\\n\\\n            } else {\\n\\\n                result = 3;\\n\\\n            }\\n\\\n        }\\n\\\n        return result;\\n\\\n    }",
            "called": [
                "FUN_080015a0",
                "FUN_08002ad8",
                "FUN_08002bb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002640",
            "calling": [
                "FUN_08001ccc"
            ],
            "imported": false,
            "current_name": "update_data_08002640"
        },
        "FUN_080008fc": {
            "renaming": {
                "FUN_080008fc": "check_parameters_080008fc",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "xor_result",
                "bVar2": "is_first_or_third_zero",
                "bVar3": "is_fourth_param_greater_than_second"
            },
            "code": "uint check_parameters_080008fc(uint first_param, uint second_param, uint third_param, uint fourth_param)\n{\n  uint result;\n  bool is_first_or_third_zero = (first_param | second_param << 1) == 0;\n  bool is_second_or_fourth_zero = (third_param | fourth_param << 1) == 0;\n  if (((int)(second_param << 1) >> 0x15 == -1 || (int)(fourth_param << 1) >> 0x15 == -1) &&\n     ((((int)(second_param << 1) >> 0x15 == -1 && !is_first_or_third_zero) ||\n      (((int)(fourth_param << 1) >> 0x15 == -1 && !is_second_or_fourth_zero)))))) {\n    return 1;\n  }\n  bool are_second_and_fourth_equal = second_param == fourth_param;\n  bool are_first_and_third_equal = first_param == third_param;\n  if (!is_first_or_third_zero && !is_second_or_fourth_zero && !are_second_and_fourth_equal && !are_first_and_third_equal) {\n    uint xor_result = second_param ^ fourth_param;\n    bool is_xor_result_zero = xor_result == 0;\n    if (-1 < (int)xor_result) {\n      is_xor_result_zero = are_second_and_fourth_equal;\n    }\n    bool is_fourth_param_greater_than_second = -1 < (int)xor_result && fourth_param <= second_param;\n    if (is_xor_result_zero) {\n      is_fourth_param_greater_than_second = third_param <= first_param;\n    }\n    result = (int)fourth_param >> 0x1f;\n    if (!is_fourth_param_greater_than_second) {\n      result = ~result;\n    }\n    return result | 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008fc",
            "calling": [
                "FUN_08000988"
            ],
            "imported": false,
            "current_name": "check_parameters_080008fc"
        },
        "FUN_08000988": {
            "renaming": {
                "FUN_08000988": "execute_function_08000988",
                "param_1": "arg1",
                "FUN_080008fc": "initialize"
            },
            "code": "undefined4 execute_function_08000988(undefined4 arg1)\n{\n  initialize();\n  return arg1;\n}",
            "called": [
                "FUN_080008fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000988",
            "calling": [
                "FUN_08000998",
                "FUN_08000978",
                "FUN_080009ac",
                "FUN_080009c0"
            ],
            "imported": false,
            "current_name": "execute_function_08000988"
        },
        "FUN_08001714": {
            "renaming": {
                "FUN_08001714": "execute_function_08001714",
                "param_1": "function_argument",
                "FUN_080015b4": "call_another_function"
            },
            "code": "void execute_function_08001714(void *function_argument)\n{\n  call_another_function(function_argument);\n  return;\n}",
            "called": [
                "FUN_080015b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001714",
            "calling": [
                "FUN_080014f0"
            ],
            "imported": false,
            "current_name": "execute_function_08001714"
        },
        "FUN_08005dfc": {
            "renaming": {
                "FUN_08005dfc": "process_data_08005dfc",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "arg_1",
                "param_4": "arg_2",
                "local_80": "buffer",
                "local_78": "max_size",
                "uStack_74": "max_size_2",
                "local_70": "ptr",
                "local_6c": "max_size",
                "uStack_8": "arg_3",
                "uStack_4": "arg_4"
            },
            "code": "void process_data_08005dfc(void *data, int data_size, int arg_1, int arg_2)\n{\n    void *buffer[2];\n    int max_size = INT_MAX;\n    int max_size_2 = INT_MAX;\n    int data_3 = DAT_08005e3c;\n    buffer[0] = data;\n    void *ptr = data;\n    int arg_3 = arg_1;\n    int arg_4 = arg_2;\n    FUNC_08005e9c(*(int *)PTR_PTR_DAT_08005e38, buffer, data_size, &arg_3);\n    *buffer[0] = 0;\n    return;\n}",
            "called": [
                "FUN_08005e9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005dfc",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "process_data_08005dfc"
        },
        "FUN_080078c0": {
            "renaming": {
                "FUN_080078c0": "divide_and_update_080078c0",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "puVar2": "dividend_ptr",
                "iVar3": "carry",
                "iVar4": "dividend_length",
                "iVar5": "divisor_length",
                "uVar6": "quotient",
                "puVar7": "divisor_ptr",
                "puVar8": "dividend_ptr",
                "puVar9": "divisor_end_ptr",
                "uVar10": "carry",
                "puVar11": "dividend_ptr",
                "puVar12": "dividend_ptr",
                "product": "product",
                "dividend_word": "dividend_word",
                "divisor_word": "divisor_word",
                "remainder": "remainder"
            },
            "code": "uint divide_and_update_080078c0(uint dividend, uint divisor) {\n  uint quotient;\n  uint *divisor_ptr;\n  int dividend_length;\n  int divisor_length;\n  uint *dividend_ptr;\n  uint *dividend_end_ptr;\n  uint *divisor_end_ptr;\n  uint carry;\n  uint dividend_word;\n  uint product;\n  uint divisor_word;\n  uint remainder;\n  dividend_length = *(int *)(dividend + 0x10);\n  divisor_length = *(int *)(divisor + 0x10);\n  if (dividend_length < divisor_length) {\n    return 0;\n  }\n  divisor_end_ptr = (uint *)(divisor + 0x14) + divisor_length - 1;\n  dividend_end_ptr = (uint *)(dividend + 0x14) + divisor_length - 1;\n  quotient = dividend_end_ptr[0] / (divisor_end_ptr[0] + 1);\n  if (quotient != 0) {\n    carry = 0;\n    dividend_ptr = (uint *)(dividend + 0x14);\n    divisor_ptr = (uint *)(divisor + 0x14);\n    do {\n      dividend_word = *dividend_ptr & 0xffff;\n      product = quotient * dividend_word + carry;\n      divisor_word = *divisor_ptr & 0xffff;\n      remainder = dividend_word - (product & 0xffff) + *dividend_ptr;\n      carry = (*divisor_ptr >> 0x10) * quotient + (product >> 0x10) - (*dividend_ptr >> 0x10) + (remainder >> 0x10);\n      *dividend_ptr = remainder & 0xffff | carry << 0x10;\n      carry >>= 0x10;\n      dividend_ptr++;\n      divisor_ptr++;\n    } while (dividend_ptr <= dividend_end_ptr);\n    if (dividend_end_ptr[0] == 0) {\n      if ((dividend_ptr < (uint *)(dividend + 0x14) + dividend_length - 2) && (dividend_end_ptr[-1] == 0)) {\n        dividend_ptr = (uint *)(dividend + 0x14) + dividend_length - 3;\n        do {\n          dividend_length--;\n          if (dividend_ptr <= (uint *)(dividend + 0x14)) break;\n          dividend_word = *dividend_ptr;\n          dividend_ptr--;\n        } while (dividend_word == 0);\n      }\n      *(int *)(dividend + 0x10) = dividend_length;\n    }\n  }\n  if (FUN_080094f8() >= 0) {\n    quotient++;\n    carry = 0;\n    dividend_ptr = (uint *)(dividend + 0x14);\n    divisor_ptr = (uint *)(divisor + 0x14) + 1;\n    do {\n      dividend_word = *dividend_ptr & 0xffff;\n      divisor_word = *divisor_ptr & 0xffff;\n      remainder = dividend_word - (divisor_word * quotient & 0xffff) + carry;\n      carry = (*divisor_ptr >> 0x10) * quotient - (*dividend_ptr >> 0x10) + (remainder >> 0x10);\n      *dividend_ptr = remainder & 0xffff | carry << 0x10;\n      carry >>= 0x10;\n      dividend_ptr++;\n      divisor_ptr++;\n    } while (dividend_ptr <= dividend_end_ptr);\n    if (dividend_end_ptr[0] == 0) {\n      if ((dividend_end_ptr > (uint *)(dividend + 0x14)) && (dividend_end_ptr[-1] == 0)) {\n        dividend_end_ptr = (uint *)(dividend + 0x14) + dividend_length - 2;\n        do {\n          dividend_length--;\n          if (dividend_end_ptr <= (uint *)(dividend + 0x14)) break;\n          dividend_word = *dividend_end_ptr;\n          dividend_end_ptr--;\n        } while (dividend_word == 0);\n      }\n      *(int *)(dividend + 0x10) = dividend_length;\n    }\n  }\n  return quotient;\n}\n",
            "called": [
                "FUN_080094f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078c0",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "divide_and_update_080078c0"
        },
        "thunk_FUN_08005838": {
            "renaming": {
                "thunk_FUN_08005838": "calculate_thunk_08005838",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "difference",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "FUNC_0800015c": "calculate_helper",
                "FUNC_080059f0": "get_value",
                "DAT_080059bc": "memory_constant1",
                "DAT_080059b8": "memory_constant2",
                "DAT_080059e8": "memory_constant3",
                "DAT_080059a0": "memory_constant5",
                "DAT_080059d0": "memory_constant8",
                "DAT_080059d8": "memory_constant7",
                "DAT_080059c8": "memory_constant9",
                "DAT_080059b0": "memory_constant4",
                "DAT_080059a8": "memory_constant10",
                "DAT_080059ac": "memory_constant11",
                "DAT_080059c0": "memory_constant13",
                "DAT_080059b4": "memory_constant12",
                "FUNC_0800071c": "calculate_helper2",
                "do_nothing_08005d0c": "do_nothing",
                "FUNC_08000158": "calculate_helper3"
            },
            "code": "uint calculate_thunk_08005838(uint param1, uint param2, uint param3, uint param4)\n{\n  int difference;\n  undefined4 temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  undefined8 temp5;\n  \n  temp5 = CONCAT44(DAT_080059bc,DAT_080059b8);\n  temp4 = param4 & 0x7fffffff;\n  if ((DAT_080059e8 < (temp4 | (-param3 | param3) >> 0x1f)) || (temp3 = param2 & 0x7fffffff, DAT_080059e8 < (temp3 | (-param1 | param1) >> 0x1f))) \n  {\n    temp4 = calculate_thunk_08005838_helper(param3,param4,param1,param2);\n    return temp4;\n  }\n  if ((param4 + 0xc0100000 | param3) == 0) \n  {\n    temp4 = get_value();\n    return temp4;\n  }\n  temp2 = (int)param4 >> 0x1e & 2U | param2 >> 0x1f;\n  if ((temp3 | param1) == 0) \n  {\n    if (temp2 == 2) \n    {\n      return DAT_080059b0;\n    }\n    temp4 = DAT_080059a0;\n    if (temp2 != 3) \n    {\n      return param1;\n    }\n  }\n  else \n  {\n    if ((temp4 | param3) != 0) \n    {\n      if (temp4 == DAT_080059e8) \n      {\n        if (temp3 == temp4) \n        {\n          if (temp2 == 2) \n          {\n            return memory_constant6;\n          }\n          if (temp2 == 3) \n          {\n            return DAT_080059d8;\n          }\n          if (temp2 == 1) \n          {\n            return DAT_080059d0;\n          }\n          return DAT_080059c8;\n        }\n        if (temp2 == 2) \n        {\n          return DAT_080059b0;\n        }\n        if (temp2 == 3) \n        {\n          return DAT_080059a0;\n        }\n        if (temp2 == 1) \n        {\n          return 0;\n        }\n        return 0;\n      }\n      if (temp3 != DAT_080059e8) \n      {\n        difference = (int)(temp3 - temp4) >> 0x14;\n        if (difference < 0x3d) \n        {\n          if (((int)param4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) \n          {\n            temp5 = 0;\n          }\n          else \n          {\n            calculate_thunk_08005838_helper2(param1,param2,param3,param4,param4);\n            do_nothing();\n            temp5 = get_value();\n          }\n        }\n        temp1 = (undefined4)((ulonglong)temp5 >> 0x20);\n        temp4 = (uint)temp5;\n        if (temp2 == 1) \n        {\n          return temp4;\n        }\n        if (temp2 == 2) \n        {\n          temp5 = calculate_thunk_08005838_helper3(temp4,temp1,DAT_080059a8,DAT_080059ac);\n          temp4 = calculate_thunk_08005838_helper3(DAT_080059b0,DAT_080059b4,(int)temp5,(int)((ulonglong)temp5 >> 0x20));\n          return temp4;\n        }\n        if (temp2 == 0) \n        {\n          return temp4;\n        }\n        temp5 = calculate_thunk_08005838_helper3(temp4,temp1,DAT_080059a8,DAT_080059ac);\n        temp4 = calculate_thunk_08005838_helper3((int)temp5,(int)((ulonglong)temp5 >> 0x20),DAT_080059b0,DAT_080059b4);\n        return temp4;\n      }\n    }\n    temp4 = DAT_080059c0;\n    if (-1 < (int)param2) \n    {\n      temp4 = DAT_080059b8;\n    }\n  }\n  return temp4;\n}",
            "called": [
                "FUN_08005838"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005834",
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "imported": false,
            "current_name": "calculate_thunk_08005838"
        },
        "FUN_080003f4": {
            "renaming": {
                "FUN_080003f4": "reverse_bits_and_shift_left_080003f4",
                "param_1": "input",
                "uVar1": "shift_amount",
                "uVar2": "abs_input",
                "uVar3": "right_shift_amount",
                "iVar4": "leading_zero_count",
                "uVar5": "shift_amount",
                "uVar6": "input_sign_bit",
                "in_r12": "unused",
                "bVar7": "leading_zero_count_is_negative",
                "bVar8": "leading_zero_count_is_zero",
                "bVar9": "shift_amount_is_negative"
            },
            "code": "ulonglong reverse_bits_and_shift_left_080003f4(uint input)\n{\n  uint abs_input = input & 0x7fffffff;\n  if (abs_input == 0) {\n    return 0;\n  }\n  uint leading_zero_count = count_leading_zeroes(abs_input);\n  uint shift_amount = leading_zero_count + 21;\n  if (shift_amount < 32) {\n    uint left_shifted = input << (shift_amount & 0xff);\n    uint right_shifted = input >> ((0xcU - leading_zero_count) & 0xff);\n    return ((ulonglong)left_shifted << 32) | right_shifted;\n  }\n  else if (shift_amount < 1075) {\n    uint right_shift_amount = 0x20 - (shift_amount & 0xff);\n    uint left_shifted = input << (leading_zero_count & 0xff);\n    uint right_shifted = (input >> right_shift_amount) | (0U >> (right_shift_amount & 0xff));\n    return ((ulonglong)left_shifted << 32) | right_shifted;\n  }\n  else {\n    uint shift_amount_complement = ~(shift_amount - 0x433);\n    if (shift_amount_complement > 0x1e) {\n      return ((ulonglong)input << 32) | ((input >> (shift_amount_complement - 0x1f)) & 0x80000000ffffffff);\n    }\n    else {\n      int right_shift_amount = shift_amount_complement - 0x13;\n      if (right_shift_amount == 0 || ((shift_amount_complement - 0x1f) < 0) != (right_shift_amount < 0)) {\n        uint shift_amount = shift_amount_complement + 1;\n        uint left_shifted = (input >> shift_amount) | ((uint)0 << (32 - shift_amount));\n        uint right_shifted = (input << (32 - shift_amount)) >> (32 - shift_amount);\n        return ((ulonglong)left_shifted << 32) | right_shifted;\n      }\n      else {\n        uint left_shifted = (input >> (0x20 - (0xcU - right_shift_amount))) & 0x80000000ffffffff;\n        uint right_shifted = (input << (0xcU - right_shift_amount)) & 0xffffffff;\n        return ((ulonglong)left_shifted << 32) | right_shifted;\n      }\n    }\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003f4",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "reverse_bits_and_shift_left_080003f4"
        },
        "FUN_080079e8": {
            "renaming": {
                "FUN_080079e8": "FUNC_080079e8"
            },
            "code": "\nchar * FUNC_080079e8(int param_1,undefined4 param_2,uint param_3,uint param_4,uint param_5,\n                   uint param_6,int *param_7,uint *param_8,char **param_9)\n\n{\n  char cVar1;\n  byte bVar2;\n  undefined4 uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  int iVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  int iVar13;\n  char *pcVar14;\n  char *pcVar15;\n  undefined4 *puVar16;\n  undefined4 uVar17;\n  char *pcVar18;\n  int iVar19;\n  bool bVar20;\n  undefined8 uVar21;\n  undefined8 uVar22;\n  undefined8 uVar23;\n  uint local_80;\n  uint local_7c;\n  uint local_74;\n  int local_70;\n  uint local_68;\n  uint local_64;\n  int local_60;\n  int local_5c;\n  uint local_58;\n  int local_54;\n  uint local_48;\n  uint uStack_44;\n  uint local_38;\n  uint local_34;\n  int local_30;\n  int local_2c [2];\n  \n  iVar9 = *(int *)(param_1 + 0x40);\n  if (iVar9 != 0) {\n    uVar12 = *(uint *)(param_1 + 0x44);\n    *(uint *)(iVar9 + 4) = uVar12;\n    *(int *)(iVar9 + 8) = 1 << (uVar12 & 0xff);\n    FUN_0800910c(param_1,iVar9);\n    *(undefined4 *)(param_1 + 0x40) = 0;\n  }\n  bVar20 = (int)param_4 < 0;\n  uVar12 = param_4;\n  if (bVar20) {\n    uVar12 = param_4 & 0x7fffffff;\n  }\n  *param_8 = (uint)bVar20;\n  local_7c = param_4;\n  if (bVar20) {\n    local_7c = uVar12;\n  }\n  uVar4 = local_7c;\n  if ((DAT_08007bf8 & ~uVar12) == 0) {\n    *param_7 = 9999;\n    if ((param_3 == 0) && ((uVar12 & 0xfffff) == 0)) {\n      if (param_9 == (char **)0x0) {\n        return PTR_s_Infinity_08007c08;\n      }\n      pcVar15 = PTR_s_Infinity_08007c08 + 8;\n      pcVar18 = PTR_s_Infinity_08007c08;\n    }\n    else {\n      if (param_9 == (char **)0x0) {\n        return PTR_DAT_08007c0c;\n      }\n      pcVar15 = PTR_DAT_08007c0c + 3;\n      pcVar18 = PTR_DAT_08007c0c;\n    }\n    *param_9 = pcVar15;\n    return pcVar18;\n  }\n  uVar21 = FUN_08000998(param_3,local_7c,0,0);\n  local_60 = (int)uVar21;\n  if (local_60 != 0) {\n    *param_7 = 1;\n    if (param_9 != (char **)0x0) {\n      pcVar18 = PTR_DAT_08007bfc + -1;\n      *param_9 = PTR_DAT_08007bfc;\n      return pcVar18;\n    }\n    return PTR_DAT_08007c10;\n  }\n  uVar3 = FUN_08009630(param_1,(int)((ulonglong)uVar21 >> 0x20),param_3,local_7c,local_2c,&local_30)\n  ;\n  iVar9 = local_30;\n  if (uVar12 >> 0x14 == 0) {\n    iVar13 = local_2c[0] + local_30;\n    iVar10 = iVar13 + 0x432;\n    if (iVar10 < 0x21) {\n      uVar12 = param_3 << (0x20U - iVar10 & 0xff);\n    }\n    else {\n      uVar12 = param_3 >> (iVar13 + 0x412U & 0xff) | uVar12 << (0x40U - iVar10 & 0xff);\n    }\n    uVar21 = FUN_080003d4(uVar12);\n    iVar13 = iVar13 + -1;\n    local_60 = 1;\n    uVar5 = (int)((ulonglong)uVar21 >> 0x20) + 0xfe100000;\n    uVar12 = (uint)uVar21;\n  }\n  else {\n    iVar13 = (uVar12 >> 0x14) - 0x3ff;\n    uVar5 = local_7c & 0xfffff | 0x3ff00000;\n    uVar12 = param_3;\n  }\n  uVar21 = FUNC_08000158(uVar12,uVar5,0,DAT_08007c00);\n  uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),DAT_08007be0,DAT_08007be4);\n  uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),DAT_08007be8,DAT_08007bec);\n  uVar22 = FUN_080003f4(iVar13);\n  uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),DAT_08007bf0,DAT_08007bf4);\n  uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar22,\n                        (int)((ulonglong)uVar22 >> 0x20));\n  uVar8 = (undefined4)((ulonglong)uVar21 >> 0x20);\n  local_74 = FUN_0800119c();\n  iVar10 = FUN_080009ac((int)uVar21,uVar8,0,0);\n  if (iVar10 != 0) {\n    uVar22 = FUN_080003f4(local_74);\n    iVar10 = FUN_08000998((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,uVar8);\n    if (iVar10 == 0) {\n      local_74 = local_74 - 1;\n    }\n  }\n  if (local_74 < 0x17) {\n    local_54 = FUN_080009e8(*(undefined4 *)(PTR_DAT_08007c04 + local_74 * 8),\n                            *(undefined4 *)((int)(PTR_DAT_08007c04 + local_74 * 8) + 4),param_3,\n                            local_7c);\n    if (local_54 != 0) {\n      local_74 = local_74 - 1;\n      local_54 = 0;\n    }\n  }\n  else {\n    local_54 = 1;\n  }\n  iVar10 = (iVar9 - iVar13) + -1;\n  if (iVar10 < 0) {\n    local_70 = 1 - (iVar9 - iVar13);\n    iVar10 = 0;\n  }\n  else {\n    local_70 = 0;\n  }\n  if ((int)local_74 < 0) {\n    local_58 = 0;\n    local_70 = local_70 - local_74;\n    local_5c = -local_74;\n  }\n  else {\n    iVar10 = iVar10 + local_74;\n    local_58 = local_74;\n    local_5c = 0;\n  }\n  if (9 < param_5) {\n    local_38 = 0xffffffff;\n    bVar20 = true;\n    local_68 = 0xffffffff;\n    local_64 = 1;\n    param_5 = 0;\n    param_6 = 0;\n    goto LAB_08007c24;\n  }\n  bVar20 = (int)param_5 < 6;\n  if (!bVar20) {\n    param_5 = param_5 - 4;\n  }\n  switch(param_5) {\n  case 2:\n    local_64 = 0;\n    break;\n  case 3:\n    local_64 = 0;\n    goto LAB_08008300;\n  case 4:\n    local_64 = 1;\n    break;\n  case 5:\n    local_64 = 1;\nLAB_08008300:\n    local_38 = local_74 + param_6;\n    local_68 = local_38 + 1;\n    uVar12 = local_68;\n    if ((int)local_68 < 1) {\n      uVar12 = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    pcVar18 = (char *)FUN_080090c0(param_1,0);\n    local_38 = 0xffffffff;\n    local_68 = 0xffffffff;\n    param_6 = 0;\n    *(char **)(param_1 + 0x40) = pcVar18;\n    local_64 = 1;\n    goto LAB_08007e36;\n  }\n  if ((int)param_6 < 1) {\n    local_38 = 1;\n    param_6 = 1;\n    local_68 = 1;\nLAB_08007c24:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    uVar5 = local_38;\n  }\n  else {\n    local_38 = param_6;\n    local_68 = param_6;\n    uVar12 = param_6;\nLAB_08008314:\n    *(undefined4 *)(param_1 + 0x44) = 0;\n    uVar5 = local_68;\n    if (0x17 < (int)uVar12) {\n      iVar13 = 4;\n      iVar9 = 1;\n      do {\n        iVar19 = iVar9;\n        iVar13 = iVar13 * 2;\n        iVar9 = iVar19 + 1;\n      } while (iVar13 + 0x14U <= uVar12);\n      *(int *)(param_1 + 0x44) = iVar19;\n    }\n  }\n  pcVar18 = (char *)FUN_080090c0(param_1);\n  *(char **)(param_1 + 0x40) = pcVar18;\n  if ((uVar5 < 0xf) && (bVar20)) {\n    if ((int)local_74 < 1) {\n      if (local_74 == 0) {\n        iVar9 = 2;\n        local_80 = param_3;\n      }\n      else {\n        uVar21 = FUNC_080004c8(param_3,local_7c,\n                              *(undefined4 *)(PTR_DAT_080086cc + (-local_74 & 0xf) * 8),\n                              *(undefined4 *)((int)(PTR_DAT_080086cc + (-local_74 & 0xf) * 8) + 4));\n        local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n        local_80 = (uint)uVar21;\n        iVar13 = (int)-local_74 >> 4;\n        if (iVar13 == 0) {\n          iVar9 = 2;\n        }\n        else {\n          bVar20 = false;\n          iVar9 = 2;\n          puVar16 = (undefined4 *)PTR_DAT_080086d0;\n          do {\n            if (iVar13 << 0x1f < 0) {\n              uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),*puVar16,puVar16[1]\n                                   );\n              bVar20 = true;\n              iVar9 = iVar9 + 1;\n            }\n            iVar13 = iVar13 >> 1;\n            puVar16 = puVar16 + 2;\n          } while (iVar13 != 0);\n          if (bVar20) {\n            local_80 = (uint)uVar21;\n            local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      uVar12 = (int)local_74 >> 4;\n      uVar21 = *(undefined8 *)(PTR_DAT_08007ec4 + (local_74 & 0xf) * 8);\n      if ((int)(uVar12 << 0x1b) < 0) {\n        uVar22 = FUNC_0800071c(param_3,local_7c,*(undefined4 *)(PTR_DAT_08007ec8 + 0x20),\n                              *(undefined4 *)(PTR_DAT_08007ec8 + 0x24));\n        uStack_44 = (uint)((ulonglong)uVar22 >> 0x20);\n        local_48 = (uint)uVar22;\n        iVar9 = 3;\n        uVar12 = uVar12 & 0xf;\n        puVar16 = (undefined4 *)PTR_DAT_08007ec8;\n      }\n      else {\n        iVar9 = 2;\n        uStack_44 = local_7c;\n        puVar16 = (undefined4 *)PTR_DAT_08007ec8;\n        local_48 = param_3;\n      }\n      while( true ) {\n        uVar8 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        if (uVar12 == 0) break;\n        if ((int)(uVar12 << 0x1f) < 0) {\n          uVar21 = FUNC_080004c8((int)uVar21,uVar8,*puVar16,puVar16[1]);\n          iVar9 = iVar9 + 1;\n        }\n        uVar12 = (int)uVar12 >> 1;\n        puVar16 = puVar16 + 2;\n      }\n      uVar21 = FUNC_0800071c(local_48,uStack_44,(int)uVar21,uVar8);\n      local_80 = (uint)uVar21;\n      local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n    }\n    uVar21 = CONCAT44(local_7c,local_80);\n    if ((local_54 != 0) && (iVar13 = FUN_080009ac(local_80,local_7c,0,DAT_08007ecc), iVar13 != 0)) {\n      if (local_68 == 0) {\n        uVar21 = FUN_080003f4(iVar9);\n        uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),local_80,local_7c);\n        uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080086d4);\n        uVar8 = (undefined4)uVar21;\n        iVar9 = (int)((ulonglong)uVar21 >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)local_38) {\n        uVar21 = FUNC_080004c8(local_80,local_7c,0,DAT_0800880c);\n        uVar22 = FUN_080003f4(iVar9 + 1);\n        uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,\n                              (int)((ulonglong)uVar21 >> 0x20));\n        uVar22 = FUNC_0800015c((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08008810);\n        uVar8 = (undefined4)uVar22;\n        local_48 = local_38;\n        local_34 = local_74 - 1;\n        iVar9 = (int)((ulonglong)uVar22 >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    uVar22 = FUN_080003f4(iVar9);\n    uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),local_80,local_7c);\n    uVar22 = FUNC_0800015c((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08007ed0);\n    uVar8 = (undefined4)uVar22;\n    iVar9 = (int)((ulonglong)uVar22 >> 0x20) + -0x3400000;\n    if (local_68 != 0) {\n      local_34 = local_74;\n      local_48 = local_68;\nLAB_08007cfa:\n      local_7c = (uint)((ulonglong)uVar21 >> 0x20);\n      local_80 = (uint)uVar21;\n      cVar1 = FUN_0800119c(local_80,local_7c);\n      cVar1 = cVar1 + '0';\n      uVar11 = *(undefined4 *)(PTR_DAT_08007ec4 + local_48 * 8 + -8);\n      uVar7 = *(undefined4 *)(PTR_DAT_08007ec4 + local_48 * 8 + -4);\n      uVar21 = FUN_080003f4();\n      uVar21 = FUNC_08000158(local_80,local_7c,(int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n      uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n      pcVar15 = pcVar18 + 1;\n      if (local_64 == 0) {\n        uVar22 = FUNC_080004c8(uVar8,iVar9,uVar11,uVar7);\n        uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n        *pcVar18 = cVar1;\n        if (local_48 != 1) {\n          pcVar14 = pcVar15;\n          do {\n            uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080086d8);\n            cVar1 = FUN_0800119c();\n            uVar23 = FUN_080003f4();\n            uVar21 = FUNC_08000158((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar23,\n                                  (int)((ulonglong)uVar23 >> 0x20));\n            pcVar15 = pcVar14 + 1;\n            *pcVar14 = cVar1 + '0';\n            pcVar14 = pcVar15;\n          } while (pcVar15 != pcVar18 + local_48);\n        }\n        uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        uVar23 = FUNC_0800015c((int)uVar22,uVar8,0,DAT_080086dc);\n        iVar9 = FUN_080009ac((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),(int)uVar21,uVar11);\n        if (iVar9 == 0) {\n          uVar22 = FUNC_08000158(0,DAT_08008814,(int)uVar22,uVar8);\n          iVar9 = FUN_080009e8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),(int)uVar21,uVar11);\n          pcVar14 = pcVar15;\n          if (iVar9 == 0) goto LAB_08007e36;\n          do {\n            pcVar15 = pcVar14;\n            pcVar14 = pcVar15 + -1;\n          } while (pcVar15[-1] == '0');\n          goto LAB_08008784;\n        }\n        local_74 = local_34;\n        cVar1 = pcVar15[-1];\n      }\n      else {\n        uVar22 = FUNC_0800071c(0,DAT_08007ed4,uVar11,uVar7);\n        uVar22 = FUNC_08000158((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),uVar8,iVar9);\n        uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n        *pcVar18 = cVar1;\n        iVar9 = FUN_080009e8((int)uVar22,uVar8,(int)uVar21,uVar17);\n        if (iVar9 != 0) {\nLAB_08008784:\n          local_74 = local_34;\n          goto LAB_08008294;\n        }\n        uVar23 = FUNC_08000158(0,DAT_08007ecc,(int)uVar21,uVar17);\n        iVar9 = FUN_080009e8((int)uVar22,uVar8,(int)uVar23,(int)((ulonglong)uVar23 >> 0x20));\n        if (iVar9 == 0) {\n          if (local_48 != 1) {\n            pcVar14 = pcVar15;\n            do {\n              uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),0,DAT_08007ed8);\n              uVar8 = (undefined4)((ulonglong)uVar22 >> 0x20);\n              uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_08007ed8);\n              cVar1 = FUN_0800119c();\n              uVar23 = FUN_080003f4();\n              uVar21 = FUNC_08000158((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar23,\n                                    (int)((ulonglong)uVar23 >> 0x20));\n              uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n              cVar1 = cVar1 + '0';\n              pcVar15 = pcVar14 + 1;\n              *pcVar14 = cVar1;\n              iVar9 = FUN_080009ac((int)uVar21,uVar11,(int)uVar22,uVar8);\n              if (iVar9 != 0) {\n                local_74 = local_34;\n                goto LAB_08008294;\n              }\n              uVar23 = FUNC_08000158(0,DAT_08007ecc,(int)uVar21,uVar11);\n              iVar9 = FUN_080009ac((int)uVar23,(int)((ulonglong)uVar23 >> 0x20),(int)uVar22,uVar8);\n              if (iVar9 != 0) goto LAB_08008798;\n              pcVar14 = pcVar15;\n            } while (pcVar15 != pcVar18 + local_48);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        local_74 = local_34;\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    uVar21 = FUNC_08000158(local_80,local_7c,0,DAT_080086c8);\n    uVar11 = (undefined4)((ulonglong)uVar21 >> 0x20);\n    uVar12 = FUN_080009e8((int)uVar21,uVar11,uVar8,iVar9);\n    if (uVar12 == 0) {\n      iVar9 = FUN_080009ac((int)uVar21,uVar11,uVar8,iVar9 + -0x80000000);\n      uVar5 = uVar12;\n      pcVar15 = pcVar18;\n      if (iVar9 == 0) goto LAB_08007e36;\n      goto LAB_080084f0;\n    }\n    local_68 = 0;\n    uVar12 = 0;\nLAB_08008406:\n    *pcVar18 = '1';\n    local_74 = local_74 + 1;\n    pcVar15 = pcVar18 + 1;\n    uVar5 = local_68;\nLAB_08008416:\n    FUN_0800910c(param_1,uVar5);\n    if (uVar12 == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    pcVar15 = pcVar18;\n    if ((-1 < local_2c[0]) && ((int)local_74 < 0xf)) {\n      uVar8 = *(undefined4 *)(PTR_DAT_08007ec4 + local_74 * 8);\n      uVar11 = *(undefined4 *)((int)(PTR_DAT_08007ec4 + local_74 * 8) + 4);\n      if ((-1 < (int)param_6) || (0 < (int)local_68)) {\n        FUNC_0800071c(param_3,uVar4,uVar8,uVar11);\n        bVar2 = FUN_0800119c();\n        uVar21 = FUN_080003f4();\n        uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),uVar8,uVar11);\n        uVar21 = FUNC_08000158(param_3,uVar4,(int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n        *pcVar18 = bVar2 + 0x30;\n        pcVar15 = pcVar18 + 1;\n        if (local_68 != 1) {\n          uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_08007ed8);\n          iVar9 = FUN_08000998((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,0);\n          while (iVar9 == 0) {\n            uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n            FUNC_0800071c((int)uVar21,uVar17,uVar8,uVar11);\n            bVar2 = FUN_0800119c();\n            uVar22 = FUN_080003f4();\n            uVar22 = FUNC_080004c8((int)uVar22,(int)((ulonglong)uVar22 >> 0x20),uVar8,uVar11);\n            uVar21 = FUNC_08000158((int)uVar21,uVar17,(int)uVar22,(int)((ulonglong)uVar22 >> 0x20));\n            pcVar14 = pcVar15 + 1;\n            *pcVar15 = bVar2 + 0x30;\n            pcVar15 = pcVar14;\n            if (local_68 == (int)pcVar14 - (int)pcVar18) goto LAB_08007f3a;\n            uVar21 = FUNC_080004c8((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,DAT_080081f8);\n            iVar9 = FUN_08000998((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        uVar21 = FUNC_0800015c((int)uVar21,(int)((ulonglong)uVar21 >> 0x20));\n        uVar17 = (undefined4)((ulonglong)uVar21 >> 0x20);\n        iVar9 = FUN_080009e8((int)uVar21,uVar17,uVar8,uVar11);\n        if ((iVar9 == 0) &&\n           ((iVar9 = FUN_08000998((int)uVar21,uVar17,uVar8,uVar11), iVar9 == 0 || ((bVar2 & 1) == 0)\n            ))) goto LAB_08008294;\n        cVar1 = pcVar15[-1];\nLAB_08007f7c:\n        while (pcVar14 = pcVar15 + -1, cVar1 == '9') {\n          if (pcVar18 == pcVar14) {\n            *pcVar18 = '0';\n            cVar1 = pcVar15[-1];\n            local_74 = local_74 + 1;\n            pcVar14 = pcVar18;\n            break;\n          }\n          cVar1 = pcVar15[-2];\n          pcVar15 = pcVar14;\n        }\n        *pcVar14 = cVar1 + '\\x01';\n        goto LAB_08008294;\n      }\n      if (local_68 == 0) {\n        uVar21 = FUNC_080004c8(uVar8,uVar11,0,DAT_080086c8);\n        iVar9 = FUN_080009d4((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),param_3,uVar4);\n        uVar12 = local_68;\n        uVar5 = local_68;\n        if (iVar9 == 0) goto LAB_08008406;\n      }\n      else {\n        uVar12 = 0;\n        uVar5 = 0;\n      }\nLAB_080084f0:\n      local_74 = ~param_6;\n      pcVar18 = pcVar15;\n      goto LAB_08008416;\n    }\n    iVar9 = local_5c;\n    if (local_64 == 0) {\n      local_60 = local_70;\n      uVar12 = local_64;\n    }\n    else {\n      if ((int)param_5 < 2) {\n        if (local_60 == 0) {\n          local_60 = local_70;\n          local_70 = local_70 + (0x36 - local_30);\n          iVar10 = iVar10 + (0x36 - local_30);\n        }\n        else {\n          local_60 = local_70;\n          local_70 = local_70 + local_2c[0] + 0x433;\n          iVar10 = iVar10 + local_2c[0] + 0x433;\n        }\n      }\n      else {\n        iVar13 = local_68 - 1;\n        if (local_5c < iVar13) {\n          local_58 = local_58 + (iVar13 - local_5c);\n          iVar9 = 0;\n          local_5c = iVar13;\n        }\n        else {\n          iVar9 = local_5c - iVar13;\n        }\n        if ((int)local_68 < 0) {\n          local_60 = local_70 - local_68;\n        }\n        else {\n          iVar10 = iVar10 + local_68;\n          local_60 = local_70;\n          local_70 = local_70 + local_68;\n        }\n      }\n      uVar12 = FUN_08009244(param_1,1);\n    }\n    if ((0 < local_60) && (0 < iVar10)) {\n      iVar13 = local_60;\n      if (iVar10 <= local_60) {\n        iVar13 = iVar10;\n      }\n      iVar10 = iVar10 - iVar13;\n      local_70 = local_70 - iVar13;\n      local_60 = local_60 - iVar13;\n    }\n    if (local_5c != 0) {\n      if (local_64 == 0) {\n        uVar3 = FUN_080093a4(param_1,uVar3,local_5c);\n      }\n      else {\n        uVar8 = uVar3;\n        if (iVar9 != 0) {\n          uVar12 = FUN_080093a4(param_1,uVar12,iVar9);\n          uVar8 = FUN_08009258(param_1,uVar12,uVar3);\n          FUN_0800910c(param_1,uVar3);\n          uVar3 = uVar8;\n          if (local_5c - iVar9 == 0) goto LAB_08008062;\n        }\n        uVar3 = FUN_080093a4(param_1,uVar8,local_5c - iVar9);\n      }\n    }\nLAB_08008062:\n    uVar5 = FUN_08009244(param_1,1);\n    if (local_58 == 0) {\n      if (((int)param_5 < 2) && (param_3 == 0)) {\nLAB_0800835a:\n        if ((uVar4 & 0xfffff) == 0) {\n          uVar4 = uVar4 & 0x7ff00000;\n          if (uVar4 != 0) {\n            iVar10 = iVar10 + 1;\n            local_70 = local_70 + 1;\n            uVar4 = 1;\n          }\n        }\n        else {\n          uVar4 = 0;\n        }\n        bVar20 = local_58 != 0;\n        uVar6 = param_3;\n        local_58 = uVar4;\n        if (bVar20) goto LAB_080082d4;\n      }\n      iVar9 = 1;\n    }\n    else {\n      uVar21 = FUN_080093a4(param_1,uVar5);\n      uVar5 = (uint)uVar21;\n      if (((int)param_5 < 2) && (param_3 == 0)) goto LAB_0800835a;\n      local_58 = 0;\n      uVar6 = (uint)((ulonglong)uVar21 >> 0x20);\nLAB_080082d4:\n      iVar9 = FUN_080091a4(*(undefined4 *)(uVar5 + *(int *)(uVar5 + 0x10) * 4 + 0x10),uVar6);\n      iVar9 = 0x20 - iVar9;\n    }\n    uVar4 = iVar9 + iVar10 & 0x1f;\n    if (uVar4 == 0) {\n      iVar9 = 0x1c;\nLAB_08008096:\n      iVar10 = iVar10 + iVar9;\n      local_70 = local_70 + iVar9;\n      local_60 = local_60 + iVar9;\n    }\n    else {\n      if (4 < (int)(0x20 - uVar4)) {\n        iVar9 = 0x1c - uVar4;\n        goto LAB_08008096;\n      }\n      if (0x20 - uVar4 != 4) {\n        iVar9 = 0x3c - uVar4;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < local_70) {\n      uVar3 = FUN_08009444(param_1,uVar3,local_70);\n    }\n    if (0 < iVar10) {\n      uVar5 = FUN_08009444(param_1,uVar5,iVar10);\n    }\n    pcVar14 = pcVar18;\n    if ((local_54 != 0) && (iVar9 = FUN_080094f8(uVar3,uVar5), iVar9 < 0)) {\n      local_74 = local_74 - 1;\n      uVar3 = FUN_08009120(param_1,uVar3,10,0);\n      if (local_64 == 0) {\n        if ((0 < (int)local_38) || ((int)param_5 < 3)) {\n          local_68 = local_38;\n          goto LAB_0800820a;\n        }\n      }\n      else {\n        uVar12 = FUN_08009120(param_1,uVar12,10,0);\n        if ((0 < (int)local_38) || ((int)param_5 < 3)) {\n          local_68 = local_38;\n          goto LAB_080080de;\n        }\n      }\n      local_68 = local_38;\nLAB_080084e8:\n      if (local_68 == 0) {\n        local_68 = FUN_08009120(param_1,uVar5,5);\n        iVar9 = FUN_080094f8(uVar3,local_68);\n        uVar5 = local_68;\n        if (0 < iVar9) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)local_68 < 1) && (2 < (int)param_5)) goto LAB_080084e8;\n    if (local_64 == 0) {\nLAB_0800820a:\n      while( true ) {\n        iVar19 = FUN_080078c0(uVar3,uVar5);\n        iVar19 = iVar19 + 0x30;\n        pcVar15 = pcVar14 + 1;\n        *pcVar14 = (char)iVar19;\n        if ((int)local_68 <= (int)pcVar15 - (int)pcVar18) break;\n        uVar3 = FUN_08009120(param_1,uVar3,10,0);\n        pcVar14 = pcVar15;\n      }\n      local_80 = 0;\n    }\n    else {\nLAB_080080de:\n      local_80 = uVar12;\n      if (0 < local_60) {\n        local_80 = FUN_08009444(param_1,uVar12,local_60);\n      }\n      uVar12 = local_80;\n      if (local_58 != 0) {\n        iVar9 = FUN_080090c0(param_1,*(undefined4 *)(local_80 + 4));\n        FUN_08001084(iVar9 + 0xc,local_80 + 0xc,(*(int *)(local_80 + 0x10) + 2) * 4);\n        uVar12 = FUN_08009444(param_1,iVar9,1);\n      }\nLAB_08008108:\n      iVar9 = FUN_080078c0(uVar3,uVar5);\n      iVar13 = FUN_080094f8(uVar3,local_80);\n      iVar10 = FUN_08009530(param_1,uVar5,uVar12);\n      iVar19 = iVar9 + 0x30;\n      if (*(int *)(iVar10 + 0xc) == 0) {\n        uVar4 = FUN_080094f8(uVar3);\n        FUN_0800910c(param_1,iVar10);\n        if (((uVar4 != 0) || (param_5 != 0)) || (uVar4 = param_5, (param_3 & 1) != 0))\n        goto LAB_0800815a;\n        if (iVar19 != 0x39) {\n          if (0 < iVar13) {\nLAB_0800874c:\n            iVar19 = iVar9 + 0x31;\n          }\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        pcVar15 = pcVar14 + 1;\n        cVar1 = '9';\n        *pcVar14 = '9';\n        goto LAB_08008268;\n      }\n      FUN_0800910c(param_1,iVar10);\n      uVar4 = 1;\nLAB_0800815a:\n      if ((iVar13 < 0) || (((iVar13 == 0 && (param_5 == 0)) && ((param_3 & 1) == 0)))) {\n        if (0 < (int)uVar4) {\n          uVar3 = FUN_08009444(param_1,uVar3,1);\n          iVar13 = FUN_080094f8(uVar3,uVar5);\n          if ((0 < iVar13) || ((iVar13 == 0 && (iVar9 << 0x1f < 0)))) {\n            if (iVar19 != 0x39) goto LAB_0800874c;\n            goto LAB_08008752;\n          }\n        }\nLAB_080085a4:\n        pcVar15 = pcVar14 + 1;\n        *pcVar14 = (char)iVar19;\n        goto LAB_08008274;\n      }\n      pcVar15 = pcVar14 + 1;\n      if (0 < (int)uVar4) {\n        if (iVar19 == 0x39) goto LAB_08008752;\n        *pcVar14 = (char)iVar9 + '1';\n        goto LAB_08008274;\n      }\n      *pcVar14 = (char)iVar19;\n      if (pcVar18 + (local_68 - 1) != pcVar14) {\n        uVar3 = FUN_08009120(param_1,uVar3,10,0);\n        pcVar14 = pcVar15;\n        if (local_80 == uVar12) {\n          local_80 = FUN_08009120(param_1,local_80,10,0);\n          uVar12 = local_80;\n        }\n        else {\n          local_80 = FUN_08009120(param_1,local_80,10,0);\n          uVar12 = FUN_08009120(param_1,uVar12,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    uVar3 = FUN_08009444(param_1,uVar3,1);\n    iVar9 = FUN_080094f8(uVar3,uVar5);\n    cVar1 = pcVar15[-1];\n    if ((0 < iVar9) || ((iVar9 == 0 && (iVar19 << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        pcVar14 = pcVar15 + -1;\n        if (cVar1 != '9') goto code_r0x08008270;\n        if (pcVar18 == pcVar14) {\n          *pcVar18 = '1';\n          local_74 = local_74 + 1;\n          goto LAB_08008274;\n        }\n        cVar1 = pcVar15[-2];\n        pcVar15 = pcVar14;\n      } while( true );\n    }\n    while (cVar1 == '0') {\n      cVar1 = pcVar15[-2];\n      pcVar15 = pcVar15 + -1;\n    }\nLAB_08008274:\n    FUN_0800910c(param_1,uVar5);\n    if (uVar12 == 0) goto LAB_08008294;\n    if ((local_80 != 0) && (local_80 != uVar12)) {\n      FUN_0800910c(param_1);\n    }\n  }\n  FUN_0800910c(param_1,uVar12);\nLAB_08008294:\n  FUN_0800910c(param_1,uVar3);\n  *pcVar15 = '\\0';\n  *param_7 = local_74 + 1;\n  if (param_9 == (char **)0x0) {\n    return pcVar18;\n  }\n  *param_9 = pcVar15;\n  return pcVar18;\ncode_r0x08008270:\n  *pcVar14 = cVar1 + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "called": [
                "FUN_08009258",
                "FUN_080003f4",
                "FUN_0800910c",
                "FUN_08009120",
                "FUN_080004c8",
                "FUN_080009ac",
                "FUN_0800119c",
                "FUN_080078c0",
                "FUN_08009630",
                "FUN_080093a4",
                "FUN_08009444",
                "FUN_080003d4",
                "FUN_0800015c",
                "FUN_080009d4",
                "FUN_08009244",
                "FUN_08001084",
                "FUN_08000158",
                "FUN_08000998",
                "FUN_080094f8",
                "FUN_08009530",
                "FUN_080090c0",
                "FUN_0800071c",
                "FUN_080009e8",
                "FUN_080091a4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080079e8",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "FUNC_080079e8"
        },
        "FUN_0800166c": {
            "renaming": {
                "FUN_0800166c": "extract_bits_0800166c",
                "param_1": "input",
                "param_2": "mask",
                "param_3": "shift",
                "uVar1": "num_bits_to_keep",
                "extracted_bits": "extracted_bits",
                "kept_bits": "kept_bits"
            },
            "code": "uint extract_bits_0800166c(uint input, uint mask, uint shift) {\n    uint num_bits_to_extract = input & 7;\n    uint num_bits_to_keep = 7 - num_bits_to_extract;\n    if (num_bits_to_keep > 3) {\n        num_bits_to_keep = 4;\n    }\n    if (num_bits_to_extract + 4 < 7) {\n        num_bits_to_extract = 0;\n    }\n    else {\n        num_bits_to_extract -= 3;\n    }\n    uint extracted_bits = mask & ~(-1 << (num_bits_to_extract & 0xff));\n    uint kept_bits = (~(-1 << (num_bits_to_keep & 0xff)) & input) << (num_bits_to_extract & 0xff);\n    return extracted_bits | kept_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800166c",
            "calling": [
                "FUN_0800172a"
            ],
            "imported": false,
            "current_name": "extract_bits_0800166c"
        },
        "FUN_0800360c": {
            "renaming": {
                "FUN_0800360c": "set_flags_0800360c",
                "param_1": "ptr_param",
                "*param_1": "*ptr_param",
                "(*param_1)[3]": "data_ptr[3]",
                "**param_1": "*data_ptr"
            },
            "code": "int set_flags_0800360c(uint **ptr_param){\n    uint *data_ptr = *ptr_param;\n    data_ptr[3] |= 1;\n    *data_ptr |= 1;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800360c",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_flags_0800360c"
        },
        "FUN_08005d68": {
            "renaming": {
                "FUN_08005d68": "memset_aligned_words_08005d68",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "aligned_destination",
                "puVar2": "next_destination",
                "uVar3": "aligned_size",
                "uVar4": "aligned_value",
                "bVar5": "is_size_zero",
                "is_destination_aligned": "is_destination_aligned"
            },
            "code": "void memset_aligned_words_08005d68(uint32_t *destination, uint8_t value, uint32_t size) {\n    uint32_t *aligned_destination;\n    uint32_t aligned_size;\n    uint32_t aligned_value;\n    bool is_destination_aligned = ((uint)destination & 3) == 0;\n    if (!is_destination_aligned) {\n        aligned_size = size - 1;\n        aligned_destination = destination;\n        if (size == 0) {\n            return;\n        }\n        while(true) {\n            destination = (uint32_t *)((int)aligned_destination + 1);\n            *(uint8_t *)aligned_destination = value;\n            size = aligned_size;\n            if (((uint)destination & 3) == 0) {\n                break;\n            }\n            bool is_size_zero = aligned_size == 0;\n            aligned_size = aligned_size - 1;\n            aligned_destination = destination;\n            if (is_size_zero) {\n                return;\n            }\n        }\n    }\n    if (size >= 4) {\n        aligned_value = (value << 24) | (value << 16) | (value << 8) | value;\n        aligned_size = size;\n        aligned_destination = destination;\n        if (size > 15) {\n            aligned_size = size - 16;\n            aligned_destination = destination + 4;\n            do {\n                aligned_destination[-4] = aligned_value;\n                aligned_destination[-3] = aligned_value;\n                aligned_destination[-2] = aligned_value;\n                aligned_destination[-1] = aligned_value;\n                aligned_destination = aligned_destination + 4;\n            } while (aligned_destination != (uint32_t *)((int)destination + (aligned_size & 0xfffffff0) + 0x20));\n            size = size & 0xf;\n            destination = destination + ((aligned_size >> 4) + 1) * 4;\n            aligned_size = size;\n            aligned_destination = destination;\n            if (size < 4) {\n                goto end;\n            }\n        }\n        do {\n            size = size - 4;\n            *destination = aligned_value;\n            destination = destination + 1;\n        } while (size > 3);\n        destination = (uint32_t *)((int)aligned_destination + (aligned_size - 4 & 0xfffffffc) + 4);\n        size = aligned_size & 3;\n    }\n    end:\n    if (size != 0) {\n        aligned_destination = destination;\n        do {\n            uint32_t *next_destination = (uint32_t *)((int)aligned_destination + 1);\n            *(uint8_t *)aligned_destination = value;\n            aligned_destination = next_destination;\n        } while ((uint32_t *)(size + (int)destination) != aligned_destination);\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d68",
            "calling": [
                "FUN_08004f60",
                "FUN_08009980"
            ],
            "imported": false,
            "current_name": "memset_aligned_words_08005d68"
        },
        "FUN_080017c4": {
            "renaming": {
                "FUN_080017c4": "process_bits_080017c4",
                "param_1": "bits",
                "param_2": "flags",
                "uVar1": "flag_set_value",
                "uVar2": "flag_offset",
                "uVar3": "bit_mask",
                "uVar4": "flag_mask",
                "uVar5": "flag_value",
                "puVar6": "bits_ptr",
                "iVar7": "flag_index",
                "local_10": "bit_value",
                "local_c": "bit_index"
            },
            "code": "void process_bits_080017c4(uint *bits, uint *flags)\n{\n  uint bit_mask;\n  uint flag_mask;\n  uint flag_value;\n  uint *bits_ptr;\n  uint *flags_ptr;\n  int bit_index;\n  uint bit_value;\n  uint flag_index;\n  uint flag_offset;\n  uint flag_shift;\n  uint flag_set_value;\n\n  bit_index = 0;\n  flag_index = 0;\n  do {\n    if (bit_index > 15) {\n      return;\n    }\n    bit_mask = 1 << bit_index;\n    flag_mask = *flags & bit_mask;\n    if (flag_mask == bit_mask) {\n      flag_value = flags[1];\n      if (flag_value == 0x12) {\n        bit_value = bits[3] + 0xc;\n      }\n      else if (flag_value < 0x13) {\n        if (flag_value == 2) {\n          bit_value = bits[3] + 8;\n        }\n        else if (flag_value < 3) {\n          if (flag_value == 0) goto LAB_08001882;\n          if (flag_value == 1) {\n            bit_value = bits[3];\n          }\n        }\n        else if (flag_value == 3) {\n          bit_value = 0;\n        }\n        else if (flag_value == 0x11) {\n          bit_value = bits[3] + 4;\n        }\n      }\n      else if (((flag_value == PTR_DAT_08001a4c) || (((flag_set_value = PTR_DAT_08001a54, flag_offset = PTR_DAT_08001a50, PTR_DAT_08001a4c < flag_value && (flag_set_value = PTR_DAT_08001a60, flag_offset = PTR_DAT_08001a5c, flag_value == PTR_DAT_08001a58)) || (flag_value == flag_offset)))) || (flag_value == flag_set_value)) {\nLAB_08001882:\n        if (flags[2] == 0) {\n          bit_value = 4;\n        }\n        else if (flags[2] == 1) {\n          bit_value = 8;\n          bits[4] = bit_mask;\n        }\n        else {\n          bit_value = 8;\n          bits[5] = bit_mask;\n        }\n      }\n      if (flag_mask < 0x100) {\n        flag_shift = bit_index << 2;\n        bits_ptr = bits;\n      }\n      else {\n        bits_ptr = bits + 1;\n        flag_shift = (bit_index - 8) * 4;\n      }\n      *bits_ptr = *bits_ptr & ~(0xf << (flag_shift & 0xff)) | bit_value << (flag_shift & 0xff);\n      if ((flags[1] & 0x10000000) != 0) {\n        *(uint *)(PTR_DAT_08001a64 + 0x18) = *(uint *)(PTR_DAT_08001a64 + 0x18) | 1;\n        if (bits == PTR_DAT_08001a6c) {\n          flag_offset = 0;\n        }\n        else if (bits == PTR_DAT_08001a70) {\n          flag_offset = 1;\n        }\n        else if (bits == PTR_DAT_08001a74) {\n          flag_offset = 2;\n        }\n        else if (bits == PTR_DAT_08001a78) {\n          flag_offset = 3;\n        }\n        else {\n          flag_offset = 4;\n        }\n        *(uint *)(PTR_DAT_08001a68 + ((bit_index >> 2) + 2) * 4) = flag_offset << ((bit_index & 3) << 2) | ~(0xf << ((bit_index & 3) << 2)) & *(uint *)(PTR_DAT_08001a68 + ((bit_index >> 2) + 2) * 4);\n        if ((flags[1] & 0x10000) == 0) {\n          *PTR_DAT_08001a7c = ~flag_mask & *PTR_DAT_08001a7c;\n        }\n        else {\n          *PTR_DAT_08001a7c = flag_mask | *PTR_DAT_08001a7c;\n        }\n        if ((flags[1] & 0x20000) == 0) {\n          PTR_DAT_08001a7c[1] = ~flag_mask & PTR_DAT_08001a7c[1];\n        }\n        else {\n          PTR_DAT_08001a7c[1] = flag_mask | PTR_DAT_08001a7c[1];\n        }\n        if ((flags[1] & 0x100000) == 0) {\n          PTR_DAT_08001a7c[2] = ~flag_mask & PTR_DAT_08001a7c[2];\n        }\n        else {\n          PTR_DAT_08001a7c[2] = flag_mask | PTR_DAT_08001a7c[2];\n        }\n        if ((flags[1] & 0x200000) == 0) {\n          PTR_DAT_08001a7c[3] = ~flag_mask & PTR_DAT_08001a7c[3];\n        }\n        else {\n          PTR_DAT_08001a7c[3] = flag_mask | PTR_DAT_08001a7c[3];\n        }\n      }\n    }\n    bit_index++;\n  } while( true );\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080017c4",
            "calling": [
                "FUN_080055f4",
                "FUN_08005680"
            ],
            "imported": false,
            "current_name": "process_bits_080017c4"
        },
        "FUN_080035a4": {
            "renaming": {
                "FUN_080035a4": "check_valid_input_080035a4",
                "param_1": "input_array",
                "uVar1": "result",
                "*(char *)((int)param_1 + 0x3d)": "input_array[15]",
                "*(undefined *)(param_1 + 0xf)": "input_array[3]",
                "do_nothing_080035fa": "perform_operation",
                "*(undefined *)((int)param_1 + 0x3d)": "input_array[15]",
                "FUN_08003c94": "perform_operation"
            },
            "code": "int check_valid_input_080035a4(int *input_array)\n{\n    int result;\n    if (input_array == NULL)\n    {\n        result = 1;\n    }\n    else\n    {\n        if (input_array[15] == 0)\n        {\n            input_array[3] = 0;\n            perform_operation(input_array);\n        }\n        input_array[15] = 2;\n        perform_operation(input_array[0], &input_array[1]);\n        input_array[15] = 1;\n        result = 0;\n    }\n    return result;\n}",
            "called": [
                "FUN_080035fa",
                "FUN_08003c94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035a4",
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "imported": false,
            "current_name": "check_valid_input_080035a4"
        },
        "FUN_080041ea": {
            "renaming": {
                "FUN_080041ea": "set_bit_in_uint_array_080041ea",
                "param_1": "uint_array",
                "param_2": "bit_index",
                "param_3": "bit_value",
                "*(uint *)(param_1 + 0x20)": "uint_array[0x20]",
                "*(uint *)(param_1 + 0x20) & ~(1 << (param_2 & 0xff))": "mask",
                "param_3 << (param_2 & 0xff)": "bit_value << (bit_index & 0xff)"
            },
            "code": "void set_bit_in_uint_array_080041ea(uint *uint_array, uint bit_index, uint bit_value) {\n    uint mask = ~(1 << (bit_index & 0xff));\n    uint_array[0x20] &= mask;\n    uint_array[0x20] |= bit_value << (bit_index & 0xff);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041ea",
            "calling": [
                "FUN_080036a8"
            ],
            "imported": false,
            "current_name": "set_bit_in_uint_array_080041ea"
        },
        "FUN_08004ae0": {
            "renaming": {
                "FUN_08004ae0": "convertDataToUnsignedIntegers_08004ae0",
                "*param_1": "*output",
                "uVar1": "temp1",
                "local_2c": "buffer1",
                "local_2b": "buffer2",
                "local_2a": "buffer3",
                "local_29": "buffer4",
                "local_28": "buffer5",
                "local_27": "buffer6",
                "local_26": "buffer7",
                "local_25": "unused",
                "local_24": "unused",
                "local_23": "unused",
                "local_22": "unused",
                "local_21": "unused",
                "local_20": "unused",
                "local_1f": "unused",
                "local_1e": "temp6",
                "local_1c": "temp4",
                "local_1a": "temp5",
                "local_18": "temp3",
                "local_16": "temp2",
                "local_14": "temp1"
            },
            "code": "void convertDataToUnsignedIntegers_08004ae0(unsigned int *output)\n{\n    unsigned int temp1, temp2, temp3, temp4, temp5, temp6;\n    unsigned char buffer1, buffer2, buffer3, buffer4, buffer5, buffer6, buffer7;\n    (**(code **)PTR_DAT_08004bd4)(0xd0, 0x3b, &buffer1, 0xe);\n    temp1 = (unsigned int)buffer1;\n    temp2 = (unsigned int)buffer2 << 8;\n    temp3 = (unsigned int)buffer3 << 16;\n    temp4 = (unsigned int)buffer4 << 24;\n    temp5 = (unsigned int)buffer5 << 8 * 4;\n    temp6 = (unsigned int)buffer6 << 8 * 5;\n    output[0] = temp1 | temp2;\n    output[1] = temp3 | temp4;\n    output[2] = temp5 | temp6;\n}",
            "called": [
                "FUN_08000c10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ae0",
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "convertDataToUnsignedIntegers_08004ae0"
        },
        "FUN_08001044": {
            "renaming": {
                "FUN_08001044": "reverse_bits_08001044",
                "param_1": "input",
                "uVar1": "shift",
                "output": "output"
            },
            "code": "uint reverse_bits_08001044(uint input)\n{\n  uint output;\n  \n  if (((input & 0x80000000) != 0) || (input << 1 < 0x7f000000)) {\n    return 0;\n  }\n  uint shift = 0x1F - __builtin_clz(input);\n  if (shift < 0x1E) {\n    output = (input << 8 | 0x80000000) >> (shift + 1);\n    return output;\n  }\n  else if ((shift == 0x1E) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001044",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "reverse_bits_08001044"
        },
        "FUN_08009444": {
            "renaming": {
                "FUN_08009444": "encode_08009444",
                "param_1": "data",
                "param_2": "buffer",
                "param_3": "buffer_size",
                "iVar1": "buffer_offset_comparison",
                "iVar2": "buffer_offset",
                "iVar3": "data_offset",
                "iVar5": "buffer_size_bits",
                "iVar6": "temp_buffer_offset",
                "iVar12": "buffer_size_bits_shifted",
                "iVar13": "new_buffer_size_bits",
                "uVar4": "data_value",
                "uVar14": "carryover",
                "puVar7": "current_buffer_location",
                "puVar8": "current_data_location",
                "puVar9": "next_data_location",
                "puVar10": "end_buffer_location",
                "puVar11": "start_buffer_location"
            },
            "code": "void encode_08009444(int data, uint32_t *buffer, uint32_t buffer_size) {\n  int buffer_size_bits = (int)buffer_size >> 5;\n  buffer_size_bits += buffer[4];\n  int data_offset = buffer[1];\n  int buffer_offset = buffer[2];\n  if ((int)buffer[2] < buffer_size_bits) {\n    do {\n      buffer_offset *= 2;\n      data_offset++;\n    } while (buffer_size_bits != buffer_offset && buffer_size_bits + (-2 * buffer_offset) < 0 == SBORROW4(buffer_size_bits, buffer_offset));\n  }\n  int data_location = get_data_location(data, data_offset);\n  uint32_t *current_buffer_location = (uint32_t *)(data_location + 0x14);\n  if (0 < buffer_size_bits) {\n    uint32_t *end_buffer_location = current_buffer_location + buffer_size_bits;\n    uint32_t *current_data_location = current_buffer_location;\n    do {\n      current_data_location++;\n      *current_buffer_location = 0;\n      current_buffer_location = end_buffer_location;\n    } while (current_data_location != end_buffer_location);\n  }\n  buffer_size_bits = buffer[4];\n  uint32_t *start_buffer_location = buffer + 5;\n  buffer_size = buffer_size & 0x1f;\n  if (buffer_size == 0) {\n    current_buffer_location--;\n    uint32_t *end_buffer_location = start_buffer_location;\n    do {\n      end_buffer_location++;\n      current_buffer_location++;\n      *current_buffer_location = *end_buffer_location;\n    } while (end_buffer_location < start_buffer_location + buffer_size_bits);\n  }\n  else {\n    uint32_t carryover = 0;\n    uint32_t *end_buffer_location = start_buffer_location + buffer_size_bits;\n    uint32_t *current_data_location = start_buffer_location;\n    do {\n      current_buffer_location = current_data_location;\n      *current_buffer_location = *current_data_location << buffer_size | carryover;\n      uint32_t *next_data_location = current_data_location + 1;\n      carryover = *current_data_location >> (0x20 - buffer_size & 0xff);\n      current_data_location = next_data_location;\n    } while (current_data_location < end_buffer_location);\n    current_buffer_location[1] = carryover;\n    if (carryover != 0) {\n      buffer_size_bits += buffer_size_bits + 1;\n    }\n  }\n  int data_array_location = *(int *)(data + 0x4c);\n  int data_index = buffer[1];\n  uint32_t data_value = *(uint32_t *)(data_array_location + data_index * 4);\n  *(int *)(data_location + 0x10) = buffer_size_bits - 1;\n  *buffer = data_value;\n  *(uint32_t **)(data_array_location + data_index * 4) = buffer;\n  return;\n}",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009444",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "encode_08009444"
        },
        "FUN_080015fc": {
            "renaming": {
                "FUN_080015fc": "get_bits_from_uint_080015fc",
                "DAT_08001614": "data_ptr"
            },
            "code": "uint get_bits_from_uint_080015fc(void)\n{\n    uint DAT_08001614 = DAT_08001614 + 0xc;\n    uint shifted_data = *(uint *)DAT_08001614 >> 8;\n    uint masked_data = shifted_data & 7;\n    return masked_data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015fc",
            "calling": [
                "FUN_0800172a"
            ],
            "imported": false,
            "current_name": "get_bits_from_uint_080015fc"
        },
        "FUN_08004436": {
            "renaming": {
                "FUN_08004436": "parse_input_08004436",
                "param_1": "param_list",
                "param_2": "input_data",
                "param_3": "input_len",
                "param_4": "timeout",
                "iVar1": "i",
                "iVar2": "ret_val",
                "local_58": "input_ptr"
            },
            "code": "uint32_t parse_input_08004436(uint32_t **param_list, uint16_t *input_data, uint16_t input_len, uint32_t timeout) {\n    int32_t i;\n    int32_t ret_val;\n    uint16_t *input_ptr;\n    \n    if (*(char *)((int32_t)param_list + 0x39) == ' ') {\n        if ((input_data == NULL) || (input_len == 0)) {\n            ret_val = 1;\n        }\n        else if (*(char *)(param_list + 0xe) == '\\x01') {\n            ret_val = 2;\n        }\n        else {\n            *(undefined *)(param_list + 0xe) = 1;\n            param_list[0xf] = (uint32_t *)0;\n            *(undefined *)((int32_t)param_list + 0x39) = 0x21;\n            i = FUN_080015a0();\n            *(uint16_t *)(param_list + 9) = input_len;\n            *(uint16_t *)((int32_t)param_list + 0x26) = input_len;\n            input_ptr = input_data;\n            while (*(uint16_t *)((int32_t)param_list + 0x26) != 0) {\n                *(uint16_t *)((int32_t)param_list + 0x26) = *(uint16_t *)((int32_t)param_list + 0x26) + -1;\n                if (param_list[2] == (uint32_t *)0x1000) {\n                    do {\n                        if ((**param_list & 0x80) == 0x80) {\n                            ret_val = 0x03;\n                            goto LAB_0800454c;\n                        }\n                    } while ((timeout == 0xffffffff) || ((timeout != 0 && (ret_val = FUN_080015a0(), (uint32_t)(ret_val - i) <= timeout))));\n                    (*param_list)[3] = (*param_list)[3] & 0xfffffe5f;\n                    (*param_list)[5] = (*param_list)[5] & 0xfffffffe;\n                    *(undefined *)((int32_t)param_list + 0x39) = 0x20;\n                    *(undefined *)((int32_t)param_list + 0x3a) = 0x20;\n                    *(undefined *)(param_list + 0xe) = 0;\n                    ret_val = 0x03;\n                    goto LAB_0800454c;\n                }\n                else {\n                    do {\n                        if ((**param_list & 0x80) == 0x80) {\n                            ret_val = 0x03;\n                            goto LAB_08004614;\n                        }\n                    } while ((timeout == 0xffffffff) || ((timeout != 0 && (ret_val = FUN_080015a0(), (uint32_t)(ret_val - i) <= timeout))));\n                    (*param_list)[3] = (*param_list)[3] & 0xfffffe5f;\n                    (*param_list)[5] = (*param_list)[5] & 0xfffffffe;\n                    *(undefined *)((int32_t)param_list + 0x39) = 0x20;\n                    *(undefined *)((int32_t)param_list + 0x3a) = 0x20;\n                    *(undefined *)(param_list + 0xe) = 0;\n                    ret_val = 0x03;\n                    goto LAB_08004614;\n                }\n                LAB_0800454c:\n                if (ret_val != 0) {\n                    break;\n                }\n                (*param_list)[1] = *input_ptr & 0x1ff;\n                if (param_list[4] == (uint32_t *)0) {\n                    input_ptr = input_ptr + 1;\n                }\n                else {\n                    input_ptr = (uint16_t *)((int32_t)input_ptr + 1);\n                }\n            }\n            do {\n                if ((**param_list & 0x40) == 0x40) {\n                    ret_val = 0;\n                    goto LAB_080046c6;\n                }\n            } while ((timeout == 0xffffffff) || ((timeout != 0 && (ret_val = FUN_080015a0(), (uint32_t)(ret_val - i) <= timeout))));\n            (*param_list)[3] = (*param_list)[3] & 0xfffffe5f;\n            (*param_list)[5] = (*param_list)[5] & 0xfffffffe;\n            *(undefined *)((int32_t)param_list + 0x39) = 0x20;\n            *(undefined *)((int32_t)param_list + 0x3a) = 0x20;\n            *(undefined *)(param_list + 0xe) = 0;\n            LAB_080046c6:\n            if (ret_val != 0) {\n                *(undefined *)((int32_t)param_list + 0x39) = 0x20;\n                *(undefined *)(param_list + 0xe) = 0;\n            }\n        }\n    }\n    else {\n        ret_val = 2;\n    }\n    return ret_val;\n}",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004436",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": false,
            "current_name": "parse_input_08004436"
        },
        "FUN_08000110": {
            "renaming": {
                "FUN_08000110": "check_initialized_08000110",
                "param_1": "input_param",
                "*PTR_DAT_08000128": "*global_flag",
                "DAT_0800012c": "global_data",
                "PTR_FUN_08000130": "global_function_ptr"
            },
            "code": "undefined * check_initialized_08000110(undefined *input_param)\\n{\\n  if (*PTR_DAT_08000128 == \"\\0\") {\\n    if (DAT_0800012c != 0) {\\n      input_param = PTR_FUN_08000130;\\n    }\\n    *PTR_DAT_08000128 = 1;\\n  }\\n  return input_param;\\n}",
            "called": [
                "FUN_08009e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000110",
            "calling": [],
            "imported": false,
            "current_name": "check_initialized_08000110"
        },
        "FUN_08003504": {
            "renaming": {
                "FUN_08003504": "get_data_from_pointer_08003504",
                "PTR_DAT_08003514": "PTR_DATA"
            },
            "code": "int get_data_from_pointer_08003504() {\n  int* data_pointer = PTR_DAT_08003514;\n  return *data_pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003504",
            "calling": [
                "FUN_080052a0",
                "FUN_08003518",
                "FUN_08003540"
            ],
            "imported": false,
            "current_name": "get_data_from_pointer_08003504"
        },
        "FUN_08000aa4": {
            "renaming": {
                "FUN_08000aa4": "FUNC_08000aa4"
            },
            "code": "\nuint FUNC_08000aa4(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000bde:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_08000bde;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000aa4",
            "calling": [
                "FUN_08004bd8",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "FUNC_08000aa4"
        },
        "FUN_08004ee8": {
            "renaming": {
                "FUN_08004ee8": "process_data_08004ee8",
                "param_1": "data_ptr",
                "param_2": "buffer_ptr",
                "param_3": "flag",
                "param_4": "size",
                "PTR_DAT_08004f28": "func_data_ptr",
                "PTR_DAT_08004f24": "func_config_ptr",
                "undefined4": "int",
                "undefined2": "short"
            },
            "code": "void process_data_08004ee8(void* data_ptr, void* buffer_ptr, int flag, int size, short* data_array, int* config_ptr) {\n    call_func_with_params(PTR_DAT_08004f28, data_ptr, buffer_ptr, flag, size, data_array, *(int*)PTR_DAT_08004f24);\n    return;\n}",
            "called": [
                "FUN_08001f6c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ee8",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08004ee8"
        },
        "FUN_080094f8": {
            "renaming": {
                "FUN_080094f8": "compare_arrays_080094f8",
                "param_1": "arr1",
                "param_2": "arr2",
                "iVar1": "diff",
                "puVar2": "ptr2",
                "iVar3": "arr_length",
                "puVar4": "ptr1"
            },
            "code": "int compare_arrays_080094f8(int* arr1, int* arr2, int arr_length){\n  int diff = *(arr1 + arr_length) - *(arr2 + arr_length);\n  if (diff == 0) {\n    int* ptr1 = arr1 + arr_length - 1;\n    int* ptr2 = arr2 + arr_length - 1;\n    while (ptr1 >= arr1 + 4) {\n      if (*ptr1 != *ptr2) {\n        if (*ptr2 <= *ptr1) {\n          return 1;\n        }\n        return -1;\n      }\n      ptr1--;\n      ptr2--;\n    }\n  }\n  return diff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080094f8",
            "calling": [
                "FUN_080078c0",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "compare_arrays_080094f8"
        },
        "FUN_08000998": {
            "renaming": {
                "FUN_08000998": "is_input_not_null_08000998",
                "in_ZR": "input_char",
                "FUN_08000988": "call_function_to_initialize_input"
            },
            "code": "bool is_input_not_null_08000998(void)\n{\n  char input_char;\n  call_function_to_initialize_input();\n  return input_char != '\\0';\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "is_input_not_null_08000998"
        },
        "FUN_08000aa8": {
            "renaming": {
                "FUN_08000aa8": "FUNC_08000aa8"
            },
            "code": "\nuint FUNC_08000aa8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08000bde:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_08000bde;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000aa8",
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "FUNC_08000aa8"
        },
        "FUN_080009ac": {
            "renaming": {
                "FUN_080009ac": "is_end_of_string_080009ac",
                "in_CY": "input_char",
                "FUN_08000988": "get_next_char"
            },
            "code": "bool is_end_of_string_080009ac(void)\n{\n  char input_char;\n  input_char = get_next_char();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009ac",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "is_end_of_string_080009ac"
        },
        "FUN_08000fc8": {
            "renaming": {
                "FUN_08000fc8": "copy_parameter_to_destination_08000fc8",
                "param_1": "destination",
                "param_2": "parameter",
                "FUN_08000fd0": "memcpy"
            },
            "code": "void copy_parameter_to_destination_08000fc8(void* destination, void* parameter)\n{\n  memcpy(destination, parameter, sizeof(parameter));\n  return;\n}",
            "called": [
                "FUN_08000fd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fc8",
            "calling": [
                "FUN_08001030"
            ],
            "imported": false,
            "current_name": "copy_parameter_to_destination_08000fc8"
        },
        "FUN_08001cb8": {
            "renaming": {
                "FUN_08001cb8": "do_nothing_08001cb8"
            },
            "code": "\nvoid do_nothing_08001cb8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cb8",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "do_nothing_08001cb8"
        },
        "FUN_0800438a": {
            "renaming": {
                "FUN_0800438a": "check_valid_input_0800438a",
                "param_1": "input_ptr",
                "uVar1": "result",
                "input_char": "input_character"
            },
            "code": "int check_valid_input_0800438a(int *input_ptr) {\n    int result = 0;\n    if (input_ptr == NULL) {\n        result = 1;\n    }\n    else {\n        char input_char = *(char *)(input_ptr + 0x39);\n        if (input_char == '\\0') {\n            *(unsigned char *)(input_ptr + 0xe) = 0;\n            do_nothing_08004424(input_ptr);\n        }\n        *(unsigned char *)((int)input_ptr + 0x39) = 0x24;\n        *(unsigned int *)(*input_ptr + 0xc) &= 0xffffdfff;\n        FUN_080046ec(input_ptr);\n        *(unsigned int *)(*input_ptr + 0x10) &= 0xffffb7ff;\n        *(unsigned int *)(*input_ptr + 0x14) &= 0xffffffd5;\n        *(unsigned int *)(*input_ptr + 0xc) |= 0x2000;\n        input_ptr[0xf] = 0;\n        *(unsigned char *)((int)input_ptr + 0x39) = 0x20;\n        *(unsigned char *)((int)input_ptr + 0x3a) = 0x20;\n    }\n    return result;\n}",
            "called": [
                "FUN_08004424",
                "FUN_080046ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800438a",
            "calling": [
                "FUN_08005598"
            ],
            "imported": false,
            "current_name": "check_valid_input_0800438a"
        },
        "FUN_080014f0": {
            "renaming": {
                "FUN_080014f0": "set_flag_and_call_functions_080014f0",
                "DAT_08001518": "flag_ptr",
                "FUN_08001714": "call_function_1",
                "FUN_0800151c": "call_function_2",
                "do_nothing_08002d8a": "do_nothing"
            },
            "code": "int set_flag_and_call_functions_080014f0() {\n  int* DAT_08001518 = &flag;\n  *DAT_08001518 |= 0x10;\n  call_function_1(3);\n  call_function_2(0xf);\n  do_nothing();\n  return 0;\n}",
            "called": [
                "FUN_08002d8a",
                "FUN_0800151c",
                "FUN_08001714"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014f0",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_flag_and_call_functions_080014f0"
        },
        "FUN_08003908": {
            "renaming": {
                "FUN_08003908": "set_param_value_08003908",
                "param_1": "param_ptr",
                "param_2": "param_len",
                "param_3": "param_value",
                "uVar1": "return_value"
            },
            "code": "int set_param_value_08003908(int *param_ptr, int param_len, int param_value)\n{\n    int return_value;\n    if (*(char *)(param_ptr + 0xf) == '\\x01') {\n        return_value = 2;\n    }\n    else {\n        *(char *)(param_ptr + 0xf) = 1;\n        *(char *)((int)param_ptr + 0x3d) = 2;\n        switch(param_len) {\n            case 0:\n                set_param_value_08003908_0(*param_ptr, param_value);\n                *(uint *)(*param_ptr + 0x18) |= 8;\n                *(uint *)(*param_ptr + 0x18) &= 0xfffffffb;\n                *(uint *)(*param_ptr + 0x18) |= *(uint *)(param_value + 0x10);\n                break;\n            case 4:\n                set_param_value_08003908_4(*param_ptr, param_value);\n                *(uint *)(*param_ptr + 0x18) |= 0x800;\n                *(uint *)(*param_ptr + 0x18) &= 0xfffffbff;\n                *(uint *)(*param_ptr + 0x18) |= *(int *)(param_value + 0x10) << 8;\n                break;\n            case 8:\n                set_param_value_08003908_8(*param_ptr, param_value);\n                *(uint *)(*param_ptr + 0x1c) |= 8;\n                *(uint *)(*param_ptr + 0x1c) &= 0xfffffffb;\n                *(uint *)(*param_ptr + 0x1c) |= *(uint *)(param_value + 0x10);\n                break;\n            case 12:\n                set_param_value_08003908_c(*param_ptr, param_value);\n                *(uint *)(*param_ptr + 0x1c) |= 0x800;\n                *(uint *)(*param_ptr + 0x1c) &= 0xfffffbff;\n                *(uint *)(*param_ptr + 0x1c) |= *(int *)(param_value + 0x10) << 8;\n                break;\n        }\n        *(char *)((int)param_ptr + 0x3d) = 1;\n        *(char *)(param_ptr + 0xf) = 0;\n        return_value = 0;\n    }\n    return return_value;\n}",
            "called": [
                "FUN_08003f18",
                "FUN_08003d60",
                "FUN_08003ff8",
                "FUN_08003e38"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003908",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "set_param_value_08003908"
        },
        "FUN_08004f60": {
            "renaming": {
                "FUN_08004f60": "initialize_data_buffer_08004f60",
                "PTR_DAT_08004f74": "data_buffer",
                "0": "start_index",
                "0x40": "size",
                "FUN_08005d68": "memset"
            },
            "code": "void initialize_data_buffer_08004f60(void)\n{\n  // Initialize data buffer with 0s\n  memset(PTR_DAT_08004f74, 0, DATA_BUFFER_SIZE);\n  return;\n}",
            "called": [
                "FUN_08005d68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f60",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "initialize_data_buffer_08004f60"
        },
        "FUN_080009c0": {
            "renaming": {
                "FUN_080009c0": "is_CY_false_or_ZR_true_080009c0",
                "in_ZR": "zero",
                "in_CY": "carry"
            },
            "code": "bool is_CY_false_or_ZR_true_080009c0(void)\n{\n  undefined zero = 0;\n  undefined carry = 0;\n  FUN_08000988();\n  return !(bool)carry || (bool)zero;\n}",
            "called": [
                "FUN_08000988"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c0",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "is_CY_false_or_ZR_true_080009c0"
        },
        "FUN_08001170": {
            "renaming": {
                "FUN_08001170": "is_parameters_valid_08001170",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "shifted_input_2": "shifted_input_2",
                "shifted_input_4": "shifted_input_4",
                "DAT_08004a80": "shifted_input_2_mask",
                "DAT_08004a84": "shifted_input_4_mask"
            },
            "code": "int is_parameters_valid_08001170(uint32_t input_1, int32_t input_2, uint32_t input_3, int32_t input_4) {\n\tint32_t shifted_input_2 = input_2 << 1;\n\tint32_t shifted_input_4 = input_4 << 1;\n\tint32_t DAT_08004a80 = shifted_input_2 >> 0x15;\n\tint32_t DAT_08004a84 = shifted_input_4 >> 0x15;\n\tif ((DAT_08004a80 != -1 || (input_1 | (input_2 << 0xc)) == 0) && (DAT_08004a84 != -1 || (input_3 | (input_4 << 0xc)) == 0)) {\n\t\treturn 0;\n\t}\n\treturn 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001170",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "is_parameters_valid_08001170"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "process_data_08003f18",
                "param_1": "data",
                "param_2": "config_data",
                "uVar1": "local_var2",
                "uVar2": "local_var3",
                "local_10": "local_var1",
                "bitmask1": "bitmask1",
                "bitmask2": "bitmask2",
                "bitmask3": "bitmask3",
                "bitmask4": "bitmask4",
                "DAT_08003ff4": "DAT_08003ff4"
            },
            "code": "void process_data_08003f18(int data,uint *config_data)\n{\n  uint bitmask1 = 0xfffffeff;\n  uint bitmask2 = 0xfffffdff;\n  uint bitmask3 = 0xfffff7ff;\n  uint bitmask4 = 0xfffffbff;\n  uint local_var1;\n  uint local_var2;\n  uint local_var3;\n  uint local_var4;\n  uint local_var5;\n\n  *(uint *)(data + 0x20) = *(uint *)(data + 0x20) & bitmask1;\n  local_var1 = *(uint *)(data + 4);\n  local_var2 = *config_data;\n  local_var3 = config_data[2] << 8 | *(uint *)(data + 0x20) & bitmask2;\n  if (data == DAT_08003ff4) {\n    local_var3 = (config_data[3] << 8 | local_var3 & bitmask3) & bitmask4;\n    local_var1 = config_data[6] << 4 | config_data[5] << 4 | local_var1 & 0xffffcfff;\n  }\n  *(uint *)(data + 4) = local_var1;\n  *(uint *)(data + 0x1c) = local_var2 | *(uint *)(data + 0x1c) & 0xffffff8c;\n  *(uint *)(data + 0x3c) = config_data[1];\n  *(uint *)(data + 0x20) = local_var3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "FUN_08003908"
            ],
            "imported": false,
            "current_name": "process_data_08003f18"
        },
        "FUN_080097cc": {
            "renaming": {
                "FUN_080097cc": "process_data_080097cc",
                "param_1": "output_buffer",
                "param_2": "input_buffer",
                "param_3": "input_buffer_end",
                "iVar1": "input_buffer_start",
                "uVar2": "processed_data_size",
                "iVar3": "data_offset",
                "iVar4": "new_buffer_size",
                "uVar5": "input_buffer_size",
                "uVar6": "next_data_size",
                "puVar7": "current_data",
                "puVar8": "current_data",
                "uVar9": "data_to_process",
                "FUNC_08008af8": "allocate_memory",
                "FUNC_08009adc": "allocate_memory_size",
                "FUN_08001084": "copy_data",
                "FUN_080088ec": "copy_data"
            },
            "code": "int process_data_080097cc(unsigned int *output_buffer, int *input_buffer, int *input_buffer_end)\n{\n  int input_buffer_start = *input_buffer;\n  unsigned int input_buffer_size = input_buffer[2];\n  unsigned int processed_data_size = 0;\n  unsigned int next_data_size = 0;\n  unsigned int new_input_buffer_size = 0;\n  unsigned int data_size_to_process = 0;\n  unsigned int *current_data = (unsigned int *)*input_buffer_end;\n  while (input_buffer_size != 0) {\n    while (*current_data == 0) {\n      current_data += 2;\n      next_data_size = current_data[1];\n    }\n    if ((next_data_size <= input_buffer_size) && ((*(unsigned short *)(input_buffer + 3) & 0x480) != 0)) {\n      int data_offset = input_buffer_start - input_buffer[4];\n      unsigned int new_buffer_size = (input_buffer[5] * 3) / 2;\n      data_size_to_process = next_data_size + 1 + data_offset;\n      if (new_buffer_size < data_size_to_process) {\n        new_buffer_size = data_size_to_process;\n      }\n      if ((int)((unsigned int)*(unsigned short *)(input_buffer + 3) << 0x15) < 0) {\n        int new_output_buffer = allocate_memory(output_buffer, new_buffer_size);\n        if (new_output_buffer == 0) {\n          *output_buffer = 0xc;\n          *(unsigned short *)(input_buffer + 3) = *(unsigned short *)(input_buffer + 3) | 0x40;\n          input_buffer_end[1] = 0;\n          input_buffer_end[2] = 0;\n          return 0xffffffff;\n        }\n        copy_data(new_output_buffer, input_buffer[4], data_offset);\n        *(unsigned short *)(input_buffer + 3) = *(unsigned short *)(input_buffer + 3) & 0xfb7f | 0x80;\n      }\n      else {\n        int new_output_buffer = allocate_memory(output_buffer, new_buffer_size);\n        if (new_output_buffer == 0) {\n          copy_data(output_buffer, input_buffer[4], data_offset);\n          *output_buffer = 0xc;\n          *(unsigned short *)(input_buffer + 3) = *(unsigned short *)(input_buffer + 3) | 0x40;\n          input_buffer_end[1] = 0;\n          input_buffer_end[2] = 0;\n          return 0xffffffff;\n        }\n      }\n      input_buffer_start = input_buffer[4] + data_offset + allocate_memory_size(output_buffer, 0);\n      input_buffer[5] = new_buffer_size;\n      input_buffer[4] = allocate_memory(output_buffer, 0) + data_offset;\n      *input_buffer = input_buffer_start;\n      input_buffer[2] = new_buffer_size - data_offset;\n      next_data_size = next_data_size;\n    }\n    copy_data(output_buffer, *current_data, next_data_size);\n    processed_data_size = input_buffer_end[2];\n    input_buffer_size = input_buffer[2] - next_data_size;\n    input_buffer_start += next_data_size;\n    input_buffer[2] = input_buffer_size;\n    input_buffer_end[2] = processed_data_size - next_data_size;\n    current_data += 2;\n  }\n  input_buffer_end[1] = 0;\n  return 0;\n}",
            "called": [
                "FUN_08009a18",
                "FUN_08001084",
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_08008af8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080097cc",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "process_data_080097cc"
        },
        "FUN_08001f6c": {
            "renaming": {
                "FUN_08001f6c": "FUNC_08001f6c"
            },
            "code": "\nundefined4\nFUNC_08001f6c(uint **param_1,undefined2 param_2,undefined2 param_3,undefined2 param_4,uint *param_5,\n            undefined2 param_6,uint param_7)\n\n{\n  int iVar1;\n  uint uVar2;\n  char cVar3;\n  uint uVar4;\n  int iVar5;\n  undefined4 uVar6;\n  uint *puVar7;\n  bool bVar8;\n  \n  iVar1 = FUN_080015a0();\n  uVar2 = DAT_080021e0;\n  if (*(char *)((int)param_1 + 0x3d) == ' ') {\n    do {\n      if ((uVar2 >> 0x10 & 0xff) == 1) {\n        uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n        bVar8 = uVar4 == 0;\n        if (bVar8) {\n          uVar4 = 1;\n        }\n        cVar3 = (char)uVar4;\n        if (!bVar8) {\n          cVar3 = '\\0';\n        }\n      }\n      else {\n        uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n        bVar8 = uVar4 == 0;\n        if (bVar8) {\n          uVar4 = 1;\n        }\n        cVar3 = (char)uVar4;\n        if (!bVar8) {\n          cVar3 = '\\0';\n        }\n      }\n      if (cVar3 != '\\x01') {\n        iVar5 = 0;\n        goto LAB_08002040;\n      }\n      iVar5 = FUN_080015a0();\n    } while ((uint)(iVar5 - iVar1) < 0x1a);\n    param_1[0xc] = (uint *)0x0;\n    *(undefined *)((int)param_1 + 0x3d) = 0x20;\n    *(undefined *)((int)param_1 + 0x3e) = 0;\n    *(undefined *)(param_1 + 0xf) = 0;\n    iVar5 = 3;\nLAB_08002040:\n    if (iVar5 == 0) {\n      if (*(char *)(param_1 + 0xf) == '\\x01') {\n        uVar6 = 2;\n      }\n      else {\n        *(undefined *)(param_1 + 0xf) = 1;\n        if ((**param_1 & 1) != 1) {\n          **param_1 = **param_1 | 1;\n        }\n        **param_1 = **param_1 & 0xfffff7ff;\n        *(undefined *)((int)param_1 + 0x3d) = 0x22;\n        *(undefined *)((int)param_1 + 0x3e) = 0x40;\n        param_1[0x10] = (uint *)0x0;\n        param_1[9] = param_5;\n        *(undefined2 *)((int)param_1 + 0x2a) = param_6;\n        param_1[0xb] = DAT_080021e4;\n        *(undefined2 *)(param_1 + 10) = *(undefined2 *)((int)param_1 + 0x2a);\n        iVar5 = FUN_080027f4(param_1,param_2,param_3,param_4,param_7,iVar1);\n        if (iVar5 == 0) {\n          if (*(short *)(param_1 + 10) == 0) {\n            **param_1 = **param_1 | 0x200;\n          }\n          else if (*(short *)(param_1 + 10) == 1) {\n            **param_1 = **param_1 & 0xfffffbff;\n            disableIRQinterrupts();\n            **param_1 = **param_1 | 0x200;\n            enableIRQinterrupts();\n          }\n          else if (*(short *)(param_1 + 10) == 2) {\n            **param_1 = **param_1 | 0x800;\n            disableIRQinterrupts();\n            **param_1 = **param_1 & 0xfffffbff;\n            enableIRQinterrupts();\n          }\n          else {\n            **param_1 = **param_1 | 0x400;\n          }\n          while (uVar2 = DAT_080024bc, *(short *)(param_1 + 10) != 0) {\n            if (*(ushort *)(param_1 + 10) < 4) {\n              if (*(short *)(param_1 + 10) == 1) {\n                iVar5 = FUN_08002ca8(param_1,param_7,iVar1);\n                if (iVar5 != 0) {\n                  if (param_1[0x10] == (uint *)0x20) {\n                    return 3;\n                  }\n                  return 1;\n                }\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n              else if (*(short *)(param_1 + 10) == 2) {\n                do {\n                  if ((uVar2 >> 0x10 & 0xff) == 1) {\n                    uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  if (cVar3 != '\\0') {\n                    iVar5 = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (iVar5 = FUN_080015a0(), (uint)(iVar5 - iVar1) <= param_7)\n                         )));\n                param_1[0xc] = (uint *)0x0;\n                *(undefined *)((int)param_1 + 0x3d) = 0x20;\n                *(undefined *)((int)param_1 + 0x3e) = 0;\n                *(undefined *)(param_1 + 0xf) = 0;\n                iVar5 = 3;\nLAB_080022fa:\n                if (iVar5 != 0) {\n                  return 3;\n                }\n                disableIRQinterrupts();\n                **param_1 = **param_1 | 0x200;\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n                enableIRQinterrupts();\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n              else {\n                do {\n                  if ((uVar2 >> 0x10 & 0xff) == 1) {\n                    uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  if (cVar3 != '\\0') {\n                    iVar5 = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (iVar5 = FUN_080015a0(), (uint)(iVar5 - iVar1) <= param_7)\n                         )));\n                param_1[0xc] = (uint *)0x0;\n                *(undefined *)((int)param_1 + 0x3d) = 0x20;\n                *(undefined *)((int)param_1 + 0x3e) = 0;\n                *(undefined *)(param_1 + 0xf) = 0;\n                iVar5 = 3;\nLAB_08002418:\n                if (iVar5 != 0) {\n                  return 3;\n                }\n                **param_1 = **param_1 & 0xfffffbff;\n                disableIRQinterrupts();\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n                uVar2 = DAT_080024bc;\n                do {\n                  if ((uVar2 >> 0x10 & 0xff) == 1) {\n                    uVar4 = uVar2 & ~(*param_1)[5] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  else {\n                    uVar4 = uVar2 & ~(*param_1)[6] & 0xffff;\n                    bVar8 = uVar4 == 0;\n                    if (bVar8) {\n                      uVar4 = 1;\n                    }\n                    cVar3 = (char)uVar4;\n                    if (!bVar8) {\n                      cVar3 = '\\0';\n                    }\n                  }\n                  if (cVar3 != '\\0') {\n                    iVar5 = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((param_7 == 0xffffffff) ||\n                        ((param_7 != 0 && (iVar5 = FUN_080015a0(), (uint)(iVar5 - iVar1) <= param_7)\n                         )));\n                param_1[0xc] = (uint *)0x0;\n                *(undefined *)((int)param_1 + 0x3d) = 0x20;\n                *(undefined *)((int)param_1 + 0x3e) = 0;\n                *(undefined *)(param_1 + 0xf) = 0;\n                iVar5 = 3;\nLAB_0800250a:\n                if (iVar5 != 0) {\n                  return 3;\n                }\n                **param_1 = **param_1 | 0x200;\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n                enableIRQinterrupts();\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n            }\n            else {\n              iVar5 = FUN_08002ca8(param_1,param_7,iVar1);\n              if (iVar5 != 0) {\n                if (param_1[0x10] == (uint *)0x20) {\n                  return 3;\n                }\n                return 1;\n              }\n              uVar2 = (*param_1)[4];\n              puVar7 = param_1[9];\n              param_1[9] = (uint *)((int)puVar7 + 1);\n              *(char *)puVar7 = (char)uVar2;\n              *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n              *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              if (((*param_1)[5] & 4) == 4) {\n                uVar2 = (*param_1)[4];\n                puVar7 = param_1[9];\n                param_1[9] = (uint *)((int)puVar7 + 1);\n                *(char *)puVar7 = (char)uVar2;\n                *(short *)(param_1 + 10) = *(short *)(param_1 + 10) + -1;\n                *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n              }\n            }\n          }\n          *(undefined *)((int)param_1 + 0x3d) = 0x20;\n          *(undefined *)((int)param_1 + 0x3e) = 0;\n          *(undefined *)(param_1 + 0xf) = 0;\n          uVar6 = 0;\n        }\n        else if (param_1[0x10] == (uint *)0x4) {\n          *(undefined *)(param_1 + 0xf) = 0;\n          uVar6 = 1;\n        }\n        else {\n          *(undefined *)(param_1 + 0xf) = 0;\n          uVar6 = 3;\n        }\n      }\n    }\n    else {\n      uVar6 = 2;\n    }\n  }\n  else {\n    uVar6 = 2;\n  }\n  return uVar6;\n}\n\n",
            "called": [
                "FUN_080015a0",
                "FUN_08002ca8",
                "FUN_080027f4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001f6c",
            "calling": [
                "FUN_08004ee8"
            ],
            "imported": false,
            "current_name": "FUNC_08001f6c"
        },
        "FUN_08002ad8": {
            "renaming": {
                "FUN_08002ad8": "check_value_08002ad8",
                "param_1": "values",
                "param_2": "value",
                "param_3": "max_iterations",
                "param_4": "comparison_value",
                "iVar1": "iteration_result",
                "cVar2": "value_char",
                "uVar3": "value_masked",
                "bVar4": "is_valid_value",
                "bitmask": "value_mask",
                "*param_1": "*values",
                "(*param_1)[5]": "(*values)[5]",
                "(*param_1)[6]": "(*values)[6]",
                "param_1[0x10]": "values[0x10]",
                "param_1[0xc]": "values[0xc]",
                "(int)param_1 + 0x3d": "(int)values + 0x3d",
                "param_1 + 0xf": "values + 0xf",
                "0xfffffbff": "0b11111111111111111111101111111111",
                "0x400": "0b10000000000",
                "0x200": "0b1000000000",
                "0x20": "0b100000"
            },
            "code": "uint32_t check_value_08002ad8(uint32_t **values, uint32_t value, uint32_t max_iterations, int comparison_value)\\n\\\n    {\\n\\\n        int iteration_count;\\n\\\n        bool is_valid_value;\\n\\\n        uint32_t bitmask;\\n\\\n        uint32_t *ptr_to_value_array = *values;\\n\\\n        uint32_t value_mask = (ptr_to_value_array[5] & 0xff);\\n\\\n        uint32_t value_masked = value & ~(ptr_to_value_array[value_mask]);\\n\\\n        uint32_t value_bit = (value_masked != 0) ? 1 : 0;\\n\\\n        char value_char = (char)value_bit;\\n\\\n        if (value_masked == 0)\\n\\\n        {\\n\\\n            return 0;\\n\\\n        }\\n\\\n        if ((ptr_to_value_array[5] & 0x400) == 0x400)\\n\\\n        {\\n\\\n            **values |= 0x200;\\n\\\n            ptr_to_value_array[5] = 0xfffffbff;\\n\\\n            values[0x10] = (uint32_t*)0x4;\\n\\\n            values[0xc] = (uint32_t*)0x0;\\n\\\n            *(undefined *)((int)values + 0x3d) = 0x20;\\n\\\n            *(undefined *)(values + 0xf) = 0;\\n\\\n            return 1;\\n\\\n        }\\n\\\n        iteration_count = 0;\\n\\\n        while ((max_iterations == 0xffffffff) || ((max_iterations != 0) && ((iteration_count = FUN_080015a0(), (uint32_t)(iteration_count - comparison_value) <= max_iterations))))\\n\\\n        {\\n\\\n            value_mask = (ptr_to_value_array[6] & 0xff);\\n\\\n            value_masked = value & ~(ptr_to_value_array[value_mask]);\\n\\\n            value_bit = (value_masked != 0) ? 1 : 0;\\n\\\n            value_char = (char)value_bit;\\n\\\n            if (value_char == \"\\0\")\\n\\\n            {\\n\\\n                break;\\n\\\n            }\\n\\\n        }\\n\\\n        values[0xc] = (uint32_t*)0x0;\\n\\\n        *(undefined *)((int)values + 0x3d) = 0x20;\\n\\\n        *(undefined *)(values + 0xf) = 0;\\n\\\n        return 3;\\n\\\n    }",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "FUN_08002640",
                "FUN_080027f4"
            ],
            "imported": false,
            "current_name": "check_value_08002ad8"
        },
        "FUN_08000fd0": {
            "renaming": {
                "FUN_08000fd0": "combine_two_numbers_into_long_long_variable_08000fd0",
                "param_1": "num1",
                "param_2": "num2",
                "FUN_08000f68": "call_function_to_initialize_something"
            },
            "code": "undefined8 combine_two_numbers_into_long_long_variable_08000fd0(undefined4 num1, undefined4 num2)\n{\n  call_function_to_initialize_something();\n  return CONCAT44(num2, num1);\n}",
            "called": [
                "FUN_08000f68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fd0",
            "calling": [
                "FUN_08000ff4",
                "FUN_08000fc8"
            ],
            "imported": false,
            "current_name": "combine_two_numbers_into_long_long_variable_08000fd0"
        },
        "FUN_08003d60": {
            "renaming": {
                "FUN_08003d60": "set_flags_and_values_08003d60",
                "param_1": "address",
                "param_2": "values",
                "uVar1": "value1",
                "uVar2": "value2",
                "local_10": "local_value"
            },
            "code": "void set_flags_and_values_08003d60(int address, uint *values) {\n  uint value1;\n  uint value2;\n  uint local_value;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xfffffffe;\n  local_value = *(uint *)(address + 4);\n  value1 = *values;\n  value2 = values[2] | *(uint *)(address + 0x20) & 0xfffffffd;\n  if (address == DAT_08003e34) {\n    value2 = (values[3] | value2 & 0xfffffff7) & 0xfffffffb;\n    local_value = values[6] | values[5] | local_value & 0xfffffcff;\n  }\n  *(uint *)(address + 4) = local_value;\n  *(uint *)(address + 0x18) = value1 | *(uint *)(address + 0x18) & 0xffffff8c;\n  *(uint *)(address + 0x34) = values[1];\n  *(uint *)(address + 0x20) = value2;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d60",
            "calling": [
                "FUN_08003908"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_08003d60"
        },
        "FUN_08009e68": {
            "renaming": {
                "FUN_08009e68": "do_nothing_08009e68"
            },
            "code": "\nvoid do_nothing_08009e68(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e68",
            "calling": [
                "FUN_08000110",
                "FUN_08000134",
                "FUN_08005d20"
            ],
            "imported": false,
            "current_name": "do_nothing_08009e68"
        },
        "FUN_08003518": {
            "renaming": {
                "FUN_08003518": "calculate_shifted_value_08003518",
                "uVar1": "shifted_value",
                "PTR_DAT_0800353c": "shift_array",
                "DAT_08003538": "data_array"
            },
            "code": "uint calculate_shifted_value_08003518(void)\n{\n  uint shifted_value;\n  uint index = *(uint *)(DAT_08003538 + 4) >> 8 & 7;\n  shifted_value = FUN_08003504();\n  return shifted_value >> PTR_DAT_0800353c[index];\n}",
            "called": [
                "FUN_08003504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003518",
            "calling": [
                "FUN_08001ab0",
                "FUN_080046ec"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08003518"
        },
        "FUN_08001618": {
            "renaming": {
                "FUN_08001618": "write_data_to_memory_08001618",
                "param_1": "address",
                "param_2": "data",
                "DAT_08001664": "data_memory_start_address",
                "DAT_08001668": "data_memory_start_address"
            },
            "code": "void write_data_to_memory_08001618(byte address, uint8_t data) {\n    if (address < 0) {\n        *(char *)((address & 0xf) + DAT_08001664 + 0x14) = (char)((data & 0xff) << 4);\n    }\n    else {\n        *(char *)((char)address + DAT_08001664 + 0x300) = (char)((data & 0xff) << 4);\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001618",
            "calling": [
                "FUN_0800172a",
                "FUN_080016d0"
            ],
            "imported": false,
            "current_name": "write_data_to_memory_08001618"
        },
        "FUN_080091a4": {
            "renaming": {
                "FUN_080091a4": "count_bits_set_to_one_080091a4",
                "param_1": "input",
                "iVar1": "bit_count"
            },
            "code": "int count_bits_set_to_one_080091a4(uint32_t input) {\n    int bit_count = 0;\n    if ((input & 0xffff0000) == 0) {\n        input = input << 0x10;\n        bit_count = 0x10;\n    }\n    if ((input & 0xff000000) == 0) {\n        input = input << 8;\n        bit_count += 8;\n    }\n    if ((input & 0xf0000000) == 0) {\n        input = input << 4;\n        bit_count += 4;\n    }\n    if ((input & 0xc0000000) == 0) {\n        input = input << 2;\n        bit_count += 2;\n    }\n    if ((int)input >= 0) {\n        if ((int)(input << 1) < 0) {\n            return bit_count + 1;\n        }\n        bit_count = 0x20;\n    }\n    return bit_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091a4",
            "calling": [
                "FUN_08009630",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "count_bits_set_to_one_080091a4"
        },
        "FUN_08004f78": {
            "renaming": {
                "FUN_08004f78": "process_audio_data_08004f78",
                "FUN_08004ae0": "initialize_audio",
                "FUN_08004bd8": "load_pitch_data",
                "FUN_08004f60": "get_audio_data",
                "FUN_08005dfc": "process_data",
                "FUN_08004f3c": "function1",
                "FUNC_08000aa4": "function2",
                "FUNC_08000cb8": "function3",
                "FUN_08000aa8": "function4",
                "FUN_08000c10": "function5",
                "FUN_08000ff4": "function6",
                "FUN_08001030": "function7",
                "FUN_08000c08": "function8",
                "FUN_08001044": "function9",
                "FUN_08001a80": "function10",
                "DAT_0800521c": "function11",
                "PTR_DAT_080051e0": "audio_data_pointer",
                "PTR_DAT_080051e4": "pitch_data_pointer",
                "PTR_DAT_080051ec": "processed_data_pointer",
                "PTR_DAT_080051f0": "function1_parameter1_pointer",
                "PTR_DAT_080051f4": "function1_result_pointer",
                "PTR_DAT_080051f8": "function2_parameter1_pointer",
                "PTR_DAT_080051fc": "function2_result_pointer",
                "PTR_DAT_08005200": "function3_parameter1_pointer",
                "PTR_DAT_08005204": "function3_result_pointer",
                "PTR_DAT_08005208": "function4_pointer",
                "PTR_DAT_0800520c": "function8_pointer",
                "PTR_DAT_08005210": "output_data_pointer",
                "PTR_DAT_08005214": "output_data_result_pointer",
                "PTR_DAT_08005218": "function3_result2_pointer",
                "PTR_DAT_08005220": "audio_output_pointer"
            },
            "code": "void process_audio_data_08004f78(void)\n{\n    initialize_audio();\n    load_pitch_data();\n    uint32_t audio_data = get_audio_data();\n    uint32_t processed_data = process_data(audio_data);\n    uint32_t result1 = function1(processed_data);\n    uint32_t result2 = function2(result1);\n    uint32_t result3 = function3(result1, result2);\n    uint32_t result4 = function4(result3);\n    uint32_t result5 = function5(result4);\n    uint32_t result6 = function6(result5);\n    uint32_t result7 = function7(result6);\n    uint32_t result8 = function8(result7);\n    uint32_t result9 = function9(result8);\n    uint32_t result10 = function10(result9);\n    uint32_t result11 = DAT_0800521c(result10);\n    uint32_t result12 = function12(result11);\n    uint32_t result13 = function13(result12);\n    uint32_t result14 = function14(result13);\n    uint32_t result15 = function15(result14);\n    uint32_t result16 = function16(result15);\n    set_output_data(result16);\n}\n",
            "called": [
                "FUN_08004ae0",
                "FUN_08000418",
                "FUN_08004f60",
                "FUN_08000aa8",
                "FUN_08001a80",
                "FUN_08000ff4",
                "FUN_08001030",
                "FUN_08000cb8",
                "FUN_08001044",
                "FUN_08000aa4",
                "FUN_08005dfc",
                "FUN_08004bd8",
                "FUN_08000c10",
                "FUN_08000c08",
                "FUN_08005e40",
                "FUN_08004f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f78",
            "calling": [
                "FUN_080036f8",
                "FUN_080017b4"
            ],
            "imported": false,
            "current_name": "process_audio_data_08004f78"
        },
        "FUN_080015a0": {
            "renaming": {
                "FUN_080015a0": "getValueFromPointer_080015a0",
                "PTR_DAT_080015b0": "pointer"
            },
            "code": "getValueFromPointer_080015a0() {\n    int *PTR_DAT_080015b0 = PTR_DAT_080015b0;\n    return *PTR_DAT_080015b0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015a0",
            "calling": [
                "FUN_08002d98",
                "FUN_08002640",
                "FUN_08004436",
                "FUN_08001ccc",
                "FUN_08002c2e",
                "FUN_08001f6c",
                "FUN_080027f4",
                "FUN_08002ca8",
                "FUN_08002ad8",
                "FUN_08004f2c",
                "FUN_08003260",
                "FUN_08002bb4"
            ],
            "imported": false,
            "current_name": "getValueFromPointer_080015a0"
        },
        "FUN_08002d98": {
            "renaming": {
                "FUN_08002d98": "FUNC_08002d98"
            },
            "code": "\nundefined4 FUNC_08002d98(uint *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined4 uVar3;\n  bool bVar4;\n  \n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08002ffc[1] & 0xc) == 4) ||\n       (((DAT_08002ffc[1] & 0xc) == 8 && ((DAT_08002ffc[1] & 0x10000) == 0x10000)))) {\n      if (((*DAT_08002ffc & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (param_1[1] == 0x10000) {\n        *DAT_08002ffc = *DAT_08002ffc | 0x10000;\n      }\n      else if (param_1[1] == 0) {\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffeffff;\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffbffff;\n      }\n      else if (param_1[1] == 0x50000) {\n        *DAT_08002ffc = *DAT_08002ffc | 0x40000;\n        *DAT_08002ffc = *DAT_08002ffc | 0x10000;\n      }\n      else {\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffeffff;\n        *DAT_08002ffc = *DAT_08002ffc & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar1 = FUN_080015a0();\n        while ((*DAT_08002ffc & 0x20000) != 0) {\n          iVar2 = FUN_080015a0();\n          if (100 < (uint)(iVar2 - iVar1)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar1 = FUN_080015a0();\n        while ((*DAT_08002ffc & 0x20000) == 0) {\n          iVar2 = FUN_080015a0();\n          if (100 < (uint)(iVar2 - iVar1)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08002ffc[1] & 0xc) == 0) ||\n       (((DAT_08002ffc[1] & 0xc) == 8 && ((DAT_08002ffc[1] & 0x10000) == 0)))) {\n      if (((*DAT_08002ffc & 2) != 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n      *DAT_08002ffc = param_1[5] << 3 | *DAT_08002ffc & 0xffffff07;\n    }\n    else if (param_1[4] == 0) {\n      *DAT_08003000 = 0;\n      iVar1 = FUN_080015a0();\n      while ((*DAT_08002ffc & 2) != 0) {\n        iVar2 = FUN_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08003000 = 1;\n      iVar1 = FUN_080015a0();\n      while ((*DAT_08002ffc & 2) == 0) {\n        iVar2 = FUN_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n      *DAT_08002ffc = param_1[5] << 3 | *DAT_08002ffc & 0xffffff07;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[6] == 0) {\n      *DAT_08003004 = 0;\n      iVar1 = FUN_080015a0();\n      while ((DAT_08003254[9] & 2) != 0) {\n        iVar2 = FUN_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08003004 = 1;\n      iVar1 = FUN_080015a0();\n      while ((DAT_08002ffc[9] & 2) == 0) {\n        iVar2 = FUN_080015a0();\n        if (2 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n      FUN_08003568(1);\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar4 = (DAT_08003254[7] & 0x10000000) == 0;\n    if (bVar4) {\n      DAT_08003254[7] = DAT_08003254[7] | 0x10000000;\n    }\n    if ((*DAT_08003258 & 0x100) == 0) {\n      *DAT_08003258 = *DAT_08003258 | 0x100;\n      iVar1 = FUN_080015a0();\n      while ((*DAT_08003258 & 0x100) == 0) {\n        iVar2 = FUN_080015a0();\n        if (100 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    if (param_1[3] == 1) {\n      DAT_08003254[8] = DAT_08003254[8] | 1;\n    }\n    else if (param_1[3] == 0) {\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffe;\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffb;\n    }\n    else if (param_1[3] == 5) {\n      DAT_08003254[8] = DAT_08003254[8] | 4;\n      DAT_08003254[8] = DAT_08003254[8] | 1;\n    }\n    else {\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffe;\n      DAT_08003254[8] = DAT_08003254[8] & 0xfffffffb;\n    }\n    if (param_1[3] == 0) {\n      iVar1 = FUN_080015a0();\n      while ((DAT_08003254[8] & 2) != 0) {\n        iVar2 = FUN_080015a0();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar1 = FUN_080015a0();\n      while ((DAT_08003254[8] & 2) == 0) {\n        iVar2 = FUN_080015a0();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar4) {\n      DAT_08003254[7] = DAT_08003254[7] & 0xefffffff;\n    }\n  }\n  if (param_1[7] == 0) {\nLAB_0800324a:\n    uVar3 = 0;\n  }\n  else if ((DAT_08003254[1] & 0xc) == 8) {\n    uVar3 = 1;\n  }\n  else if (param_1[7] == 2) {\n    *DAT_0800325c = 0;\n    iVar1 = FUN_080015a0();\n    do {\n      if ((*DAT_08003254 & 0x2000000) == 0) {\n        if (param_1[8] == 0x10000) {\n          DAT_08003254[1] = param_1[2] | DAT_08003254[1] & 0xfffdffff;\n        }\n        DAT_08003254[1] = param_1[9] | param_1[8] | DAT_08003254[1] & 0xffc2ffff;\n        *DAT_0800325c = 1;\n        iVar1 = FUN_080015a0();\n        while ((*DAT_08003254 & 0x2000000) == 0) {\n          iVar2 = FUN_080015a0();\n          if (2 < (uint)(iVar2 - iVar1)) {\n            return 3;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      iVar2 = FUN_080015a0();\n    } while ((uint)(iVar2 - iVar1) < 3);\n    uVar3 = 3;\n  }\n  else {\n    *DAT_0800325c = 0;\n    iVar1 = FUN_080015a0();\n    do {\n      if ((*DAT_08003254 & 0x2000000) == 0) goto LAB_0800324a;\n      iVar2 = FUN_080015a0();\n    } while ((uint)(iVar2 - iVar1) < 3);\n    uVar3 = 3;\n  }\n  return uVar3;\n}\n\n",
            "called": [
                "FUN_08003568",
                "FUN_080015a0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08002d98",
            "calling": [
                "FUN_080052a0"
            ],
            "imported": false,
            "current_name": "FUNC_08002d98"
        },
        "FUN_0800172a": {
            "renaming": {
                "FUN_0800172a": "write_data_to_memory_0800172a",
                "param_1": "memory_location",
                "param_2": "data_size",
                "param_3": "data_value",
                "uVar1": "new_data_value",
                "FUN_080015fc": "get_data_value",
                "FUN_0800166c": "modify_data_value",
                "FUN_08001618": "store_data_to_memory"
            },
            "code": "void write_data_to_memory_0800172a(char memory_location, int data_size, int data_value) {\n  int new_data_value = get_data_value();\n  int modified_data_value = modify_data_value(new_data_value, data_size, data_value);\n  store_data_to_memory((int)memory_location, modified_data_value);\n  return;\n}",
            "called": [
                "FUN_08001618",
                "FUN_080015fc",
                "FUN_0800166c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800172a",
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "imported": false,
            "current_name": "write_data_to_memory_0800172a"
        },
        "FUN_080009d4": {
            "renaming": {
                "FUN_080009d4": "should_execute_080009d4",
                "in_ZR": "zero_register",
                "in_CY": "carry_flag",
                "FUN_08000978": "execute_setup"
            },
            "code": "bool should_execute_080009d4() {\n  undefined zero_register;\n  undefined carry_flag;\n  execute_setup();\n  return !(bool)carry_flag || (bool)zero_register;\n}",
            "called": [
                "FUN_08000978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009d4",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "should_execute_080009d4"
        },
        "FUN_08002d8a": {
            "renaming": {
                "FUN_08002d8a": "do_nothing_08002d8a"
            },
            "code": "\nvoid do_nothing_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d8a",
            "calling": [
                "FUN_080014f0"
            ],
            "imported": false,
            "current_name": "do_nothing_08002d8a"
        },
        "FUN_08005780": {
            "renaming": {
                "FUN_08005780": "set_bit_and_clear_flags_08005780",
                "DAT_080057dc": "data_pointer_1",
                "DAT_080057e0": "data_pointer_2"
            },
            "code": "void set_bit_and_clear_flags_08005780(void)\n{\n  *DAT_080057dc = *DAT_080057dc | 0x1;\n  DAT_080057dc[1] = DAT_080057dc[1] & DAT_080057e0;\n  *DAT_080057dc = *DAT_080057dc & 0xfef6ffff;\n  *DAT_080057dc = *DAT_080057dc & 0xfffbffff;\n  DAT_080057dc[1] = DAT_080057dc[1] & 0xff80ffff;\n  DAT_080057dc[2] = 0x9f0000;\n  *(unsigned int *)(DAT_080057e0 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005780",
            "calling": [
                "FUN_080057e8"
            ],
            "imported": false,
            "current_name": "set_bit_and_clear_flags_08005780"
        },
        "FUN_08009744": {
            "renaming": {
                "FUN_08009744": "process_data_08009744",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "data_ptr",
                "iVar2": "result"
            },
            "code": "void process_data_08009744(int *output, undefined4 input){\n    undefined *data_ptr;\n    int result;\n    data_ptr = PTR_DAT_08009764;\n    *(undefined4 *)PTR_DAT_08009764 = 0;\n    result = calculate(input);\n    if ((result == -1) && (*(int *)data_ptr != 0)) {\n        *output = *(int *)data_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_08005728"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009744",
            "calling": [
                "FUN_08008af8",
                "FUN_0800884c"
            ],
            "imported": false,
            "current_name": "process_data_08009744"
        },
        "FUN_08003640": {
            "renaming": {
                "FUN_08003640": "validate_parameter_08003640",
                "param_1": "parameter",
                "uVar1": "result",
                "NULL": "NULL",
                "do_nothing_08003696": "do_nothing",
                "*param_1": "*parameter",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int validate_parameter_08003640(int* parameter) {\n  int result;\n  if (parameter == NULL) {\n    result = 1;\n  }\n  else {\n    if (*(parameter + 15) == 0) {\n      *(parameter + 3) = 0;\n      do_nothing(parameter);\n    }\n    *(parameter + 15) = 2;\n    process_parameter(*parameter, parameter + 1);\n    *(parameter + 15) = 1;\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08003696",
                "FUN_08003c94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003640",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "validate_parameter_08003640"
        },
        "FUN_08009980": {
            "renaming": {
                "FUN_08009980": "allocate_memory_and_initialize_to_zero_08009980",
                "param_1": "input",
                "param_2": "rows",
                "param_3": "cols",
                "puVar1": "memory_pointer",
                "uVar2": "header_size",
                "puVar3": "i"
            },
            "code": "undefined4* allocate_memory_and_initialize_to_zero_08009980(undefined4 input, int rows, int cols)\n{\n    undefined4* memory_pointer;\n    uint32_t memory_size = rows * cols;\n    memory_pointer = (undefined4*)malloc(memory_size);\n    if (memory_pointer == NULL)\n    {\n        return NULL;\n    }\n    uint32_t header_size = (memory_pointer[-1] & 0xfffffffc) - 4;\n    if (header_size < 0x25)\n    {\n        uint32_t i;\n        for (i = 0; i < header_size; i += 4)\n        {\n            memory_pointer[i / 4] = 0;\n        }\n    }\n    else\n    {\n        memset(memory_pointer, 0, memory_size);\n    }\n    return memory_pointer;\n}",
            "called": [
                "FUN_08005d68",
                "FUN_08008af8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009980",
            "calling": [
                "FUN_080090c0"
            ],
            "imported": false,
            "current_name": "allocate_memory_and_initialize_to_zero_08009980"
        },
        "FUN_08005e9c": {
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n/* WARNING: Could not reconcile some variable overlaps */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  int **ppiVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  int iVar8;\n  int *piVar9;\n  undefined4 uVar10;\n  int **ppiVar11;\n  undefined uVar12;\n  ushort uVar13;\n  int **ppiVar14;\n  byte **ppbVar15;\n  int *piVar16;\n  int **ppiVar17;\n  char *pcVar18;\n  uint uVar19;\n  undefined *puVar20;\n  int *piVar21;\n  int *piVar22;\n  int *piVar23;\n  int *piVar24;\n  int *piVar25;\n  byte *pbVar26;\n  int *piVar27;\n  int *piVar28;\n  undefined4 *puVar29;\n  byte *pbVar30;\n  bool bVar31;\n  longlong lVar32;\n  undefined8 uVar33;\n  undefined8 uVar34;\n  undefined4 local_188;\n  int *piStack_184;\n  int **local_180;\n  undefined *puStack_17c;\n  int **local_178;\n  undefined4 *local_16c;\n  int *local_168;\n  byte *local_164;\n  int *local_160;\n  int *local_15c;\n  int **local_158;\n  int **local_154;\n  undefined8 local_150;\n  int *local_148;\n  int *local_144;\n  int *local_140;\n  int **local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  uint local_12c;\n  undefined4 local_128;\n  undefined4 local_124;\n  undefined4 local_120;\n  undefined *local_11c;\n  int *local_118;\n  int *local_114;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  int *local_100;\n  int *local_fc;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0;\n  undefined auStack_ec [4];\n  char local_e8;\n  undefined local_e7;\n  char local_e6 [6];\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int *local_d4;\n  int *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  local_16c = param_1;\n  local_160 = param_2;\n  local_154 = param_4;\n  ppiVar2 = (int **)FUN_08008ad4();\n  local_114 = *ppiVar2;\n  local_118 = (int *)FUN_08005e40(local_114);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = FUNC_08008af8(local_16c,0x40);\n    *local_160 = iVar3;\n    local_160[4] = iVar3;\n    if (iVar3 == 0) {\n      *local_16c = 0xc;\n      return (byte *)0xffffffff;\n    }\n    local_160[5] = 0x40;\n  }\n  local_128 = 0;\n  local_138 = (int *)0x0;\n  local_12c = 0;\n  local_d4 = (int *)0x0;\n  local_d0 = (int *)0x0;\n  local_11c = (undefined *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  local_124 = 0;\n  local_120 = 0;\n  ppiVar2 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar2;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)piVar27);\n        *ppiVar2 = param_3;\n        *(int **)((int)ppiVar2 + 4) = piVar27;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = (int **)((int)ppiVar2 + 8);\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800604a;\n          ppiVar2 = local_cc;\n        }\n        local_164 = local_164 + (int)piVar27;\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    piVar25 = (int *)0x0;\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    puVar29 = local_16c;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    switch(piVar24) {\n    case (int *)0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (piVar24 == (int *)0x0) goto LAB_08006216;\n      piVar16 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (int **)0x1;\n      piVar23 = (int *)&local_8c;\n      piVar22 = piVar16;\n      local_8c = (char)piVar24;\n      goto LAB_08006298;\n    case (int *)0x23:\n      piVar25 = (int *)((uint)piVar25 | 1);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x27:\n      iVar3 = FUN_08008ad4(local_16c);\n      local_110 = *(int **)(iVar3 + 4);\n      piVar24 = (int *)FUN_08005e40(local_110);\n      local_104 = piVar24;\n      iVar3 = FUN_08008ad4(puVar29);\n      local_108 = *(byte **)(iVar3 + 8);\n      if (piVar24 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 0x400);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2a:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2b:\n      local_f5 = 0x2b;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x2d:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\nLAB_08006602:\n      piVar25 = (int *)((uint)piVar25 | 4);\n      goto LAB_08005f4a;\n    case (int *)0x2e:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x2a) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (piVar24 + -0xc < (int *)0xa) {\n        piVar27 = (int *)((int)(piVar24 + -0xc) + (int)piVar27 * 10);\n        piVar24 = (int *)(uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case (int *)0x30:\n      piVar25 = (int *)((uint)piVar25 | 0x80);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x31:\n    case (int *)0x32:\n    case (int *)0x33:\n    case (int *)0x34:\n    case (int *)0x35:\n    case (int *)0x36:\n    case (int *)0x37:\n    case (int *)0x38:\n    case (int *)0x39:\n      goto switchD_08005f58_caseD_31;\n    case (int *)0x41:\n    case (int *)0x45:\n    case (int *)0x46:\n    case (int *)0x47:\n    case (int *)0x61:\n    case (int *)0x65:\n    case (int *)0x66:\n    case (int *)0x67:\n      puVar29 = (undefined4 *)((int)local_154 + 7U & 0xfffffff8);\n      uVar10 = *puVar29;\n      local_12c = puVar29[1];\n      local_168 = (int *)(local_12c & 0x7fffffff);\n      local_154 = (int **)(puVar29 + 2);\n      local_128 = uVar10;\n      iVar3 = FUN_08001170(uVar10,local_168,0xffffffff,DAT_08006724);\n      if ((iVar3 == 0) &&\n         (iVar3 = FUN_080009c0(uVar10,local_168,0xffffffff,DAT_08006724), iVar3 == 0)) {\n        iVar3 = FUN_080009ac(local_128,local_12c,local_124,local_120);\n        piVar23 = (int *)PTR_DAT_08006728;\n        piVar27 = (int *)PTR_DAT_0800672c;\n        if (iVar3 == 0) {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (piVar24 < (int *)0x48) {\n          piVar23 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar25 = (int *)((uint)piVar25 & 0xffffff7f);\n        local_158 = (int **)0x3;\n        local_13c = (int **)0x0;\n        piVar22 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      piVar22 = (int *)FUN_08001170(local_128,local_12c,local_128,local_12c);\n      if (piVar22 != (int *)0x0) {\n        piVar23 = (int *)PTR_DAT_08007898;\n        piVar27 = (int *)PTR_DAT_0800789c;\n        if ((int)local_12c < 0) {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        goto LAB_08006524;\n      }\n      piVar16 = piVar27;\n      if (piVar24 == (int *)0x61) {\n        uVar12 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar12,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          piVar25 = (int *)((uint)piVar25 | 2);\n        }\n        else {\n          param_3 = (int *)FUNC_08008af8(local_16c,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar13 = *(ushort *)(local_160 + 3) | 0x40;\n            *(ushort *)(local_160 + 3) = uVar13;\n            goto LAB_0800604e;\n          }\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          piVar25 = (int *)((uint)piVar25 | 2);\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        piVar27 = piVar16;\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          uVar19 = local_12c + 0x80000000;\n          piVar16 = piVar27;\n        }\n        else {\n          local_144 = (int *)0x0;\n          uVar19 = local_12c;\n        }\n        local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n        local_158 = (int **)local_128;\n        if (piVar24 == (int *)0x61) {\n          uVar33 = FUN_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUNC_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = FUN_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 != 0) {\n            local_f0 = (int *)0x1;\n          }\n          local_158 = (int **)PTR_s_0123456789abcdef_08007888;\n          local_13c = ppiVar2;\n          local_138 = piVar28;\n          local_134 = piVar24;\n          local_130 = piVar16;\n          local_100 = piVar25;\n          local_fc = param_3;\n          puVar20 = PTR_s_0123456789abcdef_08007888;\n          uVar33 = local_150;\n          goto LAB_080072ba;\n        }\n        piVar27 = piVar16;\n        if (piVar24 == (int *)0x41) {\n          uVar33 = FUN_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUNC_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = FUN_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 == 0) {\n            local_158 = (int **)PTR_s_0123456789ABCDEF_0800739c;\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar16;\n            local_100 = piVar25;\n            local_fc = param_3;\n            puVar20 = PTR_s_0123456789ABCDEF_0800739c;\n            uVar33 = local_150;\n          }\n          else {\n            local_f0 = (int *)0x1;\n            local_158 = (int **)PTR_s_0123456789ABCDEF_08007894;\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar16;\n            local_100 = piVar25;\n            local_fc = param_3;\n            puVar20 = PTR_s_0123456789ABCDEF_08007894;\n            uVar33 = local_150;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (piVar24 == (int *)0x41) {\n          uVar12 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = (int *)((uint)piVar25 | 0x100);\n        local_148 = piVar22;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar16 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if (((uint)piVar24 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar16 = (int *)0x1;\n            local_148 = piVar27;\n          }\n          goto LAB_0800724a;\n        }\n        uVar19 = local_12c;\n        local_144 = piVar22;\n        if ((int)local_12c < 0) goto LAB_08007414;\n      }\n      local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n      piStack_184 = piVar27;\n      local_158 = (int **)local_128;\n      if (piVar24 == (int *)0x66) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUNC_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar22 = (int *)((int)piVar23 + (int)piVar27);\n        local_150._0_4_ = piVar27;\nLAB_0800764c:\n        if ((*(byte *)piVar23 == 0x30) &&\n           (iVar3 = FUN_08000998(local_158,uVar19,local_124,local_120), iVar3 == 0)) {\n          local_f0 = (int *)(1 - (int)(int *)local_150);\n        }\n        piVar22 = (int *)((int)piVar22 + (int)local_f0);\n      }\n      else if (piVar24 == (int *)0x46) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUNC_080079e8(local_16c,local_180,local_128,uVar19);\n        local_150._0_4_ = piVar27;\nLAB_08007760:\n        piVar22 = (int *)((int)piVar23 + (int)(int *)local_150);\n        if (piVar24 == (int *)0x46) goto LAB_0800764c;\n      }\n      else {\n        local_178 = &local_e0;\n        local_150._0_4_ = piVar27;\n        if (local_168 == (int *)0x45) {\n          local_150._0_4_ = (int *)((int)piVar27 + 1);\n        }\n        local_188 = 2;\n        piStack_184 = (int *)local_150;\n        local_180 = &local_f0;\n        puStack_17c = auStack_ec;\n        piVar23 = (int *)FUNC_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar16 = local_e0;\n        if (piVar24 == (int *)0x67) {\n          if (((uint)piVar25 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (piVar24 == (int *)0x47) {\n          if (((uint)piVar25 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar22 = (int *)((int)(int *)local_150 + (int)piVar23);\n      }\n      iVar3 = FUN_08000998(local_158,uVar19,local_124,local_120);\n      piVar16 = piVar22;\n      if (iVar3 == 0) {\n        for (; piVar16 = local_e0, local_e0 < piVar22; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)piVar16 - (int)piVar23);\n      goto LAB_08006cb0;\n    case (int *)0x43:\n    case (int *)0x63:\n      piVar16 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      piVar22 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (int **)0x1;\n      local_8c = SUB41(piVar27,0);\n      piVar23 = (int *)&local_8c;\n      goto LAB_08006298;\n    case (int *)0x44:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_08006102;\n    case (int *)0x4c:\n      piVar25 = (int *)((uint)piVar25 | 8);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x4f:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n    case (int *)0x6f:\n      if (((uint)piVar25 & 0x20) == 0) {\n        ppiVar14 = local_154 + 1;\n        if (((uint)piVar25 & 0x10) == 0) {\n          if (((uint)piVar25 & 0x40) == 0) {\n            if (((uint)piVar25 & 0x200) == 0) goto LAB_08006be2;\n            piVar22 = (int *)(uint)*(byte *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n          else {\n            piVar22 = (int *)(uint)*(ushort *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar22 = *local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\n        ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar22 = *ppiVar14;\n        piVar16 = ppiVar14[1];\n        local_154 = ppiVar14 + 2;\n      }\n      iVar3 = 0;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n      break;\n    case (int *)0x53:\n    case (int *)0x73:\n      local_f5 = 0;\n      piVar22 = *local_154;\n      ppiVar14 = local_154 + 1;\n      if (piVar22 == (int *)0x0) {\n        piVar16 = piVar22;\n        piVar23 = (int *)PTR_s__null__08007084;\n        local_168 = piVar27;\n        local_158 = (int **)piVar27;\n        local_154 = ppiVar14;\n        local_148 = piVar22;\n        local_13c = (int **)piVar22;\n        local_134 = piVar22;\n        local_130 = piVar22;\n        if ((int *)0x5 < piVar27) {\n          local_158 = (int **)0x6;\n          local_168 = (int *)local_158;\n        }\n        goto LAB_08006538;\n      }\n      piVar23 = piVar22;\n      if (piVar27 == (int *)0xffffffff) {\n        local_158 = (int **)FUN_08005e40(piVar22);\n      }\n      else {\n        local_148 = (int *)FUN_0800901c(piVar22,0,piVar27);\n        if (local_148 == (int *)0x0) {\n          piVar16 = (int *)(uint)local_f5;\n          piVar22 = local_148;\n          local_168 = piVar27;\n          local_158 = (int **)piVar27;\n          local_154 = ppiVar14;\n          local_13c = (int **)local_148;\n          local_134 = local_148;\n          local_130 = local_148;\n          goto LAB_08006538;\n        }\n        local_158 = (int **)((int)local_148 - (int)piVar22);\n      }\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      piVar16 = (int *)(uint)local_f5;\n      piVar22 = (int *)0x0;\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      local_154 = ppiVar14;\n      goto LAB_08006538;\n    case (int *)0x55:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      iVar3 = 1;\n      local_154 = ppiVar14 + 2;\n      break;\n    case (int *)0x58:\n      local_11c = PTR_s_0123456789ABCDEF_08006730;\n      if (((uint)piVar25 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_080061be;\n    case (int *)0x64:\n    case (int *)0x69:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bcc:\n        piVar22 = *local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(int)*(short *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bcc;\n        piVar22 = (int *)(int)*(char *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\nLAB_08006102:\n      if ((int)piVar16 < 0) {\n        bVar31 = piVar22 != (int *)0x0;\n        piVar22 = (int *)-(int)piVar22;\n        piVar16 = (int *)(-(int)piVar16 - (uint)bVar31);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar3 = 1;\n        iVar8 = 1;\n        piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n        if (((uint)piVar22 | (uint)piVar16) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      piVar21 = piVar25;\n      if (piVar16 != (int *)0x0 || (int *)0x9 < piVar22) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case (int *)0x68:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x68) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar25 = (int *)((uint)piVar25 | 0x200);\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        piVar25 = (int *)((uint)piVar25 | 0x40);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x6a:\n    case (int *)0x71:\n      piVar25 = (int *)((uint)piVar25 | 0x20);\n    case (int *)0x74:\n    case (int *)0x7a:\nswitchD_08005f58_caseD_74:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case (int *)0x6e:\n      ppiVar14 = local_154 + 1;\n      ppbVar15 = (byte **)*local_154;\n      local_154 = ppiVar14;\n      if (((uint)piVar25 & 0x20) != 0) {\n        *ppbVar15 = local_164;\n        ppbVar15[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) != 0) {\n          *(short *)ppbVar15 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if (((uint)piVar25 & 0x200) != 0) {\n          *(char *)ppbVar15 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar15 = local_164;\n      goto LAB_0800620e;\n    case (int *)0x70:\n      local_f4 = 0x7830;\n      local_11c = PTR_s_0123456789abcdef_08006434;\n      piVar22 = *local_154;\n      piVar25 = (int *)((uint)piVar25 | 2);\n      piVar16 = (int *)0x0;\n      iVar3 = 2;\n      piVar24 = (int *)0x78;\n      local_154 = local_154 + 1;\n      break;\n    case (int *)0x75:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bf2:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(uint)*(ushort *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bf2;\n        piVar22 = (int *)(uint)*(byte *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      break;\n    case (int *)0x78:\n      local_11c = PTR_s_0123456789abcdef_08006434;\n      if (((uint)piVar25 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar14 = local_154 + 1;\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) == 0) {\n          if (((uint)piVar25 & 0x200) == 0) goto LAB_08006bbc;\n          piVar22 = (int *)(uint)*(byte *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n        else {\n          piVar22 = (int *)(uint)*(ushort *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        local_154 = ppiVar14;\n      }\nLAB_080061be:\n      if ((((uint)piVar25 & 1) != 0) && (((uint)piVar22 | (uint)piVar16) != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 2);\n        local_f4 = CONCAT11((char)piVar24,0x30);\n      }\n      iVar3 = 2;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      if (iVar3 != 1) goto LAB_08006136;\nLAB_08006980:\n      piVar21 = piVar25;\n      if (piVar16 == (int *)0x0 && piVar22 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar32 = CONCAT44(piVar16,piVar22);\n      piVar23 = (int *)(&bStack_2a + 2);\n      piVar22 = (int *)0x0;\n      pbVar26 = local_108;\n      local_168 = piVar23;\n      local_158 = ppiVar2;\n      local_150._0_4_ = piVar25;\n      local_148 = piVar24;\n      do {\n        iVar3 = (int)((ulonglong)lVar32 >> 0x20);\n        uVar19 = (uint)lVar32;\n        cVar6 = '\\n';\n        FUN_080011ec(uVar19,iVar3,10,0);\n        *(byte *)((int)piVar23 + -1) = cVar6 + 0x30;\n        piVar22 = (int *)((int)piVar22 + 1);\n        piVar23 = (int *)((int)piVar23 + -1);\n        if ((((((uint)piVar25 & 0x400) != 0) && (piVar22 == (int *)(uint)*pbVar26)) &&\n            (piVar22 != (int *)0xff)) && (iVar3 != 0 || 9 < uVar19)) {\n          piVar23 = (int *)((int)piVar23 - (int)local_104);\n          FUN_08009768(piVar23,local_110,local_104);\n          piVar22 = (int *)(uint)pbVar26[1];\n          if (piVar22 != (int *)0x0) {\n            pbVar26 = pbVar26 + 1;\n            piVar22 = (int *)0x0;\n          }\n        }\n        lVar32 = FUN_080011ec(uVar19,iVar3,10,0);\n      } while (lVar32 != 0);\n      piVar24 = local_148;\n      piVar25 = (int *)local_150;\n      ppiVar2 = local_158;\n      local_158 = (int **)((int)local_168 - (int)piVar23);\n      local_138 = piVar22;\n      local_108 = pbVar26;\n    }\n    else {\n      piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n      iVar8 = iVar3;\n      if (((uint)piVar22 | (uint)piVar16) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar3 == 0) {\n            local_158 = (int **)((uint)piVar25 & 1);\n            if (local_158 == (int **)0x0) {\n              piVar23 = (int *)(&bStack_2a + 2);\n              piVar25 = piVar21;\n            }\n            else {\n              piVar23 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n              piVar25 = piVar21;\n            }\n          }\n          else {\n            piVar23 = (int *)(&bStack_2a + 2);\n            piVar25 = piVar21;\n            local_158 = (int **)piVar27;\n          }\n        }\n        else {\n          piVar25 = piVar21;\n          if (iVar3 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar22 + '0';\n          piVar23 = (int *)(&bStack_2a + 1);\n          local_158 = (int **)0x1;\n          piVar25 = piVar21;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar3 = iVar8;\n        piVar25 = piVar21;\n        if (iVar8 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar3 == 2) {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = (int *)((uint)piVar22 >> 4 | (int)piVar16 << 0x1c);\n            piVar16 = (int *)((uint)piVar16 >> 4);\n            piVar23 = (int *)((int)piVar23 + -1);\n            *(undefined *)piVar23 = local_11c[(uint)piVar22 & 0xf];\n            piVar22 = piVar21;\n          } while (((uint)piVar21 | (uint)piVar16) != 0);\n        }\n        else {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = piVar23;\n            piVar9 = (int *)((uint)piVar22 >> 3 | (int)piVar16 << 0x1d);\n            piVar16 = (int *)((uint)piVar16 >> 3);\n            iVar3 = ((uint)piVar22 & 7) + 0x30;\n            *(byte *)((int)piVar21 + -1) = (byte)iVar3;\n            piVar23 = (int *)((int)piVar21 + -1);\n            piVar22 = piVar9;\n          } while (((uint)piVar9 | (uint)piVar16) != 0);\n          if ((((uint)piVar25 & 1) != 0) && (iVar3 != 0x30)) {\n            piVar23 = (int *)((int)piVar21 + -2);\n            *(byte *)((int)piVar21 + -2) = 0x30;\n            local_158 = (int **)(&bStack_2a + (2 - (int)piVar23));\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (int **)(&bStack_2a + (2 - (int)piVar23));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = piVar27;\n    local_168 = (int *)local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  piVar28 = local_160;\n  if (local_d0 == (int *)0x0) {\nLAB_0800604a:\n    uVar13 = *(ushort *)(local_160 + 3);\n  }\n  else {\n    FUN_080097cc(local_16c,local_160,&local_d8);\n    uVar13 = *(ushort *)(piVar28 + 3);\n  }\nLAB_0800604e:\n  if ((uVar13 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (piVar24 == (int *)0x6c) {\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    piVar25 = (int *)((uint)piVar25 | 0x20);\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    piVar25 = (int *)((uint)piVar25 | 0x10);\n  }\n  goto LAB_08005f4a;\n  while( true ) {\n    iVar8 = FUN_08000998((int)uVar33,uVar10,local_124,local_120);\n    if (iVar8 != 0) break;\nLAB_080072ba:\n    piVar22 = param_3;\n    piVar16 = (int *)((int)piVar16 + -1);\n    uVar33 = FUNC_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,DAT_080073a0);\n    iVar3 = FUN_0800119c();\n    uVar34 = FUN_080003f4();\n    uVar33 = FUNC_08000158((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar34,\n                          (int)((ulonglong)uVar34 >> 0x20));\n    uVar10 = (undefined4)((ulonglong)uVar33 >> 0x20);\n    param_3 = (int *)((int)piVar22 + 1);\n    *(undefined *)piVar22 = puVar20[iVar3];\n    if (piVar16 == (int *)0xffffffff) break;\n  }\n  piVar23 = local_fc;\n  piVar25 = local_100;\n  piVar27 = local_130;\n  piVar24 = local_134;\n  piVar28 = local_138;\n  ppiVar2 = local_13c;\n  local_13c = (int **)piVar16;\n  local_134 = piVar22;\n  local_150 = uVar33;\n  iVar8 = FUN_080009e8((int)uVar33,uVar10,0,DAT_080073a4);\n  if (iVar8 == 0) {\n    iVar8 = FUN_08000998((int *)local_150,local_150._4_4_,0,DAT_080073a4);\n    if ((iVar8 != 0) && (iVar3 << 0x1f < 0)) goto LAB_0800748a;\n    if (-1 < (int)local_13c) {\n      piVar16 = (int *)((byte *)((int)local_13c + 1) + (int)param_3);\n      piVar22 = param_3;\n      do {\n        param_3 = (int *)((int)piVar22 + 1);\n        *(byte *)piVar22 = 0x30;\n        piVar22 = param_3;\n      } while (piVar16 != param_3);\n    }\n  }\n  else {\nLAB_0800748a:\n    bVar1 = *(byte *)((int)local_158 + 0xf);\n    bVar7 = *(byte *)piVar22;\n    piVar22 = param_3;\n    local_e0 = local_134;\n    while (bVar1 == bVar7) {\n      *(byte *)((int)piVar22 + -1) = 0x30;\n      bVar7 = *(byte *)((int)local_e0 + -1);\n      piVar22 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar7 == 0x39) {\n      bVar7 = *(byte *)((int)local_158 + 10);\n    }\n    else {\n      bVar7 = bVar7 + 1;\n    }\n    *(byte *)((int)piVar22 + -1) = bVar7;\n  }\n  local_138 = (int *)((int)param_3 - (int)piVar23);\nLAB_08006cb0:\n  local_134 = local_f0;\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0 + 3) < 0 == SCARRY4((int)local_f0,3)) &&\n       ((int)local_f0 <= (int)piVar27)) {\n      if ((int)local_f0 < (int)local_138) {\n        local_158 = (int **)((int)local_138 + (int)local_118);\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (int **)((int)local_158 + (1 - (int)local_f0));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        piVar24 = (int *)0x67;\n      }\n      else {\n        if ((int)piVar25 << 0x1f < 0) {\n          local_158 = (int **)((int)local_f0 + (int)local_118);\n        }\n        else {\n          local_158 = (int **)local_f0;\n        }\n        if (-1 < (int)piVar25 << 0x15) {\n          piVar24 = (int *)0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074fc;\n        }\n        piVar24 = (int *)0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    piVar24 = (int *)((int)piVar24 + -2);\n    local_168 = (int *)((uint)piVar24 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8 = (char)piVar24;\n    if (local_168 == (int *)0x41) {\n      local_e8 = local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0 + -1);\n    if ((int)piVar27 < 0) {\n      local_e7 = 0x2d;\n      local_f0 = (int *)(1 - (int)local_f0);\n    }\n    else {\n      local_e7 = 0x2b;\n      local_f0 = piVar27;\n    }\n    if ((int)local_f0 < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e6[0] = 0x30;\n        pcVar18 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar18 = (char)local_f0 + '0';\n      pcVar18 = pcVar18 + 1;\n    }\n    else {\n      pbVar30 = abStack_dc + 3;\n      pbVar26 = pbVar30;\n      do {\n        pbVar5 = pbVar26;\n        piVar22 = (int *)((ulonglong)DAT_08007890 * ZEXT48(local_f0) >> 0x23);\n        pbVar5[-1] = (char)local_f0 + (char)piVar22 * -10 + 0x30;\n        pbVar26 = pbVar5 + -1;\n        local_f0 = piVar22;\n      } while ((int *)0x9 < piVar22);\n      uVar19 = (uint)(piVar22 + 0xc) & 0xff;\n      pbVar5[-2] = (byte)uVar19;\n      if (pbVar5 + -2 < pbVar30) {\n        pbVar5 = pbVar26;\n        puVar20 = (undefined *)((int)&local_e8 + 2);\n        while( true ) {\n          *puVar20 = (char)uVar19;\n          if (pbVar30 == pbVar5) break;\n          uVar19 = (uint)*pbVar5;\n          pbVar5 = pbVar5 + 1;\n          puVar20 = puVar20 + 1;\n        }\n        pcVar18 = (char *)(((int)&local_188 * 2 - (int)pbVar26) + 0x152);\n      }\n      else {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar18 + -(int)&local_e8);\n    local_158 = (int **)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)piVar25 << 0x1f < 0)) {\n      local_158 = (int **)((int)local_158 + (int)local_118);\n    }\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    piVar25 = (int *)((uint)piVar25 & 0xfffffbff | 0x100);\n    local_f0 = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0 < 1) {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_168 = (int *)0x1;\n        local_158 = (int **)0x1;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (int **)((byte *)((int)local_118 + 1) + (int)piVar27);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      piVar25 = local_140;\n    }\n    else {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_158 = (int **)local_f0;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (int **)((byte *)((int)local_f0 + (int)local_118) + (int)piVar27);\n      }\nLAB_080074f8:\n      if (-1 < (int)piVar25 << 0x15) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      uVar19 = (uint)*local_108;\n      while (uVar19 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar19) goto LAB_08007524;\n          uVar4 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar19);\n          if (uVar4 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar19 = uVar4;\n          if (uVar4 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int **)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (int **)((int)local_158 + (int)local_104 * (int)((int)local_130 + (int)local_13c))\n      ;\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      piVar25 = local_140;\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = local_144;\nLAB_08006538:\n    if (piVar16 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar16 = (int *)0x2d;\n    piVar22 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n  }\nLAB_08006298:\n  piVar27 = local_160;\n  puVar29 = local_16c;\n  local_150._0_4_ = (int *)((uint)piVar25 & 2);\n  if ((int *)local_150 != (int *)0x0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  local_144 = (int *)((uint)piVar25 & 0x84);\n  if ((local_144 == (int *)0x0) &&\n     (piVar21 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar21)) {\n    if (0x10 < (int)piVar21) {\n      piVar16 = (int *)0x10;\n      local_100 = piVar24;\n      do {\n        piVar9 = piVar21;\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006438;\n        ppiVar2[1] = piVar16;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n          piVar24 = local_100;\n        }\n        else {\n          local_140 = piVar16;\n          iVar3 = FUN_080097cc(puVar29,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = local_140;\n          piVar24 = local_100;\n        }\n        piVar21 = piVar9 + -4;\n        local_100 = piVar24;\n      } while (0x10 < (int)piVar21);\n      piVar21 = piVar9 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar21);\n    *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006438;\n    ppiVar2[1] = piVar21;\n    if ((int)local_d4 < 8) {\n      piVar16 = (int *)(uint)local_f5;\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar16 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar16 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 1);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f5;\n    ppiVar2[1] = (int *)0x1;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if ((int *)local_150 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 2);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f4;\n    ppiVar2[1] = (int *)0x2;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  puVar20 = PTR_s_0000000000000000Infinity_08006a54;\n  if ((local_144 == (int *)0x80) &&\n     (piVar16 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar16)) {\n    if (0x10 < (int)piVar16) {\n      do {\n        while( true ) {\n          piVar21 = piVar16;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)puVar20;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = FUN_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = piVar21 + -4;\n          if ((int)(piVar21 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar16 = piVar21 + -4;\n      } while (0x10 < (int)(piVar21 + -4));\nLAB_08006882:\n      piVar16 = piVar21 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar16);\n    *ppiVar2 = (int *)puVar20;\n    ppiVar2[1] = piVar16;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  puVar20 = PTR_s_0000000000000000Infinity_0800643c;\n  piVar22 = (int *)((int)piVar22 - (int)local_158);\n  if (0 < (int)piVar22) {\n    piVar16 = (int *)PTR_s_0000000000000000Infinity_08007088;\n    if (0x10 < (int)piVar22) {\n      do {\n        while( true ) {\n          piVar16 = piVar22;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)puVar20;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = FUN_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar22 = piVar16 + -4;\n          if ((int)(piVar16 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar22 = piVar16 + -4;\n      } while (0x10 < (int)(piVar16 + -4));\nLAB_080063d2:\n      piVar22 = piVar16 + -4;\n      piVar16 = (int *)puVar20;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar22);\n    *ppiVar2 = piVar16;\n    ppiVar2[1] = piVar22;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_d0;\n  if (((uint)piVar25 & 0x100) == 0) {\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)local_158);\n    *ppiVar2 = piVar23;\n    ppiVar2[1] = (int *)local_158;\n    if ((int)local_d4 < 8) {\nLAB_0800640e:\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else if ((int)piVar24 < 0x66) {\n    local_158 = (int **)((int)local_d0 + 1);\n    piVar27 = (int *)((int)local_d4 + 1);\n    ppiVar14 = ppiVar2 + 2;\n    local_d0 = (int *)local_158;\n    if (((int)local_138 < 2) && (((uint)piVar25 & 1) == 0)) {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)piVar27 < 8) {\n        local_150._0_4_ = (int *)((int)local_d4 + 2);\n        ppiVar2 = ppiVar2 + 4;\n      }\n      else {\n        local_d4 = piVar27;\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        local_150._0_4_ = (int *)((int)local_d4 + 1);\n        ppiVar14 = local_cc;\n        local_158 = (int **)local_d0;\n        ppiVar2 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      local_d4 = piVar27;\n      if (7 < (int)piVar27) {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar14 = local_cc;\n        local_158 = (int **)local_d0;\n      }\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_158 = (int **)((int)local_158 + (int)local_118);\n      *ppiVar14 = local_114;\n      ppiVar14[1] = local_118;\n      local_d0 = (int *)local_158;\n      if ((int)local_d4 < 8) {\n        ppiVar17 = ppiVar14 + 2;\n      }\n      else {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar17 = local_cc;\n      }\n      piVar24 = local_d4;\n      local_150._0_4_ = (int *)((int)local_d4 + 1);\n      piVar22 = (int *)((int)local_138 + -1);\n      ppiVar11 = ppiVar17 + 2;\n      local_158 = (int **)local_d0;\n      local_144 = (int *)local_150;\n      iVar3 = FUN_08000998(local_128,local_12c,local_124,local_120);\n      piVar27 = local_160;\n      puVar29 = local_16c;\n      puVar20 = PTR_s_0000000000000000Infinity_08006d94;\n      if (iVar3 == 0) {\n        local_158 = (int **)((int)local_158 + (int)piVar22);\n        *ppiVar17 = (int *)((int)piVar23 + 1);\n        ppiVar17[1] = piVar22;\n        local_d0 = (int *)local_158;\n        if ((int)(int *)local_150 < 8) {\n          local_150._0_4_ = (int *)((int)piVar24 + 2);\n          ppiVar14 = ppiVar11;\n          ppiVar2 = ppiVar17 + 4;\n        }\n        else {\nLAB_08006d9c:\n          local_158 = (int **)local_d0;\n          local_d4 = (int *)local_150;\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          local_150._0_4_ = (int *)((int)local_d4 + 1);\n          local_158 = (int **)local_d0;\n          ppiVar14 = local_cc;\n          ppiVar2 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar14 = ppiVar17;\n        ppiVar2 = ppiVar11;\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)local_158;\n          piVar24 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n          local_d4 = local_144;\n          if (0x10 < (int)piVar22) {\n            while( true ) {\n              local_d0 = local_d0 + 4;\n              *ppiVar17 = (int *)puVar20;\n              ppiVar17[1] = (int *)0x10;\n              if ((int)local_d4 < 8) {\n                ppiVar17 = ppiVar17 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar27,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar17 = local_cc;\n              }\n              piVar22 = piVar22 + -4;\n              if ((int)piVar22 < 0x11) break;\n              local_d4 = (int *)((int)local_d4 + 1);\n            }\n            local_150._0_4_ = (int *)((int)local_d4 + 1);\n            ppiVar11 = ppiVar17 + 2;\n            piVar24 = (int *)puVar20;\n            local_158 = (int **)local_d0;\n          }\n          *ppiVar17 = piVar24;\n          ppiVar17[1] = piVar22;\n          local_158 = (int **)((int)local_158 + (int)piVar22);\n          local_d0 = (int *)local_158;\n          if (7 < (int)(int *)local_150) goto LAB_08006d9c;\n          local_150._0_4_ = (int *)((int)(int *)local_150 + 1);\n          ppiVar2 = ppiVar11 + 2;\n          ppiVar14 = ppiVar11;\n        }\n      }\n    }\n    ppiVar14[1] = local_10c;\n    local_d0 = (int *)((int)local_158 + (int)local_10c);\n    local_d4 = (int *)local_150;\n    *ppiVar14 = (int *)&local_e8;\n    piVar27 = local_d0;\n    if (7 < (int)(int *)local_150) {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else {\n    iVar3 = FUN_08000998(local_128,local_12c,local_124,local_120);\n    if (iVar3 == 0) {\n      if ((int)local_f0 < 1) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)piVar27 + 1);\n        *ppiVar2 = (int *)PTR_DAT_08006d98;\n        ppiVar2[1] = (int *)0x1;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        if (((local_f0 != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)local_d0 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n          }\n          puVar29 = local_16c;\n          puVar20 = PTR_s_0000000000000000Infinity_0800788c;\n          if ((int)local_f0 < 0) {\n            piVar27 = (int *)-(int)local_f0;\n            if ((int)(local_f0 + 4) < 0 != SCARRY4((int)local_f0,0x10)) {\n              do {\n                local_d4 = (int *)((int)local_d4 + 1);\n                local_d0 = local_d0 + 4;\n                *ppiVar2 = (int *)puVar20;\n                ppiVar2[1] = (int *)0x10;\n                if ((int)local_d4 < 8) {\n                  ppiVar2 = ppiVar2 + 2;\n                }\n                else {\n                  iVar3 = FUN_080097cc(puVar29,local_160,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  ppiVar2 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)local_d0 + (int)piVar27);\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = piVar27;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\n          local_d0 = (int *)((int)local_d0 + (int)local_138);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar24 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar24 = local_138;\n        }\n        if (0 < (int)piVar24) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar24);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = piVar24;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08006d94;\n        piVar22 = local_134;\n        if (-1 < (int)piVar24) {\n          piVar22 = (int *)((int)local_134 - (int)piVar24);\n        }\n        piVar24 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n        if (0 < (int)piVar22) {\n          for (; 0x10 < (int)piVar22; piVar22 = piVar22 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = piVar27 + 4;\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n            piVar24 = (int *)puVar20;\n          }\n          local_d4 = (int *)((int)local_d4 + 1);\n          piVar27 = (int *)((int)piVar27 + (int)piVar22);\n          *ppiVar2 = piVar24;\n          ppiVar2[1] = piVar22;\n          local_d0 = piVar27;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar22 = local_104;\n        piVar24 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08007398;\n        piVar16 = (int *)((int)local_134 + (int)piVar23);\n        if (((uint)piVar25 & 0x400) != 0) {\n          local_158 = (int **)((int)piVar23 + (int)local_138);\n          pbVar26 = local_108;\n          local_150._0_4_ = piVar28;\n          local_144 = piVar25;\n          local_140 = piVar23;\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int **)0x0) goto LAB_0800717e;\n          pbVar26 = pbVar26 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)piVar27 + (int)piVar22);\n            *ppiVar2 = local_110;\n            ppiVar2[1] = piVar22;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = (int *)(uint)*pbVar26;\n            piVar28 = (int *)((int)local_158 - (int)piVar16);\n            if ((int)piVar27 <= (int)(int *)((int)local_158 - (int)piVar16)) {\n              piVar28 = piVar27;\n            }\n            if (0 < (int)piVar28) {\n              local_d0 = (int *)((int)local_d0 + (int)piVar28);\n              local_d4 = (int *)((int)local_d4 + 1);\n              *ppiVar2 = piVar16;\n              ppiVar2[1] = piVar28;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar2 = local_cc;\n                piVar27 = (int *)(uint)*pbVar26;\n              }\n            }\n            piVar25 = piVar27;\n            if (-1 < (int)piVar28) {\n              piVar25 = (int *)((int)piVar27 - (int)piVar28);\n            }\n            if (0 < (int)piVar25) {\n              for (; 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n                while( true ) {\n                  local_d4 = (int *)((int)local_d4 + 1);\n                  local_d0 = local_d0 + 4;\n                  *ppiVar2 = (int *)puVar20;\n                  ppiVar2[1] = (int *)0x10;\n                  if ((int)local_d4 < 8) break;\n                  iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  piVar25 = piVar25 + -4;\n                  ppiVar2 = local_cc;\n                  if ((int)piVar25 < 0x11) goto LAB_08007156;\n                }\n                ppiVar2 = ppiVar2 + 2;\n              }\nLAB_08007156:\n              local_d4 = (int *)((int)local_d4 + 1);\n              local_d0 = (int *)((int)local_d0 + (int)piVar25);\n              *ppiVar2 = (int *)puVar20;\n              ppiVar2[1] = piVar25;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = local_cc;\n              }\n            }\n            piVar16 = (int *)((int)piVar16 + (int)piVar27);\n            piVar27 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int **)0x0) {\n              piVar23 = local_140;\n              piVar25 = local_144;\n              piVar28 = (int *)local_150;\n              local_108 = pbVar26;\n              if ((int *)((int)local_140 + (int)local_138) <= piVar16) {\n                piVar16 = (int *)((int)local_140 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int **)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0 < (int)local_138) || (((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)piVar27 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar24 = (int *)((int)local_138 - (int)local_f0);\n        piVar22 = (int *)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16);\n        if ((int)piVar24 <= (int)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16)) {\n          piVar22 = piVar24;\n        }\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar22);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar16;\n          ppiVar2[1] = piVar22;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar24 = (int *)((int)local_138 - (int)local_f0);\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08007088;\n        if (-1 < (int)piVar22) {\n          piVar24 = (int *)((int)piVar24 - (int)piVar22);\n        }\n        piVar22 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n        if (0 < (int)piVar24) {\n          for (; local_d0 = piVar27, 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n            piVar22 = (int *)puVar20;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_d0 = (int *)((int)piVar27 + 1);\n      *ppiVar2 = (int *)PTR_DAT_08006a50;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)local_d4 < 8) {\n        ppiVar2 = ppiVar2 + 2;\n      }\n      else {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar2 = local_cc;\n      }\n      if (((int)local_f0 < (int)local_138) || (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)local_118);\n        *ppiVar2 = local_114;\n        ppiVar2[1] = local_118;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        puVar20 = PTR_s_0000000000000000Infinity_08006a54;\n        piVar24 = (int *)((int)local_138 + -1);\n        piVar27 = local_d0;\n        piVar22 = (int *)PTR_s_0000000000000000Infinity_0800788c;\n        if (0 < (int)piVar24) {\n          for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)puVar20;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar22 = (int *)puVar20;\n          }\nLAB_08007014:\n          local_d0 = (int *)((int)local_d0 + (int)piVar24);\n          *ppiVar2 = piVar22;\n          ppiVar2[1] = piVar24;\njoined_r0x08006a1c:\n          local_d4 = (int *)((int)local_d4 + 1);\n          if (7 < (int)local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  piVar24 = local_160;\n  puVar29 = local_16c;\n  if ((((uint)piVar25 & 4) != 0) &&\n     (piVar25 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar25)) {\n    for (; local_d0 = piVar27, 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n      while( true ) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006720;\n        ppiVar2[1] = (int *)0x10;\n        if ((int)local_d4 < 8) break;\n        iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        piVar25 = piVar25 + -4;\n        ppiVar2 = local_cc;\n        if ((int)piVar25 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar25);\n    *ppiVar2 = (int *)PTR_s__0000000000000000Infinity_08006720;\n    ppiVar2[1] = piVar25;\n    piVar27 = local_d0;\n    if ((7 < (int)local_d4) &&\n       (iVar3 = FUN_080097cc(local_16c,local_160,&local_d8), piVar27 = local_d0, iVar3 != 0))\n    goto LAB_0800603e;\n  }\n  piVar24 = local_15c;\n  if ((int)local_15c < (int)local_168) {\n    piVar24 = local_168;\n  }\n  local_164 = local_164 + (int)piVar24;\n  if ((piVar27 == (int *)0x0) || (iVar3 = FUN_080097cc(local_16c,local_160,&local_d8), iVar3 == 0))\n  {\n    local_d4 = (int *)0x0;\n    if (local_148 != (int *)0x0) {\n      FUNC_080088ec(local_16c,local_148);\n    }\n    ppiVar2 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    FUNC_080088ec(local_16c,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  piVar16 = piVar24 + -0xc;\n  piVar22 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar22 + 1);\n    piVar24 = (int *)(uint)*(byte *)piVar22;\n    local_15c = (int *)((int)piVar16 + (int)local_15c * 10);\n    piVar16 = piVar24 + -0xc;\n    piVar22 = piVar28;\n  } while (piVar16 < (int *)0xa);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "called": [
                "FUN_080096e0",
                "FUN_080003f4",
                "FUN_080004c8",
                "FUN_080009ac",
                "FUN_0800119c",
                "FUN_080009c0",
                "FUN_0800901c",
                "FUN_080088ec",
                "FUN_08008af8",
                "FUN_080097cc",
                "FUN_08009768",
                "FUN_08000158",
                "FUN_08000998",
                "FUN_08008ad4",
                "FUN_080011ec",
                "FUN_08001170",
                "FUN_08005e40",
                "FUN_080009e8",
                "FUN_080079e8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005e9c",
            "calling": [
                "FUN_08005dfc"
            ],
            "imported": false,
            "current_name": "FUNC_08005e9c"
        },
        "FUN_08000134": {
            "renaming": {
                "FUN_08000134": "concatenate_pointers_08000134",
                "param_1": "pointer_1",
                "param_2": "pointer_2",
                "DAT_08000144": "global_var",
                "PTR_FUN_0800014c": "global_function_pointer",
                "PTR_DAT_08000148": "global_data_pointer"
            },
            "code": "uint64_t concatenate_pointers_08000134(uint8_t* pointer_1, uint8_t* pointer_2) {\n  if (DAT_08000144 != 0) {\n    pointer_1 = PTR_FUN_0800014c;\n    pointer_2 = PTR_DAT_08000148;\n  }\n  return ((uint64_t)pointer_2 << 32) | (uint64_t)pointer_1;\n}",
            "called": [
                "FUN_08009e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000134",
            "calling": [
                "FUN_08005d20"
            ],
            "imported": false,
            "current_name": "concatenate_pointers_08000134"
        },
        "FUN_08005704": {
            "renaming": {
                "FUN_08005704": "run_application_08005704",
                "FUN_0800157c": "initialize_network",
                "FUN_080017b4": "load_data"
            },
            "code": "void run_application_08005704(void)\n{\n  initialize_network();\n  load_data();\n  return;\n}",
            "called": [
                "FUN_080017b4",
                "FUN_0800157c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005704",
            "calling": [],
            "imported": false,
            "current_name": "run_application_08005704"
        },
        "FUN_08000418": {
            "renaming": {
                "FUN_08000418": "calculate_08000418",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "sign_bit",
                "uVar2": "shifted_input_divided_by_8_or_input1",
                "uVar3": "shifted_input_divided_by_8_with_sign_bit",
                "uVar4": "shifted_input_divided_by_8",
                "uVar5": "shifted_input",
                "uVar7": "count_leading_zeroes_minus_11",
                "iVar6": "count_leading_zeroes_result",
                "bVar8": "is_count_leading_zeroes_minus_2b_zero",
                "bVar9": "is_shifted_input_zero",
                "bVar10": "is_count_leading_zeroes_minus_2b_negative",
                "in_r12": "in_r12"
            },
            "code": "ulonglong calculate_08000418(uint input1, undefined4 input2, undefined4 input3, uint input4) {\n  uint shifted_input = input1 << 1;\n  bool is_shifted_input_zero = shifted_input == 0;\n  uint sign_bit = (uint)((input1 & 0x80000000) != 0) << 0x1f;\n  uint shifted_input_divided_by_8 = (uint)((int)shifted_input >> 3) >> 1;\n  uint shifted_input_divided_by_8_with_sign_bit = sign_bit | shifted_input_divided_by_8;\n  input1 = input1 << 0x1d;\n  if (!is_shifted_input_zero) {\n    uint input1_most_significant_byte = shifted_input & 0xff000000;\n    is_shifted_input_zero = input1_most_significant_byte == 0;\n  }\n  if (!is_shifted_input_zero) {\n    is_shifted_input_zero = input1_most_significant_byte == 0xff000000;\n  }\n  if (!is_shifted_input_zero) {\n    return CONCAT44(shifted_input_divided_by_8_with_sign_bit, input1) ^ 0x3800000000000000;\n  }\n  if ((shifted_input & 0xffffff) == 0) {\n    return CONCAT44(shifted_input_divided_by_8_with_sign_bit, input1);\n  }\n  if (input1_most_significant_byte == 0xff000000) {\n    return CONCAT44(shifted_input_divided_by_8_with_sign_bit, input1) | 0x8000000000000;\n  }\n  uint shifted_input_divided_by_8_or_input1 = input1;\n  uint shifted_input_divided_by_8 = shifted_input_divided_by_8_with_sign_bit;\n  if (shifted_input_divided_by_8_with_sign_bit == 0) {\n    shifted_input_divided_by_8_or_input1 = 0;\n    shifted_input_divided_by_8 = input1;\n  }\n  int count_leading_zeroes_result = count_leading_zeroes(shifted_input_divided_by_8);\n  if (shifted_input_divided_by_8_with_sign_bit == 0) {\n    count_leading_zeroes_result = count_leading_zeroes_result + 0x20;\n  }\n  uint count_leading_zeroes_minus_11 = count_leading_zeroes_result - 0xb;\n  bool is_count_leading_zeroes_minus_2b_negative = (int)(count_leading_zeroes_result - 0x2b) < 0;\n  bool is_count_leading_zeroes_minus_2b_zero = count_leading_zeroes_result - 0x2b == 0;\n  if ((int)count_leading_zeroes_minus_11 < 0x20) {\n    bool is_count_leading_zeroes_minus_2b_signed = SBORROW4(count_leading_zeroes_result - 0x2b, 0xc);\n    count_leading_zeroes_result = count_leading_zeroes_result + -0x1f;\n    is_count_leading_zeroes_minus_2b_negative = count_leading_zeroes_result < 0;\n    is_count_leading_zeroes_minus_2b_zero = count_leading_zeroes_result == 0;\n    count_leading_zeroes_minus_11 = count_leading_zeroes_minus_11;\n    if (!is_count_leading_zeroes_minus_2b_zero && is_count_leading_zeroes_minus_2b_negative == is_count_leading_zeroes_minus_2b_signed) {\n      shifted_input_divided_by_8_or_input1 = shifted_input_divided_by_8 << (count_leading_zeroes_minus_11 & 0xff);\n      shifted_input_divided_by_8 = shifted_input_divided_by_8 >> (0xcU - count_leading_zeroes_result & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_count_leading_zeroes_minus_2b_zero || is_count_leading_zeroes_minus_2b_negative != SBORROW4(count_leading_zeroes_result - 0x2b, 0xc)) {\n    uint in_r12 = 0x20 - count_leading_zeroes_minus_11;\n  }\n  shifted_input_divided_by_8 = shifted_input_divided_by_8 << (count_leading_zeroes_minus_11 & 0xff);\n  if (is_count_leading_zeroes_minus_2b_zero || is_count_leading_zeroes_minus_2b_negative != SBORROW4(count_leading_zeroes_result - 0x2b, 0xc)) {\n    shifted_input_divided_by_8 = shifted_input_divided_by_8 | shifted_input_divided_by_8_or_input1 >> (in_r12 & 0xff);\n  }\n  if (is_count_leading_zeroes_minus_2b_zero || is_count_leading_zeroes_minus_2b_negative != SBORROW4(count_leading_zeroes_result - 0x2b, 0xc)) {\n    shifted_input_divided_by_8_or_input1 = shifted_input_divided_by_8_or_input1 << (count_leading_zeroes_minus_11 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)count_leading_zeroes_minus_11 < 0x381) {\n    return CONCAT44(shifted_input_divided_by_8 + (0x380 - count_leading_zeroes_minus_11) * 0x100000 | sign_bit, shifted_input_divided_by_8_or_input1);\n  }\n  uint count_leading_zeroes_minus_380_complement = ~(0x380 - count_leading_zeroes_minus_11);\n  if (0x1e < (int)count_leading_zeroes_minus_380_complement) {\n    return CONCAT44(shifted_input_divided_by_8_divided_by_8_with_sign_bit, shifted_input_divided_by_8 >> (count_leading_zeroes_minus_380_complement - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  int count_leading_zeroes_minus_380 = count_leading_zeroes_minus_380_complement - 0x13;\n  if (count_leading_zeroes_minus_380 == 0 || count_leading_zeroes_minus_380 < 0 != SCARRY4(count_leading_zeroes_minus_380_complement - 0x1f, 0xc)) {\n    count_leading_zeroes_minus_380_complement = count_leading_zeroes_minus_380_complement + 1;\n    return CONCAT44(sign_bit | shifted_input_divided_by_8 >> (count_leading_zeroes_minus_380_complement & 0xff), shifted_input_divided_by_8_or_input1 >> (count_leading_zeroes_minus_380_complement & 0xff) | shifted_input_divided_by_8 << (0x20 - count_leading_zeroes_minus_380_complement & 0xff));\n  }\n  return CONCAT44(shifted_input_divided_by_8_divided_by_8_with_sign_bit, shifted_input_divided_by_8_or_input1 >> (0x20 - (0xcU - count_leading_zeroes_minus_380) & 0xff) | shifted_input_divided_by_8 << (0xcU - count_leading_zeroes_minus_380 & 0xff)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000418",
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "calculate_08000418"
        },
        "FUN_08002ca8": {
            "renaming": {
                "FUN_08002ca8": "check_status_and_return_08002ca8",
                "param_1": "data_ptr",
                "param_2": "data_length",
                "param_3": "param_3",
                "iVar1": "current_length",
                "current_status": "current_status",
                "*(uint *)(*param_1 + 0x14)": "current_status",
                "*(undefined *)((int)param_1 + 0x3d)": "undefined_val",
                "*(undefined *)(param_1 + 0xf)": "undefined_arr_val",
                "data_ptr[0x10]": "data_ptr_val_1",
                "data_ptr[0xc]": "data_ptr_val_2",
                "*(undefined4 *)(*data_ptr + 0x14)": "undefined_val"
            },
            "code": "int check_status_and_return_08002ca8(int *data_ptr, uint data_length, int param_3) {\n  int current_status;\n  while (true) {\n    current_status = *(uint *)(*data_ptr + 0x14);\n    if ((current_status & 0x40) == 0x40) {\n      return 0;\n    }\n    if ((current_status & 0x10) == 0x10) {\n      break;\n    }\n    if ((data_length == 0) || (FUN_080015a0() > (data_length - param_3))) {\n      data_ptr[0x10] |= 0x20;\n      *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n      *(undefined *)(data_ptr + 0xf) = 0;\n      return 3;\n    }\n  }\n  *(undefined4 *)(*data_ptr + 0x14) = 0xffffffef;\n  data_ptr[0x10] = 0;\n  data_ptr[0xc] = 0;\n  *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n  *(undefined *)(data_ptr + 0xf) = 0;\n  return 1;\n}",
            "called": [
                "FUN_080015a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca8",
            "calling": [
                "FUN_08001f6c"
            ],
            "imported": false,
            "current_name": "check_status_and_return_08002ca8"
        },
        "FUN_08003a94": {
            "renaming": {
                "FUN_08003a94": "process_command_08003a94",
                "param_1": "command_status",
                "param_2": "command_args",
                "uVar1": "status",
                "uVar2": "command",
                "FUN_080040a0": "execute_command_type1",
                "FUN_0800416a": "set_command_status",
                "FUN_080041a8": "execute_command_type2",
                "FUN_08004104": "execute_command_type3"
            },
            "code": "int process_command_08003a94(int *command_status, uint *command_args) {\\n    int status = 0;\\n    if (*(char *)(command_status + 0xf) == \"\\x01\") {\\n        status = 2;\\n    }\\n    else {\\n        *(char *)(command_status + 0xf) = \"\\x01\";\\n        *(char *)((int)command_status + 0x3d) = \"\\x02\";\\n        *(uint *)(*command_status + 8) &= 0xffff0088;\\n        uint command = *command_args;\\n        if (command == 0x40) {\\n            execute_command_type1(*command_status, command_args[1], command_args[3]);\\n            set_command_status(*command_status, 0x40);\\n        }\\n        else if (command < 0x41) {\\n            if (command == 0x10) {\\n                set_command_status(*command_status, 0x10);\\n            }\\n            else if (command == 0) {\\n                set_command_status(*command_status, 0);\\n            }\\n            else if (command == 0x20) {\\n                set_command_status(*command_status, 0x20);\\n            }\\n            else if (command == 0x30) {\\n                set_command_status(*command_status, 0x30);\\n            }\\n        }\\n        else if (command == 0x70) {\\n            execute_command_type2(*command_status, command_args[2], command_args[1], command_args[3]);\\n            *(uint *)(*command_status + 8) = (*(uint *)(*command_status + 8) & 0xffffff88) | 0x77;\\n        }\\n        else if (command < 0x71) {\\n            if (command == 0x50) {\\n                execute_command_type1(*command_status, command_args[1], command_args[3]);\\n                set_command_status(*command_status, 0x50);\\n            }\\n            else if (command == 0x60) {\\n                execute_command_type3(*command_status, command_args[1], command_args[3]);\\n                set_command_status(*command_status, 0x60);\\n            }\\n        }\\n        else if (command == 0x1000) {\\n            *(uint *)(*command_status + 8) &= 0xfffffff8;\\n        }\\n        else if (command == 0x2000) {\\n            execute_command_type2(*command_status, command_args[2], command_args[1], command_args[3]);\\n            *(uint *)(*command_status + 8) |= 0x4000;\\n        }\\n        *(char *)((int)command_status + 0x3d) = \"\\x01\";\\n        *(char *)(command_status + 0xf) = \"\\0\";\\n        status = 0;\\n    }\\n    return status;\\n}",
            "called": [
                "FUN_0800416a",
                "FUN_080040a0",
                "FUN_08004104",
                "FUN_080041a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a94",
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "imported": false,
            "current_name": "process_command_08003a94"
        },
        "FUN_0800416a": {
            "renaming": {
                "FUN_0800416a": "set_permissions_0800416a",
                "param_1": "file_descriptor",
                "param_2": "permissions",
                "PTR_": "",
                "DAT_": "",
                "*(uint *)(param_1 + 8)": "*file_flags"
            },
            "code": "void set_permissions_0800416a(int file_descriptor, ushort permissions) {\n  uint* file_flags = (uint*)(file_descriptor + 8);\n  *file_flags = (*file_flags & 0xffffff8f) | (uint)(permissions | 7);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800416a",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": false,
            "current_name": "set_permissions_0800416a"
        },
        "FUN_080055f4": {
            "renaming": {
                "FUN_080055f4": "set_flags_and_call_function_080055f4",
                "local_18": "length",
                "local_14": "value1",
                "local_c": "value2",
                "DAT_0800566c": "flag_data",
                "DAT_08005670": "target_data",
                "FUN_08001a80": "set_length_and_values",
                "FUN_080017c4": "set_length_pointer"
            },
            "code": "void set_flags_and_call_function_080055f4(void)\n{\n  uint32_t *flag_ptr = (uint32_t *)(DAT_0800566c + 0x18);\n  *flag_ptr |= 0x20;\n  *flag_ptr |= 4;\n  *flag_ptr |= 8;\n  bool use_flag = (*flag_ptr & 8) != 0;\n  int32_t length = 0x1e;\n  int32_t value1 = 1;\n  int32_t value2 = 2;\n  set_length_and_values(DAT_08005670, length, value1, value2);\n  set_length_pointer(DAT_08005670, &length);\n  return;\n}",
            "called": [
                "FUN_08001a80",
                "FUN_080017c4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055f4",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "set_flags_and_call_function_080055f4"
        },
        "FUN_080059f0": {
            "renaming": {
                "FUN_080059f0": "FUNC_080059f0"
            },
            "code": "\nulonglong FUNC_080059f0(int param_1,uint param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  uint uVar7;\n  int iVar8;\n  undefined8 uVar9;\n  undefined8 uVar10;\n  ulonglong uVar11;\n  \n  uVar9 = CONCAT44(param_2,param_1);\n  uVar7 = param_2 & 0x7fffffff;\n  if (DAT_08005cd8 < (int)uVar7) {\n    if ((uVar7 == DAT_08005cdc || (int)uVar7 < (int)DAT_08005cdc) &&\n       ((uVar7 != DAT_08005cdc || (param_1 == 0)))) {\n      uVar1 = DAT_08005ce4;\n      if (0 < (int)param_2) {\n        uVar1 = DAT_08005ce0;\n      }\n      return CONCAT44(uVar1,DAT_08005ce8);\n    }\n    uVar11 = FUNC_0800015c(param_1,param_2,param_1,param_2,param_4);\n  }\n  else {\n    if (DAT_08005cec < (int)uVar7) {\n      uVar9 = do_nothing_08005d0c();\n      uVar4 = (undefined4)((ulonglong)uVar9 >> 0x20);\n      uVar1 = (undefined4)uVar9;\n      if (DAT_08005cfc < (int)uVar7) {\n        if (DAT_08005d00 < (int)uVar7) {\n          uVar9 = FUNC_0800071c(0,DAT_08005d08,uVar1,uVar4);\n          iVar8 = 3;\n        }\n        else {\n          uVar9 = FUNC_08000158(uVar1,uVar4,0,DAT_08005d04);\n          uVar10 = FUNC_080004c8(uVar1,uVar4,0,DAT_08005d04);\n          uVar10 = FUNC_0800015c((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005cf8);\n          uVar9 = FUNC_0800071c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                               (int)((ulonglong)uVar10 >> 0x20));\n          iVar8 = 2;\n        }\n      }\n      else if (DAT_08005cfc + -0xd0000 < (int)uVar7) {\n        uVar9 = FUNC_08000158(uVar1,uVar4,0,DAT_08005cf8);\n        uVar10 = FUNC_0800015c(uVar1,uVar4,0,DAT_08005cf8);\n        uVar9 = FUNC_0800071c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                             (int)((ulonglong)uVar10 >> 0x20));\n        iVar8 = 1;\n      }\n      else {\n        uVar9 = FUNC_0800015c(uVar1,uVar4,uVar1,uVar4);\n        uVar9 = FUNC_08000158((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),0,DAT_08005cf8);\n        uVar10 = FUNC_0800015c(uVar1,uVar4,0,0x40000000);\n        uVar9 = FUNC_0800071c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                             (int)((ulonglong)uVar10 >> 0x20));\n        iVar8 = 0;\n      }\n    }\n    else {\n      if ((int)uVar7 <= DAT_08005cec + -0x1bc0000) {\n        uVar10 = FUNC_0800015c(param_1,param_2,DAT_08005cd0,DAT_08005cd4,param_4);\n        iVar8 = FUN_080009e8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005cf8);\n        if (iVar8 != 0) {\n          return CONCAT44(param_2,param_1);\n        }\n      }\n      iVar8 = -1;\n    }\n    uVar6 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar5 = (undefined4)uVar9;\n    uVar9 = FUNC_080004c8(uVar5,uVar6,uVar5,uVar6);\n    uVar2 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar1 = (undefined4)uVar9;\n    uVar9 = FUNC_080004c8(uVar1,uVar2,uVar1,uVar2);\n    uVar3 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar4 = (undefined4)uVar9;\n    uVar9 = FUNC_080004c8(uVar4,uVar3,DAT_08005c78,DAT_08005c7c);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c80,DAT_08005c84);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c88,DAT_08005c8c);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c90,DAT_08005c94);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005c98,DAT_08005c9c);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_08005ca0,DAT_08005ca4);\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar1,uVar2);\n    uVar10 = FUNC_080004c8(uVar4,uVar3,DAT_08005ca8,DAT_08005cac);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cb0,DAT_08005cb4);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cb8,DAT_08005cbc);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cc0,DAT_08005cc4);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar10 = FUNC_08000158((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005cc8,DAT_08005ccc);\n    uVar10 = FUNC_080004c8((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar4,uVar3);\n    uVar9 = FUNC_0800015c((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                         (int)((ulonglong)uVar10 >> 0x20));\n    uVar9 = FUNC_080004c8((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar5,uVar6);\n    uVar1 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    if (iVar8 == -1) {\n      uVar11 = FUNC_08000158(uVar5,uVar6,(int)uVar9,uVar1);\n      return uVar11;\n    }\n    uVar9 = FUNC_08000158((int)uVar9,uVar1,*(undefined4 *)(PTR_DAT_08005cf0 + iVar8 * 8),\n                         *(undefined4 *)((int)(PTR_DAT_08005cf0 + iVar8 * 8) + 4));\n    uVar9 = FUNC_08000158((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar5,uVar6);\n    uVar11 = FUNC_08000158(*(undefined4 *)(PTR_DAT_08005cf4 + iVar8 * 8),\n                          *(undefined4 *)((int)(PTR_DAT_08005cf4 + iVar8 * 8) + 4),(int)uVar9,\n                          (int)((ulonglong)uVar9 >> 0x20));\n    if ((int)param_2 < 0) {\n      return uVar11 & 0xffffffff | (ulonglong)((int)(uVar11 >> 0x20) + 0x80000000) << 0x20;\n    }\n  }\n  return uVar11;\n}\n\n",
            "called": [
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_08000158",
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_080009e8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080059f0",
            "calling": [
                "FUN_08005838"
            ],
            "imported": false,
            "current_name": "FUNC_080059f0"
        },
        "FUN_080053b0": {
            "renaming": {
                "FUN_080053b0": "initialize_data_and_run_080053b0",
                "local_58": "data_0",
                "local_54": "data_1",
                "local_50": "data_2",
                "local_4c": "data_3",
                "local_48": "data_4",
                "local_44": "data_5",
                "local_40": "data_6",
                "local_3c": "data_7",
                "local_38": "buffer_0",
                "local_34": "buffer_1",
                "local_30": "buffer_2",
                "local_2c": "buffer_3",
                "local_28": "buffer_4",
                "local_24": "buffer_5",
                "local_20": "buffer_6",
                "local_1c": "buffer_7",
                "local_18": "buffer",
                "PTR_DAT_080054f4": "data_pointer",
                "DAT_080054f8": "data_value",
                "PTR_s____src_main_c_080054fc": "error_message_pointer",
                "initialize_buffer": "initialize_buffer",
                "initialize_data": "initialize_data",
                "initialize_other_data": "initialize_other_data",
                "get_data": "get_data",
                "initialize_more_data": "initialize_more_data",
                "initialize_even_more_data": "initialize_even_more_data",
                "run_the_program": "run_the_program",
                "status": "status",
                "data": "data",
                "buffer": "buffer"
            },
            "code": "void initialize_data_and_run_080053b0(void)\n{\n  int status;\n  int buffer[4];\n  int data[8];\n  int *PTR_DAT_080054f4 = (int *)PTR_DAT_080054f4;\n  \n  PTR_DAT_080054f4[0] = DAT_080054f8;\n  PTR_DAT_080054f4[1] = 0x708;\n  PTR_DAT_080054f4[2] = 0;\n  PTR_DAT_080054f4[3] = 100;\n  PTR_DAT_080054f4[4] = 0;\n  PTR_DAT_080054f4[5] = 0;\n  PTR_DAT_080054f4[6] = 0;\n  \n  status = initialize_buffer(PTR_DAT_080054f4);\n  if (status != 0) {\n    print_error_message(PTR_s____src_main_c_080054fc,399);\n  }\n  \n  buffer[0] = 0x1000;\n  status = initialize_data(PTR_DAT_080054f4, buffer);\n  if (status != 0) {\n    print_error_message(PTR_s____src_main_c_080054fc,0x194);\n  }\n  \n  status = initialize_other_data(PTR_DAT_080054f4);\n  if (status != 0) {\n    print_error_message(PTR_s____src_main_c_080054fc,0x198);\n  }\n  \n  data[0] = 0;\n  data[1] = 0;\n  status = get_data(PTR_DAT_080054f4, data);\n  if (status != 0) {\n    print_error_message(PTR_s____src_main_c_080054fc,0x19f);\n  }\n  \n  buffer[0] = 0x60;\n  status = initialize_more_data(PTR_DAT_080054f4, buffer, 0);\n  if (status != 0) {\n    print_error_message(PTR_s____src_main_c_080054fc,0x1ab);\n  }\n  status = initialize_more_data(PTR_DAT_080054f4, buffer, 0xc);\n  if (status != 0) {\n    print_error_message(PTR_s____src_main_c_080054fc,0x1b0);\n  }\n  \n  data[0] = 0;\n  data[1] = 0;\n  data[2] = 0;\n  data[3] = 0;\n  data[4] = 0;\n  data[5] = 0x2000;\n  data[6] = 0;\n  status = initialize_even_more_data(PTR_DAT_080054f4, data);\n  if (status != 0) {\n    print_error_message(PTR_s____src_main_c_080054fc,0x1bc);\n  }\n  \n  run_the_program(PTR_DAT_080054f4);\n  return;\n}\n",
            "called": [
                "FUN_08003640",
                "FUN_08003a94",
                "FUN_080042de",
                "FUN_08005674",
                "FUN_0800422e",
                "FUN_08005680",
                "FUN_080035a4",
                "FUN_08003908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053b0",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_data_and_run_080053b0"
        },
        "FUN_08009e74": {
            "renaming": {
                "FUN_08009e74": "do_nothing_08009e74"
            },
            "code": "\nvoid do_nothing_08009e74(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e74",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08009e74"
        },
        "FUN_0800088a": {
            "renaming": {
                "FUN_0800088a": "calculate_result_0800088a",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "msb",
                "unaff_r4": "mask",
                "uVar2": "temp",
                "uVar3": "result2",
                "in_r12": "shift",
                "bVar4": "is_input1_2_zero"
            },
            "code": "unsigned long long calculate_result_0800088a(uint input1, uint input2, uint input3, uint input4) {\n  uint temp;\n  uint mask = 0x80000000;\n  uint shift = 0x14;\n  uint result1 = input1;\n  uint result2 = input2;\n  if (input4 >> shift != input3 || input4 >> shift != input4) {\n    if (input3 == input4 >> shift) {\n      if ((input1 | input2 << 0xc) == 0) {\n        result1 = input3;\n        result2 = input4;\n        goto RETURN_RESULT;\n      }\n    }\n    else if (input4 >> shift == input3) {\n      if ((input3 | input4 << 0xc) == 0) {\n        result2 = input4;\n        goto RETURN_SPECIAL_RESULT;\n      }\n    }\n    else {\n      bool is_input1_2_zero = (input1 | input2 << 1) == 0;\n      bool is_input3_4_zero = (input3 | input4 << 1) == 0;\n      if (!is_input1_2_zero && !is_input3_4_zero) {\n        if (input3 == 0) {\n          temp = input2 & mask;\n          do {\n            uint msb = input1 & mask;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(msb != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | temp;\n          if (input4 >> shift != 0) {\n            result1 = input1;\n            result2 = input2;\n            goto RETURN_RESULT;\n          }\n        }\n        do {\n          temp = input3 & mask;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(temp != 0);\n        } while ((input4 & 0x100000) == 0);\n        result1 = input1;\n        result2 = input2;\n        goto RETURN_RESULT;\n      }\n      if (is_input1_2_zero) {\n        goto RETURN_SPECIAL_RESULT;\n      }\n      if (is_input3_4_zero) {\n        result1 = input3;\n        result2 = input4;\n        goto RETURN_RESULT;\n      }\n    }\n  }\n  result1 = input3;\n  result2 = input4;\n  RETURN_SPECIAL_RESULT:\n  return (unsigned long long)((input2 ^ input4) & mask) << 0x20;\n  RETURN_RESULT:\n  return (unsigned long long)((result2 ^ input4) & mask) << 0x20 | 0x7ff00000 | result1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800088a",
            "calling": [
                "FUN_0800071c"
            ],
            "imported": false,
            "current_name": "calculate_result_0800088a"
        },
        "FUN_080016d0": {
            "renaming": {
                "FUN_080016d0": "check_param_within_bounds_080016d0",
                "param_1": "param",
                "bVar1": "is_within_bounds",
                "DAT_08001710": "array",
                "0xffffffff": "arg1",
                "0xf": "arg2"
            },
            "code": "bool check_param_within_bounds_080016d0(int param) {\n  bool is_within_bounds = param < 0x1000000;\n  if (is_within_bounds) {\n    DAT_08001710[1] = param - 1;\n    call_function_with_args(0xffffffff, 0xf);\n    DAT_08001710[2] = 0;\n    *DAT_08001710 = 7;\n  }\n  return !is_within_bounds;\n}",
            "called": [
                "FUN_08001618"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016d0",
            "calling": [
                "FUN_08001762"
            ],
            "imported": false,
            "current_name": "check_param_within_bounds_080016d0"
        },
        "FUN_08001ccc": {
            "renaming": {
                "FUN_08001ccc": "process_data_08001ccc",
                "param_1": "data_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5",
                "param_6": "param_6",
                "param_7": "param_7",
                "uVar1": "var_1",
                "iVar2": "var_2",
                "cVar3": "var_3",
                "uVar4": "var_4",
                "iVar5": "var_5",
                "uVar6": "result",
                "puVar7": "var_7",
                "bVar8": "var_8",
                "data_ptr_cpy": "data_ptr_cpy",
                "is_zero": "is_zero"
            },
            "code": "uint32_t process_data_08001ccc(uint32_t **data_ptr, uint16_t param_2, uint16_t param_3, uint16_t param_4, uint32_t *param_5, uint16_t param_6, uint32_t param_7)\\n\\\n{\\n\\\n  uint32_t uVar1;\\n\\\n  int32_t iVar2;\\n\\\n  char cVar3;\\n\\\n  uint32_t uVar4;\\n\\\n  int32_t iVar5;\\n\\\n  uint32_t result;\\n\\\n  uint32_t *data_ptr_cpy = *data_ptr;\\n\\\n  bool is_zero;\\n\\\n  \\n\\\n  iVar2 = get_i_var();\\n\\\n  uVar1 = 0x08001f64;\\n\\\n  if (*(char *)((int)data_ptr + 0x3d) == \" \") {\\n\\\n    do {\\n\\\n      if ((uVar1 >> 0x10 & 0xff) == 1) {\\n\\\n        uVar4 = uVar1 & ~(data_ptr_cpy)[5] & 0xffff;\\n\\\n        is_zero = uVar4 == 0;\\n\\\n        if (is_zero) {\\n\\\n          uVar4 = 1;\\n\\\n        }\\n\\\n        cVar3 = (char)uVar4;\\n\\\n        if (!is_zero) {\\n\\\n          cVar3 = \"\\0\";\\n\\\n        }\\n\\\n      }\\n\\\n      else {\\n\\\n        uVar4 = uVar1 & ~(data_ptr_cpy)[6] & 0xffff;\\n\\\n        is_zero = uVar4 == 0;\\n\\\n        if (is_zero) {\\n\\\n          uVar4 = 1;\\n\\\n        }\\n\\\n        cVar3 = (char)uVar4;\\n\\\n        if (!is_zero) {\\n\\\n          cVar3 = \"\\0\";\\n\\\n        }\\n\\\n      }\\n\\\n      if (cVar3 != \"\\x01\") {\\n\\\n        iVar5 = 0;\\n\\\n        goto LAB_08001d9c;\\n\\\n      }\\n\\\n      iVar5 = get_i_var();\\n\\\n    } while ((uint32_t)(iVar5 - iVar2) < 0x1a);\\n\\\n    data_ptr[0xc] = (uint32_t *)0x0;\\n\\\n    *(undefined *)((int)data_ptr + 0x3d) = 0x20;\\n\\\n    *(undefined *)((int)data_ptr + 0x3e) = 0;\\n\\\n    *(undefined *)(data_ptr + 0xf) = 0;\\n\\\n    iVar5 = 3;\\n\\\n  LAB_08001d9c:\\n\\\n    if (iVar5 == 0) {\\n\\\n      if (*(char *)(data_ptr + 0xf) == \"\\x01\") {\\n\\\n        result = 2;\\n\\\n      }\\n\\\n      else {\\n\\\n        *(undefined *)(data_ptr + 0xf) = 1;\\n\\\n        if ((**data_ptr & 1) != 1) {\\n\\\n          **data_ptr = **data_ptr | 1;\\n\\\n        }\\n\\\n        **data_ptr = **data_ptr & 0xfffff7ff;\\n\\\n        *(undefined *)((int)data_ptr + 0x3d) = 0x21;\\n\\\n        *(undefined *)((int)data_ptr + 0x3e) = 0x40;\\n\\\n        data_ptr[0x10] = (uint32_t *)0x0;\\n\\\n        data_ptr[9] = param_5;\\n\\\n        *(uint16_t *)((int)data_ptr + 0x2a) = param_6;\\n\\\n        data_ptr[0xb] = 0x08001f68;\\n\\\n        *(uint16_t *)(data_ptr + 10) = *(uint16_t *)((int)data_ptr + 0x2a);\\n\\\n        iVar5 = process_data_08001ccc_internal(data_ptr, param_2, param_3, param_4, param_7, iVar2);\\n\\\n        if (iVar5 == 0) {\\n\\\n          while (*(uint16_t *)(data_ptr + 10) != 0) {\\n\\\n            iVar5 = process_data_08001ccc_internal_2(data_ptr, param_7, iVar2);\\n\\\n            if (iVar5 != 0) {\\n\\\n              if (data_ptr[0x10] == (uint32_t *)0x4) {\\n\\\n                **data_ptr = **data_ptr | 0x200;\\n\\\n                return 1;\\n\\\n              }\\n\\\n              return 3;\\n\\\n            }\\n\\\n            data_ptr_cpy = data_ptr[9];\\n\\\n            data_ptr[9] = (uint32_t *)((int)data_ptr_cpy + 1);\\n\\\n            (*data_ptr)[4] = (uint32_t)*(byte *)data_ptr_cpy;\\n\\\n            *(uint16_t *)(data_ptr + 10) = *(uint16_t *)(data_ptr + 10) + -1;\\n\\\n            *(uint16_t *)((int)data_ptr + 0x2a) = *(uint16_t *)((int)data_ptr + 0x2a) + -1;\\n\\\n            if ((((*data_ptr)[5] & 4) == 4) && (*(uint16_t *)(data_ptr + 10) != 0)) {\\n\\\n              data_ptr_cpy = data_ptr[9];\\n\\\n              data_ptr[9] = (uint32_t *)((int)data_ptr_cpy + 1);\\n\\\n              (*data_ptr)[4] = (uint32_t)*(byte *)data_ptr_cpy;\\n\\\n              *(uint16_t *)(data_ptr + 10) = *(uint16_t *)(data_ptr + 10) + -1;\\n\\\n              *(uint16_t *)((int)data_ptr + 0x2a) = *(uint16_t *)((int)data_ptr + 0x2a) + -1;\\n\\\n            }\\n\\\n          }\\n\\\n          iVar2 = process_data_08001ccc_internal_3(data_ptr, param_7, iVar2);\\n\\\n          if (iVar2 == 0) {\\n\\\n            **data_ptr = **data_ptr | 0x200;\\n\\\n            *(undefined *)((int)data_ptr + 0x3d) = 0x20;\\n\\\n            *(undefined *)((int)data_ptr + 0x3e) = 0;\\n\\\n            *(undefined *)(data_ptr + 0xf) = 0;\\n\\\n            result = 0;\\n\\\n          }\\n\\\n          else if (data_ptr[0x10] == (uint32_t *)0x4) {\\n\\\n            **data_ptr = **data_ptr | 0x200;\\n\\\n            result = 1;\\n\\\n          }\\n\\\n          else {\\n\\\n            result = 3;\\n\\\n          }\\n\\\n        }\\n\\\n        else if (data_ptr[0x10] == (uint32_t *)0x4) {\\n\\\n          *(undefined *)(data_ptr + 0xf) = 0;\\n\\\n          result = 1;\\n\\\n        }\\n\\\n        else {\\n\\\n          *(undefined *)(data_ptr + 0xf) = 0;\\n\\\n          result = 3;\\n\\\n        }\\n\\\n      }\\n\\\n    }\\n\\\n    else {\\n\\\n      result = 2;\\n\\\n    }\\n\\\n  }\\n\\\n  else {\\n\\\n    result = 2;\\n\\\n  }\\n\\\n  return result;\\n\\\n}",
            "called": [
                "FUN_08002640",
                "FUN_08002c2e",
                "FUN_080015a0",
                "FUN_08002bb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ccc",
            "calling": [
                "FUN_08004ea4"
            ],
            "imported": false,
            "current_name": "process_data_08001ccc"
        },
        "FUN_0800157c": {
            "renaming": {
                "FUN_0800157c": "add_byte_to_int_and_store_as_uint_0800157c",
                "PTR_DAT_0800159c": "ptr_uint",
                "PTR_DAT_08001598": "ptr_byte"
            },
            "code": "void add_byte_to_int_and_store_as_uint_0800157c(void)\n{\n  uint *PTR_DAT_0800159c = (uint *)PTR_DAT_0800159c;\n  int *ptr_int = (int *)PTR_DAT_0800159c;\n  byte *PTR_DAT_08001598 = (byte *)PTR_DAT_08001598;\n  *PTR_DAT_0800159c = *ptr_int + (uint)*PTR_DAT_08001598;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "FUN_08005704"
            ],
            "imported": false,
            "current_name": "add_byte_to_int_and_store_as_uint_0800157c"
        },
        "FUN_08000e20": {
            "renaming": {
                "FUN_08000e20": "FUNC_08000e20"
            },
            "code": "\nuint FUNC_08000e20(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  uVar2 = param_1 >> 0x17 & 0xff;\n  bVar7 = uVar2 == 0;\n  if (!bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = param_4 == 0xff;\n  }\n  if (bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    uVar6 = param_1;\n    if (uVar2 == 0xff) {\n      if (((param_1 & 0x7fffff) != 0) || (uVar6 = param_2, param_4 == 0xff)) {\nLAB_08000e16:\n        return uVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param_4 == 0xff) {\n        uVar6 = param_2;\n        if ((param_2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (param_1 ^ param_2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      bVar7 = (param_1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (param_2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = uVar2 == 0;\n        uVar6 = param_1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_1 = param_1 << 1;\n            bVar7 = (param_1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          uVar2 = uVar2 - 1;\n        }\n        param_1 = param_1 | uVar6;\n        bVar7 = param_4 == 0;\n        uVar6 = param_2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_2 = param_2 << 1;\n            bVar7 = (param_2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          param_4 = param_4 - 1;\n        }\n        param_2 = param_2 | uVar6;\n        goto LAB_08000e38;\n      }\n      if ((param_1 & 0x7fffffff) == 0) {\n        if ((param_2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    param_1 = param_1 ^ param_2;\n  }\n  else {\nLAB_08000e38:\n    iVar3 = uVar2 - param_4;\n    if (param_2 << 9 == 0) {\n      param_1 = (param_1 ^ param_2) & 0x80000000 | param_1 & 0x7fffff;\n      bVar9 = SCARRY4(iVar3,0x7f);\n      iVar5 = iVar3 + 0x7f;\n      bVar7 = iVar5 < 0;\n      bVar8 = iVar5 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,iVar5);\n        bVar7 = 0xff - iVar5 < 0;\n        bVar8 = iVar5 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        param_1 = param_1 | iVar5 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return param_1;\n      }\n      param_1 = param_1 | 0x800000;\n      uVar2 = 0;\n      bVar8 = SBORROW4(iVar5,1);\n      uVar4 = iVar3 + 0x7e;\n      bVar7 = uVar4 == 0;\n      uVar6 = uVar4;\n    }\n    else {\n      uVar1 = (param_2 << 9) >> 4 | 0x10000000;\n      uVar2 = (param_1 << 9) >> 4 | 0x10000000;\n      param_1 = (param_1 ^ param_2) & 0x80000000;\n      bVar7 = uVar1 <= uVar2;\n      if (!bVar7) {\n        uVar2 = uVar2 << 1;\n      }\n      uVar4 = iVar3 + 0x7d + (uint)bVar7;\n      uVar6 = 0x800000;\n      do {\n        if (uVar1 <= uVar2) {\n          uVar2 = uVar2 - uVar1;\n          param_1 = param_1 | uVar6;\n        }\n        bVar7 = uVar1 >> 1 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 1);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 1;\n        }\n        bVar7 = uVar1 >> 2 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 2);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 2;\n        }\n        bVar7 = uVar1 >> 3 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 3);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 3;\n        }\n        uVar2 = uVar2 * 0x10;\n        bVar7 = uVar2 == 0;\n        if (!bVar7) {\n          uVar6 = uVar6 >> 4;\n          bVar7 = uVar6 == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      bVar7 = uVar4 == 0xfd;\n      uVar6 = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        param_1 = param_1 + uVar4 * 0x800000 + (uint)(uVar1 <= uVar2);\n        if (uVar2 - uVar1 == 0) {\n          param_1 = param_1 & 0xfffffffe;\n        }\n        return param_1;\n      }\n    }\n    if (bVar7 || (int)uVar6 < 0 != bVar8) {\n      bVar7 = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        param_1 = param_1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        return param_1;\n      }\n      uVar6 = (param_1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = param_1 << (uVar4 + 0x20 & 0xff);\n      uVar6 = ((uint)((param_1 & 0x80000000) != 0) << 0x1f | uVar6 >> 1) + (uint)((byte)uVar6 & 1);\n      if ((uVar2 | uVar4 << 1) == 0) {\n        uVar6 = uVar6 & ~(uVar4 >> 0x1f);\n      }\n      return uVar6;\n    }\n  }\n  return param_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000e20",
            "calling": [
                "FUN_08004d78",
                "FUN_080049cc"
            ],
            "imported": false,
            "current_name": "FUNC_08000e20"
        },
        "FUN_0800121c": {
            "renaming": {
                "FUN_0800121c": "FUNC_0800121c"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 FUNC_0800121c(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  ulonglong uVar1;\n  uint uVar2;\n  uint *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint *puVar9;\n  uint *puVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  undefined8 uVar15;\n  \n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar6 = count_leading_zeroes(param_3);\n      if (uVar6 != 0) {\n        param_3 = param_3 << (uVar6 & 0xff);\n        param_2 = param_1 >> (0x20 - uVar6 & 0xff) | param_2 << (uVar6 & 0xff);\n        param_1 = param_1 << (uVar6 & 0xff);\n      }\n      uVar12 = param_3 >> 0x10;\n      uVar8 = param_2 / uVar12;\n      uVar11 = uVar8 * (param_3 & 0xffff);\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar12 * uVar8) * 0x10000;\n      uVar4 = uVar8;\n      if (uVar7 <= uVar11 && uVar11 - uVar7 != 0) {\n        bVar14 = CARRY4(param_3,uVar7);\n        uVar7 = param_3 + uVar7;\n        uVar4 = uVar8 - 1;\n        if ((bVar14 == false) && (uVar7 <= uVar11 && uVar11 - uVar7 != 0)) {\n          uVar4 = uVar8 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar2 = (uVar7 - uVar11) / uVar12;\n      uVar5 = uVar2 * (param_3 & 0xffff);\n      uVar8 = param_1 & 0xffff | ((uVar7 - uVar11) - uVar12 * uVar2) * 0x10000;\n      uVar7 = uVar2;\n      if (uVar8 <= uVar5 && uVar5 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar7 = uVar2 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar5 && uVar5 - uVar8 != 0)) {\n          uVar7 = uVar2 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      puVar3 = (uint *)(uVar7 | uVar4 << 0x10);\n      puVar9 = (uint *)0x0;\n      uVar8 = uVar8 - uVar5;\n    }\n    else {\n      if (param_3 == 0) {\n                    /* WARNING: Could not recover jumptable at 0x08001302. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (code *)software_udf(0xff,0x8001302);\n        uVar15 = (*UNRECOVERED_JUMPTABLE)();\n        return uVar15;\n      }\n      uVar6 = count_leading_zeroes(param_3);\n      if (uVar6 == 0) {\n        puVar9 = (uint *)0x1;\n        param_2 = param_2 - param_3;\n        uVar12 = param_3 >> 0x10;\n        uVar2 = param_3 & 0xffff;\n      }\n      else {\n        param_3 = param_3 << (uVar6 & 0xff);\n        uVar4 = param_2 >> (0x20 - uVar6 & 0xff);\n        uVar12 = param_3 >> 0x10;\n        uVar11 = uVar4 / uVar12;\n        uVar2 = param_3 & 0xffff;\n        uVar5 = uVar11 * uVar2;\n        uVar8 = param_1 >> (0x20 - uVar6 & 0xff) | param_2 << (uVar6 & 0xff);\n        uVar7 = uVar8 >> 0x10 | (uVar4 - uVar12 * uVar11) * 0x10000;\n        param_1 = param_1 << (uVar6 & 0xff);\n        uVar4 = uVar11;\n        if (uVar7 <= uVar5 && uVar5 - uVar7 != 0) {\n          bVar14 = CARRY4(param_3,uVar7);\n          uVar7 = param_3 + uVar7;\n          uVar4 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar5 && uVar5 - uVar7 != 0)) {\n            uVar4 = uVar11 - 2;\n            uVar7 = uVar7 + param_3;\n          }\n        }\n        uVar11 = (uVar7 - uVar5) / uVar12;\n        uVar13 = uVar11 * uVar2;\n        param_2 = uVar8 & 0xffff | ((uVar7 - uVar5) - uVar12 * uVar11) * 0x10000;\n        uVar7 = uVar11;\n        if (param_2 <= uVar13 && uVar13 - param_2 != 0) {\n          bVar14 = CARRY4(param_3,param_2);\n          param_2 = param_3 + param_2;\n          uVar7 = uVar11 - 1;\n          if ((bVar14 == false) && (param_2 <= uVar13 && uVar13 - param_2 != 0)) {\n            uVar7 = uVar11 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar13;\n        puVar9 = (uint *)(uVar7 | uVar4 << 0x10);\n      }\n      uVar11 = param_2 / uVar12;\n      uVar7 = uVar2 * uVar11;\n      uVar8 = param_1 >> 0x10 | (param_2 - uVar12 * uVar11) * 0x10000;\n      uVar4 = uVar11;\n      if (uVar8 <= uVar7 && uVar7 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar4 = uVar11 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar7 && uVar7 - uVar8 != 0)) {\n          uVar4 = uVar11 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar11 = (uVar8 - uVar7) / uVar12;\n      uVar2 = uVar2 * uVar11;\n      uVar8 = param_1 & 0xffff | ((uVar8 - uVar7) - uVar12 * uVar11) * 0x10000;\n      uVar7 = uVar11;\n      if (uVar8 <= uVar2 && uVar2 - uVar8 != 0) {\n        bVar14 = CARRY4(param_3,uVar8);\n        uVar8 = param_3 + uVar8;\n        uVar7 = uVar11 - 1;\n        if ((bVar14 == false) && (uVar8 <= uVar2 && uVar2 - uVar8 != 0)) {\n          uVar7 = uVar11 - 2;\n          uVar8 = uVar8 + param_3;\n        }\n      }\n      uVar8 = uVar8 - uVar2;\n      puVar3 = (uint *)(uVar7 | uVar4 << 0x10);\n    }\n    if (param_5 != (uint *)0x0) {\n      *param_5 = uVar8 >> (uVar6 & 0xff);\n      param_5[1] = 0;\n    }\n  }\n  else {\n    puVar9 = param_5;\n    if (param_2 < param_4) {\n      puVar3 = param_5;\n      if (param_5 != (uint *)0x0) {\n        *param_5 = param_1;\n        param_5[1] = param_2;\n        return 0;\n      }\n    }\n    else {\n      puVar10 = (uint *)count_leading_zeroes(param_4);\n      if (puVar10 == (uint *)0x0) {\n        if ((param_4 < param_2) || (puVar3 = puVar10, param_3 <= param_1)) {\n          bVar14 = param_1 < param_3;\n          param_1 = param_1 - param_3;\n          param_2 = (param_2 - param_4) - (uint)bVar14;\n          puVar3 = (uint *)0x1;\n        }\n        puVar9 = puVar10;\n        if (param_5 != (uint *)0x0) {\n          *param_5 = param_1;\n          param_5[1] = param_2;\n        }\n      }\n      else {\n        uVar8 = 0x20 - (int)puVar10;\n        uVar2 = param_3 >> (uVar8 & 0xff) | param_4 << ((uint)puVar10 & 0xff);\n        uVar6 = param_2 >> (uVar8 & 0xff);\n        uVar5 = uVar2 >> 0x10;\n        uVar11 = uVar6 / uVar5;\n        uVar12 = uVar11 * (uVar2 & 0xffff);\n        uVar4 = param_2 << ((uint)puVar10 & 0xff) | param_1 >> (uVar8 & 0xff);\n        uVar7 = uVar4 >> 0x10 | (uVar6 - uVar5 * uVar11) * 0x10000;\n        param_3 = param_3 << ((uint)puVar10 & 0xff);\n        param_1 = param_1 << ((uint)puVar10 & 0xff);\n        uVar6 = uVar11;\n        if (uVar7 <= uVar12 && uVar12 - uVar7 != 0) {\n          bVar14 = CARRY4(uVar2,uVar7);\n          uVar7 = uVar2 + uVar7;\n          uVar6 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar12 && uVar12 - uVar7 != 0)) {\n            uVar6 = uVar11 - 2;\n            uVar7 = uVar7 + uVar2;\n          }\n        }\n        uVar11 = (uVar7 - uVar12) / uVar5;\n        uVar13 = uVar11 * (uVar2 & 0xffff);\n        uVar7 = uVar4 & 0xffff | ((uVar7 - uVar12) - uVar5 * uVar11) * 0x10000;\n        uVar4 = uVar11;\n        if (uVar7 <= uVar13 && uVar13 - uVar7 != 0) {\n          bVar14 = CARRY4(uVar2,uVar7);\n          uVar7 = uVar2 + uVar7;\n          uVar4 = uVar11 - 1;\n          if ((bVar14 == false) && (uVar7 <= uVar13 && uVar13 - uVar7 != 0)) {\n            uVar4 = uVar11 - 2;\n            uVar7 = uVar7 + uVar2;\n          }\n        }\n        puVar3 = (uint *)(uVar4 | uVar6 << 0x10);\n        uVar1 = ZEXT48(puVar3) * (ulonglong)param_3;\n        if (CONCAT44(uVar7 - uVar13,param_1) < uVar1) {\n          puVar3 = (uint *)((int)puVar3 + -1);\n          uVar1 = uVar1 - CONCAT44(uVar2,param_3);\n        }\n        if (param_5 != (uint *)0x0) {\n          uVar6 = ((uVar7 - uVar13) - (int)(uVar1 >> 0x20)) - (uint)(param_1 < (uint)uVar1);\n          *param_5 = uVar6 << (uVar8 & 0xff) | param_1 - (uint)uVar1 >> ((uint)puVar10 & 0xff);\n          param_5[1] = uVar6 >> ((uint)puVar10 & 0xff);\n          puVar9 = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(puVar9,puVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800121c",
            "calling": [
                "FUN_080011ec"
            ],
            "imported": false,
            "current_name": "FUNC_0800121c"
        },
        "FUN_08005d14": {
            "renaming": {
                "FUN_08005d14": "getValueFromPtrPtrData_08005d14",
                "PTR_PTR_DAT_08005d1c": "ptrPtrData"
            },
            "code": "getValueFromPtrPtrData_08005d14() {\n  return *(undefined4 *)PTR_PTR_DAT_08005d1c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d14",
            "calling": [
                "FUN_08005728"
            ],
            "imported": false,
            "current_name": "getValueFromPtrPtrData_08005d14"
        },
        "FUN_080015b4": {
            "renaming": {
                "FUN_080015b4": "set_data_080015b4",
                "param_1": "data",
                "DAT_080015f8": "data_start",
                "*DAT_080015f8": "data",
                "PTR_080015f8": "data_ptr",
                "*(uint *)(DAT_080015f8 + 0xc)": "*data_ptr",
                "0xc": "data_offset",
                "0xf8ff": "mask",
                "(param_1 & 7)": "data_masked",
                "shifted_data": "(data & 0x7) << 8",
                "0x5fa0000": "constant"
            },
            "code": "void set_*set_data_080015b4(uint8_t *set_data_080015b4) {\n    uint32_t* PTR_080015f8 = (uint32_t*)(set_data_080015b4 + 0xc);\n    uint32_t mask = 0xf8ff;\n    uint32_t shifted_*set_data_080015b4 = (*set_data_080015b4 & 0x7) << 8;\n    uint32_t constant = 0x5fa0000;\n    *(uint *)(set_data_080015b4 + 0xc) = (*(uint *)(set_data_080015b4 + 0xc) & mask) | shifted_*set_data_080015b4 | constant;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b4",
            "calling": [
                "FUN_08001714"
            ],
            "imported": false,
            "current_name": "set_data_080015b4"
        },
        "FUN_080036f8": {
            "renaming": {
                "FUN_080036f8": "process_data_080036f8",
                "param_1": "data_ptr",
                "PTR_": "",
                "DAT_": "",
                "flags1": "flags1",
                "flags2": "flags2"
            },
            "code": "void process_data_080036f8(int *data_ptr)\n{\n    uint32_t flags1 = *(uint32_t *)(*data_ptr + 0x10);\n    uint32_t flags2 = *(uint32_t *)(*data_ptr + 0xc);\n\n    if ((flags1 & 2) && (flags2 & 2)) {\n        *(uint32_t *)(*data_ptr + 0x10) = 0xfffffffd;\n        *(uint8_t *)(data_ptr + 7) = 1;\n        if ((*(uint32_t *)(*data_ptr + 0x18) & 3) == 0) {\n            do_nothing_08003c4a(data_ptr);\n            do_nothing_08003c6e(data_ptr);\n        }\n        else {\n            do_nothing_08003c5c(data_ptr);\n        }\n        *(uint8_t *)(data_ptr + 7) = 0;\n    }\n\n    if ((flags1 & 4) && (flags2 & 4)) {\n        *(uint32_t *)(*data_ptr + 0x10) = 0xfffffffb;\n        *(uint8_t *)(data_ptr + 7) = 2;\n        if ((*(uint32_t *)(*data_ptr + 0x18) & 0x300) == 0) {\n            do_nothing_08003c4a(data_ptr);\n            do_nothing_08003c6e(data_ptr);\n        }\n        else {\n            do_nothing_08003c5c(data_ptr);\n        }\n        *(uint8_t *)(data_ptr + 7) = 0;\n    }\n\n    if ((flags1 & 8) && (flags2 & 8)) {\n        *(uint32_t *)(*data_ptr + 0x10) = 0xfffffff7;\n        *(uint8_t *)(data_ptr + 7) = 4;\n        if ((*(uint32_t *)(*data_ptr + 0x1c) & 3) == 0) {\n            do_nothing_08003c4a(data_ptr);\n            do_nothing_08003c6e(data_ptr);\n        }\n        else {\n            do_nothing_08003c5c(data_ptr);\n        }\n        *(uint8_t *)(data_ptr + 7) = 0;\n    }\n\n    if ((flags1 & 0x10) && (flags2 & 0x10)) {\n        *(uint32_t *)(*data_ptr + 0x10) = 0xffffffef;\n        *(uint8_t *)(data_ptr + 7) = 8;\n        if ((*(uint32_t *)(*data_ptr + 0x1c) & 0x300) == 0) {\n            do_nothing_08003c4a(data_ptr);\n            do_nothing_08003c6e(data_ptr);\n        }\n        else {\n            do_nothing_08003c5c(data_ptr);\n        }\n        *(uint8_t *)(data_ptr + 7) = 0;\n    }\n\n    if ((flags1 & 1) && (flags2 & 1)) {\n        *(uint32_t *)(*data_ptr + 0x10) = 0xfffffffe;\n        process_data_080036f8_08004f78(data_ptr);\n    }\n\n    if ((flags1 & 0x80) && (flags2 & 0x80)) {\n        *(uint32_t *)(*data_ptr + 0x10) = 0xffffff7f;\n        do_nothing_08004378(data_ptr);\n    }\n\n    if ((flags1 & 0x40) && (flags2 & 0x40)) {\n        *(uint32_t *)(*data_ptr + 0x10) = 0xffffffbf;\n        do_nothing_08003c80(data_ptr);\n    }\n\n    if ((flags1 & 0x20) && (flags2 & 0x20)) {\n        *(uint32_t *)(*data_ptr + 0x10) = 0xffffffdf;\n        do_nothing_08004366(data_ptr);\n    }\n}",
            "called": [
                "FUN_08003c6e",
                "FUN_08003c4a",
                "FUN_08004378",
                "FUN_08003c80",
                "FUN_08004f78",
                "FUN_08004366",
                "FUN_08003c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036f8",
            "calling": [
                "FUN_08005714"
            ],
            "imported": false,
            "current_name": "process_data_080036f8"
        },
        "FUN_080041a8": {
            "renaming": {
                "FUN_080041a8": "set_param_value_080041a8",
                "param_1": "param_address",
                "param_2": "value",
                "param_3": "shift_amount",
                "param_4": "mask",
                "PTR_": "param_",
                "DAT_": "data_"
            },
            "code": "void set_param_value_080041a8(int PTR_address, uint32_t value, uint8_t shift_amount, uint32_t mask)\n{\n    uint32_t* param = (uint32_t*)(PTR_address + 8);\n    *param = (value | (shift_amount << 8) | mask | (*param & 0xffff00ff));\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041a8",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": false,
            "current_name": "set_param_value_080041a8"
        },
        "FUN_080004c8": {
            "renaming": {
                "FUN_080004c8": "FUNC_080004c8"
            },
            "code": "\nulonglong FUNC_080004c8(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = FUN_080006a4();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006a4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004c8",
            "calling": [
                "FUN_080096e0",
                "FUN_08004d78",
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "FUNC_080004c8"
        },
        "FUN_08008ad4": {
            "renaming": {
                "FUN_08008ad4": "get_data_buffer_08008ad4",
                "puVar1": "data_buffer",
                "PTR_PTR_DAT_08008ae8": "ptr_ptr_data",
                "PTR_DAT_08008aec": "ptr_data"
            },
            "code": "undefined* get_data_buffer_08008ad4()\n{\n  undefined* data_buffer = *(undefined**)(*(int*)PTR_PTR_DAT_08008ae8 + 0x34);\n  if (data_buffer == (undefined*)0x0)\n  {\n    data_buffer = PTR_DAT_08008aec;\n  }\n  return data_buffer + 0xf0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ad4",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "get_data_buffer_08008ad4"
        },
        "FUN_080009e8": {
            "renaming": {
                "FUN_080009e8": "is_end_of_input_080009e8",
                "in_CY": "input_char",
                "FUN_08000978": "read_input"
            },
            "code": "bool is_end_of_input_080009e8(void)\n{\n  char input_char;\n  read_input();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_08000978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009e8",
            "calling": [
                "FUN_080059f0",
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "is_end_of_input_080009e8"
        },
        "FUN_08005674": {
            "renaming": {
                "FUN_08005674": "infinite_loop_08005674"
            },
            "code": "void infinite_loop_08005674(void)\n{\n  while(true) {\n    // do nothing\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005674",
            "calling": [
                "FUN_08005348",
                "FUN_08005598",
                "FUN_080052a0",
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "imported": false,
            "current_name": "infinite_loop_08005674"
        },
        "FUN_08003c4a": {
            "renaming": {
                "FUN_08003c4a": "do_nothing_08003c4a"
            },
            "code": "\nvoid do_nothing_08003c4a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c4a",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c4a"
        },
        "FUN_08009630": {
            "renaming": {
                "FUN_08009630": "calculate_hash_value_08009630",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "output_1",
                "param_6": "output_2",
                "iVar1": "hash_result",
                "iVar3": "hash_type",
                "iVar4": "hash_type",
                "uVar2": "hash_type",
                "uVar5": "hash_value",
                "uVar6": "shift_value",
                "uVar7": "hash_value",
                "local_20": "temp_1",
                "local_1c": "masked_param_4"
            },
            "code": "int calculate_hash_value_08009630(int param_1, int param_2, uint32_t param_3, uint32_t param_4, int *output_1, int *output_2)\n{\n  int hash_result;\n  uint32_t temp_1;\n  uint32_t temp_2;\n  int hash_type;\n  uint32_t hash_value;\n  uint32_t masked_param_4;\n  uint32_t shift_value;\n\n  hash_result = calculate_hash_type(param_1, 1);\n  shift_value = (param_4 << 1) >> 0x15;\n  masked_param_4 = param_4 & 0xFFFFF;\n  if (shift_value != 0)\n  {\n    masked_param_4 |= 0x100000;\n  }\n  if (param_3 == 0)\n  {\n    hash_type = calculate_hash_value_08009630(&masked_param_4);\n    hash_result += 0x20;\n    *(int *)(hash_result + 0x10) = 1;\n    *(uint32_t *)(hash_result + 0x14) = masked_param_4;\n  }\n  else\n  {\n    temp_1 = param_3;\n    hash_type = calculate_hash_value_08009630(&temp_1);\n    if (hash_type == 0)\n    {\n      *(uint32_t *)(hash_result + 0x14) = temp_1;\n    }\n    else\n    {\n      temp_2 = masked_param_4 << (0x20 - hash_type & 0xFF);\n      masked_param_4 = masked_param_4 >> (hash_type & 0xFF);\n      *(uint32_t *)(hash_result + 0x14) = temp_2 | temp_1;\n    }\n    if (masked_param_4 == 0)\n    {\n      hash_type = 1;\n    }\n    else\n    {\n      hash_type = 2;\n    }\n    *(uint32_t *)(hash_result + 0x18) = masked_param_4;\n    *(int *)(hash_result + 0x10) = hash_type;\n  }\n  if (shift_value == 0)\n  {\n    *output_1 = hash_result + hash_type * 4 + 0x10;\n    hash_value = calculate_hash_value_08009630(*(int *)(hash_result + hash_type * 4 + 0x10));\n    *output_2 = (int)((unsigned long long)hash_value >> 0x20) * 0x20 - (int)hash_value;\n    return hash_result;\n  }\n  *output_1 = (shift_value - 0x433) + hash_type * 4 + 0x10;\n  *output_2 = 0x35 - hash_type * 4;\n  return hash_result;\n}",
            "called": [
                "FUN_080091e4",
                "FUN_080090c0",
                "FUN_080091a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009630",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_hash_value_08009630"
        },
        "FUN_08004104": {
            "renaming": {
                "FUN_08004104": "update_flags_08004104",
                "param_1": "base_address",
                "param_2": "value2",
                "param_3": "value1",
                "*(uint *)(param_1 + 0x20)": "flags_ptr",
                "*(uint *)(param_1 + 0x18)": "data_ptr"
            },
            "code": "void update_flags_08004104(int base_address, int value1, int value2) {\n  uint* flags_ptr = (uint*)(base_address + 0x20);\n  uint* data_ptr = (uint*)(base_address + 0x18);\n  *flags_ptr = (*flags_ptr & 0xffffffef) | (value2 << 4);\n  *data_ptr = (*data_ptr & 0xffff0fff) | (value1 << 0xc);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004104",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": false,
            "current_name": "update_flags_08004104"
        },
        "FUN_08000ff4": {
            "renaming": {
                "FUN_08000ff4": "check_if_string_is_empty_08000ff4",
                "in_CY": "input_string",
                "FUN_08000fd0": "get_user_input"
            },
            "code": "bool check_if_string_is_empty_08000ff4(void)\n{\n  char input_string;\n  input_string = get_user_input();\n  return input_string == '\\0';\n}",
            "called": [
                "FUN_08000fd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ff4",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "check_if_string_is_empty_08000ff4"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "print_data_08005714",
                "FUN_080036f8": "print_string",
                "PTR_DAT_08005724": "data"
            },
            "code": "void print_data_08005714(void)\n{\n    print_string(PTR_DAT_08005724);\n    return;\n}",
            "called": [
                "FUN_080036f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [],
            "imported": false,
            "current_name": "print_data_08005714"
        },
        "FUN_08005d0c": {
            "renaming": {
                "FUN_08005d0c": "do_nothing_08005d0c"
            },
            "code": "\nvoid do_nothing_08005d0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d0c",
            "calling": [
                "FUN_08005838",
                "FUN_080059f0"
            ],
            "imported": false,
            "current_name": "do_nothing_08005d0c"
        },
        "FUN_08005e40": {
            "renaming": {
                "FUN_08005e40": "find_first_set_bit_08005e40",
                "param_1": "word",
                "puVar2": "current_word_ptr",
                "iVar1": "shift_amount",
                "uVar4": "current_word",
                "count_leading_zeroes": "__builtin_clz"
            },
            "code": "int find_first_set_bit_08005e40(uint32_t word) {\n  int shift_amount = -(word & 3);\n  uint32_t current_word = *(uint32_t *)(word & ~3);\n  if ((word & 3) != 0) {\n    current_word |= 0xffffffffU >> ((shift_amount + 4U) << 3);\n  }\n  while (current_word == 0) {\n    current_word = *(uint32_t *)((uint32_t *)current_word + 1);\n    shift_amount += 32;\n  }\n  int leading_zeroes = __builtin_clz(current_word & -current_word);\n  return shift_amount + (31 - leading_zeroes) / 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e40",
            "calling": [
                "FUN_08005e9c",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "find_first_set_bit_08005e40"
        },
        "FUN_08005d20": {
            "renaming": {
                "FUN_08005d20": "execute_functions_08005d20",
                "puVar1": "init_data",
                "iVar2": "i",
                "ppcVar3": "current_function",
                "iVar4": "num_functions",
                "PTR_DAT_08005d58": "PTR_FUNCTIONS_END",
                "PTR_DAT_08005d5c": "PTR_FUNCTIONS_START",
                "PTR_DAT_08005d60": "PTR_INIT_DATA",
                "PTR_DAT_08005d64": "PTR_INIT_FUNCTIONS"
            },
            "code": "void execute_functions_08005d20(void)\n{\n    int num_functions = (int)PTR_DAT_08005d58 - (int)PTR_DAT_08005d5c >> 2;\n    if (num_functions != 0) {\n        int i = 0;\n        code **current_function = (code **)PTR_DAT_08005d5c;\n        while (i != num_functions) {\n            (**current_function)();\n            current_function++;\n            i++;\n        }\n    }\n    code **init_functions = (code **)PTR_DAT_08005d64;\n    undefined *init_data = PTR_DAT_08005d60;\n    do_nothing_08009e68();\n    int num_init_functions = (int)init_data - (int)init_functions >> 2;\n    if (num_init_functions != 0) {\n        int i = 0;\n        while (i != num_init_functions) {\n            (**init_functions)();\n            init_functions++;\n            i++;\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_08000134",
                "FUN_08009e68",
                "FUN_080078a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d20",
            "calling": [
                "FUN_080057e8"
            ],
            "imported": false,
            "current_name": "execute_functions_08005d20"
        },
        "FUN_08001a80": {
            "renaming": {
                "FUN_08001a80": "set_param_value_08001a80",
                "param_1": "param_array",
                "param_2": "param_value",
                "param_3": "is_high_byte",
                "*(uint *)(param_1 + 0x10)": "*(param_array + 4)",
                "uint": "uint32_t"
            },
            "code": "void set_param_value_08001a80(uint32_t *param_array, uint16_t param_value, char is_high_byte)\n{\n  if (is_high_byte == 0) {\n    *(param_array + 4) = (uint32_t)param_value << 16;\n  }\n  else {\n    *(param_array + 4) = (uint32_t)param_value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a80",
            "calling": [
                "FUN_080055f4",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "set_param_value_08001a80"
        },
        "FUN_08005838": {
            "renaming": {
                "FUN_08005838": "calculate_result_08005838",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "difference",
                "uVar2": "temp_result",
                "uVar3": "result",
                "uVar4": "input_4_abs",
                "uVar5": "input_3_abs",
                "uVar6": "sign_bits"
            },
            "code": "uint calculate_result_08005838(uint input_1, uint input_2, uint input_3, uint input_4)\n{\n  int difference;\n  uint result;\n  uint input_4_abs = input_4 & 0x7fffffff;\n  uint input_3_abs = input_3 & 0x7fffffff;\n  uint sign_bits = ((int)input_4 >> 0x1e & 2U) | (input_2 >> 0x1f);\n  \n  if ((DAT_080059e8 < (input_4_abs | (-input_3 | input_3) >> 0x1f)) || (DAT_080059e8 < (input_2 & 0x7fffffff | (-input_1 | input_1) >> 0x1f))) {\n    result = FUNC_0800015c(input_3, input_4, input_1, input_2);\n    return result;\n  }\n  \n  if ((input_4 + 0xc0100000 | input_3) == 0) {\n    result = FUNC_080059f0();\n    return result;\n  }\n  \n  if ((input_1 | input_4_abs | input_3_abs) == 0) {\n    if (sign_bits == 2) {\n      result = DAT_080059b0;\n      return result;\n    }\n    \n    if (sign_bits == 3) {\n      result = DAT_080059d8;\n      return result;\n    }\n    \n    if (sign_bits == 1) {\n      result = DAT_080059d0;\n      return result;\n    }\n    \n    result = DAT_080059c8;\n    return result;\n  }\n  \n  if (input_4_abs == DAT_080059e8) {\n    if (input_2 == input_4_abs) {\n      if (sign_bits == 2) {\n        result = DAT_080059e0;\n        return result;\n      }\n      \n      if (sign_bits == 3) {\n        result = DAT_080059d8;\n        return result;\n      }\n      \n      if (sign_bits == 1) {\n        result = DAT_080059d0;\n        return result;\n      }\n      \n      result = DAT_080059c8;\n      return result;\n    }\n    \n    if (sign_bits == 2) {\n      result = DAT_080059b0;\n      return result;\n    }\n    \n    if (sign_bits == 3) {\n      result = DAT_080059a0;\n      return result;\n    }\n    \n    if (sign_bits == 1) {\n      result = 0;\n      return result;\n    }\n    \n    result = 0;\n    return result;\n  }\n  \n  if (input_2 != DAT_080059e8) {\n    difference = (int)(input_2 - input_4_abs) >> 0x14;\n    \n    if (difference < 0x3d) {\n      if (((int)input_4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n        result = 0;\n        return result;\n      }\n      else {\n        FUNC_0800071c(input_1, input_2, input_3, input_4, input_4);\n        do_nothing_08005d0c();\n        result = FUNC_080059f0();\n        return result;\n      }\n    }\n    \n    uint64_t temp_result = FUNC_08000158(input_4, input_3, DAT_080059a8, DAT_080059ac);\n    uint temp_input_4 = (uint)temp_result;\n    uint temp_input_3 = (uint)(temp_result >> 32);\n    \n    if (sign_bits == 1) {\n      result = temp_input_4;\n      return result;\n    }\n    \n    if (sign_bits == 2) {\n      uint64_t temp_result_2 = FUNC_08000158(DAT_080059b0, DAT_080059b4, temp_input_4, temp_input_3);\n      result = (uint)temp_result_2;\n      return result;\n    }\n    \n    if (sign_bits == 0) {\n      result = temp_input_3;\n      return result;\n    }\n    \n    uint64_t temp_result_3 = FUNC_08000158(temp_input_3, temp_input_4, DAT_080059b0, DAT_080059b4);\n    result = (uint)temp_result_3;\n    return result;\n  }\n  \n  if ((int)input_2 >= 0) {\n    result = DAT_080059b8;\n    return result;\n  }\n  \n  result = DAT_080059c0;\n  return result;\n}",
            "called": [
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_08000158",
                "FUN_080059f0",
                "FUN_0800071c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005838",
            "calling": [
                "thunk_FUN_08005838"
            ],
            "imported": false,
            "current_name": "calculate_result_08005838"
        },
        "FUN_080090a8": {
            "renaming": {
                "FUN_080090a8": "do_nothing_with_pointer_080090a8",
                "PTR_DAT_080090b0": "PTR_DATA"
            },
            "code": "void do_nothing_with_pointer_080090a8(void)\n{\n  do_nothing_with_pointer_080090a8(PTR_DAT_080090b0);\n  return;\n}",
            "called": [
                "FUN_08008af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090a8",
            "calling": [
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_08008af8",
                "FUN_0800884c"
            ],
            "imported": false,
            "current_name": "do_nothing_with_pointer_080090a8"
        },
        "FUN_08004e74": {
            "renaming": {
                "FUN_08004e74": "check_initialized_and_call_function_08004e74",
                "param_1": "argument",
                "uVar1": "result",
                "is_initialized": "initialized_status"
            },
            "code": "int check_initialized_and_call_function_08004e74(int param_1) {\n    int is_initialized = *(int *)PTR_DAT_08004ea0;\n    if (is_initialized == 0) {\n        int result = FUN_08004e6c(1, param_1, 0);\n        return result;\n    }\n    else {\n        return 0;\n    }\n}",
            "called": [
                "FUN_08004e6c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "check_initialized_and_call_function_08004e74"
        },
        "FUN_080096e0": {
            "renaming": {
                "FUN_080096e0": "calculate_float_080096e0",
                "param_1": "mantissa",
                "param_2": "exponent",
                "param_3": "exponent_out",
                "param_4": "sign",
                "iVar1": "max_exponent",
                "uVar3": "abs_exponent",
                "uVar4": "combined",
                "iVar2": "exponent_diff"
            },
            "code": "uint32_t calculate_float_080096e0(uint32_t mantissa, uint32_t exponent, int *exponent_out, uint32_t sign) {\n  int max_exponent = MAX_EXPONENT;\n  uint64_t combined = ((uint64_t) exponent << 32) | mantissa;\n  int exponent_diff = 0;\n  uint32_t abs_exponent = exponent & 0x7fffffff;\n  *exponent_out = 0;\n  if (abs_exponent <= max_exponent && (abs_exponent | mantissa) != 0) {\n    if (abs_exponent < 0x100000) {\n      combined = calculate_denormalized(mantissa, exponent, 0, DENORMALIZED_CONST, sign);\n      exponent_diff = -54;\n      abs_exponent = (uint32_t) (combined >> 32) & 0x7fffffff;\n    }\n    mantissa = (uint32_t) combined;\n    exponent = ((uint32_t) (combined >> 32) & 0x800fffff) | 0x3fe00000;\n    *exponent_out = ((int) abs_exponent >> 20) - 0x3fe + exponent_diff;\n  }\n  return ((uint64_t) exponent << 32) | mantissa;\n}",
            "called": [
                "FUN_080004c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080096e0",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "calculate_float_080096e0"
        },
        "FUN_0800910c": {
            "renaming": {
                "FUN_0800910c": "extract_data_0800910c",
                "param_1": "data_index",
                "param_2": "data_ptr",
                "iVar1": "data_array_ptr"
            },
            "code": "void extract_data_0800910c(int data_index, undefined4 *data_ptr) {\n    int data_array_ptr = *(int *)(data_index + 0x4c);\n    if (data_ptr != (undefined4 *)0x0) {\n        *data_ptr = *(undefined4 *)(data_array_ptr + data_ptr[1] * 4);\n        *(undefined4 **)(data_array_ptr + data_ptr[1] * 4) = data_ptr;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800910c",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "extract_data_0800910c"
        },
        "FUN_080052a0": {
            "renaming": {
                "FUN_080052a0": "calculate_and_print_result_080052a0",
                "local_44": "value_1",
                "local_40": "value_2",
                "local_3c": "value_3",
                "local_38": "zero_2",
                "local_34": "zero_3",
                "local_30": "one",
                "local_2c": "max_value",
                "local_28": "zero",
                "local_20": "one_2",
                "local_14": "two",
                "local_10": "max_value_2",
                "local_c": "max_value_3",
                "FUNC_08002d98": "check_one",
                "PTR_s____src_main_c_08005340": "Error message 2",
                "FUN_08003260": "check_two",
                "FUN_08003504": "get_random_value",
                "DAT_08005344": "Random value multiplier",
                "FUN_08001762": "print_result",
                "FUN_0800177c": "print_four_bytes",
                "FUN_0800172a": "print_three_zeros"
            },
            "code": "void calculate_and_print_result_080052a0(void)\n{\n    long long result;\n    int status;\n    unsigned long long random_value;\n    int one = 1;\n    int max_value = 0x10000;\n    int zero = 0;\n    int one_2 = 1;\n    int two = 2;\n    int max_value_2 = 0x10000;\n    int max_value_3 = 0x1c0000;\n    status = check_one(&one);\n    if (status != 0)\n    {\n        print_error(\"Error in check_one\", 0x151);\n    }\n    int value_1 = 0xf;\n    int value_2 = 2;\n    int value_3 = 0x80;\n    int zero_2 = 0;\n    int zero_3 = 0;\n    status = check_two(&value_1, two);\n    if (status != 0)\n    {\n        print_error(\"Error in check_two\", 0x15e);\n    }\n    random_value = get_random_value();\n    result = (long long)max_value_3 * (random_value & 0xffffffff);\n    print_result((unsigned int)(result >> 0x26), (int)(random_value >> 0x20), (int)result);\n    print_four_bytes(4);\n    print_three_zeros();\n}",
            "called": [
                "FUN_08002d98",
                "FUN_0800177c",
                "FUN_08001762",
                "FUN_08005674",
                "FUN_08003260",
                "FUN_0800172a",
                "FUN_08003504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052a0",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "calculate_and_print_result_080052a0"
        },
        "FUN_08009120": {
            "renaming": {
                "FUN_08009120": "calculate_hash_08009120",
                "param_1": "num_elements",
                "param_2": "data",
                "param_3": "base",
                "param_4": "hash_value",
                "puVar1": "result",
                "uVar2": "temp",
                "iVar3": "num_words",
                "puVar4": "words",
                "iVar5": "ptr"
            },
            "code": "undefined4 * calculate_hash_08009120(int num_elements, undefined4 *data, int base, uint hash_value)\n{\n  undefined4 *result;\n  uint carryover = 0;\n  int num_words = data[4];\n  uint *words = data + 5;\n  for(int i = 0; i < num_words; i++)\n  {\n    hash_value = base * (words[i] & 0xffff) + hash_value;\n    uint temp = base * (words[i] >> 0x10) + (hash_value >> 0x10);\n    words[i] = (hash_value & 0xffff) + temp * 0x10000;\n    hash_value = temp >> 0x10;\n  }\n  result = data;\n  if (hash_value != 0)\n  {\n    if (data[2] <= num_words)\n    {\n      result = (undefined4 *)malloc_wrapper(num_elements, data[1] + 1);\n      memcpy(result + 3, data + 3, (data[4] + 2) * 4);\n      int ptr = *(int *)(num_elements + 0x4c);\n      *data = *(undefined4 *)(ptr + data[1] * 4);\n      *(undefined4 **)(ptr + data[1] * 4) = data;\n    }\n    words[num_words + 5] = hash_value;\n    data[4] = num_words + 1;\n  }\n  return result;\n}",
            "called": [
                "FUN_08001084",
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009120",
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_hash_08009120"
        },
        "FUN_08001084": {
            "renaming": {
                "FUN_08001084": "copyMemory_08001084",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "destination_ptr",
                "puVar2": "destination_ptr_end",
                "puVar3": "source_ptr",
                "uVar4": "remaining_size_mod4",
                "uVar5": "remaining_size",
                "bVar6": "remaining_size_mod4_gt_2"
            },
            "code": "undefined4 * copyMemory_08001084(uint8_t *destination, uint8_t *source, uint32_t size)\n{\n    undefined4 *destination_ptr;\n    undefined4 *source_ptr;\n    undefined4 *destination_ptr_end;\n    uint32_t remaining_size;\n    uint32_t remaining_size_mod4;\n    bool remaining_size_mod4_gt_2;\n    \n    destination_ptr = (undefined4 *)destination;\n    if ((((uint32_t)source | (uint32_t)destination) & 3) != 0)\n    {\n        if (size < 8)\n        {\n            remaining_size = size - 4;\n            if (3 < size)\n            {\n                do\n                {\n                    source_ptr = (undefined4 *)source;\n                    destination_ptr_end = destination_ptr;\n                    remaining_size_mod4_gt_2 = remaining_size != 0;\n                    remaining_size--;\n                    *(uint8_t *)destination_ptr_end = *(uint8_t *)source_ptr;\n                    destination_ptr = (undefined4 *)((int)destination_ptr_end + 1);\n                    source = (uint8_t *)((int)source_ptr + 1);\n                } while (remaining_size_mod4_gt_2);\n                *(uint8_t *)(undefined4 *)((int)destination_ptr_end + 1) = *(uint8_t *)(undefined4 *)((int)source_ptr + 1);\n                *(uint8_t *)((int)destination_ptr_end + 2) = *(uint8_t *)((int)source_ptr + 2);\n                *(uint8_t *)((int)destination_ptr_end + 3) = *(uint8_t *)((int)source_ptr + 3);\n                return (undefined4 *)destination;\n            }\n            goto LAB_08001108;\n        }\n        if ((((uint32_t)source & 3) != 0) && (((uint32_t)destination & 3) != 0))\n        {\n            remaining_size = 4 - ((uint32_t)destination & 3);\n            size = size - remaining_size;\n            source_ptr = (undefined4 *)source;\n            destination_ptr_end = (undefined4 *)destination;\n            if (((uint32_t)destination & 1) != 0)\n            {\n                source_ptr = (undefined4 *)((int)source + 1);\n                destination_ptr_end = (undefined4 *)((int)destination + 1);\n                *(uint8_t *)destination = *(uint8_t *)source;\n            }\n            destination_ptr = destination_ptr_end;\n            source = (uint8_t *)source_ptr;\n            if ((remaining_size & 2) != 0)\n            {\n                source = (uint8_t *)((int)source_ptr + 2);\n                destination_ptr = (undefined4 *)((int)destination_ptr_end + 2);\n                *(uint16_t *)destination_ptr_end = *(uint16_t *)source_ptr;\n            }\n        }\n    }\n    while (0x3F < size)\n    {\n        *destination_ptr = *(undefined4 *)source;\n        destination_ptr[1] = *(undefined4 *)(source + 4);\n        destination_ptr[2] = *(undefined4 *)(source + 8);\n        destination_ptr[3] = *(undefined4 *)(source + 0xC);\n        destination_ptr[4] = *(undefined4 *)(source + 0x10);\n        destination_ptr[5] = *(undefined4 *)(source + 0x14);\n        destination_ptr[6] = *(undefined4 *)(source + 0x18);\n        destination_ptr[7] = *(undefined4 *)(source + 0x1C);\n        destination_ptr[8] = *(undefined4 *)(source + 0x20);\n        destination_ptr[9] = *(undefined4 *)(source + 0x24);\n        destination_ptr[10] = *(undefined4 *)(source + 0x28);\n        destination_ptr[11] = *(undefined4 *)(source + 0x2C);\n        destination_ptr[12] = *(undefined4 *)(source + 0x30);\n        destination_ptr[13] = *(undefined4 *)(source + 0x34);\n        destination_ptr[14] = *(undefined4 *)(source + 0x38);\n        destination_ptr[15] = *(undefined4 *)(source + 0x3C);\n        destination_ptr = destination_ptr + 0x10;\n        source = source + 0x40;\n        size = size - 0x40;\n    }\n    remaining_size_mod4 = size - 0x10;\n    if (0xFFFFFFF1 < size - 0x40)\n    {\n        do\n        {\n            *destination_ptr = *(undefined4 *)source;\n            destination_ptr[1] = *(undefined4 *)(source + 4);\n            destination_ptr[2] = *(undefined4 *)(source + 8);\n            destination_ptr[3] = *(undefined4 *)(source + 0xC);\n            destination_ptr = destination_ptr + 4;\n            source = source + 0x10;\n            remaining_size_mod4_gt_2 = 0xF < remaining_size_mod4;\n            remaining_size_mod4 = remaining_size_mod4 - 0x10;\n        } while (remaining_size_mod4_gt_2);\n    }\n    remaining_size = remaining_size_mod4 + 0xC;\n    destination_ptr_end = destination_ptr;\n    source_ptr = (undefined4 *)source;\n    if (0xFFFFFFF3 < remaining_size_mod4)\n    {\n        do\n        {\n            source = (uint8_t *)((int)source_ptr + 1);\n            *destination_ptr_end = *source_ptr;\n            remaining_size_mod4_gt_2 = 3 < remaining_size;\n            remaining_size = remaining_size - 4;\n            destination_ptr = destination_ptr_end + 1;\n            destination_ptr_end = destination_ptr_end + 1;\n            source_ptr = (undefined4 *)source;\n        } while (remaining_size_mod4_gt_2);\n    }\nLAB_08001108:\n    if (remaining_size + 4 != 0)\n    {\n        destination_ptr_end = destination_ptr;\n        source_ptr = (undefined4 *)source;\n        if ((remaining_size & 1) != 0)\n        {\n            source_ptr = (undefined4 *)((int)source + 1);\n            destination_ptr_end = (undefined4 *)((int)destination_ptr + 1);\n            *(uint8_t *)destination_ptr = *(uint8_t *)source;\n        }\n        if ((remaining_size + 4 & 2) != 0)\n        {\n            *(uint16_t *)destination_ptr_end = *(uint16_t *)source_ptr;\n        }\n    }\n    return (undefined4 *)destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001084",
            "calling": [
                "FUN_08009120",
                "FUN_080079e8",
                "FUN_080097cc"
            ],
            "imported": false,
            "current_name": "copyMemory_08001084"
        },
        "FUN_08005680": {
            "renaming": {
                "FUN_08005680": "check_parameter_08005680",
                "*param_1": "*param_value",
                "DAT_080056b4": "target_value",
                "local_18": "new_value",
                "local_14": "buffer_size",
                "local_c": "iterations",
                "DAT_080056b8": "send_data"
            },
            "code": "void check_parameter_08005680(int *param_value)\n{\n  int DAT_080056b4 = 1337;\n  int buffer_size = 2;\n  int iterations = 2;\n  if (*param_value == DAT_080056b4) {\n    int new_value = 2304;\n    DAT_080056b8(DAT_080056b4, &new_value);\n  }\n  return;\n}",
            "called": [
                "FUN_080017c4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005680",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "check_parameter_08005680"
        },
        "FUN_08003260": {
            "renaming": {
                "FUN_08003260": "is_param_valid_08003260",
                "param_1": "param_array",
                "param_2": "array_size",
                "uVar3": "bitmask",
                "uVar4": "is_valid",
                "iVar1": "time_start",
                "iVar2": "time_end",
                "DAT_08003430": "g_global_data",
                "DAT_08003434": "g_global_data_ptr",
                "PTR_DAT_0800343c": "g_global_data_ptr",
                "PTR_DAT_08003438": "g_bitshift_table",
                "get_bitmask": "get_bitmask",
                "FUN_08003440": "get_bitmask",
                "FUN_0800151c": "print_message",
                "FUN_080015a0": "get_time"
            },
            "code": "uint8_t is_param_valid_08003260(uint32_t *param_array, uint32_t array_size)\n{\n  int time_start, time_end;\n  uint32_t bitmask;\n  uint8_t is_valid = 0;\n  \n  if (((*DAT_08003430 & 7) < array_size) && (*DAT_08003430 = array_size | *DAT_08003430 & 0xfffffff8, array_size != (*DAT_08003430 & 7))) {\n    is_valid = 1;\n  }\n  else {\n    if ((*param_array & 2) != 0) {\n      DAT_08003430[1] = param_array[2] | DAT_08003430[1] & 0xffffff0f;\n    }\n    if ((*param_array & 1) == 0) {\n      while (1) {\n        if ((array_size < (*DAT_08003430 & 7)) && (*DAT_08003430 = array_size | *DAT_08003430 & 0xfffffff8, array_size != (*DAT_08003430 & 7))) {\n          is_valid = 1;\n          break;\n        }\n        else {\n          if ((*param_array & 4) != 0) {\n            DAT_08003430[1] = param_array[3] | DAT_08003430[1] & 0xfffff8ff;\n          }\n          if ((*param_array & 8) != 0) {\n            DAT_08003430[1] = param_array[4] << 3 | DAT_08003430[1] & 0xffffc7ff;\n          }\n          bitmask = get_bitmask();\n          *(uint32_t *)DAT_08003434 = bitmask >> PTR_DAT_08003438[DAT_08003430[1] >> 4 & 0xf];\n          print_message(0xf);\n          is_valid = 0;\n          break;\n        }\n      }\n    }\n    else {\n      if (param_array[1] == 1) {\n        if ((*DAT_08003430 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((param_array[1] != 2) && ((*DAT_08003430 & 2) == 0)) {\n        return 1;\n      }\n      DAT_08003430[1] = param_array[1] | DAT_08003430[1] & 0xfffffffc;\n      time_start = get_time();\n      if (param_array[1] == 1) {\n        do {\n          if ((DAT_08003430[1] & 0xc) == 4) {\n            while (1) {\n              if ((array_size < (*DAT_08003430 & 7)) && (*DAT_08003430 = array_size | *DAT_08003430 & 0xfffffff8, array_size != (*DAT_08003430 & 7))) {\n                is_valid = 1;\n                break;\n              }\n              else {\n                if ((*param_array & 4) != 0) {\n                  DAT_08003430[1] = param_array[3] | DAT_08003430[1] & 0xfffff8ff;\n                }\n                if ((*param_array & 8) != 0) {\n                  DAT_08003430[1] = param_array[4] << 3 | DAT_08003430[1] & 0xffffc7ff;\n                }\n                bitmask = get_bitmask();\n                *(uint32_t *)DAT_08003434 = bitmask >> PTR_DAT_08003438[DAT_08003430[1] >> 4 & 0xf];\n                print_message(0xf);\n                is_valid = 0;\n                break;\n              }\n            }\n            is_valid = 3;\n            break;\n          }\n          time_end = get_time();\n        } while ((time_end - time_start) < 0x1389);\n        is_valid = 3;\n      }\n      else if (param_array[1] == 2) {\n        do {\n          if ((DAT_08003430[1] & 0xc) == 8) {\n            while (1) {\n              if ((array_size < (*DAT_08003430 & 7)) && (*DAT_08003430 = array_size | *DAT_08003430 & 0xfffffff8, array_size != (*DAT_08003430 & 7))) {\n                is_valid = 1;\n                break;\n              }\n              else {\n                if ((*param_array & 4) != 0) {\n                  DAT_08003430[1] = param_array[3] | DAT_08003430[1] & 0xfffff8ff;\n                }\n                if ((*param_array & 8) != 0) {\n                  DAT_08003430[1] = param_array[4] << 3 | DAT_08003430[1] & 0xffffc7ff;\n                }\n                bitmask = get_bitmask();\n                *(uint32_t *)DAT_08003434 = bitmask >> PTR_DAT_08003438[DAT_08003430[1] >> 4 & 0xf];\n                print_message(0xf);\n                is_valid = 0;\n                break;\n              }\n            }\n            is_valid = 3;\n            break;\n          }\n          time_end = get_time();\n        } while ((time_end - time_start) < 0x1389);\n        is_valid = 3;\n      }\n      else {\n        do {\n          if ((DAT_08003430[1] & 0xc) == 0) {\n            while (1) {\n              if ((array_size < (*DAT_08003430 & 7)) && (*DAT_08003430 = array_size | *DAT_08003430 & 0xfffffff8, array_size != (*DAT_08003430 & 7))) {\n                is_valid = 1;\n                break;\n              }\n              else {\n                if ((*param_array & 4) != 0) {\n                  DAT_08003430[1] = param_array[3] | DAT_08003430[1] & 0xfffff8ff;\n                }\n                if ((*param_array & 8) != 0) {\n                  DAT_08003430[1] = param_array[4] << 3 | DAT_08003430[1] & 0xffffc7ff;\n                }\n                bitmask = get_bitmask();\n                *(uint32_t *)DAT_08003434 = bitmask >> PTR_DAT_08003438[DAT_08003430[1] >> 4 & 0xf];\n                print_message(0xf);\n                is_valid = 0;\n                break;\n              }\n            }\n            is_valid = 3;\n            break;\n          }\n          time_end = get_time();\n        } while ((time_end - time_start) < 0x1389);\n        is_valid = 3;\n      }\n    }\n  }\n  return is_valid;\n}",
            "called": [
                "FUN_080015a0",
                "FUN_08003440",
                "FUN_0800151c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003260",
            "calling": [
                "FUN_080052a0"
            ],
            "imported": false,
            "current_name": "is_param_valid_08003260"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "calculate_value_08001ab0",
                "param_1": "input",
                "uVar1": "value",
                "cVar2": "valid_input",
                "uVar3": "temp_value",
                "uVar4": "temp_value2",
                "bVar5": "is_valid"
            },
            "code": "uint32_t calculate_value_08001ab0(uint32_t **input)\n{\n  uint32_t value;\n  char valid_input;\n  uint32_t temp_value;\n  bool is_valid;\n  if (input == NULL) {\n    return 1;\n  }\n  else {\n    valid_input = *((char *)input + 61);\n    if (valid_input == 0) {\n      *((uint8_t *)(input + 15)) = 0;\n      do_nothing(input);\n    }\n    *((uint8_t *)input + 61) = 0x24;\n    **input &= 0xFFFFFFFE;\n    temp_value = get_temp_value();\n    if (DAT_08001ca4 < input[1]) {\n      is_valid = (temp_value <= DAT_08001cac) ? true : false;\n      if (DAT_08001cac < temp_value) {\n        is_valid = false;\n      }\n    }\n    else {\n      is_valid = (temp_value <= DAT_08001ca8) ? true : false;\n      if (DAT_08001ca8 < temp_value) {\n        is_valid = false;\n      }\n    }\n    if (!is_valid) {\n      temp_value = (uint32_t)(((uint64_t)DAT_08001cb0 * (uint64_t)temp_value) >> 0x32);\n      (*input)[1] = temp_value;\n      if (DAT_08001ca4 < input[1]) {\n        temp_value = (uint32_t)(((uint64_t)DAT_08001cb4 * (uint64_t)(temp_value * 300)) >> 0x26);\n      }\n      (*input)[8] = temp_value + 1;\n      if (DAT_08001ca4 < input[1]) {\n        if (input[2] == NULL) {\n          temp_value = (temp_value - 1) / ((uint32_t)input[1] * 3) + 1;\n          is_valid = (temp_value == 0) ? true : false;\n          if (!is_valid) {\n            is_valid = false;\n          }\n        }\n        else {\n          temp_value = (temp_value - 1) / ((uint32_t)input[1] * 25) + 1;\n          is_valid = (temp_value == 0) ? true : false;\n          if (!is_valid) {\n            is_valid = false;\n          }\n        }\n        if (is_valid) {\n          temp_value = 1;\n        }\n        else {\n          if (input[2] == NULL) {\n            temp_value = (temp_value - 1) / ((uint32_t)input[1] * 3) + 1 | 0x8000;\n          }\n          else {\n            temp_value = (temp_value - 1) / ((uint32_t)input[1] * 25) + 1 | 0xC000;\n          }\n        }\n      }\n      else {\n        temp_value = (temp_value - 1) / ((uint32_t)input[1] << 1) + 1;\n        if (temp_value < 4) {\n          temp_value = 4;\n        }\n      }\n      (*input)[7] = temp_value;\n      **input = (uint32_t)input[8] | (uint32_t)input[7];\n      (*input)[2] = (uint32_t)input[3] | (uint32_t)input[4];\n      (*input)[3] = (uint32_t)input[6] | (uint32_t)input[5];\n      **input |= 1;\n      input[16] = NULL;\n      *((uint8_t *)input + 61) = 0x20;\n      input[12] = NULL;\n      *((uint8_t *)input + 62) = 0;\n      value = 0;\n    }\n    else {\n      value = 1;\n    }\n  }\n  return value;\n}",
            "called": [
                "FUN_08003518",
                "FUN_08001cb8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08005348"
            ],
            "imported": false,
            "current_name": "calculate_value_08001ab0"
        },
        "FUN_08003540": {
            "renaming": {
                "FUN_08003540": "calculate_shifted_value_08003540",
                "uVar1": "shifted_value",
                "PTR_DAT_08003564": "shift_amounts",
                "DAT_08003560": "data"
            },
            "code": "uint calculate_shifted_value_08003540(void)\n{\n  uint shifted_value;\n  uint index = *(uint *)(DAT_08003560 + 4) >> 0xb & 7;\n  shifted_value = FUN_08003504();\n  return shifted_value >> PTR_DAT_08003564[index];\n}",
            "called": [
                "FUN_08003504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003540",
            "calling": [
                "FUN_080046ec"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08003540"
        },
        "FUN_08009244": {
            "renaming": {
                "FUN_08009244": "set_value_at_offset_08009244",
                "param_1": "base_address",
                "param_2": "value",
                "iVar1": "ptr_offset",
                "FUN_080090c0": "get_offset"
            },
            "code": "void set_value_at_offset_08009244(int base_address, int value) {\n  int ptr_offset = get_offset(base_address,1);\n  *(int *)(ptr_offset + 0x10) = 1;\n  *(int *)(ptr_offset + 0x14) = value;\n  return;\n}",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009244",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_08009244"
        },
        "FUN_08003c5c": {
            "renaming": {
                "FUN_08003c5c": "do_nothing_08003c5c"
            },
            "code": "\nvoid do_nothing_08003c5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c5c",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c5c"
        },
        "FUN_08004e6c": {
            "renaming": {
                "FUN_08004e6c": "print_system_call_message_08004e6c",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void print_system_call_message_08004e6c(void)\n{\n  software_interrupt(SYSTEM_CALL_MESSAGE);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e6c",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": false,
            "current_name": "print_system_call_message_08004e6c"
        },
        "FUN_08001762": {
            "renaming": {
                "FUN_08001762": "calculate_result_08001762",
                "param_1": "input",
                "uVar1": "result",
                "FUN_080016d0": "do_calculation"
            },
            "code": "int calculate_result_08001762(int input){\n  int result = do_calculation(input);\n  return result;\n}",
            "called": [
                "FUN_080016d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001762",
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "imported": false,
            "current_name": "calculate_result_08001762"
        },
        "FUN_08000158": {
            "renaming": {
                "FUN_08000158": "FUNC_08000158"
            },
            "code": "\nulonglong FUNC_08000158(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_08000268;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000158",
            "calling": [
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "FUNC_08000158"
        },
        "FUN_08009768": {
            "renaming": {
                "FUN_08009768": "copy_string_08009768",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar2": "src_ptr",
                "puVar3": "dest_ptr",
                "uVar4": "current_word",
                "cVar1": "current_char"
            },
            "code": "void copy_string_08009768(uint *destination, uint *source, uint length)\n{\n  char current_char;\n  uint *dest_ptr = destination;\n  uint *src_ptr = source;\n  uint current_word;\n  \n  if (((((uint)destination | (uint)source) & 3) == 0) && (src_ptr = source, dest_ptr = destination, 3 < length))) {\n    do {\n      source = src_ptr + 1;\n      current_word = *src_ptr;\n      destination = dest_ptr;\n      if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) goto END_LOOP;\n      length = length - 4;\n      destination = dest_ptr + 1;\n      *dest_ptr = current_word;\n      dest_ptr = destination;\n      src_ptr = source;\n    } while (3 < length);\n  }\n  src_ptr = source;\n  if (length != 0) {\nEND_LOOP:\n    current_char = *(char *)src_ptr;\n    *(char *)destination = current_char;\n    while( true ) {\n      destination = (uint *)((int)destination + 1);\n      length = length - 1;\n      if (current_char == '\\0') break;\n      if (length == 0) {\n        return;\n      }\n      src_ptr = (uint *)((int)src_ptr + 1);\n      current_char = *(char *)src_ptr;\n      *(char *)destination = current_char;\n    }\n    if (length != 0) {\n      dest_ptr = destination;\n      do {\n        source = (uint *)((int)dest_ptr + 1);\n        *(char *)dest_ptr = '\\0';\n        dest_ptr = source;\n      } while (source != (uint *)(length + (int)destination));\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009768",
            "calling": [
                "FUN_08005e9c"
            ],
            "imported": false,
            "current_name": "copy_string_08009768"
        },
        "FUN_08003ff8": {
            "renaming": {
                "FUN_08003ff8": "update_parameters_08003ff8",
                "param_1": "base_address",
                "param_2": "parameters",
                "local_c": "parameter3",
                "iVar1": "parameter1",
                "iVar2": "parameter2"
            },
            "code": "void update_parameters_08003ff8(int base_address, int *parameters)\n{\n  int parameter1 = parameters[0];\n  int parameter2 = parameters[2];\n  uint parameter3 = *(uint *)(base_address + 4);\n\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffefff;\n\n  if (base_address == DAT_0800409c) {\n    parameter3 = parameters[5] << 6 | parameter3 & 0xffffbfff;\n  }\n\n  *(uint *)(base_address + 4) = parameter3;\n  *(uint *)(base_address + 0x1c) = parameter1 << 8 | *(uint *)(base_address + 0x1c) & 0xffff8cff;\n  *(int *)(base_address + 0x40) = parameters[1];\n  *(uint *)(base_address + 0x20) = parameter2 << 0xc | *(uint *)(base_address + 0x20) & 0xffffdfff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ff8",
            "calling": [
                "FUN_08003908"
            ],
            "imported": false,
            "current_name": "update_parameters_08003ff8"
        },
        "FUN_08004ea4": {
            "renaming": {
                "FUN_08004ea4": "execute_command_08004ea4",
                "param_1": "command",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "PTR_DAT_08004ee4": "PTR_COMMAND_LIST",
                "PTR_DAT_08004ee0": "PTR_COMMAND_ARG"
            },
            "code": "void execute_command_08004ea4(void* command, void* arg1, void* arg2, int arg3, int arg4, short arg5, int arg6){\n execute(PTR_DAT_08004ee4, command, arg1, arg2, arg3, arg4, arg5, *(int*)PTR_DAT_08004ee0);\n return;\n}",
            "called": [
                "FUN_08001ccc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ea4",
            "calling": [],
            "imported": false,
            "current_name": "execute_command_08004ea4"
        },
        "FUN_080040a0": {
            "renaming": {
                "FUN_080040a0": "set_flags_and_data_080040a0",
                "param_1": "memory_address",
                "param_2": "flags",
                "param_3": "data",
                "uVar1": "old_flags"
            },
            "code": "void set_flags_and_data_080040a0(int memory_address, uint32_t flags, int data) {\n  uint32_t old_flags = *(uint32_t *)(memory_address + 0x20);\n  *(uint32_t *)(memory_address + 0x20) = *(uint32_t *)(memory_address + 0x20) & 0xfffffffe;\n  *(uint32_t *)(memory_address + 0x18) = (data << 4) | (*(uint32_t *)(memory_address + 0x18) & 0xffffff0f);\n  *(uint32_t *)(memory_address + 0x20) = flags | old_flags & 0xfffffff5;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040a0",
            "calling": [
                "FUN_08003a94"
            ],
            "imported": false,
            "current_name": "set_flags_and_data_080040a0"
        },
        "FUN_08009a18": {
            "renaming": {
                "FUN_08009a18": "reverse_copy_memory_block_08009a18",
                "param_1": "src_start",
                "param_2": "dst_start",
                "param_3": "size",
                "puVar1": "dst_ptr",
                "puVar2": "src_ptr",
                "iVar3": "i",
                "puVar4": "dst_byte_ptr",
                "puVar5": "dst_end",
                "uVar6": "remaining_bytes",
                "uVar7": "remaining_words"
            },
            "code": "void reverse_copy_memory_block_08009a18(uint32_t *src_start, uint32_t *dst_start, uint32_t size)\n{\n  uint32_t *src_end;\n  uint32_t *dst_end;\n  uint32_t i;\n  uint8_t *dst_byte_ptr;\n  uint32_t *src_ptr;\n  uint8_t *dst_ptr;\n  uint32_t remaining_words;\n  uint32_t remaining_bytes;\n\n  if ((src_start < dst_start) && ((uint8_t *)src_start + size > (uint8_t *)dst_start)) {\n    dst_byte_ptr = (uint8_t *)dst_start + size;\n    if (size != 0) {\n      do {\n        src_end = (uint32_t *)((uint8_t *)src_start + size) - 1;\n        dst_byte_ptr--;\n        *dst_byte_ptr = *(uint8_t *)src_end;\n      } while (src_start != src_end);\n    }\n  } else {\n    remaining_words = size >> 2;\n    if (remaining_words > 15) {\n      if ((((uint32_t)src_start | (uint32_t)dst_start) & 3) != 0) goto LAB_08009abc;\n      src_end = (uint32_t *)((uint8_t *)src_start + (size - 16 & 0xfffffff0) + 32);\n      dst_end = dst_start + 4;\n      do {\n        src_ptr = dst_end + 4;\n        dst_start[-4] = dst_end[-4];\n        dst_start[-3] = dst_end[-3];\n        dst_start[-2] = dst_end[-2];\n        dst_start[-1] = dst_end[-1];\n        dst_end = src_ptr;\n        dst_start += 4;\n      } while (src_ptr != src_end);\n      remaining_words = (size - 16 >> 4) + 1;\n      remaining_bytes = size & 15;\n      dst_start += remaining_words * 4;\n      src_start += remaining_words * 4;\n      if (remaining_bytes > 3) {\n        dst_end = dst_start - 1;\n        i = remaining_bytes;\n        src_ptr = src_start;\n        do {\n          i -= 4;\n          dst_end++[0] = src_ptr[0];\n          src_ptr++;\n        } while (i > 3);\n        remaining_bytes = (remaining_bytes - 4 & 0xfffffffc) + 4;\n        dst_start += remaining_bytes;\n        src_start += remaining_bytes;\n        remaining_bytes = size & 3;\n      }\n    }\n    remaining_words = remaining_bytes >> 2;\n    if (remaining_bytes != 0) {\nLAB_08009abc:\n      dst_ptr = (uint8_t *)dst_start - 1;\n      src_ptr = (uint32_t *)src_start;\n      do {\n        dst_ptr++;\n        src_ptr++;\n        *dst_ptr = *(uint8_t *)src_ptr;\n      } while ((uint8_t *)src_ptr != (uint8_t *)src_start + remaining_bytes);\n    }\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009a18",
            "calling": [
                "FUN_08009adc",
                "FUN_080097cc"
            ],
            "imported": false,
            "current_name": "reverse_copy_memory_block_08009a18"
        },
        "FUN_0800119c": {
            "renaming": {
                "FUN_0800119c": "convertToUnsignedInt_0800119c",
                "param_1": "x",
                "param_2": "y",
                "uVar1": "result",
                "iVar2": "temp",
                "uVar3": "absTemp"
            },
            "code": "uint convertToUnsignedInt_0800119c(uint x, uint y) {\n  uint result = 0;\n  int temp = y * 2 + 0x200000;\n  if (y * 2 < 0xffe00000) {\n    if (temp >= -1) {\n      return result;\n    }\n    uint absTemp = -temp - 0x3e1;\n    if (temp >> 0x15 < 0xfffffc20 && absTemp != 0) {\n      result = (y << 0xb | 0x80000000 | x >> 0x15) >> (absTemp & 0xff);\n      if ((y & 0x80000000) != 0) {\n        result = -result;\n      }\n      return result;\n    }\n  }\n  else if ((x | y << 0xc) == 0) {\n    return result;\n  }\n  y = y & 0x80000000;\n  if (y == 0) {\n    y = 0x7fffffff;\n  }\n  return y;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800119c",
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "convertToUnsignedInt_0800119c"
        },
        "FUN_08005728": {
            "renaming": {
                "FUN_08005728": "calculateResult_08005728",
                "param_1": "inputSize",
                "puVar1": "currentPosition",
                "auStack_18": "stackMemory",
                "local_14": "currentPosition",
                "local_c": "currentTotal"
            },
            "code": "int calculateResult_08005728(int inputSize) {\n  int *currentPosition;\n  int stackMemory[1];\n  int currentTotal;\n\n  if (*dataPointer == 0) {\n    *dataPointer = dataStart;\n  }\n  currentTotal = *dataPointer;\n  if ((stackMemory + 1) < (int *)(inputSize + *dataPointer)) {\n    currentPosition = (int *)allocateMemory();\n    *currentPosition = 12;\n    currentTotal = -1;\n  }\n  else {\n    *dataPointer = inputSize + *dataPointer;\n  }\n  return currentTotal;\n}\n",
            "called": [
                "FUN_08005d14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "FUN_08009744"
            ],
            "imported": false,
            "current_name": "calculateResult_08005728"
        },
        "FUN_080090b4": {
            "renaming": {
                "FUN_080090b4": "do_nothing_with_data_080090b4",
                "PTR_DAT_080090bc": "PTR_DATA"
            },
            "code": "void do_nothing_with_data_080090b4(void)\n{\n  do_nothing(PTR_DAT_080090bc);\n  return;\n}",
            "called": [
                "FUN_08008af4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090b4",
            "calling": [
                "FUN_08009adc",
                "FUN_080088ec",
                "FUN_08008af8",
                "FUN_0800884c"
            ],
            "imported": false,
            "current_name": "do_nothing_with_data_080090b4"
        },
        "FUN_0800422e": {
            "renaming": {
                "FUN_0800422e": "set_flag_and_data_0800422e",
                "param_1": "data",
                "param_2": "params",
                "uVar1": "return_value"
            },
            "code": "int set_flag_and_data_0800422e(int *data, uint *params)\n{\n    int return_value;\n    if (*(char *)(data + 0xf) == '\\x01') {\n        return_value = 2;\n    }\n    else {\n        *(undefined *)(data + 0xf) = 1;\n        *(uint *)(*data + 0x44) =\n            params[6] |\n            (params[6] |\n            (params[5] |\n            (params[4] |\n            (*params | (params[1] | (params[2] | params[3] & 0xfffffcff) & 0xfffffbff) & 0xfffff7ff\n            ) & 0xffffefff) & 0xffffdfff) & 0xffffbfff) & 0xffff7fff;\n        *(undefined *)(data + 0xf) = 0;\n        return_value = 0;\n    }\n    return return_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800422e",
            "calling": [
                "FUN_080053b0"
            ],
            "imported": false,
            "current_name": "set_flag_and_data_0800422e"
        },
        "FUN_08008af4": {
            "renaming": {
                "FUN_08008af4": "do_nothing_08008af4"
            },
            "code": "\nvoid do_nothing_08008af4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af4",
            "calling": [
                "FUN_080098c0",
                "FUN_080090b4"
            ],
            "imported": false,
            "current_name": "do_nothing_08008af4"
        },
        "FUN_08003e38": {
            "renaming": {
                "FUN_08003e38": "update_data_08003e38",
                "param_1": "data_address",
                "param_2": "data",
                "iVar1": "index",
                "uVar2": "bitmask",
                "local_10": "local_var"
            },
            "code": "void update_data_08003e38(int data_address, int *data) {\n  int index = *data;\n  int bitmask = data[2] << 4 | *(uint *)(data_address + 0x20) & 0xffffffdf;\n  uint local_var = *(uint *)(data_address + 4);\n  if (data_address == DAT_08003f14) {\n    bitmask = (data[3] << 4 | bitmask & 0xffffff7f) & 0xffffffbf;\n    local_var = data[6] << 2 | data[5] << 2 | local_var & 0xfffff3ff;\n  }\n  *(uint *)(data_address + 4) = local_var;\n  *(uint *)(data_address + 0x18) = index << 8 | *(uint *)(data_address + 0x18) & 0xffff8cff;\n  *(int *)(data_address + 0x38) = data[1];\n  *(uint *)(data_address + 0x20) = bitmask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e38",
            "calling": [
                "FUN_08003908"
            ],
            "imported": false,
            "current_name": "update_data_08003e38"
        },
        "FUN_08008af0": {
            "renaming": {
                "FUN_08008af0": "do_nothing_08008af0"
            },
            "code": "\nvoid do_nothing_08008af0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af0",
            "calling": [
                "FUN_080098c0",
                "FUN_080090a8"
            ],
            "imported": false,
            "current_name": "do_nothing_08008af0"
        },
        "FUN_0800151c": {
            "renaming": {
                "FUN_0800151c": "calculate_time_delay_0800151c",
                "param_1": "time_ms",
                "iVar1": "cycles",
                "uVar2": "result",
                "PTR_DAT_08001570": "time_per_cycle_ptr",
                "PTR_DAT_08001574": "byte_value_ptr",
                "FUN_08001762": "calculate_cycles",
                "PTR_DAT_08001578": "time_ms_ptr",
                "FUN_0800172a": "log_error"
            },
            "code": "int calculate_time_delay_0800151c(uint time_ms) {\n    uint time_per_cycle = *(uint *)PTR_DAT_08001570 / (1000 / (ulonglong)(byte)*PTR_DAT_08001574);\n    int cycles = FUN_08001762((int)((ulonglong)time_per_cycle));\n    if (cycles == 0) {\n        if (time_ms < 0x10) {\n            FUN_0800172a(0xffffffff, time_ms, 0);\n            *(uint *)PTR_DAT_08001578 = time_ms;\n            return 0;\n        }\n        else {\n            return 1;\n        }\n    }\n    else {\n        return 1;\n    }\n}",
            "called": [
                "FUN_08001762",
                "FUN_0800172a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800151c",
            "calling": [
                "FUN_080014f0",
                "FUN_08003260"
            ],
            "imported": false,
            "current_name": "calculate_time_delay_0800151c"
        },
        "FUN_080006a4": {
            "renaming": {
                "FUN_080006a4": "calculate_result_080006a4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp3",
                "unaff_r4": "unaff_r4",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "in_r12": "in_r12",
                "bVar4": "is_zero"
            },
            "code": "ulonglong calculate_result_080006a4(uint input1, uint input2, uint input3, uint input4) {\n  uint temp1 = input4 >> 0x14;\n  if (input2 != input3 && temp1 != input3) {\n    bool is_zero = (input1 | input2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input3 | input4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (input3 == 0) {\n      uint temp2 = input2 & 0x80000000;\n      do {\n        uint temp3 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(temp3 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | temp2;\n      if (temp1 != 0) {\n        return CONCAT44(input2, input1);\n      }\n    }\n    do {\n      temp1 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(temp1 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2, input1);\n  }\n  bool is_zero = (input1 | input2 << 1) == 0;\n  if (is_zero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!is_zero) {\n    is_zero = (input3 | input4 << 1) == 0;\n  }\n  uint temp2 = input2;\n  if (((!is_zero) && ((input2 != input3 || ((input1 | input2 << 0xc) == 0)))) && ((temp1 != input3 || (input1 = input3, temp2 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp2, input1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006a4",
            "calling": [
                "FUN_080004c8"
            ],
            "imported": false,
            "current_name": "calculate_result_080006a4"
        },
        "FUN_08000f68": {
            "renaming": {
                "FUN_08000f68": "calculate_result_08000f68",
                "param_1": "input1",
                "param_2": "input2",
                "bVar1": "is_negative1",
                "uVar2": "doubled_input1",
                "uVar3": "doubled_input2",
                "uVar4": "combined_inputs",
                "bVar5": "is_combined_inputs_zero",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint calculate_result_08000f68(uint input1, uint input2) {\n  bool is_negative1 = false;\n  bool is_negative2 = false;\n  uint doubled_input1 = input1 * 2;\n  uint doubled_input2 = input2 * 2;\n  \n  if (((int)doubled_input1 >> 0x18 == -1 || (int)doubled_input2 >> 0x18 == -1) && ((((int)doubled_input1 >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) || (((int)doubled_input2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  \n  uint combined_inputs = doubled_input1 | input2 & 0x7fffffff;\n  bool is_combined_inputs_zero = combined_inputs == 0;\n  \n  if (!is_combined_inputs_zero) {\n    uint xor_result = input1 ^ input2;\n    is_combined_inputs_zero = xor_result == 0;\n  }\n  \n  is_negative1 = -1 < (int)(input1 ^ input2);\n  \n  if (is_negative1) {\n    input1 = doubled_input1 + input2 * -2;\n    is_combined_inputs_zero = input1 == 0;\n  }\n  \n  if (is_negative1 && doubled_input2 <= doubled_input1 && !is_combined_inputs_zero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  \n  if (!is_negative1 || doubled_input2 > doubled_input1) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  \n  if (!is_combined_inputs_zero) {\n    input1 = input1 | 1;\n  }\n  \n  return input1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f68",
            "calling": [
                "FUN_08000fd0"
            ],
            "imported": false,
            "current_name": "calculate_result_08000f68"
        },
        "FUN_08009258": {
            "renaming": {
                "FUN_08009258": "calculate_hash_08009258",
                "param_1": "hash",
                "param_2": "array1",
                "param_3": "array2",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "iVar3": "num_words",
                "uVar4": "carry",
                "puVar5": "hash_array1_ptr",
                "uVar6": "value",
                "puVar7": "hash_array2_ptr",
                "puVar14": "hash_array1_ptr_inner",
                "puVar15": "array1_ptr_inner",
                "puVar16": "array2_ptr",
                "puVar17": "hash_array2",
                "puVar18": "hash_array1"
            },
            "code": "void calculate_hash_08009258(uint32_t hash, int* array1, int* array2)\\n\\\n    {\\n\\\n        uint32_t* hash_array1 = (uint32_t*)(malloc((array1[2] + array2[2]) * 4 + 0x14));\\n\\\n        uint32_t* hash_array2 = hash_array1 + array1[2] + array2[2];\\n\\\n        for (int i = 0; i < array1[2] + array2[2]; i++)\\n\\\n        {\\n\\\n            hash_array1[i] = 0;\\n\\\n        }\\n\\\n        int* array1_ptr = array1 + 4;\\n\\\n        uint32_t* hash_array1_ptr = hash_array1;\\n\\\n        for (int i = 0; i < array1[1]; i++)\\n\\\n        {\\n\\\n            uint32_t value = *(uint16_t*)array1_ptr;\\n\\\n            if (value != 0)\\n\\\n            {\\n\\\n                uint32_t carry = 0;\\n\\\n                uint32_t* hash_array2_ptr = hash_array2;\\n\\\n                uint32_t* hash_array1_ptr_inner = hash_array1_ptr;\\n\\\n                for (int j = 0; j < array2[1]; j++)\\n\\\n                {\\n\\\n                    uint32_t value2 = *(uint16_t*)hash_array2_ptr;\\n\\\n                    uint32_t mul = value * value2 + *(uint16_t*)hash_array1_ptr_inner + carry;\\n\\\n                    uint32_t value3 = *(uint16_t*)(array1_ptr + 2);\\n\\\n                    uint32_t mul2 = value3 * value2 + (*(uint16_t*)(hash_array1_ptr_inner + 1)) + (mul >> 16);\\n\\\n                    carry = (mul2 >> 16) + (mul & 0xffff) + (*(uint16_t*)(hash_array2_ptr + 2));\\n\\\n                    *(uint16_t*)hash_array1_ptr_inner = mul & 0xffff;\\n\\\n                    hash_array1_ptr_inner++;\\n\\\n                    hash_array2_ptr++;\\n\\\n                }\\n\\\n                *(uint16_t*)hash_array1_ptr_inner = carry;\\n\\\n            }\\n\\\n            hash_array1_ptr++;\\n\\\n            array1_ptr += 2;\\n\\\n        }\\n\\\n        if (array1[2] + array2[2] > 0)\\n\\\n        {\\n\\\n            uint32_t* hash_array2_ptr = hash_array2 + array1[2] + array2[2] - 1;\\n\\\n            uint32_t value = *hash_array2_ptr;\\n\\\n            while (value == 0 && array1[2] + array2[2] > 0)\\n\\\n            {\\n\\\n                hash_array2_ptr--;\\n\\\n                array1[2]--;\\n\\\n                value = *hash_array2_ptr;\\n\\\n            }\\n\\\n        }\\n\\\n        *(int*)(hash_array1 - 4) = array1[2] + array2[2];\\n\\\n    }",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009258",
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_hash_08009258"
        },
        "FUN_08000c08": {
            "renaming": {
                "FUN_08000c08": "calculate_08000c08",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "iVar3": "multiplier",
                "uVar4": "carry",
                "left_shifted_input": "left_shifted_input",
                "right_shifted_zero": "right_shifted_zero",
                "result": "result",
                "sign_bit": "sign_bit",
                "DAT_0804a800": "0x4a800000",
                "DAT_0804a7ff": "0x7fffffff",
                "PTR_FUN_08000bdc": "count_leading_zeroes"
            },
            "code": "uint calculate_08000c08(uint input){\n  int leading_zeroes = PTR_FUN_08000bdc(input);\n  uint shift_amount = leading_zeroes - 8;\n  int multiplier = shift_amount * -0x800000 + DAT_0804a800;\n  if (leading_zeroes > 7) {\n    uint left_shifted_input = input << (shift_amount & 0xff);\n    uint right_shifted_zero = 0U >> (0x20 - shift_amount & 0xff);\n    uint carry = (uint)(DAT_0804a7ff < 0);\n    uint result = multiplier + left_shifted_input + right_shifted_zero + carry;\n    if ((left_shifted_input & 0x80000000) == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint left_shifted_input = input << (leading_zeroes + 0x18U & 0xff);\n  uint right_shifted_input = (input >> (0x20 - (leading_zeroes + 0x18U) & 0xff));\n  int sign_bit = (int)left_shifted_input >> 0x1f;\n  uint result = multiplier + (right_shifted_input - sign_bit);\n  if ((left_shifted_input & DAT_0804a7ff) == 0) {\n    result = result & ~(left_shifted_input >> 0x1f);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c08",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "calculate_08000c08"
        },
        "FUN_08003c6e": {
            "renaming": {
                "FUN_08003c6e": "do_nothing_08003c6e"
            },
            "code": "\nvoid do_nothing_08003c6e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c6e",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c6e"
        },
        "FUN_080042de": {
            "renaming": {
                "FUN_080042de": "set_flag_if_one_080042de",
                "param_1": "array_ptr",
                "param_2": "value_ptr",
                "uVar1": "result"
            },
            "code": "int set_flag_if_one_080042de(int *array_ptr, uint *value_ptr) {\n    int result;\n    if (*(char *)(array_ptr + 0xf) == '\\x01') {\n        result = 2;\n    }\n    else {\n        *(undefined *)(array_ptr + 0xf) = 1;\n        *(undefined *)((int)array_ptr + 0x3d) = 2;\n        *(uint *)(*array_ptr + 4) = *(uint *)(*array_ptr + 4) & 0xffffff8f;\n        *(uint *)(*array_ptr + 4) = *value_ptr | *(uint *)(*array_ptr + 4);\n        *(uint *)(*array_ptr + 8) = *(uint *)(*array_ptr + 8) & 0xffffff7f;\n        *(uint *)(*array_ptr + 8) = value_ptr[1] | *(uint *)(*array_ptr + 8);\n        *(undefined *)((int)array_ptr + 0x3d) = 1;\n        *(undefined *)(array_ptr + 0xf) = 0;\n        result = 0;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042de",
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "imported": false,
            "current_name": "set_flag_if_one_080042de"
        },
        "FUN_08004366": {
            "renaming": {
                "FUN_08004366": "do_nothing_08004366"
            },
            "code": "\nvoid do_nothing_08004366(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004366",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08004366"
        },
        "FUN_08009530": {
            "renaming": {
                "FUN_08009530": "compare_and_set_08009530",
                "param_1": "param1",
                "param_2": "source",
                "param_3": "dest",
                "param_4": "param4",
                "iVar1": "result_ptr",
                "puVar2": "src_end_ptr",
                "uVar3": "src_length",
                "uVar4": "carry",
                "iVar5": "diff",
                "puVar6": "result_end_ptr",
                "puVar7": "src_ptr",
                "puVar8": "result_ptr",
                "puVar9": "dest_ptr",
                "puVar10": "src_ptr",
                "puVar11": "src_end",
                "puVar13": "dest_end",
                "uVar14": "dest_length",
                "iVar12": "carry"
            },
            "code": "void compare_and_set_08009530(uint32_t param1, uint32_t *source, uint32_t *dest, uint32_t param4)\n{\n    int diff = source[4] - dest[4];\n    uint32_t *src_ptr = source + 5;\n    uint32_t *dest_ptr = dest + 5;\n    uint32_t *src_end = src_ptr + dest[4];\n    int isEqual = 0;\n    if (diff == 0)\n    {\n        while (src_ptr < src_end)\n        {\n            if (*--src_end != *--dest_ptr)\n            {\n                isEqual = 1;\n                break;\n            }\n        }\n    }\n    else if (diff < 0)\n    {\n        isEqual = 1;\n        src_ptr = dest + 5;\n        dest_ptr = source + 5;\n        src_end = src_ptr + source[4];\n    }\n    else\n    {\n        src_ptr = source + 5;\n        dest_ptr = dest + 5;\n        src_end = src_ptr + dest[4];\n    }\n    uint32_t *result = (uint32_t *)malloc((dest[4] + 1) * sizeof(uint32_t));\n    uint32_t carry = 0;\n    while (src_ptr < src_end)\n    {\n        uint32_t sum = *--src_end + *--dest_ptr + carry;\n        result[dest[4] - ++dest_ptr + source[4] - src_end] = sum;\n        carry = sum >> 16;\n    }\n    while (src_end < src_ptr)\n    {\n        uint32_t sum = *--dest_ptr + carry;\n        result[dest[4] - ++dest_ptr + source[4] - src_end] = sum;\n        carry = sum >> 16;\n    }\n    if (carry != 0)\n    {\n        result[0] = carry;\n    }\n    else\n    {\n        --result;\n    }\n    while (*result == 0)\n    {\n        ++result;\n        --dest[4];\n    }\n    dest[5] = dest[4];\n    dest[4] = result - dest - 4;\n    free(dest + 6 + dest[5]);\n}\n",
            "called": [
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009530",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "compare_and_set_08009530"
        },
        "FUN_08008af8": {
            "renaming": {
                "FUN_08008af8": "FUNC_08008af8"
            },
            "code": "\nint * FUNC_08008af8(undefined4 *param_1,uint param_2)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  uint uVar4;\n  uint uVar5;\n  uint *puVar6;\n  int iVar7;\n  undefined *puVar8;\n  uint uVar9;\n  uint uVar10;\n  undefined4 *puVar11;\n  undefined *puVar12;\n  undefined *puVar13;\n  uint uVar14;\n  uint uVar15;\n  int iVar16;\n  undefined4 *puVar17;\n  undefined4 *puVar18;\n  \n  uVar14 = param_2 + 0xb;\n  if (uVar14 < 0x17) {\n    if (0x10 < param_2) goto LAB_08008c7a;\n    FUN_080090a8();\n    uVar15 = 0x10;\n    iVar7 = 0x18;\n    uVar14 = 2;\nLAB_08008b18:\n    puVar8 = PTR_DAT_08008e4c + iVar7;\n    puVar12 = *(undefined **)(puVar8 + 4);\n    if ((puVar12 != puVar8 + -8) || (puVar12 = *(undefined **)(puVar8 + 0xc), puVar8 != puVar12)) {\n      iVar7 = *(int *)(puVar12 + 0xc);\n      puVar8 = puVar12 + (*(uint *)(puVar12 + 4) & 0xfffffffc);\n      uVar14 = *(uint *)(puVar8 + 4);\nLAB_08008b34:\n      iVar16 = *(int *)(puVar12 + 8);\n      *(int *)(iVar16 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar16;\n      *(uint *)(puVar8 + 4) = uVar14 | 1;\n      FUN_080090b4(param_1);\n      return (int *)(puVar12 + 8);\n    }\n    uVar14 = uVar14 + 2;\n  }\n  else {\n    uVar15 = uVar14 & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_08008c7a:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n    FUN_080090a8();\n    if (uVar15 < 0x1f8) {\n      uVar14 = uVar14 >> 3;\n      iVar7 = uVar15 + 8;\n      goto LAB_08008b18;\n    }\n    uVar4 = uVar14 >> 9;\n    if (uVar4 == 0) {\n      iVar7 = 0x200;\n      uVar9 = 0x40;\n      uVar4 = 0x3f;\n    }\n    else if (uVar4 < 5) {\n      uVar9 = (uVar14 >> 6) + 0x39;\n      uVar4 = (uVar14 >> 6) + 0x38;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x15) {\n      uVar9 = uVar4 + 0x5c;\n      uVar4 = uVar4 + 0x5b;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x55) {\n      uVar9 = (uVar14 >> 0xc) + 0x6f;\n      uVar4 = (uVar14 >> 0xc) + 0x6e;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x155) {\n      uVar9 = (uVar14 >> 0xf) + 0x78;\n      uVar4 = (uVar14 >> 0xf) + 0x77;\n      iVar7 = uVar9 * 8;\n    }\n    else if (uVar4 < 0x555) {\n      uVar9 = (uVar14 >> 0x12) + 0x7d;\n      uVar4 = (uVar14 >> 0x12) + 0x7c;\n      iVar7 = uVar9 * 8;\n    }\n    else {\n      iVar7 = 0x3f8;\n      uVar9 = 0x7f;\n      uVar4 = 0x7e;\n    }\n    for (puVar12 = *(undefined **)(PTR_DAT_08008e4c + iVar7 + 4); uVar14 = uVar9,\n        PTR_DAT_08008e4c + iVar7 + -8 != puVar12; puVar12 = *(undefined **)(puVar12 + 0xc)) {\n      iVar16 = (*(uint *)(puVar12 + 4) & 0xfffffffc) - uVar15;\n      uVar14 = uVar4;\n      if (0xf < iVar16) break;\n      if (-1 < iVar16) {\n        puVar8 = puVar12 + (*(uint *)(puVar12 + 4) & 0xfffffffc);\n        uVar14 = *(uint *)(puVar8 + 4);\n        iVar7 = *(int *)(puVar12 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  puVar8 = PTR_PTR_DAT_08008e60;\n  puVar12 = PTR_DAT_08008e4c;\n  puVar13 = *(undefined **)(PTR_DAT_08008e4c + 0x10);\n  if (puVar13 == PTR_PTR_DAT_08008e60) {\n    uVar4 = *(uint *)(PTR_DAT_08008e4c + 4);\n    uVar9 = 1 << ((int)uVar14 >> 2 & 0xffU);\n    if (uVar9 <= uVar4) goto LAB_08008c06;\n  }\n  else {\n    uVar9 = *(uint *)(puVar13 + 4);\n    uVar10 = uVar9 & 0xfffffffc;\n    uVar4 = uVar10 - uVar15;\n    if (0xf < (int)uVar4) {\n      puVar3 = puVar13 + uVar15;\n      *(uint *)(puVar13 + 4) = uVar15 | 1;\n      *(undefined **)(puVar12 + 0x10) = puVar3;\n      *(undefined **)(puVar12 + 0x14) = puVar3;\n      *(undefined **)(puVar3 + 8) = puVar8;\n      *(undefined **)(puVar3 + 0xc) = puVar8;\n      *(uint *)(puVar3 + 4) = uVar4 | 1;\n      *(uint *)(puVar13 + uVar10) = uVar4;\n      FUN_080090b4(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    *(undefined **)(PTR_DAT_08008e4c + 0x10) = PTR_PTR_DAT_08008e60;\n    *(undefined **)(puVar12 + 0x14) = puVar8;\n    if (-1 < (int)uVar4) {\n      *(uint *)(puVar13 + uVar10 + 4) = *(uint *)(puVar13 + uVar10 + 4) | 1;\n      FUN_080090b4(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    if (uVar10 < 0x200) {\n      iVar7 = (uVar9 >> 3) + 1;\n      iVar16 = *(int *)(puVar12 + iVar7 * 8);\n      uVar4 = 1 << ((int)(uVar9 >> 3) >> 2 & 0xffU) | *(uint *)(puVar12 + 4);\n      *(int *)(puVar13 + 8) = iVar16;\n      *(undefined **)(puVar13 + 0xc) = puVar12 + iVar7 * 8 + -8;\n      *(uint *)(puVar12 + 4) = uVar4;\n      *(undefined **)(puVar12 + iVar7 * 8) = puVar13;\n      *(undefined **)(iVar16 + 0xc) = puVar13;\n    }\n    else {\n      uVar4 = uVar9 >> 9;\n      if (uVar4 < 5) {\n        iVar7 = ((uVar9 >> 6) + 0x39) * 8;\n        iVar16 = (uVar9 >> 6) + 0x38;\n      }\n      else if (uVar4 < 0x15) {\n        iVar7 = (uVar4 + 0x5c) * 8;\n        iVar16 = uVar4 + 0x5b;\n      }\n      else if (uVar4 < 0x55) {\n        iVar7 = ((uVar9 >> 0xc) + 0x6f) * 8;\n        iVar16 = (uVar9 >> 0xc) + 0x6e;\n      }\n      else if (uVar4 < 0x155) {\n        iVar7 = ((uVar9 >> 0xf) + 0x78) * 8;\n        iVar16 = (uVar9 >> 0xf) + 0x77;\n      }\n      else if (uVar4 < 0x555) {\n        iVar7 = ((uVar9 >> 0x12) + 0x7d) * 8;\n        iVar16 = (uVar9 >> 0x12) + 0x7c;\n      }\n      else {\n        iVar7 = 0x3f8;\n        iVar16 = 0x7e;\n      }\n      puVar3 = *(undefined **)(puVar12 + iVar7);\n      puVar1 = puVar12 + iVar7 + -8;\n      if (puVar1 == puVar3) {\n        uVar4 = 1 << (iVar16 >> 2 & 0xffU) | *(uint *)(puVar12 + 4);\n        *(uint *)(puVar12 + 4) = uVar4;\n      }\n      else {\n        do {\n          if ((*(uint *)(puVar3 + 4) & 0xfffffffc) <= uVar10) break;\n          puVar3 = *(undefined **)(puVar3 + 8);\n        } while (puVar1 != puVar3);\n        puVar1 = *(undefined **)(puVar3 + 0xc);\n        uVar4 = *(uint *)(puVar12 + 4);\n      }\n      *(undefined **)(puVar13 + 8) = puVar3;\n      *(undefined **)(puVar13 + 0xc) = puVar1;\n      *(undefined **)(puVar1 + 8) = puVar13;\n      *(undefined **)(puVar3 + 0xc) = puVar13;\n    }\n    uVar9 = 1 << ((int)uVar14 >> 2 & 0xffU);\n    if (uVar9 <= uVar4) {\nLAB_08008c06:\n      if ((uVar9 & uVar4) == 0) {\n        uVar14 = uVar14 & 0xfffffffc;\n        do {\n          uVar9 = uVar9 << 1;\n          uVar14 = uVar14 + 4;\n        } while ((uVar9 & uVar4) == 0);\n      }\n      do {\n        puVar17 = (undefined4 *)(puVar12 + uVar14 * 8);\n        uVar4 = uVar14;\n        puVar18 = puVar17;\n        do {\n          for (puVar11 = (undefined4 *)puVar18[3]; puVar18 != puVar11;\n              puVar11 = (undefined4 *)puVar11[3]) {\n            uVar10 = puVar11[1] & 0xfffffffc;\n            uVar5 = uVar10 - uVar15;\n            if (0xf < (int)uVar5) {\n              iVar16 = puVar11[2];\n              iVar7 = puVar11[3];\n              puVar13 = (undefined *)(uVar15 + (int)puVar11);\n              puVar11[1] = uVar15 | 1;\n              *(int *)(iVar16 + 0xc) = iVar7;\n              *(int *)(iVar7 + 8) = iVar16;\n              *(undefined **)(puVar12 + 0x10) = puVar13;\n              *(undefined **)(puVar12 + 0x14) = puVar13;\n              *(undefined **)(puVar13 + 8) = puVar8;\n              *(undefined **)(puVar13 + 0xc) = puVar8;\n              *(uint *)(puVar13 + 4) = uVar5 | 1;\n              *(uint *)((int)puVar11 + uVar10) = uVar5;\n              FUN_080090b4(param_1);\n              return puVar11 + 2;\n            }\n            if (-1 < (int)uVar5) {\n              iVar7 = puVar11[3];\n              iVar16 = puVar11[2];\n              *(uint *)((int)puVar11 + uVar10 + 4) = *(uint *)((int)puVar11 + uVar10 + 4) | 1;\n              *(int *)(iVar16 + 0xc) = iVar7;\n              *(int *)(iVar7 + 8) = iVar16;\n              FUN_080090b4(param_1);\n              return puVar11 + 2;\n            }\n          }\n          uVar4 = uVar4 + 1;\n          puVar18 = puVar18 + 2;\n        } while ((uVar4 & 3) != 0);\n        do {\n          uVar10 = uVar14 & 3;\n          puVar18 = puVar17 + -2;\n          uVar14 = uVar14 - 1;\n          if (uVar10 == 0) {\n            uVar10 = *(uint *)(puVar12 + 4) & ~uVar9;\n            *(uint *)(puVar12 + 4) = uVar10;\n            goto LAB_08008f24;\n          }\n          puVar17 = (undefined4 *)*puVar17;\n        } while (puVar17 == puVar18);\n        uVar10 = *(uint *)(puVar12 + 4);\nLAB_08008f24:\n        uVar9 = uVar9 * 2;\n        if ((uVar10 <= uVar9 && uVar9 - uVar10 != 0) || (uVar14 = uVar4, uVar9 == 0)) break;\n        for (; (uVar9 & uVar10) == 0; uVar9 = uVar9 << 1) {\n          uVar14 = uVar14 + 4;\n        }\n      } while( true );\n    }\n  }\n  puVar8 = PTR_DAT_08008e64;\n  puVar13 = *(undefined **)(puVar12 + 8);\n  uVar14 = *(uint *)(puVar13 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar14) && (uVar4 = uVar14 - uVar15, 0xf < (int)uVar4)) goto LAB_08008dac;\n  if (*(int *)PTR_DAT_08008e64 == -1) {\n    uVar4 = uVar15 + *(int *)PTR_DAT_08008e50 + 0x10;\n  }\n  else {\n    uVar4 = uVar15 + *(int *)PTR_DAT_08008e50 + 0x100f & 0xfffff000;\n  }\n  puVar1 = (undefined *)FUN_08009744(param_1,uVar4);\n  puVar6 = (uint *)PTR_DAT_08009018;\n  puVar3 = PTR_DAT_08008e54;\n  if (puVar1 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    puVar13 = *(undefined **)(puVar12 + 8);\n    uVar14 = *(uint *)(puVar13 + 4);\n  }\n  else {\n    puVar2 = puVar13 + uVar14;\n    if (puVar2 < puVar1 || puVar2 == puVar1) {\n      uVar9 = *(int *)PTR_DAT_08008e54 + uVar4;\n      *(uint *)PTR_DAT_08008e54 = uVar9;\n      puVar6 = (uint *)puVar3;\n      if ((puVar2 != puVar1) || (((uint)puVar2 & 0xfff) != 0)) goto LAB_08008d02;\n      *(uint *)(*(int *)(puVar12 + 8) + 4) = uVar14 + uVar4 | 1;\n    }\n    else {\n      if (puVar13 != puVar12) goto LAB_08008ed8;\n      uVar9 = *(int *)PTR_DAT_08009018 + uVar4;\n      *(uint *)PTR_DAT_08009018 = uVar9;\nLAB_08008d02:\n      if (*(int *)puVar8 == -1) {\n        *(undefined **)puVar8 = puVar1;\n      }\n      else {\n        *puVar6 = (uint)(puVar1 + (uVar9 - (int)puVar2));\n      }\n      uVar9 = (uint)puVar1 & 7;\n      if (uVar9 == 0) {\n        iVar7 = 0x1000;\n      }\n      else {\n        puVar1 = puVar1 + (8 - uVar9);\n        iVar7 = 0x1008 - uVar9;\n      }\n      iVar7 = iVar7 - ((uint)(puVar1 + uVar4) & 0xfff);\n      iVar16 = FUN_08009744(param_1,iVar7);\n      if (iVar16 == -1) {\n        uVar4 = 1;\n        iVar7 = 0;\n      }\n      else {\n        uVar4 = (iVar16 - (int)puVar1) + iVar7 | 1;\n      }\n      uVar9 = *puVar6 + iVar7;\n      *(undefined **)(puVar12 + 8) = puVar1;\n      *puVar6 = uVar9;\n      *(uint *)(puVar1 + 4) = uVar4;\n      if (puVar13 != puVar12) {\n        if (uVar14 < 0x10) {\n          *(undefined4 *)(puVar1 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        uVar14 = uVar14 - 0xc & 0xfffffff8;\n        *(uint *)(puVar13 + 4) = *(uint *)(puVar13 + 4) & 1 | uVar14;\n        *(undefined4 *)(puVar13 + uVar14 + 4) = 5;\n        *(undefined4 *)(puVar13 + uVar14 + 8) = 5;\n        if (0xf < uVar14) {\n          FUNC_080088ec(param_1,puVar13 + 8);\n          uVar9 = *puVar6;\n        }\n      }\n    }\n    puVar8 = PTR_DAT_08008e5c;\n    puVar13 = *(undefined **)(puVar12 + 8);\n    uVar4 = *(uint *)PTR_DAT_08008e5c;\n    if (*(uint *)PTR_DAT_08008e58 < uVar9) {\n      *(uint *)PTR_DAT_08008e58 = uVar9;\n    }\n    uVar14 = *(uint *)(puVar13 + 4);\n    if (uVar4 < uVar9) {\n      *(uint *)puVar8 = uVar9;\n    }\n  }\n  uVar4 = (uVar14 & 0xfffffffc) - uVar15;\n  if ((uVar15 <= (uVar14 & 0xfffffffc)) && (0xf < (int)uVar4)) {\nLAB_08008dac:\n    *(uint *)(puVar13 + 4) = uVar15 | 1;\n    *(undefined **)(puVar12 + 8) = puVar13 + uVar15;\n    *(uint *)(puVar13 + uVar15 + 4) = uVar4 | 1;\n    FUN_080090b4(param_1);\n    return (int *)(puVar13 + 8);\n  }\nLAB_08008eee:\n  FUN_080090b4(param_1);\n  return (int *)0x0;\n}\n\n",
            "called": [
                "FUN_08009744",
                "FUN_080088ec",
                "FUN_080090a8",
                "FUN_080090b4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008af8",
            "calling": [
                "FUN_08009980",
                "FUN_08009adc",
                "FUN_08005e9c",
                "FUN_080097cc"
            ],
            "imported": false,
            "current_name": "FUNC_08008af8"
        },
        "FUN_08002bb4": {
            "renaming": {
                "FUN_08002bb4": "check_flag_08002bb4",
                "param_1": "flag_ptr",
                "param_2": "flag_mask",
                "param_3": "offset",
                "iVar1": "result",
                "FUN_08002d3c": "check_next_flag",
                "FUN_080015a0": "get_offset"
            },
            "code": "int check_flag_08002bb4(int *flag_ptr, uint flag_mask, int offset) {\n  int result;\n  while (true) {\n    if ((*(uint *)(*flag_ptr + 0x14) & 0x80) == 0x80) {\n      return 0;\n    }\n    result = check_next_flag(flag_ptr);\n    if (result != 0) {\n      break;\n    }\n    if ((flag_mask != 0xffffffff) && ((flag_mask == 0 || (result = get_offset(), flag_mask < (uint)(result - offset))))) {\n      flag_ptr[0x10] = flag_ptr[0x10] | 0x20;\n      flag_ptr[0xc] = 0;\n      *(undefined *)((int)flag_ptr + 0x3d) = 0x20;\n      *(undefined *)(flag_ptr + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002bb4",
            "calling": [
                "FUN_08002640",
                "FUN_08001ccc",
                "FUN_080027f4"
            ],
            "imported": false,
            "current_name": "check_flag_08002bb4"
        },
        "FUN_08002d3c": {
            "renaming": {
                "FUN_08002d3c": "check_flag_08002d3c",
                "param_1": "flag_ptr",
                "bVar1": "flag_value"
            },
            "code": "bool check_flag_08002d3c(int *flag_ptr)\n{\n  bool flag_value = (*(uint *)(*flag_ptr + 0x14) & 0x400) == 0x400;\n  if (flag_value) {\n    *(undefined4 *)(*flag_ptr + 0x14) = 0xfffffbff;\n    flag_ptr[0x10] = 4;\n    flag_ptr[0xc] = 0;\n    *(undefined *)((int)flag_ptr + 0x3d) = 0x20;\n    *(undefined *)(flag_ptr + 0xf) = 0;\n  }\n  return flag_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d3c",
            "calling": [
                "FUN_08002c2e",
                "FUN_08002bb4"
            ],
            "imported": false,
            "current_name": "check_flag_08002d3c"
        },
        "FUN_08004bd8": {
            "renaming": {
                "FUN_08004bd8": "process_data_08004bd8",
                "param_1": "data",
                "param_2": "result",
                "uVar1": "processed_data1",
                "uVar2": "processed_data2",
                "uVar3": "processed_data3"
            },
            "code": "void process_data_08004bd8(int data, undefined4 *result)\n{\n    undefined4 processed_data1;\n    undefined8 processed_data2;\n    undefined8 processed_data3;\n\n    processed_data1 = get_processed_data1(*(undefined4 *)(data + 0x10), *(undefined4 *)(data + 0x1c));\n    processed_data2 = get_processed_data2(*(undefined4 *)PTR_DAT_08004d60);\n    processed_data3 = get_processed_data2(processed_data1);\n    processed_data3 = get_processed_data3((int)processed_data3, (int)((ulonglong)processed_data3 >> 0x20), DAT_08004d40, DAT_08004d44);\n    processed_data2 = get_processed_data4((int)processed_data2, (int)((ulonglong)processed_data2 >> 0x20), (int)processed_data3, (int)((ulonglong)processed_data3 >> 0x20));\n    processed_data1 = get_processed_data5((int)processed_data2, (int)((ulonglong)processed_data2 >> 0x20));\n    *(undefined4 *)PTR_DAT_08004d60 = processed_data1;\n    processed_data2 = get_processed_data2(*(undefined4 *)(data + 4));\n    processed_data2 = get_processed_data6((int)processed_data2, (int)((ulonglong)processed_data2 >> 0x20), 0, DAT_08004d64);\n    processed_data3 = get_processed_data2(*(undefined4 *)(data + 8));\n    processed_data3 = get_processed_data6((int)processed_data3, (int)((ulonglong)processed_data3 >> 0x20), 0, DAT_08004d64);\n    processed_data2 = thunk_get_processed_data7((int)processed_data2, (int)((ulonglong)processed_data2 >> 0x20), (int)processed_data3, (int)((ulonglong)processed_data3 >> 0x20));\n    processed_data2 = get_processed_data3((int)processed_data2, (int)((ulonglong)processed_data2 >> 0x20), 0, DAT_08004d68);\n    processed_data2 = get_processed_data6((int)processed_data2, (int)((ulonglong)processed_data2 >> 0x20), DAT_08004d48, DAT_08004d4c);\n    processed_data3 = get_processed_data2(*(undefined4 *)(data + 0x24));\n    processed_data2 = get_processed_data4((int)processed_data2, (int)((ulonglong)processed_data2 >> 0x20), (int)processed_data3, (int)((ulonglong)processed_data3 >> 0x20));\n    processed_data2 = get_processed_data4((int)processed_data2, (int)((ulonglong)processed_data2 >> 0x20), 0, DAT_08004d6c);\n    processed_data1 = get_processed_data5((int)processed_data2, (int)((ulonglong)processed_data2 >> 0x20));\n    if (*PTR_DAT_08004d70 == '\\0') {\n        processed_data2 = get_processed_data2(*(undefined4 *)PTR_DAT_08004d60);\n        processed_data2 = get_processed_data3((int)processed_data2, (int)((ulonglong)processed_data2 >> 0x20), DAT_08004d50, DAT_08004d54);\n        processed_data3 = get_processed_data2(processed_data1);\n        processed_data3 = get_processed_data3((int)processed_data3, (int)((ulonglong)processed_data3 >> 0x20), DAT_08004d58, DAT_08004d5c);\n        processed_data2 = get_processed_data4((int)processed_data2, (int)((ulonglong)processed_data2 >> 0x20), (int)processed_data3, (int)((ulonglong)processed_data3 >> 0x20));\n        processed_data1 = get_processed_data5((int)processed_data2, (int)((ulonglong)processed_data2 >> 0x20));\n        *(undefined4 *)PTR_DAT_08004d60 = processed_data1;\n    }\n    else {\n        *(undefined4 *)PTR_DAT_08004d60 = processed_data1;\n        *PTR_DAT_08004d70 = 0;\n    }\n    *result = *(undefined4 *)PTR_DAT_08004d60;\n    return;\n}",
            "called": [
                "FUN_08000aa4",
                "FUN_0800015c",
                "FUN_08000418",
                "FUN_08000158",
                "FUN_080009fc",
                "thunk_FUN_08005838",
                "FUN_080004c8",
                "FUN_0800071c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bd8",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "process_data_08004bd8"
        },
        "FUN_080090c0": {
            "renaming": {
                "FUN_080090c0": "get_value_080090c0",
                "param_1": "arg1",
                "param_2": "arg2",
                "iVar2": "var1",
                "puVar1": "result",
                "FUN_08009980": "allocate_memory"
            },
            "code": "undefined4 * get_value_080090c0(int arg1, uint arg2)\n{\n    undefined4 *result;\n    int var1 = *(int *)(arg1 + 0x4c);\n    if (var1 == 0) {\n        var1 = allocate_memory(arg1, 4, 0x21);\n        *(int *)(arg1 + 0x4c) = var1;\n        if (var1 == 0) {\n            return (undefined4 *)0x0;\n        }\n    }\n    result = *(undefined4 **)(var1 + arg2 * 4);\n    if (result == (undefined4 *)0x0) {\n        int var2 = 1 << (arg2 & 0xff);\n        result = (undefined4 *)allocate_memory(arg1, 1, (var2 + 5) * 4);\n        if (result == (undefined4 *)0x0) {\n            return (undefined4 *)0x0;\n        }\n        result[1] = arg2;\n        result[2] = var2;\n    }\n    else {\n        *(undefined4 *)(var1 + arg2 * 4) = *result;\n    }\n    result[3] = 0;\n    result[4] = 0;\n    return result;\n}",
            "called": [
                "FUN_08009980"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090c0",
            "calling": [
                "FUN_08009258",
                "FUN_08009444",
                "FUN_08009244",
                "FUN_08009120",
                "FUN_08009530",
                "FUN_08009630",
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "get_value_080090c0"
        },
        "FUN_080091e4": {
            "renaming": {
                "FUN_080091e4": "count_set_bits_080091e4",
                "*param_1": "*num",
                "uVar1": "count",
                "uVar2": "input"
            },
            "code": "uint count_set_bits_080091e4(uint *num)\n{\n  uint input = *num;\n  uint count = input & 7;\n  if (count == 0) {\n    if ((input & 0xffff) == 0) {\n      input = input >> 0x10;\n      count = 0x10;\n    }\n    if ((input & 0xff) == 0) {\n      input = input >> 8;\n      count += 8;\n    }\n    if ((input & 0xf) == 0) {\n      input = input >> 4;\n      count += 4;\n    }\n    if ((input & 3) == 0) {\n      input = input >> 2;\n      count += 2;\n    }\n    if (-1 < (int)(input << 0x1f)) {\n      input = input >> 1;\n      if (input == 0) {\n        return 0x20;\n      }\n      count += 1;\n    }\n    *num = input;\n    return count;\n  }\n  if (-1 < (int)(input << 0x1f)) {\n    if ((int)(input << 0x1e) < 0) {\n      *num = input >> 1;\n      return 1;\n    }\n    *num = input >> 2;\n    return 2;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091e4",
            "calling": [
                "FUN_08009630"
            ],
            "imported": false,
            "current_name": "count_set_bits_080091e4"
        },
        "FUN_080009fc": {
            "renaming": {
                "FUN_080009fc": "calculate_float_bits_080009fc",
                "param_1": "float_bits",
                "param_2": "float_bits2",
                "uVar1": "result",
                "uVar2": "shifted_bits",
                "uVar3": "shifted_bits2",
                "in_r12": "unused_variable",
                "bVar4": "is_zero",
                "bVar5": "is_less_than_0x70000000"
            },
            "code": "uint calculate_float_bits_080009fc(uint float_bits,uint float_bits2)\n{\n  uint result;\n  uint shifted_bits;\n  uint shifted_bits2;\n  bool is_less_than_0x70000000;\n  bool is_zero;\n  \n  shifted_bits = float_bits2 * 2;\n  is_less_than_0x70000000 = shifted_bits < 0x70000000;\n  shifted_bits2 = shifted_bits + 0x90000000;\n  result = shifted_bits2;\n  if (!is_less_than_0x70000000) {\n    shifted_bits = shifted_bits + 0x8fe00000;\n    result = shifted_bits;\n  }\n  is_zero = result == 0;\n  if (!is_less_than_0x70000000 && shifted_bits2 >= 0x200000) {\n    is_zero = shifted_bits == 0x1fc00000;\n  }\n  if (((is_less_than_0x70000000 || shifted_bits2 < 0x200000) || 0x1fc00000 < shifted_bits) || is_zero) {\n    if ((float_bits2 & 0x40000000) != 0) {\n      if (((int)shifted_bits2 >> 0x15 == -1) && ((float_bits | float_bits2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return float_bits2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(shifted_bits + 0x92e00000) < 0 != SCARRY4(shifted_bits2,0x2e00000)) {\n      return float_bits2 & 0x80000000;\n    }\n    shifted_bits2 = 0x18 - (shifted_bits + 0x92e00000 >> 0x15);\n    result = float_bits >> (shifted_bits2 & 0xff);\n    if (float_bits << (0x20 - shifted_bits2 & 0xff) != 0) {\n      result = result | 1;\n    }\n    shifted_bits = float_bits2 & 0x1fffff | 0x100000;\n    float_bits = result | shifted_bits << (0x20 - shifted_bits2 & 0xff);\n    shifted_bits = (shifted_bits >> (shifted_bits2 & 0xff)) << 1;\n  }\n  result = (float_bits2 & 0x80000000 | float_bits >> 0x1d) + shifted_bits * 4 + (uint)(0x7fffffff < float_bits * 8);\n  if (float_bits * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009fc",
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "imported": false,
            "current_name": "calculate_float_bits_080009fc"
        },
        "FUN_08000cb8": {
            "renaming": {
                "FUN_08000cb8": "FUNC_08000cb8"
            },
            "code": "\nuint FUNC_08000cb8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_08000e08;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_08000e08:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cb8",
            "calling": [
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "FUNC_08000cb8"
        },
        "FUN_080093a4": {
            "renaming": {
                "FUN_080093a4": "allocate_memory_080093a4",
                "param_1": "size",
                "param_2": "buffer",
                "param_3": "count",
                "iVar1": "heap_ptr_offset",
                "iVar2": "count_quotient",
                "puVar3": "current_heap_ptr",
                "puVar4": "heap_ptr",
                "PTR_DAT_08009440": "array_of_3_and_4",
                "FUN_08009120": "copy_memory",
                "FUN_080090c0": "initialize_heap",
                "*(undefined4 **)(param_1 + 0x48)": "*(uint32_t**)(size + 0x48)",
                "*(undefined4 *)(iVar1 + puVar3[1] * 4)": "*(uint32_t*)(heap_ptr_offset + current_heap_ptr[1] * 4)",
                "*(undefined4 **)(iVar1 + puVar3[1] * 4)": "*(uint32_t**)(heap_ptr_offset + current_heap_ptr[1] * 4)"
            },
            "code": "uint32_t* allocate_memory_080093a4(int size, uint32_t* buffer, uint32_t count)\\n\\\n    {\\n\\\n        int remainder = count % 4;\\n\\\n        if (remainder != 0) {\\n\\\n            buffer = (uint32_t*)copy_memory(size, buffer, *(uint32_t*)(PTR_DAT_08009440 + (remainder - 1) * 4), 0);\\n\\\n        }\\n\\\n        int count_quotient = (int)count >> 2;\\n\\\n        if (count_quotient != 0) {\\n\\\n            uint32_t* heap_ptr = *(uint32_t**)(size + 0x48);\\n\\\n            if (heap_ptr == (uint32_t*)0x0) {\\n\\\n                heap_ptr = (uint32_t*)initialize_heap(size, 1);\\n\\\n                heap_ptr[4] = 1;\\n\\\n                heap_ptr[5] = 0x271;\\n\\\n                *(uint32_t**)(size + 0x48) = heap_ptr;\\n\\\n                *heap_ptr = 0;\\n\\\n            }\\n\\\n            uint32_t* current_heap_ptr = buffer;\\n\\\n            if (count_quotient << 0x1f >= 0) {\\n\\\n                goto LAB_080093d2;\\n\\\n            }\\n\\\n            while (count_quotient != 0) {\\n\\\n                uint32_t* next_heap_ptr = (uint32_t*)*heap_ptr;\\n\\\n                if (next_heap_ptr == (uint32_t*)0x0) {\\n\\\n                    next_heap_ptr = (uint32_t*)create_heap(size, heap_ptr, heap_ptr);\\n\\\n                    *heap_ptr = next_heap_ptr;\\n\\\n                    *next_heap_ptr = 0;\\n\\\n                }\\n\\\n                heap_ptr = buffer;\\n\\\n                if (-1 < count_quotient << 0x1f) {\\n\\\n                    break;\\n\\\n                }\\n\\\n                LAB_080093d2:\\n\\\n                buffer = (uint32_t*)create_heap(size, heap_ptr, next_heap_ptr);\\n\\\n                if (heap_ptr == (uint32_t*)0x0) {\\n\\\n                    break;\\n\\\n                }\\n\\\n                int heap_ptr_offset = *(int*)(size + 0x4c);\\n\\\n                count_quotient = count_quotient >> 1;\\n\\\n                *heap_ptr = *(uint32_t*)(heap_ptr_offset + heap_ptr[1] * 4);\\n\\\n                *(uint32_t**)(heap_ptr_offset + heap_ptr[1] * 4) = heap_ptr;\\n\\\n                heap_ptr = next_heap_ptr;\\n\\\n                if (count_quotient == 0) {\\n\\\n                    return buffer;\\n\\\n                }\\n\\\n            }\\n\\\n            goto LAB_080093c4;\\n\\\n        }\\n\\\n        return buffer;\\n\\\n        LAB_080093c4:\\n\\\n        count_quotient = count_quotient >> 1;\\n\\\n        current_heap_ptr = heap_ptr;\\n\\\n        if (count_quotient != 0) {\\n\\\n            while (true) {\\n\\\n                heap_ptr = (uint32_t*)*current_heap_ptr;\\n\\\n                if (heap_ptr == (uint32_t*)0x0) {\\n\\\n                    heap_ptr = (uint32_t*)create_heap(size, current_heap_ptr, current_heap_ptr);\\n\\\n                    *current_heap_ptr = heap_ptr;\\n\\\n                    *heap_ptr = 0;\\n\\\n                }\\n\\\n                current_heap_ptr = buffer;\\n\\\n                if (-1 < count_quotient << 0x1f) {\\n\\\n                    break;\\n\\\n                }\\n\\\n                LAB_080093d2:\\n\\\n                buffer = (uint32_t*)create_heap(size, current_heap_ptr, heap_ptr);\\n\\\n                if (current_heap_ptr == (uint32_t*)0x0) {\\n\\\n                    break;\\n\\\n                }\\n\\\n                int heap_ptr_offset = *(int*)(size + 0x4c);\\n\\\n                count_quotient = count_quotient >> 1;\\n\\\n                *current_heap_ptr = *(uint32_t*)(heap_ptr_offset + current_heap_ptr[1] * 4);\\n\\\n                *(uint32_t**)(heap_ptr_offset + current_heap_ptr[1] * 4) = current_heap_ptr;\\n\\\n                current_heap_ptr = heap_ptr;\\n\\\n                if (count_quotient == 0) {\\n\\\n                    return buffer;\\n\\\n                }\\n\\\n            }\\n\\\n            goto LAB_080093c4;\\n\\\n        }\\n\\\n        return buffer;\\n\\\n    }",
            "called": [
                "FUN_08009258",
                "FUN_08009120",
                "FUN_080090c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080093a4",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "allocate_memory_080093a4"
        },
        "FUN_080098c0": {
            "renaming": {
                "FUN_080098c0": "process_data_080098c0",
                "param_1": "data",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "data_ptr",
                "iVar5": "var1",
                "iVar6": "ptr",
                "iVar7": "var3",
                "uVar2": "result",
                "uVar3": "var6",
                "uVar4": "var2",
                "DAT_0800997c": "DAT_0800997c",
                "PTR_PTR_DAT_08009974": "PTR_PTR_DAT_08009974",
                "PTR_PTR_DAT_08009978": "PTR_PTR_DAT_08009978",
                "_DAT_00000190": "_DAT_00000190",
                "_DAT_00000194": "_DAT_00000194",
                "_DAT_00000318": "_DAT_00000318",
                "_DAT_0000031c": "_DAT_0000031c"
            },
            "code": "undefined4 process_data_080098c0(int data, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n  undefined *data_ptr = PTR_PTR_DAT_08009974;\n  do_nothing_08008af0(*(undefined4 *)PTR_PTR_DAT_08009974);\n  int ptr = *(int *)PTR_PTR_DAT_08009978;\n  int var1 = *(int *)(ptr + 0x148);\n  if (var1 == 0) {\n    var1 = ptr + 0x14c;\n    *(int *)(ptr + 0x148) = var1;\n  }\n  uint var2 = *(uint *)(var1 + 4);\n  int var3;\n  if ((int)var2 < 0x20) {\n    var3 = var2 + 1;\n  }\n  else {\n    if (DAT_0800997c == 0) {\n      do_nothing_08008af4(*(undefined4 *)data_ptr);\n      return 0xffffffff;\n    }\n    int var4 = 400;\n    var2 = 0;\n    _DAT_00000190 = *(undefined4 *)(ptr + 0x148);\n    var3 = 1;\n    _DAT_00000194 = 0;\n    *(undefined4 *)(ptr + 0x148) = 400;\n    _DAT_00000318 = 0;\n    _DAT_0000031c = 0;\n  }\n  if (data != 0) {\n    int var5 = var1 + var2 * 4;\n    *(undefined4 *)(var5 + 0x88) = arg2;\n    uint var6 = 1 << (var2 & 0xff);\n    *(uint *)(var1 + 0x188) = *(uint *)(var1 + 0x188) | var6;\n    *(undefined4 *)(var5 + 0x108) = arg3;\n    if (data == 2) {\n      *(uint *)(var1 + 0x18c) = var6 | *(uint *)(var1 + 0x18c);\n    }\n  }\n  *(int *)(var1 + 4) = var3;\n  undefined4 result = *(undefined4 *)data_ptr;\n  *(undefined4 *)(var1 + (var2 + 2) * 4) = arg1;\n  do_nothing_08008af4(result);\n  return 0;\n}",
            "called": [
                "FUN_08008af0",
                "FUN_08008af4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098c0",
            "calling": [
                "FUN_080078a0"
            ],
            "imported": false,
            "current_name": "process_data_080098c0"
        },
        "FUN_08003c80": {
            "renaming": {
                "FUN_08003c80": "do_nothing_08003c80"
            },
            "code": "\nvoid do_nothing_08003c80(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c80",
            "calling": [
                "FUN_080036f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08003c80"
        },
        "FUN_0800015c": {
            "renaming": {
                "FUN_0800015c": "FUNC_0800015c"
            },
            "code": "\nulonglong FUNC_0800015c(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_08000268;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800015c",
            "calling": [
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "FUNC_0800015c"
        },
        "FUN_080027f4": {
            "renaming": {
                "FUN_080027f4": "send_packet_080027f4",
                "param_1": "packet",
                "param_2": "packet_type",
                "param_3": "packet_length",
                "param_4": "packet_id",
                "param_5": "timeout",
                "param_6": "socket_fd",
                "iVar1": "status",
                "uVar2": "result"
            },
            "code": "uint32_t send_packet_080027f4(uint32_t **packet, byte packet_type, uint16_t packet_length, uint16_t packet_id, uint32_t timeout, int socket_fd)\n{\n    int status;\n    uint32_t result;\n    \n    **packet |= 0x400;\n    **packet |= 0x100;\n    \n    while((~(*packet)[5] & 1) != 0)\n    {\n        if((timeout != 0xffffffff) && (timeout != 0) && ((status = get_elapsed_time(socket_fd)) - socket_fd) > timeout)\n        {\n            (*packet)[12] = (uint32_t *)0x0;\n            (*packet)[61] = 0x20;\n            (*packet)[62] = 0;\n            (*packet)[15] = 0;\n            result = 3;\n            goto exit;\n        }\n    }\n    \n    (*packet)[4] = packet_type & 0xfe;\n    \n    status = send_packet_080027f4_data(packet, packet_length, timeout, socket_fd);\n    if(status != 0)\n    {\n        result = handle_send_packet_080027f4_error(packet, timeout);\n        goto exit;\n    }\n    \n    status = handle_send_packet_080027f4_response(packet, packet_length, timeout, packet_id);\n    if(status != 0)\n    {\n        result = handle_send_packet_080027f4_error(packet, timeout);\n        goto exit;\n    }\n    \n    if(packet_id == 1)\n    {\n        (*packet)[4] = (uint32_t)packet_type;\n    }\n    else\n    {\n        (*packet)[4] = (uint32_t)((uint16_t)packet_type >> 8);\n        status = handle_send_packet_080027f4_response(packet, packet_length, timeout, packet_id);\n        if(status != 0)\n        {\n            result = handle_send_packet_080027f4_error(packet, timeout);\n            goto exit;\n        }\n        (*packet)[4] = (uint32_t)packet_type;\n    }\n    \n    status = handle_send_packet_080027f4_response(packet, packet_length, timeout, packet_id);\n    if(status != 0)\n    {\n        result = handle_send_packet_080027f4_error(packet, timeout);\n        goto exit;\n    }\n    \n    **packet |= 0x100;\n    while((~(*packet)[5] & 1) != 0)\n    {\n        if((timeout != 0xffffffff) && (timeout != 0) && ((status = get_elapsed_time(socket_fd)) - socket_fd) > timeout)\n        {\n            (*packet)[12] = (uint32_t *)0x0;\n            (*packet)[61] = 0x20;\n            (*packet)[62] = 0;\n            (*packet)[15] = 0;\n            result = 3;\n            goto exit;\n        }\n    }\n    \n    result = 0;\n    exit:\n    return result;\n}\n",
            "called": [
                "FUN_080015a0",
                "FUN_08002ad8",
                "FUN_08002bb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080027f4",
            "calling": [
                "FUN_08001f6c"
            ],
            "imported": false,
            "current_name": "send_packet_080027f4"
        },
        "FUN_080003d4": {
            "renaming": {
                "FUN_080003d4": "calculate_shifted_value_080003d4",
                "param_1": "input",
                "uVar1": "shifted_value_upper",
                "uVar2": "shift_distance",
                "iVar3": "leading_zeroes_count",
                "uVar4": "shift_amount",
                "in_r12": "unused_variable",
                "bVar5": "is_shift_distance_negative",
                "bVar6": "is_shift_distance_zero",
                "bVar7": "is_shift_amount_negative"
            },
            "code": "uint64_t calculate_shifted_value_080003d4(uint32_t input)\n{\n  if (input == 0) {\n    return 0;\n  }\n  uint32_t leading_zeroes_count = count_leading_zeroes(input);\n  uint32_t shift_amount = leading_zeroes_count + 0x15;\n  bool is_shift_amount_negative = shift_amount < 0x20;\n  uint32_t shifted_input = input << (shift_amount & 0xff);\n  uint32_t shift_distance = leading_zeroes_count - 0xb;\n  bool is_shift_distance_negative = (int)shift_distance < 0;\n  bool is_shift_distance_zero = shift_distance == 0;\n  if (is_shift_amount_negative) {\n    bool is_new_shift_amount_negative = shift_distance + 0xc < 0;\n    bool is_new_shift_amount_zero = shift_distance + 0xc == 0;\n    if (!is_shift_distance_zero && is_shift_distance_negative == is_new_shift_amount_negative) {\n      shifted_input = input << (shift_distance + 0xc & 0xff);\n      input = input >> (0xcU - leading_zeroes_count + 1 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_shift_distance_zero || is_shift_distance_negative != is_shift_amount_negative) {\n    uint32_t shift_distance_inverse = 0x20 - shift_distance;\n    shifted_input = input << (shift_distance & 0xff);\n    if (is_shift_distance_zero || is_shift_distance_negative != is_shift_amount_negative) {\n      shifted_input = shifted_input | 0U >> (shift_distance_inverse & 0xff);\n    }\n    if (is_shift_distance_zero || is_shift_distance_negative != is_shift_amount_negative) {\n      uint32_t zero_shifted_input = 0 << (shift_distance & 0xff);\n    }\n  }\nLAB_080002e0:\n  if (shift_amount < 0x433) {\n    return ((uint64_t)shifted_input + (0x432 - shift_amount) * 0x100000) << 32;\n  }\n  uint32_t shift_amount_inverse = ~(0x432 - shift_amount);\n  if (shift_amount_inverse > 0x1e) {\n    return (uint64_t)input >> (shift_amount_inverse - 0x1f & 0xff);\n  }\n  uint32_t new_shift_amount = shift_amount_inverse - 0x13;\n  bool is_new_shift_amount_zero = new_shift_amount == 0;\n  bool is_new_shift_amount_negative = new_shift_amount < 0;\n  if (is_new_shift_amount_zero || is_new_shift_amount_negative != SCARRY4(shift_amount_inverse - 0x1f, 0xc)) {\n    shift_amount_inverse = shift_amount_inverse + 1;\n    return ((uint64_t)input >> (shift_amount_inverse & 0xff)) | ((uint64_t)shifted_input << (0x20 - shift_amount_inverse & 0xff));\n  }\n  return (uint64_t)shifted_input >> (0x20 - (0xcU - new_shift_amount) & 0xff) | ((uint64_t)input << (0xcU - new_shift_amount & 0xff));\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003d4",
            "calling": [
                "FUN_080079e8"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_080003d4"
        },
        "FUN_08004d78": {
            "renaming": {
                "FUN_08004d78": "calculate_result_08004d78",
                "param_1": "input",
                "param_2": "output1",
                "param_3": "output2",
                "uVar1": "input1",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "result1",
                "uVar5": "result2",
                "FUNC_08000e20": "calculate_temp",
                "FUN_08000418": "thunk_FUN_08005838",
                "DAT_08004e68": "0",
                "FUNC_080004c8": "FUNC_080004c8",
                "FUNC_0800071c": "FUNC_0800071c",
                "DAT_08004e60": "0x3f800000",
                "DAT_08004e64": "0"
            },
            "code": "void calculate_result_08004d78(float *input, float *output1, float *output2)\n{\n    float input1 = input[DAT_DAT_08004e648DAT_08004e64DAT_08004e644e68];\n    float input2 = input[1];\n    float input3 = input[2];\n    \n    float temp1 = calculate_temp(input2);\n    float temp2 = calculate_temp(input3);\n    \n    float result1 = calculate_result_08004d781(input1, temp2);\n    float result2 = calculate_result_08004d782(input1, temp1);\n    \n    *output1 = result1;\n    *output2 = result2;\n}\n",
            "called": [
                "FUN_08000e20",
                "FUN_08000418",
                "thunk_FUN_08005838",
                "FUN_080009fc",
                "FUN_080004c8",
                "FUN_0800071c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d78",
            "calling": [
                "FUN_080049cc"
            ],
            "imported": false,
            "current_name": "calculate_result_08004d78"
        },
        "FUN_08000c10": {
            "renaming": {
                "FUN_08000c10": "calculate_hash_08000c10",
                "param_1": "input",
                "iVar1": "leading_zeroes_count",
                "uVar2": "shifted_value",
                "iVar4": "hash_value",
                "uVar5": "temp",
                "count_leading_zeroes": "count_leading_zeroes"
            },
            "code": "uint calculate_hash_08000c10(uint input)\n{\n  int leading_zeroes_count;\n  uint sign_bit;\n  uint hash_value;\n  uint shifted_value;\n  uint shifted_input;\n  \n  sign_bit = input & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeroes_count = count_leading_zeroes(input);\n  shifted_value = leading_zeroes_count - 8;\n  hash_value = ((sign_bit | 0x4b000000) - 0x800000) + shifted_value * -0x800000;\n  if (7 < leading_zeroes_count) {\n    shifted_input = input << (shifted_value & 0xff);\n    hash_value = hash_value + shifted_input + (0U >> (0x20 - shifted_value & 0xff)) + (uint)(0x7fffffff < (0 << (shifted_value & 0xff)));\n    if ((0 << (shifted_value & 0xff)) == 0x80000000) {\n      hash_value = hash_value & 0xfffffffe;\n    }\n    return hash_value;\n  }\n  shifted_input = input << (leading_zeroes_count + 0x18U & 0xff);\n  hash_value = hash_value + ((input >> (0x20 - (leading_zeroes_count + 0x18U) & 0xff)) - ((int)shifted_input >> 0x1f));\n  if ((shifted_input & 0x7fffffff) == 0) {\n    hash_value = hash_value & ~(shifted_input >> 0x1f);\n  }\n  return hash_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c10",
            "calling": [
                "FUN_08004ae0",
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "imported": false,
            "current_name": "calculate_hash_08000c10"
        },
        "FUN_0800491c": {
            "renaming": {
                "FUN_0800491c": "initialize_array_with_zeros_0800491c",
                "*param_1": "*array",
                "local_13": "buffer1",
                "local_12": "buffer2",
                "local_11": "buffer3"
            },
            "code": "void initialize_array_with_zeros_0800491c(int *array)\n{\n    int i;\n    for(i = 0; i < 11; i++)\n    {\n        array[i] = 0;\n    }\n    char buffer1 = 0;\n    char buffer2 = 0x10;\n    char buffer3[5] = {8};\n    (**(code **)PTR_DAT_080049c8)(0xd0,0x6b,&buffer1,1);\n    (**(code **)PTR_DAT_080049c8)(0xd0,0x1c,&buffer2,1);\n    (**(code **)PTR_DAT_080049c8)(0xd0,0x1b,buffer3,1);\n    FUN_080049cc(array);\n}\n",
            "called": [
                "FUN_080049cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800491c",
            "calling": [
                "FUN_08005224"
            ],
            "imported": false,
            "current_name": "initialize_array_with_zeros_0800491c"
        },
        "FUN_080078a0": {
            "renaming": {
                "FUN_080078a0": "print_if_dat_not_zero_080078a0",
                "DAT_080078ac": "data",
                "PTR_LAB_08008818_1_080078b0": "message_ptr",
                "FUN_080098c0": "print_message"
            },
            "code": "void print_if_dat_not_zero_080078a0(void)\n{\n  if (DAT_080078ac != 0) {\n    print_message(0, PTR_LAB_08008818_1_080078b0, 0);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_080098c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078a0",
            "calling": [
                "FUN_08005d20"
            ],
            "imported": false,
            "current_name": "print_if_dat_not_zero_080078a0"
        },
        "FUN_080057e8": {
            "renaming": {
                "FUN_080057e8": "copy_and_clear_memory_080057e8",
                "iVar1": "i",
                "puVar2": "destination_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table_ptr",
                "PTR_DAT_08005828": "source_ptr",
                "PTR_DAT_08005820": "destination_start_ptr",
                "PTR_DAT_08005824": "destination_end_ptr",
                "DAT_0800581c": "source_start_ptr",
                "FUN_08005780": "<no_change>",
                "FUN_08005d20": "<no_change>",
                "FUN_08005224": "<no_change>"
            },
            "code": "void copy_and_clear_memory_080057e8(void)\n{\n  int i;\n  undefined4 *destination_ptr;\n  undefined4 *PTR_DAT_08005828 = (undefined4 *)PTR_DAT_08005828;\n  code *jump_table_ptr;\n  for (i = 0; PTR_DAT_08005820 + i < PTR_DAT_08005824; i += 4) {\n    *(undefined4 *)(PTR_DAT_08005820 + i) = *(undefined4 *)(DAT_0800581c + i);\n  }\n  for (destination_ptr = PTR_DAT_08005828; destination_ptr < PTR_DAT_0800582c; destination_ptr++) {\n    *destination_ptr = 0;\n  }\n  FUN_08005780();\n  FUN_08005d20();\n  jump_table_ptr = (code *)0x800581a;\n  FUN_08005224();\n  (*jump_table_ptr)();\n  return;\n}",
            "called": [
                "FUN_08005224",
                "FUN_08005780",
                "FUN_08005d20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057e8",
            "calling": [],
            "imported": false,
            "current_name": "copy_and_clear_memory_080057e8"
        }
    },
    "used_tokens": 145821,
    "layers": [
        [
            "FUN_080036a8",
            "FUN_08005224",
            "FUN_08003440",
            "FUN_08004f2c",
            "FUN_08005348",
            "FUN_080046ec",
            "FUN_08005500",
            "FUN_08002c2e",
            "FUN_08003568",
            "FUN_080049cc",
            "FUN_08003c94",
            "FUN_08000978",
            "FUN_0800884c",
            "FUN_0800901c",
            "FUN_0800177c",
            "FUN_080017b4",
            "FUN_08005598",
            "FUN_08001030",
            "FUN_080011ec",
            "FUN_08004f3c",
            "FUN_08002640",
            "FUN_080008fc",
            "FUN_08000988",
            "FUN_08001714",
            "FUN_08005dfc",
            "FUN_080078c0",
            "thunk_FUN_08005838",
            "FUN_080003f4",
            "FUN_0800166c",
            "FUN_0800360c",
            "FUN_08005d68",
            "FUN_080017c4",
            "FUN_080035a4",
            "FUN_080041ea",
            "FUN_08004ae0",
            "FUN_08001044",
            "FUN_08009444",
            "FUN_080015fc",
            "FUN_08004436",
            "FUN_08000110",
            "FUN_08003504",
            "FUN_08004ee8",
            "FUN_080094f8",
            "FUN_08000998",
            "FUN_080009ac",
            "FUN_08000fc8",
            "FUN_0800438a",
            "FUN_080014f0",
            "FUN_08003908",
            "FUN_08004f60",
            "FUN_080009c0",
            "FUN_08001170",
            "FUN_08003f18",
            "FUN_080097cc",
            "FUN_08002ad8",
            "FUN_08000fd0",
            "FUN_08003d60",
            "FUN_08003518",
            "FUN_08001618",
            "FUN_080091a4",
            "FUN_08004f78",
            "FUN_080015a0",
            "FUN_0800172a",
            "FUN_080009d4",
            "FUN_08005780",
            "FUN_08009744",
            "FUN_08003640",
            "FUN_08009980",
            "FUN_08000134",
            "FUN_08005704",
            "FUN_08000418",
            "FUN_08002ca8",
            "FUN_08003a94",
            "FUN_0800416a",
            "FUN_080055f4",
            "FUN_080053b0",
            "FUN_0800088a",
            "FUN_080016d0",
            "FUN_08001ccc",
            "FUN_0800157c",
            "FUN_08005d14",
            "FUN_080015b4",
            "FUN_080036f8",
            "FUN_080041a8",
            "FUN_08008ad4",
            "FUN_080009e8",
            "FUN_08005674",
            "FUN_08009630",
            "FUN_08004104",
            "FUN_08000ff4",
            "FUN_08005714",
            "FUN_08005e40",
            "FUN_08005d20",
            "FUN_08001a80",
            "FUN_08005838",
            "FUN_080090a8",
            "FUN_08004e74",
            "FUN_080096e0",
            "FUN_0800910c",
            "FUN_080052a0",
            "FUN_08009120",
            "FUN_08001084",
            "FUN_08005680",
            "FUN_08003260",
            "FUN_08001ab0",
            "FUN_08003540",
            "FUN_08009244",
            "FUN_08004e6c",
            "FUN_08001762",
            "FUN_08009768",
            "FUN_08003ff8",
            "FUN_08004ea4",
            "FUN_080040a0",
            "FUN_08009a18",
            "FUN_0800119c",
            "FUN_08005728",
            "FUN_080090b4",
            "FUN_0800422e",
            "FUN_08003e38",
            "FUN_0800151c",
            "FUN_080006a4",
            "FUN_08000f68",
            "FUN_08009258",
            "FUN_08000c08",
            "FUN_080042de",
            "FUN_08009530",
            "FUN_08002bb4",
            "FUN_08002d3c",
            "FUN_08004bd8",
            "FUN_080090c0",
            "FUN_080091e4",
            "FUN_080009fc",
            "FUN_080093a4",
            "FUN_080098c0",
            "FUN_080027f4",
            "FUN_080003d4",
            "FUN_08004d78",
            "FUN_08000c10",
            "FUN_0800491c",
            "FUN_080078a0",
            "FUN_080057e8"
        ]
    ],
    "locked_functions": []
}