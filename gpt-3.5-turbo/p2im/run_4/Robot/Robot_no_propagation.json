{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeFlag_08000110(undefined4 inputValue)\n\n{\n  if ((char)DAT_200009c8 == '\\0') {\n    DAT_200009c8._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_08009e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_values_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenateValues_08000134(undefined4 value1,undefined4 value2)\n\n{\n  return CONCAT44(value2,value1);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_values_08000134",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08005d20"
            ],
            "called": [
                "FUN_08009e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000158": {
            "entrypoint": "0x08000158",
            "current_name": "calculate_arithmetic_08000158",
            "code": "\nulonglong calculate_arithmetic_08000158(uint num1,uint num2,uint num3,uint num4)\n\n{\n  int shift1;\n  byte bit;\n  uint carry1;\n  uint carry2;\n  uint carry3;\n  uint temp1;\n  uint temp2;\n  int shift2;\n  uint result1;\n  uint result2;\n  uint result3;\n  uint result4;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  temp1 = num4 ^ 0x80000000;\n  result1 = num2 << 1;\n  num4 = num4 << 1;\n  flag1 = ((num2 ^ temp1) & 0x7fffffff) == 0;\n  flag2 = flag1 && num1 == num3;\n  if (!flag1 || num1 != num3) {\n    flag2 = (result1 | num1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (num4 | num3) == 0;\n  }\n  shift2 = (int)result1 >> 0x15;\n  if (!flag2) {\n    flag2 = shift2 == -1;\n  }\n  shift1 = (int)num4 >> 0x15;\n  if (!flag2) {\n    flag2 = shift1 == -1;\n  }\n  if (flag2) {\n    if (shift2 == -1 || shift1 == -1) {\n      result1 = temp1;\n      result3 = num3;\n      if (shift2 == -1) {\n        result1 = num2;\n        result3 = num1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        num3 = result3;\n        temp1 = result1;\n      }\n      flag2 = (result3 | result1 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (num3 | temp1 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = result1 == temp1;\n      }\n      if (!flag2) {\n        result1 = result1 | 0x80000;\n      }\n      return CONCAT44(result1,result3);\n    }\n    if (((num2 ^ temp1) & 0x7fffffff) != 0 || num1 != num3) {\n      if ((result1 | num1) == 0) {\n        num1 = num3;\n        num2 = temp1;\n      }\n      return CONCAT44(num2,num1);\n    }\n    if (num2 != temp1) {\n      return 0;\n    }\n    if (result1 >> 0x15 == 0) {\n      flag2 = (num1 & 0x80000000) != 0;\n      temp1 = num2 * 2 + (uint)flag2;\n      if (CARRY4(num2,num2) || CARRY4(num2 * 2,(uint)flag2)) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return CONCAT44(temp1,num1 << 1);\n    }\n    if (result1 < 0xffc00000) {\n      return CONCAT44(num2 + 0x100000,num1);\n    }\n    num2 = num2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(num2 | 0x7ff00000) << 0x20;\n  }\n  result1 = result1 >> 0x15;\n  num4 = num4 >> 0x15;\n  result3 = num4 - result1;\n  flag2 = result3 != 0;\n  if (num4 < result1) {\n    result3 = -result3;\n  }\n  result2 = num1;\n  temp2 = num2;\n  if (flag2 && result1 <= num4) {\n    result1 = result1 + result3;\n    result2 = num3;\n    temp2 = temp1;\n    num3 = num1;\n    temp1 = num2;\n  }\n  if (0x36 < result3) {\n    return CONCAT44(temp2,result2);\n  }\n  carry2 = temp2 & 0xfffff | 0x100000;\n  if ((temp2 & 0x80000000) != 0) {\n    flag2 = result2 != 0;\n    result2 = -result2;\n    carry2 = -carry2 - (uint)flag2;\n  }\n  temp2 = temp1 & 0xfffff | 0x100000;\n  if ((temp1 & 0x80000000) != 0) {\n    flag2 = num3 != 0;\n    num3 = -num3;\n    temp2 = -temp2 - (uint)flag2;\n  }\n  if (result1 == result3) {\n    temp2 = temp2 ^ 0x100000;\n    if (result1 == 0) {\n      carry2 = carry2 ^ 0x100000;\n      result1 = 1;\n    }\n    else {\n      result3 = result3 - 1;\n    }\n  }\n  temp1 = -result3 + 0x20;\n  if ((int)result3 < 0x21) {\n    result4 = num3 << (temp1 & 0xff);\n    num3 = num3 >> (result3 & 0xff);\n    carry1 = result2 + num3;\n    carry3 = temp2 << (temp1 & 0xff);\n    temp1 = carry1 + carry3;\n    carry2 = carry2 + CARRY4(result2,num3) + ((int)temp2 >> (result3 & 0xff)) +\n            (uint)CARRY4(carry1,carry3);\n  }\n  else {\n    result4 = temp2 << (-result3 + 0x40 & 0xff);\n    if (num3 != 0) {\n      result4 = result4 | 2;\n    }\n    temp2 = (int)temp2 >> (result3 - 0x20 & 0xff);\n    temp1 = result2 + temp2;\n    carry2 = carry2 + ((int)temp2 >> 0x1f) + (uint)CARRY4(result2,temp2);\n  }\n  num2 = carry2 & 0x80000000;\n  result3 = carry2;\n  if ((int)carry2 < 0) {\n    flag2 = result4 == 0;\n    result4 = -result4;\n    result3 = -temp1;\n    temp1 = -(uint)!flag2 - temp1;\n    result3 = -(uint)(flag2 <= result3) - carry2;\n  }\n  if (0xfffff < result3) {\n    result2 = result1 - 1;\n    if (0x1fffff < result3) {\n      result2 = result3 & 1;\n      result3 = result3 >> 1;\n      bit = (byte)temp1;\n      temp1 = (uint)(result2 != 0) << 0x1f | temp1 >> 1;\n      result4 = (uint)(bit & 1) << 0x1f | result4 >> 1;\n      result2 = result1;\n      if (0xffbfffff < result1 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    flag2 = 0x7fffffff < result4;\n    if (result4 == 0x80000000) {\n      flag2 = (temp1 & 1) != 0;\n    }\n    return CONCAT44(result3 + result2 * 0x100000 + (uint)CARRY4(temp1,(uint)flag2) | num2,\n                    temp1 + flag2);\n  }\n  flag1 = (result4 & 0x80000000) != 0;\n  result4 = result4 << 1;\n  result2 = temp1 * 2;\n  flag2 = CARRY4(temp1,temp1);\n  temp1 = temp1 * 2 + (uint)flag1;\n  result3 = result3 * 2 + (uint)(flag2 || CARRY4(result2,(uint)flag1));\n  result2 = result1 - 2;\n  if ((result3 & 0x100000) != 0) goto LAB_08000268;\n  temp2 = temp1;\n  result1 = result3;\n  if (result3 == 0) {\n    temp2 = 0;\n    result1 = temp1;\n  }\n  shift2 = LZCOUNT(result1);\n  if (result3 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  result3 = shift2 - 0xb;\n  flag3 = SBORROW4(result3,0x20);\n  temp1 = shift2 - 0x2b;\n  flag2 = (int)temp1 < 0;\n  flag1 = temp1 == 0;\n  if ((int)result3 < 0x20) {\n    flag3 = SCARRY4(temp1,0xc);\n    shift2 = shift2 + -0x1f;\n    flag2 = shift2 < 0;\n    flag1 = shift2 == 0;\n    temp1 = result3;\n    if (!flag1 && flag2 == flag3) {\n      temp2 = result1 << (result3 & 0xff);\n      result1 = result1 >> (0xcU - shift2 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    result4 = 0x20 - temp1;\n  }\n  result1 = result1 << (temp1 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    result1 = result1 | temp2 >> (result4 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    temp2 = temp2 << (temp1 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)result3 <= (int)result2) {\n    return CONCAT44(result1 + (result2 - result3) * 0x100000 | num2,temp2);\n  }\n  temp1 = ~(result2 - result3);\n  if ((int)temp1 < 0x1f) {\n    shift2 = temp1 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(temp1 - 0x1f,0xc)) {\n      return CONCAT44(carry2,temp2 >> (0x20 - (0xcU - shift2) & 0xff) | result1 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp1 = temp1 + 1;\n    return CONCAT44(num2 | result1 >> (temp1 & 0xff),\n                    temp2 >> (temp1 & 0xff) | result1 << (0x20 - temp1 & 0xff));\n  }\n  return CONCAT44(carry2,result1 >> (temp1 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000158": "calculate_arithmetic_08000158",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "uVar3": "carry1",
                "uVar4": "carry2",
                "uVar5": "carry3",
                "uVar6": "temp1",
                "uVar7": "temp2",
                "iVar1": "shift1",
                "iVar8": "shift2",
                "uVar9": "result1",
                "uVar10": "result2",
                "uVar11": "result3",
                "uVar12": "result4",
                "bVar2": "bit",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "flag3"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800015c": {
            "entrypoint": "0x0800015c",
            "current_name": "decimal_overflow_check_0800015c",
            "code": "\nulonglong decimalOverflowCheck_0800015c(uint decimal1,uint decimal2,uint decimal3,uint decimal4)\n\n{\n  int shiftValue1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shiftValue2;\n  uint shiftedDecimal2;\n  uint shiftedDecimal4;\n  uint overflow;\n  uint temp4;\n  uint temp5;\n  uint result1;\n  bool isEqual;\n  bool isZero;\n  bool isNegative;\n  \n  shiftedDecimal2 = decimal2 << 1;\n  overflow = decimal4 << 1;\n  isEqual = ((decimal2 ^ decimal4) & 0x7fffffff) == 0;\n  isZero = isEqual && decimal1 == decimal3;\n  if (!isEqual || decimal1 != decimal3) {\n    isZero = (shiftedDecimal2 | decimal1) == 0;\n  }\n  if (!isZero) {\n    isZero = (overflow | decimal3) == 0;\n  }\n  shiftValue2 = (int)shiftedDecimal2 >> 0x15;\n  if (!isZero) {\n    isZero = shiftValue2 == -1;\n  }\n  shiftValue1 = (int)overflow >> 0x15;\n  if (!isZero) {\n    isZero = shiftValue1 == -1;\n  }\n  if (isZero) {\n    if (shiftValue2 == -1 || shiftValue1 == -1) {\n      overflow = decimal4;\n      shiftedDecimal2 = decimal3;\n      if (shiftValue2 == -1) {\n        overflow = decimal2;\n        shiftedDecimal2 = decimal1;\n      }\n      if (shiftValue2 != -1 || shiftValue1 != -1) {\n        decimal3 = shiftedDecimal2;\n        decimal4 = overflow;\n      }\n      isZero = (shiftedDecimal2 | overflow << 0xc) == 0;\n      if (isZero) {\n        isZero = (decimal3 | decimal4 << 0xc) == 0;\n      }\n      if (isZero) {\n        isZero = overflow == decimal4;\n      }\n      if (!isZero) {\n        overflow = overflow | 0x80000;\n      }\n      return CONCAT44(overflow,shiftedDecimal2);\n    }\n    if (((decimal2 ^ decimal4) & 0x7fffffff) != 0 || decimal1 != decimal3) {\n      if ((shiftedDecimal2 | decimal1) == 0) {\n        decimal1 = decimal3;\n        decimal2 = decimal4;\n      }\n      return CONCAT44(decimal2,decimal1);\n    }\n    if (decimal2 != decimal4) {\n      return 0;\n    }\n    if (shiftedDecimal2 >> 0x15 == 0) {\n      isZero = (decimal1 & 0x80000000) != 0;\n      overflow = decimal2 * 2 + (uint)isZero;\n      if (CARRY4(decimal2,decimal2) || CARRY4(decimal2 * 2,(uint)isZero)) {\n        overflow = overflow | 0x80000000;\n      }\n      return CONCAT44(overflow,decimal1 << 1);\n    }\n    if (shiftedDecimal2 < 0xffc00000) {\n      return CONCAT44(decimal2 + 0x100000,decimal1);\n    }\n    decimal2 = decimal2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(decimal2 | 0x7ff00000) << 0x20;\n  }\n  shiftedDecimal2 = shiftedDecimal2 >> 0x15;\n  overflow = overflow >> 0x15;\n  temp4 = overflow - shiftedDecimal2;\n  isZero = temp4 != 0;\n  if (overflow < shiftedDecimal2) {\n    temp4 = -temp4;\n  }\n  shiftedDecimal4 = decimal1;\n  temp3 = decimal2;\n  if (isZero && shiftedDecimal2 <= overflow) {\n    shiftedDecimal2 = shiftedDecimal2 + temp4;\n    shiftedDecimal4 = decimal3;\n    temp3 = decimal4;\n    decimal3 = decimal1;\n    decimal4 = decimal2;\n  }\n  if (0x36 < temp4) {\n    return CONCAT44(temp3,shiftedDecimal4);\n  }\n  overflow = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    isZero = shiftedDecimal4 != 0;\n    shiftedDecimal4 = -shiftedDecimal4;\n    overflow = -overflow - (uint)isZero;\n  }\n  temp3 = decimal4 & 0xfffff | 0x100000;\n  if ((decimal4 & 0x80000000) != 0) {\n    isZero = decimal3 != 0;\n    decimal3 = -decimal3;\n    temp3 = -temp3 - (uint)isZero;\n  }\n  if (shiftedDecimal2 == temp4) {\n    temp3 = temp3 ^ 0x100000;\n    if (shiftedDecimal2 == 0) {\n      overflow = overflow ^ 0x100000;\n      shiftedDecimal2 = 1;\n    }\n    else {\n      temp4 = temp4 - 1;\n    }\n  }\n  result1 = -temp4 + 0x20;\n  if ((int)temp4 < 0x21) {\n    temp5 = decimal3 << (result1 & 0xff);\n    decimal3 = decimal3 >> (temp4 & 0xff);\n    temp1 = shiftedDecimal4 + decimal3;\n    temp2 = temp3 << (result1 & 0xff);\n    result1 = temp1 + temp2;\n    overflow = overflow + CARRY4(shiftedDecimal4,decimal3) + ((int)temp3 >> (temp4 & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    temp5 = temp3 << (-temp4 + 0x40 & 0xff);\n    if (decimal3 != 0) {\n      temp5 = temp5 | 2;\n    }\n    temp3 = (int)temp3 >> (temp4 - 0x20 & 0xff);\n    result1 = shiftedDecimal4 + temp3;\n    overflow = overflow + ((int)temp3 >> 0x1f) + (uint)CARRY4(shiftedDecimal4,temp3);\n  }\n  decimal2 = overflow & 0x80000000;\n  temp4 = overflow;\n  if ((int)overflow < 0) {\n    isZero = temp5 == 0;\n    temp5 = -temp5;\n    temp4 = -result1;\n    result1 = -(uint)!isZero - result1;\n    temp4 = -(uint)(isZero <= temp4) - overflow;\n  }\n  if (0xfffff < temp4) {\n    shiftedDecimal4 = shiftedDecimal2 - 1;\n    if (0x1fffff < temp4) {\n      overflow = temp4 & 1;\n      temp4 = temp4 >> 1;\n      carry = (byte)result1;\n      result1 = (uint)(overflow != 0) << 0x1f | result1 >> 1;\n      temp5 = (uint)(carry & 1) << 0x1f | temp5 >> 1;\n      shiftedDecimal4 = shiftedDecimal2;\n      if (0xffbfffff < shiftedDecimal2 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    isZero = 0x7fffffff < temp5;\n    if (temp5 == 0x80000000) {\n      isZero = (result1 & 1) != 0;\n    }\n    return CONCAT44(temp4 + shiftedDecimal4 * 0x100000 + (uint)CARRY4(result1,(uint)isZero) | decimal2,\n                    result1 + isZero);\n  }\n  isEqual = (temp5 & 0x80000000) != 0;\n  temp5 = temp5 << 1;\n  shiftedDecimal4 = result1 * 2;\n  isZero = CARRY4(result1,result1);\n  result1 = result1 * 2 + (uint)isEqual;\n  temp4 = temp4 * 2 + (uint)(isZero || CARRY4(shiftedDecimal4,(uint)isEqual));\n  shiftedDecimal4 = shiftedDecimal2 - 2;\n  if ((temp4 & 0x100000) != 0) goto LAB_08000268;\n  temp3 = result1;\n  shiftedDecimal2 = temp4;\n  if (temp4 == 0) {\n    temp3 = 0;\n    shiftedDecimal2 = result1;\n  }\n  shiftValue2 = LZCOUNT(shiftedDecimal2);\n  if (temp4 == 0) {\n    shiftValue2 = shiftValue2 + 0x20;\n  }\n  result1 = shiftValue2 - 0xb;\n  isNegative = SBORROW4(result1,0x20);\n  temp4 = shiftValue2 - 0x2b;\n  isZero = (int)temp4 < 0;\n  isEqual = temp4 == 0;\n  if ((int)result1 < 0x20) {\n    isNegative = SCARRY4(temp4,0xc);\n    shiftValue2 = shiftValue2 + -0x1f;\n    isZero = shiftValue2 < 0;\n    isEqual = shiftValue2 == 0;\n    temp4 = result1;\n    if (!isEqual && isZero == isNegative) {\n      temp3 = shiftedDecimal2 << (result1 & 0xff);\n      shiftedDecimal2 = shiftedDecimal2 >> (0xcU - shiftValue2 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (isEqual || isZero != isNegative) {\n    temp5 = 0x20 - temp4;\n  }\n  shiftedDecimal2 = shiftedDecimal2 << (temp4 & 0xff);\n  if (isEqual || isZero != isNegative) {\n    shiftedDecimal2 = shiftedDecimal2 | temp3 >> (temp5 & 0xff);\n  }\n  if (isEqual || isZero != isNegative) {\n    temp3 = temp3 << (temp4 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)result1 <= (int)shiftedDecimal4) {\n    return CONCAT44(shiftedDecimal2 + (shiftedDecimal4 - result1) * 0x100000 | decimal2,temp3);\n  }\n  temp4 = ~(shiftedDecimal4 - result1);\n  if ((int)temp4 < 0x1f) {\n    shiftValue2 = temp4 - 0x13;\n    if (shiftValue2 != 0 && shiftValue2 < 0 == SCARRY4(temp4 - 0x1f,0xc)) {\n      return CONCAT44(overflow,temp3 >> (0x20 - (0xcU - shiftValue2) & 0xff) | shiftedDecimal2 << (0xcU - shiftValue2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp4 = temp4 + 1;\n    return CONCAT44(decimal2 | shiftedDecimal2 >> (temp4 & 0xff),\n                    temp3 >> (temp4 & 0xff) | shiftedDecimal2 << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(overflow,shiftedDecimal2 >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800015c": "decimal_overflow_check_0800015c",
                "param_1": "decimal1",
                "param_2": "decimal2",
                "param_3": "decimal3",
                "param_4": "decimal4",
                "iVar1": "shiftValue1",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "shiftValue2",
                "uVar7": "shiftedDecimal2",
                "uVar8": "shiftedDecimal4",
                "uVar9": "overflow",
                "uVar10": "temp4",
                "uVar11": "temp5",
                "uVar12": "result1",
                "bVar13": "isEqual",
                "bVar14": "isZero",
                "bVar15": "isNegative"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003d4": {
            "entrypoint": "0x080003d4",
            "current_name": "shift_bits_080003d4",
            "code": "\nulonglong shiftBits_080003d4(uint input)\n\n{\n  uint shiftedValue;\n  uint shiftAmount;\n  int count;\n  uint adjustedCount;\n  uint remainingBits;\n  bool isNegativeShift;\n  bool isZeroShift;\n  bool isSubtractionBorrow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  shiftedValue = 0;\n  count = LZCOUNT(input);\n  adjustedCount = count + 0x15;\n  isSubtractionBorrow = SBORROW4(adjustedCount,0x20);\n  shiftAmount = count - 0xb;\n  isNegativeShift = (int)shiftAmount < 0;\n  isZeroShift = shiftAmount == 0;\n  if (adjustedCount < 0x20) {\n    isSubtractionBorrow = SCARRY4(shiftAmount,0xc);\n    isNegativeShift = false;\n    isZeroShift = count + 1 == 0;\n    shiftAmount = adjustedCount;\n    if (!isZeroShift && isSubtractionBorrow == false) {\n      shiftedValue = input << adjustedCount;\n      input = input >> (0xcU - (count + 1) & 0xff);\n      goto endLabel;\n    }\n  }\n  if (isZeroShift || isNegativeShift != isSubtractionBorrow) {\n    remainingBits = 0x20 - shiftAmount;\n  }\n  input = input << (shiftAmount & 0xff);\n  if (isZeroShift || isNegativeShift != isSubtractionBorrow) {\n    input = input | 0U >> (remainingBits & 0xff);\n  }\n  if (isZeroShift || isNegativeShift != isSubtractionBorrow) {\n    shiftedValue = 0 << (shiftAmount & 0xff);\n  }\nendLabel:\n  if (adjustedCount < 0x433) {\n    return CONCAT44(input + (0x432 - adjustedCount) * 0x100000,shiftedValue);\n  }\n  shiftAmount = ~(0x432 - adjustedCount);\n  if (0x1e < (int)shiftAmount) {\n    return (ulonglong)(input >> (shiftAmount - 0x1f & 0xff));\n  }\n  count = shiftAmount - 0x13;\n  if (count == 0 || count < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(input >> (shiftAmount & 0xff),\n                    shiftedValue >> (shiftAmount & 0xff) | input << (0x20 - shiftAmount & 0xff));\n  }\n  return (ulonglong)(shiftedValue >> (0x20 - (0xcU - count) & 0xff) | input << (0xcU - count & 0xff));\n}\n\n",
            "renaming": {
                "FUN_080003d4": "shift_bits_080003d4",
                "param_1": "input",
                "uVar1": "shiftedValue",
                "uVar2": "shiftAmount",
                "iVar3": "count",
                "uVar4": "adjustedCount",
                "in_r12": "remainingBits",
                "bVar5": "isNegativeShift",
                "bVar6": "isZeroShift",
                "bVar7": "isSubtractionBorrow",
                "LAB_080002e0": "endLabel"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003f4": {
            "entrypoint": "0x080003f4",
            "current_name": "bitwise_shift_080003f4",
            "code": "\nulonglong bitwise_shift_080003f4(uint input)\n\n{\n  uint shifted_bits;\n  uint abs_input;\n  uint shift_amount;\n  int leading_zeros;\n  uint shifted_result;\n  uint sign_bit;\n  uint shift_mask;\n  bool is_negative;\n  bool is_zero;\n  bool carry_flag;\n  \n  if (input == 0) {\n    return 0;\n  }\n  sign_bit = input & 0x80000000;\n  abs_input = input;\n  if ((int)sign_bit < 0) {\n    abs_input = -input;\n  }\n  shifted_bits = 0;\n  leading_zeros = LZCOUNT(abs_input);\n  shifted_result = leading_zeros + 0x15;\n  carry_flag = SBORROW4(shifted_result,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (shifted_result < 0x20) {\n    carry_flag = SCARRY4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = shifted_result;\n    if (!is_zero && carry_flag == false) {\n      shifted_bits = abs_input << shifted_result;\n      abs_input = abs_input >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_zero || is_negative != carry_flag) {\n    shift_mask = 0x20 - shift_amount;\n  }\n  abs_input = abs_input << (shift_amount & 0xff);\n  if (is_zero || is_negative != carry_flag) {\n    abs_input = abs_input | 0U >> (shift_mask & 0xff);\n  }\n  if (is_zero || is_negative != carry_flag) {\n    shifted_bits = 0 << (shift_amount & 0xff);\n  }\nLAB_080002e0:\n  if (shifted_result < 0x433) {\n    return CONCAT44(abs_input + (0x432 - shifted_result) * 0x100000 | sign_bit,shifted_bits);\n  }\n  shift_amount = ~(0x432 - shifted_result);\n  if (0x1e < (int)shift_amount) {\n    return CONCAT44(input,abs_input >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(sign_bit | abs_input >> (shift_amount & 0xff),\n                    shifted_bits >> (shift_amount & 0xff) | abs_input << (0x20 - shift_amount & 0xff));\n  }\n  return CONCAT44(input,shifted_bits >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_input << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080003f4": "bitwise_shift_080003f4",
                "param_1": "input",
                "uVar1": "shifted_bits",
                "uVar2": "abs_input",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeros",
                "uVar5": "shifted_result",
                "uVar6": "sign_bit",
                "in_r12": "shift_mask",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "carry_flag"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000418": {
            "entrypoint": "0x08000418",
            "current_name": "reverse_bits_08000418",
            "code": "\nulonglong reverseBits_08000418(uint input,undefined4 param1,undefined4 param2,uint param3)\n\n{\n  uint bit31;\n  uint high;\n  uint concat;\n  uint shift;\n  uint temp;\n  int bitCount;\n  uint shifted;\n  uint shiftAmount;\n  bool isNegative;\n  bool isZero;\n  bool isPositive;\n  \n  temp = input << 1;\n  isZero = temp == 0;\n  bit31 = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shift = (uint)((int)temp >> 3) >> 1;\n  concat = bit31 | shift;\n  input = input << 0x1d;\n  if (!isZero) {\n    param3 = temp & 0xff000000;\n    isZero = param3 == 0;\n  }\n  if (!isZero) {\n    isZero = param3 == 0xff000000;\n  }\n  if (!isZero) {\n    return CONCAT44(concat,input) ^ 0x3800000000000000;\n  }\n  if ((temp & 0xffffff) == 0) {\n    return CONCAT44(concat,input);\n  }\n  if (param3 == 0xff000000) {\n    return CONCAT44(concat,input) | 0x8000000000000;\n  }\n  high = input;\n  temp = shift;\n  if (shift == 0) {\n    high = 0;\n    temp = input;\n  }\n  bitCount = LZCOUNT(temp);\n  if (shift == 0) {\n    bitCount = bitCount + 0x20;\n  }\n  shifted = bitCount - 0xb;\n  isPositive = SBORROW4(shifted,0x20);\n  shift = bitCount - 0x2b;\n  isZero = (int)shift < 0;\n  isNegative = shift == 0;\n  if ((int)shifted < 0x20) {\n    isPositive = SCARRY4(shift,0xc);\n    bitCount = bitCount + -0x1f;\n    isZero = bitCount < 0;\n    isNegative = bitCount == 0;\n    shift = shifted;\n    if (!isNegative && isZero == isPositive) {\n      high = temp << (shifted & 0xff);\n      temp = temp >> (0xcU - bitCount & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (isNegative || isZero != isPositive) {\n    shiftAmount = 0x20 - shift;\n  }\n  temp = temp << (shift & 0xff);\n  if (isNegative || isZero != isPositive) {\n    temp = temp | high >> (shiftAmount & 0xff);\n  }\n  if (isNegative || isZero != isPositive) {\n    high = high << (shift & 0xff);\n  }\nLAB_080002e0:\n  if ((int)shifted < 0x381) {\n    return CONCAT44(temp + (0x380 - shifted) * 0x100000 | bit31,high);\n  }\n  shift = ~(0x380 - shifted);\n  if (0x1e < (int)shift) {\n    return CONCAT44(concat,temp >> (shift - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  bitCount = shift - 0x13;\n  if (bitCount == 0 || bitCount < 0 != SCARRY4(shift - 0x1f,0xc)) {\n    shift = shift + 1;\n    return CONCAT44(bit31 | temp >> (shift & 0xff),\n                    high >> (shift & 0xff) | temp << (0x20 - shift & 0xff));\n  }\n  return CONCAT44(concat,high >> (0x20 - (0xcU - bitCount) & 0xff) | temp << (0xcU - bitCount & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000418": "reverse_bits_08000418",
                "param_1": "input",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uVar1": "bit31",
                "uVar2": "high",
                "uVar3": "concat",
                "uVar4": "shift",
                "uVar5": "temp",
                "iVar6": "bitCount",
                "uVar7": "shifted",
                "in_r12": "shiftAmount",
                "bVar8": "isNegative",
                "bVar9": "isZero",
                "bVar10": "isPositive"
            },
            "calling": [
                "FUN_08004d78",
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004c8": {
            "entrypoint": "0x080004c8",
            "current_name": "calculate_result_080004c8",
            "code": "\nulonglong calculateResult_080004c8(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result;\n  longlong temp;\n  uint temp2;\n  uint temp3;\n  int temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong combinedInput;\n  \n  combinedInput = CONCAT44(input2,input1);\n  temp7 = 0x7ff;\n  temp3 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp3 == 0;\n  if (!flag1) {\n    temp6 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp6 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp3 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp6 == 0x7ff;\n  }\n  if (flag1) {\n    combinedInput = FUN_080006a4();\n  }\n  temp2 = (uint)(combinedInput >> 0x20);\n  temp4 = temp3 + temp6;\n  temp3 = temp2 ^ input4;\n  temp2 = temp2 & ~(temp7 << 0x15);\n  input4 = input4 & ~(temp7 << 0x15);\n  flag1 = ((uint)combinedInput | temp2 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (input3 | input4 << 0xc) == 0;\n  }\n  temp2 = temp2 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (flag1) {\n    input3 = (uint)combinedInput | input3;\n    input4 = (temp3 & 0x80000000 | temp2) ^ input4;\n    temp3 = temp7 >> 1;\n    flag3 = SBORROW4(temp4,temp3);\n    temp5 = temp4 - temp3;\n    flag1 = temp5 == 0;\n    temp2 = temp5;\n    if (!flag1 && (int)temp3 <= temp4) {\n      flag3 = SBORROW4(temp7,temp5);\n      temp2 = temp7 - temp5;\n      flag1 = temp7 == temp5;\n    }\n    if (!flag1 && (int)temp2 < 0 == flag3) {\n      input4 = input4 | temp5 * 0x100000;\n    }\n    if (!flag1 && (int)temp2 < 0 == flag3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    temp7 = 0;\n    flag3 = SBORROW4(temp5,1);\n    temp5 = temp5 - 1;\n    flag1 = temp5 == 0;\n    temp3 = temp5;\n  }\n  else {\n    result = (combinedInput & 0xffffffff) * (ulonglong)input3;\n    combinedInput = (combinedInput & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)temp2 * (ulonglong)input3 + (result >> 0x20);\n    temp8 = (uint)combinedInput;\n    temp = (ulonglong)temp2 * (ulonglong)input4 + (combinedInput >> 0x20);\n    temp7 = (uint)temp;\n    temp2 = (uint)((ulonglong)temp >> 0x20);\n    if ((int)result != 0) {\n      temp8 = temp8 | 1;\n    }\n    temp5 = (temp4 + -0x3ff) - (uint)(temp2 < 0x200);\n    if (temp2 < 0x200) {\n      flag1 = (temp8 & 0x80000000) != 0;\n      temp8 = temp8 << 1;\n      temp = CONCAT44(temp2 * 2 + (uint)(CARRY4(temp7,temp7) || CARRY4(temp7 * 2,(uint)flag1)),\n                       temp7 * 2 + (uint)flag1);\n    }\n    input4 = temp3 & 0x80000000 | (int)((ulonglong)temp >> 0x20) << 0xb | (uint)temp >> 0x15;\n    input3 = (uint)temp << 0xb | temp8 >> 0x15;\n    temp7 = temp8 * 0x800;\n    flag2 = 0xfc < temp5;\n    flag3 = SBORROW4(temp5,0xfd);\n    temp2 = temp5 - 0xfd;\n    flag1 = temp2 == 0;\n    temp3 = temp2;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp2;\n      flag3 = SBORROW4(temp2,0x700);\n      temp3 = temp5 - 0x7fd;\n      flag1 = temp2 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp7;\n      if (temp7 == 0x80000000) {\n        flag1 = (temp8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + temp5 * 0x100000 + (uint)CARRY4(input3,(uint)flag1),input3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp5,0x36);\n  flag1 = (int)(temp5 + 0x36) < 0;\n  flag3 = temp5 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    input3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(input4,input3);\n  }\n  temp3 = -temp5;\n  temp2 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp5 = input3 >> (temp2 & 0xff) | input4 << (0x20 - temp2 & 0xff);\n    temp3 = (input4 >> (temp2 & 0xff) & ~((input4 & 0x80000000) >> (temp2 & 0xff))) -\n            ((int)temp5 >> 0x1f);\n    if ((temp7 | input3 << (0x20 - temp2 & 0xff) | temp5 << 1) == 0) {\n      temp3 = temp3 & ~(temp5 >> 0x1f);\n    }\n    return CONCAT44(input4,temp3) & 0x80000000ffffffff;\n  }\n  temp4 = temp3 - 0x14;\n  if (temp4 == 0 || temp4 < 0 != SCARRY4(temp2,0xc)) {\n    temp8 = input3 << (temp5 + 0x20 & 0xff);\n    temp2 = input3 >> (temp3 & 0xff) | input4 << (temp5 + 0x20 & 0xff);\n    temp5 = temp2 + -((int)temp8 >> 0x1f);\n    if ((temp7 | temp8 << 1) == 0) {\n      temp5 = temp5 & ~(temp8 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (temp3 & 0xff)) +\n                    (uint)CARRY4(temp2,-((int)temp8 >> 0x1f)),temp5);\n  }\n  temp3 = 0xc - temp4;\n  temp5 = input3 << (temp3 & 0xff);\n  temp3 = input3 >> (0x20 - temp3 & 0xff) | input4 << (temp3 & 0xff);\n  temp2 = temp3 + -((int)temp5 >> 0x1f);\n  if ((temp7 | temp5 << 1) == 0) {\n    temp2 = temp2 & ~(temp5 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(temp3,-((int)temp5 >> 0x1f)),temp2);\n}\n\n",
            "renaming": {
                "FUN_080004c8": "calculate_result_080004c8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result",
                "lVar2": "temp",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "iVar5": "temp4",
                "uVar6": "temp5",
                "unaff_r5": "temp6",
                "uVar7": "temp7",
                "uVar8": "temp8",
                "bVar9": "flag1",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "uVar12": "combinedInput"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_08004d78",
                "FUN_080059f0",
                "FUN_080096e0",
                "FUN_08004bd8"
            ],
            "called": [
                "FUN_080006a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006a4": {
            "entrypoint": "0x080006a4",
            "current_name": "compute_result_080006a4",
            "code": "\nulonglong compute_result_080006a4(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint bit_1;\n  uint bit_2;\n  uint bit_3;\n  uint bit_4;\n  uint bit_5;\n  bool is_zero;\n  \n  bit_3 = bit_5 & input_4 >> 0x14;\n  if (bit_2 != bit_5 && bit_3 != bit_5) {\n    is_zero = (input_1 | input_2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_3 | input_4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (bit_2 == 0) {\n      bit_4 = input_2 & 0x80000000;\n      do {\n        bit_1 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(bit_1 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | bit_4;\n      if (bit_3 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      bit_3 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(bit_3 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  is_zero = (input_1 | input_2 << 1) == 0;\n  if (is_zero) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!is_zero) {\n    is_zero = (input_3 | input_4 << 1) == 0;\n  }\n  bit_4 = input_2;\n  if (((!is_zero) && ((bit_2 != bit_5 || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((bit_3 != bit_5 || (input_1 = input_3, bit_4 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit_4,input_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006a4": "compute_result_080006a4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "bit_1",
                "unaff_r4": "bit_2",
                "uVar2": "bit_3",
                "uVar3": "bit_4",
                "in_r12": "bit_5",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_080004c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800071c": {
            "entrypoint": "0x0800071c",
            "current_name": "calculate_floating_point_0800071c",
            "code": "\nulonglong calculateFloatingPoint_0800071c(undefined4 signBit,uint exponentBits,uint mantissaBits1,uint mantissaBits2)\n\n{\n  uint exponentBits1;\n  uint exponentBits2;\n  uint exponentBits3;\n  uint exponentBits4;\n  uint mantissaBits3;\n  uint mantissaBits4;\n  uint isZero;\n  int exponentDifference;\n  uint normalizedExponent1;\n  uint normalizedExponent2;\n  uint normalizedExponent3;\n  uint mantissa1;\n  uint mantissaDifference;\n  uint mantissa2;\n  bool isSpecialCase;\n  bool carryFlag;\n  bool overflowFlag;\n  undefined8 convertedResult;\n  \n  convertedResult = CONCAT44(exponentBits,signBit);\n  mantissa2 = 0x7ff;\n  isZero = exponentBits >> 0x14 & 0x7ff;\n  isSpecialCase = isZero == 0;\n  if (!isSpecialCase) {\n    normalizedExponent2 = mantissaBits2 >> 0x14 & 0x7ff;\n    isSpecialCase = normalizedExponent2 == 0;\n  }\n  if (!isSpecialCase) {\n    isSpecialCase = isZero == 0x7ff;\n  }\n  if (!isSpecialCase) {\n    isSpecialCase = normalizedExponent2 == 0x7ff;\n  }\n  if (isSpecialCase) {\n    convertedResult = FUN_0800088a();\n  }\n  normalizedExponent1 = (uint)((ulonglong)convertedResult >> 0x20);\n  mantissa1 = (uint)convertedResult;\n  exponentDifference = isZero - normalizedExponent2;\n  if ((mantissaBits1 | mantissaBits2 << 0xc) == 0) {\n    isZero = (normalizedExponent1 ^ mantissaBits2) & 0x80000000 | normalizedExponent1 & 0xfffff;\n    overflowFlag = SCARRY4(exponentDifference,mantissa2 >> 1);\n    normalizedExponent1 = exponentDifference + (mantissa2 >> 1);\n    isSpecialCase = (int)normalizedExponent1 < 0;\n    carryFlag = normalizedExponent1 == 0;\n    if (!carryFlag && isSpecialCase == overflowFlag) {\n      overflowFlag = SBORROW4(mantissa2,normalizedExponent1);\n      isSpecialCase = (int)(mantissa2 - normalizedExponent1) < 0;\n      carryFlag = mantissa2 == normalizedExponent1;\n    }\n    if (!carryFlag && isSpecialCase == overflowFlag) {\n      isZero = isZero | normalizedExponent1 * 0x100000;\n    }\n    if (!carryFlag && isSpecialCase == overflowFlag) {\n      return CONCAT44(isZero,mantissa1);\n    }\n    isZero = isZero | 0x100000;\n    mantissa2 = 0;\n    carryFlag = SBORROW4(normalizedExponent1,1);\n    normalizedExponent1 = normalizedExponent1 - 1;\n    isSpecialCase = normalizedExponent1 == 0;\n    exponentBits3 = normalizedExponent1;\n  }\n  else {\n    exponentBits3 = (mantissaBits2 << 0xc) >> 4 | 0x10000000 | mantissaBits1 >> 0x18;\n    mantissa2 = mantissaBits1 << 8;\n    normalizedExponent3 = (normalizedExponent1 << 0xc) >> 4 | 0x10000000 | mantissa1 >> 0x18;\n    mantissa1 = mantissa1 * 0x100;\n    isZero = (normalizedExponent1 ^ mantissaBits2) & 0x80000000;\n    isSpecialCase = exponentBits3 <= normalizedExponent3;\n    if (normalizedExponent3 == exponentBits3) {\n      isSpecialCase = mantissa2 <= mantissa1;\n    }\n    exponentDifference = exponentDifference + (uint)isSpecialCase;\n    normalizedExponent1 = exponentDifference + 0x3fd;\n    if (isSpecialCase == false) {\n      exponentBits3 = exponentBits3 >> 1;\n      mantissa2 = (uint)((mantissaBits1 >> 0x18 & 1) != 0) << 0x1f | mantissa2 >> 1;\n    }\n    mantissaDifference = mantissa1 - mantissa2;\n    normalizedExponent3 = (normalizedExponent3 - exponentBits3) - (uint)(mantissa1 < mantissa2);\n    exponentBits4 = exponentBits3 >> 1;\n    exponentBits1 = (uint)((exponentBits3 & 1) != 0) << 0x1f | mantissa2 >> 1;\n    mantissa1 = 0x100000;\n    exponentBits3 = 0x80000;\n    while( true ) {\n      isSpecialCase = exponentBits1 <= mantissaDifference;\n      if (exponentBits4 < normalizedExponent3 || normalizedExponent3 - exponentBits4 < (uint)isSpecialCase) {\n        mantissaDifference = mantissaDifference - exponentBits1;\n        mantissa1 = mantissa1 | exponentBits3;\n        normalizedExponent3 = (normalizedExponent3 - exponentBits4) - (uint)!isSpecialCase;\n      }\n      mantissaBits3 = exponentBits4 >> 1;\n      exponentBits1 = (uint)((exponentBits4 & 1) != 0) << 0x1f | exponentBits1 >> 1;\n      carryFlag = exponentBits1 <= mantissaDifference;\n      isSpecialCase = normalizedExponent3 - mantissaBits3 < (uint)carryFlag;\n      mantissa2 = normalizedExponent3;\n      if (mantissaBits3 < normalizedExponent3 || isSpecialCase) {\n        mantissaDifference = mantissaDifference - exponentBits1;\n        mantissa2 = (normalizedExponent3 - mantissaBits3) - (uint)!carryFlag;\n      }\n      if (mantissaBits3 < normalizedExponent3 || isSpecialCase) {\n        mantissa1 = mantissa1 | exponentBits3 >> 1;\n      }\n      normalizedExponent3 = exponentBits4 >> 2;\n      exponentBits2 = (uint)((mantissaBits3 & 1) != 0) << 0x1f | exponentBits1 >> 1;\n      carryFlag = exponentBits2 <= mantissaDifference;\n      isSpecialCase = mantissa2 - normalizedExponent3 < (uint)carryFlag;\n      mantissaBits3 = mantissa2;\n      if (normalizedExponent3 < mantissa2 || isSpecialCase) {\n        mantissaDifference = mantissaDifference - exponentBits2;\n        mantissaBits3 = (mantissa2 - normalizedExponent3) - (uint)!carryFlag;\n      }\n      if (normalizedExponent3 < mantissa2 || isSpecialCase) {\n        mantissa1 = mantissa1 | exponentBits3 >> 2;\n      }\n      mantissaBits4 = exponentBits4 >> 3;\n      exponentBits1 = (uint)((normalizedExponent3 & 1) != 0) << 0x1f | exponentBits2 >> 1;\n      carryFlag = exponentBits1 <= mantissaDifference;\n      isSpecialCase = mantissaBits3 - mantissaBits4 < (uint)carryFlag;\n      normalizedExponent3 = mantissaBits3;\n      if (mantissaBits4 < mantissaBits3 || isSpecialCase) {\n        mantissaDifference = mantissaDifference - exponentBits1;\n        normalizedExponent3 = (mantissaBits3 - mantissaBits4) - (uint)!carryFlag;\n      }\n      if (mantissaBits4 < mantissaBits3 || isSpecialCase) {\n        mantissa1 = mantissa1 | exponentBits3 >> 3;\n      }\n      mantissa2 = normalizedExponent3 | mantissaDifference;\n      if (mantissa2 == 0) break;\n      normalizedExponent3 = normalizedExponent3 << 4 | mantissaDifference >> 0x1c;\n      mantissaDifference = mantissaDifference << 4;\n      exponentBits4 = exponentBits4 & 0xfffffff8 | exponentBits1 >> 0x1d;\n      exponentBits1 = (exponentBits2 >> 1) << 3;\n      exponentBits3 = exponentBits3 >> 4;\n      if (exponentBits3 == 0) {\n        mantissaBits4 = exponentBits4;\n        if ((isZero & 0x100000) != 0) goto LAB_0800083a;\n        isZero = isZero | mantissa1;\n        mantissa1 = 0;\n        exponentBits3 = 0x80000000;\n      }\n    }\n    if ((isZero & 0x100000) == 0) {\n      isZero = isZero | mantissa1;\n      mantissa1 = 0;\n    }\nLAB_0800083a:\n    overflowFlag = 0xfc < normalizedExponent1;\n    carryFlag = SBORROW4(normalizedExponent1,0xfd);\n    exponentBits4 = exponentDifference + 0x300;\n    isSpecialCase = exponentBits4 == 0;\n    exponentBits3 = exponentBits4;\n    if (overflowFlag && !isSpecialCase) {\n      overflowFlag = 0x6ff < exponentBits4;\n      carryFlag = SBORROW4(exponentBits4,0x700);\n      exponentBits3 = exponentDifference - 0x400;\n      isSpecialCase = exponentBits4 == 0x700;\n    }\n    if (!overflowFlag || isSpecialCase) {\n      isSpecialCase = mantissaBits4 <= normalizedExponent3;\n      if (normalizedExponent3 == mantissaBits4) {\n        isSpecialCase = exponentBits1 <= mantissaDifference;\n      }\n      if (normalizedExponent3 == mantissaBits4 && mantissaDifference == exponentBits1) {\n        isSpecialCase = (mantissa1 & 1) != 0;\n      }\n      return CONCAT44(isZero + normalizedExponent1 * 0x100000 + (uint)CARRY4(mantissa1,(uint)isSpecialCase),mantissa1 + isSpecialCase);\n    }\n  }\n  if (!isSpecialCase && (int)exponentBits3 < 0 == carryFlag) {\n    return (ulonglong)(isZero & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  overflowFlag = SCARRY4(normalizedExponent1,0x36);\n  isSpecialCase = (int)(normalizedExponent1 + 0x36) < 0;\n  carryFlag = normalizedExponent1 == 0xffffffca;\n  if (carryFlag || isSpecialCase != overflowFlag) {\n    mantissa1 = 0;\n  }\n  if (carryFlag || isSpecialCase != overflowFlag) {\n    isZero = isZero & 0x80000000;\n  }\n  if (carryFlag || isSpecialCase != overflowFlag) {\n    return CONCAT44(isZero,mantissa1);\n  }\n  exponentBits3 = -normalizedExponent1;\n  normalizedExponent3 = exponentBits3 - 0x20;\n  if (0x1f < (int)exponentBits3) {\n    exponentBits3 = mantissa1 >> (normalizedExponent3 & 0xff) | isZero << (0x20 - normalizedExponent3 & 0xff);\n    normalizedExponent1 = (isZero >> (normalizedExponent3 & 0xff) & ~((isZero & 0x80000000) >> (normalizedExponent3 & 0xff))) -\n            ((int)exponentBits3 >> 0x1f);\n    if ((mantissa2 | mantissa1 << (0x20 - normalizedExponent3 & 0xff) | exponentBits3 << 1) == 0) {\n      normalizedExponent1 = normalizedExponent1 & ~(exponentBits3 >> 0x1f);\n    }\n    return CONCAT44(isZero,normalizedExponent1) & 0x80000000ffffffff;\n  }\n  exponentDifference = exponentBits3 - 0x14;\n  if (exponentDifference != 0 && exponentDifference < 0 == SCARRY4(normalizedExponent3,0xc)) {\n    normalizedExponent1 = 0xc - exponentDifference;\n    exponentBits3 = mantissa1 << (normalizedExponent1 & 0xff);\n    mantissa1 = mantissa1 >> (0x20 - normalizedExponent1 & 0xff) | isZero << (normalizedExponent1 & 0xff);\n    normalizedExponent1 = mantissa1 + -((int)exponentBits3 >> 0x1f);\n    if ((mantissa2 | exponentBits3 << 1) == 0) {\n      normalizedExponent1 = normalizedExponent1 & ~(exponentBits3 >> 0x1f);\n    }\n    return CONCAT44((isZero & 0x80000000) + (uint)CARRY4(mantissa1,-((int)exponentBits3 >> 0x1f)),normalizedExponent1);\n  }\n  normalizedExponent3 = mantissa1 << (normalizedExponent1 + 0x20 & 0xff);\n  mantissa1 = mantissa1 >> (exponentBits3 & 0xff) | isZero << (normalizedExponent1 + 0x20 & 0xff);\n  normalizedExponent1 = mantissa1 + -((int)normalizedExponent3 >> 0x1f);\n  if ((mantissa2 | normalizedExponent3 << 1) == 0) {\n    normalizedExponent1 = normalizedExponent1 & ~(normalizedExponent3 >> 0x1f);\n  }\n  return CONCAT44((isZero & 0x80000000) +\n                  ((isZero & 0x7fffffff) >> (exponentBits3 & 0xff)) +\n                  (uint)CARRY4(mantissa1,-((int)normalizedExponent3 >> 0x1f)),normalizedExponent1);\n}\n\n",
            "renaming": {
                "FUN_0800071c": "calculate_floating_point_0800071c",
                "param_1": "signBit",
                "param_2": "exponentBits",
                "param_3": "mantissaBits1",
                "param_4": "mantissaBits2",
                "uVar1": "exponentBits1",
                "uVar2": "exponentBits2",
                "uVar3": "exponentBits3",
                "uVar4": "exponentBits4",
                "uVar5": "mantissaBits3",
                "uVar6": "mantissaBits4",
                "uVar7": "isZero",
                "iVar8": "exponentDifference",
                "uVar9": "normalizedExponent1",
                "unaff_r5": "normalizedExponent2",
                "uVar10": "normalizedExponent3",
                "uVar11": "mantissa1",
                "uVar12": "mantissaDifference",
                "uVar13": "mantissa2",
                "bVar14": "isSpecialCase",
                "bVar15": "carryFlag",
                "bVar16": "overflowFlag",
                "uVar17": "convertedResult"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_08004d78",
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8"
            ],
            "called": [
                "FUN_0800088a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800088a": {
            "entrypoint": "0x0800088a",
            "current_name": "extract_bit_range_0800088a",
            "code": "\nulonglong extractBitRange_0800088a(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  uint bit5;\n  bool isZero;\n  \n  bit3 = bit5 & input4 >> 0x14;\n  bit4 = input2;\n  if (bit2 != bit5 || bit3 != bit5) {\n    if (bit2 == bit5) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, bit4 = input4, bit3 != bit5)\n         ) {\nLAB_080006fc:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit3 == bit5) {\n      input1 = input3;\n      bit4 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006c0:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (input1 | input2 << 1) == 0;\n      if (!isZero) {\n        isZero = (input3 | input4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (bit2 == 0) {\n          bit4 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | bit4;\n          if (bit3 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          bit4 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(bit4 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_080006fc;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006c0;\n    }\n  }\n  return CONCAT44(bit4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800088a": "extract_bit_range_0800088a",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "in_r12": "bit5",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_0800071c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008fc": {
            "entrypoint": "0x080008fc",
            "current_name": "check_equality_080008fc",
            "code": "\nuint check_equality_080008fc(uint value_1,uint value_2,uint value_3,uint value_4)\n\n{\n  uint result;\n  bool is_zero;\n  bool condition_met;\n  \n  if (((int)(value_2 << 1) >> 0x15 == -1 || (int)(value_4 << 1) >> 0x15 == -1) &&\n     ((((int)(value_2 << 1) >> 0x15 == -1 && ((value_1 | value_2 << 0xc) != 0)) ||\n      (((int)(value_4 << 1) >> 0x15 == -1 && ((value_3 | value_4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  is_zero = (value_1 | value_2 << 1) == 0;\n  if (is_zero) {\n    is_zero = (value_3 | value_4 << 1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = value_2 == value_4;\n  }\n  if (is_zero) {\n    is_zero = value_1 == value_3;\n  }\n  if (!is_zero) {\n    result = value_2 ^ value_4;\n    is_zero = result == 0;\n    if (-1 < (int)result) {\n      is_zero = value_2 == value_4;\n    }\n    condition_met = -1 < (int)result && value_4 <= value_2;\n    if (is_zero) {\n      condition_met = value_3 <= value_1;\n    }\n    value_4 = (int)value_4 >> 0x1f;\n    if (!condition_met) {\n      value_4 = ~value_4;\n    }\n    return value_4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080008fc": "check_equality_080008fc",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "value_3",
                "param_4": "value_4",
                "uVar1": "result",
                "bVar2": "is_zero",
                "bVar3": "condition_met"
            },
            "calling": [
                "FUN_08000988"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000978": {
            "entrypoint": "0x08000978",
            "current_name": "execute_function_08000978",
            "code": "\nvoid execute_function_08000978(undefined4 argument1,undefined4 argument2,undefined4 argument3,undefined4 argument4)\n\n{\n  FUN_08000988(argument3,argument4,argument1,argument2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000978": "execute_function_08000978",
                "param_1": "argument1",
                "param_2": "argument2",
                "param_3": "argument3",
                "param_4": "argument4"
            },
            "calling": [
                "FUN_080009d4",
                "FUN_080009e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000988": {
            "entrypoint": "0x08000988",
            "current_name": "execute_initialization_08000988",
            "code": "\nundefined4 execute_initialization_08000988(undefined4 input_data)\n\n{\n  FUN_080008fc();\n  return input_data;\n}\n\n",
            "renaming": {
                "FUN_08000988": "execute_initialization_08000988",
                "param_1": "input_data"
            },
            "calling": [
                "FUN_080009ac",
                "FUN_08000998",
                "FUN_08000978",
                "FUN_080009c0"
            ],
            "called": [
                "FUN_080008fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "check_if_nonzero_08000998",
            "code": "\nbool check_if_nonzero_08000998(void)\n\n{\n  char result;\n  \n  FUN_08000988();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000998": "check_if_nonzero_08000998",
                "in_ZR": "result"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009ac": {
            "entrypoint": "0x080009ac",
            "current_name": "is_cy_null_080009ac",
            "code": "\nbool isCYNull_080009ac(void)\n\n{\n  char currentChar;\n  \n  FUN_08000988();\n  return currentChar == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009ac": "is_cy_null_080009ac",
                "in_CY": "currentChar"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c0": {
            "entrypoint": "0x080009c0",
            "current_name": "check_for_zero_values_080009c0",
            "code": "\nbool check_for_zero_values_080009c0(void)\n\n{\n  undefined is_zero_returned;\n  undefined is_carry_set;\n  \n  FUN_08000988();\n  return !(bool)is_carry_set || (bool)is_zero_returned;\n}\n\n",
            "renaming": {
                "FUN_080009c0": "check_for_zero_values_080009c0",
                "in_ZR": "is_zero_returned",
                "in_CY": "is_carry_set"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009d4": {
            "entrypoint": "0x080009d4",
            "current_name": "check_flags_080009d4",
            "code": "\nbool check_flags_080009d4(void)\n\n{\n  undefined zero_result;\n  undefined carry;\n  \n  FUN_08000978();\n  return !(bool)carry || (bool)zero_result;\n}\n\n",
            "renaming": {
                "FUN_080009d4": "check_flags_080009d4",
                "in_ZR": "zero_result",
                "in_CY": "carry"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009e8": {
            "entrypoint": "0x080009e8",
            "current_name": "check_null_terminated_string_080009e8",
            "code": "\nbool check_null_terminated_string_080009e8(void)\n\n{\n  char input_character;\n  \n  FUN_08000978();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009e8": "check_null_terminated_string_080009e8",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_080059f0"
            ],
            "called": [
                "FUN_08000978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009fc": {
            "entrypoint": "0x080009fc",
            "current_name": "calculate_normalized_float_080009fc",
            "code": "\nuint calculateNormalizedFloat_080009fc(uint value,uint shift)\n\n{\n  uint result;\n  uint multipliedShift;\n  uint normalizedShift;\n  uint temp;\n  bool isZero;\n  bool isNegative;\n  \n  multipliedShift = shift * 2;\n  isNegative = multipliedShift < 0x70000000;\n  normalizedShift = multipliedShift + 0x90000000;\n  result = normalizedShift;\n  if (!isNegative) {\n    temp = multipliedShift + 0x8fe00000;\n    result = temp;\n  }\n  isZero = result == 0;\n  if (!isNegative && normalizedShift >= 0x200000) {\n    isZero = temp == 0x1fc00000;\n  }\n  if (((isNegative || normalizedShift < 0x200000) || 0x1fc00000 < temp) || isZero) {\n    if ((shift & 0x40000000) != 0) {\n      if (((int)multipliedShift >> 0x15 == -1) && ((value | shift << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return shift & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(multipliedShift + 0x92e00000) < 0 != SCARRY4(normalizedShift,0x2e00000)) {\n      return shift & 0x80000000;\n    }\n    multipliedShift = 0x18 - (multipliedShift + 0x92e00000 >> 0x15);\n    result = value >> (multipliedShift & 0xff);\n    if (value << (0x20 - multipliedShift & 0xff) != 0) {\n      result = result | 1;\n    }\n    normalizedShift = shift & 0x1fffff | 0x100000;\n    value = result | normalizedShift << (0x20 - multipliedShift & 0xff);\n    normalizedShift = (normalizedShift >> (multipliedShift & 0xff)) << 1;\n  }\n  result = (shift & 0x80000000 | value >> 0x1d) + normalizedShift * 4 + (uint)(0x7fffffff < value * 8);\n  if (value * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080009fc": "calculate_normalized_float_080009fc",
                "param_1": "value",
                "param_2": "shift",
                "uVar1": "result",
                "uVar2": "multipliedShift",
                "uVar3": "normalizedShift",
                "in_r12": "temp",
                "bVar4": "isZero",
                "bVar5": "isNegative"
            },
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa4": {
            "entrypoint": "0x08000aa4",
            "current_name": "calculate_float_08000aa4",
            "code": "\nuint calculate_float_08000aa4(uint input_1,uint input_2,undefined4 constant_1,uint constant_2)\n\n{\n  int shift;\n  int shift_2;\n  uint temp_1;\n  uint temp_2;\n  uint result;\n  uint count;\n  uint diff;\n  bool is_equal;\n  \n  temp_1 = input_2 ^ 0x80000000;\n  result = input_1 << 1;\n  is_equal = result == 0;\n  if (!is_equal) {\n    constant_2 = input_2 << 1;\n    is_equal = constant_2 == 0;\n  }\n  if (!is_equal) {\n    is_equal = result == constant_2;\n  }\n  shift = (int)result >> 0x18;\n  if (!is_equal) {\n    is_equal = shift == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)constant_2 >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shift_2 = (int)(input_2 << 1) >> 0x18;\n    if (shift == -1 || shift_2 == -1) {\n      result = temp_1;\n      if (shift == -1) {\n        result = input_1;\n      }\n      if (shift != -1 || shift_2 != -1) {\n        temp_1 = result;\n      }\n      is_equal = (result & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (temp_1 & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = result == temp_1;\n      }\n      if (!is_equal) {\n        result = result | 0x400000;\n      }\n      return result;\n    }\n    if (((input_1 ^ temp_1) & 0x7fffffff) != 0) {\n      if (result == 0) {\n        input_1 = temp_1;\n      }\n      return input_1;\n    }\n    if (input_1 != temp_1) {\n      return 0;\n    }\n    if ((result & 0xff000000) == 0) {\n      temp_1 = input_1 << 1;\n      if ((input_1 & 0x80000000) != 0) {\n        temp_1 = temp_1 | 0x80000000;\n      }\n      return temp_1;\n    }\n    if (result < 0xfe000000) {\n      return input_1 + 0x800000;\n    }\n    input_1 = input_1 & 0x80000000;\nLAB_08000bde:\n    return input_1 | 0x7f800000;\n  }\n  result = result >> 0x18;\n  constant_2 = constant_2 >> 0x18;\n  diff = constant_2 - result;\n  is_equal = diff != 0;\n  count = result;\n  if (is_equal && result <= constant_2) {\n    count = result + diff;\n  }\n  if (is_equal && result <= constant_2) {\n    temp_1 = temp_1 ^ input_1;\n  }\n  if (is_equal && result <= constant_2) {\n    input_1 = input_1 ^ temp_1;\n  }\n  if (is_equal && result <= constant_2) {\n    temp_1 = temp_1 ^ input_1;\n  }\n  if (constant_2 < result) {\n    diff = -diff;\n  }\n  if (0x19 < diff) {\n    return input_1;\n  }\n  result = input_1 & 0xffffff | 0x800000;\n  if ((input_1 & 0x80000000) != 0) {\n    result = -result;\n  }\n  temp_2 = temp_1 & 0xffffff | 0x800000;\n  if ((temp_1 & 0x80000000) != 0) {\n    temp_2 = -temp_2;\n  }\n  if (count == diff) {\n    temp_2 = temp_2 ^ 0x800000;\n    if (count == 0) {\n      result = result ^ 0x800000;\n      count = 1;\n    }\n    else {\n      diff = diff - 1;\n    }\n  }\n  result = result + ((int)temp_2 >> (diff & 0xff));\n  temp_2 = temp_2 << (0x20 - diff & 0xff);\n  input_1 = result & 0x80000000;\n  if ((int)result < 0) {\n    is_equal = temp_2 != 0;\n    temp_2 = -temp_2;\n    result = -result - (uint)is_equal;\n  }\n  if (result < 0x800000) {\n    temp_1 = temp_2 & 0x80000000;\n    temp_2 = temp_2 << 1;\n    result = result * 2 + (uint)(temp_1 != 0);\n    temp_1 = count - 2;\n    if ((result & 0x800000) == 0) {\n      diff = LZCOUNT(result) - 8;\n      result = result << (diff & 0xff);\n      if ((int)temp_1 < (int)diff) {\n        result = result >> (-(temp_1 - diff) & 0xff);\n      }\n      else {\n        result = result + (temp_1 - diff) * 0x800000;\n      }\n      return result | input_1;\n    }\n  }\n  else {\n    temp_1 = count - 1;\n    if (0xffffff < result) {\n      temp_1 = result & 1;\n      result = result >> 1;\n      temp_2 = (uint)(temp_1 != 0) << 0x1f | temp_2 >> 1;\n      temp_1 = count;\n      if (0xfd < count) goto LAB_08000bde;\n    }\n  }\n  result = result + temp_1 * 0x800000 + (uint)(0x7fffffff < temp_2);\n  if (temp_2 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result | input_1;\n}\n\n",
            "renaming": {
                "FUN_08000aa4": "calculate_float_08000aa4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "constant_1",
                "param_4": "constant_2",
                "iVar1": "shift",
                "iVar2": "shift_2",
                "uVar3": "temp_1",
                "uVar4": "temp_2",
                "uVar5": "result",
                "uVar6": "count",
                "uVar7": "diff",
                "bVar8": "is_equal"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "entrypoint": "0x08000aa8",
            "current_name": "calculate_floating_point_08000aa8",
            "code": "\nuint calculateFloatingPoint_08000aa8(uint number1,uint number2,undefined4 param3,uint param4)\n\n{\n  int shiftAmount;\n  int shiftedValue;\n  uint mantissaSign;\n  uint number1Shifted;\n  uint difference;\n  uint absDifference;\n  bool isEqual;\n  \n  number1Shifted = number1 << 1;\n  isEqual = number1Shifted == 0;\n  if (!isEqual) {\n    param4 = number2 << 1;\n    isEqual = param4 == 0;\n  }\n  if (!isEqual) {\n    isEqual = number1Shifted == param4;\n  }\n  shiftAmount = (int)number1Shifted >> 0x18;\n  if (!isEqual) {\n    isEqual = shiftAmount == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)param4 >> 0x18 == -1;\n  }\n  if (isEqual) {\n    shiftedValue = (int)(number2 << 1) >> 0x18;\n    if (shiftAmount == -1 || shiftedValue == -1) {\n      number1Shifted = number2;\n      if (shiftAmount == -1) {\n        number1Shifted = number1;\n      }\n      if (shiftAmount != -1 || shiftedValue != -1) {\n        number2 = number1Shifted;\n      }\n      isEqual = (number1Shifted & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (number2 & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = number1Shifted == number2;\n      }\n      if (!isEqual) {\n        number1Shifted = number1Shifted | 0x400000;\n      }\n      return number1Shifted;\n    }\n    if (((number1 ^ number2) & 0x7fffffff) != 0) {\n      if (number1Shifted == 0) {\n        number1 = number2;\n      }\n      return number1;\n    }\n    if (number1 != number2) {\n      return 0;\n    }\n    if ((number1Shifted & 0xff000000) == 0) {\n      number1Shifted = number1 << 1;\n      if ((number1 & 0x80000000) != 0) {\n        number1Shifted = number1Shifted | 0x80000000;\n      }\n      return number1Shifted;\n    }\n    if (number1Shifted < 0xfe000000) {\n      return number1 + 0x800000;\n    }\n    number1 = number1 & 0x80000000;\nLAB_08000bde:\n    return number1 | 0x7f800000;\n  }\n  number1Shifted = number1Shifted >> 0x18;\n  param4 = param4 >> 0x18;\n  absDifference = param4 - number1Shifted;\n  isEqual = absDifference != 0;\n  difference = number1Shifted;\n  if (isEqual && number1Shifted <= param4) {\n    difference = number1Shifted + absDifference;\n  }\n  if (isEqual && number1Shifted <= param4) {\n    number2 = number2 ^ number1;\n  }\n  if (isEqual && number1Shifted <= param4) {\n    number1 = number1 ^ number2;\n  }\n  if (isEqual && number1Shifted <= param4) {\n    number2 = number2 ^ number1;\n  }\n  if (param4 < number1Shifted) {\n    absDifference = -absDifference;\n  }\n  if (0x19 < absDifference) {\n    return number1;\n  }\n  number1Shifted = number1 & 0xffffff | 0x800000;\n  if ((number1 & 0x80000000) != 0) {\n    number1Shifted = -number1Shifted;\n  }\n  mantissaSign = number2 & 0xffffff | 0x800000;\n  if ((number2 & 0x80000000) != 0) {\n    mantissaSign = -mantissaSign;\n  }\n  if (difference == absDifference) {\n    mantissaSign = mantissaSign ^ 0x800000;\n    if (difference == 0) {\n      number1Shifted = number1Shifted ^ 0x800000;\n      difference = 1;\n    }\n    else {\n      absDifference = absDifference - 1;\n    }\n  }\n  number1Shifted = number1Shifted + ((int)mantissaSign >> (absDifference & 0xff));\n  mantissaSign = mantissaSign << (0x20 - absDifference & 0xff);\n  number1 = number1Shifted & 0x80000000;\n  if ((int)number1Shifted < 0) {\n    isEqual = mantissaSign != 0;\n    mantissaSign = -mantissaSign;\n    number1Shifted = -number1Shifted - (uint)isEqual;\n  }\n  if (number1Shifted < 0x800000) {\n    absDifference = mantissaSign & 0x80000000;\n    mantissaSign = mantissaSign << 1;\n    number1Shifted = number1Shifted * 2 + (uint)(absDifference != 0);\n    absDifference = difference - 2;\n    if ((number1Shifted & 0x800000) == 0) {\n      difference = LZCOUNT(number1Shifted) - 8;\n      number1Shifted = number1Shifted << (difference & 0xff);\n      if ((int)absDifference < (int)difference) {\n        number1Shifted = number1Shifted >> (-(absDifference - difference) & 0xff);\n      }\n      else {\n        number1Shifted = number1Shifted + (absDifference - difference) * 0x800000;\n      }\n      return number1Shifted | number1;\n    }\n  }\n  else {\n    absDifference = difference - 1;\n    if (0xffffff < number1Shifted) {\n      absDifference = number1Shifted & 1;\n      number1Shifted = number1Shifted >> 1;\n      mantissaSign = (uint)(absDifference != 0) << 0x1f | mantissaSign >> 1;\n      absDifference = difference;\n      if (0xfd < difference) goto LAB_08000bde;\n    }\n  }\n  number1Shifted = number1Shifted + absDifference * 0x800000 + (uint)(0x7fffffff < mantissaSign);\n  if (mantissaSign == 0x80000000) {\n    number1Shifted = number1Shifted & 0xfffffffe;\n  }\n  return number1Shifted | number1;\n}\n\n",
            "renaming": {
                "FUN_08000aa8": "calculate_floating_point_08000aa8",
                "param_1": "number1",
                "param_2": "number2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "shiftAmount",
                "iVar2": "shiftedValue",
                "uVar3": "mantissaSign",
                "uVar4": "number1Shifted",
                "uVar5": "difference",
                "uVar6": "absDifference",
                "bVar7": "isEqual"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c08": {
            "entrypoint": "0x08000c08",
            "current_name": "calculate_hash_08000c08",
            "code": "\nuint calculateHash_08000c08(uint inputValue)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  int offset;\n  uint tempValue;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputValue);\n  shiftAmount = leadingZeros - 8;\n  offset = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    tempValue = 0 << (shiftAmount & 0xff);\n    leadingZeros = offset + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < tempValue);\n    if (tempValue == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftAmount = inputValue << leadingZeros + 0x18;\n  leadingZeros = offset + ((inputValue >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_08000c08": "calculate_hash_08000c08",
                "param_1": "inputValue",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "iVar3": "offset",
                "uVar4": "tempValue"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c10": {
            "entrypoint": "0x08000c10",
            "current_name": "calculate_result_08000c10",
            "code": "\nuint calculate_result_08000c10(uint input_value)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  uint sign_extension;\n  int intermediate_value;\n  \n  sign_extension = input_value & 0x80000000;\n  if ((int)sign_extension < 0) {\n    input_value = -input_value;\n  }\n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeros = LZCOUNT(input_value);\n  shift_amount = leading_zeros - 8;\n  intermediate_value = ((sign_extension | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_amount & 0xff);\n    sign_extension = intermediate_value + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_extension = sign_extension & 0xfffffffe;\n    }\n    return sign_extension;\n  }\n  shift_amount = input_value << leading_zeros + 0x18;\n  sign_extension = intermediate_value + ((input_value >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_extension = sign_extension & ~(shift_amount >> 0x1f);\n  }\n  return sign_extension;\n}\n\n",
            "renaming": {
                "FUN_08000c10": "calculate_result_08000c10",
                "param_1": "input_value",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "sign_extension",
                "iVar4": "intermediate_value"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004ae0",
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cb8": {
            "entrypoint": "0x08000cb8",
            "current_name": "calculate_floating_point_value_08000cb8",
            "code": "\nuint calculateFloatingPointValue_08000cb8(uint input1,uint input2,undefined4 temp1,uint temp2)\n\n{\n  longlong product;\n  uint result;\n  uint shift1;\n  int sum;\n  int difference;\n  uint lower;\n  int shift2;\n  uint sign;\n  bool condition1;\n  bool condition2;\n  \n  shift1 = input1 >> 0x17 & 0xff;\n  condition1 = shift1 == 0;\n  if (!condition1) {\n    temp2 = input2 >> 0x17 & 0xff;\n    condition1 = temp2 == 0;\n  }\n  if (!condition1) {\n    condition1 = shift1 == 0xff;\n  }\n  if (!condition1) {\n    condition1 = temp2 == 0xff;\n  }\n  if (condition1) {\n    temp2 = input2 >> 0x17 & 0xff;\n    if (shift1 == 0xff || temp2 == 0xff) {\n      condition1 = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        condition1 = input2 == 0;\n        result = input1;\n      }\n      if (!condition1) {\n        condition1 = input2 == 0x80000000;\n      }\n      sign = result;\n      if (((condition1) || ((shift1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((temp2 == 0xff && (sign = input2, (input2 & 0x7fffff) != 0)))) {\n        return sign | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_08000e08;\n    }\n    condition1 = (input1 & 0x7fffffff) == 0;\n    if (!condition1) {\n      condition1 = (input2 & 0x7fffffff) == 0;\n    }\n    if (condition1) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    condition1 = shift1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (condition1) {\n        input1 = input1 << 1;\n        condition1 = (input1 & 0x800000) == 0;\n      }\n      if (!condition1) break;\n      shift1 = shift1 - 1;\n    }\n    input1 = input1 | result;\n    condition1 = temp2 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (condition1) {\n        input2 = input2 << 1;\n        condition1 = (input2 & 0x800000) == 0;\n      }\n      if (!condition1) break;\n      temp2 = temp2 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = shift1 + temp2;\n  sign = input1 ^ input2;\n  shift1 = input1 << 9;\n  condition1 = shift1 == 0;\n  if (!condition1) {\n    input2 = input2 << 9;\n    condition1 = input2 == 0;\n  }\n  if (condition1) {\n    if (shift1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = sign & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    condition2 = SBORROW4(sum,0x7f);\n    difference = sum + -0x7f;\n    condition1 = difference == 0;\n    shift2 = difference;\n    if (!condition1 && 0x7e < sum) {\n      condition2 = SBORROW4(0xff,difference);\n      shift2 = 0xff - difference;\n      condition1 = difference == 0xff;\n    }\n    if (!condition1 && shift2 < 0 == condition2) {\n      result = result | difference * 0x800000;\n    }\n    if (!condition1 && shift2 < 0 == condition2) {\n      return result;\n    }\n    result = result | 0x800000;\n    lower = 0;\n    condition2 = SBORROW4(difference,1);\n    sign = sum - 0x80;\n    condition1 = sign == 0;\n    shift1 = sign;\n  }\n  else {\n    product = (ulonglong)(shift1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    lower = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    condition1 = result < 0x800000;\n    if (condition1) {\n      result = result << 1;\n    }\n    if (condition1) {\n      result = result | lower >> 0x1f;\n      lower = lower << 1;\n    }\n    result = sign & 0x80000000 | result;\n    sign = (sum + -0x7f) - (uint)condition1;\n    condition2 = SBORROW4(sign,0xfd);\n    condition1 = sign == 0xfd;\n    shift1 = sign - 0xfd;\n    if (sign < 0xfe) {\n      result = result + sign * 0x800000 + (uint)(0x7fffffff < lower);\n      if (lower == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (condition1 || (int)shift1 < 0 != condition2) {\n    condition1 = (int)(sign + 0x19) < 0;\n    if (sign == 0xffffffe7 || condition1 != SCARRY4(sign,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (sign != 0xffffffe7 && condition1 == SCARRY4(sign,0x19)) {\n      shift1 = (result << 1) >> (-sign & 0xff);\n      sign = result << (sign + 0x20 & 0xff);\n      shift1 = ((uint)((result & 0x80000000) != 0) << 0x1f | shift1 >> 1) + (uint)((byte)shift1 & 1);\n      if ((lower | sign << 1) == 0) {\n        shift1 = shift1 & ~(sign >> 0x1f);\n      }\n      return shift1;\n    }\n    return result;\n  }\nLAB_08000e08:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cb8": "calculate_floating_point_value_08000cb8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "temp1",
                "param_4": "temp2",
                "lVar1": "product",
                "uVar2": "result",
                "uVar3": "shift1",
                "iVar4": "sum",
                "iVar5": "difference",
                "uVar6": "lower",
                "iVar7": "shift2",
                "uVar8": "sign",
                "bVar9": "condition1",
                "bVar10": "condition2"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e20": {
            "entrypoint": "0x08000e20",
            "current_name": "calculate_floating_point_number_08000e20",
            "code": "\nuint calculateFloatingPointNumber_08000e20(uint number1,uint number2,undefined4 value1,uint value2)\n\n{\n  uint quotient;\n  uint shiftedNumber1;\n  int difference;\n  uint shiftedNumber2;\n  int sum;\n  uint result;\n  bool condition1;\n  bool condition2;\n  bool check;\n  \n  shiftedNumber1 = number1 >> 0x17 & 0xff;\n  condition1 = shiftedNumber1 == 0;\n  if (!condition1) {\n    value2 = number2 >> 0x17 & 0xff;\n    condition1 = value2 == 0;\n  }\n  if (!condition1) {\n    condition1 = shiftedNumber1 == 0xff;\n  }\n  if (!condition1) {\n    condition1 = value2 == 0xff;\n  }\n  if (condition1) {\n    value2 = number2 >> 0x17 & 0xff;\n    result = number1;\n    if (shiftedNumber1 == 0xff) {\n      if (((number1 & 0x7fffff) != 0) || (result = number2, value2 == 0xff)) {\nLAB_08000e16:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (value2 == 0xff) {\n        result = number2;\n        if ((number2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (number1 ^ number2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      condition1 = (number1 & 0x7fffffff) == 0;\n      if (!condition1) {\n        condition1 = (number2 & 0x7fffffff) == 0;\n      }\n      if (!condition1) {\n        condition1 = shiftedNumber1 == 0;\n        result = number1 & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            number1 = number1 << 1;\n            condition1 = (number1 & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          shiftedNumber1 = shiftedNumber1 - 1;\n        }\n        number1 = number1 | result;\n        condition1 = value2 == 0;\n        result = number2 & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            number2 = number2 << 1;\n            condition1 = (number2 & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          value2 = value2 - 1;\n        }\n        number2 = number2 | result;\n        goto LAB_08000e38;\n      }\n      if ((number1 & 0x7fffffff) == 0) {\n        if ((number2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    number1 = number1 ^ number2;\n  }\n  else {\nLAB_08000e38:\n    difference = shiftedNumber1 - value2;\n    if (number2 << 9 == 0) {\n      number1 = (number1 ^ number2) & 0x80000000 | number1 & 0x7fffff;\n      check = SCARRY4(difference,0x7f);\n      sum = difference + 0x7f;\n      condition1 = sum < 0;\n      condition2 = sum == 0;\n      if (!condition2 && condition1 == check) {\n        check = SBORROW4(0xff,sum);\n        condition1 = 0xff - sum < 0;\n        condition2 = sum == 0xff;\n      }\n      if (!condition2 && condition1 == check) {\n        number1 = number1 | sum * 0x800000;\n      }\n      if (!condition2 && condition1 == check) {\n        return number1;\n      }\n      number1 = number1 | 0x800000;\n      shiftedNumber1 = 0;\n      condition2 = SBORROW4(sum,1);\n      shiftedNumber2 = difference + 0x7e;\n      condition1 = shiftedNumber2 == 0;\n      result = shiftedNumber2;\n    }\n    else {\n      quotient = (number2 << 9) >> 4 | 0x10000000;\n      shiftedNumber1 = (number1 << 9) >> 4 | 0x10000000;\n      number1 = (number1 ^ number2) & 0x80000000;\n      condition1 = quotient <= shiftedNumber1;\n      if (!condition1) {\n        shiftedNumber1 = shiftedNumber1 << 1;\n      }\n      shiftedNumber2 = difference + 0x7d + (uint)condition1;\n      result = 0x800000;\n      do {\n        if (quotient <= shiftedNumber1) {\n          shiftedNumber1 = shiftedNumber1 - quotient;\n          number1 = number1 | result;\n        }\n        condition1 = quotient >> 1 <= shiftedNumber1;\n        if (condition1) {\n          shiftedNumber1 = shiftedNumber1 - (quotient >> 1);\n        }\n        if (condition1) {\n          number1 = number1 | result >> 1;\n        }\n        condition1 = quotient >> 2 <= shiftedNumber1;\n        if (condition1) {\n          shiftedNumber1 = shiftedNumber1 - (quotient >> 2);\n        }\n        if (condition1) {\n          number1 = number1 | result >> 2;\n        }\n        condition1 = quotient >> 3 <= shiftedNumber1;\n        if (condition1) {\n          shiftedNumber1 = shiftedNumber1 - (quotient >> 3);\n        }\n        if (condition1) {\n          number1 = number1 | result >> 3;\n        }\n        shiftedNumber1 = shiftedNumber1 * 0x10;\n        condition1 = shiftedNumber1 == 0;\n        if (!condition1) {\n          result = result >> 4;\n          condition1 = result == 0;\n        }\n      } while (!condition1);\n      condition2 = SBORROW4(shiftedNumber2,0xfd);\n      condition1 = shiftedNumber2 == 0xfd;\n      result = shiftedNumber2 - 0xfd;\n      if (shiftedNumber2 < 0xfe) {\n        number1 = number1 + shiftedNumber2 * 0x800000 + (uint)(quotient <= shiftedNumber1);\n        if (shiftedNumber1 - quotient == 0) {\n          number1 = number1 & 0xfffffffe;\n        }\n        return number1;\n      }\n    }\n    if (condition1 || (int)result < 0 != condition2) {\n      condition1 = (int)(shiftedNumber2 + 0x19) < 0;\n      if (shiftedNumber2 == 0xffffffe7 || condition1 != SCARRY4(shiftedNumber2,0x19)) {\n        number1 = number1 & 0x80000000;\n      }\n      if (shiftedNumber2 == 0xffffffe7 || condition1 != SCARRY4(shiftedNumber2,0x19)) {\n        return number1;\n      }\n      result = (number1 << 1) >> (-shiftedNumber2 & 0xff);\n      shiftedNumber2 = number1 << (shiftedNumber2 + 0x20 & 0xff);\n      result = ((uint)((number1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((shiftedNumber1 | shiftedNumber2 << 1) == 0) {\n        result = result & ~(shiftedNumber2 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return number1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e20": "calculate_floating_point_number_08000e20",
                "param_1": "number1",
                "param_2": "number2",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "quotient",
                "uVar2": "shiftedNumber1",
                "iVar3": "difference",
                "uVar4": "shiftedNumber2",
                "iVar5": "sum",
                "uVar6": "result",
                "bVar7": "condition1",
                "bVar8": "condition2",
                "bVar9": "check"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f68": {
            "entrypoint": "0x08000f68",
            "current_name": "calculate_result_08000f68",
            "code": "\nuint calculate_result_08000f68(uint input_1,uint input_2)\n\n{\n  bool is_negative_result;\n  uint input_1_times_2;\n  uint input_2_times_2;\n  uint combined_result;\n  bool is_result_zero;\n  \n  input_1_times_2 = input_1 * 2;\n  input_2_times_2 = input_2 * 2;\n  if (((int)input_1_times_2 >> 0x18 == -1 || (int)input_2_times_2 >> 0x18 == -1) &&\n     ((((int)input_1_times_2 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)input_2_times_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_result = input_1_times_2 | input_2 & 0x7fffffff;\n  is_result_zero = combined_result == 0;\n  if (!is_result_zero) {\n    combined_result = input_1 ^ input_2;\n    is_result_zero = combined_result == 0;\n  }\n  is_negative_result = -1 < (int)combined_result;\n  if (is_negative_result) {\n    input_1 = input_1_times_2 + input_2 * -2;\n    is_result_zero = input_1 == 0;\n  }\n  if ((is_negative_result && input_2_times_2 <= input_1_times_2) && !is_result_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative_result || input_2_times_2 > input_1_times_2) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_result_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_08000f68": "calculate_result_08000f68",
                "param_1": "input_1",
                "param_2": "input_2",
                "bVar1": "is_negative_result",
                "uVar2": "input_1_times_2",
                "uVar3": "input_2_times_2",
                "uVar4": "combined_result",
                "bVar5": "is_result_zero"
            },
            "calling": [
                "FUN_08000fd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fc8": {
            "entrypoint": "0x08000fc8",
            "current_name": "call_function_with_swapped_parameters_08000fc8",
            "code": "\nvoid callFunctionWithSwappedParameters_08000fc8(undefined4 destination,undefined4 source)\n\n{\n  FUN_08000fd0(source,destination);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fc8": "call_function_with_swapped_parameters_08000fc8",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [
                "FUN_08001030"
            ],
            "called": [
                "FUN_08000fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fd0": {
            "entrypoint": "0x08000fd0",
            "current_name": "concatenate_08000fd0",
            "code": "\nundefined8 concatenate_08000fd0(undefined4 first_part,undefined4 second_part)\n\n{\n  FUN_08000f68();\n  return CONCAT44(second_part,first_part);\n}\n\n",
            "renaming": {
                "FUN_08000fd0": "concatenate_08000fd0",
                "param_1": "first_part",
                "param_2": "second_part"
            },
            "calling": [
                "FUN_08000ff4",
                "FUN_08000fc8"
            ],
            "called": [
                "FUN_08000f68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ff4": {
            "entrypoint": "0x08000ff4",
            "current_name": "is_cy_null_08000ff4",
            "code": "\nbool is_CY_null_08000ff4(void)\n\n{\n  char input_char;\n  \n  FUN_08000fd0();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000ff4": "is_cy_null_08000ff4",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001030": {
            "entrypoint": "0x08001030",
            "current_name": "check_if_string_empty_08001030",
            "code": "\nbool check_if_string_empty_08001030(void)\n\n{\n  char input_character;\n  \n  FUN_08000fc8();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001030": "check_if_string_empty_08001030",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000fc8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001044": {
            "entrypoint": "0x08001044",
            "current_name": "binary_to_float_08001044",
            "code": "\nuint binaryToFloat_08001044(uint input)\n\n{\n  uint shift_amount;\n  \n  if (((input & 0x80000000) != 0) || (input << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((input << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    return (input << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08001044": "binary_to_float_08001044",
                "param_1": "input",
                "uVar1": "shift_amount"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001084": {
            "entrypoint": "0x08001084",
            "current_name": "copy_memory_08001084",
            "code": "\nundefined4 * copyMemory_08001084(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *destPtrNew;\n  undefined4 *srcPtr;\n  uint remainingSize;\n  uint loopSize;\n  bool loopCondition;\n  \n  destPtrNew = dest;\n  if ((((uint)src | (uint)dest) & 3) != 0) {\n    if (size < 8) {\n      loopSize = size - 4;\n      if (3 < size) {\n        do {\n          destPtr = src;\n          srcPtr = destPtrNew;\n          loopCondition = loopSize != 0;\n          loopSize = loopSize - 1;\n          *(undefined *)srcPtr = *(undefined *)destPtr;\n          destPtrNew = (undefined4 *)((int)srcPtr + 1);\n          src = (undefined4 *)((int)destPtr + 1);\n        } while (loopCondition);\n        *(undefined *)(undefined4 *)((int)srcPtr + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)srcPtr + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)srcPtr + 3) = *(undefined *)((int)destPtr + 3);\n        return dest;\n      }\n      goto LAB_08001108;\n    }\n    if ((((uint)src & 3) != 0) && (((uint)dest & 3) != 0)) {\n      loopSize = 4 - ((uint)dest & 3);\n      size = size - loopSize;\n      destPtr = dest;\n      srcPtr = src;\n      if (((uint)dest & 1) != 0) {\n        srcPtr = (undefined4 *)((int)src + 1);\n        destPtr = (undefined4 *)((int)dest + 1);\n        *(undefined *)dest = *(undefined *)src;\n      }\n      destPtrNew = destPtr;\n      src = srcPtr;\n      if ((loopSize & 2) != 0) {\n        src = (undefined4 *)((int)srcPtr + 2);\n        destPtrNew = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *destPtrNew = *src;\n    destPtrNew[1] = src[1];\n    destPtrNew[2] = src[2];\n    destPtrNew[3] = src[3];\n    destPtrNew[4] = src[4];\n    destPtrNew[5] = src[5];\n    destPtrNew[6] = src[6];\n    destPtrNew[7] = src[7];\n    destPtrNew[8] = src[8];\n    destPtrNew[9] = src[9];\n    destPtrNew[10] = src[10];\n    destPtrNew[0xb] = src[0xb];\n    destPtrNew[0xc] = src[0xc];\n    destPtrNew[0xd] = src[0xd];\n    destPtrNew[0xe] = src[0xe];\n    destPtrNew[0xf] = src[0xf];\n    destPtrNew = destPtrNew + 0x10;\n    src = src + 0x10;\n    size = size - 0x40;\n  }\n  remainingSize = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *destPtrNew = *src;\n      destPtrNew[1] = src[1];\n      destPtrNew[2] = src[2];\n      destPtrNew[3] = src[3];\n      destPtrNew = destPtrNew + 4;\n      src = src + 4;\n      loopCondition = 0xf < remainingSize;\n      remainingSize = remainingSize - 0x10;\n    } while (loopCondition);\n  }\n  loopSize = remainingSize + 0xc;\n  srcPtr = destPtrNew;\n  destPtr = src;\n  if (0xfffffff3 < remainingSize) {\n    do {\n      src = destPtr + 1;\n      *srcPtr = *destPtr;\n      loopCondition = 3 < loopSize;\n      loopSize = loopSize - 4;\n      destPtrNew = srcPtr + 1;\n      srcPtr = srcPtr + 1;\n      destPtr = src;\n    } while (loopCondition);\n  }\nLAB_08001108:\n  if (loopSize + 4 != 0) {\n    destPtr = destPtrNew;\n    srcPtr = src;\n    if ((loopSize & 1) != 0) {\n      srcPtr = (undefined4 *)((int)src + 1);\n      destPtr = (undefined4 *)((int)destPtrNew + 1);\n      *(undefined *)destPtrNew = *(undefined *)src;\n    }\n    if ((loopSize + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n    }\n  }\n  return dest;\n}\n\n",
            "renaming": {
                "FUN_08001084": "copy_memory_08001084",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "destPtrNew",
                "puVar3": "srcPtr",
                "uVar4": "remainingSize",
                "uVar5": "loopSize",
                "bVar6": "loopCondition"
            },
            "calling": [
                "FUN_080097cc",
                "FUN_080079e8",
                "FUN_08009120"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "check_param_combination_08001170",
            "code": "\nundefined4 check_param_combination_08001170(uint input_1,int input_2,uint input_3,int input_4)\n\n{\n  if ((((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) &&\n     (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001170": "check_param_combination_08001170",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800119c": {
            "entrypoint": "0x0800119c",
            "current_name": "calculate_result_0800119c",
            "code": "\nuint calculate_result_0800119c(uint input_value_1,uint modified_input)\n\n{\n  uint result;\n  int offset;\n  uint updated_shift;\n  \n  offset = modified_input * 2 + 0x200000;\n  if (modified_input * 2 < 0xffe00000) {\n    if (-1 < offset) {\n      return 0;\n    }\n    result = offset >> 0x15;\n    updated_shift = -result - 0x3e1;\n    if (result < 0xfffffc20 && updated_shift != 0) {\n      result = (modified_input << 0xb | 0x80000000 | input_value_1 >> 0x15) >> (updated_shift & 0xff);\n      if ((modified_input & 0x80000000) != 0) {\n        result = -result;\n      }\n      return result;\n    }\n  }\n  else if ((input_value_1 | modified_input << 0xc) != 0) {\n    return 0;\n  }\n  modified_input = modified_input & 0x80000000;\n  if (modified_input == 0) {\n    modified_input = 0x7fffffff;\n  }\n  return modified_input;\n}\n\n",
            "renaming": {
                "FUN_0800119c": "calculate_result_0800119c",
                "param_1": "input_value_1",
                "param_2": "modified_input",
                "uVar1": "result",
                "iVar2": "offset",
                "uVar3": "updated_shift"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011ec": {
            "entrypoint": "0x080011ec",
            "current_name": "check_params_and_return_080011ec",
            "code": "\nundefined8 checkParamsAndReturn_080011ec(int input1,int input2,int param3,int param4)\n\n{\n  undefined8 result;\n  \n  if ((param4 == 0) && (param3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input2 = -1;\n      input1 = -1;\n    }\n    return CONCAT44(input2,input1);\n  }\n  result = FUN_0800121c();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080011ec": "check_params_and_return_080011ec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_0800121c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800121c": {
            "entrypoint": "0x0800121c",
            "current_name": "calculate_remainder_and_quotient_0800121c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 calculate_remainder_and_quotient_0800121c(uint dividend,uint dividend_low,uint divisor,uint divisor_low,uint *remainder_and_quotient)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  ulonglong partial_product;\n  uint divisor_quotient_bit;\n  uint dividend_quotient_bit;\n  uint dividend_low_quotient_bit;\n  int divisor_LZCOUNT;\n  uint quotient;\n  uint dividend_low_partial;\n  uint dividend_partial;\n  uint *puVar9;\n  uint divisor_low_remainder_bit;\n  uint dividend_lower;\n  uint divisor_remainder_bit;\n  bool carry_flag;\n  undefined8 result;\n  \n  if (divisor_low == 0) {\n    if (dividend_low < divisor) {\n      divisor_LZCOUNT = LZCOUNT(divisor);\n      dividend_low_partial = divisor;\n      if (divisor_LZCOUNT != 0) {\n        dividend_low_partial = divisor << divisor_LZCOUNT;\n        dividend_low = dividend >> (0x20U - divisor_LZCOUNT & 0xff) | dividend_low << divisor_LZCOUNT;\n        dividend = dividend << divisor_LZCOUNT;\n      }\n      dividend_lower = dividend_low_partial >> 0x10;\n      dividend_partial = dividend_low / dividend_lower;\n      divisor_low_remainder_bit = dividend_partial * (dividend_low_partial & 0xffff);\n      quotient = dividend >> 0x10 | (dividend_low - dividend_lower * dividend_partial) * 0x10000;\n      dividend_quotient_bit = dividend_partial;\n      if (quotient <= divisor_low_remainder_bit && divisor_low_remainder_bit - quotient != 0) {\n        carry_flag = CARRY4(dividend_low_partial,quotient);\n        quotient = dividend_low_partial + quotient;\n        dividend_quotient_bit = dividend_partial - 1;\n        if ((carry_flag == false) && (quotient <= divisor_low_remainder_bit && divisor_low_remainder_bit - quotient != 0)) {\n          dividend_quotient_bit = dividend_partial - 2;\n          quotient = quotient + dividend_low_partial;\n        }\n      }\n      divisor_quotient_bit = (quotient - divisor_low_remainder_bit) / dividend_lower;\n      dividend_low_quotient_bit = divisor_quotient_bit * (dividend_low_partial & 0xffff);\n      dividend_partial = dividend & 0xffff | ((quotient - divisor_low_remainder_bit) - dividend_lower * divisor_quotient_bit) * 0x10000;\n      quotient = divisor_quotient_bit;\n      if (dividend_partial <= dividend_low_quotient_bit && dividend_low_quotient_bit - dividend_partial != 0) {\n        carry_flag = CARRY4(dividend_low_partial,dividend_partial);\n        dividend_partial = dividend_low_partial + dividend_partial;\n        quotient = divisor_quotient_bit - 1;\n        if ((carry_flag == false) && (dividend_partial <= dividend_low_quotient_bit && dividend_low_quotient_bit - dividend_partial != 0)) {\n          quotient = divisor_quotient_bit - 2;\n          dividend_partial = dividend_partial + dividend_low_partial;\n        }\n      }\n      quotient = quotient | dividend_quotient_bit << 0x10;\n      puVar9 = (uint *)0x0;\n      dividend_partial = dividend_partial - dividend_low_quotient_bit;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (code *)software_udf(0xff,0x8001302);\n        result = (*UNRECOVERED_JUMPTABLE)();\n        return result;\n      }\n      divisor_LZCOUNT = LZCOUNT(divisor);\n      if (divisor_LZCOUNT == 0) {\n        puVar9 = (uint *)0x1;\n        dividend_low = dividend_low - divisor;\n        dividend_lower = divisor >> 0x10;\n        divisor_quotient_bit = divisor & 0xffff;\n        dividend_low_partial = divisor;\n      }\n      else {\n        dividend_low_partial = divisor << divisor_LZCOUNT;\n        quotient = dividend_low >> (0x20U - divisor_LZCOUNT & 0xff);\n        dividend_lower = dividend_low_partial >> 0x10;\n        divisor_low_remainder_bit = quotient / dividend_lower;\n        divisor_quotient_bit = dividend_low_partial & 0xffff;\n        dividend_low_quotient_bit = divisor_low_remainder_bit * divisor_quotient_bit;\n        dividend_partial = dividend >> (0x20U - divisor_LZCOUNT & 0xff) | dividend_low << divisor_LZCOUNT;\n        dividend_quotient_bit = dividend_partial >> 0x10 | (quotient - dividend_lower * divisor_low_remainder_bit) * 0x10000;\n        dividend = dividend << divisor_LZCOUNT;\n        quotient = divisor_low_remainder_bit;\n        if (dividend_quotient_bit <= dividend_low_quotient_bit && dividend_low_quotient_bit - dividend_quotient_bit != 0) {\n          carry_flag = CARRY4(dividend_low_partial,dividend_quotient_bit);\n          dividend_quotient_bit = dividend_low_partial + dividend_quotient_bit;\n          quotient = divisor_low_remainder_bit - 1;\n          if ((carry_flag == false) && (dividend_quotient_bit <= dividend_low_quotient_bit && dividend_low_quotient_bit - dividend_quotient_bit != 0)) {\n            quotient = divisor_low_remainder_bit - 2;\n            dividend_quotient_bit = dividend_quotient_bit + dividend_low_partial;\n          }\n        }\n        divisor_low_remainder_bit = (dividend_quotient_bit - dividend_low_quotient_bit) / dividend_lower;\n        divisor_remainder_bit = divisor_low_remainder_bit * divisor_quotient_bit;\n        dividend_low = dividend_partial & 0xffff | ((dividend_quotient_bit - dividend_low_quotient_bit) - dividend_lower * divisor_low_remainder_bit) * 0x10000;\n        dividend_quotient_bit = divisor_low_remainder_bit;\n        if (dividend_low <= divisor_remainder_bit && divisor_remainder_bit - dividend_low != 0) {\n          carry_flag = CARRY4(dividend_low_partial,dividend_low);\n          dividend_low = dividend_low_partial + dividend_low;\n          dividend_quotient_bit = divisor_low_remainder_bit - 1;\n          if ((carry_flag == false) && (dividend_low <= divisor_remainder_bit && divisor_remainder_bit - dividend_low != 0)) {\n            dividend_quotient_bit = divisor_low_remainder_bit - 2;\n            dividend_low = dividend_low + dividend_low_partial;\n          }\n        }\n        dividend_low = dividend_low - divisor_remainder_bit;\n        puVar9 = (uint *)(dividend_quotient_bit | quotient << 0x10);\n      }\n      divisor_low_remainder_bit = dividend_low / dividend_lower;\n      quotient = divisor_quotient_bit * divisor_low_remainder_bit;\n      dividend_partial = dividend >> 0x10 | (dividend_low - dividend_lower * divisor_low_remainder_bit) * 0x10000;\n      dividend_quotient_bit = divisor_low_remainder_bit;\n      if (dividend_partial <= quotient && quotient - dividend_partial != 0) {\n        carry_flag = CARRY4(dividend_low_partial,dividend_partial);\n        dividend_partial = dividend_low_partial + dividend_partial;\n        dividend_quotient_bit = divisor_low_remainder_bit - 1;\n        if ((carry_flag == false) && (dividend_partial <= quotient && quotient - dividend_partial != 0)) {\n          dividend_quotient_bit = divisor_low_remainder_bit - 2;\n          dividend_partial = dividend_partial + dividend_low_partial;\n        }\n      }\n      divisor_low_remainder_bit = (dividend_partial - quotient) / dividend_lower;\n      divisor_quotient_bit = divisor_quotient_bit * divisor_low_remainder_bit;\n      dividend_partial = dividend & 0xffff | ((dividend_partial - quotient) - dividend_lower * divisor_low_remainder_bit) * 0x10000;\n      quotient = divisor_low_remainder_bit;\n      if (dividend_partial <= divisor_quotient_bit && divisor_quotient_bit - dividend_partial != 0) {\n        carry_flag = CARRY4(dividend_low_partial,dividend_partial);\n        dividend_partial = dividend_low_partial + dividend_partial;\n        quotient = divisor_low_remainder_bit - 1;\n        if ((carry_flag == false) && (dividend_partial <= divisor_quotient_bit && divisor_quotient_bit - dividend_partial != 0)) {\n          quotient = divisor_low_remainder_bit - 2;\n          dividend_partial = dividend_partial + dividend_low_partial;\n        }\n      }\n      dividend_partial = dividend_partial - divisor_quotient_bit;\n      quotient = quotient | dividend_quotient_bit << 0x10;\n    }\n    if (remainder_and_quotient != (uint *)0x0) {\n      *remainder_and_quotient = dividend_partial >> LZCOUNT(divisor);\n      remainder_and_quotient[1] = 0;\n    }\n  }\n  else {\n    puVar9 = remainder_and_quotient;\n    if (dividend_low < divisor_low) {\n      if (remainder_and_quotient != (uint *)0x0) {\n        *remainder_and_quotient = dividend;\n        remainder_and_quotient[1] = dividend_low;\n        return 0;\n      }\n      quotient = 0;\n    }\n    else {\n      divisor_LZCOUNT = LZCOUNT(divisor_low);\n      if (divisor_LZCOUNT == 0) {\n        if ((divisor_low < dividend_low) || (divisor <= dividend)) {\n          carry_flag = dividend < divisor;\n          dividend = dividend - divisor;\n          dividend_low = (dividend_low - divisor_low) - (uint)carry_flag;\n          quotient = 1;\n        }\n        else {\n          quotient = 0;\n        }\n        puVar9 = (uint *)0x0;\n        if (remainder_and_quotient != (uint *)0x0) {\n          *remainder_and_quotient = dividend;\n          remainder_and_quotient[1] = dividend_low;\n        }\n      }\n      else {\n        dividend_partial = 0x20 - divisor_LZCOUNT;\n        divisor_quotient_bit = divisor >> (dividend_partial & 0xff) | divisor_low << divisor_LZCOUNT;\n        dividend_low_partial = dividend_low >> (dividend_partial & 0xff);\n        dividend_low_quotient_bit = divisor_quotient_bit >> 0x10;\n        divisor_low_remainder_bit = dividend_low_partial / dividend_low_quotient_bit;\n        dividend_lower = divisor_low_remainder_bit * (divisor_quotient_bit & 0xffff);\n        quotient = dividend_low << divisor_LZCOUNT | dividend >> (dividend_partial & 0xff);\n        dividend_quotient_bit = quotient >> 0x10 | (dividend_low_partial - dividend_low_quotient_bit * divisor_low_remainder_bit) * 0x10000;\n        dividend = dividend << divisor_LZCOUNT;\n        dividend_low_partial = divisor_low_remainder_bit;\n        if (dividend_quotient_bit <= dividend_lower && dividend_lower - dividend_quotient_bit != 0) {\n          carry_flag = CARRY4(divisor_quotient_bit,dividend_quotient_bit);\n          dividend_quotient_bit = divisor_quotient_bit + dividend_quotient_bit;\n          dividend_low_partial = divisor_low_remainder_bit - 1;\n          if ((carry_flag == false) && (dividend_quotient_bit <= dividend_lower && dividend_lower - dividend_quotient_bit != 0)) {\n            dividend_low_partial = divisor_low_remainder_bit - 2;\n            dividend_quotient_bit = dividend_quotient_bit + divisor_quotient_bit;\n          }\n        }\n        divisor_low_remainder_bit = (dividend_quotient_bit - dividend_lower) / dividend_low_quotient_bit;\n        divisor_remainder_bit = divisor_low_remainder_bit * (divisor_quotient_bit & 0xffff);\n        dividend_quotient_bit = quotient & 0xffff | ((dividend_quotient_bit - dividend_lower) - dividend_low_quotient_bit * divisor_low_remainder_bit) * 0x10000;\n        quotient = divisor_low_remainder_bit;\n        if (dividend_quotient_bit <= divisor_remainder_bit && divisor_remainder_bit - dividend_quotient_bit != 0) {\n          carry_flag = CARRY4(divisor_quotient_bit,dividend_quotient_bit);\n          dividend_quotient_bit = divisor_quotient_bit + dividend_quotient_bit;\n          quotient = divisor_low_remainder_bit - 1;\n          if ((carry_flag == false) && (dividend_quotient_bit <= divisor_remainder_bit && divisor_remainder_bit - dividend_quotient_bit != 0)) {\n            quotient = divisor_low_remainder_bit - 2;\n            dividend_quotient_bit = dividend_quotient_bit + divisor_quotient_bit;\n          }\n        }\n        quotient = quotient | dividend_low_partial << 0x10;\n        partial_product = (ulonglong)quotient * (ulonglong)(divisor << divisor_LZCOUNT);\n        if (CONCAT44(dividend_quotient_bit - divisor_remainder_bit,dividend) < partial_product) {\n          quotient = quotient - 1;\n          partial_product = partial_product - CONCAT44(divisor_quotient_bit,divisor << divisor_LZCOUNT);\n        }\n        if (remainder_and_quotient != (uint *)0x0) {\n          dividend_low_partial = ((dividend_quotient_bit - divisor_remainder_bit) - (int)(partial_product >> 0x20)) - (uint)(dividend < (uint)partial_product);\n          *remainder_and_quotient = dividend_low_partial << (dividend_partial & 0xff) | dividend - (uint)partial_product >> divisor_LZCOUNT;\n          remainder_and_quotient[1] = dividend_low_partial >> divisor_LZCOUNT;\n          puVar9 = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(puVar9,quotient);\n}\n\n",
            "renaming": {
                "FUN_0800121c": "calculate_remainder_and_quotient_0800121c",
                "param_1": "dividend",
                "param_2": "dividend_low",
                "param_3": "divisor",
                "param_4": "divisor_low",
                "param_5": "remainder_and_quotient",
                "uVar1": "partial_product",
                "uVar2": "divisor_quotient_bit",
                "uVar3": "dividend_quotient_bit",
                "uVar4": "dividend_low_quotient_bit",
                "uVar6": "quotient",
                "uVar7": "dividend_low_partial",
                "uVar8": "dividend_partial",
                "uVar10": "divisor_low_remainder_bit",
                "uVar11": "dividend_lower",
                "uVar12": "divisor_remainder_bit",
                "iVar5": "divisor_LZCOUNT",
                "bVar13": "carry_flag",
                "uVar14": "result"
            },
            "calling": [
                "FUN_080011ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014f0": {
            "entrypoint": "0x080014f0",
            "current_name": "initialize_hardware_080014f0",
            "code": "\n\n\nundefined4 initializeHardware_080014f0(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  FUN_08001714(3);\n  FUN_0800151c(0xf);\n  FUNC_08002d8a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080014f0": "initialize_hardware_080014f0"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08001714",
                "FUN_08002d8a",
                "FUN_0800151c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800151c": {
            "entrypoint": "0x0800151c",
            "current_name": "check_and_set_threshold_0800151c",
            "code": "\nundefined4 checkAndSetThreshold_0800151c(uint threshold)\n\n{\n  int result;\n  undefined4 isValid;\n  \n  result = FUN_08001762((int)((ulonglong)DAT_20000018 / (1000 / (ulonglong)DAT_20000004)));\n  if (result == 0) {\n    if (threshold < 0x10) {\n      FUN_0800172a(0xffffffff,threshold,0);\n      isValid = 0;\n      DAT_20000000 = threshold;\n    }\n    else {\n      isValid = 1;\n    }\n  }\n  else {\n    isValid = 1;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_0800151c": "check_and_set_threshold_0800151c",
                "param_1": "threshold",
                "iVar1": "result",
                "uVar2": "isValid"
            },
            "calling": [
                "FUN_08003260",
                "FUN_080014f0"
            ],
            "called": [
                "FUN_08001762",
                "FUN_0800172a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800157c": {
            "entrypoint": "0x0800157c",
            "current_name": "increase_data_by_constant_0800157c",
            "code": "\nvoid increaseDataByConstant_0800157c(void)\n\n{\n  DAT_20000a48 = DAT_20000a48 + (uint)DAT_20000004;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800157c": "increase_data_by_constant_0800157c"
            },
            "calling": [
                "FUN_08005704"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015a0": {
            "entrypoint": "0x080015a0",
            "current_name": "get_data_080015a0",
            "code": "\nundefined4 get_data_080015a0(void)\n\n{\n  return DAT_20000a48;\n}\n\n",
            "renaming": {
                "FUN_080015a0": "get_data_080015a0"
            },
            "calling": [
                "FUN_08002ca8",
                "FUN_08004436",
                "FUN_08003260",
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_08001ccc",
                "FUN_080027f4",
                "FUN_08002d98",
                "FUN_08002c2e",
                "FUN_08001f6c",
                "FUN_08002640",
                "FUN_08004f2c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b4": {
            "entrypoint": "0x080015b4",
            "current_name": "configure_hardware_080015b4",
            "code": "\n\n\nvoid configureHardware_080015b4(uint inputValue)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (inputValue & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b4": "configure_hardware_080015b4",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08001714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015fc": {
            "entrypoint": "0x080015fc",
            "current_name": "get_shifted_bits_080015fc",
            "code": "\n\n\nuint getShiftedBits_080015fc(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_080015fc": "get_shifted_bits_080015fc"
            },
            "calling": [
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001618": {
            "entrypoint": "0x08001618",
            "current_name": "write_to_memory_08001618",
            "code": "\nvoid writeToMemory_08001618(byte address,uint data)\n\n{\n  if ((char)address < '\\0') {\n    *(char *)((address & 0xf) + 0xe000ed14) = (char)((data & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)address + -0x1fff1c00) = (char)((data & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001618": "write_to_memory_08001618",
                "param_1": "address",
                "param_2": "data"
            },
            "calling": [
                "FUN_080016d0",
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800166c": {
            "entrypoint": "0x0800166c",
            "current_name": "bitwise_operation_0800166c",
            "code": "\nuint bitwiseOperation_0800166c(uint inputBits,uint bitMask,uint dataValue)\n\n{\n  uint shiftAmount;\n  \n  inputBits = inputBits & 7;\n  shiftAmount = 7 - inputBits;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (inputBits + 4 < 7) {\n    inputBits = 0;\n  }\n  else {\n    inputBits = inputBits - 3;\n  }\n  return dataValue & ~(-1 << (inputBits & 0xff)) |\n         (~(-1 << (shiftAmount & 0xff)) & bitMask) << (inputBits & 0xff);\n}\n\n",
            "renaming": {
                "FUN_0800166c": "bitwise_operation_0800166c",
                "param_1": "inputBits",
                "param_2": "bitMask",
                "param_3": "dataValue",
                "uVar1": "shiftAmount"
            },
            "calling": [
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016d0": {
            "entrypoint": "0x080016d0",
            "current_name": "check_value_and_set_registers_080016d0",
            "code": "\n\n\nbool checkValueAndSetRegisters_080016d0(int value)\n\n{\n  bool isValidValue;\n  \n  isValidValue = value - 1U < 0x1000000;\n  if (isValidValue) {\n    _DAT_e000e014 = value + -1;\n    FUN_08001618(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isValidValue;\n}\n\n",
            "renaming": {
                "FUN_080016d0": "check_value_and_set_registers_080016d0",
                "param_1": "value",
                "bVar1": "isValidValue"
            },
            "calling": [
                "FUN_08001762"
            ],
            "called": [
                "FUN_08001618"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001714": {
            "entrypoint": "0x08001714",
            "current_name": "initialize_application_08001714",
            "code": "\nvoid initializeApplication_08001714(undefined4 applicationData)\n\n{\n  FUN_080015b4(applicationData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001714": "initialize_application_08001714",
                "param_1": "applicationData"
            },
            "calling": [
                "FUN_080014f0"
            ],
            "called": [
                "FUN_080015b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800172a": {
            "entrypoint": "0x0800172a",
            "current_name": "process_data_0800172a",
            "code": "\nvoid processData_0800172a(char inputData,undefined4 arg1,undefined4 arg2)\n\n{\n  undefined4 result;\n  \n  result = FUN_080015fc();\n  result = FUN_0800166c(result,arg1,arg2);\n  FUN_08001618((int)inputData,result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800172a": "process_data_0800172a",
                "param_1": "inputData",
                "param_2": "arg1",
                "param_3": "arg2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "called": [
                "FUN_08001618",
                "FUN_0800166c",
                "FUN_080015fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001762": {
            "entrypoint": "0x08001762",
            "current_name": "process_data_08001762",
            "code": "\nundefined4 processData_08001762(undefined4 inputData)\n\n{\n  undefined4 result;\n  \n  result = FUN_080016d0(inputData);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001762": "process_data_08001762",
                "param_1": "inputData",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "called": [
                "FUN_080016d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800177c": {
            "entrypoint": "0x0800177c",
            "current_name": "set_flag_value_0800177c",
            "code": "\n\n\nvoid setFlagValue_0800177c(int flag)\n\n{\n  if (flag == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800177c": "set_flag_value_0800177c",
                "param_1": "flag"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080017b4": {
            "entrypoint": "0x080017b4",
            "current_name": "initialize_system_080017b4",
            "code": "\nvoid initializeSystem_080017b4(void)\n\n{\n  FUN_08004f78(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080017b4": "initialize_system_080017b4"
            },
            "calling": [
                "FUN_08005704"
            ],
            "called": [
                "FUN_08004f78"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080017c4": {
            "entrypoint": "0x080017c4",
            "current_name": "update_values_080017c4",
            "code": "\n\n\nvoid updateValues_080017c4(uint *sourceData,uint *controlData)\n\n{\n  uint bitMask;\n  uint bitCheck;\n  uint command;\n  uint *outputData;\n  int index;\n  uint newValue;\n  uint counter;\n  \n  newValue = 0;\n  counter = 0;\n  do {\n    if (0xf < counter) {\n      return;\n    }\n    bitMask = 1 << (counter & 0xff);\n    bitCheck = *controlData & bitMask;\n    if (bitCheck == bitMask) {\n      command = controlData[1];\n      if (command == 0x12) {\n        newValue = controlData[3] + 0xc;\n      }\n      else if (command < 0x13) {\n        if (command == 2) {\n          newValue = controlData[3] + 8;\n        }\n        else if (command < 3) {\n          if (command == 0) goto LAB_08001882;\n          if (command == 1) {\n            newValue = controlData[3];\n          }\n        }\n        else if (command == 3) {\n          newValue = 0;\n        }\n        else if (command == 0x11) {\n          newValue = controlData[3] + 4;\n        }\n      }\n      else if (command == 0x10210000) {\nLAB_08001882:\n        if (controlData[2] == 0) {\n          newValue = 4;\n        }\n        else if (controlData[2] == 1) {\n          newValue = 8;\n          sourceData[4] = bitMask;\n        }\n        else {\n          newValue = 8;\n          sourceData[5] = bitMask;\n        }\n      }\n      else if (command < 0x10210001) {\n        if ((command == 0x10110000) || (command == 0x10120000)) goto LAB_08001882;\n      }\n      else if (((command == 0x10310000) || (command == 0x10320000)) || (command == 0x10220000))\n      goto LAB_08001882;\n      if (bitCheck < 0x100) {\n        bitMask = counter << 2;\n        outputData = sourceData;\n      }\n      else {\n        outputData = sourceData + 1;\n        bitMask = (counter - 8) * 4;\n      }\n      *outputData = *outputData & ~(0xf << (bitMask & 0xff)) | newValue << (bitMask & 0xff);\n      if ((controlData[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        if (sourceData == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (sourceData == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (sourceData == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (sourceData == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)(((counter >> 2) + 2) * 4 + 0x40010000) =\n             index << ((counter & 3) << 2) |\n             ~(0xf << ((counter & 3) << 2)) & *(uint *)(((counter >> 2) + 2) * 4 + 0x40010000);\n        if ((controlData[1] & 0x10000) == 0) {\n          _DAT_40010400 = ~bitCheck & _DAT_40010400;\n        }\n        else {\n          _DAT_40010400 = bitCheck | _DAT_40010400;\n        }\n        if ((controlData[1] & 0x20000) == 0) {\n          _DAT_40010404 = ~bitCheck & _DAT_40010404;\n        }\n        else {\n          _DAT_40010404 = bitCheck | _DAT_40010404;\n        }\n        if ((controlData[1] & 0x100000) == 0) {\n          _DAT_40010408 = ~bitCheck & _DAT_40010408;\n        }\n        else {\n          _DAT_40010408 = bitCheck | _DAT_40010408;\n        }\n        if ((controlData[1] & 0x200000) == 0) {\n          _DAT_4001040c = ~bitCheck & _DAT_4001040c;\n        }\n        else {\n          _DAT_4001040c = bitCheck | _DAT_4001040c;\n        }\n      }\n    }\n    counter = counter + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080017c4": "update_values_080017c4",
                "param_1": "sourceData",
                "param_2": "controlData",
                "uVar1": "bitMask",
                "uVar2": "bitCheck",
                "uVar3": "command",
                "puVar4": "outputData",
                "iVar5": "index",
                "local_10": "newValue",
                "local_c": "counter"
            },
            "calling": [
                "FUN_08005680",
                "FUN_080055f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a80": {
            "entrypoint": "0x08001a80",
            "current_name": "store_param_to_memory_08001a80",
            "code": "\nvoid storeParamToMemory_08001a80(int memoryAddress,ushort data,char isShifted)\n\n{\n  if (isShifted == '\\0') {\n    *(unsignedInt *)(memoryAddress + 0x10) = (unsignedInt)data << 0x10;\n  }\n  else {\n    *(unsignedInt *)(memoryAddress + 0x10) = (unsignedInt)data;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a80": "store_param_to_memory_08001a80",
                "param_1": "memoryAddress",
                "param_2": "data",
                "param_3": "isShifted",
                "uint": "unsignedInt"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_080055f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "calculate_values_08001ab0",
            "code": "\nundefined4 calculateValues_08001ab0(uint **input)\n\n{\n  uint result;\n  char isValid;\n  undefined4 returnValue;\n  uint temp;\n  bool isZero;\n  \n  if (input == (uint **)0x0) {\n    returnValue = 1;\n  }\n  else {\n    if (*(char *)((int)input + 0x3d) == '\\0') {\n      *(undefined *)(input + 0xf) = 0;\n      FUNC_08001cb8(input);\n    }\n    *(undefined *)((int)input + 0x3d) = 0x24;\n    **input = **input & 0xfffffffe;\n    result = FUN_08003518();\n    if (input[1] < (uint *)0x186a1) {\n      temp = result;\n      if (result < 2000000) {\n        temp = 1;\n      }\n      isValid = (char)temp;\n      if (1999999 < result) {\n        isValid = '\\0';\n      }\n    }\n    else {\n      temp = result;\n      if (result < 4000000) {\n        temp = 1;\n      }\n      isValid = (char)temp;\n      if (3999999 < result) {\n        isValid = '\\0';\n      }\n    }\n    if (isValid == '\\0') {\n      temp = result / 1000000;\n      (*input)[1] = temp;\n      if ((uint *)0x186a0 < input[1]) {\n        temp = (temp * 300) / 1000;\n      }\n      (*input)[8] = temp + 1;\n      if (input[1] < (uint *)0x186a1) {\n        result = (result - 1) / (uint)((int)input[1] << 1) + 1 & 0xfff;\n        if (result < 4) {\n          result = 4;\n        }\n      }\n      else {\n        if (input[2] == (uint *)0x0) {\n          temp = (result - 1) / (uint)((int)input[1] * 3) + 1 & 0xfff;\n          isZero = temp == 0;\n          if (isZero) {\n            temp = 1;\n          }\n          isValid = (char)temp;\n          if (!isZero) {\n            isValid = '\\0';\n          }\n        }\n        else {\n          temp = (result - 1) / (uint)((int)input[1] * 0x19) + 1 & 0xfff;\n          isZero = temp == 0;\n          if (isZero) {\n            temp = 1;\n          }\n          isValid = (char)temp;\n          if (!isZero) {\n            isValid = '\\0';\n          }\n        }\n        if (isValid == '\\0') {\n          if (input[2] == (uint *)0x0) {\n            result = (result - 1) / (uint)((int)input[1] * 3) + 1 & 0xfff | 0x8000;\n          }\n          else {\n            result = (result - 1) / (uint)((int)input[1] * 0x19) + 1 & 0xfff | 0xc000;\n          }\n        }\n        else {\n          result = 1;\n        }\n      }\n      (*input)[7] = result;\n      **input = (uint)input[8] | (uint)input[7];\n      (*input)[2] = (uint)input[3] | (uint)input[4];\n      (*input)[3] = (uint)input[6] | (uint)input[5];\n      **input = **input | 1;\n      input[0x10] = (uint *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      input[0xc] = (uint *)0x0;\n      *(undefined *)((int)input + 0x3e) = 0;\n      returnValue = 0;\n    }\n    else {\n      returnValue = 1;\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "calculate_values_08001ab0",
                "param_1": "input",
                "uVar1": "result",
                "cVar2": "isValid",
                "uVar3": "returnValue",
                "uVar4": "temp",
                "bVar5": "isZero"
            },
            "calling": [
                "FUN_08005348"
            ],
            "called": [
                "FUN_08003518",
                "FUN_08001cb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cb8": {
            "entrypoint": "0x08001cb8",
            "current_name": "FUNC_08001cb8",
            "code": "\nvoid FUNC_08001cb8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cb8": "FUNC_08001cb8"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ccc": {
            "entrypoint": "0x08001ccc",
            "current_name": "process_data_08001ccc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001d5e) */\n/* WARNING: Removing unreachable block (ram,0x08001d70) */\n/* WARNING: Removing unreachable block (ram,0x08001d72) */\n/* WARNING: Removing unreachable block (ram,0x08001d74) */\n\nundefined4\nprocessData_08001ccc(uint **data,undefined2 arg1,undefined2 arg2,undefined2 arg3,uint *arg4,\n            undefined2 arg5,undefined4 arg6)\n\n{\n  int result1;\n  int result2;\n  undefined4 returnValue;\n  uint *ptr;\n  \n  result1 = FUN_080015a0();\n  if (*(char *)((int)data + 0x3d) == ' ') {\n    do {\n      if ((~(*data)[6] & 2) != 0) {\n        result2 = 0;\n        goto label1;\n      }\n      result2 = FUN_080015a0();\n    } while ((uint)(result2 - result1) < 0x1a);\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    *(undefined *)(data + 0xf) = 0;\n    result2 = 3;\nlabel1:\n    if (result2 == 0) {\n      if (*(char *)(data + 0xf) == '\\x01') {\n        returnValue = 2;\n      }\n      else {\n        *(undefined *)(data + 0xf) = 1;\n        if ((**data & 1) != 1) {\n          **data = **data | 1;\n        }\n        **data = **data & 0xfffff7ff;\n        *(undefined *)((int)data + 0x3d) = 0x21;\n        *(undefined *)((int)data + 0x3e) = 0x40;\n        data[0x10] = (uint *)0x0;\n        data[9] = arg4;\n        *(undefined2 *)((int)data + 0x2a) = arg5;\n        data[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n        result2 = FUN_08002640(data,arg1,arg2,arg3,arg6,result1);\n        if (result2 == 0) {\n          while (*(short *)(data + 10) != 0) {\n            result2 = FUN_08002bb4(data,arg6,result1);\n            if (result2 != 0) {\n              if (data[0x10] == (uint *)0x4) {\n                **data = **data | 0x200;\n                return 1;\n              }\n              return 3;\n            }\n            ptr = data[9];\n            data[9] = (uint *)((int)ptr + 1);\n            (*data)[4] = (uint)*(byte *)ptr;\n            *(short *)(data + 10) = *(short *)(data + 10) + -1;\n            *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n            if ((((*data)[5] & 4) == 4) && (*(short *)(data + 10) != 0)) {\n              ptr = data[9];\n              data[9] = (uint *)((int)ptr + 1);\n              (*data)[4] = (uint)*(byte *)ptr;\n              *(short *)(data + 10) = *(short *)(data + 10) + -1;\n              *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n            }\n          }\n          result1 = FUN_08002c2e(data,arg6,result1);\n          if (result1 == 0) {\n            **data = **data | 0x200;\n            *(undefined *)((int)data + 0x3d) = 0x20;\n            *(undefined *)((int)data + 0x3e) = 0;\n            *(undefined *)(data + 0xf) = 0;\n            returnValue = 0;\n          }\n          else if (data[0x10] == (uint *)0x4) {\n            **data = **data | 0x200;\n            returnValue = 1;\n          }\n          else {\n            returnValue = 3;\n          }\n        }\n        else if (data[0x10] == (uint *)0x4) {\n          *(undefined *)(data + 0xf) = 0;\n          returnValue = 1;\n        }\n        else {\n          *(undefined *)(data + 0xf) = 0;\n          returnValue = 3;\n        }\n      }\n    }\n    else {\n      returnValue = 2;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001ccc": "process_data_08001ccc",
                "param_1": "data",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "param_5": "arg4",
                "param_6": "arg5",
                "param_7": "arg6",
                "iVar1": "result1",
                "iVar2": "result2",
                "uVar3": "returnValue",
                "puVar4": "ptr",
                "LAB_08001d9c": "label1"
            },
            "calling": [
                "FUN_08004ea4"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_080015a0",
                "FUN_08002c2e",
                "FUN_08002640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f6c": {
            "entrypoint": "0x08001f6c",
            "current_name": "process_data_08001f6c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080024e6) */\n/* WARNING: Removing unreachable block (ram,0x080024f8) */\n/* WARNING: Removing unreachable block (ram,0x080024fa) */\n/* WARNING: Removing unreachable block (ram,0x080024fc) */\n/* WARNING: Removing unreachable block (ram,0x08002000) */\n/* WARNING: Removing unreachable block (ram,0x08002012) */\n/* WARNING: Removing unreachable block (ram,0x08002014) */\n/* WARNING: Removing unreachable block (ram,0x08002016) */\n/* WARNING: Removing unreachable block (ram,0x080023f4) */\n/* WARNING: Removing unreachable block (ram,0x08002406) */\n/* WARNING: Removing unreachable block (ram,0x08002408) */\n/* WARNING: Removing unreachable block (ram,0x0800240a) */\n/* WARNING: Removing unreachable block (ram,0x080022d6) */\n/* WARNING: Removing unreachable block (ram,0x080022e8) */\n/* WARNING: Removing unreachable block (ram,0x080022ea) */\n/* WARNING: Removing unreachable block (ram,0x080022ec) */\n\nundefined4\nprocessData_08001f6c(uint **dataPtr,undefined2 param2,undefined2 param3,undefined2 param4,uint *param5,\n            undefined2 param6,uint param7)\n\n{\n  int value1;\n  uint value2;\n  int value3;\n  undefined4 returnValue;\n  uint *pointer;\n  \n  value1 = FUN_080015a0();\n  if (*(char *)((int)dataPtr + 0x3d) == ' ') {\n    do {\n      if ((~(*dataPtr)[6] & 2) != 0) {\n        value3 = 0;\n        goto LAB_08002040;\n      }\n      value3 = FUN_080015a0();\n    } while ((uint)(value3 - value1) < 0x1a);\n    dataPtr[0xc] = (uint *)0x0;\n    *(undefined *)((int)dataPtr + 0x3d) = 0x20;\n    *(undefined *)((int)dataPtr + 0x3e) = 0;\n    *(undefined *)(dataPtr + 0xf) = 0;\n    value3 = 3;\nLAB_08002040:\n    if (value3 == 0) {\n      if (*(char *)(dataPtr + 0xf) == '\\x01') {\n        returnValue = 2;\n      }\n      else {\n        *(undefined *)(dataPtr + 0xf) = 1;\n        if ((**dataPtr & 1) != 1) {\n          **dataPtr = **dataPtr | 1;\n        }\n        **dataPtr = **dataPtr & 0xfffff7ff;\n        *(undefined *)((int)dataPtr + 0x3d) = 0x22;\n        *(undefined *)((int)dataPtr + 0x3e) = 0x40;\n        dataPtr[0x10] = (uint *)0x0;\n        dataPtr[9] = param5;\n        *(undefined2 *)((int)dataPtr + 0x2a) = param6;\n        dataPtr[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(dataPtr + 10) = *(undefined2 *)((int)dataPtr + 0x2a);\n        value3 = FUN_080027f4(dataPtr,param2,param3,param4,param7,value1);\n        if (value3 == 0) {\n          if (*(short *)(dataPtr + 10) == 0) {\n            **dataPtr = **dataPtr | 0x200;\n          }\n          else if (*(short *)(dataPtr + 10) == 1) {\n            **dataPtr = **dataPtr & 0xfffffbff;\n            disableInterrupts();\n            **dataPtr = **dataPtr | 0x200;\n            enableInterrupts();\n          }\n          else if (*(short *)(dataPtr + 10) == 2) {\n            **dataPtr = **dataPtr | 0x800;\n            disableInterrupts();\n            **dataPtr = **dataPtr & 0xfffffbff;\n            enableInterrupts();\n          }\n          else {\n            **dataPtr = **dataPtr | 0x400;\n          }\n          while (*(short *)(dataPtr + 10) != 0) {\n            if (*(ushort *)(dataPtr + 10) < 4) {\n              if (*(short *)(dataPtr + 10) == 1) {\n                value3 = FUN_08002ca8(dataPtr,param7,value1);\n                if (value3 != 0) {\n                  if (dataPtr[0x10] == (uint *)0x20) {\n                    return 3;\n                  }\n                  return 1;\n                }\n                value2 = (*dataPtr)[4];\n                pointer = dataPtr[9];\n                dataPtr[9] = (uint *)((int)pointer + 1);\n                *(char *)pointer = (char)value2;\n                *(short *)(dataPtr + 10) = *(short *)(dataPtr + 10) + -1;\n                *(short *)((int)dataPtr + 0x2a) = *(short *)((int)dataPtr + 0x2a) + -1;\n              }\n              else if (*(short *)(dataPtr + 10) == 2) {\n                do {\n                  if ((~(*dataPtr)[5] & 4) == 0) {\n                    value3 = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((param7 == 0xffffffff) ||\n                        ((param7 != 0 && (value3 = FUN_080015a0(), (uint)(value3 - value1) <= param7)\n                         )));\n                dataPtr[0xc] = (uint *)0x0;\n                *(undefined *)((int)dataPtr + 0x3d) = 0x20;\n                *(undefined *)((int)dataPtr + 0x3e) = 0;\n                *(undefined *)(dataPtr + 0xf) = 0;\n                value3 = 3;\nLAB_080022fa:\n                if (value3 != 0) {\n                  return 3;\n                }\n                disableInterrupts();\n                **dataPtr = **dataPtr | 0x200;\n                value2 = (*dataPtr)[4];\n                pointer = dataPtr[9];\n                dataPtr[9] = (uint *)((int)pointer + 1);\n                *(char *)pointer = (char)value2;\n                *(short *)(dataPtr + 10) = *(short *)(dataPtr + 10) + -1;\n                *(short *)((int)dataPtr + 0x2a) = *(short *)((int)dataPtr + 0x2a) + -1;\n                enableInterrupts();\n                value2 = (*dataPtr)[4];\n                pointer = dataPtr[9];\n                dataPtr[9] = (uint *)((int)pointer + 1);\n                *(char *)pointer = (char)value2;\n                *(short *)(dataPtr + 10) = *(short *)(dataPtr + 10) + -1;\n                *(short *)((int)dataPtr + 0x2a) = *(short *)((int)dataPtr + 0x2a) + -1;\n              }\n              else {\n                do {\n                  if ((~(*dataPtr)[5] & 4) == 0) {\n                    value3 = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((param7 == 0xffffffff) ||\n                        ((param7 != 0 && (value3 = FUN_080015a0(), (uint)(value3 - value1) <= param7)\n                         )));\n                dataPtr[0xc] = (uint *)0x0;\n                *(undefined *)((int)dataPtr + 0x3d) = 0x20;\n                *(undefined *)((int)dataPtr + 0x3e) = 0;\n                *(undefined *)(dataPtr + 0xf) = 0;\n                value3 = 3;\nLAB_08002418:\n                if (value3 != 0) {\n                  return 3;\n                }\n                **dataPtr = **dataPtr & 0xfffffbff;\n                disableInterrupts();\n                value2 = (*dataPtr)[4];\n                pointer = dataPtr[9];\n                dataPtr[9] = (uint *)((int)pointer + 1);\n                *(char *)pointer = (char)value2;\n                *(short *)(dataPtr + 10) = *(short *)(dataPtr + 10) + -1;\n                *(short *)((int)dataPtr + 0x2a) = *(short *)((int)dataPtr + 0x2a) + -1;\n                do {\n                  if ((~(*dataPtr)[5] & 4) == 0) {\n                    value3 = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((param7 == 0xffffffff) ||\n                        ((param7 != 0 && (value3 = FUN_080015a0(), (uint)(value3 - value1) <= param7)\n                         )));\n                dataPtr[0xc] = (uint *)0x0;\n                *(undefined *)((int)dataPtr + 0x3d) = 0x20;\n                *(undefined *)((int)dataPtr + 0x3e) = 0;\n                *(undefined *)(dataPtr + 0xf) = 0;\n                value3 = 3;\nLAB_0800250a:\n                if (value3 != 0) {\n                  return 3;\n                }\n                **dataPtr = **dataPtr | 0x200;\n                value2 = (*dataPtr)[4];\n                pointer = dataPtr[9];\n                dataPtr[9] = (uint *)((int)pointer + 1);\n                *(char *)pointer = (char)value2;\n                *(short *)(dataPtr + 10) = *(short *)(dataPtr + 10) + -1;\n                *(short *)((int)dataPtr + 0x2a) = *(short *)((int)dataPtr + 0x2a) + -1;\n                enableInterrupts();\n                value2 = (*dataPtr)[4];\n                pointer = dataPtr[9];\n                dataPtr[9] = (uint *)((int)pointer + 1);\n                *(char *)pointer = (char)value2;\n                *(short *)(dataPtr + 10) = *(short *)(dataPtr + 10) + -1;\n                *(short *)((int)dataPtr + 0x2a) = *(short *)((int)dataPtr + 0x2a) + -1;\n              }\n            }\n            else {\n              value3 = FUN_08002ca8(dataPtr,param7,value1);\n              if (value3 != 0) {\n                if (dataPtr[0x10] == (uint *)0x20) {\n                  return 3;\n                }\n                return 1;\n              }\n              value2 = (*dataPtr)[4];\n              pointer = dataPtr[9];\n              dataPtr[9] = (uint *)((int)pointer + 1);\n              *(char *)pointer = (char)value2;\n              *(short *)(dataPtr + 10) = *(short *)(dataPtr + 10) + -1;\n              *(short *)((int)dataPtr + 0x2a) = *(short *)((int)dataPtr + 0x2a) + -1;\n              if (((*dataPtr)[5] & 4) == 4) {\n                value2 = (*dataPtr)[4];\n                pointer = dataPtr[9];\n                dataPtr[9] = (uint *)((int)pointer + 1);\n                *(char *)pointer = (char)value2;\n                *(short *)(dataPtr + 10) = *(short *)(dataPtr + 10) + -1;\n                *(short *)((int)dataPtr + 0x2a) = *(short *)((int)dataPtr + 0x2a) + -1;\n              }\n            }\n          }\n          *(undefined *)((int)dataPtr + 0x3d) = 0x20;\n          *(undefined *)((int)dataPtr + 0x3e) = 0;\n          *(undefined *)(dataPtr + 0xf) = 0;\n          returnValue = 0;\n        }\n        else if (dataPtr[0x10] == (uint *)0x4) {\n          *(undefined *)(dataPtr + 0xf) = 0;\n          returnValue = 1;\n        }\n        else {\n          *(undefined *)(dataPtr + 0xf) = 0;\n          returnValue = 3;\n        }\n      }\n    }\n    else {\n      returnValue = 2;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001f6c": "process_data_08001f6c",
                "param_1": "dataPtr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "iVar1": "value1",
                "uVar2": "value2",
                "iVar3": "value3",
                "uVar4": "returnValue",
                "puVar5": "pointer",
                "disableIRQinterrupts": "disableInterrupts",
                "enableIRQinterrupts": "enableInterrupts"
            },
            "calling": [
                "FUN_08004ee8"
            ],
            "called": [
                "FUN_08002ca8",
                "FUN_080015a0",
                "FUN_080027f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002640": {
            "entrypoint": "0x08002640",
            "current_name": "update_flag_and_check_08002640",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080026e8) */\n/* WARNING: Removing unreachable block (ram,0x080026fa) */\n/* WARNING: Removing unreachable block (ram,0x080026fc) */\n/* WARNING: Removing unreachable block (ram,0x080026fe) */\n\nundefined4\nupdateFlagAndCheck_08002640(uint **data,byte flag,undefined2 value1,short condition,uint limit,int threshold)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  **data = **data | 0x100;\n  do {\n    if ((~(*data)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_0800270a;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (result = FUN_080015a0(), (uint)(result - threshold) <= limit))));\n  data[0xc] = (uint *)0x0;\n  *(undefined *)((int)data + 0x3d) = 0x20;\n  *(undefined *)((int)data + 0x3e) = 0;\n  *(undefined *)(data + 0xf) = 0;\n  result = 3;\nLAB_0800270a:\n  if (result == 0) {\n    (*data)[4] = flag & 0xfe;\n    result = FUN_08002ad8(data,0x10002,limit,threshold);\n    if (result == 0) {\n      result = FUN_08002bb4(data,limit,threshold,(*data)[6]);\n      if (result == 0) {\n        if (condition == 1) {\n          (*data)[4] = (uint)(byte)value1;\n        }\n        else {\n          (*data)[4] = (uint)(byte)((ushort)value1 >> 8);\n          result = FUN_08002bb4(data,limit,threshold);\n          if (result != 0) {\n            if (data[0x10] == (uint *)0x4) {\n              **data = **data | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*data)[4] = (uint)(byte)value1;\n        }\n        returnValue = 0;\n      }\n      else if (data[0x10] == (uint *)0x4) {\n        **data = **data | 0x200;\n        returnValue = 1;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n    else if (data[0x10] == (uint *)0x4) {\n      returnValue = 1;\n    }\n    else {\n      returnValue = 3;\n    }\n  }\n  else {\n    returnValue = 3;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002640": "update_flag_and_check_08002640",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "value1",
                "param_4": "condition",
                "param_5": "limit",
                "param_6": "threshold",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08001ccc"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080027f4": {
            "entrypoint": "0x080027f4",
            "current_name": "process_data_080027f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080028ae) */\n/* WARNING: Removing unreachable block (ram,0x080028c0) */\n/* WARNING: Removing unreachable block (ram,0x080028c2) */\n/* WARNING: Removing unreachable block (ram,0x080028c4) */\n/* WARNING: Removing unreachable block (ram,0x08002a6c) */\n/* WARNING: Removing unreachable block (ram,0x08002a7e) */\n/* WARNING: Removing unreachable block (ram,0x08002a80) */\n/* WARNING: Removing unreachable block (ram,0x08002a82) */\n\nundefined4\nprocessData_080027f4(uint **data,byte flag,undefined2 value,short mode,uint limit,int reference)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  **data = **data | 0x400;\n  **data = **data | 0x100;\n  do {\n    if ((~(*data)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_080028d2;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (result = FUN_080015a0(), (uint)(result - reference) <= limit))));\n  data[0xc] = (uint *)0x0;\n  *(undefined *)((int)data + 0x3d) = 0x20;\n  *(undefined *)((int)data + 0x3e) = 0;\n  *(undefined *)(data + 0xf) = 0;\n  result = 3;\nLAB_080028d2:\n  if (result == 0) {\n    (*data)[4] = flag & 0xfe;\n    result = FUN_08002ad8(data,0x10002,limit,reference);\n    if (result == 0) {\n      result = FUN_08002bb4(data,limit,reference,(*data)[6]);\n      if (result == 0) {\n        if (mode == 1) {\n          (*data)[4] = (uint)(byte)value;\n        }\n        else {\n          (*data)[4] = (uint)(byte)((ushort)value >> 8);\n          result = FUN_08002bb4(data,limit,reference);\n          if (result != 0) {\n            if (data[0x10] == (uint *)0x4) {\n              **data = **data | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*data)[4] = (uint)(byte)value;\n        }\n        result = FUN_08002bb4(data,limit,reference);\n        if (result == 0) {\n          **data = **data | 0x100;\n          do {\n            if ((~(*data)[5] & 1) == 0) {\n              result = 0;\n              goto LAB_08002a90;\n            }\n          } while ((limit == 0xffffffff) ||\n                  ((limit != 0 && (result = FUN_080015a0(), (uint)(result - reference) <= limit))));\n          data[0xc] = (uint *)0x0;\n          *(undefined *)((int)data + 0x3d) = 0x20;\n          *(undefined *)((int)data + 0x3e) = 0;\n          *(undefined *)(data + 0xf) = 0;\n          result = 3;\nLAB_08002a90:\n          if (result == 0) {\n            (*data)[4] = (uint)(flag | 1);\n            result = FUN_08002ad8(data,0x10002,limit,reference);\n            if (result == 0) {\n              returnValue = 0;\n            }\n            else if (data[0x10] == (uint *)0x4) {\n              returnValue = 1;\n            }\n            else {\n              returnValue = 3;\n            }\n          }\n          else {\n            returnValue = 3;\n          }\n        }\n        else if (data[0x10] == (uint *)0x4) {\n          **data = **data | 0x200;\n          returnValue = 1;\n        }\n        else {\n          returnValue = 3;\n        }\n      }\n      else if (data[0x10] == (uint *)0x4) {\n        **data = **data | 0x200;\n        returnValue = 1;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n    else if (data[0x10] == (uint *)0x4) {\n      returnValue = 1;\n    }\n    else {\n      returnValue = 3;\n    }\n  }\n  else {\n    returnValue = 3;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080027f4": "process_data_080027f4",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "value",
                "param_4": "mode",
                "param_5": "limit",
                "param_6": "reference",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08001f6c"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "entrypoint": "0x08002ad8",
            "current_name": "check_and_update_flags_08002ad8",
            "code": "\nundefined4 checkAndUpdateFlags_08002ad8(uint **ptrArray,uint flag,uint limit,int comparisonValue)\n\n{\n  int returnValue;\n  char updatedChar;\n  uint updatedValue;\n  bool isUpdated;\n  \n  do {\n    if ((flag >> 0x10 & 0xff) == 1) {\n      updatedValue = flag & ~(*ptrArray)[5] & 0xffff;\n      isUpdated = updatedValue != 0;\n      if (isUpdated) {\n        updatedValue = 1;\n      }\n      updatedChar = (char)updatedValue;\n      if (!isUpdated) {\n        updatedChar = '\\0';\n      }\n    }\n    else {\n      updatedValue = flag & ~(*ptrArray)[6] & 0xffff;\n      isUpdated = updatedValue != 0;\n      if (isUpdated) {\n        updatedValue = 1;\n      }\n      updatedChar = (char)updatedValue;\n      if (!isUpdated) {\n        updatedChar = '\\0';\n      }\n    }\n    if (updatedChar == '\\0') {\n      return 0;\n    }\n    if (((*ptrArray)[5] & 0x400) == 0x400) {\n      **ptrArray = **ptrArray | 0x200;\n      (*ptrArray)[5] = 0xfffffbff;\n      ptrArray[0x10] = (uint *)0x4;\n      ptrArray[0xc] = (uint *)0x0;\n      *(undefined *)((int)ptrArray + 0x3d) = 0x20;\n      *(undefined *)(ptrArray + 0xf) = 0;\n      return 1;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (returnValue = FUN_080015a0(), (uint)(returnValue - comparisonValue) <= limit))));\n  ptrArray[0xc] = (uint *)0x0;\n  *(undefined *)((int)ptrArray + 0x3d) = 0x20;\n  *(undefined *)(ptrArray + 0xf) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08002ad8": "check_and_update_flags_08002ad8",
                "param_1": "ptrArray",
                "param_2": "flag",
                "param_3": "limit",
                "param_4": "comparisonValue",
                "iVar1": "returnValue",
                "cVar2": "updatedChar",
                "uVar3": "updatedValue",
                "bVar4": "isUpdated"
            },
            "calling": [
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bb4": {
            "entrypoint": "0x08002bb4",
            "current_name": "check_and_modify_data_08002bb4",
            "code": "\nundefined4 check_and_modify_data_08002bb4(int *data_ptr,uint data_size,int required_size)\n\n{\n  int error_code;\n  \n  while( true ) {\n    if ((*(uint *)(*data_ptr + 0x14) & 0x80) == 0x80) {\n      return 0;\n    }\n    error_code = FUN_08002d3c(data_ptr);\n    if (error_code != 0) break;\n    if ((data_size != 0xffffffff) &&\n       ((data_size == 0 || (error_code = FUN_080015a0(), data_size < (uint)(error_code - required_size))))) {\n      data_option = data_option | 0x20;\n      data_counter = 0;\n      *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n      *(undefined *)(data_ptr + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002bb4": "check_and_modify_data_08002bb4",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "required_size",
                "iVar1": "error_code",
                "param_1[0x10]": "data_option",
                "param_1[0xc]": "data_counter"
            },
            "calling": [
                "FUN_08001ccc",
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c2e": {
            "entrypoint": "0x08002c2e",
            "current_name": "check_and_modify_data_08002c2e",
            "code": "\nundefined4 check_and_modify_data_08002c2e(int *data_ptr,uint data_length,int offset)\n\n{\n  int result;\n  \n  while( true ) {\n    if ((*(uint *)(*data_ptr + 0x14) & 4) == 4) {\n      return 0;\n    }\n    result = FUN_08002d3c(data_ptr);\n    if (result != 0) break;\n    if ((data_length != 0xffffffff) &&\n       ((data_length == 0 || (result = FUN_080015a0(), data_length < (uint)(result - offset))))) {\n      data_ptr[0x10] = data_ptr[0x10] | 0x20;\n      data_ptr[0xc] = 0;\n      *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n      *(undefined *)(data_ptr + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002c2e": "check_and_modify_data_08002c2e",
                "param_1": "data_ptr",
                "param_2": "data_length",
                "param_3": "offset",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08001ccc"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca8": {
            "entrypoint": "0x08002ca8",
            "current_name": "check_for_overflow_08002ca8",
            "code": "\nundefined4 checkForOverflow_08002ca8(int *array,uint array_size,int offset)\n\n{\n  int tempVar;\n  \n  while( true ) {\n    if ((*(uint *)(*array + 0x14) & 0x40) == 0x40) {\n      return 0;\n    }\n    if ((*(uint *)(*array + 0x14) & 0x10) == 0x10) break;\n    if ((array_size == 0) || (tempVar = FUN_080015a0(), array_size < (uint)(tempVar - offset))) {\n      array[0x10] = array[0x10] | 0x20;\n      *(undefined *)((int)array + 0x3d) = 0x20;\n      *(undefined *)(array + 0xf) = 0;\n      return 3;\n    }\n  }\n  *(undefined4 *)(*array + 0x14) = 0xffffffef;\n  array[0x10] = 0;\n  array[0xc] = 0;\n  *(undefined *)((int)array + 0x3d) = 0x20;\n  *(undefined *)(array + 0xf) = 0;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002ca8": "check_for_overflow_08002ca8",
                "param_1": "array",
                "param_2": "array_size",
                "param_3": "offset",
                "iVar1": "tempVar"
            },
            "calling": [
                "FUN_08001f6c"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d3c": {
            "entrypoint": "0x08002d3c",
            "current_name": "check_flag_status_08002d3c",
            "code": "\nbool checkFlagStatus_08002d3c(int *flagData)\n\n{\n  bool isFlagSet;\n  \n  isFlagSet = (*(uint *)(*flagData + 0x14) & 0x400) == 0x400;\n  if (isFlagSet) {\n    *(undefined4 *)(*flagData + 0x14) = 0xfffffbff;\n    flagData[0x10] = 4;\n    flagData[0xc] = 0;\n    *(undefined *)((int)flagData + 0x3d) = 0x20;\n    *(undefined *)(flagData + 0xf) = 0;\n  }\n  return isFlagSet;\n}\n\n",
            "renaming": {
                "FUN_08002d3c": "check_flag_status_08002d3c",
                "param_1": "flagData",
                "bVar1": "isFlagSet"
            },
            "calling": [
                "FUN_08002bb4",
                "FUN_08002c2e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d8a": {
            "entrypoint": "0x08002d8a",
            "current_name": "FUNC_08002d8a",
            "code": "\nvoid FUNC_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d8a": "FUNC_08002d8a"
            },
            "calling": [
                "FUN_080014f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d98": {
            "entrypoint": "0x08002d98",
            "current_name": "check_and_update_flags_08002d98",
            "code": "\n\n\nundefined4 check_and_update_flags_08002d98(uint *flags)\n\n{\n  int start_time;\n  int current_time;\n  undefined4 result;\n  bool original_flag4_value;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0x10000)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (flags[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (flags[1] == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (flags[1] == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (flags[1] == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (flags[1] == 0) {\n        start_time = FUN_080015a0();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          current_time = FUN_080015a0();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        start_time = FUN_080015a0();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          current_time = FUN_080015a0();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (flags[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = flags[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n    else if (flags[4] == 0) {\n      _DAT_42420000 = 0;\n      start_time = FUN_080015a0();\n      while ((_DAT_40021000 & 2) != 0) {\n        current_time = FUN_080015a0();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      start_time = FUN_080015a0();\n      while ((_DAT_40021000 & 2) == 0) {\n        current_time = FUN_080015a0();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = flags[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flags[6] == 0) {\n      _DAT_42420480 = 0;\n      start_time = FUN_080015a0();\n      while ((_DAT_40021024 & 2) != 0) {\n        current_time = FUN_080015a0();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      start_time = FUN_080015a0();\n      while ((_DAT_40021024 & 2) == 0) {\n        current_time = FUN_080015a0();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      FUN_08003568(1);\n    }\n  }\n  if ((*flags & 4) != 0) {\n    original_flag4_value = (_DAT_4002101c & 0x10000000) == 0;\n    if (original_flag4_value) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      start_time = FUN_080015a0();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        current_time = FUN_080015a0();\n        if (100 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    if (flags[3] == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (flags[3] == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (flags[3] == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (flags[3] == 0) {\n      start_time = FUN_080015a0();\n      while ((_DAT_40021020 & 2) != 0) {\n        current_time = FUN_080015a0();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      start_time = FUN_080015a0();\n      while ((_DAT_40021020 & 2) == 0) {\n        current_time = FUN_080015a0();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    if (original_flag4_value) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (flags[7] == 0) {\nLAB_0800324a:\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (flags[7] == 2) {\n    _DAT_42420060 = 0;\n    start_time = FUN_080015a0();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (flags[8] == 0x10000) {\n          _DAT_40021004 = flags[2] | _DAT_40021004 & 0xfffdffff;\n        }\n        _DAT_40021004 = flags[9] | flags[8] | _DAT_40021004 & 0xffc2ffff;\n        _DAT_42420060 = 1;\n        start_time = FUN_080015a0();\n        while ((_DAT_40021000 & 0x2000000) == 0) {\n          current_time = FUN_080015a0();\n          if (2 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      current_time = FUN_080015a0();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    start_time = FUN_080015a0();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) goto LAB_0800324a;\n      current_time = FUN_080015a0();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002d98": "check_and_update_flags_08002d98",
                "param_1": "flags",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "uVar3": "result",
                "bVar4": "original_flag4_value"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08003568"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003260": {
            "entrypoint": "0x08003260",
            "current_name": "update_configuration_08003260",
            "code": "\n\n\nundefined4 updateConfiguration_08003260(uint *configParams,uint newConfig)\n\n{\n  int initialValue;\n  int currentValue;\n  uint result;\n  undefined4 success;\n  \n  if (((_DAT_40022000 & 7) < newConfig) &&\n     (_DAT_40022000 = newConfig | _DAT_40022000 & 0xfffffff8, newConfig != (newConfig & 7))) {\n    success = 1;\n  }\n  else {\n    if ((*configParams & 2) != 0) {\n      _DAT_40021004 = configParams[2] | _DAT_40021004 & 0xffffff0f;\n    }\n    if ((*configParams & 1) == 0) {\nLAB_08003394:\n      if ((newConfig < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = newConfig | _DAT_40022000 & 0xfffffff8, newConfig != (newConfig & 7))) {\n        success = 1;\n      }\n      else {\n        if ((*configParams & 4) != 0) {\n          _DAT_40021004 = configParams[3] | _DAT_40021004 & 0xfffff8ff;\n        }\n        if ((*configParams & 8) != 0) {\n          _DAT_40021004 = configParams[4] << 3 | _DAT_40021004 & 0xffffc7ff;\n        }\n        result = FUN_08003440();\n        DAT_20000018 = result >> (&DAT_08009eb0)[_DAT_40021004 >> 4 & 0xf];\n        FUN_0800151c(0xf);\n        success = 0;\n      }\n    }\n    else {\n      if (configParams[1] == 1) {\n        if ((_DAT_40021000 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((configParams[1] != 2) && ((_DAT_40021000 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40021004 = configParams[1] | _DAT_40021004 & 0xfffffffc;\n      initialValue = FUN_080015a0();\n      if (configParams[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_08003394;\n          currentValue = FUN_080015a0();\n        } while ((uint)(currentValue - initialValue) < 0x1389);\n        success = 3;\n      }\n      else if (configParams[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_08003394;\n          currentValue = FUN_080015a0();\n        } while ((uint)(currentValue - initialValue) < 0x1389);\n        success = 3;\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_08003394;\n          currentValue = FUN_080015a0();\n        } while ((uint)(currentValue - initialValue) < 0x1389);\n        success = 3;\n      }\n    }\n  }\n  return success;\n}\n\n",
            "renaming": {
                "FUN_08003260": "update_configuration_08003260",
                "param_1": "configParams",
                "param_2": "newConfig",
                "iVar1": "initialValue",
                "iVar2": "currentValue",
                "uVar3": "result",
                "uVar4": "success"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_0800151c",
                "FUN_08003440"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003440": {
            "entrypoint": "0x08003440",
            "current_name": "calculate_clock_speed_08003440",
            "code": "\n\n\nuint calculateClockSpeed_08003440(void)\n\n{\n  undefined2 configValue;\n  undefined4 constantA;\n  undefined4 constantB;\n  undefined4 constantC;\n  undefined4 constantD;\n  uint multiplier;\n  undefined4 tempVar1;\n  uint globalVariable;\n  uint clockSpeed;\n  uint tempVar2;\n  \n  constantA = 0x5040302;\n  constantB = 0x9080706;\n  constantC = 0xd0c0b0a;\n  constantD = 0x10100f0e;\n  configValue = 0x201;\n  tempVar1 = 0;\n  tempVar2 = 0;\n  multiplier = 0;\n  clockSpeed = 0;\n  globalVariable = _DAT_40021004;\n  if ((_DAT_40021004 & 0xc) == 4) {\n    clockSpeed = 8000000;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    multiplier = (uint)*(byte *)((int)&constantA + (_DAT_40021004 >> 0x12 & 0xf));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      tempVar2 = multiplier * 4000000;\n    }\n    else {\n      tempVar2 = (multiplier * 8000000) / (uint)*(byte *)((int)&configValue + (_DAT_40021004 >> 0x11 & 1))\n      ;\n    }\n    clockSpeed = tempVar2;\n  }\n  else {\n    clockSpeed = 8000000;\n  }\n  return clockSpeed;\n}\n\n",
            "renaming": {
                "FUN_08003440": "calculate_clock_speed_08003440",
                "local_30": "configValue",
                "local_2c": "constantA",
                "uStack_28": "constantB",
                "uStack_24": "constantC",
                "uStack_20": "constantD",
                "local_1c": "multiplier",
                "local_18": "tempVar1",
                "local_14": "globalVariable",
                "local_10": "clockSpeed",
                "local_c": "tempVar2"
            },
            "calling": [
                "FUN_08003260"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003504": {
            "entrypoint": "0x08003504",
            "current_name": "get_dat_value_08003504",
            "code": "\nundefined4 get_dat_value_08003504(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_08003504": "get_dat_value_08003504"
            },
            "calling": [
                "FUN_080052a0",
                "FUN_08003540",
                "FUN_08003518"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003518": {
            "entrypoint": "0x08003518",
            "current_name": "calculate_shifted_value_08003518",
            "code": "\n\n\nuint calculateShiftedValue_08003518(void)\n\n{\n  uint result;\n  \n  result = FUN_08003504();\n  return result >> *(shiftAmount *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 8 & 7));\n}\n\n",
            "renaming": {
                "FUN_08003518": "calculate_shifted_value_08003518",
                "uVar1": "result",
                "sbyte": "shiftAmount"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_080046ec"
            ],
            "called": [
                "FUN_08003504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003540": {
            "entrypoint": "0x08003540",
            "current_name": "shift_value_based_on_data_08003540",
            "code": "\n\n\nuint shiftValueBasedOnData_08003540(void)\n\n{\n  uint returnValue;\n  \n  returnValue = FUN_08003504();\n  return returnValue >> *(sbyte *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 0xb & 7));\n}\n\n",
            "renaming": {
                "FUN_08003540": "shift_value_based_on_data_08003540",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_080046ec"
            ],
            "called": [
                "FUN_08003504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003568": {
            "entrypoint": "0x08003568",
            "current_name": "delay_function_08003568",
            "code": "\nvoid delayFunction_08003568(int inputValue)\n\n{\n  bool isDelayOver;\n  int delayCounter;\n  \n  delayCounter = inputValue * (DAT_20000018 / 8000);\n  do {\n    isDelayOver = delayCounter != 0;\n    delayCounter = delayCounter + -1;\n  } while (isDelayOver);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003568": "delay_function_08003568",
                "param_1": "inputValue",
                "local_c": "delayCounter",
                "bVar1": "isDelayOver"
            },
            "calling": [
                "FUN_08002d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035a4": {
            "entrypoint": "0x080035a4",
            "current_name": "check_and_process_data_080035a4",
            "code": "\nundefined4 checkAndProcessData_080035a4(undefined4 *dataPtr)\n\n{\n  undefined4 result;\n  \n  if (dataPtr == (undefined4 *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)dataPtr + 0x3d) == '\\0') {\n      *(undefined *)(dataPtr + 0xf) = 0;\n      FUNC_080035fa(dataPtr);\n    }\n    *(undefined *)((int)dataPtr + 0x3d) = 2;\n    FUN_08003c94(*dataPtr,dataPtr + 1);\n    *(undefined *)((int)dataPtr + 0x3d) = 1;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080035a4": "check_and_process_data_080035a4",
                "param_1": "dataPtr",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [
                "FUN_08003c94",
                "FUN_080035fa"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035fa": {
            "entrypoint": "0x080035fa",
            "current_name": "FUNC_080035fa",
            "code": "\nvoid FUNC_080035fa(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035fa": "FUNC_080035fa"
            },
            "calling": [
                "FUN_080035a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800360c": {
            "entrypoint": "0x0800360c",
            "current_name": "set_bitwise_or_0800360c",
            "code": "\nundefined4 setBitwiseOR_0800360c(uint **ptr)\n\n{\n  (*ptr)[3] = (*ptr)[3] | 1;\n  **ptr = **ptr | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800360c": "set_bitwise_or_0800360c",
                "param_1": "ptr"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003640": {
            "entrypoint": "0x08003640",
            "current_name": "check_and_update_state_08003640",
            "code": "\nundefined4 check_and_update_state_08003640(undefined4 *data_ptr)\n\n{\n  undefined4 result;\n  \n  if (data_ptr == (undefined4 *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)data_ptr + 0x3d) == '\\0') {\n      *(undefined *)(data_ptr + 0xf) = 0;\n      FUNC_08003696(data_ptr);\n    }\n    *(undefined *)((int)data_ptr + 0x3d) = 2;\n    FUN_08003c94(*data_ptr,data_ptr + 1);\n    *(undefined *)((int)data_ptr + 0x3d) = 1;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003640": "check_and_update_state_08003640",
                "param_1": "data_ptr",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_08003c94",
                "FUN_08003696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003696": {
            "entrypoint": "0x08003696",
            "current_name": "FUNC_08003696",
            "code": "\nvoid FUNC_08003696(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003696": "FUNC_08003696"
            },
            "calling": [
                "FUN_08003640"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036a8": {
            "entrypoint": "0x080036a8",
            "current_name": "initialize_flags_080036a8",
            "code": "\nundefined4 initializeFlags_080036a8(uint **flagsPtr,undefined4 value)\n\n{\n  FUN_080041ea(*flagsPtr,value,1);\n  if (*flagsPtr == (uint *)0x40012c00) {\n    (*flagsPtr)[0x11] = (*flagsPtr)[0x11] | 0x8000;\n  }\n  **flagsPtr = **flagsPtr | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080036a8": "initialize_flags_080036a8",
                "param_1": "flagsPtr",
                "param_2": "value"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080041ea"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f8": {
            "entrypoint": "0x080036f8",
            "current_name": "process_params_080036f8",
            "code": "\nvoid processParams_080036f8(int *input)\n\n{\n  if (((*(uint *)(*input + 0x10) & 2) == 2) && ((*(uint *)(*input + 0xc) & 2) == 2)) {\n    *(undefined4 *)(*input + 0x10) = 0xfffffffd;\n    *(undefined *)(input + 7) = 1;\n    if ((*(uint *)(*input + 0x18) & 3) == 0) {\n      FUNC_08003c4a(input);\n      FUNC_08003c6e(input);\n    }\n    else {\n      FUNC_08003c5c(input);\n    }\n    *(undefined *)(input + 7) = 0;\n  }\n  if (((*(uint *)(*input + 0x10) & 4) == 4) && ((*(uint *)(*input + 0xc) & 4) == 4)) {\n    *(undefined4 *)(*input + 0x10) = 0xfffffffb;\n    *(undefined *)(input + 7) = 2;\n    if ((*(uint *)(*input + 0x18) & 0x300) == 0) {\n      FUNC_08003c4a(input);\n      FUNC_08003c6e(input);\n    }\n    else {\n      FUNC_08003c5c(input);\n    }\n    *(undefined *)(input + 7) = 0;\n  }\n  if (((*(uint *)(*input + 0x10) & 8) == 8) && ((*(uint *)(*input + 0xc) & 8) == 8)) {\n    *(undefined4 *)(*input + 0x10) = 0xfffffff7;\n    *(undefined *)(input + 7) = 4;\n    if ((*(uint *)(*input + 0x1c) & 3) == 0) {\n      FUNC_08003c4a(input);\n      FUNC_08003c6e(input);\n    }\n    else {\n      FUNC_08003c5c(input);\n    }\n    *(undefined *)(input + 7) = 0;\n  }\n  if (((*(uint *)(*input + 0x10) & 0x10) == 0x10) && ((*(uint *)(*input + 0xc) & 0x10) == 0x10))\n  {\n    *(undefined4 *)(*input + 0x10) = 0xffffffef;\n    *(undefined *)(input + 7) = 8;\n    if ((*(uint *)(*input + 0x1c) & 0x300) == 0) {\n      FUNC_08003c4a(input);\n      FUNC_08003c6e(input);\n    }\n    else {\n      FUNC_08003c5c(input);\n    }\n    *(undefined *)(input + 7) = 0;\n  }\n  if (((*(uint *)(*input + 0x10) & 1) == 1) && ((*(uint *)(*input + 0xc) & 1) == 1)) {\n    *(undefined4 *)(*input + 0x10) = 0xfffffffe;\n    FUN_08004f78(input);\n  }\n  if (((*(uint *)(*input + 0x10) & 0x80) == 0x80) && ((*(uint *)(*input + 0xc) & 0x80) == 0x80))\n  {\n    *(undefined4 *)(*input + 0x10) = 0xffffff7f;\n    FUNC_08004378(input);\n  }\n  if (((*(uint *)(*input + 0x10) & 0x40) == 0x40) && ((*(uint *)(*input + 0xc) & 0x40) == 0x40))\n  {\n    *(undefined4 *)(*input + 0x10) = 0xffffffbf;\n    FUNC_08003c80(input);\n  }\n  if (((*(uint *)(*input + 0x10) & 0x20) == 0x20) && ((*(uint *)(*input + 0xc) & 0x20) == 0x20))\n  {\n    *(undefined4 *)(*input + 0x10) = 0xffffffdf;\n    FUNC_08004366(input);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f8": "process_params_080036f8",
                "param_1": "input"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_08004366",
                "FUN_08004378",
                "FUN_08004f78",
                "FUN_08003c5c",
                "FUN_08003c4a",
                "FUN_08003c6e",
                "FUN_08003c80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003908": {
            "entrypoint": "0x08003908",
            "current_name": "update_permissions_08003908",
            "code": "\nundefined4 updatePermissions_08003908(int *array,int value,undefined4 option)\n\n{\n  undefined4 returnValue;\n  \n  if (*(char *)(array + 0xf) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(array + 0xf) = 1;\n    *(undefined *)((int)array + 0x3d) = 2;\n    switch(option) {\n    case 0:\n      FUN_08003d60(*array,value);\n      *(uint *)(*array + 0x18) = *(uint *)(*array + 0x18) | 8;\n      *(uint *)(*array + 0x18) = *(uint *)(*array + 0x18) & 0xfffffffb;\n      *(uint *)(*array + 0x18) = *(uint *)(value + 0x10) | *(uint *)(*array + 0x18);\n      break;\n    case 4:\n      FUN_08003e38(*array,value);\n      *(uint *)(*array + 0x18) = *(uint *)(*array + 0x18) | 0x800;\n      *(uint *)(*array + 0x18) = *(uint *)(*array + 0x18) & 0xfffffbff;\n      *(uint *)(*array + 0x18) = *(int *)(value + 0x10) << 8 | *(uint *)(*array + 0x18);\n      break;\n    case 8:\n      FUN_08003f18(*array,value);\n      *(uint *)(*array + 0x1c) = *(uint *)(*array + 0x1c) | 8;\n      *(uint *)(*array + 0x1c) = *(uint *)(*array + 0x1c) & 0xfffffffb;\n      *(uint *)(*array + 0x1c) = *(uint *)(value + 0x10) | *(uint *)(*array + 0x1c);\n      break;\n    case 0xc:\n      FUN_08003ff8(*array,value);\n      *(uint *)(*array + 0x1c) = *(uint *)(*array + 0x1c) | 0x800;\n      *(uint *)(*array + 0x1c) = *(uint *)(*array + 0x1c) & 0xfffffbff;\n      *(uint *)(*array + 0x1c) = *(int *)(value + 0x10) << 8 | *(uint *)(*array + 0x1c);\n    }\n    *(undefined *)((int)array + 0x3d) = 1;\n    *(undefined *)(array + 0xf) = 0;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08003908": "update_permissions_08003908",
                "param_1": "array",
                "param_2": "value",
                "param_3": "option",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_08003ff8",
                "FUN_08003e38",
                "FUN_08003f18",
                "FUN_08003d60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a94": {
            "entrypoint": "0x08003a94",
            "current_name": "process_data_08003a94",
            "code": "\nundefined4 process_data_08003a94(int *data_ptr,uint *info_ptr)\n\n{\n  undefined4 result;\n  uint info_value;\n  \n  if (*(char *)(data_ptr + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(data_ptr + 0xf) = 1;\n    *(undefined *)((int)data_ptr + 0x3d) = 2;\n    *(uint *)(*data_ptr + 8) = *(uint *)(*data_ptr + 8) & 0xffff0088;\n    info_value = *info_ptr;\n    if (info_value == 0x40) {\n      FUN_080040a0(*data_ptr,info_ptr[1],info_ptr[3]);\n      FUN_0800416a(*data_ptr,0x40);\n    }\n    else if (info_value < 0x41) {\n      if (info_value == 0x10) {\n        FUN_0800416a(*data_ptr,0x10);\n      }\n      else if (info_value < 0x11) {\n        if (info_value == 0) {\n          FUN_0800416a(*data_ptr,0);\n        }\n      }\n      else if (info_value == 0x20) {\n        FUN_0800416a(*data_ptr,0x20);\n      }\n      else if (info_value == 0x30) {\n        FUN_0800416a(*data_ptr,0x30);\n      }\n    }\n    else if (info_value == 0x70) {\n      FUN_080041a8(*data_ptr,info_ptr[2],info_ptr[1],info_ptr[3]);\n      *(uint *)(*data_ptr + 8) = *(uint *)(*data_ptr + 8) & 0xffffff88 | 0x77;\n    }\n    else if (info_value < 0x71) {\n      if (info_value == 0x50) {\n        FUN_080040a0(*data_ptr,info_ptr[1],info_ptr[3]);\n        FUN_0800416a(*data_ptr,0x50);\n      }\n      else if (info_value == 0x60) {\n        FUN_08004104(*data_ptr,info_ptr[1],info_ptr[3]);\n        FUN_0800416a(*data_ptr,0x60);\n      }\n    }\n    else if (info_value == 0x1000) {\n      *(uint *)(*data_ptr + 8) = *(uint *)(*data_ptr + 8) & 0xfffffff8;\n    }\n    else if (info_value == 0x2000) {\n      FUN_080041a8(*data_ptr,info_ptr[2],info_ptr[1],info_ptr[3]);\n      *(uint *)(*data_ptr + 8) = *(uint *)(*data_ptr + 8) | 0x4000;\n    }\n    *(undefined *)((int)data_ptr + 0x3d) = 1;\n    *(undefined *)(data_ptr + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003a94": "process_data_08003a94",
                "param_1": "data_ptr",
                "param_2": "info_ptr",
                "uVar1": "result",
                "uVar2": "info_value"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [
                "FUN_08004104",
                "FUN_080040a0",
                "FUN_0800416a",
                "FUN_080041a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c4a": {
            "entrypoint": "0x08003c4a",
            "current_name": "FUNC_08003c4a",
            "code": "\nvoid FUNC_08003c4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c4a": "FUNC_08003c4a"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c5c": {
            "entrypoint": "0x08003c5c",
            "current_name": "FUNC_08003c5c",
            "code": "\nvoid FUNC_08003c5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c5c": "FUNC_08003c5c"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c6e": {
            "entrypoint": "0x08003c6e",
            "current_name": "FUNC_08003c6e",
            "code": "\nvoid FUNC_08003c6e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c6e": "FUNC_08003c6e"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c80": {
            "entrypoint": "0x08003c80",
            "current_name": "FUNC_08003c80",
            "code": "\nvoid FUNC_08003c80(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c80": "FUNC_08003c80"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c94": {
            "entrypoint": "0x08003c94",
            "current_name": "update_memory_regions_08003c94",
            "code": "\nvoid updateMemoryRegions_08003c94(uint *memoryRegion,uint *newValues)\n\n{\n  uint currentValue;\n  \n  currentValue = *memoryRegion;\n  if ((((memoryRegion == (uint *)0x40012c00) || (memoryRegion == (uint *)0x40000000)) ||\n      (memoryRegion == (uint *)0x40000400)) || (memoryRegion == (uint *)0x40000800)) {\n    currentValue = newValues[1] | currentValue & 0xffffff8f;\n  }\n  if (((memoryRegion == (uint *)0x40012c00) || (memoryRegion == (uint *)0x40000000)) ||\n     ((memoryRegion == (uint *)0x40000400 || (memoryRegion == (uint *)0x40000800)))) {\n    currentValue = newValues[3] | currentValue & 0xfffffcff;\n  }\n  *memoryRegion = newValues[5] | currentValue & 0xffffff7f;\n  memoryRegion[0xb] = newValues[2];\n  memoryRegion[10] = *newValues;\n  if (memoryRegion == (uint *)0x40012c00) {\n    updateValue = newValues[4];\n  }\n  memoryRegion[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c94": "update_memory_regions_08003c94",
                "param_1": "memoryRegion",
                "param_2": "newValues",
                "local_c": "currentValue",
                "uRam40012c30": "updateValue"
            },
            "calling": [
                "FUN_08003640",
                "FUN_080035a4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003d60": {
            "entrypoint": "0x08003d60",
            "current_name": "update_settings_08003d60",
            "code": "\nvoid updateSettings_08003d60(int settingsAddress,uint *settingsData)\n\n{\n  uint newValue;\n  uint updatedValue2;\n  uint currentValue;\n  \n  *(uint *)(settingsAddress + 0x20) = *(uint *)(settingsAddress + 0x20) & 0xfffffffe;\n  currentValue = *(uint *)(settingsAddress + 4);\n  newValue = *settingsData;\n  updatedValue2 = data2 | *(uint *)(settingsAddress + 0x20) & 0xfffffffd;\n  if (settingsAddress == 0x40012c00) {\n    updatedValue2 = (data3 | updatedValue2 & 0xfffffff7) & 0xfffffffb;\n    currentValue = data6 | data5 | currentValue & 0xfffffcff;\n  }\n  *(uint *)(settingsAddress + 4) = currentValue;\n  *(uint *)(settingsAddress + 0x18) = newValue | *(uint *)(settingsAddress + 0x18) & 0xffffff8c;\n  *(uint *)(settingsAddress + 0x34) = data1;\n  *(uint *)(settingsAddress + 0x20) = updatedValue2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003d60": "update_settings_08003d60",
                "param_1": "settingsAddress",
                "param_2": "settingsData",
                "uVar1": "newValue",
                "uVar2": "updatedValue2",
                "local_10": "currentValue",
                "param_2[2]": "data2",
                "param_2[3]": "data3",
                "param_2[6]": "data6",
                "param_2[5]": "data5",
                "param_2[1]": "data1"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e38": {
            "entrypoint": "0x08003e38",
            "current_name": "update_parameters_08003e38",
            "code": "\nvoid updateParameters_08003e38(int baseAddress,int *parameters)\n\n{\n  int tempVar1;\n  uint tempVar2;\n  uint tempVar3;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xffffffef;\n  tempVar3 = *(uint *)(baseAddress + 4);\n  tempVar1 = *parameters;\n  tempVar2 = parameters[2] << 4 | *(uint *)(baseAddress + 0x20) & 0xffffffdf;\n  if (baseAddress == 0x40012c00) {\n    tempVar2 = (parameters[3] << 4 | tempVar2 & 0xffffff7f) & 0xffffffbf;\n    tempVar3 = parameters[6] << 2 | parameters[5] << 2 | tempVar3 & 0xfffff3ff;\n  }\n  *(uint *)(baseAddress + 4) = tempVar3;\n  *(uint *)(baseAddress + 0x18) = tempVar1 << 8 | *(uint *)(baseAddress + 0x18) & 0xffff8cff;\n  *(int *)(baseAddress + 0x38) = parameters[1];\n  *(uint *)(baseAddress + 0x20) = tempVar2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e38": "update_parameters_08003e38",
                "param_1": "baseAddress",
                "param_2": "parameters",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "local_10": "tempVar3"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f18": {
            "entrypoint": "0x08003f18",
            "current_name": "update_memory_08003f18",
            "code": "\nvoid updateMemory_08003f18(int memory_address,uint *data)\n\n{\n  uint newValue1;\n  uint newValue2;\n  uint tempValue;\n  \n  *(uint *)(memory_address + 0x20) = *(uint *)(memory_address + 0x20) & 0xfffffeff;\n  tempValue = *(uint *)(memory_address + 4);\n  newValue1 = *data;\n  newValue2 = data[2] << 8 | *(uint *)(memory_address + 0x20) & 0xfffffdff;\n  if (memory_address == 0x40012c00) {\n    newValue2 = (data[3] << 8 | newValue2 & 0xfffff7ff) & 0xfffffbff;\n    tempValue = data[6] << 4 | data[5] << 4 | tempValue & 0xffffcfff;\n  }\n  *(uint *)(memory_address + 4) = tempValue;\n  *(uint *)(memory_address + 0x1c) = newValue1 | *(uint *)(memory_address + 0x1c) & 0xffffff8c;\n  *(uint *)(memory_address + 0x3c) = data[1];\n  *(uint *)(memory_address + 0x20) = newValue2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f18": "update_memory_08003f18",
                "param_1": "memory_address",
                "param_2": "data",
                "uVar1": "newValue1",
                "uVar2": "newValue2",
                "local_10": "tempValue"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff8": {
            "entrypoint": "0x08003ff8",
            "current_name": "update_data_08003ff8",
            "code": "\nvoid updateData_08003ff8(int dataAddress,int *paramArray)\n\n{\n  int firstParamValue;\n  int secondParamValue;\n  uint localValue;\n  \n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & 0xffffefff;\n  localValue = *(uint *)(dataAddress + 4);\n  firstParamValue = *paramArray;\n  secondParamValue = paramArray[2];\n  if (dataAddress == 0x40012c00) {\n    localValue = paramArray[5] << 6 | localValue & 0xffffbfff;\n  }\n  *(uint *)(dataAddress + 4) = localValue;\n  *(uint *)(dataAddress + 0x1c) = firstParamValue << 8 | *(uint *)(dataAddress + 0x1c) & 0xffff8cff;\n  *(int *)(dataAddress + 0x40) = paramArray[1];\n  *(uint *)(dataAddress + 0x20) = secondParamValue << 0xc | *(uint *)(dataAddress + 0x20) & 0xffffdfff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff8": "update_data_08003ff8",
                "param_1": "dataAddress",
                "param_2": "paramArray",
                "local_c": "localValue",
                "iVar1": "firstParamValue",
                "iVar2": "secondParamValue"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040a0": {
            "entrypoint": "0x080040a0",
            "current_name": "update_param_values_080040a0",
            "code": "\nvoid updateParamValues_080040a0(int inputAddress,uint mask,int shiftValue)\n\n{\n  uint savedValue;\n  \n  savedValue = *(uint *)(inputAddress + 0x20);\n  *(uint *)(inputAddress + 0x20) = *(uint *)(inputAddress + 0x20) & 0xfffffffe;\n  *(uint *)(inputAddress + 0x18) = shiftValue << 4 | *(uint *)(inputAddress + 0x18) & 0xffffff0f;\n  *(uint *)(inputAddress + 0x20) = mask | savedValue & 0xfffffff5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040a0": "update_param_values_080040a0",
                "param_1": "inputAddress",
                "param_2": "mask",
                "param_3": "shiftValue",
                "uVar1": "savedValue"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004104": {
            "entrypoint": "0x08004104",
            "current_name": "update_parameters_08004104",
            "code": "\nvoid updateParameters_08004104(int ptr,int value1,int value2)\n\n{\n  *(uint *)(ptr + 0x20) = *(uint *)(ptr + 0x20) & 0xffffffef;\n  *(uint *)(ptr + 0x18) = value2 << 0xc | *(uint *)(ptr + 0x18) & 0xffff0fff;\n  *(uint *)(ptr + 0x20) = value1 << 4 | *(uint *)(ptr + 0x20) & 0xffffff5f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004104": "update_parameters_08004104",
                "param_1": "ptr",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800416a": {
            "entrypoint": "0x0800416a",
            "current_name": "update_param_0800416a",
            "code": "\nvoid updateParam_0800416a(int baseAddress,ushort newData)\n\n{\n  *(uint *)(baseAddress + 8) = *(uint *)(baseAddress + 8) & 0xffffff8f | (uint)(newData | 7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800416a": "update_param_0800416a",
                "param_1": "baseAddress",
                "param_2": "newData"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a8": {
            "entrypoint": "0x080041a8",
            "current_name": "update_value_080041a8",
            "code": "\nvoid updateValue_080041a8(int baseAddress,uint value1,uint value2,int value3)\n\n{\n  *(uint *)(baseAddress + 8) = value1 | value3 << 8 | value2 | *(uint *)(baseAddress + 8) & 0xffff00ff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a8": "update_value_080041a8",
                "param_1": "baseAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ea": {
            "entrypoint": "0x080041ea",
            "current_name": "update_bit_value_080041ea",
            "code": "\nvoid updateBitValue_080041ea(int address,uint bitPosition,int bitValue)\n\n{\n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) | bitValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041ea": "update_bit_value_080041ea",
                "param_1": "address",
                "param_2": "bitPosition",
                "param_3": "bitValue"
            },
            "calling": [
                "FUN_080036a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800422e": {
            "entrypoint": "0x0800422e",
            "current_name": "check_and_update_param_0800422e",
            "code": "\nundefined4 checkAndUpdateParam_0800422e(int *paramArr,uint *dataArr)\n\n{\n  undefined4 returnValue;\n  \n  if (*(char *)(paramArr + 0xf) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(paramArr + 0xf) = 1;\n    *(uint *)(*paramArr + 0x44) =\n         dataArr[6] |\n         (dataArr[6] |\n         (dataArr[5] |\n         (dataArr[4] |\n         (*dataArr | (dataArr[1] | (dataArr[2] | dataArr[3] & 0xfffffcff) & 0xfffffbff) & 0xfffff7ff\n         ) & 0xffffefff) & 0xffffdfff) & 0xffffbfff) & 0xffff7fff;\n    *(undefined *)(paramArr + 0xf) = 0;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800422e": "check_and_update_param_0800422e",
                "param_1": "paramArr",
                "param_2": "dataArr",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042de": {
            "entrypoint": "0x080042de",
            "current_name": "update_flags_080042de",
            "code": "\nundefined4 updateFlags_080042de(int *inputArray,uint *updateArray)\n\n{\n  undefined4 returnValue;\n  \n  if (*(char *)(inputArray + 0xf) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(inputArray + 0xf) = 1;\n    *(undefined *)((int)inputArray + 0x3d) = 2;\n    *(uint *)(*inputArray + 4) = *(uint *)(*inputArray + 4) & 0xffffff8f;\n    *(uint *)(*inputArray + 4) = *updateArray | *(uint *)(*inputArray + 4);\n    *(uint *)(*inputArray + 8) = *(uint *)(*inputArray + 8) & 0xffffff7f;\n    *(uint *)(*inputArray + 8) = updateArray[1] | *(uint *)(*inputArray + 8);\n    *(undefined *)((int)inputArray + 0x3d) = 1;\n    *(undefined *)(inputArray + 0xf) = 0;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080042de": "update_flags_080042de",
                "param_1": "inputArray",
                "param_2": "updateArray",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004366": {
            "entrypoint": "0x08004366",
            "current_name": "FUNC_08004366",
            "code": "\nvoid FUNC_08004366(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004366": "FUNC_08004366"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004378": {
            "entrypoint": "0x08004378",
            "current_name": "FUNC_08004378",
            "code": "\nvoid FUNC_08004378(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004378": "FUNC_08004378"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800438a": {
            "entrypoint": "0x0800438a",
            "current_name": "initialize_data_structure_0800438a",
            "code": "\nundefined4 initializeDataStructure_0800438a(int *dataStructurePtr)\n\n{\n  undefined4 result;\n  \n  if (dataStructurePtr == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)dataStructurePtr + 0x39) == '\\0') {\n      *(undefined *)(dataStructurePtr + 0xe) = 0;\n      FUNC_08004424(dataStructurePtr);\n    }\n    *(undefined *)((int)dataStructurePtr + 0x39) = 0x24;\n    *(uint *)(*dataStructurePtr + 0xc) = *(uint *)(*dataStructurePtr + 0xc) & 0xffffdfff;\n    FUN_080046ec(dataStructurePtr);\n    *(uint *)(*dataStructurePtr + 0x10) = *(uint *)(*dataStructurePtr + 0x10) & 0xffffb7ff;\n    *(uint *)(*dataStructurePtr + 0x14) = *(uint *)(*dataStructurePtr + 0x14) & 0xffffffd5;\n    *(uint *)(*dataStructurePtr + 0xc) = *(uint *)(*dataStructurePtr + 0xc) | 0x2000;\n    dataStructurePtr[0xf] = 0;\n    *(undefined *)((int)dataStructurePtr + 0x39) = 0x20;\n    *(undefined *)((int)dataStructurePtr + 0x3a) = 0x20;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800438a": "initialize_data_structure_0800438a",
                "param_1": "dataStructurePtr",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08005598"
            ],
            "called": [
                "FUN_080046ec",
                "FUN_08004424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004424": {
            "entrypoint": "0x08004424",
            "current_name": "FUNC_08004424",
            "code": "\nvoid FUNC_08004424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004424": "FUNC_08004424"
            },
            "calling": [
                "FUN_0800438a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004436": {
            "entrypoint": "0x08004436",
            "current_name": "process_data_08004436",
            "code": "\nundefined4 processData_08004436(uint **data,ushort *inputArray,short inputSize,uint timeout)\n\n{\n  int result;\n  int tempResult;\n  undefined4 errorCode;\n  ushort *ptrToInput;\n  \n  if (*(char *)((int)data + 0x39) == ' ') {\n    if ((inputArray == (ushort *)0x0) || (inputSize == 0)) {\n      errorCode = 1;\n    }\n    else if (*(char *)(data + 0xe) == '\\x01') {\n      errorCode = 2;\n    }\n    else {\n      *(undefined *)(data + 0xe) = 1;\n      data[0xf] = (uint *)0x0;\n      *(undefined *)((int)data + 0x39) = 0x21;\n      result = FUN_080015a0();\n      *(short *)(data + 9) = inputSize;\n      *(short *)((int)data + 0x26) = inputSize;\n      ptrToInput = inputArray;\n      while (*(short *)((int)data + 0x26) != 0) {\n        *(short *)((int)data + 0x26) = *(short *)((int)data + 0x26) + -1;\n        if (data[2] == (uint *)0x1000) {\n          do {\n            if ((**data & 0x80) == 0x80) {\n              tempResult = 0;\n              goto LAB_0800454c;\n            }\n          } while ((timeout == 0xffffffff) ||\n                  ((timeout != 0 && (tempResult = FUN_080015a0(), (uint)(tempResult - result) <= timeout))));\n          (*data)[3] = (*data)[3] & 0xfffffe5f;\n          (*data)[5] = (*data)[5] & 0xfffffffe;\n          *(undefined *)((int)data + 0x39) = 0x20;\n          *(undefined *)((int)data + 0x3a) = 0x20;\n          *(undefined *)(data + 0xe) = 0;\n          tempResult = 3;\nLAB_0800454c:\n          if (tempResult != 0) {\n            return 3;\n          }\n          (*data)[1] = *ptrToInput & 0x1ff;\n          if (data[4] == (uint *)0x0) {\n            ptrToInput = ptrToInput + 1;\n          }\n          else {\n            ptrToInput = (ushort *)((int)ptrToInput + 1);\n          }\n        }\n        else {\n          do {\n            if ((**data & 0x80) == 0x80) {\n              tempResult = 0;\n              goto LAB_08004614;\n            }\n          } while ((timeout == 0xffffffff) ||\n                  ((timeout != 0 && (tempResult = FUN_080015a0(), (uint)(tempResult - result) <= timeout))));\n          (*data)[3] = (*data)[3] & 0xfffffe5f;\n          (*data)[5] = (*data)[5] & 0xfffffffe;\n          *(undefined *)((int)data + 0x39) = 0x20;\n          *(undefined *)((int)data + 0x3a) = 0x20;\n          *(undefined *)(data + 0xe) = 0;\n          tempResult = 3;\nLAB_08004614:\n          if (tempResult != 0) {\n            return 3;\n          }\n          (*data)[1] = (uint)*(byte *)ptrToInput;\n          ptrToInput = (ushort *)((int)ptrToInput + 1);\n        }\n      }\n      do {\n        if ((**data & 0x40) == 0x40) {\n          result = 0;\n          goto LAB_080046c6;\n        }\n      } while ((timeout == 0xffffffff) ||\n              ((timeout != 0 && (tempResult = FUN_080015a0(), (uint)(tempResult - result) <= timeout))));\n      (*data)[3] = (*data)[3] & 0xfffffe5f;\n      (*data)[5] = (*data)[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 0x20;\n      *(undefined *)((int)data + 0x3a) = 0x20;\n      *(undefined *)(data + 0xe) = 0;\n      result = 3;\nLAB_080046c6:\n      if (result == 0) {\n        *(undefined *)((int)data + 0x39) = 0x20;\n        *(undefined *)(data + 0xe) = 0;\n        errorCode = 0;\n      }\n      else {\n        errorCode = 3;\n      }\n    }\n  }\n  else {\n    errorCode = 2;\n  }\n  return errorCode;\n}\n\n",
            "renaming": {
                "FUN_08004436": "process_data_08004436",
                "param_1": "data",
                "param_2": "inputArray",
                "param_3": "inputSize",
                "param_4": "timeout",
                "iVar1": "result",
                "iVar2": "tempResult",
                "uVar3": "errorCode",
                "local_58": "ptrToInput"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046ec": {
            "entrypoint": "0x080046ec",
            "current_name": "update_configuration_080046ec",
            "code": "\nvoid updateConfiguration_080046ec(int *config)\n\n{\n  ulonglong calculation;\n  int result1;\n  int configIndex;\n  uint result2;\n  int configValue;\n  undefined8 getInput;\n  \n  *(uint *)(*config + 0x10) = config[3] | *(uint *)(*config + 0x10) & 0xffffcfff;\n  *(uint *)(*config + 0xc) =\n       *(uint *)(*config + 0xc) & 0xffffe9f3 | config[5] | config[2] | config[4];\n  *(uint *)(*config + 0x14) = config[6] | *(uint *)(*config + 0x14) & 0xfffffcff;\n  if (*config == 0x40013800) {\n    getInput = FUN_08003540();\n    calculation = (ulonglong)(uint)((int)getInput * 0x19) / (ulonglong)(uint)(config[1] << 2);\n    result1 = FUN_08003540((int)getInput,(int)((ulonglong)getInput >> 0x20),(int)(calculation * 0x51eb851f));\n    configIndex = config[1];\n    getInput = FUN_08003540();\n    result2 = ((uint)(result1 * 0x19) / (uint)(configIndex << 2) +\n            (int)(((ulonglong)(uint)((int)getInput * 0x19) / (ulonglong)(uint)(config[1] << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    result1 = FUN_08003540((int)getInput,(int)((ulonglong)getInput >> 0x20),result2 * 0x51eb851f);\n    configValue = config[1];\n    configIndex = FUN_08003540();\n    *(uint *)(*config + 8) =\n         ((((uint)(result1 * 0x19) / (uint)(configValue << 2) +\n           (int)(((ulonglong)(uint)(configIndex * 0x19) / (ulonglong)(uint)(config[1] << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(calculation / 100) * 0x10 + (result2 / 100 & 0xf0);\n  }\n  else {\n    getInput = FUN_08003518();\n    calculation = (ulonglong)(uint)((int)getInput * 0x19) / (ulonglong)(uint)(config[1] << 2);\n    result1 = FUN_08003518((int)getInput,(int)((ulonglong)getInput >> 0x20),(int)(calculation * 0x51eb851f));\n    configIndex = config[1];\n    getInput = FUN_08003518();\n    result2 = ((uint)(result1 * 0x19) / (uint)(configIndex << 2) +\n            (int)(((ulonglong)(uint)((int)getInput * 0x19) / (ulonglong)(uint)(config[1] << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    result1 = FUN_08003518((int)getInput,(int)((ulonglong)getInput >> 0x20),result2 * 0x51eb851f);\n    configValue = config[1];\n    configIndex = FUN_08003518();\n    *(uint *)(*config + 8) =\n         ((((uint)(result1 * 0x19) / (uint)(configValue << 2) +\n           (int)(((ulonglong)(uint)(configIndex * 0x19) / (ulonglong)(uint)(config[1] << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(calculation / 100) * 0x10 + (result2 / 100 & 0xf0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046ec": "update_configuration_080046ec",
                "param_1": "config",
                "uVar1": "calculation",
                "iVar2": "result1",
                "iVar3": "configIndex",
                "uVar4": "result2",
                "iVar5": "configValue",
                "uVar6": "getInput"
            },
            "calling": [
                "FUN_0800438a"
            ],
            "called": [
                "FUN_08003540",
                "FUN_08003518"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800491c": {
            "entrypoint": "0x0800491c",
            "current_name": "initialize_data_0800491c",
            "code": "\nvoid initializeData_0800491c(undefined4 *dataArray)\n\n{\n  undefined firstParam;\n  undefined secondParam;\n  undefined thirdParam [5];\n  \n  firstParam = 0;\n  (*DAT_20000a54)(0xd0,0x6b,&firstParam,1);\n  secondParam = 0x10;\n  (*DAT_20000a54)(0xd0,0x1c,&secondParam,1);\n  thirdParam[0] = 8;\n  (*DAT_20000a54)(0xd0,0x1b,thirdParam,1);\n  *dataArray = 0;\n  dataArray[1] = 0;\n  dataArray[2] = 0;\n  dataArray[3] = 0;\n  dataArray[4] = 0;\n  dataArray[5] = 0;\n  dataArray[6] = 0;\n  dataArray[7] = 0;\n  dataArray[8] = 0;\n  dataArray[9] = 0;\n  dataArray[10] = 0;\n  FUN_080049cc(dataArray);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800491c": "initialize_data_0800491c",
                "param_1": "dataArray",
                "local_13": "firstParam",
                "local_12": "secondParam",
                "local_11": "thirdParam"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080049cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049cc": {
            "entrypoint": "0x080049cc",
            "current_name": "calculate_averages_080049cc",
            "code": "\nvoid calculateAverages_080049cc(int inputArray)\n\n{\n  undefined4 average;\n  undefined4 sum2;\n  undefined4 sum1;\n  undefined4 currentTime;\n  int arraySize;\n  int counter;\n  undefined4 maxSum2;\n  undefined4 maxSum1;\n  undefined4 totalSum;\n  undefined4 zero;\n  \n  arraySize = 1;\n  zero = 0;\n  totalSum = 0;\n  maxSum1 = 0;\n  maxSum2 = 0;\n  currentTime = (*DAT_20000a50)();\n  counter = 0;\n  while( true ) {\n    if (arraySize <= counter) break;\n    sum1 = 0;\n    sum2 = 0;\n    FUN_08004ae0(inputArray);\n    FUN_08004d78(inputArray,&sum1,&sum2);\n    maxSum1 = FUN_08000aa8(maxSum1,sum1);\n    maxSum2 = FUN_08000aa8(maxSum2,sum2);\n    zero = FUN_08000aa8(zero,*(undefined4 *)(inputArray + 0x10));\n    totalSum = FUN_08000aa8(totalSum,*(undefined4 *)(inputArray + 0x14));\n    currentTime = (*DAT_20000a50)();\n    counter = counter + 1;\n  }\n  average = FUN_08000c10(arraySize);\n  average = FUN_08000e20(zero,average);\n  *(undefined4 *)(inputArray + 0x1c) = average;\n  average = FUN_08000c10(arraySize);\n  average = FUN_08000e20(totalSum,average);\n  *(undefined4 *)(inputArray + 0x20) = average;\n  average = FUN_08000c10(arraySize);\n  average = FUN_08000e20(maxSum1,average);\n  *(undefined4 *)(inputArray + 0x24) = average;\n  average = FUN_08000c10(arraySize);\n  average = FUN_08000e20(maxSum2,average);\n  *(undefined4 *)(inputArray + 0x28) = average;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080049cc": "calculate_averages_080049cc",
                "param_1": "inputArray",
                "uVar1": "average",
                "local_2c": "sum2",
                "local_28": "sum1",
                "local_24": "currentTime",
                "local_20": "arraySize",
                "local_1c": "counter",
                "local_18": "maxSum2",
                "local_14": "maxSum1",
                "local_10": "totalSum",
                "local_c": "zero"
            },
            "calling": [
                "FUN_0800491c"
            ],
            "called": [
                "FUN_08004d78",
                "FUN_08000e20",
                "FUN_08004ae0",
                "FUN_08000aa8",
                "FUN_08000c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ae0": {
            "entrypoint": "0x08004ae0",
            "current_name": "extract_data_08004ae0",
            "code": "\nvoid extract_data_08004ae0(undefined4 *result)\n\n{\n  undefined4 uVar1;\n  undefined byte1;\n  undefined byte2;\n  undefined byte3;\n  undefined byte4;\n  undefined byte5;\n  undefined byte6;\n  undefined byte7;\n  undefined byte8;\n  undefined byte9;\n  undefined byte10;\n  undefined byte11;\n  undefined byte12;\n  undefined byte13;\n  undefined byte14;\n  short short1;\n  short short2;\n  short short3;\n  short short4;\n  short short5;\n  short short6;\n  \n  (*DAT_20000a4c)(0xd0,0x3b,&byte1,0xe);\n  short6 = CONCAT11(byte3,byte4);\n  short5 = CONCAT11(byte5,byte6);\n  short4 = CONCAT11(byte7,byte8);\n  short3 = CONCAT11(byte9,byte10);\n  short2 = CONCAT11(byte11,byte12);\n  short1 = CONCAT11(byte13,byte14);\n  uVar1 = FUN_08000c10((int)CONCAT11(byte1,byte2));\n  *result = uVar1;\n  uVar1 = FUN_08000c10((int)short6);\n  result[1] = uVar1;\n  uVar1 = FUN_08000c10((int)short5);\n  result[2] = uVar1;\n  uVar1 = FUN_08000c10((int)short4);\n  result[3] = uVar1;\n  uVar1 = FUN_08000c10((int)short3);\n  result[4] = uVar1;\n  uVar1 = FUN_08000c10((int)short2);\n  result[5] = uVar1;\n  uVar1 = FUN_08000c10((int)short1);\n  result[6] = uVar1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ae0": "extract_data_08004ae0",
                "param_1": "result",
                "local_2c": "byte1",
                "local_2b": "byte2",
                "local_2a": "byte3",
                "local_29": "byte4",
                "local_28": "byte5",
                "local_27": "byte6",
                "local_26": "byte7",
                "local_25": "byte8",
                "local_24": "byte9",
                "local_23": "byte10",
                "local_22": "byte11",
                "local_21": "byte12",
                "local_20": "byte13",
                "local_1f": "byte14",
                "local_1e": "short1",
                "local_1c": "short2",
                "local_1a": "short3",
                "local_18": "short4",
                "local_16": "short5",
                "local_14": "short6"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bd8": {
            "entrypoint": "0x08004bd8",
            "current_name": "calculate_result_08004bd8",
            "code": "\nvoid calculateResult_08004bd8(int inputData,undefined4 *outputData)\n\n{\n  undefined4 result1;\n  undefined8 result2;\n  undefined8 result3;\n  \n  result1 = FUN_08000aa4(*(undefined4 *)(inputData + 0x10),*(undefined4 *)(inputData + 0x1c));\n  result2 = FUN_08000418(DAT_200009e4);\n  result3 = FUN_08000418(result1);\n  result3 = FUN_080004c8((int)result3,(int)((ulonglong)result3 >> 0x20),0x83f5c366,0x3f340215);\n  result2 = FUN_0800015c((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                       (int)((ulonglong)result3 >> 0x20));\n  DAT_200009e4 = FUN_080009fc((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result2 = FUN_08000418(*(undefined4 *)(inputData + 4));\n  result2 = FUN_0800071c((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40b00000);\n  result3 = FUN_08000418(*(undefined4 *)(inputData + 8));\n  result3 = FUN_0800071c((int)result3,(int)((ulonglong)result3 >> 0x20),0,0x40b00000);\n  result2 = thunk_FUN_08005838((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                             (int)((ulonglong)result3 >> 0x20));\n  result2 = FUN_080004c8((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40668000);\n  result2 = FUN_0800071c((int)result2,(int)((ulonglong)result2 >> 0x20),0x54442d18,0x400921fb);\n  result3 = FUN_08000418(*(undefined4 *)(inputData + 0x24));\n  result2 = FUN_08000158((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                       (int)((ulonglong)result3 >> 0x20));\n  result2 = FUN_0800015c((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40568000);\n  result1 = FUN_080009fc((int)result2,(int)((ulonglong)result2 >> 0x20));\n  if (DAT_20000005 == '\\0') {\n    result2 = FUN_08000418(DAT_200009e4);\n    result2 = FUN_080004c8((int)result2,(int)((ulonglong)result2 >> 0x20),0x9999999a,0x3fe99999);\n    result3 = FUN_08000418(result1);\n    result3 = FUN_080004c8((int)result3,(int)((ulonglong)result3 >> 0x20),0x9999999a,0x3fc99999);\n    result2 = FUN_0800015c((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                         (int)((ulonglong)result3 >> 0x20));\n    DAT_200009e4 = FUN_080009fc((int)result2,(int)((ulonglong)result2 >> 0x20));\n  }\n  else {\n    DAT_20000005 = '\\0';\n    DAT_200009e4 = result1;\n  }\n  *outputData = DAT_200009e4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bd8": "calculate_result_08004bd8",
                "param_1": "inputData",
                "param_2": "outputData",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000aa4",
                "thunk_FUN_08005838",
                "FUN_0800015c",
                "FUN_080004c8",
                "FUN_080009fc",
                "FUN_08000418",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d78": {
            "entrypoint": "0x08004d78",
            "current_name": "calculate_results_08004d78",
            "code": "\nvoid calculateResults_08004d78(undefined4 *inputArray,undefined4 *outputVar1,undefined4 *outputVar2)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined8 tempVar1;\n  undefined8 tempVar2;\n  \n  result1 = FUN_08000e20(*inputArray,0x45800000);\n  result2 = FUN_08000e20(inputArray[1],0x45800000);\n  result3 = FUN_08000e20(inputArray[2],0x45800000);\n  tempVar1 = FUN_08000418(result2);\n  tempVar2 = FUN_08000418(result3);\n  tempVar1 = thunk_FUN_08005838((int)tempVar1,(int)((ulonglong)tempVar1 >> 0x20),(int)tempVar2,\n                             (int)((ulonglong)tempVar2 >> 0x20));\n  tempVar1 = FUN_080004c8((int)tempVar1,(int)((ulonglong)tempVar1 >> 0x20),0,0x40668000);\n  tempVar1 = FUN_0800071c((int)tempVar1,(int)((ulonglong)tempVar1 >> 0x20),0x54442d18,0x400921fb);\n  result2 = FUN_080009fc((int)tempVar1,(int)((ulonglong)tempVar1 >> 0x20));\n  tempVar1 = FUN_08000418(result1);\n  tempVar2 = FUN_08000418(result3);\n  tempVar1 = thunk_FUN_08005838((int)tempVar1,(int)((ulonglong)tempVar1 >> 0x20),(int)tempVar2,\n                             (int)((ulonglong)tempVar2 >> 0x20));\n  tempVar1 = FUN_080004c8((int)tempVar1,(int)((ulonglong)tempVar1 >> 0x20),0,0x40668000);\n  tempVar1 = FUN_0800071c((int)tempVar1,(int)((ulonglong)tempVar1 >> 0x20),0x54442d18,0x400921fb);\n  result1 = FUN_080009fc((int)tempVar1,(int)((ulonglong)tempVar1 >> 0x20));\n  *outputVar1 = result2;\n  *outputVar2 = result1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d78": "calculate_results_08004d78",
                "param_1": "inputArray",
                "param_2": "outputVar1",
                "param_3": "outputVar2",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "tempVar1",
                "uVar5": "tempVar2"
            },
            "calling": [
                "FUN_080049cc"
            ],
            "called": [
                "FUN_08000e20",
                "thunk_FUN_08005838",
                "FUN_080004c8",
                "FUN_080009fc",
                "FUN_08000418",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e6c": {
            "entrypoint": "0x08004e6c",
            "current_name": "execute_system_interrupt_08004e6c",
            "code": "\nvoid execute_system_interrupt_08004e6c(void)\n\n{\n  trigger_software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e6c": "execute_system_interrupt_08004e6c",
                "software_interrupt": "trigger_software_interrupt"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e74": {
            "entrypoint": "0x08004e74",
            "current_name": "initialize_if_needed_08004e74",
            "code": "\nundefined4 initializeIfNeeded_08004e74(undefined4 input)\n\n{\n  undefined4 result;\n  \n  if (DAT_200009f0 == 0) {\n    result = FUN_08004e6c(1,input,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004e74": "initialize_if_needed_08004e74",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08004e6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ea4": {
            "entrypoint": "0x08004ea4",
            "current_name": "initialize_data_08004ea4",
            "code": "\nvoid initializeData_08004ea4(undefined dataPointer,undefined additionalPointer,undefined4 size,undefined2 value)\n\n{\n  FUN_08001ccc(&DAT_20000a88,dataPointer,additionalPointer,1,size,value,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ea4": "initialize_data_08004ea4",
                "param_1": "dataPointer",
                "param_2": "additionalPointer",
                "param_3": "size",
                "param_4": "value"
            },
            "calling": [],
            "called": [
                "FUN_08001ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ee8": {
            "entrypoint": "0x08004ee8",
            "current_name": "execute_function_08004ee8",
            "code": "\nvoid executeFunction_08004ee8(undefined parameter1,undefined parameter2,undefined4 parameter3,undefined2 parameter4)\n\n{\n  FUN_08001f6c(&DAT_20000a88,parameter1,parameter2,1,parameter3,parameter4,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ee8": "execute_function_08004ee8",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "param_3": "parameter3",
                "param_4": "parameter4"
            },
            "calling": [],
            "called": [
                "FUN_08001f6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f2c": {
            "entrypoint": "0x08004f2c",
            "current_name": "initialize_08004f2c",
            "code": "\nundefined4 initialize_08004f2c(void)\n\n{\n  undefined4 result;\n  \n  result = FUN_080015a0();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004f2c": "initialize_08004f2c",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "initialize_data_08004f3c",
            "code": "\nvoid initializeData_08004f3c(undefined4 dataStart,undefined2 length)\n\n{\n  FUN_08004436(&DAT_20000adc,dataStart,length,0x32);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "initialize_data_08004f3c",
                "param_1": "dataStart",
                "param_2": "length"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08004436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f60": {
            "entrypoint": "0x08004f60",
            "current_name": "initialize_memory_08004f60",
            "code": "\nvoid initializeMemory_08004f60(void)\n\n{\n  FUN_08005d68(&DAT_20000ba8,0,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f60": "initialize_memory_08004f60"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08005d68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f78": {
            "entrypoint": "0x08004f78",
            "current_name": "parse_audio_data_08004f78",
            "code": "\nvoid parseAudioData_08004f78(void)\n\n{\n  undefined4 returnValue1;\n  int returnValue2;\n  undefined4 returnValue3;\n  uint modifiedFlag;\n  undefined8 pitchValue;\n  byte pitchFlag;\n  \n  FUN_08004ae0(&DAT_20000a5c);\n  FUN_08004bd8(&DAT_20000a5c,&DAT_20000ba0);\n  FUN_08004f60();\n  pitchValue = FUN_08000418(DAT_20000ba0);\n  FUN_08005dfc(&DAT_20000ba8,\"Pitch: %f\\n\",(int)pitchValue,(int)((ulonglong)pitchValue >> 0x20));\n  returnValue1 = FUN_08005e40(&DAT_20000ba8);\n  FUN_08004f3c(&DAT_20000ba8,returnValue1);\n  DAT_200009f8 = FUN_08000aa4(DAT_20000014,DAT_20000ba0);\n  DAT_20000be8 = FUN_08000cb8(DAT_20000a00,DAT_200009f8);\n  returnValue1 = FUN_08000cb8(DAT_20000a04,DAT_200009f8);\n  DAT_20000b5c = FUN_08000aa8(returnValue1,DAT_20000b5c);\n  returnValue1 = FUN_08000c10(DAT_20000010);\n  returnValue2 = FUN_08000ff4(returnValue1,DAT_20000b5c);\n  if (returnValue2 == 0) {\n    returnValue1 = FUN_08000c10(DAT_200009f4);\n    returnValue2 = FUN_08001030(returnValue1,DAT_20000b5c);\n    if (returnValue2 != 0) {\n      DAT_20000b5c = FUN_08000c08(DAT_200009f4);\n    }\n  }\n  else {\n    DAT_20000b5c = FUN_08000c08(DAT_20000010);\n  }\n  modifiedFlag = DAT_20000a08 ^ 0x80000000;\n  returnValue1 = FUN_08000aa4(DAT_200009f8,DAT_200009fc);\n  DAT_20000a58 = FUN_08000cb8(modifiedFlag,returnValue1);\n  returnValue1 = FUN_08000aa8(DAT_20000be8,DAT_20000b5c);\n  returnValue1 = FUN_08000aa8(returnValue1,DAT_20000a58);\n  returnValue3 = FUN_08000c10(DAT_20000010);\n  returnValue2 = FUN_08001030(returnValue1,returnValue3);\n  if (returnValue2 == 0) {\n    returnValue3 = FUN_08000c10(DAT_200009f4);\n    returnValue2 = FUN_08000ff4(returnValue1,returnValue3);\n    if (returnValue2 == 0) {\n      pitchFlag = FUN_08001044(returnValue1);\n    }\n    else {\n      pitchFlag = DAT_200009f4;\n    }\n  }\n  else {\n    pitchFlag = DAT_20000010;\n  }\n  DAT_200009fc = DAT_200009f8;\n  returnValue2 = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,2,returnValue2 != 0);\n  returnValue2 = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,4,returnValue2 == 0);\n  returnValue2 = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,8,returnValue2 != 0);\n  returnValue2 = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,0x10,returnValue2 == 0);\n  *(uint *)(DAT_20000b1c + 0x34) = (uint)pitchFlag;\n  *(uint *)(DAT_20000b1c + 0x40) = (uint)pitchFlag;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f78": "parse_audio_data_08004f78",
                "uVar1": "returnValue1",
                "iVar2": "returnValue2",
                "uVar3": "returnValue3",
                "uVar4": "modifiedFlag",
                "uVar5": "pitchValue",
                "local_11": "pitchFlag"
            },
            "calling": [
                "FUN_080036f8",
                "FUN_080017b4"
            ],
            "called": [
                "FUN_08001044",
                "FUN_08004f60",
                "FUN_08005dfc",
                "FUN_08000cb8",
                "FUN_08001a80",
                "FUN_08004bd8",
                "FUN_08005e40",
                "FUN_08000c08",
                "FUN_08000aa4",
                "FUN_08000aa8",
                "FUN_08004ae0",
                "FUN_08000ff4",
                "FUN_08004f3c",
                "FUN_08000c10",
                "FUN_08001030",
                "FUN_08000418"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005224": {
            "entrypoint": "0x08005224",
            "current_name": "initialize_program_08005224",
            "code": "\nvoid initializeProgram_08005224(void)\n\n{\n  FUN_080014f0();\n  FUN_080052a0();\n  FUN_080055f4();\n  FUN_08005348();\n  FUN_08005598();\n  FUN_08005500();\n  FUN_080053b0();\n  DAT_20000a54 = 0x8004ea5;\n  DAT_20000a4c = 0x8004ee9;\n  DAT_20000a50 = 0x8004f2d;\n  FUN_080036a8(&DAT_20000b1c,0);\n  FUN_080036a8(&DAT_20000b1c,0xc);\n  FUN_0800491c(&DAT_20000a5c);\n  FUN_0800360c(&DAT_20000b60);\n  FUN_08004e74(0);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005224": "initialize_program_08005224"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08005348",
                "FUN_0800360c",
                "FUN_08005598",
                "FUN_080052a0",
                "FUN_08004e74",
                "FUN_080036a8",
                "FUN_080055f4",
                "FUN_0800491c",
                "FUN_080014f0",
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052a0": {
            "entrypoint": "0x080052a0",
            "current_name": "initialize_application_080052a0",
            "code": "\nvoid initializeApplication_080052a0(void)\n\n{\n  int result;\n  undefined8 time;\n  undefined4 flags;\n  undefined4 value;\n  undefined4 constant;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 flag1;\n  undefined4 flag2;\n  undefined4 flag3;\n  undefined4 flag4;\n  undefined4 flag5;\n  undefined4 flag6;\n  undefined4 flag7;\n  \n  flag1 = 1;\n  flag2 = 0x10000;\n  flag3 = 0;\n  flag4 = 1;\n  flag5 = 2;\n  flag6 = 0x10000;\n  flag7 = 0x1c0000;\n  result = FUN_08002d98(&flag1);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x151);\n  }\n  flags = 0xf;\n  value = 2;\n  constant = 0x80;\n  temp1 = 0;\n  temp2 = 0;\n  result = FUN_08003260(&flags,2);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x15e);\n  }\n  time = FUN_08003504();\n  FUN_08001762((uint)time / 1000,(int)((ulonglong)time >> 0x20),(uint)time * 0x10624dd3);\n  FUN_0800177c(4);\n  FUN_0800172a(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052a0": "initialize_application_080052a0",
                "local_44": "flags",
                "local_40": "value",
                "local_3c": "constant",
                "local_38": "temp1",
                "local_34": "temp2",
                "local_30": "flag1",
                "local_2c": "flag2",
                "local_28": "flag3",
                "local_20": "flag4",
                "local_14": "flag5",
                "local_10": "flag6",
                "local_c": "flag7",
                "iVar1": "result",
                "uVar2": "time"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_0800177c",
                "FUN_08003260",
                "FUN_08005674",
                "FUN_08001762",
                "FUN_0800172a",
                "FUN_08003504",
                "FUN_08002d98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005348": {
            "entrypoint": "0x08005348",
            "current_name": "initialize_data_08005348",
            "code": "\nvoid initializeData_08005348(void)\n\n{\n  int result;\n  \n  DAT_20000a88 = 0x40005400;\n  DAT_20000a8c = 400000;\n  DAT_20000a90 = 0;\n  DAT_20000a94 = 0;\n  DAT_20000a98 = 0x4000;\n  DAT_20000a9c = 0;\n  DAT_20000aa0 = 0;\n  DAT_20000aa4 = 0;\n  DAT_20000aa8 = 0;\n  result = FUN_08001ab0(&DAT_20000a88);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x17a);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005348": "initialize_data_08005348",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08001ab0",
                "FUN_08005674"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053b0": {
            "entrypoint": "0x080053b0",
            "current_name": "initialize_program_080053b0",
            "code": "\nvoid initializeProgram_080053b0(void)\n\n{\n  int iVar1;\n  undefined4 errorCode1;\n  undefined4 errorCode2;\n  undefined4 errorCode3;\n  undefined4 errorCode4;\n  undefined4 errorCode5;\n  undefined4 bufferSize;\n  undefined4 errorCode6;\n  undefined4 heapSize;\n  undefined4 errorCode7;\n  undefined4 errorCode8;\n  undefined4 errorCode9;\n  undefined4 errorCode10;\n  undefined4 errorCode11;\n  undefined4 errorCode12;\n  undefined4 initialized;\n  undefined4 errorCode13;\n  undefined4 errorCodeArray [4];\n  \n  DAT_20000b1c = 0x40012c00;\n  DAT_20000b20 = 0x708;\n  DAT_20000b24 = 0;\n  DAT_20000b28 = 100;\n  DAT_20000b2c = 0;\n  DAT_20000b30 = 0;\n  DAT_20000b34 = 0;\n  iVar1 = FUN_080035a4(&DAT_20000b1c);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",399);\n  }\n  errorCodeArray[0] = 0x1000;\n  iVar1 = FUN_08003a94(&DAT_20000b1c,errorCodeArray);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x194);\n  }\n  iVar1 = FUN_08003640(&DAT_20000b1c);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x198);\n  }\n  initialized = 0;\n  errorCode13 = 0;\n  iVar1 = FUN_080042de(&DAT_20000b1c,&initialized);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x19f);\n  }\n  heapSize = 0x60;\n  errorCode7 = 0;\n  errorCode8 = 0;\n  errorCode9 = 0;\n  errorCode10 = 0;\n  errorCode11 = 0;\n  errorCode12 = 0;\n  iVar1 = FUN_08003908(&DAT_20000b1c,&heapSize,0);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1ab);\n  }\n  iVar1 = FUN_08003908(&DAT_20000b1c,&heapSize,0xc);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1b0);\n  }\n  errorCode1 = 0;\n  errorCode2 = 0;\n  errorCode3 = 0;\n  errorCode4 = 0;\n  errorCode5 = 0;\n  bufferSize = 0x2000;\n  errorCode6 = 0;\n  iVar1 = FUN_0800422e(&DAT_20000b1c,&errorCode1);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1bc);\n  }\n  FUN_08005680(&DAT_20000b1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053b0": "initialize_program_080053b0",
                "local_58": "errorCode1",
                "local_54": "errorCode2",
                "local_50": "errorCode3",
                "local_4c": "errorCode4",
                "local_48": "errorCode5",
                "local_44": "bufferSize",
                "local_40": "errorCode6",
                "local_3c": "heapSize",
                "local_38": "errorCode7",
                "local_34": "errorCode8",
                "local_30": "errorCode9",
                "local_2c": "errorCode10",
                "local_28": "errorCode11",
                "local_24": "errorCode12",
                "local_20": "initialized",
                "local_1c": "errorCode13",
                "local_18": "errorCodeArray"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08003640",
                "FUN_08003908",
                "FUN_08005674",
                "FUN_0800422e",
                "FUN_08005680",
                "FUN_080035a4",
                "FUN_080042de",
                "FUN_08003a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005500": {
            "entrypoint": "0x08005500",
            "current_name": "initialize_settings_08005500",
            "code": "\nvoid initializeSettings_08005500(void)\n\n{\n  int iVar1;\n  undefined4 bufferSize;\n  undefined4 bufferPtr;\n  undefined4 pageSizes [4];\n  \n  DAT_20000b60 = 0x40000000;\n  DAT_20000b64 = 36000;\n  DAT_20000b68 = 0;\n  DAT_20000b6c = 0x14;\n  DAT_20000b70 = 0;\n  DAT_20000b78 = 0;\n  iVar1 = FUN_080035a4(&DAT_20000b60);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1d0);\n  }\n  pageSizes[0] = 0x1000;\n  iVar1 = FUN_08003a94(&DAT_20000b60,pageSizes);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1d5);\n  }\n  bufferSize = 0x20;\n  bufferPtr = 0;\n  iVar1 = FUN_080042de(&DAT_20000b60,&bufferSize);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1dc);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005500": "initialize_settings_08005500",
                "local_20": "bufferSize",
                "local_1c": "bufferPtr",
                "local_18": "pageSizes"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08005674",
                "FUN_080035a4",
                "FUN_080042de",
                "FUN_08003a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005598": {
            "entrypoint": "0x08005598",
            "current_name": "initialize_data_08005598",
            "code": "\nvoid initializeData_08005598(void)\n\n{\n  int iVar1;\n  \n  DAT_20000adc = 0x40013800;\n  DAT_20000ae0 = 0x1c200;\n  DAT_20000ae4 = 0;\n  DAT_20000ae8 = 0;\n  DAT_20000aec = 0;\n  DAT_20000af0 = 0xc;\n  DAT_20000af4 = 0;\n  DAT_20000af8 = 0;\n  iVar1 = FUN_0800438a(&DAT_20000adc);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1ed);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005598": "initialize_data_08005598"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08005674",
                "FUN_0800438a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055f4": {
            "entrypoint": "0x080055f4",
            "current_name": "initialize_data_080055f4",
            "code": "\n\n\nvoid initializeData_080055f4(void)\n\n{\n  undefined4 arraySize;\n  undefined4 counter;\n  undefined4 constant;\n  \n  _DAT_40021018 = _DAT_40021018 | 0x2c;\n  FUN_08001a80(0x40010800,0x1e,0,_DAT_40021018 & 8);\n  arraySize = 0x1e;\n  counter = 1;\n  constant = 2;\n  FUN_080017c4(0x40010800,&arraySize);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080055f4": "initialize_data_080055f4",
                "local_18": "arraySize",
                "local_14": "counter",
                "local_c": "constant"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080017c4",
                "FUN_08001a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005674": {
            "entrypoint": "0x08005674",
            "current_name": "infinite_loop_08005674",
            "code": "\nvoid infiniteLoop_08005674(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005674": "infinite_loop_08005674"
            },
            "calling": [
                "FUN_08005348",
                "FUN_080052a0",
                "FUN_08005598",
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005680": {
            "entrypoint": "0x08005680",
            "current_name": "initialize_memory_08005680",
            "code": "\nvoid initializeMemory_08005680(int *memory)\n\n{\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  \n  if (*memory == 0x40012c00) {\n    constant1 = 0x900;\n    constant2 = 2;\n    constant3 = 2;\n    FUN_080017c4(0x40010800,&constant1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005680": "initialize_memory_08005680",
                "param_1": "memory",
                "local_18": "constant1",
                "local_14": "constant2",
                "local_c": "constant3"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_080017c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005704": {
            "entrypoint": "0x08005704",
            "current_name": "initialize_08005704",
            "code": "\nvoid initialize_08005704(void)\n\n{\n  FUN_0800157c();\n  FUN_080017b4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005704": "initialize_08005704"
            },
            "calling": [],
            "called": [
                "FUN_0800157c",
                "FUN_080017b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "initialize_data_structures_08005714",
            "code": "\nvoid initializeDataStructures_08005714(void)\n\n{\n  FUN_080036f8(&DAT_20000b60);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005714": "initialize_data_structures_08005714"
            },
            "calling": [],
            "called": [
                "FUN_080036f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005728": {
            "entrypoint": "0x08005728",
            "current_name": "allocate_memory_08005728",
            "code": "\nundefined * allocate_memory_08005728(int size)\n\n{\n  undefined4 *new_block;\n  undefined *result;\n  undefined stack_buffer [4];\n  int remaining_size;\n  undefined *current_block;\n  \n  if (DAT_20000a10 == (undefined *)0x0) {\n    DAT_20000a10 = &DAT_20000c18;\n  }\n  current_block = DAT_20000a10;\n  if (stack_buffer < DAT_20000a10 + size) {\n    remaining_size = size;\n    new_block = (undefined4 *)FUN_08005d14();\n    *new_block = 0xc;\n    result = (undefined *)0xffffffff;\n  }\n  else {\n    result = DAT_20000a10;\n    DAT_20000a10 = DAT_20000a10 + size;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005728": "allocate_memory_08005728",
                "param_1": "size",
                "puVar1": "new_block",
                "puVar2": "result",
                "auStack_18": "stack_buffer",
                "local_14": "remaining_size",
                "local_c": "current_block"
            },
            "calling": [
                "FUN_08009744"
            ],
            "called": [
                "FUN_08005d14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005780": {
            "entrypoint": "0x08005780",
            "current_name": "initialize_peripheral_registers_08005780",
            "code": "\n\n\nvoid initializePeripheralRegisters_08005780(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005780": "initialize_peripheral_registers_08005780"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x080057e8",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_200009c8; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800a1a4);\n  }\n  for (puVar2 = &DAT_200009c8; puVar2 < &DAT_20000c14; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  FUN_08005780();\n  FUN_08005d20();\n  UNRECOVERED_JUMPTABLE = (code *)0x800581a;\n  FUN_08005224();\n                    /* WARNING: Could not recover jumptable at 0x0800581a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08005224",
                "FUN_08005d20",
                "FUN_08005780"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08005838": {
            "entrypoint": "0x08005834",
            "current_name": "calculate_result_thunk_08005838",
            "code": "\nuint calculate_result_thunk_08005838(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int temp1;\n  undefined4 temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  undefined8 temp6;\n  \n  temp4 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (temp4 | (-input3 | input3) >> 0x1f)) ||\n     (temp5 = input2 & 0x7fffffff, 0x7ff00000 < (temp5 | (-input1 | input1) >> 0x1f))) {\n    temp4 = FUN_0800015c(input3,input4,input1,input2);\n    return temp4;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    temp4 = FUN_080059f0();\n    return temp4;\n  }\n  temp3 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((temp5 | input1) == 0) {\n    if (temp3 == 2) {\n      return 0x54442d18;\n    }\n    if (temp3 != 3) {\n      return input1;\n    }\n  }\n  else if ((temp4 | input3) != 0) {\n    if (temp4 == 0x7ff00000) {\n      if (temp5 == 0x7ff00000) {\n        if (temp3 == 2) {\n          return 0x7f3321d2;\n        }\n        if (temp3 == 3) {\n          return 0x7f3321d2;\n        }\n        if (temp3 == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (temp3 == 2) {\n        return 0x54442d18;\n      }\n      if (temp3 != 3) {\n        if (temp3 != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (temp5 != 0x7ff00000) {\n      temp1 = (int)(temp5 - temp4) >> 0x14;\n      if (temp1 < 0x3d) {\n        if (((int)input4 < 0) && (temp1 + 0x3c < 0 != SCARRY4(temp1,0x3c))) {\n          temp6 = 0;\n        }\n        else {\n          FUN_0800071c(input1,input2,input3,input4,input4);\n          FUNC_08005d0c();\n          temp6 = FUN_080059f0();\n        }\n      }\n      else {\n        temp6 = 0x3ff921fb54442d18;\n      }\n      temp2 = (undefined4)((ulonglong)temp6 >> 0x20);\n      temp4 = (uint)temp6;\n      if (temp3 == 1) {\n        return temp4;\n      }\n      if (temp3 == 2) {\n        temp6 = FUN_08000158(temp4,temp2,0x33145c07,0x3ca1a626);\n        temp4 = FUN_08000158(0x54442d18,0x400921fb,(int)temp6,(int)((ulonglong)temp6 >> 0x20));\n        return temp4;\n      }\n      if (temp3 != 0) {\n        temp6 = FUN_08000158(temp4,temp2,0x33145c07,0x3ca1a626);\n        temp4 = FUN_08000158((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x54442d18,0x400921fb);\n        return temp4;\n      }\n      return temp4;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "renaming": {
                "thunk_FUN_08005838": "calculate_result_thunk_08005838",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6"
            },
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "called": [
                "FUN_08005838"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005838": {
            "entrypoint": "0x08005838",
            "current_name": "process_input_08005838",
            "code": "\nuint processInput_08005838(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int difference;\n  undefined4 result1;\n  uint flag;\n  uint modifiedInput4;\n  uint modifiedInput2;\n  undefined8 calculationResult;\n  \n  modifiedInput4 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (modifiedInput4 | (-input3 | input3) >> 0x1f)) ||\n     (modifiedInput2 = input2 & 0x7fffffff, 0x7ff00000 < (modifiedInput2 | (-input1 | input1) >> 0x1f))) {\n    modifiedInput4 = FUN_0800015c(input3,input4,input1,input2);\n    return modifiedInput4;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    modifiedInput4 = FUN_080059f0();\n    return modifiedInput4;\n  }\n  flag = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((modifiedInput2 | input1) == 0) {\n    if (flag == 2) {\n      return 0x54442d18;\n    }\n    if (flag != 3) {\n      return input1;\n    }\n  }\n  else if ((modifiedInput4 | input3) != 0) {\n    if (modifiedInput4 == 0x7ff00000) {\n      if (modifiedInput2 == 0x7ff00000) {\n        if (flag == 2) {\n          return 0x7f3321d2;\n        }\n        if (flag == 3) {\n          return 0x7f3321d2;\n        }\n        if (flag == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (flag == 2) {\n        return 0x54442d18;\n      }\n      if (flag != 3) {\n        if (flag != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (modifiedInput2 != 0x7ff00000) {\n      difference = (int)(modifiedInput2 - modifiedInput4) >> 0x14;\n      if (difference < 0x3d) {\n        if (((int)input4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n          calculationResult = 0;\n        }\n        else {\n          FUN_0800071c(input1,input2,input3,input4,input4);\n          FUNC_08005d0c();\n          calculationResult = FUN_080059f0();\n        }\n      }\n      else {\n        calculationResult = 0x3ff921fb54442d18;\n      }\n      result1 = (undefined4)((ulonglong)calculationResult >> 0x20);\n      modifiedInput4 = (uint)calculationResult;\n      if (flag == 1) {\n        return modifiedInput4;\n      }\n      if (flag == 2) {\n        calculationResult = FUN_08000158(modifiedInput4,result1,0x33145c07,0x3ca1a626);\n        modifiedInput4 = FUN_08000158(0x54442d18,0x400921fb,(int)calculationResult,(int)((ulonglong)calculationResult >> 0x20));\n        return modifiedInput4;\n      }\n      if (flag != 0) {\n        calculationResult = FUN_08000158(modifiedInput4,result1,0x33145c07,0x3ca1a626);\n        modifiedInput4 = FUN_08000158((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),0x54442d18,0x400921fb);\n        return modifiedInput4;\n      }\n      return modifiedInput4;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "renaming": {
                "FUN_08005838": "process_input_08005838",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "difference",
                "uVar2": "result1",
                "uVar3": "flag",
                "uVar4": "modifiedInput4",
                "uVar5": "modifiedInput2",
                "uVar6": "calculationResult"
            },
            "calling": [
                "thunk_FUN_08005838"
            ],
            "called": [
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_080059f0",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f0": {
            "entrypoint": "0x080059f0",
            "current_name": "calculate_result_080059f0",
            "code": "\nundefined8 calculate_result_080059f0(int input_1,uint input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  uint temp7;\n  int result;\n  undefined8 temp8;\n  undefined8 temp9;\n  \n  temp9 = CONCAT44(input_2,input_1);\n  temp7 = input_2 & 0x7fffffff;\n  if (temp7 < 0x44100000) {\n    if (temp7 < 0x3fdc0000) {\n      if (temp7 < 0x3e200000) {\n        temp8 = FUN_0800015c(input_1,input_2,0x8800759c,0x7e37e43c,input_4);\n        result = FUN_080009e8((int)temp8,(int)((ulonglong)temp8 >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return CONCAT44(input_2,input_1);\n        }\n      }\n      result = -1;\n    }\n    else {\n      temp9 = FUNC_08005d0c();\n      temp4 = (undefined4)((ulonglong)temp9 >> 0x20);\n      temp1 = (undefined4)temp9;\n      if (temp7 < 0x3ff30000) {\n        if (temp7 < 0x3fe60000) {\n          temp9 = FUN_0800015c(temp1,temp4,temp1,temp4);\n          temp9 = FUN_08000158((int)temp9,(int)((ulonglong)temp9 >> 0x20),0,0x3ff00000);\n          temp8 = FUN_0800015c(temp1,temp4,0,0x40000000);\n          temp9 = FUN_0800071c((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp8,\n                                (int)((ulonglong)temp8 >> 0x20));\n          result = 0;\n        }\n        else {\n          temp9 = FUN_08000158(temp1,temp4,0,0x3ff00000);\n          temp8 = FUN_0800015c(temp1,temp4,0,0x3ff00000);\n          temp9 = FUN_0800071c((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp8,\n                                (int)((ulonglong)temp8 >> 0x20));\n          result = 1;\n        }\n      }\n      else if (temp7 < 0x40038000) {\n        temp9 = FUN_08000158(temp1,temp4,0,0x3ff80000);\n        temp8 = FUN_080004c8(temp1,temp4,0,0x3ff80000);\n        temp8 = FUN_0800015c((int)temp8,(int)((ulonglong)temp8 >> 0x20),0,0x3ff00000);\n        temp9 = FUN_0800071c((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp8,\n                              (int)((ulonglong)temp8 >> 0x20));\n        result = 2;\n      }\n      else {\n        temp9 = FUN_0800071c(0,0xbff00000,temp1,temp4);\n        result = 3;\n      }\n    }\n    temp6 = (undefined4)((ulonglong)temp9 >> 0x20);\n    temp5 = (undefined4)temp9;\n    temp9 = FUN_080004c8(temp5,temp6,temp5,temp6);\n    temp2 = (undefined4)((ulonglong)temp9 >> 0x20);\n    temp1 = (undefined4)temp9;\n    temp9 = FUN_080004c8(temp1,temp2,temp1,temp2);\n    temp3 = (undefined4)((ulonglong)temp9 >> 0x20);\n    temp4 = (undefined4)temp9;\n    temp9 = FUN_080004c8(temp4,temp3,0xe322da11,0x3f90ad3a);\n    temp9 = FUN_0800015c((int)temp9,(int)((ulonglong)temp9 >> 0x20),0x24760deb,0x3fa97b4b);\n    temp9 = FUN_080004c8((int)temp9,(int)((ulonglong)temp9 >> 0x20),temp4,temp3);\n    temp9 = FUN_0800015c((int)temp9,(int)((ulonglong)temp9 >> 0x20),0xa0d03d51,0x3fb10d66);\n    temp9 = FUN_080004c8((int)temp9,(int)((ulonglong)temp9 >> 0x20),temp4,temp3);\n    temp9 = FUN_0800015c((int)temp9,(int)((ulonglong)temp9 >> 0x20),0xc54c206e,0x3fb745cd);\n    temp9 = FUN_080004c8((int)temp9,(int)((ulonglong)temp9 >> 0x20),temp4,temp3);\n    temp9 = FUN_0800015c((int)temp9,(int)((ulonglong)temp9 >> 0x20),0x920083ff,0x3fc24924);\n    temp9 = FUN_080004c8((int)temp9,(int)((ulonglong)temp9 >> 0x20),temp4,temp3);\n    temp9 = FUN_0800015c((int)temp9,(int)((ulonglong)temp9 >> 0x20),0x5555550d,0x3fd55555);\n    temp9 = FUN_080004c8((int)temp9,(int)((ulonglong)temp9 >> 0x20),temp1,temp2);\n    temp8 = FUN_080004c8(temp4,temp3,0x2c6a6c2f,0xbfa2b444);\n    temp8 = FUN_08000158((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x52defd9a,0x3fadde2d);\n    temp8 = FUN_080004c8((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp4,temp3);\n    temp8 = FUN_08000158((int)temp8,(int)((ulonglong)temp8 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp8 = FUN_080004c8((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp4,temp3);\n    temp8 = FUN_08000158((int)temp8,(int)((ulonglong)temp8 >> 0x20),0xfe231671,0x3fbc71c6);\n    temp8 = FUN_080004c8((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp4,temp3);\n    temp8 = FUN_08000158((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x9998ebc4,0x3fc99999);\n    temp8 = FUN_080004c8((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp4,temp3);\n    temp9 = FUN_0800015c((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp8,\n                          (int)((ulonglong)temp8 >> 0x20));\n    temp9 = FUN_080004c8((int)temp9,(int)((ulonglong)temp9 >> 0x20),temp5,temp6);\n    temp1 = (undefined4)((ulonglong)temp9 >> 0x20);\n    if (result == -1) {\n      temp9 = FUN_08000158(temp5,temp6,(int)temp9,temp1);\n      return temp9;\n    }\n    result = result * 8;\n    temp9 = FUN_08000158((int)temp9,temp1,*(undefined4 *)(&UNK_08009ee8 + result),\n                          *(undefined4 *)(&UNK_08009eec + result));\n    temp9 = FUN_08000158((int)temp9,(int)((ulonglong)temp9 >> 0x20),temp5,temp6);\n    temp9 = FUN_08000158(*(undefined4 *)(&UNK_08009ec8 + result),\n                          *(undefined4 *)(&UNK_08009ecc + result),(int)temp9,\n                          (int)((ulonglong)temp9 >> 0x20));\n    if ((int)input_2 < 0) {\n      return CONCAT44((int)((ulonglong)temp9 >> 0x20) + -0x80000000,(int)temp9);\n    }\n  }\n  else {\n    if ((temp7 < 0x7ff00001) && ((temp7 != 0x7ff00000 || (input_1 == 0)))) {\n      temp1 = 0xbff921fb;\n      if (0 < (int)input_2) {\n        temp1 = 0x3ff921fb;\n      }\n      return CONCAT44(temp1,0x54442d18);\n    }\n    temp9 = FUN_0800015c(input_1,input_2,input_1,input_2,input_4);\n  }\n  return temp9;\n}\n\n",
            "renaming": {
                "FUN_080059f0": "calculate_result_080059f0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "result",
                "uVar9": "temp8",
                "uVar10": "temp9"
            },
            "calling": [
                "FUN_08005838"
            ],
            "called": [
                "FUN_08005d0c",
                "FUN_080009e8",
                "FUN_0800015c",
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d0c": {
            "entrypoint": "0x08005d0c",
            "current_name": "FUNC_08005d0c",
            "code": "\nvoid FUNC_08005d0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d0c": "FUNC_08005d0c"
            },
            "calling": [
                "FUN_08005838",
                "FUN_080059f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005d14": {
            "entrypoint": "0x08005d14",
            "current_name": "get_memory_address_08005d14",
            "code": "\nundefined4 getMemoryAddress_08005d14(void)\n\n{\n  return DAT_2000001c;\n}\n\n",
            "renaming": {
                "FUN_08005d14": "get_memory_address_08005d14"
            },
            "calling": [
                "FUN_08005728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d20": {
            "entrypoint": "0x08005d20",
            "current_name": "execute_multiple_functions_08005d20",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005d2c) */\n/* WARNING: Removing unreachable block (ram,0x08005d2e) */\n\nvoid executeMultipleFunctions_08005d20(void)\n\n{\n  int counter;\n  code **functionPointer;\n  \n  FUNC_08009e68();\n  counter = 0;\n  functionPointer = (code **)&DAT_0800a198;\n  do {\n    counter = counter + 1;\n    (**functionPointer)();\n    functionPointer = functionPointer + 1;\n  } while (counter != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d20": "execute_multiple_functions_08005d20",
                "iVar1": "counter",
                "ppcVar2": "functionPointer"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08009e68",
                "FUN_080078a0",
                "FUN_08000134"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d68": {
            "entrypoint": "0x08005d68",
            "current_name": "memset_08005d68",
            "code": "\nvoid memset_08005d68(undefined4 *dest,undefined value,uint count)\n\n{\n  undefined4 *destPtr;\n  undefined4 *nextPtr;\n  uint remainingCount;\n  undefined4 value32;\n  bool isEnd;\n  \n  if (((uint)dest & 3) != 0) {\n    remainingCount = count - 1;\n    destPtr = dest;\n    if (count == 0) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = value;\n      count = remainingCount;\n      if (((uint)dest & 3) == 0) break;\n      isEnd = remainingCount == 0;\n      remainingCount = remainingCount - 1;\n      destPtr = dest;\n      if (isEnd) {\n        return;\n      }\n    }\n  }\n  if (3 < count) {\n    value32 = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remainingCount = count;\n    destPtr = dest;\n    if (0xf < count) {\n      remainingCount = count - 0x10;\n      destPtr = dest + 4;\n      do {\n        destPtr[-4] = value32;\n        destPtr[-3] = value32;\n        destPtr[-2] = value32;\n        destPtr[-1] = value32;\n        destPtr = destPtr + 4;\n      } while (destPtr != (undefined4 *)((int)dest + (remainingCount & 0xfffffff0) + 0x20));\n      count = count & 0xf;\n      dest = dest + ((remainingCount >> 4) + 1) * 4;\n      remainingCount = count;\n      destPtr = dest;\n      if (count < 4) goto LAB_08005de4;\n    }\n    do {\n      count = count - 4;\n      *dest = value32;\n      dest = dest + 1;\n    } while (3 < count);\n    dest = (undefined4 *)((int)destPtr + (remainingCount - 4 & 0xfffffffc) + 4);\n    count = remainingCount & 3;\n  }\nLAB_08005de4:\n  if (count != 0) {\n    destPtr = dest;\n    do {\n      nextPtr = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = value;\n      destPtr = nextPtr;\n    } while ((undefined4 *)(count + (int)dest) != nextPtr);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d68": "memset_08005d68",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "count",
                "puVar1": "destPtr",
                "puVar2": "nextPtr",
                "uVar3": "remainingCount",
                "uVar4": "value32",
                "bVar5": "isEnd"
            },
            "calling": [
                "FUN_08004f60",
                "FUN_08009980"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005dfc": {
            "entrypoint": "0x08005dfc",
            "current_name": "initialize_data_08005dfc",
            "code": "\nvoid initialize_data_08005dfc(undefined *data_array,undefined4 size,undefined4 value1,undefined4 value2)\n\n{\n  undefined *pointer_array [2];\n  undefined4 max_value1;\n  undefined4 max_value2;\n  undefined *current_pointer;\n  undefined4 default_value;\n  undefined4 temp_value1;\n  undefined4 temp_value2;\n  \n  default_value = 0x7fffffff;\n  max_value1 = 0x7fffffff;\n  max_value2 = 0xffff0208;\n  pointer_array[0] = data_array;\n  current_pointer = data_array;\n  temp_value1 = value1;\n  temp_value2 = value2;\n  FUNC_08005e9c(DAT_2000001c,pointer_array,size,&temp_value1);\n  *pointer_array[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dfc": "initialize_data_08005dfc",
                "param_1": "data_array",
                "param_2": "size",
                "param_3": "value1",
                "param_4": "value2",
                "local_80": "pointer_array",
                "local_78": "max_value1",
                "uStack_74": "max_value2",
                "local_70": "current_pointer",
                "local_6c": "default_value",
                "uStack_8": "temp_value1",
                "uStack_4": "temp_value2"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08005e9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e40": {
            "entrypoint": "0x08005e40",
            "current_name": "count_leading_zeros_08005e40",
            "code": "\nint countLeadingZeros_08005e40(uint input)\n\n{\n  int leadingZeros;\n  uint *ptrWord;\n  uint word;\n  \n  ptrWord = (uint *)(input & 0xfffffffc);\n  leadingZeros = -(input & 3);\n  word = *ptrWord;\n  if ((input & 3) != 0) {\n    word = word | 0xffffffffU >> ((leadingZeros + 4U & 0x1f) << 3);\n  }\n  while( true ) {\n    ptrWord = ptrWord + 1;\n    word = word + 0xfefefeff & ~word & 0x80808080;\n    if (word != 0) break;\n    word = *ptrWord;\n    leadingZeros = leadingZeros + 4;\n  }\n  return leadingZeros + (0x1fU - leadingZeroCount(word & -word) >> 3);\n}\n\n",
            "renaming": {
                "FUN_08005e40": "count_leading_zeros_08005e40",
                "param_1": "input",
                "iVar1": "leadingZeros",
                "puVar2": "ptrWord",
                "uVar3": "word",
                "LZCOUNT": "leadingZeroCount"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e9c": {
            "entrypoint": "0x08005e9c",
            "current_name": "FUNC_08005e9c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  int **ppiVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  int iVar8;\n  int *piVar9;\n  undefined4 uVar10;\n  int **ppiVar11;\n  undefined uVar12;\n  ushort uVar13;\n  int **ppiVar14;\n  byte **ppbVar15;\n  int *piVar16;\n  int **ppiVar17;\n  char *pcVar18;\n  uint uVar19;\n  undefined *puVar20;\n  int *piVar21;\n  int *piVar22;\n  int *piVar23;\n  int *piVar24;\n  int *piVar25;\n  byte *pbVar26;\n  int *piVar27;\n  int *piVar28;\n  undefined4 *puVar29;\n  byte *pbVar30;\n  bool bVar31;\n  longlong lVar32;\n  undefined8 uVar33;\n  undefined8 uVar34;\n  undefined4 local_188;\n  int *piStack_184;\n  int **local_180;\n  undefined *puStack_17c;\n  int **local_178;\n  undefined4 *local_16c;\n  int *local_168;\n  byte *local_164;\n  int *local_160;\n  int *local_15c;\n  char *local_158;\n  int **local_154;\n  undefined8 local_150;\n  int *local_148;\n  int *local_144;\n  int *local_140;\n  int **local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  uint local_12c;\n  undefined4 local_128;\n  undefined4 local_124;\n  undefined4 local_120;\n  char *local_11c;\n  int *local_118;\n  int *local_114;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  int *local_100;\n  int *local_fc;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0;\n  undefined auStack_ec [4];\n  char local_e8;\n  undefined local_e7;\n  char local_e6 [6];\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int *local_d4;\n  int *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  local_16c = param_1;\n  local_160 = param_2;\n  local_154 = param_4;\n  ppiVar2 = (int **)FUN_08008ad4();\n  local_114 = *ppiVar2;\n  local_118 = (int *)FUN_08005e40(local_114);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = FUN_08008af8(local_16c,0x40);\n    *local_160 = iVar3;\n    local_160[4] = iVar3;\n    if (iVar3 == 0) {\n      *local_16c = 0xc;\n      return (byte *)0xffffffff;\n    }\n    local_160[5] = 0x40;\n  }\n  local_128 = 0;\n  local_138 = (int *)0x0;\n  local_12c = 0;\n  local_d4 = (int *)0x0;\n  local_d0 = (int *)0x0;\n  local_11c = (char *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  local_124 = 0;\n  local_120 = 0;\n  ppiVar2 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar2;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)piVar27);\n        *ppiVar2 = param_3;\n        *(int **)((int)ppiVar2 + 4) = piVar27;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = (int **)((int)ppiVar2 + 8);\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800604a;\n          ppiVar2 = local_cc;\n        }\n        local_164 = local_164 + (int)piVar27;\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    piVar25 = (int *)0x0;\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    puVar29 = local_16c;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    switch(piVar24) {\n    case (int *)0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (piVar24 == (int *)0x0) goto LAB_08006216;\n      piVar16 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (char *)0x1;\n      piVar23 = (int *)&local_8c;\n      piVar22 = piVar16;\n      local_8c = (char)piVar24;\n      goto LAB_08006298;\n    case (int *)0x23:\n      piVar25 = (int *)((uint)piVar25 | 1);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x27:\n      iVar3 = FUN_08008ad4(local_16c);\n      local_110 = *(int **)(iVar3 + 4);\n      piVar24 = (int *)FUN_08005e40(local_110);\n      local_104 = piVar24;\n      iVar3 = FUN_08008ad4(puVar29);\n      local_108 = *(byte **)(iVar3 + 8);\n      if (piVar24 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 0x400);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2a:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2b:\n      local_f5 = 0x2b;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x2d:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\nLAB_08006602:\n      piVar25 = (int *)((uint)piVar25 | 4);\n      goto LAB_08005f4a;\n    case (int *)0x2e:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x2a) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (piVar24 + -0xc < (int *)0xa) {\n        piVar27 = (int *)((int)(piVar24 + -0xc) + (int)piVar27 * 10);\n        piVar24 = (int *)(uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case (int *)0x30:\n      piVar25 = (int *)((uint)piVar25 | 0x80);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x31:\n    case (int *)0x32:\n    case (int *)0x33:\n    case (int *)0x34:\n    case (int *)0x35:\n    case (int *)0x36:\n    case (int *)0x37:\n    case (int *)0x38:\n    case (int *)0x39:\n      goto switchD_08005f58_caseD_31;\n    case (int *)0x41:\n    case (int *)0x45:\n    case (int *)0x46:\n    case (int *)0x47:\n    case (int *)0x61:\n    case (int *)0x65:\n    case (int *)0x66:\n    case (int *)0x67:\n      puVar29 = (undefined4 *)((int)local_154 + 7U & 0xfffffff8);\n      uVar10 = *puVar29;\n      local_12c = puVar29[1];\n      local_168 = (int *)(local_12c & 0x7fffffff);\n      local_154 = (int **)(puVar29 + 2);\n      local_128 = uVar10;\n      iVar3 = FUN_08001170(uVar10,local_168,0xffffffff,0x7fefffff);\n      if ((iVar3 == 0) && (iVar3 = FUN_080009c0(uVar10,local_168,0xffffffff,0x7fefffff), iVar3 == 0)\n         ) {\n        iVar3 = FUN_080009ac(local_128,local_12c,local_124,local_120);\n        if (iVar3 == 0) {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        piVar23 = (int *)&UNK_08009f10;\n        piVar27 = (int *)&UNK_08009f0c;\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (piVar24 < (int *)0x48) {\n          piVar23 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar25 = (int *)((uint)piVar25 & 0xffffff7f);\n        local_158 = (char *)0x3;\n        local_13c = (int **)0x0;\n        piVar22 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      iVar3 = FUN_08001170(local_128,local_12c,local_128,local_12c);\n      if (iVar3 != 0) {\n        if ((int)local_12c < 0) {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        piVar23 = (int *)&UNK_08009f18;\n        piVar27 = (int *)&UNK_08009f14;\n        goto LAB_08006524;\n      }\n      if (piVar24 == (int *)0x61) {\n        uVar12 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar12,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          piVar25 = (int *)((uint)piVar25 | 2);\n        }\n        else {\n          param_3 = (int *)FUN_08008af8(local_16c,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar13 = *(ushort *)(local_160 + 3) | 0x40;\n            *(ushort *)(local_160 + 3) = uVar13;\n            goto LAB_0800604e;\n          }\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          piVar25 = (int *)((uint)piVar25 | 2);\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          uVar19 = local_12c + 0x80000000;\n        }\n        else {\n          local_144 = (int *)0x0;\n          uVar19 = local_12c;\n        }\n        local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n        piVar22 = piVar27;\n        local_158 = (char *)local_128;\n        if (piVar24 == (int *)0x61) {\n          uVar33 = FUN_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = FUN_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 != 0) {\n            local_f0 = (int *)0x1;\n          }\n          local_158 = \"0123456789abcdef\";\n          local_13c = ppiVar2;\n          local_138 = piVar28;\n          local_134 = piVar24;\n          local_130 = piVar27;\n          local_100 = piVar25;\n          local_fc = param_3;\n          pcVar18 = local_158;\n          uVar33 = local_150;\n          goto LAB_080072ba;\n        }\n        if (piVar24 == (int *)0x41) {\n          uVar33 = FUN_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = FUN_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 == 0) {\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          else {\n            local_f0 = (int *)0x1;\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (piVar24 == (int *)0x41) {\n          uVar12 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = (int *)((uint)piVar25 | 0x100);\n        local_148 = (int *)0x0;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar27 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if (((uint)piVar24 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar27 = (int *)0x1;\n            local_148 = (int *)0x0;\n          }\n          goto LAB_0800724a;\n        }\n        if ((int)local_12c < 0) goto LAB_08007414;\n        local_144 = (int *)0x0;\n        uVar19 = local_12c;\n      }\n      local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n      piStack_184 = piVar27;\n      local_158 = (char *)local_128;\n      if (piVar24 == (int *)0x66) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUN_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar22 = (int *)((int)piVar23 + (int)piVar27);\n        local_150._0_4_ = piVar27;\nLAB_0800764c:\n        if ((*(byte *)piVar23 == 0x30) &&\n           (iVar3 = FUN_08000998(local_158,uVar19,local_124,local_120), iVar3 == 0)) {\n          local_f0 = (int *)(1 - (int)(int *)local_150);\n        }\n        piVar22 = (int *)((int)piVar22 + (int)local_f0);\n      }\n      else if (piVar24 == (int *)0x46) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUN_080079e8(local_16c,local_180,local_128,uVar19);\n        local_150._0_4_ = piVar27;\nLAB_08007760:\n        piVar22 = (int *)((int)piVar23 + (int)(int *)local_150);\n        if (piVar24 == (int *)0x46) goto LAB_0800764c;\n      }\n      else {\n        local_178 = &local_e0;\n        local_150._0_4_ = piVar27;\n        if (local_168 == (int *)0x45) {\n          local_150._0_4_ = (int *)((int)piVar27 + 1);\n        }\n        local_188 = 2;\n        piStack_184 = (int *)local_150;\n        local_180 = &local_f0;\n        puStack_17c = auStack_ec;\n        piVar23 = (int *)FUN_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar16 = local_e0;\n        if (piVar24 == (int *)0x67) {\n          if (((uint)piVar25 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (piVar24 == (int *)0x47) {\n          if (((uint)piVar25 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar22 = (int *)((int)(int *)local_150 + (int)piVar23);\n      }\n      iVar3 = FUN_08000998(local_158,uVar19,local_124,local_120);\n      piVar16 = piVar22;\n      if (iVar3 == 0) {\n        for (; piVar16 = local_e0, local_e0 < piVar22; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)piVar16 - (int)piVar23);\n      goto LAB_08006cb0;\n    case (int *)0x43:\n    case (int *)0x63:\n      piVar16 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      piVar22 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (char *)0x1;\n      local_8c = SUB41(piVar27,0);\n      piVar23 = (int *)&local_8c;\n      goto LAB_08006298;\n    case (int *)0x44:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_08006102;\n    case (int *)0x4c:\n      piVar25 = (int *)((uint)piVar25 | 8);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x4f:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n    case (int *)0x6f:\n      if (((uint)piVar25 & 0x20) == 0) {\n        ppiVar14 = local_154 + 1;\n        if (((uint)piVar25 & 0x10) == 0) {\n          if (((uint)piVar25 & 0x40) == 0) {\n            if (((uint)piVar25 & 0x200) == 0) goto LAB_08006be2;\n            piVar22 = (int *)(uint)*(byte *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n          else {\n            piVar22 = (int *)(uint)*(ushort *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar22 = *local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\n        ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar22 = *ppiVar14;\n        piVar16 = ppiVar14[1];\n        local_154 = ppiVar14 + 2;\n      }\n      iVar3 = 0;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n      break;\n    case (int *)0x53:\n    case (int *)0x73:\n      local_f5 = 0;\n      piVar23 = *local_154;\n      ppiVar14 = local_154 + 1;\n      if (piVar23 == (int *)0x0) {\n        if ((int *)0x5 < piVar27) {\n          piVar27 = (int *)0x6;\n        }\n        piVar23 = (int *)&UNK_08009f44;\n        piVar16 = (int *)0x0;\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar22 = (int *)0x0;\n        local_168 = piVar27;\n        local_158 = (char *)piVar27;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (piVar27 == (int *)0xffffffff) {\n          local_158 = (char *)FUN_08005e40(piVar23);\n        }\n        else {\n          iVar3 = FUN_0800901c(piVar23,0,piVar27);\n          if (iVar3 == 0) {\n            piVar16 = (int *)(uint)local_f5;\n            local_148 = (int *)0x0;\n            local_13c = (int **)0x0;\n            local_134 = (int *)0x0;\n            local_130 = (int *)0x0;\n            piVar22 = (int *)0x0;\n            local_168 = piVar27;\n            local_158 = (char *)piVar27;\n            local_154 = ppiVar14;\n            goto LAB_08006538;\n          }\n          local_158 = (char *)(iVar3 - (int)piVar23);\n        }\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar16 = (int *)(uint)local_f5;\n        piVar22 = (int *)0x0;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        local_154 = ppiVar14;\n      }\n      goto LAB_08006538;\n    case (int *)0x55:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      iVar3 = 1;\n      local_154 = ppiVar14 + 2;\n      break;\n    case (int *)0x58:\n      local_11c = \"0123456789ABCDEF\";\n      if (((uint)piVar25 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_080061be;\n    case (int *)0x64:\n    case (int *)0x69:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bcc:\n        piVar22 = *local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(int)*(short *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bcc;\n        piVar22 = (int *)(int)*(char *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\nLAB_08006102:\n      if ((int)piVar16 < 0) {\n        bVar31 = piVar22 != (int *)0x0;\n        piVar22 = (int *)-(int)piVar22;\n        piVar16 = (int *)(-(int)piVar16 - (uint)bVar31);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar3 = 1;\n        iVar8 = 1;\n        piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n        if (((uint)piVar22 | (uint)piVar16) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      piVar21 = piVar25;\n      if (piVar16 != (int *)0x0 || (int *)0x9 < piVar22) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case (int *)0x68:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x68) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar25 = (int *)((uint)piVar25 | 0x200);\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        piVar25 = (int *)((uint)piVar25 | 0x40);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x6a:\n    case (int *)0x71:\n      piVar25 = (int *)((uint)piVar25 | 0x20);\n    case (int *)0x74:\n    case (int *)0x7a:\nswitchD_08005f58_caseD_74:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case (int *)0x6e:\n      ppiVar14 = local_154 + 1;\n      ppbVar15 = (byte **)*local_154;\n      local_154 = ppiVar14;\n      if (((uint)piVar25 & 0x20) != 0) {\n        *ppbVar15 = local_164;\n        ppbVar15[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) != 0) {\n          *(short *)ppbVar15 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if (((uint)piVar25 & 0x200) != 0) {\n          *(char *)ppbVar15 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar15 = local_164;\n      goto LAB_0800620e;\n    case (int *)0x70:\n      local_f4 = 0x7830;\n      piVar22 = *local_154;\n      local_11c = \"0123456789abcdef\";\n      piVar25 = (int *)((uint)piVar25 | 2);\n      piVar16 = (int *)0x0;\n      iVar3 = 2;\n      piVar24 = (int *)0x78;\n      local_154 = local_154 + 1;\n      break;\n    case (int *)0x75:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bf2:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(uint)*(ushort *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bf2;\n        piVar22 = (int *)(uint)*(byte *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      break;\n    case (int *)0x78:\n      local_11c = \"0123456789abcdef\";\n      if (((uint)piVar25 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar14 = local_154 + 1;\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) == 0) {\n          if (((uint)piVar25 & 0x200) == 0) goto LAB_08006bbc;\n          piVar22 = (int *)(uint)*(byte *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n        else {\n          piVar22 = (int *)(uint)*(ushort *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        local_154 = ppiVar14;\n      }\nLAB_080061be:\n      if ((((uint)piVar25 & 1) != 0) && (((uint)piVar22 | (uint)piVar16) != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 2);\n        local_f4 = CONCAT11((char)piVar24,0x30);\n      }\n      iVar3 = 2;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      if (iVar3 != 1) goto LAB_08006136;\nLAB_08006980:\n      piVar21 = piVar25;\n      if (piVar16 == (int *)0x0 && piVar22 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar32 = CONCAT44(piVar16,piVar22);\n      piVar23 = (int *)(&bStack_2a + 2);\n      piVar22 = (int *)0x0;\n      pbVar26 = local_108;\n      local_168 = piVar23;\n      local_158 = (char *)ppiVar2;\n      local_150._0_4_ = piVar25;\n      local_148 = piVar24;\n      do {\n        iVar3 = (int)((ulonglong)lVar32 >> 0x20);\n        uVar19 = (uint)lVar32;\n        cVar6 = '\\n';\n        FUN_080011ec(uVar19,iVar3,10,0);\n        *(byte *)((int)piVar23 + -1) = cVar6 + 0x30;\n        piVar22 = (int *)((int)piVar22 + 1);\n        piVar23 = (int *)((int)piVar23 + -1);\n        if ((((((uint)piVar25 & 0x400) != 0) && (piVar22 == (int *)(uint)*pbVar26)) &&\n            (piVar22 != (int *)0xff)) && (iVar3 != 0 || 9 < uVar19)) {\n          piVar23 = (int *)((int)piVar23 - (int)local_104);\n          FUN_08009768(piVar23,local_110,local_104);\n          if (pbVar26[1] == 0) {\n            piVar22 = (int *)0x0;\n          }\n          else {\n            pbVar26 = pbVar26 + 1;\n            piVar22 = (int *)0x0;\n          }\n        }\n        lVar32 = FUN_080011ec(uVar19,iVar3,10,0);\n      } while (lVar32 != 0);\n      piVar24 = local_148;\n      piVar25 = (int *)local_150;\n      ppiVar2 = (int **)local_158;\n      local_158 = (char *)((int)local_168 - (int)piVar23);\n      local_138 = piVar22;\n      local_108 = pbVar26;\n    }\n    else {\n      piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n      iVar8 = iVar3;\n      if (((uint)piVar22 | (uint)piVar16) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar3 == 0) {\n            local_158 = (char *)((uint)piVar25 & 1);\n            if ((int *)local_158 == (int *)0x0) {\n              piVar23 = (int *)(&bStack_2a + 2);\n              piVar25 = piVar21;\n            }\n            else {\n              piVar23 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n              piVar25 = piVar21;\n            }\n          }\n          else {\n            piVar23 = (int *)(&bStack_2a + 2);\n            piVar25 = piVar21;\n            local_158 = (char *)piVar27;\n          }\n        }\n        else {\n          piVar25 = piVar21;\n          if (iVar3 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar22 + '0';\n          piVar23 = (int *)(&bStack_2a + 1);\n          local_158 = (char *)0x1;\n          piVar25 = piVar21;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar3 = iVar8;\n        piVar25 = piVar21;\n        if (iVar8 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar3 == 2) {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = (int *)((uint)piVar22 >> 4 | (int)piVar16 << 0x1c);\n            piVar16 = (int *)((uint)piVar16 >> 4);\n            piVar23 = (int *)((int)piVar23 + -1);\n            *(char *)piVar23 = local_11c[(uint)piVar22 & 0xf];\n            piVar22 = piVar21;\n          } while (((uint)piVar21 | (uint)piVar16) != 0);\n        }\n        else {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = piVar23;\n            piVar9 = (int *)((uint)piVar22 >> 3 | (int)piVar16 << 0x1d);\n            piVar16 = (int *)((uint)piVar16 >> 3);\n            iVar3 = ((uint)piVar22 & 7) + 0x30;\n            *(byte *)((int)piVar21 + -1) = (byte)iVar3;\n            piVar23 = (int *)((int)piVar21 + -1);\n            piVar22 = piVar9;\n          } while (((uint)piVar9 | (uint)piVar16) != 0);\n          if ((((uint)piVar25 & 1) != 0) && (iVar3 != 0x30)) {\n            piVar23 = (int *)((int)piVar21 + -2);\n            *(byte *)((int)piVar21 + -2) = 0x30;\n            local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = piVar27;\n    local_168 = (int *)local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  piVar28 = local_160;\n  if (local_d0 == (int *)0x0) {\nLAB_0800604a:\n    uVar13 = *(ushort *)(local_160 + 3);\n  }\n  else {\n    FUN_080097cc(local_16c,local_160,&local_d8);\n    uVar13 = *(ushort *)(piVar28 + 3);\n  }\nLAB_0800604e:\n  if ((uVar13 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (piVar24 == (int *)0x6c) {\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    piVar25 = (int *)((uint)piVar25 | 0x20);\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    piVar25 = (int *)((uint)piVar25 | 0x10);\n  }\n  goto LAB_08005f4a;\n  while( true ) {\n    iVar8 = FUN_08000998((int)uVar33,uVar10,local_124,local_120);\n    if (iVar8 != 0) break;\nLAB_080072ba:\n    piVar16 = param_3;\n    piVar22 = (int *)((int)piVar22 + -1);\n    uVar33 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x40300000);\n    iVar3 = FUN_0800119c();\n    uVar34 = FUN_080003f4();\n    uVar33 = FUN_08000158((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar34,\n                          (int)((ulonglong)uVar34 >> 0x20));\n    uVar10 = (undefined4)((ulonglong)uVar33 >> 0x20);\n    param_3 = (int *)((int)piVar16 + 1);\n    *(char *)piVar16 = pcVar18[iVar3];\n    if (piVar22 == (int *)0xffffffff) break;\n  }\n  piVar23 = local_fc;\n  piVar25 = local_100;\n  piVar27 = local_130;\n  piVar24 = local_134;\n  piVar28 = local_138;\n  ppiVar2 = local_13c;\n  local_13c = (int **)piVar22;\n  local_134 = piVar16;\n  local_150 = uVar33;\n  iVar8 = FUN_080009e8((int)uVar33,uVar10,0,0x3fe00000);\n  if (iVar8 == 0) {\n    iVar8 = FUN_08000998((int *)local_150,local_150._4_4_,0,0x3fe00000);\n    if ((iVar8 != 0) && (iVar3 << 0x1f < 0)) goto LAB_0800748a;\n    if (-1 < (int)local_13c) {\n      piVar16 = (int *)((byte *)((int)local_13c + 1) + (int)param_3);\n      piVar22 = param_3;\n      do {\n        param_3 = (int *)((int)piVar22 + 1);\n        *(byte *)piVar22 = 0x30;\n        piVar22 = param_3;\n      } while (piVar16 != param_3);\n    }\n  }\n  else {\nLAB_0800748a:\n    bVar1 = local_158[0xf];\n    bVar7 = *(byte *)piVar16;\n    piVar22 = param_3;\n    local_e0 = local_134;\n    while (bVar1 == bVar7) {\n      *(byte *)((int)piVar22 + -1) = 0x30;\n      bVar7 = *(byte *)((int)local_e0 + -1);\n      piVar22 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar7 == 0x39) {\n      bVar7 = local_158[10];\n    }\n    else {\n      bVar7 = bVar7 + 1;\n    }\n    *(byte *)((int)piVar22 + -1) = bVar7;\n  }\n  local_138 = (int *)((int)param_3 - (int)piVar23);\nLAB_08006cb0:\n  local_134 = local_f0;\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0 + 3) < 0 == SCARRY4((int)local_f0,3)) &&\n       ((int)local_f0 <= (int)piVar27)) {\n      if ((int)local_f0 < (int)local_138) {\n        local_158 = (char *)((int)local_138 + (int)local_118);\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (char *)((int)local_158 + (1 - (int)local_f0));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        piVar24 = (int *)0x67;\n      }\n      else {\n        if ((int)piVar25 << 0x1f < 0) {\n          local_158 = (char *)((int)local_f0 + (int)local_118);\n        }\n        else {\n          local_158 = (char *)local_f0;\n        }\n        if (-1 < (int)piVar25 << 0x15) {\n          piVar24 = (int *)0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074fc;\n        }\n        piVar24 = (int *)0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    piVar24 = (int *)((int)piVar24 + -2);\n    local_168 = (int *)((uint)piVar24 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8 = (char)piVar24;\n    if (local_168 == (int *)0x41) {\n      local_e8 = local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0 + -1);\n    if ((int)piVar27 < 0) {\n      local_e7 = 0x2d;\n      local_f0 = (int *)(1 - (int)local_f0);\n    }\n    else {\n      local_e7 = 0x2b;\n      local_f0 = piVar27;\n    }\n    if ((int)local_f0 < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e6[0] = 0x30;\n        pcVar18 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar18 = (char)local_f0 + '0';\n      pcVar18 = pcVar18 + 1;\n    }\n    else {\n      pbVar30 = abStack_dc + 3;\n      pbVar26 = pbVar30;\n      do {\n        pbVar5 = pbVar26;\n        piVar22 = (int *)((uint)local_f0 / 10);\n        pbVar5[-1] = (char)local_f0 + (char)piVar22 * -10 + 0x30;\n        pbVar26 = pbVar5 + -1;\n        local_f0 = piVar22;\n      } while ((int *)0x9 < piVar22);\n      uVar19 = (uint)(piVar22 + 0xc) & 0xff;\n      pbVar5[-2] = (byte)uVar19;\n      if (pbVar5 + -2 < pbVar30) {\n        pbVar5 = pbVar26;\n        puVar20 = (undefined *)((int)&local_e8 + 2);\n        while( true ) {\n          *puVar20 = (char)uVar19;\n          if (pbVar30 == pbVar5) break;\n          uVar19 = (uint)*pbVar5;\n          pbVar5 = pbVar5 + 1;\n          puVar20 = puVar20 + 1;\n        }\n        pcVar18 = (char *)(((int)&local_188 * 2 - (int)pbVar26) + 0x152);\n      }\n      else {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar18 + -(int)&local_e8);\n    local_158 = (char *)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)piVar25 << 0x1f < 0)) {\n      local_158 = (char *)((int)local_158 + (int)local_118);\n    }\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    piVar25 = (int *)((uint)piVar25 & 0xfffffbff | 0x100);\n    local_f0 = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0 < 1) {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_168 = (int *)0x1;\n        local_158 = (char *)0x1;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_118 + 1) + (int)piVar27);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      piVar25 = local_140;\n    }\n    else {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)local_f0;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_f0 + (int)local_118) + (int)piVar27);\n      }\nLAB_080074f8:\n      if (-1 < (int)piVar25 << 0x15) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      uVar19 = (uint)*local_108;\n      while (uVar19 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar19) goto LAB_08007524;\n          uVar4 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar19);\n          if (uVar4 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar19 = uVar4;\n          if (uVar4 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int **)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (char *)((int)local_158 + (int)local_104 * ((int)local_130 + (int)local_13c));\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      piVar25 = local_140;\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = (int *)0x0;\nLAB_08006538:\n    if (piVar16 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar16 = (int *)0x2d;\n    piVar22 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n  }\nLAB_08006298:\n  piVar27 = local_160;\n  puVar29 = local_16c;\n  local_150._0_4_ = (int *)((uint)piVar25 & 2);\n  if ((int *)local_150 != (int *)0x0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  local_144 = (int *)((uint)piVar25 & 0x84);\n  if ((local_144 == (int *)0x0) &&\n     (piVar21 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar21)) {\n    if (0x10 < (int)piVar21) {\n      piVar16 = (int *)0x10;\n      local_100 = piVar24;\n      do {\n        piVar9 = piVar21;\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = piVar16;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n          piVar24 = local_100;\n        }\n        else {\n          local_140 = piVar16;\n          iVar3 = FUN_080097cc(puVar29,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = local_140;\n          piVar24 = local_100;\n        }\n        piVar21 = piVar9 + -4;\n        local_100 = piVar24;\n      } while (0x10 < (int)piVar21);\n      piVar21 = piVar9 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar21);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar21;\n    if ((int)local_d4 < 8) {\n      piVar16 = (int *)(uint)local_f5;\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar16 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar16 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 1);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f5;\n    ppiVar2[1] = (int *)0x1;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if ((int *)local_150 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 2);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f4;\n    ppiVar2[1] = (int *)0x2;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  if ((local_144 == (int *)0x80) &&\n     (piVar16 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar16)) {\n    if (0x10 < (int)piVar16) {\n      do {\n        while( true ) {\n          piVar21 = piVar16;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = FUN_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = piVar21 + -4;\n          if ((int)(piVar21 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar16 = piVar21 + -4;\n      } while (0x10 < (int)(piVar21 + -4));\nLAB_08006882:\n      piVar16 = piVar21 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar16);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar16;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  piVar22 = (int *)((int)piVar22 - (int)local_158);\n  if (0 < (int)piVar22) {\n    if (0x10 < (int)piVar22) {\n      do {\n        while( true ) {\n          piVar16 = piVar22;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = FUN_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar22 = piVar16 + -4;\n          if ((int)(piVar16 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar22 = piVar16 + -4;\n      } while (0x10 < (int)(piVar16 + -4));\nLAB_080063d2:\n      piVar22 = piVar16 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar22);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar22;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_d0;\n  if (((uint)piVar25 & 0x100) == 0) {\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)local_158);\n    *ppiVar2 = piVar23;\n    ppiVar2[1] = (int *)local_158;\n    if ((int)local_d4 < 8) {\nLAB_0800640e:\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else if ((int)piVar24 < 0x66) {\n    local_158 = (char *)((int)local_d0 + 1);\n    piVar27 = (int *)((int)local_d4 + 1);\n    ppiVar14 = ppiVar2 + 2;\n    local_d0 = (int *)local_158;\n    if (((int)local_138 < 2) && (((uint)piVar25 & 1) == 0)) {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)piVar27 < 8) {\n        local_150._0_4_ = (int *)((int)local_d4 + 2);\n        ppiVar2 = ppiVar2 + 4;\n      }\n      else {\n        local_d4 = piVar27;\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        local_150._0_4_ = (int *)((int)local_d4 + 1);\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n        ppiVar2 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      local_d4 = piVar27;\n      if (7 < (int)piVar27) {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n      }\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_158 = (char *)((int)local_158 + (int)local_118);\n      *ppiVar14 = local_114;\n      ppiVar14[1] = local_118;\n      local_d0 = (int *)local_158;\n      if ((int)local_d4 < 8) {\n        ppiVar17 = ppiVar14 + 2;\n      }\n      else {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar17 = local_cc;\n      }\n      piVar24 = local_d4;\n      local_150._0_4_ = (int *)((int)local_d4 + 1);\n      piVar22 = (int *)((int)local_138 + -1);\n      ppiVar11 = ppiVar17 + 2;\n      local_158 = (char *)local_d0;\n      local_144 = (int *)local_150;\n      iVar3 = FUN_08000998(local_128,local_12c,local_124,local_120);\n      piVar27 = local_160;\n      puVar29 = local_16c;\n      if (iVar3 == 0) {\n        local_158 = (char *)((int)local_158 + (int)piVar22);\n        *ppiVar17 = (int *)((int)piVar23 + 1);\n        ppiVar17[1] = piVar22;\n        local_d0 = (int *)local_158;\n        if ((int)(int *)local_150 < 8) {\n          local_150._0_4_ = (int *)((int)piVar24 + 2);\n          ppiVar14 = ppiVar11;\n          ppiVar2 = ppiVar17 + 4;\n        }\n        else {\nLAB_08006d9c:\n          local_158 = (char *)local_d0;\n          local_d4 = (int *)local_150;\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          local_150._0_4_ = (int *)((int)local_d4 + 1);\n          local_158 = (char *)local_d0;\n          ppiVar14 = local_cc;\n          ppiVar2 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar14 = ppiVar17;\n        ppiVar2 = ppiVar11;\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)local_158;\n          local_d4 = local_144;\n          if (0x10 < (int)piVar22) {\n            while( true ) {\n              local_d0 = local_d0 + 4;\n              *ppiVar17 = (int *)0x8009f60;\n              ppiVar17[1] = (int *)0x10;\n              if ((int)local_d4 < 8) {\n                ppiVar17 = ppiVar17 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar27,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar17 = local_cc;\n              }\n              piVar22 = piVar22 + -4;\n              if ((int)piVar22 < 0x11) break;\n              local_d4 = (int *)((int)local_d4 + 1);\n            }\n            local_150._0_4_ = (int *)((int)local_d4 + 1);\n            ppiVar11 = ppiVar17 + 2;\n            local_158 = (char *)local_d0;\n          }\n          *ppiVar17 = (int *)0x8009f60;\n          ppiVar17[1] = piVar22;\n          local_158 = (char *)((int)local_158 + (int)piVar22);\n          local_d0 = (int *)local_158;\n          if (7 < (int)(int *)local_150) goto LAB_08006d9c;\n          local_150._0_4_ = (int *)((int)(int *)local_150 + 1);\n          ppiVar2 = ppiVar11 + 2;\n          ppiVar14 = ppiVar11;\n        }\n      }\n    }\n    ppiVar14[1] = local_10c;\n    local_d0 = (int *)((int)local_158 + (int)local_10c);\n    local_d4 = (int *)local_150;\n    *ppiVar14 = (int *)&local_e8;\n    piVar27 = local_d0;\n    if (7 < (int)(int *)local_150) {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else {\n    iVar3 = FUN_08000998(local_128,local_12c,local_124,local_120);\n    if (iVar3 == 0) {\n      if ((int)local_f0 < 1) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)piVar27 + 1);\n        *ppiVar2 = (int *)&DAT_08009f4c;\n        ppiVar2[1] = (int *)0x1;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        if (((local_f0 != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)local_d0 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n          }\n          puVar29 = local_16c;\n          if ((int)local_f0 < 0) {\n            piVar27 = (int *)-(int)local_f0;\n            if ((int)(local_f0 + 4) < 0 != SCARRY4((int)local_f0,0x10)) {\n              do {\n                local_d4 = (int *)((int)local_d4 + 1);\n                local_d0 = local_d0 + 4;\n                *ppiVar2 = (int *)0x8009f60;\n                ppiVar2[1] = (int *)0x10;\n                if ((int)local_d4 < 8) {\n                  ppiVar2 = ppiVar2 + 2;\n                }\n                else {\n                  iVar3 = FUN_080097cc(puVar29,local_160,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  ppiVar2 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)local_d0 + (int)piVar27);\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = piVar27;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\n          local_d0 = (int *)((int)local_d0 + (int)local_138);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar24 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar24 = local_138;\n        }\n        if (0 < (int)piVar24) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar24);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = piVar24;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        piVar22 = local_134;\n        if (-1 < (int)piVar24) {\n          piVar22 = (int *)((int)local_134 - (int)piVar24);\n        }\n        if (0 < (int)piVar22) {\n          for (; 0x10 < (int)piVar22; piVar22 = piVar22 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = piVar27 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          local_d4 = (int *)((int)local_d4 + 1);\n          piVar27 = (int *)((int)piVar27 + (int)piVar22);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar22;\n          local_d0 = piVar27;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar22 = local_104;\n        piVar24 = local_160;\n        puVar29 = local_16c;\n        piVar16 = (int *)((int)local_134 + (int)piVar23);\n        if (((uint)piVar25 & 0x400) != 0) {\n          local_158 = (char *)((int)piVar23 + (int)local_138);\n          pbVar26 = local_108;\n          local_150._0_4_ = piVar28;\n          local_144 = piVar25;\n          local_140 = piVar23;\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int **)0x0) goto LAB_0800717e;\n          pbVar26 = pbVar26 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)piVar27 + (int)piVar22);\n            *ppiVar2 = local_110;\n            ppiVar2[1] = piVar22;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = (int *)(uint)*pbVar26;\n            piVar28 = (int *)((int)local_158 - (int)piVar16);\n            if ((int)piVar27 <= (int)(int *)((int)local_158 - (int)piVar16)) {\n              piVar28 = piVar27;\n            }\n            if (0 < (int)piVar28) {\n              local_d0 = (int *)((int)local_d0 + (int)piVar28);\n              local_d4 = (int *)((int)local_d4 + 1);\n              *ppiVar2 = piVar16;\n              ppiVar2[1] = piVar28;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar2 = local_cc;\n                piVar27 = (int *)(uint)*pbVar26;\n              }\n            }\n            piVar25 = piVar27;\n            if (-1 < (int)piVar28) {\n              piVar25 = (int *)((int)piVar27 - (int)piVar28);\n            }\n            if (0 < (int)piVar25) {\n              for (; 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n                while( true ) {\n                  local_d4 = (int *)((int)local_d4 + 1);\n                  local_d0 = local_d0 + 4;\n                  *ppiVar2 = (int *)0x8009f60;\n                  ppiVar2[1] = (int *)0x10;\n                  if ((int)local_d4 < 8) break;\n                  iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  piVar25 = piVar25 + -4;\n                  ppiVar2 = local_cc;\n                  if ((int)piVar25 < 0x11) goto LAB_08007156;\n                }\n                ppiVar2 = ppiVar2 + 2;\n              }\nLAB_08007156:\n              local_d4 = (int *)((int)local_d4 + 1);\n              local_d0 = (int *)((int)local_d0 + (int)piVar25);\n              *ppiVar2 = (int *)0x8009f60;\n              ppiVar2[1] = piVar25;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = local_cc;\n              }\n            }\n            piVar16 = (int *)((int)piVar16 + (int)piVar27);\n            piVar27 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int **)0x0) {\n              piVar23 = local_140;\n              piVar25 = local_144;\n              piVar28 = (int *)local_150;\n              local_108 = pbVar26;\n              if ((int *)((int)local_140 + (int)local_138) <= piVar16) {\n                piVar16 = (int *)((int)local_140 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int **)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0 < (int)local_138) || (((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)piVar27 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar24 = (int *)((int)local_138 - (int)local_f0);\n        piVar22 = (int *)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16);\n        if ((int)piVar24 <= (int)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16)) {\n          piVar22 = piVar24;\n        }\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar22);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar16;\n          ppiVar2[1] = piVar22;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar24 = (int *)((int)local_138 - (int)local_f0);\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        if (-1 < (int)piVar22) {\n          piVar24 = (int *)((int)piVar24 - (int)piVar22);\n        }\n        if (0 < (int)piVar24) {\n          for (; local_d0 = piVar27, 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_d0 = (int *)((int)piVar27 + 1);\n      *ppiVar2 = (int *)&DAT_08009f4c;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)local_d4 < 8) {\n        ppiVar2 = ppiVar2 + 2;\n      }\n      else {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar2 = local_cc;\n      }\n      if (((int)local_f0 < (int)local_138) || (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)local_118);\n        *ppiVar2 = local_114;\n        ppiVar2[1] = local_118;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar22 = local_160;\n        puVar29 = local_16c;\n        piVar24 = (int *)((int)local_138 + -1);\n        piVar27 = local_d0;\n        if (0 < (int)piVar24) {\n          for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar22,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\nLAB_08007014:\n          local_d0 = (int *)((int)local_d0 + (int)piVar24);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar24;\njoined_r0x08006a1c:\n          local_d4 = (int *)((int)local_d4 + 1);\n          if (7 < (int)local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  piVar24 = local_160;\n  puVar29 = local_16c;\n  if ((((uint)piVar25 & 4) != 0) &&\n     (piVar25 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar25)) {\n    for (; local_d0 = piVar27, 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n      while( true ) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = (int *)0x10;\n        if ((int)local_d4 < 8) break;\n        iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        piVar25 = piVar25 + -4;\n        ppiVar2 = local_cc;\n        if ((int)piVar25 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar25);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar25;\n    piVar27 = local_d0;\n    if ((7 < (int)local_d4) &&\n       (iVar3 = FUN_080097cc(local_16c,local_160,&local_d8), piVar27 = local_d0, iVar3 != 0))\n    goto LAB_0800603e;\n  }\n  piVar24 = local_15c;\n  if ((int)local_15c < (int)local_168) {\n    piVar24 = local_168;\n  }\n  local_164 = local_164 + (int)piVar24;\n  if ((piVar27 == (int *)0x0) || (iVar3 = FUN_080097cc(local_16c,local_160,&local_d8), iVar3 == 0))\n  {\n    local_d4 = (int *)0x0;\n    if (local_148 != (int *)0x0) {\n      FUN_080088ec(local_16c,local_148);\n    }\n    ppiVar2 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    FUN_080088ec(local_16c,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  piVar16 = piVar24 + -0xc;\n  piVar22 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar22 + 1);\n    piVar24 = (int *)(uint)*(byte *)piVar22;\n    local_15c = (int *)((int)piVar16 + (int)local_15c * 10);\n    piVar16 = piVar24 + -0xc;\n    piVar22 = piVar28;\n  } while (piVar16 < (int *)0xa);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "calling": [
                "FUN_08005dfc"
            ],
            "called": [
                "FUN_080097cc",
                "FUN_080079e8",
                "FUN_0800901c",
                "FUN_080011ec",
                "FUN_080009e8",
                "FUN_08001170",
                "FUN_08005e40",
                "FUN_080003f4",
                "FUN_0800119c",
                "FUN_080009ac",
                "FUN_08008ad4",
                "FUN_080088ec",
                "FUN_08000998",
                "FUN_080004c8",
                "FUN_080009c0",
                "FUN_08009768",
                "FUN_080096e0",
                "FUN_08008af8",
                "FUN_08000158"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078a0": {
            "entrypoint": "0x080078a0",
            "current_name": "FUNC_080078a0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080078a4) */\n\nvoid FUNC_080078a0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080078a0": "FUNC_080078a0"
            },
            "calling": [
                "FUN_08005d20"
            ],
            "called": [
                "FUN_080098c0"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078c0": {
            "entrypoint": "0x080078c0",
            "current_name": "calculate_division_080078c0",
            "code": "\nuint calculateDivision_080078c0(int dividend,int divisor)\n\n{\n  uint tempValue;\n  uint *tempPointer;\n  int carry;\n  int divisorLength;\n  int lastIndex;\n  uint quotient;\n  uint *divisorArray;\n  uint *dividendArray;\n  uint *lastDivisor;\n  uint remainder;\n  uint *tempPointer2;\n  uint *tempPointer3;\n  \n  divisorLength = *(int *)(divisor + 0x10);\n  if (*(int *)(dividend + 0x10) < divisorLength) {\n    return 0;\n  }\n  lastIndex = divisorLength + -1;\n  divisorArray = (uint *)(divisor + 0x14);\n  dividendArray = (uint *)(dividend + 0x14);\n  quotient = dividendArray[lastIndex] / (divisorArray[lastIndex] + 1);\n  lastDivisor = divisorArray + lastIndex;\n  if (quotient != 0) {\n    tempValue = 0;\n    carry = 0;\n    tempPointer = dividendArray;\n    tempPointer2 = divisorArray;\n    do {\n      tempPointer3 = tempPointer2 + 1;\n      tempValue = quotient * (*tempPointer2 & 0xffff) + tempValue;\n      remainder = quotient * (*tempPointer2 >> 0x10) + (tempValue >> 0x10);\n      tempValue = (carry - (tempValue & 0xffff)) + (*tempPointer & 0xffff);\n      carry = ((*tempPointer >> 0x10) - (remainder & 0xffff)) + ((int)tempValue >> 0x10);\n      *tempPointer = tempValue & 0xffff | carry * 0x10000;\n      carry = carry >> 0x10;\n      tempValue = remainder >> 0x10;\n      tempPointer = tempPointer + 1;\n      tempPointer2 = tempPointer3;\n    } while (tempPointer3 <= lastDivisor);\n    if (dividendArray[lastIndex] == 0) {\n      if ((dividendArray < dividendArray + divisorLength + -2) && (dividendArray[divisorLength + -2] == 0)) {\n        tempPointer = dividendArray + divisorLength + -3;\n        do {\n          lastIndex = lastIndex + -1;\n          if (tempPointer <= dividendArray) break;\n          tempValue = *tempPointer;\n          tempPointer = tempPointer + -1;\n        } while (tempValue == 0);\n      }\n      *(int *)(dividend + 0x10) = lastIndex;\n    }\n  }\n  divisorLength = FUN_080094f8();\n  if (-1 < divisorLength) {\n    divisorLength = 0;\n    quotient = quotient + 1;\n    tempPointer = dividendArray;\n    do {\n      tempPointer2 = divisorArray + 1;\n      tempValue = (divisorLength - (*divisorArray & 0xffff)) + (*tempPointer & 0xffff);\n      divisorLength = ((*tempPointer >> 0x10) - (*divisorArray >> 0x10)) + ((int)tempValue >> 0x10);\n      *tempPointer = tempValue & 0xffff | divisorLength * 0x10000;\n      divisorLength = divisorLength >> 0x10;\n      tempPointer = tempPointer + 1;\n      divisorArray = tempPointer2;\n    } while (tempPointer2 <= lastDivisor);\n    if (dividendArray[lastIndex] == 0) {\n      if ((dividendArray < dividendArray + lastIndex + -1) && (dividendArray[lastIndex + -1] == 0)) {\n        divisorArray = dividendArray + lastIndex + -2;\n        do {\n          lastIndex = lastIndex + -1;\n          if (divisorArray <= dividendArray) break;\n          tempValue = *divisorArray;\n          divisorArray = divisorArray + -1;\n        } while (tempValue == 0);\n      }\n      *(int *)(dividend + 0x10) = lastIndex;\n    }\n  }\n  return quotient;\n}\n\n",
            "renaming": {
                "FUN_080078c0": "calculate_division_080078c0",
                "param_1": "dividend",
                "param_2": "divisor",
                "iVar4": "divisorLength",
                "iVar5": "lastIndex",
                "puVar7": "divisorArray",
                "puVar8": "dividendArray",
                "uVar6": "quotient",
                "puVar9": "lastDivisor",
                "uVar1": "tempValue",
                "puVar2": "tempPointer",
                "puVar11": "tempPointer2",
                "puVar12": "tempPointer3",
                "uVar10": "remainder",
                "iVar3": "carry"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080094f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e8": {
            "entrypoint": "0x080079e8",
            "current_name": "convert_number_to_formatted_string_080079e8",
            "code": "\nchar * convertNumberToFormattedString_080079e8(int num,undefined4 flags,uint mantissa,uint exponent,uint minIntegerDigits,\n                   uint minFractionDigits,int *totalDigits,uint *isNegative,char **result)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  byte bVar5;\n  undefined4 uVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  char *pcVar10;\n  uint uVar11;\n  undefined4 uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  int iVar15;\n  undefined4 uVar16;\n  uint uVar17;\n  uint uVar18;\n  int iVar19;\n  char *pcVar20;\n  char *pcVar21;\n  undefined4 *puVar22;\n  undefined4 uVar23;\n  int iVar24;\n  bool bVar25;\n  undefined8 uVar26;\n  undefined8 uVar27;\n  undefined8 uVar28;\n  uint local_80;\n  uint local_7c;\n  uint local_74;\n  int local_70;\n  uint local_68;\n  int local_60;\n  int local_5c;\n  uint local_58;\n  uint local_48;\n  uint uStack_44;\n  uint local_38;\n  uint local_34;\n  int local_30;\n  int local_2c [2];\n  \n  iVar14 = *(int *)(num + 0x40);\n  if (iVar14 != 0) {\n    uVar18 = *(uint *)(num + 0x44);\n    *(uint *)(iVar14 + 4) = uVar18;\n    *(int *)(iVar14 + 8) = 1 << (uVar18 & 0xff);\n    FUN_0800910c(num,iVar14);\n    *(undefined4 *)(num + 0x40) = 0;\n  }\n  bVar25 = (int)exponent < 0;\n  uVar18 = exponent;\n  if (bVar25) {\n    uVar18 = exponent & 0x7fffffff;\n  }\n  *isNegative = (uint)bVar25;\n  local_7c = exponent;\n  if (bVar25) {\n    local_7c = uVar18;\n  }\n  uVar17 = local_7c;\n  if ((~uVar18 & 0x7ff00000) == 0) {\n    *totalDigits = 9999;\n    if ((mantissa == 0) && ((uVar18 & 0xfffff) == 0)) {\n      pcVar10 = \"Infinity\";\n      if (result == (char **)0x0) {\n        return pcVar10;\n      }\n      pcVar21 = \"\";\n    }\n    else {\n      pcVar10 = \"NaN\";\n      if (result == (char **)0x0) {\n        return pcVar10;\n      }\n      pcVar21 = \"\";\n    }\n    *result = pcVar21;\n    return pcVar10;\n  }\n  uVar26 = FUN_08000998(mantissa,local_7c,0,0);\n  if ((int)uVar26 != 0) {\n    *totalDigits = 1;\n    if (result != (char **)0x0) {\n      *result = \"\";\n      return \"0\";\n    }\n    return \"0\";\n  }\n  uVar6 = FUN_08009630(num,(int)((ulonglong)uVar26 >> 0x20),mantissa,local_7c,local_2c,&local_30)\n  ;\n  iVar14 = local_30;\n  if (uVar18 >> 0x14 == 0) {\n    iVar19 = local_2c[0] + local_30;\n    iVar15 = iVar19 + 0x432;\n    if (iVar15 < 0x21) {\n      uVar18 = mantissa << (0x20U - iVar15 & 0xff);\n    }\n    else {\n      uVar18 = mantissa >> (iVar19 + 0x412U & 0xff) | uVar18 << (0x40U - iVar15 & 0xff);\n    }\n    uVar26 = FUN_080003d4(uVar18);\n    iVar19 = iVar19 + -1;\n    bVar25 = true;\n    uVar11 = (int)((ulonglong)uVar26 >> 0x20) + 0xfe100000;\n    uVar18 = (uint)uVar26;\n  }\n  else {\n    iVar19 = (uVar18 >> 0x14) - 0x3ff;\n    uVar11 = local_7c & 0xfffff | 0x3ff00000;\n    bVar25 = false;\n    uVar18 = mantissa;\n  }\n  uVar26 = FUN_08000158(uVar18,uVar11,0,0x3ff80000);\n  uVar26 = FUN_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0x636f4361,0x3fd287a7);\n  uVar26 = FUN_0800015c((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0x8b60c8b3,0x3fc68a28);\n  uVar27 = FUN_080003f4(iVar19);\n  uVar27 = FUN_080004c8((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),0x509f79fb,0x3fd34413);\n  uVar26 = FUN_0800015c((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar27,\n                        (int)((ulonglong)uVar27 >> 0x20));\n  uVar13 = (undefined4)((ulonglong)uVar26 >> 0x20);\n  local_74 = FUN_0800119c();\n  iVar15 = FUN_080009ac((int)uVar26,uVar13,0,0);\n  if (iVar15 != 0) {\n    uVar27 = FUN_080003f4(local_74);\n    iVar15 = FUN_08000998((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),(int)uVar26,uVar13);\n    if (iVar15 == 0) {\n      local_74 = local_74 - 1;\n    }\n  }\n  if (local_74 < 0x17) {\n    iVar15 = FUN_080009e8(*(undefined4 *)(&DAT_08009fa8 + local_74 * 8),\n                          *(undefined4 *)(&DAT_08009fac + local_74 * 8),mantissa,local_7c);\n    if (iVar15 == 0) {\n      bVar2 = false;\n    }\n    else {\n      local_74 = local_74 - 1;\n      bVar2 = false;\n    }\n  }\n  else {\n    bVar2 = true;\n  }\n  iVar15 = (iVar14 - iVar19) + -1;\n  if (iVar15 < 0) {\n    local_70 = 1 - (iVar14 - iVar19);\n    iVar15 = 0;\n  }\n  else {\n    local_70 = 0;\n  }\n  if ((int)local_74 < 0) {\n    local_58 = 0;\n    local_70 = local_70 - local_74;\n    local_5c = -local_74;\n  }\n  else {\n    iVar15 = iVar15 + local_74;\n    local_58 = local_74;\n    local_5c = 0;\n  }\n  if (9 < minIntegerDigits) {\n    local_38 = 0xffffffff;\n    bVar1 = true;\n    local_68 = 0xffffffff;\n    bVar3 = true;\n    minIntegerDigits = 0;\n    minFractionDigits = 0;\n    goto LAB_08007c24;\n  }\n  bVar1 = (int)minIntegerDigits < 6;\n  if (!bVar1) {\n    minIntegerDigits = minIntegerDigits - 4;\n  }\n  switch(minIntegerDigits) {\n  case 2:\n    bVar3 = false;\n    break;\n  case 3:\n    bVar3 = false;\n    goto LAB_08008300;\n  case 4:\n    bVar3 = true;\n    break;\n  case 5:\n    bVar3 = true;\nLAB_08008300:\n    local_38 = local_74 + minFractionDigits;\n    local_68 = local_38 + 1;\n    uVar18 = local_68;\n    if ((int)local_68 < 1) {\n      uVar18 = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(num + 0x44) = 0;\n    pcVar10 = (char *)FUN_080090c0(num,0);\n    local_38 = 0xffffffff;\n    local_68 = 0xffffffff;\n    minFractionDigits = 0;\n    *(char **)(num + 0x40) = pcVar10;\n    bVar3 = true;\n    goto LAB_08007e36;\n  }\n  if ((int)minFractionDigits < 1) {\n    local_38 = 1;\n    minFractionDigits = 1;\n    local_68 = 1;\nLAB_08007c24:\n    *(undefined4 *)(num + 0x44) = 0;\n    uVar11 = local_38;\n  }\n  else {\n    local_38 = minFractionDigits;\n    local_68 = minFractionDigits;\n    uVar18 = minFractionDigits;\nLAB_08008314:\n    *(undefined4 *)(num + 0x44) = 0;\n    uVar11 = local_68;\n    if (0x17 < (int)uVar18) {\n      iVar19 = 4;\n      iVar14 = 1;\n      do {\n        iVar7 = iVar14;\n        iVar19 = iVar19 * 2;\n        iVar14 = iVar7 + 1;\n      } while (iVar19 + 0x14U <= uVar18);\n      *(int *)(num + 0x44) = iVar7;\n    }\n  }\n  pcVar10 = (char *)FUN_080090c0(num);\n  *(char **)(num + 0x40) = pcVar10;\n  if ((uVar11 < 0xf) && (bVar1)) {\n    if ((int)local_74 < 1) {\n      if (local_74 == 0) {\n        iVar14 = 2;\n        local_80 = mantissa;\n      }\n      else {\n        iVar14 = (-local_74 & 0xf) * 8;\n        uVar26 = FUN_080004c8(mantissa,local_7c,*(undefined4 *)(&DAT_08009fa8 + iVar14),\n                              *(undefined4 *)(&DAT_08009fac + iVar14));\n        local_7c = (uint)((ulonglong)uVar26 >> 0x20);\n        local_80 = (uint)uVar26;\n        iVar19 = (int)-local_74 >> 4;\n        if (iVar19 == 0) {\n          iVar14 = 2;\n        }\n        else {\n          bVar1 = false;\n          iVar14 = 2;\n          puVar22 = &DAT_08009f80;\n          do {\n            if (iVar19 << 0x1f < 0) {\n              uVar26 = FUN_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),*puVar22,puVar22[1]\n                                   );\n              bVar1 = true;\n              iVar14 = iVar14 + 1;\n            }\n            iVar19 = iVar19 >> 1;\n            puVar22 = puVar22 + 2;\n          } while (iVar19 != 0);\n          if (bVar1) {\n            local_80 = (uint)uVar26;\n            local_7c = (uint)((ulonglong)uVar26 >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      uVar18 = (int)local_74 >> 4;\n      uVar27 = *(undefined8 *)(&DAT_08009fa8 + (local_74 & 0xf) * 8);\n      uVar26 = *(undefined8 *)(&DAT_08009fa8 + (local_74 & 0xf) * 8);\n      if ((int)(uVar18 << 0x1b) < 0) {\n        uVar28 = FUN_0800071c(mantissa,local_7c,0x7f73bf3c,0x75154fdd);\n        uStack_44 = (uint)((ulonglong)uVar28 >> 0x20);\n        local_48 = (uint)uVar28;\n        iVar14 = 3;\n        uVar18 = uVar18 & 0xf;\n      }\n      else {\n        iVar14 = 2;\n        uStack_44 = local_7c;\n        local_48 = mantissa;\n      }\n      if (uVar18 != 0) {\n        puVar22 = &DAT_08009f80;\n        do {\n          if ((int)(uVar18 << 0x1f) < 0) {\n            uVar26 = FUN_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),*puVar22,puVar22[1]);\n            iVar14 = iVar14 + 1;\n          }\n          uVar18 = (int)uVar18 >> 1;\n          puVar22 = puVar22 + 2;\n          uVar27 = uVar26;\n        } while (uVar18 != 0);\n      }\n      local_7c = (uint)((ulonglong)uVar27 >> 0x20);\n      local_80 = (uint)uVar27;\n      uVar26 = FUN_0800071c(local_48,uStack_44,local_80,local_7c);\n      local_80 = (uint)uVar26;\n      local_7c = (uint)((ulonglong)uVar26 >> 0x20);\n    }\n    uVar26 = CONCAT44(local_7c,local_80);\n    if ((bVar2) && (iVar19 = FUN_080009ac(local_80,local_7c,0,0x3ff00000), iVar19 != 0)) {\n      if (local_68 == 0) {\n        uVar26 = FUN_080003f4(iVar14);\n        uVar26 = FUN_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),local_80,local_7c);\n        uVar26 = FUN_0800015c((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0x401c0000);\n        uVar13 = (undefined4)uVar26;\n        iVar14 = (int)((ulonglong)uVar26 >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)local_38) {\n        uVar26 = FUN_080004c8(local_80,local_7c,0,0x40240000);\n        uVar27 = FUN_080003f4(iVar14 + 1);\n        uVar27 = FUN_080004c8((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),(int)uVar26,\n                              (int)((ulonglong)uVar26 >> 0x20));\n        uVar27 = FUN_0800015c((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),0,0x401c0000);\n        uVar13 = (undefined4)uVar27;\n        local_48 = local_38;\n        local_34 = local_74 - 1;\n        iVar14 = (int)((ulonglong)uVar27 >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    uVar27 = FUN_080003f4(iVar14);\n    uVar27 = FUN_080004c8((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),local_80,local_7c);\n    uVar27 = FUN_0800015c((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),0,0x401c0000);\n    uVar13 = (undefined4)uVar27;\n    iVar14 = (int)((ulonglong)uVar27 >> 0x20) + -0x3400000;\n    if (local_68 != 0) {\n      local_34 = local_74;\n      local_48 = local_68;\nLAB_08007cfa:\n      local_7c = (uint)((ulonglong)uVar26 >> 0x20);\n      local_80 = (uint)uVar26;\n      cVar4 = FUN_0800119c(local_80,local_7c);\n      cVar4 = cVar4 + '0';\n      uVar16 = (&DAT_08009fa0)[local_48 * 2];\n      uVar12 = (&DAT_08009fa4)[local_48 * 2];\n      uVar26 = FUN_080003f4();\n      uVar26 = FUN_08000158(local_80,local_7c,(int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n      uVar23 = (undefined4)((ulonglong)uVar26 >> 0x20);\n      pcVar21 = pcVar10 + 1;\n      if (bVar3) {\n        uVar27 = FUN_0800071c(0,0x3fe00000,uVar16,uVar12);\n        uVar27 = FUN_08000158((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),uVar13,iVar14);\n        uVar13 = (undefined4)((ulonglong)uVar27 >> 0x20);\n        *pcVar10 = cVar4;\n        iVar14 = FUN_080009e8((int)uVar27,uVar13,(int)uVar26,uVar23);\n        if (iVar14 != 0) {\nLAB_08008784:\n          local_74 = local_34;\n          goto LAB_08008294;\n        }\n        uVar28 = FUN_08000158(0,0x3ff00000,(int)uVar26,uVar23);\n        iVar14 = FUN_080009e8((int)uVar27,uVar13,(int)uVar28,(int)((ulonglong)uVar28 >> 0x20));\n        if (iVar14 == 0) {\n          if (local_48 != 1) {\n            pcVar20 = pcVar21;\n            do {\n              uVar27 = FUN_080004c8((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),0,0x40240000);\n              uVar13 = (undefined4)((ulonglong)uVar27 >> 0x20);\n              uVar26 = FUN_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0x40240000);\n              cVar4 = FUN_0800119c();\n              uVar28 = FUN_080003f4();\n              uVar26 = FUN_08000158((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar28,\n                                    (int)((ulonglong)uVar28 >> 0x20));\n              uVar16 = (undefined4)((ulonglong)uVar26 >> 0x20);\n              cVar4 = cVar4 + '0';\n              pcVar21 = pcVar20 + 1;\n              *pcVar20 = cVar4;\n              iVar14 = FUN_080009ac((int)uVar26,uVar16,(int)uVar27,uVar13);\n              if (iVar14 != 0) {\n                local_74 = local_34;\n                goto LAB_08008294;\n              }\n              uVar28 = FUN_08000158(0,0x3ff00000,(int)uVar26,uVar16);\n              iVar14 = FUN_080009ac((int)uVar28,(int)((ulonglong)uVar28 >> 0x20),(int)uVar27,uVar13)\n              ;\n              if (iVar14 != 0) goto LAB_08008798;\n              pcVar20 = pcVar21;\n            } while (pcVar21 != pcVar10 + local_48);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        local_74 = local_34;\n      }\n      else {\n        uVar27 = FUN_080004c8(uVar13,iVar14,uVar16,uVar12);\n        uVar13 = (undefined4)((ulonglong)uVar27 >> 0x20);\n        *pcVar10 = cVar4;\n        if (local_48 != 1) {\n          pcVar20 = pcVar21;\n          do {\n            uVar26 = FUN_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0x40240000);\n            cVar4 = FUN_0800119c();\n            uVar28 = FUN_080003f4();\n            uVar26 = FUN_08000158((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar28,\n                                  (int)((ulonglong)uVar28 >> 0x20));\n            pcVar21 = pcVar20 + 1;\n            *pcVar20 = cVar4 + '0';\n            pcVar20 = pcVar21;\n          } while (pcVar21 != pcVar10 + local_48);\n        }\n        uVar16 = (undefined4)((ulonglong)uVar26 >> 0x20);\n        uVar28 = FUN_0800015c((int)uVar27,uVar13,0,0x3fe00000);\n        iVar14 = FUN_080009ac((int)uVar28,(int)((ulonglong)uVar28 >> 0x20),(int)uVar26,uVar16);\n        if (iVar14 == 0) {\n          uVar27 = FUN_08000158(0,0x3fe00000,(int)uVar27,uVar13);\n          iVar14 = FUN_080009e8((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),(int)uVar26,uVar16);\n          pcVar20 = pcVar21;\n          if (iVar14 == 0) goto LAB_08007e36;\n          do {\n            pcVar21 = pcVar20;\n            pcVar20 = pcVar21 + -1;\n          } while (pcVar21[-1] == '0');\n          goto LAB_08008784;\n        }\n        local_74 = local_34;\n        cVar4 = pcVar21[-1];\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    uVar26 = FUN_08000158(local_80,local_7c,0,0x40140000);\n    uVar16 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    iVar19 = FUN_080009e8((int)uVar26,uVar16,uVar13,iVar14);\n    if (iVar19 == 0) {\n      iVar14 = FUN_080009ac((int)uVar26,uVar16,uVar13,iVar14 + -0x80000000);\n      if (iVar14 == 0) goto LAB_08007e36;\n      iVar19 = 0;\n      iVar14 = 0;\n      pcVar21 = pcVar10;\n      goto LAB_080084f0;\n    }\n    iVar15 = 0;\n    iVar7 = 0;\nLAB_08008406:\n    *pcVar10 = '1';\n    local_74 = local_74 + 1;\n    pcVar21 = pcVar10 + 1;\n    iVar19 = iVar7;\n    iVar14 = iVar15;\nLAB_08008416:\n    FUN_0800910c(num,iVar14);\n    if (iVar19 == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    pcVar21 = pcVar10;\n    if ((-1 < local_2c[0]) && ((int)local_74 < 0xf)) {\n      uVar13 = *(undefined4 *)(&DAT_08009fa8 + local_74 * 8);\n      uVar16 = *(undefined4 *)(&DAT_08009fac + local_74 * 8);\n      if ((-1 < (int)minFractionDigits) || (0 < (int)local_68)) {\n        FUN_0800071c(mantissa,uVar17,uVar13,uVar16);\n        bVar5 = FUN_0800119c();\n        uVar26 = FUN_080003f4();\n        uVar26 = FUN_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),uVar13,uVar16);\n        uVar26 = FUN_08000158(mantissa,uVar17,(int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n        *pcVar10 = bVar5 + 0x30;\n        pcVar21 = pcVar10 + 1;\n        if (local_68 != 1) {\n          uVar26 = FUN_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0x40240000);\n          iVar14 = FUN_08000998((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0);\n          while (iVar14 == 0) {\n            uVar23 = (undefined4)((ulonglong)uVar26 >> 0x20);\n            FUN_0800071c((int)uVar26,uVar23,uVar13,uVar16);\n            bVar5 = FUN_0800119c();\n            uVar27 = FUN_080003f4();\n            uVar27 = FUN_080004c8((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),uVar13,uVar16);\n            uVar26 = FUN_08000158((int)uVar26,uVar23,(int)uVar27,(int)((ulonglong)uVar27 >> 0x20));\n            pcVar20 = pcVar21 + 1;\n            *pcVar21 = bVar5 + 0x30;\n            pcVar21 = pcVar20;\n            if (local_68 == (int)pcVar20 - (int)pcVar10) goto LAB_08007f3a;\n            uVar26 = FUN_080004c8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0x40240000);\n            iVar14 = FUN_08000998((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        uVar26 = FUN_0800015c((int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n        uVar23 = (undefined4)((ulonglong)uVar26 >> 0x20);\n        iVar14 = FUN_080009e8((int)uVar26,uVar23,uVar13,uVar16);\n        if ((iVar14 == 0) &&\n           ((iVar14 = FUN_08000998((int)uVar26,uVar23,uVar13,uVar16), iVar14 == 0 ||\n            ((bVar5 & 1) == 0)))) goto LAB_08008294;\n        cVar4 = pcVar21[-1];\nLAB_08007f7c:\n        while (pcVar20 = pcVar21 + -1, cVar4 == '9') {\n          if (pcVar10 == pcVar20) {\n            *pcVar10 = '0';\n            cVar4 = pcVar21[-1];\n            local_74 = local_74 + 1;\n            pcVar20 = pcVar10;\n            break;\n          }\n          cVar4 = pcVar21[-2];\n          pcVar21 = pcVar20;\n        }\n        *pcVar20 = cVar4 + '\\x01';\n        goto LAB_08008294;\n      }\n      if (local_68 == 0) {\n        uVar26 = FUN_080004c8(uVar13,uVar16,0,0x40140000);\n        iVar9 = FUN_080009d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),mantissa,uVar17);\n        iVar19 = 0;\n        iVar15 = 0;\n        iVar7 = 0;\n        iVar14 = 0;\n        if (iVar9 == 0) goto LAB_08008406;\n      }\n      else {\n        iVar19 = 0;\n        iVar14 = 0;\n      }\nLAB_080084f0:\n      local_74 = ~minFractionDigits;\n      pcVar10 = pcVar21;\n      goto LAB_08008416;\n    }\n    iVar14 = local_5c;\n    if (bVar3) {\n      if ((int)minIntegerDigits < 2) {\n        if (bVar25) {\n          local_60 = local_70;\n          local_70 = local_70 + local_2c[0] + 0x433;\n          iVar15 = iVar15 + local_2c[0] + 0x433;\n        }\n        else {\n          local_60 = local_70;\n          local_70 = local_70 + (0x36 - local_30);\n          iVar15 = iVar15 + (0x36 - local_30);\n        }\n      }\n      else {\n        iVar19 = local_68 - 1;\n        if (local_5c < iVar19) {\n          local_58 = local_58 + (iVar19 - local_5c);\n          iVar14 = 0;\n          local_5c = iVar19;\n        }\n        else {\n          iVar14 = local_5c - iVar19;\n        }\n        if ((int)local_68 < 0) {\n          local_60 = local_70 - local_68;\n        }\n        else {\n          iVar15 = iVar15 + local_68;\n          local_60 = local_70;\n          local_70 = local_70 + local_68;\n        }\n      }\n      iVar19 = FUN_08009244(num,1);\n    }\n    else {\n      local_60 = local_70;\n      iVar19 = 0;\n    }\n    if ((0 < local_60) && (0 < iVar15)) {\n      iVar7 = local_60;\n      if (iVar15 <= local_60) {\n        iVar7 = iVar15;\n      }\n      iVar15 = iVar15 - iVar7;\n      local_70 = local_70 - iVar7;\n      local_60 = local_60 - iVar7;\n    }\n    if (local_5c != 0) {\n      if (bVar3) {\n        uVar13 = uVar6;\n        if (iVar14 != 0) {\n          iVar19 = FUN_080093a4(num,iVar19,iVar14);\n          uVar13 = FUN_08009258(num,iVar19,uVar6);\n          FUN_0800910c(num,uVar6);\n          uVar6 = uVar13;\n          if (local_5c - iVar14 == 0) goto LAB_08008062;\n        }\n        uVar6 = FUN_080093a4(num,uVar13,local_5c - iVar14);\n      }\n      else {\n        uVar6 = FUN_080093a4(num,uVar6,local_5c);\n      }\n    }\nLAB_08008062:\n    iVar14 = FUN_08009244(num,1);\n    if (local_58 == 0) {\n      if (((int)minIntegerDigits < 2) && (mantissa == 0)) {\nLAB_0800835a:\n        if ((uVar17 & 0xfffff) == 0) {\n          uVar17 = uVar17 & 0x7ff00000;\n          if (uVar17 != 0) {\n            iVar15 = iVar15 + 1;\n            local_70 = local_70 + 1;\n            uVar17 = 1;\n          }\n        }\n        else {\n          uVar17 = 0;\n        }\n        bVar25 = local_58 != 0;\n        uVar18 = mantissa;\n        local_58 = uVar17;\n        if (bVar25) goto LAB_080082d4;\n      }\n      iVar7 = 1;\n    }\n    else {\n      uVar26 = FUN_080093a4(num,iVar14);\n      iVar14 = (int)uVar26;\n      if (((int)minIntegerDigits < 2) && (mantissa == 0)) goto LAB_0800835a;\n      local_58 = 0;\n      uVar18 = (uint)((ulonglong)uVar26 >> 0x20);\nLAB_080082d4:\n      iVar7 = FUN_080091a4(*(undefined4 *)(iVar14 + *(int *)(iVar14 + 0x10) * 4 + 0x10),uVar18);\n      iVar7 = 0x20 - iVar7;\n    }\n    uVar18 = iVar7 + iVar15 & 0x1f;\n    if (uVar18 == 0) {\n      iVar7 = 0x1c;\nLAB_08008096:\n      iVar15 = iVar15 + iVar7;\n      local_70 = local_70 + iVar7;\n      local_60 = local_60 + iVar7;\n    }\n    else {\n      if (4 < (int)(0x20 - uVar18)) {\n        iVar7 = 0x1c - uVar18;\n        goto LAB_08008096;\n      }\n      if (0x20 - uVar18 != 4) {\n        iVar7 = 0x3c - uVar18;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < local_70) {\n      uVar6 = FUN_08009444(num,uVar6,local_70);\n    }\n    if (0 < iVar15) {\n      iVar14 = FUN_08009444(num,iVar14,iVar15);\n    }\n    pcVar20 = pcVar10;\n    if ((bVar2) && (iVar15 = FUN_080094f8(uVar6,iVar14), iVar15 < 0)) {\n      local_74 = local_74 - 1;\n      uVar6 = FUN_08009120(num,uVar6,10,0);\n      if (bVar3) {\n        iVar19 = FUN_08009120(num,iVar19,10,0);\n        if ((0 < (int)local_38) || ((int)minIntegerDigits < 3)) {\n          local_68 = local_38;\n          goto LAB_080080de;\n        }\n      }\n      else if ((0 < (int)local_38) || ((int)minIntegerDigits < 3)) {\n        local_68 = local_38;\n        goto LAB_0800820a;\n      }\n      local_68 = local_38;\nLAB_080084e8:\n      if (local_68 == 0) {\n        iVar15 = FUN_08009120(num,iVar14,5);\n        iVar9 = FUN_080094f8(uVar6,iVar15);\n        iVar7 = iVar19;\n        iVar14 = iVar15;\n        if (0 < iVar9) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)local_68 < 1) && (2 < (int)minIntegerDigits)) goto LAB_080084e8;\n    if (bVar3) {\nLAB_080080de:\n      local_80 = iVar19;\n      if (0 < local_60) {\n        local_80 = FUN_08009444(num,iVar19,local_60);\n      }\n      iVar19 = local_80;\n      if (local_58 != 0) {\n        iVar19 = FUN_080090c0(num,*(undefined4 *)(local_80 + 4));\n        FUN_08001084(iVar19 + 0xc,local_80 + 0xc,(*(int *)(local_80 + 0x10) + 2) * 4);\n        iVar19 = FUN_08009444(num,iVar19,1);\n      }\nLAB_08008108:\n      iVar15 = FUN_080078c0(uVar6,iVar14);\n      iVar7 = FUN_080094f8(uVar6,local_80);\n      iVar9 = FUN_08009530(num,iVar14,iVar19);\n      iVar24 = iVar15 + 0x30;\n      if (*(int *)(iVar9 + 0xc) == 0) {\n        iVar8 = FUN_080094f8(uVar6);\n        FUN_0800910c(num,iVar9);\n        if ((iVar8 != 0) || (minIntegerDigits != 0)) goto LAB_0800815a;\n        if ((mantissa & 1) != 0) {\n          iVar8 = 0;\n          goto LAB_0800815a;\n        }\n        if (iVar24 != 0x39) {\n          if (0 < iVar7) goto LAB_0800874c;\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        pcVar21 = pcVar20 + 1;\n        cVar4 = '9';\n        *pcVar20 = '9';\n        goto LAB_08008268;\n      }\n      FUN_0800910c(num,iVar9);\n      iVar8 = 1;\nLAB_0800815a:\n      if ((iVar7 < 0) || (((iVar7 == 0 && (minIntegerDigits == 0)) && ((mantissa & 1) == 0)))) {\n        if (0 < iVar8) {\n          uVar6 = FUN_08009444(num,uVar6,1);\n          iVar7 = FUN_080094f8(uVar6,iVar14);\n          if ((0 < iVar7) || ((iVar7 == 0 && (iVar15 << 0x1f < 0)))) {\n            if (iVar24 == 0x39) goto LAB_08008752;\nLAB_0800874c:\n            iVar24 = iVar15 + 0x31;\n          }\n        }\nLAB_080085a4:\n        pcVar21 = pcVar20 + 1;\n        *pcVar20 = (char)iVar24;\n        goto LAB_08008274;\n      }\n      pcVar21 = pcVar20 + 1;\n      if (0 < iVar8) {\n        if (iVar24 == 0x39) goto LAB_08008752;\n        *pcVar20 = (char)iVar15 + '1';\n        goto LAB_08008274;\n      }\n      *pcVar20 = (char)iVar24;\n      if (pcVar10 + (local_68 - 1) != pcVar20) {\n        uVar6 = FUN_08009120(num,uVar6,10,0);\n        pcVar20 = pcVar21;\n        if (local_80 == iVar19) {\n          local_80 = FUN_08009120(num,local_80,10,0);\n          iVar19 = local_80;\n        }\n        else {\n          local_80 = FUN_08009120(num,local_80,10,0);\n          iVar19 = FUN_08009120(num,iVar19,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    else {\nLAB_0800820a:\n      while( true ) {\n        iVar24 = FUN_080078c0(uVar6,iVar14);\n        iVar24 = iVar24 + 0x30;\n        pcVar21 = pcVar20 + 1;\n        *pcVar20 = (char)iVar24;\n        if ((int)local_68 <= (int)pcVar21 - (int)pcVar10) break;\n        uVar6 = FUN_08009120(num,uVar6,10,0);\n        pcVar20 = pcVar21;\n      }\n      local_80 = 0;\n    }\n    uVar6 = FUN_08009444(num,uVar6,1);\n    iVar15 = FUN_080094f8(uVar6,iVar14);\n    cVar4 = pcVar21[-1];\n    if ((0 < iVar15) || ((iVar15 == 0 && (iVar24 << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        pcVar20 = pcVar21 + -1;\n        if (cVar4 != '9') goto code_r0x08008270;\n        if (pcVar10 == pcVar20) {\n          *pcVar10 = '1';\n          local_74 = local_74 + 1;\n          goto LAB_08008274;\n        }\n        cVar4 = pcVar21[-2];\n        pcVar21 = pcVar20;\n      } while( true );\n    }\n    while (cVar4 == '0') {\n      cVar4 = pcVar21[-2];\n      pcVar21 = pcVar21 + -1;\n    }\nLAB_08008274:\n    FUN_0800910c(num,iVar14);\n    if (iVar19 == 0) goto LAB_08008294;\n    if ((local_80 != 0) && (local_80 != iVar19)) {\n      FUN_0800910c(num);\n    }\n  }\n  FUN_0800910c(num,iVar19);\nLAB_08008294:\n  FUN_0800910c(num,uVar6);\n  *pcVar21 = '\\0';\n  *totalDigits = local_74 + 1;\n  if (result == (char **)0x0) {\n    return pcVar10;\n  }\n  *result = pcVar21;\n  return pcVar10;\ncode_r0x08008270:\n  *pcVar20 = cVar4 + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "renaming": {
                "FUN_080079e8": "convert_number_to_formatted_string_080079e8",
                "param_1": "num",
                "param_2": "flags",
                "param_3": "mantissa",
                "param_4": "exponent",
                "param_5": "minIntegerDigits",
                "param_6": "minFractionDigits",
                "param_7": "totalDigits",
                "param_8": "isNegative",
                "param_9": "result"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08001084",
                "FUN_08009258",
                "FUN_080078c0",
                "FUN_080003d4",
                "FUN_08009244",
                "FUN_080009e8",
                "FUN_080091a4",
                "FUN_0800910c",
                "FUN_0800015c",
                "FUN_080094f8",
                "FUN_08009120",
                "FUN_080003f4",
                "FUN_08009630",
                "FUN_08009444",
                "FUN_0800119c",
                "FUN_080090c0",
                "FUN_080009d4",
                "FUN_080009ac",
                "FUN_08000998",
                "FUN_08009530",
                "FUN_080093a4",
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800884c": {
            "entrypoint": "0x0800884c",
            "current_name": "allocate_memory_chunk_0800884c",
            "code": "\nundefined4 allocate_memory_chunk_0800884c(undefined4 param,int size)\n\n{\n  int result;\n  int aligned_address;\n  uint header_size;\n  \n  FUN_080090a8();\n  header_size = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  aligned_address = ((0xfef - size) + header_size & 0xfffff000) - 0x1000;\n  if (0xfff < aligned_address) {\n    result = FUN_08009744(param,0);\n    if (result == DAT_20000454 + header_size) {\n      result = FUN_08009744(param,-aligned_address);\n      if (result != -1) {\n        DAT_20000a14 = DAT_20000a14 - aligned_address;\n        *(uint *)(DAT_20000454 + 4) = header_size - aligned_address | 1;\n        FUN_080090b4(param);\n        return 1;\n      }\n      aligned_address = FUN_08009744(param,0);\n      if (0xf < aligned_address - DAT_20000454) {\n        DAT_20000a14 = aligned_address - DAT_20000854;\n        *(uint *)(DAT_20000454 + 4) = aligned_address - DAT_20000454 | 1;\n      }\n    }\n  }\n  FUN_080090b4(param);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800884c": "allocate_memory_chunk_0800884c",
                "param_1": "param",
                "param_2": "size",
                "iVar1": "result",
                "iVar2": "aligned_address",
                "uVar3": "header_size"
            },
            "calling": [
                "FUN_080088ec"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_08009744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080088ec": {
            "entrypoint": "0x080088ec",
            "current_name": "decompile_extracted_function_080088ec",
            "code": "\nvoid decompile_extracted_function_080088ec(undefined4 first_param,int second_param,undefined4 third_param,undefined4 fourth_param)\n\n{\n  int index;\n  uint *pointer_1;\n  uint *pointer_2;\n  undefined *pointer_3;\n  uint value_1;\n  uint value_2;\n  undefined *pointer_4;\n  undefined *pointer_5;\n  undefined4 *pointer_6;\n  int counter;\n  uint flag_1;\n  uint flag_2;\n  \n  if (second_param == 0) {\n    return;\n  }\n  FUN_080090a8();\n  flag_1 = *(uint *)(second_param + -4);\n  pointer_1 = (uint *)(second_param + -8);\n  value_1 = flag_1 & 0xfffffffe;\n  pointer_2 = (uint *)((int)pointer_1 + value_1);\n  value_2 = pointer_2[1] & 0xfffffffc;\n  if (DAT_20000454 == pointer_2) {\n    value_1 = value_1 + value_2;\n    if ((flag_1 & 1) == 0) {\n      pointer_1 = (uint *)((int)pointer_1 - *(int *)(second_param + -8));\n      value_2 = pointer_1[2];\n      flag_1 = pointer_1[3];\n      value_1 = value_1 + *(int *)(second_param + -8);\n      *(uint *)(value_2 + 0xc) = flag_1;\n      *(uint *)(flag_1 + 8) = value_2;\n    }\n    value_2 = DAT_20000858;\n    pointer_1[1] = value_1 | 1;\n    DAT_20000454 = pointer_1;\n    if (value_2 <= value_1) {\n      FUN_0800884c(first_param,DAT_20000a44);\n    }\nLAB_080089f0:\n    FUN_080090b4(first_param);\n    return;\n  }\n  pointer_2[1] = value_2;\n  if ((flag_1 & 1) == 0) {\n    pointer_1 = (uint *)((int)pointer_1 - *(int *)(second_param + -8));\n    pointer_6 = (undefined4 *)pointer_1[2];\n    value_1 = value_1 + *(int *)(second_param + -8);\n    flag_1 = *(uint *)((int)pointer_2 + value_2 + 4) & 1;\n    if ((uint **)pointer_6 == &DAT_20000454) {\n      if (flag_1 == 0) {\n        flag_1 = pointer_2[2];\n        flag_2 = pointer_2[3];\n        value_1 = value_1 + value_2;\n        *(uint *)(flag_1 + 0xc) = flag_2;\n        *(uint *)(flag_2 + 8) = flag_1;\n        pointer_1[1] = value_1 | 1;\n        *(uint *)((int)pointer_1 + value_1) = value_1;\n      }\n      else {\n        pointer_1[1] = value_1 | 1;\n        *pointer_2 = value_1;\n      }\n      goto LAB_080089f0;\n    }\n    flag_2 = pointer_1[3];\n    pointer_6[3] = flag_2;\n    *(undefined4 **)(flag_2 + 8) = pointer_6;\n  }\n  else {\n    flag_1 = *(uint *)((int)pointer_2 + value_2 + 4) & 1;\n  }\n  if (flag_1 == 0) {\n    pointer_6 = (undefined4 *)pointer_2[2];\n    value_1 = value_1 + value_2;\n    if ((uint **)pointer_6 == &DAT_20000454) {\n      DAT_2000045c = pointer_1;\n      DAT_20000460 = pointer_1;\n      pointer_1[2] = (uint)&DAT_20000454;\n      pointer_1[3] = (uint)&DAT_20000454;\n      pointer_1[1] = value_1 | 1;\n      *(uint *)((int)pointer_1 + value_1) = value_1;\n      goto LAB_080089f0;\n    }\n    value_2 = pointer_2[3];\n    pointer_6[3] = value_2;\n    *(undefined4 **)(value_2 + 8) = pointer_6;\n    pointer_1[1] = value_1 | 1;\n    *(uint *)((int)pointer_1 + value_1) = value_1;\n  }\n  else {\n    pointer_1[1] = value_1 | 1;\n    *(uint *)((int)pointer_1 + value_1) = value_1;\n  }\n  if (value_1 < 0x200) {\n    counter = (value_1 >> 3) + 1;\n    value_1 = 1 << ((int)(value_1 >> 3) >> 2 & 0xffU) | (uint)DAT_20000450;\n    value_2 = *(uint *)(&DAT_2000044c + counter * 8);\n    pointer_1[2] = value_2;\n    pointer_1[3] = (uint)(&DAT_20000444 + counter * 8);\n    DAT_20000450 = (undefined *)value_1;\n    *(uint **)(&DAT_2000044c + counter * 8) = pointer_1;\n    *(uint **)(value_2 + 0xc) = pointer_1;\n    FUN_080090b4(first_param,pointer_1,value_1,fourth_param);\n    return;\n  }\n  value_2 = value_1 >> 9;\n  if (value_2 < 5) {\n    counter = ((value_1 >> 6) + 0x39) * 8;\n    index = (value_1 >> 6) + 0x38;\n  }\n  else if (value_2 < 0x15) {\n    counter = (value_2 + 0x5c) * 8;\n    index = value_2 + 0x5b;\n  }\n  else if (value_2 < 0x55) {\n    counter = ((value_1 >> 0xc) + 0x6f) * 8;\n    index = (value_1 >> 0xc) + 0x6e;\n  }\n  else if (value_2 < 0x155) {\n    counter = ((value_1 >> 0xf) + 0x78) * 8;\n    index = (value_1 >> 0xf) + 0x77;\n  }\n  else if (value_2 < 0x555) {\n    counter = ((value_1 >> 0x12) + 0x7d) * 8;\n    index = (value_1 >> 0x12) + 0x7c;\n  }\n  else {\n    counter = 0x3f8;\n    index = 0x7e;\n  }\n  pointer_3 = *(undefined **)(&DAT_2000044c + counter);\n  pointer_4 = &DAT_20000444 + counter;\n  if (pointer_4 == pointer_3) {\n    pointer_3 = (undefined *)(1 << (index >> 2 & 0xffU) | (uint)DAT_20000450);\n    pointer_5 = pointer_4;\n    DAT_20000450 = pointer_3;\n  }\n  else {\n    do {\n      pointer_5 = pointer_3;\n      if ((*(uint *)(pointer_3 + 4) & 0xfffffffc) <= value_1) break;\n      pointer_3 = *(undefined **)(pointer_3 + 8);\n      pointer_5 = pointer_4;\n    } while (pointer_4 != pointer_3);\n    pointer_4 = *(undefined **)(pointer_5 + 0xc);\n  }\n  pointer_1[2] = (uint)pointer_5;\n  pointer_1[3] = (uint)pointer_4;\n  *(uint **)(pointer_4 + 8) = pointer_1;\n  *(uint **)(pointer_5 + 0xc) = pointer_1;\n  FUN_080090b4(first_param,pointer_1,pointer_3,fourth_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088ec": "decompile_extracted_function_080088ec",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "iVar1": "index",
                "puVar2": "pointer_1",
                "puVar3": "pointer_2",
                "puVar4": "pointer_3",
                "uVar5": "value_1",
                "uVar6": "value_2",
                "puVar7": "pointer_4",
                "puVar8": "pointer_5",
                "puVar9": "pointer_6",
                "iVar10": "counter",
                "uVar11": "flag_1",
                "uVar12": "flag_2"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080097cc",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_0800884c",
                "FUN_080090b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ad4": {
            "entrypoint": "0x08008ad4",
            "current_name": "get_updated_value_08008ad4",
            "code": "\nint getUpdatedValue_08008ad4(void)\n\n{\n  int iVar1;\n  \n  iVar1 = *(int *)(DAT_2000001c + 0x34);\n  if (iVar1 == 0) {\n    iVar1 = 0x2000085c;\n  }\n  return iVar1 + 0xf0;\n}\n\n",
            "renaming": {
                "FUN_08008ad4": "get_updated_value_08008ad4"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "FUNC_08008af0",
            "code": "\nvoid FUNC_08008af0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "FUNC_08008af0"
            },
            "calling": [
                "FUN_080090a8",
                "FUN_080098c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af4": {
            "entrypoint": "0x08008af4",
            "current_name": "FUNC_08008af4",
            "code": "\nvoid FUNC_08008af4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af4": "FUNC_08008af4"
            },
            "calling": [
                "FUN_080090b4",
                "FUN_080098c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af8": {
            "entrypoint": "0x08008af8",
            "current_name": "allocate_memory_08008af8",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_08008af8(undefined4 *out_pointer,uint size)\n\n{\n  undefined *ptr1;\n  uint var1;\n  uint var2;\n  int var3;\n  undefined *ptr2;\n  uint var4;\n  uint var5;\n  undefined4 *ptr3;\n  undefined *ptr4;\n  undefined *ptr5;\n  int *result_pointer;\n  uint adjusted_size;\n  uint temp_size;\n  int temp_var1;\n  undefined4 *temp_ptr1;\n  undefined4 *temp_ptr2;\n  \n  adjusted_size = size + 0xb;\n  if (adjusted_size < 0x17) {\n    if (0x10 < size) goto LAB_08008c7a;\n    FUN_080090a8();\n    temp_size = 0x10;\n    var3 = 0x18;\n    adjusted_size = 2;\nLAB_08008b18:\n    ptr5 = *(undefined **)((int)&DAT_20000450 + var3);\n    if ((ptr5 != &DAT_20000444 + var3) ||\n       (ptr5 = *(undefined **)((int)&DAT_20000458 + var3), &DAT_2000044c + var3 != ptr5)) {\n      var3 = *(int *)(ptr5 + 0xc);\n      ptr2 = ptr5 + (*(uint *)(ptr5 + 4) & 0xfffffffc);\n      adjusted_size = *(uint *)(ptr2 + 4);\nLAB_08008b34:\n      temp_var1 = *(int *)(ptr5 + 8);\n      *(int *)(temp_var1 + 0xc) = var3;\n      *(int *)(var3 + 8) = temp_var1;\n      *(uint *)(ptr2 + 4) = adjusted_size | 1;\n      FUN_080090b4(out_pointer);\n      return (int *)(ptr5 + 8);\n    }\n    adjusted_size = adjusted_size + 2;\n  }\n  else {\n    temp_size = adjusted_size & 0xfffffff8;\n    if (((int)temp_size < 0) || (temp_size < size)) {\nLAB_08008c7a:\n      *out_pointer = 0xc;\n      return (int *)0x0;\n    }\n    FUN_080090a8();\n    if (temp_size < 0x1f8) {\n      adjusted_size = adjusted_size >> 3;\n      var3 = temp_size + 8;\n      goto LAB_08008b18;\n    }\n    var1 = adjusted_size >> 9;\n    if (var1 == 0) {\n      var3 = 0x200;\n      var4 = 0x40;\n      var1 = 0x3f;\n    }\n    else if (var1 < 5) {\n      var4 = (adjusted_size >> 6) + 0x39;\n      var1 = (adjusted_size >> 6) + 0x38;\n      var3 = var4 * 8;\n    }\n    else if (var1 < 0x15) {\n      var4 = var1 + 0x5c;\n      var1 = var1 + 0x5b;\n      var3 = var4 * 8;\n    }\n    else if (var1 < 0x55) {\n      var4 = (adjusted_size >> 0xc) + 0x6f;\n      var1 = (adjusted_size >> 0xc) + 0x6e;\n      var3 = var4 * 8;\n    }\n    else if (var1 < 0x155) {\n      var4 = (adjusted_size >> 0xf) + 0x78;\n      var1 = (adjusted_size >> 0xf) + 0x77;\n      var3 = var4 * 8;\n    }\n    else if (var1 < 0x555) {\n      var4 = (adjusted_size >> 0x12) + 0x7d;\n      var1 = (adjusted_size >> 0x12) + 0x7c;\n      var3 = var4 * 8;\n    }\n    else {\n      var3 = 0x3f8;\n      var4 = 0x7f;\n      var1 = 0x7e;\n    }\n    for (ptr5 = *(undefined **)((int)&DAT_20000450 + var3); adjusted_size = var4,\n        &DAT_20000444 + var3 != ptr5; ptr5 = *(undefined **)(ptr5 + 0xc)) {\n      temp_var1 = (*(uint *)(ptr5 + 4) & 0xfffffffc) - temp_size;\n      adjusted_size = var1;\n      if (0xf < temp_var1) break;\n      if (-1 < temp_var1) {\n        ptr2 = ptr5 + (*(uint *)(ptr5 + 4) & 0xfffffffc);\n        adjusted_size = *(uint *)(ptr2 + 4);\n        var3 = *(int *)(ptr5 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  temp_ptr1 = DAT_2000045c;\n  if ((undefined **)DAT_2000045c == &DAT_20000454) {\n    var4 = 1 << ((int)adjusted_size >> 2 & 0xffU);\n    var1 = DAT_20000450;\n    if (var4 <= DAT_20000450) goto LAB_08008c06;\n  }\n  else {\n    var4 = DAT_2000045c[1];\n    var5 = var4 & 0xfffffffc;\n    var1 = var5 - temp_size;\n    if (0xf < (int)var1) {\n      temp_ptr2 = (undefined4 *)(temp_size + (int)DAT_2000045c);\n      DAT_2000045c[1] = temp_size | 1;\n      DAT_2000045c = temp_ptr2;\n      DAT_20000460 = temp_ptr2;\n      temp_ptr2[2] = &DAT_20000454;\n      temp_ptr2[3] = &DAT_20000454;\n      temp_ptr2[1] = var1 | 1;\n      *(uint *)((int)temp_ptr1 + var5) = var1;\n      FUN_080090b4(out_pointer);\n      return temp_ptr1 + 2;\n    }\n    DAT_2000045c = &DAT_20000454;\n    DAT_20000460 = &DAT_20000454;\n    if (-1 < (int)var1) {\n      *(uint *)((int)temp_ptr1 + var5 + 4) = *(uint *)((int)temp_ptr1 + var5 + 4) | 1;\n      FUN_080090b4(out_pointer);\n      return temp_ptr1 + 2;\n    }\n    if (var5 < 0x200) {\n      var3 = (var4 >> 3) + 1;\n      temp_var1 = *(int *)(&DAT_2000044c + var3 * 8);\n      var1 = 1 << ((int)(var4 >> 3) >> 2 & 0xffU) | DAT_20000450;\n      temp_ptr1[2] = temp_var1;\n      temp_ptr1[3] = &DAT_20000444 + var3 * 8;\n      DAT_20000450 = var1;\n      *(undefined4 **)(&DAT_2000044c + var3 * 8) = temp_ptr1;\n      *(undefined4 **)(temp_var1 + 0xc) = temp_ptr1;\n    }\n    else {\n      var1 = var4 >> 9;\n      if (var1 < 5) {\n        var3 = ((var4 >> 6) + 0x39) * 8;\n        temp_var1 = (var4 >> 6) + 0x38;\n      }\n      else if (var1 < 0x15) {\n        var3 = (var1 + 0x5c) * 8;\n        temp_var1 = var1 + 0x5b;\n      }\n      else if (var1 < 0x55) {\n        var3 = ((var4 >> 0xc) + 0x6f) * 8;\n        temp_var1 = (var4 >> 0xc) + 0x6e;\n      }\n      else if (var1 < 0x155) {\n        var3 = ((var4 >> 0xf) + 0x78) * 8;\n        temp_var1 = (var4 >> 0xf) + 0x77;\n      }\n      else if (var1 < 0x555) {\n        var3 = ((var4 >> 0x12) + 0x7d) * 8;\n        temp_var1 = (var4 >> 0x12) + 0x7c;\n      }\n      else {\n        var3 = 0x3f8;\n        temp_var1 = 0x7e;\n      }\n      ptr5 = *(undefined **)(&DAT_2000044c + var3);\n      ptr2 = &DAT_20000444 + var3;\n      if (ptr2 == ptr5) {\n        DAT_20000450 = 1 << (temp_var1 >> 2 & 0xffU) | DAT_20000450;\n      }\n      else {\n        do {\n          if ((*(uint *)(ptr5 + 4) & 0xfffffffc) <= var5) break;\n          ptr5 = *(undefined **)(ptr5 + 8);\n        } while (ptr2 != ptr5);\n        ptr2 = *(undefined **)(ptr5 + 0xc);\n      }\n      var1 = DAT_20000450;\n      temp_ptr1[2] = ptr5;\n      temp_ptr1[3] = ptr2;\n      *(undefined4 **)(ptr2 + 8) = temp_ptr1;\n      *(undefined4 **)(ptr5 + 0xc) = temp_ptr1;\n    }\n    var4 = 1 << ((int)adjusted_size >> 2 & 0xffU);\n    if (var4 <= var1) {\nLAB_08008c06:\n      if ((var4 & var1) == 0) {\n        adjusted_size = adjusted_size & 0xfffffffc;\n        do {\n          var4 = var4 << 1;\n          adjusted_size = adjusted_size + 4;\n        } while ((var4 & var1) == 0);\n      }\n      do {\n        temp_ptr2 = (undefined4 *)(&DAT_2000044c + adjusted_size * 8);\n        var1 = adjusted_size;\n        temp_ptr1 = temp_ptr2;\n        do {\n          for (ptr3 = (undefined4 *)temp_ptr1[3]; temp_ptr1 != ptr3;\n              ptr3 = (undefined4 *)ptr3[3]) {\n            var5 = ptr3[1] & 0xfffffffc;\n            var2 = var5 - temp_size;\n            if (0xf < (int)var2) {\n              temp_var1 = ptr3[2];\n              var3 = ptr3[3];\n              temp_ptr1 = (undefined4 *)(temp_size + (int)ptr3);\n              ptr3[1] = temp_size | 1;\n              *(int *)(temp_var1 + 0xc) = var3;\n              *(int *)(var3 + 8) = temp_var1;\n              DAT_2000045c = temp_ptr1;\n              DAT_20000460 = temp_ptr1;\n              temp_ptr1[2] = &DAT_20000454;\n              temp_ptr1[3] = &DAT_20000454;\n              temp_ptr1[1] = var2 | 1;\n              *(uint *)((int)ptr3 + var5) = var2;\n              FUN_080090b4(out_pointer);\n              return ptr3 + 2;\n            }\n            if (-1 < (int)var2) {\n              var3 = ptr3[3];\n              temp_var1 = ptr3[2];\n              *(uint *)((int)ptr3 + var5 + 4) = *(uint *)((int)ptr3 + var5 + 4) | 1;\n              *(int *)(temp_var1 + 0xc) = var3;\n              *(int *)(var3 + 8) = temp_var1;\n              FUN_080090b4(out_pointer);\n              return ptr3 + 2;\n            }\n          }\n          var1 = var1 + 1;\n          temp_ptr1 = temp_ptr1 + 2;\n        } while ((var1 & 3) != 0);\n        do {\n          var5 = adjusted_size & 3;\n          temp_ptr1 = temp_ptr2 + -2;\n          adjusted_size = adjusted_size - 1;\n          if (var5 == 0) {\n            DAT_20000450 = DAT_20000450 & ~var4;\n            break;\n          }\n          temp_ptr2 = (undefined4 *)*temp_ptr2;\n        } while (temp_ptr2 == temp_ptr1);\n        var4 = var4 * 2;\n        if ((DAT_20000450 <= var4 && var4 - DAT_20000450 != 0) || (adjusted_size = var1, var4 == 0))\n        break;\n        for (; (var4 & DAT_20000450) == 0; var4 = var4 << 1) {\n          adjusted_size = adjusted_size + 4;\n        }\n      } while( true );\n    }\n  }\n  ptr5 = DAT_20000454;\n  adjusted_size = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  if ((temp_size <= adjusted_size) && (var1 = adjusted_size - temp_size, 0xf < (int)var1)) goto LAB_08008dac;\n  if (DAT_20000854 == (undefined *)0xffffffff) {\n    var1 = temp_size + DAT_20000a44 + 0x10;\n  }\n  else {\n    var1 = temp_size + DAT_20000a44 + 0x100f & 0xfffff000;\n  }\n  ptr2 = (undefined *)FUN_08009744(out_pointer,var1);\n  if (ptr2 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    adjusted_size = *(uint *)(DAT_20000454 + 4);\n  }\n  else {\n    ptr1 = ptr5 + adjusted_size;\n    if (ptr1 < ptr2 || ptr1 == ptr2) {\n      ptr4 = DAT_20000a14 + var1;\n      if ((ptr1 != ptr2) || (((uint)ptr1 & 0xfff) != 0)) goto LAB_08008d02;\n      DAT_20000a14 = ptr4;\n      *(uint *)(DAT_20000454 + 4) = adjusted_size + var1 | 1;\n    }\n    else {\n      if (ptr5 != &DAT_2000044c) goto LAB_08008ed8;\nLAB_08008d02:\n      DAT_20000a14 = DAT_20000a14 + var1;\n      ptr4 = ptr2;\n      if (DAT_20000854 != (undefined *)0xffffffff) {\n        DAT_20000a14 = DAT_20000a14 + ((int)ptr2 - (int)ptr1);\n        ptr4 = DAT_20000854;\n      }\n      DAT_20000854 = ptr4;\n      var4 = (uint)ptr2 & 7;\n      if (var4 == 0) {\n        var3 = 0x1000;\n      }\n      else {\n        ptr2 = ptr2 + (8 - var4);\n        var3 = 0x1008 - var4;\n      }\n      var3 = var3 - ((uint)(ptr2 + var1) & 0xfff);\n      temp_var1 = FUN_08009744(out_pointer,var3);\n      if (temp_var1 == -1) {\n        var1 = 1;\n        var3 = 0;\n      }\n      else {\n        var1 = (temp_var1 - (int)ptr2) + var3 | 1;\n      }\n      ptr4 = DAT_20000a14 + var3;\n      DAT_20000454 = ptr2;\n      DAT_20000a14 = ptr4;\n      *(uint *)(ptr2 + 4) = var1;\n      if (ptr5 != &DAT_2000044c) {\n        if (adjusted_size < 0x10) {\n          *(undefined4 *)(ptr2 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        adjusted_size = adjusted_size - 0xc & 0xfffffff8;\n        *(uint *)(ptr5 + 4) = *(uint *)(ptr5 + 4) & 1 | adjusted_size;\n        *(undefined4 *)(ptr5 + adjusted_size + 4) = 5;\n        *(undefined4 *)(ptr5 + adjusted_size + 8) = 5;\n        if (0xf < adjusted_size) {\n          FUN_080088ec(out_pointer,ptr5 + 8);\n          ptr4 = DAT_20000a14;\n        }\n      }\n    }\n    if (DAT_20000a3c < ptr4) {\n      DAT_20000a3c = ptr4;\n    }\n    adjusted_size = *(uint *)(DAT_20000454 + 4);\n    if (DAT_20000a40 < ptr4) {\n      DAT_20000a40 = ptr4;\n    }\n  }\n  var1 = (adjusted_size & 0xfffffffc) - temp_size;\n  if ((temp_size <= (adjusted_size & 0xfffffffc)) && (0xf < (int)var1)) {\nLAB_08008dac:\n    ptr5 = DAT_20000454 + temp_size;\n    *(uint *)(DAT_20000454 + 4) = temp_size | 1;\n    result_pointer = (int *)(DAT_20000454 + 8);\n    DAT_20000454 = ptr5;\n    *(uint *)(ptr5 + 4) = var1 | 1;\n    FUN_080090b4(out_pointer);\n    return result_pointer;\n  }\nLAB_08008eee:\n  FUN_080090b4(out_pointer);\n  return (int *)0x0;\n}\n\n",
            "renaming": {
                "FUN_08008af8": "allocate_memory_08008af8",
                "param_1": "out_pointer",
                "param_2": "size",
                "puVar1": "ptr1",
                "uVar2": "var1",
                "uVar3": "var2",
                "iVar4": "var3",
                "puVar5": "ptr2",
                "uVar6": "var4",
                "uVar7": "var5",
                "puVar8": "ptr3",
                "puVar9": "ptr4",
                "puVar10": "ptr5",
                "piVar11": "result_pointer",
                "uVar12": "adjusted_size",
                "uVar13": "temp_size",
                "iVar14": "temp_var1",
                "puVar15": "temp_ptr1",
                "puVar16": "temp_ptr2"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080097cc",
                "FUN_08009adc",
                "FUN_08009980"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_080088ec",
                "FUN_08009744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800901c": {
            "entrypoint": "0x0800901c",
            "current_name": "find_byte_sequence_0800901c",
            "code": "\nuint * find_byte_sequence_0800901c(uint *input_array,uint search_byte_1,uint array_length)\n\n{\n  uint temp1;\n  uint temp2;\n  uint *array_ptr;\n  uint search_byte_2;\n  bool is_empty;\n  \n  search_byte_2 = search_byte_1 & 0xff;\n  if (((uint)input_array & 3) == 0) {\nLAB_0800904a:\n    if (3 < array_length) {\n      temp2 = (search_byte_1 & 0xff) << 8 | search_byte_2;\n      array_ptr = input_array;\n      do {\n        temp1 = *array_ptr ^ (temp2 | temp2 << 0x10);\n        input_array = array_ptr + 1;\n        if ((temp1 + 0xfefefeff & ~temp1 & 0x80808080) != 0) goto LAB_08009050;\n        array_length = array_length - 4;\n        array_ptr = input_array;\n      } while (3 < array_length);\n    }\n    array_ptr = input_array;\n    if (array_length == 0) {\n      input_array = (uint *)0x0;\n    }\n    else {\nLAB_08009050:\n      input_array = array_ptr;\n      if (*(byte *)input_array != search_byte_2) {\n        array_ptr = (uint *)(array_length + (int)input_array);\n        do {\n          input_array = (uint *)((int)input_array + 1);\n          if (array_ptr == input_array) goto LAB_0800906c;\n        } while (*(byte *)input_array != search_byte_2);\n      }\n    }\n  }\n  else {\n    temp2 = array_length - 1;\n    if (array_length == 0) {\nLAB_0800906c:\n      input_array = (uint *)0x0;\n    }\n    else if (*(byte *)input_array != search_byte_2) {\n      array_ptr = (uint *)((int)input_array + 1);\n      do {\n        input_array = array_ptr;\n        array_length = temp2;\n        if (((uint)input_array & 3) == 0) goto LAB_0800904a;\n        is_empty = temp2 == 0;\n        temp2 = temp2 - 1;\n        if (is_empty) goto LAB_0800906c;\n        array_ptr = (uint *)((int)input_array + 1);\n      } while (*(byte *)input_array != search_byte_2);\n    }\n  }\n  return input_array;\n}\n\n",
            "renaming": {
                "FUN_0800901c": "find_byte_sequence_0800901c",
                "param_1": "input_array",
                "param_2": "search_byte_1",
                "param_3": "array_length",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "puVar3": "array_ptr",
                "uVar4": "search_byte_2",
                "bVar5": "is_empty"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090a8": {
            "entrypoint": "0x080090a8",
            "current_name": "initialize_data_080090a8",
            "code": "\nvoid initializeData_080090a8(void)\n\n{\n  FUNC_08008af0(&DAT_20000bfc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090a8": "initialize_data_080090a8"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_080088ec",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090b4": {
            "entrypoint": "0x080090b4",
            "current_name": "initialize_data_080090b4",
            "code": "\nvoid initializeData_080090b4(void)\n\n{\n  FUNC_08008af4(&DAT_20000bfc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090b4": "initialize_data_080090b4"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_080088ec",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08008af4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090c0": {
            "entrypoint": "0x080090c0",
            "current_name": "get_pointer_080090c0",
            "code": "\nundefined4 * getPointer_080090c0(int input1,uint input2)\n\n{\n  undefined4 *pointer;\n  int tempVar;\n  \n  tempVar = *(int *)(input1 + 0x4c);\n  if (tempVar == 0) {\n    tempVar = FUN_08009980(input1,4,0x21);\n    *(int *)(input1 + 0x4c) = tempVar;\n    if (tempVar == 0) {\n      return (undefined4 *)0x0;\n    }\n  }\n  pointer = *(undefined4 **)(tempVar + input2 * 4);\n  if (pointer == (undefined4 *)0x0) {\n    tempVar = 1 << (input2 & 0xff);\n    pointer = (undefined4 *)FUN_08009980(input1,1,(tempVar + 5) * 4);\n    if (pointer == (undefined4 *)0x0) {\n      return (undefined4 *)0x0;\n    }\n    pointer[1] = input2;\n    pointer[2] = tempVar;\n  }\n  else {\n    *(undefined4 *)(tempVar + input2 * 4) = *pointer;\n  }\n  pointer[3] = 0;\n  pointer[4] = 0;\n  return pointer;\n}\n\n",
            "renaming": {
                "FUN_080090c0": "get_pointer_080090c0",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "pointer",
                "iVar2": "tempVar"
            },
            "calling": [
                "FUN_08009444",
                "FUN_08009258",
                "FUN_080079e8",
                "FUN_08009244",
                "FUN_08009530",
                "FUN_080093a4",
                "FUN_08009120",
                "FUN_08009630"
            ],
            "called": [
                "FUN_08009980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800910c": {
            "entrypoint": "0x0800910c",
            "current_name": "update_pointer_value_0800910c",
            "code": "\nvoid updatePointerValue_0800910c(int ptrOffset,undefined4 *targetPointer)\n\n{\n  int baseAddress;\n  \n  if (targetPointer != (undefined4 *)0x0) {\n    baseAddress = *(int *)(ptrOffset + 0x4c);\n    *targetPointer = *(undefined4 *)(baseAddress + targetPointer[1] * 4);\n    *(undefined4 **)(baseAddress + targetPointer[1] * 4) = targetPointer;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800910c": "update_pointer_value_0800910c",
                "param_1": "ptrOffset",
                "param_2": "targetPointer",
                "iVar1": "baseAddress"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009120": {
            "entrypoint": "0x08009120",
            "current_name": "update_pointer_array_08009120",
            "code": "\nundefined4 * updatePointerArray_08009120(int param1,undefined4 *pointerArray,int multiplier,uint carry)\n\n{\n  undefined4 *updatedPointerArray;\n  uint carryHelper;\n  int numElements;\n  uint *currentPointer;\n  int iterationCount;\n  \n  iterationCount = 0;\n  numElements = pointerArray[4];\n  currentPointer = pointerArray + 5;\n  do {\n    iterationCount = iterationCount + 1;\n    carry = multiplier * (*currentPointer & 0xffff) + carry;\n    carryHelper = multiplier * (*currentPointer >> 0x10) + (carry >> 0x10);\n    *currentPointer = (carry & 0xffff) + carryHelper * 0x10000;\n    carry = carryHelper >> 0x10;\n    currentPointer = currentPointer + 1;\n  } while (iterationCount < numElements);\n  updatedPointerArray = pointerArray;\n  if (carry != 0) {\n    if ((int)pointerArray[2] <= numElements) {\n      updatedPointerArray = (undefined4 *)FUN_080090c0(param1,pointerArray[1] + 1);\n      FUN_08001084(updatedPointerArray + 3,pointerArray + 3,(pointerArray[4] + 2) * 4);\n      iterationCount = *(int *)(param1 + 0x4c);\n      *pointerArray = *(undefined4 *)(iterationCount + pointerArray[1] * 4);\n      *(undefined4 **)(iterationCount + pointerArray[1] * 4) = pointerArray;\n    }\n    updatedPointerArray[numElements + 5] = carry;\n    updatedPointerArray[4] = numElements + 1;\n  }\n  return updatedPointerArray;\n}\n\n",
            "renaming": {
                "FUN_08009120": "update_pointer_array_08009120",
                "param_1": "param1",
                "param_2": "pointerArray",
                "param_3": "multiplier",
                "param_4": "carry",
                "puVar1": "updatedPointerArray",
                "uVar2": "carryHelper",
                "iVar3": "numElements",
                "puVar4": "currentPointer",
                "iVar5": "iterationCount"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_080093a4"
            ],
            "called": [
                "FUN_08001084",
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091a4": {
            "entrypoint": "0x080091a4",
            "current_name": "find_most_significant_bit_080091a4",
            "code": "\nint find_most_significant_bit_080091a4(uint input_value)\n\n{\n  int bit_position;\n  \n  if ((input_value & 0xffff0000) == 0) {\n    input_value = input_value << 0x10;\n    bit_position = 0x10;\n  }\n  else {\n    bit_position = 0;\n  }\n  if ((input_value & 0xff000000) == 0) {\n    input_value = input_value << 8;\n    bit_position = bit_position + 8;\n  }\n  if ((input_value & 0xf0000000) == 0) {\n    input_value = input_value << 4;\n    bit_position = bit_position + 4;\n  }\n  if ((input_value & 0xc0000000) == 0) {\n    input_value = input_value << 2;\n    bit_position = bit_position + 2;\n  }\n  if (-1 < (int)input_value) {\n    if ((int)(input_value << 1) < 0) {\n      return bit_position + 1;\n    }\n    bit_position = 0x20;\n  }\n  return bit_position;\n}\n\n",
            "renaming": {
                "FUN_080091a4": "find_most_significant_bit_080091a4",
                "param_1": "input_value",
                "iVar1": "bit_position"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_08009630"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091e4": {
            "entrypoint": "0x080091e4",
            "current_name": "count_leading_zeros_080091e4",
            "code": "\nint countLeadingZeros_080091e4(uint *input)\n\n{\n  int leadingZerosCount;\n  uint value;\n  \n  value = *input;\n  if ((value & 7) == 0) {\n    if ((value & 0xffff) == 0) {\n      value = value >> 0x10;\n      leadingZerosCount = 0x10;\n    }\n    else {\n      leadingZerosCount = 0;\n    }\n    if ((value & 0xff) == 0) {\n      value = value >> 8;\n      leadingZerosCount = leadingZerosCount + 8;\n    }\n    if ((value & 0xf) == 0) {\n      value = value >> 4;\n      leadingZerosCount = leadingZerosCount + 4;\n    }\n    if ((value & 3) == 0) {\n      value = value >> 2;\n      leadingZerosCount = leadingZerosCount + 2;\n    }\n    if (-1 < (int)(value << 0x1f)) {\n      value = value >> 1;\n      if (value == 0) {\n        return 0x20;\n      }\n      leadingZerosCount = leadingZerosCount + 1;\n    }\n    *input = value;\n    return leadingZerosCount;\n  }\n  if ((int)(value << 0x1f) < 0) {\n    return 0;\n  }\n  if (-1 < (int)(value << 0x1e)) {\n    *input = value >> 2;\n    return 2;\n  }\n  *input = value >> 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080091e4": "count_leading_zeros_080091e4",
                "param_1": "input",
                "iVar1": "leadingZerosCount",
                "uVar2": "value"
            },
            "calling": [
                "FUN_08009630"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009244": {
            "entrypoint": "0x08009244",
            "current_name": "set_variable_and_param_08009244",
            "code": "\nvoid setVariableAndParam_08009244(undefined4 inputParam1,undefined4 inputParam2)\n\n{\n  int result;\n  \n  result = FUN_080090c0(inputParam1,1);\n  *(undefined4 *)(result + 0x10) = 1;\n  *(undefined4 *)(result + 0x14) = inputParam2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009244": "set_variable_and_param_08009244",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009258": {
            "entrypoint": "0x08009258",
            "current_name": "initialize_matrix_08009258",
            "code": "\nvoid initializeMatrix_08009258(undefined4 param1,int matrix1,int matrix2)\n\n{\n  uint *ptr1;\n  uint *ptr2;\n  int size;\n  uint temp1;\n  uint *ptr3;\n  uint offset;\n  uint *ptr4;\n  uint temp2;\n  int size1;\n  int size2;\n  uint temp3;\n  int matrix1Size;\n  int matrix2Size;\n  uint *ptr5;\n  uint *ptr6;\n  uint *ptr7;\n  uint *ptr8;\n  uint *ptr9;\n  \n  matrix1Size = *(int *)(matrix1 + 0x10);\n  size1 = *(int *)(matrix2 + 0x10);\n  size2 = size1;\n  matrix2Size = matrix1;\n  if (matrix1Size < size1) {\n    size2 = matrix1Size;\n    matrix1Size = size1;\n    matrix2Size = matrix2;\n    matrix2 = matrix1;\n  }\n  size1 = matrix1Size + size2;\n  size = *(int *)(matrix2Size + 4);\n  if (*(int *)(matrix2Size + 8) < size1) {\n    size = size + 1;\n  }\n  size = FUN_080090c0(param1,size);\n  ptr9 = (uint *)(size + 0x14);\n  ptr8 = ptr9 + size1;\n  for (ptr3 = ptr9; ptr3 < ptr8; ptr3 = ptr3 + 1) {\n    *ptr3 = 0;\n  }\n  offset = matrix2 + 0x14;\n  temp3 = offset + size2 * 4;\n  ptr3 = (uint *)(matrix2Size + 0x14);\n  if (offset < temp3) {\n    ptr4 = (uint *)(offset + ((temp3 - matrix2) - 0x15 & 0xfffffffc));\n    ptr7 = (uint *)(matrix2 + 0x10);\n    do {\n      while( true ) {\n        ptr7 = ptr7 + 1;\n        offset = *ptr7 & 0xffff;\n        if (offset != 0) break;\n        offset = *ptr7 >> 0x10;\n        if (offset == 0) goto LAB_080092d2;\nLAB_0800932c:\n        temp2 = *ptr9;\n        temp1 = 0;\n        ptr1 = ptr3;\n        ptr5 = ptr9;\n        temp3 = temp2;\n        do {\n          ptr6 = ptr5;\n          temp1 = temp1 + offset * *(ushort *)ptr1 + (temp3 >> 0x10);\n          *ptr6 = temp2 & 0xffff | temp1 * 0x10000;\n          ptr2 = ptr1 + 1;\n          temp3 = ptr6[1];\n          temp2 = offset * (*ptr1 >> 0x10) + (temp3 & 0xffff) + (temp1 >> 0x10);\n          temp1 = temp2 >> 0x10;\n          ptr1 = ptr2;\n          ptr5 = ptr6 + 1;\n        } while (ptr2 < ptr3 + matrix1Size);\n        ptr6[1] = temp2;\n        ptr9 = ptr9 + 1;\n        if (ptr4 == ptr7) goto LAB_0800937a;\n      }\n      temp3 = 0;\n      ptr1 = ptr9;\n      ptr5 = ptr3;\n      do {\n        ptr2 = ptr1;\n        ptr6 = ptr5 + 1;\n        temp2 = offset * (*ptr5 & 0xffff) + (*ptr2 & 0xffff) + temp3;\n        temp1 = offset * (*ptr5 >> 0x10) + (*ptr2 >> 0x10) + (temp2 >> 0x10);\n        temp3 = temp1 >> 0x10;\n        *ptr2 = temp2 & 0xffff | temp1 * 0x10000;\n        ptr1 = ptr2 + 1;\n        ptr5 = ptr6;\n      } while (ptr6 < ptr3 + matrix1Size);\n      ptr2[1] = temp3;\n      offset = *ptr7 >> 0x10;\n      if (offset != 0) goto LAB_0800932c;\nLAB_080092d2:\n      ptr9 = ptr9 + 1;\n    } while (ptr4 != ptr7);\n  }\nLAB_0800937a:\n  if (0 < size1) {\n    offset = ptr8[-1];\n    ptr8 = ptr8 + -1;\n    while ((offset == 0 && (size1 = size1 + -1, size1 != 0))) {\n      ptr8 = ptr8 + -1;\n      offset = *ptr8;\n    }\n  }\n  *(int *)(size + 0x10) = size1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009258": "initialize_matrix_08009258",
                "param_1": "param1",
                "param_2": "matrix1",
                "param_3": "matrix2",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "iVar3": "size",
                "uVar4": "temp1",
                "puVar5": "ptr3",
                "uVar6": "offset",
                "puVar7": "ptr4",
                "puVar14": "ptr5",
                "uVar8": "temp2",
                "iVar9": "size1",
                "iVar10": "size2",
                "uVar11": "temp3",
                "iVar12": "matrix1Size",
                "iVar13": "matrix2Size",
                "puVar15": "ptr6",
                "puVar16": "ptr7",
                "puVar17": "ptr8",
                "puVar18": "ptr9"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_080093a4"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080093a4": {
            "entrypoint": "0x080093a4",
            "current_name": "process_data_080093a4",
            "code": "\nundefined4 * processData_080093a4(int input,undefined4 *output,uint size)\n\n{\n  int counter;\n  int numIterations;\n  undefined4 *tempPtr1;\n  undefined4 *tempPtr2;\n  \n  if ((size & 3) != 0) {\n    output = (undefined4 *)\n              FUN_08009120(input,output,*(undefined4 *)(&DAT_0800a070 + ((size & 3) - 1) * 4),\n                           0);\n  }\n  numIterations = (int)size >> 2;\n  if (numIterations != 0) {\n    tempPtr2 = *(undefined4 **)(input + 0x48);\n    if (tempPtr2 == (undefined4 *)0x0) {\n      tempPtr2 = (undefined4 *)FUN_080090c0(input,1);\n      tempPtr2[4] = 1;\n      tempPtr2[5] = 0x271;\n      *(undefined4 **)(input + 0x48) = tempPtr2;\n      *tempPtr2 = 0;\n    }\n    tempPtr1 = output;\n    if (numIterations << 0x1f < 0) goto LAB_080093d2;\nLAB_080093c4:\n    numIterations = numIterations >> 1;\n    tempPtr1 = tempPtr2;\n    if (numIterations != 0) {\n      while( true ) {\n        tempPtr2 = (undefined4 *)*tempPtr1;\n        if (tempPtr2 == (undefined4 *)0x0) {\n          tempPtr2 = (undefined4 *)FUN_08009258(input,tempPtr1,tempPtr1);\n          *tempPtr1 = tempPtr2;\n          *tempPtr2 = 0;\n        }\n        tempPtr1 = output;\n        if (-1 < numIterations << 0x1f) break;\nLAB_080093d2:\n        output = (undefined4 *)FUN_08009258(input,tempPtr1,tempPtr2);\n        if (tempPtr1 == (undefined4 *)0x0) break;\n        counter = *(int *)(input + 0x4c);\n        numIterations = numIterations >> 1;\n        *tempPtr1 = *(undefined4 *)(counter + tempPtr1[1] * 4);\n        *(undefined4 **)(counter + tempPtr1[1] * 4) = tempPtr1;\n        tempPtr1 = tempPtr2;\n        if (numIterations == 0) {\n          return output;\n        }\n      }\n      goto LAB_080093c4;\n    }\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_080093a4": "process_data_080093a4",
                "param_1": "input",
                "param_2": "output",
                "param_3": "size",
                "iVar1": "counter",
                "iVar2": "numIterations",
                "puVar3": "tempPtr1",
                "puVar4": "tempPtr2"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08009258",
                "FUN_080090c0",
                "FUN_08009120"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009444": {
            "entrypoint": "0x08009444",
            "current_name": "decode_and_update_data_08009444",
            "code": "\nvoid decode_and_update_data_08009444(int input_buffer,undefined4 *metadata,uint data_length)\n\n{\n  int temp_var1;\n  int temp_var2;\n  int temp_var3;\n  undefined4 temp_var4;\n  int offset;\n  int temp_var6;\n  uint *current_ptr;\n  uint *ptr_start;\n  uint *ptr_current;\n  uint *ptr_next;\n  int num_iterations;\n  int updated_length;\n  uint shifted_bits;\n  uint *ptr_end;\n  \n  offset = metadata[4];\n  num_iterations = (int)data_length >> 5;\n  updated_length = num_iterations + offset + 1;\n  temp_var3 = metadata[1];\n  temp_var2 = metadata[2];\n  if ((int)metadata[2] < updated_length) {\n    do {\n      temp_var6 = temp_var2 * 2;\n      temp_var1 = temp_var2 * -2;\n      temp_var3 = temp_var3 + 1;\n      temp_var2 = temp_var6;\n    } while (updated_length != temp_var6 && updated_length + temp_var1 < 0 == SBORROW4(updated_length,temp_var6));\n  }\n  temp_var2 = FUN_080090c0(input_buffer,temp_var3);\n  current_ptr = (uint *)(temp_var2 + 0x14);\n  if (0 < num_iterations) {\n    ptr_next = current_ptr + num_iterations;\n    ptr_start = current_ptr;\n    do {\n      ptr_end = ptr_start + 1;\n      *ptr_start = 0;\n      current_ptr = ptr_next;\n      ptr_start = ptr_end;\n    } while (ptr_end != ptr_next);\n  }\n  temp_var3 = metadata[4];\n  ptr_start = metadata + 5;\n  data_length = data_length & 0x1f;\n  if (data_length == 0) {\n    current_ptr = current_ptr + -1;\n    ptr_next = ptr_start;\n    do {\n      ptr_end = ptr_next + 1;\n      current_ptr = current_ptr + 1;\n      *current_ptr = *ptr_next;\n      ptr_next = ptr_end;\n    } while (ptr_end < ptr_start + temp_var3);\n  }\n  else {\n    shifted_bits = 0;\n    ptr_next = ptr_start;\n    do {\n      ptr_end = current_ptr;\n      *ptr_end = *ptr_next << data_length | shifted_bits;\n      ptr_current = ptr_next + 1;\n      shifted_bits = *ptr_next >> (0x20 - data_length & 0xff);\n      current_ptr = ptr_end + 1;\n      ptr_next = ptr_current;\n    } while (ptr_current < ptr_start + temp_var3);\n    ptr_end[1] = shifted_bits;\n    if (shifted_bits != 0) {\n      updated_length = num_iterations + offset + 2;\n    }\n  }\n  offset = *(int *)(input_buffer + 0x4c);\n  temp_var3 = metadata[1];\n  temp_var4 = *(undefined4 *)(offset + temp_var3 * 4);\n  *(int *)(temp_var2 + 0x10) = updated_length + -1;\n  *metadata = temp_var4;\n  *(undefined4 **)(offset + temp_var3 * 4) = metadata;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009444": "decode_and_update_data_08009444",
                "param_1": "input_buffer",
                "param_2": "metadata",
                "param_3": "data_length",
                "iVar1": "temp_var1",
                "iVar2": "temp_var2",
                "iVar3": "temp_var3",
                "uVar4": "temp_var4",
                "iVar5": "offset",
                "iVar6": "temp_var6",
                "puVar7": "current_ptr",
                "puVar8": "ptr_start",
                "puVar9": "ptr_end",
                "puVar10": "ptr_current",
                "puVar11": "ptr_next",
                "iVar12": "num_iterations",
                "iVar13": "updated_length",
                "uVar14": "shifted_bits"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094f8": {
            "entrypoint": "0x080094f8",
            "current_name": "compare_arrays_080094f8",
            "code": "\nint compareArrays_080094f8(int array1,int array2)\n\n{\n  int lengthDiff;\n  uint *ptrArray2;\n  int offset;\n  uint *ptrArray1;\n  \n  offset = *(int *)(array2 + 0x10);\n  lengthDiff = *(int *)(array1 + 0x10) - offset;\n  if (lengthDiff == 0) {\n    ptrArray2 = (uint *)(array2 + 0x14 + offset * 4);\n    ptrArray1 = (uint *)(array1 + 0x14) + offset;\n    do {\n      ptrArray1 = ptrArray1 + -1;\n      ptrArray2 = ptrArray2 + -1;\n      if (*ptrArray1 != *ptrArray2) {\n        if (*ptrArray2 <= *ptrArray1) {\n          return 1;\n        }\n        return -1;\n      }\n    } while ((uint *)(array1 + 0x14) < ptrArray1);\n  }\n  return lengthDiff;\n}\n\n",
            "renaming": {
                "FUN_080094f8": "compare_arrays_080094f8",
                "param_1": "array1",
                "param_2": "array2",
                "iVar1": "lengthDiff",
                "iVar3": "offset",
                "puVar2": "ptrArray2",
                "puVar4": "ptrArray1"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_080078c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009530": {
            "entrypoint": "0x08009530",
            "current_name": "compare_arrays_08009530",
            "code": "\nvoid compareArrays_08009530(undefined4 array1,uint *array1Size,uint *array2,undefined4 array2Size)\n\n{\n  int result;\n  uint *array2End;\n  uint temp1;\n  uint temp2;\n  undefined4 isMatch;\n  uint *ptr1;\n  uint *ptr2;\n  uint *array1Start;\n  uint *ptr1Next;\n  uint *ptr2Next;\n  int carry;\n  uint *array2Start;\n  uint array2Size;\n  uint *ptr1End;\n  \n  array2End = (uint *)array2[4];\n  ptr2Next = array1Size + 5;\n  array2Start = array2 + 5;\n  ptr2 = ptr2Next;\n  array1Start = array1Size;\n  if ((uint *)array1Size[4] == array2End) {\n    ptr1 = ptr2Next + (int)array2End;\n    array2End = array2Start + (int)array2End;\n    while( true ) {\n      ptr1 = ptr1 + -1;\n      array2End = array2End + -1;\n      if (*ptr1 != *array2End) break;\n      if (ptr1 <= ptr2Next) {\n        carry = FUN_080090c0(array1,0,ptr1,array2End,array2Size);\n        *(undefined4 *)(carry + 0x10) = 1;\n        *(undefined4 *)(carry + 0x14) = 0;\n        return;\n      }\n    }\n    isMatch = 0;\n    if (*array2End <= *ptr1) goto LAB_08009578;\n  }\n  else if (-1 < (int)(uint *)array1Size[4] - (int)array2End) {\n    isMatch = 0;\n    ptr1 = array2;\n    goto LAB_08009578;\n  }\n  isMatch = 1;\n  ptr1 = ptr2Next;\n  array2End = array1Size;\n  ptr2 = array2Start;\n  array1Start = array2;\n  array2 = array1Size;\n  array2Start = ptr2Next;\nLAB_08009578:\n  result = FUN_080090c0(array1,array1Start[1],ptr1,array2End,array2Size);\n  carry = 0;\n  array2Size = array1Start[4];\n  temp1 = array2[4];\n  *(undefined4 *)(result + 0xc) = isMatch;\n  ptr2Next = ptr2 + array2Size;\n  array2End = (uint *)(result + 0x14);\n  array1Start = array2Start;\n  do {\n    ptr1End = ptr2 + 1;\n    ptr1Next = array1Start + 1;\n    temp2 = ((*ptr2 & 0xffff) + carry) - (*array1Start & 0xffff);\n    carry = ((*ptr2 >> 0x10) - (*array1Start >> 0x10)) + ((int)temp2 >> 0x10);\n    temp2 = temp2 & 0xffff | carry * 0x10000;\n    ptr1 = array2End + 1;\n    *array2End = temp2;\n    carry = carry >> 0x10;\n    array2End = ptr1;\n    ptr2 = ptr1End;\n    array1Start = ptr1Next;\n  } while (ptr1Next < array2Start + temp1);\n  array2End = ptr1End;\n  ptr2 = ptr1;\n  if (ptr1End < ptr2Next) {\n    do {\n      array1Start = array2End + 1;\n      temp1 = (*array2End & 0xffff) + carry;\n      carry = ((int)temp1 >> 0x10) + (*array2End >> 0x10);\n      temp2 = temp1 & 0xffff | carry * 0x10000;\n      *ptr2 = temp2;\n      carry = carry >> 0x10;\n      array2End = array1Start;\n      ptr2 = ptr2 + 1;\n    } while (array1Start < ptr2Next);\n    ptr1 = (uint *)((int)ptr1 + ((int)ptr2Next + ~(uint)ptr1End & 0xfffffffc) + 4);\n  }\n  ptr1 = ptr1 + -1;\n  while (temp2 == 0) {\n    ptr1 = ptr1 + -1;\n    array2Size = array2Size - 1;\n    temp2 = *ptr1;\n  }\n  *(uint *)(result + 0x10) = array2Size;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009530": "compare_arrays_08009530",
                "param_1": "array1",
                "param_2": "array1Size",
                "param_3": "array2",
                "param_4": "array2Size",
                "iVar1": "result",
                "puVar2": "array2End",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "isMatch",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "puVar8": "ptr1End",
                "puVar9": "array1Start",
                "puVar10": "ptr1Next",
                "puVar11": "ptr2Next",
                "puVar13": "array2Start",
                "iVar12": "carry",
                "uVar14": "array2Size"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009630": {
            "entrypoint": "0x08009630",
            "current_name": "decode_data_08009630",
            "code": "\nint decodeData_08009630(undefined4 input1,undefined4 input2,uint value1,uint value2,int *output1,\n                int *output2)\n\n{\n  int result;\n  uint temp1;\n  int temp2;\n  int temp3;\n  uint temp4;\n  uint temp5;\n  undefined8 temp6;\n  uint temp7;\n  uint temp8;\n  \n  result = FUN_080090c0(input1,1);\n  temp5 = (value2 << 1) >> 0x15;\n  temp8 = value2 & 0xfffff;\n  if (temp5 != 0) {\n    temp8 = temp8 | 0x100000;\n  }\n  if (value1 == 0) {\n    temp2 = FUN_080091e4(&temp8);\n    temp3 = 1;\n    temp1 = temp2 + 0x20;\n    *(undefined4 *)(result + 0x10) = 1;\n    *(uint *)(result + 0x14) = temp8;\n  }\n  else {\n    temp7 = value1;\n    temp1 = FUN_080091e4(&temp7);\n    if (temp1 == 0) {\n      *(uint *)(result + 0x14) = temp7;\n    }\n    else {\n      temp4 = temp8 << (0x20 - temp1 & 0xff);\n      temp8 = temp8 >> (temp1 & 0xff);\n      *(uint *)(result + 0x14) = temp4 | temp7;\n    }\n    if (temp8 == 0) {\n      temp3 = 1;\n    }\n    else {\n      temp3 = 2;\n    }\n    *(uint *)(result + 0x18) = temp8;\n    *(int *)(result + 0x10) = temp3;\n  }\n  if (temp5 == 0) {\n    *output1 = temp1 - 0x432;\n    temp6 = FUN_080091a4(*(undefined4 *)(result + temp3 * 4 + 0x10));\n    *output2 = (int)((ulonglong)temp6 >> 0x20) * 0x20 - (int)temp6;\n    return result;\n  }\n  *output1 = (temp5 - 0x433) + temp1;\n  *output2 = 0x35 - temp1;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009630": "decode_data_08009630",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "value1",
                "param_4": "value2",
                "param_5": "output1",
                "param_6": "output2",
                "iVar1": "result",
                "uVar2": "temp1",
                "iVar3": "temp2",
                "iVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "local_20": "temp7",
                "local_1c": "temp8"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080091e4",
                "FUN_080090c0",
                "FUN_080091a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e0": {
            "entrypoint": "0x080096e0",
            "current_name": "convert_float_to_ieee_080096e0",
            "code": "\nundefined8 convertFloatToIEEE_080096e0(uint inputFloat,uint inputUint,int *outputInteger,undefined4 param_4)\n\n{\n  int tempVariable1;\n  uint tempVariable2;\n  undefined8 combinedVariables;\n  \n  combinedVariables = CONCAT44(inputUint,inputFloat);\n  tempVariable1 = 0;\n  tempVariable2 = inputUint & 0x7fffffff;\n  *outputInteger = 0;\n  if ((tempVariable2 < 0x7ff00000) && ((tempVariable2 | inputFloat) != 0)) {\n    if (tempVariable2 < 0x100000) {\n      combinedVariables = FUN_080004c8(inputFloat,inputUint,0,0x43500000,param_4);\n      tempVariable1 = -0x36;\n      tempVariable2 = (uint)((ulonglong)combinedVariables >> 0x20) & 0x7fffffff;\n    }\n    inputFloat = (uint)combinedVariables;\n    inputUint = (uint)((ulonglong)combinedVariables >> 0x20) & 0x800fffff | 0x3fe00000;\n    *outputInteger = ((int)tempVariable2 >> 0x14) + -0x3fe + tempVariable1;\n  }\n  return CONCAT44(inputUint,inputFloat);\n}\n\n",
            "renaming": {
                "FUN_080096e0": "convert_float_to_ieee_080096e0",
                "param_1": "inputFloat",
                "param_2": "inputUint",
                "param_3": "outputInteger",
                "iVar1": "tempVariable1",
                "uVar2": "tempVariable2",
                "uVar3": "combinedVariables"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_080004c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009744": {
            "entrypoint": "0x08009744",
            "current_name": "check_and_assign_result_08009744",
            "code": "\nvoid checkAndAssignResult_08009744(int *resultPointer,undefined4 inputParameter)\n\n{\n  int returnValue;\n  \n  DAT_20000c10 = 0;\n  returnValue = FUN_08005728(inputParameter);\n  if ((returnValue == -1) && (DAT_20000c10 != 0)) {\n    *resultPointer = DAT_20000c10;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009744": "check_and_assign_result_08009744",
                "param_1": "resultPointer",
                "param_2": "inputParameter",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08005728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009768": {
            "entrypoint": "0x08009768",
            "current_name": "copy_and_null_terminate_string_08009768",
            "code": "\nvoid copy_and_null_terminate_string_08009768(uint *destination,uint *source,uint length)\n\n{\n  char current_char;\n  uint *source_ptr;\n  uint *destination_ptr;\n  uint current_value;\n  \n  if (((((uint)destination | (uint)source) & 3) == 0) &&\n     (destination_ptr = destination, source_ptr = source, 3 < length)) {\n    do {\n      source = source_ptr + 1;\n      current_value = *source_ptr;\n      destination = destination_ptr;\n      if ((current_value + 0xfefefeff & ~current_value & 0x80808080) != 0) goto LAB_0800979c;\n      length = length - 4;\n      destination = destination_ptr + 1;\n      *destination_ptr = current_value;\n      destination_ptr = destination;\n      source_ptr = source;\n    } while (3 < length);\n  }\n  source_ptr = source;\n  if (length != 0) {\nLAB_0800979c:\n    current_char = *(char *)source_ptr;\n    *(char *)destination = current_char;\n    while( true ) {\n      destination = (uint *)((int)destination + 1);\n      length = length - 1;\n      if (current_char == '\\0') break;\n      if (length == 0) {\n        return;\n      }\n      source_ptr = (uint *)((int)source_ptr + 1);\n      current_char = *(char *)source_ptr;\n      *(char *)destination = current_char;\n    }\n    if (length != 0) {\n      source_ptr = destination;\n      do {\n        destination_ptr = (uint *)((int)source_ptr + 1);\n        *(char *)source_ptr = '\\0';\n        source_ptr = destination_ptr;\n      } while (destination_ptr != (uint *)(length + (int)destination));\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009768": "copy_and_null_terminate_string_08009768",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "cVar1": "current_char",
                "puVar2": "source_ptr",
                "puVar3": "destination_ptr",
                "uVar4": "current_value"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080097cc": {
            "entrypoint": "0x080097cc",
            "current_name": "decode_and_update_data_080097cc",
            "code": "\nundefined4 decode_and_update_data_080097cc(undefined4 *output_buffer,int *input_buffer,int *control_buffer)\n\n{\n  int input_offset;\n  uint data_length;\n  int temp_var1;\n  int temp_var2;\n  uint max_length;\n  uint temp_var3;\n  undefined4 *data_ptr;\n  undefined4 *data_ptr_temp;\n  undefined4 value;\n  \n  if (control_buffer[2] != 0) {\n    input_offset = *input_buffer;\n    max_length = input_buffer[2];\n    data_ptr_temp = (undefined4 *)*control_buffer;\n    do {\n      do {\n        data_ptr = data_ptr_temp + 2;\n        value = *data_ptr_temp;\n        temp_var3 = data_ptr_temp[1];\n        data_ptr_temp = data_ptr;\n      } while (temp_var3 == 0);\n      data_length = temp_var3;\n      if ((max_length <= temp_var3) && (data_length = max_length, (*(ushort *)(input_buffer + 3) & 0x480) != 0)) {\n        temp_var2 = input_offset - input_buffer[4];\n        max_length = (input_buffer[5] * 3) / 2;\n        data_length = temp_var3 + 1 + temp_var2;\n        if (max_length < data_length) {\n          max_length = data_length;\n        }\n        if ((int)((uint)*(ushort *)(input_buffer + 3) << 0x15) < 0) {\n          temp_var1 = FUN_08008af8(output_buffer,max_length);\n          if (temp_var1 == 0) {\nerror_handling_label:\n            *output_buffer = 0xc;\n            *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) | 0x40;\n            control_buffer[1] = 0;\n            control_buffer[2] = 0;\n            return 0xffffffff;\n          }\n          FUN_08001084(temp_var1,input_buffer[4],temp_var2);\n          *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) & 0xfb7f | 0x80;\n        }\n        else {\n          temp_var1 = FUN_08009adc(output_buffer);\n          if (temp_var1 == 0) {\n            FUN_080088ec(output_buffer,input_buffer[4]);\n            goto error_handling_label;\n          }\n        }\n        input_offset = temp_var1 + temp_var2;\n        input_buffer[5] = max_length;\n        input_buffer[4] = temp_var1;\n        *input_buffer = input_offset;\n        input_buffer[2] = max_length - temp_var2;\n        data_length = temp_var3;\n      }\n      FUN_08009a18(input_offset,value,data_length);\n      temp_var2 = control_buffer[2];\n      max_length = input_buffer[2] - data_length;\n      input_offset = *input_buffer + data_length;\n      input_buffer[2] = max_length;\n      *input_buffer = input_offset;\n      control_buffer[2] = temp_var2 - temp_var3;\n    } while (temp_var2 - temp_var3 != 0);\n  }\n  control_buffer[1] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080097cc": "decode_and_update_data_080097cc",
                "param_1": "output_buffer",
                "param_2": "input_buffer",
                "param_3": "control_buffer",
                "iVar1": "input_offset",
                "uVar2": "data_length",
                "iVar3": "temp_var1",
                "iVar4": "temp_var2",
                "uVar5": "max_length",
                "uVar6": "temp_var3",
                "puVar7": "data_ptr",
                "puVar8": "data_ptr_temp",
                "uVar9": "value",
                "LAB_08009896": "error_handling_label"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08001084",
                "FUN_080088ec",
                "FUN_08009adc",
                "FUN_08009a18",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098c0": {
            "entrypoint": "0x080098c0",
            "current_name": "update_data_080098c0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009906) */\n/* WARNING: Removing unreachable block (ram,0x08009912) */\n\nundefined4 updateData_080098c0(int flag,undefined4 value,undefined4 data1,undefined4 data2)\n\n{\n  undefined *ptr;\n  undefined4 result;\n  uint bitMask;\n  uint count;\n  \n  FUNC_08008af0(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  ptr = DAT_20000168;\n  count = *(uint *)(DAT_20000168 + 4);\n  if ((int)count < 0x20) {\n    if (flag != 0) {\n      *(undefined4 *)(DAT_20000168 + count * 4 + 0x88) = data1;\n      bitMask = 1 << (count & 0xff);\n      *(uint *)(ptr + 0x188) = *(uint *)(ptr + 0x188) | bitMask;\n      *(undefined4 *)(ptr + count * 4 + 0x108) = data2;\n      if (flag == 2) {\n        *(uint *)(ptr + 0x18c) = bitMask | *(uint *)(ptr + 0x18c);\n      }\n    }\n    *(uint *)(ptr + 4) = count + 1;\n    result = DAT_20000448;\n    *(undefined4 *)(ptr + (count + 2) * 4) = value;\n    FUNC_08008af4(result);\n    result = 0;\n  }\n  else {\n    FUNC_08008af4(DAT_20000448);\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080098c0": "update_data_080098c0",
                "param_1": "flag",
                "param_2": "value",
                "param_3": "data1",
                "param_4": "data2",
                "puVar1": "ptr",
                "uVar2": "result",
                "uVar3": "bitMask",
                "uVar4": "count"
            },
            "calling": [
                "FUN_080078a0"
            ],
            "called": [
                "FUN_08008af4",
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009980": {
            "entrypoint": "0x08009980",
            "current_name": "initialize_memory_08009980",
            "code": "\nundefined4 * initializeMemory_08009980(undefined4 dataPointer,int numRows,int numColumns)\n\n{\n  undefined4 *allocatedMemory;\n  uint memorySize;\n  undefined4 *nextPosition;\n  \n  allocatedMemory = (undefined4 *)FUN_08008af8(dataPointer,numColumns * numRows);\n  if (allocatedMemory == (undefined4 *)0x0) {\n    return (undefined4 *)0x0;\n  }\n  memorySize = (allocatedMemory[-1] & 0xfffffffc) - 4;\n  if (memorySize < 0x25) {\n    nextPosition = allocatedMemory;\n    if (0x13 < memorySize) {\n      *allocatedMemory = 0;\n      allocatedMemory[1] = 0;\n      if (0x1b < memorySize) {\n        allocatedMemory[2] = 0;\n        allocatedMemory[3] = 0;\n        if (memorySize == 0x24) {\n          allocatedMemory[4] = 0;\n          allocatedMemory[5] = 0;\n          nextPosition = allocatedMemory + 6;\n        }\n        else {\n          nextPosition = allocatedMemory + 4;\n        }\n        *nextPosition = 0;\n        nextPosition[1] = 0;\n        nextPosition[2] = 0;\n        return allocatedMemory;\n      }\n      nextPosition = allocatedMemory + 2;\n    }\n    *nextPosition = 0;\n    nextPosition[1] = 0;\n    nextPosition[2] = 0;\n    return allocatedMemory;\n  }\n  FUN_08005d68(allocatedMemory,0);\n  return allocatedMemory;\n}\n\n",
            "renaming": {
                "FUN_08009980": "initialize_memory_08009980",
                "param_1": "dataPointer",
                "param_2": "numRows",
                "param_3": "numColumns",
                "puVar1": "allocatedMemory",
                "uVar2": "memorySize",
                "puVar3": "nextPosition"
            },
            "calling": [
                "FUN_080090c0"
            ],
            "called": [
                "FUN_08005d68",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009a18": {
            "entrypoint": "0x08009a18",
            "current_name": "copy_memory_08009a18",
            "code": "\nvoid copy_memory_08009a18(undefined4 *destination,undefined4 *source,uint length)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  int iteration;\n  undefined *dest_byte_ptr;\n  undefined4 *src_byte_ptr;\n  uint remaining_length;\n  uint temp_length;\n  \n  if ((source < destination) && (src_ptr = (undefined4 *)((int)source + length), destination < src_ptr)) {\n    dest_byte_ptr = (undefined *)((int)destination + length);\n    if (length != 0) {\n      do {\n        src_ptr = (undefined4 *)((int)src_ptr + -1);\n        dest_byte_ptr = dest_byte_ptr + -1;\n        *dest_byte_ptr = *(undefined *)src_ptr;\n      } while (source != src_ptr);\n    }\n  }\n  else {\n    temp_length = length;\n    if (0xf < length) {\n      if ((((uint)destination | (uint)source) & 3) != 0) goto LAB_08009abc;\n      src_ptr = source + 4;\n      dest_ptr = destination + 4;\n      do {\n        src_byte_ptr = src_ptr + 4;\n        dest_ptr[-4] = src_ptr[-4];\n        dest_ptr[-3] = src_ptr[-3];\n        dest_ptr[-2] = src_ptr[-2];\n        dest_ptr[-1] = src_ptr[-1];\n        src_ptr = src_byte_ptr;\n        dest_ptr = dest_ptr + 4;\n      } while (src_byte_ptr != (undefined4 *)((int)source + (length - 0x10 & 0xfffffff0) + 0x20));\n      iteration = (length - 0x10 >> 4) + 1;\n      temp_length = length & 0xf;\n      source = source + iteration * 4;\n      destination = destination + iteration * 4;\n      if (3 < temp_length) {\n        src_ptr = destination + -1;\n        remaining_length = temp_length;\n        dest_ptr = source;\n        do {\n          remaining_length = remaining_length - 4;\n          src_ptr = src_ptr + 1;\n          *src_ptr = *dest_ptr;\n          dest_ptr = dest_ptr + 1;\n        } while (3 < remaining_length);\n        iteration = (temp_length - 4 & 0xfffffffc) + 4;\n        destination = (undefined4 *)((int)destination + iteration);\n        source = (undefined4 *)((int)source + iteration);\n        temp_length = length & 3;\n      }\n    }\n    length = temp_length;\n    if (temp_length != 0) {\nLAB_08009abc:\n      dest_byte_ptr = (undefined *)((int)destination + -1);\n      src_ptr = source;\n      do {\n        dest_ptr = (undefined4 *)((int)src_ptr + 1);\n        dest_byte_ptr = dest_byte_ptr + 1;\n        *dest_byte_ptr = *(undefined *)src_ptr;\n        src_ptr = dest_ptr;\n      } while (dest_ptr != (undefined4 *)(length + (int)source));\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009a18": "copy_memory_08009a18",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "iVar3": "iteration",
                "puVar4": "dest_byte_ptr",
                "puVar5": "src_byte_ptr",
                "uVar6": "remaining_length",
                "uVar7": "temp_length"
            },
            "calling": [
                "FUN_080097cc",
                "FUN_08009adc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009adc": {
            "entrypoint": "0x08009adc",
            "current_name": "allocate_memory_08009adc",
            "code": "\nint * allocate_memory_08009adc(undefined4 *param_ptr,int *data_ptr,uint data_size)\n\n{\n  int *temp_ptr;\n  int temp_var;\n  int *result_ptr;\n  uint temp_var2;\n  int temp_var3;\n  uint size_mask;\n  int *temp_ptr2;\n  uint aligned_size;\n  uint boundary_size;\n  uint temp_var4;\n  int temp_var5;\n  \n  if (data_ptr == (int *)0x0) {\n    result_ptr = (int *)FUN_08008af8(param_ptr,data_size);\n    return result_ptr;\n  }\n  FUN_080090a8();\n  size_mask = data_ptr[-1];\n  boundary_size = size_mask & 0xfffffffc;\n  result_ptr = data_ptr + -2;\n  if (data_size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = data_size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto LAB_08009b8e;\n  }\n  if (aligned_size < data_size) {\nLAB_08009b8e:\n    *param_ptr = 0xc;\n    return (int *)0x0;\n  }\n  temp_var5 = (int)result_ptr + boundary_size;\n  temp_var4 = boundary_size;\n  if ((int)boundary_size < (int)aligned_size) {\n    if (DAT_20000454 == temp_var5) {\n      temp_var5 = (*(uint *)(DAT_20000454 + 4) & 0xfffffffc) + boundary_size;\n      if ((int)(aligned_size + 0x10) <= temp_var5) {\n        DAT_20000454 = (int)result_ptr + aligned_size;\n        *(uint *)(DAT_20000454 + 4) = temp_var5 - aligned_size | 1;\n        data_ptr[-1] = aligned_size | data_ptr[-1] & 1U;\n        FUN_080090b4(param_ptr);\n        return data_ptr;\n      }\n      if (-1 < (int)(size_mask << 0x1f)) {\n        temp_ptr = (int *)((int)result_ptr - data_ptr[-2]);\n        size_mask = temp_ptr[1] & 0xfffffffc;\n        if ((int)(aligned_size + 0x10) <= (int)(temp_var5 + size_mask)) {\n          temp_var3 = temp_ptr[3];\n          result_ptr = temp_ptr + 2;\n          temp_var = *result_ptr;\n          boundary_size = boundary_size - 4;\n          *(int *)(temp_var + 0xc) = temp_var3;\n          *(int *)(temp_var3 + 8) = temp_var;\n          if (boundary_size < 0x25) {\n            temp_var = *data_ptr;\n            temp_ptr2 = result_ptr;\n            if (0x13 < boundary_size) {\n              temp_ptr[2] = temp_var;\n              temp_ptr[3] = data_ptr[1];\n              temp_var = data_ptr[2];\n              if (boundary_size < 0x1c) {\n                data_ptr = data_ptr + 2;\n                temp_ptr2 = temp_ptr + 4;\n              }\n              else {\n                temp_ptr[4] = temp_var;\n                temp_ptr[5] = data_ptr[3];\n                temp_var = data_ptr[4];\n                if (boundary_size == 0x24) {\n                  temp_ptr[6] = temp_var;\n                  temp_ptr[7] = data_ptr[5];\n                  temp_var = data_ptr[6];\n                  data_ptr = data_ptr + 6;\n                  temp_ptr2 = temp_ptr + 8;\n                }\n                else {\n                  data_ptr = data_ptr + 4;\n                  temp_ptr2 = temp_ptr + 6;\n                }\n              }\n            }\n            *temp_ptr2 = temp_var;\n            temp_ptr2[1] = data_ptr[1];\n            temp_ptr2[2] = data_ptr[2];\n          }\n          else {\n            FUN_08009a18(result_ptr,data_ptr);\n          }\n          DAT_20000454 = (int)temp_ptr + aligned_size;\n          *(uint *)(DAT_20000454 + 4) = (temp_var5 + size_mask) - aligned_size | 1;\n          temp_ptr[1] = aligned_size | temp_ptr[1] & 1U;\n          FUN_080090b4(param_ptr);\n          return result_ptr;\n        }\nLAB_08009bb0:\n        temp_var4 = boundary_size + size_mask;\n        if ((int)aligned_size <= (int)temp_var4) {\n          temp_var3 = temp_ptr[3];\n          temp_ptr2 = temp_ptr + 2;\n          temp_var = *temp_ptr2;\n          *(int *)(temp_var + 0xc) = temp_var3;\n          temp_var5 = (int)temp_ptr + temp_var4;\n          *(int *)(temp_var3 + 8) = temp_var;\n          result_ptr = temp_ptr;\n          if (boundary_size - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          FUN_08009a18(temp_ptr2,data_ptr);\n          data_ptr = temp_ptr2;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(temp_var5 + 4) & 0xfffffffe) + temp_var5 + 4) << 0x1f) {\n        temp_var2 = *(uint *)(temp_var5 + 4) & 0xfffffffc;\n        temp_var4 = boundary_size + temp_var2;\n        if ((int)temp_var4 < (int)aligned_size) {\n          if ((int)(size_mask << 0x1f) < 0) goto LAB_08009b36;\n          temp_ptr = (int *)((int)result_ptr - data_ptr[-2]);\n          size_mask = temp_ptr[1] & 0xfffffffc;\n          temp_var4 = temp_var2 + size_mask + boundary_size;\n          if ((int)temp_var4 < (int)aligned_size) goto LAB_08009bb0;\n          temp_var = *(int *)(temp_var5 + 8);\n          temp_var5 = *(int *)(temp_var5 + 0xc);\n          *(int *)(temp_var + 0xc) = temp_var5;\n          *(int *)(temp_var5 + 8) = temp_var;\n          temp_ptr2 = temp_ptr + 2;\n          temp_var = *temp_ptr2;\n          temp_var3 = temp_ptr[3];\n          *(int *)(temp_var + 0xc) = temp_var3;\n          temp_var5 = (int)temp_ptr + temp_var4;\n          *(int *)(temp_var3 + 8) = temp_var;\n          result_ptr = temp_ptr;\n          if (0x24 < boundary_size - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          boundary_size = boundary_size - 4;\n          temp_var = *data_ptr;\n          temp_ptr = temp_ptr2;\n          if (0x13 < boundary_size) {\n            result_ptr[2] = temp_var;\n            result_ptr[3] = data_ptr[1];\n            temp_var = data_ptr[2];\n            if (boundary_size < 0x1c) {\n              data_ptr = data_ptr + 2;\n              temp_ptr = result_ptr + 4;\n            }\n            else {\n              result_ptr[4] = temp_var;\n              result_ptr[5] = data_ptr[3];\n              temp_var = data_ptr[4];\n              if (boundary_size == 0x24) {\n                result_ptr[6] = temp_var;\n                result_ptr[7] = data_ptr[5];\n                temp_var = data_ptr[6];\n                data_ptr = data_ptr + 6;\n                temp_ptr = result_ptr + 8;\n              }\n              else {\n                data_ptr = data_ptr + 4;\n                temp_ptr = result_ptr + 6;\n              }\n            }\n          }\n          *temp_ptr = temp_var;\n          temp_ptr[1] = data_ptr[1];\n          temp_ptr[2] = data_ptr[2];\n          data_ptr = temp_ptr2;\n        }\n        else {\n          temp_var = *(int *)(temp_var5 + 8);\n          temp_var3 = *(int *)(temp_var5 + 0xc);\n          *(int *)(temp_var + 0xc) = temp_var3;\n          temp_var5 = (int)result_ptr + temp_var4;\n          *(int *)(temp_var3 + 8) = temp_var;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(size_mask << 0x1f)) {\n        temp_ptr = (int *)((int)result_ptr - data_ptr[-2]);\n        size_mask = temp_ptr[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    temp_ptr = (int *)FUN_08008af8(param_ptr,data_size);\n    if (temp_ptr != (int *)0x0) {\n      if ((int *)((data_ptr[-1] & 0xfffffffeU) + (int)result_ptr) == temp_ptr + -2) {\n        temp_var4 = boundary_size + (temp_ptr[-1] & 0xfffffffcU);\n        temp_var5 = (int)result_ptr + temp_var4;\n        goto LAB_08009c00;\n      }\n      boundary_size = boundary_size - 4;\n      if (boundary_size < 0x25) {\n        temp_var5 = *data_ptr;\n        result_ptr = data_ptr;\n        temp_ptr2 = temp_ptr;\n        if (0x13 < boundary_size) {\n          *temp_ptr = temp_var5;\n          temp_ptr[1] = data_ptr[1];\n          if (boundary_size < 0x1c) {\n            temp_var5 = data_ptr[2];\n            result_ptr = data_ptr + 2;\n            temp_ptr2 = temp_ptr + 2;\n          }\n          else {\n            temp_ptr[2] = data_ptr[2];\n            temp_ptr[3] = data_ptr[3];\n            if (boundary_size == 0x24) {\n              temp_ptr[4] = data_ptr[4];\n              temp_ptr[5] = data_ptr[5];\n              temp_var5 = data_ptr[6];\n              result_ptr = data_ptr + 6;\n              temp_ptr2 = temp_ptr + 6;\n            }\n            else {\n              temp_var5 = data_ptr[4];\n              result_ptr = data_ptr + 4;\n              temp_ptr2 = temp_ptr + 4;\n            }\n          }\n        }\n        *temp_ptr2 = temp_var5;\n        temp_ptr2[1] = result_ptr[1];\n        temp_ptr2[2] = result_ptr[2];\n      }\n      else {\n        FUN_08009a18(temp_ptr,data_ptr);\n      }\n      FUN_080088ec(param_ptr,data_ptr);\n    }\n    FUN_080090b4(param_ptr);\n    data_ptr = temp_ptr;\n  }\n  else {\nLAB_08009c00:\n    if (temp_var4 - aligned_size < 0x10) {\n      result_ptr[1] = result_ptr[1] & 1U | temp_var4;\n      *(uint *)(temp_var5 + 4) = *(uint *)(temp_var5 + 4) | 1;\n    }\n    else {\n      result_ptr[1] = result_ptr[1] & 1U | aligned_size;\n      *(uint *)((int)result_ptr + aligned_size + 4) = temp_var4 - aligned_size | 1;\n      *(uint *)(temp_var5 + 4) = *(uint *)(temp_var5 + 4) | 1;\n      FUN_080088ec(param_ptr,(int)result_ptr + aligned_size + 8);\n    }\n    FUN_080090b4(param_ptr);\n  }\n  return data_ptr;\n}\n\n",
            "renaming": {
                "FUN_08009adc": "allocate_memory_08009adc",
                "param_1": "param_ptr",
                "param_2": "data_ptr",
                "param_3": "data_size",
                "piVar1": "temp_ptr",
                "iVar2": "temp_var",
                "piVar3": "result_ptr",
                "uVar4": "temp_var2",
                "iVar5": "temp_var3",
                "uVar6": "size_mask",
                "piVar7": "temp_ptr2",
                "uVar8": "aligned_size",
                "uVar9": "boundary_size",
                "uVar10": "temp_var4",
                "iVar11": "temp_var5"
            },
            "calling": [
                "FUN_080097cc"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_080088ec",
                "FUN_08009a18",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009e68": {
            "entrypoint": "0x08009e68",
            "current_name": "FUNC_08009e68",
            "code": "\nvoid FUNC_08009e68(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009e68": "FUNC_08009e68"
            },
            "calling": [
                "FUN_08005d20",
                "FUN_08000110",
                "FUN_08000134"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009e74": {
            "entrypoint": "0x08009e74",
            "current_name": "FUNC_08009e74",
            "code": "\nvoid FUNC_08009e74(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009e74": "FUNC_08009e74"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 150023,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000158",
            "FUN_0800015c",
            "FUN_080003d4",
            "FUN_080003f4",
            "FUN_08000418",
            "FUN_080004c8",
            "FUN_080006a4",
            "FUN_0800071c",
            "FUN_0800088a",
            "FUN_080008fc",
            "FUN_08000978",
            "FUN_08000988",
            "FUN_08000998",
            "FUN_080009ac",
            "FUN_080009c0",
            "FUN_080009d4",
            "FUN_080009e8",
            "FUN_080009fc",
            "FUN_08000aa4",
            "FUN_08000aa8",
            "FUN_08000c08",
            "FUN_08000c10",
            "FUN_08000cb8",
            "FUN_08000e20",
            "FUN_08000f68",
            "FUN_08000fc8",
            "FUN_08000fd0",
            "FUN_08000ff4",
            "FUN_08001030",
            "FUN_08001044",
            "FUN_08001084",
            "FUN_08001170",
            "FUN_0800119c",
            "FUN_080011ec",
            "FUN_0800121c",
            "FUN_080014f0",
            "FUN_0800151c",
            "FUN_0800157c",
            "FUN_080015a0",
            "FUN_080015b4",
            "FUN_080015fc",
            "FUN_08001618",
            "FUN_0800166c",
            "FUN_080016d0",
            "FUN_08001714",
            "FUN_0800172a",
            "FUN_08001762",
            "FUN_0800177c",
            "FUN_080017b4",
            "FUN_080017c4",
            "FUN_08001a80",
            "FUN_08001ab0",
            "FUN_08001ccc",
            "FUN_08001f6c",
            "FUN_08002640",
            "FUN_080027f4",
            "FUN_08002ad8",
            "FUN_08002bb4",
            "FUN_08002c2e",
            "FUN_08002ca8",
            "FUN_08002d3c",
            "FUN_08002d98",
            "FUN_08003260",
            "FUN_08003440",
            "FUN_08003504",
            "FUN_08003518",
            "FUN_08003540",
            "FUN_08003568",
            "FUN_080035a4",
            "FUN_0800360c",
            "FUN_08003640",
            "FUN_080036a8",
            "FUN_080036f8",
            "FUN_08003908",
            "FUN_08003a94",
            "FUN_08003c94",
            "FUN_08003d60",
            "FUN_08003e38",
            "FUN_08003f18",
            "FUN_08003ff8",
            "FUN_080040a0",
            "FUN_08004104",
            "FUN_0800416a",
            "FUN_080041a8",
            "FUN_080041ea",
            "FUN_0800422e",
            "FUN_080042de",
            "FUN_0800438a",
            "FUN_08004436",
            "FUN_080046ec",
            "FUN_0800491c",
            "FUN_080049cc",
            "FUN_08004ae0",
            "FUN_08004bd8",
            "FUN_08004d78",
            "FUN_08004e6c",
            "FUN_08004e74",
            "FUN_08004ea4",
            "FUN_08004ee8",
            "FUN_08004f2c",
            "FUN_08004f3c",
            "FUN_08004f60",
            "FUN_08004f78",
            "FUN_08005224",
            "FUN_080052a0",
            "FUN_08005348",
            "FUN_080053b0",
            "FUN_08005500",
            "FUN_08005598",
            "FUN_080055f4",
            "FUN_08005674",
            "FUN_08005680",
            "FUN_08005704",
            "FUN_08005714",
            "FUN_08005728",
            "FUN_08005780",
            "thunk_FUN_08005838",
            "FUN_08005838",
            "FUN_080059f0",
            "FUN_08005d14",
            "FUN_08005d20",
            "FUN_08005d68",
            "FUN_08005dfc",
            "FUN_08005e40",
            "FUN_080078c0",
            "FUN_080079e8",
            "FUN_0800884c",
            "FUN_080088ec",
            "FUN_08008ad4",
            "FUN_08008af8",
            "FUN_0800901c",
            "FUN_080090a8",
            "FUN_080090b4",
            "FUN_080090c0",
            "FUN_0800910c",
            "FUN_08009120",
            "FUN_080091a4",
            "FUN_080091e4",
            "FUN_08009244",
            "FUN_08009258",
            "FUN_080093a4",
            "FUN_08009444",
            "FUN_080094f8",
            "FUN_08009530",
            "FUN_08009630",
            "FUN_080096e0",
            "FUN_08009744",
            "FUN_08009768",
            "FUN_080097cc",
            "FUN_080098c0",
            "FUN_08009980",
            "FUN_08009a18",
            "FUN_08009adc"
        ]
    ],
    "locked_functions": []
}