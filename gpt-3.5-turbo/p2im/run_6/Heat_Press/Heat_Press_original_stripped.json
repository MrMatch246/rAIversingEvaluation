{
    "functions": {
        "FUN_000816a6": {
            "renaming": {
                "FUN_000816a6": "do_nothing_000816a6"
            },
            "code": "\nvoid do_nothing_000816a6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a6",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_000816a6"
        },
        "FUN_000816a8": {
            "renaming": {
                "FUN_000816a8": "mainLoop_000816a8",
                "in_r0": "keyContext",
                "_watchdogDefaultSetup": "_setDefaultWatchdog",
                "init": "initialize",
                "initVariant": "initializeVariant",
                "delay": "wait",
                "setup": "configure",
                "DAT_000816d0": "isDataAvailable",
                "serialEventRun": "runSerialEvent"
            },
            "code": "int mainLoop_000816a8(void)\n{\n    EVP_PKEY_CTX *keyContext;\n    _watchdogDefaultSetup();\n    init(keyContext);\n    initVariant();\n    delay(1);\n    setup();\n    do {\n        do {\n            loop();\n        } while (DAT_000816d0 == 0);\n        serialEventRun();\n    } while (true);\n}",
            "called": [
                "initVariant",
                "delay",
                "setup",
                "_watchdogDefaultSetup",
                "serialEventRun",
                "init",
                "loop"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a8",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "mainLoop_000816a8"
        },
        "FUN_00081042": {
            "renaming": {
                "FUN_00081042": "set_bits_00081042",
                "param_1": "ptr_data",
                "param_2": "mask",
                "param_3": "shift_amount",
                "param_4": "shift_direction",
                "*(uint *)(param_1 + 4)": "data_value",
                "param_3 | *(uint *)(param_1 + 4) | (param_2 & 0xf) << 0x18 | (param_4 & 3) << 0x1c": "masked_shifted_value",
                "*(uint *)(param_1 + 4) = param_3 | *(uint *)(param_1 + 4) | (param_2 & 0xf) << 0x18 | (param_4 & 3) << 0x1c;": "data_value = data_value | masked_shifted_value;",
                "return;": ""
            },
            "code": "void set_bits_00081042(uint32_t* ptr_data, uint32_t mask, uint32_t shift_amount, uint32_t shift_direction)\n{\n  uint32_t* ptr_data_plus_4 = ptr_data + 1;\n  uint32_t data_value = *ptr_data_plus_4;\n  uint32_t masked_shifted_value = (mask & shift_amount) << shift_direction;\n  data_value = data_value | masked_shifted_value;\n  *ptr_data_plus_4 = data_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081042",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_bits_00081042"
        },
        "FUN_00082ac0": {
            "renaming": {
                "__sprint_r_part_0": "FUN_format_print_r_part_0",
                "param_1": "output_char",
                "param_2": "stream",
                "param_3": "buffer",
                "piVar1": "current_buffer_element",
                "iVar2": "output_result",
                "piVar3": "last_buffer_element",
                "uVar4": "current_element_index",
                "puVar5": "current_element_ptr",
                "uVar6": "current_element_size",
                "uVar7": "current_element_size_aligned",
                "FUN_00082ac0": "format_print_r_part_0_00082ac0"
            },
            "code": "int format_print_r_part_0_00082ac0(undefined4 output_char, int stream, int **buffer) {\n  int *current_buffer_element = *buffer;\n  int *last_buffer_element = buffer[2];\n  while (last_buffer_element != (int *)0x0) {\n    uint current_element_size = current_buffer_element[1];\n    uint current_element_size_aligned = current_element_size >> 2;\n    if (current_element_size_aligned != 0) {\n      undefined4 *current_element_ptr = (undefined4 *)(*current_buffer_element + -4);\n      uint current_element_index = 0;\n      do {\n        current_element_ptr = current_element_ptr + 1;\n        int output_result = _fputwc_r(output_char, *current_element_ptr, stream);\n        current_element_index = current_element_index + 1;\n        if (output_result == -1) goto LAB_00082b00;\n      } while (current_element_size_aligned != current_element_index);\n      last_buffer_element = buffer[2];\n    }\n    last_buffer_element = (int *)((int)last_buffer_element - (current_element_size & 0xfffffffc));\n    buffer[2] = last_buffer_element;\n    current_buffer_element = current_buffer_element + 2;\n  }\n  int output_result = 0;\nLAB_00082b00:\n  buffer[2] = (int *)0x0;\n  buffer[1] = (int *)0x0;\n  return output_result;\n}",
            "called": [
                "__sfvwrite_r",
                "_fputwc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082ac0",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "format_print_r_part_0_00082ac0"
        },
        "FUN_00080ce0": {
            "renaming": {
                "FUN_00080ce0": "checkSerialPortsForData_00080ce0",
                "iVar1": "availableBytes",
                "PTR_Serial_00080d14": "SerialPort1",
                "PTR_Serial1_00080d18": "SerialPort2",
                "PTR_Serial2_00080d1c": "SerialPort3",
                "PTR_Serial3_00080d20": "SerialPort4",
                "serialEvent": "processSerialDataOnPort1",
                "serialEvent1": "processSerialDataOnPort2",
                "serialEvent2": "processSerialDataOnPort3",
                "serialEvent3": "processSerialDataOnPort4"
            },
            "code": "void checkSerialPortsForData_00080ce0(void)\n{\n  int availableBytes;\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial_00080d14);\n  if (availableBytes > 0) {\n    serialEvent();\n  }\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial1_00080d18);\n  if (availableBytes > 0) {\n    serialEvent1();\n  }\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial2_00080d1c);\n  if (availableBytes > 0) {\n    serialEvent2();\n  }\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial3_00080d20);\n  if (availableBytes > 0) {\n    serialEvent3();\n  }\n  return;\n}",
            "called": [
                "serialEvent",
                "available",
                "serialEvent2",
                "serialEvent3",
                "serialEvent1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ce0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "checkSerialPortsForData_00080ce0"
        },
        "FUN_00081164": {
            "renaming": {
                "FUN_00081164": "loop_forever_00081164",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void loop_forever_00081164(void)\n{\n  while(true)\n  {\n    // Do nothing\n  }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081164",
            "calling": [
                "__halt"
            ],
            "imported": false,
            "current_name": "loop_forever_00081164"
        },
        "FUN_00081682": {
            "renaming": {
                "FUN_00081682::FUN_00081682": "String::String",
                "this": "this",
                "cstr": "str",
                "buffer": "buffer",
                "capacity": "capacity",
                "len": "length",
                "PTR_": "PTR_",
                "DAT_": "DAT_",
                "FUN_00081682": "String_00081682"
            },
            "code": "String_00081682 * __thiscall String_00081682::String_00081682(String_00081682 *this,char *str)\n{\n  size_t length;\n  this->buffer = nullptr;\n  this->capacity = 0;\n  this->length = 0;\n  if (str != nullptr) {\n    length = strlen(str);\n    copy(this,str,length);\n  }\n  return this;\n}",
            "called": [
                "strlen",
                "copy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081682",
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "imported": false,
            "current_name": "String_00081682"
        },
        "FUN_00081166": {
            "renaming": {
                "FUN_00081166": "wait_indefinitely_00081166"
            },
            "code": "void wait_indefinitely_00081166(void)\n{\n    while(true)\n    {\n        // do nothing, just wait\n    }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081166",
            "calling": [],
            "imported": false,
            "current_name": "wait_indefinitely_00081166"
        },
        "FUN_00081200": {
            "renaming": {
                "FUN_00081200": "do_nothing_00081200"
            },
            "code": "\nvoid do_nothing_00081200(int pid_UNUSED,int sig_UNUSED)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081200",
            "calling": [
                "_kill_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00081200"
        },
        "FUN_00081202": {
            "renaming": {
                "FUN_00081202": "getProcessID_00081202"
            },
            "code": "__pid_t getProcessID_00081202(void)\n{\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081202",
            "calling": [],
            "imported": false,
            "current_name": "getProcessID_00081202"
        },
        "FUN_000815fe": {
            "renaming": {
                "String::_String": "freeStringBuffer",
                "this": "str",
                "__in_chrg": "isBeingDeleted",
                "PTR_buffer": "buffer",
                "FUN_000815fe": "freeStringBuffer_000815fe"
            },
            "code": "void* freeStringBuffer_000815fe(String* str, int isBeingDeleted) {\n  free(str->PTR_buffer);\n  return str;\n}",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815fe",
            "calling": [],
            "imported": false,
            "current_name": "freeStringBuffer_000815fe"
        },
        "FUN_00081720": {
            "renaming": {
                "FUN_00081720": "setFlag_00081720",
                "param_1": "flagAddress",
                "*(undefined4 *)(param_1 + 4)": "*flagAddress"
            },
            "code": "void setFlag_00081720(int* flagAddress) {\n  *flagAddress = 0x8000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081720",
            "calling": [
                "_watchdogDefaultSetup"
            ],
            "imported": false,
            "current_name": "setFlag_00081720"
        },
        "FUN_00081d1c": {
            "renaming": {
                "FUN_00081d1c": "calculate_shifted_value_00081d1c",
                "param_1": "input_value",
                "uVar1": "shift_amount",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "uint calculate_shifted_value_00081d1c(uint input_value)\n{\n  uint shifted_value;\n  uint shift_amount = 0x9e - ((input_value << 1) >> 0x18);\n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    shifted_value = 0;\n  }\n  else if (-1 < (int)shift_amount) {\n    shifted_value = (input_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  else if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    shifted_value = 0;\n  }\n  else {\n    shifted_value = 0xffffffff;\n  }\n  return shifted_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d1c",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_00081d1c"
        },
        "FUN_00083988": {
            "renaming": {
                "FUN_00083988": "register_exit_proc_00083988",
                "__func": "func_ptr",
                "iVar1": "exit_proc_id"
            },
            "code": "int register_exit_proc_00083988(__func *func_ptr)\n{\n  int exit_proc_id;\n  exit_proc_id = __register_exitproc(0, func_ptr, 0, 0);\n  return exit_proc_id;\n}",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083988",
            "calling": [
                "register_fini"
            ],
            "imported": false,
            "current_name": "register_exit_proc_00083988"
        },
        "FUN_000847ac": {
            "renaming": {
                "FUN_000847ac": "calculate_difference_000847ac",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "multiplier_low",
                "param_4": "multiplier_high",
                "param_5": "difference",
                "uVar1": "quotient",
                "lVar2": "product",
                "*param_5": "difference[0]",
                "param_5[1]": "difference[1]",
                "(uint)lVar2": "product_low",
                "param_1 - uVar1": "dividend_mod_divisor",
                "(int)((ulonglong)lVar2 >> 0x20)": "product_high",
                "param_2 - (int)((ulonglong)lVar2 >> 0x20))": "divisor_mod_product",
                "(uint)(param_1 < uVar1)": "carry"
            },
            "code": "void calculate_difference_000847ac(uint32_t dividend, int32_t divisor, uint32_t multiplier_low, uint32_t multiplier_high, int32_t *difference) {\n  uint64_t product = (uint64_t)multiplier_high << 32 | multiplier_low;\n  uint32_t quotient = dividend / divisor;\n  uint64_t subtractor = (uint64_t)quotient * product;\n  difference[0] = dividend - quotient * divisor;\n  difference[1] = divisor - (int32_t)(subtractor >> 32) - (uint32_t)(difference[0] > (dividend - difference[0]));\n}",
            "called": [
                "__udivdi3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847ac",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "calculate_difference_000847ac"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "execute_function_if_initialized_00080118",
                "param_1": "param1",
                "param_2": "object",
                "param_3": "param2",
                "param_4": "param3",
                "DAT_00080134": "initialized",
                "PTR_object_7862_0008013c": "initialized_object",
                "PTR__etext_00080140": "end_of_text",
                "DAT_00080144": "function_pointer"
            },
            "code": "void execute_function_if_initialized_00080118(int param1, char* object, int param2, int param3) {\n  if (DAT_00080134 != 0) {\n    object = PTR_object_7862_0008013c;\n  }\n  if ((*(int *)PTR__etext_00080140 != 0) && (DAT_00080144 != (code *)0x0)) {\n    (*DAT_00080144)(PTR__etext_00080140, object, param2, DAT_00080144, param3);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "execute_function_if_initialized_00080118"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "do_nothing_00080aa8"
            },
            "code": "\nvoid do_nothing_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aa8"
        },
        "FUN_00081208": {
            "renaming": {
                "FUN_00081208": "getTickCount_00081208",
                "PTR__dwTickCount_0008171c": "tickCountPtr"
            },
            "code": "uint32_t getTickCount_00081208(void)\n{\n  uint32_t* PTR__dwTickCount_0008171c = (uint32_t*)PTR__dwTickCount_0008171c;\n  return *PTR__dwTickCount_0008171c;\n}",
            "called": [
                "GetTickCount"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081208",
            "calling": [
                "poll",
                "setup",
                "sendTxBuffer",
                "loop"
            ],
            "imported": false,
            "current_name": "getTickCount_00081208"
        },
        "FUN_00081728": {
            "renaming": {
                "FUN_00081728": "calculate_float_00081728",
                "param_1": "float_bits_a",
                "param_2": "float_bits_b",
                "param_3": "unused",
                "param_4": "unused",
                "iVar1": "unused_int_1",
                "iVar7": "unused_int_2",
                "uVar2": "sign_bit_a",
                "uVar3": "fraction_bits_b",
                "uVar4": "fraction_bits_a",
                "uVar5": "exponent_bits_a",
                "uVar6": "exponent_difference",
                "bVar8": "comparison_result"
            },
            "code": "\nuint calculate_float_00081728(uint float_bits_a,uint float_bits_b,undefined4 unused,uint unused)\n\n{\n  int unused_int_1;\n  uint sign_bit_a;\n  uint fraction_bits_b;\n  uint fraction_bits_a;\n  uint exponent_bits_a;\n  uint exponent_difference;\n  int unused_int_2;\n  bool comparison_result;\n  \n  sign_bit_a = float_bits_a ^ 0x80000000;\n  fraction_bits_a = float_bits_a << 1;\n  comparison_result = fraction_bits_a == 0;\n  if (!comparison_result) {\n    unused = float_bits_b << 1;\n    comparison_result = unused == 0;\n  }\n  if (!comparison_result) {\n    comparison_result = fraction_bits_a == unused;\n  }\n  unused_int_2 = (int)fraction_bits_a >> 0x18;\n  if (!comparison_result) {\n    comparison_result = unused_int_2 == -1;\n  }\n  if (!comparison_result) {\n    comparison_result = (int)unused >> 0x18 == -1;\n  }\n  if (comparison_result) {\n    unused_int_1 = (int)(float_bits_b << 1) >> 0x18;\n    if (unused_int_2 == -1 || unused_int_1 == -1) {\n      fraction_bits_a = float_bits_b;\n      if (unused_int_2 == -1) {\n        fraction_bits_a = sign_bit_a;\n      }\n      if (unused_int_2 != -1 || unused_int_1 != -1) {\n        float_bits_b = fraction_bits_a;\n      }\n      comparison_result = (fraction_bits_a & 0x7fffff) == 0;\n      if (comparison_result) {\n        comparison_result = (float_bits_b & 0x7fffff) == 0;\n      }\n      if (comparison_result) {\n        comparison_result = fraction_bits_a == float_bits_b;\n      }\n      if (!comparison_result) {\n        fraction_bits_a = fraction_bits_a | 0x400000;\n      }\n      return fraction_bits_a;\n    }\n    if (((float_bits_a ^ float_bits_b) & 0x7fffffff) != 0) {\n      if (fraction_bits_a == 0) {\n        sign_bit_a = float_bits_b;\n      }\n      return sign_bit_a;\n    }\n    if (sign_bit_a != float_bits_b) {\n      return 0;\n    }\n    if ((fraction_bits_a & 0xff000000) == 0) {\n      float_bits_a = float_bits_a << 1;\n      if ((sign_bit_a & 0x80000000) != 0) {\n        float_bits_a = float_bits_a | 0x80000000;\n      }\n      return float_bits_a;\n    }\n    if (fraction_bits_a < 0xfe000000) {\n      return sign_bit_a + 0x800000;\n    }\n    sign_bit_a = sign_bit_a & 0x80000000;\nLAB_0008186a:\n    return sign_bit_a | 0x7f800000;\n  }\n  fraction_bits_a = fraction_bits_a >> 0x18;\n  unused = unused >> 0x18;\n  exponent_difference = unused - fraction_bits_a;\n  comparison_result = exponent_difference != 0;\n  exponent_bits_a = fraction_bits_a;\n  if (comparison_result && fraction_bits_a <= unused) {\n    exponent_bits_a = fraction_bits_a + exponent_difference;\n  }\n  if (comparison_result && fraction_bits_a <= unused) {\n    float_bits_b = float_bits_b ^ sign_bit_a;\n  }\n  if (comparison_result && fraction_bits_a <= unused) {\n    sign_bit_a = sign_bit_a ^ float_bits_b;\n  }\n  if (comparison_result && fraction_bits_a <= unused) {\n    float_bits_b = float_bits_b ^ sign_bit_a;\n  }\n  if (unused < fraction_bits_a) {\n    exponent_difference = -exponent_difference;\n  }\n  if (0x19 < exponent_difference) {\n    return sign_bit_a;\n  }\n  fraction_bits_a = sign_bit_a & 0xffffff | 0x800000;\n  if ((sign_bit_a & 0x80000000) != 0) {\n    fraction_bits_a = -fraction_bits_a;\n  }\n  fraction_bits_b = float_bits_b & 0xffffff | 0x800000;\n  if ((float_bits_b & 0x80000000) != 0) {\n    fraction_bits_b = -fraction_bits_b;\n  }\n  if (exponent_bits_a == exponent_difference) {\n    fraction_bits_b = fraction_bits_b ^ 0x800000;\n    if (exponent_bits_a == 0) {\n      fraction_bits_a = fraction_bits_a ^ 0x800000;\n      exponent_bits_a = 1;\n    }\n    else {\n      exponent_difference = exponent_difference - 1;\n    }\n  }\n  fraction_bits_a = fraction_bits_a + ((int)fraction_bits_b >> (exponent_difference & 0xff));\n  fraction_bits_b = fraction_bits_b << (0x20 - exponent_difference & 0xff);\n  sign_bit_a = fraction_bits_a & 0x80000000;\n  if ((int)fraction_bits_a < 0) {\n    comparison_result = fraction_bits_b != 0;\n    fraction_bits_b = -fraction_bits_b;\n    fraction_bits_a = -fraction_bits_a - (uint)comparison_result;\n  }\n  if (fraction_bits_a < 0x800000) {\n    exponent_difference = fraction_bits_b & 0x80000000;\n    fraction_bits_b = fraction_bits_b << 1;\n    fraction_bits_a = fraction_bits_a * 2 + (uint)(exponent_difference != 0);\n    exponent_difference = exponent_bits_a - 2;\n    if ((fraction_bits_a & 0x800000) == 0) {\n      unused_int_2 = count_leading_zeroes(fraction_bits_a);\n      exponent_bits_a = unused_int_2 - 8;\n      fraction_bits_a = fraction_bits_a << (exponent_bits_a & 0xff);\n      if ((int)exponent_difference < (int)exponent_bits_a) {\n        fraction_bits_a = fraction_bits_a >> (-(exponent_difference - exponent_bits_a) & 0xff);\n      }\n      else {\n        fraction_bits_a = fraction_bits_a + (exponent_difference - exponent_bits_a) * 0x800000;\n      }\n      return fraction_bits_a | sign_bit_a;\n    }\n  }\n  else {\n    exponent_difference = exponent_bits_a - 1;\n    if (0xffffff < fraction_bits_a) {\n      exponent_difference = fraction_bits_a & 1;\n      fraction_bits_a = fraction_bits_a >> 1;\n      fraction_bits_b = (uint)(exponent_difference != 0) << 0x1f | fraction_bits_b >> 1;\n      exponent_difference = exponent_bits_a;\n      if (0xfd < exponent_bits_a) goto LAB_0008186a;\n    }\n  }\n  fraction_bits_a = fraction_bits_a + exponent_difference * 0x800000 + (uint)(0x7fffffff < fraction_bits_b);\n  if (fraction_bits_b == 0x80000000) {\n    fraction_bits_a = fraction_bits_a & 0xfffffffe;\n  }\n  return fraction_bits_a | sign_bit_a;\n}\n\n",
            "called": [
                "__addsf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081728",
            "calling": [],
            "imported": false,
            "current_name": "calculate_float_00081728"
        },
        "FUN_00081c94": {
            "renaming": {
                "FUN_00081c94": "is_not_equal_to_zero_or_null_00081c94",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_null"
            },
            "code": "bool is_not_equal_to_zero_or_null_00081c94(void)\n{\n  bool is_CY_zero = __aeabi_cfcmpeq();\n  bool is_ZR_null = !is_CY_zero;\n  return is_CY_zero || is_ZR_null;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c94",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "is_not_equal_to_zero_or_null_00081c94"
        },
        "FUN_000810f4": {
            "renaming": {
                "FUN_000810f4": "count_leading_zeroes_and_call_callbacks_000810f4",
                "uVar1": "num_bits",
                "uVar2": "bit_mask",
                "PTR_callbacksPioC_00081128": "callbacks_array",
                "DAT_00081124": "data_array"
            },
            "code": "void count_leading_zeroes_and_call_callbacks_000810f4() {\n  uint bit_mask;\n  uint num_bits;\n  uint callback_index;\n\n  bit_mask = *(uint *)(DAT_00081124 + 0x4c);\n  while (true) {\n    num_bits = count_leading_zeroes(bit_mask);\n    if (num_bits > 0x1f) break;\n    callback_index = 0x1f - num_bits;\n    if (*(code **)(PTR_callbacksPioC_00081128 + callback_index * 4) != (code *)0x0) {\n      (**(code **)(PTR_callbacksPioC_00081128 + callback_index * 4))();\n    }\n    bit_mask = bit_mask & ~(1 << callback_index);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810f4",
            "calling": [],
            "imported": false,
            "current_name": "count_leading_zeroes_and_call_callbacks_000810f4"
        },
        "FUN_00083b14": {
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "data_structure",
                "puVar5": "first_ptr",
                "puVar6": "second_ptr",
                "DAT_00083bf4": "DEFAULT_VALUE",
                "DAT_00083bf8": "DEFAULT_VALUE_2",
                "DAT_00083bfc": "DEFAULT_VALUE_3",
                "DAT_00083c00": "DEFAULT_VALUE_4",
                "DAT_00083c04": "DEFAULT_VALUE_5"
            },
            "code": "void initialize_data_structures_00083b14(int param_1)\n{\n  if (*(int *)(param_1 + 0x38) == 0) {\n    undefined4 *first_ptr = *(undefined4 **)(param_1 + 4);\n    undefined4 *second_ptr = *(undefined4 **)(param_1 + 8);\n    undefined4 *third_ptr = *(undefined4 **)(param_1 + 0xc);\n    *(undefined4 *)(param_1 + 0x3c) = DAT_00083bf4;\n    *(undefined4 *)(param_1 + 0x2e4) = 3;\n    *(int *)(param_1 + 0x2e8) = param_1 + 0x2ec;\n    *(undefined4 *)(param_1 + 0x2e0) = 0;\n    *(undefined2 *)(first_ptr + 3) = 4;\n    *first_ptr = 0;\n    first_ptr[1] = 0;\n    first_ptr[2] = 0;\n    first_ptr[0x19] = 0;\n    *(undefined2 *)((int)first_ptr + 0xe) = 0;\n    first_ptr[4] = 0;\n    first_ptr[5] = 0;\n    first_ptr[6] = 0;\n    memset(first_ptr + 0x17, 0, 8);\n    undefined4 default_value_2 = DAT_00083bf8;\n    undefined4 default_value_3 = DAT_00083bfc;\n    undefined4 default_value_4 = DAT_00083c00;\n    undefined4 default_value_5 = DAT_00083c04;\n    second_ptr[7] = second_ptr;\n    second_ptr[8] = default_value_5;\n    second_ptr[9] = default_value_4;\n    second_ptr[10] = default_value_3;\n    second_ptr[0xb] = default_value_2;\n    *(undefined2 *)((int)second_ptr + 0xe) = 1;\n    *(undefined2 *)(second_ptr + 3) = 9;\n    *second_ptr = 0;\n    second_ptr[1] = 0;\n    second_ptr[2] = 0;\n    second_ptr[0x19] = 0;\n    second_ptr[4] = 0;\n    second_ptr[5] = 0;\n    second_ptr[6] = 0;\n    memset(second_ptr + 0x17, 0, 8);\n    third_ptr[7] = third_ptr;\n    third_ptr[8] = default_value_5;\n    third_ptr[9] = default_value_4;\n    third_ptr[10] = default_value_3;\n    third_ptr[0xb] = default_value_2;\n    *(undefined2 *)(third_ptr + 3) = 0x12;\n    *(undefined2 *)((int)third_ptr + 0xe) = 2;\n    *third_ptr = 0;\n    third_ptr[1] = 0;\n    third_ptr[2] = 0;\n    third_ptr[0x19] = 0;\n    third_ptr[4] = 0;\n    third_ptr[5] = 0;\n    third_ptr[6] = 0;\n    memset(third_ptr + 0x17, 0, 8);\n    third_ptr[7] = third_ptr;\n    third_ptr[8] = default_value_5;\n    third_ptr[9] = default_value_4;\n    third_ptr[10] = default_value_3;\n    third_ptr[0xb] = default_value_2;\n    *(undefined4 *)(param_1 + 0x38) = 1;\n  }\n  return;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b14",
            "calling": [
                "_vfiprintf_r",
                "__swsetup_r",
                "_fclose_r",
                "_fflush_r",
                "__swbuf_r"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_00083b14"
        },
        "FUN_000842a4": {
            "renaming": {
                "FUN_000842a4": "allocate_memory_000842a4",
                "param_1": "file_descriptor",
                "param_2": "memory_block_info",
                "uVar1": "block_info",
                "iVar2": "file_status",
                "iVar3": "memory_status",
                "uVar4": "block_info_uint",
                "bVar5": "is_block_executable",
                "auStack_54": "memory_stack",
                "local_50": "local_block_info"
            },
            "code": "void allocate_memory_000842a4(int file_descriptor, int *memory_block_info)\n{\n  ushort block_info;\n  int file_status;\n  int memory_size;\n  uint block_info_uint;\n  bool is_block_executable;\n  undefined memory_stack[4];\n  uint local_block_info;\n\n  block_info = *(ushort *)(memory_block_info + 3);\n  block_info_uint = (uint)block_info;\n  if ((int)(block_info_uint << 0x1e) < 0) {\n    *memory_block_info = (int)memory_block_info + 0x43;\n    memory_block_info[4] = (int)memory_block_info + 0x43;\n    memory_block_info[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)memory_block_info + 0xe)) {\n    file_status = _fstat_r(file_descriptor,(int)*(short *)((int)memory_block_info + 0xe),memory_stack);\n    if (-1 < file_status) {\n      is_block_executable = (local_block_info & 0xf000) == 0x2000;\n      if (((local_block_info & 0xf000) == 0x8000) && (memory_block_info[10] == PTR_DAT_00084380)) {\n        memory_size = 0x400;\n        *(ushort *)(memory_block_info + 3) = *(ushort *)(memory_block_info + 3) | 0x400;\n        memory_block_info[0x13] = 0x400;\n      }\n      else {\n        memory_size = 0x400;\n        *(ushort *)(memory_block_info + 3) = *(ushort *)(memory_block_info + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    block_info = *(ushort *)(memory_block_info + 3);\n    block_info_uint = (uint)block_info;\n  }\n  *(ushort *)(memory_block_info + 3) = block_info | 0x800;\n  if ((block_info_uint & 0x80) == 0) {\n    memory_size = 0x400;\n  }\n  else {\n    memory_size = 0x40;\n  }\n  is_block_executable = false;\nLAB_00084300:\n  memory_status = _malloc_r(file_descriptor,memory_size);\n  block_info = *(ushort *)(memory_block_info + 3);\n  if (memory_status == 0) {\n    if (-1 < (int)((uint)block_info << 0x16)) {\n      *(ushort *)(memory_block_info + 3) = block_info | 2;\n      *memory_block_info = (int)memory_block_info + 0x43;\n      memory_block_info[4] = (int)memory_block_info + 0x43;\n      memory_block_info[5] = 1;\n    }\n  }\n  else {\n    *(undefined4 *)(file_descriptor + 0x3c) = PTR_DAT_0008437c;\n    *(ushort *)(memory_block_info + 3) = block_info | 0x80;\n    *memory_block_info = memory_status;\n    memory_block_info[4] = memory_status;\n    memory_block_info[5] = memory_size;\n    if ((is_block_executable) && (memory_size = _isatty_r(file_descriptor,(int)*(short *)((int)memory_block_info + 0xe)), memory_size != 0)) {\n      *(ushort *)(memory_block_info + 3) = *(ushort *)(memory_block_info + 3) | 1;\n    }\n  }\n  return;\n}",
            "called": [
                "_isatty_r",
                "_fstat_r",
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "__swsetup_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_000842a4"
        },
        "FUN_00081dcc": {
            "renaming": {
                "FUN_00081dcc": "process_data_00081dcc",
                "param_1": "data",
                "param_2": "out_param1",
                "param_3": "out_param2",
                "param_4": "out_param3",
                "uStack_c": "intermediate_param1",
                "uStack_8": "intermediate_param2",
                "uStack_4": "intermediate_param3"
            },
            "code": "void process_data_00081dcc(int data, int* out_param1, int* out_param2, int* out_param3) {\n  int intermediate_param1 = *out_param1;\n  int intermediate_param2 = *out_param2;\n  int intermediate_param3 = *out_param3;\n  _vfprocess_data_00081dcc_r(*(int *)PTR__impure_ptr_00081df0, *(int *)(*(int *)PTR__impure_ptr_00081df0 + 8), data, &intermediate_param1);\n  *out_param1 = intermediate_param1;\n  *out_param2 = intermediate_param2;\n  *out_param3 = intermediate_param3;\n}",
            "called": [
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081dcc",
            "calling": [
                "_exit"
            ],
            "imported": false,
            "current_name": "process_data_00081dcc"
        },
        "FUN_0008143c": {
            "renaming": {
                "FUN_0008143c": "wait_for_tx_buffer_empty_0008143c",
                "this": "self",
                "_tx_buffer": "tx_buffer",
                "_iHead": "tx_buffer_head",
                "_iTail": "tx_buffer_tail",
                "_pUart": "uart_pointer",
                "UART_SR": "uart_status_register"
            },
            "code": "void __thiscall UARTClass::wait_for_tx_buffer_empty_0008143c(UARTClass *this)\n{\n  while (this->tx_buffer_head != this->tx_buffer_tail);\n  while (-1 < (int)(this->uart_status_register << 0x16));\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008143c",
            "calling": [],
            "imported": false,
            "current_name": "wait_for_tx_buffer_empty_0008143c"
        },
        "FUN_000846a4": {
            "renaming": {
                "FUN_000846a4": "read_file_000846a4",
                "__stream": "file_pointer",
                "iVar1": "result",
                "_FUN_000846a4_r": "_read_file_helper"
            },
            "code": "int read_file_000846a4(FILE *file_pointer)\n{\n  int result = _read_file_000846a4_helper(*(undefined4 *)PTR__impure_ptr_000846b0, file_pointer);\n  return result;\n}",
            "called": [
                "_fclose_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846a4",
            "calling": [],
            "imported": false,
            "current_name": "read_file_000846a4"
        },
        "FUN_00080f24": {
            "renaming": {
                "FUN_00080f24": "copy_data_and_initialize_bss_00080f24",
                "puVar1": "start_data",
                "puVar2": "end_data",
                "iVar3": "i",
                "puVar4": "start_bss",
                "DAT_00080f94": "p",
                "PTR__ebss_00080f8c": "end_bss",
                "PTR_exception_table_00080f90": "exception_table"
            },
            "code": "void copy_data_and_initialize_bss_00080f24() {\n  undefined *start_data = PTR_banzai_00080f80;\n  undefined *end_data = PTR__etext_00080f7c;\n  undefined4 *start_bss = (undefined4 *)PTR_comDAT_00080f94leted_7857_00080f84;\n  if (end_data != start_data) {\n    for (int i = 0; start_bss < (undefined4 *)PTR_comDAT_00080f94leted_7857_00080f88; i += 4) {\n      *(undefined4 *)(start_data + i) = *(undefined4 *)(end_data + i);\n    }\n  }\n  for (undefined4 *DAT_00080f94 = (undefined4 *)DAT_00080f94; DAT_00080f94 < (undefined4 *)PTR__ebss_00080f8c; DAT_00080f94++) {\n    *DAT_00080f94 = 0;\n  }\n  undefined *PTR_exceDAT_00080f94tion_table_00080f90 = PTR_PTR_exceDAT_00080f94tion_table_00080f90_00080f90 + -0x20000000;\n  *(uint *)(DAT_00080f94 + 8) = (uint)PTR_PTR_exceDAT_00080f94tion_table_00080f90_00080f90 & 0x1fffff80;\n  if (PTR_exceDAT_00080f94tion_table_00080f90 < (undefined *)0x100000) {\n    *(uint *)(DAT_00080f94 + 8) |= 0x20000000;\n  }\n  (*DAT_00080f98)();\n  while (true) {}\n}",
            "called": [
                "banzai",
                "main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f24",
            "calling": [],
            "imported": false,
            "current_name": "copy_data_and_initialize_bss_00080f24"
        },
        "FUN_00080e04": {
            "renaming": {
                "FUN_00080e04": "check_flag_00080e04",
                "param_1": "flag_address",
                "param_2": "bitmask",
                "uVar1": "result"
            },
            "code": "uint check_flag_00080e04(int flag_address, uint bitmask)\\n\\\n{\\n\\\n  uint result = *(uint *)(flag_address + 8) & bitmask;\\n\\\n  if (result != 0) {\\n\\\n    if ((bitmask & *(uint *)(flag_address + 0x18)) == 0) {\\n\\\n      result = 0;\\n\\\n    }\\n\\\n    else {\\n\\\n      result = 1;\\n\\\n    }\\n\\\n  }\\n\\\n  return result;\\n\\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e04",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "check_flag_00080e04"
        },
        "FUN_000804a8": {
            "renaming": {
                "FUN_000804a8": "initializeSystem_000804a8",
                "puVar1": "telegram",
                "puVar2": "data",
                "puVar3": "data8024",
                "this": "modbusObject"
            },
            "code": "void initializeSystem_000804a8(void)\n{\n  //Set pin modes\n  pinMode(LED_BUILTIN, OUTPUT);\n  pinMode(6, INPUT);\n  pinMode(A0, INPUT);\n  pinMode(A1, INPUT);\n\n  //Initialize telegram\n  uint8_t *telegram = PTR_telegram_000805a8;\n  uint16_t *data = PTR_au16data_000805ac;\n  *(uint16_t *)(telegram + 0xe) = 0x13;\n  *(uint16_t *)(telegram + 0x10) = 10;\n  *(uint8_t **)(telegram + 0x14) = data + 0x26;\n  telegram[1] = 3;\n  telegram[0x19] = 3;\n  *(uint16_t *)(telegram + 0x1a) = 0x14;\n  *(uint16_t *)(telegram + 0x28) = 3;\n  *(uint16_t *)(telegram + 4) = 0x10;\n  *(uint8_t **)(telegram + 8) = data;\n  telegram[0xd] = 0x10;\n  *(uint16_t *)(telegram + 0x1c) = 0xc;\n  telegram[0x25] = 0x10;\n  *(uint16_t *)(telegram + 0x34) = 8;\n  uint8_t *data8024 = PTR_data8024_000805b0;\n  *(uint16_t *)(telegram + 0x26) = 0x1c;\n  *(uint8_t **)(telegram + 0x2c) = data + 0x38;\n  telegram[0x30] = 2;\n  telegram[0x31] = 2;\n  *(uint8_t **)(telegram + 0x38) = data8024;\n  telegram[0x3c] = 2;\n  *telegram = 1;\n  telegram[0xc] = 1;\n  telegram[0x18] = 1;\n  telegram[0x24] = 1;\n  *(uint16_t *)(telegram + 0x3e) = 1;\n  *(uint16_t *)(telegram + 0x40) = 1;\n  *(uint16_t *)(telegram + 2) = 0;\n  *(uint8_t **)(telegram + 0x20) = data + 0x28;\n  *(uint16_t *)(telegram + 0x32) = 0;\n  telegram[0x3d] = 5;\n  *(uint8_t **)(telegram + 0x44) = data8024 + 2;\n\n  //Initialize modbus\n  Modbus::begin((Modbus *)PTR_master_000805b4, 0x4b00);\n  *(uint16_t *)(PTR_master_000805b4 + 0x56) = 2000;\n\n  //Initialize timers\n  uint32_t currentMillis = millis();\n  *(uint32_t *)PTR_u32wait_000805b8 = currentMillis;\n  *(uint32_t *)PTR_tiempopid1_000805bc = currentMillis + 1000;\n  *(uint32_t *)PTR_dutyalto1_000805c0 = currentMillis + 1000;\n  *(uint32_t *)PTR_dutybajo1_000805c4 = currentMillis + 1000;\n  *(uint32_t *)PTR_reloj_000805c8 = currentMillis + 1000;\n\n  //Initialize state\n  *PTR_u8state_000805cc = 0;\n\n  //Start fork server\n  startForkserver(0);\n}\n",
            "called": [
                "pinMode",
                "startForkserver",
                "digitalWrite",
                "begin",
                "millis"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000804a8",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initializeSystem_000804a8"
        },
        "FUN_00084440": {
            "renaming": {
                "FUN_00084440": "read_and_update_data_00084440",
                "param_1": "file_descriptor",
                "param_2": "data_address",
                "iVar1": "bytes_read"
            },
            "code": "void read_and_update_data_00084440(int file_descriptor, int data_address)\n{\n  int bytes_read = _read_r(file_descriptor, (int)*(short *)(data_address + 0xe));\n  if (bytes_read >= 0) {\n    *(int *)(data_address + 0x50) += bytes_read;\n    return;\n  }\n  *(ushort *)(data_address + 0xc) &= 0xefff;\n  return;\n}",
            "called": [
                "_read_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084440",
            "calling": [],
            "imported": false,
            "current_name": "read_and_update_data_00084440"
        },
        "FUN_000802da": {
            "renaming": {
                "__thiscall Modbus::FUN_000802da": "Modbus::build_response",
                "this": "modbus",
                "telegram": "telegram",
                "uVar1": "function_code",
                "in_r1": "register_index",
                "bVar3": "byte_count",
                "in_r2": "register_values",
                "puVar4": "current_register",
                "uVar5": "response_size",
                "uVar6": "response_value",
                "uVar7": "register_count",
                "puVar8": "end_register",
                "local_1c": "unit_id",
                "local_1b": "exception_code",
                "local_1a": "response_value",
                "uVar2": "high_byte",
                "sendTxBuffer": "send_response",
                "u8id": "unit_id",
                "u8state": "state",
                "au8Buffer": "response_buffer",
                "au16regs": "register_values",
                "u8BufferSize": "response_size",
                "FUN_000802da": "build_response_000802da"
            },
            "code": "int8_t __thiscall Modbus::build_response_000802da(Modbus *modbus, modbus_t telegram) {\\n  uchar function_code;\\n  ushort register_index;\\n  byte byte_count;\\n  ushort *register_values;\\n  ushort *current_register;\\n  uint8_t response_size;\\n  ushort response_value;\\n  uchar high_byte;\\n  uchar low_byte;\\n  uint register_count;\\n  uchar unit_id;\\n  uchar exception_code;\\n\\n  register_count = (uint)register_index;\\n\\n  if (modbus->unit_id != \"\\0\") {\\n    return -2;\\n  }\\n  if (modbus->state != \"\\0\") {\\n    return -1;\\n  }\\n  if (0xf6 < (byte)(function_code - 1)) {\\n    return -3;\\n  }\\n\\n  modbus->response_buffer[0] = function_code;\\n  modbus->response_buffer[1] = high_byte;\\n  modbus->register_values = register_values;\\n  modbus->response_buffer[2] = low_byte;\\n  modbus->response_buffer[3] = high_byte;\\n  switch(byte_count) {\\n    case \"\\x01\":\\n    case \"\\x02\":\\n    case \"\\x03\":\\n    case \"\\x04\":\\n      modbus->response_buffer[4] = high_byte;\\n      break;\\n    case \"\\x05\":\\n      response_value = *register_values;\\n      if (response_value != 0) {\\n        response_value = 1;\\n      }\\n      modbus->response_buffer[4] = -(char)response_value;\\n      register_count = 0;\\n      break;\\n    case \"\\x06\":\\n      modbus->response_buffer[4] = low_byte;\\n      register_count = (uint)*register_values;\\n      break;\\n    default:\\n      goto switchD_0008031e_caseD_7;\\n    case \"\\x0f\":\\n      byte_count = (byte)(register_index >> 3) & 0xfe;\\n      if ((register_index & 0xf) != 0) {\\n        byte_count = byte_count + 1;\\n      }\\n      modbus->response_buffer[5] = function_code;\\n      modbus->response_buffer[4] = high_byte;\\n      modbus->response_buffer[6] = byte_count;\\n      exception_code = \"\\a\";\\n      goto LAB_0008034a;\\n    case \"\\x10\":\\n      modbus->response_buffer[4] = high_byte;\\n      modbus->response_buffer[5] = function_code;\\n      current_register = register_values - 1;\\n      modbus->response_buffer[6] = function_code * \"\\x02\";\\n      response_size = \"\\a\";\\n      while (current_register != register_values + register_count) {\\n        byte_count = modbus->response_size;\\n        modbus->response_buffer[byte_count] = (uchar)((uint)current_register[1] >> 8);\\n        register_count = byte_count + 1 & 0xff;\\n        modbus->response_size = (uint8_t)register_count;\\n        current_register = current_register + 1;\\n        modbus->response_buffer[register_count] = (uchar)*current_register;\\n        modbus->response_size = byte_count + 2;\\n      }\\n      goto switchD_0008031e_caseD_7;\\n  }\\n  modbus->response_buffer[5] = (uchar)register_index;\\n  exception_code = \"\\x06\";\\n\\nLAB_0008034a:\\n  modbus->response_size = exception_code;\\n\\nswitchD_0008031e_caseD_7:\\n  send_response(modbus);\\n  modbus->state = \"\\x01\";\\n  return \"\\0\";\\n}",
            "called": [
                "sendTxBuffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000802da",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "build_response_000802da"
        },
        "FUN_00080f9c": {
            "renaming": {
                "FUN_00080f9c": "find_index_00080f9c",
                "param_1": "result",
                "param_2": "size",
                "param_3": "factor",
                "param_4": "divisor",
                "local_58": "local_max_values",
                "uVar1": "quotient",
                "uVar2": "i"
            },
            "code": "uint32_t find_index_00080f9c(uint32_t *result, uint32_t size, int factor, int divisor)\n{\n  uint32_t local_max_values[16];\n  \n  local_max_values[0] = *(uint32_t *)PTR_DAT_0008102c;\n  local_max_values[1] = *(uint32_t *)(PTR_DAT_0008102c + 4);\n  local_max_values[2] = *(uint32_t *)(PTR_DAT_0008102c + 8);\n  local_max_values[3] = *(uint32_t *)(PTR_DAT_0008102c + 0xc);\n  local_max_values[4] = *(uint32_t *)(PTR_DAT_0008102c + 0x10);\n  local_max_values[5] = *(uint32_t *)(PTR_DAT_0008102c + 0x14);\n  local_max_values[6] = *(uint32_t *)(PTR_DAT_0008102c + 0x18);\n  local_max_values[7] = *(uint32_t *)(PTR_DAT_0008102c + 0x1c);\n  local_max_values[8] = *(uint32_t *)(PTR_DAT_0008102c + 0x20);\n  local_max_values[9] = *(uint32_t *)(PTR_DAT_0008102c + 0x24);\n  local_max_values[10] = *(uint32_t *)(PTR_DAT_0008102c + 0x28);\n  local_max_values[11] = *(uint32_t *)(PTR_DAT_0008102c + 0x2c);\n  local_max_values[12] = *(uint32_t *)(PTR_DAT_0008102c + 0x30);\n  local_max_values[13] = *(uint32_t *)(PTR_DAT_0008102c + 0x34);\n  local_max_values[14] = *(uint32_t *)(PTR_DAT_0008102c + 0x38);\n  local_max_values[15] = *(uint32_t *)(PTR_DAT_0008102c + 0x3c);\n  \n  *result = 1;\n  result[1] = 0;\n  result[0x48] = 0x202;\n  result[0x41] = 0;\n  result[0x45] = 0;\n  \n  uint32_t quotient = size / (uint32_t)(factor * 2);\n  if (size == factor * 2 * quotient) {\n    quotient -= 1;\n  }\n  \n  uint32_t i = 0;\n  do {\n    if ((uint32_t)(divisor *\n              (int)(((uint64_t)size / (uint64_t)((quotient + 1) * 2)) / (uint64_t)DAT_00081030))\n        <= local_max_values[i]) {\n      result[1] = (i & 0xf) << 0x10 | (quotient & 0xff) << 8 | result[1];\n      return 0;\n    }\n    i += 1;\n  } while (i != 0x10);\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f9c",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "find_index_00080f9c"
        },
        "FUN_00081210": {
            "renaming": {
                "FUN_00081210": "configurePin_00081210",
                "ulPin": "pinNumber",
                "ulMode": "mode",
                "puVar1": "pinDescription",
                "puVar2": "pinStatus",
                "uVar3": "peripheralMode",
                "bVar4": "currentPinStatus",
                "bVar5": "currentPinStatusAndMode",
                "iVar6": "pinConfig",
                "iVar7": "pinConfigIndex"
            },
            "code": "void configurePin_00081210(uint32_t pinNumber, uint32_t mode)\n{\n    uint8_t* pinStatus = PTR_g_pinStatus_00081310;\n    uint8_t* pinDescription = PTR_g_APinDescription_0008130c;\n    uint8_t currentPinMode = pinDescription[pinNumber * 0x1c + 0xc];\n    if (currentPinMode != 0)\n    {\n        uint8_t currentPinStatus = pinStatus[pinNumber] & 0xf;\n        if (currentPinStatus == 4)\n        {\n            adc_disable_channel(DAT_00081314, pinDescription[pinNumber * 0x1c + 0x19]);\n        }\n        else if (currentPinStatus < 3 && currentPinStatus != 0)\n        {\n            if ((currentPinStatus == 2 && mode == 0) || (currentPinStatus == 1 && mode == 2) || (currentPinStatus == 3 && mode == 1))\n            {\n                return;\n            }\n        }\n        if (mode == 1)\n        {\n            int pinConfig = *(int*)(pinDescription + pinNumber * 0x1c);\n            uint8_t peripheralMode = (pinStatus[pinNumber] >> 4) == 0 ? 4 : 5;\n            PIO_Configure(pinConfig, peripheralMode, *(uint32_t*)(pinDescription + pinNumber * 0x1c + 4), *(uint32_t*)(pinDescription + pinNumber * 0x1c + 0x10));\n            pinStatus[pinNumber] = (pinStatus[pinNumber] & 0xf0) | 3;\n            if (*(int*)(pinConfig + 0x18) == -1)\n            {\n                pmc_disable_periph_clk(*(uint32_t*)(pinDescription + pinNumber * 0x1c + 8));\n                return;\n            }\n        }\n        else if (mode == 0 || mode == 2)\n        {\n            int pinConfig = *(int*)(pinDescription + pinNumber * 0x1c);\n            pmc_enable_periph_clk(*(uint32_t*)(pinDescription + pinNumber * 0x1c + 8));\n            PIO_Configure(pinConfig, 3, *(uint32_t*)(pinDescription + pinNumber * 0x1c + 4), mode == 0 ? 0 : 1);\n            pinStatus[pinNumber] = (pinStatus[pinNumber] & 0xf0) | (mode == 0 ? 2 : 1);\n        }\n    }\n}",
            "called": [
                "PIO_Configure",
                "pmc_enable_periph_clk",
                "pmc_disable_periph_clk",
                "adc_disable_channel"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081210",
            "calling": [
                "setup",
                "digitalWrite",
                "begin"
            ],
            "imported": false,
            "current_name": "configurePin_00081210"
        },
        "FUN_00083994": {
            "renaming": {
                "FUN_00083994": "process_data_00083994",
                "param_1": "buffer",
                "param_2": "metadata",
                "piVar1": "next_buffer",
                "iVar2": "metadata_offset",
                "uVar3": "metadata_flags",
                "uVar4": "metadata_length",
                "iVar5": "remaining_data_length",
                "pcVar6": "process_function",
                "iVar7": "bytes_processed",
                "buffer_length": "buffer_length",
                "result": "result"
            },
            "code": "undefined4 process_data_00083994(int *buffer, int *metadata)\n{\n  int *next_buffer;\n  int remaining_data_length;\n  ushort metadata_flags;\n  uint metadata_length;\n  int metadata_offset;\n  code *process_function;\n  int bytes_processed;\n  int buffer_length;\n  int result;\n  \n  metadata_flags = *(ushort *)(metadata + 3);\n  if ((int)((uint)metadata_flags << 0x1c) < 0) {\n    metadata_offset = metadata[4];\n    if (metadata_offset == 0) {\n      return 0;\n    }\n    buffer_length = *metadata;\n    if ((metadata_flags & 3) == 0) {\n      remaining_data_length = metadata[5];\n    }\n    else {\n      remaining_data_length = 0;\n    }\n    *metadata = metadata_offset;\n    buffer_length = buffer_length - metadata_offset;\n    metadata[2] = remaining_data_length;\n    do {\n      if (buffer_length < 1) {\n        return 0;\n      }\n      bytes_processed = (*(code *)metadata[9])(buffer, metadata[7], metadata_offset, buffer_length);\n      buffer_length = buffer_length - bytes_processed;\n      metadata_offset = metadata_offset + bytes_processed;\n    } while (0 < bytes_processed);\n    *(ushort *)(metadata + 3) = *(ushort *)(metadata + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(metadata + 3) = metadata_flags | 0x800;\n  if ((metadata[1] < 1) && (metadata[0xf] < 1)) {\n    return 0;\n  }\n  process_function = (code *)metadata[10];\n  if (process_function == (code *)0x0) {\n    return 0;\n  }\n  metadata_length = (uint)(metadata_flags | 0x800);\n  metadata_offset = *buffer;\n  *buffer = 0;\n  if ((metadata_flags & 0x1000) == 0) {\n    bytes_processed = (*process_function)(buffer, metadata[7], metadata_length & 0x1000, 1);\n    if ((bytes_processed == -1) && (buffer_length = *buffer, buffer_length != 0)) {\n      if ((buffer_length == 0x1d) || (buffer_length == 0x16)) {\n        *buffer = metadata_offset;\n        return 0;\n      }\n      *(ushort *)(metadata + 3) = *(ushort *)(metadata + 3) | 0x40;\n      return 0xffffffff;\n    }\n    metadata_flags = (uint)*(ushort *)(metadata + 3);\n    process_function = (code *)metadata[10];\n  }\n  else {\n    bytes_processed = metadata[0x14];\n  }\n  if (((int)(metadata_flags << 0x1d) < 0) && (bytes_processed = bytes_processed - metadata[1], metadata[0xc] != 0)) {\n    bytes_processed = bytes_processed - metadata[0xf];\n  }\n  bytes_processed = (*process_function)(buffer, metadata[7], bytes_processed, 0);\n  if (bytes_processed == -1) {\n    buffer_length = *buffer;\n    if (buffer_length != 0) {\n      if ((buffer_length != 0x1d) && (buffer_length != 0x16)) {\n        *(ushort *)(metadata + 3) = *(ushort *)(metadata + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(metadata + 3) = *(ushort *)(metadata + 3) & 0xf7ff;\n      *metadata = metadata[4];\n      metadata[1] = 0;\n      goto LAB_00083a00;\n    }\n    metadata_flags = *(ushort *)(metadata + 3) & 0xf7ff;\n    metadata[1] = 0;\n    *(ushort *)(metadata + 3) = metadata_flags;\n    *metadata = metadata[4];\n  }\n  else {\n    metadata_flags = *(ushort *)(metadata + 3) & 0xf7ff;\n    *metadata = metadata[4];\n    *(ushort *)(metadata + 3) = metadata_flags;\n    metadata[1] = 0;\n  }\n  if ((int)((uint)metadata_flags << 0x13) < 0) {\n    metadata[0x14] = bytes_processed;\n  }\nLAB_00083a00:\n  next_buffer = (int *)metadata[0xc];\n  *buffer = metadata_offset;\n  if (next_buffer == (int *)0x0) {\n    return 0;\n  }\n  if (next_buffer != metadata + 0x10) {\n    _free_r(buffer);\n  }\n  metadata[0xc] = 0;\n  return 0;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083994",
            "calling": [
                "_fflush_r"
            ],
            "imported": false,
            "current_name": "process_data_00083994"
        },
        "FUN_00081454": {
            "renaming": {
                "FUN_00081454": "transmitData_00081454",
                "this": "self",
                "uc_data": "data",
                "_tx_buffer": "txBuffer",
                "_pUart": "uart",
                "UART_SR": "uartStatus",
                "_iTail": "tail",
                "_iHead": "head",
                "DAT_000814a4": "BUFFER_SIZE_MASK",
                "_aucBuffer": "buffer"
            },
            "code": "size_t __thiscall UARTClass::transmitData_00081454(UARTClass *this,uint8_t data)\n{\n  RingBuffer *ringBuffer;\n  uint uartStatus;\n  \n  ringBuffer = this->txBuffer;\n  uartStatus = this->uart->UART_SR << 0x1e;\n  \n  if (((int)uartStatus < 0) && (ringBuffer->tail == ringBuffer->head)) {\n    this->uart->UART_THR = (uint)data;\n  }\n  else {\n    uint headNext = DAT_000814a4 & ringBuffer->head + 1U;\n    if ((int)headNext < 0) {\n      headNext = (headNext - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (ringBuffer->tail == headNext);\n    ringBuffer->buffer[ringBuffer->head] = data;\n    this->txBuffer->head = headNext;\n    this->uart->UART_IER = 2;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081454",
            "calling": [],
            "imported": false,
            "current_name": "transmitData_00081454"
        },
        "FUN_00081730": {
            "renaming": {
                "FUN_00081730": "calculate_float_00081730",
                "param_1": "float_bits_1",
                "param_2": "float_bits_2",
                "param_3": "float_bits_3",
                "param_4": "float_bits_4",
                "iVar1": "exponent",
                "uVar2": "significand_2",
                "uVar3": "significand_1",
                "uVar4": "float_bits_5",
                "uVar5": "shift_amount",
                "uVar6": "difference",
                "iVar7": "leading_zeros",
                "bVar8": "condition"
            },
            "code": "\nuint calculate_float_00081730(uint float_bits_1,uint float_bits_2,undefined4 float_bits_3,uint float_bits_4)\n\n{\n  int exponent;\n  uint significand_2;\n  uint significand_1;\n  uint float_bits_5;\n  uint shift_amount;\n  uint difference;\n  int leading_zeros;\n  bool condition;\n  \n  significand_2 = float_bits_2 ^ 0x80000000;\n  float_bits_5 = float_bits_1 << 1;\n  condition = float_bits_5 == 0;\n  if (!condition) {\n    float_bits_4 = float_bits_2 << 1;\n    condition = float_bits_4 == 0;\n  }\n  if (!condition) {\n    condition = float_bits_5 == float_bits_4;\n  }\n  leading_zeros = (int)float_bits_5 >> 0x18;\n  if (!condition) {\n    condition = leading_zeros == -1;\n  }\n  if (!condition) {\n    condition = (int)float_bits_4 >> 0x18 == -1;\n  }\n  if (condition) {\n    exponent = (int)(float_bits_2 << 1) >> 0x18;\n    if (leading_zeros == -1 || exponent == -1) {\n      float_bits_5 = significand_2;\n      if (leading_zeros == -1) {\n        float_bits_5 = float_bits_1;\n      }\n      if (leading_zeros != -1 || exponent != -1) {\n        significand_2 = float_bits_5;\n      }\n      condition = (float_bits_5 & 0x7fffff) == 0;\n      if (condition) {\n        condition = (significand_2 & 0x7fffff) == 0;\n      }\n      if (condition) {\n        condition = float_bits_5 == significand_2;\n      }\n      if (!condition) {\n        float_bits_5 = float_bits_5 | 0x400000;\n      }\n      return float_bits_5;\n    }\n    if (((float_bits_1 ^ significand_2) & 0x7fffffff) != 0) {\n      if (float_bits_5 == 0) {\n        float_bits_1 = significand_2;\n      }\n      return float_bits_1;\n    }\n    if (float_bits_1 != significand_2) {\n      return 0;\n    }\n    if ((float_bits_5 & 0xff000000) == 0) {\n      significand_2 = float_bits_1 << 1;\n      if ((float_bits_1 & 0x80000000) != 0) {\n        significand_2 = significand_2 | 0x80000000;\n      }\n      return significand_2;\n    }\n    if (float_bits_5 < 0xfe000000) {\n      return float_bits_1 + 0x800000;\n    }\n    float_bits_1 = float_bits_1 & 0x80000000;\nLAB_0008186a:\n    return float_bits_1 | 0x7f800000;\n  }\n  float_bits_5 = float_bits_5 >> 0x18;\n  float_bits_4 = float_bits_4 >> 0x18;\n  difference = float_bits_4 - float_bits_5;\n  condition = difference != 0;\n  shift_amount = float_bits_5;\n  if (condition && float_bits_5 <= float_bits_4) {\n    shift_amount = float_bits_5 + difference;\n  }\n  if (condition && float_bits_5 <= float_bits_4) {\n    significand_2 = significand_2 ^ float_bits_1;\n  }\n  if (condition && float_bits_5 <= float_bits_4) {\n    float_bits_1 = float_bits_1 ^ significand_2;\n  }\n  if (condition && float_bits_5 <= float_bits_4) {\n    significand_2 = significand_2 ^ float_bits_1;\n  }\n  if (float_bits_4 < float_bits_5) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return float_bits_1;\n  }\n  float_bits_5 = float_bits_1 & 0xffffff | 0x800000;\n  if ((float_bits_1 & 0x80000000) != 0) {\n    float_bits_5 = -float_bits_5;\n  }\n  significand_1 = significand_2 & 0xffffff | 0x800000;\n  if ((significand_2 & 0x80000000) != 0) {\n    significand_1 = -significand_1;\n  }\n  if (shift_amount == difference) {\n    significand_1 = significand_1 ^ 0x800000;\n    if (shift_amount == 0) {\n      float_bits_5 = float_bits_5 ^ 0x800000;\n      shift_amount = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  float_bits_5 = float_bits_5 + ((int)significand_1 >> (difference & 0xff));\n  significand_1 = significand_1 << (0x20 - difference & 0xff);\n  float_bits_1 = float_bits_5 & 0x80000000;\n  if ((int)float_bits_5 < 0) {\n    condition = significand_1 != 0;\n    significand_1 = -significand_1;\n    float_bits_5 = -float_bits_5 - (uint)condition;\n  }\n  if (float_bits_5 < 0x800000) {\n    significand_2 = significand_1 & 0x80000000;\n    significand_1 = significand_1 << 1;\n    float_bits_5 = float_bits_5 * 2 + (uint)(significand_2 != 0);\n    significand_2 = shift_amount - 2;\n    if ((float_bits_5 & 0x800000) == 0) {\n      leading_zeros = count_leading_zeroes(float_bits_5);\n      difference = leading_zeros - 8;\n      float_bits_5 = float_bits_5 << (difference & 0xff);\n      if ((int)significand_2 < (int)difference) {\n        float_bits_5 = float_bits_5 >> (-(significand_2 - difference) & 0xff);\n      }\n      else {\n        float_bits_5 = float_bits_5 + (significand_2 - difference) * 0x800000;\n      }\n      return float_bits_5 | float_bits_1;\n    }\n  }\n  else {\n    significand_2 = shift_amount - 1;\n    if (0xffffff < float_bits_5) {\n      significand_2 = float_bits_5 & 1;\n      float_bits_5 = float_bits_5 >> 1;\n      significand_1 = (uint)(significand_2 != 0) << 0x1f | significand_1 >> 1;\n      significand_2 = shift_amount;\n      if (0xfd < shift_amount) goto LAB_0008186a;\n    }\n  }\n  float_bits_5 = float_bits_5 + significand_2 * 0x800000 + (uint)(0x7fffffff < significand_1);\n  if (significand_1 == 0x80000000) {\n    float_bits_5 = float_bits_5 & 0xfffffffe;\n  }\n  return float_bits_5 | float_bits_1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081730",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_float_00081730"
        },
        "FUN_00084600": {
            "renaming": {
                "FUN_00084600": "close_file_and_set_error_00084600",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "error_ptr",
                "iVar2": "close_result"
            },
            "code": "void close_file_and_set_error_00084600(int *error_code, int file_descriptor) {\n  undefined *error_ptr;\n  int close_result;\n  error_ptr = PTR_errno_00084620;\n  *(undefined4 *)PTR_errno_00084620 = 0;\n  close_result = _close(file_descriptor);\n  if ((close_result == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084600",
            "calling": [
                "__sclose"
            ],
            "imported": false,
            "current_name": "close_file_and_set_error_00084600"
        },
        "FUN_00081578": {
            "renaming": {
                "UARTClass::FUN_00081578": "initialize_UART",
                "this": "uart_instance",
                "dwBaudRate": "baud_rate",
                "init": "init",
                "FUN_00081578": "initialize_UART_00081578"
            },
            "code": "void __thiscall initialize_UART_00081578(UARTClass *uart_instance, uint32_t baud_rate){\n  init(uart_instance, baud_rate, 0x800);\n  return;\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081578",
            "calling": [],
            "imported": false,
            "current_name": "initialize_UART_00081578"
        },
        "FUN_00080ab8": {
            "renaming": {
                "FUN_00080ab8": "do_nothing_00080ab8"
            },
            "code": "\nvoid do_nothing_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ab8",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080ab8"
        },
        "FUN_00081734": {
            "renaming": {
                "FUN_00081734": "improved_function_00081734",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result1",
                "uVar2": "result2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "temp4",
                "bVar7": "condition"
            },
            "code": "\nuint improved_function_00081734(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int result1;\n  uint result2;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int temp4;\n  bool condition;\n  \n  temp1 = input1 << 1;\n  condition = temp1 == 0;\n  if (!condition) {\n    input4 = input2 << 1;\n    condition = input4 == 0;\n  }\n  if (!condition) {\n    condition = temp1 == input4;\n  }\n  temp4 = (int)temp1 >> 0x18;\n  if (!condition) {\n    condition = temp4 == -1;\n  }\n  if (!condition) {\n    condition = (int)input4 >> 0x18 == -1;\n  }\n  if (condition) {\n    result1 = (int)(input2 << 1) >> 0x18;\n    if (temp4 == -1 || result1 == -1) {\n      temp1 = input2;\n      if (temp4 == -1) {\n        temp1 = input1;\n      }\n      if (temp4 != -1 || result1 != -1) {\n        input2 = temp1;\n      }\n      condition = (temp1 & 0x7fffff) == 0;\n      if (condition) {\n        condition = (input2 & 0x7fffff) == 0;\n      }\n      if (condition) {\n        condition = temp1 == input2;\n      }\n      if (!condition) {\n        temp1 = temp1 | 0x400000;\n      }\n      return temp1;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (temp1 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((temp1 & 0xff000000) == 0) {\n      temp1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return temp1;\n    }\n    if (temp1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  temp1 = temp1 >> 0x18;\n  input4 = input4 >> 0x18;\n  temp3 = input4 - temp1;\n  condition = temp3 != 0;\n  temp2 = temp1;\n  if (condition && temp1 <= input4) {\n    temp2 = temp1 + temp3;\n  }\n  if (condition && temp1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (condition && temp1 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (condition && temp1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < temp1) {\n    temp3 = -temp3;\n  }\n  if (0x19 < temp3) {\n    return input1;\n  }\n  temp1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  result2 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  if (temp2 == temp3) {\n    result2 = result2 ^ 0x800000;\n    if (temp2 == 0) {\n      temp1 = temp1 ^ 0x800000;\n      temp2 = 1;\n    }\n    else {\n      temp3 = temp3 - 1;\n    }\n  }\n  temp1 = temp1 + ((int)result2 >> (temp3 & 0xff));\n  result2 = result2 << (0x20 - temp3 & 0xff);\n  input1 = temp1 & 0x80000000;\n  if ((int)temp1 < 0) {\n    condition = result2 != 0;\n    result2 = -result2;\n    temp1 = -temp1 - (uint)condition;\n  }\n  if (temp1 < 0x800000) {\n    temp3 = result2 & 0x80000000;\n    result2 = result2 << 1;\n    temp1 = temp1 * 2 + (uint)(temp3 != 0);\n    temp3 = temp2 - 2;\n    if ((temp1 & 0x800000) == 0) {\n      temp4 = count_leading_zeroes(temp1);\n      temp2 = temp4 - 8;\n      temp1 = temp1 << (temp2 & 0xff);\n      if ((int)temp3 < (int)temp2) {\n        temp1 = temp1 >> (-(temp3 - temp2) & 0xff);\n      }\n      else {\n        temp1 = temp1 + (temp3 - temp2) * 0x800000;\n      }\n      return temp1 | input1;\n    }\n  }\n  else {\n    temp3 = temp2 - 1;\n    if (0xffffff < temp1) {\n      temp3 = temp1 & 1;\n      temp1 = temp1 >> 1;\n      result2 = (uint)(temp3 != 0) << 0x1f | result2 >> 1;\n      temp3 = temp2;\n      if (0xfd < temp2) goto LAB_0008186a;\n    }\n  }\n  temp1 = temp1 + temp3 * 0x800000 + (uint)(0x7fffffff < result2);\n  if (result2 == 0x80000000) {\n    temp1 = temp1 & 0xfffffffe;\n  }\n  return temp1 | input1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081734",
            "calling": [
                "__aeabi_frsub",
                "loop"
            ],
            "imported": false,
            "current_name": "improved_function_00081734"
        },
        "FUN_00084728": {
            "renaming": {
                "FUN_00084728": "read_data_00084728",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "error_ptr",
                "iVar2": "read_result"
            },
            "code": "void read_data_00084728(int *error_code, int file_descriptor, char *buffer, int buffer_size)\n{\n  undefined *error_ptr;\n  int read_result;\n  \n  error_ptr = PTR_errno_0008474c;\n  *(undefined4 *)PTR_errno_0008474c = 0;\n  read_result = _read(file_descriptor, buffer, buffer_size);\n  if ((read_result == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084728",
            "calling": [
                "__sread"
            ],
            "imported": false,
            "current_name": "read_data_00084728"
        },
        "FUN_0008116a": {
            "renaming": {
                "FUN_0008116a": "wait_forever_0008116a"
            },
            "code": "void wait_forever_0008116a(void)\n{\n  while(1);\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008116a",
            "calling": [],
            "imported": false,
            "current_name": "wait_forever_0008116a"
        },
        "FUN_000813e0": {
            "renaming": {
                "__thiscall UARTClass::FUN_000813e0": "is_uart_operational",
                "this": "uart_instance",
                "FUN_000813e0": "is_uart_operational_000813e0"
            },
            "code": "bool is_uart_operational_000813e0(UARTClass *uart_instance) {\n  return true;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e0",
            "calling": [],
            "imported": false,
            "current_name": "is_uart_operational_000813e0"
        },
        "FUN_00083c40": {
            "renaming": {
                "FUN_00083c40": "convert_and_write_to_stream_00083c40",
                "param_1": "encoding",
                "param_2": "character",
                "param_3": "stream",
                "uVar1": "result",
                "iVar2": "status",
                "uVar3": "character_masked",
                "pbVar4": "current_byte",
                "uVar5": "position",
                "local_1c": "character_byte",
                "abStack_1b": "next_characters"
            },
            "code": "uint convert_and_write_to_stream_00083c40(undefined4 encoding, uint character, byte **stream) {\n  uint locale_mb_cur_max = __locale_mb_cur_max();\n  if (locale_mb_cur_max == 1 && character - 1 < 0xff) {\n    uint character_masked = character & 0xff;\n    byte character_byte = (byte) character_masked;\n  }\n  else {\n    uint uVar1 = _wcrtomb_r(encoding, &local_1c, character, stream + 0x17);\n    if (uVar1 == 0xffffffff) {\n      *(ushort *)(stream + 3) = *(ushort *)(stream + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (uVar1 == 0) {\n      return character;\n    }\n    uint character_masked = (uint) local_1c;\n  }\n  uint position = 0;\n  do {\n    byte *current_byte = stream[2] + -1;\n    stream[2] = current_byte;\n    if ((int) current_byte < 0) {\n      if ((int) stream[6] <= (int) current_byte) {\n        **stream = (byte) character_masked;\n        current_byte = *stream;\n        uint next_character = (uint) *current_byte;\n        if (next_character != 10) {\n          goto LAB_00083c90;\n        }\n      }\n      int status = __swbuf_r(encoding, character_masked, stream);\n      if (status == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **stream = (byte) character_masked;\n      current_byte = *stream;\nLAB_00083c90:\n      *stream = current_byte + 1;\n    }\n    if (locale_mb_cur_max <= position + 1) {\n      return character;\n    }\n    uint next_character = (uint) abStack_1b[position];\n    position = position + 1;\n  } while (true);\n}",
            "called": [
                "__locale_mb_cur_max",
                "__swbuf_r",
                "_wcrtomb_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c40",
            "calling": [
                "__sprint_r.part.0"
            ],
            "imported": false,
            "current_name": "convert_and_write_to_stream_00083c40"
        },
        "FUN_0008116e": {
            "renaming": {
                "FUN_0008116e": "resetAndIncrementTimeTickIfNeeded_0008116e",
                "iVar1": "shouldReset",
                "__false": "__false",
                "tickReset": "tickReset",
                "TimeTick_Increment": "TimeTick_Increment"
            },
            "code": "void resetAndIncrementTimeTickIfNeeded_0008116e(void)\n{\n  int shouldReset = __false();\n  if (shouldReset == 0) {\n    tickReset();\n    TimeTick_Increment();\n    return;\n  }\n  return;\n}",
            "called": [
                "__false",
                "tickReset",
                "TimeTick_Increment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008116e",
            "calling": [],
            "imported": false,
            "current_name": "resetAndIncrementTimeTickIfNeeded_0008116e"
        },
        "FUN_000805d0": {
            "renaming": {
                "FUN_000805d0": "controlTemperature_000805d0",
                "puVar1": "data",
                "puVar2": "dutyCycle",
                "puVar3": "minutesElapsed",
                "puVar4": "mmResidue",
                "puVar5": "ssResidue",
                "puVar6": "secondsElapsed",
                "puVar7": "state",
                "puVar8": "minutesTarget",
                "puVar9": "secondsTarget",
                "uVar10": "integerTemp",
                "uVar11": "secondsElapsedInt",
                "uVar12": "millis",
                "uVar14": "kp1",
                "uVar15": "pid1",
                "uVar19": "ep1",
                "iVar16": "tempVar1",
                "iVar17": "stateInt",
                "iVar18": "in1",
                "iVar20": "secondsResidue",
                "piVar18": "waitTime"
            },
            "code": "\nvoid controlTemperature_000805d0(void)\n\n{\n  undefined *data;\n  undefined *dutyCycle;\n  undefined *minutesElapsed;\n  undefined *mmResidue;\n  undefined *ssResidue;\n  undefined *secondsElapsed;\n  undefined *state;\n  undefined *minutesTarget;\n  undefined *secondsTarget;\n  undefined2 integerTemp;\n  uint secondsElapsedInt;\n  uint32_t millis;\n  undefined4 uVar13;\n  undefined4 kp1;\n  undefined4 pid1;\n  int tempVar1;\n  int stateInt;\n  int *waitTime;\n  undefined4 ep1;\n  int secondsResidue;\n  \n  state = PTR_estado_0008089c;\n  secondsTarget = PTR_segundos_00080898;\n  minutesTarget = PTR_minutos_00080894;\n  minutesElapsed = PTR_mmt_0008087c;\n  ssResidue = PTR_ssres_00080878;\n  mmResidue = PTR_mmres_00080874;\n  dutyCycle = PTR_duty1_00080834;\n  data = PTR_au16data_00080830;\n  if ((byte)*PTR_u8state_0008082c < 10) {\n                    /* WARNING: Could not recover jumptable at 0x000805f0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_000805f0::switchdataD_000805f4 +\n              (uint)(&switchD_000805f0::switchdataD_000805f4)[(byte)*PTR_u8state_0008082c] * 2))();\n    return;\n  }\n  stateInt = *(int *)PTR_minutos_00080894;\n  tempVar1 = stateInt - *(int *)PTR_mmres_00080874;\n  if (tempVar1 < 0) {\n    tempVar1 = tempVar1 + 0x3c;\n  }\n  *(int *)PTR_mmt_0008087c = tempVar1;\n  secondsElapsed = PTR_sst_00080880;\n  secondsElapsedInt = *(uint *)secondsTarget;\n  tempVar1 = secondsElapsedInt - *(int *)ssResidue;\n  *(int *)PTR_sst_00080880 = tempVar1;\n  if (tempVar1 < 0) {\n    *(int *)minutesElapsed = *(int *)minutesElapsed + -1;\n    *(int *)secondsElapsed = tempVar1 + 0x3c;\n  }\n  tempVar1 = *(int *)minutesElapsed;\n  secondsResidue = *(int *)secondsElapsed;\n  *(short *)(data + 0x36) = (short)tempVar1;\n  *(short *)(data + 0x38) = (short)secondsResidue;\n  if ((tempVar1 == 0) && (secondsResidue == 0)) {\n    *(undefined4 *)PTR_terminar_ciclo_00080868 = 1;\n    *(undefined4 *)mmResidue = 0;\n    *(undefined4 *)ssResidue = 0;\n  }\n  secondsElapsed = PTR_segundosp_00080888;\n  minutesElapsed = PTR_minutosp_00080884;\n  if (*(int *)PTR_minutosp_00080884 == stateInt) {\n    tempVar1 = 1 - secondsElapsedInt;\n    if (1 < secondsElapsedInt) {\n      tempVar1 = 0;\n    }\n    *(int *)PTR_segundosp_00080888 = tempVar1;\n    if (tempVar1 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    *(int *)minutesElapsed = stateInt;\n    minutesElapsed = PTR_espera_plancha_00080a50;\n    *(uint *)secondsElapsed = secondsElapsedInt;\n    *(undefined4 *)mmResidue = 0;\n    *(undefined4 *)ssResidue = 0;\n    *(undefined4 *)minutesElapsed = 0;\n  }\n  secondsElapsed = PTR_espera_plancha_0008088c;\n  minutesElapsed = PTR_tiempo_espera_00080860;\n  tempVar1 = *(int *)state;\n  if (tempVar1 == 0) {\n    *(undefined4 *)mmResidue = 0;\n    *(undefined4 *)ssResidue = 0;\n    waitTime = (int *)PTR_espera_plancha_0008088c;\nLAB_000808f2:\n    *waitTime = tempVar1;\n  }\n  else {\n    if (tempVar1 != 1) goto LAB_000808f4;\n    if (*(int *)PTR_espera_plancha_0008088c < *(int *)PTR_tiempo_espera_00080860) {\n      millis = millis();\n      state = PTR_reloj_00080890;\n      if (*(uint *)PTR_reloj_00080890 < millis) {\n        *(int *)secondsElapsed = *(int *)secondsElapsed + 1;\n        millis = millis();\n        *(uint32_t *)state = millis + 1000;\n      }\n    }\n    if (*(int *)secondsElapsed < *(int *)minutesElapsed) goto LAB_000808f4;\n    *(int *)PTR_espera_plancha_0008088c = *(int *)minutesElapsed + 1;\n    waitTime = (int *)PTR_mmres_00080a20;\n    minutesElapsed = PTR_ssres_00080a1c;\n    if (*(int *)mmResidue < *(int *)minutesTarget) {\n      millis = millis();\n      minutesElapsed = PTR_reloj_00080890;\n      if (*(uint *)PTR_reloj_00080890 < millis) {\n        *(int *)ssResidue = *(int *)ssResidue + 1;\n        millis = millis();\n        *(uint32_t *)minutesElapsed = millis + 1000;\n      }\n    }\n    else {\n      if (*(int *)mmResidue != *(int *)minutesTarget) goto LAB_000808f4;\n      if (*(int *)secondsTarget < *(int *)ssResidue) {\n        tempVar1 = 0;\n        *(undefined4 *)PTR_ssres_00080a1c = 0;\n        goto LAB_000808f2;\n      }\n      millis = millis();\n      minutesTarget = PTR_reloj_00080a54;\n      if (*(uint *)PTR_reloj_00080a54 < millis) {\n        *(int *)minutesElapsed = *(int *)minutesElapsed + 1;\n        millis = millis();\n        *(uint32_t *)minutesTarget = millis + 1000;\n      }\n    }\n    if (0x3b < *(int *)ssResidue) {\n      *(undefined4 *)PTR_ssres_00080a1c = 0;\n      *(int *)mmResidue = *(int *)mmResidue + 1;\n    }\n  }\nLAB_000808f4:\n  millis = millis();\n  minutesTarget = PTR_kia1_00080a60;\n  minutesElapsed = PTR_incre_00080a5c;\n  ssResidue = PTR_tiempopid1_00080a58;\n  mmResidue = PTR_YN_00080a24;\n  if (*(uint *)PTR_tiempopid1_00080a58 < millis) {\n    uVar13 = __floatsisf(*(undefined4 *)PTR_tempe_z1_00080a28);\n    uVar13 = __aeabi_fsub(uVar13,*(undefined4 *)PTR_temperatura1_00080a2c);\n    *(undefined4 *)PTR_e1_00080a30 = uVar13;\n    secondsTarget = PTR_ep1_00080a34;\n    ep1 = *(undefined4 *)PTR_ep1_00080a34;\n    kp1 = __addsf3(uVar13,ep1);\n    kp1 = __aeabi_fmul(kp1,*(undefined4 *)minutesTarget);\n    state = PTR_kip1_00080a64;\n    kp1 = __addsf3(kp1,*(undefined4 *)PTR_kip1_00080a64);\n    *(undefined4 *)minutesTarget = kp1;\n    ep1 = __aeabi_fsub(uVar13,ep1);\n    ep1 = __aeabi_fmul(ep1,*(undefined4 *)PTR_kda1_00080a38);\n    minutesTarget = PTR_kdp1_00080a3c;\n    ep1 = __aeabi_fsub(ep1,*(undefined4 *)PTR_kdp1_00080a3c);\n    *(undefined4 *)PTR_kda1_00080a38 = ep1;\n    pid1 = __aeabi_fmul(uVar13,*(undefined4 *)PTR_kpa1_00080a40);\n    pid1 = __addsf3(pid1,kp1);\n    __addsf3(pid1,ep1);\n    pid1 = __aeabi_f2iz();\n    *(undefined4 *)PTR_pid1_00080a44 = pid1;\n    pid1 = __floatsisf();\n    *(undefined4 *)secondsTarget = uVar13;\n    *(undefined4 *)mmResidue = pid1;\n    *(undefined4 *)minutesElapsed = 0;\n    *(undefined4 *)state = kp1;\n    *(undefined4 *)minutesTarget = ep1;\n    millis = millis();\n    *(uint32_t *)ssResidue = millis + *(int *)dutyCycle;\n  }\n  uVar13 = __floatsisf(*(undefined4 *)dutyCycle);\n  tempVar1 = __aeabi_fcmpge(*(undefined4 *)mmResidue,uVar13);\n  if (tempVar1 != 0) {\n    *(undefined4 *)PTR_YN_00080a24 = uVar13;\n  }\n  tempVar1 = __aeabi_fcmple(*(undefined4 *)mmResidue,0);\n  if (tempVar1 != 0) {\n    *(undefined4 *)PTR_YN_00080a24 = 0;\n  }\n  integerTemp = __fixunssfsi(*(undefined4 *)mmResidue);\n  tempVar1 = *(int *)minutesElapsed;\n  *(undefined2 *)(data + 0x2a) = integerTemp;\n  *(int *)minutesElapsed = tempVar1 + 1;\n  *(uint *)PTR_in1_00080a4c = *(ushort *)PTR_data8024_00080a48 & 1 ^ 1;\n  return;\n}\n\n",
            "called": [
                "__aeabi_f2iz",
                "__aeabi_fcmple",
                "__fixunssfsi",
                "query",
                "__aeabi_fsub",
                "poll",
                "__aeabi_fmul",
                "__aeabi_fcmpge",
                "__addsf3",
                "millis",
                "__floatsisf",
                "__floatunsisf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000805d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "controlTemperature_000805d0"
        },
        "FUN_000813e4": {
            "renaming": {
                "FUN_000813e4": "getAvailableBytesInRxBuffer_000813e4",
                "_rx_buffer->_iHead": "this->rxBufferHead",
                "_rx_buffer->_iTail": "this->rxBufferTail"
            },
            "code": "int __thiscall UARTClass::getAvailableBytesInRxBuffer_000813e4(UARTClass *this)\n{\n    int head = this->rxBufferHead;\n    int tail = this->rxBufferTail;\n    int availableBytes = (head - tail) & 0x7f;\n    return availableBytes;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e4",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "getAvailableBytesInRxBuffer_000813e4"
        },
        "FUN_00081cbc": {
            "renaming": {
                "FUN_00081cbc": "isEndOfString_00081cbc",
                "in_CY": "currentChar"
            },
            "code": "bool isEndOfString_00081cbc(void)\n{\n  char currentChar;\n  __aeabi_cfrcmple();\n  return currentChar == '\\0';\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081cbc",
            "calling": [],
            "imported": false,
            "current_name": "isEndOfString_00081cbc"
        },
        "FUN_00080aac": {
            "renaming": {
                "FUN_00080aac": "handle_uart_interrupt_00080aac"
            },
            "code": "void handle_uart_interrupt_00080aac(void)\n{\n  UARTClass::IrqHandler((UARTClass *)PTR_Serial_00080ab4);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aac",
            "calling": [],
            "imported": false,
            "current_name": "handle_uart_interrupt_00080aac"
        },
        "FUN_0008120c": {
            "renaming": {
                "FUN_0008120c": "do_nothing_0008120c"
            },
            "code": "\nvoid do_nothing_0008120c(uint32_t ms)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008120c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_0008120c"
        },
        "FUN_00084290": {
            "renaming": {
                "FUN_00084290": "get_charset_00084290",
                "PTR_lc_ctype_charset_00084294": "charset_ptr"
            },
            "code": "const char* get_charset_00084290(void)\n{\n    return PTR_lc_ctype_charset_00084294;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084290",
            "calling": [
                "_wcrtomb_r"
            ],
            "imported": false,
            "current_name": "get_charset_00084290"
        },
        "FUN_000846b4": {
            "renaming": {
                "FUN_000846b4": "get_file_stat_000846b4",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "file_stat",
                "puVar1": "error_ptr",
                "iVar2": "stat_result"
            },
            "code": "void get_file_stat_000846b4(int *error_code, int file_descriptor, stat *file_stat) {\n  undefined *error_ptr;\n  int stat_result;\n\n  error_ptr = PTR_errno_000846d8;\n  *(undefined4 *)PTR_errno_000846d8 = 0;\n  stat_result = _fstat(file_descriptor, file_stat);\n  if ((stat_result == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n    return;\n  }\n  return;\n}\n",
            "called": [
                "_fstat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846b4",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "get_file_stat_000846b4"
        },
        "FUN_0008120e": {
            "renaming": {
                "FUN_0008120e": "do_nothing_0008120e"
            },
            "code": "\nvoid do_nothing_0008120e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008120e",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "do_nothing_0008120e"
        },
        "FUN_000811a8": {
            "renaming": {
                "FUN_000811a8": "calculate_difference_000811a8",
                "cOld_UNUSED": "old_string",
                "cNew_UNUSED": "new_string"
            },
            "code": "int calculate_difference_000811a8(char *old_string, char *new_string) {\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811a8",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_000811a8"
        },
        "FUN_000813a8": {
            "renaming": {
                "FUN_000813a8::FUN_000813a8": "initializeBuffer",
                "this": "buffer",
                "_iHead": "headIndex",
                "_iTail": "tailIndex",
                "FUN_000813a8": "initializeBuffer_000813a8"
            },
            "code": "initializeBuffer_000813a8 * __thiscall initializeBuffer_000813a8(initializeBuffer_000813a8 *buffer)\n{\n  memset(buffer,0,0x80);\n  buffer->_iHead = 0;\n  buffer->_iTail = 0;\n  return buffer;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813a8",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "initializeBuffer_000813a8"
        },
        "FUN_00083d9c": {
            "renaming": {
                "FUN_00083d9c": "improved_function_00083d9c",
                "param_1": "lock",
                "param_2": "size",
                "puVar1": "ptr",
                "uVar2": "header",
                "iVar3": "prev",
                "iVar4": "block",
                "uVar5": "size_aligned",
                "iVar6": "block_aligned",
                "uVar7": "next_header",
                "puVar8": "av"
            },
            "code": "\nvoid improved_function_00083d9c(undefined4 lock,int size)\n\n{\n  undefined *ptr;\n  uint header;\n  int prev;\n  int block;\n  uint size_aligned;\n  int block_aligned;\n  uint next_header;\n  undefined *av;\n  \n  if (size == 0) {\n    return;\n  }\n  __malloc_lock();\n  av = PTR___malloc_av__00083f24;\n  header = *(uint *)(size + -4);\n  block_aligned = size + -8;\n  size_aligned = header & 0xfffffffe;\n  block = block_aligned + size_aligned;\n  next_header = *(uint *)(block + 4) & 0xfffffffc;\n  if (*(int *)(PTR___malloc_av__00083f24 + 8) == block) {\n    next_header = next_header + size_aligned;\n    if (-1 < (int)(header << 0x1f)) {\n      block_aligned = block_aligned - *(int *)(size + -8);\n      prev = *(int *)(block_aligned + 0xc);\n      block = *(int *)(block_aligned + 8);\n      next_header = next_header + *(int *)(size + -8);\n      *(int *)(block + 0xc) = prev;\n      *(int *)(prev + 8) = block;\n    }\n    header = *(uint *)PTR___malloc_trim_threshold_00083f2c;\n    *(uint *)(block_aligned + 4) = next_header | 1;\n    *(int *)(av + 8) = block_aligned;\n    if (header <= next_header) {\n      _malloc_trim_r(lock,*(undefined4 *)PTR___malloc_top_pad_00083f30);\n    }\n  }\n  else {\n    header = header & 1;\n    *(uint *)(block + 4) = next_header;\n    if (header == 0) {\n      block_aligned = block_aligned - *(int *)(size + -8);\n      ptr = *(undefined **)(block_aligned + 8);\n      size_aligned = size_aligned + *(int *)(size + -8);\n      if (ptr == av + 8) {\n        header = 1;\n      }\n      else {\n        prev = *(int *)(block_aligned + 0xc);\n        *(int *)(ptr + 0xc) = prev;\n        *(undefined **)(prev + 8) = ptr;\n      }\n    }\n    else {\n      header = 0;\n    }\n    if (-1 < *(int *)(block + next_header + 4) << 0x1f) {\n      size_aligned = size_aligned + next_header;\n      ptr = *(undefined **)(block + 8);\n      if ((header == 0) && (ptr == PTR_PTR___malloc_av__00083f28)) {\n        *(int *)(av + 0x14) = block_aligned;\n        *(int *)(av + 0x10) = block_aligned;\n        *(undefined **)(block_aligned + 0xc) = ptr;\n        *(undefined **)(block_aligned + 8) = ptr;\n        *(uint *)(block_aligned + 4) = size_aligned | 1;\n        *(uint *)(block_aligned + size_aligned) = size_aligned;\n        goto LAB_00083e30;\n      }\n      block = *(int *)(block + 0xc);\n      *(int *)(ptr + 0xc) = block;\n      *(undefined **)(block + 8) = ptr;\n    }\n    *(uint *)(block_aligned + 4) = size_aligned | 1;\n    *(uint *)(block_aligned + size_aligned) = size_aligned;\n    if (header == 0) {\n      if (size_aligned < 0x200) {\n        header = *(uint *)(av + 4);\n        ptr = av + (size_aligned & 0xfffffff8);\n        block = *(int *)(ptr + 8);\n        *(int *)(block_aligned + 8) = block;\n        *(undefined **)(block_aligned + 0xc) = ptr;\n        *(uint *)(av + 4) = header | 1 << ((int)(size_aligned >> 3) >> 2 & 0xffU);\n        *(int *)(ptr + 8) = block_aligned;\n        *(int *)(block + 0xc) = block_aligned;\n        __malloc_unlock(lock);\n        return;\n      }\n      header = size_aligned >> 9;\n      if (header < 5) {\n        block = (size_aligned >> 6) + 0x38;\n        prev = block * 2;\n      }\n      else if (header < 0x15) {\n        block = header + 0x5b;\n        prev = block * 2;\n      }\n      else if (header < 0x55) {\n        block = (size_aligned >> 0xc) + 0x6e;\n        prev = block * 2;\n      }\n      else if (header < 0x155) {\n        block = (size_aligned >> 0xf) + 0x77;\n        prev = block * 2;\n      }\n      else if (header < 0x555) {\n        block = (size_aligned >> 0x12) + 0x7c;\n        prev = block * 2;\n      }\n      else {\n        prev = 0xfc;\n        block = 0x7e;\n      }\n      av = av + prev * 4;\n      ptr = *(undefined **)(av + 8);\n      if (ptr == av) {\n        *(uint *)(PTR___malloc_av__00083f24 + 4) =\n             *(uint *)(PTR___malloc_av__00083f24 + 4) | 1 << (block >> 2 & 0xffU);\n        av = ptr;\n      }\n      else {\n        do {\n          if ((*(uint *)(ptr + 4) & 0xfffffffc) <= size_aligned) break;\n          ptr = *(undefined **)(ptr + 8);\n        } while (av != ptr);\n        av = *(undefined **)(ptr + 0xc);\n      }\n      *(undefined **)(block_aligned + 0xc) = av;\n      *(undefined **)(block_aligned + 8) = ptr;\n      *(int *)(av + 8) = block_aligned;\n      *(int *)(ptr + 0xc) = block_aligned;\n    }\n  }\nLAB_00083e30:\n  __malloc_unlock(lock);\n  return;\n}\n\n",
            "called": [
                "_malloc_trim_r",
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d9c",
            "calling": [
                "__sfvwrite_r",
                "__swsetup_r",
                "_fclose_r",
                "_realloc_r",
                "free",
                "__sflush_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "improved_function_00083d9c"
        },
        "FUN_00083c08": {
            "renaming": {
                "FUN_00083c08": "do_nothing_00083c08"
            },
            "code": "\nvoid do_nothing_00083c08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c08",
            "calling": [
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c08"
        },
        "FUN_000818c8": {
            "renaming": {
                "FUN_000818c8": "calculate_signed_multiplication_000818c8",
                "param_1": "multiplicand",
                "param_2": "multiplier",
                "uVar1": "multiplicand_copy",
                "uVar2": "multiplier_copy",
                "iVar3": "leading_zeroes",
                "uVar4": "shift_amount",
                "uVar5": "product",
                "iVar6": "adjustment",
                "uVar7": "sign_bit",
                "bVar8": "has_adjustment"
            },
            "code": "uint calculate_signed_multiplication_000818c8(uint multiplicand, uint multiplier)\n{\n    uint multiplicand_copy, multiplier_copy, leading_zeroes, shift_amount, product, sign_bit;\n    int adjustment;\n\n    if ((multiplicand | multiplier) == 0) {\n        return multiplicand;\n    }\n\n    sign_bit = multiplier & 0x80000000;\n    if ((int)sign_bit < 0) {\n        adjustment = multiplicand != 0;\n        multiplicand = -multiplicand;\n        multiplier = -multiplier - (uint)adjustment;\n    }\n\n    multiplicand_copy = multiplicand;\n    multiplier_copy = multiplier;\n\n    if (multiplier == 0) {\n        multiplicand_copy = 0;\n        multiplier_copy = multiplicand;\n    }\n\n    sign_bit |= 0x5b000000;\n    if (multiplier == 0) {\n        sign_bit += 0xf0000000;\n    }\n\n    leading_zeroes = count_leading_zeroes(multiplier_copy);\n    shift_amount = leading_zeroes - 8;\n    adjustment = (sign_bit - 0x800000) + shift_amount * -0x800000;\n\n    if (leading_zeroes < 8) {\n        product = multiplier_copy << (leading_zeroes + 0x18U & 0xff);\n        adjustment += ((multiplier_copy >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)product >> 0x1f));\n        if ((multiplicand_copy | product << 1) == 0) {\n            adjustment &= ~(product >> 0x1f);\n        }\n        return adjustment;\n    }\n\n    product = multiplicand_copy << (shift_amount & 0xff);\n    adjustment += (multiplier_copy << (shift_amount & 0xff)) + (multiplicand_copy >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < (multiplicand * sign_bit));\n    if (product == 0x80000000) {\n        adjustment &= 0xfffffffe;\n    }\n    return adjustment;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000818c8",
            "calling": [],
            "imported": false,
            "current_name": "calculate_signed_multiplication_000818c8"
        },
        "FUN_00081bf4": {
            "renaming": {
                "FUN_00081bf4": "calculate_result_00081bf4",
                "param_1": "first_number",
                "param_2": "second_number",
                "bVar1": "is_result_less_than_zero",
                "uVar2": "first_number_times_two",
                "uVar3": "second_number_times_two",
                "uVar4": "result",
                "bVar5": "is_result_zero"
            },
            "code": "uint calculate_result_00081bf4(uint first_number, uint second_number) {\n  bool is_first_number_negative = ((int)first_number >> 0x18 == -1);\n  bool is_second_number_negative = ((int)second_number >> 0x18 == -1);\n  uint first_number_times_two = first_number * 2;\n  uint second_number_times_two = second_number * 2;\n  if (is_first_number_negative || is_second_number_negative) {\n    if ((is_first_number_negative && ((first_number & 0x7fffff) != 0)) || (is_second_number_negative && ((second_number & 0x7fffff) != 0))) {\n      return 1;\n    }\n  }\n  uint result = first_number_times_two | second_number & 0x7fffffff;\n  bool is_result_zero = (result == 0);\n  if (!is_result_zero) {\n    result = first_number ^ second_number;\n    is_result_zero = (result == 0);\n  }\n  bool is_result_less_than_zero = (-1 < (int)result);\n  if (is_result_less_than_zero) {\n    result = first_number_times_two + second_number_times_two;\n    is_result_zero = (result == 0);\n  }\n  if (is_result_less_than_zero && (second_number_times_two <= first_number_times_two) && !is_result_zero) {\n    result = (int)second_number >> 0x1f;\n  }\n  if (!is_result_less_than_zero || (second_number_times_two > first_number_times_two)) {\n    result = ~((int)second_number >> 0x1f);\n  }\n  if (!is_result_zero) {\n    result = result | 1;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081bf4",
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "imported": false,
            "current_name": "calculate_result_00081bf4"
        },
        "FUN_00081d7c": {
            "renaming": {
                "FUN_00081d7c": "execute_preinit_and_fini_functions_00081d7c",
                "puVar1": "preinit_end",
                "puVar2": "fini_start",
                "iVar3": "i",
                "ppcVar4": "preinit_functions",
                "iVar5": "num_preinit_functions"
            },
            "code": "void execute_preinit_and_fini_functions_00081d7c(void)\n{\n    undefined *preinit_end = PTR___preinit_array_end_00081dbc;\n    undefined *preinit_start = PTR___preinit_array_end_00081dc0;\n    int num_preinit_functions = (int)(preinit_end - preinit_start) >> 2;\n\n    if (num_preinit_functions != 0) {\n        code **preinit_functions = (code **)(preinit_start - 4);\n        int i = 0;\n        do {\n            i++;\n            preinit_functions++;\n            (**preinit_functions)();\n        } while (num_preinit_functions != i);\n    }\n\n    undefined *fini_start = PTR___preinit_array_end_00081dc8;\n    undefined *fini_end = PTR__fini_00081dc4;\n    _init();\n    int num_fini_functions = (int)(fini_end - fini_start) >> 2;\n\n    if (num_fini_functions != 0) {\n        code **fini_functions = (code **)(fini_start - 4);\n        int i = 0;\n        do {\n            i++;\n            fini_functions++;\n            (**fini_functions)();\n        } while (num_fini_functions != i);\n        return;\n    }\n    return;\n}",
            "called": [
                "register_fini",
                "_init",
                "frame_dummy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d7c",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "execute_preinit_and_fini_functions_00081d7c"
        },
        "FUN_000810bc": {
            "renaming": {
                "FUN_000810bc": "execute_callbacks_on_pioB_pins_with_highest_priority_000810bc",
                "uVar1": "highest_priority_pin",
                "uVar2": "pins_to_check",
                "PTR_callbacksPioB_000810f0": "PTR_callbacksPioB",
                "DAT_000810ec": "DAT_000810ec"
            },
            "code": "void execute_callbacks_on_pioB_pins_with_highest_priority_000810bc(void)\n{\n  uint32_t pins_to_check = *(uint32_t *)(DAT_000810ec + 0x4c);\n  while( true ) {\n    uint32_t highest_priority_pin = 31 - __builtin_clz(pins_to_check);\n    if (highest_priority_pin > 31) break;\n    code *callback = *(code **)(PTR_callbacksPioB_000810f0_000810f0 + highest_priority_pin * 4);\n    if (callback != NULL) {\n      (*callback)();\n    }\n    pins_to_check &= ~(1 << highest_priority_pin);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810bc",
            "calling": [],
            "imported": false,
            "current_name": "execute_callbacks_on_pioB_pins_with_highest_priority_000810bc"
        },
        "FUN_00081c5c": {
            "renaming": {
                "FUN_00081c5c": "compare_and_concat_00081c5c",
                "param_1": "float_param1",
                "param_2": "float_param2"
            },
            "code": "float compare_and_concat_00081c5c(float float_param1, float float_param2) {\n    __cmpsf2();\n    return CONCAT44(float_param2, float_param1);\n}",
            "called": [
                "__cmpsf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c5c",
            "calling": [
                "__aeabi_fcmple",
                "__aeabi_fcmpeq",
                "__aeabi_fcmplt",
                "__aeabi_cfrcmple"
            ],
            "imported": false,
            "current_name": "compare_and_concat_00081c5c"
        },
        "FUN_00081388": {
            "renaming": {
                "FUN_00081388": "decrease_ticks_and_call_if_zero_00081388",
                "iVar1": "ticks"
            },
            "code": "void decrease_ticks_and_call_if_zero_00081388(void)\n{\n  int ticks = *(int *)PTR_ticks_000813a0;\n  if (ticks != -1) {\n     ticks--;\n     *(int *)PTR_ticks_000813a0 = ticks;\n     if (ticks == 0) {\n        (*DAT_000813a4)();\n     }\n  }\n  return;\n}",
            "called": [
                "banzai"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081388",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "decrease_ticks_and_call_if_zero_00081388"
        },
        "FUN_00082598": {
            "renaming": {
                "FUN_00082598": "do_nothing_00082598"
            },
            "code": "\nvoid do_nothing_00082598(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082598",
            "calling": [
                "_malloc_trim_r",
                "_free_r",
                "_realloc_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00082598"
        },
        "FUN_00082994": {
            "renaming": {
                "FUN_00082994": "copy_string_00082994",
                "__dest": "destination",
                "__src": "source",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "source_ptr_32_aligned",
                "puVar4": "source_ptr_32",
                "uVar5": "current_32bit_value",
                "uVar6": "next_32bit_value",
                "puVar7": "destination_ptr_32_aligned",
                "puVar8": "destination_ptr_32",
                "pcVar9": "destination_ptr_char",
                "bVar10": "current_char_is_zero"
            },
            "code": "char * copy_string_00082994(char *destination, char *source)\n{\n    char current_char;\n    ushort current_short;\n    uint *source_ptr_32;\n    uint *destination_ptr_32;\n    uint current_32bit_value;\n    uint *source_ptr_32_aligned;\n    uint *destination_ptr_32_aligned;\n    bool current_char_is_zero;\n\n    destination_ptr_32_aligned = (uint *)destination;\n    if ((((uint)destination ^ (uint)source) & 3) != 0) {\n        do {\n            current_char = *source;\n            *destination = current_char;\n            source++;\n            destination++;\n        } while (current_char != '\\0');\n        return destination;\n    }\n    source_ptr_32_aligned = (uint *)source;\n    if (((uint)source & 3) != 0) {\n        source_ptr_32 = (uint *)source;\n        if (((uint)source & 1) != 0) {\n            source_ptr_32 = (uint *)(source + 1);\n            current_char = *source;\n            destination_ptr_32_aligned = (uint *)(destination + 1);\n            *destination = current_char;\n            if (current_char == '\\0') {\n                return destination;\n            }\n        }\n        source = (char *)source_ptr_32;\n        if (((uint)source_ptr_32 & 2) != 0) {\n            source = (char *)((int)source_ptr_32 + 2);\n            current_short = *(ushort *)source_ptr_32;\n            current_char_is_zero = (current_short & 0xff) == 0;\n            if (current_char_is_zero) {\n                *(char *)destination_ptr_32_aligned = (char)current_short;\n            }\n            else {\n                *(ushort *)destination_ptr_32_aligned = current_short;\n                current_char_is_zero = (current_short & 0xff00) == 0;\n                destination_ptr_32_aligned = (uint *)((int)destination_ptr_32_aligned + 2);\n            }\n            if (current_char_is_zero) {\n                return destination;\n            }\n        }\n    }\n    current_32bit_value = *(uint *)source;\n    source_ptr_32 = (uint *)((int)source + 4);\n    destination_ptr_32 = destination_ptr_32_aligned;\n    if (((uint)source & 4) != 0) {\n        if ((current_32bit_value + 0xfefefeff & ~current_32bit_value & 0x80808080) != 0) goto LAB_000829f8;\n        destination_ptr_32 = destination_ptr_32_aligned + 1;\n        *destination_ptr_32_aligned = current_32bit_value;\n        source_ptr_32 = (uint *)((int)source + 8);\n        current_32bit_value = *(uint *)((int)source + 4);\n    }\n    while (true) {\n        source_ptr_32_aligned = source_ptr_32 + 1;\n        current_32bit_value = *source_ptr_32;\n        destination_ptr_32_aligned = destination_ptr_32;\n        if ((current_32bit_value + 0xfefefeff & ~current_32bit_value & 0x80808080) != 0) break;\n        destination_ptr_32_aligned = destination_ptr_32 + 1;\n        *destination_ptr_32 = current_32bit_value;\n        current_32bit_value = *(uint *)source_ptr_32_aligned;\n        if ((current_32bit_value + 0xfefefeff & ~current_32bit_value & 0x80808080) != 0) break;\n        source_ptr_32 = source_ptr_32 + 2;\n        destination_ptr_32 = destination_ptr_32 + 2;\n        *destination_ptr_32_aligned = current_32bit_value;\n    }\nLAB_000829f8:\n    do {\n        *(char *)destination_ptr_32_aligned = (char)current_32bit_value;\n        current_short = current_32bit_value & 0xff;\n        current_32bit_value = current_32bit_value >> 8 | current_32bit_value << 0x18;\n        destination_ptr_32_aligned = (uint *)((int)destination_ptr_32_aligned + 1);\n    } while (current_short != 0);\n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082994",
            "calling": [
                "copy"
            ],
            "imported": false,
            "current_name": "copy_string_00082994"
        },
        "FUN_00080c0c": {
            "renaming": {
                "FUN_00080c0c": "initializeUARTandUSART_00080c0c",
                "*puVar1": "rx_buffer1",
                "*puVar2": "tx_buffer1",
                "*this": "rx_buffer3",
                "*this_00": "tx_buffer4",
                "*this_01": "rx_buffer2",
                "*this_02": "tx_buffer2",
                "PTR_rx_buffer1_00080ca0": "rx_buffer1",
                "PTR_tx_buffer1_00080ca4": "tx_buffer1",
                "PTR_rx_buffer2_00080cd8": "rx_buffer2",
                "PTR_rx_buffer3_00080cac": "rx_buffer3",
                "PTR_rx_buffer4_00080cb4": "rx_buffer4",
                "PTR_tx_buffer2_00080cdc": "tx_buffer2",
                "PTR_tx_buffer3_00080cb8": "tx_buffer3",
                "PTR_tx_buffer4_00080cbc": "tx_buffer4",
                "PTR_Serial_00080cb0": "serial",
                "PTR_Serial1_00080cc4": "serial1",
                "PTR_Serial2_00080ccc": "serial2",
                "PTR_Serial3_00080cd4": "serial3",
                "DAT_00080ca8": "data1",
                "DAT_00080cc0": "data2",
                "DAT_00080cc8": "data3",
                "DAT_00080cd0": "data4"
            },
            "code": "void initializeUARTandUSART_00080c0c() {\n  RingBuffer* PTR_rx_buffer1_00080ca0 = (RingBuffer*)PTR_PTR_rx_buffer1_00080ca0_00080ca0;\n  RingBuffer* PTR_tx_buffer1_00080ca4 = (RingBuffer*)PTR_PTR_tx_buffer1_00080ca4_00080ca4;\n  RingBuffer* PTR_rx_buffer2_00080cd8 = (RingBuffer*)PTR_PTR_rx_buffer2_00080cd8_00080cd8;\n  RingBuffer* PTR_rx_buffer3_00080cac = (RingBuffer*)PTR_PTR_rx_buffer3_00080cac_00080cac;\n  RingBuffer* PTR_rx_buffer4_00080cb4 = (RingBuffer*)PTR_PTR_rx_buffer4_00080cb4_00080cb4;\n  RingBuffer* PTR_tx_buffer2_00080cdc = (RingBuffer*)PTR_PTR_tx_buffer2_00080cdc_00080cdc;\n  RingBuffer* PTR_tx_buffer3_00080cb8 = (RingBuffer*)PTR_PTR_tx_buffer3_00080cb8_00080cb8;\n  RingBuffer* PTR_tx_buffer4_00080cbc = (RingBuffer*)PTR_PTR_tx_buffer4_00080cbc_00080cbc;\n  UARTClass* PTR_Serial_00080cb0 = (UARTClass*)PTR_Serial_00080cb0;\n  USARTClass* PTR_Serial1_00080cc4 = (USARTClass*)PTR_Serial1_00080cc4;\n  USARTClass* PTR_Serial2_00080ccc = (USARTClass*)PTR_Serial2_00080ccc;\n  USARTClass* PTR_Serial3_00080cd4 = (USARTClass*)PTR_Serial3_00080cd4;\n  RingBuffer::RingBuffer(PTR_rx_buffer1_00080ca0);\n  RingBuffer::RingBuffer(PTR_tx_buffer1_00080ca4);\n  RingBuffer::RingBuffer(PTR_rx_buffer2_00080cd8);\n  RingBuffer::RingBuffer(PTR_rx_buffer3_00080cac);\n  RingBuffer::RingBuffer(PTR_rx_buffer4_00080cb4);\n  RingBuffer::RingBuffer(PTR_tx_buffer2_00080cdc);\n  RingBuffer::RingBuffer(PTR_tx_buffer3_00080cb8);\n  RingBuffer::RingBuffer(PTR_tx_buffer4_00080cbc);\n  UARTClass::UARTClass(PTR_Serial_00080cb0, DAT_00080ca8, UART_IRQn, 8, PTR_rx_buffer1_00080ca0, PTR_tx_buffer1_00080ca4);\n  USARTClass::USARTClass(PTR_Serial1_00080cc4, DAT_00080cc0, USART0_IRQn, 0x11, PTR_rx_buffer2_00080cd8, PTR_tx_buffer2_00080cdc);\n  USARTClass::USARTClass(PTR_Serial2_00080ccc, DAT_00080cc8, USART1_IRQn, 0x12, PTR_rx_buffer3_00080cac, PTR_tx_buffer3_00080cb8);\n  USARTClass::USARTClass(PTR_Serial3_00080cd4, DAT_00080cd0, USART3_IRQn, 0x14, PTR_rx_buffer4_00080cb4, PTR_tx_buffer4_00080cbc);\n}",
            "called": [
                "USARTClass",
                "RingBuffer",
                "UARTClass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c0c",
            "calling": [],
            "imported": false,
            "current_name": "initializeUARTandUSART_00080c0c"
        },
        "FUN_00084418": {
            "renaming": {
                "FUN_00084418": "handle_signal_00084418",
                "param_1": "error_code",
                "param_2": "signal_num",
                "param_3": "pid",
                "puVar1": "errno_ptr"
            },
            "code": "void handle_signal_00084418(int *error_code, int signal_num, int pid) {\n    undefined *errno_ptr;\n    errno_ptr = PTR_errno_0008443c;\n    *(undefined4 *)PTR_errno_0008443c = 0;\n    _kill(signal_num, pid);\n    if ((signal_num == -1) && (*(int *)errno_ptr != 0)) {\n        *error_code = *(int *)errno_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "_kill"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084418",
            "calling": [
                "kill"
            ],
            "imported": false,
            "current_name": "handle_signal_00084418"
        },
        "FUN_00080d2e": {
            "renaming": {
                "FUN_00080d2e": "update_flags_00080d2e",
                "param_1": "flags_ptr",
                "param_2": "operation",
                "param_3": "new_flags",
                "uVar1": "updated_flags",
                "PTR_00080d2c": "current_flags"
            },
            "code": "void update_flags_00080d2e(int flags_ptr, uint32_t operation, uint32_t new_flags) {\n  uint32_t PTR_00080d2c;\n  uint32_t updated_flags;\n  PTR_00080d2c = *(uint32_t *)(flags_ptr + 0x70);\n  *(uint32_t *)(flags_ptr + 0x44) = new_flags;\n  switch(operation) {\n    case 0:\n    case 3:\n    case 4:\n    case 5:\n      return;\n    case 1:\n      updated_flags = PTR_00080d2c & (PTR_00080d2c & ~new_flags);\n      break;\n    case 2:\n      updated_flags = PTR_00080d2c | new_flags;\n      break;\n    default:\n      goto switchD_00080d34_caseD_6;\n  }\n  *(uint32_t *)(flags_ptr + 0x70) = updated_flags;\n\nswitchD_00080d34_caseD_6:\n  *(uint32_t *)(flags_ptr + 4) = new_flags;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d2e",
            "calling": [
                "PIO_Configure"
            ],
            "imported": false,
            "current_name": "update_flags_00080d2e"
        },
        "FUN_00081944": {
            "renaming": {
                "FUN_00081944": "calculate_float_00081944",
                "param_1": "float_a",
                "param_2": "float_b",
                "param_3": "uint_c",
                "param_4": "uint_d",
                "lVar1": "long_result",
                "uVar2": "result",
                "uVar3": "byte_a",
                "iVar4": "sum_of_bytes",
                "iVar5": "shift_count",
                "iVar7": "shift_count2",
                "bVar9": "flag_a",
                "bVar10": "flag_b",
                "uVar6": "product"
            },
            "code": "\nuint calculate_float_00081944(uint float_a,uint float_b,undefined4 uint_c,uint uint_d)\n\n{\n  longlong long_result;\n  uint result;\n  uint byte_a;\n  int sum_of_bytes;\n  int shift_count;\n  uint product;\n  int shift_count2;\n  uint uVar8;\n  bool flag_a;\n  bool flag_b;\n  \n  byte_a = float_a >> 0x17 & 0xff;\n  flag_a = byte_a == 0;\n  if (!flag_a) {\n    uint_d = float_b >> 0x17 & 0xff;\n    flag_a = uint_d == 0;\n  }\n  if (!flag_a) {\n    flag_a = byte_a == 0xff;\n  }\n  if (!flag_a) {\n    flag_a = uint_d == 0xff;\n  }\n  if (flag_a) {\n    uint_d = float_b >> 0x17 & 0xff;\n    if (byte_a == 0xff || uint_d == 0xff) {\n      flag_a = float_a == 0 || float_a == 0x80000000;\n      result = float_b;\n      if (float_a != 0 && float_a != 0x80000000) {\n        flag_a = float_b == 0;\n        result = float_a;\n      }\n      if (!flag_a) {\n        flag_a = float_b == 0x80000000;\n      }\n      uVar8 = result;\n      if (((flag_a) || ((byte_a == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((uint_d == 0xff && (uVar8 = float_b, (float_b & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      result = result ^ float_b;\n      goto LAB_00081a94;\n    }\n    flag_a = (float_a & 0x7fffffff) == 0;\n    if (!flag_a) {\n      flag_a = (float_b & 0x7fffffff) == 0;\n    }\n    if (flag_a) {\n      return (float_a ^ float_b) & 0x80000000;\n    }\n    flag_a = byte_a == 0;\n    result = float_a & 0x80000000;\n    while( true ) {\n      if (flag_a) {\n        float_a = float_a << 1;\n        flag_a = (float_a & 0x800000) == 0;\n      }\n      if (!flag_a) break;\n      byte_a = byte_a - 1;\n    }\n    float_a = float_a | result;\n    flag_a = uint_d == 0;\n    result = float_b & 0x80000000;\n    while( true ) {\n      if (flag_a) {\n        float_b = float_b << 1;\n        flag_a = (float_b & 0x800000) == 0;\n      }\n      if (!flag_a) break;\n      uint_d = uint_d - 1;\n    }\n    float_b = float_b | result;\n  }\n  sum_of_bytes = byte_a + uint_d;\n  uVar8 = float_a ^ float_b;\n  byte_a = float_a << 9;\n  flag_a = byte_a == 0;\n  if (!flag_a) {\n    float_b = float_b << 9;\n    flag_a = float_b == 0;\n  }\n  if (flag_a) {\n    if (byte_a == 0) {\n      float_b = float_b << 9;\n    }\n    result = uVar8 & 0x80000000 | float_a & 0x7fffff | float_b >> 9;\n    flag_b = SBORROW4(sum_of_bytes,0x7f);\n    shift_count = sum_of_bytes + -0x7f;\n    flag_a = shift_count == 0;\n    shift_count2 = shift_count;\n    if (!flag_a && 0x7e < sum_of_bytes) {\n      flag_b = SBORROW4(0xff,shift_count);\n      shift_count2 = 0xff - shift_count;\n      flag_a = shift_count == 0xff;\n    }\n    if (!flag_a && shift_count2 < 0 == flag_b) {\n      result = result | shift_count * 0x800000;\n    }\n    if (!flag_a && shift_count2 < 0 == flag_b) {\n      return result;\n    }\n    result = result | 0x800000;\n    product = 0;\n    flag_b = SBORROW4(shift_count,1);\n    uVar8 = sum_of_bytes - 0x80;\n    flag_a = uVar8 == 0;\n    byte_a = uVar8;\n  }\n  else {\n    long_result = (ulonglong)(byte_a >> 5 | 0x8000000) * (ulonglong)(float_b >> 5 | 0x8000000);\n    product = (uint)long_result;\n    result = (uint)((ulonglong)long_result >> 0x20);\n    flag_a = result < 0x800000;\n    if (flag_a) {\n      result = result << 1;\n    }\n    if (flag_a) {\n      result = result | product >> 0x1f;\n      product = product << 1;\n    }\n    result = uVar8 & 0x80000000 | result;\n    uVar8 = (sum_of_bytes + -0x7f) - (uint)flag_a;\n    flag_b = SBORROW4(uVar8,0xfd);\n    flag_a = uVar8 == 0xfd;\n    byte_a = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      result = result + uVar8 * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (flag_a || (int)byte_a < 0 != flag_b) {\n    flag_a = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || flag_a != SCARRY4(uVar8,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && flag_a == SCARRY4(uVar8,0x19)) {\n      byte_a = (result << 1) >> (-uVar8 & 0xff);\n      uVar8 = result << (uVar8 + 0x20 & 0xff);\n      byte_a = ((uint)((result & 0x80000000) != 0) << 0x1f | byte_a >> 1) + (uint)((byte)byte_a & 1);\n      if ((product | uVar8 << 1) == 0) {\n        byte_a = byte_a & ~(uVar8 >> 0x1f);\n      }\n      return byte_a;\n    }\n    return result;\n  }\nLAB_00081a94:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081944",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_float_00081944"
        },
        "FUN_20070000": {
            "renaming": {
                "FUN_20070000": "wait_until_flag_is_set_20070000",
                "DAT_20070020": "flag_value",
                "DAT_20070024": "data_value",
                "PTR_DAT_2007001c": "flag_pointer",
                "PTR_DAT_20070028": "data_pointer"
            },
            "code": "void wait_until_flag_is_set_20070000(void)\n{\n  disableIRQinterrupts();\n  while(*PTR_DAT_2007001c < 0)\n  {\n  }\n  *PTR_DAT_2007001c = DAT_20070020;\n  while(*PTR_DAT_2007001c < 0)\n  {\n  }\n  *PTR_DAT_20070028 = DAT_20070024;\n  while(true)\n  {\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x20070000",
            "calling": [
                "Reset_Handler",
                "tickReset"
            ],
            "imported": false,
            "current_name": "wait_until_flag_is_set_20070000"
        },
        "FUN_000811f0": {
            "renaming": {
                "FUN_000811f0": "exit_with_status_000811f0",
                "status": "status",
                "PTR_s_Exiting_with_status__d__000811fc": "Exiting with status %d"
            },
            "code": "void exit_with_status_000811f0(int status)\n{\n  iprintf(\"PTR_s_Exiting_with_status__d__000811fc\", status);\n  while(1) {}\n}",
            "called": [
                "iprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811f0",
            "calling": [],
            "imported": false,
            "current_name": "exit_with_status_000811f0"
        },
        "FUN_00081704": {
            "renaming": {
                "FUN_00081704": "incrementTickCount_00081704",
                "PTR__dwTickCount_00081710": "tickCountPtr"
            },
            "code": "void incrementTickCount_00081704(void)\n{\n  int* PTR__dwTickCount_00081710 = (int*)PTR__dwTickCount_00081710;\n  *PTR__dwTickCount_00081710 += 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081704",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "incrementTickCount_00081704"
        },
        "FUN_00083c10": {
            "renaming": {
                "FUN_00083c10": "do_global_destructors_00083c10",
                "iVar1": "num_destructors",
                "ppcVar2": "destructor",
                "PTR___fini_array_end_00083c3c": "fini_array_end",
                "PTR___do_global_dtors_aux_fini_array_entry_00083c38": "do_global_dtors_aux_fini_array_entry"
            },
            "code": "void do_global_destructors_00083c10(void)\n{\n  int num_destructors = (int)PTR___fini_array_end_00083c3c - (int)PTR___do_global_dtors_aux_fini_array_entry_00083c38 >> 2;\n  if (num_destructors != 0) {\n    code **destructor = (code **)(PTR___do_global_dtors_aux_fini_array_entry_00083c38 + num_destructors * 4);\n    do {\n      num_destructors--;\n      destructor--;\n      (**destructor)();\n    } while (num_destructors != 0);\n  }\n  _fini();\n  return;\n}",
            "called": [
                "_fini",
                "__do_global_dtors_aux"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c10",
            "calling": [],
            "imported": false,
            "current_name": "do_global_destructors_00083c10"
        },
        "FUN_00081bec": {
            "renaming": {
                "FUN_00081bec": "perform_operation_00081bec",
                "param_1": "first_operand",
                "param_2": "second_operand",
                "uVar2": "first_operand_times_two",
                "uVar3": "second_operand_times_two",
                "uVar4": "result",
                "bVar1": "is_result_negative",
                "bVar5": "is_result_zero"
            },
            "code": "uint perform_operation_00081bec(uint first_operand, uint second_operand)\n{\n    bool is_first_operand_negative = (int)(first_operand * 2) >> 0x18 == -1;\n    bool is_second_operand_negative = (int)(second_operand * 2) >> 0x18 == -1;\n    \n    if (is_first_operand_negative || is_second_operand_negative)\n    {\n        if ((is_first_operand_negative && ((first_operand & 0x7fffff) != 0)) || (is_second_operand_negative && ((second_operand & 0x7fffff) != 0)))\n        {\n            return 1;\n        }\n    }\n    \n    uint result = (first_operand * 2) | second_operand & 0x7fffffff;\n    bool is_result_zero = result == 0;\n    \n    if (!is_result_zero)\n    {\n        result = first_operand ^ second_operand;\n        is_result_zero = result == 0;\n    }\n    \n    bool is_result_negative = -1 < (int)result;\n    \n    if (is_result_negative)\n    {\n        result = (first_operand * 2) + (second_operand * -2);\n        is_result_zero = result == 0;\n    }\n    \n    if (is_result_negative && second_operand <= first_operand && !is_result_zero)\n    {\n        first_operand = (int)second_operand >> 0x1f;\n    }\n    \n    if (!is_result_negative || second_operand > first_operand)\n    {\n        first_operand = ~((int)second_operand >> 0x1f);\n    }\n    \n    if (!is_result_zero)\n    {\n        first_operand = first_operand | 1;\n    }\n    \n    return first_operand;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081bec",
            "calling": [],
            "imported": false,
            "current_name": "perform_operation_00081bec"
        },
        "FUN_000844c4": {
            "renaming": {
                "FUN_000844c4": "print_character_000844c4",
                "param_1": "file_descriptor",
                "param_2": "character",
                "param_3": "stream_buffer",
                "param_4": "flush_flag",
                "uVar1": "character_code",
                "uVar2": "character_count",
                "puVar3": "stream_pointer",
                "iVar4": "buffer_size"
            },
            "code": "uint print_character_000844c4(int file_descriptor, uint character, undefined4 *stream_buffer, undefined4 flush_flag)\\n\\\n    {\\n\\\n        ushort character_code;\\n\\\n        uint character_count;\\n\\\n        undefined *stream_pointer;\\n\\\n        int buffer_size;\\n\\\n        \\n\\\n        if ((file_descriptor != 0) && (*(int *)(file_descriptor + 0x38) == 0)) {\\n\\\n            __sinit();\\n\\\n        }\\n\\\n        character_code = *(ushort *)(stream_buffer + 3);\\n\\\n        character_count = (uint)character_code;\\n\\\n        stream_buffer[2] = stream_buffer[6];\\n\\\n        if ((-1 < (int)(character_count << 0x1c)) || (buffer_size = stream_buffer[4], buffer_size == 0)) {\\n\\\n            buffer_size = __swsetup_r(file_descriptor, stream_buffer, character_code, character_count, flush_flag);\\n\\\n            if (buffer_size != 0) {\\n\\\n                return 0xffffffff;\\n\\\n            }\\n\\\n            character_code = *(ushort *)(stream_buffer + 3);\\n\\\n            buffer_size = stream_buffer[4];\\n\\\n            character_count = (uint)character_code;\\n\\\n        }\\n\\\n        character = character & 0xff;\\n\\\n        if ((int)(character_count << 0x12) < 0) {\\n\\\n            stream_pointer = (undefined *)*stream_buffer;\\n\\\n            buffer_size = (int)stream_pointer - buffer_size;\\n\\\n            if (buffer_size < (int)stream_buffer[5]) {\\n\\\n                goto LAB_000844f6;\\n\\\n            }\\n\\\n        }\\n\\\n        else {\\n\\\n            stream_buffer[0x19] = stream_buffer[0x19] & 0xffffdfff;\\n\\\n            stream_pointer = (undefined *)*stream_buffer;\\n\\\n            *(ushort *)(stream_buffer + 3) = character_code | 0x2000;\\n\\\n            buffer_size = (int)stream_pointer - buffer_size;\\n\\\n            if (buffer_size < (int)stream_buffer[5]) {\\n\\\n                goto LAB_000844f6;\\n\\\n            }\\n\\\n        }\\n\\\n        buffer_size = _fflush_r(file_descriptor, stream_buffer);\\n\\\n        if (buffer_size != 0) {\\n\\\n            return 0xffffffff;\\n\\\n        }\\n\\\n        stream_pointer = (undefined *)*stream_buffer;\\n\\\n        buffer_size = 1;\\n\\\n        LAB_000844f8:\\n\\\n        stream_buffer[2] = stream_buffer[2] + -1;\\n\\\n        *stream_buffer = stream_pointer + 1;\\n\\\n        *stream_pointer = (char)character;\\n\\\n        if (((stream_buffer[5] == buffer_size) || (((int)((uint)*(ushort *)(stream_buffer + 3) << 0x1f) < 0 && (character == 10)))) && (buffer_size = _fflush_r(file_descriptor, stream_buffer), buffer_size != 0)) {\\n\\\n            return 0xffffffff;\\n\\\n        }\\n\\\n        return character;\\n\\\n    }",
            "called": [
                "__swsetup_r",
                "_fflush_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844c4",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "print_character_000844c4"
        },
        "FUN_0008189c": {
            "renaming": {
                "FUN_0008189c": "calculate_result_0008189c",
                "param_1": "input",
                "iVar1": "leading_zeroes_count",
                "uVar2": "shift",
                "iVar4": "constant",
                "uVar5": "mask"
            },
            "code": "uint calculate_result_0008189c(uint num) {\n  uint count = 0;\n  while (num) {\n    num >>= 1;\n    count++;\n  }\n  return 32 - count;\n}\n\nuint calculate_result_0008189c(uint input) {\n  int is_negative = input & 0x80000000;\n  if (is_negative) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  uint leading_zeroes_count = calculate_result_0008189c(input);\n  uint shift = leading_zeroes_count - 8;\n  int constant = ((is_negative | 0x4b000000) - 0x800000) + shift * -0x800000;\n  if (leading_zeroes_count > 7) {\n    uint mask = 0 << (shift & 0xff);\n    uint result = constant + (input << (shift & 0xff)) + (0U >> (0x20 - shift & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shifted_input = input << (leading_zeroes_count + 0x18U & 0xff);\n  uint result = constant + ((input >> (0x20 - (leading_zeroes_count + 0x18U) & 0xff)) - ((int)shifted_input >> 0x1f));\n  if ((shifted_input & 0x7fffffff) == 0) {\n    result = result & ~(shifted_input >> 0x1f);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008189c",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_result_0008189c"
        },
        "FUN_0008234c": {
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "__dest": "destination",
                "__src": "source",
                "__n": "num_bytes",
                "puVar1": "dest_byte",
                "puVar2": "dest_word",
                "puVar3": "dest",
                "puVar4": "src_byte",
                "puVar5": "src_word",
                "puVar6": "temp_byte",
                "uVar7": "remaining_bytes",
                "uVar8": "remaining_words",
                "bVar9": "loop_condition"
            },
            "code": "void * copy_memory_0008234c(void *destination, void *source, size_t num_bytes) {\n  uint32_t *dest = (uint32_t *)destination;\n  uint32_t *src = (uint32_t *)source;\n  size_t num_words = num_bytes / sizeof(uint32_t);\n  size_t num_remaining_bytes = num_bytes % sizeof(uint32_t);\n  for (size_t i = 0; i < num_words; i++) {\n    dest[i] = src[i];\n  }\n  uint8_t *dest_byte = (uint8_t *)&dest[num_words];\n  uint8_t *src_byte = (uint8_t *)&src[num_words];\n  for (size_t i = 0; i < num_remaining_bytes; i++) {\n    dest_byte[i] = src_byte[i];\n  }\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008234c",
            "calling": [
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "copy_memory_0008234c"
        },
        "FUN_00080a68": {
            "renaming": {
                "FUN_00080a68": "initializeMasterData_00080a68",
                "puVar1": "rxString",
                "PTR_RxString_00080a94": "rxString",
                "PTR_s__00080a98": "initialString",
                "__aeabi_atexit": "registerAtExitFunction",
                "DAT_00080aa0": "atExitFunction",
                "PTR___dso_handle_00080a9c": "dsoHandle",
                "PTR_master_00080aa4": "master",
                "master": "master",
                "uint8_t": "uint8_t",
                "uint16_t": "uint16_t"
            },
            "code": "void initializeMasterData_00080a68(void)\n{\n  String* PTR_RxString_00080a94 = PTR_RxString_00080a94;\n  String::String(PTR_RxString_00080a94, PTR_s__00080a98);\n  __aeabi_atexit(PTR_RxString_00080a94, DAT_00080aa0, PTR___dso_handle_00080a9c);\n  uint8_t* PTR_master_00080aa4 = PTR_PTR_master_00080aa4_00080aa4;\n  PTR_master_00080aa4[4] = 0;\n  PTR_master_00080aa4[5] = 0;\n  PTR_master_00080aa4[6] = 6;\n  *(uint16_t*)(PTR_master_00080aa4 + 0x56) = 1000;\n  return;\n}",
            "called": [
                "__aeabi_atexit",
                "String"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a68",
            "calling": [],
            "imported": false,
            "current_name": "initializeMasterData_00080a68"
        },
        "FUN_0008165c": {
            "renaming": {
                "FUN_0008165c": "setString_0008165c",
                "this": "strObj",
                "cstr": "str",
                "length": "strLength",
                "uVar1": "success",
                "reserve": "reserveMemory",
                "invalidate": "invalidateString",
                "len": "length",
                "buffer": "text"
            },
            "code": "String * __thiscall String::setString_0008165c(String *this, char *str, uint length)\n{\n    uchar success = reserveMemory(this, length);\n    if (success == 0)\n    {\n        invalidateString(this);\n    }\n    else\n    {\n        this->length = length;\n        strcpy(this->text, str);\n    }\n    return this;\n}",
            "called": [
                "strcpy",
                "invalidate",
                "reserve"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008165c",
            "calling": [
                "String"
            ],
            "imported": false,
            "current_name": "setString_0008165c"
        },
        "FUN_000815f8": {
            "renaming": {
                "FUN_000815f8": "concatenate_bytes_000815f8",
                "h": "high_byte",
                "l": "low_byte"
            },
            "code": "uint16_t concatenate_bytes_000815f8(uint8_t high_byte, uint8_t low_byte)\n{\n  return CONCAT11(high_byte, low_byte);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815f8",
            "calling": [
                "get_FC3"
            ],
            "imported": false,
            "current_name": "concatenate_bytes_000815f8"
        },
        "FUN_00084384": {
            "renaming": {
                "FUN_00084384": "find_first_occurrence_00084384",
                "__s": "buffer",
                "__c": "target",
                "__n": "buffer_size",
                "puVar1": "last_word",
                "puVar2": "current_word",
                "uVar3": "target_word",
                "uVar4": "temp_word",
                "pbVar5": "current_byte",
                "pbVar6": "last_byte",
                "uVar7": "mask",
                "bVar8": "found"
            },
            "code": "void * find_first_occurrence_00084384(void * buffer, int target, size_t buffer_size) {\n  uint * current_word;\n  uint * last_word;\n  uint target_word;\n  uint temp_word;\n  byte * current_byte;\n  byte * last_byte;\n  uint mask;\n  bool found;\n\n  target_word = target & 0xff;\n  if (((uint)buffer & 3) == 0) {\n    current_word = (uint *)buffer;\n    last_word = (uint *)buffer + buffer_size / 4;\n    if (last_word - current_word > 3) {\n      mask = target_word | target_word << 8 | target_word << 16 | target_word << 24;\n      do {\n        temp_word = *current_word ^ mask;\n        if ((temp_word + 0xfefefeff & ~temp_word & 0x80808080) != 0) break;\n        buffer_size -= 4;\n        current_word++;\n      } while (last_word - current_word > 3);\n    }\n    current_byte = (byte *)current_word;\n    if (current_word != last_word && *current_byte != target_word) {\n      last_byte = (byte *)last_word;\n      do {\n        current_byte++;\n        found = current_byte == last_byte;\n        if (found) goto not_found;\n      } while (*current_byte != target_word);\n      current_word = (uint *)current_byte;\n    }\n  }\n  else if (buffer_size == 0) {\n    current_word = NULL;\n  }\n  else {\n    if (*current_word != target_word) {\n      current_byte = (byte *)buffer + 1;\n      buffer_size--;\n      do {\n        current_word = (uint *)current_byte;\n        if (((uint)current_word & 3) == 0) break;\n        if (buffer_size == 0) goto not_found;\n        current_byte++;\n        buffer_size--;\n      } while (*current_byte != target_word);\n      last_word = (uint *)((byte *)buffer + buffer_size + 1);\n      mask = target_word | target_word << 8 | target_word << 16 | target_word << 24;\n      while (current_word < last_word) {\n        temp_word = *current_word ^ mask;\n        if ((temp_word + 0xfefefeff & ~temp_word & 0x80808080) != 0) break;\n        current_word++;\n      }\n    }\n  }\n  not_found:\n  return current_word;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084384",
            "calling": [
                "_vfiprintf_r",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "find_first_occurrence_00084384"
        },
        "FUN_00082ab0": {
            "renaming": {
                "FUN_00082ab0": "get_signal_handler_pid_00082ab0",
                "__pid": "pid",
                "__sig": "sig",
                "iVar1": "result"
            },
            "code": "int get_signal_handler_pid_00082ab0(__pid_t pid, int sig) {\n  int result = _get_signal_handler_pid_00082ab0_r(*(undefined4 *)PTR__impure_ptr_00082abc, pid, sig);\n  return result;\n}",
            "called": [
                "_kill_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082ab0",
            "calling": [],
            "imported": false,
            "current_name": "get_signal_handler_pid_00082ab0"
        },
        "FUN_00081c6c": {
            "renaming": {
                "FUN_00081c6c": "is_not_null_00081c6c",
                "in_ZR": "input"
            },
            "code": "bool is_not_null_00081c6c(char input){\\n  __aeabi_cfcmpeq();\\n  return input != \"\\0\";\\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c6c",
            "calling": [],
            "imported": false,
            "current_name": "is_not_null_00081c6c"
        },
        "FUN_00081034": {
            "renaming": {
                "FUN_00081034": "set_bit_in_uint_at_offset_00081034",
                "param_1": "ptr_data",
                "param_2": "bit_value",
                "param_3": "bit_offset",
                "PTR_": "ptr_",
                "DAT_": "data_"
            },
            "code": "void set_bit_in_uint_at_offset_00081034(uint32_t* PTR_data, uint32_t bit_value, uint32_t bit_offset)\n{\n  uint32_t* PTR_uint_at_offset = PTR_data + 1;\n  uint32_t current_uint_value = *PTR_uint_at_offset;\n  uint32_t masked_bit_value = bit_value & 1;\n  uint32_t shifted_bit_value = masked_bit_value << 7;\n  uint32_t new_uint_value = current_uint_value | shifted_bit_value;\n  *PTR_uint_at_offset = new_uint_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081034",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_bit_in_uint_at_offset_00081034"
        },
        "FUN_000844bc": {
            "renaming": {
                "FUN_000844bc": "close_file_descriptor_000844bc",
                "param_1": "file_descriptor",
                "param_2": "file_descriptor_offset"
            },
            "code": "void close_file_descriptor_000844bc(int file_descriptor, int file_descriptor_offset) {\n    _close_r(file_descriptor, (int)*(short *)(file_descriptor_offset + 0xe));\n    return;\n}",
            "called": [
                "_close_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844bc",
            "calling": [],
            "imported": false,
            "current_name": "close_file_descriptor_000844bc"
        },
        "FUN_00083c0c": {
            "renaming": {
                "FUN_00083c0c": "do_nothing_00083c0c"
            },
            "code": "\nvoid do_nothing_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c0c",
            "calling": [
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c0c"
        },
        "FUN_00083974": {
            "renaming": {
                "FUN_00083974": "check_atexit_00083974",
                "DAT_00083980": "global_flag",
                "DAT_00083984": "clean_up"
            },
            "code": "void check_atexit_00083974(void)\n{\n  if (DAT_00083980 != 0) {\n    atexit(DAT_00083984);\n    return;\n  }\n  return;\n}",
            "called": [
                "atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083974",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "check_atexit_00083974"
        },
        "FUN_00084700": {
            "renaming": {
                "FUN_00084700": "seek_file_00084700",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "puVar1": "errno_pointer",
                "iVar2": "seek_result"
            },
            "code": "void seek_file_00084700(int *error_code, int file_descriptor, int offset, int whence) {\n    int seek_result = lseek(file_descriptor, offset, whence);\n    if (seek_result == -1 && errno != 0) {\n        *error_code = errno;\n        return;\n    }\n    return;\n}",
            "called": [
                "_lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084700",
            "calling": [
                "__swrite",
                "__sseek"
            ],
            "imported": false,
            "current_name": "seek_file_00084700"
        },
        "FUN_00085874": {
            "renaming": {
                "FUN_00085874": "do_nothing_00085874"
            },
            "code": "\nvoid do_nothing_00085874(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085874",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "do_nothing_00085874"
        },
        "FUN_00080e5c": {
            "renaming": {
                "FUN_00080e5c": "check_character_00080e5c",
                "param_1": "character",
                "uVar1": "mask",
                "uVar2": "filtered",
                "DAT_00080e98": "PTR_DATA"
            },
            "code": "int check_character_00080e5c(uint8_t character) {\n  int is_valid_character = 0;\n  if (character < 0x2d) {\n    if (character < 0x20) {\n      uint8_t mask = 1 << (character & 0xff);\n      uint8_t filtered = *(uint8_t *)(DAT_00080e98 + 0x18) & mask;\n      if (filtered == mask) {\n        *(uint8_t *)(DAT_00080e98 + 0x14) = filtered;\n      }\n    }\n    else {\n      uint8_t mask = 1 << (character - 0x20 & 0xff);\n      uint8_t filtered = *(uint8_t *)(DAT_00080e98 + 0x108) & mask;\n      if (filtered == mask) {\n        *(uint8_t *)(DAT_00080e98 + 0x104) = filtered;\n      }\n    }\n    return is_valid_character;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e5c",
            "calling": [
                "pinMode",
                "end"
            ],
            "imported": false,
            "current_name": "check_character_00080e5c"
        },
        "FUN_00081ca8": {
            "renaming": {
                "FUN_00081ca8": "is_less_than_or_equal_to_zero_00081ca8",
                "in_CY": "is_less_or_equal",
                "in_ZR": "is_zero"
            },
            "code": "bool is_less_than_or_equal_to_zero_00081ca8(float num)\n{\n  bool is_less_or_equal = __aeabi_cfrcmple(num, 0.0);\n  return is_less_or_equal;\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081ca8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "is_less_than_or_equal_to_zero_00081ca8"
        },
        "FUN_00081318": {
            "renaming": {
                "FUN_00081318": "set_pin_output_value_00081318",
                "ulPin": "pin_number",
                "ulVal": "pin_value",
                "puVar1": "pin_description_ptr",
                "puVar2": "pin_status_ptr",
                "iVar3": "pin_output_status",
                "uVar4": "pin_desc_1",
                "uVar5": "pin_desc_2",
                "uVar6": "pin_value_shifted"
            },
            "code": "void set_pin_output_value_00081318(uint32_t pin_number, uint32_t pin_value) {\\n  uint32_t *pin_status_ptr;\\n  uint32_t *pin_description_ptr;\\n  int pin_output_status;\\n  uint32_t pin_value_shifted;\\n  pin_description_ptr = PTR_g_APinDescription_00081380;\\n  pin_status_ptr = PTR_g_pinStatus_00081384;\\n  if (PTR_g_APinDescription_00081380[pin_number * 0x1c + 0xc] != \"\\0\") {\\n    pin_value_shifted = pin_value;\\n    if ((PTR_g_pinStatus_00081384[pin_number] & 0xf) == 5) {\\n      pinMode(pin_number, OUTPUT);\\n    }\\n    pin_status_ptr[pin_number] = pin_status_ptr[pin_number] & 0xf | (byte)(pin_value << 4);\\n    uint32_t pin_desc_1 = *(uint32_t *)(pin_description_ptr + pin_number * 0x1c);\\n    uint32_t pin_desc_2 = *(uint32_t *)(pin_description_ptr + pin_number * 0x1c + 4);\\n    pin_output_status = PIO_GetOutputDataStatus(pin_desc_1, pin_desc_2);\\n    if (pin_output_status == 0) {\\n      PIO_PullUp(pin_desc_1, pin_desc_2, pin_value);\\n      return;\\n    }\\n    PIO_SetOutput(pin_desc_1, pin_desc_2, pin_value, 0, 1, pin_value_shifted);\\n  }\\n  return;\\n}",
            "called": [
                "pinMode",
                "PIO_PullUp",
                "PIO_GetOutputDataStatus",
                "PIO_SetOutput"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081318",
            "calling": [
                "setup",
                "begin",
                "getRxBuffer",
                "init",
                "sendTxBuffer"
            ],
            "imported": false,
            "current_name": "set_pin_output_value_00081318"
        },
        "FUN_00081714": {
            "renaming": {
                "FUN_00081714": "getTickCount_00081714",
                "PTR__dwTickCount_0008171c": "dwTickCountPtr"
            },
            "code": "uint32_t getTickCount_00081714(void)\n{\n  return *(uint32_t*)PTR__dwTickCount_0008171c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081714",
            "calling": [
                "millis"
            ],
            "imported": false,
            "current_name": "getTickCount_00081714"
        },
        "FUN_00081c80": {
            "renaming": {
                "FUN_00081c80": "isInputEmpty_00081c80",
                "in_CY": "inputChar"
            },
            "code": "bool isInputEmpty_00081c80(void)\n{\n  char inputChar;\n  __aeabi_cfcmpeq();\n  return inputChar == '\\0';\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c80",
            "calling": [],
            "imported": false,
            "current_name": "isInputEmpty_00081c80"
        },
        "FUN_0008449c": {
            "renaming": {
                "FUN_0008449c": "readjust_file_pointer_0008449c",
                "param_1": "file_descriptor",
                "param_2": "file_info",
                "iVar1": "seek_result",
                "uVar2": "flag"
            },
            "code": "void readjust_file_pointer_0008449c(int file_descriptor, int* file_info) {\n  int seek_result = _lseek_r(file_descriptor, (int)*(short *)(file_info + 0xe));\n  ushort flag;\n  if (seek_result == -1) {\n    flag = *(ushort *)(file_info + 0xc) & 0xefff;\n  }\n  else {\n    flag = *(ushort *)(file_info + 0xc) | 0x1000;\n  }\n  if (seek_result != -1) {\n    *(int *)(file_info + 0x50) = seek_result;\n  }\n  *(ushort *)(file_info + 0xc) = flag;\n  return;\n}",
            "called": [
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008449c",
            "calling": [],
            "imported": false,
            "current_name": "readjust_file_pointer_0008449c"
        },
        "FUN_0008259c": {
            "renaming": {
                "FUN_0008259c": "do_nothing_0008259c"
            },
            "code": "\nvoid do_nothing_0008259c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008259c",
            "calling": [
                "_malloc_trim_r",
                "_free_r",
                "_realloc_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0008259c"
        },
        "FUN_0008477c": {
            "renaming": {
                "FUN_0008477c": "calculate_difference_0008477c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "multiplier_low",
                "param_4": "multiplier_high",
                "param_5": "result_array",
                "uVar1": "product_low",
                "lVar2": "product",
                "*param_5": "result_array[0]",
                "param_5[1]": "result_array[1]"
            },
            "code": "void calculate_difference_0008477c(uint input_1, int input_2, uint32_t multiplier_low, uint32_t multiplier_high, int *result_array)\n{\n    uint32_t product_low = input_1 * multiplier_low;\n    uint32_t product_high = input_1 * multiplier_high;\n    uint64_t product = ((uint64_t)product_high << 32) | product_low;\n    int difference_1 = input_1 - (uint32_t)product;\n    int difference_2 = input_2 - ((int)(product >> 32) + (difference_1 > input_1));\n    result_array[0] = difference_1;\n    result_array[1] = difference_2;\n}",
            "called": [
                "__divdi3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008477c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_0008477c"
        },
        "FUN_000801b0": {
            "renaming": {
                "FUN_000801b0": "read_Modbus_data_000801b0",
                "this": "modbus_instance",
                "bVar1": "buffer_overflow",
                "uVar2": "current_byte",
                "uVar3": "buffer_size",
                "iVar4": "read_status",
                "bVar5": "current_buffer_index"
            },
            "code": "int8_t __thiscall read_Modbus_data_000801b0(Modbus *modbus_instance) {\\n\\\n        bool buffer_overflow = false;\\n\\\n        uchar current_byte;\\n\\\n        uint8_t buffer_size = 0;\\n\\\n        int read_status;\\n\\\n        byte current_buffer_index;\\n\\\n        if (modbus_instance->u8txenpin > 1) {\\n\\\n            digitalWrite((uint)modbus_instance->u8txenpin, 0);\\n\\\n        }\\n\\\n        modbus_instance->u8BufferSize = 0;\\n\\\n        if (modbus_instance->u8serno < 4) {\\n\\\n            do {\\n\\\n                read_status = (**(code **)(*(int *)modbus_instance->port + 8))();\\n\\\n                if (read_status != 0) {\\n\\\n                    current_byte = (**(code **)(*(int *)modbus_instance->port + 0xc))();\\n\\\n                    current_buffer_index = buffer_size;\\n\\\n                    modbus_instance->au8Buffer[current_buffer_index] = current_byte;\\n\\\n                    buffer_size = current_buffer_index + 1;\\n\\\n                    if (buffer_size > 0x3f) {\\n\\\n                        buffer_overflow = true;\\n\\\n                    }\\n\\\n                }\\n\\\n            } while (read_status != 0);\\n\\\n        }\\n\\\n        modbus_instance->u16InCnt += 1;\\n\\\n        if (buffer_overflow) {\\n\\\n            modbus_instance->u16errCnt += 1;\\n\\\n            return (int8_t)0xfd;\\n\\\n        }\\n\\\n        else {\\n\\\n            return (int8_t)buffer_size;\\n\\\n        }\\n\\\n    }",
            "called": [
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801b0",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "read_Modbus_data_000801b0"
        },
        "FUN_000813c2": {
            "renaming": {
                "FUN_000813c2": "addData_000813c2",
                "this": "buffer",
                "c": "data",
                "_iHead": "head_index",
                "_iTail": "tail_index",
                "_aucBuffer": "data_buffer"
            },
            "code": "void __thiscall RingBuffer::addData_000813c2(RingBuffer *buffer, uint8_t data) {\n  uint head_next_index = (buffer->head_index + 1U) & 0x7f;\n  if (head_next_index != buffer->tail_index) {\n    buffer->data_buffer[buffer->head_index] = data;\n    buffer->head_index = head_next_index;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813c2",
            "calling": [
                "IrqHandler"
            ],
            "imported": false,
            "current_name": "addData_000813c2"
        },
        "FUN_000814e4": {
            "renaming": {
                "FUN_000814e4::FUN_000814e4": "initialize_uart",
                "this": "uart_instance",
                "pUart": "uart",
                "dwIrq": "irq",
                "dwId": "id",
                "pRx_buffer": "rx_buffer",
                "pTx_buffer": "tx_buffer",
                "puVar1": "write_ptr",
                "FUN_000814e4": "initialize_uart_000814e4"
            },
            "code": "initialize_uart_000814e4 * __thiscall initialize_uart_000814e4(initialize_uart_000814e4 *this, Uart *uart, IRQn_Type irq, uint32_t id, RingBuffer *rx_buffer, RingBuffer *tx_buffer) {\n  undefined *write_ptr;\n  this->field_0x4 = 0;\n  this->field_0x8 = 1000;\n  write_ptr = PTR_PTR_write_1_00081504;\n  this->_pUart = uart;\n  *(undefined **)this = write_ptr;\n  this->_dwIrq = irq;\n  this->_rx_buffer = rx_buffer;\n  this->_dwId = id;\n  this->_tx_buffer = tx_buffer;\n  return this;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814e4",
            "calling": [
                "USARTClass",
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "initialize_uart_000814e4"
        },
        "FUN_00080d54": {
            "renaming": {
                "FUN_00080d54": "update_params_00080d54",
                "param_1": "param_array",
                "param_2": "new_param",
                "param_3": "flags",
                "bVar1": "is_negative_flag",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void update_params_00080d54(int *param_array, int new_param, unsigned int flags)\n{\n  bool is_negative_flag = (int)(flags << 0x1f) < 0;\n  param_array[17] = new_param;\n  \n  if (is_negative_flag) {\n    param_array[25] = new_param;\n  }\n  if (!is_negative_flag) {\n    param_array[24] = new_param;\n  }\n  \n  bool is_tenth_bit_set = (flags & 10) != 0;\n  if (is_tenth_bit_set) {\n    param_array[8] = new_param;\n  }\n  if (!is_tenth_bit_set) {\n    param_array[9] = new_param;\n  }\n  \n  bool is_twenty_eighth_or_twenty_sixth_bit_set = ((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0);\n  if (is_twenty_eighth_or_twenty_sixth_bit_set) {\n    param_array[32] = new_param;\n  }\n  \n  param_array[5] = new_param;\n  *param_array = new_param;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d54",
            "calling": [
                "PIO_Configure"
            ],
            "imported": false,
            "current_name": "update_params_00080d54"
        },
        "FUN_0008021c": {
            "renaming": {
                "FUN_0008021c": "calculateModbusCRC_0008021c",
                "this": "modbus",
                "u8length": "length",
                "pMVar1": "current_byte",
                "uVar2": "crc",
                "cVar3": "bit",
                "uVar4": "temp"
            },
            "code": "uint16_t __thiscall calculateModbusCRC_0008021c(Modbus *modbus,uint8_t length)\n{\n  Modbus *current_byte;\n  uint16_t crc = 0xffff;\n  for (current_byte = modbus; ((int)current_byte - (int)modbus & 0xffU) < (uint)length; current_byte = (Modbus *)((int)&current_byte->port + 1)) {\n    crc = crc ^ current_byte->au8Buffer[0];\n    char bit = 8;\n    do {\n      uint16_t temp = crc & 1;\n      crc = crc >> 1;\n      if (temp != 0) {\n        crc = crc ^ 0xa001;\n      }\n      bit--;\n    } while (bit != 0);\n  }\n  return (crc << 8) | (crc >> 8);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008021c",
            "calling": [
                "sendTxBuffer"
            ],
            "imported": false,
            "current_name": "calculateModbusCRC_0008021c"
        },
        "FUN_00082b38": {
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_00082b38(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********__s;\n  bool bVar29;\n  longlong lVar30;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    __sinit();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar11 = __swsetup_r(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)__sbprintf(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082b9e:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082bee;\n        }\n        iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082bee:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar29 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082c12:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        __s = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar29 << 6, bVar29 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar29 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_000830ec;\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      __s = (byte ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar29 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar27 < 0) {\n        bVar29 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar29);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar29 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar29) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      __s = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (__s != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)strlen((char *)__s);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)memchr(__s,0,(size_t)local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)__s);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)__s)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      __s = (byte ********)PTR_s__null__00083784;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar29 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082d78:\n    lVar30 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      __s = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082da0;\n      __s = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          __s = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar30 >> 0x20);\n          cVar13 = '\\n';\n          __aeabi_uldivmod((int)lVar30,uVar28,10,0);\n          *(char *)__s = cVar13 + '0';\n          lVar30 = __aeabi_uldivmod((int)lVar30,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)__s + -1);\n        } while (lVar30 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)__s);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar23 + '0';\n      __s = (byte ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_0008337e;\n    do {\n      __s = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)__s = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)__s + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)__s);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (byte *******)0x0) {\n    __sprint_r_part_0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    __s = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)__s = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)__s + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (byte *******)((int)local_68 - (int)__s);\n    }\n    else {\n      *(undefined *)((int)__s + -1) = 0x30;\n      __s = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (byte *******)((int)local_68 - (int)__s);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  pppppppbVar20 = (byte *******)PTR_blanks_6717_000830e8;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_blanks_6717_00083710;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_000833de;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_000833de;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_zeroes_6718_0008370c;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_0008348e:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_000834b4:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_zeroes_6718_000833c8;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_000832c6:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)__s;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_0008345a;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c), iVar11 != 0\n       )) goto LAB_000833de;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00083282:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_000832aa:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])__s;\nLAB_0008345a:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_blanks_6717_000833cc;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_blanks_6717_00083788;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_00083316:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_0008333e:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "called": [
                "__sbprintf",
                "__swsetup_r",
                "strlen",
                "__sprint_r.part.0",
                "__sinit",
                "__aeabi_uldivmod",
                "memchr"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082b38",
            "calling": [
                "__sbprintf",
                "iprintf"
            ],
            "imported": false,
            "current_name": "FUNC_00082b38"
        },
        "FUN_00083b08": {
            "renaming": {
                "FUN_00083b08": "walk_function_and_apply_action_to_each_pointer_00083b08",
                "param_1": "action_func",
                "DAT_00083b10": "ptr_array_start",
                "_fwalk": "_walk_function"
            },
            "code": "void walk_function_and_apply_action_to_each_pointer_00083b08(void* action_func, void* DAT_00083b10){\n  _fwalk(action_func, DAT_00083b10);\n  return;\n}",
            "called": [
                "_fwalk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b08",
            "calling": [],
            "imported": false,
            "current_name": "walk_function_and_apply_action_to_each_pointer_00083b08"
        },
        "FUN_00081e04": {
            "renaming": {
                "FUN_00081e04": "reversePointer_00081e04",
                "__ptr": "pointer",
                "_FUN_00081e04_r": "_reversePointer_r",
                "PTR__impure_ptr_00081e10": "PTR__impure_ptr_00081e10"
            },
            "code": "void reversePointer_00081e04(void *__ptr)\n{\n  _reversePointer_00081e04_r(*(undefined4 *)PTR__impure_ptr_00081e10,__ptr);\n  return;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e04",
            "calling": [
                "~String",
                "invalidate"
            ],
            "imported": false,
            "current_name": "reversePointer_00081e04"
        },
        "FUN_000814a8": {
            "renaming": {
                "FUN_000814a8": "update_rx_buffer_000814a8",
                "_rx_buffer": "rx_buffer",
                "_iHead": "rx_buffer_head",
                "_iTail": "rx_buffer_tail",
                "_dwIrq": "irq_num",
                "_dwId": "peripheral_id"
            },
            "code": "void __thiscall UARTClass::update_rx_buffer_000814a8(UARTClass *this)\n{\n    this->rx_buffer_head = this->rx_buffer_tail;\n    (**(code **)(*(int *)this + 0x14))();\n    *(int *)(DAT_000814e0 + (((uint)(int)this->irq_num >> 5) + 0x20) * 4) = 1 << (uint)(byte)(this->irq_num & 0x1f);\n    pmc_disable_periph_clk(this->peripheral_id);\n    return;\n}",
            "called": [
                "pmc_disable_periph_clk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814a8",
            "calling": [],
            "imported": false,
            "current_name": "update_rx_buffer_000814a8"
        },
        "FUN_00081084": {
            "renaming": {
                "FUN_00081084": "processCallbacks_00081084",
                "uVar1": "callbackIndex",
                "uVar2": "bitMask"
            },
            "code": "void processCallbacks_00081084(void)\n{\n  uint32_t bitMask;\n  uint32_t callbackIndex;\n  bitMask = *(uint32_t *)(DAT_000810b4 + 0x4c);\n  while(true)\n  {\n    callbackIndex = count_leading_zeroes(bitMask);\n    if(callbackIndex > 0x1f)\n    {\n      break;\n    }\n    callbackIndex = 0x1f - callbackIndex;\n    if(*(code **)(PTR_callbacksPioA_000810b8 + callbackIndex * 4) != (code *)0x0)\n    {\n      (**(code **)(PTR_callbacksPioA_000810b8 + callbackIndex * 4))();\n    }\n    bitMask &= ~(1 << callbackIndex);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081084",
            "calling": [],
            "imported": false,
            "current_name": "processCallbacks_00081084"
        },
        "FUN_00084750": {
            "renaming": {
                "FUN_00084750": "divide_or_throw_error_00084750",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder"
            },
            "code": "void divide_or_throw_error_00084750(int dividend, int divisor, int quotient, int remainder) {\n  if ((remainder == 0) && (quotient == 0)) {\n    if (divisor != 0 || dividend != 0) {\n      dividend = -1;\n    }\n    __aeabi_idiv0(dividend);\n    return;\n  }\n  __gnu_uldivmod_helper();\n}",
            "called": [
                "__gnu_uldivmod_helper",
                "__aeabi_idiv0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084750",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "divide_or_throw_error_00084750"
        },
        "FUN_00080ae4": {
            "renaming": {
                "FUN_00080ae4": "initialize_ADC_00080ae4",
                "ctx": "context",
                "puVar1": "system_core_clock",
                "puVar2": "DAT_00080bec",
                "iVar3": "port_1",
                "iVar4": "port_3",
                "iVar5": "port_4",
                "iVar6": "channel_disable",
                "ulPin": "analog_input_interrupt",
                "uVar7": "max_pin_number",
                "DAT_00080c08": "analog_input_channel_disable",
                "analog_input_pin": "analog_input_pin",
                "clock_frequency": "clock_frequency",
                "analog_input_timing": "analog_input_timing",
                "analog_input_trigger": "analog_input_trigger",
                "analog_input_interrupt": "analog_input_interrupt",
                "analog_output_pin": "analog_output_pin",
                "analog_output_channel": "digital_output_channel",
                "analog_output_frequency": "analog_output_frequency",
                "digital_input_pin": "digital_input_pin",
                "digital_input_pull": "digital_input_pull",
                "digital_output_pin": "digital_output_pin",
                "digital_output_pull": "digital_output_pull",
                "periph_clk_enable": "periph_clk_enable"
            },
            "code": "int initialize_ADC_00080ae4(EVP_PKEY_CTX *context)\n{\n  uint32_t pin_number = 0;\n  uint32_t max_pin_number = 0x4f;\n  uint32_t clock_frequency = *(uint *)system_core_clock / 1000 - 1;\n  uint32_t analog_input_pin = 0xc;\n  uint32_t analog_input_timing = 0x300000;\n  uint32_t analog_input_trigger = 0;\n  uint32_t analog_input_interrupt = 0xffffffff;\n  uint32_t DAT_00080c08 = 0xffffffff;\n  uint32_t analog_output_pin = 0;\n  uint32_t analog_output_channel = 1;\n  uint32_t analog_output_frequency = 0x300;\n  uint32_t digital_input_pin = 0x30;\n  uint32_t digital_input_pull = 2;\n  uint32_t digital_output_pin = 3;\n  uint32_t digital_output_pull = 0xc000;\n  uint32_t periph_clk_enable = 0x25;\n  SystemInit();\n  DAT_00080bec[1] = clock_frequency;\n  *(undefined *)(DAT_00080bf0 + 0x23) = 0xf0;\n  DAT_00080bec[2] = 0;\n  *DAT_00080bec = 7;\n  __libc_initialize_ADC_00080ae4_array();\n  while (pin_number <= max_pin_number) {\n    digitalWrite(pin_number,0);\n    uint32_t port_1 = DAT_00080bf8;\n    uint32_t port_2 = DAT_00080bf4;\n    uint32_t port_3 = DAT_00080bfc;\n    uint32_t port_4 = DAT_00080c00;\n    pin_number++;\n  }\n  *(undefined4 *)(port_2 + 0xa0) = analog_input_interrupt;\n  *(undefined4 *)(port_1 + 0xa0) = analog_input_interrupt;\n  *(undefined4 *)(port_3 + 0xa0) = analog_input_interrupt;\n  *(undefined4 *)(port_4 + 0xa0) = analog_input_interrupt;\n  PIO_Configure(port_2,digital_output_channel,digital_output_pull,0);\n  digitalWrite(analog_output_pin,digital_output_pull);\n  PIO_Configure(port_2,digital_output_channel,analog_output_frequency,0);\n  PIO_Configure(port_2,digital_output_channel,analog_input_timing,0);\n  PIO_Configure(port_3,digital_input_pull,digital_input_pin,0);\n  PIO_Configure(port_1,digital_output_channel,analog_input_timing,0);\n  PIO_Configure(port_2,digital_output_channel,digital_output_pin,0);\n  PIO_Configure(port_1,digital_output_channel,digital_input_pull,0);\n  pmc_enable_periph_clk(periph_clk_enable);\n  adc_initialize_ADC_00080ae4(DAT_00080c08,system_core_clock,analog_input_pin,0xc);\n  adc_configure_timing(DAT_00080c08,0,analog_input_timing,1);\n  adc_configure_trigger(DAT_00080c08,0,analog_input_trigger);\n  adc_disable_interrupt(DAT_00080c08,analog_input_interrupt);\n  int channel_disable = adc_disable_all_channel(DAT_00080c08);\n  analogOutputInit();\n  return channel_disable;\n}",
            "called": [
                "PIO_Configure",
                "adc_init",
                "digitalWrite",
                "adc_disable_all_channel",
                "__libc_init_array",
                "pmc_enable_periph_clk",
                "adc_configure_trigger",
                "SystemInit",
                "adc_configure_timing",
                "analogOutputInit",
                "adc_disable_interrupt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ae4",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_ADC_00080ae4"
        },
        "FUN_00081d5c": {
            "renaming": {
                "FUN_00081d5c": "register_atexit_function_00081d5c",
                "param_1": "func",
                "param_2": "arg",
                "__cxa_atexit": "__cxa_register_atexit"
            },
            "code": "void register_atexit_function_00081d5c(void (*func)(void), void *arg){\n  __cxa_atexit(func, arg);\n  return;\n}",
            "called": [
                "__cxa_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d5c",
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "imported": false,
            "current_name": "register_atexit_function_00081d5c"
        },
        "FUN_00082970": {
            "renaming": {
                "FUN_00082970": "allocate_memory_00082970",
                "param_1": "allocated_memory_block",
                "param_2": "block_size",
                "puVar1": "errno_pointer",
                "pcVar2": "sbrk_result"
            },
            "code": "void allocate_memory_00082970(int *allocated_memory_block, int block_size) {\n  undefined *errno_pointer;\n  caddr_t sbrk_result;\n  errno_pointer = PTR_errno_00082990;\n  *(undefined4 *)PTR_errno_00082990 = 0;\n  sbrk_result = _sbrk(block_size);\n  if ((sbrk_result == (caddr_t)0xffffffff) && (*(int *)errno_pointer != 0)) {\n    *allocated_memory_block = *(int *)errno_pointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082970",
            "calling": [
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_00082970"
        },
        "FUN_000811be": {
            "renaming": {
                "FUN_000811be": "return_one_000811be",
                "file_UNUSED": "file_unused",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int return_one_000811be(int file_unused)\n{\n    int result = 1;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811be",
            "calling": [
                "_isatty_r"
            ],
            "imported": false,
            "current_name": "return_one_000811be"
        },
        "FUN_00084a80": {
            "renaming": {
                "FUN_00084a80": "divide_00084a80",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "uVar2": "divisor_high_16bit",
                "uVar3": "dividend_high_shifted",
                "uVar4": "divisor_low_16bit",
                "uVar5": "dividend_shifted",
                "uVar6": "quotient1",
                "uVar7": "quotient2",
                "uVar8": "dividend_low_16bit",
                "uVar9": "quotient_final",
                "uVar10": "temp",
                "bVar11": "carry_flag"
            },
            "code": "\nundefined8 divide_00084a80(uint divide_00084a80nd,uint divide_00084a80nd_high,uint divisor,uint divisor_high)\n\n{\n  longlong lVar1;\n  uint divisor_high_16bit;\n  uint divide_00084a80nd_high_shifted;\n  uint divisor_low_16bit;\n  uint divide_00084a80nd_shifted;\n  uint quotient1;\n  uint quotient2;\n  uint divide_00084a80nd_low_16bit;\n  uint quotient_final;\n  uint temp;\n  bool carry_flag;\n  \n  if (divisor_high == 0) {\n    if (divisor <= divide_00084a80nd_high) {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      quotient_final = count_leading_zeroes(divisor);\n      if (quotient_final == 0) {\n        divide_00084a80nd_high = divide_00084a80nd_high - divisor;\n        divisor_high_16bit = divisor >> 0x10;\n        divisor_low_16bit = divisor & 0xffff;\n        quotient2 = 1;\n      }\n      else {\n        divisor = divisor << (quotient_final & 0xff);\n        divide_00084a80nd_high_shifted = divide_00084a80nd_high >> (0x20 - quotient_final & 0xff);\n        divisor_high_16bit = divisor >> 0x10;\n        divide_00084a80nd_low_16bit = divide_00084a80nd_high_shifted / divisor_high_16bit;\n        divisor_low_16bit = divisor & 0xffff;\n        quotient2 = divisor_low_16bit * divide_00084a80nd_low_16bit;\n        divide_00084a80nd_shifted = divide_00084a80nd >> (0x20 - quotient_final & 0xff) | divide_00084a80nd_high << (quotient_final & 0xff);\n        divide_00084a80nd_high_shifted = divide_00084a80nd_shifted >> 0x10 | (divide_00084a80nd_high_shifted - divisor_high_16bit * divide_00084a80nd_low_16bit) * 0x10000;\n        divide_00084a80nd = divide_00084a80nd << (quotient_final & 0xff);\n        quotient_final = divide_00084a80nd_low_16bit;\n        if (divide_00084a80nd_high_shifted <= quotient2 && quotient2 - divide_00084a80nd_high_shifted != 0) {\n          carry_flag = CARRY4(divide_00084a80nd_high_shifted,divisor);\n          divide_00084a80nd_high_shifted = divide_00084a80nd_high_shifted + divisor;\n          quotient_final = divide_00084a80nd_low_16bit - 1;\n          if ((carry_flag == false) && (divide_00084a80nd_high_shifted <= quotient2 && quotient2 - divide_00084a80nd_high_shifted != 0)) {\n            quotient_final = divide_00084a80nd_low_16bit - 2;\n            divide_00084a80nd_high_shifted = divide_00084a80nd_high_shifted + divisor;\n          }\n        }\n        quotient1 = (divide_00084a80nd_high_shifted - quotient2) / divisor_high_16bit;\n        divide_00084a80nd_low_16bit = divisor_low_16bit * quotient1;\n        divide_00084a80nd_high = divide_00084a80nd_shifted & 0xffff | ((divide_00084a80nd_high_shifted - quotient2) - divisor_high_16bit * quotient1) * 0x10000;\n        quotient2 = quotient1;\n        if (divide_00084a80nd_high <= divide_00084a80nd_low_16bit && divide_00084a80nd_low_16bit - divide_00084a80nd_high != 0) {\n          carry_flag = CARRY4(divide_00084a80nd_high,divisor);\n          divide_00084a80nd_high = divide_00084a80nd_high + divisor;\n          quotient2 = quotient1 - 1;\n          if ((carry_flag == false) && (divide_00084a80nd_high <= divide_00084a80nd_low_16bit && divide_00084a80nd_low_16bit - divide_00084a80nd_high != 0)) {\n            quotient2 = quotient1 - 2;\n            divide_00084a80nd_high = divide_00084a80nd_high + divisor;\n          }\n        }\n        divide_00084a80nd_high = divide_00084a80nd_high - divide_00084a80nd_low_16bit;\n        quotient2 = quotient2 | quotient_final << 0x10;\n      }\n      divide_00084a80nd_low_16bit = divide_00084a80nd_high / divisor_high_16bit;\n      divide_00084a80nd_high_shifted = divisor_low_16bit * divide_00084a80nd_low_16bit;\n      divide_00084a80nd_shifted = divide_00084a80nd >> 0x10 | (divide_00084a80nd_high - divisor_high_16bit * divide_00084a80nd_low_16bit) * 0x10000;\n      quotient_final = divide_00084a80nd_low_16bit;\n      if (divide_00084a80nd_shifted <= divide_00084a80nd_high_shifted && divide_00084a80nd_high_shifted - divide_00084a80nd_shifted != 0) {\n        carry_flag = CARRY4(divide_00084a80nd_shifted,divisor);\n        divide_00084a80nd_shifted = divide_00084a80nd_shifted + divisor;\n        quotient_final = divide_00084a80nd_low_16bit - 1;\n        if ((carry_flag == false) && (divide_00084a80nd_shifted <= divide_00084a80nd_high_shifted && divide_00084a80nd_high_shifted - divide_00084a80nd_shifted != 0)) {\n          quotient_final = divide_00084a80nd_low_16bit - 2;\n          divide_00084a80nd_shifted = divide_00084a80nd_shifted + divisor;\n        }\n      }\n      divide_00084a80nd_low_16bit = (divide_00084a80nd_shifted - divide_00084a80nd_high_shifted) / divisor_high_16bit;\n      divisor_low_16bit = divisor_low_16bit * divide_00084a80nd_low_16bit;\n      divide_00084a80nd_shifted = divide_00084a80nd & 0xffff | ((divide_00084a80nd_shifted - divide_00084a80nd_high_shifted) - divisor_high_16bit * divide_00084a80nd_low_16bit) * 0x10000;\n      divisor_high_16bit = divide_00084a80nd_low_16bit;\n      if (divide_00084a80nd_shifted <= divisor_low_16bit && divisor_low_16bit - divide_00084a80nd_shifted != 0) {\n        divisor_high_16bit = divide_00084a80nd_low_16bit - 1;\n        if ((CARRY4(divide_00084a80nd_shifted,divisor) == false) &&\n           (divide_00084a80nd_shifted + divisor <= divisor_low_16bit && divisor_low_16bit - (divide_00084a80nd_shifted + divisor) != 0)) {\n          divisor_high_16bit = divide_00084a80nd_low_16bit - 2;\n        }\n      }\n      return CONCAT44(quotient2,divisor_high_16bit | quotient_final << 0x10);\n    }\n    quotient_final = count_leading_zeroes(divisor);\n    if (quotient_final != 0) {\n      quotient2 = divide_00084a80nd >> (0x20 - quotient_final & 0xff);\n      divisor = divisor << (quotient_final & 0xff);\n      divide_00084a80nd = divide_00084a80nd << (quotient_final & 0xff);\n      divide_00084a80nd_high = quotient2 | divide_00084a80nd_high << (quotient_final & 0xff);\n    }\n    quotient2 = divisor >> 0x10;\n    divisor_high_16bit = divide_00084a80nd_high / quotient2;\n    divisor_low_16bit = (divisor & 0xffff) * divisor_high_16bit;\n    divide_00084a80nd_low_16bit = divide_00084a80nd >> 0x10 | (divide_00084a80nd_high - quotient2 * divisor_high_16bit) * 0x10000;\n    quotient_final = divisor_high_16bit;\n    if (divide_00084a80nd_low_16bit <= divisor_low_16bit && divisor_low_16bit - divide_00084a80nd_low_16bit != 0) {\n      carry_flag = CARRY4(divide_00084a80nd_low_16bit,divisor);\n      divide_00084a80nd_low_16bit = divide_00084a80nd_low_16bit + divisor;\n      quotient_final = divisor_high_16bit - 1;\n      if ((carry_flag == false) && (divide_00084a80nd_low_16bit <= divisor_low_16bit && divisor_low_16bit - divide_00084a80nd_low_16bit != 0)) {\n        quotient_final = divisor_high_16bit - 2;\n        divide_00084a80nd_low_16bit = divide_00084a80nd_low_16bit + divisor;\n      }\n    }\n    divide_00084a80nd_shifted = (divide_00084a80nd_low_16bit - divisor_low_16bit) / quotient2;\n    divisor_high_16bit = (divisor & 0xffff) * divide_00084a80nd_shifted;\n    divisor_low_16bit = divide_00084a80nd & 0xffff | ((divide_00084a80nd_low_16bit - divisor_low_16bit) - quotient2 * divide_00084a80nd_shifted) * 0x10000;\n    quotient2 = divide_00084a80nd_shifted;\n    if (divisor_low_16bit <= divisor_high_16bit && divisor_high_16bit - divisor_low_16bit != 0) {\n      quotient2 = divide_00084a80nd_shifted - 1;\n      if ((CARRY4(divisor_low_16bit,divisor) == false) &&\n         (divisor_low_16bit + divisor <= divisor_high_16bit && divisor_high_16bit - (divisor_low_16bit + divisor) != 0)) {\n        quotient2 = divide_00084a80nd_shifted - 2;\n      }\n    }\n    quotient_final = quotient2 | quotient_final << 0x10;\n    quotient2 = 0;\n  }\n  else {\n    if (divide_00084a80nd_high < divisor_high) {\n      return 0;\n    }\n    quotient_final = count_leading_zeroes(divisor_high);\n    if (quotient_final == 0) {\n      if ((divisor_high < divide_00084a80nd_high) || (quotient2 = quotient_final, divisor <= divide_00084a80nd)) {\n        return 1;\n      }\n    }\n    else {\n      divisor_high_16bit = 0x20 - quotient_final;\n      quotient2 = divide_00084a80nd_high >> (divisor_high_16bit & 0xff);\n      divisor_low_16bit = divisor_high << (quotient_final & 0xff) | divisor >> (divisor_high_16bit & 0xff);\n      divide_00084a80nd_low_16bit = divisor_low_16bit >> 0x10;\n      quotient1 = quotient2 / divide_00084a80nd_low_16bit;\n      divide_00084a80nd_shifted = (divisor_low_16bit & 0xffff) * quotient1;\n      divide_00084a80nd_high_shifted = divide_00084a80nd >> (divisor_high_16bit & 0xff) | divide_00084a80nd_high << (quotient_final & 0xff);\n      divisor_high_16bit = divide_00084a80nd_high_shifted >> 0x10 | (quotient2 - divide_00084a80nd_low_16bit * quotient1) * 0x10000;\n      quotient2 = quotient1;\n      if (divisor_high_16bit <= divide_00084a80nd_shifted && divide_00084a80nd_shifted - divisor_high_16bit != 0) {\n        carry_flag = CARRY4(divisor_high_16bit,divisor_low_16bit);\n        divisor_high_16bit = divisor_high_16bit + divisor_low_16bit;\n        quotient2 = quotient1 - 1;\n        if ((carry_flag == false) && (divisor_high_16bit <= divide_00084a80nd_shifted && divide_00084a80nd_shifted - divisor_high_16bit != 0)) {\n          quotient2 = quotient1 - 2;\n          divisor_high_16bit = divisor_high_16bit + divisor_low_16bit;\n        }\n      }\n      quotient1 = (divisor_high_16bit - divide_00084a80nd_shifted) / divide_00084a80nd_low_16bit;\n      temp = (divisor_low_16bit & 0xffff) * quotient1;\n      divide_00084a80nd_low_16bit = divide_00084a80nd_high_shifted & 0xffff | ((divisor_high_16bit - divide_00084a80nd_shifted) - divide_00084a80nd_low_16bit * quotient1) * 0x10000;\n      divisor_high_16bit = quotient1;\n      if (divide_00084a80nd_low_16bit <= temp && temp - divide_00084a80nd_low_16bit != 0) {\n        carry_flag = CARRY4(divide_00084a80nd_low_16bit,divisor_low_16bit);\n        divide_00084a80nd_low_16bit = divide_00084a80nd_low_16bit + divisor_low_16bit;\n        divisor_high_16bit = quotient1 - 1;\n        if ((carry_flag == false) && (divide_00084a80nd_low_16bit <= temp && temp - divide_00084a80nd_low_16bit != 0)) {\n          divisor_high_16bit = quotient1 - 2;\n          divide_00084a80nd_low_16bit = divide_00084a80nd_low_16bit + divisor_low_16bit;\n        }\n      }\n      divisor_high_16bit = divisor_high_16bit | quotient2 << 0x10;\n      lVar1 = (ulonglong)divisor_high_16bit * (ulonglong)(divisor << (quotient_final & 0xff));\n      quotient2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((divide_00084a80nd_low_16bit - temp < quotient2) ||\n         ((divide_00084a80nd_low_16bit - temp == quotient2 && (divide_00084a80nd << (quotient_final & 0xff) < (uint)lVar1)))) {\n        quotient_final = divisor_high_16bit - 1;\n        quotient2 = 0;\n      }\n      else {\n        quotient_final = divisor_high_16bit;\n        quotient2 = 0;\n      }\n    }\n  }\n  return CONCAT44(quotient2,quotient_final);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084a80",
            "calling": [
                "__gnu_uldivmod_helper"
            ],
            "imported": false,
            "current_name": "divide_00084a80"
        },
        "FUN_0008014c": {
            "renaming": {
                "FUN_0008014c": "call_afl_if_no_hypercall_0008014c",
                "ticks": "num_ticks",
                "uVar1": "result",
                "PTR_noHyperCall_00080160": "no_hypercall_ptr",
                "aflCall": "call_afl"
            },
            "code": "int call_afl_if_no_hypercall_0008014c(int ticks)\n{\n  uint32_t result;\n  if (*(int *)PTR_noHyperCall_00080160 == 0) {\n    result = call_afl(1, ticks, 0);\n    return result;\n  }\n  return 0;\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008014c",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "call_afl_if_no_hypercall_0008014c"
        },
        "FUN_00081c54": {
            "renaming": {
                "FUN_00081c54": "compareFloats_00081c54",
                "param_1": "firstNumber",
                "param_2": "secondNumber",
                "__aeabi_cfcmpeq": "areEqual"
            },
            "code": "void compareFloats_00081c54(float firstNumber, float secondNumber)\n{\n  bool areEqual = (firstNumber == secondNumber);\n  return;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c54",
            "calling": [
                "__aeabi_fcmpge",
                "__aeabi_fcmpgt"
            ],
            "imported": false,
            "current_name": "compareFloats_00081c54"
        },
        "FUN_0008163a": {
            "renaming": {
                "String::FUN_0008163a": "check_buffer_capacity",
                "this": "str",
                "size": "new_size",
                "uVar1": "success",
                "changeBuffer": "change_buffer",
                "FUN_0008163a": "check_buffer_capacity_0008163a"
            },
            "code": "uchar check_buffer_capacity_0008163a(String *str,uint new_size)\\n{\\n  uchar success = 1;\\n  if ((str->buffer == (char *)0x0) || (str->capacity < new_size)) {\\n    success = change_buffer(str,new_size);\\n    if (success == 0) {\\n      return 0;\\n    }\\n    if (str->len == 0) {\\n      *str->buffer = \"\\0\";\\n    }\\n  }\\n  return 1;\\n}",
            "called": [
                "changeBuffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008163a",
            "calling": [
                "copy"
            ],
            "imported": false,
            "current_name": "check_buffer_capacity_0008163a"
        },
        "FUN_00081aac": {
            "renaming": {
                "FUN_00081aac": "calculate_float_00081aac",
                "param_1": "float_1",
                "param_2": "float_2",
                "param_3": "undefined",
                "param_4": "float_3",
                "uVar1": "temp_1",
                "uVar2": "temp_2",
                "iVar3": "temp_3",
                "uVar4": "temp_4",
                "iVar5": "temp_5",
                "uVar6": "temp_6",
                "bVar7": "bool_1",
                "bVar8": "bool_2",
                "bVar9": "bool_3"
            },
            "code": "\nuint calculate_float_00081aac(uint float_1,uint float_2,undefined4 undefined,uint float_3)\n\n{\n  uint temp_1;\n  uint temp_2;\n  int temp_3;\n  uint temp_4;\n  int temp_5;\n  uint temp_6;\n  bool bool_1;\n  bool bool_2;\n  bool bool_3;\n  \n  temp_2 = float_1 >> 0x17 & 0xff;\n  bool_1 = temp_2 == 0;\n  if (!bool_1) {\n    float_3 = float_2 >> 0x17 & 0xff;\n    bool_1 = float_3 == 0;\n  }\n  if (!bool_1) {\n    bool_1 = temp_2 == 0xff;\n  }\n  if (!bool_1) {\n    bool_1 = float_3 == 0xff;\n  }\n  if (bool_1) {\n    float_3 = float_2 >> 0x17 & 0xff;\n    temp_6 = float_1;\n    if (temp_2 == 0xff) {\n      if (((float_1 & 0x7fffff) != 0) || (temp_6 = float_2, float_3 == 0xff)) {\nLAB_00081aa2:\n        return temp_6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (float_3 == 0xff) {\n        temp_6 = float_2;\n        if ((float_2 & 0x7fffff) == 0) {\nLAB_00081a58:\n          return (float_1 ^ float_2) & 0x80000000;\n        }\n        goto LAB_00081aa2;\n      }\n      bool_1 = (float_1 & 0x7fffffff) == 0;\n      if (!bool_1) {\n        bool_1 = (float_2 & 0x7fffffff) == 0;\n      }\n      if (!bool_1) {\n        bool_1 = temp_2 == 0;\n        temp_6 = float_1 & 0x80000000;\n        while( true ) {\n          if (bool_1) {\n            float_1 = float_1 << 1;\n            bool_1 = (float_1 & 0x800000) == 0;\n          }\n          if (!bool_1) break;\n          temp_2 = temp_2 - 1;\n        }\n        float_1 = float_1 | temp_6;\n        bool_1 = float_3 == 0;\n        temp_6 = float_2 & 0x80000000;\n        while( true ) {\n          if (bool_1) {\n            float_2 = float_2 << 1;\n            bool_1 = (float_2 & 0x800000) == 0;\n          }\n          if (!bool_1) break;\n          float_3 = float_3 - 1;\n        }\n        float_2 = float_2 | temp_6;\n        goto LAB_00081ac4;\n      }\n      if ((float_1 & 0x7fffffff) == 0) {\n        if ((float_2 & 0x7fffffff) != 0) goto LAB_00081a58;\n        goto LAB_00081aa2;\n      }\n    }\n    float_1 = float_1 ^ float_2;\n  }\n  else {\nLAB_00081ac4:\n    temp_3 = temp_2 - float_3;\n    if (float_2 << 9 == 0) {\n      float_1 = (float_1 ^ float_2) & 0x80000000 | float_1 & 0x7fffff;\n      bool_3 = SCARRY4(temp_3,0x7f);\n      temp_5 = temp_3 + 0x7f;\n      bool_1 = temp_5 < 0;\n      bool_2 = temp_5 == 0;\n      if (!bool_2 && bool_1 == bool_3) {\n        bool_3 = SBORROW4(0xff,temp_5);\n        bool_1 = 0xff - temp_5 < 0;\n        bool_2 = temp_5 == 0xff;\n      }\n      if (!bool_2 && bool_1 == bool_3) {\n        float_1 = float_1 | temp_5 * 0x800000;\n      }\n      if (!bool_2 && bool_1 == bool_3) {\n        return float_1;\n      }\n      float_1 = float_1 | 0x800000;\n      temp_2 = 0;\n      bool_2 = SBORROW4(temp_5,1);\n      temp_4 = temp_3 + 0x7e;\n      bool_1 = temp_4 == 0;\n      temp_6 = temp_4;\n    }\n    else {\n      temp_1 = (float_2 << 9) >> 4 | 0x10000000;\n      temp_2 = (float_1 << 9) >> 4 | 0x10000000;\n      float_1 = (float_1 ^ float_2) & 0x80000000;\n      bool_1 = temp_1 <= temp_2;\n      if (!bool_1) {\n        temp_2 = temp_2 << 1;\n      }\n      temp_4 = temp_3 + 0x7d + (uint)bool_1;\n      temp_6 = 0x800000;\n      do {\n        if (temp_1 <= temp_2) {\n          temp_2 = temp_2 - temp_1;\n          float_1 = float_1 | temp_6;\n        }\n        bool_1 = temp_1 >> 1 <= temp_2;\n        if (bool_1) {\n          temp_2 = temp_2 - (temp_1 >> 1);\n        }\n        if (bool_1) {\n          float_1 = float_1 | temp_6 >> 1;\n        }\n        bool_1 = temp_1 >> 2 <= temp_2;\n        if (bool_1) {\n          temp_2 = temp_2 - (temp_1 >> 2);\n        }\n        if (bool_1) {\n          float_1 = float_1 | temp_6 >> 2;\n        }\n        bool_1 = temp_1 >> 3 <= temp_2;\n        if (bool_1) {\n          temp_2 = temp_2 - (temp_1 >> 3);\n        }\n        if (bool_1) {\n          float_1 = float_1 | temp_6 >> 3;\n        }\n        temp_2 = temp_2 * 0x10;\n        bool_1 = temp_2 == 0;\n        if (!bool_1) {\n          temp_6 = temp_6 >> 4;\n          bool_1 = temp_6 == 0;\n        }\n      } while (!bool_1);\n      bool_2 = SBORROW4(temp_4,0xfd);\n      bool_1 = temp_4 == 0xfd;\n      temp_6 = temp_4 - 0xfd;\n      if (temp_4 < 0xfe) {\n        float_1 = float_1 + temp_4 * 0x800000 + (uint)(temp_1 <= temp_2);\n        if (temp_2 - temp_1 == 0) {\n          float_1 = float_1 & 0xfffffffe;\n        }\n        return float_1;\n      }\n    }\n    if (bool_1 || (int)temp_6 < 0 != bool_2) {\n      bool_1 = (int)(temp_4 + 0x19) < 0;\n      if (temp_4 == 0xffffffe7 || bool_1 != SCARRY4(temp_4,0x19)) {\n        float_1 = float_1 & 0x80000000;\n      }\n      if (temp_4 == 0xffffffe7 || bool_1 != SCARRY4(temp_4,0x19)) {\n        return float_1;\n      }\n      temp_6 = (float_1 << 1) >> (-temp_4 & 0xff);\n      temp_4 = float_1 << (temp_4 + 0x20 & 0xff);\n      temp_6 = ((uint)((float_1 & 0x80000000) != 0) << 0x1f | temp_6 >> 1) + (uint)((byte)temp_6 & 1);\n      if ((temp_2 | temp_4 << 1) == 0) {\n        temp_6 = temp_6 & ~(temp_4 >> 0x1f);\n      }\n      return temp_6;\n    }\n  }\n  return float_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081aac",
            "calling": [],
            "imported": false,
            "current_name": "calculate_float_00081aac"
        },
        "FUN_000825a0": {
            "renaming": {
                "FUN_000825a0": "allocate_memory_000825a0",
                "__ptr": "memory_ptr",
                "__size": "memory_size",
                "pvVar1": "allocated_memory"
            },
            "code": "void * allocate_memory_000825a0(void *memory_ptr, size_t memory_size)\n{\n  void *allocated_memory;\n  allocated_memory = (void *)_allocate_memory_000825a0_r(*(undefined4 *)PTR__impure_ptr_000825ac, memory_ptr, memory_size);\n  return allocated_memory;\n}",
            "called": [
                "_realloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825a0",
            "calling": [
                "changeBuffer"
            ],
            "imported": false,
            "current_name": "allocate_memory_000825a0"
        },
        "FUN_000815d4": {
            "renaming": {
                "FUN_000815d4::FUN_000815d4": "constructor",
                "this": "self",
                "Usart": "Uart",
                "dwIrq": "irq",
                "dwId": "id",
                "pRx_buffer": "rx_buffer",
                "pTx_buffer": "tx_buffer",
                "PTR_PTR_write_1_000815f4": "PTR_PTR_write_1_000815f4",
                "_pUsart": "_pUsart",
                "UARTClass": "UARTClass",
                "super_UARTClass": "super_UARTClass",
                "FUN_000815d4": "UARTClass_000815d4"
            },
            "code": "UARTClass_000815d4::UARTClass_000815d4(UARTClass_000815d4 *uart_class, Uart *usart, IRQn_Type irq, uint32_t id, RingBuffer *rx_buffer, RingBuffer *tx_buffer){\n  super_UARTClass_000815d4 = uart_class;\n  _pUsart = usart;\n  _irq = irq;\n  _id = id;\n  _pRx_buffer = rx_buffer;\n  _pTx_buffer = tx_buffer;\n}\n\nUARTClass_000815d4 * __thiscall constructor(UARTClass_000815d4 *this, Uart *usart, IRQn_Type irq, uint32_t id, RingBuffer *rx_buffer, RingBuffer *tx_buffer){\n  UARTClass_000815d4::UARTClass_000815d4(&this->super_UARTClass_000815d4, usart, irq, id, rx_buffer, tx_buffer);\n  *(undefined **)&this->super_UARTClass_000815d4 = PTR_PTR_write_1_000815f4;\n  this->_pUsart = usart;\n  return this;\n}",
            "called": [
                "UARTClass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815d4",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "UARTClass_000815d4"
        },
        "FUN_00080d24": {
            "renaming": {
                "FUN_00080d24": "set_value_at_offset_00080d24",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "offset",
                "*(undefined4 *)(param_1 + 100)": "*(int *)(base_address + 100)",
                "*(undefined4 *)(param_1 + 0x60)": "*(int *)(base_address + 96)"
            },
            "code": "void set_value_at_offset_00080d24(int base_address, int value, int offset) {\n  if (offset != 0) {\n    *(int *)(base_address + 100) = value;\n    return;\n  }\n  *(int *)(base_address + 96) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d24",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_00080d24"
        },
        "FUN_00081e14": {
            "renaming": {
                "FUN_00081e14": "allocate_memory_00081e14",
                "param_1": "lock",
                "param_2": "size",
                "puVar1": "ptr",
                "iVar2": "i",
                "uVar3": "mask",
                "uVar4": "size_aligned",
                "puVar5": "ptr_next",
                "iVar6": "index",
                "uVar7": "size_next",
                "uVar8": "size_prev",
                "uVar9": "size_remaining",
                "puVar10": "ptr_curr",
                "puVar11": "ptr_prev",
                "puVar12": "ptr_first",
                "puVar13": "ptr_last",
                "puVar14": "ptr_result",
                "uVar15": "size_adjusted",
                "puVar16": "ptr_temp",
                "puVar17": "ptr_temp2"
            },
            "code": "\nint * allocate_memory_00081e14(undefined4 *lock,uint size)\n\n{\n  undefined *ptr;\n  int i;\n  uint mask;\n  uint size_aligned;\n  undefined *ptr_next;\n  int index;\n  uint size_next;\n  uint size_prev;\n  uint size_remaining;\n  undefined4 *ptr_curr;\n  undefined *ptr_prev;\n  undefined *ptr_first;\n  undefined *ptr_last;\n  undefined4 *ptr_result;\n  uint size_adjusted;\n  undefined4 *ptr_temp;\n  undefined *ptr_temp2;\n  \n  if (size + 0xb < 0x17) {\n    size_adjusted = 0x10;\n    if (0x10 < size) goto LAB_00081e7a;\n  }\n  else {\n    size_adjusted = size + 0xb & 0xfffffff8;\n    if (((int)size_adjusted < 0) || (size_adjusted < size)) {\nLAB_00081e7a:\n      *lock = 0xc;\n      return (int *)0x0;\n    }\n  }\n  __malloc_lock(lock);\n  ptr = PTR___malloc_av__00082140;\n  if (size_adjusted < 0x1f8) {\n    ptr_last = *(undefined **)(PTR___malloc_av__00082140 + size_adjusted + 0xc);\n    if ((ptr_last != PTR___malloc_av__00082140 + size_adjusted) ||\n       (ptr_first = ptr_last + 8, ptr_last = *(undefined **)(ptr_last + 0x14), ptr_first != ptr_last)) {\n      size_remaining = *(uint *)(ptr_last + 4);\n      index = *(int *)(ptr_last + 0xc);\n      size_adjusted = *(uint *)(ptr_last + (size_remaining & 0xfffffffc) + 4);\n      i = *(int *)(ptr_last + 8);\n      *(int *)(i + 0xc) = index;\n      *(int *)(index + 8) = i;\n      *(uint *)(ptr_last + (size_remaining & 0xfffffffc) + 4) = size_adjusted | 1;\n      __malloc_unlock(lock);\n      return (int *)(ptr_last + 8);\n    }\n    size_remaining = (size_adjusted >> 3) + 2;\n  }\n  else {\n    size_remaining = size_adjusted >> 9;\n    if (size_remaining == 0) {\n      index = 0x7e;\n      i = 0x3f;\n    }\n    else if (size_remaining < 5) {\n      i = (size_adjusted >> 6) + 0x38;\n      index = i * 2;\n    }\n    else if (size_remaining < 0x15) {\n      i = size_remaining + 0x5b;\n      index = i * 2;\n    }\n    else if (size_remaining < 0x55) {\n      i = (size_adjusted >> 0xc) + 0x6e;\n      index = i * 2;\n    }\n    else if (size_remaining < 0x155) {\n      i = (size_adjusted >> 0xf) + 0x77;\n      index = i * 2;\n    }\n    else if (size_remaining < 0x555) {\n      i = (size_adjusted >> 0x12) + 0x7c;\n      index = i * 2;\n    }\n    else {\n      index = 0xfc;\n      i = 0x7e;\n    }\n    for (ptr_last = *(undefined **)(PTR___malloc_av__00082140 + index * 4 + 0xc);\n        PTR___malloc_av__00082140 + index * 4 != ptr_last; ptr_last = *(undefined **)(ptr_last + 0xc))\n    {\n      size_remaining = *(uint *)(ptr_last + 4) & 0xfffffffc;\n      if (0xf < (int)(size_remaining - size_adjusted)) {\n        i = i + -1;\n        break;\n      }\n      if (-1 < (int)(size_remaining - size_adjusted)) {\n        size_adjusted = *(uint *)(ptr_last + size_remaining + 4);\n        index = *(int *)(ptr_last + 0xc);\n        i = *(int *)(ptr_last + 8);\n        *(int *)(i + 0xc) = index;\n        *(int *)(index + 8) = i;\n        *(uint *)(ptr_last + size_remaining + 4) = size_adjusted | 1;\n        __malloc_unlock(lock);\n        return (int *)(ptr_last + 8);\n      }\n    }\n    size_remaining = i + 1;\n  }\n  ptr_last = *(undefined **)(PTR___malloc_av__00082140 + 0x10);\n  ptr_first = PTR___malloc_av__00082140 + 8;\n  if (ptr_last == ptr_first) {\n    mask = *(uint *)(PTR___malloc_av__00082140 + 4);\n  }\n  else {\n    mask = *(uint *)(ptr_last + 4);\n    size_aligned = mask & 0xfffffffc;\n    size_next = size_aligned - size_adjusted;\n    if (0xf < (int)size_next) {\n      ptr_next = ptr_last + size_adjusted;\n      *(uint *)(ptr_last + 4) = size_adjusted | 1;\n      *(undefined **)(ptr + 0x14) = ptr_next;\n      *(undefined **)(ptr + 0x10) = ptr_next;\n      *(undefined **)(ptr_next + 0xc) = ptr_first;\n      *(undefined **)(ptr_next + 8) = ptr_first;\n      *(uint *)(ptr_next + 4) = size_next | 1;\n      *(uint *)(ptr_next + size_next) = size_next;\n      __malloc_unlock(lock);\n      return (int *)(ptr_last + 8);\n    }\n    *(undefined **)(PTR___malloc_av__00082140 + 0x14) = ptr_first;\n    *(undefined **)(ptr + 0x10) = ptr_first;\n    if (-1 < (int)size_next) {\n      *(uint *)(ptr_last + size_aligned + 4) = *(uint *)(ptr_last + size_aligned + 4) | 1;\n      __malloc_unlock(lock);\n      return (int *)(ptr_last + 8);\n    }\n    if (size_aligned < 0x200) {\n      ptr_next = ptr + (mask & 0xfffffff8);\n      i = *(int *)(ptr_next + 8);\n      mask = 1 << ((int)(mask >> 3) >> 2 & 0xffU) | *(uint *)(ptr + 4);\n      *(int *)(ptr_last + 8) = i;\n      *(undefined **)(ptr_last + 0xc) = ptr_next;\n      *(uint *)(ptr + 4) = mask;\n      *(undefined **)(ptr_next + 8) = ptr_last;\n      *(undefined **)(i + 0xc) = ptr_last;\n    }\n    else {\n      size_next = mask >> 9;\n      if (size_next < 5) {\n        index = (mask >> 6) + 0x38;\n        i = index * 2;\n      }\n      else if (size_next < 0x15) {\n        index = size_next + 0x5b;\n        i = index * 2;\n      }\n      else if (size_next < 0x55) {\n        index = (mask >> 0xc) + 0x6e;\n        i = index * 2;\n      }\n      else if (size_next < 0x155) {\n        index = (mask >> 0xf) + 0x77;\n        i = index * 2;\n      }\n      else if (size_next < 0x555) {\n        index = (mask >> 0x12) + 0x7c;\n        i = index * 2;\n      }\n      else {\n        i = 0xfc;\n        index = 0x7e;\n      }\n      ptr_next = ptr + i * 4;\n      ptr_temp2 = *(undefined **)(ptr_next + 8);\n      if (ptr_temp2 == ptr_next) {\n        mask = *(uint *)(PTR___malloc_av__00082348 + 4) | 1 << (index >> 2 & 0xffU);\n        *(uint *)(PTR___malloc_av__00082348 + 4) = mask;\n        ptr_prev = ptr_temp2;\n      }\n      else {\n        do {\n          ptr_prev = ptr_temp2;\n          if ((*(uint *)(ptr_temp2 + 4) & 0xfffffffc) <= size_aligned) break;\n          ptr_temp2 = *(undefined **)(ptr_temp2 + 8);\n          ptr_prev = ptr_temp2;\n        } while (ptr_next != ptr_temp2);\n        ptr_temp2 = *(undefined **)(ptr_prev + 0xc);\n        mask = *(uint *)(ptr + 4);\n      }\n      *(undefined **)(ptr_last + 0xc) = ptr_temp2;\n      *(undefined **)(ptr_last + 8) = ptr_prev;\n      *(undefined **)(ptr_temp2 + 8) = ptr_last;\n      *(undefined **)(ptr_prev + 0xc) = ptr_last;\n    }\n  }\n  size_aligned = 1 << ((int)size_remaining >> 2 & 0xffU);\n  if (size_aligned <= mask) {\n    if ((mask & size_aligned) == 0) {\n      size_remaining = size_remaining & 0xfffffffc;\n      do {\n        size_aligned = size_aligned << 1;\n        size_remaining = size_remaining + 4;\n      } while ((mask & size_aligned) == 0);\n    }\n    do {\n      ptr_temp = (undefined4 *)(ptr + size_remaining * 8);\n      ptr_result = ptr_temp;\n      mask = size_remaining;\n      do {\n        for (ptr_curr = (undefined4 *)ptr_result[3]; ptr_result != ptr_curr;\n            ptr_curr = (undefined4 *)ptr_curr[3]) {\n          size_next = ptr_curr[1] & 0xfffffffc;\n          size_prev = size_next - size_adjusted;\n          if (0xf < (int)size_prev) {\n            index = ptr_curr[2];\n            i = ptr_curr[3];\n            ptr_last = (undefined *)(size_adjusted + (int)ptr_curr);\n            ptr_curr[1] = size_adjusted | 1;\n            *(int *)(index + 0xc) = i;\n            *(int *)(i + 8) = index;\n            *(undefined **)(ptr + 0x14) = ptr_last;\n            *(undefined **)(ptr + 0x10) = ptr_last;\n            *(undefined **)(ptr_last + 0xc) = ptr_first;\n            *(undefined **)(ptr_last + 8) = ptr_first;\n            *(uint *)(ptr_last + 4) = size_prev | 1;\n            *(uint *)(ptr_last + size_prev) = size_prev;\n            __malloc_unlock(lock);\n            return ptr_curr + 2;\n          }\n          if (-1 < (int)size_prev) {\n            i = ptr_curr[2];\n            index = ptr_curr[3];\n            *(uint *)((int)ptr_curr + size_next + 4) = *(uint *)((int)ptr_curr + size_next + 4) | 1;\n            *(int *)(i + 0xc) = index;\n            *(int *)(index + 8) = i;\n            __malloc_unlock(lock);\n            return ptr_curr + 2;\n          }\n        }\n        mask = mask + 1;\n        ptr_result = ptr_result + 2;\n      } while ((mask & 3) != 0);\n      do {\n        size_next = size_remaining & 3;\n        ptr_result = ptr_temp + -2;\n        size_remaining = size_remaining - 1;\n        if (size_next == 0) {\n          size_next = *(uint *)(ptr + 4) & ~size_aligned;\n          *(uint *)(ptr + 4) = size_next;\n          goto LAB_00082262;\n        }\n        ptr_temp = (undefined4 *)*ptr_temp;\n      } while (ptr_temp == ptr_result);\n      size_next = *(uint *)(ptr + 4);\nLAB_00082262:\n      size_aligned = size_aligned * 2;\n      if ((size_next <= size_aligned && size_aligned - size_next != 0) || (size_remaining = mask, size_aligned == 0)) break;\n      for (; (size_next & size_aligned) == 0; size_aligned = size_aligned << 1) {\n        size_remaining = size_remaining + 4;\n      }\n    } while( true );\n  }\n  ptr_last = PTR___malloc_sbrk_base_00082148;\n  ptr_first = *(undefined **)(ptr + 8);\n  size_remaining = *(uint *)(ptr_first + 4) & 0xfffffffc;\n  if ((size_adjusted <= size_remaining) && (mask = size_remaining - size_adjusted, ptr_next = ptr_first, 0xf < (int)mask))\n  goto LAB_0008211e;\n  ptr_temp2 = ptr_first + size_remaining;\n  if (*(int *)PTR___malloc_sbrk_base_00082148 == -1) {\n    mask = size_adjusted + *(int *)PTR___malloc_top_pad_00082144 + 0x10;\n  }\n  else {\n    mask = size_adjusted + *(int *)PTR___malloc_top_pad_00082144 + 0x100f & 0xfffff000;\n  }\n  ptr_next = (undefined *)_sbrk_r(lock,mask);\n  ptr_prev = PTR___malloc_current_mallinfo_00082154;\n  if ((ptr_next == (undefined *)0xffffffff) || ((ptr_next < ptr_temp2 && (ptr_first != ptr)))) {\n    ptr_next = *(undefined **)(ptr + 8);\n    size_remaining = *(uint *)(ptr_next + 4) & 0xfffffffc;\n  }\n  else {\n    size_aligned = *(int *)PTR___malloc_current_mallinfo_00082154 + mask;\n    *(uint *)PTR___malloc_current_mallinfo_00082154 = size_aligned;\n    if ((ptr_temp2 == ptr_next) && (((uint)ptr_temp2 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(ptr + 8) + 4) = mask + size_remaining | 1;\n    }\n    else {\n      if (*(int *)ptr_last == -1) {\n        *(undefined **)PTR___malloc_sbrk_base_00082148 = ptr_next;\n      }\n      else {\n        *(undefined **)ptr_prev = ptr_next + (size_aligned - (int)ptr_temp2);\n      }\n      size_aligned = (uint)ptr_next & 7;\n      if (size_aligned == 0) {\n        i = 0x1000;\n      }\n      else {\n        ptr_next = ptr_next + (8 - size_aligned);\n        i = 0x1008 - size_aligned;\n      }\n      i = i - ((uint)(ptr_next + mask) & 0xfff);\n      index = _sbrk_r(lock,i);\n      if (index == -1) {\n        mask = 1;\n        i = 0;\n      }\n      else {\n        mask = (index - (int)ptr_next) + i | 1;\n      }\n      size_aligned = *(int *)ptr_prev + i;\n      *(undefined **)(ptr + 8) = ptr_next;\n      *(uint *)ptr_prev = size_aligned;\n      *(uint *)(ptr_next + 4) = mask;\n      ptr_last = PTR___malloc_current_mallinfo_00082154;\n      if (ptr_first != ptr) {\n        if (size_remaining < 0x10) {\n          *(undefined4 *)(ptr_next + 4) = 1;\n          size_remaining = 0;\n          goto LAB_00082108;\n        }\n        size_remaining = size_remaining - 0xc & 0xfffffff8;\n        *(uint *)(ptr_first + 4) = size_remaining | *(uint *)(ptr_first + 4) & 1;\n        *(undefined4 *)(ptr_first + size_remaining + 4) = 5;\n        *(undefined4 *)(ptr_first + size_remaining + 8) = 5;\n        if (0xf < size_remaining) {\n          _free_r(lock,ptr_first + 8);\n          size_aligned = *(uint *)ptr_last;\n        }\n      }\n    }\n    ptr_next = *(undefined **)(ptr + 8);\n    if (*(uint *)PTR___malloc_max_sbrked_mem_0008214c < size_aligned) {\n      *(uint *)PTR___malloc_max_sbrked_mem_0008214c = size_aligned;\n    }\n    if (*(uint *)PTR___malloc_max_total_mem_00082150 < size_aligned) {\n      *(uint *)PTR___malloc_max_total_mem_00082150 = size_aligned;\n    }\n    size_remaining = *(uint *)(ptr_next + 4) & 0xfffffffc;\n  }\nLAB_00082108:\n  mask = size_remaining - size_adjusted;\n  if ((size_remaining < size_adjusted) || ((int)mask < 0x10)) {\n    __malloc_unlock(lock);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  *(uint *)(ptr_next + 4) = size_adjusted | 1;\n  *(undefined **)(ptr + 8) = ptr_next + size_adjusted;\n  *(uint *)(ptr_next + size_adjusted + 4) = mask | 1;\n  __malloc_unlock(lock);\n  return (int *)(ptr_next + 8);\n}\n\n",
            "called": [
                "_free_r",
                "__malloc_lock",
                "_sbrk_r",
                "__malloc_unlock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e14",
            "calling": [
                "__sfvwrite_r",
                "malloc",
                "_realloc_r",
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_00081e14"
        },
        "FUN_000818b8": {
            "renaming": {
                "FUN_000818b8": "calculate_hash_000818b8",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "leading_zeroes",
                "uVar4": "shift_amount",
                "iVar5": "constant",
                "uVar6": "shifted_input1",
                "count_leading_zeroes": "count_leading_zeroes"
            },
            "code": "uint calculate_hash_000818b8(uint input1, uint input2) {\n  uint result = 0;\n\n  if ((input1 | input2) == 0) {\n    return input1;\n  }\n\n  uint temp1 = input1;\n  uint temp2 = input2;\n\n  if (input2 == 0) {\n    temp1 = 0;\n    temp2 = input1;\n  }\n\n  int constant = 0x5b000000;\n  if (input2 == 0) {\n    constant = 0x4b000000;\n  }\n\n  int leading_zeroes = count_leading_zeroes(temp2);\n  uint shift_amount = leading_zeroes - 8;\n  constant = constant + -0x800000 + shift_amount * -0x800000;\n\n  if (leading_zeroes < 8) {\n    uint shifted_input = temp2 << (leading_zeroes + 0x18U & 0xff);\n    temp2 = constant + ((temp2 >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)shifted_input >> 0x1f));\n    if ((temp1 | shifted_input << 1) == 0) {\n      temp2 = temp2 & ~(shifted_input >> 0x1f);\n    }\n    result = temp2;\n  }\n  else {\n    uint shifted_input1 = temp1 << (shift_amount & 0xff);\n    uint shifted_input2 = temp2 << (shift_amount & 0xff);\n    temp2 = constant + shifted_input2 + (temp1 >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < shifted_input1);\n    if (shifted_input1 == 0x80000000) {\n      temp2 = temp2 & 0xfffffffe;\n    }\n    result = temp2;\n  }\n\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000818b8",
            "calling": [],
            "imported": false,
            "current_name": "calculate_hash_000818b8"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "initialize_Modbus_00080164",
                "u32speed": "speed",
                "PTR_Serial_000801ac": "original_serial_pointer",
                "port": "hardware_serial_port",
                "u8txenpin": "transmit_enable_pin",
                "pinMode": "set_pin_mode",
                "digitalWrite": "write_to_pin",
                "u8BufferSize": "buffer_size",
                "u8lastRec": "last_received_data",
                "u16errCnt": "error_count",
                "u16OutCnt": "outgoing_message_count",
                "u16InCnt": "incoming_message_count"
            },
            "code": "void __thiscall initialize_Modbus_00080164(Modbus *this, long speed) {\n    undefined *serial_pointer;\n    int read_status;\n    \n    serial_pointer = PTR_Serial_000801ac;\n    this->port = (HardwareSerial *)PTR_Serial_000801ac;\n    (**(code **)(*(int *)serial_pointer + 0x18))(serial_pointer);\n    \n    if (1 < this->transmit_enable_pin) {\n        pinMode((uint)this->transmit_enable_pin, OUTPUT);\n        digitalWrite((uint)this->transmit_enable_pin, LOW);\n    }\n    \n    do {\n        read_status = (**(code **)(*(int *)this->port + 0xc))();\n    } while (-1 < read_status);\n    \n    this->buffer_size = 0;\n    this->last_received_data = 0;\n    this->error_count = 0;\n    this->outgoing_message_count = 0;\n    this->incoming_message_count = 0;\n    \n    return;\n}",
            "called": [
                "pinMode",
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initialize_Modbus_00080164"
        },
        "FUN_000811cc": {
            "renaming": {
                "FUN_000811cc": "copy_string_000811cc",
                "file_UNUSED": "file",
                "ptr": "source",
                "len": "length",
                "iVar1": "i"
            },
            "code": "int copy_string_000811cc(int file, char *source, int length)\n{\n  int i;\n  for (i = 0; i < length; i++) {\n    do {\n    } while (-1 < *(int *)(DAT_000811ec + 0x14) << 0x1e);\n    *(uint *)(DAT_000811ec + 0x1c) = (uint)(byte)source[i];\n  }\n  return length & ~(length >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811cc",
            "calling": [
                "_write_r"
            ],
            "imported": false,
            "current_name": "copy_string_000811cc"
        },
        "FUN_000846dc": {
            "renaming": {
                "FUN_000846dc": "check_if_terminal_000846dc",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "error_ptr",
                "iVar2": "is_terminal"
            },
            "code": "void check_if_terminal_000846dc(int *error_code, int file_descriptor) {\n    undefined *error_ptr;\n    int is_terminal;\n    error_ptr = PTR_errno_000846fc;\n    *(undefined4 *)PTR_errno_000846fc = 0;\n    is_terminal = _isatty(file_descriptor);\n    if ((is_terminal == -1) && (*(int *)error_ptr != 0)) {\n        *error_code = *(int *)error_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "_isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846dc",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "check_if_terminal_000846dc"
        },
        "FUN_00081be4": {
            "renaming": {
                "FUN_00081be4": "calculate_result_00081be4",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "is_negative",
                "uVar2": "doubled_input_1",
                "uVar3": "doubled_input_2",
                "uVar4": "combined_inputs",
                "bVar5": "is_zero"
            },
            "code": "uint calculate_result_00081be4(uint input_1, uint input_2)\n{\n  bool is_negative;\n  uint doubled_input_1;\n  uint doubled_input_2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  doubled_input_1 = input_1 * 2;\n  doubled_input_2 = input_2 * 2;\n  if (((int)doubled_input_1 >> 0x18 == -1 || (int)doubled_input_2 >> 0x18 == -1) &&\n     ((((int)doubled_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)doubled_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 0xffffffff;\n  }\n  combined_inputs = doubled_input_1 | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = doubled_input_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && doubled_input_2 <= doubled_input_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || doubled_input_2 > doubled_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081be4",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_00081be4"
        },
        "FUN_000815ca": {
            "renaming": {
                "FUN_000815ca": "initializeUSART_000815ca",
                "this": "usartInstance",
                "dwBaudRate": "baudRate"
            },
            "code": "void __thiscall initializeUSART_000815ca(USARTClass *usartInstance, uint32_t baudRate) {\n  UARTClass::init(&usartInstance->super_UARTClass, baudRate, 0x8c0);\n  return;\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815ca",
            "calling": [],
            "imported": false,
            "current_name": "initializeUSART_000815ca"
        },
        "FUN_00081894": {
            "renaming": {
                "FUN_00081894": "calculate_hash_00081894",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "iVar3": "intermediate_value",
                "uVar4": "shift_mask",
                "count_leading_zeroes": "count_leading_zeroes"
            },
            "code": "uint calculate_hash_00081894(uint input)\n{\n    int leading_zeroes = count_leading_zeroes(input);\n    uint shift_amount = leading_zeroes - 8;\n    int intermediate_value = shift_amount * -0x800000 + 0x4a800000;\n    if (leading_zeroes > 7)\n    {\n        uint shift_mask = 0 << (shift_amount & 0xff);\n        uint shifted_input = input << (shift_amount & 0xff);\n        uint carry = (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < shift_mask);\n        uint result = intermediate_value + shifted_input + carry;\n        if (shift_mask == 0x80000000)\n        {\n            result = result & 0xfffffffe;\n        }\n        return result;\n    }\n    else\n    {\n        uint shift_mask = input << (leading_zeroes + 0x18U & 0xff);\n        uint shifted_input = input >> (0x20 - (leading_zeroes + 0x18U) & 0xff);\n        int carry = (int)(shift_mask >> 0x1f);\n        uint result = intermediate_value + shifted_input - carry;\n        if ((shift_mask & 0x7fffffff) == 0)\n        {\n            result = result & ~(shift_mask >> 0x1f);\n        }\n        return result;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081894",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_hash_00081894"
        },
        "FUN_00084248": {
            "renaming": {
                "FUN_00084248": "process_items_00084248",
                "param_1": "num_items",
                "param_2": "item_processor",
                "uVar1": "item_result",
                "iVar2": "item_data",
                "iVar3": "item_count",
                "uVar4": "result",
                "piVar5": "item_ptr"
            },
            "code": "uint process_items_00084248(int num_items, code *item_processor)\n{\n  uint result = 0;\n  int *item_ptr = (int *)(num_items + 0x2e0);\n  if (item_ptr != (int *)0x0) {\n    do {\n      int item_count = item_ptr[1] + -1;\n      int item_data = item_ptr[2];\n      if (-1 < item_count) {\n        do {\n          item_count--;\n          if ((1 < *(ushort *)(item_data + 0xc)) && (*(short *)(item_data + 0xe) != -1)) {\n            uint item_result = (*item_processor)(item_data);\n            result |= item_result;\n          }\n          item_data += 0x68;\n        } while (item_count != -1);\n      }\n      item_ptr = (int *)*item_ptr;\n    } while (item_ptr != (int *)0x0);\n    return result;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084248",
            "calling": [
                "_cleanup_r"
            ],
            "imported": false,
            "current_name": "process_items_00084248"
        },
        "FUN_000845bc": {
            "renaming": {
                "FUN_000845bc": "write_byte_to_buffer_000845bc",
                "param_1": "buffer",
                "param_2": "byte",
                "param_3": "buffer_size",
                "*param_1": "*buffer",
                "*param_2": "*byte",
                "undefined4": "int",
                "undefined": "char",
                "0x0": "NULL",
                "0x100": "256",
                "(char)": "(char)"
            },
            "code": "int write_byte_to_buffer_000845bc(int* buffer, char* byte, unsigned int buffer_size) {\n    if (byte == NULL) {\n        return 0;\n    }\n    if (buffer_size < 256) {\n        *byte = (char)buffer_size;\n        return 1;\n    }\n    *buffer = 138;\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845bc",
            "calling": [
                "_wcrtomb_r"
            ],
            "imported": false,
            "current_name": "write_byte_to_buffer_000845bc"
        },
        "FUN_00081412": {
            "renaming": {
                "FUN_00081412": "readByte_00081412",
                "this": "uartInstance",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__nbytes": "numBytes",
                "pRVar2": "rxBuffer",
                "bVar1": "byteRead"
            },
            "code": "ssize_t __thiscall UARTClass::readByte_00081412(UARTClass *this,int fileDescriptor,void *buffer,size_t numBytes){\n  byte byteRead;\n  RingBuffer *rxBuffer;\n  \n  rxBuffer = this->_rx_buffer;\n  if (rxBuffer->_iHead != rxBuffer->_iTail) {\n    byteRead = rxBuffer->_aucBuffer[rxBuffer->_iTail];\n    rxBuffer->_iTail = (rxBuffer->_iTail + 1U) & 0x7f;\n    return (uint)byteRead;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081412",
            "calling": [],
            "imported": false,
            "current_name": "readByte_00081412"
        },
        "FUN_000838cc": {
            "renaming": {
                "FUN_000838cc": "add_to_list_000838cc",
                "param_1": "list_length",
                "param_2": "data",
                "param_3": "flag",
                "param_4": "mask",
                "puVar1": "list_ptr",
                "uVar2": "list_size",
                "iVar3": "global_ptr",
                "uVar4": "mask_bit",
                "DAT_00083970": "global_flag"
            },
            "code": "int add_to_list_000838cc(int list_length, int data, int flag, int mask) {\n    int *global_ptr = *(int **)global_impure_ptr;\n    int *list_ptr = *(int **)(global_ptr + 0x148);\n    if (list_ptr == NULL) {\n        list_ptr = (int *)(global_ptr + 0x14c);\n        *(int **)(global_ptr + 0x148) = list_ptr;\n    }\n    uint32_t list_size = list_ptr[1];\n    if (list_size > 0x1f) {\n        if (DAT_00083970 != 0) {\n            int *new_list_ptr = (int *)malloc(400);\n            if (new_list_ptr != NULL) {\n                *new_list_ptr = *(int *)(global_ptr + 0x148);\n                new_list_ptr[1] = 0;\n                list_size = 0;\n                *(int **)(global_ptr + 0x148) = new_list_ptr;\n                new_list_ptr[0x62] = 0;\n                new_list_ptr[99] = 0;\n                goto LAB_00083922;\n            }\n        }\n        return -1;\n    }\nLAB_00083922:\n    if (list_length != 0) {\n        uint32_t mask_bit = 1 << (list_size & 0xff);\n        list_ptr[list_size + 0x22] = data;\n        list_ptr[0x62] |= mask_bit;\n        list_ptr[list_size + 0x42] = mask;\n        if (list_length == 2) {\n            list_ptr[99] |= mask_bit;\n        }\n    }\n    list_ptr[1] = list_size + 1;\n    list_ptr[list_size + 2] = flag;\n    return 0;\n}",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000838cc",
            "calling": [
                "__cxa_atexit",
                "atexit"
            ],
            "imported": false,
            "current_name": "add_to_list_000838cc"
        },
        "FUN_00085858": {
            "renaming": {
                "FUN_00085858": "do_nothing_00085858"
            },
            "code": "\nvoid do_nothing_00085858(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085858",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "do_nothing_00085858"
        },
        "FUN_00082504": {
            "renaming": {
                "FUN_00082504": "memset_custom_00082504",
                "__s": "destination",
                "__c": "value",
                "__n": "num_bytes",
                "puVar1": "destination32_start",
                "puVar2": "destination32",
                "puVar3": "destination8_next",
                "uVar4": "value32",
                "uVar5": "num_words",
                "bVar6": "num_bytes_zero"
            },
            "code": "void *memset_custom_00082504(void *destination, int value, size_t num_bytes) {\n  uint32_t *destination32 = (uint32_t *)destination;\n  if (((uint32_t)destination & 3) != 0) {\n    bool num_bytes_zero = num_bytes == 0;\n    uint8_t *destination8 = (uint8_t *)destination;\n    num_bytes = num_bytes - 1;\n    if (num_bytes_zero) {\n      return destination;\n    }\n    while (true) {\n      destination32 = (uint32_t *)((int)destination8 + 1);\n      *(char *)destination8 = (char)value;\n      if (((uint32_t)destination32 & 3) == 0) break;\n      num_bytes_zero = num_bytes == 0;\n      destination8 = (uint8_t *)destination32;\n      num_bytes = num_bytes - 1;\n      if (num_bytes_zero) {\n        return destination;\n      }\n    }\n  }\n  if (3 < num_bytes) {\n    uint32_t value32 = (value & 0xffU) | ((value & 0xffU) << 8);\n    value32 = value32 | value32 << 0x10;\n    uint32_t num_words = num_bytes / 4;\n    uint32_t *destination32_start = destination32;\n    if (0xf < num_bytes) {\n      num_words = num_bytes >> 4;\n      do {\n        *destination32 = value32;\n        destination32[1] = value32;\n        destination32[2] = value32;\n        destination32[3] = value32;\n        destination32 = destination32 + 4;\n      } while (destination32 != (uint32_t *)((int)destination32_start + (num_words << 4)));\n      num_bytes = num_bytes & 0xf;\n      destination32_start = destination32_start + ((num_words << 2) + 4);\n      destination32 = destination32_start;\n      if (num_bytes < 4) {\n        goto LAB_00082580;\n      }\n    }\n    do {\n      num_bytes = num_bytes - 4;\n      *destination32 = value32;\n      destination32 = destination32 + 1;\n    } while (3 < num_bytes);\n    destination32 = (uint32_t *)((int)destination32_start + ((num_words << 2) + (num_bytes & 0xfffffffc)));\n    num_bytes = num_bytes & 3;\n  }\n  LAB_00082580:\n  if (num_bytes != 0) {\n    uint8_t *destination8 = (uint8_t *)destination32;\n    do {\n      uint8_t *destination8_next = (uint8_t *)((int)destination8 + 1);\n      *(char *)destination8 = (char)value;\n      destination8 = destination8_next;\n    } while (destination8 != (uint8_t *)(num_bytes + (int)destination32));\n  }\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082504",
            "calling": [
                "RingBuffer",
                "__sinit"
            ],
            "imported": false,
            "current_name": "memset_custom_00082504"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "check_if_completed_000800f4",
                "*param_1": "*param",
                "*PTR_completed_7857_0008010c": "*completed_flag",
                "DAT_00080110": "non_zero_flag",
                "PTR__etext_00080114": "end_of_text"
            },
            "code": "char* check_if_completed_000800f4(char* param){\n                        if (*PTR_completed_7857_0008010c == \"\\0\") {\n                            if (DAT_00080110 != 0) {\n                                param = PTR__etext_00080114;\n                            }\n                            *PTR_completed_7857_0008010c = 1;\n                        }\n                        return param;\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "check_if_completed_000800f4"
        },
        "FUN_0008378c": {
            "renaming": {
                "FUN_0008378c": "print_formatted_text_0008378c",
                "param_1": "output_file",
                "param_2": "input_data",
                "iVar1": "printf_return_value",
                "iVar2": "fflush_return_value",
                "local_488": "buffer_pointer_array",
                "local_480": "buffer_size",
                "local_47c": "mask",
                "local_47a": "unused",
                "local_478": "buffer_pointer",
                "local_474": "unused",
                "local_470": "unused",
                "local_46c": "unused",
                "local_464": "unused",
                "local_424": "unused",
                "auStack_420": "unused"
            },
            "code": "int print_formatted_text_0008378c(FILE* output_file, int input_data)\n{\n    int printf_return_value;\n    int fflush_return_value;\n    char* buffer_pointer_array[2];\n    char* buffer_pointer;\n    int buffer_size = 1024;\n    unsigned short mask = 0xfffd;\n\n    buffer_pointer_array[0] = (char*)malloc(buffer_size);\n    buffer_pointer = buffer_pointer_array[0];\n    if(buffer_pointer == NULL)\n    {\n        return -1;\n    }\n\n    printf_return_value = _vfiprintf_r(output_file, buffer_pointer_array, \"\", NULL);\n    fflush_return_value = _fflush_r(output_file, buffer_pointer_array);\n    free(buffer_pointer);\n\n    if(printf_return_value < 0 || fflush_return_value != 0)\n    {\n        return -1;\n    }\n\n    if((input_data + 0xc) < 0)\n    {\n        input_data |= 0x40;\n    }\n\n    return printf_return_value;\n}",
            "called": [
                "_vfiprintf_r",
                "_fflush_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008378c",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "print_formatted_text_0008378c"
        },
        "FUN_00083adc": {
            "renaming": {
                "FUN_00083adc": "initialize_stream_if_not_initialized_00083adc",
                "param_1": "stream_address",
                "param_2": "stream_flags",
                "*PTR_00000038": "*stream_flags",
                "__sinit": "__initialize_stream",
                "__sflush_r": "__flush_stream_r"
            },
            "code": "void initialize_stream_if_not_initialized_00083adc(int stream_address, int stream_flags){\n  if ((stream_address != 0) && (*(int *)(stream_address + 0x38) == 0)) {\n    __initialize_stream();\n  }\n  if (*(short *)(stream_flags + 0xc) == 0) {\n    return;\n  }\n  __flush_stream_r(stream_address);\n  return;\n}",
            "called": [
                "__sinit",
                "__sflush_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083adc",
            "calling": [
                "__sfvwrite_r",
                "__sbprintf",
                "_fclose_r",
                "__swbuf_r"
            ],
            "imported": false,
            "current_name": "initialize_stream_if_not_initialized_00083adc"
        },
        "FUN_000825b0": {
            "renaming": {
                "FUN_000825b0": "FUNC_000825b0"
            },
            "code": "\nint * FUNC_000825b0(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  size_t sVar5;\n  uint uVar6;\n  int *piVar7;\n  uint uVar8;\n  uint uVar9;\n  int *piVar10;\n  int iVar11;\n  \n  if (param_2 == (int *)0x0) {\n    piVar3 = (int *)_malloc_r(param_1,param_3);\n    return piVar3;\n  }\n  __malloc_lock();\n  puVar1 = PTR___malloc_av__0008296c;\n  uVar6 = param_2[-1];\n  uVar8 = uVar6 & 0xfffffffc;\n  piVar3 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar9 = 0x10;\n  }\n  else {\n    uVar9 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar9 < 0) goto LAB_0008267c;\n  }\n  if (uVar9 < param_3) {\nLAB_0008267c:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar8 < (int)uVar9) {\n    iVar2 = (int)piVar3 + uVar8;\n    iVar11 = *(int *)(PTR___malloc_av__0008296c + 8);\n    if (iVar11 == iVar2) {\n      uVar4 = *(uint *)(iVar11 + 4) & 0xfffffffc;\n      iVar2 = iVar11;\n      if ((int)(uVar9 + 0x10) <= (int)(uVar4 + uVar8)) {\n        *(uint *)(PTR___malloc_av__0008296c + 8) = (int)piVar3 + uVar9;\n        *(uint *)((int)piVar3 + uVar9 + 4) = (uVar4 + uVar8) - uVar9 | 1;\n        param_2[-1] = uVar9 | param_2[-1] & 1U;\n        __malloc_unlock(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar2 + 4) & 0xfffffffe) + iVar2 + 4) & 1) == 0) {\n      uVar4 = *(uint *)(iVar2 + 4) & 0xfffffffc;\n      if ((int)uVar9 <= (int)(uVar4 + uVar8)) {\n        iVar11 = *(int *)(iVar2 + 0xc);\n        iVar2 = *(int *)(iVar2 + 8);\n        *(int *)(iVar2 + 0xc) = iVar11;\n        *(int *)(iVar11 + 8) = iVar2;\n        uVar8 = uVar4 + uVar8;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      uVar4 = 0;\n      iVar2 = 0;\n    }\n    if (-1 < (int)(uVar6 << 0x1f)) {\n      piVar10 = (int *)((int)piVar3 - param_2[-2]);\n      uVar6 = (piVar10[1] & 0xfffffffcU) + uVar8;\n      if (iVar2 != 0) {\n        if (iVar2 == iVar11) {\n          if ((int)(uVar9 + 0x10) <= (int)(uVar4 + uVar6)) {\n            piVar3 = piVar10 + 2;\n            iVar2 = *piVar3;\n            iVar11 = piVar10[3];\n            sVar5 = uVar8 - 4;\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            if (sVar5 < 0x25) {\n              piVar7 = piVar3;\n              if (0x13 < sVar5) {\n                piVar10[2] = *param_2;\n                piVar10[3] = param_2[1];\n                if (sVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar7 = piVar10 + 4;\n                }\n                else {\n                  piVar10[4] = param_2[2];\n                  piVar10[5] = param_2[3];\n                  if (sVar5 == 0x24) {\n                    piVar10[6] = param_2[4];\n                    piVar7 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar10[7] = *piVar7;\n                    piVar7 = piVar10 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar7 = piVar10 + 6;\n                  }\n                }\n              }\n              *piVar7 = *param_2;\n              piVar7[1] = param_2[1];\n              piVar7[2] = param_2[2];\n            }\n            else {\n              memmove(piVar3,param_2,sVar5);\n            }\n            *(uint *)(puVar1 + 8) = (int)piVar10 + uVar9;\n            *(uint *)((int)piVar10 + uVar9 + 4) = (uVar4 + uVar6) - uVar9 | 1;\n            piVar10[1] = uVar9 | piVar10[1] & 1U;\n            __malloc_unlock(param_1);\n            return piVar3;\n          }\n        }\n        else {\n          uVar4 = uVar4 + uVar6;\n          if ((int)uVar9 <= (int)uVar4) {\n            iVar11 = *(int *)(iVar2 + 0xc);\n            iVar2 = *(int *)(iVar2 + 8);\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            piVar7 = piVar10 + 2;\n            iVar2 = *piVar7;\n            iVar11 = piVar10[3];\n            sVar5 = uVar8 - 4;\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            uVar8 = uVar4;\n            if (sVar5 < 0x25) {\n              piVar3 = piVar7;\n              if (0x13 < sVar5) {\n                piVar10[2] = *param_2;\n                piVar10[3] = param_2[1];\n                if (sVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar3 = piVar10 + 4;\n                }\n                else {\n                  piVar10[4] = param_2[2];\n                  piVar10[5] = param_2[3];\n                  if (sVar5 == 0x24) {\n                    piVar10[6] = param_2[4];\n                    piVar3 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar10[7] = *piVar3;\n                    piVar3 = piVar10 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar3 = piVar10 + 6;\n                  }\n                }\n              }\n              *piVar3 = *param_2;\n              piVar3[1] = param_2[1];\n              piVar3[2] = param_2[2];\n              uVar6 = piVar10[1];\n              piVar3 = piVar10;\n              param_2 = piVar7;\n            }\n            else {\n              memmove(piVar7,param_2,sVar5);\n              uVar6 = piVar10[1];\n              piVar3 = piVar10;\n              param_2 = piVar7;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)uVar9 <= (int)uVar6) {\n        piVar7 = piVar10 + 2;\n        iVar2 = *piVar7;\n        iVar11 = piVar10[3];\n        sVar5 = uVar8 - 4;\n        *(int *)(iVar2 + 0xc) = iVar11;\n        *(int *)(iVar11 + 8) = iVar2;\n        uVar8 = uVar6;\n        if (sVar5 < 0x25) {\n          piVar3 = piVar7;\n          if (0x13 < sVar5) {\n            piVar10[2] = *param_2;\n            piVar10[3] = param_2[1];\n            if (sVar5 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar3 = piVar10 + 4;\n            }\n            else {\n              piVar10[4] = param_2[2];\n              piVar10[5] = param_2[3];\n              if (sVar5 == 0x24) {\n                piVar10[6] = param_2[4];\n                piVar3 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar10[7] = *piVar3;\n                piVar3 = piVar10 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar3 = piVar10 + 6;\n              }\n            }\n          }\n          *piVar3 = *param_2;\n          piVar3[1] = param_2[1];\n          piVar3[2] = param_2[2];\n          uVar6 = piVar10[1];\n          piVar3 = piVar10;\n          param_2 = piVar7;\n        }\n        else {\n          memmove(piVar7,param_2,sVar5);\n          uVar6 = piVar10[1];\n          piVar3 = piVar10;\n          param_2 = piVar7;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    piVar10 = (int *)_malloc_r(param_1,param_3);\n    if (piVar10 == (int *)0x0) goto LAB_000826a4;\n    uVar6 = param_2[-1];\n    if (piVar10 + -2 != (int *)((uVar6 & 0xfffffffe) + (int)piVar3)) {\n      sVar5 = uVar8 - 4;\n      if (sVar5 < 0x25) {\n        piVar3 = param_2;\n        piVar7 = piVar10;\n        if (0x13 < sVar5) {\n          *piVar10 = *param_2;\n          piVar10[1] = param_2[1];\n          if (sVar5 < 0x1c) {\n            piVar3 = param_2 + 2;\n            piVar7 = piVar10 + 2;\n          }\n          else {\n            piVar10[2] = param_2[2];\n            piVar10[3] = param_2[3];\n            if (sVar5 == 0x24) {\n              piVar10[4] = param_2[4];\n              piVar10[5] = param_2[5];\n              piVar3 = param_2 + 6;\n              piVar7 = piVar10 + 6;\n            }\n            else {\n              piVar3 = param_2 + 4;\n              piVar7 = piVar10 + 4;\n            }\n          }\n        }\n        *piVar7 = *piVar3;\n        piVar7[1] = piVar3[1];\n        piVar7[2] = piVar3[2];\n      }\n      else {\n        memmove(piVar10,param_2,sVar5);\n      }\n      _free_r(param_1,param_2);\n      goto LAB_000826a4;\n    }\n    uVar8 = uVar8 + (piVar10[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  uVar4 = uVar8 - uVar9;\n  piVar10 = param_2;\n  if (uVar4 < 0x10) {\n    piVar3[1] = uVar6 & 1 | uVar8;\n    *(uint *)((int)piVar3 + uVar8 + 4) = *(uint *)((int)piVar3 + uVar8 + 4) | 1;\n  }\n  else {\n    piVar3[1] = uVar6 & 1 | uVar9;\n    *(uint *)((int)piVar3 + uVar9 + 4) = uVar4 | 1;\n    *(uint *)((int)piVar3 + uVar4 + uVar9 + 4) = *(uint *)((int)piVar3 + uVar4 + uVar9 + 4) | 1;\n    _free_r(param_1,(int)piVar3 + uVar9 + 8);\n  }\nLAB_000826a4:\n  __malloc_unlock(param_1);\n  return piVar10;\n}\n\n",
            "called": [
                "memmove",
                "_free_r",
                "__malloc_lock",
                "__malloc_unlock",
                "_malloc_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000825b0",
            "calling": [
                "__sfvwrite_r",
                "realloc"
            ],
            "imported": false,
            "current_name": "FUNC_000825b0"
        },
        "FUN_0008112c": {
            "renaming": {
                "FUN_0008112c": "process_callbacks_0008112c",
                "DAT_0008115c": "data_address",
                "PTR_callbacksPioD_00081160": "callbacks_pointer_address"
            },
            "code": "void process_callbacks_0008112c(void)\n{\n  uint32_t bit_mask;\n  uint32_t callbacks_ptr;\n  bit_mask = *(uint32_t *)(DAT_0008115c + 0x4c);\n  while (true)\n  {\n    uint32_t leading_zeros = count_leading_zeroes(bit_mask);\n    if (leading_zeros > 31)\n    {\n      break;\n    }\n    uint32_t index = 31 - leading_zeros;\n    callbacks_ptr = *(uint32_t *)(PTR_callbacksPioD_00081160 + index * 4);\n    if (callbacks_ptr != (uint32_t)NULL)\n    {\n      (*(void (**)(void))(callbacks_ptr))();\n    }\n    bit_mask &= ~(1 << index);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008112c",
            "calling": [],
            "imported": false,
            "current_name": "process_callbacks_0008112c"
        },
        "FUN_000803d4": {
            "renaming": {
                "FUN_000803d4": "checkBuffer_000803d4",
                "au8Buffer": "buffer",
                "u16errCnt": "errorCount",
                "PTR_fctsupported_0008040c": "supportedFunctions"
            },
            "code": "uint8_t __thiscall Modbus::checkBuffer_000803d4(Modbus *this)\\n{\\n  int bufferIndex;\\n  if ((int)((uint)this->buffer[1] << 0x18) < 0) {\\n    this->errorCount++;\\n    return 0xfb;\\n  }\\n  bufferIndex = 0;\\n  do {\\n    if (PTR_fctsupported_0008040c[bufferIndex] == this->buffer[1]) {\\n      return \"\\0\";\\n    }\\n    bufferIndex++;\\n  } while (bufferIndex != 8);\\n  this->errorCount++;\\n  return \"\\x01\";\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803d4",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "checkBuffer_000803d4"
        },
        "FUN_000845d8": {
            "renaming": {
                "FUN_000845d8": "write_to_file_000845d8",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "errno_ptr",
                "iVar2": "write_result"
            },
            "code": "void write_to_file_000845d8(int* error_code, int file_descriptor, char* buffer, int buffer_size) {\n    undefined* errno_ptr = PTR_errno_000845fc;\n    *(undefined4*)errno_ptr = 0;\n    int write_result = _write(file_descriptor, buffer, buffer_size);\n    if(write_result == -1 && (*(int*)errno_ptr != 0)) {\n        *error_code = *(int*)errno_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845d8",
            "calling": [
                "__swrite"
            ],
            "imported": false,
            "current_name": "write_to_file_000845d8"
        },
        "FUN_0008043e": {
            "renaming": {
                "FUN_0008043e": "receiveDataAndValidate_0008043e",
                "__fds": "receiveData",
                "__nfds": "numFileDescriptors",
                "__timeout": "timeout",
                "byte bVar1": "byte receivedByte",
                "uint8_t uVar2": "uint8_t validationResult",
                "uint32_t uVar3": "uint32_t currentTime",
                "uint unaff_r6": "uint unaff_r6",
                "this": "modbus",
                "u8serno": "serialNumber",
                "port": "port",
                "u32timeOut": "timeOut",
                "u8lastError": "lastError",
                "u8state": "state",
                "u16errCnt": "errorCount",
                "au8Buffer": "buffer",
                "u8BufferSize": "bufferSize",
                "getRxBuffer": "receiveDataBuffer",
                "validateAnswer": "validateAnswer",
                "get_FC3": "getFunctionCode3"
            },
            "code": "int __thiscall Modbus::receiveDataAndValidate_0008043e(Modbus *modbus, ReceiveData *receiveData, nfds_t numFileDescriptors, int timeout) {\\n\\tbyte receivedByte;\\n\\tuint8_t validationResult;\\n\\tuint32_t currentTime;\\n\\tuint unaff_r6;\\n\\n\\tif (modbus->serialNumber < 4) {\\n\\t\\treceivedByte = (**(code **)(*(int *)modbus->port + 8))();\\n\\t\\tunaff_r6 = (uint)receivedByte;\\n\\t}\\n\\tcurrentTime = millis();\\n\\tif (modbus->timeOut < currentTime) {\\n\\t\\tmodbus->lastError = 0xff;\\n\\t\\tmodbus->state = \"\\0\";\\n\\t\\tmodbus->errorCount = modbus->errorCount + 1;\\n\\t}\\n\\telse if (7 < unaff_r6) {\\n\\t\\treceiveDataBuffer(modbus);\\n\\t\\tvalidationResult = validateAnswer(modbus);\\n\\t\\tif (validationResult == \"\\0\") {\\n\\t\\t\\tif (modbus->buffer[1] - 3 < 2) {\\n\\t\\t\\t\\tgetFunctionCode3(modbus);\\n\\t\\t\\t}\\n\\t\\t\\tmodbus->state = \"\\0\";\\n\\t\\t\\tvalidationResult = modbus->bufferSize;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tmodbus->state = \"\\0\";\\n\\t\\t}\\n\\t\\tgoto LAB_000804a2;\\n\\t}\\n\\tvalidationResult = \"\\0\";\\n\\tLAB_000804a2:\\n\\treturn (int)(char)validationResult;\\n}",
            "called": [
                "get_FC3",
                "validateAnswer",
                "getRxBuffer",
                "millis"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008043e",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "receiveDataAndValidate_0008043e"
        },
        "FUN_0008160c": {
            "renaming": {
                "String::FUN_0008160c": "freeStringBuffer",
                "this": "string",
                "this->buffer": "string->buffer",
                "this->len": "string->len",
                "this->capacity": "string->capacity",
                "char *": "char*",
                "FUN_0008160c": "freeStringBuffer_0008160c"
            },
            "code": "void freeStringBuffer_0008160c(String *string) {\n    if (string->buffer != NULL) {\n        free(string->buffer);\n    }\n    string->buffer = NULL;\n    string->len = 0;\n    string->capacity = 0;\n    return;\n}",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008160c",
            "calling": [
                "copy"
            ],
            "imported": false,
            "current_name": "freeStringBuffer_0008160c"
        },
        "FUN_00080e18": {
            "renaming": {
                "FUN_00080e18": "check_and_set_bit_00080e18",
                "param_1": "bit_number",
                "uVar1": "bit_mask"
            },
            "code": "int check_and_set_bit_00080e18(uint bit_number) {\n  uint bit_mask;\n  if (bit_number < 0x2d) {\n    if (bit_number < 0x20) {\n      bit_mask = 1 << (bit_number & 0xff);\n      if ((bit_mask & *(uint *)(DAT_00080e58 + 0x18)) != bit_mask) {\n        *(uint *)(DAT_00080e58 + 0x10) = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (bit_number - 0x20 & 0xff);\n      if ((bit_mask & *(uint *)(DAT_00080e58 + 0x108)) != bit_mask) {\n        *(uint *)(DAT_00080e58 + 0x100) = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e18",
            "calling": [
                "pinMode",
                "init",
                "init"
            ],
            "imported": false,
            "current_name": "check_and_set_bit_00080e18"
        },
        "FUN_00081184": {
            "renaming": {
                "FUN_00081184": "return_zero_00081184"
            },
            "code": "int return_zero_00081184(void) {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081184",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "return_zero_00081184"
        },
        "FUN_00081580": {
            "renaming": {
                "FUN_00081580": "handleUartInterrupt_00081580",
                "this": "uart",
                "pRVar1": "txBuffer",
                "RVar2": "uartStatus",
                "_pUart": "uartPeripheral",
                "_rx_buffer": "rxBuffer",
                "_tx_buffer": "txBuffer",
                "_iTail": "tailIndex",
                "_iHead": "headIndex",
                "_aucBuffer": "buffer",
                "UART_SR": "uartStatusRegister",
                "UART_RHR": "uartReceiveHoldingRegister",
                "UART_THR": "uartTransmitHoldingRegister",
                "UART_IDR": "uartInterruptDisableRegister"
            },
            "code": "void __thiscall UARTClass::handleUartInterrupt_00081580(UARTClass *uart)\n{\n  RingBuffer *rxBuffer = uart->_rx_buffer;\n  RingBuffer *txBuffer = uart->_tx_buffer;\n  RoReg uartStatus = uart->_pUart->UART_SR;\n  \n  if ((int)(uartStatus << 0x1f) < 0) {\n    RingBuffer::store_char(rxBuffer, (uint8_t)uart->_pUart->UART_RHR);\n  }\n  \n  if ((int)(uartStatus << 0x1e) < 0) {\n    if (txBuffer->_iTail != txBuffer->_iHead) {\n      uint8_t txByte = txBuffer->_aucBuffer[txBuffer->_iTail];\n      uart->_pUart->UART_THR = (uint)txByte;\n      txBuffer->_iTail = (txBuffer->_iTail + 1U) & 0x7f;\n    } else {\n      uart->_pUart->UART_IDR = 2;\n    }\n  }\n}",
            "called": [
                "store_char"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081580",
            "calling": [
                "UART_Handler",
                "USART1_Handler",
                "USART0_Handler",
                "USART3_Handler"
            ],
            "imported": false,
            "current_name": "handleUartInterrupt_00081580"
        },
        "FUN_00084298": {
            "renaming": {
                "FUN_00084298": "GetMaxByteCountPerCharacter_00084298",
                "PTR___mb_cur_max_000842a0": "max_byte_count_ptr"
            },
            "code": "GetMaxByteCountPerCharacter_00084298() {\n  return *(undefined4*)PTR___mb_cur_max_000842a0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084298",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "GetMaxByteCountPerCharacter_00084298"
        },
        "FUN_00080ac0": {
            "renaming": {
                "FUN_00080ac0": "handle_UART_interrupt_00080ac0",
                "PTR_Serial1_00080ac8": "PTR_Serial1"
            },
            "code": "void handle_UART_interrupt_00080ac0(void)\n{\n  UARTClass::IrqHandler((UARTClass *)PTR_Serial1_00080ac8);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ac0",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_00080ac0"
        },
        "FUN_00081066": {
            "renaming": {
                "FUN_00081066": "set_param_value_to_max_00081066",
                "param_1": "param_value",
                "undefined4": "int",
                "*(undefined4 *)(param_1 + 0x14)": "*(int *)(param_value + 0x14)"
            },
            "code": "void set_param_value_to_max_00081066(int param_value)\n{\n  *(int *)(param_value + 0x14) = 0xffff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081066",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_param_value_to_max_00081066"
        },
        "FUN_00081cd0": {
            "renaming": {
                "FUN_00081cd0": "convert_to_int32_00081cd0",
                "param_1": "input_value",
                "uVar1": "shifted_value_top_byte",
                "uVar2": "subtracted_value",
                "uVar3": "shifted_value_with_sign"
            },
            "code": "uint convert_to_int32_00081cd0(uint input_value)\n{\n  uint shifted_value = input_value << 1;\n  if (shifted_value < 0x7f000000) {\n    return 0;\n  }\n  uint shifted_value_top_byte = shifted_value >> 0x18;\n  uint subtracted_value = 0x9e - shifted_value_top_byte;\n  if (shifted_value_top_byte < 0x9f && subtracted_value != 0) {\n    uint shifted_value_with_sign = (input_value << 8 | 0x80000000) >> (subtracted_value & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      shifted_value_with_sign = -shifted_value_with_sign;\n    }\n    return shifted_value_with_sign;\n  }\n  if ((subtracted_value == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081cd0",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "convert_to_int32_00081cd0"
        },
        "FUN_00081188": {
            "renaming": {
                "FUN_00081188": "infinite_loop_00081188"
            },
            "code": "void infinite_loop_00081188(void)\n{\n  while(true){}\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081188",
            "calling": [
                "SVC_Handler",
                "__halt",
                "PendSV_Handler"
            ],
            "imported": false,
            "current_name": "infinite_loop_00081188"
        },
        "FUN_00081df4": {
            "renaming": {
                "FUN_00081df4": "allocate_memory_00081df4",
                "__size": "size",
                "pvVar1": "allocated_memory"
            },
            "code": "void *allocate_memory_00081df4(size_t size)\n{\n  void *allocated_memory;\n  allocated_memory = (void *)_allocate_memory_00081df4_r(*(undefined4 *)PTR__impure_ptr_00081e00, size);\n  return allocated_memory;\n}",
            "called": [
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081df4",
            "calling": [
                "__register_exitproc"
            ],
            "imported": false,
            "current_name": "allocate_memory_00081df4"
        },
        "FUN_00080410": {
            "renaming": {
                "FUN_00080410": "read_registers_00080410",
                "this": "modbus",
                "uVar1": "current_register_value",
                "uVar2": "register_index",
                "bVar3": "buffer_index",
                "uVar4": "register_index",
                "puVar5": "registers",
                "makeWord": "combine_bytes_to_word",
                "au8Buffer": "buffer",
                "au16regs": "registers"
            },
            "code": "void __thiscall read_registers_00080410(Modbus *this) {\n  uint16_t current_register_value;\n  uint register_index = 0;\n  while( true ) {\n    uint buffer_index = (register_index * 2 + 3) & 0xff;\n    if (this->au8Buffer[2] >> 1 <= register_index) break;\n    uint16_t *registers = this->au16regs;\n    current_register_value = makeWord(this->au8Buffer[buffer_index], this->au8Buffer[buffer_index + 1]);\n    registers[register_index] = current_register_value;\n    register_index++;\n  }\n}",
            "called": [
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080410",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "read_registers_00080410"
        },
        "FUN_00080da0": {
            "renaming": {
                "FUN_00080da0": "process_data_00080da0",
                "param_1": "data",
                "param_2": "type",
                "param_3": "value",
                "param_4": "flag",
                "bVar1": "is_negative_flag",
                "DAT_00080df8": "PTR_process_type1_type2",
                "DAT_00080dfc": "PTR_process_type3",
                "DAT_00080e00": "PTR_process_type4_type5"
            },
            "code": "int process_data_00080da0(int data, int type, int value, unsigned int flag) {\n    bool is_negative_flag = (int)(flag << 0x1f) < 0;\n    switch(type) {\n        case 1:\n        case 2:\n            (*DAT_00080df8)(data, type, value);\n            *(int *)(data + 0x44) = value;\n            if (is_negative_flag) {\n                *(int *)(data + 100) = value;\n            }\n            if (!is_negative_flag) {\n                *(int *)(data + 0x60) = value;\n            }\n            break;\n        case 3:\n            (*DAT_00080dfc)(data, value, flag, DAT_00080dfc, data);\n            break;\n        case 4:\n        case 5:\n            bool is_bit_set = (type == 5);\n            bool is_bit_31_set = (flag << 0x1d) >> 0x1f;\n            bool is_bit_0_set = (flag & 1);\n            (*DAT_00080e00)(data, value, is_bit_set, is_bit_31_set, is_bit_0_set, type, value);\n            break;\n        default:\n            return 0;\n    }\n    return 1;\n}",
            "called": [
                "PIO_SetPeripheral",
                "PIO_SetOutput",
                "PIO_SetInput"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080da0",
            "calling": [
                "pinMode",
                "init"
            ],
            "imported": false,
            "current_name": "process_data_00080da0"
        },
        "FUN_00080258": {
            "renaming": {
                "FUN_00080258": "calculateAndTransmit_00080258",
                "Modbus": "modbusInstance",
                "u8length": "bufferLength",
                "uVar1": "crcValue",
                "uVar2": "timeoutMillis",
                "u8txenpin": "transmitEnablePin",
                "u8serno": "serialNumber",
                "au8Buffer": "buffer",
                "u8BufferSize": "bufferSize",
                "millis": "millis",
                "u16timeOut": "timeoutValue",
                "u32timeOut": "timeout",
                "u16OutCnt": "transmissionCount",
                "iVar3": "readStatus"
            },
            "code": "void calculateAndTransmit_00080258(Modbus *modbusInstance) {\n  byte bufferLength;\n  uint16_t crcValue;\n  uint32_t timeoutMillis;\n  int readStatus;\n  bufferLength = modbusInstance->bufferSize;\n  crcValue = calculateCRC(modbusInstance, bufferLength);\n  modbusInstance->buffer[bufferLength] = (uchar)((uint)crcValue >> 8);\n  modbusInstance->buffer[(bufferLength + 1) & 0xff] = (uchar)crcValue;\n  modbusInstance->bufferSize = bufferLength + 2;\n  if (modbusInstance->transmitEnablePin > 1) {\n    digitalWrite((uint)modbusInstance->transmitEnablePin, 1);\n  }\n  if (modbusInstance->serialNumber < 4) {\n    (**(code **)(*(int *)modbusInstance->port + 4))(modbusInstance->port, modbusInstance->buffer, modbusInstance->bufferSize);\n  }\n  if (modbusInstance->transmitEnablePin > 1) {\n    digitalWrite((uint)modbusInstance->transmitEnablePin, 0);\n  }\n  if (modbusInstance->serialNumber < 4) {\n    do {\n      readStatus = (**(code **)(*(int *)modbusInstance->port + 0xc))();\n    } while (-1 < readStatus);\n  }\n  modbusInstance->bufferSize = 0;\n  timeoutMillis = millis();\n  modbusInstance->timeout = timeoutMillis + modbusInstance->timeoutValue;\n  modbusInstance->transmissionCount = modbusInstance->transmissionCount + 1;\n  return;\n}",
            "called": [
                "calcCRC",
                "digitalWrite",
                "millis"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080258",
            "calling": [
                "query"
            ],
            "imported": false,
            "current_name": "calculateAndTransmit_00080258"
        },
        "FUN_00081622": {
            "renaming": {
                "String::FUN_00081622": "resizeString",
                "*this": "str",
                "maxStrLen": "maxStrLen",
                "pcVar1": "newBuffer",
                "buffer": "buffer",
                "capacity": "capacity",
                "FUN_00081622": "resizeString_00081622"
            },
            "code": "unsigned char resizeString_00081622(String *str, uint32_t maxStrLen) {\n  char *newBuffer = (char *)realloc(str->buffer, maxStrLen + 1);\n  if (newBuffer != NULL) {\n    str->buffer = newBuffer;\n    str->capacity = maxStrLen;\n    return 1;\n  }\n  return 0;\n}",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081622",
            "calling": [
                "reserve"
            ],
            "imported": false,
            "current_name": "resizeString_00081622"
        },
        "FUN_00082438": {
            "renaming": {
                "FUN_00082438": "reverse_copy_00082438",
                "__dest": "destination",
                "__src": "source",
                "__n": "size",
                "iVar1": "i",
                "puVar2": "destination_ptr_32",
                "puVar3": "source_ptr_32",
                "puVar4": "destination_ptr_32",
                "puVar5": "source_ptr",
                "puVar7": "destination_ptr",
                "uVar6": "size",
                "uVar8": "size"
            },
            "code": "void * reverse_copy_00082438(void *destination, void *source, size_t size) {\n  int i;\n  uint8_t *source_ptr = (uint8_t *)source + size;\n  uint8_t *destination_ptr = (uint8_t *)destination + size;\n  \n  if ((source < destination) && (destination < source_ptr)) {\n    if (size != 0) {\n      do {\n        source_ptr--;\n        destination_ptr--;\n        *destination_ptr = *source_ptr;\n      } while (--size != 0);\n    }\n    return destination;\n  }\n  \n  uint32_t *destination_ptr_32 = (uint32_t *)destination;\n  if (size >= 16 && (((uint32_t)destination_ptr_32 | (uint32_t)source) & 3) == 0) {\n    uint32_t *source_ptr_32 = (uint32_t *)source;\n    do {\n      *destination_ptr_32++ = *source_ptr_32++;\n      *destination_ptr_32++ = *source_ptr_32++;\n      *destination_ptr_32++ = *source_ptr_32++;\n      *destination_ptr_32++ = *source_ptr_32++;\n    } while (destination_ptr_32 != (uint32_t *)((uint8_t *)destination + (size & ~15)));\n    \n    if (size &= 15) {\n      source_ptr_32 = (uint32_t *)((uint8_t *)source_ptr_32 - 16);\n      destination_ptr_32 = (uint32_t *)((uint8_t *)destination_ptr_32 - 16);\n      do {\n        *destination_ptr_32++ = *source_ptr_32++;\n      } while (--size != 0);\n    }\n    return destination;\n  }\n  \n  destination_ptr = (uint8_t *)destination_ptr_32;\n  source_ptr = (uint8_t *)source;\n  do {\n    *destination_ptr++ = *source_ptr++;\n  } while (--size != 0);\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082438",
            "calling": [
                "__sfvwrite_r",
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "reverse_copy_00082438"
        },
        "FUN_00081508": {
            "renaming": {
                "FUN_00081508": "configureUART_00081508",
                "this": "uart",
                "dwBaudRate": "baudRate",
                "modeReg": "modeReg",
                "_dwId": "id",
                "_pUart": "pUart",
                "PTR_SystemCoreClock_00081570": "SystemCoreClock",
                "UART_PTCR": "UART_PTCR",
                "UART_CR": "UART_CR",
                "UART_MR": "UART_MR",
                "UART_BRGR": "UART_BRGR",
                "UART_IDR": "UART_IDR",
                "UART_IER": "UART_IER",
                "DAT_00081574": "IRQHandler",
                "_dwIrq": "irq",
                "_rx_buffer": "rxBuffer",
                "_tx_buffer": "txBuffer",
                "_iTail": "tail",
                "_iHead": "head"
            },
            "code": "void __thiscall configureUART_00081508(UARTClass *uart, uint32_t baudRate, uint32_t modeReg) {\n  pmc_enable_periph_clk(uart->id);\n  Uart *uartPtr = uart->pUart;\n  uartPtr->UART_PTCR = 0x202;\n  uartPtr->UART_CR = 0xac;\n  uartPtr->UART_MR = modeReg;\n  uartPtr->UART_BRGR = *(uint *)PTR_SystemCoreClock_00081570 / baudRate >> 4;\n  uartPtr->UART_IDR = 0xffffffff;\n  uartPtr->UART_IER = 0x61;\n  *(int *)(DAT_00081574 + ((uint)(int)uart->irq >> 5) * 4) = 1 << (uint)(byte)(uart->irq & 0x1f);\n  RingBuffer *rxBuffer = uart->rxBuffer;\n  rxBuffer->tail = 0;\n  rxBuffer->head = 0;\n  RingBuffer *txBuffer = uart->txBuffer;\n  txBuffer->tail = 0;\n  txBuffer->head = 0;\n  uartPtr->UART_CR = 0x50;\n}",
            "called": [
                "pmc_enable_periph_clk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081508",
            "calling": [
                "begin",
                "begin"
            ],
            "imported": false,
            "current_name": "configureUART_00081508"
        },
        "FUN_00083808": {
            "renaming": {
                "FUN_00083808": "process_data_00083808",
                "param_1": "result",
                "param_2": "params",
                "uVar1": "temp1",
                "iVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4"
            },
            "code": "int process_data_00083808(uint16_t *data, int *params) {\n  uint16_t uVar1;\n  int iVar2, result;\n  uint32_t uVar3;\n  uint16_t uVar4;\n  \n  if ((*(int *)impure_ptr != 0) && (*(int *)(*(int *)impure_ptr + 0x38) == 0)) {\n    __sinit();\n  }\n  uVar4 = *(uint16_t *)(params + 3);\n  uVar3 = (uint32_t)uVar4;\n  if ((int)(uVar3 << 0x1c) < 0) {\n    iVar2 = params[4];\n  }\n  else {\n    if (-1 < (int)(uVar3 << 0x1b)) {\n      result = 9;\n      *(uint16_t *)(params + 3) = uVar4 | 0x40;\n      return -1;\n    }\n    if ((int)(uVar3 << 0x1d) < 0) {\n      if ((int *)params[0xc] != (int *)0x0) {\n        if ((int *)params[0xc] != params + 0x10) {\n          _free_r(&result);\n          uVar4 = *(uint16_t *)(params + 3);\n        }\n        params[0xc] = 0;\n      }\n      iVar2 = params[4];\n      uVar4 = uVar4 & 0xffdb;\n      *params = iVar2;\n      params[1] = 0;\n    }\n    else {\n      iVar2 = params[4];\n    }\n    *(uint16_t *)(params + 3) = uVar4 | 8;\n    uVar3 = (uint32_t)(uVar4 | 8);\n  }\n  if ((iVar2 == 0) && ((uVar3 & 0x280) != 0x200)) {\n    __smakebuf_r(&result, params);\n    uVar3 = (uint32_t)*(uint16_t *)(params + 3);\n    iVar2 = params[4];\n  }\n  uVar1 = uVar3 & 1;\n  if (uVar1 == 0) {\n    if (-1 < (int)(uVar3 << 0x1e)) {\n      result = params[5];\n    }\n    params[2] = result;\n  }\n  else {\n    params[6] = -params[5];\n    params[2] = 0;\n  }\n  if ((iVar2 == 0) && ((int)((uint32_t)*(uint16_t *)(params + 3) << 0x18) < 0)) {\n    *(uint16_t *)(params + 3) = *(uint16_t *)(params + 3) | 0x40;\n    return -1;\n  }\n  return 0;\n}",
            "called": [
                "_free_r",
                "__smakebuf_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083808",
            "calling": [
                "_vfiprintf_r",
                "__sfvwrite_r",
                "__swbuf_r"
            ],
            "imported": false,
            "current_name": "process_data_00083808"
        },
        "FUN_000847e0": {
            "renaming": {
                "FUN_000847e0": "division_000847e0",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "lVar1": "product",
                "uVar2": "divisor_high_16",
                "uVar3": "quotient",
                "uVar4": "temp",
                "uVar5": "shift_amount",
                "uVar6": "partial_product",
                "uVar7": "partial_quotient",
                "uVar8": "partial_quotient_high",
                "uVar9": "is_dividend_negative",
                "uVar10": "result",
                "uVar11": "partial_product_high",
                "uVar12": "divisor_low",
                "bVar13": "is_borrow"
            },
            "code": "\nundefined8 division_000847e0(uint dividend,uint dividend_high,uint divisor,uint divisor_high)\n\n{\n  longlong product;\n  uint divisor_high_16;\n  uint quotient;\n  uint temp;\n  uint shift_amount;\n  uint partial_product;\n  uint partial_quotient;\n  uint partial_quotient_high;\n  uint is_dividend_negative;\n  uint result;\n  uint partial_product_high;\n  uint divisor_low;\n  bool is_borrow;\n  \n  if ((int)dividend_high < 0) {\n    is_borrow = dividend != 0;\n    dividend = -dividend;\n    dividend_high = -dividend_high - (uint)is_borrow;\n    is_dividend_negative = 0xffffffff;\n  }\n  else {\n    is_dividend_negative = 0;\n  }\n  if ((int)divisor_high < 0) {\n    is_dividend_negative = ~is_dividend_negative;\n    is_borrow = divisor != 0;\n    divisor = -divisor;\n    divisor_high = -divisor_high - (uint)is_borrow;\n  }\n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      shift_amount = count_leading_zeroes(divisor);\n      if (shift_amount != 0) {\n        divisor_high_16 = dividend >> (0x20 - shift_amount & 0xff);\n        divisor = divisor << (shift_amount & 0xff);\n        dividend = dividend << (shift_amount & 0xff);\n        dividend_high = dividend_high << (shift_amount & 0xff) | divisor_high_16;\n      }\n      divisor_high_16 = divisor >> 0x10;\n      quotient = dividend_high / divisor_high_16;\n      partial_product = (divisor & 0xffff) * quotient;\n      result = dividend >> 0x10 | (dividend_high - divisor_high_16 * quotient) * 0x10000;\n      shift_amount = quotient;\n      if (result <= partial_product && partial_product - result != 0) {\n        is_borrow = CARRY4(result,divisor);\n        result = result + divisor;\n        shift_amount = quotient - 1;\n        if ((is_borrow == false) && (result <= partial_product && partial_product - result != 0)) {\n          shift_amount = quotient - 2;\n          result = result + divisor;\n        }\n      }\n      partial_quotient = (result - partial_product) / divisor_high_16;\n      quotient = (divisor & 0xffff) * partial_quotient;\n      partial_product = dividend & 0xffff | ((result - partial_product) - divisor_high_16 * partial_quotient) * 0x10000;\n      divisor_high_16 = partial_quotient;\n      if (partial_product <= quotient && quotient - partial_product != 0) {\n        divisor_high_16 = partial_quotient - 1;\n        if ((CARRY4(partial_product,divisor) == false) &&\n           (partial_product + divisor <= quotient && quotient - (partial_product + divisor) != 0)) {\n          divisor_high_16 = partial_quotient - 2;\n        }\n      }\n      quotient = divisor_high_16 | shift_amount << 0x10;\n      result = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift_amount = count_leading_zeroes(divisor);\n      if (shift_amount == 0) {\n        dividend_high = dividend_high - divisor;\n        divisor_high_16 = divisor >> 0x10;\n        divisor_low = divisor & 0xffff;\n        result = 1;\n      }\n      else {\n        divisor = divisor << (shift_amount & 0xff);\n        quotient = dividend_high >> (0x20 - shift_amount & 0xff);\n        divisor_high_16 = divisor >> 0x10;\n        result = quotient / divisor_high_16;\n        divisor_low = divisor & 0xffff;\n        partial_product = divisor_low * result;\n        partial_quotient = dividend >> (0x20 - shift_amount & 0xff) | dividend_high << (shift_amount & 0xff);\n        quotient = partial_quotient >> 0x10 | (quotient - divisor_high_16 * result) * 0x10000;\n        dividend = dividend << (shift_amount & 0xff);\n        shift_amount = result;\n        if (quotient <= partial_product && partial_product - quotient != 0) {\n          is_borrow = CARRY4(quotient,divisor);\n          quotient = quotient + divisor;\n          shift_amount = result - 1;\n          if ((is_borrow == false) && (quotient <= partial_product && partial_product - quotient != 0)) {\n            shift_amount = result - 2;\n            quotient = quotient + divisor;\n          }\n        }\n        partial_quotient_high = (quotient - partial_product) / divisor_high_16;\n        temp = divisor_low * partial_quotient_high;\n        dividend_high = partial_quotient & 0xffff | ((quotient - partial_product) - divisor_high_16 * partial_quotient_high) * 0x10000;\n        result = partial_quotient_high;\n        if (dividend_high <= temp && temp - dividend_high != 0) {\n          is_borrow = CARRY4(dividend_high,divisor);\n          dividend_high = dividend_high + divisor;\n          result = partial_quotient_high - 1;\n          if ((is_borrow == false) && (dividend_high <= temp && temp - dividend_high != 0)) {\n            result = partial_quotient_high - 2;\n            dividend_high = dividend_high + divisor;\n          }\n        }\n        dividend_high = dividend_high - temp;\n        result = result | shift_amount << 0x10;\n      }\n      quotient = dividend_high / divisor_high_16;\n      partial_product = divisor_low * quotient;\n      partial_quotient = dividend >> 0x10 | (dividend_high - divisor_high_16 * quotient) * 0x10000;\n      shift_amount = quotient;\n      if (partial_quotient <= partial_product && partial_product - partial_quotient != 0) {\n        is_borrow = CARRY4(partial_quotient,divisor);\n        partial_quotient = partial_quotient + divisor;\n        shift_amount = quotient - 1;\n        if ((is_borrow == false) && (partial_quotient <= partial_product && partial_product - partial_quotient != 0)) {\n          shift_amount = quotient - 2;\n          partial_quotient = partial_quotient + divisor;\n        }\n      }\n      temp = (partial_quotient - partial_product) / divisor_high_16;\n      divisor_low = divisor_low * temp;\n      quotient = dividend & 0xffff | ((partial_quotient - partial_product) - divisor_high_16 * temp) * 0x10000;\n      divisor_high_16 = temp;\n      if (quotient <= divisor_low && divisor_low - quotient != 0) {\n        divisor_high_16 = temp - 1;\n        if ((CARRY4(quotient,divisor) == false) &&\n           (quotient + divisor <= divisor_low && divisor_low - (quotient + divisor) != 0)) {\n          divisor_high_16 = temp - 2;\n        }\n      }\n      quotient = divisor_high_16 | shift_amount << 0x10;\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    quotient = 0;\n    result = 0;\n  }\n  else {\n    shift_amount = count_leading_zeroes(divisor_high);\n    if (shift_amount == 0) {\n      if ((divisor_high < dividend_high) || (quotient = shift_amount, result = shift_amount, divisor <= dividend)) {\n        quotient = 1;\n        result = 0;\n      }\n    }\n    else {\n      divisor_high_16 = 0x20 - shift_amount;\n      partial_product = dividend_high >> (divisor_high_16 & 0xff);\n      temp = divisor >> (divisor_high_16 & 0xff) | divisor_high << (shift_amount & 0xff);\n      partial_quotient = temp >> 0x10;\n      quotient = partial_product / partial_quotient;\n      divisor_low = (temp & 0xffff) * quotient;\n      result = dividend_high << (shift_amount & 0xff) | dividend >> (divisor_high_16 & 0xff);\n      partial_product = result >> 0x10 | (partial_product - partial_quotient * quotient) * 0x10000;\n      divisor_high_16 = quotient;\n      if (partial_product <= divisor_low && divisor_low - partial_product != 0) {\n        is_borrow = CARRY4(partial_product,temp);\n        partial_product = partial_product + temp;\n        divisor_high_16 = quotient - 1;\n        if ((is_borrow == false) && (partial_product <= divisor_low && divisor_low - partial_product != 0)) {\n          divisor_high_16 = quotient - 2;\n          partial_product = partial_product + temp;\n        }\n      }\n      partial_quotient_high = (partial_product - divisor_low) / partial_quotient;\n      partial_product_high = (temp & 0xffff) * partial_quotient_high;\n      partial_product = result & 0xffff | ((partial_product - divisor_low) - partial_quotient * partial_quotient_high) * 0x10000;\n      quotient = partial_quotient_high;\n      if (partial_product <= partial_product_high && partial_product_high - partial_product != 0) {\n        is_borrow = CARRY4(partial_product,temp);\n        partial_product = partial_product + temp;\n        quotient = partial_quotient_high - 1;\n        if ((is_borrow == false) && (partial_product <= partial_product_high && partial_product_high - partial_product != 0)) {\n          quotient = partial_quotient_high - 2;\n          partial_product = partial_product + temp;\n        }\n      }\n      quotient = quotient | divisor_high_16 << 0x10;\n      product = (ulonglong)quotient * (ulonglong)(divisor << (shift_amount & 0xff));\n      divisor_high_16 = (uint)((ulonglong)product >> 0x20);\n      if ((partial_product - partial_product_high < divisor_high_16) ||\n         ((result = 0, partial_product - partial_product_high == divisor_high_16 && (dividend << (shift_amount & 0xff) < (uint)product)))) {\n        quotient = quotient - 1;\n        result = 0;\n      }\n    }\n  }\n  if (is_dividend_negative != 0) {\n    is_borrow = quotient != 0;\n    quotient = -quotient;\n    result = -result - (uint)is_borrow;\n  }\n  return CONCAT44(result,quotient);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847e0",
            "calling": [
                "__gnu_ldivmod_helper"
            ],
            "imported": false,
            "current_name": "division_000847e0"
        },
        "FUN_0008105c": {
            "renaming": {
                "FUN_0008105c": "set_bit_at_position_0008105c",
                "param_1": "position",
                "param_2": "bit_value",
                "*(int *)(param_1 + 0x14)": "*ptr_position",
                "shifted_bit_value": "shifted_bit_value"
            },
            "code": "void set_bit_at_position_0008105c(int position, uint8_t bit_value){\n  int* ptr_position = (int*)(position + 0x14);\n  int shifted_bit_value = 1 << (bit_value & 0xff);\n  *ptr_position = shifted_bit_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008105c",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_0008105c"
        },
        "FUN_0008456c": {
            "renaming": {
                "FUN_0008456c": "convert_wide_char_string_to_multibyte_string_0008456c",
                "param_1": "output_string",
                "param_2": "output_string_size",
                "param_3": "input_string",
                "param_4": "error_code",
                "uVar1": "locale_charset",
                "iVar2": "result",
                "pcVar3": "wctomb_function_pointer",
                "auStack_24": "temp_buffer"
            },
            "code": "void convert_wide_char_string_to_multibyte_string_0008456c(char *output_string, int output_string_size, const wchar_t *input_string, size_t input_string_size, int *error_code) {\n  \n  if (input_string_size == 0) {\n    code *wctomb_function_pointer = *(code **)PTR___wctomb_000845b8;\n    char temp_buffer[MB_CUR_MAX];\n    int result = (*wctomb_function_pointer)(output_string, temp_buffer, 0, __locale_charset(), error_code);\n  }\n  else {\n    code *wctomb_function_pointer = *(code **)PTR___wctomb_000845b8;\n    int result = (*wctomb_function_pointer)(output_string, output_string_size, input_string, __locale_charset(), error_code);\n  }\n  if (result == -1) {\n    *error_code = 0;\n    *output_string = 0x8a;\n  }\n  return;\n}",
            "called": [
                "__locale_charset",
                "__ascii_wctomb"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008456c",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "convert_wide_char_string_to_multibyte_string_0008456c"
        },
        "FUN_00080aba": {
            "renaming": {
                "FUN_00080aba": "do_nothing_00080aba"
            },
            "code": "\nvoid do_nothing_00080aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aba",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aba"
        },
        "FUN_00080abc": {
            "renaming": {
                "FUN_00080abc": "do_nothing_00080abc"
            },
            "code": "\nvoid do_nothing_00080abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080abc",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080abc"
        },
        "FUN_000811b4": {
            "renaming": {
                "FUN_000811b4": "set_file_mode_to_symbolic_link_000811b4",
                "file_UNUSED": "file_descriptor",
                "st": "file_status",
                "st->st_mode": "file_status->st_mode"
            },
            "code": "int set_file_mode_to_symbolic_link_000811b4(int file_descriptor, stat *file_status){\n  file_status->st_mode = 0x2000;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b4",
            "calling": [
                "_fstat_r"
            ],
            "imported": false,
            "current_name": "set_file_mode_to_symbolic_link_000811b4"
        },
        "FUN_000813f6": {
            "renaming": {
                "FUN_000813f6": "get_next_byte_in_rx_buffer_000813f6",
                "this": "uart_instance",
                "_rx_buffer": "rx_buffer",
                "_iHead": "head_index",
                "_iTail": "tail_index",
                "_aucBuffer": "buffer",
                "uVar1": "next_byte"
            },
            "code": "uint32_t get_next_byte_in_rx_buffer_000813f6(UARTClass *uart_instance) {\n  uint32_t next_byte;\n  RingBuffer *rx_buffer = uart_instance->rx_buffer;\n  if (rx_buffer->head_index == rx_buffer->tail_index) {\n    next_byte = 0xffffffff;\n  }\n  else {\n    next_byte = (uint32_t)rx_buffer->buffer[rx_buffer->tail_index];\n  }\n  return next_byte;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813f6",
            "calling": [],
            "imported": false,
            "current_name": "get_next_byte_in_rx_buffer_000813f6"
        },
        "FUN_000816d4": {
            "renaming": {
                "FUN_000816d4": "disable_watchdog_timer_000816d4",
                "DAT_000816dc": "watchdog_timer"
            },
            "code": "void disable_watchdog_timer_000816d4(void)\n{\n  WDT_Disable(DAT_000816dc);\n  return;\n}",
            "called": [
                "WDT_Disable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d4",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "disable_watchdog_timer_000816d4"
        },
        "FUN_00083f34": {
            "renaming": {
                "FUN_00083f34": "improved_function_00083f34",
                "param_1": "param_array",
                "param_2": "param_pointers",
                "param_3": "param_sizes",
                "ppvVar1": "next_pointer",
                "iVar2": "result",
                "pvVar3": "buffer",
                "pvVar4": "temp_buffer",
                "uVar5": "flags",
                "uVar6": "size",
                "iVar7": "temp_result",
                "ppvVar8": "input_pointers",
                "pvVar9": "dest_buffer",
                "pvVar10": "src_buffer",
                "pvVar11": "copy_size",
                "pvVar12": "current_pointer",
                "__n": "bytes_written",
                "__n_00": "bytes_to_copy",
                "local_2c": "new_line_found"
            },
            "code": "\nundefined4 improved_function_00083f34(undefined4 *param_array,void **param_pointers,undefined4 *param_sizes)\n\n{\n  void **next_pointer;\n  int result;\n  void *buffer;\n  void *temp_buffer;\n  ushort flags;\n  uint size;\n  int temp_result;\n  void **input_pointers;\n  void *dest_buffer;\n  void *src_buffer;\n  void *copy_size;\n  void *current_pointer;\n  void *bytes_written;\n  size_t bytes_to_copy;\n  void *new_line_found;\n  \n  if (param_sizes[2] != 0) {\n    flags = *(ushort *)(param_pointers + 3);\n    size = (uint)flags;\n    if (((int)(size << 0x1c) < 0) && (param_pointers[4] != (void *)0x0)) {\n      input_pointers = (void **)*param_sizes;\n      buffer = DAT_00084244;\n    }\n    else {\n      result = __swsetup_r(param_array,param_pointers);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flags = *(ushort *)(param_pointers + 3);\n      size = (uint)flags;\n      input_pointers = (void **)*param_sizes;\n      buffer = DAT_00084244;\n    }\n    DAT_00084244 = buffer;\n    if ((flags & 2) == 0) {\n      buffer = (void *)(size & 2);\n      copy_size = (void *)(size & 1);\n      dest_buffer = buffer;\n      src_buffer = buffer;\n      new_line_found = buffer;\n      current_pointer = copy_size;\n      if (copy_size == (void *)0x0) {\n        while( true ) {\n          while (copy_size == (void *)0x0) {\n            current_pointer = *input_pointers;\n            next_pointer = input_pointers + 1;\n            input_pointers = input_pointers + 2;\n            copy_size = *next_pointer;\n          }\n          buffer = param_pointers[2];\n          if ((int)(size << 0x16) < 0) {\n            if (copy_size < buffer) {\n              dest_buffer = *param_pointers;\n              buffer = copy_size;\n            }\n            else if ((size & 0x480) == 0) {\n              dest_buffer = *param_pointers;\n            }\n            else {\n              bytes_to_copy = (int)*param_pointers - (int)param_pointers[4];\n              buffer = (void *)(bytes_to_copy + 1 + (int)copy_size);\n              dest_buffer = (void *)(((int)param_pointers[5] * 3) / 2);\n              if (buffer <= dest_buffer) {\n                buffer = dest_buffer;\n              }\n              if ((int)(size << 0x15) < 0) {\n                src_buffer = (void *)_malloc_r(param_array,buffer);\n                if (src_buffer == (void *)0x0) {\n                  *param_array = 0xc;\n                  flags = *(ushort *)(param_pointers + 3);\n                  goto LAB_00084030;\n                }\n                memcpy(src_buffer,param_pointers[4],bytes_to_copy);\n                *(ushort *)(param_pointers + 3) = *(ushort *)(param_pointers + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                src_buffer = (void *)_realloc_r(param_array);\n                if (src_buffer == (void *)0x0) {\n                  _free_r(param_array,param_pointers[4]);\n                  flags = *(ushort *)(param_pointers + 3) & 0xff7f;\n                  *param_array = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              dest_buffer = (void *)((int)src_buffer + bytes_to_copy);\n              param_pointers[4] = src_buffer;\n              param_pointers[5] = buffer;\n              *param_pointers = dest_buffer;\n              param_pointers[2] = (void *)((int)buffer - bytes_to_copy);\n              buffer = copy_size;\n            }\n            memmove(dest_buffer,current_pointer,(size_t)buffer);\n            param_pointers[2] = (void *)((int)param_pointers[2] - (int)buffer);\n            *param_pointers = (void *)((int)*param_pointers + (int)buffer);\n            buffer = copy_size;\n          }\n          else if ((param_pointers[4] < *param_pointers) || (dest_buffer = param_pointers[5], copy_size < dest_buffer)) {\n            if (copy_size < buffer) {\n              buffer = copy_size;\n            }\n            memmove(*param_pointers,current_pointer,(size_t)buffer);\n            dest_buffer = param_pointers[2];\n            param_pointers[2] = (void *)((int)dest_buffer - (int)buffer);\n            *param_pointers = (void *)((int)*param_pointers + (int)buffer);\n            if (((void *)((int)dest_buffer - (int)buffer) == (void *)0x0) &&\n               (result = _fflush_r(param_array,param_pointers), result != 0)) goto LAB_0008402e;\n          }\n          else {\n            buffer = (void *)0x7fffffff;\n            if (copy_size < (void *)0x7fffffff) {\n              buffer = copy_size;\n            }\n            buffer = (void *)(*(code *)param_pointers[9])\n                                       (param_array,param_pointers[7],current_pointer,\n                                        ((uint)buffer / (uint)dest_buffer) * (int)dest_buffer);\n            if ((int)buffer < 1) goto LAB_0008402e;\n          }\n          result = param_sizes[2];\n          copy_size = (void *)((int)copy_size - (int)buffer);\n          param_sizes[2] = result - (int)buffer;\n          if (result - (int)buffer == 0) break;\n          size = (uint)*(ushort *)(param_pointers + 3);\n          current_pointer = (void *)((int)current_pointer + (int)buffer);\n        }\n      }\n      else {\n        do {\n          while (buffer == (void *)0x0) {\n            src_buffer = *input_pointers;\n            buffer = input_pointers[1];\n            new_line_found = (void *)0x0;\n            input_pointers = input_pointers + 2;\n          }\n          if (new_line_found == (void *)0x0) {\n            dest_buffer = memchr(src_buffer,10,(size_t)buffer);\n            if (dest_buffer == (void *)0x0) {\n              dest_buffer = (void *)((int)buffer + 1);\n              new_line_found = (void *)0x1;\n            }\n            else {\n              dest_buffer = (void *)((int)dest_buffer + (1 - (int)src_buffer));\n              new_line_found = (void *)0x1;\n            }\n          }\n          current_pointer = *param_pointers;\n          copy_size = dest_buffer;\n          if (buffer <= dest_buffer) {\n            copy_size = buffer;\n          }\n          temp_buffer = param_pointers[5];\n          if ((param_pointers[4] < current_pointer) &&\n             (bytes_written = (void *)((int)param_pointers[2] + (int)temp_buffer), (int)bytes_written < (int)copy_size)) {\n            memmove(current_pointer,src_buffer,(size_t)bytes_written);\n            *param_pointers = (void *)((int)*param_pointers + (int)bytes_written);\n            result = _fflush_r(param_array,param_pointers);\n            if (result != 0) goto LAB_0008402e;\n          }\n          else if ((int)copy_size < (int)temp_buffer) {\n            memmove(current_pointer,src_buffer,(size_t)copy_size);\n            param_pointers[2] = (void *)((int)param_pointers[2] - (int)copy_size);\n            *param_pointers = (void *)((int)copy_size + (int)*param_pointers);\n            bytes_written = copy_size;\n          }\n          else {\n            bytes_written = (void *)(*(code *)param_pointers[9])(param_array,param_pointers[7],src_buffer,temp_buffer);\n            if ((int)bytes_written < 1) goto LAB_0008402e;\n          }\n          dest_buffer = (void *)((int)dest_buffer - (int)bytes_written);\n          if ((dest_buffer == (void *)0x0) &&\n             (result = _fflush_r(param_array,param_pointers), new_line_found = dest_buffer, result != 0)) goto LAB_0008402e;\n          result = param_sizes[2];\n          src_buffer = (void *)((int)src_buffer + (int)bytes_written);\n          buffer = (void *)((int)buffer - (int)bytes_written);\n          param_sizes[2] = result - (int)bytes_written;\n        } while (result - (int)bytes_written != 0);\n      }\n    }\n    else {\n      src_buffer = (void *)0x0;\n      dest_buffer = (void *)0x0;\n      do {\n        while( true ) {\n          copy_size = dest_buffer;\n          if (buffer <= dest_buffer) {\n            copy_size = buffer;\n          }\n          if (dest_buffer != (void *)0x0) break;\n          src_buffer = *input_pointers;\n          dest_buffer = input_pointers[1];\n          input_pointers = input_pointers + 2;\n        }\n        result = (*(code *)param_pointers[9])(param_array,param_pointers[7],src_buffer,copy_size);\n        if (result < 1) {\nLAB_0008402e:\n          flags = *(ushort *)(param_pointers + 3);\nLAB_00084030:\n          *(ushort *)(param_pointers + 3) = flags | 0x40;\n          return 0xffffffff;\n        }\n        temp_result = param_sizes[2];\n        src_buffer = (void *)((int)src_buffer + result);\n        dest_buffer = (void *)((int)dest_buffer - result);\n        param_sizes[2] = temp_result - result;\n      } while (temp_result - result != 0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "memcpy",
                "_free_r",
                "__swsetup_r",
                "memmove",
                "_realloc_r",
                "_fflush_r",
                "memchr",
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083f34",
            "calling": [
                "__sprint_r.part.0"
            ],
            "imported": false,
            "current_name": "improved_function_00083f34"
        },
        "FUN_00081074": {
            "renaming": {
                "FUN_00081074": "execute_isr_if_present_00081074",
                "PTR_gpf_isr_00081080": "isr_function_ptr"
            },
            "code": "void execute_isr_if_present_00081074(void)\n{\n  code* PTR_gpf_isr_00081080 = *(code **)PTR_gpf_isr_00081080;\n  if (PTR_gpf_isr_00081080 != NULL)\n  {\n    (*PTR_gpf_isr_00081080)();\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081074",
            "calling": [],
            "imported": false,
            "current_name": "execute_isr_if_present_00081074"
        },
        "FUN_00080d7a": {
            "renaming": {
                "FUN_00080d7a": "update_array_with_value_00080d7a",
                "param_1": "array",
                "param_2": "value",
                "param_3": "has_zero",
                "param_4": "has_one",
                "param_5": "has_two",
                "0x11": "17",
                "0x18": "24",
                "0x19": "25",
                "0x15": "21",
                "0x14": "20",
                "0xd": "13",
                "0xc": "12"
            },
            "code": "void update_array_with_value_00080d7a(int* array, int value, int has_zero, int has_one, int has_two) {\n  array[17] = value;\n  if (has_two == 0) {\n    array[24] = value;\n  }\n  else {\n    array[25] = value;\n  }\n  if (has_one == 0) {\n    array[21] = value;\n  }\n  else {\n    array[20] = value;\n  }\n  if (has_zero == 0) {\n    array[13] = value;\n  }\n  else {\n    array[12] = value;\n  }\n  array[4] = value;\n  *array = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d7a",
            "calling": [
                "PIO_Configure",
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "update_array_with_value_00080d7a"
        },
        "FUN_00080e9c": {
            "renaming": {
                "FUN_00080e9c": "initialize_system_clock_00080e9c",
                "puVar1": "system_clock_control_reg",
                "DAT_00080f08": "system_clock_control_reg_ptr",
                "iVar2": "rcc_base_address",
                "DAT_00080f0c": "rcc_base_address_ptr",
                "*(int *)(DAT_00080f0c + 0x20)": "(*(int *)(rcc_base_address + 0x20)",
                "DAT_00080f14": "crystal_oscillator",
                "*(int *)(iVar2 + 0x68)": "(*(int *)(rcc_base_address + 0x68))",
                "*(uint32_t *)(DAT_00080f0c + 0x20)": "*(uint32_t *)(rcc_base_address + 0x20)",
                "DAT_00080f10": "hsi_system_clock",
                "*(uint32_t *)(DAT_00080f0c + 0x30)": "*(uint32_t *)(rcc_base_address + 0x30)",
                "ahb_prescaler_value": "ahb_prescaler_value",
                "DAT_00080f18": "ahb_prescaler_value",
                "apb1_prescaler_value": "apb1_prescaler_value",
                "apb2_prescaler_value": "apb2_prescaler_value",
                "PTR_SystemCoreClock_00080f20": "system_clock_frequency_ptr",
                "DAT_00080f1c": "system_clock_frequency_value"
            },
            "code": "void initialize_system_clock_00080e9c(void)\n{\n  uint32_t *system_clock_control_reg = DAT_00080f08;\n  uint32_t system_clock_control_reg_value = 0x400;\n  system_clock_control_reg[0x80] = system_clock_control_reg_value;\n  int *rcc_base_address = DAT_00080f0c;\n  if (-1 < *(int *)(DAT_00080f0c + 0x20) << 7)) {\n    *(uint32_t *)(DAT_00080f0c + 0x20) = DAT_00080f14;\n    while (-1 < (*(int *)(rcc_base_address + 0x68) << 0x1f)) {};\n  }\n  *(uint32_t *)(DAT_00080f0c + 0x20) = DAT_00080f10;\n  while (-1 < (*(int *)(rcc_base_address + 0x68) << 0xf)) {};\n  *(uint32_t *)(DAT_00080f0c + 0x30) = (*(uint32_t *)(DAT_00080f0c + 0x30) & 0xfffffffc) | 1;\n  while (-1 < (*(int *)(rcc_base_address + 0x68) << 0x1c)) {};\n  *(uint32_t *)(rcc_base_address + 0x28) = DAT_00080f18;\n  while (-1 < (*(int *)(rcc_base_address + 0x68) << 0x1e)) {};\n  *(uint32_t *)(DAT_00080f0c + 0x30) = apb1_prescaler_value;\n  while (-1 < (*(int *)(rcc_base_address + 0x68) << 0x1c)) {};\n  *(uint32_t *)(DAT_00080f0c + 0x30) = apb2_prescaler_value;\n  while (-1 < (*(int *)(rcc_base_address + 0x68) << 0x1c)) {};\n  *PTR_SystemCoreClock_00080f20 = DAT_00080f1c;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e9c",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "initialize_system_clock_00080e9c"
        },
        "FUN_00084464": {
            "renaming": {
                "FUN_00084464": "read_write_file_00084464",
                "param_1": "file_descriptor",
                "param_2": "file_offset",
                "param_3": "buffer",
                "param_4": "size",
                "uVar1": "data"
            },
            "code": "void read_write_file_00084464(int file_descriptor, int file_offset, void* buffer, size_t size)\n{\n  ushort data;\n  data = *(ushort *)(file_offset + 0xc);\n  if ((int)((uint)data << 0x17) < 0) {\n    _lseek_r(file_descriptor,(int)*(short *)(file_offset + 0xe),0,2);\n    data = *(ushort *)(file_offset + 0xc);\n  }\n  *(ushort *)(file_offset + 0xc) = data & 0xefff;\n  _write_r(file_descriptor, (int)*(short *)(file_offset + 0xe), buffer, size);\n  return;\n}",
            "called": [
                "_lseek_r",
                "_write_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084464",
            "calling": [],
            "imported": false,
            "current_name": "read_write_file_00084464"
        },
        "FUN_000847dc": {
            "renaming": {
                "FUN_000847dc": "do_nothing_000847dc"
            },
            "code": "\nvoid do_nothing_000847dc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847dc",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "do_nothing_000847dc"
        },
        "FUN_000811ae": {
            "renaming": {
                "FUN_000811ae": "return_error_000811ae",
                "file_UNUSED": "file"
            },
            "code": "int return_error_000811ae(int file){\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ae",
            "calling": [
                "_close_r"
            ],
            "imported": false,
            "current_name": "return_error_000811ae"
        },
        "FUN_00080148": {
            "renaming": {
                "FUN_00080148": "software_interrupt_handler_00080148",
                "a0": "data",
                "a1": "interrupt_code",
                "a2": "status"
            },
            "code": "uint32_t software_interrupt_handler_00080148(uint32_t interrupt_code, uint32_t data, int32_t status)\n{\n  software_interrupt(interrupt_code);\n  return data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080148",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "software_interrupt_handler_00080148"
        },
        "FUN_00080ad8": {
            "renaming": {
                "FUN_00080ad8": "handle_UART_interrupt_00080ad8",
                "PTR_Serial3_00080ae0": "serial3"
            },
            "code": "void handle_UART_interrupt_00080ad8(void)\n{\n  UARTClass* PTR_Serial3_00080ae0 = (UARTClass*)PTR_Serial3_00080ae0;\n  PTR_Serial3_00080ae0->IrqHandler();\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ad8",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_00080ad8"
        },
        "FUN_00084624": {
            "renaming": {
                "FUN_00084624": "flush_and_free_00084624",
                "param_1": "file_descriptor",
                "param_2": "stream",
                "uVar1": "result",
                "iVar2": "function_result"
            },
            "code": "int flush_and_free_00084624(int file_descriptor, int stream)\n{\n    int result;\n    if (stream != 0)\n    {\n        if (file_descriptor != 0 && *(int *)(file_descriptor + 0x38) == 0)\n        {\n            __sinit();\n        }\n        if (*(short *)(stream + 0xc) != 0)\n        {\n            result = _fflush_r(file_descriptor, stream);\n            if (*(code **)(stream + 0x2c) != (code *)0x0)\n            {\n                int function_result = (**(code **)(stream + 0x2c))(file_descriptor, *(undefined4 *)(stream + 0x1c));\n                if (function_result < 0)\n                {\n                    result = 0xffffffff;\n                }\n            }\n            if ((int)((uint)*(ushort *)(stream + 0xc) << 0x18) < 0)\n            {\n                _free_r(file_descriptor, *(undefined4 *)(stream + 0x10));\n            }\n            if (*(int *)(stream + 0x30) != 0)\n            {\n                if (*(int *)(stream + 0x30) != stream + 0x40)\n                {\n                    _free_r(file_descriptor);\n                }\n                *(undefined4 *)(stream + 0x30) = 0;\n            }\n            if (*(int *)(stream + 0x44) != 0)\n            {\n                _free_r(file_descriptor);\n                *(undefined4 *)(stream + 0x44) = 0;\n            }\n            __sfp_lock_acquire();\n            *(undefined2 *)(stream + 0xc) = 0;\n            __sfp_lock_release();\n            return result;\n        }\n    }\n    return 0;\n}",
            "called": [
                "__sfp_lock_release",
                "_free_r",
                "_fflush_r",
                "__sfp_lock_acquire",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084624",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "flush_and_free_00084624"
        },
        "FUN_0008118c": {
            "renaming": {
                "FUN_0008118c": "allocate_memory_0008118c",
                "incr": "size",
                "puVar1": "heap_pointer",
                "pcVar2": "allocated_memory",
                "PTR_heap_000811a0": "heap_start",
                "PTR__ebss_000811a4": "end_of_bss"
            },
            "code": "caddr_t allocate_memory_0008118c(int size)\n{\n  undefined *heap_pointer;\n  caddr_t allocated_memory;\n  \n  heap_pointer = PTR_heap_000811a0;\n  if (*(int *)PTR_heap_000811a0 == 0) {\n    *(undefined **)PTR_heap_000811a0 = PTR__ebss_000811a4;\n  }\n  allocated_memory = *(caddr_t *)heap_pointer;\n  *(caddr_t *)heap_pointer = allocated_memory + size;\n  return allocated_memory;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008118c",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_0008118c"
        },
        "FUN_00082a50": {
            "renaming": {
                "FUN_00082a50": "find_string_length_00082a50",
                "__s": "string",
                "sVar1": "remainder",
                "puVar2": "string_ptr",
                "uVar3": "current_word",
                "bVar4": "is_last_byte_null"
            },
            "code": "size_t find_string_length_00082a50(char* string)\n{\n    size_t length = 0;\n    uint32_t* string_ptr = (uint32_t*)((uint32_t)string & 0xfffffffc);\n    size_t remainder = -((uint32_t)string & 3);\n    uint32_t current_word = *string_ptr;\n    if (((uint32_t)string & 3) != 0) {\n        current_word |= 0xffffffffU >> ((remainder + 4 & 0x1f) << 3);\n    }\n    while (string_ptr++, (current_word + 0xfefefeff & ~current_word & 0x80808080) == 0) {\n        remainder += 4;\n        current_word = *string_ptr;\n    }\n    bool is_last_byte_null = (current_word & 0xff) == 0;\n    if (!is_last_byte_null) {\n        remainder++;\n        is_last_byte_null = (current_word & 0xff00) == 0;\n    }\n    if (!is_last_byte_null) {\n        remainder++;\n        is_last_byte_null = (current_word & 0xff0000) == 0;\n    }\n    if (!is_last_byte_null) {\n        remainder++;\n    }\n    return remainder;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082a50",
            "calling": [
                "_vfiprintf_r",
                "String"
            ],
            "imported": false,
            "current_name": "find_string_length_00082a50"
        },
        "FUN_0008106e": {
            "renaming": {
                "FUN_0008106e": "set_parameter_0008106e",
                "param_1": "base_address",
                "param_2": "parameter_value",
                "*(undefined4 *)(param_1 + 0x28)": "*(int *)(base_address + 0x28)"
            },
            "code": "void set_parameter_0008106e(int base_address, int parameter_value) {\n  *(int *)(base_address + 0x28) = parameter_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008106e",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_parameter_0008106e"
        },
        "FUN_000811c2": {
            "renaming": {
                "FUN_000811c2": "calculate_file_000811c2",
                "file_UNUSED": "file_number",
                "ptr_UNUSED": "pointer_value",
                "dir_UNUSED": "directory_value"
            },
            "code": "int calculate_file_000811c2(int file_number, int pointer_value, int directory_value) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c2",
            "calling": [
                "_lseek_r"
            ],
            "imported": false,
            "current_name": "calculate_file_000811c2"
        },
        "FUN_000816e0": {
            "renaming": {
                "FUN_000816e0": "print_buffer_000816e0",
                "this": "print_instance",
                "buffer": "buffer",
                "size": "buffer_size",
                "pPVar1": "current_instance",
                "sVar2": "bytes_printed"
            },
            "code": "size_t __thiscall print_buffer_000816e0(Print *print_instance, uint8_t *buffer, size_t buffer_size) {\n    Print *current_instance = print_instance;\n    size_t bytes_printed = 0;\n    while ((bytes_printed != buffer_size && (current_instance = (Print *)(**print_instance->_vptr_Print)(current_instance, (uint)buffer[bytes_printed]), current_instance != (Print *)0x0))) {\n        bytes_printed++;\n    }\n    return bytes_printed;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816e0",
            "calling": [],
            "imported": false,
            "current_name": "print_buffer_000816e0"
        },
        "FUN_00080acc": {
            "renaming": {
                "FUN_00080acc": "handle_uart_interrupt_00080acc",
                "PTR_Serial2_00080ad4": "serial2_ptr"
            },
            "code": "void handle_uart_interrupt_00080acc(void)\n{\n  UARTClass::IrqHandler((UARTClass *)PTR_Serial2_00080ad4);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080acc",
            "calling": [],
            "imported": false,
            "current_name": "handle_uart_interrupt_00080acc"
        },
        "FUN_000811c6": {
            "renaming": {
                "FUN_000811c6": "zero_out_file_000811c6",
                "file_UNUSED": "file",
                "ptr_UNUSED": "data_pointer",
                "len_UNUSED": "length"
            },
            "code": "int zero_out_file_000811c6(int file, char *data_pointer, int length){\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c6",
            "calling": [
                "_read_r"
            ],
            "imported": false,
            "current_name": "zero_out_file_000811c6"
        },
        "FUN_00083d00": {
            "renaming": {
                "FUN_00083d00": "allocate_memory_block_00083d00",
                "param_1": "heap_lock",
                "param_2": "block_size",
                "puVar1": "heap_pointer",
                "puVar2": "mallinfo_pointer",
                "iVar3": "current_heap_pointer",
                "uVar4": "heap_size",
                "iVar5": "padding_size"
            },
            "code": "int allocate_memory_block_00083d00(void *heap_lock, int block_size) {\n  void *heap_pointer = PTR___malloc_av__00083d90;\n  __malloc_lock();\n  uint heap_size = *(uint *)(*(int *)(heap_pointer + 8) + 4) & 0xfffffffc;\n  int padding_size = ((heap_size - block_size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < padding_size) {\n    int current_heap_pointer = _sbrk_r(heap_lock, 0);\n    if (current_heap_pointer == *(int *)(heap_pointer + 8) + heap_size) {\n      current_heap_pointer = _sbrk_r(heap_lock, -padding_size);\n      void *mallinfo_pointer = PTR___malloc_current_mallinfo_00083d94;\n      if (current_heap_pointer != -1) {\n        int current_mallinfo = *(int *)PTR___malloc_current_mallinfo_00083d94;\n        *(uint *)(*(int *)(heap_pointer + 8) + 4) = heap_size - padding_size | 1;\n        *(int *)mallinfo_pointer = current_mallinfo - padding_size;\n        __malloc_unlock(heap_lock);\n        return 1;\n      }\n      current_heap_pointer = _sbrk_r(heap_lock, 0);\n      void *sbrk_base_pointer = PTR___malloc_sbrk_base_00083d98;\n      heap_size = current_heap_pointer - *(int *)(heap_pointer + 8);\n      if (0xf < (int)heap_size) {\n        int sbrk_base = *(int *)PTR___malloc_sbrk_base_00083d98;\n        *(uint *)(*(int *)(heap_pointer + 8) + 4) = heap_size | 1;\n        *(int *)mallinfo_pointer = current_heap_pointer - sbrk_base;\n      }\n    }\n  }\n  __malloc_unlock(heap_lock);\n  return 0;\n}",
            "called": [
                "_sbrk_r",
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d00",
            "calling": [
                "_free_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00083d00"
        },
        "FUN_00081d68": {
            "renaming": {
                "FUN_00081d68": "register_exit_process_00081d68",
                "param_1": "exit_code",
                "param_2": "function_pointer",
                "param_3": "arg_pointer",
                "PTR_": "pointer_",
                "DAT_": "data_"
            },
            "code": "void register_exit_process_00081d68(int exit_code, void* function_pointer, void* arg_pointer, void* cleanup_pointer) {\n  __register_exitproc(exit_code, function_pointer, arg_pointer, cleanup_pointer);\n  return;\n}",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d68",
            "calling": [
                "__aeabi_atexit"
            ],
            "imported": false,
            "current_name": "register_exit_process_00081d68"
        }
    },
    "used_tokens": 153816,
    "layers": [
        [
            "FUN_000816a8",
            "FUN_00081042",
            "FUN_00080ce0",
            "FUN_00081164",
            "FUN_00081166",
            "FUN_00081202",
            "FUN_00081720",
            "FUN_00081d1c",
            "FUN_00083988",
            "FUN_000847ac",
            "FUN_00080118",
            "FUN_00081208",
            "FUN_00081c94",
            "FUN_000810f4",
            "FUN_00083b14",
            "FUN_000842a4",
            "FUN_0008143c",
            "FUN_00080f24",
            "FUN_00080e04",
            "FUN_000804a8",
            "FUN_00084440",
            "FUN_000802da",
            "FUN_00080f9c",
            "FUN_00081210",
            "FUN_00083994",
            "FUN_00081454",
            "FUN_00084600",
            "FUN_00081578",
            "FUN_00084728",
            "FUN_0008116a",
            "FUN_000813e0",
            "FUN_00083c40",
            "FUN_0008116e",
            "FUN_000813e4",
            "FUN_00081cbc",
            "FUN_00080aac",
            "FUN_00084290",
            "FUN_000846b4",
            "FUN_000811a8",
            "FUN_000818c8",
            "FUN_00081bf4",
            "FUN_00081d7c",
            "FUN_000810bc",
            "FUN_00081c5c",
            "FUN_00081388",
            "FUN_00082994",
            "FUN_00080c0c",
            "FUN_00084418",
            "FUN_00080d2e",
            "FUN_20070000",
            "FUN_000811f0",
            "FUN_00081704",
            "FUN_00083c10",
            "FUN_00081bec",
            "FUN_000844c4",
            "FUN_0008189c",
            "FUN_0008234c",
            "FUN_00080a68",
            "FUN_0008165c",
            "FUN_000815f8",
            "FUN_00084384",
            "FUN_00081c6c",
            "FUN_00081034",
            "FUN_000844bc",
            "FUN_00083974",
            "FUN_00084700",
            "FUN_00080e5c",
            "FUN_00081ca8",
            "FUN_00081318",
            "FUN_00081714",
            "FUN_00081c80",
            "FUN_0008449c",
            "FUN_0008477c",
            "FUN_000801b0",
            "FUN_000813c2",
            "FUN_000814e4",
            "FUN_00080d54",
            "FUN_0008021c",
            "FUN_00083b08",
            "FUN_000814a8",
            "FUN_00081084",
            "FUN_00084750",
            "FUN_00081d5c",
            "FUN_00082970",
            "FUN_000811be",
            "FUN_0008014c",
            "FUN_00081c54",
            "FUN_0008163a",
            "FUN_00080d24",
            "FUN_000818b8",
            "FUN_00080164",
            "FUN_000811cc",
            "FUN_000846dc",
            "FUN_00081be4",
            "FUN_000815ca",
            "FUN_00081894",
            "FUN_00084248",
            "FUN_000845bc",
            "FUN_00081412",
            "FUN_000838cc",
            "FUN_00082504",
            "FUN_000800f4",
            "FUN_0008378c",
            "FUN_00083adc",
            "FUN_0008112c",
            "FUN_000803d4",
            "FUN_000845d8",
            "FUN_0008160c",
            "FUN_00080e18",
            "FUN_00081184",
            "FUN_00081580",
            "FUN_00084298",
            "FUN_00080ac0",
            "FUN_00081066",
            "FUN_00081cd0",
            "FUN_00081188",
            "FUN_00080410",
            "FUN_00080da0",
            "FUN_00080258",
            "FUN_00081622",
            "FUN_00082438",
            "FUN_00081508",
            "FUN_00083808",
            "FUN_0008105c",
            "FUN_0008456c",
            "FUN_000811b4",
            "FUN_000813f6",
            "FUN_000816d4",
            "FUN_00081074",
            "FUN_00080d7a",
            "FUN_00080e9c",
            "FUN_00084464",
            "FUN_000811ae",
            "FUN_00080148",
            "FUN_00080ad8",
            "FUN_00084624",
            "FUN_0008118c",
            "FUN_00082a50",
            "FUN_0008106e",
            "FUN_000811c2",
            "FUN_000816e0",
            "FUN_00080acc",
            "FUN_000811c6",
            "FUN_00083d00",
            "FUN_00081d68"
        ],
        [
            "FUN_00082ac0",
            "FUN_00081682",
            "FUN_000815fe",
            "FUN_00081dcc",
            "FUN_000846a4",
            "FUN_000813a8",
            "FUN_00082ab0",
            "FUN_00081e04",
            "FUN_00080ae4",
            "FUN_000825a0",
            "FUN_000815d4",
            "FUN_0008043e",
            "FUN_00081df4"
        ],
        [
            "FUN_00081728",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_000805d0",
            "FUN_00083d9c",
            "FUN_00081944",
            "FUN_00082b38",
            "FUN_00084a80",
            "FUN_00081aac",
            "FUN_00081e14",
            "FUN_000825b0",
            "FUN_000847e0",
            "FUN_00083f34"
        ]
    ],
    "locked_functions": []
}