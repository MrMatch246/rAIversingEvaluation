{
    "functions": {
        "FUN_000816a6": {
            "renaming": {
                "FUN_000816a6": "do_nothing_000816a6"
            },
            "code": "\nvoid do_nothing_000816a6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a6",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "do_nothing_000816a6"
        },
        "FUN_000816a8": {
            "renaming": {
                "FUN_000816a8": "run_application_000816a8",
                "FUN_000816d4": "initialize_peripherals",
                "FUN_00080ae4": "configure_interrupts",
                "do_nothing_000816a6": "wait_for_input",
                "do_nothing_0008120c": "process_input",
                "FUN_000804a8": "perform_startup_tasks",
                "FUN_000805d0": "execute_main_function",
                "DAT_000816d0": "data_ready",
                "FUN_00080ce0": "handle_data"
            },
            "code": "void run_application_000816a8(void)\n{\n  initialize_peripherals();\n  configure_interrupts();\n  wait_for_input();\n  process_input(1);\n  perform_startup_tasks();\n  do {\n    do {\n      execute_main_function();\n    } while (DAT_000816d0 == 0);\n    handle_data();\n  } while( true );\n}",
            "called": [
                "FUN_000804a8",
                "FUN_00080ae4",
                "FUN_000805d0",
                "FUN_00080ce0",
                "FUN_0008120c",
                "FUN_000816d4",
                "FUN_000816a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a8",
            "calling": [
                "FUN_00080f24"
            ],
            "imported": false,
            "current_name": "run_application_000816a8"
        },
        "FUN_00081042": {
            "renaming": {
                "FUN_00081042": "update_data_at_address_00081042",
                "param_1": "address",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void update_data_at_address_00081042(uint32_t* address, uint32_t value1, uint32_t value2, uint32_t value3)\n{\n  uint32_t mask1 = 0xF000000u;\n  uint32_t mask2 = 0x30000000u;\n  uint32_t updated_value = (value1 & mask1) << 0x18 | (value3 | *address | (value2 & mask1)) | (value3 & mask2);\n  *address = updated_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081042",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "update_data_at_address_00081042"
        },
        "FUN_00082ac0": {
            "renaming": {
                "FUN_00082ac0": "FUN_00082ac0"
            },
            "code": "\nint FUN_00082ac0(undefined4 param_1,int param_2,int **param_3)\n\n{\n  int *piVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  undefined4 *puVar5;\n  uint uVar6;\n  uint uVar7;\n  \n  if (-1 < *(int *)(param_2 + 100) << 0x12) {\n    iVar2 = FUN_00083f34();\n    param_3[2] = (int *)0x0;\n    param_3[1] = (int *)0x0;\n    return iVar2;\n  }\n  piVar3 = param_3[2];\n  piVar1 = *param_3;\n  while (piVar3 != (int *)0x0) {\n    uVar6 = piVar1[1];\n    uVar7 = uVar6 >> 2;\n    if (uVar7 != 0) {\n      puVar5 = (undefined4 *)(*piVar1 + -4);\n      uVar4 = 0;\n      do {\n        puVar5 = puVar5 + 1;\n        iVar2 = FUN_00083c40(param_1,*puVar5,param_2);\n        uVar4 = uVar4 + 1;\n        if (iVar2 == -1) goto LAB_00082b00;\n      } while (uVar7 != uVar4);\n      piVar3 = param_3[2];\n    }\n    piVar3 = (int *)((int)piVar3 - (uVar6 & 0xfffffffc));\n    param_3[2] = piVar3;\n    piVar1 = piVar1 + 2;\n  }\n  iVar2 = 0;\nLAB_00082b00:\n  param_3[2] = (int *)0x0;\n  param_3[1] = (int *)0x0;\n  return iVar2;\n}\n\n",
            "called": [
                "FUN_00083f34",
                "FUN_00083c40"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082ac0",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "FUN_00082ac0"
        },
        "FUN_00080ce0": {
            "renaming": {
                "FUN_00080ce0": "check_data_pointers_00080ce0",
                "iVar1": "result",
                "FUN_000813e4": "is_valid_pointer",
                "PTR_DAT_00080d14": "PTR_DAT_00080d14",
                "PTR_DAT_00080d18": "PTR_DAT_00080d18",
                "PTR_DAT_00080d1c": "PTR_DAT_00080d1c",
                "PTR_DAT_00080d20": "PTR_DAT_00080d20",
                "do_nothing_00080aa8": "do_nothing_00080aa8",
                "do_nothing_00080ab8": "do_nothing_00080ab8",
                "do_nothing_00080aba": "do_nothing_00080aba",
                "do_nothing_00080abc": "do_nothing_00080abc"
            },
            "code": "void check_data_pointers_00080ce0(void)\n{\n  int result;\n  result = is_valid_pointer(PTR_DAT_00080d14);\n  if (result != 0) {\n    do_nothing_00080aa8();\n  }\n  result = is_valid_pointer(PTR_DAT_00080d18);\n  if (result != 0) {\n    do_nothing_00080ab8();\n  }\n  result = is_valid_pointer(PTR_DAT_00080d1c);\n  if (result != 0) {\n    do_nothing_00080aba();\n  }\n  result = is_valid_pointer(PTR_DAT_00080d20);\n  if (result != 0) {\n    do_nothing_00080abc();\n  }\n  return;\n}",
            "called": [
                "FUN_00080aa8",
                "FUN_00080abc",
                "FUN_00080ab8",
                "FUN_00080aba",
                "FUN_000813e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ce0",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "check_data_pointers_00080ce0"
        },
        "FUN_00081682": {
            "renaming": {
                "FUN_00081682": "initialize_array_with_zeros_00081682",
                "param_1": "array",
                "param_2": "array_size",
                "uVar1": "function_result",
                "*param_1": "array[0]",
                "param_1[1]": "array[1]",
                "param_1[2]": "array[2]"
            },
            "code": "undefined4* initialize_array_with_zeros_00081682(undefined4* array, int array_size)\n{\n    undefined4 zero = 0;\n    array[0] = zero;\n    array[1] = zero;\n    array[2] = zero;\n    if (array_size != 0) {\n        undefined4 function_result = FUN_00082a50(array_size);\n        FUN_0008165c(array, array_size, function_result);\n    }\n    return array;\n}",
            "called": [
                "FUN_0008165c",
                "FUN_00082a50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081682",
            "calling": [
                "FUN_00080a68"
            ],
            "imported": false,
            "current_name": "initialize_array_with_zeros_00081682"
        },
        "FUN_000815fe": {
            "renaming": {
                "FUN_000815fe": "reverse_and_return_pointer_to_first_element_of_array_000815fe",
                "param_1": "array_pointer",
                "FUN_00081e04": "reverse_array"
            },
            "code": "undefined4 *reverse_and_return_pointer_to_first_element_of_array_000815fe(undefined4 *array_pointer)\n{\n  reverse_array(*array_pointer);\n  return array_pointer;\n}",
            "called": [
                "FUN_00081e04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815fe",
            "calling": [],
            "imported": false,
            "current_name": "reverse_and_return_pointer_to_first_element_of_array_000815fe"
        },
        "FUN_00081d1c": {
            "renaming": {
                "FUN_00081d1c": "unsigned_integer_division_by_power_of_two_00081d1c",
                "param_1": "dividend",
                "uVar1": "divisor",
                "PTR_": "const ",
                "DAT_": "const ",
                "& 0x80000000": " & SIGN_BIT_MASK",
                "<< 1 < 0x7f000000": " << 1 < (1 << 23)",
                "0x9e": "EXPONENT_BIAS",
                "<< 1": " << EXPONENT_SHIFT",
                ">> 0x18": " >> EXPONENT_SHIFT",
                "(int)uVar1": "(int)divisor",
                "| 0x80000000": "| SIGN_BIT_MASK",
                "& 0xff": " & (divisor - 1)"
            },
            "code": "uint unsigned_integer_division_by_power_of_two_00081d1c(uint dividend){\n    PTR_uint SIGN_BIT_MASK = 0x80000000;\n    PTR_uint MANTISSA_MASK = 0x7fffff;\n    PTR_uint EXPONENT_MASK = 0xff000000;\n    PTR_uint EXPONENT_BIAS = 0x9e;\n    PTR_uint EXPONENT_SHIFT = 0x18;\n    uint sign_bit = dividend & SIGN_BIT_MASK;\n    uint exponent = (dividend & EXPONENT_MASK) >> EXPONENT_SHIFT;\n    uint mantissa = dividend & MANTISSA_MASK;\n    uint divisor = 1 << (EXPONENT_BIAS - exponent);\n    if (sign_bit || (dividend << 1 < 0x7f000000)) {\n        return 0;\n    }\n    if (exponent > EXPONENT_BIAS) {\n        return 0xffffffff;\n    }\n    if (exponent == EXPONENT_BIAS && mantissa != 0) {\n        return 0;\n    }\n    return (dividend << 8 | SIGN_BIT_MASK) >> divisor;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d1c",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "unsigned_integer_division_by_power_of_two_00081d1c"
        },
        "FUN_000847ac": {
            "renaming": {
                "FUN_000847ac": "calculate_difference_000847ac",
                "param_1": "start_value",
                "param_2": "end_value",
                "param_3": "multiplier_low",
                "param_4": "multiplier_high",
                "param_5": "difference",
                "uVar1": "product_low",
                "lVar2": "product",
                "subtract_value": "subtract_value",
                "borrow": "borrow",
                "subtracted_value": "subtracted_value"
            },
            "code": "void calculate_difference_000847ac(uint32_t start_value, int32_t end_value, uint32_t multiplier_low, uint32_t multiplier_high, int32_t *difference) {\n  uint64_t product = (uint64_t) multiplier_high << 32 | multiplier_low;\n  uint32_t product_low = (uint32_t) product;\n  uint32_t product_high = (uint32_t) (product >> 32);\n  uint32_t subtract_value = start_value - product_low;\n  uint32_t borrow = (start_value < product_low);\n  int32_t subtracted_value = end_value - product_high - borrow;\n  difference[0] = subtract_value;\n  difference[1] = subtracted_value;\n}\n",
            "called": [
                "FUN_00084a80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847ac",
            "calling": [
                "FUN_00084750"
            ],
            "imported": false,
            "current_name": "calculate_difference_000847ac"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "execute_function_if_not_null_00080118",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "DAT_00080134": "flag",
                "PTR_DAT_0008013c": "data_ptr",
                "DAT_00080140": "function_ptr",
                "DAT_00080144": "callback"
            },
            "code": "void execute_function_if_not_null_00080118(int param1, char *param2, int param3, int param4) {\n  if (DAT_00080134 != 0) {\n    param2 = PTR_DAT_0008013c;\n  }\n  if ((*DAT_00080140 != 0) && (DAT_00080144 != (code *)0x0)) {\n    (*DAT_00080144)(DAT_00080140, param2, param3, DAT_00080144, param4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_00080118"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "do_nothing_00080aa8"
            },
            "code": "\nvoid do_nothing_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aa8"
        },
        "FUN_00081c94": {
            "renaming": {
                "FUN_00081c94": "check_if_carry_or_zero_00081c94",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag",
                "FUN_00081c5c": "set_flags"
            },
            "code": "bool check_if_carry_or_zero_00081c94(void)\n{\n  bool carry_flag;\n  bool zero_flag;\n  \n  set_flags();\n  return !carry_flag || zero_flag;\n}",
            "called": [
                "FUN_00081c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c94",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "check_if_carry_or_zero_00081c94"
        },
        "FUN_00083b14": {
            "renaming": {
                "FUN_00083b14": "initialize_structures_00083b14",
                "param_1": "structure_pointer",
                "puVar1": "undefined_pointer_1",
                "uVar2": "undefined_value_1",
                "puVar3": "undefined_pointer_2",
                "puVar4": "undefined_pointer_3",
                "puVar5": "structure1_pointer",
                "puVar6": "structure2_pointer",
                "PTR_LAB_00083b08_1_00083bf4": "LABEL_1",
                "PTR_LAB_000844bc_1_00083c04": "LABEL_2",
                "PTR_FUN_0008449c_1_00083c00": "FUNTION_POINTER",
                "DAT_00083bfc": "DATA_VALUE"
            },
            "code": "void initialize_structures_00083b14(int param_1)\n{\n  if (*(int *)(param_1 + 0x38) == 0) {\n    //initialize first structure\n    undefined4 *struct1 = *(undefined4 **)(param_1 + 4);\n    *(undefined **)(param_1 + 0x3c) = PTR_LAB_00083b08_1_00083bf4;\n    *(undefined4 *)(param_1 + 0x2e4) = 3;\n    *(int *)(param_1 + 0x2e8) = param_1 + 0x2ec;\n    *(undefined4 *)(param_1 + 0x2e0) = 0;\n    *(undefined2 *)(struct1 + 3) = 4;\n    *struct1 = 0;\n    struct1[1] = 0;\n    struct1[2] = 0;\n    struct1[0x19] = 0;\n    *(undefined2 *)((int)struct1 + 0xe) = 0;\n    struct1[4] = 0;\n    struct1[5] = 0;\n    struct1[6] = 0;\n    memset(struct1 + 0x17, 0, 8);\n    //initialize second structure\n    undefined4 *struct2 = *(undefined4 **)(param_1 + 8);\n    *(undefined2 *)((int)struct2 + 0xe) = 1;\n    *(undefined2 *)(struct2 + 3) = 9;\n    *struct2 = 0;\n    struct2[1] = 0;\n    struct2[2] = 0;\n    struct2[0x19] = 0;\n    struct2[4] = 0;\n    struct2[5] = 0;\n    struct2[6] = 0;\n    memset(struct2 + 0x17, 0, 8);\n    //initialize third structure\n    undefined4 *struct3 = *(undefined4 **)(param_1 + 0xc);\n    *(undefined2 *)(struct3 + 3) = 0x12;\n    *(undefined2 *)((int)struct3 + 0xe) = 2;\n    *struct3 = 0;\n    struct3[1] = 0;\n    struct3[2] = 0;\n    struct3[0x19] = 0;\n    struct3[4] = 0;\n    struct3[5] = 0;\n    struct3[6] = 0;\n    memset(struct3 + 0x17, 0, 8);\n    //set flag to indicate initialization\n    *(undefined4 *)(param_1 + 0x38) = 1;\n  }\n  return;\n}",
            "called": [
                "FUN_00082504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b14",
            "calling": [
                "FUN_00082b38",
                "FUN_000844c4",
                "FUN_000846a4",
                "FUN_00083808",
                "FUN_00083adc"
            ],
            "imported": false,
            "current_name": "initialize_structures_00083b14"
        },
        "FUN_000842a4": {
            "renaming": {
                "FUN_000842a4": "checkData_000842a4",
                "param_1": "data",
                "param_2": "dataArr",
                "uVar1": "dataValue",
                "iVar2": "tempVar1",
                "iVar3": "tempVar2",
                "uVar4": "dataValueUint",
                "bVar5": "boolVar1",
                "auStack_54": "stackVar",
                "local_50": "localVar"
            },
            "code": "void checkData_000842a4(int data, int *dataArr){\n                        ushort dataValue = *(ushort *)(dataArr + 3);\n                        int tempVar1, tempVar2, tempVar3;\n                        uint dataValueUint = (uint)dataValue;\n                        bool boolVar1;\n                        undefined stackVar[4];\n                        uint localVar;\n                        if ((int)(dataValueUint << 0x1e) < 0) {\n                            *dataArr = (int)dataArr + 0x43;\n                            dataArr[4] = (int)dataArr + 0x43;\n                            dataArr[5] = 1;\n                            return;\n                        }\n                        if (-1 < *(short *)((int)dataArr + 0xe)) {\n                            tempVar1 = getVal(data,(int)*(short *)((int)dataArr + 0xe),stackVar);\n                            if (-1 < tempVar1) {\n                                boolVar1 = (localVar & 0xf000) == 0x2000;\n                                if (((localVar & 0xf000) == 0x8000) && ((undefined *)dataArr[10] == PTR_FUN_0008449c_1_00084380)) {\n                                    tempVar1 = 0x400;\n                                    *(ushort *)(dataArr + 3) = *(ushort *)(dataArr + 3) | 0x400;\n                                    dataArr[0x13] = 0x400;\n                                }\n                                else {\n                                    tempVar1 = 0x400;\n                                    *(ushort *)(dataArr + 3) = *(ushort *)(dataArr + 3) | 0x800;\n                                }\n                                goto LAB_00084300;\n                            }\n                            dataValue = *(ushort *)(dataArr + 3);\n                            dataValueUint = (uint)dataValue;\n                        }\n                        *(ushort *)(dataArr + 3) = dataValue | 0x800;\n                        if ((dataValueUint & 0x80) == 0) {\n                            tempVar1 = 0x400;\n                        }\n                        else {\n                            tempVar1 = 0x40;\n                        }\n                        boolVar1 = false;\n                        LAB_00084300:\n                        tempVar2 = checkData_000842a4Helper(data,tempVar1);\n                        dataValue = *(ushort *)(dataArr + 3);\n                        if (tempVar2 == 0) {\n                            if (-1 < (int)((uint)dataValue << 0x16)) {\n                                *(ushort *)(dataArr + 3) = dataValue | 2;\n                                *dataArr = (int)dataArr + 0x43;\n                                dataArr[4] = (int)dataArr + 0x43;\n                                dataArr[5] = 1;\n                            }\n                        }\n                        else {\n                            *(undefined **)(data + 0x3c) = PTR_LAB_00083b08_1_0008437c;\n                            *(ushort *)(dataArr + 3) = dataValue | 0x80;\n                            *dataArr = tempVar2;\n                            dataArr[4] = tempVar2;\n                            dataArr[5] = tempVar1;\n                            if ((boolVar1) && (tempVar1 = getVal2(data,(int)*(short *)((int)dataArr + 0xe)), tempVar1 != 0))\n                            {\n                                *(ushort *)(dataArr + 3) = *(ushort *)(dataArr + 3) | 1;\n                            }\n                        }\n                    }",
            "called": [
                "FUN_000846dc",
                "FUN_000846b4",
                "FUN_00081e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "FUN_00083808"
            ],
            "imported": false,
            "current_name": "checkData_000842a4"
        },
        "FUN_000846a4": {
            "renaming": {
                "FUN_000846a4": "process_data_000846a4",
                "param_1": "data",
                "uVar1": "result",
                "iVar2": "function_result",
                "iVar3": "data_ptr",
                "DAT_000846b0": "data_ptr_address",
                "FUN_00083b14": "initialize_data",
                "FUN_00083adc": "process_data_helper",
                "do_nothing_00083c08": "do_nothing_1",
                "do_nothing_00083c0c": "do_nothing_2",
                "FUN_00083d9c": "process_data_error"
            },
            "code": "int process_data_000846a4(int data)\n{\n  int data_ptr = *DAT_000846b0;\n  if (data != 0)\n  {\n    if ((data_ptr != 0) && (*(int *)(data_ptr + 0x38) == 0))\n    {\n      initialize_data();\n    }\n    if (*(short *)(data + 0xc) != 0)\n    {\n      int result = process_data_000846a4_helper(data_ptr, data);\n      if ((*(code **)(data + 0x2c) != (code *)0x0) && ((result = (**(code **)(data + 0x2c))(data_ptr,*(undefined4 *)(data + 0x1c))) < 0))\n      {\n        result = -1;\n      }\n      if ((int)((uint)*(ushort *)(data + 0xc) << 0x18) < 0)\n      {\n        process_data_000846a4_error(data_ptr,*(undefined4 *)(data + 0x10));\n      }\n      if (*(int *)(data + 0x30) != 0)\n      {\n        if (*(int *)(data + 0x30) != data + 0x40)\n        {\n          process_data_000846a4_error(data_ptr);\n        }\n        *(undefined4 *)(data + 0x30) = 0;\n      }\n      if (*(int *)(data + 0x44) != 0)\n      {\n        process_data_000846a4_error(data_ptr);\n        *(undefined4 *)(data + 0x44) = 0;\n      }\n      do_nothing_00083c08();\n      *(undefined2 *)(data + 0xc) = 0;\n      do_nothing_00083c0c();\n      return result;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_00083b14",
                "FUN_00083c08",
                "FUN_00083d9c",
                "FUN_00083c0c",
                "FUN_00083adc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846a4",
            "calling": [],
            "imported": false,
            "current_name": "process_data_000846a4"
        },
        "FUN_00080f24": {
            "renaming": {
                "FUN_00080f24": "initialize_00080f24",
                "puVar1": "rel_array",
                "puVar2": "data",
                "iVar3": "i",
                "puVar4": "dat_ptr",
                "PTR_Elf32_Rel_ARRAY_00080f80": "rel_array",
                "DAT_00080f7c": "data",
                "PTR_DAT_00080f84": "dat_ptr",
                "DAT_00080f94": "ptr",
                "PTR_DAT_00080f90": "ptr"
            },
            "code": "void initialize_00080f24(void) {\n  uint32_t *PTR_Elf32_Rel_ARRAY_00080f80 = PTR_Elf32_Rel_ARRAY_00080f80;\n  uint32_t *DAT_00080f7c = DAT_00080f7c;\n  uint32_t *PTR_DAT_00080f84 = (uint32_t *)PTR_DAT_00080f84;\n  if (DAT_00080f7c != PTR_Elf32_Rel_ARRAY_00080f80) {\n    for (int i = 0; PTR_Elf32_Rel_ARRAY_00080f80 + i < PTR_DAT_00080f88; i += 4) {\n      *(uint32_t *)(PTR_Elf32_Rel_ARRAY_00080f80 + i) = *(uint32_t *)(DAT_00080f7c + i);\n    }\n  }\n  for (; PTR_DAT_00080f84 < DAT_00080f8c; PTR_DAT_00080f84++) {\n    *PTR_DAT_00080f84 = 0;\n  }\n  uint32_t *DAT_00080f94 = PTR_DAT_00080f90 + -0x20000000;\n  *(uint32_t *)(DAT_00080f94 + 8) = (uint32_t)PTR_DAT_00080f90 & 0x1fffff80;\n  if (DAT_00080f94 < (uint32_t *)0x100000) {\n    *(uint32_t *)(DAT_00080f94 + 8) |= 0x20000000;\n  }\n  (*DAT_00080f98)();\n  while (true) {}\n}",
            "called": [
                "FUN_000816a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f24",
            "calling": [],
            "imported": false,
            "current_name": "initialize_00080f24"
        },
        "FUN_00080e04": {
            "renaming": {
                "FUN_00080e04": "check_bitwise_and_00080e04",
                "param_1": "pointer_to_data",
                "param_2": "bitmask",
                "uVar1": "result"
            },
            "code": "uint check_bitwise_and_00080e04(uint pointer_to_data, uint bitmask) {\n  uint result = *(uint *)(pointer_to_data + 8) & bitmask;\n  if (result != 0) {\n    if ((bitmask & *(uint *)(pointer_to_data + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e04",
            "calling": [
                "FUN_00081318"
            ],
            "imported": false,
            "current_name": "check_bitwise_and_00080e04"
        },
        "FUN_000804a8": {
            "renaming": {
                "FUN_000804a8": "configure_device_000804a8",
                "PTR_DAT_000805a8": "original_config_ptr1",
                "PTR_DAT_000805ac": "original_config_ptr2",
                "PTR_DAT_000805b0": "original_config_ptr3",
                "PTR_DAT_000805b4": "original_config_ptr4",
                "PTR_DAT_000805b8": "original_DAT_000805b8",
                "PTR_DAT_000805bc": "original_DAT_000805bc",
                "PTR_DAT_000805c0": "original_DAT_000805c0",
                "PTR_DAT_000805c4": "original_DAT_000805c4",
                "PTR_DAT_000805c8": "original_DAT_000805c8",
                "PTR_DAT_000805cc": "original_DAT_000805cc",
                "PTR_DAT_00080160": "original_DAT_00080160",
                "FUN_00081210": "configure_setting",
                "FUN_00081318": "configure_feature",
                "thunk_FUN_00081714": "get_config_value",
                "FUN_00080164": "set_config_value",
                "puVar1": "config_ptr1",
                "puVar2": "config_ptr2",
                "puVar3": "config_ptr3",
                "puVar4": "config_ptr4",
                "uVar5": "config_value1",
                "iVar6": "config_value2"
            },
            "code": "undefined8 configure_device_000804a8(void)\n{\n    undefined *config_ptr1;\n    undefined *config_ptr2;\n    undefined *config_ptr3;\n    undefined *config_ptr4;\n    undefined4 config_value1;\n    int config_value2;\n\n    configure_setting(1, 0);\n    configure_setting(6, 1);\n    configure_setting(0, 1);\n    configure_setting(1, 1);\n    configure_feature(0, 0);\n    configure_feature(1, 0);\n    config_ptr2 = PTR_DAT_000805ac;\n    config_ptr1 = PTR_DAT_000805a8;\n    *(undefined2 *)(PTR_DAT_000805a8 + 0xe) = 0x13;\n    *(undefined2 *)(config_ptr1 + 0x10) = 10;\n    *(undefined **)(config_ptr1 + 0x14) = config_ptr2 + 0x26;\n    config_ptr1[1] = 3;\n    config_ptr1[0x19] = 3;\n    *(undefined2 *)(config_ptr1 + 0x1a) = 0x14;\n    *(undefined2 *)(config_ptr1 + 0x28) = 3;\n    *(undefined2 *)(config_ptr1 + 4) = 0x10;\n    *(undefined **)(config_ptr1 + 8) = config_ptr2;\n    config_ptr1[0xd] = 0x10;\n    *(undefined2 *)(config_ptr1 + 0x1c) = 0xc;\n    config_ptr1[0x25] = 0x10;\n    *(undefined2 *)(config_ptr1 + 0x34) = 8;\n    config_ptr3 = PTR_DAT_000805b0;\n    *(undefined2 *)(config_ptr1 + 0x26) = 0x1c;\n    *(undefined **)(config_ptr1 + 0x2c) = config_ptr2 + 0x38;\n    config_ptr4 = PTR_DAT_000805b4;\n    config_ptr1[0x30] = 2;\n    config_ptr1[0x31] = 2;\n    *(undefined **)(config_ptr1 + 0x38) = config_ptr3;\n    config_ptr1[0x3c] = 2;\n    *config_ptr1 = 1;\n    config_ptr1[0xc] = 1;\n    config_ptr1[0x18] = 1;\n    config_ptr1[0x24] = 1;\n    *(undefined2 *)(config_ptr1 + 0x3e) = 1;\n    *(undefined2 *)(config_ptr1 + 0x40) = 1;\n    *(undefined2 *)(config_ptr1 + 2) = 0;\n    *(undefined **)(config_ptr1 + 0x20) = config_ptr2 + 0x28;\n    *(undefined2 *)(config_ptr1 + 0x32) = 0;\n    config_ptr1[0x3d] = 5;\n    *(undefined **)(config_ptr1 + 0x44) = config_ptr3 + 2;\n    set_config_value(config_ptr4, 0x4b00);\n    *(undefined2 *)(config_ptr4 + 0x56) = 2000;\n    config_value1 = get_config_value();\n    *(undefined4 *)PTR_DAT_000805b8 = config_value1;\n    config_value2 = get_config_value();\n    *(int *)PTR_DAT_000805bc = config_value2 + 1000;\n    config_value2 = get_config_value();\n    *(int *)PTR_DAT_000805c0 = config_value2 + 1000;\n    config_value2 = get_config_value();\n    *(int *)PTR_DAT_000805c4 = config_value2 + 1000;\n    config_value2 = get_config_value();\n    *(int *)PTR_DAT_000805c8 = config_value2 + 1000;\n    *PTR_DAT_000805cc = 0;\n    if (*(int *)PTR_DAT_00080160 == 0) {\n        software_interrupt(0x3f);\n        return 1;\n    }\n    return 0;\n}\n",
            "called": [
                "FUN_00080164",
                "thunk_FUN_00081714",
                "FUN_00081318",
                "FUN_00081210"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000804a8",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "configure_device_000804a8"
        },
        "FUN_000802da": {
            "renaming": {
                "FUN_000802da": "validate_input_000802da",
                "param_1": "input_address",
                "param_2": "input_length",
                "param_3": "input_data",
                "cVar1": "validation_result",
                "bVar2": "byte_value",
                "uVar3": "undefined_value",
                "uVar4": "ushort_value",
                "uVar5": "uint_value",
                "puVar6": "ushort_pointer",
                "local_1c": "local_char",
                "local_1b": "local_undefined",
                "local_1a": "local_ushort"
            },
            "code": "int validate_input_000802da(int input_address, ushort input_length, ushort *input_data)\n{\n    char validation_result;\n    byte byte_value;\n    undefined undefined_value;\n    ushort ushort_value;\n    uint uint_value;\n    ushort *ushort_pointer;\n    char local_char;\n    undefined local_undefined;\n    ushort local_ushort;\n    uint_value = (uint)input_length;\n    if (*(char *)(input_address + 4) != '\\0') {\n        validation_result = -2;\n        goto LAB_000803cc;\n    }\n    if (*(char *)(input_address + 7) != '\\0') {\n        validation_result = -1;\n        goto LAB_000803cc;\n    }\n    if (0xf6 < (byte)(local_char - 1U)) {\n        validation_result = -3;\n        goto LAB_000803cc;\n    }\n    *(char *)(input_address + 9) = local_char;\n    *(undefined *)(input_address + 10) = local_undefined;\n    *(ushort **)(input_address + 0x4c) = input_data;\n    *(char *)(input_address + 0xb) = (char)((uint)local_ushort >> 8);\n    *(char *)(input_address + 0xc) = (char)local_ushort;\n    validation_result = (char)input_length;\n    undefined_value = (undefined)(uint_value >> 8);\n    switch(local_undefined) {\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n            *(undefined *)(input_address + 0xd) = undefined_value;\n            break;\n        case 5:\n            ushort_value = *input_data;\n            if (ushort_value != 0) {\n                ushort_value = 1;\n            }\n            *(char *)(input_address + 0xd) = -(char)ushort_value;\n            uint_value = 0;\n            break;\n        case 6:\n            *(char *)(input_address + 0xd) = (char)((uint)*input_data >> 8);\n            uint_value = (uint)*input_data;\n            break;\n        default:\n            goto switchD_0008031e_caseD_7;\n        case 0xf:\n            byte_value = (byte)(input_length >> 3) & 0xfe;\n            if ((input_length & 0xf) != 0) {\n                byte_value = byte_value + 1;\n            }\n            *(char *)(input_address + 0xe) = validation_result;\n            *(undefined *)(input_address + 0xd) = undefined_value;\n            *(byte *)(input_address + 0xf) = byte_value;\n            undefined_value = 7;\n            goto LAB_0008034a;\n        case 0x10:\n            *(undefined *)(input_address + 0xd) = undefined_value;\n            *(char *)(input_address + 0xe) = validation_result;\n            input_data = input_data + -1;\n            *(char *)(input_address + 0xf) = validation_result * '\\x02';\n            *(undefined *)(input_address + 0x49) = 7;\n            ushort_pointer = input_data + uint_value;\n            while (input_data != ushort_pointer) {\n                byte_value = *(byte *)(input_address + 0x49);\n                *(char *)(input_address + (uint)byte_value + 9) = (char)((uint)input_data[1] >> 8);\n                uint_value = byte_value + 1 & 0xff;\n                *(char *)(input_address + (uint)uint_value + 9) = (char)*input_data;\n                *(byte *)(input_address + 0x49) = byte_value + 2;\n                input_data = input_data + 1;\n            }\n            goto switchD_0008031e_caseD_7;\n    }\n    *(char *)(input_address + 0xe) = (char)uint_value;\n    undefined_value = 6;\nLAB_0008034a:\n    *(undefined *)(input_address + 0x49) = undefined_value;\n    FUN_00080258(input_address);\n    *(undefined *)(input_address + 7) = 1;\n    validation_result = '\\0';\nLAB_000803cc:\n    return (int)validation_result;\n}\n",
            "called": [
                "FUN_00080258"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000802da",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "validate_input_000802da"
        },
        "FUN_00080f9c": {
            "renaming": {
                "FUN_00080f9c": "find_threshold_00080f9c",
                "*param_1": "*threshold",
                "param_2": "data_length",
                "param_3": "divisor",
                "param_4": "multiplier",
                "uVar1": "quotient",
                "uVar2": "j",
                "local_58": "local_thresholds"
            },
            "code": "uint32_t find_threshold_00080f9c(uint32_t *threshold, uint32_t data_length, int divisor, int multiplier){\n  uint32_t i, j, quotient, local_thresholds[16];\n  local_thresholds[0] = *(uint32_t *)PTR_DAT_0008102c;\n  local_thresholds[1] = *(uint32_t *)(PTR_DAT_0008102c + 4);\n  local_thresholds[2] = *(uint32_t *)(PTR_DAT_0008102c + 8);\n  local_thresholds[3] = *(uint32_t *)(PTR_DAT_0008102c + 0xc);\n  local_thresholds[4] = *(uint32_t *)(PTR_DAT_0008102c + 0x10);\n  local_thresholds[5] = *(uint32_t *)(PTR_DAT_0008102c + 0x14);\n  local_thresholds[6] = *(uint32_t *)(PTR_DAT_0008102c + 0x18);\n  local_thresholds[7] = *(uint32_t *)(PTR_DAT_0008102c + 0x1c);\n  local_thresholds[8] = *(uint32_t *)(PTR_DAT_0008102c + 0x20);\n  local_thresholds[9] = *(uint32_t *)(PTR_DAT_0008102c + 0x24);\n  local_thresholds[10] = *(uint32_t *)(PTR_DAT_0008102c + 0x28);\n  local_thresholds[11] = *(uint32_t *)(PTR_DAT_0008102c + 0x2c);\n  local_thresholds[12] = *(uint32_t *)(PTR_DAT_0008102c + 0x30);\n  local_thresholds[13] = *(uint32_t *)(PTR_DAT_0008102c + 0x34);\n  local_thresholds[14] = *(uint32_t *)(PTR_DAT_0008102c + 0x38);\n  local_thresholds[15] = *(uint32_t *)(PTR_DAT_0008102c + 0x3c);\n  *threshold = 1;\n  *(threshold + 1) = 0;\n  *(threshold + 0x48) = 0x202;\n  *(threshold + 0x41) = 0;\n  *(threshold + 0x45) = 0;\n  quotient = data_length / (uint32_t)(divisor * 2);\n  if (data_length == divisor * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  j = 0;\n  for (i = 0; i < 16; i++) {\n    if ((uint32_t)(multiplier * (int)(((uint64_t)data_length / (uint64_t)((quotient + 1) * 2)) / (uint64_t)DAT_00081030)) <= local_thresholds[i]) {\n      *(threshold + 1) = (i & 0xf) << 0x10 | (quotient & 0xff) << 8 | *(threshold + 1);\n      return 0;\n    }\n    j++;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f9c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "find_threshold_00080f9c"
        },
        "FUN_00081210": {
            "renaming": {
                "FUN_00081210": "check_params_00081210",
                "param_1": "index",
                "param_2": "param",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "iVar3": "result",
                "uVar4": "bitmask",
                "uVar5": "var1",
                "uVar6": "var2",
                "bVar7": "type",
                "bVar8": "flags",
                "iVar9": "var2",
                "iVar10": "var3"
            },
            "code": "int check_params_00081210(int index, int param)\n{\n  uint32_t bitmask;\n  uint8_t type, flags;\n  uint32_t var1, var2, var3;\n  uint32_t *ptr1 = PTR_DAT_00081310;\n  uint32_t *ptr2 = PTR_DAT_0008130c;\n  int result = index;\n  if (ptr2[index * 0x1c + 0xc] != 0)\n  {\n    type = ptr1[index] & 0xf;\n    flags = ptr1[index] >> 4;\n    if (type == 4)\n    {\n      var1 = FUN_0008105c(DAT_00081314, ptr2[index * 0x1c + 0x19]);\n      result = var1;\n    }\n    else if (type < 3 && ptr1[index] != 0)\n    {\n      if (type == 2 && param == 0)\n      {\n        return result;\n      }\n      else if (type == 1 && param == 2)\n      {\n        return result;\n      }\n      else if (type == 3)\n      {\n        if (param == 1)\n        {\n          return result;\n        }\n        else\n        {\n          goto LAB_0008126c;\n        }\n      }\n    }\n    if (param != 1)\n    {\nLAB_0008126c:\n      if (param == 0)\n      {\n        var2 = index * 0x1c;\n        FUN_00080e18(*(uint32_t *)(ptr2 + var2 + 8));\n        var3 = FUN_00080da0(*(uint32_t *)(ptr2 + var2), 3, *(uint32_t *)(ptr2 + var2 + 4), 0);\n        flags = flags & 0xf0 | 2;\n      }\n      else if (param == 2)\n      {\n        var2 = index * 0x1c;\n        FUN_00080e18(*(uint32_t *)(ptr2 + var2 + 8));\n        var3 = FUN_00080da0(*(uint32_t *)(ptr2 + var2), 3, *(uint32_t *)(ptr2 + var2 + 4), 1);\n        flags = flags & 0xf0 | 1;\n      }\n      else\n      {\n        return result;\n      }\n      ptr1[index] = flags;\n      result = var3;\n    }\n    else\n    {\n      var2 = index * 0x1c;\n      var1 = *(uint32_t *)(ptr2 + var2);\n      if (flags >> 4 == 0)\n      {\n        bitmask = 4;\n      }\n      else\n      {\n        bitmask = 5;\n      }\n      var3 = FUN_00080da0(var1, bitmask, *(uint32_t *)(ptr2 + var2 + 4), *(uint32_t *)(ptr2 + var2 + 0x10));\n      ptr1[index] = flags & 0xf0 | 3;\n      if (*(int *)(var1 + 0x18) == -1)\n      {\n        var2 = *(uint32_t *)(ptr2 + index * 0x1c + 8);\n        if (var2 > 0x2c)\n        {\n          return 1;\n        }\n        if (var2 >= 0x20)\n        {\n          bitmask = 1 << (var2 - 0x20 & 0xff);\n          var1 = *(uint32_t *)(DAT_00080e98 + 0x108) & bitmask;\n          if (var1 == bitmask)\n          {\n            *(uint32_t *)(DAT_00080e98 + 0x104) = var1;\n          }\n        }\n        else\n        {\n          bitmask = 1 << (var2 & 0xff);\n          var1 = *(uint32_t *)(DAT_00080e98 + 0x18) & bitmask;\n          if (var1 == bitmask)\n          {\n            *(uint32_t *)(DAT_00080e98 + 0x14) = var1;\n          }\n        }\n        return 0;\n      }\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_00080e18",
                "FUN_00080da0",
                "FUN_0008105c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081210",
            "calling": [
                "FUN_000804a8",
                "FUN_00080164",
                "FUN_00081318"
            ],
            "imported": false,
            "current_name": "check_params_00081210"
        },
        "FUN_00081454": {
            "renaming": {
                "FUN_00081454": "write_to_memory_00081454",
                "param_1": "memory_address",
                "param_2": "data",
                "iVar1": "data_block",
                "uVar2": "new_write_count",
                "size": "max_size",
                "write_count": "write_count",
                "max_size": "max_size",
                "*(int *)(param_1 + 0x14)": "data_block",
                "*(int *)(param_1 + 0x18)": "data_pointer",
                "*(int *)(*(int *)(param_1 + 0x18) + 0x14)": "size",
                "*(int *)(iVar1 + 0x84)": "max_size",
                "*(int *)(iVar1 + 0x80)": "write_count",
                "*(undefined4 *)(*(int *)(param_1 + 0x18) + 0x1c)": "data",
                "DAT_000814a4": "data_mask",
                "*(uint *)(iVar1 + 0x84)": "write_count"
            },
            "code": "int write_to_memory_00081454(int memory_address, int data) {\n  int data_block = *(int *)(memory_address + 0x14);\n  int data_pointer = *(int *)(memory_address + 0x18);\n  int size = *(int *)(data_pointer + 0x14);\n  int write_count = *(int *)(data_block + 0x80);\n  int max_size = *(int *)(data_block + 0x84);\n  \n  if ((max_size << 0x1e < 0) && (*(int *)(data_block + 0x84) == write_count)) {\n    *(int *)(data_pointer + 0x1c) = data;\n  }\n  else {\n    int new_write_count = (DAT_000814a4 & write_count + 1U);\n    if ((int)new_write_count < 0) {\n      new_write_count = (new_write_count - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(int *)(data_block + 0x84) == new_write_count);\n    *(char *)(data_block + write_count) = (char)data;\n    *(int *)(data_block + 0x80) = new_write_count;\n    *(int *)(data_pointer + 8) = 2;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081454",
            "calling": [],
            "imported": false,
            "current_name": "write_to_memory_00081454"
        },
        "FUN_00081730": {
            "renaming": {
                "FUN_00081730": "reverse_and_improve_00081730",
                "param_1": "input_a",
                "param_2": "input_b",
                "param_3": "input_c",
                "param_4": "input_d",
                "iVar1": "result",
                "uVar2": "modified_input_b",
                "uVar3": "modified_input_b_bits",
                "uVar4": "shifted_input_a",
                "uVar5": "shift_amount",
                "uVar6": "difference",
                "iVar7": "shifted_input_a_bits",
                "bVar8": "comparison_result"
            },
            "code": "\nuint reverse_and_improve_00081730(uint input_a,uint input_b,undefined4 input_c,uint input_d)\n\n{\n  int result;\n  uint modified_input_b;\n  uint modified_input_b_bits;\n  uint shifted_input_a;\n  uint shift_amount;\n  uint difference;\n  int shifted_input_a_bits;\n  bool comparison_result;\n  \n  modified_input_b = input_b ^ 0x80000000;\n  shifted_input_a = input_a << 1;\n  comparison_result = shifted_input_a == 0;\n  if (!comparison_result) {\n    input_d = input_b << 1;\n    comparison_result = input_d == 0;\n  }\n  if (!comparison_result) {\n    comparison_result = shifted_input_a == input_d;\n  }\n  shifted_input_a_bits = (int)shifted_input_a >> 0x18;\n  if (!comparison_result) {\n    comparison_result = shifted_input_a_bits == -1;\n  }\n  if (!comparison_result) {\n    comparison_result = (int)input_d >> 0x18 == -1;\n  }\n  if (comparison_result) {\n    result = (int)(input_b << 1) >> 0x18;\n    if (shifted_input_a_bits == -1 || result == -1) {\n      shifted_input_a = modified_input_b;\n      if (shifted_input_a_bits == -1) {\n        shifted_input_a = input_a;\n      }\n      if (shifted_input_a_bits != -1 || result != -1) {\n        modified_input_b = shifted_input_a;\n      }\n      comparison_result = (shifted_input_a & 0x7fffff) == 0;\n      if (comparison_result) {\n        comparison_result = (modified_input_b & 0x7fffff) == 0;\n      }\n      if (comparison_result) {\n        comparison_result = shifted_input_a == modified_input_b;\n      }\n      if (!comparison_result) {\n        shifted_input_a = shifted_input_a | 0x400000;\n      }\n      return shifted_input_a;\n    }\n    if (((input_a ^ modified_input_b) & 0x7fffffff) != 0) {\n      if (shifted_input_a == 0) {\n        input_a = modified_input_b;\n      }\n      return input_a;\n    }\n    if (input_a != modified_input_b) {\n      return 0;\n    }\n    if ((shifted_input_a & 0xff000000) == 0) {\n      modified_input_b = input_a << 1;\n      if ((input_a & 0x80000000) != 0) {\n        modified_input_b = modified_input_b | 0x80000000;\n      }\n      return modified_input_b;\n    }\n    if (shifted_input_a < 0xfe000000) {\n      return input_a + 0x800000;\n    }\n    input_a = input_a & 0x80000000;\nLAB_0008186a:\n    return input_a | 0x7f800000;\n  }\n  shifted_input_a = shifted_input_a >> 0x18;\n  input_d = input_d >> 0x18;\n  difference = input_d - shifted_input_a;\n  comparison_result = difference != 0;\n  shift_amount = shifted_input_a;\n  if (comparison_result && shifted_input_a <= input_d) {\n    shift_amount = shifted_input_a + difference;\n  }\n  if (comparison_result && shifted_input_a <= input_d) {\n    modified_input_b = modified_input_b ^ input_a;\n  }\n  if (comparison_result && shifted_input_a <= input_d) {\n    input_a = input_a ^ modified_input_b;\n  }\n  if (comparison_result && shifted_input_a <= input_d) {\n    modified_input_b = modified_input_b ^ input_a;\n  }\n  if (input_d < shifted_input_a) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input_a;\n  }\n  shifted_input_a = input_a & 0xffffff | 0x800000;\n  if ((input_a & 0x80000000) != 0) {\n    shifted_input_a = -shifted_input_a;\n  }\n  modified_input_b_bits = modified_input_b & 0xffffff | 0x800000;\n  if ((modified_input_b & 0x80000000) != 0) {\n    modified_input_b_bits = -modified_input_b_bits;\n  }\n  if (shift_amount == difference) {\n    modified_input_b_bits = modified_input_b_bits ^ 0x800000;\n    if (shift_amount == 0) {\n      shifted_input_a = shifted_input_a ^ 0x800000;\n      shift_amount = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shifted_input_a = shifted_input_a + ((int)modified_input_b_bits >> (difference & 0xff));\n  modified_input_b_bits = modified_input_b_bits << (0x20 - difference & 0xff);\n  input_a = shifted_input_a & 0x80000000;\n  if ((int)shifted_input_a < 0) {\n    comparison_result = modified_input_b_bits != 0;\n    modified_input_b_bits = -modified_input_b_bits;\n    shifted_input_a = -shifted_input_a - (uint)comparison_result;\n  }\n  if (shifted_input_a < 0x800000) {\n    modified_input_b = modified_input_b_bits & 0x80000000;\n    modified_input_b_bits = modified_input_b_bits << 1;\n    shifted_input_a = shifted_input_a * 2 + (uint)(modified_input_b != 0);\n    modified_input_b = shift_amount - 2;\n    if ((shifted_input_a & 0x800000) == 0) {\n      shifted_input_a_bits = count_leading_zeroes(shifted_input_a);\n      difference = shifted_input_a_bits - 8;\n      shifted_input_a = shifted_input_a << (difference & 0xff);\n      if ((int)modified_input_b < (int)difference) {\n        shifted_input_a = shifted_input_a >> (-(modified_input_b - difference) & 0xff);\n      }\n      else {\n        shifted_input_a = shifted_input_a + (modified_input_b - difference) * 0x800000;\n      }\n      return shifted_input_a | input_a;\n    }\n  }\n  else {\n    modified_input_b = shift_amount - 1;\n    if (0xffffff < shifted_input_a) {\n      modified_input_b = shifted_input_a & 1;\n      shifted_input_a = shifted_input_a >> 1;\n      modified_input_b_bits = (uint)(modified_input_b != 0) << 0x1f | modified_input_b_bits >> 1;\n      modified_input_b = shift_amount;\n      if (0xfd < shift_amount) goto LAB_0008186a;\n    }\n  }\n  shifted_input_a = shifted_input_a + modified_input_b * 0x800000 + (uint)(0x7fffffff < modified_input_b_bits);\n  if (modified_input_b_bits == 0x80000000) {\n    shifted_input_a = shifted_input_a & 0xfffffffe;\n  }\n  return shifted_input_a | input_a;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081730",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "reverse_and_improve_00081730"
        },
        "FUN_00080ab8": {
            "renaming": {
                "FUN_00080ab8": "do_nothing_00080ab8"
            },
            "code": "\nvoid do_nothing_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ab8",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080ab8"
        },
        "FUN_00081734": {
            "renaming": {
                "FUN_00081734": "calculate_float_00081734",
                "iVar1": "int_result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "iVar6": "temp5",
                "bVar7": "flag"
            },
            "code": "\nuint calculate_float_00081734(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int int_result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  int temp5;\n  bool flag;\n  \n  temp2 = param_1 << 1;\n  flag = temp2 == 0;\n  if (!flag) {\n    param_4 = param_2 << 1;\n    flag = param_4 == 0;\n  }\n  if (!flag) {\n    flag = temp2 == param_4;\n  }\n  temp5 = (int)temp2 >> 0x18;\n  if (!flag) {\n    flag = temp5 == -1;\n  }\n  if (!flag) {\n    flag = (int)param_4 >> 0x18 == -1;\n  }\n  if (flag) {\n    int_result = (int)(param_2 << 1) >> 0x18;\n    if (temp5 == -1 || int_result == -1) {\n      temp2 = param_2;\n      if (temp5 == -1) {\n        temp2 = param_1;\n      }\n      if (temp5 != -1 || int_result != -1) {\n        param_2 = temp2;\n      }\n      flag = (temp2 & 0x7fffff) == 0;\n      if (flag) {\n        flag = (param_2 & 0x7fffff) == 0;\n      }\n      if (flag) {\n        flag = temp2 == param_2;\n      }\n      if (!flag) {\n        temp2 = temp2 | 0x400000;\n      }\n      return temp2;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (temp2 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((temp2 & 0xff000000) == 0) {\n      temp2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        temp2 = temp2 | 0x80000000;\n      }\n      return temp2;\n    }\n    if (temp2 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  temp2 = temp2 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  temp4 = param_4 - temp2;\n  flag = temp4 != 0;\n  temp3 = temp2;\n  if (flag && temp2 <= param_4) {\n    temp3 = temp2 + temp4;\n  }\n  if (flag && temp2 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (flag && temp2 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (flag && temp2 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < temp2) {\n    temp4 = -temp4;\n  }\n  if (0x19 < temp4) {\n    return param_1;\n  }\n  temp2 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    temp2 = -temp2;\n  }\n  temp1 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  if (temp3 == temp4) {\n    temp1 = temp1 ^ 0x800000;\n    if (temp3 == 0) {\n      temp2 = temp2 ^ 0x800000;\n      temp3 = 1;\n    }\n    else {\n      temp4 = temp4 - 1;\n    }\n  }\n  temp2 = temp2 + ((int)temp1 >> (temp4 & 0xff));\n  temp1 = temp1 << (0x20 - temp4 & 0xff);\n  param_1 = temp2 & 0x80000000;\n  if ((int)temp2 < 0) {\n    flag = temp1 != 0;\n    temp1 = -temp1;\n    temp2 = -temp2 - (uint)flag;\n  }\n  if (temp2 < 0x800000) {\n    temp4 = temp1 & 0x80000000;\n    temp1 = temp1 << 1;\n    temp2 = temp2 * 2 + (uint)(temp4 != 0);\n    temp4 = temp3 - 2;\n    if ((temp2 & 0x800000) == 0) {\n      temp5 = count_leading_zeroes(temp2);\n      temp3 = temp5 - 8;\n      temp2 = temp2 << (temp3 & 0xff);\n      if ((int)temp4 < (int)temp3) {\n        temp2 = temp2 >> (-(temp4 - temp3) & 0xff);\n      }\n      else {\n        temp2 = temp2 + (temp4 - temp3) * 0x800000;\n      }\n      return temp2 | param_1;\n    }\n  }\n  else {\n    temp4 = temp3 - 1;\n    if (0xffffff < temp2) {\n      temp4 = temp2 & 1;\n      temp2 = temp2 >> 1;\n      temp1 = (uint)(temp4 != 0) << 0x1f | temp1 >> 1;\n      temp4 = temp3;\n      if (0xfd < temp3) goto LAB_0008186a;\n    }\n  }\n  temp2 = temp2 + temp4 * 0x800000 + (uint)(0x7fffffff < temp1);\n  if (temp1 == 0x80000000) {\n    temp2 = temp2 & 0xfffffffe;\n  }\n  return temp2 | param_1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081734",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "calculate_float_00081734"
        },
        "FUN_00084728": {
            "renaming": {
                "FUN_00084728": "findValueFromPointer_00084728",
                "param_1": "result",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "pointer",
                "iVar2": "returnValue"
            },
            "code": "void findValueFromPointer_00084728(int *result, undefined4 param2, undefined4 param3, undefined4 param4)\n{\n  undefined *pointer = PTR_DAT_0008474c;\n  *(undefined4 *)PTR_DAT_0008474c = 0;\n  int returnValue = FUN_000811c6(param2, param3, param4);\n  if (returnValue == -1 && (*(int *)pointer != 0)) {\n    *result = *(int *)pointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084728",
            "calling": [],
            "imported": false,
            "current_name": "findValueFromPointer_00084728"
        },
        "FUN_00083c40": {
            "renaming": {
                "FUN_00083c40": "write_to_output_buffer_00083c40",
                "param_1": "output_buffer_start",
                "param_2": "output_buffer_size",
                "param_3": "output_buffer_ptr",
                "uVar1": "status",
                "iVar2": "i",
                "uVar3": "byte_count",
                "pbVar4": "current_byte",
                "local_1c": "current_byte",
                "abStack_1b": "buffer"
            },
            "code": "uint write_to_output_buffer_00083c40(undefined4 output_buffer_start, uint output_buffer_size, byte **output_buffer_ptr)\n{\n  uint status = 0;\n  int i = 0;\n  uint byte_count = 0;\n  byte current_byte;\n  byte buffer[3];\n  \n  if (-1 < (int)((uint)*(ushort *)(output_buffer_ptr + 3) << 0x12))) {\n    *(ushort *)(output_buffer_ptr + 3) = *(ushort *)(output_buffer_ptr + 3) | 0x2000;\n    output_buffer_ptr[0x19] = (byte *)((uint)output_buffer_ptr[0x19] | 0x2000);\n  }\n  \n  status = FUN_00084298();\n  if ((status == 1) && (output_buffer_size - 1 < 0xff)) {\n    byte_count = output_buffer_size & 0xff;\n    current_byte = (byte)byte_count;\n  }\n  else {\n    status = FUN_0008456c(output_buffer_start, &current_byte, output_buffer_size, output_buffer_ptr + 0x17);\n    if (status == 0xffffffff) {\n      *(ushort *)(output_buffer_ptr + 3) = *(ushort *)(output_buffer_ptr + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (status == 0) {\n      return output_buffer_size;\n    }\n    byte_count = (uint)current_byte;\n  }\n  \n  for (i = 0; ; i++) {\n    buffer[2] = output_buffer_ptr[2][-1];\n    output_buffer_ptr[2] = buffer[2];\n    if ((int)buffer[2] < 0) {\n      if ((int)output_buffer_ptr[6] <= (int)buffer[2]) {\n        **output_buffer_ptr = (byte)byte_count;\n        buffer[2] = *output_buffer_ptr;\n        byte_count = (uint)*buffer[2];\n        if (byte_count != 10) goto LAB_00083c90;\n      }\n      status = FUN_000844c4(output_buffer_start, byte_count, output_buffer_ptr);\n      if (status == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **output_buffer_ptr = (byte)byte_count;\n      buffer[2] = *output_buffer_ptr;\n      *output_buffer_ptr = buffer[2] + 1;\n    }\n    if (status <= i + 1) {\n      return output_buffer_size;\n    }\n    byte_count = (uint)buffer[i];\n  }\n}",
            "called": [
                "FUN_0008456c",
                "FUN_000844c4",
                "FUN_00084298"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c40",
            "calling": [
                "FUN_00082ac0"
            ],
            "imported": false,
            "current_name": "write_to_output_buffer_00083c40"
        },
        "FUN_000805d0": {
            "renaming": {
                "FUN_000805d0": "improved_function_000805d0",
                "puVar1": "undefined_pointer_1",
                "puVar2": "undefined_pointer_2",
                "puVar3": "undefined_pointer_3",
                "puVar4": "undefined_pointer_4",
                "puVar5": "undefined_pointer_5",
                "puVar6": "undefined_pointer_6",
                "puVar7": "undefined_pointer_7",
                "puVar8": "undefined_pointer_8",
                "puVar9": "undefined_pointer_9",
                "uVar10": "undefined_variable_10",
                "uVar11": "undefined_variable_11",
                "uVar12": "undefined_variable_12",
                "uVar13": "undefined_variable_13",
                "uVar14": "undefined_variable_14",
                "iVar15": "integer_variable_15",
                "iVar16": "integer_variable_16",
                "iVar17": "integer_variable_17",
                "piVar17": "integer_pointer_17",
                "iVar19": "integer_variable_19",
                "uVar18": "undefined_variable_18"
            },
            "code": "\nvoid improved_function_000805d0(void)\n\n{\n  undefined *undefined_pointer_1;\n  undefined *undefined_pointer_2;\n  undefined *undefined_pointer_3;\n  undefined *undefined_pointer_4;\n  undefined *undefined_pointer_5;\n  undefined *undefined_pointer_6;\n  undefined *undefined_pointer_7;\n  undefined *undefined_pointer_8;\n  undefined *undefined_pointer_9;\n  undefined2 undefined_variable_10;\n  uint undefined_variable_11;\n  undefined4 undefined_variable_12;\n  undefined4 undefined_variable_13;\n  undefined4 undefined_variable_14;\n  int integer_variable_15;\n  int integer_variable_16;\n  int *integer_pointer_17;\n  undefined4 undefined_variable_18;\n  int integer_variable_19;\n  \n  undefined_pointer_7 = PTR_DAT_0008089c;\n  undefined_pointer_9 = PTR_DAT_00080898;\n  undefined_pointer_8 = PTR_DAT_00080894;\n  undefined_pointer_3 = PTR_DAT_0008087c;\n  undefined_pointer_5 = PTR_DAT_00080878;\n  undefined_pointer_4 = PTR_DAT_00080874;\n  undefined_pointer_2 = PTR_DAT_00080834;\n  undefined_pointer_1 = PTR_DAT_00080830;\n  if ((byte)*PTR_DAT_0008082c < 10) {\n                    /* WARNING: Could not recover jumptable at 0x000805f0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_000805f0::switchdataD_000805f4 +\n              (uint)(&switchD_000805f0::switchdataD_000805f4)[(byte)*PTR_DAT_0008082c] * 2))();\n    return;\n  }\n  integer_variable_16 = *(int *)PTR_DAT_00080894;\n  integer_variable_15 = integer_variable_16 - *(int *)PTR_DAT_00080874;\n  if (integer_variable_15 < 0) {\n    integer_variable_15 = integer_variable_15 + 0x3c;\n  }\n  *(int *)PTR_DAT_0008087c = integer_variable_15;\n  undefined_pointer_6 = PTR_DAT_00080880;\n  undefined_variable_11 = *(uint *)undefined_pointer_9;\n  integer_variable_15 = undefined_variable_11 - *(int *)undefined_pointer_5;\n  *(int *)PTR_DAT_00080880 = integer_variable_15;\n  if (integer_variable_15 < 0) {\n    *(int *)undefined_pointer_3 = *(int *)undefined_pointer_3 + -1;\n    *(int *)undefined_pointer_6 = integer_variable_15 + 0x3c;\n  }\n  integer_variable_15 = *(int *)undefined_pointer_3;\n  integer_variable_19 = *(int *)undefined_pointer_6;\n  *(short *)(undefined_pointer_1 + 0x36) = (short)integer_variable_15;\n  *(short *)(undefined_pointer_1 + 0x38) = (short)integer_variable_19;\n  if ((integer_variable_15 == 0) && (integer_variable_19 == 0)) {\n    *(undefined4 *)PTR_DAT_00080868 = 1;\n    *(undefined4 *)undefined_pointer_4 = 0;\n    *(undefined4 *)undefined_pointer_5 = 0;\n  }\n  undefined_pointer_6 = PTR_DAT_00080888;\n  undefined_pointer_3 = PTR_DAT_00080884;\n  if (*(int *)PTR_DAT_00080884 == integer_variable_16) {\n    integer_variable_15 = 1 - undefined_variable_11;\n    if (1 < undefined_variable_11) {\n      integer_variable_15 = 0;\n    }\n    *(int *)PTR_DAT_00080888 = integer_variable_15;\n    if (integer_variable_15 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    *(int *)undefined_pointer_3 = integer_variable_16;\n    undefined_pointer_3 = PTR_DAT_00080a50;\n    *(uint *)undefined_pointer_6 = undefined_variable_11;\n    *(undefined4 *)undefined_pointer_4 = 0;\n    *(undefined4 *)undefined_pointer_5 = 0;\n    *(undefined4 *)undefined_pointer_3 = 0;\n  }\n  undefined_pointer_6 = PTR_DAT_0008088c;\n  undefined_pointer_3 = PTR_DAT_00080860;\n  integer_variable_15 = *(int *)undefined_pointer_7;\n  if (integer_variable_15 == 0) {\n    *(undefined4 *)undefined_pointer_4 = 0;\n    *(undefined4 *)undefined_pointer_5 = 0;\n    integer_pointer_17 = (int *)PTR_DAT_0008088c;\nLAB_000808f2:\n    *integer_pointer_17 = integer_variable_15;\n  }\n  else {\n    if (integer_variable_15 != 1) goto LAB_000808f4;\n    if (*(int *)PTR_DAT_0008088c < *(int *)PTR_DAT_00080860) {\n      undefined_variable_11 = thunk_FUN_00081714();\n      undefined_pointer_7 = PTR_DAT_00080890;\n      if (*(uint *)PTR_DAT_00080890 < undefined_variable_11) {\n        *(int *)undefined_pointer_6 = *(int *)undefined_pointer_6 + 1;\n        integer_variable_15 = thunk_FUN_00081714();\n        *(int *)undefined_pointer_7 = integer_variable_15 + 1000;\n      }\n    }\n    if (*(int *)undefined_pointer_6 < *(int *)undefined_pointer_3) goto LAB_000808f4;\n    *(int *)PTR_DAT_0008088c = *(int *)undefined_pointer_3 + 1;\n    integer_pointer_17 = (int *)PTR_DAT_00080a20;\n    undefined_pointer_3 = PTR_DAT_00080a1c;\n    if (*(int *)undefined_pointer_4 < *(int *)undefined_pointer_8) {\n      undefined_variable_11 = thunk_FUN_00081714();\n      undefined_pointer_3 = PTR_DAT_00080890;\n      if (*(uint *)PTR_DAT_00080890 < undefined_variable_11) {\n        *(int *)undefined_pointer_5 = *(int *)undefined_pointer_5 + 1;\n        integer_variable_15 = thunk_FUN_00081714();\n        *(int *)undefined_pointer_3 = integer_variable_15 + 1000;\n      }\n    }\n    else {\n      if (*(int *)undefined_pointer_4 != *(int *)undefined_pointer_8) goto LAB_000808f4;\n      if (*(int *)undefined_pointer_9 < *(int *)undefined_pointer_5) {\n        integer_variable_15 = 0;\n        *(undefined4 *)PTR_DAT_00080a1c = 0;\n        goto LAB_000808f2;\n      }\n      undefined_variable_11 = thunk_FUN_00081714();\n      undefined_pointer_8 = PTR_DAT_00080a54;\n      if (*(uint *)PTR_DAT_00080a54 < undefined_variable_11) {\n        *(int *)undefined_pointer_3 = *(int *)undefined_pointer_3 + 1;\n        integer_variable_15 = thunk_FUN_00081714();\n        *(int *)undefined_pointer_8 = integer_variable_15 + 1000;\n      }\n    }\n    if (0x3b < *(int *)undefined_pointer_5) {\n      *(undefined4 *)PTR_DAT_00080a1c = 0;\n      *(int *)undefined_pointer_4 = *(int *)undefined_pointer_4 + 1;\n    }\n  }\nLAB_000808f4:\n  undefined_variable_11 = thunk_FUN_00081714();\n  undefined_pointer_8 = PTR_DAT_00080a60;\n  undefined_pointer_3 = PTR_DAT_00080a5c;\n  undefined_pointer_5 = PTR_DAT_00080a58;\n  undefined_pointer_4 = PTR_DAT_00080a24;\n  if (*(uint *)PTR_DAT_00080a58 < undefined_variable_11) {\n    undefined_variable_12 = FUN_0008189c(*(undefined4 *)PTR_DAT_00080a28);\n    undefined_variable_12 = FUN_00081730(undefined_variable_12,*(undefined4 *)PTR_DAT_00080a2c);\n    *(undefined4 *)PTR_DAT_00080a30 = undefined_variable_12;\n    undefined_pointer_9 = PTR_DAT_00080a34;\n    undefined_variable_18 = *(undefined4 *)PTR_DAT_00080a34;\n    undefined_variable_13 = FUN_00081734(undefined_variable_12,undefined_variable_18);\n    undefined_variable_13 = FUN_00081944(undefined_variable_13,*(undefined4 *)undefined_pointer_8);\n    undefined_pointer_7 = PTR_DAT_00080a64;\n    undefined_variable_13 = FUN_00081734(undefined_variable_13,*(undefined4 *)PTR_DAT_00080a64);\n    *(undefined4 *)undefined_pointer_8 = undefined_variable_13;\n    undefined_variable_18 = FUN_00081730(undefined_variable_12,undefined_variable_18);\n    undefined_variable_18 = FUN_00081944(undefined_variable_18,*(undefined4 *)PTR_DAT_00080a38);\n    undefined_pointer_8 = PTR_DAT_00080a3c;\n    undefined_variable_18 = FUN_00081730(undefined_variable_18,*(undefined4 *)PTR_DAT_00080a3c);\n    *(undefined4 *)PTR_DAT_00080a38 = undefined_variable_18;\n    undefined_variable_14 = FUN_00081944(undefined_variable_12,*(undefined4 *)PTR_DAT_00080a40);\n    undefined_variable_14 = FUN_00081734(undefined_variable_14,undefined_variable_13);\n    FUN_00081734(undefined_variable_14,undefined_variable_18);\n    undefined_variable_14 = FUN_00081cd0();\n    *(undefined4 *)PTR_DAT_00080a44 = undefined_variable_14;\n    undefined_variable_14 = FUN_0008189c();\n    *(undefined4 *)undefined_pointer_9 = undefined_variable_12;\n    *(undefined4 *)undefined_pointer_4 = undefined_variable_14;\n    *(undefined4 *)undefined_pointer_3 = 0;\n    *(undefined4 *)undefined_pointer_7 = undefined_variable_13;\n    *(undefined4 *)undefined_pointer_8 = undefined_variable_18;\n    integer_variable_15 = thunk_FUN_00081714();\n    *(int *)undefined_pointer_5 = integer_variable_15 + *(int *)undefined_pointer_2;\n  }\n  undefined_variable_12 = FUN_0008189c(*(undefined4 *)undefined_pointer_2);\n  integer_variable_15 = FUN_00081ca8(*(undefined4 *)undefined_pointer_4,undefined_variable_12);\n  if (integer_variable_15 != 0) {\n    *(undefined4 *)PTR_DAT_00080a24 = undefined_variable_12;\n  }\n  integer_variable_15 = FUN_00081c94(*(undefined4 *)undefined_pointer_4,0);\n  if (integer_variable_15 != 0) {\n    *(undefined4 *)PTR_DAT_00080a24 = 0;\n  }\n  undefined_variable_10 = FUN_00081d1c(*(undefined4 *)undefined_pointer_4);\n  integer_variable_15 = *(int *)undefined_pointer_3;\n  *(undefined2 *)(undefined_pointer_1 + 0x2a) = undefined_variable_10;\n  *(int *)undefined_pointer_3 = integer_variable_15 + 1;\n  *(uint *)PTR_DAT_00080a4c = *(ushort *)PTR_DAT_00080a48 & 1 ^ 1;\n  return;\n}\n\n",
            "called": [
                "FUN_000802da",
                "FUN_00081cd0",
                "FUN_00081734",
                "FUN_00081d1c",
                "FUN_00081894",
                "FUN_00081730",
                "FUN_00081ca8",
                "FUN_0008043e",
                "thunk_FUN_00081714",
                "FUN_00081944",
                "FUN_00081c94",
                "FUN_0008189c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000805d0",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "improved_function_000805d0"
        },
        "FUN_000813e4": {
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "input_value",
                "*(*(int *)(param_1 + 0x10) + 0x80)": "ptr1",
                "*(*(int *)(param_1 + 0x10) + 0x84)": "ptr2",
                "& 0x7f": "bitwise_and_7f",
                "uint": "unsigned_int",
                "int": "signed_int",
                "result": "difference"
            },
            "code": "uint calculate_difference_000813e4(int param_1)\n{\n    int* ptr1 = *(int *)(param_1 + 0x10);\n    int* ptr2 = ptr1 + 0x20;\n    int result = *ptr2 - *(ptr2 + 1) & 0x7f;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e4",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "calculate_difference_000813e4"
        },
        "FUN_0008120c": {
            "renaming": {
                "FUN_0008120c": "do_nothing_0008120c"
            },
            "code": "\nvoid do_nothing_0008120c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008120c",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "do_nothing_0008120c"
        },
        "FUN_00084290": {
            "renaming": {
                "FUN_00084290": "get_dat_value_00084290",
                "DAT_00084294": "dat_value"
            },
            "code": "int get_dat_value_00084290() {\n  return DAT_00084294;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084290",
            "calling": [
                "FUN_0008456c"
            ],
            "imported": false,
            "current_name": "get_dat_value_00084290"
        },
        "FUN_000846b4": {
            "renaming": {
                "FUN_000846b4": "calculateResult_000846b4",
                "param_1": "result",
                "param_2": "parameter2",
                "param_3": "parameter3",
                "param_4": "parameter4",
                "puVar1": "ptr",
                "iVar2": "calculationResult"
            },
            "code": "void calculateResult_000846b4(int *result, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined *ptr = PTR_DAT_000846d8;\n  *(undefined4 *)PTR_DAT_000846d8 = 0;\n  int calculationResult = FUN_000811b4(param_2, param_3, param_3, 0, param_4);\n  if (calculationResult == -1 && *(int *)ptr != 0) {\n    *result = *(int *)ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846b4",
            "calling": [
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "calculateResult_000846b4"
        },
        "FUN_000813a8": {
            "renaming": {
                "FUN_000813a8": "set_default_values_000813a8",
                "param_1": "obj_ptr",
                "FUN_00082504": "set_memory",
                "*(undefined4 *)(param_1 + 0x80)": "*(undefined4 *)(obj_ptr + 0x80)",
                "*(undefined4 *)(param_1 + 0x84)": "*(undefined4 *)(obj_ptr + 0x84)"
            },
            "code": "int set_default_values_000813a8(int obj_ptr)\n{\n    set_memory(obj_ptr, 0, 0x80);\n    *(undefined4 *)(obj_ptr + 0x80) = 0;\n    *(undefined4 *)(obj_ptr + 0x84) = 0;\n    return obj_ptr;\n}",
            "called": [
                "FUN_00082504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813a8",
            "calling": [
                "FUN_00080c0c"
            ],
            "imported": false,
            "current_name": "set_default_values_000813a8"
        },
        "FUN_00083d9c": {
            "renaming": {
                "FUN_00083d9c": "allocate_memory_block_00083d9c",
                "param_1": "param_1",
                "param_2": "block_size",
                "iVar1": "prev_block_size",
                "uVar2": "prev_block_flags",
                "iVar3": "prev_block_offset",
                "iVar5": "current_block_offset",
                "uVar4": "current_block_flags",
                "heap_start": "heap_start",
                "DAT_00083f24": "DAT_00083f24",
                "DAT_00083f2c": "DAT_00083f2c",
                "PTR_DAT_00083f30": "PTR_DAT_00083f30",
                "do_nothing_00082598": "do_nothing_00082598",
                "FUN_00083d00": "FUN_00083d00",
                "do_nothing_0008259c": "do_nothing_0008259c"
            },
            "code": "void allocate_memory_block_00083d9c(uint32_t param_1, int32_t block_size)\n{\n  int32_t prev_block_size;\n  uint32_t prev_block_flags;\n  int32_t prev_block_offset;\n  int32_t current_block_offset;\n  uint32_t current_block_flags;\n  uint32_t *heap_start = DAT_00083f24;\n  if (block_size == 0) {\n    return;\n  }\n  do_nothing_00082598();\n  prev_block_size = heap_start[2];\n  prev_block_offset = (int32_t)heap_start + prev_block_size;\n  prev_block_flags = *(uint32_t *)(prev_block_offset + 4);\n  if (prev_block_offset == heap_start[1]) {\n    block_size = (block_size + 3U & 0xfffffffc) + prev_block_size;\n    if (-1 < (int32_t)(block_size << 0x1f)) {\n      current_block_offset = (int32_t)heap_start + prev_block_size - *(int32_t *)(prev_block_offset + 4);\n      int32_t next_block_offset = *(int32_t *)(current_block_offset + 0xc);\n      int32_t prev_block_offset = *(int32_t *)(current_block_offset + 8);\n      block_size = block_size + *(int32_t *)(prev_block_offset - 8);\n      *(int32_t *)(prev_block_offset + 0xc) = next_block_offset;\n      *(int32_t *)(next_block_offset + 8) = prev_block_offset;\n    }\n    uint32_t heap_end = *DAT_00083f2c;\n    *(uint32_t *)(prev_block_offset - 4) = block_size | 1;\n    heap_start[2] = prev_block_offset - (int32_t)heap_start;\n    if (heap_end <= block_size) {\n      FUN_00083d00(param_1, *(uint32_t *)PTR_DAT_00083f30);\n    }\n  }\n  else {\n    uint32_t block_size_flag = block_size & 1U;\n    *(uint32_t *)(prev_block_offset + 4) = block_size;\n    if (block_size_flag == 0) {\n      current_block_offset = (int32_t)heap_start + prev_block_size - *(int32_t *)(prev_block_offset + 4);\n      int32_t next_block_offset = *(int32_t *)(current_block_offset + 0xc);\n      prev_block_offset = *(int32_t *)(current_block_offset + 8);\n      block_size = block_size + *(int32_t *)(prev_block_offset - 8);\n      if (next_block_offset == (int32_t)heap_start + 8) {\n        block_size_flag = 1;\n      }\n      else {\n        int32_t next_block_prev_offset = *(int32_t *)(current_block_offset + 0x10);\n        *(int32_t *)(next_block_offset + 0xc) = next_block_prev_offset;\n        *(int32_t *)(next_block_prev_offset + 8) = next_block_offset;\n      }\n    }\n    else {\n      block_size_flag = 0;\n    }\n    if (-1 < *(int32_t *)(prev_block_offset + block_size + 4) << 0x1f) {\n      current_block_offset = (int32_t)heap_start + prev_block_size - *(int32_t *)(prev_block_offset + 4) + block_size;\n      int32_t next_block_offset = *(int32_t *)(current_block_offset + 0xc);\n      prev_block_offset = *(int32_t *)(current_block_offset + 8);\n      *(int32_t *)(prev_block_offset + 0xc) = next_block_offset;\n      *(int32_t *)(next_block_offset + 8) = prev_block_offset;\n      block_size = block_size + *(int32_t *)(prev_block_offset - 8);\n    }\n    *(uint32_t *)(prev_block_offset + 4) = block_size;\n    *(uint32_t *)(prev_block_offset + block_size) = block_size;\n    if (block_size_flag == 0) {\n      if (block_size < 512) {\n        uint32_t heap_bitmap = heap_start[1];\n        int32_t free_block_offset = (int32_t)heap_start + (block_size & 0xfffffff8) - 8;\n        int32_t next_free_block_offset = *(int32_t *)(heap_bitmap + (block_size >> 3 & 0x3f8));\n        int32_t prev_free_block_offset = heap_bitmap + (block_size >> 3 & 0x3f8);\n        *(int32_t *)(free_block_offset + 8) = next_free_block_offset;\n        *(int32_t *)(free_block_offset + 0xc) = prev_free_block_offset;\n        *(uint32_t *)(heap_bitmap + (block_size >> 3 & 0x3f8)) = free_block_offset;\n        *(int32_t *)(next_free_block_offset + 0xc) = free_block_offset;\n        heap_start[3] = heap_start[3] & ~(1 << (block_size >> 6 & 0x1f));\n        do_nothing_0008259c(param_1);\n        return;\n      }\n      uint32_t block_size_divided = block_size >> 9;\n      int32_t block_offset;\n      if (block_size_divided < 5) {\n        block_offset = block_size_divided + 0x38;\n        current_block_offset = block_offset * 2;\n      }\n      else if (block_size_divided < 21) {\n        block_offset = block_size_divided + 0x5b;\n        current_block_offset = block_offset * 2;\n      }\n      else if (block_size_divided < 85) {\n        block_offset = block_size >> 12 & 0x3f;\n        current_block_offset = block_offset + 0x6e;\n        current_block_offset = current_block_offset * 2;\n      }\n      else if (block_size_divided < 341) {\n        block_offset = block_size >> 15 & 0x1f;\n        current_block_offset = block_offset + 0x77;\n        current_block_offset = current_block_offset * 2;\n      }\n      else if (block_size_divided < 1365) {\n        block_offset = block_size >> 18 & 0x7;\n        current_block_offset = block_offset + 0x7c;\n        current_block_offset = current_block_offset * 2;\n      }\n      else {\n        current_block_offset = 0xfc;\n        block_offset = 0x7e;\n      }\n      int32_t free_block_offset = heap_start[4 + current_block_offset];\n      int32_t next_free_block_offset = *(int32_t *)(free_block_offset + 8);\n      *(int32_t *)(free_block_offset + 8) = prev_block_offset;\n      *(int32_t *)(prev_block_offset + 0xc) = free_block_offset;\n      *(int32_t *)(prev_block_offset + 8) = heap_start[4 + current_block_offset];\n      *(int32_t *)(free_block_offset + 0xc) = prev_block_offset;\n      heap_start[4 + current_block_offset] = prev_block_offset;\n      *(uint32_t *)(prev_block_offset + 4) = block_size | 1;\n    }\n  }\n  do_nothing_0008259c(param_1);\n  return;\n}",
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00083d00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d9c",
            "calling": [
                "FUN_00083f34",
                "FUN_000825b0",
                "FUN_00081e04",
                "FUN_000846a4",
                "FUN_00083808",
                "FUN_00083adc",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00083d9c"
        },
        "FUN_00083c08": {
            "renaming": {
                "FUN_00083c08": "do_nothing_00083c08"
            },
            "code": "\nvoid do_nothing_00083c08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c08",
            "calling": [
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c08"
        },
        "FUN_00081bf4": {
            "renaming": {
                "FUN_00081bf4": "calculate_result_00081bf4",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "uVar2": "doubled_input_param_1",
                "uVar3": "doubled_input_param_2",
                "uVar4": "combined_inputs",
                "bVar1": "is_negative",
                "bVar5": "is_combined_inputs_zero"
            },
            "code": "uint calculate_result_00081bf4(uint input_param_1, uint input_param_2)\n{\n    bool is_negative;\n    uint doubled_input_param_1 = input_param_1 * 2;\n    uint doubled_input_param_2 = input_param_2 * 2;\n    if (((int)doubled_input_param_1 >> 0x18 == -1 || (int)doubled_input_param_2 >> 0x18 == -1) && ((((int)doubled_input_param_1 >> 0x18 == -1 && ((input_param_1 & 0x7fffff) != 0)) || (((int)doubled_input_param_2 >> 0x18 == -1 && ((input_param_2 & 0x7fffff) != 0)))))) {\n        return 1;\n    }\n    uint combined_inputs = doubled_input_param_1 | input_param_2 & 0x7fffffff;\n    bool is_combined_inputs_zero = combined_inputs == 0;\n    if (!is_combined_inputs_zero) {\n        combined_inputs = input_param_1 ^ input_param_2;\n        is_combined_inputs_zero = combined_inputs == 0;\n    }\n    is_negative = -1 < (int)combined_inputs;\n    if (is_negative) {\n        input_param_1 = doubled_input_param_1 + input_param_2 * -2;\n        is_combined_inputs_zero = input_param_1 == 0;\n    }\n    if ((is_negative && doubled_input_param_2 <= doubled_input_param_1) && !is_combined_inputs_zero) {\n        input_param_1 = (int)input_param_2 >> 0x1f;\n    }\n    if (!is_negative || doubled_input_param_2 > doubled_input_param_1) {\n        input_param_1 = ~((int)input_param_2 >> 0x1f);\n    }\n    if (!is_combined_inputs_zero) {\n        input_param_1 = input_param_1 | 1;\n    }\n    return input_param_1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081bf4",
            "calling": [
                "FUN_00081c5c"
            ],
            "imported": false,
            "current_name": "calculate_result_00081bf4"
        },
        "FUN_00081d7c": {
            "renaming": {
                "FUN_00081d7c": "execute_function_list_00081d7c",
                "puVar1": "data_start",
                "puVar2": "data_end",
                "iVar3": "current_index",
                "ppcVar4": "current_function",
                "iVar5": "num_entries",
                "PTR_DAT_00081dbc": "function_list_end",
                "PTR_DAT_00081dc0": "function_list_start",
                "PTR_DAT_00081dc8": "data_end",
                "PTR_LAB_00081dc4": "data_start"
            },
            "code": "void execute_function_list_00081d7c(void)\n{\n  code **PTR_DAT_00081dbc = (code **)PTR_DAT_00081dbc;\n  code **PTR_DAT_00081dc0 = (code **)PTR_DAT_00081dc0;\n  int num_functions = (int)(PTR_DAT_00081dbc - PTR_DAT_00081dc0) >> 2;\n  if (num_functions != 0) {\n    code **current_function = PTR_DAT_00081dc0 - 1;\n    for (int i = 0; i < num_functions; i++) {\n      current_function++;\n      (**current_function)();\n    }\n  }\n  undefined *PTR_DAT_00081dc8 = PTR_DAT_00081dc8;\n  undefined *PTR_LAB_00081dc4 = PTR_LAB_00081dc4;\n  do_nothing_00085858();\n  int num_data_entries = (int)(PTR_LAB_00081dc4 - PTR_DAT_00081dc8) >> 2;\n  if (num_data_entries != 0) {\n    code **current_data = (code **)(PTR_DAT_00081dc8 - 4);\n    for (int i = 0; i < num_data_entries; i++) {\n      current_data++;\n      (**current_data)();\n    }\n  }\n}",
            "called": [
                "FUN_00083974",
                "FUN_00080118",
                "FUN_00085858"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d7c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "execute_function_list_00081d7c"
        },
        "FUN_00081c5c": {
            "renaming": {
                "FUN_00081c5c": "concatenate_00081c5c",
                "param_1": "first_half",
                "param_2": "second_half",
                "FUN_00081bf4": "call_function"
            },
            "code": "uint64_t concatenate_00081c5c(uint32_t param_1, uint32_t param_2)\n{\n  call_function();\n  return ((uint64_t)param_2 << 32) | param_1;\n}",
            "called": [
                "FUN_00081bf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c5c",
            "calling": [
                "FUN_00081c54",
                "FUN_00081c94"
            ],
            "imported": false,
            "current_name": "concatenate_00081c5c"
        },
        "FUN_00081388": {
            "renaming": {
                "FUN_00081388": "decrement_and_call_if_zero_00081388",
                "PTR_000813a0": "count_ptr",
                "PTR_000813a4": "callback_ptr",
                "iVar1": "count"
            },
            "code": "void decrement_and_call_if_zero_00081388(void)\n{\n  int count = *PTR_000813a0;\n  if ((count != -1) && (--count == 0)) {\n    (*PTR_000813a4)();\n  }\n  *PTR_000813a0 = count;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081388",
            "calling": [],
            "imported": false,
            "current_name": "decrement_and_call_if_zero_00081388"
        },
        "FUN_00082598": {
            "renaming": {
                "FUN_00082598": "do_nothing_00082598"
            },
            "code": "\nvoid do_nothing_00082598(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082598",
            "calling": [
                "FUN_00083d9c",
                "FUN_000825b0",
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "do_nothing_00082598"
        },
        "FUN_00082994": {
            "renaming": {
                "FUN_00082994": "copy_strings_00082994",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "next_source_ptr",
                "puVar4": "source_ptr",
                "uVar5": "current_uint",
                "uVar6": "next_uint",
                "puVar7": "destination_ptr",
                "bVar8": "is_null"
            },
            "code": "void copy_strings_00082994(uint *destination, uint *source) {\n    char current_char;\n    ushort current_short;\n    uint *source_ptr;\n    uint *destination_ptr;\n    uint current_uint;\n    uint *next_source_ptr;\n    bool is_null;\n\n    if ((((uint)destination ^ (uint)source) & 3) != 0) {\n        do {\n            current_char = *(char *)source;\n            *(char *)destination = current_char;\n            source = (uint *)((int)source + 1);\n            destination = (uint *)((int)destination + 1);\n        } while (current_char != '\\0');\n        return;\n    }\n    if (((uint)source & 3) != 0) {\n        source_ptr = source;\n        if (((uint)source & 1) != 0) {\n            source_ptr = (uint *)((int)source + 1);\n            current_char = *(char *)source;\n            *(char *)destination = current_char;\n            destination = (uint *)((int)destination + 1);\n            if (current_char == '\\0') {\n                return;\n            }\n        }\n        source = source_ptr;\n        if (((uint)source_ptr & 2) != 0) {\n            source = (uint *)((int)source_ptr + 2);\n            current_short = *(ushort *)source_ptr;\n            is_null = (current_short & 0xff) == 0;\n            if (is_null) {\n                *(char *)destination = (char)current_short;\n            }\n            else {\n                *(ushort *)destination = current_short;\n                is_null = (current_short & 0xff00) == 0;\n                destination = (uint *)((int)destination + 2);\n            }\n            if (is_null) {\n                return;\n            }\n        }\n    }\n    current_uint = *source;\n    next_source_ptr = source + 1;\n    destination_ptr = destination;\n    if (((uint)source & 4) != 0) {\n        if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) goto LAB_000829f8;\n        destination_ptr = destination + 1;\n        *destination = current_uint;\n        next_source_ptr = source + 2;\n        current_uint = source[1];\n    }\n    while (true) {\n        source_ptr = next_source_ptr + 1;\n        current_uint = *next_source_ptr;\n        destination = destination_ptr;\n        if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) break;\n        destination = destination_ptr + 1;\n        *destination_ptr = current_uint;\n        current_uint = current_uint;\n        if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) break;\n        next_source_ptr = next_source_ptr + 2;\n        destination_ptr = destination_ptr + 2;\n        *destination = current_uint;\n    }\nLAB_000829f8:\n    do {\n        *(char *)destination = (char)current_uint;\n        current_uint = current_uint & 0xff;\n        current_uint = current_uint >> 8 | current_uint << 0x18;\n        destination = (uint *)((int)destination + 1);\n    } while (current_uint != 0);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082994",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "copy_strings_00082994"
        },
        "FUN_00080c0c": {
            "renaming": {
                "FUN_00080c0c": "initialize_pointers_and_call_functions_00080c0c",
                "param_1": "ptr1",
                "param_2": "ptr2",
                "param_3": "ptr3",
                "puVar1": "ptr4",
                "puVar2": "ptr5",
                "puVar3": "ptr6",
                "puVar4": "ptr7",
                "puVar5": "ptr8",
                "puVar6": "ptr9"
            },
            "code": "void initialize_pointers_and_call_functions_00080c0c(void *ptr1, void *ptr2, void *ptr3)\n{\n  void *ptr4;\n  void *ptr5;\n  void *ptr6;\n  void *ptr7;\n  void *ptr8;\n  void *ptr9;\n  \n  ptr5 = global_pointer_1;\n  ptr4 = global_pointer_2;\n  function_1(global_pointer_1);\n  function_1(global_pointer_2);\n  ptr8 = global_pointer_3;\n  ptr6 = global_pointer_4;\n  function_2(global_pointer_5, global_pointer_6, 8, 8, ptr4, ptr5, ptr3);\n  ptr5 = global_pointer_7;\n  function_1(ptr8);\n  ptr9 = global_pointer_8;\n  function_1(ptr6);\n  ptr4 = global_pointer_9;\n  function_1(ptr5);\n  ptr7 = global_pointer_10;\n  function_1(ptr9);\n  function_1(ptr4);\n  function_1(ptr7);\n  function_3(global_pointer_11, 17, 17, ptr8, ptr9);\n  function_3(global_pointer_12, 18, 18, ptr6, ptr4);\n  function_3(global_pointer_13, 20, 20, ptr5, ptr7);\n  return;\n}\n",
            "called": [
                "FUN_000813a8",
                "FUN_000814e4",
                "FUN_000815d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c0c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_pointers_and_call_functions_00080c0c"
        },
        "FUN_00080d2e": {
            "renaming": {
                "FUN_00080d2e": "update_data_00080d2e",
                "param_1": "data_id",
                "param_2": "update_type",
                "param_3": "update_value",
                "uVar1": "current_value"
            },
            "code": "void update_data_00080d2e(int data_id, uint32_t update_type, uint32_t update_value)\n{\n  uint32_t current_value = *(uint32_t *)(data_id + 0x70);\n  switch(update_type) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    current_value = current_value & current_value & ~update_value;\n    break;\n  case 2:\n    current_value = current_value | update_value;\n    break;\n  default:\n    goto invalid_update_type;\n  }\n  *(uint32_t *)(data_id + 0x70) = current_value;\ninvalid_update_type:\n  *(uint32_t *)(data_id + 4) = update_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d2e",
            "calling": [
                "FUN_00080da0"
            ],
            "imported": false,
            "current_name": "update_data_00080d2e"
        },
        "FUN_00081944": {
            "renaming": {
                "FUN_00081944": "calculate_float_00081944",
                "param_1": "float_1",
                "param_2": "float_2",
                "param_3": "undefined",
                "param_4": "float_3",
                "lVar1": "long_var",
                "uVar2": "result",
                "uVar3": "byte_1",
                "iVar4": "sum_bytes",
                "iVar5": "byte_diff",
                "iVar7": "byte_diff_adjusted",
                "uVar6": "product",
                "uVar8": "temp_result",
                "bVar9": "bool_1",
                "bVar10": "bool_2"
            },
            "code": "\nuint calculate_float_00081944(uint float_1,uint float_2,undefined4 undefined,uint float_3)\n\n{\n  longlong long_var;\n  uint result;\n  uint byte_1;\n  int sum_bytes;\n  int byte_diff;\n  uint product;\n  int byte_diff_adjusted;\n  uint temp_result;\n  bool bool_1;\n  bool bool_2;\n  \n  byte_1 = float_1 >> 0x17 & 0xff;\n  bool_1 = byte_1 == 0;\n  if (!bool_1) {\n    float_3 = float_2 >> 0x17 & 0xff;\n    bool_1 = float_3 == 0;\n  }\n  if (!bool_1) {\n    bool_1 = byte_1 == 0xff;\n  }\n  if (!bool_1) {\n    bool_1 = float_3 == 0xff;\n  }\n  if (bool_1) {\n    float_3 = float_2 >> 0x17 & 0xff;\n    if (byte_1 == 0xff || float_3 == 0xff) {\n      bool_1 = float_1 == 0 || float_1 == 0x80000000;\n      result = float_2;\n      if (float_1 != 0 && float_1 != 0x80000000) {\n        bool_1 = float_2 == 0;\n        result = float_1;\n      }\n      if (!bool_1) {\n        bool_1 = float_2 == 0x80000000;\n      }\n      temp_result = result;\n      if (((bool_1) || ((byte_1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((float_3 == 0xff && (temp_result = float_2, (float_2 & 0x7fffff) != 0)))) {\n        return temp_result | 0x7fc00000;\n      }\n      result = result ^ float_2;\n      goto LAB_00081a94;\n    }\n    bool_1 = (float_1 & 0x7fffffff) == 0;\n    if (!bool_1) {\n      bool_1 = (float_2 & 0x7fffffff) == 0;\n    }\n    if (bool_1) {\n      return (float_1 ^ float_2) & 0x80000000;\n    }\n    bool_1 = byte_1 == 0;\n    result = float_1 & 0x80000000;\n    while( true ) {\n      if (bool_1) {\n        float_1 = float_1 << 1;\n        bool_1 = (float_1 & 0x800000) == 0;\n      }\n      if (!bool_1) break;\n      byte_1 = byte_1 - 1;\n    }\n    float_1 = float_1 | result;\n    bool_1 = float_3 == 0;\n    result = float_2 & 0x80000000;\n    while( true ) {\n      if (bool_1) {\n        float_2 = float_2 << 1;\n        bool_1 = (float_2 & 0x800000) == 0;\n      }\n      if (!bool_1) break;\n      float_3 = float_3 - 1;\n    }\n    float_2 = float_2 | result;\n  }\n  sum_bytes = byte_1 + float_3;\n  temp_result = float_1 ^ float_2;\n  byte_1 = float_1 << 9;\n  bool_1 = byte_1 == 0;\n  if (!bool_1) {\n    float_2 = float_2 << 9;\n    bool_1 = float_2 == 0;\n  }\n  if (bool_1) {\n    if (byte_1 == 0) {\n      float_2 = float_2 << 9;\n    }\n    result = temp_result & 0x80000000 | float_1 & 0x7fffff | float_2 >> 9;\n    bool_2 = SBORROW4(sum_bytes,0x7f);\n    byte_diff = sum_bytes + -0x7f;\n    bool_1 = byte_diff == 0;\n    byte_diff_adjusted = byte_diff;\n    if (!bool_1 && 0x7e < sum_bytes) {\n      bool_2 = SBORROW4(0xff,byte_diff);\n      byte_diff_adjusted = 0xff - byte_diff;\n      bool_1 = byte_diff == 0xff;\n    }\n    if (!bool_1 && byte_diff_adjusted < 0 == bool_2) {\n      result = result | byte_diff * 0x800000;\n    }\n    if (!bool_1 && byte_diff_adjusted < 0 == bool_2) {\n      return result;\n    }\n    result = result | 0x800000;\n    product = 0;\n    bool_2 = SBORROW4(byte_diff,1);\n    temp_result = sum_bytes - 0x80;\n    bool_1 = temp_result == 0;\n    byte_1 = temp_result;\n  }\n  else {\n    long_var = (ulonglong)(byte_1 >> 5 | 0x8000000) * (ulonglong)(float_2 >> 5 | 0x8000000);\n    product = (uint)long_var;\n    result = (uint)((ulonglong)long_var >> 0x20);\n    bool_1 = result < 0x800000;\n    if (bool_1) {\n      result = result << 1;\n    }\n    if (bool_1) {\n      result = result | product >> 0x1f;\n      product = product << 1;\n    }\n    result = temp_result & 0x80000000 | result;\n    temp_result = (sum_bytes + -0x7f) - (uint)bool_1;\n    bool_2 = SBORROW4(temp_result,0xfd);\n    bool_1 = temp_result == 0xfd;\n    byte_1 = temp_result - 0xfd;\n    if (temp_result < 0xfe) {\n      result = result + temp_result * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (bool_1 || (int)byte_1 < 0 != bool_2) {\n    bool_1 = (int)(temp_result + 0x19) < 0;\n    if (temp_result == 0xffffffe7 || bool_1 != SCARRY4(temp_result,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (temp_result != 0xffffffe7 && bool_1 == SCARRY4(temp_result,0x19)) {\n      byte_1 = (result << 1) >> (-temp_result & 0xff);\n      temp_result = result << (temp_result + 0x20 & 0xff);\n      byte_1 = ((uint)((result & 0x80000000) != 0) << 0x1f | byte_1 >> 1) + (uint)((byte)byte_1 & 1);\n      if ((product | temp_result << 1) == 0) {\n        byte_1 = byte_1 & ~(temp_result >> 0x1f);\n      }\n      return byte_1;\n    }\n    return result;\n  }\nLAB_00081a94:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081944",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "calculate_float_00081944"
        },
        "FUN_000844c4": {
            "renaming": {
                "FUN_000844c4": "process_input_000844c4",
                "param_1": "input_length",
                "param_2": "input_char",
                "param_3": "input_buffer_ptr",
                "param_4": "buffer_length",
                "uVar1": "input_short",
                "uVar2": "input_uint",
                "puVar3": "buffer_ptr",
                "iVar4": "buffer_start"
            },
            "code": "uint process_input_000844c4(int input_length, uint input_char, undefined4 *input_buffer_ptr, undefined4 buffer_length){\n  ushort input_short;\n  uint input_uint;\n  undefined *buffer_ptr;\n  int buffer_start;\n  \n  if ((input_length != 0) && (*(int *)(input_length + 0x38) == 0)) {\n    initialize();\n  }\n  input_short = *(ushort *)(input_buffer_ptr + 3);\n  input_uint = (uint)input_short;\n  input_buffer_ptr[2] = input_buffer_ptr[6];\n  if ((-1 < (int)(input_uint << 0x1c)) || (buffer_start = input_buffer_ptr[4], buffer_start == 0)) {\n    buffer_start = process_buffer(input_length, input_buffer_ptr, input_short, input_uint, buffer_length);\n    if (buffer_start != 0) {\n      return 0xffffffff;\n    }\n    input_short = *(ushort *)(input_buffer_ptr + 3);\n    buffer_start = input_buffer_ptr[4];\n    input_uint = (uint)input_short;\n  }\n  input_char = input_char & 0xff;\n  if ((int)(input_uint << 0x12) < 0) {\n    buffer_ptr = (undefined *)*input_buffer_ptr;\n    buffer_start = (int)buffer_ptr - buffer_start;\n    if (buffer_start < (int)input_buffer_ptr[5]) {\nLAB_000844f6:\n      buffer_start = buffer_start + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    input_buffer_ptr[0x19] = input_buffer_ptr[0x19] & 0xffffdfff;\n    buffer_ptr = (undefined *)*input_buffer_ptr;\n    *(ushort *)(input_buffer_ptr + 3) = input_short | 0x2000;\n    buffer_start = (int)buffer_ptr - buffer_start;\n    if (buffer_start < (int)input_buffer_ptr[5]) goto LAB_000844f6;\n  }\n  buffer_start = process_buffer(input_length, input_buffer_ptr);\n  if (buffer_start != 0) {\n    return 0xffffffff;\n  }\n  buffer_ptr = (undefined *)*input_buffer_ptr;\n  buffer_start = 1;\nLAB_000844f8:\n  input_buffer_ptr[2] = input_buffer_ptr[2] + -1;\n  *input_buffer_ptr = buffer_ptr + 1;\n  *buffer_ptr = (char)input_char;\n  if (((input_buffer_ptr[5] == buffer_start) ||\n      (((int)((uint)*(ushort *)(input_buffer_ptr + 3) << 0x1f) < 0 && (input_char == 10)))) &&\n     (buffer_start = process_buffer(input_length, input_buffer_ptr), buffer_start != 0)) {\n    return 0xffffffff;\n  }\n  return input_char;\n}",
            "called": [
                "FUN_00083b14",
                "FUN_00083808",
                "FUN_00083adc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844c4",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "process_input_000844c4"
        },
        "FUN_0008189c": {
            "renaming": {
                "FUN_0008189c": "calculate_hash_0008189c",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "iVar4": "magic_number",
                "uVar3": "result",
                "uVar5": "overflow"
            },
            "code": "uint calculate_hash_0008189c(uint num) {\n  uint mask = 0x80000000;\n  uint count = 0;\n  while ((num & mask) == 0 && mask != 0) {\n    count++;\n    mask >>= 1;\n  }\n  return count;\n}\n\nuint calculate_hash_0008189c(uint input) {\n  uint sign_bit = input & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  uint leading_zeroes = calculate_hash_0008189c(input);\n  uint shift_amount = leading_zeroes - 8;\n  int magic_number = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (leading_zeroes > 7) {\n    uint shift = shift_amount & 0xff;\n    uint overflow = 0 << shift;\n    uint result = magic_number + (input << shift) + (0U >> (0x20 - shift)) + (uint)(0x7fffffff < overflow);\n    if (overflow == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shift = (leading_zeroes + 0x18U) & 0xff;\n  uint top_bits = input << shift;\n  uint bottom_bits = (input >> (0x20 - shift)) - ((int)top_bits >> 0x1f);\n  if ((top_bits & 0x7fffffff) == 0) {\n    bottom_bits = bottom_bits & ~(top_bits >> 0x1f);\n  }\n  return magic_number + bottom_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008189c",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "calculate_hash_0008189c"
        },
        "FUN_0008234c": {
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dest",
                "puVar2": "dest",
                "puVar3": "dest",
                "uVar4": "remaining_size",
                "uVar5": "remaining_unaligned_size",
                "bVar6": "is_aligned"
            },
            "code": "undefined4 *copy_memory_0008234c(undefined4 *destination, undefined4 *source, uint32_t size)\n{\n  undefined4 *dest = destination;\n  uint32_t remaining_size = size;\n  bool is_aligned = (((uint32_t)source | (uint32_t)destination) & 3) == 0;\n\n  if (!is_aligned)\n  {\n    if (size < 8)\n    {\n      uint32_t remaining_unaligned_size = size - 4;\n      if (remaining_unaligned_size > 3)\n      {\n        do\n        {\n          *dest = *source;\n          dest++;\n          source++;\n          remaining_unaligned_size--;\n        } while (remaining_unaligned_size > 3);\n        *(uint32_t*)dest = *(uint32_t*)source;\n        remaining_size = 0;\n      }\n      else\n      {\n        goto copy_remaining_bytes;\n      }\n    }\n    else if (((uint32_t)source & 3) != 0 && ((uint32_t)destination & 3) != 0)\n    {\n      uint32_t unaligned_bytes = 4 - ((uint32_t)destination & 3);\n      remaining_size -= unaligned_bytes;\n      if (((uint32_t)destination & 1) != 0)\n      {\n        *(uint8_t*)destination = *(uint8_t*)source;\n        source++;\n        destination++;\n        unaligned_bytes--;\n      }\n      if (unaligned_bytes > 1)\n      {\n        *(uint16_t*)destination = *(uint16_t*)source;\n        source += 2;\n        destination += 2;\n        unaligned_bytes -= 2;\n      }\n    }\n  }\n\n  while (remaining_size >= 64)\n  {\n    *dest = *source;\n    dest[1] = source[1];\n    dest[2] = source[2];\n    dest[3] = source[3];\n    dest[4] = source[4];\n    dest[5] = source[5];\n    dest[6] = source[6];\n    dest[7] = source[7];\n    dest[8] = source[8];\n    dest[9] = source[9];\n    dest[10] = source[10];\n    dest[11] = source[11];\n    dest[12] = source[12];\n    dest[13] = source[13];\n    dest[14] = source[14];\n    dest[15] = source[15];\n    dest += 16;\n    source += 16;\n    remaining_size -= 64;\n  }\n\n  uint32_t remaining_unaligned_size = remaining_size - 16;\n  if (remaining_unaligned_size > 47)\n  {\n    do\n    {\n      *dest = *source;\n      dest[1] = source[1];\n      dest[2] = source[2];\n      dest[3] = source[3];\n      dest += 4;\n      source += 4;\n      remaining_unaligned_size -= 16;\n    } while (remaining_unaligned_size > 47);\n  }\n\ncopy_remaining_bytes:\n  if (remaining_unaligned_size > 15)\n  {\n    *dest = *source;\n    dest[1] = source[1];\n    dest[2] = source[2];\n    dest[3] = source[3];\n    dest[4] = source[4];\n    dest[5] = source[5];\n    dest[6] = source[6];\n    dest[7] = source[7];\n    dest[8] = source[8];\n    dest[9] = source[9];\n    dest[10] = source[10];\n    dest[11] = source[11];\n    dest[12] = source[12];\n    dest[13] = source[13];\n    dest[14] = source[14];\n    dest[15] = source[15];\n    dest += 16;\n    source += 16;\n    remaining_unaligned_size -= 16;\n  }\n\n  if (remaining_unaligned_size > 3)\n  {\n    *(uint32_t*)dest = *(uint32_t*)source;\n    dest += 4;\n    source += 4;\n    remaining_unaligned_size -= 4;\n  }\n\n  if (remaining_unaligned_size > 1)\n  {\n    *(uint16_t*)dest = *(uint16_t*)source;\n    dest += 2;\n    source += 2;\n    remaining_unaligned_size -= 2;\n  }\n\n  if (remaining_unaligned_size > 0)\n  {\n    *(uint8_t*)dest = *(uint8_t*)source;\n  }\n\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008234c",
            "calling": [
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "copy_memory_0008234c"
        },
        "FUN_00080a68": {
            "renaming": {
                "FUN_00080a68": "initialize_device_00080a68",
                "PTR_DAT_00080a94": "device_info_start_ptr",
                "PTR_s__00080a98": "device_name",
                "FUN_00081682": "initialize_network",
                "FUN_00081d5c": "set_device_params",
                "DAT_00080aa0": "device_id",
                "DAT_00080a9c": "device_type",
                "PTR_DAT_00080aa4": "device_status_start_ptr"
            },
            "code": "void initialize_device_00080a68(void)\n{\n  undefined *device_info_ptr;\n  device_info_ptr = PTR_DAT_00080a94;\n  initialize_network(PTR_DAT_00080a94, PTR_s__00080a98);\n  set_device_params(device_info_ptr, DAT_00080aa0, DAT_00080a9c);\n  device_info_ptr = PTR_DAT_00080aa4;\n  PTR_DAT_00080aa4[4] = 0;\n  device_info_ptr[5] = 0;\n  device_info_ptr[6] = 6;\n  *(undefined2 *)(device_info_ptr + 0x56) = 1000;\n  return;\n}\n",
            "called": [
                "FUN_00081d5c",
                "FUN_00081682"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a68",
            "calling": [],
            "imported": false,
            "current_name": "initialize_device_00080a68"
        },
        "FUN_0008165c": {
            "renaming": {
                "FUN_0008165c": "check_and_update_data_0008165c",
                "param_1": "data",
                "param_2": "new_data",
                "param_3": "data_size",
                "iVar1": "is_valid",
                "FUN_0008163a": "check_data_validity",
                "FUN_0008160c": "update_data",
                "FUN_00082994": "send_data"
            },
            "code": "undefined4 *check_and_update_data_0008165c(undefined4 *data, undefined4 new_data, undefined4 data_size)\n{\n  int is_valid = check_data_validity(data, data_size);\n  if (is_valid == 0) {\n    update_data(data);\n  }\n  else {\n    data[2] = new_data;\n    send_data(*data, data_size);\n  }\n  return data;\n}",
            "called": [
                "FUN_00082994",
                "FUN_0008163a",
                "FUN_0008160c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008165c",
            "calling": [
                "FUN_00081682"
            ],
            "imported": false,
            "current_name": "check_and_update_data_0008165c"
        },
        "FUN_000815f8": {
            "renaming": {
                "FUN_000815f8": "combine_values_000815f8",
                "param_1": "value1",
                "param_2": "value2"
            },
            "code": "uint16_t combine_values_000815f8(int8_t value1, uint8_t value2) {\n    return value2 | value1 << 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815f8",
            "calling": [
                "FUN_00080410"
            ],
            "imported": false,
            "current_name": "combine_values_000815f8"
        },
        "FUN_00084384": {
            "renaming": {
                "FUN_00084384": "find_char_in_array_00084384",
                "param_1": "array",
                "param_2": "search_char",
                "param_3": "array_end",
                "puVar1": "current_element",
                "uVar2": "current_xor_result",
                "pcVar3": "current_char_pointer",
                "pcVar4": "last_char_pointer",
                "bVar5": "found"
            },
            "code": "uint* find_char_in_array_00084384(uint* array, char search_char, uint* array_end) {\n    uint* current_element;\n    uint current_xor_result;\n    char* current_char_pointer;\n    char* last_char_pointer;\n    bool found;\n\n    if (((uint)array & 3) == 0) {\n        current_element = array;\n        if (array_end > (array + 3)) {\n            do {\n                current_xor_result = *array ^ CONCAT22(CONCAT11(search_char, search_char), CONCAT11(search_char, search_char));\n                current_element = array;\n                if ((current_xor_result + 0xfefefeff & ~current_xor_result & 0x80808080) != 0) {\n                    break;\n                }\n                array_end = array_end - 1;\n                current_element = array + 1;\n                array = array + 1;\n            } while (array_end > (array + 3));\n        }\n        array = array_end;\n        last_char_pointer = (char*)((int)array - 1);\n        if ((array != (uint*)0x0) && (*(char*)current_element != search_char)) {\n            current_char_pointer = (char*)0x0;\n            do {\n                current_element = (uint*)((int)current_element + 1);\n                found = current_char_pointer == last_char_pointer;\n                current_char_pointer = current_char_pointer + 1;\n                if (found) {\n                    goto end_search;\n                }\n            } while (*(char*)current_element != search_char);\n        }\n    }\n    else if (array_end == (uint*)0x0) {\n        current_element = (uint*)0x0;\n    }\n    else if (*(char*)array != search_char) {\n        current_element = (uint*)((int)array + 1);\n        array_end = (uint*)((int)array_end - 1);\n        do {\n            array = current_element;\n            if (((uint)array & 3) == 0) {\n                current_element = array;\n                goto search_loop;\n            }\n            if (array_end == (uint*)0x0) {\n                current_element = (uint*)0x0;\n                goto end_search;\n            }\n            current_element = (uint*)((int)array + 1);\n            array_end = (uint*)((int)array_end - 1);\n        } while (*(char*)array != search_char);\n    }\n    end_search:\n    return current_element;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084384",
            "calling": [
                "FUN_00083f34",
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "find_char_in_array_00084384"
        },
        "FUN_00081034": {
            "renaming": {
                "FUN_00081034": "update_data_at_address_00081034",
                "param_1": "address",
                "param_2": "data",
                "param_3": "flag",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void update_data_at_address_00081034(uint32_t* address, uint32_t data, uint32_t flag)\n{\n    uint32_t* data_at_address = address + 1;\n    uint32_t current_data = *data_at_address;\n    uint32_t modified_data = data | current_data | (flag & 1) << 7;\n    *data_at_address = modified_data;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081034",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "update_data_at_address_00081034"
        },
        "FUN_00083c0c": {
            "renaming": {
                "FUN_00083c0c": "do_nothing_00083c0c"
            },
            "code": "\nvoid do_nothing_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c0c",
            "calling": [
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c0c"
        },
        "FUN_00083974": {
            "renaming": {
                "FUN_00083974": "add_to_buffer_00083974",
                "param_1": "data",
                "puVar1": "data_ptr",
                "puVar2": "buffer_ptr",
                "iVar3": "buffer_length",
                "iVar4": "buffer_capacity"
            },
            "code": "undefined4 add_to_buffer_00083974(undefined4 data)\n{\n  undefined *data_ptr;\n  undefined4 *buffer_ptr;\n  int buffer_length;\n  int buffer_capacity;\n  \n  data_ptr = PTR_DAT_00083984;\n  if (DAT_00083980 == 0) {\n    return data;\n  }\n  buffer_capacity = *(int *)PTR_DAT_0008396c;\n  buffer_ptr = *(undefined4 **)(buffer_capacity + 0x148);\n  if (buffer_ptr == (undefined4 *)0x0) {\n    buffer_ptr = (undefined4 *)(buffer_capacity + 0x14c);\n    *(undefined4 **)(buffer_capacity + 0x148) = buffer_ptr;\n  }\n  buffer_length = buffer_ptr[1];\n  if (0x1f < buffer_length) {\n    if ((DAT_00083970 == 0) ||\n       (buffer_ptr = (undefined4 *)FUN_00081df4(400), buffer_ptr == (undefined4 *)0x0)) {\n      return 0xffffffff;\n    }\n    *buffer_ptr = *(undefined4 *)(buffer_capacity + 0x148);\n    buffer_ptr[1] = 0;\n    buffer_length = 0;\n    *(undefined4 **)(buffer_capacity + 0x148) = buffer_ptr;\n    buffer_ptr[0x62] = 0;\n    buffer_ptr[99] = 0;\n  }\n  buffer_ptr[1] = buffer_length + 1;\n  buffer_ptr[buffer_length + 2] = data_ptr;\n  return 0;\n}",
            "called": [
                "FUN_00081df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083974",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "add_to_buffer_00083974"
        },
        "FUN_00084700": {
            "renaming": {
                "FUN_00084700": "findValueFromFunctionResult_00084700",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "puVar1": "pointer",
                "iVar2": "result"
            },
            "code": "void findValueFromFunctionResult_00084700(int *output, undefined4 param_2, undefined4 param_3, undefined4 param_4) {\n  undefined *pointer = PTR_DAT_00084724;\n  *(undefined4 *)PTR_DAT_00084724 = 0;\n  int result = calculateFunctionResult(param_2, param_3, param_4);\n  if (result == -1 && (*(int *)pointer != 0)) {\n    *output = *(int *)pointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811c2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084700",
            "calling": [
                "FUN_00084464",
                "FUN_0008449c"
            ],
            "imported": false,
            "current_name": "findValueFromFunctionResult_00084700"
        },
        "thunk_FUN_00081714": {
            "renaming": {
                "thunk_FUN_00081714": "get_value_from_pointer_thunk_00081714",
                "undefined4": "int",
                "PTR_DAT_0008171c": "value_pointer",
                "*(undefined4 *)PTR_DAT_0008171c": "*value_pointer",
                "return *(undefined4 *)PTR_DAT_0008171c;": "return value;"
            },
            "code": "int get_value_from_pointer_thunk_00081714() {\n    int* PTR_DAT_0008171c = PTR_DAT_0008171c;\n    int value = *(undefined4 *)PTR_DAT_0008171c;\n    return *(undefined4 *)PTR_DAT_0008171c;\n}",
            "called": [
                "FUN_00081714"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081208",
            "calling": [
                "FUN_000804a8",
                "FUN_0008043e",
                "FUN_000805d0",
                "FUN_00080258"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_thunk_00081714"
        },
        "FUN_00081ca8": {
            "renaming": {
                "FUN_00081ca8": "check_if_carry_is_false_or_zero_00081ca8",
                "in_CY": "carry",
                "in_ZR": "zero",
                "FUN_00081c54": "some_other_function"
            },
            "code": "bool check_if_carry_is_false_or_zero_00081ca8(void)\n{\n    bool is_carry_false = !(bool)carry || (bool)zero;\n    return is_carry_false;\n}",
            "called": [
                "FUN_00081c54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081ca8",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "check_if_carry_is_false_or_zero_00081ca8"
        },
        "FUN_00081318": {
            "renaming": {
                "FUN_00081318": "update_data_00081318",
                "param_1": "data_index",
                "param_2": "value",
                "param_3": "param_3",
                "puVar1": "data_ptr_1",
                "puVar2": "data_ptr_2",
                "iVar3": "result",
                "uVar4": "data_ptr_4",
                "iVar5": "data_ptr_3"
            },
            "code": "void update_data_00081318(int data_index, int value, undefined4 param_3)\\n{\\n  undefined *data_ptr_2 = PTR_DAT_00081384;\\n  undefined *data_ptr_1 = PTR_DAT_00081380;\\n  if (data_ptr_1[data_index * 0x1c + 0xc] != \"\\0\") {\\n    if ((data_ptr_2[data_index] & 0xf) == 5) {\\n      FUN_00081210(data_index,1,param_3,5,data_index,value,param_3);\\n    }\\n    data_ptr_2[data_index] = data_ptr_2[data_index] & 0xf | (byte)(value << 4);\\n    int data_ptr_3 = *(int *)(data_ptr_1 + data_index * 0x1c);\\n    undefined4 data_ptr_4 = *(undefined4 *)(data_ptr_1 + data_index * 0x1c + 4);\\n    int result = FUN_00080e04(data_ptr_3,data_ptr_4);\\n    if (result == 0) {\\n      if (value != 0) {\\n        *(undefined4 *)(data_ptr_3 + 100) = data_ptr_4;\\n        return;\\n      }\\n      *(undefined4 *)(data_ptr_3 + 0x60) = data_ptr_4;\\n      return;\\n    }\\n    FUN_00080d7a(data_ptr_3,data_ptr_4,value,0,1);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_00080d7a",
                "FUN_00080e04",
                "FUN_00081210"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081318",
            "calling": [
                "FUN_000804a8",
                "FUN_00080164",
                "FUN_000801b0",
                "FUN_00080ae4",
                "FUN_00080258"
            ],
            "imported": false,
            "current_name": "update_data_00081318"
        },
        "FUN_00081714": {
            "renaming": {
                "FUN_00081714": "get_pointer_value_00081714",
                "PTR_DAT_0008171c": "pointer_data"
            },
            "code": "get_pointer_value_00081714() {\n  return *(undefined4 *)PTR_DAT_0008171c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081714",
            "calling": [
                "thunk_FUN_00081714"
            ],
            "imported": false,
            "current_name": "get_pointer_value_00081714"
        },
        "FUN_0008449c": {
            "renaming": {
                "FUN_0008449c": "set_flag_for_param_0008449c",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "uVar2": "flag"
            },
            "code": "void set_flag_for_param_0008449c(void* param1, int* param2)\n{\n    int result = get_value_from_param(param1, *(short *)(param2 + 0xe));\n    ushort flag = (result == -1) ? *(ushort *)(param2 + 0xc) & 0xefff : *(ushort *)(param2 + 0xc) | 0x1000;\n    if (result != -1)\n    {\n        *(int *)(param2 + 0x50) = result;\n    }\n    *(ushort *)(param2 + 0xc) = flag;\n}",
            "called": [
                "FUN_00084700"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008449c",
            "calling": [],
            "imported": false,
            "current_name": "set_flag_for_param_0008449c"
        },
        "FUN_0008259c": {
            "renaming": {
                "FUN_0008259c": "do_nothing_0008259c"
            },
            "code": "\nvoid do_nothing_0008259c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008259c",
            "calling": [
                "FUN_000825b0",
                "FUN_00083d9c",
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "do_nothing_0008259c"
        },
        "FUN_0008477c": {
            "renaming": {
                "FUN_0008477c": "calculate_difference_0008477c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "output_array",
                "uVar1": "truncated_result",
                "lVar2": "result"
            },
            "code": "void calculate_difference_0008477c(uint input_1, int input_2, undefined4 input_3, undefined4 input_4, int *output_array)\n{\n    longlong result = calculate_product();\n    result = result * CONCAT44(input_4, input_3);\n    uint truncated_result = (uint)result;\n    *output_array = input_1 - truncated_result;\n    output_array[1] = (input_2 - (int)((ulonglong)result >> 0x20)) - (uint)(input_1 < truncated_result);\n    return;\n}\n\nlonglong calculate_product()\n{\n    longlong result = 0;\n    // Perform some operations to calculate result\n    return result;\n}",
            "called": [
                "FUN_000847e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008477c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_0008477c"
        },
        "FUN_000801b0": {
            "renaming": {
                "FUN_000801b0": "count_bytes_received_000801b0",
                "param_1": "data_buffer",
                "bVar1": "buffer_overflow",
                "uVar2": "current_byte",
                "cVar3": "num_bytes_received",
                "iVar4": "result",
                "bVar5": "num_bytes_stored"
            },
            "code": "int count_bytes_received_000801b0(int **data_buffer) {\n  bool buffer_overflow = false;\n  undefined current_byte;\n  char num_bytes_received;\n  int result;\n\n  if (*(byte *)((int)data_buffer + 6) > 1) {\n    flush_buffer(*(byte *)((int)data_buffer + 6),0);\n  }\n\n  num_bytes_received = 0;\n  *(undefined *)((int)data_buffer + 0x49) = 0;\n\n  if (*(byte *)((int)data_buffer + 5) < 4) {\n    while (result = (**(code **)(**data_buffer + 8))(), result != 0) {\n      current_byte = (**(code **)(**data_buffer + 0xc))();\n      num_bytes_received = *(char *)((int)data_buffer + 0x49);\n      *(undefined *)((int)data_buffer + num_bytes_received + 9) = current_byte;\n      num_bytes_received++;\n      *(byte *)((int)data_buffer + 0x49) = num_bytes_received;\n      if (num_bytes_received > 63) {\n        buffer_overflow = true;\n      }\n    }\n  }\n\n  *(short *)(data_buffer + 0x14) = *(short *)(data_buffer + 0x14) + 1;\n\n  if (buffer_overflow) {\n    num_bytes_received = -3;\n    *(short *)(data_buffer + 0x15) = *(short *)(data_buffer + 0x15) + 1;\n  }\n  else {\n    num_bytes_received = *(char *)((int)data_buffer + 0x49);\n  }\n\n  return (int)num_bytes_received;\n}",
            "called": [
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801b0",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "count_bytes_received_000801b0"
        },
        "FUN_000813c2": {
            "renaming": {
                "FUN_000813c2": "update_buffer_000813c2",
                "param_1": "buffer_addr",
                "param_2": "buffer_value",
                "uVar1": "new_index",
                "current_index": "*(uint *)(buffer_addr + 0x84)"
            },
            "code": "void update_buffer_000813c2(int buffer_addr, undefined buffer_value)\n{\n  uint new_index = *(int *)(buffer_addr + 0x80) + 1U & 0x7f;\n  uint current_index = *(uint *)(buffer_addr + 0x84);\n  if (new_index != current_index) {\n    *(undefined *)(buffer_addr + *(int *)(buffer_addr + 0x80)) = buffer_value;\n    *(uint *)(buffer_addr + 0x80) = new_index;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813c2",
            "calling": [],
            "imported": false,
            "current_name": "update_buffer_000813c2"
        },
        "FUN_000814e4": {
            "renaming": {
                "FUN_000814e4": "initialize_params_000814e4",
                "param_1": "params",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5",
                "param_6": "param_6",
                "puVar1": "ptr_to_func"
            },
            "code": "void initialize_params_000814e4(uint32_t *params, uint32_t param_2, uint8_t param_3, uint32_t param_4, uint32_t param_5, uint32_t param_6)\n{\n  uint32_t *ptr_to_func = PTR_PTR_FUN;\n  params[0] = (uint32_t)ptr_to_func;\n  params[1] = 0;\n  params[2] = 1000;\n  params[3] = param_5;\n  params[4] = param_4;\n  *(uint8_t *)(params + 7) = param_3;\n  params[6] = param_2;\n  params[5] = param_6;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814e4",
            "calling": [
                "FUN_00080c0c",
                "FUN_000815d4"
            ],
            "imported": false,
            "current_name": "initialize_params_000814e4"
        },
        "FUN_00080d54": {
            "renaming": {
                "FUN_00080d54": "set_values_based_on_flags_00080d54",
                "param_1": "array",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "is_flag_negative",
                "PTR_": "array",
                "DAT_": "value"
            },
            "code": "void set_values_based_on_flags_00080d54(int *PTR_, int DAT_, unsigned int flags) {\n  bool is_flag_negative = (int)(flags << 0x1f) < 0;\n  PTR_[17] = DAT_;\n  if (is_flag_negative) {\n    PTR_[25] = DAT_;\n  }\n  if (!is_flag_negative) {\n    PTR_[24] = DAT_;\n  }\n  bool is_second_flag_set = (flags & 10) != 0;\n  if (is_second_flag_set) {\n    PTR_[8] = DAT_;\n  }\n  if (!is_second_flag_set) {\n    PTR_[9] = DAT_;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    PTR_[32] = DAT_;\n  }\n  PTR_[5] = DAT_;\n  *PTR_ = DAT_;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d54",
            "calling": [
                "FUN_00080da0"
            ],
            "imported": false,
            "current_name": "set_values_based_on_flags_00080d54"
        },
        "FUN_0008021c": {
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "start_index",
                "param_2": "length",
                "iVar1": "index",
                "uVar2": "checksum",
                "cVar3": "bit_index",
                "uVar4": "bit"
            },
            "code": "uint calculate_checksum_0008021c(int start_index, uint length)\n{\n  int index;\n  uint checksum = 0xffff;\n  for (index = start_index; (index - start_index & 0xffU) < length; index++) {\n    checksum = checksum ^ *(byte *)(index + 9);\n    char bit_index = 8;\n    do {\n      uint bit = checksum & 1;\n      checksum = checksum >> 1;\n      if (bit != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bit_index--;\n    } while (bit_index != 0);\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008021c",
            "calling": [
                "FUN_00080258"
            ],
            "imported": false,
            "current_name": "calculate_checksum_0008021c"
        },
        "FUN_00082b38": {
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_00082b38(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********ppppppppbVar29;\n  bool bVar30;\n  longlong lVar31;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar11 = FUN_00083808(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)FUN_0008378c(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082b9e:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082bee;\n        }\n        iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082bee:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar30 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082c12:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        ppppppppbVar29 = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar30 << 6, bVar30 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar30 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_000830ec;\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      ppppppppbVar29 = (byte ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar27 < 0) {\n        bVar30 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar30);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar30 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar30) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      ppppppppbVar29 = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppbVar29 != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)FUN_00082a50(ppppppppbVar29);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)FUN_00084384(ppppppppbVar29,0,local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppbVar29 = (byte ********)PTR_s__null__00083784;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082d78:\n    lVar31 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      ppppppppbVar29 = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082da0;\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          ppppppppbVar29 = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar31 >> 0x20);\n          cVar13 = '\\n';\n          FUN_00084750((int)lVar31,uVar28,10,0);\n          *(char *)ppppppppbVar29 = cVar13 + '0';\n          lVar31 = FUN_00084750((int)lVar31,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n        } while (lVar31 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar23 + '0';\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_0008337e;\n    do {\n      ppppppppbVar29 = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)ppppppppbVar29 = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (byte *******)0x0) {\n    FUN_00082ac0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    ppppppppbVar29 = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)ppppppppbVar29 = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    }\n    else {\n      *(undefined *)((int)ppppppppbVar29 + -1) = 0x30;\n      ppppppppbVar29 = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_000830e8;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00083710;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_000833de;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_000833de;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_DAT_0008370c;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_0008348e:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_000834b4:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_DAT_000833c8;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_000832c6:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)ppppppppbVar29;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_0008345a;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = FUN_00082ac0(param_1,param_2,&local_9c), iVar11 != 0))\n    goto LAB_000833de;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00083282:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_000832aa:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])ppppppppbVar29;\nLAB_0008345a:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_000833cc;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_00083788;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_00083316:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_0008333e:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = FUN_00082ac0(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "called": [
                "FUN_00083b14",
                "FUN_00084750",
                "FUN_00082a50",
                "FUN_0008378c",
                "FUN_00084384",
                "FUN_00083808",
                "FUN_00082ac0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082b38",
            "calling": [
                "FUN_0008378c"
            ],
            "imported": false,
            "current_name": "FUNC_00082b38"
        },
        "FUN_00081e04": {
            "renaming": {
                "FUN_00081e04": "call_function_with_param_00081e04",
                "param_1": "parameter",
                "DAT_00081e10": "function_pointer",
                "*DAT_00081e10": "(*function_pointer)"
            },
            "code": "void call_function_with_param_00081e04(void* DAT_00081e10, undefined4 parameter)\n{\n  DAT_00081e10(parameter);\n  return;\n}",
            "called": [
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e04",
            "calling": [
                "FUN_000815fe",
                "FUN_0008160c"
            ],
            "imported": false,
            "current_name": "call_function_with_param_00081e04"
        },
        "FUN_00084750": {
            "renaming": {
                "FUN_00084750": "check_params_00084750",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "FUN_000847ac": "do_something"
            },
            "code": "int check_params_00084750(int param1, int param2, int param3, int param4)\n{\n  int result = 0;\n  if ((param4 == 0) && (param3 == 0)) {\n    if (param2 != 0 || param1 != 0) {\n      result = -1;\n    }\n    return result;\n  }\n  result = do_something();\n  return result;\n}",
            "called": [
                "FUN_000847ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084750",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "check_params_00084750"
        },
        "FUN_00080ae4": {
            "renaming": {
                "FUN_00080ae4": "initialize_system_00080ae4",
                "puVar1": "time_ms",
                "puVar2": "system_data",
                "iVar3": "system_data_3",
                "iVar4": "system_data_2",
                "iVar5": "system_data_1",
                "iVar6": "system_data_0",
                "DAT_00080be8": "TIME_MS_PTR",
                "FUN_00080e9c": "initialize_time",
                "DAT_00080bec": "SYSTEM_DATA_PTR",
                "FUN_00081d7c": "initialize_network",
                "FUN_00081318": "initialize_something",
                "DAT_00080c00": "SYSTEM_DATA_0",
                "DAT_00080bfc": "SYSTEM_DATA_1",
                "DAT_00080bf8": "SYSTEM_DATA_2",
                "DAT_00080bf4": "SYSTEM_DATA_3",
                "FUN_00080da0": "initialize_something_else",
                "FUN_00080e18": "initialize_something_more",
                "FUN_00080f9c": "initialize_something_final",
                "DAT_00080c08": "SYSTEM_DATA_4",
                "*puVar1": "*time_ms",
                "DAT_00080c04": "SYSTEM_DATA_5",
                "FUN_00081042": "initialize_something_more_else",
                "FUN_00081034": "initialize_something_more_else",
                "FUN_0008106e": "initialize_something_more_else",
                "FUN_00081066": "initialize_something_more_else"
            },
            "code": "void initialize_system_00080ae4(void)\n{\n  uint *time_ms;\n  undefined4 *system_data;\n  int count;\n  int system_data_3;\n  int system_data_2;\n  int system_data_1;\n  int system_data_0;\n\n  time_ms = DAT_00080be8;\n  initialize_time();\n  system_data = DAT_00080bec;\n  system_data[1] = *time_ms / 1000 - 1;\n  *(undefined *)(system_data + 0x23) = 0xf0;\n  system_data[2] = 0;\n  *system_data = 7;\n  initialize_network();\n  count = 0;\n  do {\n    system_data_0 = DAT_00080c00;\n    system_data_1 = DAT_00080bfc;\n    system_data_2 = DAT_00080bf8;\n    system_data_3 = DAT_00080bf4;\n    initialize_something(count, 0);\n    count++;\n  } while (count != 0x4f);\n  *(undefined4 *)(system_data_3 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(system_data_2 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(system_data_0 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(system_data_1 + 0xa0) = 0xffffffff;\n  initialize_something_else(system_data_3, 1, 0x300, 0);\n  initialize_something(0, 1);\n  initialize_something_else(system_data_3, 1, 0xc00, 0);\n  initialize_something_else(system_data_3, 1, 0x3000, 0);\n  initialize_something_else(system_data_1, 2, 0x30, 0);\n  initialize_something_else(system_data_2, 1, 0xc00, 0);\n  initialize_something_else(system_data_3, 1, 3, 0);\n  initialize_something_else(system_data_2, 1, 0xc000, 0);\n  initialize_something_more(0x25);\n  initialize_something_final(DAT_00080c08, *time_ms, DAT_00080c04, 0xc);\n  initialize_something_more_else(DAT_00080c08, 0, 0x300000, 1);\n  initialize_something_more_else(DAT_00080c08, 0, 0);\n  initialize_something_more_else(DAT_00080c08, 0xffffffff);\n  initialize_something_more_else(DAT_00080c08);\n  return;\n}",
            "called": [
                "FUN_0008106e",
                "FUN_00081042",
                "FUN_00080e18",
                "FUN_00081034",
                "FUN_00081066",
                "FUN_00081318",
                "FUN_00080e9c",
                "FUN_00080da0",
                "FUN_00080f9c",
                "FUN_00081d7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ae4",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "initialize_system_00080ae4"
        },
        "FUN_00081d5c": {
            "renaming": {
                "FUN_00081d5c": "add_to_list_00081d5c",
                "param_1": "data",
                "param_2": "index",
                "param_3": "list",
                "puVar1": "current_list",
                "uVar2": "index_plus_one",
                "iVar3": "list_pointer",
                "uVar4": "bit_mask"
            },
            "code": "unsigned int add_to_list_00081d5c(unsigned int data, unsigned int index, unsigned int *list) {\n  unsigned int *current_list = *(unsigned int **)list_pointer;\n  if (current_list == NULL) {\n    current_list = (unsigned int *)(*(int *)list_pointer + 0x14c);\n    *(unsigned int **)(*(int *)list_pointer + 0x148) = current_list;\n  }\n  if (index > 31) {\n    if ((DAT_00083970 == 0) || (current_list = (unsigned int *)allocate_memory(400), current_list == NULL)) {\n      return 0xffffffff;\n    }\n    *current_list = *(unsigned int **)(*(int *)list_pointer + 0x148);\n    current_list[1] = 0;\n    *(unsigned int **)(*(int *)list_pointer + 0x148) = current_list;\n    current_list[0x62] = 0;\n    current_list[99] = 0;\n  }\n  unsigned int bit_mask = 1 << (index & 0xff);\n  current_list[index + 0x22] = data;\n  current_list[0x62] |= bit_mask;\n  current_list[index + 0x42] = 0;\n  current_list[99] |= bit_mask;\n  current_list[1] = index + 1;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d5c",
            "calling": [
                "FUN_00080a68"
            ],
            "imported": false,
            "current_name": "add_to_list_00081d5c"
        },
        "FUN_00082970": {
            "renaming": {
                "FUN_00082970": "processParamAndReturn_00082970",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "ptrToData",
                "iVar2": "result"
            },
            "code": "void processParamAndReturn_00082970(int *output, undefined4 input) {\n  undefined *ptrToData = PTR_DAT_00082990;\n  *(undefined4 *)PTR_DAT_00082990 = 0;\n  int result = findValue(input);\n  if ((result == -1) && (*(int *)ptrToData != 0)) {\n    *output = *(int *)ptrToData;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_0008118c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082970",
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "processParamAndReturn_00082970"
        },
        "FUN_000811be": {
            "renaming": {
                "FUN_000811be": "return_one_000811be"
            },
            "code": "int return_one_000811be() {\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811be",
            "calling": [
                "FUN_000846dc"
            ],
            "imported": false,
            "current_name": "return_one_000811be"
        },
        "FUN_00084a80": {
            "renaming": {
                "FUN_00084a80": "divide_00084a80",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "lVar1": "product",
                "uVar2": "quotient_low",
                "uVar3": "dividend_high_shifted",
                "uVar4": "divisor_low",
                "uVar5": "dividend_shifted",
                "uVar6": "quotient_high",
                "uVar7": "remainder_low",
                "uVar8": "dividend_high_new",
                "uVar9": "quotient_high_new",
                "uVar10": "remainder_high",
                "bVar11": "carry_flag"
            },
            "code": "\nundefined8 divide_00084a80(uint divide_00084a80nd,uint divide_00084a80nd_high,uint divisor,uint divisor_high)\n\n{\n  longlong product;\n  uint quotient_low;\n  uint divide_00084a80nd_high_shifted;\n  uint divisor_low;\n  uint divide_00084a80nd_shifted;\n  uint quotient_high;\n  uint remainder_low;\n  uint divide_00084a80nd_high_new;\n  uint quotient_high_new;\n  uint remainder_high;\n  bool carry_flag;\n  \n  if (divisor_high == 0) {\n    if (divisor <= divide_00084a80nd_high) {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      quotient_high_new = count_leading_zeroes(divisor);\n      if (quotient_high_new == 0) {\n        divide_00084a80nd_high = divide_00084a80nd_high - divisor;\n        quotient_low = divisor >> 0x10;\n        divisor_low = divisor & 0xffff;\n        remainder_low = 1;\n      }\n      else {\n        divisor = divisor << (quotient_high_new & 0xff);\n        divide_00084a80nd_high_shifted = divide_00084a80nd_high >> (0x20 - quotient_high_new & 0xff);\n        quotient_low = divisor >> 0x10;\n        divide_00084a80nd_high_new = divide_00084a80nd_high_shifted / quotient_low;\n        divisor_low = divisor & 0xffff;\n        remainder_low = divisor_low * divide_00084a80nd_high_new;\n        divide_00084a80nd_shifted = divide_00084a80nd >> (0x20 - quotient_high_new & 0xff) | divide_00084a80nd_high << (quotient_high_new & 0xff);\n        divide_00084a80nd_high_shifted = divide_00084a80nd_shifted >> 0x10 | (divide_00084a80nd_high_shifted - quotient_low * divide_00084a80nd_high_new) * 0x10000;\n        divide_00084a80nd = divide_00084a80nd << (quotient_high_new & 0xff);\n        quotient_high_new = divide_00084a80nd_high_new;\n        if (divide_00084a80nd_high_shifted <= remainder_low && remainder_low - divide_00084a80nd_high_shifted != 0) {\n          carry_flag = CARRY4(divide_00084a80nd_high_shifted,divisor);\n          divide_00084a80nd_high_shifted = divide_00084a80nd_high_shifted + divisor;\n          quotient_high_new = divide_00084a80nd_high_new - 1;\n          if ((carry_flag == false) && (divide_00084a80nd_high_shifted <= remainder_low && remainder_low - divide_00084a80nd_high_shifted != 0)) {\n            quotient_high_new = divide_00084a80nd_high_new - 2;\n            divide_00084a80nd_high_shifted = divide_00084a80nd_high_shifted + divisor;\n          }\n        }\n        quotient_high = (divide_00084a80nd_high_shifted - remainder_low) / quotient_low;\n        divide_00084a80nd_high_new = divisor_low * quotient_high;\n        divide_00084a80nd_high = divide_00084a80nd_shifted & 0xffff | ((divide_00084a80nd_high_shifted - remainder_low) - quotient_low * quotient_high) * 0x10000;\n        remainder_low = quotient_high;\n        if (divide_00084a80nd_high <= divide_00084a80nd_high_new && divide_00084a80nd_high_new - divide_00084a80nd_high != 0) {\n          carry_flag = CARRY4(divide_00084a80nd_high,divisor);\n          divide_00084a80nd_high = divide_00084a80nd_high + divisor;\n          remainder_low = quotient_high - 1;\n          if ((carry_flag == false) && (divide_00084a80nd_high <= divide_00084a80nd_high_new && divide_00084a80nd_high_new - divide_00084a80nd_high != 0)) {\n            remainder_low = quotient_high - 2;\n            divide_00084a80nd_high = divide_00084a80nd_high + divisor;\n          }\n        }\n        divide_00084a80nd_high = divide_00084a80nd_high - divide_00084a80nd_high_new;\n        remainder_low = remainder_low | quotient_high_new << 0x10;\n      }\n      divide_00084a80nd_high_new = divide_00084a80nd_high / quotient_low;\n      divide_00084a80nd_high_shifted = divisor_low * divide_00084a80nd_high_new;\n      divide_00084a80nd_shifted = divide_00084a80nd >> 0x10 | (divide_00084a80nd_high - quotient_low * divide_00084a80nd_high_new) * 0x10000;\n      quotient_high_new = divide_00084a80nd_high_new;\n      if (divide_00084a80nd_shifted <= divide_00084a80nd_high_shifted && divide_00084a80nd_high_shifted - divide_00084a80nd_shifted != 0) {\n        carry_flag = CARRY4(divide_00084a80nd_shifted,divisor);\n        divide_00084a80nd_shifted = divide_00084a80nd_shifted + divisor;\n        quotient_high_new = divide_00084a80nd_high_new - 1;\n        if ((carry_flag == false) && (divide_00084a80nd_shifted <= divide_00084a80nd_high_shifted && divide_00084a80nd_high_shifted - divide_00084a80nd_shifted != 0)) {\n          quotient_high_new = divide_00084a80nd_high_new - 2;\n          divide_00084a80nd_shifted = divide_00084a80nd_shifted + divisor;\n        }\n      }\n      divide_00084a80nd_high_new = (divide_00084a80nd_shifted - divide_00084a80nd_high_shifted) / quotient_low;\n      divisor_low = divisor_low * divide_00084a80nd_high_new;\n      divide_00084a80nd_shifted = divide_00084a80nd & 0xffff | ((divide_00084a80nd_shifted - divide_00084a80nd_high_shifted) - quotient_low * divide_00084a80nd_high_new) * 0x10000;\n      quotient_low = divide_00084a80nd_high_new;\n      if (divide_00084a80nd_shifted <= divisor_low && divisor_low - divide_00084a80nd_shifted != 0) {\n        quotient_low = divide_00084a80nd_high_new - 1;\n        if ((CARRY4(divide_00084a80nd_shifted,divisor) == false) &&\n           (divide_00084a80nd_shifted + divisor <= divisor_low && divisor_low - (divide_00084a80nd_shifted + divisor) != 0)) {\n          quotient_low = divide_00084a80nd_high_new - 2;\n        }\n      }\n      return CONCAT44(remainder_low,quotient_low | quotient_high_new << 0x10);\n    }\n    quotient_high_new = count_leading_zeroes(divisor);\n    if (quotient_high_new != 0) {\n      remainder_low = divide_00084a80nd >> (0x20 - quotient_high_new & 0xff);\n      divisor = divisor << (quotient_high_new & 0xff);\n      divide_00084a80nd = divide_00084a80nd << (quotient_high_new & 0xff);\n      divide_00084a80nd_high = remainder_low | divide_00084a80nd_high << (quotient_high_new & 0xff);\n    }\n    remainder_low = divisor >> 0x10;\n    quotient_low = divide_00084a80nd_high / remainder_low;\n    divisor_low = (divisor & 0xffff) * quotient_low;\n    divide_00084a80nd_high_new = divide_00084a80nd >> 0x10 | (divide_00084a80nd_high - remainder_low * quotient_low) * 0x10000;\n    quotient_high_new = quotient_low;\n    if (divide_00084a80nd_high_new <= divisor_low && divisor_low - divide_00084a80nd_high_new != 0) {\n      carry_flag = CARRY4(divide_00084a80nd_high_new,divisor);\n      divide_00084a80nd_high_new = divide_00084a80nd_high_new + divisor;\n      quotient_high_new = quotient_low - 1;\n      if ((carry_flag == false) && (divide_00084a80nd_high_new <= divisor_low && divisor_low - divide_00084a80nd_high_new != 0)) {\n        quotient_high_new = quotient_low - 2;\n        divide_00084a80nd_high_new = divide_00084a80nd_high_new + divisor;\n      }\n    }\n    divide_00084a80nd_shifted = (divide_00084a80nd_high_new - divisor_low) / remainder_low;\n    quotient_low = (divisor & 0xffff) * divide_00084a80nd_shifted;\n    divisor_low = divide_00084a80nd & 0xffff | ((divide_00084a80nd_high_new - divisor_low) - remainder_low * divide_00084a80nd_shifted) * 0x10000;\n    remainder_low = divide_00084a80nd_shifted;\n    if (divisor_low <= quotient_low && quotient_low - divisor_low != 0) {\n      remainder_low = divide_00084a80nd_shifted - 1;\n      if ((CARRY4(divisor_low,divisor) == false) &&\n         (divisor_low + divisor <= quotient_low && quotient_low - (divisor_low + divisor) != 0)) {\n        remainder_low = divide_00084a80nd_shifted - 2;\n      }\n    }\n    quotient_high_new = remainder_low | quotient_high_new << 0x10;\n    remainder_low = 0;\n  }\n  else {\n    if (divide_00084a80nd_high < divisor_high) {\n      return 0;\n    }\n    quotient_high_new = count_leading_zeroes(divisor_high);\n    if (quotient_high_new == 0) {\n      if ((divisor_high < divide_00084a80nd_high) || (remainder_low = quotient_high_new, divisor <= divide_00084a80nd)) {\n        return 1;\n      }\n    }\n    else {\n      quotient_low = 0x20 - quotient_high_new;\n      remainder_low = divide_00084a80nd_high >> (quotient_low & 0xff);\n      divisor_low = divisor_high << (quotient_high_new & 0xff) | divisor >> (quotient_low & 0xff);\n      divide_00084a80nd_high_new = divisor_low >> 0x10;\n      quotient_high = remainder_low / divide_00084a80nd_high_new;\n      divide_00084a80nd_shifted = (divisor_low & 0xffff) * quotient_high;\n      divide_00084a80nd_high_shifted = divide_00084a80nd >> (quotient_low & 0xff) | divide_00084a80nd_high << (quotient_high_new & 0xff);\n      quotient_low = divide_00084a80nd_high_shifted >> 0x10 | (remainder_low - divide_00084a80nd_high_new * quotient_high) * 0x10000;\n      remainder_low = quotient_high;\n      if (quotient_low <= divide_00084a80nd_shifted && divide_00084a80nd_shifted - quotient_low != 0) {\n        carry_flag = CARRY4(quotient_low,divisor_low);\n        quotient_low = quotient_low + divisor_low;\n        remainder_low = quotient_high - 1;\n        if ((carry_flag == false) && (quotient_low <= divide_00084a80nd_shifted && divide_00084a80nd_shifted - quotient_low != 0)) {\n          remainder_low = quotient_high - 2;\n          quotient_low = quotient_low + divisor_low;\n        }\n      }\n      quotient_high = (quotient_low - divide_00084a80nd_shifted) / divide_00084a80nd_high_new;\n      remainder_high = (divisor_low & 0xffff) * quotient_high;\n      divide_00084a80nd_high_new = divide_00084a80nd_high_shifted & 0xffff | ((quotient_low - divide_00084a80nd_shifted) - divide_00084a80nd_high_new * quotient_high) * 0x10000;\n      quotient_low = quotient_high;\n      if (divide_00084a80nd_high_new <= remainder_high && remainder_high - divide_00084a80nd_high_new != 0) {\n        carry_flag = CARRY4(divide_00084a80nd_high_new,divisor_low);\n        divide_00084a80nd_high_new = divide_00084a80nd_high_new + divisor_low;\n        quotient_low = quotient_high - 1;\n        if ((carry_flag == false) && (divide_00084a80nd_high_new <= remainder_high && remainder_high - divide_00084a80nd_high_new != 0)) {\n          quotient_low = quotient_high - 2;\n          divide_00084a80nd_high_new = divide_00084a80nd_high_new + divisor_low;\n        }\n      }\n      quotient_low = quotient_low | remainder_low << 0x10;\n      product = (ulonglong)quotient_low * (ulonglong)(divisor << (quotient_high_new & 0xff));\n      remainder_low = (uint)((ulonglong)product >> 0x20);\n      if ((divide_00084a80nd_high_new - remainder_high < remainder_low) ||\n         ((divide_00084a80nd_high_new - remainder_high == remainder_low && (divide_00084a80nd << (quotient_high_new & 0xff) < (uint)product)))) {\n        quotient_high_new = quotient_low - 1;\n        remainder_low = 0;\n      }\n      else {\n        quotient_high_new = quotient_low;\n        remainder_low = 0;\n      }\n    }\n  }\n  return CONCAT44(remainder_low,quotient_high_new);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084a80",
            "calling": [
                "FUN_000847ac"
            ],
            "imported": false,
            "current_name": "divide_00084a80"
        },
        "FUN_00081c54": {
            "renaming": {
                "FUN_00081c54": "copy_values_00081c54",
                "param_1": "destination",
                "param_2": "source",
                "FUN_00081c5c": "memcpy",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void copy_values_00081c54(void *destination, void *source)\n{\n  memcpy(destination, source, sizeof(source));\n  return;\n}",
            "called": [
                "FUN_00081c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c54",
            "calling": [
                "FUN_00081ca8"
            ],
            "imported": false,
            "current_name": "copy_values_00081c54"
        },
        "FUN_0008163a": {
            "renaming": {
                "FUN_0008163a": "check_if_param_valid_0008163a",
                "param_1": "param_array",
                "param_2": "param_value",
                "*param_1": "first_param",
                "(uint)param_1[1]": "second_param",
                "iVar1": "result",
                "param_1[2]": "third_param",
                "return 1": "return is_valid",
                "return 0": "is_valid = 0"
            },
            "code": "int check_if_param_valid_0008163a(int *param_array, uint param_value)\n{\n  int is_valid = 1;\n  int first_param = *param_array;\n  uint second_param = (uint)param_array[1];\n  int third_param = param_array[2];\n  \n  if ((first_param == 0) || (second_param < param_value)) {\n    int result = FUN_00081622(param_array);\n    if (result == 0) {\n      is_valid = 0;\n    }\n    if (third_param == 0) {\n      *(undefined *)*param_array = 0;\n    }\n  }\n  \n  return is_valid;\n}",
            "called": [
                "FUN_00081622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008163a",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "check_if_param_valid_0008163a"
        },
        "FUN_000825a0": {
            "renaming": {
                "FUN_000825a0": "execute_func_with_data_000825a0",
                "param_1": "param_1",
                "param_2": "param_2",
                "DAT_000825ac": "data",
                "FUN_000825b0": "call_func"
            },
            "code": "void execute_func_with_data_000825a0(int* DAT_000825ac, int param_1, int param_2){\n  call_func(*DAT_000825ac, param_1, param_2);\n  return;\n}",
            "called": [
                "FUN_000825b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825a0",
            "calling": [
                "FUN_00081622"
            ],
            "imported": false,
            "current_name": "execute_func_with_data_000825a0"
        },
        "FUN_000815d4": {
            "renaming": {
                "FUN_000815d4": "set_pointer_and_value_000815d4",
                "param_1": "pointer_array",
                "param_2": "parameter_value",
                "*param_1": "*pointer_array",
                "PTR_PTR_FUN_00081454_1_000815f4": "PTR_PTR_INITIAL_VALUE"
            },
            "code": "undefined4* set_pointer_and_value_000815d4(undefined4* pointer_array, undefined4 parameter_value) {\n                      initialize_pointer_array();\n                      *pointer_array = PTR_PTR_FUN_00081454_1_000815f4;\n                      pointer_array[9] = parameter_value;\n                      return pointer_array;\n                  }",
            "called": [
                "FUN_000814e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815d4",
            "calling": [
                "FUN_00080c0c"
            ],
            "imported": false,
            "current_name": "set_pointer_and_value_000815d4"
        },
        "FUN_00081e14": {
            "renaming": {
                "FUN_00081e14": "improved_function_00081e14",
                "param_1": "input_array",
                "param_2": "input_size",
                "uVar1": "temp_1",
                "puVar2": "temp_ptr_1",
                "puVar3": "temp_ptr_2",
                "iVar4": "temp_2",
                "uVar5": "temp_3",
                "uVar6": "temp_4",
                "iVar7": "temp_5",
                "uVar8": "temp_6",
                "iVar9": "temp_7",
                "piVar10": "temp_ptr_3",
                "uVar11": "temp_8",
                "iVar12": "temp_9",
                "iVar13": "temp_10",
                "piVar14": "temp_ptr_4",
                "uVar15": "temp_11",
                "piVar16": "temp_ptr_5",
                "uVar17": "temp_12",
                "uVar18": "temp_13"
            },
            "code": "\nint * improved_function_00081e14(undefined4 *input_array,uint input_size)\n\n{\n  uint temp_1;\n  uint *temp_ptr_1;\n  undefined *temp_ptr_2;\n  int temp_2;\n  uint temp_3;\n  uint temp_4;\n  int temp_5;\n  uint temp_6;\n  int temp_7;\n  int *temp_ptr_3;\n  uint temp_8;\n  int temp_9;\n  int temp_10;\n  int *temp_ptr_4;\n  uint temp_11;\n  int *temp_ptr_5;\n  uint temp_12;\n  uint temp_13;\n  \n  if (input_size + 0xb < 0x17) {\n    temp_11 = 0x10;\n    if (0x10 < input_size) goto LAB_00081e7a;\n  }\n  else {\n    temp_11 = input_size + 0xb & 0xfffffff8;\n    if (((int)temp_11 < 0) || (temp_11 < input_size)) {\nLAB_00081e7a:\n      *input_array = 0xc;\n      return (int *)0x0;\n    }\n  }\n  do_nothing_00082598(input_array);\n  temp_1 = DAT_00082140;\n  if (temp_11 < 0x1f8) {\n    temp_10 = *(int *)(DAT_00082140 + temp_11 + 0xc);\n    if ((temp_10 != DAT_00082140 + temp_11) ||\n       (temp_2 = temp_10 + 8, temp_10 = *(int *)(temp_10 + 0x14), temp_2 != temp_10)) {\n      temp_5 = *(int *)(temp_10 + 0xc);\n      temp_7 = (*(uint *)(temp_10 + 4) & 0xfffffffc) + temp_10;\n      temp_11 = *(uint *)(temp_7 + 4);\n      temp_2 = *(int *)(temp_10 + 8);\n      *(int *)(temp_2 + 0xc) = temp_5;\n      *(int *)(temp_5 + 8) = temp_2;\n      *(uint *)(temp_7 + 4) = temp_11 | 1;\n      do_nothing_0008259c(input_array);\n      return (int *)(temp_10 + 8);\n    }\n    temp_13 = (temp_11 >> 3) + 2;\n  }\n  else {\n    temp_13 = temp_11 >> 9;\n    if (temp_13 == 0) {\n      temp_2 = 0x7e;\n      temp_10 = 0x3f;\n    }\n    else if (temp_13 < 5) {\n      temp_10 = (temp_11 >> 6) + 0x38;\n      temp_2 = temp_10 * 2;\n    }\n    else if (temp_13 < 0x15) {\n      temp_10 = temp_13 + 0x5b;\n      temp_2 = temp_10 * 2;\n    }\n    else if (temp_13 < 0x55) {\n      temp_10 = (temp_11 >> 0xc) + 0x6e;\n      temp_2 = temp_10 * 2;\n    }\n    else if (temp_13 < 0x155) {\n      temp_10 = (temp_11 >> 0xf) + 0x77;\n      temp_2 = temp_10 * 2;\n    }\n    else if (temp_13 < 0x555) {\n      temp_10 = (temp_11 >> 0x12) + 0x7c;\n      temp_2 = temp_10 * 2;\n    }\n    else {\n      temp_2 = 0xfc;\n      temp_10 = 0x7e;\n    }\n    temp_5 = DAT_00082140 + temp_2 * 4;\n    for (temp_2 = *(int *)(temp_5 + 0xc); temp_5 != temp_2; temp_2 = *(int *)(temp_2 + 0xc)) {\n      temp_13 = *(uint *)(temp_2 + 4) & 0xfffffffc;\n      temp_7 = temp_13 - temp_11;\n      if (0xf < temp_7) {\n        temp_10 = temp_10 + -1;\n        break;\n      }\n      if (-1 < temp_7) {\n        temp_5 = temp_13 + temp_2;\n        temp_11 = *(uint *)(temp_5 + 4);\n        temp_7 = *(int *)(temp_2 + 0xc);\n        temp_10 = *(int *)(temp_2 + 8);\n        *(int *)(temp_10 + 0xc) = temp_7;\n        *(int *)(temp_7 + 8) = temp_10;\n        *(uint *)(temp_5 + 4) = temp_11 | 1;\n        do_nothing_0008259c(input_array);\n        return (int *)(temp_2 + 8);\n      }\n    }\n    temp_13 = temp_10 + 1;\n  }\n  temp_10 = *(int *)(DAT_00082140 + 0x10);\n  temp_2 = DAT_00082140 + 8;\n  if (temp_10 == temp_2) {\n    temp_3 = *(uint *)(DAT_00082140 + 4);\n  }\n  else {\n    temp_3 = *(uint *)(temp_10 + 4);\n    temp_4 = temp_3 & 0xfffffffc;\n    temp_6 = temp_4 - temp_11;\n    if (0xf < (int)temp_6) {\n      temp_5 = temp_11 + temp_10;\n      *(uint *)(temp_10 + 4) = temp_11 | 1;\n      *(int *)(temp_1 + 0x14) = temp_5;\n      *(int *)(temp_1 + 0x10) = temp_5;\n      *(int *)(temp_5 + 0xc) = temp_2;\n      *(int *)(temp_5 + 8) = temp_2;\n      *(uint *)(temp_5 + 4) = temp_6 | 1;\n      *(uint *)(temp_5 + temp_6) = temp_6;\n      do_nothing_0008259c(input_array);\n      return (int *)(temp_10 + 8);\n    }\n    *(int *)(DAT_00082140 + 0x14) = temp_2;\n    *(int *)(temp_1 + 0x10) = temp_2;\n    if (-1 < (int)temp_6) {\n      *(uint *)(temp_4 + temp_10 + 4) = *(uint *)(temp_4 + temp_10 + 4) | 1;\n      do_nothing_0008259c(input_array);\n      return (int *)(temp_10 + 8);\n    }\n    if (temp_4 < 0x200) {\n      temp_7 = temp_1 + (temp_3 & 0xfffffff8);\n      temp_5 = *(int *)(temp_7 + 8);\n      temp_3 = 1 << ((int)(temp_3 >> 3) >> 2 & 0xffU) | *(uint *)(temp_1 + 4);\n      *(int *)(temp_10 + 8) = temp_5;\n      *(int *)(temp_10 + 0xc) = temp_7;\n      *(uint *)(temp_1 + 4) = temp_3;\n      *(int *)(temp_7 + 8) = temp_10;\n      *(int *)(temp_5 + 0xc) = temp_10;\n    }\n    else {\n      temp_6 = temp_3 >> 9;\n      if (temp_6 < 5) {\n        temp_7 = (temp_3 >> 6) + 0x38;\n        temp_5 = temp_7 * 2;\n      }\n      else if (temp_6 < 0x15) {\n        temp_7 = temp_6 + 0x5b;\n        temp_5 = temp_7 * 2;\n      }\n      else if (temp_6 < 0x55) {\n        temp_7 = (temp_3 >> 0xc) + 0x6e;\n        temp_5 = temp_7 * 2;\n      }\n      else if (temp_6 < 0x155) {\n        temp_7 = (temp_3 >> 0xf) + 0x77;\n        temp_5 = temp_7 * 2;\n      }\n      else if (temp_6 < 0x555) {\n        temp_7 = (temp_3 >> 0x12) + 0x7c;\n        temp_5 = temp_7 * 2;\n      }\n      else {\n        temp_5 = 0xfc;\n        temp_7 = 0x7e;\n      }\n      temp_5 = temp_1 + temp_5 * 4;\n      temp_9 = *(int *)(temp_5 + 8);\n      if (temp_9 == temp_5) {\n        temp_3 = *(uint *)(DAT_00082348 + 4) | 1 << (temp_7 >> 2 & 0xffU);\n        *(uint *)(DAT_00082348 + 4) = temp_3;\n        temp_7 = temp_9;\n      }\n      else {\n        do {\n          temp_7 = temp_9;\n          if ((*(uint *)(temp_9 + 4) & 0xfffffffc) <= temp_4) break;\n          temp_9 = *(int *)(temp_9 + 8);\n          temp_7 = temp_9;\n        } while (temp_5 != temp_9);\n        temp_9 = *(int *)(temp_7 + 0xc);\n        temp_3 = *(uint *)(temp_1 + 4);\n      }\n      *(int *)(temp_10 + 0xc) = temp_9;\n      *(int *)(temp_10 + 8) = temp_7;\n      *(int *)(temp_9 + 8) = temp_10;\n      *(int *)(temp_7 + 0xc) = temp_10;\n    }\n  }\n  temp_4 = 1 << ((int)temp_13 >> 2 & 0xffU);\n  if (temp_4 <= temp_3) {\n    if ((temp_3 & temp_4) == 0) {\n      temp_13 = temp_13 & 0xfffffffc;\n      do {\n        temp_4 = temp_4 << 1;\n        temp_13 = temp_13 + 4;\n      } while ((temp_3 & temp_4) == 0);\n    }\n    do {\n      temp_ptr_5 = (int *)(temp_1 + temp_13 * 8);\n      temp_ptr_4 = temp_ptr_5;\n      temp_3 = temp_13;\n      do {\n        for (temp_ptr_3 = (int *)temp_ptr_4[3]; temp_ptr_4 != temp_ptr_3; temp_ptr_3 = (int *)temp_ptr_3[3]) {\n          temp_6 = temp_ptr_3[1] & 0xfffffffc;\n          temp_12 = temp_6 - temp_11;\n          if (0xf < (int)temp_12) {\n            temp_7 = temp_ptr_3[2];\n            temp_10 = temp_ptr_3[3];\n            temp_5 = temp_11 + (int)temp_ptr_3;\n            temp_ptr_3[1] = temp_11 | 1;\n            *(int *)(temp_7 + 0xc) = temp_10;\n            *(int *)(temp_10 + 8) = temp_7;\n            *(int *)(temp_1 + 0x14) = temp_5;\n            *(int *)(temp_1 + 0x10) = temp_5;\n            *(int *)(temp_5 + 0xc) = temp_2;\n            *(int *)(temp_5 + 8) = temp_2;\n            *(uint *)(temp_5 + 4) = temp_12 | 1;\n            *(uint *)(temp_5 + temp_12) = temp_12;\n            do_nothing_0008259c(input_array);\n            return temp_ptr_3 + 2;\n          }\n          if (-1 < (int)temp_12) {\n            temp_10 = temp_ptr_3[2];\n            temp_2 = temp_ptr_3[3];\n            *(uint *)((int)temp_ptr_3 + temp_6 + 4) = *(uint *)((int)temp_ptr_3 + temp_6 + 4) | 1;\n            *(int *)(temp_10 + 0xc) = temp_2;\n            *(int *)(temp_2 + 8) = temp_10;\n            do_nothing_0008259c(input_array);\n            return temp_ptr_3 + 2;\n          }\n        }\n        temp_3 = temp_3 + 1;\n        temp_ptr_4 = temp_ptr_4 + 2;\n      } while ((temp_3 & 3) != 0);\n      do {\n        temp_6 = temp_13 & 3;\n        temp_ptr_4 = temp_ptr_5 + -2;\n        temp_13 = temp_13 - 1;\n        if (temp_6 == 0) {\n          temp_6 = *(uint *)(temp_1 + 4) & ~temp_4;\n          *(uint *)(temp_1 + 4) = temp_6;\n          goto LAB_00082262;\n        }\n        temp_ptr_5 = (int *)*temp_ptr_5;\n      } while (temp_ptr_5 == temp_ptr_4);\n      temp_6 = *(uint *)(temp_1 + 4);\nLAB_00082262:\n      temp_4 = temp_4 * 2;\n      if ((temp_6 <= temp_4 && temp_4 - temp_6 != 0) || (temp_13 = temp_3, temp_4 == 0)) break;\n      for (; (temp_6 & temp_4) == 0; temp_4 = temp_4 << 1) {\n        temp_13 = temp_13 + 4;\n      }\n    } while( true );\n  }\n  temp_ptr_1 = DAT_00082148;\n  temp_13 = *(uint *)(temp_1 + 8);\n  temp_3 = *(uint *)(temp_13 + 4) & 0xfffffffc;\n  if ((temp_11 <= temp_3) && (temp_6 = temp_3 - temp_11, temp_4 = temp_13, 0xf < (int)temp_6))\n  goto LAB_0008211e;\n  temp_6 = temp_13 + temp_3;\n  if (*DAT_00082148 == 0xffffffff) {\n    temp_12 = temp_11 + *(int *)PTR_DAT_00082144 + 0x10;\n  }\n  else {\n    temp_12 = temp_11 + *(int *)PTR_DAT_00082144 + 0x100f & 0xfffff000;\n  }\n  temp_4 = FUN_00082970(input_array,temp_12);\n  temp_ptr_2 = PTR_DAT_00082154;\n  if ((temp_4 == 0xffffffff) || ((temp_4 < temp_6 && (temp_13 != temp_1)))) {\n    temp_4 = *(uint *)(temp_1 + 8);\n    temp_13 = *(uint *)(temp_4 + 4) & 0xfffffffc;\n  }\n  else {\n    temp_8 = *(int *)PTR_DAT_00082154 + temp_12;\n    *(uint *)PTR_DAT_00082154 = temp_8;\n    if ((temp_6 == temp_4) && ((temp_6 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(temp_1 + 8) + 4) = temp_12 + temp_3 | 1;\n    }\n    else {\n      if (*temp_ptr_1 == 0xffffffff) {\n        *DAT_00082148 = temp_4;\n      }\n      else {\n        *(uint *)temp_ptr_2 = temp_8 + (temp_4 - temp_6);\n      }\n      temp_6 = temp_4 & 7;\n      if (temp_6 == 0) {\n        temp_10 = 0x1000;\n      }\n      else {\n        temp_4 = temp_4 + (8 - temp_6);\n        temp_10 = 0x1008 - temp_6;\n      }\n      temp_10 = temp_10 - (temp_12 + temp_4 & 0xfff);\n      temp_2 = FUN_00082970(input_array,temp_10);\n      if (temp_2 == -1) {\n        temp_6 = 1;\n        temp_10 = 0;\n      }\n      else {\n        temp_6 = (temp_2 - temp_4) + temp_10 | 1;\n      }\n      temp_8 = *(int *)temp_ptr_2 + temp_10;\n      *(uint *)(temp_1 + 8) = temp_4;\n      *(uint *)temp_ptr_2 = temp_8;\n      *(uint *)(temp_4 + 4) = temp_6;\n      temp_ptr_2 = PTR_DAT_00082154;\n      if (temp_13 != temp_1) {\n        if (temp_3 < 0x10) {\n          *(undefined4 *)(temp_4 + 4) = 1;\n          temp_13 = 0;\n          goto LAB_00082108;\n        }\n        temp_3 = temp_3 - 0xc & 0xfffffff8;\n        *(uint *)(temp_13 + 4) = temp_3 | *(uint *)(temp_13 + 4) & 1;\n        *(undefined4 *)(temp_13 + temp_3 + 4) = 5;\n        *(undefined4 *)(temp_13 + temp_3 + 8) = 5;\n        if (0xf < temp_3) {\n          FUN_00083d9c(input_array,temp_13 + 8);\n          temp_8 = *(uint *)temp_ptr_2;\n        }\n      }\n    }\n    temp_4 = *(uint *)(temp_1 + 8);\n    if (*(uint *)PTR_DAT_0008214c < temp_8) {\n      *(uint *)PTR_DAT_0008214c = temp_8;\n    }\n    if (*(uint *)PTR_DAT_00082150 < temp_8) {\n      *(uint *)PTR_DAT_00082150 = temp_8;\n    }\n    temp_13 = *(uint *)(temp_4 + 4) & 0xfffffffc;\n  }\nLAB_00082108:\n  temp_6 = temp_13 - temp_11;\n  if ((temp_13 < temp_11) || ((int)temp_6 < 0x10)) {\n    do_nothing_0008259c(input_array);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  *(uint *)(temp_4 + 4) = temp_11 | 1;\n  *(uint *)(temp_1 + 8) = temp_11 + temp_4;\n  *(uint *)(temp_11 + temp_4 + 4) = temp_6 | 1;\n  do_nothing_0008259c(input_array);\n  return (int *)(temp_4 + 8);\n}\n\n",
            "called": [
                "FUN_00082598",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082970"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e14",
            "calling": [
                "FUN_00083f34",
                "FUN_000825b0",
                "FUN_000842a4",
                "FUN_00081df4"
            ],
            "imported": false,
            "current_name": "improved_function_00081e14"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "process_data_00080164",
                "param_1": "data",
                "puVar1": "ptr_to_data",
                "iVar2": "result",
                "PTR_DAT_000801ac": "ptr_to_data",
                "process_byte": "FUN_00081210",
                "process_undefined": "FUN_00081318"
            },
            "code": "void process_data_00080164(int **data)\n{\n    undefined *PTR_DAT_000801ac = PTR_DAT_000801ac;\n    *data = (int *)PTR_DAT_000801ac;\n    (**(code **)(*(int *)PTR_DAT_000801ac + 0x18))(PTR_DAT_000801ac);\n    if (1 < *(byte *)((int)data + 6)) {\n        process_byte(*(byte *)((int)data + 6),1);\n        process_undefined(*(undefined *)((int)data + 6),0);\n    }\n    do {\n        int result = (**(code **)(**data + 0xc))();\n    } while (-1 < result);\n    *(undefined *)((int)data + 0x49) = 0;\n    *(undefined *)((int)data + 0x4a) = 0;\n    *(undefined2 *)(data + 0x15) = 0;\n    *(undefined2 *)((int)data + 0x52) = 0;\n    *(undefined2 *)(data + 0x14) = 0;\n    return;\n}",
            "called": [
                "FUN_00081318",
                "FUN_00081210"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "FUN_000804a8"
            ],
            "imported": false,
            "current_name": "process_data_00080164"
        },
        "FUN_000811cc": {
            "renaming": {
                "FUN_000811cc": "write_bytes_to_memory_000811cc",
                "param_1": "memory_location",
                "param_2": "byte_array_offset",
                "param_3": "num_bytes_to_write",
                "iVar1": "byte_offset"
            },
            "code": "uint write_bytes_to_memory_000811cc(uint memory_location, int byte_array_offset, uint num_bytes_to_write)\n{\n  int byte_offset;\n  for (byte_offset = 0; byte_offset < (int)num_bytes_to_write; byte_offset++) {\n    do {\n    } while (-1 < *(int *)(DAT_000811ec + 0x14) << 0x1e);\n    *(uint *)(DAT_000811ec + 0x1c) = (uint)*(byte *)(byte_array_offset + byte_offset);\n  }\n  return num_bytes_to_write & ~((int)num_bytes_to_write >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811cc",
            "calling": [
                "FUN_00084464"
            ],
            "imported": false,
            "current_name": "write_bytes_to_memory_000811cc"
        },
        "FUN_000846dc": {
            "renaming": {
                "FUN_000846dc": "get_value_or_zero_if_not_found_000846dc",
                "param_1": "output_value",
                "param_2": "input_value",
                "puVar1": "data_pointer",
                "iVar2": "search_result"
            },
            "code": "void get_value_or_zero_if_not_found_000846dc(int *output_value, undefined4 input_value) {\n  undefined *data_pointer = PTR_DAT_000846fc;\n  *(undefined4 *)PTR_DAT_000846fc = 0;\n  int search_result = FUN_000811be(input_value);\n  if ((search_result == -1) && (*(int *)data_pointer != 0)) {\n    *output_value = *(int *)data_pointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846dc",
            "calling": [
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "get_value_or_zero_if_not_found_000846dc"
        },
        "FUN_00081894": {
            "renaming": {
                "FUN_00081894": "calculate_00081894",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "iVar3": "constant",
                "uVar4": "carry",
                "shifted_input": "shifted_input",
                "result": "result"
            },
            "code": "uint calculate_00081894(uint input)\n{\n  int leading_zeroes = count_leading_zeroes(input);\n  int shift_amount = leading_zeroes - 8;\n  int constant = shift_amount * -0x800000 + 0x4a800000;\n  uint result;\n  if (leading_zeroes > 7) {\n    uint shifted_input = input << (shift_amount & 0xff);\n    uint carry = (shifted_input >> 0x1f) + (uint)(0x7fffffff < (0 << (shift_amount & 0xff)));\n    result = constant + shifted_input + (0U >> (0x20 - shift_amount & 0xff)) + carry;\n    if ((0 << (shift_amount & 0xff)) == 0x80000000) {\n      result &= 0xfffffffe;\n    }\n  }\n  else {\n    uint shifted_input = input << (leading_zeroes + 0x18U & 0xff);\n    uint carry = ((int)shifted_input >> 0x1f) - (input >> (0x20 - (leading_zeroes + 0x18U) & 0xff));\n    result = constant + carry;\n    if ((shifted_input & 0x7fffffff) == 0) {\n      result &= ~(shifted_input >> 0x1f);\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081894",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "calculate_00081894"
        },
        "FUN_000845bc": {
            "renaming": {
                "FUN_000845bc": "write_byte_or_error_000845bc",
                "param_1": "error_code",
                "param_2": "buffer",
                "param_3": "byte_value",
                "undefined4": "int",
                "undefined": "unsigned char",
                "*param_1": "*error_code",
                "*param_2": "*buffer",
                "(undefined *)0x0": "NULL",
                "0x100": "256",
                "(char)param_3": "(char)byte_value",
                "0xffffffff": "-1"
            },
            "code": "int write_byte_or_error_000845bc(int* error_code, unsigned char* buffer, uint byte_value){\n  if (buffer == NULL) {\n    return 0;\n  }\n  if (byte_value < 256) {\n    *buffer = (char)byte_value;\n    return 1;\n  }\n  *error_code = 138;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845bc",
            "calling": [
                "FUN_0008456c"
            ],
            "imported": false,
            "current_name": "write_byte_or_error_000845bc"
        },
        "FUN_00085858": {
            "renaming": {
                "FUN_00085858": "do_nothing_00085858"
            },
            "code": "\nvoid do_nothing_00085858(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085858",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "do_nothing_00085858"
        },
        "FUN_00082504": {
            "renaming": {
                "FUN_00082504": "fill_buffer_with_value_00082504",
                "param_1": "buffer",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "current_address",
                "puVar2": "aligned_address",
                "uVar3": "value_to_fill",
                "uVar4": "remaining_size",
                "bVar5": "is_aligned"
            },
            "code": "void fill_buffer_with_value_00082504(uint32_t *buffer, uint8_t value, uint32_t size)\n{\n    uint32_t *current_address;\n    uint32_t *aligned_address;\n    uint32_t value_to_fill;\n    uint32_t remaining_size;\n    bool is_aligned = ((uint32_t)buffer & 3) == 0;\n\n    if (!is_aligned)\n    {\n        remaining_size = size - 1;\n        if (remaining_size == 0)\n        {\n            return;\n        }\n        current_address = buffer;\n        while (true)\n        {\n            *current_address = value;\n            current_address++;\n            is_aligned = ((uint32_t)current_address & 3) == 0;\n            remaining_size--;\n            if (remaining_size == 0)\n            {\n                return;\n            }\n            if (is_aligned)\n            {\n                break;\n            }\n        }\n    }\n\n    value_to_fill = (value << 24) | (value << 16) | (value << 8) | value;\n    aligned_address = is_aligned ? buffer : current_address;\n    remaining_size = size & 0xFFFFFFF0;\n    while (remaining_size > 0)\n    {\n        *aligned_address = value_to_fill;\n        *(aligned_address + 1) = value_to_fill;\n        *(aligned_address + 2) = value_to_fill;\n        *(aligned_address + 3) = value_to_fill;\n        aligned_address += 4;\n        remaining_size -= 16;\n    }\n\n    remaining_size = size & 3;\n    if (remaining_size != 0)\n    {\n        current_address = aligned_address;\n        while (remaining_size > 0)\n        {\n            *current_address = value;\n            current_address++;\n            remaining_size--;\n        }\n    }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082504",
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "imported": false,
            "current_name": "fill_buffer_with_value_00082504"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "check_if_initialized_000800f4",
                "param_1": "param",
                "*PTR_DAT_0008010c": "*PTR_DATA",
                "DAT_00080110": "DATA_FLAG",
                "DAT_00080114": "DATA_VALUE"
            },
            "code": "int check_if_initialized_000800f4(int param) {\n    if (*PTR_DAT_0008010c == '\\0') {\n        if (DAT_00080110 != 0) {\n            param = DAT_00080114;\n        }\n        *PTR_DAT_0008010c = 1;\n    }\n    return param;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [],
            "imported": false,
            "current_name": "check_if_initialized_000800f4"
        },
        "FUN_0008378c": {
            "renaming": {
                "FUN_0008378c": "process_data_0008378c",
                "param_1": "data",
                "param_2": "data_size",
                "iVar1": "result",
                "iVar2": "status",
                "local_488": "buffer_ptrs",
                "local_480": "buffer_size",
                "local_47c": "flags",
                "local_47a": "flag_mask",
                "local_478": "buffer",
                "local_474": "buffer_ptr_1",
                "local_470": "buffer_ptr_2",
                "local_46c": "buffer_ptr_3",
                "local_464": "buffer_ptr_4",
                "local_424": "stack_buffer",
                "auStack_420": "stack_buffer"
            },
            "code": "int process_data_0008378c(undefined4 data, int data_size)\n{\n  int result;\n  int status;\n  undefined *buffer_ptrs[2];\n  undefined4 buffer_size;\n  ushort flags;\n  undefined2 flag_mask;\n  undefined *buffer;\n  undefined4 buffer_ptr_1;\n  undefined4 buffer_ptr_2;\n  undefined4 buffer_ptr_3;\n  undefined4 buffer_ptr_4;\n  undefined stack_buffer[1024];\n  buffer_ptrs[0] = stack_buffer;\n  flags = *(ushort *)(data_size + 0xc) & 0xfffd;\n  buffer_size = 0x400;\n  buffer_ptr_1 = 0x400;\n  buffer_ptr_2 = 0;\n  buffer_ptr_3 = *(undefined4 *)(data_size + 0x1c);\n  buffer_ptr_4 = *(undefined4 *)(data_size + 0x24);\n  buffer = buffer_ptrs[0];\n  result = get_data(data, buffer_ptrs);\n  if ((result >= 0) && (status = process_data_0008378c(buffer_ptrs), status != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)flags << 0x19) < 0) {\n    *(ushort *)(data_size + 0xc) = *(ushort *)(data_size + 0xc) | 0x40;\n  }\n  return result;\n}\n",
            "called": [
                "FUN_00082b38",
                "FUN_00083adc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008378c",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "process_data_0008378c"
        },
        "FUN_00083adc": {
            "renaming": {
                "FUN_00083adc": "decompress_00083adc",
                "param_1": "input_buffer",
                "param_2": "output_buffer",
                "piVar1": "current_output_position",
                "iVar2": "current_input_position",
                "uVar3": "flags",
                "uVar4": "length",
                "iVar5": "bytes_written",
                "pcVar6": "decompressor",
                "unaff_r4": "result",
                "iVar7": "input_length"
            },
            "code": "undefined4 decompress_00083adc(int *input_buffer, int *output_buffer)\n{\n  int *current_output_position;\n  int *current_input_position;\n  ushort flags;\n  uint length;\n  int bytes_written;\n  code *decompress_00083adcor;\n  undefined4 result;\n  int input_length;\n  \n  if ((input_buffer != (int *)0x0) && (input_buffer[0xe] == 0)) {\n    initialize();\n  }\n  if (*(short *)(output_buffer + 3) == 0) {\n    return 0;\n  }\n  flags = *(ushort *)(output_buffer + 3);\n  if ((int)((uint)flags << 0x1c) < 0) {\n    int *current_output_position = output_buffer;\n    int *current_input_position = input_buffer;\n    int uncompressed_length = output_buffer[4];\n    if (uncompressed_length == 0) {\n      return 0;\n    }\n    int compressed_length = *output_buffer;\n    int uncompressed_offset = (flags & 3) == 0 ? output_buffer[5] : 0;\n    *output_buffer = uncompressed_length;\n    compressed_length = compressed_length - uncompressed_length;\n    output_buffer[2] = uncompressed_offset;\n    do {\n      if (compressed_length < 1) {\n        return 0;\n      }\n      bytes_written = (*(code *)output_buffer[9])(input_buffer,output_buffer[7],uncompressed_length,compressed_length,result);\n      compressed_length = compressed_length - bytes_written;\n      uncompressed_length = uncompressed_length + bytes_written;\n    } while (0 < bytes_written);\n    *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(output_buffer + 3) = flags | 0x800;\n  if ((output_buffer[1] < 1) && (output_buffer[0xf] < 1)) {\n    return 0;\n  }\n  decompress_00083adcor = (code *)output_buffer[10];\n  if (decompress_00083adcor == (code *)0x0) {\n    return 0;\n  }\n  length = (uint)(flags | 0x800);\n  input_length = *input_buffer;\n  *input_buffer = 0;\n  if ((flags & 0x1000) == 0) {\n    bytes_written = (*decompress_00083adcor)(input_buffer,output_buffer[7],length & 0x1000,1);\n    if ((bytes_written == -1) && (*input_buffer != 0)) {\n      if ((*input_buffer == 0x1d) || (*input_buffer == 0x16)) {\n        *input_buffer = input_length;\n        return 0;\n      }\n      *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    flags = *(ushort *)(output_buffer + 3);\n    decompress_00083adcor = (code *)output_buffer[10];\n  }\n  else {\n    bytes_written = output_buffer[0x14];\n  }\n  if (((int)(flags << 0x1d) < 0) && (bytes_written = bytes_written - output_buffer[1], output_buffer[0xc] != 0)) {\n    bytes_written = bytes_written - output_buffer[0xf];\n  }\n  bytes_written = (*decompress_00083adcor)(input_buffer,output_buffer[7],bytes_written,0);\n  if (bytes_written == -1) {\n    int error_code = *input_buffer;\n    if (error_code != 0) {\n      if ((error_code != 0x1d) && (error_code != 0x16)) {\n        *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) & 0xf7ff;\n      *output_buffer = output_buffer[4];\n      output_buffer[1] = 0;\n      goto LAB_00083a00;\n    }\n    flags = *(ushort *)(output_buffer + 3) & 0xf7ff;\n    output_buffer[1] = 0;\n    *(ushort *)(output_buffer + 3) = flags;\n    *output_buffer = output_buffer[4];\n  }\n  else {\n    flags = *(ushort *)(output_buffer + 3) & 0xf7ff;\n    *output_buffer = output_buffer[4];\n    *(ushort *)(output_buffer + 3) = flags;\n    output_buffer[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    output_buffer[0x14] = bytes_written;\n  }\nLAB_00083a00:\n  current_output_position = (int *)output_buffer[0xc];\n  *input_buffer = input_length;\n  if (current_output_position == (int *)0x0) {\n    return 0;\n  }\n  if (current_output_position != output_buffer + 0x10) {\n    cleanup(input_buffer);\n  }\n  output_buffer[0xc] = 0;\n  return 0;\n}",
            "called": [
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083adc",
            "calling": [
                "FUN_00083f34",
                "FUN_000844c4",
                "FUN_000846a4",
                "FUN_0008378c"
            ],
            "imported": false,
            "current_name": "decompress_00083adc"
        },
        "FUN_000825b0": {
            "renaming": {
                "FUN_000825b0": "improved_function_000825b0",
                "param_1": "input_array",
                "param_2": "buffer",
                "param_3": "buffer_size",
                "iVar1": "temp_var_1",
                "piVar2": "temp_ptr_1",
                "uVar3": "temp_var_2",
                "iVar4": "temp_var_3",
                "uVar5": "temp_var_4",
                "piVar6": "temp_ptr_2",
                "uVar7": "temp_var_5",
                "uVar8": "temp_var_6",
                "piVar9": "temp_ptr_3",
                "iVar10": "temp_var_7"
            },
            "code": "\nint * improved_function_000825b0(undefined4 *input_array,int *buffer,uint buffer_size)\n\n{\n  int temp_var_1;\n  int *temp_ptr_1;\n  uint temp_var_2;\n  int temp_var_3;\n  uint temp_var_4;\n  int *temp_ptr_2;\n  uint temp_var_5;\n  uint temp_var_6;\n  int *temp_ptr_3;\n  int temp_var_7;\n  \n  if (buffer == (int *)0x0) {\n    temp_ptr_1 = (int *)FUN_00081e14(input_array,buffer_size);\n    return temp_ptr_1;\n  }\n  do_nothing_00082598();\n  temp_var_3 = DAT_0008296c;\n  temp_var_4 = buffer[-1];\n  temp_var_5 = temp_var_4 & 0xfffffffc;\n  temp_ptr_1 = buffer + -2;\n  if (buffer_size + 0xb < 0x17) {\n    temp_var_6 = 0x10;\n  }\n  else {\n    temp_var_6 = buffer_size + 0xb & 0xfffffff8;\n    if ((int)temp_var_6 < 0) goto LAB_0008267c;\n  }\n  if (temp_var_6 < buffer_size) {\nLAB_0008267c:\n    *input_array = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)temp_var_5 < (int)temp_var_6) {\n    temp_var_1 = (int)temp_ptr_1 + temp_var_5;\n    temp_var_7 = *(int *)(DAT_0008296c + 8);\n    if (temp_var_7 == temp_var_1) {\n      temp_var_2 = *(uint *)(temp_var_7 + 4) & 0xfffffffc;\n      temp_var_1 = temp_var_7;\n      if ((int)(temp_var_6 + 0x10) <= (int)(temp_var_2 + temp_var_5)) {\n        *(uint *)(DAT_0008296c + 8) = (int)temp_ptr_1 + temp_var_6;\n        *(uint *)((int)temp_ptr_1 + temp_var_6 + 4) = (temp_var_2 + temp_var_5) - temp_var_6 | 1;\n        buffer[-1] = temp_var_6 | buffer[-1] & 1U;\n        do_nothing_0008259c(input_array);\n        return buffer;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp_var_1 + 4) & 0xfffffffe) + temp_var_1 + 4) & 1) == 0) {\n      temp_var_2 = *(uint *)(temp_var_1 + 4) & 0xfffffffc;\n      if ((int)temp_var_6 <= (int)(temp_var_2 + temp_var_5)) {\n        temp_var_7 = *(int *)(temp_var_1 + 0xc);\n        temp_var_3 = *(int *)(temp_var_1 + 8);\n        *(int *)(temp_var_3 + 0xc) = temp_var_7;\n        *(int *)(temp_var_7 + 8) = temp_var_3;\n        temp_var_5 = temp_var_2 + temp_var_5;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      temp_var_2 = 0;\n      temp_var_1 = 0;\n    }\n    if (-1 < (int)(temp_var_4 << 0x1f)) {\n      temp_ptr_3 = (int *)((int)temp_ptr_1 - buffer[-2]);\n      temp_var_4 = (temp_ptr_3[1] & 0xfffffffcU) + temp_var_5;\n      if (temp_var_1 != 0) {\n        if (temp_var_1 == temp_var_7) {\n          if ((int)(temp_var_6 + 0x10) <= (int)(temp_var_2 + temp_var_4)) {\n            temp_ptr_1 = temp_ptr_3 + 2;\n            temp_var_1 = *temp_ptr_1;\n            temp_var_7 = temp_ptr_3[3];\n            temp_var_5 = temp_var_5 - 4;\n            *(int *)(temp_var_1 + 0xc) = temp_var_7;\n            *(int *)(temp_var_7 + 8) = temp_var_1;\n            if (temp_var_5 < 0x25) {\n              temp_ptr_2 = temp_ptr_1;\n              if (0x13 < temp_var_5) {\n                temp_ptr_3[2] = *buffer;\n                temp_ptr_3[3] = buffer[1];\n                if (temp_var_5 < 0x1c) {\n                  buffer = buffer + 2;\n                  temp_ptr_2 = temp_ptr_3 + 4;\n                }\n                else {\n                  temp_ptr_3[4] = buffer[2];\n                  temp_ptr_3[5] = buffer[3];\n                  if (temp_var_5 == 0x24) {\n                    temp_ptr_3[6] = buffer[4];\n                    temp_ptr_2 = buffer + 5;\n                    buffer = buffer + 6;\n                    temp_ptr_3[7] = *temp_ptr_2;\n                    temp_ptr_2 = temp_ptr_3 + 8;\n                  }\n                  else {\n                    buffer = buffer + 4;\n                    temp_ptr_2 = temp_ptr_3 + 6;\n                  }\n                }\n              }\n              *temp_ptr_2 = *buffer;\n              temp_ptr_2[1] = buffer[1];\n              temp_ptr_2[2] = buffer[2];\n            }\n            else {\n              FUN_00082438(temp_ptr_1,buffer);\n            }\n            *(uint *)(temp_var_3 + 8) = (int)temp_ptr_3 + temp_var_6;\n            *(uint *)((int)temp_ptr_3 + temp_var_6 + 4) = (temp_var_2 + temp_var_4) - temp_var_6 | 1;\n            temp_ptr_3[1] = temp_var_6 | temp_ptr_3[1] & 1U;\n            do_nothing_0008259c(input_array);\n            return temp_ptr_1;\n          }\n        }\n        else {\n          temp_var_2 = temp_var_2 + temp_var_4;\n          if ((int)temp_var_6 <= (int)temp_var_2) {\n            temp_var_7 = *(int *)(temp_var_1 + 0xc);\n            temp_var_3 = *(int *)(temp_var_1 + 8);\n            *(int *)(temp_var_3 + 0xc) = temp_var_7;\n            *(int *)(temp_var_7 + 8) = temp_var_3;\n            temp_ptr_2 = temp_ptr_3 + 2;\n            temp_var_3 = *temp_ptr_2;\n            temp_var_1 = temp_ptr_3[3];\n            temp_var_4 = temp_var_5 - 4;\n            *(int *)(temp_var_3 + 0xc) = temp_var_1;\n            *(int *)(temp_var_1 + 8) = temp_var_3;\n            temp_var_5 = temp_var_2;\n            if (temp_var_4 < 0x25) {\n              temp_ptr_1 = temp_ptr_2;\n              if (0x13 < temp_var_4) {\n                temp_ptr_3[2] = *buffer;\n                temp_ptr_3[3] = buffer[1];\n                if (temp_var_4 < 0x1c) {\n                  buffer = buffer + 2;\n                  temp_ptr_1 = temp_ptr_3 + 4;\n                }\n                else {\n                  temp_ptr_3[4] = buffer[2];\n                  temp_ptr_3[5] = buffer[3];\n                  if (temp_var_4 == 0x24) {\n                    temp_ptr_3[6] = buffer[4];\n                    temp_ptr_1 = buffer + 5;\n                    buffer = buffer + 6;\n                    temp_ptr_3[7] = *temp_ptr_1;\n                    temp_ptr_1 = temp_ptr_3 + 8;\n                  }\n                  else {\n                    buffer = buffer + 4;\n                    temp_ptr_1 = temp_ptr_3 + 6;\n                  }\n                }\n              }\n              *temp_ptr_1 = *buffer;\n              temp_ptr_1[1] = buffer[1];\n              temp_ptr_1[2] = buffer[2];\n              temp_var_4 = temp_ptr_3[1];\n              temp_ptr_1 = temp_ptr_3;\n              buffer = temp_ptr_2;\n            }\n            else {\n              FUN_00082438(temp_ptr_2,buffer);\n              temp_var_4 = temp_ptr_3[1];\n              temp_ptr_1 = temp_ptr_3;\n              buffer = temp_ptr_2;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)temp_var_6 <= (int)temp_var_4) {\n        temp_ptr_2 = temp_ptr_3 + 2;\n        temp_var_3 = *temp_ptr_2;\n        temp_var_1 = temp_ptr_3[3];\n        temp_var_2 = temp_var_5 - 4;\n        *(int *)(temp_var_3 + 0xc) = temp_var_1;\n        *(int *)(temp_var_1 + 8) = temp_var_3;\n        temp_var_5 = temp_var_4;\n        if (temp_var_2 < 0x25) {\n          temp_ptr_1 = temp_ptr_2;\n          if (0x13 < temp_var_2) {\n            temp_ptr_3[2] = *buffer;\n            temp_ptr_3[3] = buffer[1];\n            if (temp_var_2 < 0x1c) {\n              buffer = buffer + 2;\n              temp_ptr_1 = temp_ptr_3 + 4;\n            }\n            else {\n              temp_ptr_3[4] = buffer[2];\n              temp_ptr_3[5] = buffer[3];\n              if (temp_var_2 == 0x24) {\n                temp_ptr_3[6] = buffer[4];\n                temp_ptr_1 = buffer + 5;\n                buffer = buffer + 6;\n                temp_ptr_3[7] = *temp_ptr_1;\n                temp_ptr_1 = temp_ptr_3 + 8;\n              }\n              else {\n                buffer = buffer + 4;\n                temp_ptr_1 = temp_ptr_3 + 6;\n              }\n            }\n          }\n          *temp_ptr_1 = *buffer;\n          temp_ptr_1[1] = buffer[1];\n          temp_ptr_1[2] = buffer[2];\n          temp_var_4 = temp_ptr_3[1];\n          temp_ptr_1 = temp_ptr_3;\n          buffer = temp_ptr_2;\n        }\n        else {\n          FUN_00082438(temp_ptr_2,buffer);\n          temp_var_4 = temp_ptr_3[1];\n          temp_ptr_1 = temp_ptr_3;\n          buffer = temp_ptr_2;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    temp_ptr_3 = (int *)FUN_00081e14(input_array,buffer_size);\n    if (temp_ptr_3 == (int *)0x0) goto LAB_000826a4;\n    temp_var_4 = buffer[-1];\n    if (temp_ptr_3 + -2 != (int *)((temp_var_4 & 0xfffffffe) + (int)temp_ptr_1)) {\n      temp_var_5 = temp_var_5 - 4;\n      if (temp_var_5 < 0x25) {\n        temp_ptr_1 = buffer;\n        temp_ptr_2 = temp_ptr_3;\n        if (0x13 < temp_var_5) {\n          *temp_ptr_3 = *buffer;\n          temp_ptr_3[1] = buffer[1];\n          if (temp_var_5 < 0x1c) {\n            temp_ptr_1 = buffer + 2;\n            temp_ptr_2 = temp_ptr_3 + 2;\n          }\n          else {\n            temp_ptr_3[2] = buffer[2];\n            temp_ptr_3[3] = buffer[3];\n            if (temp_var_5 == 0x24) {\n              temp_ptr_3[4] = buffer[4];\n              temp_ptr_3[5] = buffer[5];\n              temp_ptr_1 = buffer + 6;\n              temp_ptr_2 = temp_ptr_3 + 6;\n            }\n            else {\n              temp_ptr_1 = buffer + 4;\n              temp_ptr_2 = temp_ptr_3 + 4;\n            }\n          }\n        }\n        *temp_ptr_2 = *temp_ptr_1;\n        temp_ptr_2[1] = temp_ptr_1[1];\n        temp_ptr_2[2] = temp_ptr_1[2];\n      }\n      else {\n        FUN_00082438(temp_ptr_3,buffer);\n      }\n      FUN_00083d9c(input_array,buffer);\n      goto LAB_000826a4;\n    }\n    temp_var_5 = temp_var_5 + (temp_ptr_3[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  temp_var_2 = temp_var_5 - temp_var_6;\n  temp_ptr_3 = buffer;\n  if (temp_var_2 < 0x10) {\n    temp_ptr_1[1] = temp_var_4 & 1 | temp_var_5;\n    *(uint *)((int)temp_ptr_1 + temp_var_5 + 4) = *(uint *)((int)temp_ptr_1 + temp_var_5 + 4) | 1;\n  }\n  else {\n    temp_ptr_1[1] = temp_var_4 & 1 | temp_var_6;\n    *(uint *)((int)temp_ptr_1 + temp_var_6 + 4) = temp_var_2 | 1;\n    *(uint *)((int)temp_ptr_1 + temp_var_2 + temp_var_6 + 4) = *(uint *)((int)temp_ptr_1 + temp_var_2 + temp_var_6 + 4) | 1;\n    FUN_00083d9c(input_array,(int)temp_ptr_1 + temp_var_6 + 8);\n  }\nLAB_000826a4:\n  do_nothing_0008259c(input_array);\n  return temp_ptr_3;\n}\n\n",
            "called": [
                "FUN_00082598",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082438",
                "FUN_00081e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825b0",
            "calling": [
                "FUN_00083f34",
                "FUN_000825a0"
            ],
            "imported": false,
            "current_name": "improved_function_000825b0"
        },
        "FUN_000803d4": {
            "renaming": {
                "FUN_000803d4": "check_value_at_address_000803d4",
                "param_1": "address",
                "iVar1": "counter",
                "value": "value",
                "PTR_DAT_0008040c": "PTR_DAT_0008040c",
                "max_counter": "max_counter",
                "found": "found",
                "return_value": "return_value"
            },
            "code": "int check_value_at_address_000803d4(int address) {\n    int value = *(byte *)(address + 10);\n    int counter = 0;\n    int max_counter = 8;\n    int found = 0;\n    int return_value = 0;\n\n    if ((value << 0x18) < 0) {\n        *(short *)(address + 0x54) += 1;\n        return 0xfb;\n    }\n\n    while (counter < max_counter && !found) {\n        if (PTR_DAT_0008040c[counter] == value) {\n            found = 1;\n        }\n        counter++;\n    }\n\n    if (!found) {\n        *(short *)(address + 0x54) += 1;\n        return_value = 1;\n    }\n\n    return return_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803d4",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "check_value_at_address_000803d4"
        },
        "FUN_0008043e": {
            "renaming": {
                "FUN_0008043e": "process_data_0008043e",
                "param_1": "data_ptr",
                "cVar1": "result",
                "uVar2": "random_value",
                "piVar3": "memory_ptr",
                "iVar4": "status",
                "unaff_r6": "data_size",
                "thunk_FUN_00081714": "thunk_get_memory_ptr",
                "FUN_000801b0": "process_data",
                "FUN_000803d4": "check_data",
                "LAB_000804a2": ""
            },
            "code": "int process_data_0008043e(int **data_ptr) {\n  char result = 0;\n  uint8_t data_size = *(uint8_t *)((int)data_ptr + 5);\n  uint8_t random_value = 0;\n  int *memory_ptr = (int *)thunk_get_memory_ptr();\n  if (data_size < 4) {\n    random_value = (**(code **)(**data_ptr + 8))() & 0xff;\n  }\n  if (data_ptr[0x17] < memory_ptr) {\n    *(uint8_t *)(data_ptr + 2) = 0xff;\n    *(uint8_t *)((int)data_ptr + 7) = 0;\n    *(short *)(data_ptr + 0x15) += 1;\n  }\n  else if (random_value > 7) {\n    process_data_0008043e(data_ptr);\n    int status = check_data(data_ptr);\n    if (status == 0) {\n      if (*(uint8_t *)((int)data_ptr + 10) - 3 < 2) {\n        fix_data(data_ptr);\n      }\n      *(uint8_t *)((int)data_ptr + 7) = 0;\n      result = *(char *)((int)data_ptr + 0x49);\n    }\n    else {\n      *(uint8_t *)((int)data_ptr + 7) = 0;\n      result = (char)status;\n    }\n  }\n  return (int)result;\n}",
            "called": [
                "FUN_000801b0",
                "FUN_000803d4",
                "thunk_FUN_00081714",
                "FUN_00080410"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008043e",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "process_data_0008043e"
        },
        "FUN_0008160c": {
            "renaming": {
                "FUN_0008160c": "reset_data_0008160c",
                "param_1": "data",
                "*param_1": "*data",
                "FUN_00081e04": "clear_memory"
            },
            "code": "void reset_data_0008160c(int *data)\n{\n    if (*data != 0) {\n        clear_memory();\n    }\n    *data = 0;\n    data[2] = 0;\n    data[1] = 0;\n    return;\n}",
            "called": [
                "FUN_00081e04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008160c",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "reset_data_0008160c"
        },
        "FUN_00080e18": {
            "renaming": {
                "FUN_00080e18": "set_bit_00080e18",
                "param_1": "bit_position",
                "uVar1": "bit_mask"
            },
            "code": "int set_bit_00080e18(uint bit_position)\n{\n    uint bit_mask;\n    if (bit_position < 45) {\n        if (bit_position < 32) {\n            bit_mask = 1 << bit_position;\n            if ((bit_mask & *(uint *)(DAT_00080e58 + 0x18)) != bit_mask) {\n                *(uint *)(DAT_00080e58 + 0x10) = bit_mask;\n            }\n        }\n        else {\n            bit_mask = 1 << (bit_position - 32);\n            if ((bit_mask & *(uint *)(DAT_00080e58 + 0x108)) != bit_mask) {\n                *(uint *)(DAT_00080e58 + 0x100) = bit_mask;\n            }\n        }\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e18",
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210",
                "FUN_00081508"
            ],
            "imported": false,
            "current_name": "set_bit_00080e18"
        },
        "FUN_00081184": {
            "renaming": {
                "FUN_00081184": "calculate_result_00081184"
            },
            "code": "int calculate_result_00081184(void)\n{\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081184",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_00081184"
        },
        "FUN_00084298": {
            "renaming": {
                "FUN_00084298": "get_first_value_00084298",
                "*DAT_000842a0": "first_value_pointer"
            },
            "code": "int get_first_value_00084298() {\n    return **DAT_000842a0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084298",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "get_first_value_00084298"
        },
        "FUN_00081066": {
            "renaming": {
                "FUN_00081066": "set_value_to_max_int_00081066",
                "param_1": "value"
            },
            "code": "void set_value_to_max_int_00081066(int value)\n{\n  *(undefined4 *)(value + 0x14) = 0xffff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081066",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "set_value_to_max_int_00081066"
        },
        "FUN_00081cd0": {
            "renaming": {
                "FUN_00081cd0": "calculate_value_00081cd0",
                "param_1": "input_val",
                "uVar1": "shift_val1",
                "uVar2": "shift_val2",
                "uVar3": "uVar3",
                "PTR_DAT_00000004": "0x80000000",
                "PTR_DAT_00000008": "0x7f000000",
                "PTR_DAT_0000000c": "0x9f",
                "PTR_DAT_00000010": "0xffffff9f",
                "PTR_DAT_00000014": "0x7fffff",
                "DAT_00000018": "result"
            },
            "code": "uint32_t calculate_value_00081cd0(uint32_t input_val) {\n    uint32_t shift_val1 = input_val << 1;\n    uint32_t shift_val2 = shift_val1 >> 24;\n    uint32_t uVar3 = 0x9e - shift_val2;\n    uint32_t DAT_00000018 = 0;\n    if (shift_val1 >= PTR_DAT_00000008) {\n        if ((shift_val2 < PTR_DAT_0000000c) && (uVar3 != 0)) {\n            DAT_00000018 = (input_val << 8 | PTR_DAT_00000004) >> (uVar3 & 0xff);\n            if ((input_val & PTR_DAT_00000004) != 0) {\n                DAT_00000018 = -DAT_00000018;\n            }\n        } else if ((uVar3 == PTR_DAT_00000010) && ((input_val & PTR_DAT_00000014) != 0)) {\n            DAT_00000018 = 0;\n        } else {\n            DAT_00000018 = (input_val & PTR_DAT_00000004) == 0 ? PTR_DAT_00000014ff : input_val;\n        }\n    }\n    return DAT_00000018;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081cd0",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "calculate_value_00081cd0"
        },
        "FUN_00081df4": {
            "renaming": {
                "FUN_00081df4": "call_function_with_param_00081df4",
                "param_1": "param",
                "FUN_00081e14": "function_ptr",
                "*DAT_00081e00": "function_ptr"
            },
            "code": "void call_function_with_param_00081df4(void* *DAT_00081e00, undefined4 param) {\n  *DAT_00081e00(param);\n  return;\n}",
            "called": [
                "FUN_00081e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081df4",
            "calling": [
                "FUN_00083974"
            ],
            "imported": false,
            "current_name": "call_function_with_param_00081df4"
        },
        "FUN_00080410": {
            "renaming": {
                "FUN_00080410": "process_data_00080410",
                "param_1": "data_buffer",
                "param_2": "num_elements",
                "param_3": "element_size",
                "param_4": "output_buffer",
                "uVar1": "processed_element",
                "iVar2": "current_element_offset",
                "iVar5": "output_index",
                "bVar3": "current_element_index",
                "uVar4": "num_bytes_to_copy"
            },
            "code": "void process_data_00080410(int data_buffer, int num_elements, int element_size, int output_buffer) {\n  int current_element_index = 0;\n  while(current_element_index < num_elements) {\n    int current_element_offset = (current_element_index * element_size * 2 + 3 & 0xff) + data_buffer;\n    int output_index = *(int *)(data_buffer + 0x4c) + current_element_index * 2;\n    uint8_t num_bytes_to_copy = *(uint8_t *)(data_buffer + 0xb) >> 1;\n    if (num_bytes_to_copy <= current_element_index) break;\n    uint16_t processed_element = process_element(*(uint8_t *)(current_element_offset + 9), *(uint8_t *)(current_element_offset + 10), current_element_offset, num_bytes_to_copy, output_buffer);\n    *(uint16_t *)(output_index + output_buffer) = processed_element;\n    current_element_index++;\n  }\n}",
            "called": [
                "FUN_000815f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080410",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "process_data_00080410"
        },
        "FUN_00080da0": {
            "renaming": {
                "FUN_00080da0": "process_data_00080da0",
                "param_1": "data_holder",
                "param_2": "data_type",
                "param_3": "data",
                "param_4": "flag",
                "bVar1": "is_negative_flag",
                "DAT_00080df8": "PTR_FUNTION_1",
                "DAT_00080dfc": "PTR_FUNTION_2",
                "DAT_00080e00": "PTR_FUNTION_3"
            },
            "code": "int process_data_00080da0(int data_holder, int data_type, int data, unsigned int flag) {\n  bool is_negative_flag = (int)(flag << 0x1f) < 0;\n  switch(data_type) {\n    case 1:\n    case 2:\n      (*DAT_00080df8)(data_holder, data_type, data);\n      *(int *)(data_holder + 0x44) = data;\n      if (is_negative_flag) {\n        *(int *)(data_holder + 100) = data;\n      }\n      if (!is_negative_flag) {\n        *(int *)(data_holder + 0x60) = data;\n      }\n      break;\n    case 3:\n      (*DAT_00080dfc)(data_holder, data, flag, DAT_00080dfc, data_holder);\n      break;\n    case 4:\n    case 5:\n      (*DAT_00080e00)(data_holder, data, data_type == 5, (flag << 0x1d) >> 0x1f, flag & 1, data_type, data);\n      break;\n    default:\n      return 0;\n  }\n  return 1;\n}",
            "called": [
                "FUN_00080d7a",
                "FUN_00080d2e",
                "FUN_00080d54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080da0",
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210"
            ],
            "imported": false,
            "current_name": "process_data_00080da0"
        },
        "FUN_00080258": {
            "renaming": {
                "FUN_00080258": "process_data_00080258",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "current_index",
                "param_4": "max_index",
                "bVar1": "current_byte",
                "uVar4": "current_byte_as_uint",
                "uVar2": "result",
                "iVar3": "result_of_call"
            },
            "code": "void process_data_00080258(int **data, int data_size, int current_index, int max_index)\n{\n  byte current_byte = *(byte *)((int)data + 0x49);\n  uint current_byte_as_uint = (uint)current_byte;\n  undefined2 result = calculate_result(data, current_byte_as_uint, current_index, max_index, max_index);\n  *(char *)((int)data + current_byte_as_uint + 9) = (char)((ushort)result >> 8);\n  *(char *)((int)data + (current_byte_as_uint + 1 & 0xff) + 9) = (char)result;\n  *(byte *)((int)data + 0x49) = current_byte + 2;\n  if (data_size > 1) {\n    call_function_with_param_1(*(byte *)((int)data + 6),1);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    (**(code **)(**data + 4))(*data,(int)data + 9,*(undefined *)((int)data + 0x49));\n  }\n  if (data_size > 1) {\n    call_function_with_param_1(*(byte *)((int)data + 6),0);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    do {\n      int result_of_call = (**(code **)(**data + 0xc))();\n    } while (-1 < result_of_call);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  int thunk_result = thunk_function();\n  data[0x17] = (int *)(thunk_result + (uint)*(ushort *)((int)data + 0x56));\n  *(short *)((int)data + 0x52) = *(short *)((int)data + 0x52) + 1;\n  return;\n}",
            "called": [
                "FUN_0008021c",
                "thunk_FUN_00081714",
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080258",
            "calling": [
                "FUN_000802da"
            ],
            "imported": false,
            "current_name": "process_data_00080258"
        },
        "FUN_00081622": {
            "renaming": {
                "FUN_00081622": "validate_input_00081622",
                "param_1": "array",
                "param_2": "array_length",
                "iVar1": "result",
                "*param_1": "*array",
                "FUN_000825a0": "validate_data",
                "param_3": "param_3",
                "param_4": "param_4"
            },
            "code": "int validate_input_00081622(int* array, int array_length, int param_3, int param_4) {\n  int result = FUN_000825a0(*array, array_length + 1, param_3, param_4, param_4);\n  if (result != 0) {\n    *array = result;\n    array[1] = array_length;\n    result = 1;\n  }\n  return result;\n}",
            "called": [
                "FUN_000825a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081622",
            "calling": [
                "FUN_0008163a"
            ],
            "imported": false,
            "current_name": "validate_input_00081622"
        },
        "FUN_00082438": {
            "renaming": {
                "FUN_00082438": "reverse_copy_00082438",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "dest_ptr",
                "puVar6": "dest_ptr",
                "iVar1": "i",
                "uVar5": "tail",
                "uVar7": "tail"
            },
            "code": "void reverse_copy_00082438(uint32_t *dest, uint32_t *src, uint32_t size) {\n    if (src < dest && src + size > dest) {\n        uint8_t *dest_ptr = (uint8_t *)dest + size;\n        uint8_t *src_ptr = (uint8_t *)src + size;\n        for (uint32_t i = 0; i < size; i++) {\n            *(--dest_ptr) = *(--src_ptr);\n        }\n    } else if (size >= 16 && (((uint32_t)src | (uint32_t)dest) & 3) == 0) {\n        uint32_t *dest_ptr = dest;\n        uint32_t *src_ptr = src;\n        uint32_t blocks = size >> 4;\n        uint32_t tail = size & 0xf;\n        for (uint32_t i = 0; i < blocks; i++) {\n            *dest_ptr++ = *src_ptr++;\n            *dest_ptr++ = *src_ptr++;\n            *dest_ptr++ = *src_ptr++;\n            *dest_ptr++ = *src_ptr++;\n        }\n        if (tail >= 4) {\n            *dest_ptr++ = *src_ptr++;\n            *dest_ptr++ = *src_ptr++;\n            *dest_ptr++ = *src_ptr++;\n        }\n        if (tail >= 2) {\n            *dest_ptr++ = *src_ptr++;\n            *dest_ptr++ = *src_ptr++;\n        }\n        if (tail & 1) {\n            *dest_ptr++ = *src_ptr++;\n        }\n    } else if (size > 0) {\n        uint8_t *dest_ptr = (uint8_t *)dest;\n        uint8_t *src_ptr = (uint8_t *)src;\n        for (uint32_t i = 0; i < size; i++) {\n            *dest_ptr++ = *src_ptr++;\n        }\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082438",
            "calling": [
                "FUN_00083f34",
                "FUN_000825b0"
            ],
            "imported": false,
            "current_name": "reverse_copy_00082438"
        },
        "FUN_00081508": {
            "renaming": {
                "FUN_00081508": "initialize_device_00081508",
                "param_1": "device_id",
                "param_2": "divisor",
                "param_3": "config_value",
                "puVar1": "data_pointer",
                "iVar2": "device_info_address",
                "puVar3": "device_info_pointer",
                "DAT_00081570": "DEVICE_DATA",
                "DAT_00081574": "DEVICE_INFO_ADDRESS"
            },
            "code": "void initialize_device_00081508(int device_id, uint32_t divisor, uint32_t config_value) {\n    uint32_t *data_pointer;\n    int device_info_address;\n    uint32_t *device_info_pointer;\n    uint32_t bit_shifted_value;\n    uint32_t bit_mask;\n\n    set_device_type(*(uint32_t *)(device_id + 0x20));\n    device_info_pointer = *(uint32_t **)(device_id + 0x18);\n    device_info_pointer[0x48] = 0x202;\n    *device_info_pointer = 0xac;\n    data_pointer = DAT_00081570;\n    device_info_pointer[1] = config_value;\n    bit_mask = *data_pointer / divisor >> 4;\n    device_info_pointer[8] = bit_mask;\n    device_info_pointer[3] = 0xffffffff;\n    device_info_pointer[2] = 0x61;\n    bit_shifted_value = 1 << ((uint32_t)(*(uint8_t *)(device_id + 0x1c)) & 0x1f);\n    *(int *)(DAT_00081574 + ((uint32_t)(*(uint8_t *)(device_id + 0x1c)) >> 5) * 4) = bit_shifted_value;\n    device_info_address = *(int *)(device_id + 0x10);\n    *(uint32_t *)(device_info_address + 0x84) = 0;\n    *(uint32_t *)(device_info_address + 0x80) = 0;\n    device_info_address = *(int *)(device_id + 0x14);\n    *(uint32_t *)(device_info_address + 0x84) = 0;\n    *(uint32_t *)(device_info_address + 0x80) = 0;\n    *device_info_pointer = 0x50;\n}",
            "called": [
                "FUN_00080e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081508",
            "calling": [],
            "imported": false,
            "current_name": "initialize_device_00081508"
        },
        "FUN_00083808": {
            "renaming": {
                "FUN_00083808": "process_data_00083808",
                "param_1": "result",
                "param_2": "input_data",
                "uVar1": "is_odd",
                "iVar2": "temp_value",
                "uVar3": "input_value",
                "uVar4": "data_word"
            },
            "code": "uint32_t process_data_00083808(uint32_t *result, int *input_data)\n{\n    uint32_t input_value = (uint32_t)input_data[3];\n    int32_t temp_value;\n\n    if ((*DAT_000838c8 != 0) && (*(int *)(*DAT_000838c8 + 0x38) == 0)) {\n        reset_data();\n    }\n\n    if ((int32_t)(input_value << 0x1c) < 0) {\n        temp_value = input_data[4];\n    }\n    else {\n        if (-1 < (int32_t)(input_value << 0x1b)) {\n            *result = 9;\n            input_data[3] = input_value | 0x40;\n            return 0xffffffff;\n        }\n        if ((int32_t)(input_value << 0x1d) < 0) {\n            if ((int *)input_data[0xc] != (int *)0x0) {\n                if ((int *)input_data[0xc] != input_data + 0x10) {\n                    reset_data(result);\n                    input_value = (uint32_t)input_data[3];\n                }\n                input_data[0xc] = 0;\n            }\n            temp_value = input_data[4];\n            input_value &= 0xffdb;\n            input_data[0] = temp_value;\n            input_data[1] = 0;\n        }\n        else {\n            temp_value = input_data[4];\n        }\n        input_data[3] = input_value | 8;\n    }\n\n    if ((temp_value == 0) && ((input_value & 0x280) != 0x200)) {\n        process_data_00083808(result, input_data);\n        input_value = (uint32_t)input_data[3];\n        temp_value = input_data[4];\n    }\n\n    uint32_t is_odd = input_value & 1;\n    if (is_odd == 0) {\n        if (-1 < (int32_t)(input_value << 0x1e)) {\n            input_data[2] = input_data[5];\n        }\n    }\n    else {\n        input_data[6] = -input_data[5];\n        input_data[2] = 0;\n    }\n\n    if ((temp_value == 0) && ((int32_t)((uint32_t)input_data[3] << 0x18) < 0)) {\n        input_data[3] |= 0x40;\n        return 0xffffffff;\n    }\n    return 0;\n}",
            "called": [
                "FUN_00083b14",
                "FUN_00083d9c",
                "FUN_000842a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083808",
            "calling": [
                "FUN_00083f34",
                "FUN_00082b38",
                "FUN_000844c4"
            ],
            "imported": false,
            "current_name": "process_data_00083808"
        },
        "FUN_000847e0": {
            "renaming": {
                "FUN_000847e0": "improved_division_000847e0",
                "param_1": "dividend_high",
                "param_2": "dividend_low",
                "param_3": "divisor_high",
                "param_4": "divisor_low",
                "lVar1": "product",
                "uVar2": "divisor_high_16",
                "uVar3": "quotient_high",
                "uVar4": "temp_16",
                "uVar5": "shift_amount",
                "uVar6": "temp_32",
                "uVar7": "temp_32_2",
                "uVar8": "quotient_low_16",
                "uVar9": "is_dividend_negative",
                "uVar10": "quotient_low",
                "uVar11": "temp_32_3",
                "uVar12": "temp_16_2",
                "bVar13": "is_borrow"
            },
            "code": "\nundefined8 improved_division_000847e0(uint dividend_high,uint dividend_low,uint divisor_high,uint divisor_low)\n\n{\n  longlong product;\n  uint divisor_high_16;\n  uint quotient_high;\n  uint temp_16;\n  uint shift_amount;\n  uint temp_32;\n  uint temp_32_2;\n  uint quotient_low_16;\n  uint is_dividend_negative;\n  uint quotient_low;\n  uint temp_32_3;\n  uint temp_16_2;\n  bool is_borrow;\n  \n  if ((int)dividend_low < 0) {\n    is_borrow = dividend_high != 0;\n    dividend_high = -dividend_high;\n    dividend_low = -dividend_low - (uint)is_borrow;\n    is_dividend_negative = 0xffffffff;\n  }\n  else {\n    is_dividend_negative = 0;\n  }\n  if ((int)divisor_low < 0) {\n    is_dividend_negative = ~is_dividend_negative;\n    is_borrow = divisor_high != 0;\n    divisor_high = -divisor_high;\n    divisor_low = -divisor_low - (uint)is_borrow;\n  }\n  if (divisor_low == 0) {\n    if (dividend_low < divisor_high) {\n      shift_amount = count_leading_zeroes(divisor_high);\n      if (shift_amount != 0) {\n        divisor_high_16 = dividend_high >> (0x20 - shift_amount & 0xff);\n        divisor_high = divisor_high << (shift_amount & 0xff);\n        dividend_high = dividend_high << (shift_amount & 0xff);\n        dividend_low = dividend_low << (shift_amount & 0xff) | divisor_high_16;\n      }\n      divisor_high_16 = divisor_high >> 0x10;\n      quotient_high = dividend_low / divisor_high_16;\n      temp_32 = (divisor_high & 0xffff) * quotient_high;\n      quotient_low = dividend_high >> 0x10 | (dividend_low - divisor_high_16 * quotient_high) * 0x10000;\n      shift_amount = quotient_high;\n      if (quotient_low <= temp_32 && temp_32 - quotient_low != 0) {\n        is_borrow = CARRY4(quotient_low,divisor_high);\n        quotient_low = quotient_low + divisor_high;\n        shift_amount = quotient_high - 1;\n        if ((is_borrow == false) && (quotient_low <= temp_32 && temp_32 - quotient_low != 0)) {\n          shift_amount = quotient_high - 2;\n          quotient_low = quotient_low + divisor_high;\n        }\n      }\n      temp_32_2 = (quotient_low - temp_32) / divisor_high_16;\n      quotient_high = (divisor_high & 0xffff) * temp_32_2;\n      temp_32 = dividend_high & 0xffff | ((quotient_low - temp_32) - divisor_high_16 * temp_32_2) * 0x10000;\n      divisor_high_16 = temp_32_2;\n      if (temp_32 <= quotient_high && quotient_high - temp_32 != 0) {\n        divisor_high_16 = temp_32_2 - 1;\n        if ((CARRY4(temp_32,divisor_high) == false) &&\n           (temp_32 + divisor_high <= quotient_high && quotient_high - (temp_32 + divisor_high) != 0)) {\n          divisor_high_16 = temp_32_2 - 2;\n        }\n      }\n      quotient_high = divisor_high_16 | shift_amount << 0x10;\n      quotient_low = 0;\n    }\n    else {\n      if (divisor_high == 0) {\n        divisor_high = 1 / 0;\n      }\n      shift_amount = count_leading_zeroes(divisor_high);\n      if (shift_amount == 0) {\n        dividend_low = dividend_low - divisor_high;\n        divisor_high_16 = divisor_high >> 0x10;\n        temp_16_2 = divisor_high & 0xffff;\n        quotient_low = 1;\n      }\n      else {\n        divisor_high = divisor_high << (shift_amount & 0xff);\n        quotient_high = dividend_low >> (0x20 - shift_amount & 0xff);\n        divisor_high_16 = divisor_high >> 0x10;\n        quotient_low = quotient_high / divisor_high_16;\n        temp_16_2 = divisor_high & 0xffff;\n        temp_32 = temp_16_2 * quotient_low;\n        temp_32_2 = dividend_high >> (0x20 - shift_amount & 0xff) | dividend_low << (shift_amount & 0xff);\n        quotient_high = temp_32_2 >> 0x10 | (quotient_high - divisor_high_16 * quotient_low) * 0x10000;\n        dividend_high = dividend_high << (shift_amount & 0xff);\n        shift_amount = quotient_low;\n        if (quotient_high <= temp_32 && temp_32 - quotient_high != 0) {\n          is_borrow = CARRY4(quotient_high,divisor_high);\n          quotient_high = quotient_high + divisor_high;\n          shift_amount = quotient_low - 1;\n          if ((is_borrow == false) && (quotient_high <= temp_32 && temp_32 - quotient_high != 0)) {\n            shift_amount = quotient_low - 2;\n            quotient_high = quotient_high + divisor_high;\n          }\n        }\n        quotient_low_16 = (quotient_high - temp_32) / divisor_high_16;\n        temp_16 = temp_16_2 * quotient_low_16;\n        dividend_low = temp_32_2 & 0xffff | ((quotient_high - temp_32) - divisor_high_16 * quotient_low_16) * 0x10000;\n        quotient_low = quotient_low_16;\n        if (dividend_low <= temp_16 && temp_16 - dividend_low != 0) {\n          is_borrow = CARRY4(dividend_low,divisor_high);\n          dividend_low = dividend_low + divisor_high;\n          quotient_low = quotient_low_16 - 1;\n          if ((is_borrow == false) && (dividend_low <= temp_16 && temp_16 - dividend_low != 0)) {\n            quotient_low = quotient_low_16 - 2;\n            dividend_low = dividend_low + divisor_high;\n          }\n        }\n        dividend_low = dividend_low - temp_16;\n        quotient_low = quotient_low | shift_amount << 0x10;\n      }\n      quotient_high = dividend_low / divisor_high_16;\n      temp_32 = temp_16_2 * quotient_high;\n      temp_32_2 = dividend_high >> 0x10 | (dividend_low - divisor_high_16 * quotient_high) * 0x10000;\n      shift_amount = quotient_high;\n      if (temp_32_2 <= temp_32 && temp_32 - temp_32_2 != 0) {\n        is_borrow = CARRY4(temp_32_2,divisor_high);\n        temp_32_2 = temp_32_2 + divisor_high;\n        shift_amount = quotient_high - 1;\n        if ((is_borrow == false) && (temp_32_2 <= temp_32 && temp_32 - temp_32_2 != 0)) {\n          shift_amount = quotient_high - 2;\n          temp_32_2 = temp_32_2 + divisor_high;\n        }\n      }\n      temp_16 = (temp_32_2 - temp_32) / divisor_high_16;\n      temp_16_2 = temp_16_2 * temp_16;\n      quotient_high = dividend_high & 0xffff | ((temp_32_2 - temp_32) - divisor_high_16 * temp_16) * 0x10000;\n      divisor_high_16 = temp_16;\n      if (quotient_high <= temp_16_2 && temp_16_2 - quotient_high != 0) {\n        divisor_high_16 = temp_16 - 1;\n        if ((CARRY4(quotient_high,divisor_high) == false) &&\n           (quotient_high + divisor_high <= temp_16_2 && temp_16_2 - (quotient_high + divisor_high) != 0)) {\n          divisor_high_16 = temp_16 - 2;\n        }\n      }\n      quotient_high = divisor_high_16 | shift_amount << 0x10;\n    }\n  }\n  else if (dividend_low < divisor_low) {\n    quotient_high = 0;\n    quotient_low = 0;\n  }\n  else {\n    shift_amount = count_leading_zeroes(divisor_low);\n    if (shift_amount == 0) {\n      if ((divisor_low < dividend_low) || (quotient_high = shift_amount, quotient_low = shift_amount, divisor_high <= dividend_high)) {\n        quotient_high = 1;\n        quotient_low = 0;\n      }\n    }\n    else {\n      divisor_high_16 = 0x20 - shift_amount;\n      temp_32 = dividend_low >> (divisor_high_16 & 0xff);\n      temp_16 = divisor_high >> (divisor_high_16 & 0xff) | divisor_low << (shift_amount & 0xff);\n      temp_32_2 = temp_16 >> 0x10;\n      quotient_high = temp_32 / temp_32_2;\n      temp_16_2 = (temp_16 & 0xffff) * quotient_high;\n      quotient_low = dividend_low << (shift_amount & 0xff) | dividend_high >> (divisor_high_16 & 0xff);\n      temp_32 = quotient_low >> 0x10 | (temp_32 - temp_32_2 * quotient_high) * 0x10000;\n      divisor_high_16 = quotient_high;\n      if (temp_32 <= temp_16_2 && temp_16_2 - temp_32 != 0) {\n        is_borrow = CARRY4(temp_32,temp_16);\n        temp_32 = temp_32 + temp_16;\n        divisor_high_16 = quotient_high - 1;\n        if ((is_borrow == false) && (temp_32 <= temp_16_2 && temp_16_2 - temp_32 != 0)) {\n          divisor_high_16 = quotient_high - 2;\n          temp_32 = temp_32 + temp_16;\n        }\n      }\n      quotient_low_16 = (temp_32 - temp_16_2) / temp_32_2;\n      temp_32_3 = (temp_16 & 0xffff) * quotient_low_16;\n      temp_32 = quotient_low & 0xffff | ((temp_32 - temp_16_2) - temp_32_2 * quotient_low_16) * 0x10000;\n      quotient_high = quotient_low_16;\n      if (temp_32 <= temp_32_3 && temp_32_3 - temp_32 != 0) {\n        is_borrow = CARRY4(temp_32,temp_16);\n        temp_32 = temp_32 + temp_16;\n        quotient_high = quotient_low_16 - 1;\n        if ((is_borrow == false) && (temp_32 <= temp_32_3 && temp_32_3 - temp_32 != 0)) {\n          quotient_high = quotient_low_16 - 2;\n          temp_32 = temp_32 + temp_16;\n        }\n      }\n      quotient_high = quotient_high | divisor_high_16 << 0x10;\n      product = (ulonglong)quotient_high * (ulonglong)(divisor_high << (shift_amount & 0xff));\n      divisor_high_16 = (uint)((ulonglong)product >> 0x20);\n      if ((temp_32 - temp_32_3 < divisor_high_16) ||\n         ((quotient_low = 0, temp_32 - temp_32_3 == divisor_high_16 && (dividend_high << (shift_amount & 0xff) < (uint)product)))) {\n        quotient_high = quotient_high - 1;\n        quotient_low = 0;\n      }\n    }\n  }\n  if (is_dividend_negative != 0) {\n    is_borrow = quotient_high != 0;\n    quotient_high = -quotient_high;\n    quotient_low = -quotient_low - (uint)is_borrow;\n  }\n  return CONCAT44(quotient_low,quotient_high);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847e0",
            "calling": [
                "FUN_0008477c"
            ],
            "imported": false,
            "current_name": "improved_division_000847e0"
        },
        "FUN_0008105c": {
            "renaming": {
                "FUN_0008105c": "set_bit_in_integer_0008105c",
                "param_1": "integer_ptr",
                "param_2": "bit_position",
                "*(int *)(param_1 + 0x14)": "*(integer_ptr + 0x14)"
            },
            "code": "void set_bit_in_integer_0008105c(int* integer_ptr,uint bit_position){\n  int bit_mask = 1 << (bit_position & 0xff);\n  *(integer_ptr + 0x14) = bit_mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008105c",
            "calling": [
                "FUN_00081210"
            ],
            "imported": false,
            "current_name": "set_bit_in_integer_0008105c"
        },
        "FUN_0008456c": {
            "renaming": {
                "FUN_0008456c": "process_data_0008456c",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "flag",
                "param_4": "result",
                "uVar1": "function_result",
                "iVar2": "function_status",
                "pcVar3": "function_pointer",
                "auStack_24": "temporary_data"
            },
            "code": "void process_data_0008456c(int* data, int data_size, int flag, int* result)\n{\n  undefined4 function_result;\n  int function_status;\n  code *function_pointer;\n  undefined temporary_data[12];\n  if (data_size == 0) {\n    function_pointer = *(code **)PTR_DAT_000845b8;\n    function_result = get_data_flag();\n    function_status = (*function_pointer)(data, temporary_data, 0, function_result, result);\n  }\n  else {\n    function_pointer = *(code **)PTR_DAT_000845b8;\n    function_result = get_data_flag();\n    function_status = (*function_pointer)(data, data_size, flag, function_result, result);\n  }\n  if (function_status == -1) {\n    *result = 0;\n    *data = 0x8a;\n  }\n  return;\n}",
            "called": [
                "FUN_000845bc",
                "FUN_00084290"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008456c",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "process_data_0008456c"
        },
        "FUN_00080aba": {
            "renaming": {
                "FUN_00080aba": "do_nothing_00080aba"
            },
            "code": "\nvoid do_nothing_00080aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aba",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aba"
        },
        "FUN_00080abc": {
            "renaming": {
                "FUN_00080abc": "do_nothing_00080abc"
            },
            "code": "\nvoid do_nothing_00080abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080abc",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080abc"
        },
        "FUN_000811b4": {
            "renaming": {
                "FUN_000811b4": "set_memory_page_flag_000811b4",
                "param_1": "page_address",
                "param_2": "flag",
                "*(undefined4 *)(param_2 + 4)": "*(page_address + 1)"
            },
            "code": "void set_memory_page_flag_000811b4(int *page_address, int flag) {\n  *(page_address + 1) = flag;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b4",
            "calling": [
                "FUN_000846b4"
            ],
            "imported": false,
            "current_name": "set_memory_page_flag_000811b4"
        },
        "FUN_000816d4": {
            "renaming": {
                "FUN_000816d4": "set_data_to_0x8000_000816d4",
                "DAT_000816dc": "data"
            },
            "code": "void set_data_to_0x8000_000816d4(void)\n{\n  int* DAT_000816dc_ptr = (int*)(DAT_000816dc + 4);\n  *DAT_000816dc_ptr = 0x8000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d4",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "set_data_to_0x8000_000816d4"
        },
        "FUN_00083f34": {
            "renaming": {
                "FUN_00083f34": "process_data_00083f34",
                "param_1": "output_buffer",
                "param_2": "input_buffer",
                "param_3": "data_buffer",
                "iVar1": "result",
                "uVar2": "temp_var1",
                "uVar3": "input_flags",
                "uVar4": "input_length",
                "puVar5": "data_ptr1",
                "puVar6": "data_ptr2",
                "uVar7": "data_var1",
                "uVar8": "data_var2",
                "uVar9": "data_var3",
                "uVar10": "data_var4",
                "uVar11": "data_var5",
                "local_2c": "data_var6"
            },
            "code": "\nundefined4 process_data_00083f34(undefined4 *output_buffer,uint *input_buffer,uint **data_buffer)\n\n{\n  int result;\n  uint temp_var1;\n  ushort input_flags;\n  uint input_length;\n  uint *data_ptr1;\n  uint *data_ptr2;\n  uint data_var1;\n  uint data_var2;\n  uint data_var3;\n  uint data_var4;\n  uint data_var5;\n  uint data_var6;\n  \n  if (data_buffer[2] != (uint *)0x0) {\n    input_flags = *(ushort *)(input_buffer + 3);\n    input_length = (uint)input_flags;\n    if (((int)(input_length << 0x1c) < 0) && (input_buffer[4] != 0)) {\n      data_ptr2 = *data_buffer;\n      temp_var1 = DAT_00084244;\n    }\n    else {\n      result = FUN_00083808(output_buffer,input_buffer);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      input_flags = *(ushort *)(input_buffer + 3);\n      input_length = (uint)input_flags;\n      data_ptr2 = *data_buffer;\n      temp_var1 = DAT_00084244;\n    }\n    DAT_00084244 = temp_var1;\n    if ((input_flags & 2) == 0) {\n      temp_var1 = input_length & 2;\n      data_var2 = input_length & 1;\n      data_var1 = temp_var1;\n      data_var4 = temp_var1;\n      data_var6 = temp_var1;\n      data_var3 = data_var2;\n      if (data_var2 == 0) {\n        while( true ) {\n          while (data_var2 == 0) {\n            data_var3 = *data_ptr2;\n            data_ptr1 = data_ptr2 + 1;\n            data_ptr2 = data_ptr2 + 2;\n            data_var2 = *data_ptr1;\n          }\n          temp_var1 = input_buffer[2];\n          if ((int)(input_length << 0x16) < 0) {\n            if (data_var2 < temp_var1) {\n              input_length = *input_buffer;\n              temp_var1 = data_var2;\n            }\n            else if ((input_length & 0x480) == 0) {\n              input_length = *input_buffer;\n            }\n            else {\n              result = *input_buffer - input_buffer[4];\n              temp_var1 = result + 1 + data_var2;\n              data_var1 = (int)(input_buffer[5] * 3) / 2;\n              if (temp_var1 <= data_var1) {\n                temp_var1 = data_var1;\n              }\n              if ((int)(input_length << 0x15) < 0) {\n                data_var1 = FUN_00081e14(output_buffer,temp_var1);\n                if (data_var1 == 0) {\n                  *output_buffer = 0xc;\n                  input_flags = *(ushort *)(input_buffer + 3);\n                  goto LAB_00084030;\n                }\n                FUN_0008234c(data_var1,input_buffer[4],result);\n                *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                data_var1 = FUN_000825b0(output_buffer);\n                if (data_var1 == 0) {\n                  FUN_00083d9c(output_buffer,input_buffer[4]);\n                  input_flags = *(ushort *)(input_buffer + 3) & 0xff7f;\n                  *output_buffer = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              input_length = data_var1 + result;\n              input_buffer[4] = data_var1;\n              input_buffer[5] = temp_var1;\n              *input_buffer = input_length;\n              input_buffer[2] = temp_var1 - result;\n              temp_var1 = data_var2;\n            }\n            FUN_00082438(input_length,data_var3,temp_var1);\n            input_buffer[2] = input_buffer[2] - temp_var1;\n            *input_buffer = *input_buffer + temp_var1;\n            temp_var1 = data_var2;\n          }\n          else if ((input_buffer[4] < *input_buffer) || (input_length = input_buffer[5], data_var2 < input_length)) {\n            if (data_var2 < temp_var1) {\n              temp_var1 = data_var2;\n            }\n            FUN_00082438(*input_buffer,data_var3,temp_var1);\n            input_length = input_buffer[2];\n            input_buffer[2] = input_length - temp_var1;\n            *input_buffer = *input_buffer + temp_var1;\n            if ((input_length - temp_var1 == 0) && (result = FUN_00083adc(output_buffer,input_buffer), result != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            temp_var1 = 0x7fffffff;\n            if (data_var2 < 0x7fffffff) {\n              temp_var1 = data_var2;\n            }\n            temp_var1 = (*(code *)input_buffer[9])(output_buffer,input_buffer[7],data_var3,(temp_var1 / input_length) * input_length);\n            if ((int)temp_var1 < 1) goto LAB_0008402e;\n          }\n          data_ptr1 = data_buffer[2];\n          data_var2 = data_var2 - temp_var1;\n          data_buffer[2] = (uint *)((int)data_ptr1 - temp_var1);\n          if ((uint *)((int)data_ptr1 - temp_var1) == (uint *)0x0) break;\n          input_length = (uint)*(ushort *)(input_buffer + 3);\n          data_var3 = data_var3 + temp_var1;\n        }\n      }\n      else {\n        do {\n          while (temp_var1 == 0) {\n            data_var4 = *data_ptr2;\n            temp_var1 = data_ptr2[1];\n            data_var6 = 0;\n            data_ptr2 = data_ptr2 + 2;\n          }\n          if (data_var6 == 0) {\n            result = FUN_00084384(data_var4,10,temp_var1);\n            if (result == 0) {\n              data_var1 = temp_var1 + 1;\n              data_var6 = 1;\n            }\n            else {\n              data_var1 = (result + 1) - data_var4;\n              data_var6 = 1;\n            }\n          }\n          data_var2 = *input_buffer;\n          input_length = data_var1;\n          if (temp_var1 <= data_var1) {\n            input_length = temp_var1;\n          }\n          data_var3 = input_buffer[5];\n          if ((input_buffer[4] < data_var2) && (data_var5 = input_buffer[2] + data_var3, (int)data_var5 < (int)input_length)) {\n            FUN_00082438(data_var2,data_var4,data_var5);\n            *input_buffer = *input_buffer + data_var5;\n            result = FUN_00083adc(output_buffer,input_buffer);\n            if (result != 0) goto LAB_0008402e;\n          }\n          else if ((int)input_length < (int)data_var3) {\n            FUN_00082438(data_var2,data_var4,input_length);\n            input_buffer[2] = input_buffer[2] - input_length;\n            *input_buffer = input_length + *input_buffer;\n            data_var5 = input_length;\n          }\n          else {\n            data_var5 = (*(code *)input_buffer[9])(output_buffer,input_buffer[7],data_var4,data_var3);\n            if ((int)data_var5 < 1) goto LAB_0008402e;\n          }\n          data_var1 = data_var1 - data_var5;\n          if ((data_var1 == 0) && (result = FUN_00083adc(output_buffer,input_buffer), data_var6 = data_var1, result != 0))\n          goto LAB_0008402e;\n          data_ptr1 = data_buffer[2];\n          data_var4 = data_var4 + data_var5;\n          temp_var1 = temp_var1 - data_var5;\n          data_buffer[2] = (uint *)((int)data_ptr1 - data_var5);\n        } while ((uint *)((int)data_ptr1 - data_var5) != (uint *)0x0);\n      }\n    }\n    else {\n      data_var1 = 0;\n      input_length = 0;\n      do {\n        while( true ) {\n          data_var4 = input_length;\n          if (temp_var1 <= input_length) {\n            data_var4 = temp_var1;\n          }\n          if (input_length != 0) break;\n          data_var1 = *data_ptr2;\n          input_length = data_ptr2[1];\n          data_ptr2 = data_ptr2 + 2;\n        }\n        result = (*(code *)input_buffer[9])(output_buffer,input_buffer[7],data_var1,data_var4);\n        if (result < 1) {\nLAB_0008402e:\n          input_flags = *(ushort *)(input_buffer + 3);\nLAB_00084030:\n          *(ushort *)(input_buffer + 3) = input_flags | 0x40;\n          return 0xffffffff;\n        }\n        data_ptr1 = data_buffer[2];\n        data_var1 = data_var1 + result;\n        input_length = input_length - result;\n        data_buffer[2] = (uint *)((int)data_ptr1 - result);\n      } while ((uint *)((int)data_ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00083d9c",
                "FUN_000825b0",
                "FUN_0008234c",
                "FUN_00084384",
                "FUN_00082438",
                "FUN_00083808",
                "FUN_00083adc",
                "FUN_00081e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083f34",
            "calling": [
                "FUN_00082ac0"
            ],
            "imported": false,
            "current_name": "process_data_00083f34"
        },
        "FUN_00080d7a": {
            "renaming": {
                "FUN_00080d7a": "set_parameters_in_array_00080d7a",
                "param_1": "array",
                "param_2": "value",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5",
                "0x11": "17",
                "0x18": "24",
                "0x19": "25",
                "0x15": "21",
                "0x14": "20",
                "0xd": "13",
                "0xc": "12"
            },
            "code": "void set_parameters_in_array_00080d7a(int *array, int value, int param_3, int param_4, int param_5) {\n  array[17] = value;\n  if (param_5 == 0) {\n    array[24] = value;\n  }\n  else {\n    array[25] = value;\n  }\n  if (param_4 == 0) {\n    array[21] = value;\n  }\n  else {\n    array[20] = value;\n  }\n  if (param_3 == 0) {\n    array[13] = value;\n  }\n  else {\n    array[12] = value;\n  }\n  array[4] = value;\n  *array = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d7a",
            "calling": [
                "FUN_00081318",
                "FUN_00080da0"
            ],
            "imported": false,
            "current_name": "set_parameters_in_array_00080d7a"
        },
        "FUN_00080e9c": {
            "renaming": {
                "FUN_00080e9c": "initializeMemory_00080e9c",
                "puVar1": "memoryPtr",
                "iVar2": "memoryVar",
                "DAT_00080f08": "ptr1",
                "DAT_00080f0c": "var1",
                "DAT_00080f10": "var3",
                "DAT_00080f14": "var2",
                "DAT_00080f18": "var4",
                "DAT_00080f20": "ptr2"
            },
            "code": "void initializeMemory_00080e9c(void)\n{\n    uint32_t *memoryPtr;\n    int32_t memoryVar;\n\n    memoryPtr = DAT_00080f08;\n    *DAT_00080f08 = 0x400;\n    memoryPtr[0x80] = 0x400;\n    memoryVar = DAT_00080f0c;\n    if (-1 < *(int32_t *)(DAT_00080f0c + 0x20) << 7) {\n        *(uint32_t *)(DAT_00080f0c + 0x20) = DAT_00080f14;\n        while (-1 < *(int32_t *)(memoryVar + 0x68) << 0x1f);\n    }\n    *(uint32_t *)(memoryVar + 0x20) = DAT_00080f10;\n    while (-1 < *(int32_t *)(memoryVar + 0x68) << 0xf);\n    *(uint32_t *)(DAT_00080f0c + 0x30) = *(uint32_t *)(DAT_00080f0c + 0x30) & 0xfffffffc | 1;\n    while (-1 < *(int32_t *)(memoryVar + 0x68) << 0x1c);\n    *(uint32_t *)(DAT_00080f0c + 0x28) = DAT_00080f18;\n    while (-1 < *(int32_t *)(memoryVar + 0x68) << 0x1e);\n    *(uint32_t *)(DAT_00080f0c + 0x30) = 0x11;\n    while (-1 < *(int32_t *)(memoryVar + 0x68) << 0x1c);\n    *(uint32_t *)(DAT_00080f0c + 0x30) = 0x12;\n    while (-1 < *(int32_t *)(memoryVar + 0x68) << 0x1c);\n    *DAT_00080f20 = var5;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e9c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "initializeMemory_00080e9c"
        },
        "FUN_00084464": {
            "renaming": {
                "FUN_00084464": "process_data_00084464",
                "param_1": "data_buffer",
                "param_2": "buffer_size",
                "param_3": "unused_param1",
                "param_4": "unused_param2",
                "sVar1": "data_value",
                "puVar2": "data_pointer",
                "iVar3": "status_code",
                "uVar4": "flags",
                "unaff_r4": "unused_reg1",
                "unaff_r5": "unused_reg2",
                "unaff_r6": "unused_reg3",
                "in_lr": "unused_reg4"
            },
            "code": "void process_data_00084464(int *data_buffer, int buffer_size, undefined4 unused_param1, undefined4 unused_param2) {\n  short data_value;\n  undefined *data_pointer;\n  int status_code;\n  ushort flags;\n  undefined4 unused_reg1;\n  undefined4 unused_reg2;\n  undefined4 unused_reg3;\n  undefined4 unused_reg4;\n\n  flags = *(ushort *)(buffer_size + 0xc);\n  if ((int)((uint)flags << 0x17) < 0) {\n    FUN_00084700(data_buffer,(int)*(short *)(buffer_size + 0xe),0,2);\n    flags = *(ushort *)(buffer_size + 0xc);\n  }\n  *(ushort *)(buffer_size + 0xc) = flags & 0xefff;\n  data_pointer = PTR_DAT_000845fc;\n  data_value = *(short *)(buffer_size + 0xe);\n  *(undefined4 *)PTR_DAT_000845fc = 0;\n  status_code = FUN_000811cc((int)data_value, unused_param1, unused_param2, unused_param2, unused_reg1, unused_reg2, unused_reg3, unused_reg4);\n  if ((status_code == -1) && (*(int *)data_pointer != 0)) {\n    *data_buffer = *(int *)data_pointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084464",
            "calling": [],
            "imported": false,
            "current_name": "process_data_00084464"
        },
        "FUN_000811ae": {
            "renaming": {
                "FUN_000811ae": "returnNegativeOne_000811ae",
                "undefined4": "int32_t",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int32_t returnNegativeOne_000811ae(void) {\n    int32_t result = -1;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ae",
            "calling": [],
            "imported": false,
            "current_name": "returnNegativeOne_000811ae"
        },
        "FUN_0008118c": {
            "renaming": {
                "FUN_0008118c": "sum_and_return_previous_0008118c",
                "param_1": "new_value",
                "puVar1": "data_pointer",
                "iVar2": "previous_value"
            },
            "code": "int sum_and_return_previous_0008118c(int new_value)\n{\n    undefined *data_pointer;\n    int previous_value;\n\n    data_pointer = PTR_DAT_000811a0;\n    if (*(int *)PTR_DAT_000811a0 == 0) {\n        *(undefined4 *)PTR_DAT_000811a0 = DAT_000811a4;\n    }\n    previous_value = *(int *)data_pointer;\n    *(int *)data_pointer = new_value + previous_value;\n    return previous_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008118c",
            "calling": [
                "FUN_00082970"
            ],
            "imported": false,
            "current_name": "sum_and_return_previous_0008118c"
        },
        "FUN_00082a50": {
            "renaming": {
                "FUN_00082a50": "count_bytes_until_null_00082a50",
                "param_1": "address",
                "iVar1": "alignment_offset",
                "puVar2": "address_ptr",
                "uVar3": "word",
                "bVar4": "byte_is_null"
            },
            "code": "int count_bytes_until_null_00082a50(uint32_t address)\n{\n  int byte_count = 0;\n  uint32_t *address_ptr = (uint32_t *)(address & 0xfffffffc);\n  int alignment_offset = -(address & 3);\n  uint32_t word = *address_ptr;\n  if ((address & 3) != 0) {\n    word |= 0xffffffffU >> ((alignment_offset + 4U & 0x1f) << 3);\n  }\n  while (address_ptr++, (word + 0xfefefeff & ~word & 0x80808080) == 0) {\n    alignment_offset += 4;\n    word = *address_ptr;\n  }\n  bool byte_is_null = (word & 0xff) == 0;\n  if (!byte_is_null) {\n    alignment_offset += 1;\n    byte_is_null = (word & 0xff00) == 0;\n  }\n  if (!byte_is_null) {\n    alignment_offset += 1;\n    byte_is_null = (word & 0xff0000) == 0;\n  }\n  if (!byte_is_null) {\n    alignment_offset += 1;\n  }\n  return alignment_offset;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082a50",
            "calling": [
                "FUN_00082b38",
                "FUN_00081682"
            ],
            "imported": false,
            "current_name": "count_bytes_until_null_00082a50"
        },
        "FUN_0008106e": {
            "renaming": {
                "FUN_0008106e": "store_parameter_at_offset_0008106e",
                "param_1": "base_address",
                "param_2": "parameter_value",
                "*(undefined4 *)(param_1 + 0x28)": "*(int *)(base_address + offset)"
            },
            "code": "void store_parameter_at_offset_0008106e(int base_address, int offset, int parameter_value)\n{\n  *(int *)(base_address + offset) = parameter_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008106e",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "store_parameter_at_offset_0008106e"
        },
        "FUN_000811c2": {
            "renaming": {
                "FUN_000811c2": "returnZero_000811c2"
            },
            "code": "int returnZero_000811c2(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c2",
            "calling": [
                "FUN_00084700"
            ],
            "imported": false,
            "current_name": "returnZero_000811c2"
        },
        "FUN_000811c6": {
            "renaming": {
                "FUN_000811c6": "returnZero_000811c6"
            },
            "code": "int returnZero_000811c6() {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c6",
            "calling": [
                "FUN_00084728"
            ],
            "imported": false,
            "current_name": "returnZero_000811c6"
        },
        "FUN_00083d00": {
            "renaming": {
                "FUN_00083d00": "calculate_offset_00083d00",
                "param_1": "base_address",
                "param_2": "size",
                "iVar1": "data",
                "puVar2": "ptr",
                "iVar3": "result",
                "uVar4": "address",
                "iVar5": "offset"
            },
            "code": "int calculate_offset_00083d00(uint32_t base_address, int size) {\n  int offset;\n  uint32_t address = *(uint32_t *)(*(int *)(base_address + 8) + 4) & 0xfffffffc;\n  offset = ((address - size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < offset) {\n    int result = FUN_00082970(base_address,0);\n    if (result == *(int *)(base_address + 8) + address) {\n      result = FUN_00082970(base_address,-offset);\n      undefined *ptr = PTR_DAT_00083d94;\n      if (result != -1) {\n        int new_size = *(int *)PTR_DAT_00083d94;\n        *(uint *)(*(int *)(base_address + 8) + 4) = address - offset | 1;\n        *(int *)ptr = new_size - offset;\n        do_nothing_0008259c(base_address);\n        return 1;\n      }\n      int new_address = FUN_00082970(base_address,0);\n      ptr = PTR_DAT_00083d94;\n      uint32_t diff = new_address - *(int *)(base_address + 8);\n      if (0xf < (int)diff) {\n        int old_size = *DAT_00083d98;\n        *(uint *)(*(int *)(base_address + 8) + 4) = diff | 1;\n        *(int *)ptr = new_address - old_size;\n      }\n    }\n  }\n  do_nothing_0008259c(base_address);\n  return 0;\n}",
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00082970"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d00",
            "calling": [
                "FUN_00083d9c"
            ],
            "imported": false,
            "current_name": "calculate_offset_00083d00"
        }
    },
    "used_tokens": 120596,
    "layers": [
        [
            "FUN_000816a8",
            "FUN_00081042",
            "FUN_00082ac0",
            "FUN_00080ce0",
            "FUN_00081682",
            "FUN_000815fe",
            "FUN_00081d1c",
            "FUN_000847ac",
            "FUN_00080118",
            "FUN_00081c94",
            "FUN_00083b14",
            "FUN_000842a4",
            "FUN_000846a4",
            "FUN_00080f24",
            "FUN_00080e04",
            "FUN_000804a8",
            "FUN_000802da",
            "FUN_00080f9c",
            "FUN_00081210",
            "FUN_00081454",
            "FUN_00084728",
            "FUN_00083c40",
            "FUN_000813e4",
            "FUN_00084290",
            "FUN_000846b4",
            "FUN_000813a8",
            "FUN_00083d9c",
            "FUN_00081bf4",
            "FUN_00081d7c",
            "FUN_00081c5c",
            "FUN_00081388",
            "FUN_00082994",
            "FUN_00080c0c",
            "FUN_00080d2e",
            "FUN_000844c4",
            "FUN_0008189c",
            "FUN_0008234c",
            "FUN_00080a68",
            "FUN_0008165c",
            "FUN_000815f8",
            "FUN_00084384",
            "FUN_00081034",
            "FUN_00083974",
            "FUN_00084700",
            "thunk_FUN_00081714",
            "FUN_00081ca8",
            "FUN_00081318",
            "FUN_00081714",
            "FUN_0008449c",
            "FUN_0008477c",
            "FUN_000801b0",
            "FUN_000813c2",
            "FUN_000814e4",
            "FUN_00080d54",
            "FUN_0008021c",
            "FUN_00081e04",
            "FUN_00084750",
            "FUN_00080ae4",
            "FUN_00081d5c",
            "FUN_00082970",
            "FUN_000811be",
            "FUN_00081c54",
            "FUN_0008163a",
            "FUN_000825a0",
            "FUN_000815d4",
            "FUN_00080164",
            "FUN_000811cc",
            "FUN_000846dc",
            "FUN_00081894",
            "FUN_000845bc",
            "FUN_00082504",
            "FUN_000800f4",
            "FUN_0008378c",
            "FUN_00083adc",
            "FUN_000803d4",
            "FUN_0008043e",
            "FUN_0008160c",
            "FUN_00080e18",
            "FUN_00081184",
            "FUN_00084298",
            "FUN_00081066",
            "FUN_00081cd0",
            "FUN_00081df4",
            "FUN_00080410",
            "FUN_00080da0",
            "FUN_00080258",
            "FUN_00081622",
            "FUN_00082438",
            "FUN_00081508",
            "FUN_00083808",
            "FUN_0008105c",
            "FUN_0008456c",
            "FUN_000811b4",
            "FUN_000816d4",
            "FUN_00080d7a",
            "FUN_00080e9c",
            "FUN_00084464",
            "FUN_000811ae",
            "FUN_0008118c",
            "FUN_00082a50",
            "FUN_0008106e",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_00083d00"
        ],
        [
            "FUN_00081730",
            "FUN_00081734",
            "FUN_000805d0",
            "FUN_00081944",
            "FUN_00082b38",
            "FUN_00084a80",
            "FUN_00081e14",
            "FUN_000825b0",
            "FUN_000847e0",
            "FUN_00083f34"
        ]
    ],
    "locked_functions": []
}