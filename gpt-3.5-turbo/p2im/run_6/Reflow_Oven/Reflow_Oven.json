{
    "functions": {
        "FUN_08002470": {
            "renaming": {
                "FUN_08002470": "update_register_08002470",
                "param_1": "input_value",
                "*(uint *)(DAT_08002490 + 0xc)": "register_value",
                "register_ptr": "pointer_to_register",
                "masked_value": "register_value_masked",
                "new_value": "updated_register_value"
            },
            "code": "void update_register_08002470(uint input_value)\n{\n    uint *register_ptr = (uint *)(DAT_08002490 + 0xc);\n    uint *(uint *)(DAT_08002490 + 0xc) = *register_ptr;\n    uint masked_value = *(uint *)(DAT_08002490 + 0xc) & 0xf8ff;\n    uint new_value = (input_value & 7) << 8 | masked_value | 0x5fa0000;\n    *register_ptr = new_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002470",
            "calling": [
                "FUN_08001c88",
                "FUN_08005f5e"
            ],
            "imported": false,
            "current_name": "update_register_08002470"
        },
        "FUN_08007004": {
            "renaming": {
                "FUN_08007004": "set_memory_permissions_08007004",
                "param_1": "result",
                "param_2": "address",
                "param_3": "size",
                "param_4": "permissions",
                "puVar1": "PTR_DAT",
                "iVar2": "set_memory_result"
            },
            "code": "void set_memory_permissions_08007004(int *result, int address, int size, int permissions, int unknown) {\n    int set_memory_result = set_memory_permissions_08007004_0800571a(address, size, size, permissions, unknown);\n    int *PTR_DAT = PTR_DAT_08007024;\n    *PTR_DAT = 0;\n    if (set_memory_result == -1 && *PTR_DAT != 0) {\n        *result = *PTR_DAT;\n    }\n}",
            "called": [
                "FUN_0800571a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007004",
            "calling": [
                "FUN_08006dc8"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_08007004"
        },
        "FUN_08006394": {
            "renaming": {
                "FUN_08006394": "process_inputs_08006394",
                "param_1": "data_ptr",
                "param_2": "input_str",
                "param_3": "output_str",
                "param_4": "memory_ptr",
                "puVar1": "ptr_1",
                "iVar2": "result",
                "piVar3": "ptr_2",
                "bVar4": "bool_val",
                "pbVar5": "input_ptr",
                "pbVar6": "input_ptr_2",
                "iVar7": "index",
                "local_8c": "memory_ptr_2",
                "local_88": "flag",
                "local_84": "precision",
                "local_80": "width",
                "local_7c": "field_width",
                "local_74": "total_output_len",
                "local_70": "specifier",
                "local_6f": "space_char",
                "local_6e": "plus_char",
                "local_45": "prefix_char",
                "local_30": "zero_padding"
            },
            "code": "\nint process_inputs_08006394(int data_ptr,undefined *input_str,byte *output_str,int *memory_ptr)\n\n{\n  undefined *ptr_1;\n  int result;\n  int *ptr_2;\n  bool bool_val;\n  byte *input_ptr;\n  byte *input_ptr_2;\n  int unaff_r9;\n  int index;\n  int *memory_ptr_2;\n  uint flag;\n  int precision;\n  undefined4 width;\n  int field_width;\n  int total_output_len;\n  byte specifier;\n  undefined space_char;\n  undefined plus_char;\n  undefined prefix_char;\n  undefined4 zero_padding;\n  \n  memory_ptr_2 = memory_ptr;\n  if ((data_ptr != 0) && (*(int *)(data_ptr + 0x18) == 0)) {\n    initialize_data_08006cb4();\n  }\n  if (input_str == PTR_DAT_080065a0) {\n    input_str = *(undefined **)(data_ptr + 4);\n  }\n  else if (input_str == PTR_DAT_080065a8) {\n    input_str = *(undefined **)(data_ptr + 8);\n  }\n  else if (input_str == PTR_DAT_080065ac) {\n    input_str = *(undefined **)(data_ptr + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(input_str + 0xc) << 0x1c)) || (*(int *)(input_str + 0x10) == 0)) &&\n     (index = check_validity_and_allocate_memory_080069e4(data_ptr,input_str), index != 0)) {\n    return -1;\n  }\n  total_output_len = 0;\n  space_char = 0x20;\n  plus_char = 0x30;\n  input_ptr = output_str;\nLAB_080063d6:\n  input_ptr_2 = input_ptr;\n  if (*input_ptr_2 != 0) goto LAB_0800648c;\n  goto LAB_080063e0;\nLAB_0800648c:\n  input_ptr = input_ptr_2 + 1;\n  if (*input_ptr_2 != 0x25) goto LAB_080063d6;\nLAB_080063e0:\n  index = (int)input_ptr_2 - (int)output_str;\n  if (index != 0) {\n    result = process_and_count_inputs_08006370(data_ptr,input_str,output_str,index);\n    if (result == -1) {\nLAB_08006580:\n      if ((int)((uint)*(ushort *)(input_str + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return total_output_len;\n    }\n    total_output_len = total_output_len + index;\n  }\n  if (*input_ptr_2 == 0) goto LAB_08006580;\n  flag = 0;\n  field_width = 0;\n  precision = -1;\n  width = 0;\n  prefix_char = 0;\n  zero_padding = 0;\n  input_ptr = input_ptr_2 + 1;\n  while( true ) {\n    index = find_character_in_string_08006e90(PTR_s___0__080065a4,*input_ptr);\n    ptr_1 = PTR_DAT_080065b0;\n    output_str = input_ptr + 1;\n    if (index == 0) break;\n    flag = 1 << (index - (int)PTR_s___0__080065a4 & 0xffU) | flag;\n    input_ptr = output_str;\n  }\n  if ((int)(flag << 0x1b) < 0) {\n    prefix_char = 0x20;\n  }\n  if ((int)(flag << 0x1c) < 0) {\n    prefix_char = 0x2b;\n  }\n  if (*input_ptr == 0x2a) {\n    ptr_2 = memory_ptr_2 + 1;\n    index = *memory_ptr_2;\n    memory_ptr_2 = ptr_2;\n    if (-1 < index) goto LAB_080064b0;\n    field_width = -index;\n    flag = flag | 2;\n  }\n  else {\n    bool_val = false;\n    index = field_width;\n    output_str = input_ptr;\n    while( true ) {\n      if (9 < *output_str - 0x30) break;\n      index = index * 10 + (*output_str - 0x30);\n      bool_val = true;\n      output_str = output_str + 1;\n    }\n    if (bool_val) {\nLAB_080064b0:\n      field_width = index;\n    }\n  }\n  if (*output_str == 0x2e) {\n    if (output_str[1] == 0x2a) {\n      output_str = output_str + 2;\n      ptr_2 = memory_ptr_2 + 1;\n      precision = *memory_ptr_2;\n      memory_ptr_2 = ptr_2;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      bool_val = false;\n      index = 0;\n      precision = 0;\n      while( true ) {\n        output_str = output_str + 1;\n        if (9 < *output_str - 0x30) break;\n        index = index * 10 + (*output_str - 0x30);\n        bool_val = true;\n      }\n      if (bool_val) {\n        precision = index;\n      }\n    }\n  }\n  index = find_character_in_string_08006e90(PTR_DAT_080065b0,*output_str,3);\n  if (index != 0) {\n    output_str = output_str + 1;\n    flag = flag | 0x40 << (index - (int)ptr_1 & 0xffU);\n  }\n  specifier = *output_str;\n  output_str = output_str + 1;\n  index = find_character_in_string_08006e90(PTR_s_efgEFG_080065b4,specifier,6);\n  if (index == 0) {\n    index = encode_and_send_string_080066b0(data_ptr,&flag,input_str,DAT_080065bc,&memory_ptr_2);\n  }\n  else {\n    index = data_ptr;\n    if (DAT_080065b8 == 0) {\n      memory_ptr_2 = (int *)(((int)memory_ptr_2 + 7U & 0xfffffff8) + 8);\n      index = unaff_r9;\n      goto LAB_08006532;\n    }\n  }\n  if (index == -1) goto LAB_08006580;\nLAB_08006532:\n  total_output_len = total_output_len + index;\n  input_ptr = output_str;\n  unaff_r9 = index;\n  goto LAB_080063d6;\n}\n\n",
            "called": [
                "FUN_080066b0",
                "FUN_080069e4",
                "FUN_08006e90",
                "FUN_08006cb4",
                "FUN_08006370"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006394",
            "calling": [
                "FUN_08006174",
                "FUN_080068f0"
            ],
            "imported": false,
            "current_name": "process_inputs_08006394"
        },
        "FUN_08005740": {
            "renaming": {
                "FUN_08005740": "set_pointer_value_08005740",
                "PTR_DAT_0800574c": "ptr_data"
            },
            "code": "void set_pointer_value_08005740(void)\n{\n    int new_value = 22;\n    int* ptr = (int*)PTR_DAT_0800574c;\n    *ptr = new_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005740",
            "calling": [
                "FUN_08006f00"
            ],
            "imported": false,
            "current_name": "set_pointer_value_08005740"
        },
        "FUN_08006158": {
            "renaming": {
                "FUN_08006158": "calculate_result_08006158",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "DAT_08006170": "global_variable"
            },
            "code": "long long calculate_result_08006158(unsigned int input_param1, unsigned int input_param2) {\n  if (DAT_08006170 != 0) {\n    return CONCAT44(input_param1, 2);\n  }\n  return (unsigned long long)input_param2 << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006158",
            "calling": [
                "FUN_08006112"
            ],
            "imported": false,
            "current_name": "calculate_result_08006158"
        },
        "FUN_08003688": {
            "renaming": {
                "FUN_08003688": "check_and_update_values_08003688",
                "param_1": "input_params",
                "puVar1": "ptr_to_data_1",
                "puVar2": "ptr_to_data_2",
                "iVar3": "initial_value",
                "iVar4": "current_value",
                "uVar5": "return_value",
                "uVar6": "temp_value",
                "bVar7": "bool_value"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined4 check_and_update_values_08003688(uint *input_params)\n\n{\n  uint *ptr_to_data_1;\n  uint *ptr_to_data_2;\n  int initial_value;\n  int current_value;\n  undefined4 return_value;\n  uint temp_value;\n  bool bool_value;\n  \n  ptr_to_data_1 = DAT_08003948;\n  if ((*input_params & 1) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 4) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) != 0)))) {\n      if (((*DAT_08003948 & 0x20000) != 0) && (input_params[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      temp_value = input_params[1];\n      if (temp_value == 0x10000) {\n        *DAT_08003948 = *DAT_08003948 | 0x10000;\n      }\n      else if (temp_value == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (temp_value == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        *DAT_08003948 = *DAT_08003948 & 0xfffeffff;\n        *ptr_to_data_1 = *ptr_to_data_1 & 0xfffbffff;\n      }\n      if (input_params[1] == 0) {\n        initial_value = get_value_from_pointer_08001cc4();\n        while ((*DAT_08003948 & 0x20000) != 0) {\n          current_value = get_value_from_pointer_08001cc4();\n          if (100 < (uint)(current_value - initial_value)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        initial_value = get_value_from_pointer_08001cc4();\n        while ((*DAT_08003948 & 0x20000) == 0) {\n          current_value = get_value_from_pointer_08001cc4();\n          if (100 < (uint)(current_value - initial_value)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*input_params & 2) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 0) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) == 0)))) {\n      if (((*DAT_08003948 & 2) != 0) && (input_params[4] != 1)) {\n        return 1;\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | input_params[5] << 3;\n    }\n    else if (input_params[4] == 0) {\n      *DAT_0800394c = 0;\n      initial_value = get_value_from_pointer_08001cc4();\n      while ((*DAT_08003948 & 2) != 0) {\n        current_value = get_value_from_pointer_08001cc4();\n        if (2 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_0800394c = 1;\n      initial_value = get_value_from_pointer_08001cc4();\n      while ((*DAT_08003948 & 2) == 0) {\n        current_value = get_value_from_pointer_08001cc4();\n        if (2 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | input_params[5] << 3;\n    }\n  }\n  if ((*input_params & 8) != 0) {\n    if (input_params[6] == 0) {\n      *DAT_08003950 = 0;\n      initial_value = get_value_from_pointer_08001cc4();\n      while ((DAT_08003948[9] & 2) != 0) {\n        current_value = get_value_from_pointer_08001cc4();\n        if (2 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08003950 = 1;\n      initial_value = get_value_from_pointer_08001cc4();\n      while ((DAT_08003948[9] & 2) == 0) {\n        current_value = get_value_from_pointer_08001cc4();\n        if (2 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n      calculate_and_decrement_0800365c(1);\n    }\n  }\n  if ((*input_params & 4) != 0) {\n    bool_value = (DAT_08003948[7] & 0x10000000) == 0;\n    if (bool_value) {\n      DAT_08003948[7] = DAT_08003948[7] | 0x10000000;\n    }\n    if ((*DAT_08003954 & 0x100) == 0) {\n      *DAT_08003954 = *DAT_08003954 | 0x100;\n      initial_value = get_value_from_pointer_08001cc4();\n      while ((*DAT_08003954 & 0x100) == 0) {\n        current_value = get_value_from_pointer_08001cc4();\n        if (100 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n    }\n    ptr_to_data_2 = DAT_08003a60;\n    ptr_to_data_1 = DAT_08003948;\n    temp_value = input_params[3];\n    if (temp_value == 1) {\n      DAT_08003948[8] = DAT_08003948[8] | 1;\n    }\n    else if (temp_value == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (temp_value == 5) {\n      DAT_08003a60[8] = DAT_08003a60[8] | 4;\n      ptr_to_data_2[8] = ptr_to_data_2[8] | 1;\n    }\n    else {\n      DAT_08003948[8] = DAT_08003948[8] & 0xfffffffe;\n      ptr_to_data_1[8] = ptr_to_data_1[8] & 0xfffffffb;\n    }\n    if (input_params[3] == 0) {\n      initial_value = get_value_from_pointer_08001cc4();\n      while ((DAT_08003a60[8] & 2) != 0) {\n        current_value = get_value_from_pointer_08001cc4();\n        if (5000 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      initial_value = get_value_from_pointer_08001cc4();\n      while ((DAT_08003948[8] & 2) == 0) {\n        current_value = get_value_from_pointer_08001cc4();\n        if (5000 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n    }\n    if (bool_value) {\n      DAT_08003a60[7] = DAT_08003a60[7] & 0xefffffff;\n    }\n  }\n  if (input_params[7] == 0) {\n    return_value = 0;\n  }\n  else if ((DAT_08003a60[1] & 0xc) == 8) {\n    return_value = 1;\n  }\n  else if (input_params[7] == 2) {\n    *DAT_08003a64 = 0;\n    initial_value = get_value_from_pointer_08001cc4();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        if (input_params[8] == 0x10000) {\n          DAT_08003a60[1] = DAT_08003a60[1] & 0xfffdffff | input_params[2];\n        }\n        DAT_08003a60[1] = DAT_08003a60[1] & 0xffc2ffff | input_params[8] | input_params[9];\n        *DAT_08003a64 = 1;\n        initial_value = get_value_from_pointer_08001cc4();\n        do {\n          if ((*DAT_08003a60 & 0x2000000) != 0) {\n            return 0;\n          }\n          current_value = get_value_from_pointer_08001cc4();\n        } while ((uint)(current_value - initial_value) < 3);\n        return 3;\n      }\n      current_value = get_value_from_pointer_08001cc4();\n    } while ((uint)(current_value - initial_value) < 3);\n    return_value = 3;\n  }\n  else {\n    *DAT_08003a64 = 0;\n    initial_value = get_value_from_pointer_08001cc4();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        return 0;\n      }\n      current_value = get_value_from_pointer_08001cc4();\n    } while ((uint)(current_value - initial_value) < 3);\n    return_value = 3;\n  }\n  return return_value;\n}\n\n",
            "called": [
                "FUN_0800365c",
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003688",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "check_and_update_values_08003688"
        },
        "FUN_08004ec4": {
            "renaming": {
                "FUN_08004ec4": "check_and_call_function_if_valid_input_08004ec4",
                "param_1": "input_value",
                "iVar1": "subtracted_value",
                "subtract_four_from_input_08004e70": "subtract_four_from_input",
                "code": "code_ptr",
                "function_ptr": "code_ptr",
                "flag": "flag_value",
                "space_check": "space_char",
                "set_flags_on_param_08002c10": "set_flags_on_input"
            },
            "code": "void check_and_call_function_if_valid_input_08004ec4(int input_value)\n{\n    int subtracted_value = subtract_four_from_input();\n    code* function_ptr = *(code**)(subtracted_value + 0x60);\n    char flag = *(char*)(subtracted_value + 0x5c);\n    char space_check = *(char*)(subtracted_value + 0x2c);\n    if (function_ptr != NULL && flag == 0x01 && space_check != ' ')\n    {\n        (*function_ptr)(subtracted_value + 0x68);\n    }\n    set_flags_on_input(input_value);\n    return;\n}",
            "called": [
                "FUN_08002c10",
                "FUN_08004e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ec4",
            "calling": [
                "FUN_080032b4",
                "FUN_08002d1c",
                "FUN_0800316c"
            ],
            "imported": false,
            "current_name": "check_and_call_function_if_valid_input_08004ec4"
        },
        "FUN_08000178": {
            "renaming": {
                "FUN_08000178": "find_end_of_string_08000178",
                "param_1": "input_string",
                "pcVar3": "current_char_ptr",
                "pcVar2": "next_char_ptr",
                "cVar1": "current_char"
            },
            "code": "char* find_end_of_string_08000178(char* input_string) {\n    char* current_char_ptr = input_string;\n    while (*current_char_ptr != '\\0') {\n        current_char_ptr++;\n    }\n    return current_char_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000178",
            "calling": [
                "FUN_08005ce8",
                "FUN_08005c96"
            ],
            "imported": false,
            "current_name": "find_end_of_string_08000178"
        },
        "FUN_08004418": {
            "renaming": {
                "FUN_08004418": "do_nothing_08004418"
            },
            "code": "\nvoid do_nothing_08004418(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004418",
            "calling": [
                "FUN_0800441a"
            ],
            "imported": false,
            "current_name": "do_nothing_08004418"
        },
        "FUN_08006c88": {
            "renaming": {
                "FUN_08006c88": "allocate_and_initialize_memory_08006c88",
                "param_1": "memory_allocation_size",
                "param_2": "number_of_elements",
                "puVar1": "allocated_memory",
                "iVar2": "memory_block_size"
            },
            "code": "undefined4 *allocate_and_initialize_memory_08006c88(undefined4 memory_allocation_size, int number_of_elements)\n{\n  undefined4 *allocated_memory;\n  int memory_block_size;\n\n  memory_block_size = (number_of_elements - 1) * 0x68;\n  allocated_memory = (undefined4 *)allocate_memory_08006288(memory_allocation_size, memory_block_size + 0x74);\n  if (allocated_memory != (undefined4 *)0x0) {\n    *allocated_memory = 0;\n    allocated_memory[1] = number_of_elements;\n    allocated_memory[2] = allocated_memory + 3;\n    fill_memory_with_value_080061e0(allocated_memory + 3, 0, memory_block_size + 0x68);\n  }\n  return allocated_memory;\n}",
            "called": [
                "FUN_080061e0",
                "FUN_08006288"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c88",
            "calling": [
                "FUN_08006d14"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_memory_08006c88"
        },
        "FUN_080060e4": {
            "renaming": {
                "FUN_080060e4": "check_response_and_process_if_needed_080060e4",
                "iVar1": "num_bits_set",
                "count_bits_set_08005f8c": "get_num_bits_set",
                "PTR_DAT_08006100": "ptr_data_08006100",
                "process_response_080060d4": "process_response"
            },
            "code": "void check_response_and_process_if_needed_080060e4(void)\n{\n  int num_bits_set = get_num_bits_set();\n  if (*(int *)(PTR_DAT_08006100 + num_bits_set * 0x14 + 0xc) != 0) {\n    process_response();\n  }\n  return;\n}",
            "called": [
                "FUN_080060d4",
                "FUN_08005f8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060e4",
            "calling": [
                "FUN_0800282c"
            ],
            "imported": false,
            "current_name": "check_response_and_process_if_needed_080060e4"
        },
        "FUN_0800258c": {
            "renaming": {
                "FUN_0800258c": "get_data_size_0800258c",
                "param_1": "data",
                "uVar1": "data_size",
                "puVar2": "data_ptr"
            },
            "code": "uint get_data_size_0800258c(uint **data)\n{\n    uint *data_ptr = *data;\n    uint data_size = 0;\n    if (*(char *)((int)data + 0x21) != '\\x02') {\n        (*data)[0xe] = (uint *)0x4;\n        return 1;\n    }\n    *data_ptr &= 0xfffffff1;\n    *data_ptr &= 0xfffffffe;\n    if (data_ptr == PTR_DAT_0800261c) {\n        data_size = 1;\n    }\n    else if (data_ptr == PTR_DAT_0800261c + 5) {\n        data_size = 0x10;\n    }\n    else if (data_ptr == PTR_DAT_0800261c + 10) {\n        data_size = 0x100;\n    }\n    else if (data_ptr == PTR_DAT_0800261c + 0xf) {\n        data_size = 0x1000;\n    }\n    else if (data_ptr == PTR_DAT_0800261c + 0x14) {\n        data_size = 0x10000;\n    }\n    else if (data_ptr == PTR_DAT_0800261c + 0x19) {\n        data_size = 0x100000;\n    }\n    else {\n        data_size = 0x1000000;\n    }\n    *(undefined4 *)(PTR_DAT_08002620 + 4) = data_size;\n    *(undefined *)((int)data + 0x21) = 1;\n    *(undefined *)(data + 8) = 0;\n    if (data[0xd] != (uint *)0x0) {\n        (*(code *)data[0xd])();\n        return 0;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800258c",
            "calling": [
                "FUN_080046b8",
                "FUN_0800316c"
            ],
            "imported": false,
            "current_name": "get_data_size_0800258c"
        },
        "FUN_08004e20": {
            "renaming": {
                "FUN_08004e20": "execute_callbacks_if_not_null_08004e20",
                "PTR_DAT_08004e30": "ptr",
                "check_and_execute_callbacks_08003f18": "check_and_execute_callbacks"
            },
            "code": "void execute_callbacks_if_not_null_08004e20(void)\n{\n    int* PTR_DAT_08004e30 = (int*)PTR_DAT_08004e30;\n    if (*PTR_DAT_08004e30 != 0)\n    {\n        check_and_execute_callbacks_08003f18();\n    }\n    return;\n}",
            "called": [
                "FUN_08003f18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e20",
            "calling": [],
            "imported": false,
            "current_name": "execute_callbacks_if_not_null_08004e20"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "wait_forever_0800573c"
            },
            "code": "void wait_forever_0800573c(void)\n{\n  while(true)\n  {\n    // do nothing\n  }\n}",
            "called": [
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "FUN_0800573c",
                "FUN_08006ac0"
            ],
            "imported": false,
            "current_name": "wait_forever_0800573c"
        },
        "FUN_080032b4": {
            "renaming": {
                "FUN_080032b4": "process_input_080032b4",
                "param_1": "input",
                "cVar1": "current_char",
                "puVar2": "ptr1",
                "puVar3": "ptr4",
                "*param_1": "*input",
                "**param_1": "**input",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)((int)input + 0x3d)",
                "puVar2[1]": "ptr1[1]",
                "puVar2[4]": "ptr1[4]",
                "puVar2[5]": "ptr1[5]",
                "puVar2[1] & 0x800": "ptr1[1] & 0x800",
                "*(char *)((int)param_1 + 0x3d) == '\"'": "current_char == '\"'",
                "*(char *)((int)param_1 + 0x3d) == '*'": "current_char == '*'",
                "*(short *)((int)param_1 + 0x2a)": "*(int16_t *)((int)input + 0x2a)",
                "(short)*(undefined4 *)(*param_1[0xe] + 4)": "(int16_t)*(uint32_t *)(ptr3 + 1)",
                "(short)*(undefined4 *)(*param_1[0xd] + 4)": "(int16_t)*(uint32_t *)(ptr2 + 1)",
                "param_1[9]": "input[9]",
                "(int)puVar3 + 1": "ptr4++",
                "*(char *)puVar3": "*ptr4",
                "(uint)param_1[0x10] | 4": "(uint32_t)input[0x10] | 4",
                "param_1[0xb]": "input[0xb]",
                "param_1[0xc]": "input[0xc]",
                "DAT_080033b4": "DAT_080033b4",
                "*(undefined *)((int)param_1 + 0x3d)": "*(undefined *)((int)input + 0x3d)",
                "*(undefined *)((int)param_1 + 0x3e)": "*(undefined *)((int)input + 0x3e)",
                "check_and_call_function_if_valid_input_08004ec4()": "check_and_call_function_if_valid_input_08004ec4()",
                "input[0x10]": "input[0x10]",
                "do_nothing_08002ca4()": "do_nothing_08002ca4()",
                "process_input_0800316c()": "process_input_0800316c()"
            },
            "code": "uint32_t process_input_080032b4(uint32_t **input)\n{\n    char current_char = *(char *)((int)input + 0x3d);\n    uint32_t *ptr1 = *input;\n    uint32_t *ptr2 = (*input)[0xd];\n    uint32_t *ptr3 = (*input)[0xe];\n    uint32_t *ptr4 = input[9];\n    uint32_t *ptr5 = input[0x10];\n    \n    ptr1[1] &= 0xfffff8ff;\n    *ptr1 |= 1;\n    *ptr1 &= 0xfffffbff;\n    \n    if ((ptr1[1] & 0x800) != 0) {\n        if ((current_char == '\"') || (current_char == '*')) {\n            *(int16_t *)((int)input + 0x2a) = (int16_t)*(uint32_t *)(ptr3 + 1);\n        }\n        else {\n            *(int16_t *)((int)input + 0x2a) = (int16_t)*(uint32_t *)(ptr2 + 1);\n        }\n    }\n    \n    if (*(int16_t *)((int)input + 0x2a) != 0) {\n        if ((ptr1[5] & 4) != 0) {\n            *ptr4 = (uint8_t)ptr1[4];\n            ptr4++;\n            *(int16_t *)((int)input + 0x2a) -= 1;\n        }\n        if ((ptr1[5] & 0x40) != 0) {\n            *ptr4 = (uint8_t)*ptr1;\n            ptr4++;\n            *(int16_t *)((int)input + 0x2a) -= 1;\n        }\n        input[0x10] = (uint32_t *)((uint32_t)input[0x10] | 4);\n    }\n    \n    if (ptr5 == (uint32_t *)0x0) {\n        if (((current_char == '(') || (current_char == '*')) || (current_char == ')')) {\n            input[0xb] = DAT_080033b4;\n            input[0xc] = (uint32_t *)0x0;\n            *(undefined *)((int)input + 0x3d) = 0x20;\n            *(undefined *)((int)input + 0x3e) = 0;\n            check_and_call_function_if_valid_input_08004ec4();\n        }\n        else if ((input[0xc] == (uint32_t *)0x22) || (current_char == '\"')) {\n            input[0xc] = (uint32_t *)0x0;\n            *(undefined *)((int)input + 0x3d) = 0x20;\n            *(undefined *)((int)input + 0x3e) = 0;\n            do_nothing_08002ca4();\n        }\n    }\n    else {\n        process_input_080032b4_0800316c();\n    }\n    return 0;\n}",
            "called": [
                "FUN_08002ca4",
                "FUN_08004ec4",
                "FUN_0800316c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032b4",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_080032b4"
        },
        "FUN_08004d06": {
            "renaming": {
                "FUN_08004d06": "find_non_zero_number_08004d06",
                "param_1": "num1",
                "param_2": "num2"
            },
            "code": "int find_non_zero_number_08004d06(int num1, int num2) {\n  if (num1 != num2) {\n    if (num1 == 0) {\n      return num2;\n    }\n    if (num2 == 0) {\n      return num1;\n    }\n    num1 = 0;\n  }\n  return num1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d06",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "find_non_zero_number_08004d06"
        },
        "FUN_080056d8": {
            "renaming": {
                "FUN_080056d8": "find_offset_080056d8",
                "param_1": "offset",
                "iVar1": "current_offset",
                "puVar2": "new_offset"
            },
            "code": "int find_offset_080056d8(int offset) {\n  int current_offset = *(int *)PTR_DAT_08005708;\n  undefined *new_offset = (undefined *)(offset + current_offset);\n  if (new_offset <= &stack0x00000000) {\n    *(undefined **)PTR_DAT_08005708 = new_offset;\n    return current_offset;\n  }\n  *(undefined4 *)PTR_DAT_08005710 = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d8",
            "calling": [
                "FUN_08006920"
            ],
            "imported": false,
            "current_name": "find_offset_080056d8"
        },
        "FUN_080019f6": {
            "renaming": {
                "FUN_080019f6": "validate_input_080019f6",
                "param_1": "input",
                "iVar1": "is_null",
                "uVar2": "input_ptr_1",
                "uVar3": "data_ptr_1",
                "uVar4": "data_ptr_2",
                "uVar5": "input_ptr_2"
            },
            "code": "void validate_input_080019f6(int input)\n{\n    int is_null;\n    undefined4 *data_ptr_1;\n    undefined4 *data_ptr_2;\n    undefined4 *input_ptr_1;\n    undefined4 *input_ptr_2;\n\n    data_ptr_1 = *(undefined4 **)(input + 0x3c);\n    data_ptr_2 = *(undefined4 **)(input + 0x3c) + 1;\n    *(undefined4 *)(input + 0x48) = data_ptr_1;\n    *(undefined4 *)(input + 0x4c) = data_ptr_2;\n    input_ptr_1 = *(undefined4 **)(input + 0x38) + 1;\n    input_ptr_2 = *(undefined4 **)(input + 0x38);\n    *(undefined4 *)(input + 0x50) = *input_ptr_2;\n    *(undefined4 *)(input + 0x54) = *input_ptr_1;\n    is_null = is_input_null_08000a18_08000a18(data_ptr_1, data_ptr_2, *(undefined4 *)(input + 0x68), *(undefined4 *)(input + 0x6c));\n    if (is_null == 0) {\n        if (is_input_valid_080009dc(data_ptr_1, data_ptr_2, *(undefined4 *)(input + 0x60), *(undefined4 *)(input + 100)) != 0) {\n            *(undefined4 *)(input + 0x48) = *(undefined4 *)(input + 0x60);\n            *(undefined4 *)(input + 0x4c) = *(undefined4 *)(input + 100);\n        }\n    } else {\n        *(undefined4 *)(input + 0x48) = *(undefined4 *)(input + 0x68);\n        *(undefined4 *)(input + 0x4c) = *(undefined4 *)(input + 0x6c);\n    }\n}\n",
            "called": [
                "FUN_08000a18",
                "FUN_080009dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019f6",
            "calling": [
                "FUN_08001a44"
            ],
            "imported": false,
            "current_name": "validate_input_080019f6"
        },
        "FUN_08002f9c": {
            "renaming": {
                "FUN_08002f9c": "process_input_08002f9c",
                "param_1": "input_ptr",
                "puVar1": "output",
                "current_char": "current_char",
                "length": "length",
                "input": "input",
                "output": "output"
            },
            "code": "uint32_t process_input_08002f9c(uint32_t **input_ptr)\n{\n    uint32_t *input = *input_ptr;\n    char current_char = *(char *)((int)input_ptr + 0x3d);\n    if (current_char == '\"') {\n        uint16_t length = *(uint16_t *)((int)input_ptr + 0x2a);\n        if (length < 4) {\n            if (length == 2) {\n                if (input[0xb] == (uint32_t *)0x2) {\n                    *input = *input | 0x400;\n                }\n                else {\n                    *input = *input & 0xfffffbff;\n                    *input = *input | 0x800;\n                }\n                input[1] = input[1] & 0xfffffbff;\n            }\n            else {\n                if (input[0xb] == (uint32_t *)0x2) {\n                    *input = *input | 0x400;\n                }\n                else {\n                    *input = *input & 0xfffffbff;\n                }\n                input[1] = input[1] & 0xfffff8ff;\n                uint32_t *output = input[9];\n                input[9] = output + 1;\n                *(char *)output = (char)input[4];\n                *(uint16_t *)((int)input_ptr + 0x2a) = *(uint16_t *)((int)input_ptr + 0x2a) - 1;\n                *(char *)((int)input_ptr + 0x3d) = 0x20;\n                input[0xc] = (uint32_t *)0x0;\n                if (*(char *)((int)input_ptr + 0x3e) == '@') {\n                    *(char *)((int)input_ptr + 0x3e) = 0;\n                    do_nothing();\n                }\n                else {\n                    *(char *)((int)input_ptr + 0x3e) = 0;\n                    do_nothing_2();\n                }\n            }\n        }\n        else {\n            uint32_t *output = input[9];\n            input[9] = output + 1;\n            *(char *)output = (char)input[4];\n            *(uint16_t *)((int)input_ptr + 0x2a) = *(uint16_t *)((int)input_ptr + 0x2a) - 1;\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_08002c50",
                "FUN_08002f9a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9c",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_08002f9c"
        },
        "FUN_08005510": {
            "renaming": {
                "FUN_08005510": "validate_combination_08005510",
                "param_1": "combination",
                "param_2": "value",
                "param_3": "index",
                "param_4": "flag",
                "iVar1": "isValid",
                "uVar2": "combinationIndex",
                "PTR_DAT_0800555c": "combinationList",
                "PTR_DAT_08005560": "combinationIndexList",
                "set_bits_08002494": "set_bits",
                "set_bit_at_index_080024f8": "set_bit_at_index",
                "validate_input_080045a2": "validate_input",
                "*(undefined4 *)(PTR_DAT_08005564 + (uint)*(byte *)(param_1 + 0x44) * 4)": "combinationValueList[combinationIndex]",
                "*(byte *)(param_1 + 0x44)": "combinationIndex",
                "*(int *)(PTR_DAT_0800555c + uVar2 * 4)": "value",
                "*(int *)(PTR_DAT_08005560 + uVar2 * 4)": "combination",
                "*(char *)(param_1 + 0x5a)": "flag"
            },
            "code": "validate_combination_08005510vvalidate_combination_08005510ovalidate_combination_08005510ivalidate_combination_08005510dvalidate_combination_08005510 validate_combination_08005510vvalidate_combination_08005510avalidate_combination_08005510lvalidate_combination_08005510ivalidate_combination_08005510dvalidate_combination_08005510avalidate_combination_08005510tvalidate_combination_08005510evalidate_combination_08005510_validate_combination_08005510*validate_combination_08005510(validate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510tvalidate_combination_08005510 validate_combination_08005510*validate_combination_08005510)validate_combination_08005510(validate_combination_08005510Pvalidate_combination_08005510Tvalidate_combination_08005510Rvalidate_combination_08005510_validate_combination_08005510Dvalidate_combination_08005510Avalidate_combination_08005510Tvalidate_combination_08005510_validate_combination_080055100validate_combination_080055108validate_combination_080055100validate_combination_080055100validate_combination_080055105validate_combination_080055105validate_combination_080055106validate_combination_080055100validate_combination_08005510 validate_combination_08005510+validate_combination_08005510 validate_combination_08005510uvalidate_combination_08005510Vvalidate_combination_08005510avalidate_combination_08005510rvalidate_combination_080055102validate_combination_08005510 validate_combination_08005510*validate_combination_08005510 validate_combination_080055104validate_combination_08005510)validate_combination_08005510(validate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510tvalidate_combination_08005510 validate_combination_08005510*validate_combination_08005510(validate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510tvalidate_combination_08005510 validate_combination_08005510*validate_combination_08005510)validate_combination_08005510(validate_combination_08005510Pvalidate_combination_08005510Tvalidate_combination_08005510Rvalidate_combination_08005510_validate_combination_08005510Dvalidate_combination_08005510Avalidate_combination_08005510Tvalidate_combination_08005510_validate_combination_080055100validate_combination_080055108validate_combination_080055100validate_combination_080055100validate_combination_080055105validate_combination_080055105validate_combination_080055106validate_combination_080055100validate_combination_08005510 validate_combination_08005510+validate_combination_08005510 validate_combination_08005510uvalidate_combination_08005510Vvalidate_combination_08005510avalidate_combination_08005510rvalidate_combination_080055102validate_combination_08005510 validate_combination_08005510*validate_combination_08005510 validate_combination_080055104validate_combination_08005510)validate_combination_08005510,validate_combination_08005510 validate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510tvalidate_combination_08005510 validate_combination_08005510*validate_combination_08005510(validate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510tvalidate_combination_08005510 validate_combination_08005510*validate_combination_08005510)validate_combination_08005510(validate_combination_08005510Pvalidate_combination_08005510Tvalidate_combination_08005510Rvalidate_combination_08005510_validate_combination_08005510Dvalidate_combination_08005510Avalidate_combination_08005510Tvalidate_combination_08005510_validate_combination_080055100validate_combination_080055108validate_combination_080055100validate_combination_080055100validate_combination_080055105validate_combination_080055105validate_combination_080055105validate_combination_08005510cvalidate_combination_08005510 validate_combination_08005510+validate_combination_08005510 validate_combination_08005510uvalidate_combination_08005510Vvalidate_combination_08005510avalidate_combination_08005510rvalidate_combination_080055102validate_combination_08005510 validate_combination_08005510*validate_combination_08005510 validate_combination_080055104validate_combination_08005510)validate_combination_08005510,validate_combination_08005510 validate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510tvalidate_combination_08005510 validate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510dvalidate_combination_08005510evalidate_combination_08005510xvalidate_combination_08005510,validate_combination_08005510 validate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510tvalidate_combination_08005510 validate_combination_08005510fvalidate_combination_08005510lvalidate_combination_08005510avalidate_combination_08005510gvalidate_combination_08005510)validate_combination_08005510\nvalidate_combination_08005510{validate_combination_08005510\nvalidate_combination_08005510 validate_combination_08005510 validate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510tvalidate_combination_08005510 validate_combination_08005510ivalidate_combination_08005510svalidate_combination_08005510Vvalidate_combination_08005510avalidate_combination_08005510lvalidate_combination_08005510ivalidate_combination_08005510dvalidate_combination_08005510 validate_combination_08005510=validate_combination_08005510 validate_combination_08005510ivalidate_combination_08005510svalidate_combination_08005510_validate_combination_08005510*validate_combination_08005510(validate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510tvalidate_combination_08005510 validate_combination_08005510*validate_combination_08005510)validate_combination_08005510(validate_combination_08005510Pvalidate_combination_08005510Tvalidate_combination_08005510Rvalidate_combination_08005510_validate_combination_08005510Dvalidate_combination_08005510Avalidate_combination_08005510Tvalidate_combination_08005510_validate_combination_080055100validate_combination_080055108validate_combination_080055100validate_combination_080055100validate_combination_080055105validate_combination_080055105validate_combination_080055106validate_combination_080055100validate_combination_08005510 validate_combination_08005510+validate_combination_08005510 validate_combination_08005510uvalidate_combination_08005510Vvalidate_combination_08005510avalidate_combination_08005510rvalidate_combination_080055102validate_combination_08005510 validate_combination_08005510*validate_combination_08005510 validate_combination_080055104validate_combination_08005510)validate_combination_08005510_validate_combination_08005510vvalidate_combination_08005510avalidate_combination_08005510lvalidate_combination_08005510ivalidate_combination_08005510dvalidate_combination_08005510(validate_combination_08005510)validate_combination_08005510;validate_combination_08005510\nvalidate_combination_08005510 validate_combination_08005510 validate_combination_08005510ivalidate_combination_08005510fvalidate_combination_08005510 validate_combination_08005510(validate_combination_08005510ivalidate_combination_08005510svalidate_combination_08005510Vvalidate_combination_08005510avalidate_combination_08005510lvalidate_combination_08005510ivalidate_combination_08005510dvalidate_combination_08005510 validate_combination_08005510=validate_combination_08005510=validate_combination_08005510 validate_combination_080055100validate_combination_08005510)validate_combination_08005510 validate_combination_08005510{validate_combination_08005510\nvalidate_combination_08005510 validate_combination_08005510 validate_combination_08005510 validate_combination_08005510 validate_combination_08005510uvalidate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510tvalidate_combination_08005510 validate_combination_08005510*validate_combination_08005510(validate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510tvalidate_combination_08005510 validate_combination_08005510*validate_combination_08005510)validate_combination_08005510(validate_combination_08005510Pvalidate_combination_08005510Tvalidate_combination_08005510Rvalidate_combination_08005510_validate_combination_08005510Dvalidate_combination_08005510Avalidate_combination_08005510Tvalidate_combination_08005510_validate_combination_080055100validate_combination_080055108validate_combination_080055100validate_combination_080055100validate_combination_080055105validate_combination_080055105validate_combination_080055106validate_combination_080055100validate_combination_08005510 validate_combination_08005510+validate_combination_08005510 validate_combination_08005510uvalidate_combination_08005510Vvalidate_combination_08005510avalidate_combination_08005510rvalidate_combination_080055102validate_combination_08005510 validate_combination_08005510*validate_combination_08005510 validate_combination_080055104validate_combination_08005510)validate_combination_08005510Ivalidate_combination_08005510nvalidate_combination_08005510dvalidate_combination_08005510evalidate_combination_08005510xvalidate_combination_08005510 validate_combination_08005510=validate_combination_08005510 validate_combination_08005510(validate_combination_08005510uvalidate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510tvalidate_combination_08005510)validate_combination_08005510*validate_combination_08005510(validate_combination_08005510bvalidate_combination_08005510yvalidate_combination_08005510tvalidate_combination_08005510evalidate_combination_08005510 validate_combination_08005510*validate_combination_08005510)validate_combination_08005510(validate_combination_08005510*validate_combination_08005510(validate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510tvalidate_combination_08005510 validate_combination_08005510*validate_combination_08005510)validate_combination_08005510(validate_combination_08005510Pvalidate_combination_08005510Tvalidate_combination_08005510Rvalidate_combination_08005510_validate_combination_08005510Dvalidate_combination_08005510Avalidate_combination_08005510Tvalidate_combination_08005510_validate_combination_080055100validate_combination_080055108validate_combination_080055100validate_combination_080055100validate_combination_080055105validate_combination_080055105validate_combination_080055106validate_combination_080055100validate_combination_08005510 validate_combination_08005510+validate_combination_08005510 validate_combination_08005510uvalidate_combination_08005510Vvalidate_combination_08005510avalidate_combination_08005510rvalidate_combination_080055102validate_combination_08005510 validate_combination_08005510*validate_combination_08005510 validate_combination_080055104validate_combination_08005510)validate_combination_08005510 validate_combination_08005510+validate_combination_08005510 validate_combination_080055100validate_combination_08005510xvalidate_combination_080055104validate_combination_080055104validate_combination_08005510)validate_combination_08005510;validate_combination_08005510\nvalidate_combination_08005510 validate_combination_08005510 validate_combination_08005510 validate_combination_08005510 validate_combination_08005510*validate_combination_08005510(validate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510tvalidate_combination_08005510 validate_combination_08005510*validate_combination_08005510)validate_combination_08005510(validate_combination_08005510Pvalidate_combination_08005510Tvalidate_combination_08005510Rvalidate_combination_08005510_validate_combination_08005510Dvalidate_combination_08005510Avalidate_combination_08005510Tvalidate_combination_08005510_validate_combination_080055100validate_combination_080055108validate_combination_080055100validate_combination_080055100validate_combination_080055105validate_combination_080055105validate_combination_080055105validate_combination_08005510cvalidate_combination_08005510 validate_combination_08005510+validate_combination_08005510 validate_combination_08005510*validate_combination_08005510(validate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510tvalidate_combination_08005510 validate_combination_08005510*validate_combination_08005510)validate_combination_08005510(validate_combination_08005510Pvalidate_combination_08005510Tvalidate_combination_08005510Rvalidate_combination_08005510_validate_combination_08005510Dvalidate_combination_08005510Avalidate_combination_08005510Tvalidate_combination_08005510_validate_combination_080055100validate_combination_080055108validate_combination_080055100validate_combination_080055100validate_combination_080055105validate_combination_080055105validate_combination_080055106validate_combination_080055100validate_combination_08005510 validate_combination_08005510+validate_combination_08005510 validate_combination_08005510uvalidate_combination_08005510Vvalidate_combination_08005510avalidate_combination_08005510rvalidate_combination_080055102validate_combination_08005510 validate_combination_08005510*validate_combination_08005510 validate_combination_080055104validate_combination_08005510)validate_combination_08005510Ivalidate_combination_08005510nvalidate_combination_08005510dvalidate_combination_08005510evalidate_combination_08005510xvalidate_combination_08005510 validate_combination_08005510*validate_combination_08005510 validate_combination_080055104validate_combination_08005510)validate_combination_08005510 validate_combination_08005510=validate_combination_08005510 validate_combination_08005510*validate_combination_08005510(validate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510tvalidate_combination_08005510 validate_combination_08005510*validate_combination_08005510)validate_combination_08005510(validate_combination_08005510Pvalidate_combination_08005510Tvalidate_combination_08005510Rvalidate_combination_08005510_validate_combination_08005510Dvalidate_combination_08005510Avalidate_combination_08005510Tvalidate_combination_08005510_validate_combination_080055100validate_combination_080055108validate_combination_080055100validate_combination_080055100validate_combination_080055105validate_combination_080055105validate_combination_080055105validate_combination_08005510cvalidate_combination_08005510 validate_combination_08005510+validate_combination_08005510 validate_combination_08005510uvalidate_combination_08005510Vvalidate_combination_08005510avalidate_combination_08005510rvalidate_combination_080055102validate_combination_08005510 validate_combination_08005510*validate_combination_08005510 validate_combination_080055104validate_combination_08005510)validate_combination_08005510;validate_combination_08005510\nvalidate_combination_08005510 validate_combination_08005510 validate_combination_08005510 validate_combination_08005510 validate_combination_08005510*validate_combination_08005510(validate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510tvalidate_combination_08005510 validate_combination_08005510*validate_combination_08005510)validate_combination_08005510(validate_combination_08005510Pvalidate_combination_08005510Tvalidate_combination_08005510Rvalidate_combination_08005510_validate_combination_08005510Dvalidate_combination_08005510Avalidate_combination_08005510Tvalidate_combination_08005510_validate_combination_080055100validate_combination_080055108validate_combination_080055100validate_combination_080055100validate_combination_080055105validate_combination_080055105validate_combination_080055106validate_combination_080055100validate_combination_08005510 validate_combination_08005510+validate_combination_08005510 validate_combination_08005510*validate_combination_08005510(validate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510tvalidate_combination_08005510 validate_combination_08005510*validate_combination_08005510)validate_combination_08005510(validate_combination_08005510Pvalidate_combination_08005510Tvalidate_combination_08005510Rvalidate_combination_08005510_validate_combination_08005510Dvalidate_combination_08005510Avalidate_combination_08005510Tvalidate_combination_08005510_validate_combination_080055100validate_combination_080055108validate_combination_080055100validate_combination_080055100validate_combination_080055105validate_combination_080055105validate_combination_080055106validate_combination_080055100validate_combination_08005510 validate_combination_08005510+validate_combination_08005510 validate_combination_08005510uvalidate_combination_08005510Vvalidate_combination_08005510avalidate_combination_08005510rvalidate_combination_080055102validate_combination_08005510 validate_combination_08005510*validate_combination_08005510 validate_combination_080055104validate_combination_08005510)validate_combination_08005510Ivalidate_combination_08005510nvalidate_combination_08005510dvalidate_combination_08005510evalidate_combination_08005510xvalidate_combination_08005510 validate_combination_08005510*validate_combination_08005510 validate_combination_080055104validate_combination_08005510)validate_combination_08005510 validate_combination_08005510=validate_combination_08005510 validate_combination_08005510*validate_combination_08005510(validate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510tvalidate_combination_08005510 validate_combination_08005510*validate_combination_08005510)validate_combination_08005510(validate_combination_08005510Pvalidate_combination_08005510Tvalidate_combination_08005510Rvalidate_combination_08005510_validate_combination_08005510Dvalidate_combination_08005510Avalidate_combination_08005510Tvalidate_combination_08005510_validate_combination_080055100validate_combination_080055108validate_combination_080055100validate_combination_080055100validate_combination_080055105validate_combination_080055105validate_combination_080055106validate_combination_080055100validate_combination_08005510 validate_combination_08005510+validate_combination_08005510 validate_combination_08005510uvalidate_combination_08005510Vvalidate_combination_08005510avalidate_combination_08005510rvalidate_combination_080055102validate_combination_08005510 validate_combination_08005510*validate_combination_08005510 validate_combination_080055104validate_combination_08005510)validate_combination_08005510;validate_combination_08005510\nvalidate_combination_08005510 validate_combination_08005510 validate_combination_08005510 validate_combination_08005510 validate_combination_08005510svalidate_combination_08005510evalidate_combination_08005510tvalidate_combination_08005510_validate_combination_08005510bvalidate_combination_08005510ivalidate_combination_08005510tvalidate_combination_08005510svalidate_combination_08005510(validate_combination_08005510(validate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510tvalidate_combination_08005510)validate_combination_08005510*validate_combination_08005510(validate_combination_08005510cvalidate_combination_08005510hvalidate_combination_08005510avalidate_combination_08005510rvalidate_combination_08005510 validate_combination_08005510*validate_combination_08005510)validate_combination_08005510(validate_combination_08005510*validate_combination_08005510(validate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510tvalidate_combination_08005510 validate_combination_08005510*validate_combination_08005510)validate_combination_08005510(validate_combination_08005510Pvalidate_combination_08005510Tvalidate_combination_08005510Rvalidate_combination_08005510_validate_combination_08005510Dvalidate_combination_08005510Avalidate_combination_08005510Tvalidate_combination_08005510_validate_combination_080055100validate_combination_080055108validate_combination_080055100validate_combination_080055100validate_combination_080055105validate_combination_080055105validate_combination_080055106validate_combination_080055100validate_combination_08005510 validate_combination_08005510+validate_combination_08005510 validate_combination_08005510uvalidate_combination_08005510Vvalidate_combination_08005510avalidate_combination_08005510rvalidate_combination_080055102validate_combination_08005510 validate_combination_08005510*validate_combination_08005510 validate_combination_080055104validate_combination_08005510)validate_combination_08005510 validate_combination_08005510+validate_combination_08005510 validate_combination_080055100validate_combination_08005510xvalidate_combination_080055105validate_combination_08005510avalidate_combination_08005510)validate_combination_08005510,validate_combination_08005510 validate_combination_080055100validate_combination_08005510,validate_combination_08005510 validate_combination_080055101validate_combination_08005510,validate_combination_08005510 validate_combination_08005510*validate_combination_08005510(validate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510tvalidate_combination_08005510 validate_combination_08005510*validate_combination_08005510)validate_combination_08005510(validate_combination_08005510Pvalidate_combination_08005510Tvalidate_combination_08005510Rvalidate_combination_08005510_validate_combination_08005510Dvalidate_combination_08005510Avalidate_combination_08005510Tvalidate_combination_08005510_validate_combination_080055100validate_combination_080055108validate_combination_080055100validate_combination_080055100validate_combination_080055105validate_combination_080055105validate_combination_080055106validate_combination_080055100validate_combination_08005510 validate_combination_08005510+validate_combination_08005510 validate_combination_08005510uvalidate_combination_08005510Vvalidate_combination_08005510avalidate_combination_08005510rvalidate_combination_080055102validate_combination_08005510 validate_combination_08005510*validate_combination_08005510 validate_combination_080055104validate_combination_08005510)validate_combination_08005510Ivalidate_combination_08005510nvalidate_combination_08005510dvalidate_combination_08005510evalidate_combination_08005510xvalidate_combination_08005510,validate_combination_08005510 validate_combination_08005510fvalidate_combination_08005510lvalidate_combination_08005510avalidate_combination_08005510gvalidate_combination_08005510)validate_combination_08005510;validate_combination_08005510\nvalidate_combination_08005510 validate_combination_08005510 validate_combination_08005510 validate_combination_08005510 validate_combination_08005510svalidate_combination_08005510evalidate_combination_08005510tvalidate_combination_08005510_validate_combination_08005510bvalidate_combination_08005510ivalidate_combination_08005510tvalidate_combination_08005510_validate_combination_08005510avalidate_combination_08005510tvalidate_combination_08005510_validate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510dvalidate_combination_08005510evalidate_combination_08005510xvalidate_combination_08005510(validate_combination_08005510(validate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510tvalidate_combination_08005510)validate_combination_08005510*validate_combination_08005510(validate_combination_08005510cvalidate_combination_08005510hvalidate_combination_08005510avalidate_combination_08005510rvalidate_combination_08005510 validate_combination_08005510*validate_combination_08005510)validate_combination_08005510(validate_combination_08005510*validate_combination_08005510(validate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510tvalidate_combination_08005510 validate_combination_08005510*validate_combination_08005510)validate_combination_08005510(validate_combination_08005510Pvalidate_combination_08005510Tvalidate_combination_08005510Rvalidate_combination_08005510_validate_combination_08005510Dvalidate_combination_08005510Avalidate_combination_08005510Tvalidate_combination_08005510_validate_combination_080055100validate_combination_080055108validate_combination_080055100validate_combination_080055100validate_combination_080055105validate_combination_080055105validate_combination_080055106validate_combination_080055100validate_combination_08005510 validate_combination_08005510+validate_combination_08005510 validate_combination_08005510uvalidate_combination_08005510Vvalidate_combination_08005510avalidate_combination_08005510rvalidate_combination_080055102validate_combination_08005510 validate_combination_08005510*validate_combination_08005510 validate_combination_080055104validate_combination_08005510)validate_combination_08005510 validate_combination_08005510+validate_combination_08005510 validate_combination_080055100validate_combination_08005510xvalidate_combination_080055105validate_combination_08005510avalidate_combination_08005510)validate_combination_08005510)validate_combination_08005510;validate_combination_08005510\nvalidate_combination_08005510 validate_combination_08005510 validate_combination_08005510 validate_combination_08005510 validate_combination_08005510vvalidate_combination_08005510avalidate_combination_08005510lvalidate_combination_08005510ivalidate_combination_08005510dvalidate_combination_08005510avalidate_combination_08005510tvalidate_combination_08005510evalidate_combination_08005510_validate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510pvalidate_combination_08005510uvalidate_combination_08005510tvalidate_combination_08005510(validate_combination_08005510*validate_combination_08005510(validate_combination_08005510uvalidate_combination_08005510nvalidate_combination_08005510dvalidate_combination_08005510evalidate_combination_08005510fvalidate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510evalidate_combination_08005510dvalidate_combination_080055104validate_combination_08005510 validate_combination_08005510*validate_combination_08005510)validate_combination_08005510(validate_combination_08005510Pvalidate_combination_08005510Tvalidate_combination_08005510Rvalidate_combination_08005510_validate_combination_08005510Dvalidate_combination_08005510Avalidate_combination_08005510Tvalidate_combination_08005510_validate_combination_080055100validate_combination_080055108validate_combination_080055100validate_combination_080055100validate_combination_080055105validate_combination_080055105validate_combination_080055106validate_combination_080055104validate_combination_08005510 validate_combination_08005510+validate_combination_08005510 validate_combination_08005510(validate_combination_08005510uvalidate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510tvalidate_combination_08005510)validate_combination_08005510*validate_combination_08005510(validate_combination_08005510bvalidate_combination_08005510yvalidate_combination_08005510tvalidate_combination_08005510evalidate_combination_08005510 validate_combination_08005510*validate_combination_08005510)validate_combination_08005510(validate_combination_08005510pvalidate_combination_08005510avalidate_combination_08005510rvalidate_combination_08005510avalidate_combination_08005510mvalidate_combination_08005510_validate_combination_080055101validate_combination_08005510 validate_combination_08005510+validate_combination_08005510 validate_combination_080055100validate_combination_08005510xvalidate_combination_080055104validate_combination_080055104validate_combination_08005510)validate_combination_08005510 validate_combination_08005510*validate_combination_08005510 validate_combination_080055104validate_combination_08005510)validate_combination_08005510,validate_combination_08005510 validate_combination_08005510*validate_combination_08005510(validate_combination_08005510ivalidate_combination_08005510nvalidate_combination_08005510tvalidate_combination_08005510 validate_combination_08005510*validate_combination_08005510)validate_combination_08005510(validate_combination_08005510Pvalidate_combination_08005510Tvalidate_combination_08005510Rvalidate_combination_08005510_validate_combination_08005510Dvalidate_combination_08005510Avalidate_combination_08005510Tvalidate_combination_08005510_validate_combination_080055100validate_combination_080055108validate_combination_080055100validate_combination_080055100validate_combination_080055105validate_combination_080055105validate_combination_080055106validate_combination_080055100validate_combination_08005510 validate_combination_08005510+validate_combination_08005510 validate_combination_08005510uvalidate_combination_08005510Vvalidate_combination_08005510avalidate_combination_08005510rvalidate_combination_080055102validate_combination_08005510 validate_combination_08005510*validate_combination_08005510 validate_combination_080055104validate_combination_08005510)validate_combination_08005510 validate_combination_08005510+validate_combination_08005510 validate_combination_080055100validate_combination_08005510xvalidate_combination_080055104validate_combination_080055105validate_combination_08005510,validate_combination_08005510 validate_combination_080055101validate_combination_08005510)validate_combination_08005510;validate_combination_08005510\nvalidate_combination_08005510 validate_combination_08005510 validate_combination_08005510}validate_combination_08005510\nvalidate_combination_08005510}validate_combination_08005510\nvalidate_combination_08005510",
            "called": [
                "FUN_08002494",
                "FUN_080024f8",
                "FUN_080045a2",
                "FUN_0800548c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005510",
            "calling": [
                "FUN_08005a68"
            ],
            "imported": false,
            "current_name": "validate_combination_08005510"
        },
        "FUN_08002f9a": {
            "renaming": {
                "FUN_08002f9a": "do_nothing_08002f9a"
            },
            "code": "\nvoid do_nothing_08002f9a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9a",
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "imported": false,
            "current_name": "do_nothing_08002f9a"
        },
        "FUN_08005750": {
            "renaming": {
                "FUN_08005750": "get_one_08005750",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int get_one_08005750() {\n    int result = 1;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005750",
            "calling": [
                "thunk_FUN_08005750"
            ],
            "imported": false,
            "current_name": "get_one_08005750"
        },
        "FUN_08002cf2": {
            "renaming": {
                "FUN_08002cf2": "update_data_08002cf2",
                "param_1": "data_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "data_value",
                "uVar2": "data_offset"
            },
            "code": "int update_data_08002cf2(int *data_ptr, int param_2, int param_3, int param_4)\n{\n  int data_offset = *(int *)(*data_ptr + 0x18);\n  int data_value;\n  if ((data_offset & 0x80) == 0) {\n    data_value = *(int *)(data_ptr + 3);\n  }\n  else {\n    data_value = *(int *)(data_ptr + 6);\n  }\n  update_data_08002cf2_08004e74(data_ptr, (data_offset & 4) == 0, data_value, data_offset, param_4);\n  return 0;\n}",
            "called": [
                "FUN_08004e74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002cf2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "update_data_08002cf2"
        },
        "FUN_08006288": {
            "renaming": {
                "FUN_08006288": "allocate_memory_08006288",
                "param_1": "allocated_memory",
                "param_2": "requested_memory_size",
                "puVar1": "current_block_pointer",
                "uVar2": "found_offset",
                "puVar3": "current_block_pointer",
                "iVar4": "padding",
                "puVar5": "previous_block_pointer",
                "uVar6": "block_size",
                "puVar7": "previous_block_pointer",
                "uVar8": "padded_requested_memory_size"
            },
            "code": "uint allocate_memory_08006288(uint *allocated_memory, uint requested_memory_size)\n{\n  uint *current_block_pointer;\n  uint *previous_block_pointer;\n  uint block_size;\n  uint padded_requested_memory_size = (requested_memory_size + 3 & 0xfffffffc) + 8;\n  if (padded_requested_memory_size < 0xc) {\n    padded_requested_memory_size = 0xc;\n  }\n  if (((int)padded_requested_memory_size < 0) || (padded_requested_memory_size < requested_memory_size)) {\n    *allocated_memory = 0xc;\n  }\n  else {\n    do_nothing_08006eac();\n    previous_block_pointer = PTR_DAT_08006340;\n    current_block_pointer = *(uint **)PTR_DAT_0800633c;\n    while (current_block_pointer != (uint *)0x0) {\n      block_size = *current_block_pointer - padded_requested_memory_size;\n      if (-1 < (int)block_size) {\n        if (block_size < 0xc) {\n          if (previous_block_pointer == current_block_pointer) {\n            block_size = previous_block_pointer[1];\n            *(uint *)PTR_DAT_0800633c = block_size;\n          }\n          else {\n            block_size = current_block_pointer[1];\n          }\n          if (previous_block_pointer != current_block_pointer) {\n            previous_block_pointer[1] = block_size;\n            previous_block_pointer = current_block_pointer;\n          }\n        }\n        else {\n          *current_block_pointer = block_size;\n          *(uint *)((int)current_block_pointer + block_size) = padded_requested_memory_size;\n          previous_block_pointer = (uint *)((int)current_block_pointer + block_size);\n        }\n        do_nothing_08006eae(allocated_memory);\n        block_size = (int)previous_block_pointer + 0xbU & 0xfffffff8;\n        int padding = block_size - (int)(previous_block_pointer + 1);\n        if (padding != 0) {\n          *(int *)((int)previous_block_pointer + padding) = -padding;\n          return block_size;\n        }\n        return block_size;\n      }\n      previous_block_pointer = current_block_pointer;\n      current_block_pointer = (uint *)current_block_pointer[1];\n    }\n    if (*(int *)PTR_DAT_08006340 == 0) {\n      uint found_offset = find_and_set_offset_08006920(allocated_memory);\n      *(uint *)previous_block_pointer = found_offset;\n    }\n    current_block_pointer = (uint *)find_and_set_offset_08006920(allocated_memory, padded_requested_memory_size);\n    if ((current_block_pointer != (uint *)0xffffffff) && ((previous_block_pointer = (uint *)((int)current_block_pointer + 3U & 0xfffffffc), current_block_pointer == previous_block_pointer || (block_size = find_and_set_offset_08006920(allocated_memory,(int)previous_block_pointer - (int)current_block_pointer), block_size != -1)))) {\n      *previous_block_pointer = padded_requested_memory_size;\n      do_nothing_08006eae(allocated_memory);\n      block_size = (int)previous_block_pointer + 0xbU & 0xfffffff8;\n      int padding = block_size - (int)(previous_block_pointer + 1);\n      if (padding != 0) {\n        *(int *)((int)previous_block_pointer + padding) = -padding;\n        return block_size;\n      }\n      return block_size;\n    }\n    *allocated_memory = 0xc;\n    do_nothing_08006eae(allocated_memory);\n  }\n  return 0;\n}",
            "called": [
                "FUN_08006eac",
                "FUN_08006eae",
                "FUN_08006920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006288",
            "calling": [
                "FUN_08006c88",
                "FUN_08006e10"
            ],
            "imported": false,
            "current_name": "allocate_memory_08006288"
        },
        "FUN_08002004": {
            "renaming": {
                "FUN_08002004": "set_flags_and_check_08002004",
                "param_1": "parameters",
                "iVar1": "result",
                "puVar2": "ptr_to_second_parameter",
                "DAT_080020e8": "PTR_DAT_080020e8",
                "DAT_080020ec": "PTR_DAT_080020ec"
            },
            "code": "int set_flags_and_check_08002004(int *parameters) {\n    int result;\n    int *ptr_to_first_parameter = parameters;\n    char *flag = (char *)(parameters + 9);\n    int *ptr_to_second_parameter = (int *)*parameters;\n\n    if (*flag != 1) {\n        *flag = 1;\n        result = set_flag_and_check_08001f84();\n        if (result == 0) {\n            parameters[10] = (parameters[10] & 0xfffffcfe) | 0x100;\n            if ((ptr_to_first_parameter == DAT_080020e8) && ((DAT_080020e8[-0xff] & 0xf0000) != 0)) {\n                parameters[10] |= 0x100000;\n                if ((*(uint *)(DAT_080020ec + 4) & 0x400) != 0) {\n                    parameters[10] = (parameters[10] & 0xffffcfff) | 0x1000;\n                }\n            }\n            else {\n                parameters[10] &= 0xffefffff;\n                if ((ptr_to_second_parameter[1] & 0x400) != 0) {\n                    parameters[10] = (parameters[10] & 0xffffcfff) | 0x1000;\n                }\n            }\n            if ((parameters[10] & 0x1000) == 0) {\n                parameters[11] = 0;\n            }\n            else {\n                parameters[11] &= 0xfffffff9;\n            }\n            *flag = 0;\n            *ptr_to_second_parameter = 0xfffffffd;\n            int *ptr_to_third_parameter = (int *)*parameters;\n            if (((ptr_to_third_parameter[2] & 0xe0000) == 0xe0000) && ((ptr_to_third_parameter != DAT_080020e8) || ((DAT_080020e8[-0xff] & 0xf0000) == 0))) {\n                parameters[2] |= 0x500000;\n            }\n            else {\n                parameters[2] |= 0x100000;\n            }\n        }\n        else {\n            *flag = 0;\n        }\n        return result;\n    }\n    return 2;\n}\n",
            "called": [
                "FUN_08001f84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002004",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "set_flags_and_check_08002004"
        },
        "FUN_08005754": {
            "renaming": {
                "FUN_08005754": "find_data_08005754",
                "param_1": "data_index",
                "bVar1": "is_valid_index",
                "cVar2": "data_value",
                "uVar3": "processed_data",
                "uVar4": "data_size"
            },
            "code": "uint find_data_08005754(uint data_index)\n{\n    bool is_valid_index;\n    char data_value;\n    uint processed_data;\n    uint shift_amount;\n    uint data_size = *(uint *)PTR_DAT_080057b0;\n\n    if (data_index < 0xe) {\n        is_valid_index = data_index + 0x2e < 0x3c;\n    }\n    else {\n        is_valid_index = data_index < 0x3c;\n    }\n\n    if (is_valid_index) {\n        if (data_index < 0xe) {\n            data_index = data_index + 0x2e;\n        }\n        data_value = PTR_DAT_080057ac[data_index];\n    }\n    else {\n        data_value = -1;\n    }\n\n    if (data_value == -1) {\n        processed_data = 0;\n    }\n    else {\n        processed_data = find_and_process_data_08004a4c();\n        shift_amount = data_size != 0xc ? (data_size < 0xc ? 0xc - data_size : data_size - 0xc) & 0xff : 0;\n        processed_data = data_size != 0xc ? (data_size < 0xc ? processed_data >> shift_amount : processed_data << shift_amount) : processed_data;\n    }\n\n    return processed_data;\n}",
            "called": [
                "FUN_08004a4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005754",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "find_data_08005754"
        },
        "FUN_08005fc8": {
            "renaming": {
                "FUN_08005fc8": "initialize_params_08005fc8",
                "param_1": "condition",
                "param_2": "flag",
                "param_3": "undefined_param_3",
                "param_4": "undefined_param_4",
                "puVar1": "params"
            },
            "code": "void initialize_params_08005fc8(int param_1,int param_2,undefined4 param_3,undefined4 param_4)\n{\n  undefined *params = PTR_DAT_08006068;\n  if (param_1 != 1) {\n    return;\n  }\n  if (param_2 == 0xffff) {\n    params[0] = 6;\n    *(undefined4 *)(params + 0xc) = 0;\n    params[0x14] = 7;\n    *(undefined4 *)(params + 0x20) = 0;\n    params[0x28] = 8;\n    *(undefined4 *)(params + 0x34) = 0;\n    params[0x3c] = 9;\n    *(undefined4 *)(params + 0x48) = 0;\n    params[0x50] = 10;\n    *(undefined4 *)(params + 0x5c) = 0;\n    params[100] = 0x17;\n    *(undefined4 *)(params + 0x70) = 0;\n    params[0x78] = 0x17;\n    *(undefined4 *)(params + 0x84) = 0;\n    params[0x8c] = 0x17;\n    *(undefined4 *)(params + 0x98) = 0;\n    params[0xa0] = 0x17;\n    *(undefined4 *)(params + 0xac) = 0;\n    params[0xb4] = 0x17;\n    *(undefined4 *)(params + 0xc0) = 0;\n    params[200] = 0x28;\n    *(undefined4 *)(params + 0xd4) = 0;\n    params[0xdc] = 0x28;\n    *(undefined4 *)(params + 0xe8) = 0;\n    params[0xf0] = 0x28;\n    *(undefined4 *)(params + 0xfc) = 0;\n    params[0x104] = 0x28;\n    *(undefined4 *)(params + 0x110) = 0;\n    params[0x118] = 0x28;\n    *(undefined4 *)(params + 0x124) = 0;\n    params[300] = 0x28;\n    *(undefined4 *)(params + 0x138) = 0;\n    calculate_result_and_swap_params_08006112(0,PTR_LAB_08005fa0_1_08006070,PTR_DAT_0800606c,params,param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_08006112"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fc8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_params_08005fc8"
        },
        "FUN_08002ab8": {
            "renaming": {
                "FUN_08002ab8": "increment_byte_at_address_08002ab8",
                "param_1": "data",
                "pbVar1": "byte_ptr",
                "PTR_": "ptr",
                "DAT_": "uint_ptr",
                "counter": "counter"
            },
            "code": "int increment_byte_at_address_08002ab8(int* data){\n  int* PTR_ = data;\n  short* counter = (short*)(PTR_ + 0x2a);\n  if (*counter != 0) {\n    byte* byte_PTR_ = (byte*)PTR_[9];\n    PTR_[9] = (int)(byte_PTR_ + 1);\n    uint* DAT_ = (uint*)(*PTR_ + 0x10);\n    *DAT_ = (uint)*byte_PTR_;\n    *counter = *counter - 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ab8",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "increment_byte_at_address_08002ab8"
        },
        "FUN_080068f0": {
            "renaming": {
                "FUN_080068f0": "process_data_080068f0",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "iVar1": "data_ptr",
                "uVar2": "data1",
                "uStack_c": "data2",
                "uStack_8": "data3",
                "uStack_4": "data4",
                "PTR_PTR_DAT_0800691c": "PTR_PTR_DATA",
                "FUN_08006cb4": "clean_up",
                "FUN_08006394": "process"
            },
            "code": "void process_data_080068f0(int data1, int data2, int data3, int data4)\n{\n  int data_ptr = *(int *)PTR_PTR_DAT_0800691c;\n  if ((data_ptr != 0) && (*(int *)(data_ptr + 0x18) == 0)) {\n    clean_up(data_ptr);\n  }\n  process(data_ptr, *(int *)(data_ptr + 8), data1, &data2, data3, &data2);\n  return;\n}",
            "called": [
                "FUN_08006394",
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080068f0",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "process_data_080068f0",
            "code_backup": "\nvoid FUN_080068f0(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  iVar1 = *(int *)PTR_PTR_DAT_0800691c;\n  uVar2 = param_1;\n  uStack_c = param_2;\n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  if ((iVar1 != 0) && (*(int *)(iVar1 + 0x18) == 0)) {\n    FUN_08006cb4(iVar1);\n  }\n  FUN_08006394(iVar1,*(undefined4 *)(iVar1 + 8),param_1,&uStack_c,uVar2,&uStack_c);\n  return;\n}\n\n"
        },
        "FUN_080066b0": {
            "renaming": {
                "FUN_080066b0": "encode_and_send_string_080066b0",
                "param_1": "output_file",
                "param_2": "string_info",
                "param_3": "string_length",
                "param_4": "write_to_output",
                "param_5": "output_buffer",
                "bVar1": "first_char",
                "iVar2": "return_value",
                "puVar3": "buffer_pointer",
                "iVar4": "write_result",
                "puVar5": "hex_chars",
                "uVar6": "base",
                "ppuVar7": "buffer_pointer_pointer",
                "uVar8": "first_byte",
                "uVar9": "string_length_copy",
                "puVar10": "output_string",
                "puVar11": "current_char",
                "local_24": "output_buffer_size"
            },
            "code": "\nuint encode_and_send_string_080066b0(undefined4 output_file,uint *string_info,undefined4 string_length,code *write_to_output,uint **output_buffer)\n\n{\n  byte first_char;\n  int return_value;\n  uint *buffer_pointer;\n  int write_result;\n  undefined *hex_chars;\n  uint base;\n  uint **buffer_pointer_pointer;\n  uint first_byte;\n  uint string_length_copy;\n  undefined *output_string;\n  undefined *current_char;\n  uint output_buffer_size [2];\n  \n  first_char = *(byte *)(string_info + 6);\n  current_char = (undefined *)((int)string_info + 0x43);\n  if (first_char != 0x6e) {\n    if (first_char < 0x6f) {\n      if (first_char != 99) {\n        if (first_char < 100) {\n          if (first_char == 0) goto LAB_0800686a;\n          if (first_char != 0x58) goto LAB_080066e0;\n          *(undefined *)((int)string_info + 0x45) = 0x58;\n          hex_chars = PTR_s_0123456789ABCDEF_080068ec;\nLAB_080067fa:\n          base = *string_info;\n          buffer_pointer = *output_buffer;\n          *output_buffer = buffer_pointer + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            first_byte = (uint)*(ushort *)buffer_pointer;\n          }\n          else {\n            first_byte = *buffer_pointer;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *string_info = base | 0x20;\n          }\n          if (first_byte == 0) {\n            *string_info = *string_info & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_08006790:\n          *(undefined *)((int)string_info + 0x43) = 0;\n        }\n        else {\n          if ((first_char != 100) && (first_char != 0x69)) goto LAB_080066e0;\n          first_byte = *string_info;\n          buffer_pointer = *output_buffer;\n          if ((first_byte & 0x80) == 0) {\n            *output_buffer = buffer_pointer + 1;\n            if ((first_byte & 0x40) == 0) goto LAB_08006700;\n            first_byte = (uint)(short)*(ushort *)buffer_pointer;\n          }\n          else {\n            *output_buffer = buffer_pointer + 1;\nLAB_08006700:\n            first_byte = *buffer_pointer;\n          }\n          if ((int)first_byte < 0) {\n            first_byte = -first_byte;\n            *(undefined *)((int)string_info + 0x43) = 0x2d;\n          }\n          base = 10;\n          hex_chars = PTR_s_0123456789ABCDEF_080068ec;\n        }\n        string_length_copy = string_info[1];\n        string_info[2] = string_length_copy;\n        output_string = current_char;\n        if ((int)string_length_copy < 0) {\n          if (first_byte != 0) goto LAB_0800682e;\nLAB_080068dc:\n          *(undefined *)((int)string_info + 0x42) = *hex_chars;\n          output_string = (undefined *)((int)string_info + 0x42);\n        }\n        else {\n          *string_info = *string_info & 0xfffffffb;\n          if (first_byte == 0) {\n            if (string_length_copy != 0) goto LAB_080068dc;\n          }\n          else {\nLAB_0800682e:\n            do {\n              string_length_copy = first_byte / base;\n              output_string = output_string + -1;\n              *output_string = hex_chars[first_byte - base * string_length_copy];\n              first_byte = string_length_copy;\n            } while (string_length_copy != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*string_info << 0x1f) < 0)) && ((int)string_info[1] <= (int)string_info[4]))\n        {\n          output_string[-1] = 0x30;\n          output_string = output_string + -1;\n        }\n        string_info[4] = (int)current_char - (int)output_string;\n        current_char = output_string;\n        goto LAB_080067d6;\n      }\n      buffer_pointer = *output_buffer;\n      *output_buffer = buffer_pointer + 1;\n      *(char *)((int)string_info + 0x42) = (char)*buffer_pointer;\nLAB_08006740:\n      current_char = (undefined *)((int)string_info + 0x42);\n      first_byte = 1;\n    }\n    else {\n      if (first_char != 0x73) {\n        if (first_char < 0x74) {\n          if (first_char == 0x6f) {\nLAB_08006766:\n            first_byte = *string_info;\n            buffer_pointer = *output_buffer;\n            if ((first_byte & 0x80) == 0) {\n              *output_buffer = buffer_pointer + 1;\n              if ((first_byte & 0x40) == 0) goto LAB_08006774;\n              first_byte = (uint)*(ushort *)buffer_pointer;\n            }\n            else {\n              *output_buffer = buffer_pointer + 1;\nLAB_08006774:\n              first_byte = *buffer_pointer;\n            }\n            hex_chars = PTR_s_0123456789ABCDEF_080068ec;\n            if (first_char == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            goto LAB_08006790;\n          }\n          if (first_char == 0x70) {\n            *string_info = *string_info | 0x20;\nLAB_08006726:\n            hex_chars = PTR_s_0123456789abcdef_080068e8;\n            *(undefined *)((int)string_info + 0x45) = 0x78;\n            goto LAB_080067fa;\n          }\n        }\n        else {\n          if (first_char == 0x75) goto LAB_08006766;\n          if (first_char == 0x78) goto LAB_08006726;\n        }\nLAB_080066e0:\n        *(byte *)((int)string_info + 0x42) = first_char;\n        goto LAB_08006740;\n      }\n      buffer_pointer = *output_buffer;\n      *output_buffer = buffer_pointer + 1;\n      current_char = (undefined *)*buffer_pointer;\n      return_value = find_character_in_string_08006e90(current_char,0,string_info[1]);\n      if (return_value != 0) {\n        string_info[1] = return_value - (int)current_char;\n      }\n      first_byte = string_info[1];\n    }\n    string_info[4] = first_byte;\n    *(undefined *)((int)string_info + 0x43) = 0;\n    goto LAB_080067d6;\n  }\n  first_byte = *string_info;\n  buffer_pointer_pointer = (uint **)*output_buffer;\n  base = string_info[5];\n  if ((first_byte & 0x80) == 0) {\n    *output_buffer = (uint *)(buffer_pointer_pointer + 1);\n    buffer_pointer = *buffer_pointer_pointer;\n    if ((first_byte & 0x40) == 0) goto LAB_08006856;\n    *(short *)buffer_pointer = (short)base;\n  }\n  else {\n    *output_buffer = (uint *)(buffer_pointer_pointer + 1);\n    buffer_pointer = *buffer_pointer_pointer;\nLAB_08006856:\n    *buffer_pointer = base;\n  }\nLAB_0800686a:\n  string_info[4] = 0;\nLAB_080067d6:\n  return_value = encode_string_080065c0(output_file,string_info,output_buffer_size,string_length,write_to_output);\n  if ((return_value == -1) || (return_value = (*write_to_output)(output_file,string_length,current_char,string_info[4]), return_value == -1)) {\nLAB_080067ea:\n    first_byte = 0xffffffff;\n  }\n  else {\n    if ((int)(*string_info << 0x1e) < 0) {\n      for (return_value = 0; return_value < (int)(string_info[3] - output_buffer_size[0]); return_value = return_value + 1) {\n        write_result = (*write_to_output)(output_file,string_length,(int)string_info + 0x19,1);\n        if (write_result == -1) goto LAB_080067ea;\n      }\n    }\n    first_byte = string_info[3];\n    if ((int)string_info[3] < (int)output_buffer_size[0]) {\n      first_byte = output_buffer_size[0];\n    }\n  }\n  return first_byte;\n}\n\n",
            "called": [
                "FUN_08006e90",
                "FUN_080065c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080066b0",
            "calling": [
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "encode_and_send_string_080066b0"
        },
        "FUN_08002c52": {
            "renaming": {
                "FUN_08002c52": "do_nothing_08002c52"
            },
            "code": "\nvoid do_nothing_08002c52(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c52",
            "calling": [
                "FUN_08002c54",
                "FUN_08002d1c"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c52"
        },
        "FUN_0800138e": {
            "renaming": {
                "FUN_0800138e": "set_data_flags_0800138e",
                "param_1": "data_ptr",
                "param_2": "flags",
                "param_3": "param_3",
                "param_4": "param_4",
                "bVar1": "data_flags"
            },
            "code": "void set_data_flags_0800138e(int data_ptr, int flags, int param_3, int param_4)\\n\\\n    {\\n\\\n        byte data_flags = *(byte *)(data_ptr + 0x14);\\n\\\n        *(byte *)(data_ptr + 0x14) = data_flags | 0x04;\\n\\\n        process_data(data_ptr, data_flags | 0x0C, 0, param_4, param_4);\\n\\\n        return;\\n\\\n    }",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800138e",
            "calling": [
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "set_data_flags_0800138e"
        },
        "FUN_08002c50": {
            "renaming": {
                "FUN_08002c50": "do_nothing_08002c50"
            },
            "code": "\nvoid do_nothing_08002c50(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c50",
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c50"
        },
        "FUN_0800598a": {
            "renaming": {
                "FUN_0800598a": "check_combination_and_update_0800598a",
                "param_1": "combination",
                "iVar1": "check_result",
                "uVar2": "index",
                "local_9": "current_value"
            },
            "code": "void check_combination_and_update_0800598a(int combination)\n{\n  int check_result;\n  ushort index;\n  undefined current_value;\n\n  check_result = check_combination_080054d4(combination,&current_value);\n  if ((check_result == 0) && (index = *(short *)(combination + 0x60) + 1U & 0x3f, index != *(ushort *)(combination + 0x62))) {\n    *(undefined *)(*(int *)(combination + 0x5c) + (uint)*(ushort *)(combination + 0x60)) = current_value;\n    *(ushort *)(combination + 0x60) = index;\n  }\n  return;\n}",
            "called": [
                "FUN_080054d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800598a",
            "calling": [],
            "imported": false,
            "current_name": "check_combination_and_update_0800598a"
        },
        "FUN_08001c88": {
            "renaming": {
                "FUN_08001c88": "set_flag_and_update_register_08001c88",
                "update_register_08002470": "update_register",
                "validate_and_set_input_08001c3c": "validate_and_set_input",
                "do_nothing_08001c3a": "do_nothing",
                "*DAT_08001ca8": "*data_register"
            },
            "code": "int set_flag_and_update_register_08001c88() {\n  *DAT_08001ca8 = *DAT_08001ca8 | 0x10;\n  update_register(3);\n  validate_and_set_input(0xf);\n  do_nothing();\n  return 0;\n}",
            "called": [
                "FUN_08001c3a",
                "FUN_08001c3c",
                "FUN_08002470"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c88",
            "calling": [
                "FUN_08004c52"
            ],
            "imported": false,
            "current_name": "set_flag_and_update_register_08001c88"
        },
        "FUN_08001a44": {
            "renaming": {
                "FUN_08001a44": "validate_input_08001a44",
                "param_1": "input_address",
                "param_2": "input_value",
                "uVar1": "is_valid",
                "validate_input_080019f6": "perform_validation"
            },
            "code": "void validate_input_08001a44(int input_address, int input_value) {\\n    int is_valid = 0;\\n    if (input_value == 1) {\\n        if (*(char *)(input_address + 0x70) == \"\\0\") {\\n            perform_validation();\\n        }\\n        is_valid = 1;\\n    }\\n    *(undefined *)(input_address + 0x70) = is_valid;\\n    return;\\n}",
            "called": [
                "FUN_080019f6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a44",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "validate_input_08001a44"
        },
        "FUN_08002c54": {
            "renaming": {
                "FUN_08002c54": "decode_08002c54",
                "param_1": "params",
                "cVar1": "last_char",
                "pbVar2": "data",
                "decoded_char": "decoded_char"
            },
            "code": "int decode_08002c54(int *params)\n{\n  char last_char = *(char *)(params + 0x3d);\n  if (*(short *)(params + 0x2a) != 0)\n  {\n    byte *data = (byte *)params[9];\n    params[9] = (int)(data + 1);\n    uint decode_08002c54d_char = (uint)*data;\n    *(uint *)(*params + 0x10) = decode_08002c54d_char;\n    *(short *)(params + 0x2a) = *(short *)(params + 0x2a) - 1;\n    if ((*(short *)(params + 0x2a) == 0) && (last_char == ')'))\n    {\n      *(uint *)(*params + 4) = *(uint *)(*params + 4) & 0xfffffbff;\n      params[0xc] = 0x21;\n      *(undefined *)(params + 0x3d) = 0x28;\n      do_nothing_08002c52();\n    }\n    return 0;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c54",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "decode_08002c54"
        },
        "FUN_080043b4": {
            "renaming": {
                "FUN_080043b4": "check_parameters_080043b4",
                "param_1": "parameters",
                "param_2": "length",
                "param_3": "expected_value",
                "param_4": "flag",
                "param_5": "max_value",
                "iVar1": "difference",
                "**param_1": "current_value",
                "get_value_from_pointer_08001cc4": "get_value_from_pointer",
                "(*param_1)[3]": "(*parameters)[3]",
                "(*param_1)[5]": "(*parameters)[5]",
                "*(undefined *)((int)param_1 + 0x39)": "*((uint8_t*)parameters + 0x39)",
                "*(undefined *)((int)param_1 + 0x3a)": "*((uint8_t*)parameters + 0x3a)",
                "*(undefined *)(param_1 + 0xe)": "*((uint8_t*)parameters + 0xe)"
            },
            "code": "uint check_parameters_080043b4(uint **parameters, uint length, uint expected_value, int flag, uint max_value) {\n  int difference;\n  while (1) {\n    uint current_value = **parameters;\n    uint bit_mask = length & ~current_value;\n    if ((bit_mask == 0) != expected_value) {\n      return 0;\n    }\n    if ((max_value == 0xffffffff) || ((max_value != 0) && ((difference = get_value_from_pointer_08001cc4() - flag), (uint)difference <= max_value))) {\n      break;\n    }\n    (*parameters)[3] &= 0xfffffe5f;\n    (*parameters)[5] &= 0xfffffffe;\n    *((uint8_t*)parameters + 0x39) = 0x20;\n    *((uint8_t*)parameters + 0x3a) = 0x20;\n    *((uint8_t*)parameters + 0xe) = 0;\n    return 3;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043b4",
            "calling": [
                "FUN_08004478"
            ],
            "imported": false,
            "current_name": "check_parameters_080043b4"
        },
        "FUN_0800441a": {
            "renaming": {
                "FUN_0800441a": "reset_device_0800441a",
                "param_1": "device",
                "*(char *)((int)param_1 + 0x39)": "*(char *)((int)device + DEVICE_STATUS_OFFSET)",
                "*(undefined *)(param_1 + 0xe)": "*(undefined *)((int)device + DEVICE_ERROR_OFFSET)",
                "do_nothing_08004418": "do_nothing",
                "*(undefined *)((int)param_1 + 0x39)": "*(undefined *)((int)device + DEVICE_STATUS_OFFSET)",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*device + DEVICE_CONTROL_OFFSET)",
                "calculate_value_08004204": "calculate_value",
                "*(uint *)(*param_1 + 0x10)": "*(uint *)(*device + DEVICE_CONTROL_OFFSET)",
                "*(uint *)(*param_1 + 0x14)": "*(uint *)(*device + DEVICE_CONTROL_OFFSET)",
                "param_1[0xf]": "device[DEVICE_REGISTER_OFFSET]",
                "0x24": "DEVICE_RESET",
                "0xffffdfff": "~DEVICE_CONTROL_BIT",
                "0xffffb7ff": "~DEVICE_CONTROL_BIT_2",
                "0xffffffd5": "~DEVICE_CONTROL_BIT_3",
                "0x2000": "DEVICE_CONTROL_BIT",
                "0x20": "DEVICE_READY",
                "DEVICE_STATUS_OFFSET": "0x39",
                "DEVICE_ERROR_OFFSET": "0xe",
                "DEVICE_CONTROL_OFFSET": "0xc",
                "DEVICE_CONTROL_BIT": "0x2000",
                "DEVICE_CONTROL_BIT_2": "0x0800",
                "DEVICE_CONTROL_BIT_3": "0x0020",
                "DEVICE_REGISTER_OFFSET": "0xf"
            },
            "code": "int reset_device_0800441a(int *device)\\n\\\n{\\n\\\n    if (device != NULL) {\\n\\\n        if (*(char *)((int)device + DEVICE_STATUS_OFFSET) == \"\\0\") {\\n\\\n            *(undefined *)((int)device + DEVICE_ERROR_OFFSET) = 0;\\n\\\n            do_nothing();\\n\\\n        }\\n\\\n        *(undefined *)((int)device + DEVICE_STATUS_OFFSET) = DEVICE_RESET;\\n\\\n        *(uint *)(*device + DEVICE_CONTROL_OFFSET) &= ~DEVICE_CONTROL_BIT;\\n\\\n        calculate_value(device);\\n\\\n        *(uint *)(*device + DEVICE_CONTROL_OFFSET) &= ~DEVICE_CONTROL_BIT_2;\\n\\\n        *(uint *)(*device + DEVICE_CONTROL_OFFSET) &= ~DEVICE_CONTROL_BIT_3;\\n\\\n        *(uint *)(*device + DEVICE_CONTROL_OFFSET) |= DEVICE_CONTROL_BIT;\\n\\\n        device[DEVICE_REGISTER_OFFSET] = 0;\\n\\\n        *(undefined *)((int)device + DEVICE_STATUS_OFFSET) = DEVICE_READY;\\n\\\n        *(undefined *)((int)device + DEVICE_STATUS_OFFSET + 1) = DEVICE_READY;\\n\\\n        return 0;\\n\\\n    }\\n\\\n    return 1;\\n\\\n}",
            "called": [
                "FUN_08004204",
                "FUN_08004418"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800441a",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "reset_device_0800441a"
        },
        "FUN_08004d18": {
            "renaming": {
                "FUN_08004d18": "execute_function_if_not_null_08004d18",
                "PTR_DAT_08004d28": "function_pointer",
                "PTR_DAT_08004d2c": "argument_pointer"
            },
            "code": "void execute_function_if_not_null_08004d18() {\n  code** PTR_DAT_08004d28 = *(code**)(PTR_DAT_08004d28);\n  if (PTR_DAT_08004d28 != NULL) {\n    code* function = *PTR_DAT_08004d28;\n    undefined4 arg = *(undefined4*)(PTR_DAT_08004d2c);\n    function(arg);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d18",
            "calling": [
                "FUN_08003ea0"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_08004d18"
        },
        "FUN_080006d4": {
            "renaming": {
                "FUN_080006d4": "calculate_result_080006d4",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "temp_1",
                "unaff_r4": "unaff_r4",
                "uVar2": "temp_2",
                "uVar3": "temp_3",
                "in_r12": "in_r12",
                "bVar4": "condition_1",
                "temp_4": "temp_4",
                "condition_2": "condition_2"
            },
            "code": "ulonglong calculate_result_080006d4(uint first_param, uint second_param, uint third_param, uint fourth_param) {\n  uint temp_1, temp_2, temp_3, temp_4;\n  bool condition_1, condition_2;\n\n  temp_3 = in_r12 & fourth_param >> 0x14;\n  if (unaff_r4 != in_r12 && temp_3 != in_r12) {\n    condition_1 = (first_param | second_param << 1) == 0;\n    if (!condition_1) {\n      condition_1 = (third_param | fourth_param << 1) == 0;\n    }\n    if (condition_1) {\n      return (ulonglong)((second_param ^ fourth_param) & 0x80000000) << 0x20;\n    }\n    if (unaff_r4 == 0) {\n      temp_2 = second_param & 0x80000000;\n      do {\n        temp_1 = first_param & 0x80000000;\n        first_param = first_param << 1;\n        second_param = second_param * 2 + (uint)(temp_1 != 0);\n      } while ((second_param & 0x100000) == 0);\n      second_param = second_param | temp_2;\n      if (temp_3 != 0) {\n        return CONCAT44(second_param, first_param);\n      }\n    }\n    do {\n      temp_3 = third_param & 0x80000000;\n      third_param = third_param << 1;\n      fourth_param = fourth_param * 2 + (uint)(temp_3 != 0);\n    } while ((fourth_param & 0x100000) == 0);\n    return CONCAT44(second_param, first_param);\n  }\n  condition_1 = (first_param | second_param << 1) == 0;\n  if (condition_1) {\n    second_param = fourth_param;\n    first_param = third_param;\n  }\n  if (!condition_1) {\n    condition_2 = (third_param | fourth_param << 1) == 0;\n  }\n  temp_4 = second_param;\n  if (((!condition_2) && ((unaff_r4 != in_r12 || ((first_param | second_param << 0xc) == 0)))) && ((temp_3 != in_r12 || (first_param = third_param, temp_4 = fourth_param, (third_param | fourth_param << 0xc) == 0)))) {\n    return (ulonglong)((second_param ^ fourth_param) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp_4, first_param) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006d4",
            "calling": [
                "FUN_080004f8"
            ],
            "imported": false,
            "current_name": "calculate_result_080006d4"
        },
        "FUN_08000190": {
            "renaming": {
                "FUN_08000190": "calculate_unsigned_division_08000190",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "iVar1": "shift_amount",
                "bVar2": "bit",
                "uVar3": "sum",
                "uVar4": "divisor_masked",
                "uVar5": "shifted_divisor",
                "uVar6": "dividend_masked",
                "uVar7": "shifted_dividend",
                "iVar8": "divisor_sign_bit",
                "uVar9": "dividend_sign_bit",
                "uVar10": "temp",
                "uVar11": "difference",
                "uVar12": "remainder_sign_bit",
                "bVar13": "divisor_is_negative",
                "bVar14": "result_is_zero",
                "bVar15": "shift_amount_is_negative"
            },
            "code": "\nulonglong calculate_unsigned_division_08000190(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  int shift_amount;\n  byte bit;\n  uint sum;\n  uint divisor_masked;\n  uint shifted_divisor;\n  uint dividend_masked;\n  uint shifted_dividend;\n  int divisor_sign_bit;\n  uint dividend_sign_bit;\n  uint temp;\n  uint difference;\n  uint remainder_sign_bit;\n  bool divisor_is_negative;\n  bool result_is_zero;\n  bool shift_amount_is_negative;\n  \n  dividend_masked = remainder ^ 0x80000000;\n  dividend_sign_bit = divisor << 1;\n  remainder = remainder << 1;\n  divisor_is_negative = ((divisor ^ dividend_masked) & 0x7fffffff) == 0;\n  result_is_zero = divisor_is_negative && dividend == quotient;\n  if (!divisor_is_negative || dividend != quotient) {\n    result_is_zero = (dividend_sign_bit | dividend) == 0;\n  }\n  if (!result_is_zero) {\n    result_is_zero = (remainder | quotient) == 0;\n  }\n  divisor_sign_bit = (int)dividend_sign_bit >> 0x15;\n  if (!result_is_zero) {\n    result_is_zero = divisor_sign_bit == -1;\n  }\n  shift_amount = (int)remainder >> 0x15;\n  if (!result_is_zero) {\n    result_is_zero = shift_amount == -1;\n  }\n  if (result_is_zero) {\n    if (divisor_sign_bit == -1 || shift_amount == -1) {\n      dividend_sign_bit = dividend_masked;\n      difference = quotient;\n      if (divisor_sign_bit == -1) {\n        dividend_sign_bit = divisor;\n        difference = dividend;\n      }\n      if (divisor_sign_bit != -1 || shift_amount != -1) {\n        quotient = difference;\n        dividend_masked = dividend_sign_bit;\n      }\n      result_is_zero = (difference | dividend_sign_bit << 0xc) == 0;\n      if (result_is_zero) {\n        result_is_zero = (quotient | dividend_masked << 0xc) == 0;\n      }\n      if (result_is_zero) {\n        result_is_zero = dividend_sign_bit == dividend_masked;\n      }\n      if (!result_is_zero) {\n        dividend_sign_bit = dividend_sign_bit | 0x80000;\n      }\n      return CONCAT44(dividend_sign_bit,difference);\n    }\n    if (((divisor ^ dividend_masked) & 0x7fffffff) != 0 || dividend != quotient) {\n      if ((dividend_sign_bit | dividend) == 0) {\n        dividend = quotient;\n        divisor = dividend_masked;\n      }\n      return CONCAT44(divisor,dividend);\n    }\n    if (divisor != dividend_masked) {\n      return 0;\n    }\n    if (dividend_sign_bit >> 0x15 == 0) {\n      result_is_zero = (dividend & 0x80000000) != 0;\n      dividend_masked = divisor * 2 + (uint)result_is_zero;\n      if (CARRY4(divisor,divisor) || CARRY4(divisor * 2,(uint)result_is_zero)) {\n        dividend_masked = dividend_masked | 0x80000000;\n      }\n      return CONCAT44(dividend_masked,dividend << 1);\n    }\n    if (dividend_sign_bit < 0xffc00000) {\n      return CONCAT44(divisor + 0x100000,dividend);\n    }\n    divisor = divisor & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(divisor | 0x7ff00000) << 0x20;\n  }\n  dividend_sign_bit = dividend_sign_bit >> 0x15;\n  remainder = remainder >> 0x15;\n  difference = remainder - dividend_sign_bit;\n  result_is_zero = difference != 0;\n  if (remainder < dividend_sign_bit) {\n    difference = -difference;\n  }\n  temp = dividend;\n  shifted_dividend = divisor;\n  if (result_is_zero && dividend_sign_bit <= remainder) {\n    dividend_sign_bit = dividend_sign_bit + difference;\n    temp = quotient;\n    shifted_dividend = dividend_masked;\n    quotient = dividend;\n    dividend_masked = divisor;\n  }\n  if (0x36 < difference) {\n    return CONCAT44(shifted_dividend,temp);\n  }\n  divisor_masked = shifted_dividend & 0xfffff | 0x100000;\n  if ((shifted_dividend & 0x80000000) != 0) {\n    result_is_zero = temp != 0;\n    temp = -temp;\n    divisor_masked = -divisor_masked - (uint)result_is_zero;\n  }\n  shifted_dividend = dividend_masked & 0xfffff | 0x100000;\n  if ((dividend_masked & 0x80000000) != 0) {\n    result_is_zero = quotient != 0;\n    quotient = -quotient;\n    shifted_dividend = -shifted_dividend - (uint)result_is_zero;\n  }\n  if (dividend_sign_bit == difference) {\n    shifted_dividend = shifted_dividend ^ 0x100000;\n    if (dividend_sign_bit == 0) {\n      divisor_masked = divisor_masked ^ 0x100000;\n      dividend_sign_bit = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  dividend_masked = -difference + 0x20;\n  if ((int)difference < 0x21) {\n    remainder_sign_bit = quotient << (dividend_masked & 0xff);\n    quotient = quotient >> (difference & 0xff);\n    sum = temp + quotient;\n    shifted_divisor = shifted_dividend << (dividend_masked & 0xff);\n    dividend_masked = sum + shifted_divisor;\n    divisor_masked = divisor_masked + CARRY4(temp,quotient) + ((int)shifted_dividend >> (difference & 0xff)) +\n            (uint)CARRY4(sum,shifted_divisor);\n  }\n  else {\n    remainder_sign_bit = shifted_dividend << (-difference + 0x40 & 0xff);\n    if (quotient != 0) {\n      remainder_sign_bit = remainder_sign_bit | 2;\n    }\n    shifted_dividend = (int)shifted_dividend >> (difference - 0x20 & 0xff);\n    dividend_masked = temp + shifted_dividend;\n    divisor_masked = divisor_masked + ((int)shifted_dividend >> 0x1f) + (uint)CARRY4(temp,shifted_dividend);\n  }\n  divisor = divisor_masked & 0x80000000;\n  difference = divisor_masked;\n  if ((int)divisor_masked < 0) {\n    result_is_zero = remainder_sign_bit == 0;\n    remainder_sign_bit = -remainder_sign_bit;\n    difference = -dividend_masked;\n    dividend_masked = -(uint)!result_is_zero - dividend_masked;\n    difference = -(uint)(result_is_zero <= difference) - divisor_masked;\n  }\n  if (0xfffff < difference) {\n    temp = dividend_sign_bit - 1;\n    if (0x1fffff < difference) {\n      temp = difference & 1;\n      difference = difference >> 1;\n      bit = (byte)dividend_masked;\n      dividend_masked = (uint)(temp != 0) << 0x1f | dividend_masked >> 1;\n      remainder_sign_bit = (uint)(bit & 1) << 0x1f | remainder_sign_bit >> 1;\n      temp = dividend_sign_bit;\n      if (0xffbfffff < dividend_sign_bit * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    result_is_zero = 0x7fffffff < remainder_sign_bit;\n    if (remainder_sign_bit == 0x80000000) {\n      result_is_zero = (dividend_masked & 1) != 0;\n    }\n    return CONCAT44(difference + temp * 0x100000 + (uint)CARRY4(dividend_masked,(uint)result_is_zero) | divisor,\n                    dividend_masked + result_is_zero);\n  }\n  divisor_is_negative = (remainder_sign_bit & 0x80000000) != 0;\n  remainder_sign_bit = remainder_sign_bit << 1;\n  temp = dividend_masked * 2;\n  result_is_zero = CARRY4(dividend_masked,dividend_masked);\n  dividend_masked = dividend_masked * 2 + (uint)divisor_is_negative;\n  difference = difference * 2 + (uint)(result_is_zero || CARRY4(temp,(uint)divisor_is_negative));\n  temp = dividend_sign_bit - 2;\n  if ((difference & 0x100000) != 0) goto LAB_080002a0;\n  shifted_dividend = dividend_masked;\n  dividend_sign_bit = difference;\n  if (difference == 0) {\n    shifted_dividend = 0;\n    dividend_sign_bit = dividend_masked;\n  }\n  divisor_sign_bit = count_leading_zeroes(dividend_sign_bit);\n  if (difference == 0) {\n    divisor_sign_bit = divisor_sign_bit + 0x20;\n  }\n  difference = divisor_sign_bit - 0xb;\n  shift_amount_is_negative = SBORROW4(difference,0x20);\n  dividend_masked = divisor_sign_bit - 0x2b;\n  result_is_zero = (int)dividend_masked < 0;\n  divisor_is_negative = dividend_masked == 0;\n  if ((int)difference < 0x20) {\n    shift_amount_is_negative = SCARRY4(dividend_masked,0xc);\n    divisor_sign_bit = divisor_sign_bit + -0x1f;\n    result_is_zero = divisor_sign_bit < 0;\n    divisor_is_negative = divisor_sign_bit == 0;\n    dividend_masked = difference;\n    if (!divisor_is_negative && result_is_zero == shift_amount_is_negative) {\n      shifted_dividend = dividend_sign_bit << (difference & 0xff);\n      dividend_sign_bit = dividend_sign_bit >> (0xcU - divisor_sign_bit & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (divisor_is_negative || result_is_zero != shift_amount_is_negative) {\n    remainder_sign_bit = 0x20 - dividend_masked;\n  }\n  dividend_sign_bit = dividend_sign_bit << (dividend_masked & 0xff);\n  if (divisor_is_negative || result_is_zero != shift_amount_is_negative) {\n    dividend_sign_bit = dividend_sign_bit | shifted_dividend >> (remainder_sign_bit & 0xff);\n  }\n  if (divisor_is_negative || result_is_zero != shift_amount_is_negative) {\n    shifted_dividend = shifted_dividend << (dividend_masked & 0xff);\n  }\nLAB_08000318:\n  if ((int)difference <= (int)temp) {\n    return CONCAT44(dividend_sign_bit + (temp - difference) * 0x100000 | divisor,shifted_dividend);\n  }\n  dividend_masked = ~(temp - difference);\n  if ((int)dividend_masked < 0x1f) {\n    divisor_sign_bit = dividend_masked - 0x13;\n    if (divisor_sign_bit != 0 && divisor_sign_bit < 0 == SCARRY4(dividend_masked - 0x1f,0xc)) {\n      return CONCAT44(divisor_masked,shifted_dividend >> (0x20 - (0xcU - divisor_sign_bit) & 0xff) | dividend_sign_bit << (0xcU - divisor_sign_bit & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    dividend_masked = dividend_masked + 1;\n    return CONCAT44(divisor | dividend_sign_bit >> (dividend_masked & 0xff),\n                    shifted_dividend >> (dividend_masked & 0xff) | dividend_sign_bit << (0x20 - dividend_masked & 0xff));\n  }\n  return CONCAT44(divisor_masked,dividend_sign_bit >> (dividend_masked - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000190",
            "calling": [
                "FUN_08001a66",
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08001814"
            ],
            "imported": false,
            "current_name": "calculate_unsigned_division_08000190"
        },
        "FUN_08006174": {
            "renaming": {
                "FUN_08006174": "execute_function_with_params_and_stack_pointers_08006174",
                "param_1": "function_param_1",
                "param_2": "function_param_2",
                "param_3": "stack_param_1",
                "param_4": "stack_param_2",
                "PTR_PTR_DAT_08006194": "function_pointer",
                "uStack_8": "stack_param_3",
                "uStack_4": "stack_param_4"
            },
            "code": "void execute_function_with_params_and_stack_pointers_08006174(void* PTR_PTR_DAT_08006194, int param_1, int param_2, int* stack_pointer_1, int* stack_pointer_2)\n{\n    int param_3 = *stack_pointer_1;\n    int param_4 = *stack_pointer_2;\n    PTR_PTR_DAT_08006194(param_1, param_2, &param_3, param_1, &param_3);\n    return;\n}",
            "called": [
                "FUN_08006394"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006174",
            "calling": [
                "FUN_0800611c"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_and_stack_pointers_08006174"
        },
        "FUN_08007028": {
            "renaming": {
                "FUN_08007028": "check_and_set_value_08007028",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "data_pointer",
                "iVar2": "return_value"
            },
            "code": "void check_and_set_value_08007028(int *output, undefined4 input)\n{\n  undefined *data_pointer;\n  int return_value;\n  \n  data_pointer = PTR_DAT_08007044;\n  *(undefined4 *)PTR_DAT_08007044 = 0;\n  return_value = get_return_value(input);\n  if ((return_value == -1) && (*(int *)data_pointer != 0)) {\n    *output = *(int *)data_pointer;\n  }\n  return;\n}",
            "called": [
                "FUN_08005724"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007028",
            "calling": [
                "FUN_08006e10"
            ],
            "imported": false,
            "current_name": "check_and_set_value_08007028"
        },
        "FUN_08000194": {
            "renaming": {
                "FUN_08000194": "FUNC_08000194"
            },
            "code": "\nulonglong FUNC_08000194(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_080002a0;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000194",
            "calling": [
                "FUN_080015f8",
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "FUNC_08000194"
        },
        "FUN_08002494": {
            "renaming": {
                "FUN_08002494": "set_bits_08002494",
                "param_1": "bit_index",
                "param_2": "bit_length",
                "param_3": "value",
                "uVar1": "shift_amount",
                "uVar2": "remaining_bits",
                "DAT_080024f0": "data_ptr_1",
                "DAT_080024f4": "data_ptr_2"
            },
            "code": "void set_bits_08002494(uint bit_index, uint bit_length, uint value) {\n  uint shift_amount = (uint)(*(int *)(DAT_080024f0 + 0xc) << 0x15) >> 0x1d;\n  uint remaining_bits = 7 - shift_amount;\n  if (remaining_bits > 3) {\n    remaining_bits = 4;\n  }\n  if (shift_amount + 4 < 7) {\n    shift_amount = 0;\n  }\n  else {\n    shift_amount = shift_amount - 3;\n  }\n  uint shifted_value = (value & (1 << (remaining_bits & 0xff)) - 1U) << (shift_amount & 0xff) | (1 << (shift_amount & 0xff)) - 1U & bit_length;\n  if ((int)bit_index < 0) {\n    *(char *)(DAT_080024f4 + (bit_index & 0xf)) = (char)(shifted_value << 4);\n  }\n  else {\n    *(char *)(bit_index + 0xe000e400) = (char)(shifted_value << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002494",
            "calling": [
                "FUN_08005568",
                "FUN_08001b48",
                "FUN_08001c3c",
                "FUN_08005510"
            ],
            "imported": false,
            "current_name": "set_bits_08002494"
        },
        "FUN_08002c4e": {
            "renaming": {
                "FUN_08002c4e": "do_nothing_08002c4e"
            },
            "code": "\nvoid do_nothing_08002c4e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c4e",
            "calling": [
                "FUN_08002efc",
                "FUN_08002db2"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c4e"
        },
        "FUN_08004f4c": {
            "renaming": {
                "FUN_08004f4c": "configure_UART_pins_08004f4c",
                "param_1": "UART_pin_config",
                "iVar1": "UART1_base_address",
                "iVar2": "UART_pin1_config",
                "iVar3": "UART_pin2_config",
                "iVar4": "selected_UART_pin_config",
                "uVar5": "UART_pin_config_flag",
                "uVar6": "UART_pin_value",
                "local_20": "UART_pin_bitmask",
                "local_1c": "UART_pin_control_bits",
                "local_18": "UART_pin_speed",
                "local_14": "UART_pin_data_bits",
                "process_data_080068f0": "print_error_msg",
                "find_param_08004c78": "find_pin_value",
                "find_non_zero_number_08004d06": "find_selected_pin_config_value",
                "set_flag_08004884": "set_UART_pin_flag",
                "get_param_value_08004cce": "get_UART_pin_value",
                "process_bits_08002624": "process_UART_pin_bits",
                "reset_device_0800441a": "reset_UART_device"
            },
            "code": "\nvoid configure_UART_pins_08004f4c(int *UART_pin_config)\n\n{\n  int UART1_base_address;\n  int UART_pin1_config;\n  int UART_pin2_config;\n  int selected_UART_pin_config;\n  undefined4 UART_pin_config_flag;\n  uint UART_pin_value;\n  uint UART_pin_bitmask;\n  uint UART_pin_control_bits;\n  uint UART_pin_speed;\n  undefined4 UART_pin_data_bits;\n  \n  if (UART_pin_config != (int *)0x0) {\n    UART_pin1_config = find_param_08004c78((int)*(char *)(UART_pin_config + 0x16),PTR_DAT_08005204);\n    UART_pin2_config = find_param_08004c78((int)*(char *)((int)UART_pin_config + 0x59),PTR_DAT_08005208);\n    if ((UART_pin2_config == 0) || (UART_pin1_config == 0)) {\n      process_data_080068f0(PTR_s_ERROR__at_least_one_UART_pin_has_0800521c,UART_pin2_config);\n    }\n    else {\n      selected_UART_pin_config = find_non_zero_number_08004d06(UART_pin1_config);\n      *UART_pin_config = selected_UART_pin_config;\n      UART1_base_address = DAT_08005214;\n      UART_pin2_config = DAT_08005210;\n      UART_pin1_config = DAT_0800520c;\n      if (selected_UART_pin_config == 0) {\n        process_data_080068f0(PTR_s_ERROR__U_S_ART_pins_mismatch_08005220);\n      }\n      else {\n        if (selected_UART_pin_config == DAT_0800520c) {\n          *(uint *)(DAT_0800520c + 0xd80c) = *(uint *)(DAT_0800520c + 0xd80c) | 0x4000;\n          *(uint *)(UART_pin1_config + 0xd80c) = *(uint *)(UART_pin1_config + 0xd80c) & 0xffffbfff;\n          *(uint *)(UART_pin1_config + 0xd818) = *(uint *)(UART_pin1_config + 0xd818) | 0x4000;\n          *(undefined *)(UART_pin_config + 0x11) = 0;\n          *(undefined *)((int)UART_pin_config + 0x5a) = 0x25;\n        }\n        else if (selected_UART_pin_config == DAT_08005210) {\n          *(uint *)(DAT_08005210 + 0x1cc10) = *(uint *)(DAT_08005210 + 0x1cc10) | 0x20000;\n          *(uint *)(UART_pin2_config + 0x1cc10) = *(uint *)(UART_pin2_config + 0x1cc10) & 0xfffdffff;\n          *(uint *)(UART_pin2_config + 0x1cc1c) = *(uint *)(UART_pin2_config + 0x1cc1c) | 0x20000;\n          *(undefined *)(UART_pin_config + 0x11) = 1;\n          *(undefined *)((int)UART_pin_config + 0x5a) = 0x26;\n        }\n        else if (selected_UART_pin_config == DAT_08005214) {\n          *(uint *)(DAT_08005214 + 0x1c810) = *(uint *)(DAT_08005214 + 0x1c810) | 0x40000;\n          *(uint *)(UART1_base_address + 0x1c810) = *(uint *)(UART1_base_address + 0x1c810) & 0xfffbffff;\n          *(uint *)(UART1_base_address + 0x1c81c) = *(uint *)(UART1_base_address + 0x1c81c) | 0x40000;\n          *(undefined *)(UART_pin_config + 0x11) = 2;\n          *(undefined *)((int)UART_pin_config + 0x5a) = 0x27;\n        }\n        UART_pin_config_flag = set_flag_08004884((uint)((int)*(char *)((int)UART_pin_config + 0x59) << 0x18) >> 0x1c);\n        UART_pin_value = get_param_value_08004cce((int)*(char *)((int)UART_pin_config + 0x59),PTR_DAT_08005208);\n        UART_pin_bitmask = 1 << (*(byte *)((int)UART_pin_config + 0x59) & 0xf) & 0xffff;\n        UART_pin_control_bits = (UART_pin_value >> 3 & 1) << 4 | UART_pin_value & 7;\n        UART_pin_speed = (UART_pin_value << 0x1a) >> 0x1e;\n        *(uint *)(DAT_08005218 + 0x18) = *(uint *)(DAT_08005218 + 0x18) | 1;\n        switch((UART_pin_value << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x4000000;\n        }\n        UART_pin_data_bits = 3;\n        process_bits_08002624(UART_pin_config_flag,&UART_pin_bitmask);\n        UART_pin_config_flag = set_flag_08004884((uint)((int)*(char *)(UART_pin_config + 0x16) << 0x18) >> 0x1c);\n        UART_pin_value = get_param_value_08004cce((int)*(char *)(UART_pin_config + 0x16),PTR_DAT_08005204);\n        UART_pin_bitmask = 1 << (*(byte *)(UART_pin_config + 0x16) & 0xf) & 0xffff;\n        UART_pin_control_bits = (UART_pin_value >> 3 & 1) << 4 | UART_pin_value & 7;\n        UART_pin_speed = (UART_pin_value << 0x1a) >> 0x1e;\n        process_bits_08002624(UART_pin_config_flag,&UART_pin_bitmask);\n        *(int **)(PTR_DAT_08005228 + (uint)*(byte *)(UART_pin_config + 0x11) * 4) = UART_pin_config + 1;\n        UART_pin_config[1] = *UART_pin_config;\n        UART_pin_config[2] = UART_pin_config[0x12];\n        UART_pin_config[3] = UART_pin_config[0x13];\n        UART_pin_config[4] = UART_pin_config[0x14];\n        UART_pin_config[5] = UART_pin_config[0x15];\n        UART_pin_config[6] = 0xc;\n        UART_pin_config[7] = 0;\n        UART_pin_config[8] = 0;\n        reset_device_0800441a(UART_pin_config + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08004d06",
                "FUN_08004cce",
                "FUN_08004884",
                "FUN_08002624",
                "FUN_08004c78",
                "FUN_0800441a",
                "FUN_080068f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f4c",
            "calling": [
                "FUN_08005384",
                "FUN_08005a68"
            ],
            "imported": false,
            "current_name": "configure_UART_pins_08004f4c"
        },
        "FUN_080055bc": {
            "renaming": {
                "FUN_080055bc": "find_param_index_080055bc",
                "param_1": "param",
                "uVar1": "index"
            },
            "code": "uint find_param_index_080055bc(int param) {\n  uint index;\n  if (param == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while (index < 5) {\n      if (param == *(int *)(PTR_DAT_080055dc + index * 4)) {\n        return index;\n      }\n      index++;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055bc",
            "calling": [
                "FUN_08005604",
                "FUN_080055e0"
            ],
            "imported": false,
            "current_name": "find_param_index_080055bc"
        },
        "FUN_08001960": {
            "renaming": {
                "FUN_08001960": "validate_and_set_inputs_08001960",
                "param_1": "input_address",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "param_6": "input_6",
                "iVar1": "is_valid",
                "puVar2": "inputs_ptr",
                "uVar3": "input_1",
                "uVar4": "input_3",
                "uVar5": "input_2",
                "uVar6": "input_4"
            },
            "code": "void validate_and_set_inputs_08001960(int input_address, undefined4 input_2, undefined4 input_3, undefined4 input_4, undefined4 input_5, undefined4 input_6) {\\n  int is_valid = validate_and_return_08000a04(input_3, input_4, input_5, input_6, input_4);\\n  if (is_valid == 0) {\\n    *(undefined4 *)(input_address + 0x60) = input_3;\\n    *(undefined4 *)(input_address + 100) = input_4;\\n    *(undefined4 *)(input_address + 0x68) = input_5;\\n    *(undefined4 *)(input_address + 0x6c) = input_6;\\n    if (*(char *)(input_address + 0x70) != \"\\0\") {\\n      undefined4 *inputs_ptr = *(undefined4 **)(input_address + 0x3c);\\n      undefined4 input_1 = *inputs_ptr;\\n      undefined4 input_2 = inputs_ptr[1];\\n      int is_valid = is_input_valid_080009dc(input_5, input_6, input_1, input_2);\\n      if (is_valid == 0) {\\n        is_valid = is_input_null_08000a18_08000a18(input_3, input_4, input_1, input_2);\\n        if (is_valid != 0) {\\n          *inputs_ptr = input_3;\\n          inputs_ptr[1] = input_4;\\n        }\\n      }\\n      else {\\n        *inputs_ptr = input_5;\\n        inputs_ptr[1] = input_6;\\n      }\\n      input_1 = *(undefined4 *)(input_address + 0x48);\\n      input_2 = *(undefined4 *)(input_address + 0x4c);\\n      undefined4 input_3 = *(undefined4 *)(input_address + 0x68);\\n      undefined4 input_4 = *(undefined4 *)(input_address + 0x6c);\\n      is_valid = is_input_null_08000a18_08000a18(input_1, input_2, input_3, input_4);\\n      if (is_valid != 0) {\\n        *(undefined4 *)(input_address + 0x48) = input_3;\\n        *(undefined4 *)(input_address + 0x4c) = input_4;\\n        return;\\n      }\\n      input_3 = *(undefined4 *)(input_address + 0x60);\\n      input_4 = *(undefined4 *)(input_address + 100);\\n      is_valid = is_input_valid_080009dc(input_1, input_2, input_3, input_4);\\n      if (is_valid != 0) {\\n        *(undefined4 *)(input_address + 0x48) = input_3;\\n        *(undefined4 *)(input_address + 0x4c) = input_4;\\n      }\\n    }\\n  }\\n}",
            "called": [
                "FUN_08000a18",
                "FUN_080009dc",
                "FUN_08000a04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001960",
            "calling": [
                "FUN_08000cd0",
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "validate_and_set_inputs_08001960"
        },
        "FUN_08004ca2": {
            "renaming": {
                "FUN_08004ca2": "get_parameter_value_08004ca2",
                "param_1": "param",
                "uVar1": "value",
                "find_parameter_value_08004c8a": "find_parameter_value",
                "0xffffffff": "UINT32_MAX"
            },
            "code": "uint32_t get_parameter_value_08004ca2(int param)\n{\n    uint32_t value;\n\n    if (param != 0) {\n        value = find_parameter_value();\n        return value;\n    }\n    return UINT32_MAX;\n}",
            "called": [
                "FUN_08004c8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ca2",
            "calling": [
                "FUN_08005384",
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "get_parameter_value_08004ca2"
        },
        "FUN_08002810": {
            "renaming": {
                "FUN_08002810": "is_param2_in_ptr1_08002810",
                "param_1": "ptr1",
                "param_2": "param2",
                "PTR_": "ptr",
                "DAT_": "data",
                "uint": "uint32_t",
                "undefined4": "int"
            },
            "code": "int is_param2_in_ptr1_08002810(uint32_t *PTR_1, uint32_t param2) {\n  uint32_t bitmask = *(PTR_1 + 1);\n  if ((param2 & bitmask) == 0) {\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002810",
            "calling": [
                "FUN_08004c48"
            ],
            "imported": false,
            "current_name": "is_param2_in_ptr1_08002810"
        },
        "FUN_0800224c": {
            "renaming": {
                "FUN_0800224c": "update_values_0800224c",
                "param_1": "input_values",
                "iVar1": "return_value"
            },
            "code": "int update_values_0800224c(int *input_values)\n{\n    int return_value;\n    if (input_values == NULL) {\n        return_value = 1;\n    }\n    else {\n        input_values[10] |= 2;\n        return_value = check_and_update_value();\n        if (return_value == 0) {\n            *(int *)*input_values = -32;\n            *(unsigned int *)(*input_values + 4) &= DAT_08002340;\n            *(unsigned int *)(*input_values + 8) &= DAT_08002344;\n            *(unsigned int *)(*input_values + 12) &= 0xff000000;\n            *(unsigned int *)(*input_values + 16) &= 0xc0000000;\n            *(unsigned int *)(*input_values + 20) &= 0xfffff000;\n            *(unsigned int *)(*input_values + 24) &= 0xfffff000;\n            *(unsigned int *)(*input_values + 28) &= 0xfffff000;\n            *(unsigned int *)(*input_values + 32) &= 0xfffff000;\n            *(unsigned int *)(*input_values + 36) &= 0xfffff000;\n            *(unsigned int *)(*input_values + 40) &= 0xfffff000;\n            *(unsigned int *)(*input_values + 44) &= 0xff000000;\n            *(unsigned int *)(*input_values + 48) &= 0xff000000;\n            *(unsigned int *)(*input_values + 52) &= 0xc0000000;\n            *(unsigned int *)(*input_values + 56) &= 0xc0000000;\n            *(unsigned int *)(*input_values + 60) &= 0xffc00000;\n            *(unsigned int *)(*input_values + 64) &= 0xffc00000;\n            set_flags_based_on_input(input_values);\n            input_values[11] = 0;\n            input_values[10] = 0;\n        }\n        *(char *)(input_values + 9) = 0;\n    }\n    return return_value;\n}",
            "called": [
                "FUN_080020f0",
                "FUN_080049f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800224c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "update_values_0800224c"
        },
        "FUN_080054b0": {
            "renaming": {
                "FUN_080054b0": "is_valid_input_080054b0",
                "param_1": "input_index",
                "uVar1": "combined_bytes",
                "PTR_DAT_080054d0": "data_pointer_array",
                "byte": "data_index",
                "combine_bytes_080047e8": "combine_bytes"
            },
            "code": "bool is_valid_input_080054b0(int input_index) {\n  uint16_t combined_bytes = combine_bytes(get_data_pointer(input_index));\n  return (combined_bytes & 0x21) == 0x21;\n}",
            "called": [
                "FUN_080047e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b0",
            "calling": [],
            "imported": false,
            "current_name": "is_valid_input_080054b0"
        },
        "FUN_08006f00": {
            "renaming": {
                "FUN_08006f00": "process_data_08006f00",
                "param_1": "data",
                "puVar1": "undefined_pointer_1",
                "uVar2": "undefined_value_2",
                "piVar3": "function_pointers",
                "iVar4": "function_address",
                "pcVar5": "function",
                "unaff_r4": "undefined_register_4",
                "unaff_r5": "undefined_register_5",
                "in_lr": "undefined_register_lr",
                "puVar6": "undefined_pointer_2"
            },
            "code": "int process_data_08006f00(uint data) {\n  int *function_pointers = *(int **)PTR_PTR_DAT_08006f0c;\n  if (data > 0x1f) {\n    *function_pointers = 0x16;\n    return -1;\n  }\n  int function_address = function_pointers[0x11];\n  if ((function_address != 0) && (*(code **)(function_address + data * 4) != (code *)0x0)) {\n    code *function = *(code **)(function_address + data * 4);\n    if (function != (code *)0x1) {\n      if (function == (code *)0xffffffff) {\n        *function_pointers = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(function_address + data * 4) = 0;\n      (*function)(data);\n    }\n    return 0;\n  }\n  undefined *function_pointers_ptr = PTR_PTR_DAT_08006f0c;\n  undefined4 function_value = thunk_get_one_08005750(function_pointers);\n  undefined *pointer_value = PTR_DAT_08006f30;\n  *(undefined4 *)PTR_DAT_08006f30 = 0;\n  int set_pointer_result = set_pointer_value_08005740(function_value, data, data, 0, function_pointers_ptr, unaff_r4, unaff_r5, in_lr);\n  if ((set_pointer_result == -1) && (*(int *)pointer_value != 0)) {\n    *function_pointers = *(int *)pointer_value;\n  }\n  return set_pointer_result;\n}",
            "called": [
                "FUN_08005740",
                "thunk_FUN_08005750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f00",
            "calling": [
                "FUN_08006ac0"
            ],
            "imported": false,
            "current_name": "process_data_08006f00"
        },
        "FUN_080016b4": {
            "renaming": {
                "FUN_080016b4": "process_input_080016b4",
                "param_1": "input_address",
                "cVar1": "result",
                "iVar2": "value1",
                "iVar3": "is_input_null",
                "uVar4": "value2",
                "uVar5": "ptr1",
                "uVar6": "ptr3",
                "uVar7": "ptr4",
                "uVar8": "ptr2",
                "uVar9": "value3",
                "uVar10": "value4",
                "uVar11": "value5",
                "uVar12": "value6",
                "uVar13": "value7",
                "uVar14": "value8",
                "uVar15": "value9",
                "uVar16": "value10",
                "uVar17": "value11",
                "uVar18": "value12",
                "local_38": "value13",
                "uStack_34": "value14"
            },
            "code": "char process_input_080016b4(int input_address)\n{\n  char result;\n  int value1 = get_value_and_return_wrapper(input_address + 0x44);\n  char cVar = *(char *)(input_address + 0x70);\n  if (cVar != '\\0') {\n    uint value2 = *(uint *)(input_address + 0x58);\n    int value3 = value1 - *(int *)(input_address + 0x44);\n    if (value3 < value2) {\n      result = '\\0';\n    }\n    else {\n      uint32_t *ptr1 = *(uint32_t **)(input_address + 0x38);\n      uint32_t *ptr2 = *(uint32_t **)(input_address + 0x40);\n      uint32_t *ptr3 = *(uint32_t **)(input_address + 0x48);\n      uint32_t *ptr4 = *(uint32_t **)(input_address + 0x60);\n      uint32_t *ptr5 = *(uint32_t **)(input_address + 0x68);\n      uint32_t *ptr6 = *(uint32_t **)(input_address + 0x6c);\n      uint64_t value4 = FUN1(*ptr1, *(ptr1 + 1), *ptr2, *(ptr2 + 1));\n      uint64_t value5 = FUN2(*ptr1, *(ptr1 + 1), *ptr2, *(ptr2 + 1), *(uint32_t *)(input_address + 0x50), *(uint32_t *)(input_address + 0x54));\n      uint64_t value6 = FUN3(value4 >> 0x20, value4, *(uint32_t *)(input_address + 0x20), *(uint32_t *)(input_address + 0x24));\n      uint64_t value7 = FUN4(value6, *(uint32_t *)(input_address + 0x48), *(uint32_t *)(input_address + 0x4c));\n      *ptr3 = value7;\n      if (*(char *)(input_address + 0x71) == '\\0') {\n        uint64_t value8 = FUN2(value5 >> 0x20, value5, *(uint32_t *)(input_address + 0x18), *(uint32_t *)(input_address + 0x1c));\n        uint64_t value9 = FUN3(value7 >> 0x20, value7, value8 >> 0x20, value8);\n        *ptr3 = value9;\n      }\n      if (is_input_null(value7, *(uint32_t *)(input_address + 0x4c), *ptr5, *(ptr5 + 1)) == 0) {\n        if (is_input_valid(value7, *(uint32_t *)(input_address + 0x4c)) != 0) {\n          *ptr3 = *ptr4;\n          *(uint32_t *)(input_address + 100) = *(uint32_t *)(input_address + 0x60);\n        }\n        else {\n          *ptr3 = *ptr5;\n          *(uint32_t *)(input_address + 100) = *(uint32_t *)(input_address + 100);\n        }\n      }\n      else {\n        *ptr3 = *ptr5;\n        *(uint32_t *)(input_address + 100) = *(uint32_t *)(input_address + 100);\n      }\n      if (*(char *)(input_address + 0x71) == '\\0') {\n        uint64_t value10 = FUN2(value4 >> 0x20, value4, *(uint32_t *)(input_address + 0x18), *(uint32_t *)(input_address + 0x1c));\n        uint64_t value11 = FUN3(*ptr3 >> 0x20, *ptr3, value10 >> 0x20, value10);\n        uint64_t value12 = FUN4(value5 >> 0x20, value5, *(uint32_t *)(input_address + 0x28), *(uint32_t *)(input_address + 0x2c));\n        uint64_t value13 = FUN3(value11 >> 0x20, value11, value12 >> 0x20, value12);\n        *ptr3 = FUN4(*ptr3, *(uint32_t *)(input_address + 0x4c), value13 >> 0x20, value13);\n      }\n      *ptr2 = *ptr1;\n      *(ptr2 + 1) = *(ptr1 + 1);\n      *(uint32_t *)(input_address + 0x44) = value1;\n      *(uint32_t *)(input_address + 0x50) = *ptr1;\n      *(uint32_t *)(input_address + 0x54) = *(ptr1 + 1);\n      result = cVar;\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_08000190",
                "FUN_080004f8",
                "FUN_08000a18",
                "FUN_080058e0",
                "FUN_080009dc",
                "FUN_08000194"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016b4",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "process_input_080016b4"
        },
        "FUN_0800074c": {
            "renaming": {
                "FUN_0800074c": "calculate_double_precision_value_0800074c",
                "param_1": "first_parameter",
                "param_2": "second_parameter",
                "param_3": "third_parameter",
                "param_4": "fourth_parameter",
                "uVar1": "temp_var_1",
                "uVar2": "temp_var_2",
                "uVar3": "temp_var_3",
                "uVar4": "temp_var_4",
                "uVar5": "temp_var_5",
                "uVar6": "temp_var_6",
                "uVar7": "temp_var_7",
                "iVar8": "temp_var_8",
                "uVar9": "temp_var_9",
                "unaff_r5": "temp_var_10",
                "uVar10": "temp_var_11",
                "uVar11": "temp_var_12",
                "uVar12": "temp_var_13",
                "uVar13": "temp_var_14",
                "bVar14": "temp_var_15",
                "bVar15": "temp_var_16",
                "bVar16": "temp_var_17"
            },
            "code": "\nulonglong calculate_double_precision_value_0800074c(undefined4 first_parameter,uint second_parameter,uint third_parameter,uint fourth_parameter)\n\n{\n  uint temp_var_1;\n  uint temp_var_2;\n  uint temp_var_3;\n  uint temp_var_4;\n  uint temp_var_5;\n  uint temp_var_6;\n  uint temp_var_7;\n  int temp_var_8;\n  uint temp_var_9;\n  uint temp_var_10;\n  uint temp_var_11;\n  uint temp_var_12;\n  uint temp_var_13;\n  uint temp_var_14;\n  bool temp_var_15;\n  bool temp_var_16;\n  bool temp_var_17;\n  ulonglong temp_var_17;\n  \n  temp_var_17 = CONCAT44(second_parameter,first_parameter);\n  temp_var_14 = 0x7ff;\n  temp_var_7 = second_parameter >> 0x14 & 0x7ff;\n  temp_var_15 = temp_var_7 == 0;\n  if (!temp_var_15) {\n    temp_var_10 = fourth_parameter >> 0x14 & 0x7ff;\n    temp_var_15 = temp_var_10 == 0;\n  }\n  if (!temp_var_15) {\n    temp_var_15 = temp_var_7 == 0x7ff;\n  }\n  if (!temp_var_15) {\n    temp_var_15 = temp_var_10 == 0x7ff;\n  }\n  if (temp_var_15) {\n    temp_var_17 = calculate_value_080008ba();\n  }\n  temp_var_9 = (uint)(temp_var_17 >> 0x20);\n  temp_var_12 = (uint)temp_var_17;\n  temp_var_8 = temp_var_7 - temp_var_10;\n  if ((third_parameter | fourth_parameter << 0xc) == 0) {\n    temp_var_7 = (temp_var_9 ^ fourth_parameter) & 0x80000000 | temp_var_9 & 0xfffff;\n    temp_var_17 = SCARRY4(temp_var_8,temp_var_14 >> 1);\n    temp_var_9 = temp_var_8 + (temp_var_14 >> 1);\n    temp_var_15 = (int)temp_var_9 < 0;\n    temp_var_16 = temp_var_9 == 0;\n    if (!temp_var_16 && temp_var_15 == temp_var_17) {\n      temp_var_17 = SBORROW4(temp_var_14,temp_var_9);\n      temp_var_15 = (int)(temp_var_14 - temp_var_9) < 0;\n      temp_var_16 = temp_var_14 == temp_var_9;\n    }\n    if (!temp_var_16 && temp_var_15 == temp_var_17) {\n      temp_var_7 = temp_var_7 | temp_var_9 * 0x100000;\n    }\n    if (!temp_var_16 && temp_var_15 == temp_var_17) {\n      return temp_var_17 & 0xffffffff | (ulonglong)temp_var_7 << 0x20;\n    }\n    temp_var_7 = temp_var_7 | 0x100000;\n    temp_var_14 = 0;\n    temp_var_16 = SBORROW4(temp_var_9,1);\n    temp_var_9 = temp_var_9 - 1;\n    temp_var_15 = temp_var_9 == 0;\n    temp_var_3 = temp_var_9;\n  }\n  else {\n    temp_var_3 = (fourth_parameter << 0xc) >> 4 | 0x10000000 | third_parameter >> 0x18;\n    temp_var_14 = third_parameter << 8;\n    temp_var_11 = (temp_var_9 << 0xc) >> 4 | 0x10000000 | temp_var_12 >> 0x18;\n    temp_var_12 = temp_var_12 * 0x100;\n    temp_var_7 = (temp_var_9 ^ fourth_parameter) & 0x80000000;\n    temp_var_15 = temp_var_3 <= temp_var_11;\n    if (temp_var_11 == temp_var_3) {\n      temp_var_15 = temp_var_14 <= temp_var_12;\n    }\n    temp_var_8 = temp_var_8 + (uint)temp_var_15;\n    temp_var_9 = temp_var_8 + 0x3fd;\n    if (temp_var_15 == false) {\n      temp_var_3 = temp_var_3 >> 1;\n      temp_var_14 = (uint)((third_parameter >> 0x18 & 1) != 0) << 0x1f | temp_var_14 >> 1;\n    }\n    temp_var_13 = temp_var_12 - temp_var_14;\n    temp_var_11 = (temp_var_11 - temp_var_3) - (uint)(temp_var_12 < temp_var_14);\n    temp_var_4 = temp_var_3 >> 1;\n    temp_var_1 = (uint)((temp_var_3 & 1) != 0) << 0x1f | temp_var_14 >> 1;\n    temp_var_12 = 0x100000;\n    temp_var_3 = 0x80000;\n    while( true ) {\n      temp_var_15 = temp_var_1 <= temp_var_13;\n      if (temp_var_4 < temp_var_11 || temp_var_11 - temp_var_4 < (uint)temp_var_15) {\n        temp_var_13 = temp_var_13 - temp_var_1;\n        temp_var_12 = temp_var_12 | temp_var_3;\n        temp_var_11 = (temp_var_11 - temp_var_4) - (uint)!temp_var_15;\n      }\n      temp_var_5 = temp_var_4 >> 1;\n      temp_var_1 = (uint)((temp_var_4 & 1) != 0) << 0x1f | temp_var_1 >> 1;\n      temp_var_16 = temp_var_1 <= temp_var_13;\n      temp_var_15 = temp_var_11 - temp_var_5 < (uint)temp_var_16;\n      temp_var_14 = temp_var_11;\n      if (temp_var_5 < temp_var_11 || temp_var_15) {\n        temp_var_13 = temp_var_13 - temp_var_1;\n        temp_var_14 = (temp_var_11 - temp_var_5) - (uint)!temp_var_16;\n      }\n      if (temp_var_5 < temp_var_11 || temp_var_15) {\n        temp_var_12 = temp_var_12 | temp_var_3 >> 1;\n      }\n      temp_var_11 = temp_var_4 >> 2;\n      temp_var_2 = (uint)((temp_var_5 & 1) != 0) << 0x1f | temp_var_1 >> 1;\n      temp_var_16 = temp_var_2 <= temp_var_13;\n      temp_var_15 = temp_var_14 - temp_var_11 < (uint)temp_var_16;\n      temp_var_5 = temp_var_14;\n      if (temp_var_11 < temp_var_14 || temp_var_15) {\n        temp_var_13 = temp_var_13 - temp_var_2;\n        temp_var_5 = (temp_var_14 - temp_var_11) - (uint)!temp_var_16;\n      }\n      if (temp_var_11 < temp_var_14 || temp_var_15) {\n        temp_var_12 = temp_var_12 | temp_var_3 >> 2;\n      }\n      temp_var_6 = temp_var_4 >> 3;\n      temp_var_1 = (uint)((temp_var_11 & 1) != 0) << 0x1f | temp_var_2 >> 1;\n      temp_var_16 = temp_var_1 <= temp_var_13;\n      temp_var_15 = temp_var_5 - temp_var_6 < (uint)temp_var_16;\n      temp_var_11 = temp_var_5;\n      if (temp_var_6 < temp_var_5 || temp_var_15) {\n        temp_var_13 = temp_var_13 - temp_var_1;\n        temp_var_11 = (temp_var_5 - temp_var_6) - (uint)!temp_var_16;\n      }\n      if (temp_var_6 < temp_var_5 || temp_var_15) {\n        temp_var_12 = temp_var_12 | temp_var_3 >> 3;\n      }\n      temp_var_14 = temp_var_11 | temp_var_13;\n      if (temp_var_14 == 0) break;\n      temp_var_11 = temp_var_11 << 4 | temp_var_13 >> 0x1c;\n      temp_var_13 = temp_var_13 << 4;\n      temp_var_4 = temp_var_4 & 0xfffffff8 | temp_var_1 >> 0x1d;\n      temp_var_1 = (temp_var_2 >> 1) << 3;\n      temp_var_3 = temp_var_3 >> 4;\n      if (temp_var_3 == 0) {\n        temp_var_6 = temp_var_4;\n        if ((temp_var_7 & 0x100000) != 0) goto LAB_0800086a;\n        temp_var_7 = temp_var_7 | temp_var_12;\n        temp_var_12 = 0;\n        temp_var_3 = 0x80000000;\n      }\n    }\n    if ((temp_var_7 & 0x100000) == 0) {\n      temp_var_7 = temp_var_7 | temp_var_12;\n      temp_var_12 = 0;\n    }\nLAB_0800086a:\n    temp_var_17 = 0xfc < temp_var_9;\n    temp_var_16 = SBORROW4(temp_var_9,0xfd);\n    temp_var_4 = temp_var_8 + 0x300;\n    temp_var_15 = temp_var_4 == 0;\n    temp_var_3 = temp_var_4;\n    if (temp_var_17 && !temp_var_15) {\n      temp_var_17 = 0x6ff < temp_var_4;\n      temp_var_16 = SBORROW4(temp_var_4,0x700);\n      temp_var_3 = temp_var_8 - 0x400;\n      temp_var_15 = temp_var_4 == 0x700;\n    }\n    if (!temp_var_17 || temp_var_15) {\n      temp_var_15 = temp_var_6 <= temp_var_11;\n      if (temp_var_11 == temp_var_6) {\n        temp_var_15 = temp_var_1 <= temp_var_13;\n      }\n      if (temp_var_11 == temp_var_6 && temp_var_13 == temp_var_1) {\n        temp_var_15 = (temp_var_12 & 1) != 0;\n      }\n      return CONCAT44(temp_var_7 + temp_var_9 * 0x100000 + (uint)CARRY4(temp_var_12,(uint)temp_var_15),temp_var_12 + temp_var_15);\n    }\n  }\n  if (!temp_var_15 && (int)temp_var_3 < 0 == temp_var_16) {\n    return (ulonglong)(temp_var_7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  temp_var_17 = SCARRY4(temp_var_9,0x36);\n  temp_var_15 = (int)(temp_var_9 + 0x36) < 0;\n  temp_var_16 = temp_var_9 == 0xffffffca;\n  if (temp_var_16 || temp_var_15 != temp_var_17) {\n    temp_var_12 = 0;\n  }\n  if (temp_var_16 || temp_var_15 != temp_var_17) {\n    temp_var_7 = temp_var_7 & 0x80000000;\n  }\n  if (temp_var_16 || temp_var_15 != temp_var_17) {\n    return CONCAT44(temp_var_7,temp_var_12);\n  }\n  temp_var_3 = -temp_var_9;\n  temp_var_11 = temp_var_3 - 0x20;\n  if (0x1f < (int)temp_var_3) {\n    temp_var_3 = temp_var_12 >> (temp_var_11 & 0xff) | temp_var_7 << (0x20 - temp_var_11 & 0xff);\n    temp_var_9 = (temp_var_7 >> (temp_var_11 & 0xff) & ~((temp_var_7 & 0x80000000) >> (temp_var_11 & 0xff))) -\n            ((int)temp_var_3 >> 0x1f);\n    if ((temp_var_14 | temp_var_12 << (0x20 - temp_var_11 & 0xff) | temp_var_3 << 1) == 0) {\n      temp_var_9 = temp_var_9 & ~(temp_var_3 >> 0x1f);\n    }\n    return CONCAT44(temp_var_7,temp_var_9) & 0x80000000ffffffff;\n  }\n  temp_var_8 = temp_var_3 - 0x14;\n  if (temp_var_8 != 0 && temp_var_8 < 0 == SCARRY4(temp_var_11,0xc)) {\n    temp_var_9 = 0xc - temp_var_8;\n    temp_var_3 = temp_var_12 << (temp_var_9 & 0xff);\n    temp_var_12 = temp_var_12 >> (0x20 - temp_var_9 & 0xff) | temp_var_7 << (temp_var_9 & 0xff);\n    temp_var_9 = temp_var_12 + -((int)temp_var_3 >> 0x1f);\n    if ((temp_var_14 | temp_var_3 << 1) == 0) {\n      temp_var_9 = temp_var_9 & ~(temp_var_3 >> 0x1f);\n    }\n    return CONCAT44((temp_var_7 & 0x80000000) + (uint)CARRY4(temp_var_12,-((int)temp_var_3 >> 0x1f)),temp_var_9);\n  }\n  temp_var_11 = temp_var_12 << (temp_var_9 + 0x20 & 0xff);\n  temp_var_12 = temp_var_12 >> (temp_var_3 & 0xff) | temp_var_7 << (temp_var_9 + 0x20 & 0xff);\n  temp_var_9 = temp_var_12 + -((int)temp_var_11 >> 0x1f);\n  if ((temp_var_14 | temp_var_11 << 1) == 0) {\n    temp_var_9 = temp_var_9 & ~(temp_var_11 >> 0x1f);\n  }\n  return CONCAT44((temp_var_7 & 0x80000000) +\n                  ((temp_var_7 & 0x7fffffff) >> (temp_var_3 & 0xff)) +\n                  (uint)CARRY4(temp_var_12,-((int)temp_var_11 >> 0x1f)),temp_var_9);\n}\n\n",
            "called": [
                "FUN_080008ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800074c",
            "calling": [
                "FUN_080015f8",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001918"
            ],
            "imported": false,
            "current_name": "calculate_double_precision_value_0800074c"
        },
        "FUN_080018f8": {
            "renaming": {
                "FUN_080018f8": "validate_and_set_params_080018f8",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void validate_and_set_params_080018f8() {\n  validate_and_set_params_080018f8_08001814();\n  return;\n}",
            "called": [
                "FUN_08001814"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018f8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "validate_and_set_params_080018f8"
        },
        "FUN_08005890": {
            "renaming": {
                "FUN_08005890": "check_if_parameter_is_valid_08005890",
                "param_1": "parameter_index",
                "uVar4": "parameter_value",
                "cVar1": "result",
                "iVar2": "bit_result",
                "uVar3": "data_value",
                "PTR_DAT_080058d8": "parameter_data_array",
                "PTR_DAT_080058dc": "parameter_bit_array",
                "get_bit_080047f4": "get_bit_value",
                "get_data_by_index_08004848": "get_data_by_index",
                "check_params_are_in_array_08004c48": "check_params_are_in_array"
            },
            "code": "char check_if_parameter_is_valid_08005890(uint parameter_index) {\\n  char result;\\n  int bit_result;\\n  uint parameter_value;\\n\\n  if (parameter_index < 0x3c) {\\n    parameter_value = (uint)(char)PTR_DAT_080058d8[parameter_index];\\n  }\\n  else {\\n    parameter_value = 0xffffffff;\\n  }\\n  if (parameter_value == 0xffffffff) {\\n    result = \"\\0\";\\n  }\\n  else {\\n    bit_result = get_bit_value(parameter_value, PTR_DAT_080058dc);\\n    if (bit_result == 0) {\\n      result = \"\\0\";\\n    }\\n    else {\\n      parameter_value = get_data_by_index(parameter_value);\\n      result = check_params_are_in_array(parameter_value, 1 << (parameter_value & 0xf) & 0xffff);\\n    }\\n  }\\n  if (result != \"\\0\") {\\n    result = \"\\x01\";\\n  }\\n  return result;\\n}",
            "called": [
                "FUN_08004848",
                "FUN_08004c48",
                "FUN_080047f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005890",
            "calling": [
                "FUN_080015b2",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "check_if_parameter_is_valid_08005890"
        },
        "FUN_08005da0": {
            "renaming": {
                "FUN_08005da0": "convert_from_base10_to_baseN_08005da0",
                "convert_base10_to_baseN_08005d8a": "convert_base10_to_baseN"
            },
            "code": "void convert_from_base10_to_baseN_08005da0() \n{\n  convert_base10_to_baseN_08005d8a();\n  return;\n}",
            "called": [
                "FUN_08005d8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da0",
            "calling": [],
            "imported": false,
            "current_name": "convert_from_base10_to_baseN_08005da0"
        },
        "FUN_08004cb2": {
            "renaming": {
                "FUN_08004cb2": "find_param_value_08004cb2",
                "param_1": "target_value",
                "param_2": "param_list",
                "*param_2": "*param_list",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint32_t find_param_value_08004cb2(uint8_t target_value, char *param_list)\n{\n    while(true)\n    {\n        if (*param_list == -1)\n        {\n            return UINT32_MAX;\n        }\n        if (*param_list == target_value)\n        {\n            break;\n        }\n        param_list += 12;\n    }\n    return *(uint32_t *)(param_list + 8);\n}",
            "called": [
                "FUN_08004cb2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb2",
            "calling": [
                "FUN_08004cce",
                "FUN_08004cb2"
            ],
            "imported": false,
            "current_name": "find_param_value_08004cb2"
        },
        "FUN_08004ef4": {
            "renaming": {
                "FUN_08004ef4": "check_input_and_set_flags_08004ef4",
                "param_1": "input",
                "iVar1": "input_minus_four",
                "subtract_four_from_input_08004e70": "subtract_four_from_input",
                "set_flags_on_param_08002c10": "set_flags_on_input"
            },
            "code": "void check_input_and_set_flags_08004ef4(int input) {\\n  int input_minus_four = subtract_four_from_input();\\n  if (*(char *)(input_minus_four + 0x5d) == \"\\0\") {\\n    set_flags_on_input(input);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08002c10",
                "FUN_08004e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef4",
            "calling": [
                "FUN_0800316c"
            ],
            "imported": false,
            "current_name": "check_input_and_set_flags_08004ef4"
        },
        "FUN_08001294": {
            "renaming": {
                "FUN_08001294": "set_params_08001294",
                "param_1": "obj_address",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4"
            },
            "code": "void set_params_08001294(int obj_address, undefined param1, undefined param2, undefined param3, undefined param4) {\n  *(undefined *)(obj_address + 0x18) = param1;\n  *(undefined *)(obj_address + 0x19) = param2;\n  *(undefined *)(obj_address + 0x1a) = param3;\n  *(undefined *)(obj_address + 0x1b) = param4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001294",
            "calling": [
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "set_params_08001294"
        },
        "FUN_08002384": {
            "renaming": {
                "FUN_08002384": "checkAndUpdate_08002384",
                "param_1": "params",
                "iVar1": "result",
                "uVar2": "divisor",
                "iVar3": "value1",
                "iVar4": "value2",
                "uVar5": "quotient",
                "local_14": "limit"
            },
            "code": "int checkAndUpdate_08002384(int *params)\n{\n  int result = 0;\n  uint divisor = 0;\n  int value1 = 0;\n  int value2 = 0;\n  uint quotient = 0;\n  int limit = 0;\n\n  if (*(char *)(params + 9) == '\\x01')\n  {\n    return 2;\n  }\n  *(undefined *)(params + 9) = 1;\n  result = checkAndUpdate_08002384Value();\n  if (result == 0)\n  {\n    params[10] = (params[10] & 0xffffeefdU) | 2;\n    divisor = *(uint *)PTR_DAT_0800246c;\n    quotient = calculateValue(2);\n    limit = divisor / quotient << 1;\n    while (limit != 0)\n    {\n      limit = limit - 1;\n    }\n    setFlagAndCheck(params);\n    *(uint *)(*params + 8) = *(uint *)(*params + 8) | 8;\n    value1 = getValueFromPointer();\n    while ((*(uint *)(*params + 8) & 8) != 0)\n    {\n      value2 = getValueFromPointer();\n      if (10 < (uint)(value2 - value1))\n      {\n        params[10] = (params[10] & 0xffffffedU) | 0x10;\n        *(undefined *)(params + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(value2 + 8) = *(uint *)(value2 + 8) | 4;\n    value1 = getValueFromPointer();\n    while ((*(uint *)(*params + 8) & 4) != 0)\n    {\n      value2 = getValueFromPointer();\n      if (10 < (uint)(value2 - value1))\n      {\n        params[10] = (params[10] & 0xffffffedU) | 0x10;\n        *(undefined *)(params + 9) = 0;\n        return 1;\n      }\n    }\n    params[10] = (params[10] & 0xfffffffcU) | 1;\n  }\n  *(undefined *)(params + 9) = 0;\n  return result;\n}\n",
            "called": [
                "FUN_080020f0",
                "FUN_08001cc4",
                "FUN_08001f84",
                "FUN_08003da4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002384",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "checkAndUpdate_08002384"
        },
        "FUN_08005650": {
            "renaming": {
                "FUN_08005650": "do_nothing_08005650"
            },
            "code": "\nvoid do_nothing_08005650(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005650",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "do_nothing_08005650"
        },
        "FUN_08002ad8": {
            "renaming": {
                "FUN_08002ad8": "process_data_08002ad8",
                "param_1": "data",
                "puVar1": "buffer",
                "PTR_00000009": "data_buffer",
                "*(short *)((int)param_1 + 0x2a)": "count",
                "*(char *)(undefined4 *)(*param_1 + 0x10)": "data_value"
            },
            "code": "int process_data_08002ad8(int* data){\n  short* count = (short*)((int)data + 0x2a);\n  if (*count != 0) {\n    unsigned char* buffer = (unsigned char*)data[9];\n    data[9] = (int)(buffer + 1);\n    *buffer = (unsigned char)(*(int*)(*data + 0x10));\n    *count -= 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_data_08002ad8"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "calculate_value_08004204",
                "*param_1": "params",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "value1_1",
                "iVar4": "value2_1",
                "iVar5": "value3_1",
                "iVar6": "value4_1",
                "iVar7": "value5_1",
                "iVar8": "value1_2",
                "iVar9": "value2_2",
                "iVar10": "value3_2",
                "iVar11": "value4_2",
                "iVar12": "pointer"
            },
            "code": "void calculate_value_08004204(int *params) {\n    uint value1 = params[3];\n    uint value2 = params[2] | params[4] | params[5];\n    uint value3 = params[6];\n    uint pointer = *params;\n    if (pointer != PTR_080043ac) {\n        int val1 = get_shifted_value_from_pointer_08003c50();\n        uint val2 = DAT_080043b0;\n        int val3 = params[1];\n        int val4 = get_shifted_value_from_pointer_08003c50();\n        int val5 = params[1];\n        int val6 = get_shifted_value_from_pointer_08003c50();\n        int val7 = params[1];\n        int val8 = get_shifted_value_from_pointer_08003c50();\n        int val9 = params[1];\n        int val10 = get_shifted_value_from_pointer_08003c50();\n        uint result = (((val7 * 0x19 / (val9 << 2)) + (val2 * ((val8 * 0x19 / (val5 << 2)) + (val6 * 0x19 / (val7 << 2))) / 0x1000000 - 100) * 0x10 + 50) >> 26 << 23) + ((val2 * ((val4 * 0x19 / (val3 << 2)) + (val5 * 0x19 / (val6 << 2))) / 0x1000000 - 100) * 0x10 & 0xf0) + (DAT_080043b0 * (val1 * 0x19 / (val3 << 2)) / 0x1000000 << 4);\n        *(uint *)(pointer + 8) = result;\n    }\n    else {\n        int val1 = get_shifted_value_08003c70();\n        uint val2 = DAT_080043b0;\n        int val3 = params[1];\n        int val4 = get_shifted_value_08003c70();\n        int val5 = params[1];\n        int val6 = get_shifted_value_08003c70();\n        int val7 = params[1];\n        int val8 = get_shifted_value_08003c70();\n        int val9 = params[1];\n        int val10 = get_shifted_value_08003c70();\n        uint result = (((val7 * 0x19 / (val9 << 2)) + (val2 * ((val8 * 0x19 / (val5 << 2)) + (val6 * 0x19 / (val7 << 2))) / 0x1000000 - 100) * 0x10 + 50) >> 26 << 23) + ((val2 * ((val4 * 0x19 / (val3 << 2)) + (val5 * 0x19 / (val6 << 2))) / 0x1000000 - 100) * 0x10 & 0xf0) + (DAT_080043b0 * (val1 * 0x19 / (val3 << 2)) / 0x1000000 << 4);\n        *(uint *)(pointer + 8) = result;\n    }\n}",
            "called": [
                "FUN_08003c70",
                "FUN_08003c50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "FUN_0800441a"
            ],
            "imported": false,
            "current_name": "calculate_value_08004204"
        },
        "FUN_08005da8": {
            "renaming": {
                "FUN_08005da8": "validate_and_process_input_08005da8",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "iVar1": "is_valid",
                "uVar2": "temp_1",
                "iVar3": "base10_to_baseN",
                "bVar4": "i",
                "lVar5": "temp",
                "uVar6": "shifted_input",
                "uVar7": "reversed_bits"
            },
            "code": "int validate_and_process_input_08005da8(undefined4 input_1, undefined4 input_2, undefined4 input_3, uint input_4, byte input_5) {\n    int result = 0;\n    int is_valid = is_valid_input(input_3, input_4, input_3, input_4);\n    if (is_valid == 0) {\n        is_valid = is_valid_input(input_3, input_4 & 0x7fffffff, 0xffffffff, DAT_08005f08);\n        if (is_valid == 0) {\n            is_valid = validate_params_and_return_result(input_3, input_4 & 0x7fffffff, 0xffffffff, DAT_08005f08);\n            if (is_valid == 0) {\n                result = process_string(input_1, PTR_DAT_08005f20);\n            }\n        } else {\n            is_valid = is_input_null(input_3, input_4, 0xe0000000, DAT_08005f0c);\n            if (is_valid == 0) {\n                is_valid = is_input_valid(input_3, input_4, 0xe0000000, DAT_08005f10);\n                if (is_valid == 0) {\n                    is_valid = is_input_valid(input_3, input_4, 0, 0);\n                    if (is_valid == 0) {\n                        result = 0;\n                    } else {\n                        result = execute_function_pointer(input_1, 0x2d);\n                        input_4 = input_4 + 0x80000000;\n                    }\n                    longlong temp = (ulonglong)DAT_08005f14 << 0x20;\n                    for (byte i = 0; i < input_5; i++) {\n                        temp = calculate_double_precision_value_0800074c((int)temp, (undefined4)((ulonglong)temp >> 0x20), 0, DAT_08005f18);\n                    }\n                    undefined4 shift_amount = calculate_shift_amount();\n                    undefined8 reversed_bits = reverse_bits();\n                    undefined8 shifted_input = FUNC_08000194(input_3, input_4, (int)temp, (undefined4)((ulonglong)temp >> 0x20));\n                    shifted_input = calculate_unsigned_division_08000190((int)shifted_input, (int)((ulonglong)shifted_input >> 0x20), (int)reversed_bits, (int)((ulonglong)reversed_bits >> 0x20));\n                    int base10_to_baseN = convert_base10_to_baseN(input_1, shift_amount, 10);\n                    result += base10_to_baseN;\n                    if (input_5 != 0) {\n                        int string_result = process_string(input_1, PTR_DAT_08005f28);\n                        result += string_result;\n                    }\n                    while (input_5 != 0) {\n                        shifted_input = calculate_ulonglong_result_080004f8((int)shifted_input, (int)((ulonglong)shifted_input >> 0x20), 0, DAT_08005f18);\n                        undefined4 shift = calculate_shift();\n                        int base_and_return = convert_base_and_return(input_1, shift, 10);\n                        result += base_and_return;\n                        undefined8 improved_function = improved_function(shift);\n                        shifted_input = calculate_unsigned_division_08000190((int)shifted_input, (int)((ulonglong)shifted_input >> 0x20), (int)improved_function, (int)((ulonglong)improved_function >> 0x20));\n                        input_5--;\n                    }\n                } else {\n                    result = process_string(input_1, PTR_DAT_08005f24);\n                }\n            } else {\n                result = process_string(input_1, PTR_DAT_08005f24);\n            }\n        }\n    } else {\n        result = process_string(input_1, PTR_DAT_08005f1c);\n    }\n    return result;\n}\n",
            "called": [
                "FUN_0800074c",
                "FUN_08005d8a",
                "FUN_0800040c",
                "FUN_080004f8",
                "FUN_08005cb6",
                "FUN_08000a18",
                "FUN_080009dc",
                "FUN_080009f0",
                "FUN_08005d82",
                "FUN_08000190",
                "FUN_0800042c",
                "FUN_08000a58",
                "FUN_08000aa8",
                "FUN_08005c96",
                "FUN_08000194",
                "FUN_08000a2c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da8",
            "calling": [
                "FUN_08005f2c"
            ],
            "imported": false,
            "current_name": "validate_and_process_input_08005da8"
        },
        "FUN_080045fe": {
            "renaming": {
                "FUN_080045fe": "set_parameter_080045fe",
                "param_1": "param_index",
                "*(uint *)(*param_1 + 0xc)": "param_value",
                "*(undefined *)((int)param_1 + 0x39)": "param_status"
            },
            "code": "int set_parameter_080045fe(int *param_index)\n{\n    uint *param_value = (uint *)(*param_index + 0xc);\n    *param_value &= 0xffffffbf;\n    char *param_status = (char *)((int)param_index + 0x39);\n    *param_status = 0x20;\n    validate_input_if_valid_param_index_found();\n    return 0;\n}",
            "called": [
                "FUN_08005604"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045fe",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "set_parameter_080045fe"
        },
        "FUN_08005f2c": {
            "renaming": {
                "FUN_08005f2c": "process_input_and_validate_08005f2c",
                "validate_and_process_input_08005da8": "validate_and_process_input"
            },
            "code": "void process_input_and_validate_08005f2c(void)\n{\n  validate_and_process_input();\n  return;\n}",
            "called": [
                "FUN_08005da8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f2c",
            "calling": [
                "FUN_08005f40",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "process_input_and_validate_08005f2c"
        },
        "FUN_080055e0": {
            "renaming": {
                "FUN_080055e0": "execute_param_function_if_valid_080055e0",
                "uVar1": "param_index",
                "PTR_DAT_080055fc": "PARAM_FUNTION_PTRS_START",
                "PTR_DAT_08005600": "PARAM_VALUES_START"
            },
            "code": "void execute_param_function_if_valid_080055e0(void)\n{\n  uint param_index = find_param_index();\n  if (param_index < 5) {\n    void (*param_function)(int) = *(void (**)(int))(PTR_DAT_080055fc + param_index * 4);\n    int param_value = *(int *)(PTR_DAT_08005600 + param_index * 4);\n    param_function(param_value);\n  }\n  return;\n}",
            "called": [
                "FUN_080055bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055e0",
            "calling": [
                "FUN_08004618"
            ],
            "imported": false,
            "current_name": "execute_param_function_if_valid_080055e0"
        },
        "FUN_08005f40": {
            "renaming": {
                "FUN_08005f40": "calculate_result_of_input_and_function_execution_08005f40",
                "param_1": "input_param",
                "iVar1": "input_result",
                "iVar2": "function_result",
                "process_input_and_validate_08005f2c": "process_input_and_validate",
                "execute_function_08005cc0": "execute_function"
            },
            "code": "int calculate_result_of_input_and_function_execution_08005f40(undefined4 input_param){\n                      int input_result;\n                      int function_result;\n                      input_result = process_input_and_validate();\n                      function_result = execute_function(input_param);\n                      return function_result + input_result;\n                    }",
            "called": [
                "FUN_08005f2c",
                "FUN_08005cc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f40",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "calculate_result_of_input_and_function_execution_08005f40"
        },
        "FUN_0800213c": {
            "renaming": {
                "FUN_0800213c": "check_and_update_value_0800213c",
                "param_1": "input_array",
                "iVar1": "return_value",
                "uVar2": "flags",
                "uVar3": "new_flags"
            },
            "code": "int check_and_update_value_0800213c(int *input_array) {\n  int return_value;\n  uint flags;\n  uint new_flags;\n  \n  if (input_array == NULL) {\n    return 1;\n  }\n  \n  if (input_array[10] == 0) {\n    input_array[11] = 0;\n    *(undefined *)(input_array + 9) = 0;\n    process_flags();\n  }\n  \n  return_value = check_and_update_value_0800213c_080020f0(input_array);\n  flags = input_array[10] & 0x10;\n  \n  if (flags == 0 && return_value == 0) {\n    input_array[10] = (input_array[10] & 0xffffeefdU) | 2;\n    new_flags = input_array[1] | input_array[7] | (input_array[3] << 1);\n    \n    if (input_array[2] == 0x100 || input_array[2] == 1) {\n      new_flags |= 0x100;\n    }\n    \n    if (input_array[5] == 1) {\n      if (input_array[3] == 0) {\n        new_flags |= (input_array[6] - 1) * 0x2000 | 0x800;\n      }\n      else {\n        input_array[10] |= 0x20;\n        input_array[11] |= 1;\n      }\n    }\n    \n    *(uint *)(*input_array + 4) = new_flags | (*(uint *)(*input_array + 4) & 0xffff16ff);\n    *(uint *)(*input_array + 8) = DAT_08002244 & (*(uint *)(*input_array + 8)) | new_flags;\n    \n    if (input_array[2] == 0x100 || input_array[2] == 1) {\n      new_flags = (input_array[4] - 1) * 0x100000;\n    }\n    else {\n      new_flags = 0;\n    }\n    \n    *(uint *)(*input_array + 0x2c) = new_flags | (*(uint *)(*input_array + 0x2c) & 0xff0fffff);\n    \n    if (new_flags != (DAT_08002248 & (*(uint *)(*input_array + 8))))) {\n      input_array[10] = (input_array[10] & 0xffffffedU) | 0x10;\n      input_array[11] |= 1;\n      return 1;\n    }\n    \n    input_array[11] = 0;\n    input_array[10] = (input_array[10] & 0xfffffffcU) | 1;\n    return 0;\n  }\n  \n  input_array[10] |= 0x10;\n  return 1;\n}\n",
            "called": [
                "FUN_080020f0",
                "FUN_08004974"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800213c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "check_and_update_value_0800213c"
        },
        "FUN_0800455a": {
            "renaming": {
                "FUN_0800455a": "validate_input_0800455a",
                "param_1": "input_array",
                "param_2": "array_length",
                "param_3": "param_3",
                "*(char *)((int)param_1 + 0x39)": "*(char *)((int)input_array + 0x39)",
                "*(char *)(param_1 + 0xe)": "*(char *)(input_array + 0xe)",
                "param_1[8]": "input_array[8]",
                "*(short *)(param_1 + 9)": "*(short *)(input_array + 9)",
                "*(short *)((int)param_1 + 0x26)": "*(short *)((int)input_array + 0x26)",
                "param_1[0xf]": "input_array[0xf]",
                "*(undefined *)((int)param_1 + 0x39)": "*(undefined *)((int)input_array + 0x39)",
                "*(undefined *)(param_1 + 0xe)": "*(undefined *)(input_array + 0xe)",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*input_array + 0xc)"
            },
            "code": "int validate_input_0800455a(int *input_array, int array_length, int param_3)\n{\n    if (*(char *)((int)input_array + 0x39) != ' ')\n    {\n        return 2;\n    }\n    if (array_length == 0)\n    {\n        return 1;\n    }\n    if (param_3 == 0)\n    {\n        return 1;\n    }\n    if (*(char *)(input_array + 0xe) != '\\x01')\n    {\n        input_array[8] = array_length;\n        *(short *)(input_array + 9) = (short)param_3;\n        *(short *)((int)input_array + 0x26) = (short)param_3;\n        input_array[0xf] = 0;\n        *(undefined *)((int)input_array + 0x39) = 0x21;\n        *(undefined *)(input_array + 0xe) = 0;\n        *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x80;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800455a",
            "calling": [
                "FUN_08005604",
                "FUN_08005568"
            ],
            "imported": false,
            "current_name": "validate_input_0800455a"
        },
        "FUN_08001a66": {
            "renaming": {
                "FUN_08001a66": "update_data_if_changed_08001a66",
                "param_1": "data_struct_ptr",
                "param_2": "new_data",
                "uVar1": "new_data1/2/3",
                "data_flag": "data_flag",
                "current_data": "current_data"
            },
            "code": "void update_data_if_changed_08001a66(int data_struct_ptr, int new_data, undefined4 param_3, undefined4 param_4)\n{\n    char data_flag = *(char *)(data_struct_ptr + 0x70);\n    int current_data = *(int *)(data_struct_ptr + 0x30);\n    if (data_flag != '\\0' && current_data != new_data) {\n        undefined8 new_data1 = calculate_unsigned_division_08000190(0, 0, *(undefined4 *)(data_struct_ptr + 0x18), *(undefined4 *)(data_struct_ptr + 0x1c), param_4);\n        *(undefined8 *)(data_struct_ptr + 0x18) = new_data1;\n        undefined8 new_data2 = calculate_unsigned_division_08000190(0, 0, *(undefined4 *)(data_struct_ptr + 0x20), *(undefined4 *)(data_struct_ptr + 0x24));\n        *(undefined8 *)(data_struct_ptr + 0x20) = new_data2;\n        undefined8 new_data3 = calculate_unsigned_division_08000190(0, 0, *(undefined4 *)(data_struct_ptr + 0x28), *(undefined4 *)(data_struct_ptr + 0x2c));\n        *(undefined8 *)(data_struct_ptr + 0x28) = new_data3;\n    }\n    *(int *)(data_struct_ptr + 0x30) = new_data;\n    return;\n}",
            "called": [
                "FUN_08000190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a66",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "update_data_if_changed_08001a66"
        },
        "FUN_08003c44": {
            "renaming": {
                "FUN_08003c44": "get_value_from_pointer_08003c44",
                "undefined4": "int",
                "PTR_DAT_08003c4c": "ptr"
            },
            "code": "int get_value_from_pointer_08003c44(){\n    int *PTR_DAT_08003c4c = (int *)PTR_DAT_08003c4c;\n    return *PTR_DAT_08003c4c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c44",
            "calling": [
                "FUN_08001b48",
                "FUN_08003c70",
                "FUN_08003c50"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08003c44"
        },
        "FUN_080028d2": {
            "renaming": {
                "FUN_080028d2": "set_value_in_memory_080028d2",
                "param_1": "memory_location",
                "PTR_": "memory_location",
                "DAT_": "value_to_set"
            },
            "code": "int set_value_in_memory_080028d2(int *PTR_)\n{\n    int DAT_ = PTR_[17] & 0xff;\n    *(unsigned int *)(*PTR_ + 16) = DAT_;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "set_value_in_memory_080028d2"
        },
        "FUN_08000a18": {
            "renaming": {
                "FUN_08000a18": "is_input_null_08000a18_08000a18",
                "in_CY": "input_char",
                "validate_params_and_return_080009a8_080009a8": "validate_input_and_return_080009a8_080009a8"
            },
            "code": "bool is_input_null_08000a18_08000a18(void)\\n{\\n  char input_char;\\n  validate_input_and_return_080009a8_080009a8();\\n  return input_char == \"\\0\";\\n}",
            "called": [
                "FUN_080009a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a18",
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "is_input_null_08000a18_08000a18"
        },
        "FUN_08005384": {
            "renaming": {
                "FUN_08005384": "set_parameter_value_08005384",
                "PTR_DAT_080053c4": "parameter_list",
                "PTR_DAT_080053c8": "parameter_data_list",
                "PTR_DAT_080053cc": "parameter_value_list",
                "find_param_08004c78": "find_parameter_index",
                "get_parameter_value_08004ca2": "get_parameter_value_type",
                "uVar5": "param_value_index",
                "puVar2": "parameter_data",
                "cVar1": "parameter_name",
                "iVar4": "param_index",
                "FUN_08004f4c": "set_parameter_value_func"
            },
            "code": "void set_parameter_value_08005384(void)\n{\n  char parameter_name;\n  undefined *parameter_data;\n  undefined data_type;\n  int param_index;\n  undefined4 param_value_index;\n  parameter_name = PTR_DAT_080053c4[1];\n  param_index = find_parameter_index(parameter_name,PTR_DAT_080053c4);\n  if (param_index != 0) {\n    param_value_index = find_parameter_index(parameter_name,PTR_DAT_080053c4);\n    data_type = get_parameter_value_type(param_value_index,PTR_DAT_080053c8);\n    parameter_data = PTR_DAT_080053c8;\n    parameter_data[0x59] = data_type;\n    parameter_data[0x58] = parameter_name;\n    *(undefined4 *)(parameter_data + 0x48) = 0x2580;\n    *(undefined4 *)(parameter_data + 0x54) = 0;\n    *(undefined4 *)(parameter_data + 0x4c) = 0;\n    *(undefined4 *)(parameter_data + 0x50) = 0;\n    set_parameter_value_08005384_func(parameter_data);\n  }\n  return;\n}",
            "called": [
                "FUN_08004ca2",
                "FUN_08004c78",
                "FUN_08004f4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005384",
            "calling": [
                "FUN_080053d4"
            ],
            "imported": false,
            "current_name": "set_parameter_value_08005384"
        },
        "FUN_08005b3c": {
            "renaming": {
                "FUN_08005b3c": "getByteFromTable_08005b3c",
                "param_1": "address",
                "param_2": "index",
                "uVar1": "byteValue"
            },
            "code": "void getByteFromTable_08005b3c(int address, uint index)\n{\n    int MAX_INDEX = 0x3c;\n    unsigned char byteValue;\n    if (index < MAX_INDEX) {\n        byteValue = PTR_DAT_08005b50[index];\n    }\n    else {\n        byteValue = 0xff;\n    }\n    *(unsigned char *)(address + 300) = byteValue;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b3c",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "getByteFromTable_08005b3c"
        },
        "FUN_080046b8": {
            "renaming": {
                "FUN_080046b8": "process_input_080046b8",
                "param_1": "input_data",
                "puVar3": "data_ptr",
                "uVar5": "flags1",
                "uVar2": "flags2",
                "process_string_08004618": "process_string",
                "process_data_08004198": "process_data",
                "set_parameter_080045fe": "set_parameter",
                "do_nothing_08005650": "do_nothing",
                "set_flags_0800417c": "set_flags",
                "get_data_size_0800258c": "get_data_size"
            },
            "code": "void process_input_080046b8(uint **input_data)\n{\n  uint *data_ptr = *input_data;\n  uint flags1 = *data_ptr;\n  uint flags2 = data_ptr[3];\n  if ((((flags1 & 0xf) == 0) && ((flags1 & 0x20) != 0)) && ((flags2 & 0x20) != 0))) {\n    process_string(input_data);\n    return;\n  }\n  if (((flags1 & 0xf) == 0) || ((data_ptr[5] & 1) == 0 && ((flags2 & 0x120) == 0)))) {\n    if (((flags1 & 0x80) != 0) && ((flags2 & 0x80) != 0))) {\n      process_data(input_data);\n      return;\n    }\n    if (((flags1 & 0x40) != 0) && ((flags2 & 0x40) != 0))) {\n      set_parameter(input_data);\n    }\n  }\n  else {\n    if (((flags1 & 1) != 0) && ((flags2 & 0x100) != 0))) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 1);\n    }\n    if (((flags1 & 4) != 0) && ((data_ptr[5] & 1) != 0))) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 2);\n    }\n    if (((flags1 & 2) != 0) && ((data_ptr[5] & 1) != 0))) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 4);\n    }\n    if (((flags1 & 8) != 0) && ((data_ptr[5] & 1) != 0))) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 8);\n    }\n    if (input_data[0xf] != (uint *)0x0) {\n      if (((flags1 & 0x20) != 0) && ((flags2 & 0x20) != 0))) {\n        process_string(input_data);\n      }\n      if ((((uint)input_data[0xf] & 8) == 0) && (((*input_data)[5] & 0x40) == 0))) {\n        do_nothing(input_data);\n        input_data[0xf] = (uint *)0x0;\n        return;\n      }\n      set_flags(input_data);\n      data_ptr = *input_data;\n      if ((data_ptr[5] & 0x40) == 0) {\n        do_nothing(input_data);\n        return;\n      }\n      data_ptr[5] = data_ptr[5] & 0xffffffbf;\n      if (input_data[0xd] == (uint *)0x0) {\n        do_nothing(input_data);\n        return;\n      }\n      input_data[0xd][0xd] = (uint)PTR_LAB_080047d8_1_080047d4;\n      int data_size = get_data_size(input_data[0xd]);\n      if (data_size != 0) {\n        (*(code *)input_data[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_080045fe",
                "FUN_08005650",
                "FUN_08004198",
                "FUN_0800258c",
                "FUN_08004618",
                "FUN_0800417c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b8",
            "calling": [],
            "imported": false,
            "current_name": "process_input_080046b8"
        },
        "FUN_08004c8a": {
            "renaming": {
                "FUN_08004c8a": "find_parameter_value_08004c8a",
                "param_1": "target_parameter",
                "param_2": "parameter_list",
                "*param_2": "*parameter_list"
            },
            "code": "int find_parameter_value_08004c8a(int target_parameter, char *parameter_list)\n{\n  while( true ) {\n    if (*(int *)(parameter_list + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(parameter_list + 4) == target_parameter) break;\n    parameter_list = parameter_list + 0xc;\n  }\n  return (int)*parameter_list;\n}",
            "called": [
                "FUN_08004c8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c8a",
            "calling": [
                "FUN_08004ca2",
                "FUN_08004c8a"
            ],
            "imported": false,
            "current_name": "find_parameter_value_08004c8a"
        },
        "FUN_08001cd0": {
            "renaming": {
                "FUN_08001cd0": "calculate_value_08001cd0",
                "param_1": "param_array",
                "param_2": "param_length",
                "iVar1": "start_time",
                "uVar2": "value2",
                "iVar3": "value3",
                "uVar4": "result",
                "puVar5": "array",
                "uVar6": "value1",
                "local_1c": "local_counter",
                "PTR_DAT_08001e2c": "PTR_DAT_08001e2c",
                "DAT_08001e30": "DAT_08001e30",
                "DAT_08001e34": "DAT_08001e34",
                "DAT_08001e38": "DAT_08001e38",
                "DAT_08001e3c": "DAT_08001e3c"
            },
            "code": "uint32_t calculate_value_08001cd0(uint32_t **param_array, uint32_t param_length)\n{\n    int start_time = get_current_time();\n    uint32_t *array = *param_array;\n    uint32_t result = 0;\n    uint32_t local_counter = 0;\n    uint32_t value1 = 0;\n    uint32_t value2 = 0;\n    uint32_t value3 = 0;\n    uint32_t value4 = 0;\n    uint32_t value5 = 0;\n    uint32_t value6 = 0;\n    uint32_t value7 = 0;\n    uint32_t value8 = 0;\n    uint32_t value9 = 0;\n    uint32_t value10 = 0;\n\n    if ((array[2] & 0x100) == 0)\n    {\n        if (((array[1] & 0x100) == 0) && ((array[0xb] & 0xf00000) == 0))\n        {\n            while ((**param_array & 2) == 0)\n            {\n                if ((param_length != 0xffffffff) && ((param_length != 0) && (get_current_time() - start_time > param_length)))\n                {\n                    (*param_array)[10] |= 4;\n                    (*param_array)[9] = 0;\n                    return 3;\n                }\n            }\n            (*param_array)[10] |= 4;\n            (*param_array)[9] = 0;\n            result = 3;\n        }\n        else\n        {\n            value1 = *(uint32_t *)PTR_DAT_08001e2c;\n            value2 = calculate_value_08001cd0_08003da4(2);\n            array = *param_array;\n            if (((array[4] & DAT_08001e30) == 0) && ((array[3] & DAT_08001e30 + 0xdc000000) == 0))\n            {\n                if ((array[4] & DAT_08001e34) == 0)\n                {\n                    if ((array[3] & DAT_08001e38) == 0)\n                    {\n                        value3 = 0x14;\n                    }\n                    else\n                    {\n                        value3 = 0x29;\n                    }\n                }\n                else\n                {\n                    value3 = 0x29;\n                }\n            }\n            else if (((array[4] & DAT_08001e34) == 0) && ((array[3] & DAT_08001e34 + 0xee000000) == 0))\n            {\n                value3 = 0x54;\n            }\n            else if ((DAT_08001e3c & array[4]) == 0)\n            {\n                if ((DAT_08001e3c & array[3]) == 0)\n                {\n                    value3 = 0x54;\n                }\n                else\n                {\n                    value3 = 0xfc;\n                }\n            }\n            else\n            {\n                value3 = 0xfc;\n            }\n            value4 = (value1 / value2) * value3;\n            while ((local_counter <= value4) && (value4 - local_counter != 0))\n            {\n                if ((param_length != 0xffffffff) && ((param_length != 0) && (get_current_time() - start_time > param_length)))\n                {\n                    (*param_array)[10] |= 4;\n                    (*param_array)[9] = 0;\n                    return 3;\n                }\n                local_counter++;\n            }\n            **param_array = 0xffffffed;\n            (*param_array)[10] |= 0x200;\n            if (((*param_array)[2] & 0xe0000) == 0xe0000)\n            {\n                if (param_array[3] == (uint32_t *)0x0)\n                {\n                    (*param_array)[10] &= 0xfffffeff;\n                    if (((*param_array)[10] & 0x1000) == 0)\n                    {\n                        (*param_array)[10] |= 1;\n                        result = 0;\n                    }\n                    else\n                    {\n                        result = 0;\n                    }\n                }\n                else\n                {\n                    result = 0;\n                }\n            }\n            else\n            {\n                result = 0;\n            }\n        }\n    }\n    else\n    {\n        (*param_array)[10] |= 0x20;\n        (*param_array)[9] = 0;\n        result = 1;\n    }\n    return result;\n}",
            "called": [
                "FUN_08001cc4",
                "FUN_08003da4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cd0",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "calculate_value_08001cd0"
        },
        "FUN_08004178": {
            "renaming": {
                "FUN_08004178": "do_nothing_08004178"
            },
            "code": "\nvoid do_nothing_08004178(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004178",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08004178"
        },
        "FUN_08004a4c": {
            "renaming": {
                "FUN_08004a4c": "find_and_process_data_08004a4c",
                "param_1": "input_value",
                "local_46": "result",
                "local_44": "shifted_value",
                "local_40": "value_1",
                "local_3c": "value_2",
                "local_38": "found_value",
                "local_34": "value_3",
                "local_30": "value_4",
                "local_2c": "value_5",
                "local_28": "value_6",
                "local_24": "value_7",
                "local_20": "value_8",
                "local_1c": "value_9",
                "local_10": "value_10"
            },
            "code": "int find_and_process_data_08004a4c(int input_value) {\n  int value_1 = 0;\n  int value_2 = 0;\n  int value_3 = 0;\n  int value_4 = 0;\n  int value_5 = 0;\n  int value_6 = 0;\n  int value_7 = 0;\n  int value_8 = 0;\n  int value_9 = 0;\n  int value_10 = 0;\n  int result = 0;\n  int found_value = find_value(input_value, PTR_DAT_08004b2c);\n  if (found_value != 0) {\n    *PTR_DAT_08004b30 = (char)input_value;\n    if (check_and_update_value_0800213c(&found_value) == 0) {\n      int shifted_value = get_shifted_value(input_value);\n      if (shifted_value < 0x12) {\n        value_1 = 1;\n        value_2 = 2;\n        if (process_data_08001e48(&found_value, &shifted_value) == 0) {\n          if (checkAndUpdate_08002384(&found_value) == 0) {\n            if (set_flags_and_check_08002004(&found_value) == 0) {\n              if (calculate_value_08001cd0(&found_value, 10) == 0) {\n                uint value_at_offset = get_value_at_offset_08001f80(&found_value);\n                if ((value_at_offset & 0x200) != 0) {\n                  result = get_value_at_offset_0x4c_from_pointer_08001e40(&found_value);\n                }\n                if (update_value_if_needed_08002348(&found_value) != 0 || update_values_0800224c(&found_value) != 0) {\n                  result = 0;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_08002348",
                "FUN_080061e0",
                "FUN_0800213c",
                "FUN_08001cd0",
                "FUN_08001e40",
                "FUN_08002004",
                "FUN_0800224c",
                "FUN_08001e48",
                "FUN_08004c78",
                "FUN_08001f80",
                "FUN_0800492c",
                "FUN_08002384"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a4c",
            "calling": [
                "FUN_08005754"
            ],
            "imported": false,
            "current_name": "find_and_process_data_08004a4c"
        },
        "FUN_08006112": {
            "renaming": {
                "FUN_08006112": "calculate_result_and_swap_params_08006112",
                "param_1": "first_param",
                "param_2": "second_param",
                "calculate_result_08006158": "calculate_result",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void calculate_result_and_swap_params_08006112(int first_param, int second_param)\n{\n  swap_params(first_param, second_param);\n  calculate_result(first_param, second_param);\n  return;\n}",
            "called": [
                "FUN_08006158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006112",
            "calling": [
                "FUN_08005fc8"
            ],
            "imported": false,
            "current_name": "calculate_result_and_swap_params_08006112"
        },
        "FUN_08004974": {
            "renaming": {
                "FUN_08004974": "process_flags_08004974",
                "param_1": "flag_values",
                "param_2": "flag_bits",
                "iVar2": "flag_memory_address",
                "uVar3": "set_flag_result",
                "uVar4": "flag_mask_1",
                "uVar5": "current_flag_value",
                "local_18": "new_flag_value",
                "local_14": "unused",
                "local_10": "unused",
                "puVar1": "flag_pointer",
                "PTR_DAT_080049e8": "flag_pointer",
                "DAT_080049ec": "flag_memory_address",
                "DAT_080049e0": "flag_value_1",
                "DAT_080049e4": "flag_value_2"
            },
            "code": "void process_flags_08004974(uint *flag_values, uint flag_bits)\n{\n  uint current_flag_value;\n  uint flag_mask;\n  uint flag_bit;\n  uint flag_index;\n  uint new_flag_value;\n  uint flag_mask_1 = 0x200;\n  uint flag_mask_2 = 0x400;\n  uint flag_mask_result;\n  uint *PTR_DAT_080049e8 = (uint *)0x080049e8;\n  undefined4 set_flag_result;\n  \n  current_flag_value = *flag_values;\n  if (current_flag_value == 0x080049e0) {\n    flag_mask_result = *(uint *)(0x080049ec + 0x18) | flag_mask_1;\n    *(uint *)(0x080049ec + 0x18) = flag_mask_result;\n    current_flag_value = *(uint *)(0x080049ec + 0x18) & flag_mask_1;\n  }\n  else {\n    if (current_flag_value == 0x080049e4) {\n      flag_mask_result = *(uint *)(0x080049ec + 0x18) | flag_mask_2;\n      *(uint *)(0x080049ec + 0x18) = flag_mask_result;\n      current_flag_value = *(uint *)(0x080049ec + 0x18) & flag_mask_2;\n    }\n  }\n  set_flag_result = set_flag(*PTR_DAT_080049e8, flag_bits, flag_mask_result, current_flag_value);\n  flag_index = (byte)*PTR_DAT_080049e8 & 0xf;\n  flag_bit = 1 << flag_index;\n  new_flag_value = (uint)flag_bit & 0xffff;\n  process_bits(set_flag_result, &new_flag_value, 3, 0);\n}\n",
            "called": [
                "FUN_08004884",
                "FUN_08002624"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004974",
            "calling": [
                "FUN_0800213c"
            ],
            "imported": false,
            "current_name": "process_flags_08004974"
        },
        "FUN_08003520": {
            "renaming": {
                "FUN_08003520": "process_input_08003520",
                "param_1": "input_data",
                "puVar2": "input",
                "uVar3": "flag1",
                "uVar4": "flag2",
                "DAT_080035f8": "FLAG_1",
                "0x100": "FLAG_2",
                "0x10200": "FLAG_3",
                "0x10400": "FLAG_4",
                "cVar1": "c"
            },
            "code": "void process_input_08003520(uint **input_data){\n    uint *input = *input_data;\n    uint flag1 = input[5];\n    uint flag2 = input[1];\n    if (((flag1 & DAT_080035f8) != 0) && ((flag2 & 0x100) != 0)) {\n        input_data[16] = (uint *)((uint)input_data[16] | 1);\n        input[5] = 0xfffffeff;\n        **input_data = **input_data | 0x8000;\n    }\n    if (((flag1 & FLAG_2) != 0) && ((flag2 & 0x100) != 0)) {\n        input_data[16] = (uint *)((uint)input_data[16] | 2);\n        (*input_data)[5] = 0xfffffdff;\n    }\n    if (((flag1 & FLAG_3) != 0) && ((flag2 & 0x100) != 0)) {\n        char c = *(char *)((int)input_data + 0x3d);\n        if (((*(char *)((int)input_data + 0x3e) == ' ') && (*(short *)((int)input_data + 0x2a) == 0)) && (((c == '!' || (c == ')')) || ((c == '(' && (input_data[12] == (uint *)0x21)))))) {\n            modify_input(input_data);\n        }\n        else {\n            input_data[16] = (uint *)((uint)input_data[16] | 4);\n            if (*(char *)((int)input_data + 0x3e) == '\\x10') {\n                **input_data = **input_data | 0x200;\n            }\n            (*input_data)[5] = 0xfffffbff;\n        }\n    }\n    if (((flag1 & FLAG_4) != 0) && ((flag2 & 0x100) != 0)) {\n        input_data[16] = (uint *)((uint)input_data[16] | 8);\n        (*input_data)[5] = 0xfffff7ff;\n    }\n    if (input_data[16] != (uint *)0x0) {\n        process_input_08003520_data(input_data);\n    }\n}\n",
            "called": [
                "FUN_08002d1c",
                "FUN_0800316c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003520",
            "calling": [],
            "imported": false,
            "current_name": "process_input_08003520"
        },
        "FUN_08002ca6": {
            "renaming": {
                "FUN_08002ca6": "process_input_08002ca6",
                "param_1": "input",
                "puVar2": "buffer",
                "cVar1": "last_char"
            },
            "code": "int process_input_08002ca6(int *input)\n{\n    char last_char = *(char *)((int)input + 0x3d);\n    if (*(short *)((int)input + 0x2a) != 0) {\n        undefined *buffer = (undefined *)input[9];\n        input[9] = (int)(buffer + 1);\n        *buffer = (char)*(undefined4 *)(*input + 0x10);\n        *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) - 1;\n        if ((*(short *)((int)input + 0x2a) == 0) && (last_char == '*')) {\n            *(uint *)(*input + 4) = *(uint *)(*input + 4) & 0xfffffbff;\n            input[0xc] = 0x22;\n            *(undefined *)((int)input + 0x3d) = 0x28;\n            do_nothing_08002ca4();\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_08002ca4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca6",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_08002ca6"
        },
        "FUN_08002ca4": {
            "renaming": {
                "FUN_08002ca4": "do_nothing_08002ca4"
            },
            "code": "\nvoid do_nothing_08002ca4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca4",
            "calling": [
                "FUN_08002ca6",
                "FUN_080032b4"
            ],
            "imported": false,
            "current_name": "do_nothing_08002ca4"
        },
        "FUN_08007328": {
            "renaming": {
                "FUN_08007328": "do_nothing_08007328"
            },
            "code": "\nvoid do_nothing_08007328(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007328",
            "calling": [
                "FUN_08006198",
                "FUN_0800010c"
            ],
            "imported": false,
            "current_name": "do_nothing_08007328"
        },
        "FUN_08005b54": {
            "renaming": {
                "FUN_08005b54": "initialize_param_08005b54_08005b54",
                "param_1": "param_arr",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "value",
                "PTR_PTR_LAB_080059c8_1_08005ba0": "ptr_to_ptr",
                "PTR_DAT_08005ba4": "ptr_to_data1",
                "set_color_08005b24": "set_color",
                "PTR_DAT_08005ba8": "ptr_to_data2",
                "get_parameter_value_08004ca2": "get_param_value",
                "PTR_DAT_08005bac": "ptr_to_data3",
                "initialize_struct_08005a44": "init_struct"
            },
            "code": "undefined4 *initialize_param_08005b54_08005b54(undefined4 *param_arr, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined uVar1;\n  param_arr[1] = 0;\n  param_arr[2] = 1000;\n  *param_arr = PTR_PTR_LAB_080059c8_1_08005ba0;\n  if (param_arr == (undefined4 *)PTR_DAT_08005ba4) {\n    set_color_08005b24(param_arr,0,param_3,PTR_DAT_08005ba4,param_4);\n    getByteFromTable_08005b3c(param_arr,1);\n  }\n  else {\n    uVar1 = get_parameter_value_08004ca2(param_2,PTR_DAT_08005ba8);\n    *(undefined *)((int)param_arr + 0x12d) = uVar1;\n    uVar1 = get_parameter_value_08004ca2(param_2,PTR_DAT_08005bac);\n    *(undefined *)(param_arr + 0x4b) = uVar1;\n  }\n  initialize_struct_08005a44(param_arr);\n  return param_arr;\n}",
            "called": [
                "FUN_08004ca2",
                "FUN_08005a44",
                "FUN_08005b3c",
                "FUN_08005b24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b54",
            "calling": [
                "FUN_08005bb0"
            ],
            "imported": false,
            "current_name": "initialize_param_08005b54_08005b54"
        },
        "FUN_08004618": {
            "renaming": {
                "FUN_08004618": "process_string_08004618",
                "param_1": "input_array",
                "pbVar1": "output_byte_ptr",
                "sVar2": "remaining_iterations",
                "puVar3": "output_char_ptr",
                "string": "input_string",
                "flag_ptr": "flag_ptr",
                "data_ptr": "data_ptr",
                "data": "data",
                "output_ptr": "output_ptr",
                "output_char_ptr": "output_char_ptr"
            },
            "code": "int process_string_08004618(int *input_array) {\n  char *string = (char *)(input_array + 0x3a);\n  if (*string != '\"') {\n    return 2;\n  }\n  int *flag_ptr = input_array + 0xc;\n  *flag_ptr &= ~0x20;\n  *flag_ptr &= ~0x100;\n  *(input_array + 0x14) &= ~0x1;\n  *string = ' ';\n  execute_param_function_if_valid_080055e0();\n  int remaining_iterations = *(short *)(input_array + 0x2e) - 1;\n  *(short *)(input_array + 0x2e) = remaining_iterations;\n  if (remaining_iterations != 0) {\n    return 0;\n  }\n  int *data_ptr = (int *)(*input_array + 0x4);\n  int data = *data_ptr;\n  int *output_ptr = input_array + 0xa;\n  char *output_char_ptr = (char *)(*output_ptr);\n  if (input_array[2] == 0x1000) {\n    if (input_array[4] == 0) {\n      *(unsigned short *)output_char_ptr = (unsigned short)((data << 0x17) >> 0x17);\n      *output_ptr += 2;\n    }\n    else {\n      *(unsigned short *)output_char_ptr = (unsigned short)data & 0xff;\n      *output_ptr += 1;\n    }\n  }\n  else {\n    if (input_array[4] == 0) {\n      *output_char_ptr = (char)data;\n      *output_ptr += 1;\n    }\n    else {\n      *output_char_ptr = (char)data & 0x7f;\n      *output_ptr += 1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_080055e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004618",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "process_string_08004618"
        },
        "FUN_08006c40": {
            "renaming": {
                "FUN_08006c40": "initialize_data_08006c40",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "data_pointer",
                "DAT_08006c78": "constant_value_1",
                "PTR_FUN_08006f5a_1_08006c7c": "function_pointer_1",
                "PTR_FUN_08006f92_1_08006c80": "function_pointer_2",
                "PTR_LAB_08006fb6_1_08006c84": "label_pointer"
            },
            "code": "void initialize_data_08006c40(undefined4 *data, undefined2 value1, undefined2 value2) {\n  data[0] = 0;\n  data[1] = 0;\n  data[2] = 0;\n  *(undefined2 *)(data + 3) = value1;\n  data[0x19] = 0;\n  *(undefined2 *)((int)data + 0xe) = value2;\n  data[4] = 0;\n  data[5] = 0;\n  data[6] = 0;\n  fill_memory_with_value_080061e0(data + 0x17, 0, 8);\n  data[8] = data;\n  data[9] = DAT_08006c78;\n  data[10] = PTR_process_input_08006f5a_1_08006c7c;\n  data[0xb] = PTR_check_and_update_return_value_08006f92_1_08006c80;\n  data[0xc] = PTR_LAB_08006fb6_1_08006c84;\n}",
            "called": [
                "FUN_080061e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c40",
            "calling": [
                "FUN_08006cb4"
            ],
            "imported": false,
            "current_name": "initialize_data_08006c40"
        },
        "FUN_0800157c": {
            "renaming": {
                "FUN_0800157c": "process_data_0800157c",
                "param_1": "data",
                "param_2": "size",
                "param_3": "flag",
                "*param_1": "result",
                "process_bit_array_080057b4": "process_bit_array"
            },
            "code": "char* process_data_0800157c(char* data, int size, char flag) {\n    char* result = data;\n    char first_char = (char)size;\n    char second_char = flag;\n    result[0] = first_char;\n    result[1] = second_char;\n    result[2] = second_char;\n    process_bit_array(size, 0);\n    process_bit_array(second_char, 1);\n    process_bit_array(second_char, 1);\n    process_data_0800157c_08005848(second_char, 1);\n    process_data_0800157c_08005848(second_char, 0);\n    return result;\n}",
            "called": [
                "FUN_08005848",
                "FUN_080057b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": false,
            "current_name": "process_data_0800157c"
        },
        "FUN_080045a2": {
            "renaming": {
                "FUN_080045a2": "validate_input_080045a2",
                "param_1": "input_array",
                "param_2": "array_size",
                "param_3": "param_3",
                "*(char *)((int)param_1 + 0x3a)": "input_array[0x3a]",
                "*(char *)(param_1 + 0xe)": "input_array[0xe]",
                "param_1[10]": "input_array[10]",
                "*(short *)(param_1 + 0xb)": "input_array[0xb]",
                "*(short *)((int)param_1 + 0x2e)": "input_array[0x2e]",
                "param_1[0xf]": "input_array[0xf]",
                "*(undefined *)((int)param_1 + 0x3a)": "input_array[0x3a]",
                "*(undefined *)(param_1 + 0xe)": "input_array[0xe]",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*input_array + 0xc)",
                "*(uint *)(*param_1 + 0x14)": "*(uint *)(*input_array + 0x14)"
            },
            "code": "int validate_input_080045a2(int *input_array, int array_size, int param_3)\n{\n    int return_val = 0;\n\n    if (input_array[0x3a] != ' ')\n    {\n        return 2;\n    }\n\n    if (array_size == 0 || param_3 == 0)\n    {\n        return 1;\n    }\n\n    if (input_array[0xe] != '\\x01')\n    {\n        input_array[10] = array_size;\n        input_array[0xb] = (short)param_3;\n        input_array[0x2e] = (short)param_3;\n        input_array[0xf] = 0;\n        input_array[0x3a] = 0x22;\n        input_array[0xe] = 0;\n        *(uint *)(*input_array + 0xc) |= 0x100;\n        *(uint *)(*input_array + 0x14) |= 1;\n        *(uint *)(*input_array + 0xc) |= 0x20;\n        return_val = 0;\n    }\n    else\n    {\n        return_val = 2;\n    }\n    return return_val;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045a2",
            "calling": [
                "FUN_080054d4",
                "FUN_08005510"
            ],
            "imported": false,
            "current_name": "validate_input_080045a2"
        },
        "FUN_08001c32": {
            "renaming": {
                "FUN_08001c32": "initialize_flags_08001c32",
                "initialize_and_set_flags_08004c52": "initialize_and_set_flags"
            },
            "code": "void initialize_flags_08001c32(void)\n{\n  initialize_and_set_flags();\n  return;\n}",
            "called": [
                "FUN_08004c52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c32",
            "calling": [
                "FUN_08005f5e"
            ],
            "imported": false,
            "current_name": "initialize_flags_08001c32"
        },
        "FUN_080047e8": {
            "renaming": {
                "FUN_080047e8": "combine_bytes_080047e8",
                "param_1": "offset",
                "*(byte *)(param_1 + 0x3a)": "byte1",
                "*(byte *)(param_1 + 0x39)": "byte2"
            },
            "code": "byte combine_bytes_080047e8(int offset){\n  byte byte1 = *(byte *)(offset + 0x3a);\n  byte byte2 = *(byte *)(offset + 0x39);\n  return byte1 | byte2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047e8",
            "calling": [
                "FUN_080054b0",
                "FUN_0800548c"
            ],
            "imported": false,
            "current_name": "combine_bytes_080047e8"
        },
        "FUN_080057b4": {
            "renaming": {
                "FUN_080057b4": "process_bit_array_080057b4",
                "param_1": "bit_index",
                "param_2": "input_mode",
                "param_3": "reset_flag",
                "param_4": "bit_array",
                "iVar1": "bit_value",
                "puVar2": "array_ptr",
                "iVar3": "array_index"
            },
            "code": "void process_bit_array_080057b4(uint bit_index, uint input_mode, uint reset_flag, uint8_t *bit_array) {\n  int bit_value;\n  uint8_t *array_ptr;\n  int array_index;\n  if (bit_index < 0x3c) {\n    array_index = (int)(char)bit_array[bit_index];\n    array_ptr = bit_array;\n  }\n  else {\n    array_index = -1;\n    array_ptr = bit_array;\n  }\n  if (array_index != -1) {\n    bit_value = get_bit_value(array_index, bit_array, reset_flag, array_ptr, bit_array);\n    if (bit_value != 0) {\n      bit_value = check_bit_value(array_index, bit_array);\n      if (bit_value != 0) {\n        set_flags_and_reset_bit_array(array_index);\n      }\n      set_bit_to_zero(array_index, bit_array);\n    }\n    switch(input_mode) {\n    case 0:\n      process_input_bits(array_index, 0);\n      break;\n    case 1:\n      process_input_bits(array_index, 1, 0);\n      break;\n    case 2:\n      process_input_bits(array_index, 0, 1);\n      break;\n    case 3:\n      process_input_bits(array_index, 0, 2);\n    }\n    set_bit_to_one(array_index, bit_array);\n  }\n  return;\n}",
            "called": [
                "FUN_08004828",
                "FUN_0800480a",
                "FUN_08004bb0",
                "FUN_080047f4",
                "FUN_08004ce2",
                "FUN_08004b3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057b4",
            "calling": [
                "FUN_0800157c",
                "FUN_08000bcc",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "process_bit_array_080057b4"
        },
        "FUN_08007334": {
            "renaming": {
                "FUN_08007334": "do_nothing_08007334"
            },
            "code": "\nvoid do_nothing_08007334(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007334",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08007334"
        },
        "FUN_08001b18": {
            "renaming": {
                "FUN_08001b18": "update_params_and_return_08001ab0_08001b18",
                "param_1": "input_param"
            },
            "code": "undefined4 update_params_and_return_08001ab0_08001b18(undefined4 input_param)\n{\n  // Update parameters here\n  return input_param;\n}",
            "called": [
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b18",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": false,
            "current_name": "update_params_and_return_08001ab0_08001b18"
        },
        "thunk_FUN_08005750": {
            "renaming": {
                "thunk_FUN_08005750": "return_one_thunk_08005750"
            },
            "code": "int return_one_thunk_08005750(void)\n{\n  int result = 1;\n  return result;\n}",
            "called": [
                "FUN_08005750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f34",
            "calling": [
                "FUN_08006f00"
            ],
            "imported": false,
            "current_name": "return_one_thunk_08005750"
        },
        "FUN_0800092c": {
            "renaming": {
                "FUN_0800092c": "check_params_0800092c",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "xor_result",
                "bVar2": "is_zero_first",
                "bVar3": "is_fourth_param_greater"
            },
            "code": "uint check_params_0800092c(uint first_param,uint second_param,uint third_param,uint fourth_param)\n{\n  uint result;\n  bool is_negative_first = ((int)(second_param << 1) >> 0x15 == -1);\n  bool is_negative_second = ((int)(fourth_param << 1) >> 0x15 == -1);\n  if (is_negative_first || is_negative_second) {\n    if ((is_negative_first && ((first_param | second_param << 0xc) != 0)) || (is_negative_second && ((third_param | fourth_param << 0xc) != 0))) {\n      return 1;\n    }\n  }\n  else {\n    bool is_zero_first = (first_param | second_param << 1) == 0;\n    bool is_zero_second = (third_param | fourth_param << 1) == 0;\n    if (!(is_zero_first && is_zero_second && second_param == fourth_param && first_param == third_param)) {\n      uint xor_result = second_param ^ fourth_param;\n      bool is_xored_zero = xor_result == 0;\n      if (-1 < (int)xor_result) {\n        is_xored_zero = second_param == fourth_param;\n      }\n      bool is_fourth_param_greater = -1 < (int)xor_result && fourth_param <= second_param;\n      if (is_xored_zero) {\n        is_fourth_param_greater = third_param <= first_param;\n      }\n      result = (int)fourth_param >> 0x1f;\n      if (!is_fourth_param_greater) {\n        result = ~result;\n      }\n      return result | 1;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800092c",
            "calling": [
                "FUN_080009b8"
            ],
            "imported": false,
            "current_name": "check_params_0800092c"
        },
        "FUN_08005d8a": {
            "renaming": {
                "FUN_08005d8a": "convert_base10_to_baseN_08005d8a",
                "param_1": "output_buffer",
                "param_2": "input_value",
                "param_3": "base",
                "param_4": "unused",
                "DAT_08007c24": "none",
                "PTR_FUN_08005ce8": "convert_base10_to_baseN",
                "**(code **)*param_1": "**(void (**)(uint32_t *, uint32_t, uint32_t, void (*)(void), uint32_t)) *output_buffer"
            },
            "code": "void convert_base10_to_baseN_08005d8a(uint32_t *output_buffer, uint32_t input_value, uint32_t base);\n\nvoid convert_base10_to_baseN_08005d8a(uint32_t *output_buffer, uint32_t input_value, uint32_t base)\n{\n  if (base != 0) {\n    convert_base10_to_baseN_08005d8a(output_buffer, input_value, base & 0xff);\n  } else {\n    (**(void (**)(uint32_t *, uint32_t, uint32_t, void (*)(void), uint32_t)) *output_buffer)(output_buffer, input_value & 0xff, 0, *(void (**)(void)) *output_buffer, 0);\n  }\n}",
            "called": [
                "FUN_08005ce8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d8a",
            "calling": [
                "FUN_08005da8",
                "FUN_08005da0"
            ],
            "imported": false,
            "current_name": "convert_base10_to_baseN_08005d8a"
        },
        "FUN_08002560": {
            "renaming": {
                "FUN_08002560": "set_flag_08002560",
                "param_1": "flag",
                "DAT_0800257c": "flag_ptr"
            },
            "code": "void set_flag_08002560(int flag) {\n  if (flag != 4) {\n    *DAT_0800257c = *DAT_0800257c & 0xfffffffb;\n    return;\n  }\n  *DAT_0800257c = *DAT_0800257c | 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002560",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "set_flag_08002560"
        },
        "FUN_08006e90": {
            "renaming": {
                "FUN_08006e90": "find_character_in_string_08006e90",
                "param_1": "input_string",
                "param_2": "character",
                "param_3": "string_length",
                "pcVar1": "current_char",
                "pcVar2": "current_char_pointer"
            },
            "code": "char* find_character_in_string_08006e90(char* input_string, char character, int string_length) {\n  char* current_char = input_string;\n  while (current_char != input_string + string_length) {\n    if (*current_char == character) {\n      return current_char;\n    }\n    current_char++;\n  }\n  return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e90",
            "calling": [
                "FUN_080066b0",
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "find_character_in_string_08006e90"
        },
        "FUN_0800417a": {
            "renaming": {
                "FUN_0800417a": "do_nothing_0800417a"
            },
            "code": "\nvoid do_nothing_0800417a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417a",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_0800417a"
        },
        "FUN_08006920": {
            "renaming": {
                "FUN_08006920": "find_and_set_offset_08006920",
                "param_1": "output_offset",
                "param_2": "input_offset",
                "puVar1": "offset_pointer",
                "iVar2": "found_offset"
            },
            "code": "void find_and_set_offset_08006920(int *output_offset, undefined4 input_offset)\n{\n  undefined *offset_pointer;\n  int found_offset;\n  offset_pointer = PTR_DAT_0800693c;\n  *(undefined4 *)PTR_DAT_0800693c = 0;\n  found_offset = find_offset_080056d8(input_offset);\n  if ((found_offset == -1) && (*(int *)offset_pointer != 0)) {\n    *output_offset = *(int *)offset_pointer;\n  }\n  return;\n}",
            "called": [
                "FUN_080056d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006920",
            "calling": [
                "FUN_08006288"
            ],
            "imported": false,
            "current_name": "find_and_set_offset_08006920"
        },
        "FUN_080008ba": {
            "renaming": {
                "FUN_080008ba": "calculate_value_080008ba",
                "param_1": "x1",
                "param_2": "x2",
                "param_3": "x3",
                "param_4": "x4",
                "uVar1": "temp1",
                "unaff_r4": "temp3",
                "uVar2": "shift_amount",
                "uVar3": "temp2",
                "in_r12": "temp4",
                "bVar4": "is_zero"
            },
            "code": "ulonglong calculate_value_080008ba(uint x1, uint x2, uint x3, uint x4)\n{\n  uint temp1, temp2, temp3, temp4;\n  uint shift_amount = x4 >> 0x14;\n  temp2 = x2;\n  if (x3 != x4 || shift_amount != x4) {\n    if (x3 == x4) {\n      if (((x1 | x2 << 0xc) == 0) && (x1 = x3, temp2 = x4, shift_amount != x4)) {\n        goto RETURN_VALUE_1;\n      }\n    }\n    else if (shift_amount == x4) {\n      x1 = x3;\n      temp2 = x4;\n      if ((x3 | x4 << 0xc) == 0) {\n        goto RETURN_VALUE_2;\n      }\n    }\n    else {\n      bool is_zero = (x1 | x2 << 1) == 0;\n      if (!is_zero) {\n        is_zero = (x3 | x4 << 1) == 0;\n      }\n      if (!is_zero) {\n        if (x3 == 0) {\n          temp2 = x2 & 0x80000000;\n          do {\n            temp1 = x1 & 0x80000000;\n            x1 = x1 << 1;\n            x2 = x2 * 2 + (uint)(temp1 != 0);\n          } while ((x2 & 0x100000) == 0);\n          x2 = x2 | temp2;\n          if (shift_amount != 0) {\n            return CONCAT44(x2,x1);\n          }\n        }\n        do {\n          temp3 = x3 & 0x80000000;\n          x3 = x3 << 1;\n          x4 = x4 * 2 + (uint)(temp3 != 0);\n        } while ((x4 & 0x100000) == 0);\n        return CONCAT44(x2,x1);\n      }\n      if ((x1 | x2 << 1) != 0) goto RETURN_VALUE_1;\n      if ((x3 | x4 << 1) != 0) goto RETURN_VALUE_2;\n    }\n  }\n  return CONCAT44(temp2,x1) | 0x7ff8000000000000;\n\nRETURN_VALUE_1:\n  return (ulonglong)((x2 ^ x4) & 0x80000000 | 0x7ff00000) << 0x20;\nRETURN_VALUE_2:\n  return (ulonglong)((x2 ^ x4) & 0x80000000) << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008ba",
            "calling": [
                "FUN_0800074c"
            ],
            "imported": false,
            "current_name": "calculate_value_080008ba"
        },
        "FUN_08002d1c": {
            "renaming": {
                "FUN_08002d1c": "modify_input_08002d1c",
                "param_1": "input",
                "uint": "unsigned int",
                "DAT_08002dac": "PTR_DAT_08002dac"
            },
            "code": "int modify_input_08002d1c(uint **input)\n{\n    if (((*input)[11] == (uint *)0x4) || ((*input)[11] == (uint *)0x8)) && (*(char *)((int)*input + 0x3d) == '(')) {\n        (*input)[11] = DAT_08002dac;\n        (*input)[0x1] &= 0xfffff8ff;\n        (*input)[0x5] = 0xfffffbff;\n        **input &= 0xfffffbff;\n        (*input)[12] = (uint *)0x0;\n        *(undefined *)((int)*input + 0x3d) = 0x20;\n        *(undefined *)((int)*input + 0x3e) = 0;\n        check_and_call_function_if_valid_input_08004ec4();\n    }\n    else if (*(char *)((int)*input + 0x3d) == '!') {\n        (*input)[11] = DAT_08002dac;\n        (*input)[12] = (uint *)0x21;\n        *(undefined *)((int)*input + 0x3d) = 0x20;\n        *(undefined *)((int)*input + 0x3e) = 0;\n        (*input)[0x1] &= 0xfffff8ff;\n        (*input)[0x5] = 0xfffffbff;\n        **input &= 0xfffffbff;\n        do_nothing_08002c52();\n    }\n    else {\n        (*input)[0x5] = 0xfffffbff;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08002c52",
                "FUN_08004ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d1c",
            "calling": [
                "FUN_08003520"
            ],
            "imported": false,
            "current_name": "modify_input_08002d1c"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "get_error_code_08005714",
                "undefined4": "uint32_t",
                "0xffffffff": "ERROR_CODE"
            },
            "code": "uint32_t get_error_code_08005714(void)\n{\n  return ERROR_CODE;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [],
            "imported": false,
            "current_name": "get_error_code_08005714"
        },
        "FUN_08003da4": {
            "renaming": {
                "FUN_08003da4": "calculate_value_08003da4",
                "param_1": "input",
                "uVar1": "result",
                "local_24": "local_variable_1",
                "abStack_20": "byte_array",
                "uStack_1c": "variable_1",
                "uStack_18": "variable_2",
                "uStack_14": "variable_3"
            },
            "code": "uint calculate_value_08003da4(int input)\n{\n  uint result;\n  undefined2 local_variable_1;\n  byte byte_array[4];\n  undefined4 variable_1;\n  undefined4 variable_2;\n  undefined4 variable_3;\n  variable_3 = *(undefined4 *)(PTR_DAT_08003e8c + 8);\n  variable_2 = *(undefined4 *)(PTR_DAT_08003e8c + 4);\n  variable_1 = *(undefined4 *)PTR_DAT_08003e8c;\n  local_variable_1 = *(undefined2 *)(PTR_DAT_08003e8c + 0x10);\n  if (input == 2) {\n    result = get_shifted_value_08003c70();\n    result = result / ((((DAT_08003e90[1] << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input == 0x10) {\n    if ((*DAT_08003e90 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      result = DAT_08003e9c;\n      if ((DAT_08003e90[1] & 0x10000) != 0) {\n        result = DAT_08003e94 / *(byte *)((int)&local_variable_1 - ((int)(DAT_08003e90[1] << 0xe) >> 0x1f));\n      }\n      result = result * byte_array[(DAT_08003e90[1] << 10) >> 0x1c];\n      if ((DAT_08003e90[1] & 0x400000) == 0) {\n        result = (uint)((ulonglong)DAT_08003e98 * (ulonglong)(result * 2) >> 0x21);\n      }\n    }\n  }\n  else if (input == 1) {\n    if ((DAT_08003e90[8] & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else {\n      result = DAT_08003e90[8] & 0x300;\n      if ((result == 0x200) && ((DAT_08003e90[9] & 2) != 0)) {\n        result = 32000;\n      }\n      else if (result == 0x300) {\n        if ((*DAT_08003e90 & 0x20000) == 0) {\n          result = 0;\n        }\n        else {\n          result = 0xf424;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08003c70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003da4",
            "calling": [
                "FUN_08001cd0",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "calculate_value_08003da4"
        },
        "FUN_08005a44": {
            "renaming": {
                "FUN_08005a44": "initialize_struct_08005a44",
                "param_1": "struct_address",
                "*(int *)(param_1 + 0x130)": "struct_member_1_address",
                "param_1 + 0x11": "struct_member_1_value",
                "*(undefined2 *)(param_1 + 0x134)": "struct_member_2_address",
                "*(undefined2 *)(param_1 + 0x136)": "struct_member_3_address",
                "*(int *)(param_1 + 0x138)": "struct_member_4_address",
                "param_1 + 0x51": "struct_member_4_value",
                "*(undefined2 *)(param_1 + 0x13c)": "struct_member_5_address",
                "*(undefined2 *)(param_1 + 0x13e)": "struct_member_6_address"
            },
            "code": "void initialize_struct_08005a44(int struct_address)\n{\n    int* struct_member_1_address = (int*)(struct_address + 0x130);\n    *struct_member_1_address = struct_address + 0x11;\n    short* struct_member_2_address = (short*)(struct_address + 0x134);\n    *struct_member_2_address = 0;\n    short* struct_member_3_address = (short*)(struct_address + 0x136);\n    *struct_member_3_address = 0;\n    int* struct_member_4_address = (int*)(struct_address + 0x138);\n    *struct_member_4_address = struct_address + 0x51;\n    short* struct_member_5_address = (short*)(struct_address + 0x13c);\n    *struct_member_5_address = 0;\n    short* struct_member_6_address = (short*)(struct_address + 0x13e);\n    *struct_member_6_address = 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a44",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "initialize_struct_08005a44"
        },
        "FUN_080009dc": {
            "renaming": {
                "FUN_080009dc": "is_input_valid_080009dc",
                "in_CY": "input_char",
                "validate_params_080009b8": "validate_input"
            },
            "code": "bool is_input_valid_080009dc(void)\n{\n  char input_char;\n  validate_input();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009dc",
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08001814",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "is_input_valid_080009dc"
        },
        "FUN_0800417c": {
            "renaming": {
                "FUN_0800417c": "set_flags_0800417c",
                "param_1": "memory_address",
                "*param_1": "*memory_address",
                "uint": "uint32_t",
                "undefined": "char",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void set_flags_0800417c(int *memory_address)\n{\n    uint32_t* flag1 = (uint32_t*)(*memory_address + 0xc);\n    *flag1 &= 0xfffffedf;\n    uint32_t* flag2 = (uint32_t*)(*memory_address + 0x14);\n    *flag2 &= 0xfffffffe;\n    char* flag3 = (char*)((int)memory_address + 0x3a);\n    *flag3 = 0x20;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417c",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "set_flags_0800417c"
        },
        "FUN_08004b94": {
            "renaming": {
                "FUN_08004b94": "get_value_and_return_08004b94",
                "get_value_from_pointer_08001cc4": "get_value_from_pointer"
            },
            "code": "void get_value_and_return_08004b94(void)\n{\n  get_value_from_pointer();\n  return;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b94",
            "calling": [
                "FUN_080058e0"
            ],
            "imported": false,
            "current_name": "get_value_and_return_08004b94"
        },
        "FUN_080058e0": {
            "renaming": {
                "FUN_080058e0": "get_value_and_return_08004b94_wrapper_080058e0"
            },
            "code": "void get_value_and_return_08004b94_wrapper_080058e0(void)\n{\n  get_value_and_return_08004b94();\n  return;\n}",
            "called": [
                "FUN_08004b94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e0",
            "calling": [
                "FUN_080016b4",
                "FUN_08000bcc",
                "FUN_08000cd0",
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "get_value_and_return_08004b94_wrapper_080058e0"
        },
        "FUN_08001918": {
            "renaming": {
                "FUN_08001918": "process_data_08001918",
                "param_1": "data_ptr",
                "param_2": "data_length",
                "uVar1": "processed_data_high",
                "uVar2": "processed_data_ptr",
                "uVar3": "reversed_bits",
                "FUN_0800074c": "process_data_with_params",
                "FUN_080004f8": "process_data_2",
                "*(undefined4 *)(param_1 + 0x20)": "*(undefined8 *)(data_ptr + 0x20)",
                "*(undefined4 *)(param_1 + 0x24)": "*(undefined4 *)(data_ptr + 0x24)",
                "*(undefined4 *)(param_1 + 0x28)": "*(undefined4 *)(data_ptr + 0x28)",
                "*(undefined4 *)(param_1 + 0x2c)": "*(undefined4 *)(data_ptr + 0x2c)",
                "*(undefined4 *)(param_1 + 0x58)": "*(int *)(data_ptr + 0x58)"
            },
            "code": "void process_data_08001918(int data_ptr, int data_length, undefined4 param_3, undefined4 param_4)\n{\n  if (data_length > 0) {\n    int processed_data_ptr = improved_function(data_length);\n    int reversed_bits = reverse_bits(*(undefined4 *)(data_ptr + 0x58));\n    int processed_data = process_data_08001918_with_params((int)processed_data_ptr,(int)((ulonglong)processed_data_ptr >> 0x20),(int)reversed_bits,(int)((ulonglong)reversed_bits >> 0x20),param_4);\n    undefined4 processed_data_high = (undefined4)((ulonglong)processed_data >> 0x20);\n    int processed_data_2 = process_data_08001918_with_params(*(undefined4 *)(data_ptr + 0x28),*(undefined4 *)(data_ptr + 0x2c),(int)processed_data,processed_data_high);\n    *(undefined8 *)(data_ptr + 0x20) = processed_data_2;\n    *(undefined8 *)(data_ptr + 0x28) = processed_data_ptr;\n    *(int *)(data_ptr + 0x58) = data_length;\n  }\n  return;\n}",
            "called": [
                "FUN_0800074c",
                "FUN_0800042c",
                "FUN_0800040c",
                "FUN_080004f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001918",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "process_data_08001918"
        },
        "FUN_0800611c": {
            "renaming": {
                "FUN_0800611c": "execute_assertion_0800611c",
                "param_1": "file_descriptor",
                "param_2": "line_number",
                "param_3": "assertion_message",
                "param_4": "message_length",
                "uVar1": "function_address",
                "puVar2": "assertion_failure_message",
                "uVar3": "response",
                "uVar4": "message_length_copy",
                "PTR_PTR_DAT_08006148": "function_pointer_table",
                "PTR_s___function__0800614c": "stack_pointer",
                "PTR_s_assertion___s__failed__file___s__08006150": "assertion_failure_string",
                "PTR_s__08006154": "default_message"
            },
            "code": "void execute_assertion_0800611c(undefined4 file_descriptor, undefined4 line_number, undefined *assertion_message, undefined4 message_length) {\n  undefined4 function_address = *(undefined4 *)(*(int *)PTR_PTR_DAT_08006148 + 0xc);\n  undefined *assertion_failure_message = PTR_s_assertion___s__failed__file___s__08006150;\n  undefined4 message_length_copy = message_length;\n  if (assertion_message == (undefined *)0x0) goto LAB_08006140;\n  do {\n    execute_function_with_params_and_PTR_s___function__0800614cs(function_address, assertion_failure_message, message_length, file_descriptor, line_number, assertion_message, PTR_s___function__0800614c, message_length_copy);\n    undefined8 response = process_data_and_wait_for_response();\n    line_number = (undefined4)((ulonglong)response >> 0x20);\n    function_address = (undefined4)response;\n  } while(true);\n}\n",
            "called": [
                "FUN_08006174",
                "FUN_08006ac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800611c",
            "calling": [
                "FUN_08005a68"
            ],
            "imported": false,
            "current_name": "execute_assertion_0800611c"
        },
        "FUN_080047f4": {
            "renaming": {
                "FUN_080047f4": "get_bit_080047f4",
                "param_1": "num",
                "param_2": "pos",
                "PTR_": "ptr",
                "DAT_": "val"
            },
            "code": "uint get_bit_080047f4(uint num, int pos) {\n    uint* PTR_ = (uint*)(pos + ((num << 0x18) >> 0x1c) * 4);\n    uint DAT_ = *PTR_ >> (num & 0xf) & 1;\n    return DAT_;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f4",
            "calling": [
                "FUN_08005890",
                "FUN_08005848",
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "get_bit_080047f4"
        },
        "FUN_080009f0": {
            "renaming": {
                "FUN_080009f0": "validate_params_and_return_result_080009f0",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_nonzero",
                "validate_params_080009b8": "validate_params",
                "bool": "bool"
            },
            "code": "bool validate_params_and_return_result_080009f0(void)\n{\n  bool is_CY_zero = is_CY_zero_080009f0();\n  bool is_ZR_nonzero = is_ZR_nonzero_080009f0();\n  return !is_CY_zero || is_ZR_nonzero;\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009f0",
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "validate_params_and_return_result_080009f0"
        },
        "FUN_0800134e": {
            "renaming": {
                "FUN_0800134e": "processDataAndReturnOne_0800134e",
                "param_1": "data",
                "param_2": "size",
                "param_3": "flag",
                "param_4": "ptr1",
                "DAT_08004b40": "ptr2",
                "process_data_08001310": "processData"
            },
            "code": "int processDataAndReturnOne_0800134e(int* data, int size, int flag, int* ptr1, int* DAT_08004b40) {\n  processData(data, size, flag, ptr1, DAT_08004b40);\n  return 1;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800134e",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "processDataAndReturnOne_0800134e"
        },
        "FUN_08002c10": {
            "renaming": {
                "FUN_08002c10": "set_flags_on_param_08002c10",
                "param_1": "param_array",
                "puVar1": "param",
                "*(char *)((int)param_1 + 0x3d)": "param[15]",
                "*(undefined *)((int)param_1 + 0x3d)": "param[15] = '('",
                "*puVar1": "param[0]",
                "**param_1": "*param",
                "(*param_1)[1]": "*(param + 1)"
            },
            "code": "int set_flags_on_param_08002c10(uint **param_array) {\n    uint *param = *param_array;\n    if (param[15] != ' ') {\n        return 2;\n    }\n    param[15] = '(';\n    if ((param[0] & 1) == 0) {\n        param[0] |= 1;\n    }\n    *param |= 0x400;\n    *(param + 1) |= 0x300;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c10",
            "calling": [
                "FUN_08004ef4",
                "FUN_08004ec4"
            ],
            "imported": false,
            "current_name": "set_flags_on_param_08002c10"
        },
        "FUN_08006be0": {
            "renaming": {
                "FUN_08006be0": "process_input_08006be0",
                "param_1": "input_data",
                "param_2": "input_params",
                "uVar1": "result",
                "iVar2": "param_offset",
                "piVar3": "param_linked_list_value",
                "uVar4": "param_value",
                "uVar5": "param_flag",
                "iVar6": "param_step",
                "iVar8": "param_total_offset",
                "unaff_r4": "param_r4",
                "unaff_r5": "param_r5",
                "pcVar7": "param_function_pointer",
                "uVar9": "param_value_copy",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar10": "param_is_linked_list",
                "input_params_pointer1": "PTR_DAT_08006c28",
                "input_params_pointer2": "PTR_DAT_08006c2c",
                "input_params_pointer3": "PTR_DAT_08006c30",
                "data_mask": "DAT_08006bdc",
                "initialize_data": "FUN_08006cb4",
                "add_to_linked_list": "add_to_linked_list_080061f0"
            },
            "code": "int process_input_08006be0(uint *input_data, int *input_params) {\n  int result = 0;\n  int *param_pointer;\n  uint param_value;\n  ushort param_flag;\n  int param_offset;\n  int param_step;\n  int param_function_result;\n  code *param_function_pointer;\n  int param_total_offset;\n  int param_linked_list_value;\n  bool param_is_linked_list;\n  if (input_params[4] != 0) {\n    if ((input_data != NULL) && (input_data[6] == 0)) {\n      initialize_data();\n    }\n    if (input_params == input_params_pointer1) {\n      param_pointer = (int *)input_data[1];\n    }\n    else if (input_params == input_params_pointer2) {\n      param_pointer = (int *)input_data[2];\n    }\n    else if (input_params == input_params_pointer3) {\n      param_pointer = (int *)input_data[3];\n    }\n    if (*(short *)(param_pointer + 3) != 0) {\n      param_flag = *(ushort *)(param_pointer + 3);\n      param_value = (uint)param_flag;\n      if ((int)(param_value << 0x1c) < 0) {\n        param_offset = input_params[4];\n        if (param_offset != 0) {\n          param_step = param_value << 0x1e;\n          param_is_linked_list = (param_step == 0);\n          if (param_is_linked_list) {\n            param_step = 0;\n          }\n          param_total_offset = *param_pointer;\n          if (!param_is_linked_list) {\n            param_step = param_pointer[5];\n          }\n          *param_pointer = param_offset;\n          param_pointer[2] = param_step;\n          for (param_total_offset = param_total_offset - param_offset; 0 < param_total_offset; param_total_offset = param_total_offset - param_step) {\n            param_function_result = (*(code *)param_pointer[10])(input_data,param_pointer[8],param_offset,param_total_offset,param_r4,param_r5);\n            if (param_function_result < 1) {\n              param_flag = *(ushort *)(param_pointer + 3);\n              goto end_processing;\n            }\n            param_offset = param_offset + param_function_result;\n          }\n        }\n      }\n      else if (((0 < param_pointer[1]) || (0 < param_pointer[0x10])) && (param_function_pointer = (code *)param_pointer[0xb], param_function_pointer != NULL)) {\n        param_value = *input_data;\n        *input_data = 0;\n        if ((param_flag & 0x1000) == 0) {\n          param_function_result = (*param_function_pointer)(input_data,param_pointer[8],param_value & 0x1000,1);\n          if ((param_function_result == -1) && (param_value = *input_data, param_value != 0)) {\n            if ((param_value != 0x1d) && (param_value != 0x16)) {\n              param_flag = *(ushort *)(param_pointer + 3);\n              goto end_processing;\n            }\n            *input_data = param_value;\n            goto continue_processing;\n          }\n        }\n        else {\n          param_function_result = param_pointer[0x15];\n        }\n        if (((int)((uint)param_flag << 0x1d) < 0) && (param_function_result = param_function_result - param_pointer[1], param_pointer[0xd] != 0)) {\n          param_function_result = param_function_result - param_pointer[0x10];\n        }\n        param_function_result = (*(code *)param_pointer[0xb])(input_data,param_pointer[8],param_function_result,0);\n        param_flag = *(ushort *)(param_pointer + 3);\n        if ((param_function_result == -1) && ((0x1d < *input_data || (-1 < (int)((data_mask >> (*input_data & 0xff)) << 0x1f)))) {\n          goto end_processing;\n        }\n        param_pointer[1] = 0;\n        *param_pointer = param_pointer[4];\n        if (((int)((uint)param_flag << 0x13) < 0) && ((param_function_result != -1) || (*input_data == 0))) {\n          param_pointer[0x15] = param_function_result;\n        }\n        param_linked_list_value = (int)param_pointer[0xd];\n        *input_data = param_value;\n        if (param_linked_list_value != 0) {\n          if (param_linked_list_value != param_pointer + 0x11) {\n            add_to_linked_list(input_data);\n          }\n          param_pointer[0xd] = 0;\n          goto end_processing;\n        }\n      }\n      else {\n        goto continue_processing;\n      }\n    }\n  }\n  end_processing:\n  return -1;\n  continue_processing:\n  return 0;\n}",
            "called": [
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006be0",
            "calling": [
                "FUN_08006344"
            ],
            "imported": false,
            "current_name": "process_input_08006be0",
            "code_backup": "\nundefined4 FUN_08006be0(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUN_08006cb4();\n    }\n    if (param_2 == (int *)PTR_DAT_08006c28) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)PTR_DAT_08006c2c) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)PTR_DAT_08006c30) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08006bc6;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((DAT_08006bdc >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            add_to_linked_list_080061f0(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_080012e8": {
            "renaming": {
                "FUN_080012e8": "process_data_with_bitmask_080012e8",
                "param_1": "data",
                "param_2": "bitmask",
                "uVar1": "i",
                "process_data_08005848": "process_data",
                "process_data_from_param_080012a2": "process_data_from_param"
            },
            "code": "void process_data_with_bitmask_080012e8(uint8_t* data, int bitmask) {\n  uint8_t byte;\n  for (uint8_t i = 0; i < 8; i++) {\n    byte = *(data + i + 0xb);\n    int bit = bitmask >> (i & 0xff) & 1;\n    process_data(byte, bit);\n  }\n  process_data_from_param(data);\n  return;\n}",
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012e8",
            "calling": [
                "FUN_08001310"
            ],
            "imported": false,
            "current_name": "process_data_with_bitmask_080012e8"
        },
        "FUN_080058e8": {
            "renaming": {
                "FUN_080058e8": "do_nothing_080058e8"
            },
            "code": "\nvoid do_nothing_080058e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e8",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "do_nothing_080058e8"
        },
        "FUN_08006370": {
            "renaming": {
                "FUN_08006370": "process_and_count_inputs_08006370",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input_string",
                "param_4": "string_length",
                "puVar2": "end_of_string",
                "iVar3": "current_index",
                "iVar1": "result"
            },
            "code": "int process_and_count_inputs_08006370(int input1, int input2, char *input_string, int string_length) {\n  int count = 0;\n  char *current_char = input_string;\n  while (count != string_length) {\n    if (current_char == input_string + string_length) {\n      return 0;\n    }\n    int result = process_input(input1, *current_char, input2, string_length, count);\n    count = result + 1;\n    current_char++;\n  }\n  return result;\n}",
            "called": [
                "FUN_08006344"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006370",
            "calling": [
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "process_and_count_inputs_08006370"
        },
        "FUN_080024f8": {
            "renaming": {
                "FUN_080024f8": "set_bit_at_index_080024f8",
                "param_1": "index",
                "DAT_08002510": "DATA_START_ADDRESS"
            },
            "code": "void set_bit_at_index_080024f8(uint index) {\n  if (index >= 0) {\n    int* data_ptr = (int*)(DAT_08002510 + ((index >> 5) * 4));\n    int bit_position = index & 0x1f;\n    *data_ptr = 1 << bit_position;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080024f8",
            "calling": [
                "FUN_08005568",
                "FUN_08005510"
            ],
            "imported": false,
            "current_name": "set_bit_at_index_080024f8"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "update_params_and_return_08001ab0",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "param_5": "input_param_5",
                "param_6": "input_param_6",
                "param_7": "input_param_7",
                "param_8": "input_param_8",
                "param_9": "input_param_9",
                "param_10": "input_param_10",
                "param_11": "input_param_11",
                "param_12": "input_param_12",
                "iVar1": "return_value",
                "extraout_r1": "return_value",
                "value_from_wrapper_function": "value_from_wrapper_function",
                "difference": "difference"
            },
            "code": "int update_params_and_return_08001ab0(int input_param_1, int input_param_2, int input_param_3, int input_param_4, int input_param_5, int input_param_6, int input_param_7, int input_param_8, int input_param_9, int input_param_10, int input_param_11, int input_param_12)\n{\n  int return_value;\n  int value_from_wrapper_function;\n  int difference;\n\n  *(int *)(input_param_1 + 60) = input_param_3;\n  *(int *)(input_param_1 + 56) = input_param_2;\n  *(int *)(input_param_1 + 64) = input_param_4;\n  *(char *)(input_param_1 + 112) = 0;\n  validate_and_set_inputs(input_param_1, input_param_2, 0, 0, PTR_DAT_08001b10, PTR_DAT_08001b14);\n  *(int *)(input_param_1 + 88) = 100;\n  update_data_if_changed(input_param_1, input_param_12);\n  validate_and_set_params(input_param_1, return_value, input_param_5, input_param_6, input_param_7, input_param_8, input_param_9, input_param_10, input_param_11);\n  value_from_wrapper_function = get_value_and_return_wrapper_08004b94_080058e0();\n  difference = value_from_wrapper_function - *(int *)(input_param_1 + 88);\n  *(int *)(input_param_1 + 68) = difference;\n  return input_param_1;\n}",
            "called": [
                "FUN_08001a66",
                "FUN_08001960",
                "FUN_08001814",
                "FUN_080058e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08001b18"
            ],
            "imported": false,
            "current_name": "update_params_and_return_08001ab0"
        },
        "FUN_08006ac0": {
            "renaming": {
                "FUN_08006ac0": "process_data_and_wait_for_response_08006ac0",
                "puVar1": "response_ptr",
                "iVar2": "response_length",
                "piVar3": "data_ptr",
                "piVar4": "data_end_ptr",
                "uVar5": "data_length",
                "uVar6": "data_flags",
                "iVar7": "bytes_processed",
                "pcVar8": "data_processing_func",
                "iVar9": "data_processing_func_arg",
                "uVar10": "data_processing_func_result",
                "UNRECOVERED_JUMPTABLE_00": "unrecovered_jumptable_func",
                "bVar11": "is_data_processing_func_arg_valid",
                "uVar12": "wait_result"
            },
            "code": "void process_data_and_wait_for_response_08006ac0() {\n  uint *response_ptr;\n  int response_length;\n  int *data_ptr;\n  int *data_end_ptr;\n  uint data_length;\n  ushort data_flags;\n  int bytes_processed;\n  code *data_processing_func;\n  int data_processing_func_result;\n  uint data_processing_func_arg;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool is_data_processing_func_arg_valid;\n  undefined8 wait_result;\n\n  process_data_08006f00(6);\n  UNRECOVERED_JUMPTABLE_00 = (code *)0x8006acf;\n  wait_result = wait_forever_0800573c(1);\n  data_ptr = (int *)((ulonglong)wait_result >> 0x20);\n  response_ptr = (uint *)wait_result;\n  data_flags = *(ushort *)(data_ptr + 3);\n  data_length = (uint)data_flags;\n  if ((int)(data_length << 0x1c) < 0) {\n    response_length = data_ptr[4];\n    if (response_length != 0) {\n      bytes_processed = data_length << 0x1e;\n      is_data_processing_func_arg_valid = bytes_processed == 0;\n      if (is_data_processing_func_arg_valid) {\n        bytes_processed = 0;\n      }\n      data_processing_func_arg = *data_ptr;\n      if (!is_data_processing_func_arg_valid) {\n        bytes_processed = data_ptr[5];\n      }\n      *data_ptr = response_length;\n      data_ptr[2] = bytes_processed;\n      for (data_processing_func_result = data_processing_func_arg - response_length; 0 < data_processing_func_result; data_processing_func_result = data_processing_func_result - bytes_processed) {\n        bytes_processed = (*(code *)data_ptr[10])(response_ptr,data_ptr[8],response_length,data_processing_func_result);\n        if (bytes_processed < 1) {\n          data_flags = *(ushort *)(data_ptr + 3);\n          goto LAB_08006bc6;\n        }\n        response_length = response_length + bytes_processed;\n      }\n    }\n  }\n  else if (((0 < data_ptr[1]) || (0 < data_ptr[0x10])) &&\n          (data_processing_func = (code *)data_ptr[0xb], data_processing_func != (code *)0x0)) {\n    data_processing_func_arg = *response_ptr;\n    *response_ptr = 0;\n    if ((data_flags & 0x1000) == 0) {\n      data_processing_func_result = (*data_processing_func)(response_ptr,data_ptr[8],data_length & 0x1000,1);\n      if ((data_processing_func_result == -1) && (*response_ptr != 0)) {\n        if ((*response_ptr != 0x1d) && (*response_ptr != 0x16)) {\n          *(ushort *)(data_ptr + 3) = *(ushort *)(data_ptr + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*UNRECOVERED_JUMPTABLE_00)();\n          return;\n        }\n        *response_ptr = data_processing_func_arg;\n        goto LAB_08006aea;\n      }\n    }\n    else {\n      data_processing_func_result = data_ptr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(data_ptr + 3) << 0x1d) < 0) &&\n       (data_processing_func_result = data_processing_func_result - data_ptr[1], data_ptr[0xd] != 0)) {\n      data_processing_func_result = data_processing_func_result - data_ptr[0x10];\n    }\n    data_processing_func_result = (*(code *)data_ptr[0xb])(response_ptr,data_ptr[8],data_processing_func_result,0);\n    data_flags = *(ushort *)(data_ptr + 3);\n    if ((data_processing_func_result == -1) &&\n       ((0x1d < *response_ptr || (-1 < (int)((DAT_08006bdc >> (*response_ptr & 0xff)) << 0x1f)))) {\nLAB_08006bc6:\n      *(ushort *)(data_ptr + 3) = data_flags | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n      return;\n    }\n    data_ptr[1] = 0;\n    *data_ptr = data_ptr[4];\n    if (((int)((uint)data_flags << 0x13) < 0) && ((data_processing_func_result != -1 || (*response_ptr == 0)))) {\n      data_ptr[0x15] = data_processing_func_result;\n    }\n    data_end_ptr = (int *)data_ptr[0xd];\n    *response_ptr = data_processing_func_arg;\n    if (data_end_ptr != (int *)0x0) {\n      if (data_end_ptr != data_ptr + 0x11) {\n        add_to_linked_list_080061f0(response_ptr);\n      }\n      data_ptr[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*UNRECOVERED_JUMPTABLE_00)();\n      return;\n    }\n  }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE_00)(0);\n  return;\n}",
            "called": [
                "FUN_080061f0",
                "FUN_08006f00",
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ac0",
            "calling": [
                "FUN_08007090",
                "FUN_0800611c"
            ],
            "imported": false,
            "current_name": "process_data_and_wait_for_response_08006ac0"
        },
        "FUN_08004198": {
            "renaming": {
                "FUN_08004198": "process_data_08004198",
                "param_1": "data",
                "pbVar2": "byte_ptr",
                "sVar1": "counter",
                "*param_1": "data_ptr2",
                "param_1[2]": "data2",
                "*(ushort *)param_1[8]": "value",
                "param_1[4]": "flag",
                "param_1[8]": "data_ptr",
                "*(short *)((int)param_1 + 0x26)": "counter",
                "*(uint *)(*param_1 + 4)": "value_to_set",
                "*(uint *)(*param_1 + 0xc)": "control_value"
            },
            "code": "int process_data_08004198(int *data) {\n  int *data_ptr = data;\n  char first_char = *(char *)((int)data_ptr + 0x39);\n  if (first_char != '!') {\n    return 2;\n  }\n  int data2 = data_ptr[2];\n  int *data_ptr2 = (int *)(*data_ptr);\n  if (data2 == 0x1000) {\n    uint16_t value = *(uint16_t *)data_ptr[8] & 0x1ff;\n    if (data_ptr[4] == 0) {\n      data_ptr[8] += 2;\n    }\n    else {\n      data_ptr[8]++;\n    }\n    *(uint *)(data_ptr2 + 1) = value;\n  }\n  else {\n    byte *byte_ptr = (byte *)data_ptr[8];\n    data_ptr[8] = (int)(byte_ptr + 1);\n    *(uint *)(data_ptr2 + 1) = (uint)*byte_ptr;\n  }\n  short counter = *(short *)((int)data_ptr + 0x26) - 1;\n  *(short *)((int)data_ptr + 0x26) = counter;\n  if (counter == 0) {\n    *(uint *)(data_ptr2 + 3) &= 0xffffff7f;\n    *(uint *)(data_ptr2 + 3) |= 0x40;\n    return 0;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004198",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "process_data_08004198"
        },
        "FUN_08001c3c": {
            "renaming": {
                "FUN_08001c3c": "validate_and_set_input_08001c3c",
                "param_1": "input_value",
                "iVar1": "validation_result",
                "factor": "factor",
                "PTR_DAT_08001c80": "PTR_DAT_08001c80",
                "byte": "byte",
                "PTR_DAT_08001c7c": "PTR_DAT_08001c7c",
                "validate_input_08002514": "validate_input_08002514",
                "set_bits_08002494": "set_bits_08002494",
                "PTR_DAT_08001c84": "PTR_DAT_08001c84"
            },
            "code": "int validate_and_set_input_08001c3c(uint input_value) {\n    uint factor = *(uint *)PTR_DAT_08001c80 / (1000 / (byte)*PTR_DAT_08001c7c);\n    int validation_result = validate_input_08002514(factor);\n    if (validation_result != 0) {\n        return 1;\n    }\n    if (input_value > 0xf) {\n        return 1;\n    }\n    set_bits_08002494(0xffffffff, input_value, 0);\n    *(uint *)PTR_DAT_08001c84 = input_value;\n    return 0;\n}",
            "called": [
                "FUN_08002494",
                "FUN_08002514"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3c",
            "calling": [
                "FUN_08001c88",
                "FUN_08003afa"
            ],
            "imported": false,
            "current_name": "validate_and_set_input_08001c3c"
        },
        "FUN_08001c3a": {
            "renaming": {
                "FUN_08001c3a": "do_nothing_08001c3a"
            },
            "code": "\nvoid do_nothing_08001c3a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3a",
            "calling": [
                "FUN_08001c88"
            ],
            "imported": false,
            "current_name": "do_nothing_08001c3a"
        },
        "FUN_08000a2c": {
            "renaming": {
                "FUN_08000a2c": "is_valid_input_08000a2c",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4"
            },
            "code": "int is_valid_input_08000a2c(uint32_t num1, int num2, uint32_t num3, int num4) {\n\tint is_num2_valid = ((num2 << 1) >> 0x15 != -1) || ((num1 | num2 << 0xc) == 0);\n\tint is_num4_valid = ((num4 << 1) >> 0x15 != -1) || ((num3 | num4 << 0xc) == 0);\n\tif (is_num2_valid && is_num4_valid) {\n\t\treturn 0;\n\t}\n\treturn 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a2c",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "is_valid_input_08000a2c"
        },
        "FUN_08001366": {
            "renaming": {
                "FUN_08001366": "process_data_08001366",
                "param_1": "data_address",
                "param_2": "data_type",
                "param_3": "data_size",
                "param_4": "data_param",
                "cVar1": "data_char"
            },
            "code": "void process_data_08001366(int data_address, char data_type, uint data_size, undefined4 data_param) {\n  char data_char;\n  if (data_size > 3) {\n    data_size = 3;\n  }\n  uint max_data_size = *(byte *)(data_address + 0x17);\n  if (max_data_size <= data_size) {\n    data_size = max_data_size - 1 & 0xff;\n  }\n  data_char = *(char *)(data_size + data_address + 0x18);\n  process_data_08001366_08001310(data_address, data_type + data_char | 0x80, 0, data_char, data_param);\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001366",
            "calling": [
                "FUN_08000bcc",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "process_data_08001366"
        },
        "FUN_08005848": {
            "renaming": {
                "FUN_08005848": "process_data_08005848",
                "param_1": "index",
                "param_2": "offset",
                "param_3": "bit_offset",
                "param_4": "data",
                "uVar4": "lookup",
                "puVar3": "table",
                "iVar1": "bit_set",
                "uVar2": "data_ptr",
                "get_bit_080047f4": "get_bit_value",
                "get_data_by_index_08004848": "get_data_by_index",
                "set_offset_value_if_param_not_zero_08004c30": "set_offset_value_if_bit_set",
                "PTR_DAT_08005888": "PTR_DAT_lookup_table",
                "PTR_DAT_0800588c": "PTR_DAT_bit_mask_table"
            },
            "code": "void process_data_08005848(uint index, uint offset, uint bit_offset, void *data){\n  uint lookup;\n  void *table;\n  uint bit_mask;\n  \n  if (index < 0x3c) {\n    lookup = (uint)(char)PTR_DAT_08005888[index];\n    table = PTR_DAT_08005888;\n  }\n  else {\n    lookup = 0xffffffff;\n    table = data;\n  }\n  \n  if ((lookup != 0xffffffff) &&\n     (get_bit_value(lookup, PTR_DAT_0800588c, bit_offset, table, data) != 0)) {\n    void *data_ptr = get_data_by_index_08004848((lookup << 0x18) >> 0x1c);\n    bit_mask = 1 << (lookup & 0xf) & 0xffff;\n    set_offset_value_if_bit_set(data_ptr, bit_mask, offset);\n  }\n  return;\n}",
            "called": [
                "FUN_08004848",
                "FUN_080047f4",
                "FUN_08004c30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005848",
            "calling": [
                "FUN_080015b2",
                "FUN_08001310",
                "FUN_080012a2",
                "FUN_0800157c",
                "FUN_08000bcc",
                "FUN_08000cd0",
                "FUN_080012c0",
                "FUN_080012e8",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "process_data_08005848"
        },
        "FUN_08000ae8": {
            "renaming": {
                "FUN_08000ae8": "print_system_call_info_08000ae8",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void print_system_call_info_08000ae8(void)\n{\n  int system_call_number = 0x3f;\n  software_interrupt(system_call_number);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ae8",
            "calling": [
                "FUN_08000aec"
            ],
            "imported": false,
            "current_name": "print_system_call_info_08000ae8"
        },
        "FUN_08003ed8": {
            "renaming": {
                "FUN_08003ed8": "set_flags_and_reset_08003ed8",
                "param_1": "param_array",
                "puVar1": "param",
                "DAT_08004d90": "set_flags_based_on_input_wrapper",
                "PTR_DAT_08004b34": "set_flags_based_on_input_08004d90_wrapper",
                "*(undefined *)((int)param_1 + 0x3d)": "*(undefined *)((int)param_array + 0x3d)",
                "*(undefined *)(param_1 + 0xf)": "*(undefined *)(param_array + 0xf)",
                "*puVar1": "*param",
                "& 0xfffffffe": "& 0b11111111111111111111111111111110",
                "& 0x1111": "& 0b0001000100010001",
                "& 0x444": "& 0b0100010001000100"
            },
            "code": "void set_flags_and_reset_08003ed8(uint **param_array)\n{\n  uint *param = *param_array;\n  *(undefined *)((int)param_array + 0x3d) = 2;\n  if ((param[8] & 0x1111) == 0) {\n    if ((param[8] & 0x444) == 0) {\n      *param = *param & 0xfffffffe;\n    }\n  }\n  DAT_08004d90(param_array);\n  *(undefined *)((int)param_array + 0x3d) = 0;\n  *(undefined *)(param_array + 0xf) = 0;\n  return;\n}",
            "called": [
                "FUN_08004b34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ed8",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "set_flags_and_reset_08003ed8"
        },
        "FUN_080061e0": {
            "renaming": {
                "FUN_080061e0": "fill_memory_with_value_080061e0",
                "param_1": "memory_start",
                "param_2": "value",
                "param_3": "memory_size",
                "puVar1": "memory_end",
                "*param_1": "*memory_start"
            },
            "code": "void fill_memory_with_value_080061e0(void* memory_start, char value, int memory_size)\n{\n    void* memory_end = memory_start + memory_size;\n    for (; memory_start != memory_end; memory_start = memory_start + 1) {\n        *memory_start = value;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061e0",
            "calling": [
                "FUN_08004a4c",
                "FUN_08006c40",
                "FUN_08006d14",
                "FUN_08006c88"
            ],
            "imported": false,
            "current_name": "fill_memory_with_value_080061e0"
        },
        "FUN_08005604": {
            "renaming": {
                "FUN_08005604": "validate_input_if_valid_param_index_found_08005604",
                "uVar1": "param_index",
                "iVar2": "param_result",
                "iVar3": "param_ptr"
            },
            "code": "void validate_input_if_valid_param_index_found_08005604() {\n  uint param_index = find_param_index();\n  int param_ptr = *(int *)(PTR_DAT_08005644 + param_index * 4);\n  if ((param_index < 5) && (param_result = (**(code **)(PTR_DAT_08005648 + param_index * 4))(param_ptr), param_result != -1)) {\n    validate_input_0800455a(\n      *(undefined4 *)(PTR_DAT_0800564c + (uint)*(byte *)(param_ptr + 0x44) * 4),\n      *(int *)(param_ptr + 100) + (uint)*(ushort *)(param_ptr + 0x6a),\n      1\n    );\n  }\n  return;\n}",
            "called": [
                "FUN_0800455a",
                "FUN_080055bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "FUN_080045fe"
            ],
            "imported": false,
            "current_name": "validate_input_if_valid_param_index_found_08005604"
        },
        "FUN_08005724": {
            "renaming": {
                "FUN_08005724": "return_one_08005724",
                "undefined4": "int"
            },
            "code": "int return_one_08005724() {\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005724",
            "calling": [
                "FUN_08007028"
            ],
            "imported": false,
            "current_name": "return_one_08005724"
        },
        "FUN_08005728": {
            "renaming": {
                "FUN_08005728": "return_zero_08005728",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int return_zero_08005728(void) \n{\n    int result = 0;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "FUN_08007048"
            ],
            "imported": false,
            "current_name": "return_zero_08005728"
        },
        "FUN_0800135a": {
            "renaming": {
                "FUN_0800135a": "process_data_wrapper_0800135a",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "unused",
                "param_4": "param1",
                "param_5": "param2",
                "process_data_08001310": "process_data"
            },
            "code": "void process_data_wrapper_0800135a(void *data, int flag, int unused, void *param1, void *param2) {\n  process_data(data, flag, 0, param1, param2);\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800135a",
            "calling": [
                "FUN_08000bcc",
                "FUN_08000cd0",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "process_data_wrapper_0800135a"
        },
        "FUN_08005c96": {
            "renaming": {
                "FUN_08005c96": "process_string_08005c96",
                "param_1": "string_ptr",
                "param_2": "length",
                "param_3": "start",
                "param_4": "end",
                "uVar1": "end_of_string"
            },
            "code": "int process_string_08005c96(int *string, int length){\n\treturn string + length;\n}\n\nint process_string_08005c96(int *string_ptr, int length, int start, int (*function)(int *, int, int, int (*)(int *, int, int, int), int), int end){\n\tif(length != 0){\n\t\tint end_of_string = process_string_08005c96(string_ptr, length);\n\t\treturn (*function)(string_ptr, length, end_of_string, function, end);\n\t}\n\treturn 0;\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c96",
            "calling": [
                "FUN_08005da8",
                "FUN_08005cd4",
                "FUN_08000bcc",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "process_string_08005c96"
        },
        "FUN_0800571a": {
            "renaming": {
                "FUN_0800571a": "set_memory_permissions_0800571a",
                "param_1": "address",
                "param_2": "permissions",
                "PTR_": "address_",
                "DAT_": "data_"
            },
            "code": "int set_memory_permissions_0800571a(void* address, int permissions) {\n    *(int*)(address + 4) = permissions;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800571a",
            "calling": [
                "FUN_08007004"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_0800571a"
        },
        "FUN_08002efc": {
            "renaming": {
                "FUN_08002efc": "process_data_08002efc",
                "param_1": "data",
                "puVar1": "flag_ptr"
            },
            "code": "uint32_t process_data_08002efc(uint32_t **data) {\n  uint32_t *flag_ptr;\n  flag_ptr = data[11];\n  if (*(char *)((int)data + 61) == '!') {\n    if (*(int16_t *)((int)data + 42) == 0) {\n      if (((flag_ptr == (uint32_t *)4) || (flag_ptr == (uint32_t *)8)) || (flag_ptr == (uint32_t *)0xffff0000)) {\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        **data = **data | 0x200;\n        data[12] = (uint32_t *)0x0;\n        *(char *)((int)data + 61) = 0x20;\n        if (*(char *)((int)data + 62) == '@') {\n          *(char *)((int)data + 62) = 0;\n          do_nothing_08002db0();\n        }\n        else {\n          *(char *)((int)data + 62) = 0;\n          do_nothing_08002c4e();\n        }\n      }\n      else {\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        data[12] = (uint32_t *)0x11;\n        *(char *)((int)data + 62) = 0;\n        *(char *)((int)data + 61) = 0x20;\n        do_nothing_08002c4e();\n      }\n    }\n    else {\n      flag_ptr = data[9];\n      data[9] = (uint32_t *)((int)flag_ptr + 1);\n      (*data)[4] = (uint32_t)*(uint8_t *)flag_ptr;\n      *(int16_t *)((int)data + 42) = *(int16_t *)((int)data + 42) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c4e",
                "FUN_08002db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efc",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_data_08002efc"
        },
        "FUN_0800365c": {
            "renaming": {
                "FUN_0800365c": "calculate_and_decrement_0800365c",
                "param_1": "input",
                "local_4": "calculated_value"
            },
            "code": "void calculate_and_decrement_0800365c(int input)\n{\n  int calculated_value = input * ((unsigned long long)constant_value * (unsigned long long)*pointer_to_data >> 0x29);\n  while(calculated_value != 0)\n  {\n    calculated_value--;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800365c",
            "calling": [
                "FUN_08003688"
            ],
            "imported": false,
            "current_name": "calculate_and_decrement_0800365c"
        },
        "FUN_080033b8": {
            "renaming": {
                "FUN_080033b8": "process_data_080033b8",
                "param_1": "data_ptr",
                "iVar1": "data_ptr_value",
                "uVar2": "input_flags",
                "uVar3": "data_flags",
                "uVar4": "input_value",
                "set_flags_based_on_params_080028de": "set_flags_based_on_params",
                "set_value_in_memory_080028d2": "set_value_in_memory",
                "process_input_08002f9c": "process_input",
                "process_data_0800306c": "process_data",
                "process_data_08002db2": "process_data",
                "process_data_08002efc": "process_data",
                "update_data_08002cf2": "update_data",
                "process_input_080032b4": "process_input",
                "process_input_08002ca6": "process_input",
                "process_data_08002ad8": "process_data",
                "decode_08002c54": "decode_data",
                "increment_byte_at_address_08002ab8": "increment_byte_at_address",
                "DAT_08003518": "DAT_08003518",
                "DAT_08003504": "DAT_08003504",
                "DAT_0800350c": "DAT_0800350c",
                "DAT_0800351c": "DAT_0800351c",
                "DAT_08003514": "DAT_08003514"
            },
            "code": "void process_data_080033b8(uint32_t *data_ptr)\n{\n  uint32_t input_flags;\n  uint32_t data_flags;\n  uint32_t input_value;\n  uint32_t data_value;\n  uint32_t *data_ptr_value = (uint32_t *)*data_ptr;\n  input_flags = *(uint32_t *)(*data_ptr_value + 0x14);\n  data_flags = *(uint32_t *)(*data_ptr_value + 0x18);\n  input_value = *(uint32_t *)(*data_ptr_value + 4);\n  data_value = *(uint32_t *)(*data_ptr_value + 0x10);\n  if (((char *)data_ptr)[0x3e] == 0x10 || ((char *)data_ptr)[0x3e] == '@')\n  {\n    if ((input_flags & 0x10001) == 0 && (input_value & 0x200) == 0)\n    {\n      if ((data_flags & DAT_08003518) == 0 && (input_value & 0x200) == 0)\n      {\n        if ((data_flags & DAT_08003504) != 0 && (input_value & 0x200) != 0)\n        {\n          set_flags_based_on_params(data_ptr);\n        }\n      }\n      else\n      {\n        set_value_in_memory(data_ptr);\n      }\n    }\n    else\n    {\n      set_flags_based_on_input(data_ptr);\n    }\n    if ((data_flags & DAT_0800350c) == 0)\n    {\n      if ((data_flags & DAT_0800351c) != 0 && (input_value & 0x400) != 0 && (data_flags & DAT_08003514) == 0)\n      {\n        process_input(data_ptr);\n        return;\n      }\n      if ((data_flags & DAT_08003514) != 0 && (input_value & 0x200) != 0)\n      {\n        process_data_080033b8(data_ptr);\n        return;\n      }\n    }\n    else\n    {\n      if ((data_flags & DAT_08003510) != 0 && (input_value & 0x400) != 0 && (data_flags & DAT_08003514) == 0)\n      {\n        process_data_080033b8(data_ptr);\n        return;\n      }\n      if ((data_flags & DAT_08003514) != 0 && (input_value & 0x200) != 0)\n      {\n        process_data_080033b8(data_ptr);\n        return;\n      }\n    }\n  }\n  else\n  {\n    if ((data_flags & DAT_08003504) != 0 && (input_value & 0x200) != 0)\n    {\n      update_data();\n      return;\n    }\n    if ((data_flags & DAT_08003508) != 0 && (input_value & 0x200) != 0)\n    {\n      process_input(data_ptr);\n      return;\n    }\n    if ((data_flags & DAT_0800350c) == 0)\n    {\n      if ((data_flags & DAT_0800351c) != 0 && (input_value & 0x400) != 0 && (data_flags & DAT_08003514) == 0)\n      {\n        process_input(data_ptr);\n        return;\n      }\n      if ((data_flags & DAT_08003514) != 0 && (input_value & 0x200) != 0)\n      {\n        process_data_080033b8(data_ptr);\n      }\n    }\n    else\n    {\n      if ((data_flags & DAT_08003510) != 0 && (input_value & 0x400) != 0 && (data_flags & DAT_08003514) == 0)\n      {\n        decode_data(data_ptr);\n        return;\n      }\n      if ((data_flags & DAT_08003514) != 0 && (input_value & 0x200) != 0)\n      {\n        increment_byte_at_address(data_ptr);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002ad8",
                "FUN_08002ab8",
                "FUN_08002db2",
                "FUN_08002c54",
                "FUN_08002f9c",
                "FUN_0800306c",
                "FUN_08002cf2",
                "FUN_08002ca6",
                "FUN_08002efc",
                "FUN_080028d2",
                "FUN_080032b4",
                "FUN_080028de",
                "FUN_08002848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033b8",
            "calling": [],
            "imported": false,
            "current_name": "process_data_080033b8"
        },
        "FUN_080069e4": {
            "renaming": {
                "FUN_080069e4": "check_validity_and_allocate_memory_080069e4",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "num",
                "uVar2": "flags",
                "iVar3": "ptr"
            },
            "code": "uint check_validity_and_allocate_memory_080069e4(undefined4 *output, undefined4 *input) {\n  uint num = 0;\n  ushort flags = *(ushort *)(input + 3);\n  int ptr = *(int *)PTR_PTR_DAT_08006ab0;\n  if (ptr != 0 && *(int *)(ptr + 0x18) == 0) {\n    initialize_data_08006cb4(ptr);\n  }\n  if (input == (undefined4 *)PTR_DAT_08006ab4) {\n    input = *(undefined4 **)(ptr + 4);\n  }\n  else if (input == (undefined4 *)PTR_DAT_08006ab8) {\n    input = *(undefined4 **)(ptr + 8);\n  }\n  else if (input == (undefined4 *)PTR_DAT_08006abc) {\n    input = *(undefined4 **)(ptr + 0xc);\n  }\n  if (-1 < (int)(flags << 0x1c)) {\n    if (-1 < (int)(flags << 0x1b)) {\n      *output = 9;\n      goto exit;\n    }\n    if ((int)(flags << 0x1d) < 0) {\n      if ((undefined4 *)input[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input[0xd] != input + 0x11) {\n          add_to_linked_list_080061f0(output);\n        }\n        input[0xd] = 0;\n      }\n      *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n      input[1] = 0;\n      *input = input[4];\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  }\n  if (input[4] == 0 && ((flags & 0x280) != 0x200)) {\n    allocate_memory_and_set_permissions_08006e10(output, input);\n  }\n  flags = *(ushort *)(input + 3);\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      num = input[5];\n    }\n    input[2] = num;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (input[4] == 0) {\n    flags = *(ushort *)(input + 3);\n    if ((flags & 0x80) != 0) {\n      *output = 0xffffffff;\n      *(ushort *)(input + 3) = flags | 0x40;\n      return 0;\n    }\n  }\n  else {\n    num = 0;\n  }\n  exit:\n  return num;\n}",
            "called": [
                "FUN_080061f0",
                "FUN_08006e10",
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069e4",
            "calling": [
                "FUN_08006344",
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "check_validity_and_allocate_memory_080069e4",
            "code_backup": "\nuint FUN_080069e4(undefined4 *param_1,undefined4 *param_2)\n\n{\n  uint uVar1;\n  ushort uVar2;\n  int iVar3;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08006ab0;\n  if ((iVar3 != 0) && (*(int *)(iVar3 + 0x18) == 0)) {\n    FUN_08006cb4(iVar3);\n  }\n  if (param_2 == (undefined4 *)PTR_DAT_08006ab4) {\n    param_2 = *(undefined4 **)(iVar3 + 4);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_08006ab8) {\n    param_2 = *(undefined4 **)(iVar3 + 8);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_08006abc) {\n    param_2 = *(undefined4 **)(iVar3 + 0xc);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = (uint)uVar2;\n  if (-1 < (int)(uVar1 << 0x1c)) {\n    if (-1 < (int)(uVar1 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(uVar1 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          add_to_linked_list_080061f0(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_memory_and_set_permissions_08006e10(param_1,param_2);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = uVar2 & 1;\n  if ((uVar2 & 1) == 0) {\n    if (-1 < (int)((uint)uVar2 << 0x1e)) {\n      uVar1 = param_2[5];\n    }\n    param_2[2] = uVar1;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar2 = *(ushort *)(param_2 + 3);\n    uVar1 = (int)(short)uVar2 & 0x80;\n    if (uVar1 != 0) {\nLAB_08006a14:\n      *(ushort *)(param_2 + 3) = uVar2 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar1 = 0;\n  }\n  return uVar1;\n}\n\n"
        },
        "FUN_08002580": {
            "renaming": {
                "FUN_08002580": "do_nothing_08002580"
            },
            "code": "\nvoid do_nothing_08002580(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002580",
            "calling": [
                "FUN_08002582"
            ],
            "imported": false,
            "current_name": "do_nothing_08002580"
        },
        "FUN_08004b9e": {
            "renaming": {
                "FUN_08004b9e": "calculate_and_execute_08004b9e",
                "calculate_new_value_08001cac": "calculate_new_value",
                "execute_nothing_08002582": "execute_nothing",
                "do_nothing_08004b9c": "do_nothing"
            },
            "code": "void calculate_and_execute_08004b9e(void)\n{\n  calculate_new_value();\n  execute_nothing();\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08004b9c",
                "FUN_08002582",
                "FUN_08001cac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9e",
            "calling": [],
            "imported": false,
            "current_name": "calculate_and_execute_08004b9e"
        },
        "FUN_08004b9c": {
            "renaming": {
                "FUN_08004b9c": "do_nothing_08004b9c"
            },
            "code": "\nvoid do_nothing_08004b9c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9c",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": false,
            "current_name": "do_nothing_08004b9c"
        },
        "FUN_08005730": {
            "renaming": {
                "FUN_08005730": "process_input_wrapper_08005730",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "void process_input_wrapper_08005730(undefined4 input1, undefined4 input2, undefined4 input3, undefined4 input4){\n\tprocess_input_080053d4(input2, input3, input3, input4, input4);\n\treturn;\n}",
            "called": [
                "FUN_080053d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005730",
            "calling": [
                "FUN_08006f5a"
            ],
            "imported": false,
            "current_name": "process_input_wrapper_08005730"
        },
        "FUN_08002582": {
            "renaming": {
                "FUN_08002582": "execute_nothing_08002582"
            },
            "code": "void execute_nothing_08002582() \n{\n  do_nothing_08002580();\n  return;\n}",
            "called": [
                "FUN_08002580"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002582",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": false,
            "current_name": "execute_nothing_08002582"
        },
        "FUN_08004884": {
            "renaming": {
                "FUN_08004884": "set_flag_08004884",
                "param_1": "flag",
                "uVar1": "return_value",
                "DAT_08004914": "data_section_ptr",
                "DAT_08004918": "data_section_ptr_0x18_value",
                "DAT_0800491c": "data_section_ptr_0x1c_value",
                "DAT_08004920": "data_section_ptr_0x20_value",
                "DAT_08004924": "data_section_ptr_0x24_value",
                "DAT_08004928": "data_section_ptr_0x28_value"
            },
            "code": "uint32_t set_flag_08004884(uint32_t flag)\n{\n  uint32_t return_value;\n  switch(flag) {\n    case 0:\n      *(uint32_t *)(DAT_08004914 + 0x18) |= 0x04;\n      return_value = DAT_08004918;\n      break;\n    case 1:\n      *(uint32_t *)(DAT_08004914 + 0x18) |= 0x08;\n      return_value = DAT_0800491c;\n      break;\n    case 2:\n      *(uint32_t *)(DAT_08004914 + 0x18) |= 0x10;\n      return_value = DAT_08004920;\n      break;\n    case 3:\n      *(uint32_t *)(DAT_08004914 + 0x18) |= 0x20;\n      return_value = DAT_08004924;\n      break;\n    case 4:\n      *(uint32_t *)(DAT_08004914 + 0x18) |= 0x40;\n      return_value = DAT_08004928;\n      break;\n    default:\n      return_value = 0;\n  }\n  return return_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "FUN_08004bb0",
                "FUN_08004974",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "set_flag_08004884"
        },
        "FUN_08001be8": {
            "renaming": {
                "FUN_08001be8": "copy_data_and_reset_flags_08001be8",
                "iVar1": "index",
                "puVar2": "data_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void copy_data_and_reset_flags_08001be8(void)\n{\n  int index;\n  undefined4 *data_ptr;\n  code *jump_table;\n  for (index = 0; PTR_DAT_08001c20 + index < DAT_08001c24; index += 4) {\n    *(undefined4 *)(PTR_DAT_08001c20 + index) = *(undefined4 *)(DAT_08001c1c + index);\n  }\n  for (data_ptr = (undefined4 *)PTR_DAT_08001c28; data_ptr < PTR_DAT_08001c2c; data_ptr++) {\n    *data_ptr = 0;\n  }\n  initialize_flags();\n  execute_functions();\n  jump_table = (code *)0x8001c1a;\n  process_oven_data_loop();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_08006198",
                "FUN_08004d44",
                "FUN_08005f6c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001be8",
            "calling": [],
            "imported": false,
            "current_name": "copy_data_and_reset_flags_08001be8"
        },
        "FUN_080061f0": {
            "renaming": {
                "FUN_080061f0": "add_to_linked_list_080061f0",
                "param_1": "new_element",
                "param_2": "list_length",
                "param_3": "error_code",
                "param_4": "unused_arg",
                "puVar1": "data_ptr",
                "extraout_r1": "next_node_ptr",
                "ppiVar2": "next_node_ptr",
                "ppiVar3": "prev_node_ptr",
                "piVar4": "node_data_ptr",
                "ppiVar5": "head_node_ptr",
                "ppiVar6": "prev_node_ptr",
                "ppiVar7": "current_node_ptr"
            },
            "code": "void add_to_linked_list_080061f0(int* new_element, int list_length, int error_code, int unused_arg) {\n    if (list_length == 0) {\n        return;\n    }\n    int** current_node_ptr = (int**)(list_length - 4);\n    if (*current_node_ptr < 0) {\n        current_node_ptr = (int**)((int)current_node_ptr + **current_node_ptr);\n    }\n    do_nothing_08006eac();\n    int** head_node_ptr = *(int***)PTR_DAT_08006284;\n    if (head_node_ptr == NULL) {\n        current_node_ptr[1] = NULL;\n        *(int***)PTR_DAT_08006284 = current_node_ptr;\n        int** next_node_ptr = extraout_r1;\n        int** prev_node_ptr = (int**)PTR_DAT_08006284;\n    }\n    else if (current_node_ptr < head_node_ptr) {\n        int** next_node_ptr = (int**)*current_node_ptr;\n        int** prev_node_ptr = (int**)((int)current_node_ptr + (int)next_node_ptr);\n        if (head_node_ptr == prev_node_ptr) {\n            int* node_data_ptr = *head_node_ptr;\n            head_node_ptr = (int**)head_node_ptr[1];\n            prev_node_ptr = (int**)((int)node_data_ptr + (int)next_node_ptr);\n            *current_node_ptr = (int*)prev_node_ptr;\n        }\n        current_node_ptr[1] = (int*)head_node_ptr;\n        *(int***)PTR_DAT_08006284 = current_node_ptr;\n    }\n    else {\n        int** prev_node_ptr = head_node_ptr;\n        int** next_node_ptr = prev_node_ptr[1];\n        while (next_node_ptr != NULL && next_node_ptr <= current_node_ptr) {\n            prev_node_ptr = next_node_ptr;\n            next_node_ptr = next_node_ptr[1];\n        }\n        int** node_data_ptr = (int**)*prev_node_ptr;\n        if ((int**)((int)prev_node_ptr + (int)node_data_ptr) == current_node_ptr) {\n            node_data_ptr = (int**)((int)node_data_ptr + **current_node_ptr);\n            *prev_node_ptr = (int*)node_data_ptr;\n            if (next_node_ptr == (int**)((int)prev_node_ptr + (int)node_data_ptr)) {\n                int* node_data_ptr_2 = *next_node_ptr;\n                next_node_ptr = (int**)next_node_ptr[1];\n                node_data_ptr = (int**)((int)node_data_ptr + (int)node_data_ptr_2);\n                *prev_node_ptr = (int*)node_data_ptr;\n                prev_node_ptr[1] = (int*)next_node_ptr;\n            }\n        }\n        else if (current_node_ptr < (int**)((int)prev_node_ptr + (int)node_data_ptr)) {\n            error_code = 12;\n        }\n        else {\n            node_data_ptr = (int**)((int)current_node_ptr + **current_node_ptr);\n            if (next_node_ptr == node_data_ptr) {\n                int* node_data_ptr_2 = *next_node_ptr;\n                next_node_ptr = (int**)next_node_ptr[1];\n                node_data_ptr = (int**)((int)node_data_ptr_2 + **current_node_ptr);\n                *current_node_ptr = (int*)node_data_ptr;\n            }\n            current_node_ptr[1] = (int*)next_node_ptr;\n            prev_node_ptr[1] = (int*)current_node_ptr;\n        }\n    }\n    do_nothing_08006eae(&error_code, next_node_ptr, prev_node_ptr, unused_arg);\n    return;\n}",
            "called": [
                "FUN_08006eac",
                "FUN_08006eae"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061f0",
            "calling": [
                "FUN_080069e4",
                "FUN_08006ac0"
            ],
            "imported": false,
            "current_name": "add_to_linked_list_080061f0"
        },
        "FUN_08002348": {
            "renaming": {
                "FUN_08002348": "update_value_if_needed_08002348",
                "param_1": "input_param",
                "iVar1": "result",
                "char*": "char_ptr",
                "uint*": "uint_ptr"
            },
            "code": "int update_value_if_needed_08002348(int input_param)\n{\n  int result = 0;\n  char* char_ptr = (char*)(input_param + 0x24);\n  uint* uint_ptr = (uint*)(input_param + 0x28);\n  \n  if (*char_ptr == '\\x01') {\n    result = 2;\n  }\n  else {\n    *char_ptr = 1;\n    result = check_and_update_value();\n    if (result == 0) {\n      *uint_ptr = (*uint_ptr & 0xffffeefe) | 1;\n    }\n    *char_ptr = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_080020f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002348",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "update_value_if_needed_08002348"
        },
        "FUN_080060d4": {
            "renaming": {
                "FUN_080060d4": "process_response_080060d4",
                "param_1": "request",
                "iVar1": "response_length",
                "PTR_DAT_08006100": "response_table",
                "count_bits_set_08005f8c": "count_bits_set",
                "response_ptr": "response_function"
            },
            "code": "void process_response_080060d4(int request)\n{\n  int response_length = 0;\n  int bit_count = count_bits_set(request);\n  int response_ptr = *(int *)(PTR_DAT_08006100 + bit_count * 0x14 + 0xc);\n\n  if (response_ptr != 0) {\n    (**(code **)(response_ptr))();\n    return;\n  }\n\n  process_and_wait_for_response();\n  return;\n}",
            "called": [
                "FUN_08007090"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060d4",
            "calling": [
                "FUN_080060e4"
            ],
            "imported": false,
            "current_name": "process_response_080060d4"
        },
        "FUN_08005a68": {
            "renaming": {
                "FUN_08005a68": "set_parameters_08005a68",
                "param_1": "instance",
                "param_2": "param_2",
                "param_3": "param_3",
                "extraout_r1": "extra_return_value",
                "bVar1": "flags",
                "iVar2": "num_flags",
                "pbVar3": "byte_pointer",
                "unaff_r4": "undefined_register_4",
                "unaff_r6": "undefined_register_6",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "PTR_DAT_08005b38": "pointer_data_08005b38",
                "iRam08005b1c": "assertion_instance"
            },
            "code": "void set_parameters_08005a68(int instance, int param_2, byte param_3) {\n    uint extraout_r1;\n    byte flags;\n    int num_flags = 0;\n    byte *pbVar3;\n    undefined unaff_r4;\n    int unaff_r6;\n    code *jump_table;\n\n    *(int *)(instance + 0x11c) = param_2;\n    *(byte *)(instance + 0x140) = param_3;\n    flags = param_3 & 7;\n    if (flags == 4) {\n        num_flags = 7;\n    }\n    else if (flags == 6) {\n        num_flags = 8;\n    }\n    else if (flags == 2) {\n        num_flags = 6;\n    }\n    if ((param_3 & 0x30) == 0x30) {\n        *(int *)(instance + 0x128) = 0x600;\n        num_flags++;\n    }\n    else if ((param_3 & 0x20) == 0) {\n        *(int *)(instance + 0x128) = 0;\n    }\n    else {\n        *(int *)(instance + 0x128) = 0x400;\n        num_flags++;\n    }\n    if ((param_3 & 8) == 0) {\n        *(int *)(instance + 0x124) = 0;\n    }\n    else {\n        *(int *)(instance + 0x124) = 0x2000;\n    }\n    if (num_flags == 8) {\n        *(int *)(instance + 0x120) = 0;\n    }\n    else if (num_flags == 9) {\n        *(int *)(instance + 0x120) = 0x1000;\n    }\n    else {\n        num_flags = 0;\n    }\n    if (num_flags != 0) {\n        set_default_parameters(instance + 0xd4);\n        validate_combination(instance + 0xd4, uRam08005b14);\n        return;\n    }\n    jump_table = (code *)0x8005b12;\n    int assertion_instance = iRam08005b1c;\n    execute_assertion(uRam08005b20, 299, iRam08005b1c, uRam08005b18);\n    pbVar3 = *(byte **)(extraout_r1 + unaff_r6);\n    *(undefined *)(assertion_instance + 0x1e) = unaff_r4;\n    *(undefined *)(*pbVar3 + 0x1e) = 0;\n    if (extraout_r1 < 0x3c) {\n        uRam0000012d = PTR_DAT_08005b38[extraout_r1];\n    }\n    else {\n        uRam0000012d = 0xff;\n    }\n    (*jump_table)();\n    return;\n}",
            "called": [
                "FUN_08005510",
                "FUN_08004f4c",
                "FUN_0800611c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "set_parameters_08005a68"
        },
        "FUN_08001814": {
            "renaming": {
                "FUN_08001814": "validate_and_set_params_08001814",
                "param_1": "params",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "param_5": "input4",
                "param_6": "input5",
                "param_7": "input6",
                "param_8": "input7",
                "param_9": "input8",
                "iVar1": "is_valid",
                "uVar2": "high_bits",
                "uVar3": "bool_as_int",
                "bVar4": "is_not_one",
                "uVar5": "reversed_bits",
                "uVar6": "reversed_bits_2",
                "uVar7": "checksum",
                "is_input_valid_080009dc": "is_input_valid",
                "reverse_bits_0800040c": "reverse_bits",
                "FUN_0800074c": "get_reversed_bits",
                "FUN_080004f8": "get_reversed_bits_2",
                "FUN_08000190": "get_checksum"
            },
            "code": "void validate_and_set_params_08001814(int *params, int input1, int input2, int input3, int input4, int input5, int input6, int input7, int input8, int param_count) {\n  bool is_valid = true;\n  is_valid = is_valid && is_input_valid(input1, input2, 0, 0);\n  is_valid = is_valid && is_input_valid(input3, input4, 0, 0);\n  is_valid = is_valid && is_input_valid(input5, input6, 0, 0);\n  is_valid = is_valid && is_input_valid(input7, input8, 0, 0);\n  if (is_valid) {\n    params[13] = param_count;\n    bool is_not_one = param_count != 1;\n    int bool_as_int = is_not_one ? 0 : 1;\n    *(char *)((int)params + 113) = (char)bool_as_int;\n    params[0] = input1;\n    params[1] = input2;\n    params[2] = input3;\n    params[3] = input4;\n    params[4] = input5;\n    params[5] = input6;\n    params[16] = reverse_bits(params[22]);\n    int high_bits = (int)((unsigned long long)params[16] >> 32);\n    params[6] = input1;\n    params[7] = input2;\n    params[8] = input3;\n    params[9] = input4;\n    params[10] = input5;\n    params[11] = input6;\n    params[12] = input7;\n    params[14] = input7;\n    params[15] = input8;\n    params[8] = get_reversed_bits(input5, input6, params[16], high_bits);\n    params[9] = get_reversed_bits(input7, input8, params[16], high_bits);\n    if (params[12] == 1) {\n      params[6] = get_checksum(0, 0, input1, input2);\n      params[8] = get_checksum(0, 0, params[8], (int)((unsigned long long)params[8] >> 32));\n      params[10] = get_checksum(0, 0, params[9], (int)((unsigned long long)params[9] >> 32));\n    }\n  }\n}\n",
            "called": [
                "FUN_0800074c",
                "FUN_08000190",
                "FUN_0800040c",
                "FUN_080004f8",
                "FUN_080009dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001814",
            "calling": [
                "FUN_080018f8",
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "validate_and_set_params_08001814"
        },
        "FUN_08000aec": {
            "renaming": {
                "FUN_08000aec": "execute_system_call_08000aec",
                "param_1": "call_num",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "uVar1": "result"
            },
            "code": "int execute_system_call_08000aec(int call_num, int arg1, int arg2, int arg3, int arg4) {\n  int result;\n  if (*(int *)PTR_DAT_08000b04 != 0) {\n    return 0;\n  }\n  result = print_system_call_info_08000ae8(1, arg1, 0, 0, arg4);\n  return result;\n}",
            "called": [
                "FUN_08000ae8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aec",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "execute_system_call_08000aec"
        },
        "FUN_0800572c": {
            "renaming": {
                "FUN_0800572c": "return_zero_0800572c",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int return_zero_0800572c(void)\n{\n  int result = 0;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800572c",
            "calling": [
                "FUN_0800706c"
            ],
            "imported": false,
            "current_name": "return_zero_0800572c"
        },
        "FUN_08004e12": {
            "renaming": {
                "FUN_08004e12": "execute_subtract_four_and_call_function_pointer_08004e12",
                "iVar1": "subtracted_value",
                "subtract_four_08004df4": "subtract_four",
                "PTR_08004dfc": "function_pointer"
            },
            "code": "void execute_subtract_four_and_call_function_pointer_08004e12(void)\n{\n  int subtracted_value = subtract_four();\n  code *PTR_08004dfc = *(code **)(subtracted_value + 0x48);\n  if (PTR_08004dfc != NULL) {\n    (*PTR_08004dfc)();\n  }\n  return;\n}",
            "called": [
                "FUN_08004df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e12",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "execute_subtract_four_and_call_function_pointer_08004e12"
        },
        "FUN_08000a58": {
            "renaming": {
                "FUN_08000a58": "calculate_08000a58",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "iVar2": "shifted_divisor",
                "uVar3": "shift_amount"
            },
            "code": "uint calculate_08000a58(uint dividend, uint divisor)\n{\n  uint quotient;\n  int shifted_divisor;\n  uint shift_amount;\n  \n  shifted_divisor = divisor * 2 + 0x200000;\n  if (divisor * 2 >= 0xffe00000)\n  {\n    if (dividend == 0 && (divisor << 0xc) == 0)\n    {\n      quotient = divisor & 0x80000000 ? 0x7fffffff : divisor;\n    }\n    else\n    {\n      quotient = 0;\n    }\n  }\n  else if (shifted_divisor >= 0)\n  {\n    quotient = 0;\n  }\n  else\n  {\n    shift_amount = (-shifted_divisor) - 0x3e1;\n    if (divisor < 0xfffffc20 && shift_amount != 0)\n    {\n      quotient = (dividend << 0xb | 0x80000000 | divisor >> 0x15) >> (shift_amount & 0xff);\n      if (divisor & 0x80000000)\n      {\n        quotient = -quotient;\n      }\n    }\n    else\n    {\n      quotient = 0;\n    }\n  }\n  return quotient;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a58",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "calculate_08000a58"
        },
        "FUN_08001b48": {
            "renaming": {
                "FUN_08001b48": "initialize_settings_08001b48",
                "iVar1": "result",
                "uVar2": "value",
                "local_54": "update",
                "local_4c": "update_value",
                "local_44": "input",
                "local_40": "input_value_1",
                "local_3c": "input_value_2",
                "local_38": "input_value_3",
                "local_34": "input_value_4",
                "local_30": "settings",
                "local_20": "settings_value_1",
                "local_1c": "settings_value_2",
                "local_14": "settings_value_3",
                "local_10": "settings_value_4",
                "local_c": "SETTINGS_MULTIPLIER",
                "FUN_08003688": "get_settings",
                "waitForInput_08004d40": "wait_for_input",
                "process_input_08003ad4": "process_input",
                "update_settings_08003c90": "update_settings",
                "get_value_from_pointer_08003c44": "get_value_from_pointer",
                "validate_input_08002514": "validate_input",
                "set_flag_08002560": "set_flag",
                "set_bits_08002494": "set_bits"
            },
            "code": "void initialize_settings_08001b48(void)\n{\n    int result;\n    uint value;\n    uint settings[2] = {2, 0};\n    uint input[4] = {0xf, 2, 0, 0x400};\n    uint update[2] = {2, 0x8000};\n\n    result = get_settings(settings);\n    if (result != 0)\n    {\n        wait_for_input(\"home/bo/arduino15/packages/STM32/tools/flasher/Flasher.ino\", 0x88);\n    }\n\n    result = process_input(input);\n    if (result != 0)\n    {\n        wait_for_input(\"home/bo/arduino15/packages/STM32/tools/flasher/Flasher.ino\", 0x95);\n    }\n\n    result = update_settings(update);\n    if (result != 0)\n    {\n        wait_for_input(\"home/bo/arduino15/packages/STM32/tools/flasher/Flasher.ino\", 0x9c);\n    }\n\n    value = get_value_from_pointer();\n    validate_input((uint)((ulonglong)SETTINGS_MULTIPLIER * (ulonglong)value >> 0x26));\n    set_flag(4);\n    set_bits(0xffffffff, 0);\n}",
            "called": [
                "FUN_08002560",
                "FUN_08003c90",
                "FUN_08003688",
                "FUN_08002494",
                "FUN_08004d40",
                "FUN_08003ad4",
                "FUN_08003c44",
                "FUN_08002514"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b48",
            "calling": [
                "FUN_08004c52"
            ],
            "imported": false,
            "current_name": "initialize_settings_08001b48"
        },
        "FUN_08004092": {
            "renaming": {
                "FUN_08004092": "set_bit_at_position_08004092",
                "param_1": "data",
                "param_2": "position",
                "param_3": "bit_value",
                "*(uint *)(param_1 + 0x20)": "*data",
                "1 << (param_2 & 0xff)": "1 << position",
                "*(uint *)(param_1 + 0x20) & ~(1 << (param_2 & 0xff))": "*data & mask",
                "param_3 << (param_2 & 0xff)": "bit_value << position",
                "*(uint *)(param_1 + 0x20) | param_3 << (param_2 & 0xff)": "*data | (bit_value << position)"
            },
            "code": "void set_bit_at_position_08004092(uint32_t *data, uint8_t position, uint8_t bit_value)\n{\n    uint32_t mask = ~(1 << position);\n    *data = (*data & mask) | (bit_value << position);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004092",
            "calling": [
                "FUN_080040b0"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_08004092"
        },
        "FUN_08005cd4": {
            "renaming": {
                "FUN_08005cd4": "calculate_sum_of_string_and_function_results_08005cd4",
                "param_1": "string_result",
                "execute_function_08005cc0": "execute_function",
                "process_string_08005c96": "process_string",
                "iVar1": "string_result",
                "iVar2": "function_result"
            },
            "code": "int calculate_sum_of_string_and_function_results_08005cd4(undefined4 string_result){\n  int function_result = execute_function(param_1);\n  int sum = string_result + function_result;\n  return sum;\n}",
            "called": [
                "FUN_08005c96",
                "FUN_08005cc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cd4",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "calculate_sum_of_string_and_function_results_08005cd4"
        },
        "FUN_08005bb0": {
            "renaming": {
                "FUN_08005bb0": "initialize_if_param1_is_one_08005bb0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "code": "void initialize_if_param1_is_one_08005bb0(int param1, int param2, undefined4 param3, undefined4 param4) {\n  if (param1 != 1) {\n    return;\n  }\n  if (param2 == 0xffff) {\n    initialize_param_08005b54_08005b54(PTR_DAT_08005bd0, DAT_08005bcc, param3, 0xffff, param4);\n  }\n  return;\n}",
            "called": [
                "FUN_08005b54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bb0",
            "calling": [],
            "imported": false,
            "current_name": "initialize_if_param1_is_one_08005bb0"
        },
        "FUN_080014ba": {
            "renaming": {
                "FUN_080014ba": "set_data_080014ba",
                "param_1": "data_address",
                "param_2": "is_zero",
                "param_3": "data_1",
                "param_4": "data_2",
                "param_5": "data_3",
                "param_6": "data_4",
                "param_7": "data_5",
                "param_8": "data_6",
                "param_9": "data_7",
                "param_10": "data_8",
                "param_11": "data_9",
                "param_12": "data_10",
                "param_13": "data_11"
            },
            "code": "void set_data_080014ba(int data_address, int is_zero, undefined data_1, undefined4 data_2, undefined data_3, undefined data_4, undefined data_5, undefined data_6, undefined data_7, undefined data_8, undefined data_9, undefined data_10, undefined data_11){\n  *(undefined *)(data_address + 8) = data_1;\n  *(char *)(data_address + 9) = (char)data_2;\n  *(undefined *)(data_address + 10) = data_3;\n  *(undefined *)(data_address + 0xb) = data_4;\n  *(undefined *)(data_address + 0xc) = data_5;\n  *(undefined *)(data_address + 0xd) = data_6;\n  *(undefined *)(data_address + 0xe) = data_7;\n  *(undefined *)(data_address + 0xf) = data_8;\n  *(undefined *)(data_address + 0x10) = data_9;\n  *(undefined *)(data_address + 0x11) = data_10;\n  *(undefined *)(data_address + 0x12) = data_11;\n  if (is_zero == 0) {\n    *(undefined *)(data_address + 0x13) = 0x10;\n  }\n  else {\n    *(undefined *)(data_address + 0x13) = 0;\n  }\n  process_data(data_address,0x10,1,0,data_2);\n  return;\n}",
            "called": [
                "FUN_080013a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ba",
            "calling": [
                "FUN_08001510"
            ],
            "imported": false,
            "current_name": "set_data_080014ba"
        },
        "FUN_08003c90": {
            "renaming": {
                "FUN_08003c90": "update_settings_08003c90",
                "param_1": "settings",
                "puVar1": "settings_ptr",
                "iVar2": "settings_addr",
                "iVar3": "end_time",
                "uVar4": "settings_value",
                "bVar5": "is_flag_set",
                "DAT_08003d98": "PTR_DAT_08003d98",
                "DAT_08003d9c": "PTR_DAT_08003d9c"
            },
            "code": "int update_settings_08003c90(uint *settings)\n{\n    bool is_bit_set = (*settings & 1) != 0;\n    if (is_bit_set) {\n        bool is_flag_set = (*(uint *)(DAT_08003d98 + 0x1c) & 0x10000000) == 0;\n        if (is_flag_set) {\n            *(uint *)(DAT_08003d98 + 0x1c) |= 0x10000000;\n        }\n        if ((*DAT_08003d9c & 0x100) == 0) {\n            *DAT_08003d9c |= 0x100;\n            int start_time = get_value_from_pointer_08001cc4();\n            while ((*DAT_08003d9c & 0x100) == 0) {\n                int end_time = get_value_from_pointer_08001cc4();\n                if (100 < (uint)(end_time - start_time)) {\n                    return 3;\n                }\n            }\n        }\n        uint *settings_ptr = PTR_DAT_08003da0;\n        int settings_addr = DAT_08003d98;\n        uint settings_value = *(uint *)(DAT_08003d98 + 0x20) & 0x300;\n        if ((settings_value != 0) && (settings_value != (settings[1] & 0x300))) {\n            settings_value = *(uint *)(DAT_08003d98 + 0x20);\n            *settings_ptr = 1;\n            *settings_ptr = 0;\n            *(uint *)(settings_addr + 0x20) = settings_value & 0xfffffcff;\n            if ((settings_value & 1) != 0) {\n                int start_time = get_value_from_pointer_08001cc4();\n                while ((*(uint *)(DAT_08003d98 + 0x20) & 2) == 0) {\n                    int end_time = get_value_from_pointer_08001cc4();\n                    if (5000 < (uint)(end_time - start_time)) {\n                        return 3;\n                    }\n                }\n            }\n        }\n        int settings_addr = DAT_08003d98;\n        *(uint *)(DAT_08003d98 + 0x20) = *(uint *)(DAT_08003d98 + 0x20) & 0xfffffcff | settings[1];\n        if (is_flag_set) {\n            *(uint *)(settings_addr + 0x1c) &= 0xefffffff;\n        }\n    }\n    if ((*settings & 2) != 0) {\n        *(uint *)(DAT_08003d98 + 4) = *(uint *)(DAT_08003d98 + 4) & 0xffff3fff | settings[2];\n    }\n    if ((*settings & 0x10) != 0) {\n        *(uint *)(DAT_08003d98 + 4) = *(uint *)(DAT_08003d98 + 4) & 0xffbfffff | settings[3];\n    }\n    return 0;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c90",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "update_settings_08003c90"
        },
        "FUN_08002514": {
            "renaming": {
                "FUN_08002514": "validate_input_08002514",
                "param_1": "input",
                "puVar1": "data_pointer",
                "DAT_08002538": "data_pointer",
                "DAT_0800253c": "data_area"
            },
            "code": "int validate_input_08002514(unsigned int input){\n    unsigned int *DAT_08002538 = DAT_08002538;\n    if (input - 1U < 0x1000000) {\n        DAT_08002538[1] = input - 1U;\n        *(unsigned char *)(DAT_0800253c + 0x23) = 0xf0;\n        DAT_08002538[2] = 0;\n        *DAT_08002538 = 7;\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002514",
            "calling": [
                "FUN_08001b48",
                "FUN_08001c3c"
            ],
            "imported": false,
            "current_name": "validate_input_08002514"
        },
        "FUN_08005c1c": {
            "renaming": {
                "FUN_08005c1c": "set_data_at_address_08005c1c",
                "param_1": "data_address",
                "param_2": "data_1",
                "param_3": "data_2",
                "param_4": "data_3",
                "param_5": "data_4"
            },
            "code": "void set_data_at_address_08005c1c(undefined4 *data_address, undefined data_1, undefined data_2, undefined data_3, undefined data_4) {\n  *data_address = PTR_PTR_LAB_08005be2_1_08005c34;\n  *(undefined *)(data_address + 1) = data_1;\n  *(undefined *)((int)data_address + 5) = data_2;\n  *(undefined *)((int)data_address + 6) = data_3;\n  *(undefined *)((int)data_address + 7) = data_4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c1c",
            "calling": [
                "FUN_08005c38"
            ],
            "imported": false,
            "current_name": "set_data_at_address_08005c1c"
        },
        "FUN_08006dc8": {
            "renaming": {
                "FUN_08006dc8": "check_permissions_and_set_08006dc8",
                "param_1": "base_address",
                "param_2": "num_pages",
                "param_3": "permission_flags",
                "param_4": "result",
                "iVar1": "status",
                "uVar2": "permission",
                "auStack_4c": "temp_buffer",
                "local_48": "temp_result"
            },
            "code": "int check_permissions_and_set_08006dc8(uint32_t base_address, int16_t num_pages, uint32_t *permission_flags, uint32_t *result) {\n  int status;\n  uint32_t temp_result;\n  if (num_pages < 0 || (status = set_memory_permissions_08007004(base_address, num_pages, &temp_result)) < 0) {\n    *result = 0;\n    if ((int32_t)(*(uint16_t *)(num_pages + 0xc)) << 0x18 < 0) {\n      *permission_flags = 0x40;\n      goto LAB_08006e08;\n    }\n  }\n  else {\n    *result = (temp_result & 0xf000) == 0x2000;\n  }\n  *permission_flags = 0x400;\nLAB_08006e08:\n  return 0;\n}",
            "called": [
                "FUN_08007004"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dc8",
            "calling": [
                "FUN_08006e10"
            ],
            "imported": false,
            "current_name": "check_permissions_and_set_08006dc8"
        },
        "FUN_0800412c": {
            "renaming": {
                "FUN_0800412c": "set_bit_and_check_0800412c",
                "param_1": "bits_array",
                "param_2": "bit_position",
                "puVar1": "bits"
            },
            "code": "uint set_bit_and_check_0800412c(uint **bits_array, uint bit_position){\n  uint *bits = *bits_array;\n  set_bits_at_position_08004110(bits, bit_position, 0);\n  if (((bits[8] & 0x1111) == 0) && ((bits[8] & 0x444) == 0)) {\n    bits[17] &= 0xffff7fff;\n  }\n  bits = *bits_array;\n  if (((bits[8] & 0x1111) == 0) && ((bits[8] & 0x444) == 0)) {\n    *bits &= 0xfffffffe;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800412c",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "set_bit_and_check_0800412c"
        },
        "FUN_08007090": {
            "renaming": {
                "FUN_08007090": "process_and_wait_for_response_08007090",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "PTR_DAT_0800712c": "response_flag_1",
                "PTR_DAT_08007130": "response_flag_2",
                "PTR_DAT_08007134": "response_flag_3",
                "PTR_DAT_08007138": "response_flag_4",
                "PTR_DAT_0800713c": "response_flag_5",
                "PTR_DAT_08007140": "response_flag_6",
                "PTR_DAT_08007144": "response_flag_7",
                "PTR_DAT_08007148": "response_flag_8",
                "PTR_DAT_0800714c": "response_flag_9",
                "PTR_DAT_08007150": "response_flag_10",
                "PTR_DAT_08007154": "response_flag_11",
                "PTR_DAT_08007158": "response_flag_12"
            },
            "code": "void process_and_wait_for_response_08007090(void)\n{\n  code *jump_table;\n  jump_table = process_and_wait_for_response_08007090;\n  if (*(int *)PTR_DAT_0800712c << 0x1f) {\n    *(undefined4 *)PTR_DAT_0800712c = 1;\n  }\n  if (*(int *)PTR_DAT_08007130 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08007130 = 1;\n  }\n  if (*(int *)PTR_DAT_08007134 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08007134 = 1;\n  }\n  if (*(int *)PTR_DAT_08007138 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08007138 = 1;\n  }\n  if (*(int *)PTR_DAT_0800713c << 0x1f) {\n    *(undefined4 *)PTR_DAT_0800713c = 1;\n  }\n  if (*(int *)PTR_DAT_08007140 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08007140 = 1;\n  }\n  if (*(int *)PTR_DAT_08007144 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08007144 = 1;\n  }\n  if (*(int *)PTR_DAT_08007148 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08007148 = 1;\n  }\n  if (*(int *)PTR_DAT_0800714c << 0x1f) {\n    *(undefined4 *)PTR_DAT_0800714c = 1;\n  }\n  if (*(int *)PTR_DAT_08007150 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08007150 = 1;\n  }\n  if (*(int *)PTR_DAT_08007154 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08007154 = 1;\n  }\n  if (*(int *)PTR_DAT_08007158 << 0x1f) {\n    *(undefined4 *)PTR_DAT_08007158 = 1;\n  }\n  if (*(int *)PTR_DAT_0800712c3 << 0x1f) {\n    *(undefined4 *)PTR_DAT_0800712c3 = 1;\n  }\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_08006ac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007090",
            "calling": [
                "FUN_080060d4"
            ],
            "imported": false,
            "current_name": "process_and_wait_for_response_08007090"
        },
        "FUN_0800492c": {
            "renaming": {
                "FUN_0800492c": "get_param_value_shifted_0800492c",
                "param_1": "param_value",
                "param_2": "unused_param",
                "param_3": "unused_param",
                "param_4": "unused_param",
                "iVar1": "param_value_result",
                "uVar2": "masked_value",
                "PTR_DAT_08004944": "unused_pointer"
            },
            "code": "uint get_param_value_shifted_0800492c(uint param_value, uint shift_amount) {\n  uint shifted_value = param_value << shift_amount;\n  uint masked_value = shifted_value >> 27;\n  if (masked_value > 0x10) {\n    masked_value = 0;\n  }\n  return masked_value;\n}",
            "called": [
                "FUN_08004cce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800492c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "get_param_value_shifted_0800492c"
        },
        "FUN_0800480a": {
            "renaming": {
                "FUN_0800480a": "set_bit_0800480a",
                "param_1": "bit_position",
                "param_2": "array",
                "uVar1": "index",
                "*(uint *)(param_2 + uVar1 * 4)": "target",
                "1 << (param_1 & 0xf)": "bit_mask"
            },
            "code": "void set_bit_0800480a(uint bit_position, int* array){\n    uint index = (bit_position << 0x18) >> 0x1c;\n    uint* target = (uint*)(array + index * 4);\n    uint bit_mask = 1 << (bit_position & 0xf);\n    *target |= bit_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800480a",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "set_bit_0800480a"
        },
        "FUN_080015f8": {
            "renaming": {
                "FUN_080015f8": "reverse_engineered_function_080015f8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "valid_params",
                "uVar2": "reversed",
                "uVar3": "result",
                "DAT_0800169c": "high_bits",
                "DAT_08001698": "low_bits",
                "0x10000": "bit_mask",
                "0x12": "bit_shift",
                "0x2000": "bit_mask2",
                "0x1fff": "bit_mask3",
                "DAT_080016a0": "const1",
                "DAT_080016a4": "const2",
                "DAT_080016a8": "const3",
                "DAT_080016ac": "const4",
                "DAT_080016b0": "const5",
                "FUN_08000194": "func1",
                "FUN_080004f8": "func2",
                "FUN_0800074c": "func3",
                "reverse_bits_0800040c": "reverse_bits",
                "check_valid_parameters_080015b2": "check_valid_parameters"
            },
            "code": "uint32_t reverse_engineered_function_080015f8();\nuint64_t reverse_bits(uint16_t value);\nuint64_t func1(uint32_t param_4);\nuint64_t func2(uint64_t value);\nuint64_t func3(uint64_t value);\nuint64_t func4(uint64_t value);\n\nuint64_t reverse_engineered_function_080015f8(uint32_t param_1, int param_2, uint32_t param_3, uint32_t param_4)\n{\n  uint32_t valid_params = reverse_engineered_function_080015f8();\n  uint64_t result = ((uint64_t)DAT_0800169c << 32) | DAT_08001698;\n  if ((valid_params & 0x10000) == 0) {\n    uint32_t param1 = valid_params >> 0x12;\n    uint64_t reversed = reverse_bits(param1 & 0x1fff);\n    if ((param1 & 0x2000) != 0) {\n      uint64_t reversed2 = reverse_bits(~param1 & 0x1fff);\n      uint64_t res = func1(reversed2);\n      result = (res & 0xffffffff) | ((uint64_t)((int)(res >> 0x20) + 0x80000000) << 32);\n    }\n    result = func2(reversed);\n    if (param_2 == 1) {\n      result = func2(result);\n      result = func3(result);\n      result = func4(result);\n      result = func1(result);\n      return result;\n    }\n  }\n  else {\n    uint32_t param1 = valid_params & 7;\n    if (param1 == 2) {\n      return ((uint64_t)DAT_0800168c << 32) | DAT_08001688;\n    }\n    if (param1 == 4) {\n      return ((uint64_t)DAT_08001694 << 32) | DAT_08001690;\n    }\n    if (param1 != 1) {\n      return 0;\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_0800074c",
                "FUN_080015b2",
                "FUN_0800040c",
                "FUN_080004f8",
                "FUN_08000194"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015f8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "reverse_engineered_function_080015f8"
        },
        "FUN_08005c38": {
            "renaming": {
                "FUN_08005c38": "clear_data_if_flag_set_08005c38",
                "param_1": "flag",
                "param_2": "value",
                "PTR_DAT_08005c60": "PTR_DATA"
            },
            "code": "void clear_data_if_flag_set_08005c38(int flag, int value) {\n  if ((flag == 1) && (value == 0xffff)) {\n    set_data_at_address(PTR_DAT_08005c60, 0, 0, 0, 0);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08005c1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c38",
            "calling": [],
            "imported": false,
            "current_name": "clear_data_if_flag_set_08005c38"
        },
        "FUN_08005f8c": {
            "renaming": {
                "FUN_08005f8c": "count_bits_set_08005f8c",
                "param_1": "number",
                "cVar1": "bit_count"
            },
            "code": "char count_bits_set_08005f8c(uint number) {\n  char bit_count = 0;\n  while (number != 1) {\n    bit_count++;\n    number = number >> 1;\n  }\n  return bit_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f8c",
            "calling": [
                "FUN_080060e4"
            ],
            "imported": false,
            "current_name": "count_bits_set_08005f8c"
        },
        "FUN_08006f5a": {
            "renaming": {
                "FUN_08006f5a": "process_input_08006f5a",
                "param_1": "result",
                "param_2": "input_address",
                "param_3": "unused1",
                "param_4": "unused2",
                "sVar1": "input_length",
                "iVar3": "process_result",
                "unaff_r4": "unused3",
                "unaff_r5": "unused3",
                "in_lr": "unused3",
                "PTR_DAT_08006fe0": "PTR_DAT"
            },
            "code": "void process_input_08006f5a(int *result, int input_address, int unused1, int unused2) {\n  short input_length = *(short *)(input_address + 0xe);\n  unsigned int shifted_value = (unsigned int)*(ushort *)(input_address + 0xc) << 0x17;\n  if ((int)shifted_value < 0) {\n    check_return_value(result, input_length, 0, 2);\n  }\n  *(ushort *)(input_address + 0xc) = *(ushort *)(input_address + 0xc) & 0xefff;\n  unsigned int unused3 = 0;\n  int process_result = process_input_08006f5a_wrapper(input_length, unused1, unused2, unused2, unused2, unused3, unused3, unused3);\n  if ((process_result == -1) && (*(int *)PTR_DAT_08006fe0_08006fe0 != 0)) {\n    *result = *(int *)PTR_DAT_08006fe0_08006fe0;\n  }\n  return;\n}\n",
            "called": [
                "FUN_08007048",
                "FUN_08005730"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f5a",
            "calling": [],
            "imported": false,
            "current_name": "process_input_08006f5a"
        },
        "FUN_08000b08": {
            "renaming": {
                "FUN_08000b08": "update_params_and_process_data_if_needed_08000b08",
                "param_1": "param1",
                "param_2": "param2",
                "PTR_DAT_08000b8c": "ptr1",
                "PTR_DAT_08000b88": "ptr2",
                "PTR_DAT_08000b84": "ptr3"
            },
            "code": "void update_params_and_process_data_if_needed_08000b08(int param1, int param2)\n{\n    bool should_process_data = (param1 == 1) && (param2 == 0xffff);\n    if (should_process_data) {\n        int* PTR_DAT_08000b8c = PTR_DAT_08000b8c;\n        int* PTR_DAT_08000b88 = PTR_DAT_08000b88;\n        int* PTR_DAT_08000b84 = PTR_DAT_08000b84;\n        update_params_and_return_08001ab0_08001b18(PTR_DAT_08000b9c, PTR_DAT_08000b98, PTR_DAT_08000b94, PTR_DAT_08000b90,\n             *(int *)PTR_DAT_08000b8c, *(int *)(PTR_DAT_08000b8c + 4),\n             *(int *)PTR_DAT_08000b88, *(int *)(PTR_DAT_08000b88 + 4),\n             *(int *)PTR_DAT_08000b84, *(int *)(PTR_DAT_08000b84 + 4), 0);\n        processDataAndReturnOne_08001510(PTR_DAT_08000bb8, *PTR_DAT_08000ba0, *PTR_DAT_08000ba4, *PTR_DAT_08000ba8,\n             *PTR_DAT_08000bac, *PTR_DAT_08000bb0, *PTR_DAT_08000bb4);\n        process_data_0800157c(PTR_DAT_08000bc8, *PTR_DAT_08000bc4, *PTR_DAT_08000bc0, *PTR_DAT_08000bbc);\n    }\n}\n",
            "called": [
                "FUN_0800157c",
                "FUN_08001510",
                "FUN_08001b18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b08",
            "calling": [],
            "imported": false,
            "current_name": "update_params_and_process_data_if_needed_08000b08"
        },
        "FUN_08006cb4": {
            "renaming": {
                "FUN_08006cb4": "initialize_data_08006cb4",
                "param_1": "param",
                "uVar1": "initialized_value",
                "iVar2": "ptr_to_PTR_PTR_DAT_08006d0c",
                "bVar3": "is_param_equal_to_PTR_PTR_DAT_08006d0c"
            },
            "code": "void initialize_data_08006cb4(int param)\n{\n  undefined4 uVar1;\n  int iVar2;\n  bool is_param_equal_to_PTR_PTR_DAT_08006d0c;\n  \n  if (*(int *)(param + 0x18) == 0) {\n    *(undefined4 *)(param + 0x48) = 0;\n    *(undefined4 *)(param + 0x4c) = 0;\n    *(undefined4 *)(param + 0x50) = 0;\n    iVar2 = *(int *)PTR_PTR_DAT_08006d0c;\n    *(undefined **)(param + 0x28) = PTR_LAB_08006c34_1_08006d10;\n    is_param_equal_to_PTR_PTR_DAT_08006d0c = param == iVar2;\n    if (is_param_equal_to_PTR_PTR_DAT_08006d0c) {\n      iVar2 = 1;\n    }\n    if (is_param_equal_to_PTR_PTR_DAT_08006d0c) {\n      *(int *)(param + 0x18) = iVar2;\n    }\n    uVar1 = initialize_piVar2_array_08006d14();\n    *(undefined4 *)(param + 4) = uVar1;\n    uVar1 = initialize_piVar2_array_08006d14(param);\n    *(undefined4 *)(param + 8) = uVar1;\n    uVar1 = initialize_piVar2_array_08006d14(param);\n    *(undefined4 *)(param + 0xc) = uVar1;\n    initialize_data_08006cb4_08006c40(*(undefined4 *)(param + 4),4,0);\n    initialize_data_08006cb4_08006c40(*(undefined4 *)(param + 8),9,1);\n    initialize_data_08006cb4_08006c40(*(undefined4 *)(param + 0xc),0x12,2);\n    *(undefined4 *)(param + 0x18) = 1;\n  }\n  return;\n}",
            "called": [
                "FUN_08006c40",
                "FUN_08006d14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006cb4",
            "calling": [
                "FUN_08006344",
                "FUN_08006d14",
                "FUN_08006394",
                "FUN_080069e4",
                "FUN_08006be0",
                "FUN_080068f0"
            ],
            "imported": false,
            "current_name": "initialize_data_08006cb4"
        },
        "FUN_08004c5e": {
            "renaming": {
                "FUN_08004c5e": "find_param_in_string_08004c5e",
                "param_1": "param",
                "param_2": "string",
                "*param_2": "*string",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int find_param_in_string_08004c5e(int param, char *string) {\n    while (*string != -1) {\n        if (*string == param) {\n            break;\n        }\n        string += 12;\n    }\n    return *((int *)string + 1);\n}",
            "called": [
                "FUN_08004c5e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c5e",
            "calling": [
                "FUN_08004c5e",
                "FUN_08004c78"
            ],
            "imported": false,
            "current_name": "find_param_in_string_08004c5e"
        },
        "FUN_08004b3c": {
            "renaming": {
                "FUN_08004b3c": "set_flags_and_reset_bit_array_08004b3c",
                "param_1": "PARAM_1",
                "local_50": "bit_array",
                "PTR_DAT_08004b90": "PARAM_PTR",
                "find_param_08004c78": "find_parameter_value",
                "get_value_type_08004948": "get_value_type",
                "get_param_value_08004cce": "get_parameter_value",
                "set_bit_and_update_080040b0": "set_bit_and_update",
                "set_bit_and_check_0800412c": "set_bit_and_check",
                "set_flags_and_reset_08003ed8": "set_flags_and_reset"
            },
            "code": "void set_flags_and_reset_bit_array_08004b3c(int bit_array[]) {\n  int param_value = find_parameter_value(PARAM_1, PTR_DAT_08004b90);\n  if ((param_value != 0) &&\n     ((((int_value_type = get_value_type(PARAM_1), int_value_type == 0 || (int_value_type == 4)) || (int_value_type == 8)) ||\n      ((int_value_type == 0xc || (int_value_type == 0x18)))))) {\n    uint32_t param_value_2 = get_parameter_value(PARAM_1, PTR_DAT_08004b90);\n    if ((param_value_2 & 0x100000) == 0) {\n      set_bit_and_update(bit_array, int_value_type);\n    }\n    else {\n      set_bit_and_check(bit_array, int_value_type);\n    }\n    set_flags_and_reset(bit_array);\n  }\n  return;\n}",
            "called": [
                "FUN_08003ed8",
                "FUN_08004cce",
                "FUN_080040b0",
                "FUN_08004948",
                "FUN_08004c78",
                "FUN_0800412c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b3c",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "set_flags_and_reset_bit_array_08004b3c"
        },
        "FUN_08001550": {
            "renaming": {
                "FUN_08001550": "process_and_execute_data_08001550",
                "param_1": "data_ptr",
                "param_2": "data_length",
                "param_3": "data_offset",
                "iVar1": "i",
                "**(code **)*param_1": "**(code **)*data_ptr",
                "*(undefined *)(param_3 + iVar1)": "*(uint8_t *)(data_offset + i)"
            },
            "code": "void process_and_execute_data_08001550(uint32_t *data_ptr, uint32_t data_length, int data_offset) {\n  int i;\n  uint32_t mask = (data_length & 7) << 3 | 0x40;\n  process_data(data_ptr, mask, 0);\n  for (i = 0; i < 8; i++) {\n    (**(code **)*data_ptr)(data_ptr,*(uint8_t *)(data_offset + i));\n  }\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001550",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "process_and_execute_data_08001550"
        },
        "FUN_08000cd0": {
            "renaming": {
                "FUN_08000cd0": "FUNC_08000cd0"
            },
            "code": "\nvoid FUNC_08000cd0(void)\n\n{\n  char cVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  undefined *puVar4;\n  uint uVar5;\n  undefined4 uVar6;\n  int iVar7;\n  undefined4 extraout_r1;\n  undefined4 extraout_r1_00;\n  undefined4 extraout_r1_01;\n  undefined4 uVar8;\n  undefined8 uVar9;\n  \n  uVar5 = get_value_and_return_08004b94_wrapper_080058e0();\n  if (*(uint *)PTR_DAT_08000f50 < uVar5) {\n    *(uint *)PTR_DAT_08000f50 = *(uint *)PTR_DAT_08000f50 + 1000;\n    uVar9 = reverse_engineered_function_080015f8(PTR_DAT_08000f74,0);\n    uVar8 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar6 = (undefined4)uVar9;\n    *(undefined8 *)PTR_DAT_08000f6c = uVar9;\n    iVar7 = validate_input_params_080009c8(uVar6,uVar8,DAT_08000f18,DAT_08000f1c);\n    if (((iVar7 != 0) || (iVar7 = validate_input_params_080009c8(uVar6,uVar8,DAT_08000f20,DAT_08000f24), iVar7 != 0))\n       || (iVar7 = validate_input_params_080009c8(uVar6,uVar8,DAT_08000f28,DAT_08000f2c), iVar7 != 0)) {\n      *PTR_DAT_08000f64 = 7;\n      *PTR_DAT_08000f58 = 0;\n    }\n  }\n  uVar5 = get_value_and_return_08004b94_wrapper_080058e0();\n  if (*(uint *)PTR_DAT_08000f54 < uVar5) {\n    *(uint *)PTR_DAT_08000f54 = *(uint *)PTR_DAT_08000f54 + 1000;\n    if (*PTR_DAT_08000f58 == '\\x01') {\n      uVar8 = *(undefined4 *)PTR_DAT_08000f5c;\n      uVar6 = check_if_parameter_is_valid_08005890(uVar8);\n      uVar5 = count_leading_zeroes(uVar6);\n      process_data_08005848(uVar8,uVar5 >> 5);\n      iVar7 = *(int *)PTR_DAT_08000f78;\n      *(int *)PTR_DAT_08000f78 = iVar7 + 1;\n      puVar2 = PTR_DAT_08000f7c;\n      convert_base_and_return_08005d82(PTR_DAT_08000f7c,iVar7 + 1,10);\n      puVar3 = PTR_DAT_08000f80;\n      process_string_08005c96(puVar2,PTR_DAT_08000f80);\n      process_input_and_validate_08005f2c(puVar2,extraout_r1,*(undefined4 *)PTR_DAT_08000f84,\n                   *(undefined4 *)(PTR_DAT_08000f84 + 4),2);\n      process_string_08005c96(puVar2,puVar3);\n      process_input_and_validate_08005f2c(puVar2,extraout_r1_00,*(undefined4 *)PTR_DAT_08000f6c,\n                   *(undefined4 *)(PTR_DAT_08000f6c + 4),2);\n      process_string_08005c96(puVar2,puVar3);\n      calculate_result_of_input_and_function_execution_08005f40(puVar2,extraout_r1_01,*(undefined4 *)PTR_DAT_08000f88,\n                   *(undefined4 *)(PTR_DAT_08000f88 + 4),2);\n    }\n    else {\n      process_data_08005848(*(undefined4 *)PTR_DAT_08000f5c,1);\n    }\n    puVar2 = PTR_DAT_08000f60;\n    process_data_wrapper_0800135a(PTR_DAT_08000f60);\n    puVar4 = PTR_DAT_08000f64;\n    process_string_08005c96(puVar2,*(undefined4 *)\n                         (PTR_PTR_s_Ready_08000f68 + (uint)(byte)*PTR_DAT_08000f64 * 4));\n    process_data_08001366(puVar2,0,1);\n    puVar3 = PTR_DAT_08000f60;\n    if (*puVar4 == '\\a') {\n      process_string_08005c96(puVar2,PTR_s_TC_Error__08000f8c);\n    }\n    else {\n      process_input_and_validate_08005f2c(PTR_DAT_08000f60,2,*(undefined4 *)PTR_DAT_08000f6c,\n                   *(undefined4 *)(PTR_DAT_08000f6c + 4),2);\n      processDataAndReturnOne_0800134e(puVar3,0);\n      process_string_08005c96(puVar3,PTR_DAT_08000f70);\n    }\n  }\n  if ((byte)*PTR_DAT_08000f64 < 8) {\n                    /* WARNING: Could not recover jumptable at 0x08000d5c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_08000d5c::switchdataD_08000d60 +\n              (&switchD_08000d5c::switchdataD_08000d60)[(byte)*PTR_DAT_08000f64]))();\n    return;\n  }\n  if ((*PTR_DAT_08001274 == '\\x01') && (*PTR_DAT_0800126c == '\\x01')) {\n    *PTR_DAT_0800126c = 0;\n    *PTR_DAT_08001258 = 0;\n  }\n  cVar1 = *PTR_DAT_08001278;\n  if (cVar1 == '\\x01') {\n    iVar7 = find_data_08005754(*(undefined4 *)PTR_DAT_08001280);\n    if (iVar7 == 0) {\n      iVar7 = get_value_and_return_08004b94_wrapper_080058e0();\n      if (0x32 < (uint)(iVar7 - *(int *)PTR_DAT_08001284)) {\n        *PTR_DAT_08001278 = 2;\n      }\n    }\n    else {\n      *PTR_DAT_08001278 = 0;\n    }\n  }\n  else if (cVar1 == '\\0') {\n    *PTR_DAT_08001274 = 0;\n    iVar7 = find_data_08005754(*(undefined4 *)PTR_DAT_08001280);\n    if (iVar7 == 0) {\n      uVar6 = get_value_and_return_08004b94_wrapper_080058e0();\n      *(undefined4 *)PTR_DAT_08001284 = uVar6;\n      *PTR_DAT_08001278 = 1;\n    }\n  }\n  else if ((cVar1 == '\\x02') && (iVar7 = find_data_08005754(*(undefined4 *)PTR_DAT_08001280), iVar7 != 0))\n  {\n    *PTR_DAT_08001274 = 1;\n    *PTR_DAT_08001278 = 0;\n  }\n  if (*PTR_DAT_0800126c == '\\x01') {\n    iVar7 = get_value_and_return_08004b94_wrapper_080058e0();\n    process_input_080016b4(PTR_DAT_08001250);\n    if (*(uint *)PTR_DAT_0800128c < (uint)(iVar7 - *(int *)PTR_DAT_08001288)) {\n      *(uint *)PTR_DAT_08001288 = *(int *)PTR_DAT_08001288 + *(uint *)PTR_DAT_0800128c;\n    }\n    uVar9 = reverse_bits_0800040c(iVar7 - *(int *)PTR_DAT_08001288);\n    iVar7 = is_input_valid_080009dc((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),*(undefined4 *)PTR_DAT_08001290,\n                         *(undefined4 *)(PTR_DAT_08001290 + 4));\n    if (iVar7 == 0) {\n      process_data_08005848(*(undefined4 *)PTR_DAT_0800127c,0);\n    }\n    else {\n      process_data_08005848(*(undefined4 *)PTR_DAT_0800127c,1);\n    }\n  }\n  else {\n    process_data_08005848(*(undefined4 *)PTR_DAT_0800127c,0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800040c",
                "FUN_08005cd4",
                "FUN_080018f8",
                "FUN_080058e0",
                "FUN_08005f2c",
                "FUN_08001a44",
                "FUN_080009c8",
                "FUN_08005d82",
                "FUN_080015f8",
                "FUN_08005848",
                "FUN_0800042c",
                "FUN_08001366",
                "FUN_08005f40",
                "FUN_08000a18",
                "FUN_0800134e",
                "FUN_0800135a",
                "FUN_08005754",
                "FUN_08000a04",
                "FUN_080009dc",
                "FUN_08001918",
                "FUN_080009f0",
                "FUN_08005890",
                "FUN_080016b4",
                "FUN_08001960",
                "FUN_08005c96",
                "FUN_08000194"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cd0",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "FUNC_08000cd0"
        },
        "FUN_08001310": {
            "renaming": {
                "FUN_08001310": "process_data_08001310",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "process_data_08005848": "process_data_1",
                "process_data_and_param_080012c0": "process_data_and_param",
                "process_data_with_bitmask_080012e8": "process_data_with_bitmask"
            },
            "code": "void process_data_08001310(uint8_t* data, uint32_t param1, uint32_t param2, uint32_t param3) {\n  process_data_08001310_08005848(*(undefined *)(data + 8), param1, param2, param3, param3);\n  if (*(char *)(data + 9) != -1) {\n    process_data_08001310_08005848(*(char *)(data + 9), 0, 0, 0, 0);\n  }\n  if ((*(byte *)(data + 0x13) & 0x10) == 0) {\n    process_data_08001310_and_param(data, param2 >> 4);\n    process_data_08001310_and_param(data, param2);\n    return;\n  }\n  process_data_08001310_with_bitmask(data, param2);\n  return;\n}",
            "called": [
                "FUN_08005848",
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001310",
            "calling": [
                "FUN_08001550",
                "FUN_0800134e",
                "FUN_08001366",
                "FUN_0800135a",
                "FUN_080013a4",
                "FUN_0800138e"
            ],
            "imported": false,
            "current_name": "process_data_08001310"
        },
        "FUN_080009a8": {
            "renaming": {
                "FUN_080009a8": "validate_params_and_return_080009a8_080009a8",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param"
            },
            "code": "void validate_params_and_return_080009a8_080009a8(undefined4 first_param, undefined4 second_param, undefined4 third_param, undefined4 fourth_param)\n{\n  validate_params_080009b8(third_param, fourth_param, first_param, second_param);\n  return;\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009a8",
            "calling": [
                "FUN_08000a18",
                "FUN_08000a04"
            ],
            "imported": false,
            "current_name": "validate_params_and_return_080009a8_080009a8"
        },
        "FUN_08004d90": {
            "renaming": {
                "FUN_08004d90": "set_flags_based_on_input_08004d90",
                "param_1": "input",
                "DAT_08004de4": "input_flag1",
                "DAT_08004df0": "data_ptr",
                "DAT_08004de8": "input_flag3",
                "DAT_08004dec": "input_flag4"
            },
            "code": "void set_flags_based_on_input_08004d90(int *input)\n{\n    int flag1 = 0xfffff7ff;\n    int flag2 = 0xfffffffe;\n    int flag3 = 0xfffffffd;\n    int flag4 = 0xfffffffb;\n\n    if (*input == DAT_08004de4) {\n        *(uint *)(DAT_08004df0 + 0x18) &= flag1;\n    }\n    if (*input == input_flag2) {\n        *(uint *)(DAT_08004df0 + 0x1c) &= flag2;\n    }\n    if (*input == DAT_08004de8) {\n        *(uint *)(DAT_08004df0 + 0x1c) &= flag3;\n    }\n    if (*input == DAT_08004dec) {\n        *(uint *)(DAT_08004df0 + 0x1c) &= flag4;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d90",
            "calling": [
                "FUN_08004b34"
            ],
            "imported": false,
            "current_name": "set_flags_based_on_input_08004d90"
        },
        "FUN_08005ce8": {
            "renaming": {
                "FUN_08005ce8": "convert_base10_to_baseN_08005ce8",
                "param_1": "num",
                "param_2": "base",
                "param_3": "min_digits",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "current_digit",
                "cVar1": "digit",
                "local_15": "digits"
            },
            "code": "uint32_t convert_base10_to_baseN_08005ce8(int *num, uint32_t base, uint32_t min_digits)\n{\n    char digit;\n    uint32_t quotient;\n    uint32_t remainder;\n    char *digits = malloc(min_digits + 1);\n    digits[min_digits] = 0;\n    if ((int)min_digits < 2) {\n        min_digits = 10;\n    }\n    char *current_digit = digits + 1;\n    do {\n        quotient = *num / base;\n        remainder = (*num & 0xff) - (quotient * base & 0xff) & 0xff;\n        current_digit = current_digit - 1;\n        digit = (char)remainder;\n        if (remainder < 10) {\n            digit = digit + '0';\n        }\n        else {\n            digit = digit + '7';\n        }\n        *current_digit = digit;\n        *num = quotient;\n    } while (quotient != 0);\n    uint32_t result = find_end_of_string_08000178(current_digit);\n    result = (**(code **)(*num + 4))(num,current_digit,result);\n    return result;\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005ce8",
            "calling": [
                "FUN_08005d8a",
                "FUN_08005d42"
            ],
            "imported": false,
            "current_name": "convert_base10_to_baseN_08005ce8"
        },
        "FUN_0800316c": {
            "renaming": {
                "FUN_0800316c": "process_input_0800316c",
                "param_1": "input_data",
                "iVar1": "data_size",
                "puVar2": "output_char",
                "puVar3": "output_data",
                "do_nothing_0800316a": "do_nothing",
                "check_input_and_set_flags_08004ef4": "check_input_and_set_flags",
                "get_data_size_0800258c": "get_data_size",
                "PTR_LAB_080035fc_1_080032ac": "PTR_LAB"
            },
            "code": "void process_input_0800316c(uint **input_data)\n{\n    int flags = (*input_data)[1];\n    char current_char = *((char *)input_data + 0x3d);\n    uint *output_data = input_data[0xc];\n    if (current_char - 0x29 < 2) {\n        output_data = NULL;\n        *((char *)input_data + 0x3d) = 0x28;\n    }\n    else {\n        if (current_char != '`' && (flags & 0x800) == 0) {\n            *((char *)input_data + 0x3d) = 0x20;\n        }\n        output_data = NULL;\n        *((char *)input_data + 0x3e) = 0;\n    }\n    **input_data &= 0xfffff7ff;\n    if ((flags & 0x800) == 0) {\n        if (current_char == '`') {\n            *((char *)input_data + 0x3d) = 0x20;\n            input_data[0x10] = NULL;\n            if ((flags & 0x40) != 0) {\n                char *output_char = (char *)input_data[9];\n                input_data[9] = (uint *)(output_char + 1);\n                *output_char = (char)(*input_data)[4];\n            }\n            **input_data &= 0xfffffffe;\n            do_nothing(input_data);\n        }\n        else {\n            if ((flags & 0x40) != 0) {\n                char *output_char = (char *)input_data[9];\n                input_data[9] = (uint *)(output_char + 1);\n                *output_char = (char)(*input_data)[4];\n            }\n            check_input_and_set_flags(input_data);\n        }\n    }\n    else {\n        flags &= 0xfffff7ff;\n        if (*((char *)input_data[0xd] + 0x21) == '\\x01') {\n            input_data[0xe][0xd] = (uint)PTR_LAB_080035fc_1_080032ac_080035fc_1_080032ac;\n            int data_size = get_data_size(input_data[0xe]);\n            if (data_size != 0) {\n                if ((flags & 0x40) != 0) {\n                    char *output_char = (char *)input_data[9];\n                    input_data[9] = (uint *)(output_char + 1);\n                    *output_char = (char)(*input_data)[4];\n                }\n                **input_data &= 0xfffffffe;\n                *((char *)input_data + 0x3d) = 0x20;\n                ((void (*)())input_data[0xe][0xd])();\n            }\n        }\n        else {\n            input_data[0xd][0xd] = (uint)PTR_LAB_080035fc_1_080032ac_080035fc_1_080032ac;\n            int data_size = get_data_size(input_data[0xd]);\n            if (data_size != 0) {\n                **input_data &= 0xfffffffe;\n                *((char *)input_data + 0x3d) = 0x20;\n                ((void (*)())input_data[0xd][0xd])();\n            }\n        }\n    }\n    if (current_char == '(' && (input_data[0x10] & 4) != 0) {\n        input_data[0xb] = DAT_080032b0;\n        output_data = NULL;\n        *((char *)input_data + 0x3d) = 0x20;\n        *((char *)input_data + 0x3e) = 0;\n        check_and_call_function_if_valid_input(input_data);\n    }\n}",
            "called": [
                "FUN_08004ef4",
                "FUN_0800258c",
                "FUN_0800316a",
                "FUN_08004ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "FUN_08003520",
                "FUN_080032b4"
            ],
            "imported": false,
            "current_name": "process_input_0800316c"
        },
        "FUN_08004828": {
            "renaming": {
                "FUN_08004828": "set_bit_to_zero_08004828",
                "param_1": "bit_position",
                "param_2": "array_of_integers",
                "uVar1": "index",
                "*(uint *)(param_2 + uVar1 * 4)": "element",
                "bit_mask": "bit_mask"
            },
            "code": "void set_bit_to_zero_08004828(uint bit_position, int *array_of_integers){\n    uint index = (bit_position << 0x18) >> 0x1c;\n    uint *element = array_of_integers + index;\n    uint bit_mask = 1 << (bit_position & 0xf);\n    *element = *element & ~bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004828",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "set_bit_to_zero_08004828"
        },
        "FUN_08003afa": {
            "renaming": {
                "FUN_08003afa": "check_input_and_calculate_result_08003afa",
                "param_1": "input_flags",
                "param_2": "input_value",
                "puVar1": "data_pointer",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "uVar4": "calculated_result",
                "DAT_08003c38": "data_pointer_global",
                "DAT_08003c34": "result_pointer",
                "PTR_DAT_08003c40": "result_pointer",
                "PTR_DAT_08003c3c": "result_pointer_shift",
                "get_value_from_pointer_08001cc4": "get_current_time",
                "calculate_result_08003a68": "calculate_result",
                "validate_and_set_input_08001c3c": "validate_and_set_input"
            },
            "code": "int check_input_and_calculate_result_08003afa(uint *input_flags, uint input_value) {\n    uint *data_pointer;\n    int start_time;\n    int current_time;\n    uint calculated_result;\n\n    if ((*input_flags & 2) != 0) {\n        data_pointer[1] = data_pointer[1] & 0xffffff0f | input_flags[2];\n    }\n\n    if ((*input_flags & 1) != 0) {\n        uint input_type = input_flags[1];\n        if (input_type == 1) {\n            if ((*data_pointer & 0x20000) == 0) {\n                return 1;\n            }\n        }\n        else if ((input_type != 2) && ((*data_pointer & 2) == 0)) {\n            return 1;\n        }\n        data_pointer[1] = input_type | data_pointer[1] & 0xfffffffc;\n        start_time = get_start_time();\n\n        if (input_type == 1) {\n            while ((data_pointer[1] & 0xc) != 4) {\n                current_time = get_current_time();\n                if (5000 < (uint)(current_time - start_time)) {\n                    return 3;\n                }\n            }\n        }\n        else if (input_type == 2) {\n            while ((data_pointer[1] & 0xc) != 8) {\n                current_time = get_current_time();\n                if (5000 < (uint)(current_time - start_time)) {\n                    return 3;\n                }\n            }\n        }\n        else {\n            while ((data_pointer[1] & 0xc) != 0) {\n                current_time = get_current_time();\n                if (5000 < (uint)(current_time - start_time)) {\n                    return 3;\n                }\n            }\n        }\n    }\n\n    data_pointer = DAT_08003c38;\n\n    if ((input_value < (*DAT_08003c38 & 7)) &&\n        (*DAT_08003c38 = *DAT_08003c38 & 0xfffffff8 | input_value, input_value != (*data_pointer & 7))) {\n        return 1;\n    }\n\n    if ((*input_flags & 4) != 0) {\n        data_pointer[1] = data_pointer[1] & 0xfffff8ff | input_flags[3];\n    }\n\n    if ((*input_flags & 8) != 0) {\n        data_pointer[1] = data_pointer[1] & 0xffffc7ff | input_flags[4] << 3;\n    }\n\n    calculated_result = calculate_result();\n    *(uint *)DAT_08003c34 = calculated_result >> PTR_DAT_08003c3c[(data_pointer[1] << 0x18) >> 0x1c];\n    validate_and_set_input(0xf);\n    return 0;\n}",
            "called": [
                "FUN_08001c3c",
                "FUN_08001cc4",
                "FUN_08003a68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003afa",
            "calling": [
                "FUN_08003ad4"
            ],
            "imported": false,
            "current_name": "check_input_and_calculate_result_08003afa"
        },
        "FUN_08004948": {
            "renaming": {
                "FUN_08004948": "get_value_type_08004948",
                "param_1": "param_value",
                "param_2": "param_values",
                "param_3": "param_count",
                "param_4": "param_4",
                "iVar1": "value_index",
                "uVar2": "value_type"
            },
            "code": "int get_value_type_08004948(int param_value, int* param_values, int param_count, int param_4) {\n  int value_index = get_param_value(param_value, param_values, param_count, param_4, param_4);\n  int value_type = (value_index << 12) >> 27;\n  if (value_type == 3) {\n    return 8;\n  }\n  if (value_type == 4) {\n    return 12;\n  }\n  if (value_type == 2) {\n    return 4;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004cce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004948",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "get_value_type_08004948"
        },
        "FUN_0800316a": {
            "renaming": {
                "FUN_0800316a": "do_nothing_0800316a"
            },
            "code": "\nvoid do_nothing_0800316a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316a",
            "calling": [
                "FUN_0800316c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800316a"
        },
        "FUN_08005b24": {
            "renaming": {
                "FUN_08005b24": "set_color_08005b24",
                "param_1": "pixel_position",
                "param_2": "color",
                "uVar1": "color_value",
                "UNRECOVERED_JUMPTABLE": "color_table"
            },
            "code": "void set_color_08005b24(int pixel_position, uint8_t color) {\n  uint8_t color_value;\n  code *color_table;\n  if (color < 0x3c) {\n    color_value = COLOR_TABLE[color];\n  }\n  else {\n    color_value = 0xff;\n  }\n  *(uint8_t *)(pixel_position + 0x12d) = color_value;\n  (*color_table)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b24",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "set_color_08005b24"
        },
        "FUN_080049f0": {
            "renaming": {
                "FUN_080049f0": "set_flags_based_on_input_080049f0",
                "param_1": "input_value",
                "iVar1": "flags_address",
                "DAT_08004a48": "flags_address",
                "*param_1": "*input_value",
                "DAT_08004a40": "first_flag_value",
                "DAT_08004a44": "second_flag_value"
            },
            "code": "void set_flags_based_on_input_080049f0(int *input_value)\n{\n  int DAT_08004a48 = DAT_08004a48;\n  int DAT_08004a40 = DAT_08004a40;\n  int DAT_08004a44 = DAT_08004a44;\n  \n  if (*input_value != DAT_08004a40) {\n    if (*input_value == DAT_08004a44) {\n      *(uint *)(DAT_08004a48 + 0xc) |= 0x400;\n      *(uint *)(DAT_08004a48 + 0xc) &= 0xfffffbff;\n      *(uint *)(DAT_08004a48 + 0x18) &= 0xfffffbff;\n      *(uint *)(DAT_08004a48 + 0x18) &= 0xfffffbff;\n    }\n    return;\n  }\n  *(uint *)(DAT_08004a48 + 0xc) |= 0x200;\n  *(uint *)(DAT_08004a48 + 0xc) &= 0xfffffdff;\n  *(uint *)(DAT_08004a48 + 0x18) &= 0xfffffdff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049f0",
            "calling": [
                "FUN_0800224c"
            ],
            "imported": false,
            "current_name": "set_flags_based_on_input_080049f0"
        },
        "FUN_08001e40": {
            "renaming": {
                "FUN_08001e40": "get_value_at_offset_0x4c_from_pointer_08001e40",
                "param_1": "pointer_to_value",
                "*param_1": "pointer_to_value",
                "undefined4": "int",
                "*(undefined4 *)(*param_1 + 0x4c)": "value"
            },
            "code": "int get_value_at_offset_0x4c_from_pointer_08001e40(int *pointer_to_value){\n  int offset = 0x4c;\n  int *value_pointer = *pointer_to_value + offset;\n  int value = *value_pointer;\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e40",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_0x4c_from_pointer_08001e40"
        },
        "FUN_08003a68": {
            "renaming": {
                "FUN_08003a68": "calculate_result_08003a68",
                "PTR_DAT_08003ac4": "stack_14",
                "DAT_08003ac8": "flags_data",
                "PTR_DAT_08003ac4 + 8": "stack_c",
                "PTR_DAT_08003ac4 + 4": "stack_10",
                "PTR_DAT_08003ac4 + 0x10": "value",
                "DAT_08003ad0": "result",
                "DAT_08003acc": "multiplication_factor",
                "abStack_18": "stack_values"
            },
            "code": "uint calculate_result_08003a68(void)\n{\n  uint DAT_08003ad0;\n  uint flags;\n  undefined2 PTR_DAT_08003ac4 + 0x10;\n  byte stack_PTR_DAT_08003ac4 + 0x10s[4];\n  undefined4 PTR_DAT_08003ac4 + 8;\n  undefined4 PTR_DAT_08003ac4 + 4;\n  undefined4 PTR_DAT_08003ac4;\n  \n  PTR_DAT_08003ac4 + 8 = *(undefined4 *)(PTR_DAT_08003ac4 + 8);\n  PTR_DAT_08003ac4 + 4 = *(undefined4 *)(PTR_DAT_08003ac4 + 4);\n  PTR_DAT_08003ac4 = *(undefined4 *)PTR_DAT_08003ac4;\n  PTR_DAT_08003ac4 + 0x10 = *(undefined2 *)(PTR_DAT_08003ac4 + 0x10);\n  flags = *(uint *)(DAT_08003ac8 + 4);\n  DAT_08003ad0 = DAT_08003ad0;\n  if ((flags & 0xc) == 8) {\n    if ((flags & 0x10000) == 0) {\n      DAT_08003ad0 = DAT_08003acc * (uint)stack_PTR_DAT_08003ac4 + 0x10s[(flags << 10) >> 0x1c];\n    }\n    else {\n      DAT_08003ad0 = (DAT_08003ad0 * stack_PTR_DAT_08003ac4 + 0x10s[(flags << 10) >> 0x1c]) /\n              (uint)*(byte *)((int)&PTR_DAT_08003ac4 + 0x10 - ((*(int *)(DAT_08003ac8 + 4) << 0xe) >> 0x1f));\n    }\n  }\n  return DAT_08003ad0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a68",
            "calling": [
                "FUN_08003afa"
            ],
            "imported": false,
            "current_name": "calculate_result_08003a68"
        },
        "FUN_080012a2": {
            "renaming": {
                "FUN_080012a2": "process_data_from_param_080012a2",
                "param_1": "param",
                "*(undefined *)(param_1 + 10)": "data",
                "process_data_08005848": "process_data"
            },
            "code": "void process_data_from_param_080012a2(int param)\n{\n  char* data = (char*)(param + 10);\n  process_data(data, 0);\n  process_data(data, 1);\n  process_data(data, 0);\n  return;\n}",
            "called": [
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012a2",
            "calling": [
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "imported": false,
            "current_name": "process_data_from_param_080012a2"
        },
        "FUN_08004c78": {
            "renaming": {
                "FUN_08004c78": "find_param_08004c78",
                "param_1": "param",
                "uVar1": "result",
                "find_param_in_string_08004c5e": "find_param_in_string"
            },
            "code": "int find_param_08004c78(int param){\n  int result;\n  if (param != -1) {\n    result = find_param_08004c78_in_string();\n    return result;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004c5e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c78",
            "calling": [
                "FUN_08004a4c",
                "FUN_08005384",
                "FUN_080053d4",
                "FUN_08004b3c",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "find_param_08004c78"
        },
        "FUN_08001e48": {
            "renaming": {
                "FUN_08001e48": "process_data_08001e48",
                "param_1": "data_ptr",
                "param_2": "data_array",
                "uVar1": "result",
                "uVar2": "array_index",
                "iVar3": "data_ptr_value",
                "local_c": "local_counter"
            },
            "code": "int process_data_08001e48(int *data_ptr, uint *data_array) {\n    int result;\n    uint array_index;\n    int data_ptr_value;\n    int local_counter;\n    \n    if (*(char *)(data_ptr + 9) == 1) {\n        result = 2;\n    }\n    else {\n        *(undefined *)(data_ptr + 9) = 1;\n        array_index = data_array[1];\n        if (array_index < 7) {\n            array_index = array_index * 5 - 5;\n            data_ptr_value = *data_ptr + 0x34;\n            *(uint *)(data_ptr_value) = data_array[0] << (array_index & 0xff) | *(uint *)(data_ptr_value) & ~(0x1f << (array_index & 0xff));\n        }\n        else if (array_index < 0xd) {\n            array_index = array_index * 5 - 0x23;\n            data_ptr_value = *data_ptr + 0x30;\n            *(uint *)(data_ptr_value) = data_array[0] << (array_index & 0xff) | *(uint *)(data_ptr_value) & ~(0x1f << (array_index & 0xff));\n        }\n        else {\n            array_index = array_index * 5 - 0x41;\n            data_ptr_value = *data_ptr + 0x2c;\n            *(uint *)(data_ptr_value) = data_array[0] << (array_index & 0xff) | *(uint *)(data_ptr_value) & ~(0x1f << (array_index & 0xff));\n        }\n        array_index = data_array[0];\n        if (array_index < 10) {\n            data_ptr_value = *data_ptr + 0x10;\n            *(uint *)(data_ptr_value) = data_array[2] << (array_index * 3 & 0xff) | *(uint *)(data_ptr_value) & ~(7 << (array_index * 3 & 0xff));\n        }\n        else {\n            array_index = array_index * 3 - 0x1e;\n            data_ptr_value = *data_ptr + 0xc;\n            *(uint *)(data_ptr_value) = data_array[2] << (array_index & 0xff) | *(uint *)(data_ptr_value) & ~(7 << (array_index & 0xff));\n        }\n        if (data_array[0] - 0x10 < 2) {\n            data_ptr_value = *data_ptr;\n            if (data_ptr_value == DAT_08001f74) {\n                if ((*(uint *)(data_ptr_value + 8) & 0x800000) == 0) {\n                    *(uint *)(data_ptr_value + 8) = *(uint *)(data_ptr_value + 8) | 0x800000;\n                    if (data_array[0] == 0x10) {\n                        for (local_counter = (uint)((ulonglong)DAT_08001f7c * (ulonglong)*(uint *)PTR_DAT_08001f78 >> 0x32) * 10; local_counter != 0; local_counter = local_counter + -1) {\n                        }\n                        result = 0;\n                    }\n                    else {\n                        result = 0;\n                    }\n                }\n                else {\n                    result = 0;\n                }\n            }\n            else {\n                data_ptr[10] = data_ptr[10] | 0x20;\n                result = 1;\n            }\n        }\n        else {\n            result = 0;\n        }\n        *(undefined *)(data_ptr + 9) = 0;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e48",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "process_data_08001e48"
        },
        "FUN_080009b8": {
            "renaming": {
                "FUN_080009b8": "validate_params_080009b8",
                "param_1": "param",
                "check_params_0800092c": "check_params"
            },
            "code": "undefined4 validate_params_080009b8(undefined4 param)\n{\n  check_params();\n  return param;\n}",
            "called": [
                "FUN_0800092c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009b8",
            "calling": [
                "FUN_080009a8",
                "FUN_080009dc",
                "FUN_080009f0",
                "FUN_080009c8"
            ],
            "imported": false,
            "current_name": "validate_params_080009b8"
        },
        "FUN_08000aa8": {
            "renaming": {
                "FUN_08000aa8": "calculate_shift_amount_08000aa8",
                "param_1": "numerator",
                "param_2": "denominator",
                "iVar1": "intermediate_result",
                "uVar2": "shift_amount"
            },
            "code": "uint calculate_shift_amount_08000aa8(uint numerator, uint denominator)\n{\n  int intermediate_result;\n  uint shift_amount;\n  \n  if ((denominator & 0x80000000) != 0) {\n    return 0;\n  }\n  intermediate_result = denominator * 2 + 0x200000;\n  if (denominator * 2 < 0xffe00000) {\n    if (-1 < intermediate_result) {\n      return 0;\n    }\n    shift_amount = -(intermediate_result >> 0x15) - 0x3e1;\n    if (-1 < (int)shift_amount) {\n      return (denominator << 0xb | 0x80000000 | numerator >> 0x15) >> (shift_amount & 0xff);\n    }\n  }\n  else if ((numerator | denominator << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aa8",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "calculate_shift_amount_08000aa8"
        },
        "FUN_08000a04": {
            "renaming": {
                "FUN_08000a04": "validate_and_return_08000a04",
                "in_ZR": "zero_register",
                "in_CY": "carry_flag"
            },
            "code": "bool validate_and_return_08000a04(void)\n{\n  undefined zero_register;\n  undefined carry_flag;\n  \n  validate_params_and_return_080009a8_080009a8();\n  return !(bool)carry_flag || (bool)zero_register;\n}",
            "called": [
                "FUN_080009a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a04",
            "calling": [
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "validate_and_return_08000a04"
        },
        "FUN_0800010c": {
            "renaming": {
                "FUN_0800010c": "is_first_call_0800010c",
                "param_1": "is_already_called",
                "PTR_DAT_08000124": "is_already_called",
                "DAT_08000128": "default_function_pointer",
                "PTR_FUN_0800012c": "default_function_pointer"
            },
            "code": "bool is_first_call_0800010c(bool *PTR_DAT_08000124, void *DAT_08000128) {\n  if (*PTR_DAT_08000124 == false) {\n    if (DAT_08000128 != NULL) {\n      DAT_08000128();\n    }\n    *PTR_DAT_08000124 = true;\n  }\n  return *PTR_DAT_08000124;\n}",
            "called": [
                "FUN_08007328"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800010c",
            "calling": [],
            "imported": false,
            "current_name": "is_first_call_0800010c"
        },
        "FUN_08003f14": {
            "renaming": {
                "FUN_08003f14": "do_nothing_08003f14"
            },
            "code": "\nvoid do_nothing_08003f14(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f14",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f14"
        },
        "FUN_08001cac": {
            "renaming": {
                "FUN_08001cac": "calculate_new_value_08001cac",
                "PTR_DAT_08001cc0": "byte_pointer",
                "PTR_DAT_08001cbc": "int_pointer"
            },
            "code": "void calculate_new_value_08001cac(void)\n{\n    uint8_t* PTR_DAT_08001cc0 = PTR_DAT_08001cc0;\n    int* PTR_DAT_08001cbc = PTR_DAT_08001cbc;\n    uint byte_value = *PTR_DAT_08001cc0;\n    uint int_value = *PTR_DAT_08001cbc;\n    uint new_value = byte_value + int_value;\n    *PTR_DAT_08001cbc = new_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cac",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": false,
            "current_name": "calculate_new_value_08001cac"
        },
        "FUN_08003f12": {
            "renaming": {
                "FUN_08003f12": "do_nothing_08003f12"
            },
            "code": "\nvoid do_nothing_08003f12(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f12",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f12"
        },
        "FUN_08005a18": {
            "renaming": {
                "FUN_08005a18": "calculate_value_if_not_zero_08005a18",
                "DAT_08005a3c": "global_value",
                "PTR_DAT_08005a40": "global_pointer",
                "calculate_value_at_offset_0800591e": "calculate_value_at_offset"
            },
            "code": "void calculate_value_if_not_zero_08005a18(void)\n{\n  if (DAT_08005a3c != 0) {\n    calculate_value_at_offset(PTR_DAT_08005a40);\n  }\n  return;\n}",
            "called": [
                "FUN_0800591e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a18",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "calculate_value_if_not_zero_08005a18"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "check_and_execute_callbacks_08003f18",
                "param_1": "ptr_param_1",
                "iVar1": "ptr_iVar1",
                "param_1 + 0x10": "ptr_param_1_plus_0x10",
                "param_1 + 0xc": "ptr_param_1_plus_0xc",
                "*(undefined4 *)(param_1 + 0x10)": "undefined4_ptr_param_1_plus_0x10",
                "*(undefined *)(param_array + 7)": "undefined_ptr_param_array_plus_7",
                "*(uint *)(*param_array + 0x18)": "uint_ptr_param_array_star_plus_0x18",
                "*(uint *)(*param_array + 0x1c)": "uint_ptr_param_array_star_plus_0x1c",
                "execute_callback_if_flag_set_08004df8": "execute_callback",
                "do_nothing_08003f14": "do_nothing_1",
                "do_nothing_08003f12": "do_nothing_2",
                "execute_subtract_four_and_call_function_pointer_08004e12": "execute_subtract_and_call",
                "do_nothing_0800417a": "do_nothing_3",
                "do_nothing_08003f16": "do_nothing_4",
                "do_nothing_08004178": "do_nothing_5",
                "param_array": "ptr_param_array"
            },
            "code": "void check_and_execute_callbacks_08003f18(int *param_array)\n{\n  int param_1 = *param_array;\n  \n  if (((*(uint *)(param_1 + 0x10) & 2) != 0) && ((*(uint *)(param_1 + 0xc) & 2) != 0)) {\n    *(undefined4 *)(param_1 + 0x10) = 0xfffffffd;\n    *(undefined *)(param_array + 7) = 1;\n    if ((*(uint *)(*param_array + 0x18) & 3) == 0) {\n      execute_callback_if_flag_set_08004df8();\n      do_nothing_08003f14(param_array);\n    }\n    else {\n      do_nothing_08003f12();\n    }\n    *(undefined *)(param_array + 7) = 0;\n  }\n  param_1 = *param_array;\n  if (((*(uint *)(param_1 + 0x10) & 4) != 0) && ((*(uint *)(param_1 + 0xc) & 4) != 0)) {\n    *(undefined4 *)(param_1 + 0x10) = 0xfffffffb;\n    *(undefined *)(param_array + 7) = 2;\n    if ((*(uint *)(*param_array + 0x18) & 0x300) == 0) {\n      execute_callback_if_flag_set_08004df8(param_array);\n      do_nothing_08003f14(param_array);\n    }\n    else {\n      do_nothing_08003f12(param_array);\n    }\n    *(undefined *)(param_array + 7) = 0;\n  }\n  param_1 = *param_array;\n  if (((*(uint *)(param_1 + 0x10) & 8) != 0) && ((*(uint *)(param_1 + 0xc) & 8) != 0)) {\n    *(undefined4 *)(param_1 + 0x10) = 0xfffffff7;\n    *(undefined *)(param_array + 7) = 4;\n    if ((*(uint *)(*param_array + 0x1c) & 3) == 0) {\n      execute_callback_if_flag_set_08004df8(param_array);\n      do_nothing_08003f14(param_array);\n    }\n    else {\n      do_nothing_08003f12(param_array);\n    }\n    *(undefined *)(param_array + 7) = 0;\n  }\n  param_1 = *param_array;\n  if (((*(uint *)(param_1 + 0x10) & 0x10) != 0) && ((*(uint *)(param_1 + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(param_1 + 0x10) = 0xffffffef;\n    *(undefined *)(param_array + 7) = 8;\n    if ((*(uint *)(*param_array + 0x1c) & 0x300) == 0) {\n      execute_callback_if_flag_set_08004df8(param_array);\n      do_nothing_08003f14(param_array);\n    }\n    else {\n      do_nothing_08003f12(param_array);\n    }\n    *(undefined *)(param_array + 7) = 0;\n  }\n  param_1 = *param_array;\n  if (((*(uint *)(param_1 + 0x10) & 1) != 0) && ((*(uint *)(param_1 + 0xc) & 1) != 0)) {\n    *(undefined4 *)(param_1 + 0x10) = 0xfffffffe;\n    execute_subtract_four_and_call_function_pointer_08004e12(param_array);\n  }\n  param_1 = *param_array;\n  if (((*(uint *)(param_1 + 0x10) & 0x80) != 0) && ((*(uint *)(param_1 + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(param_1 + 0x10) = 0xffffff7f;\n    do_nothing_0800417a(param_array);\n  }\n  param_1 = *param_array;\n  if (((*(uint *)(param_1 + 0x10) & 0x40) != 0) && ((*(uint *)(param_1 + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(param_1 + 0x10) = 0xffffffbf;\n    do_nothing_08003f16(param_array);\n  }\n  param_1 = *param_array;\n  if (((*(uint *)(param_1 + 0x10) & 0x20) != 0) && ((*(uint *)(param_1 + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(param_1 + 0x10) = 0xffffffdf;\n    do_nothing_08004178(param_array);\n  }\n  return;\n}",
            "called": [
                "FUN_08003f12",
                "FUN_0800417a",
                "FUN_08004df8",
                "FUN_08003f14",
                "FUN_08004e12",
                "FUN_08004178",
                "FUN_08003f16"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "FUN_08004e20"
            ],
            "imported": false,
            "current_name": "check_and_execute_callbacks_08003f18"
        },
        "FUN_08003f16": {
            "renaming": {
                "FUN_08003f16": "do_nothing_08003f16"
            },
            "code": "\nvoid do_nothing_08003f16(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f16",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f16"
        },
        "FUN_0800591e": {
            "renaming": {
                "FUN_0800591e": "calculate_value_at_offset_0800591e",
                "param_1": "base_address",
                "*(short *)(param_1 + 0x134)": "offset_1",
                "*(short *)(param_1 + 0x136)": "offset_2",
                "result": "result"
            },
            "code": "ushort calculate_value_at_offset_0800591e(int base_address)\n{\n    ushort offset_1 = *(ushort *)(base_address + 0x134);\n    ushort offset_2 = *(ushort *)(base_address + 0x136);\n    ushort result = (offset_1 + 0x40) - offset_2 & 0x3f;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800591e",
            "calling": [
                "FUN_08005a18"
            ],
            "imported": false,
            "current_name": "calculate_value_at_offset_0800591e"
        },
        "FUN_08002540": {
            "renaming": {
                "FUN_08002540": "set_bit_in_array_08002540",
                "param_1": "bit_index",
                "PTR_DAT_0800255c": "array_start_ptr",
                "DAT_0800255c": "array_start"
            },
            "code": "void set_bit_in_array_08002540(uint bit_index) {\n  if (bit_index >= 0) {\n    int array_index = (bit_index >> 5) + 0x60;\n    int* array_ptr = (int*)(DAT_0800255c + array_index * 4);\n    int bit_offset = bit_index & 0x1f;\n    *array_ptr = 1 << bit_offset;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002540",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_in_array_08002540"
        },
        "FUN_08006344": {
            "renaming": {
                "FUN_08006344": "process_input_08006344",
                "param_1": "input_length",
                "param_2": "input_byte",
                "param_3": "input_buffer",
                "iVar1": "buffer_offset",
                "pbVar2": "buffer_ptr_1",
                "pbVar3": "buffer_ptr_2",
                "uVar4": "input_byte_as_uint"
            },
            "code": "uint process_input_08006344(int input_length, byte input_byte, byte **input_buffer) {\n  int buffer_offset;\n  byte *buffer_ptr_1;\n  byte *buffer_ptr_2;\n  uint input_byte_as_uint;\n\n  buffer_ptr_1 = *(input_buffer);\n  *(input_buffer) = buffer_ptr_1 + 1;\n  *buffer_ptr_1 = input_byte;\n  buffer_offset = *(input_buffer + 2) + -1;\n  *(input_buffer + 2) = buffer_offset;\n  if ((-1 < buffer_offset) || (((int)*(input_buffer + 6) <= buffer_offset) && ((input_byte_as_uint = (uint)input_byte) != 10))) {\n    return input_byte_as_uint;\n  }\n  if ((input_length != 0) && (*(int *)(input_length + 0x18) == 0)) {\n    initialize_data_08006cb4();\n  }\n  if (input_buffer == (byte **)PTR_DAT_080069d8) {\n    input_buffer = *(byte ***)(input_length + 4);\n  } else if (input_buffer == (byte **)PTR_DAT_080069dc) {\n    input_buffer = *(byte ***)(input_length + 8);\n  } else if (input_buffer == (byte **)PTR_DAT_080069e0) {\n    input_buffer = *(byte ***)(input_length + 0xc);\n  }\n  *(input_buffer + 2) = *(input_buffer + 6);\n  buffer_ptr_2 = (byte *)(uint)*(ushort *)(input_buffer + 3);\n  buffer_offset = (int)buffer_ptr_2 << 0x1c;\n  if (((buffer_offset < 0) && ((buffer_ptr_2 = *(input_buffer + 4)) != (byte *)0x0)) || ((buffer_offset = check_validity_and_allocate_memory_080069e4(input_length, input_buffer, buffer_offset, buffer_ptr_2, buffer_ptr_1)), buffer_offset == 0)) {\n    buffer_offset = (int)*(input_buffer) - (int)*(input_buffer + 4);\n    if ((buffer_offset < (int)*(input_buffer + 5)) || ((buffer_offset = process_input_08006344_08006be0(input_length, input_buffer)), buffer_offset == 0)) {\n      *(input_buffer + 2) = *(input_buffer + 2) + -1;\n      buffer_ptr_1 = *(input_buffer);\n      *(input_buffer) = buffer_ptr_1 + 1;\n      *buffer_ptr_1 = input_byte;\n      if ((byte *)(buffer_offset + 1) != *(input_buffer + 5)) {\n        if (-1 < (int)((uint)*(ushort *)(input_buffer + 3) << 0x1f)) {\n          return input_byte_as_uint;\n        }\n        if (input_byte_as_uint != 10) {\n          return input_byte_as_uint;\n        }\n      }\n      buffer_offset = process_input_08006344_08006be0(input_length, input_buffer);\n      if (buffer_offset == 0) {\n        return input_byte_as_uint;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "FUN_080069e4",
                "FUN_08006be0",
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006344",
            "calling": [
                "FUN_08006370"
            ],
            "imported": false,
            "current_name": "process_input_08006344"
        },
        "FUN_080009c8": {
            "renaming": {
                "FUN_080009c8": "validate_input_params_080009c8",
                "in_ZR": "input_char",
                "validate_params_080009b8": "validate_params"
            },
            "code": "bool validate_input_params_080009c8(void)\n{\n  char input_char;\n  validate_params();\n  return input_char != '\\0';\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "validate_input_params_080009c8"
        },
        "FUN_08002db2": {
            "renaming": {
                "FUN_08002db2": "process_data_08002db2",
                "param_1": "data",
                "cVar1": "current_char",
                "puVar2": "pointer_1"
            },
            "code": "uint32_t process_data_08002db2(uint32_t **data)\n{\n    char current_char = *(char *)((int)data + 0x3d);\n    uint32_t *pointer_1 = data[0xb];\n    if ((*(short *)(data + 10) == 0) && (current_char == '!')) {\n        if ((pointer_1 == (uint32_t *)0x4) || ((pointer_1 == (uint32_t *)0x8 || (pointer_1 == (uint32_t *)0xffff0000)))) {\n            (*data)[1] = (*data)[1] & 0xfffff8ff;\n            **data = **data | 0x200;\n            data[0xc] = (uint32_t *)0x0;\n            *(undefined *)((int)data + 0x3d) = 0x20;\n            if (*(char *)((int)data + 0x3e) == '@') {\n                *(undefined *)((int)data + 0x3e) = 0;\n                do_nothing_08002db0();\n            }\n            else {\n                *(undefined *)((int)data + 0x3e) = 0;\n                do_nothing_08002c4e();\n            }\n        }\n        else {\n            (*data)[1] = (*data)[1] & 0xfffff8ff;\n            data[0xc] = (uint32_t *)0x11;\n            *(undefined *)((int)data + 0x3e) = 0;\n            *(undefined *)((int)data + 0x3d) = 0x20;\n            do_nothing_08002c4e();\n        }\n    }\n    else if ((current_char == '!') || ((*(char *)((int)data + 0x3e) == '@' && (current_char == '\"')))) {\n        if (*(short *)((int)data + 0x2a) == 0) {\n            (*data)[1] = (*data)[1] & 0xfffffbff;\n        }\n        else if (*(char *)((int)data + 0x3e) == '@') {\n            if (data[0x14] == (uint32_t *)0x0) {\n                if (data[0x13] == (uint32_t *)0x1) {\n                    (*data)[4] = (uint32_t)data[0x12] & 0xff;\n                    data[0x14] = (uint32_t *)((int)data[0x14] + 2);\n                }\n                else {\n                    (*data)[4] = (uint32_t)((int)data[0x12] << 0x10) >> 0x18;\n                    data[0x14] = (uint32_t *)((int)data[0x14] + 1);\n                }\n            }\n            else if (data[0x14] == (uint32_t *)0x1) {\n                (*data)[4] = (uint32_t)data[0x12] & 0xff;\n                data[0x14] = (uint32_t *)((int)data[0x14] + 1);\n            }\n            else if (data[0x14] == (uint32_t *)0x2) {\n                if (*(char *)((int)data + 0x3d) == '\"') {\n                    **data = **data | 0x100;\n                }\n                else if (*(char *)((int)data + 0x3d) == '!') {\n                    uint32_t *pointer_9 = data[9];\n                    data[9] = (uint32_t *)((int)pointer_9 + 1);\n                    (*data)[4] = (uint32_t)*(byte *)pointer_9;\n                    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                }\n            }\n        }\n        else {\n            uint32_t *pointer_9 = data[9];\n            data[9] = (uint32_t *)((int)pointer_9 + 1);\n            (*data)[4] = (uint32_t)*(byte *)pointer_9;\n            *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_08002c4e",
                "FUN_08002db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_data_08002db2"
        },
        "FUN_08001cc4": {
            "renaming": {
                "FUN_08001cc4": "get_value_from_pointer_08001cc4",
                "PTR_DAT_08001ccc": "pointer_to_value",
                "*": "value"
            },
            "code": "int get_value_from_pointer_08001cc4() {\n    int* PTR_DAT_08001ccc = PTR_DAT_08001ccc;\n    int value = *PTR_DAT_08001ccc;\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cc4",
            "calling": [
                "FUN_08003c90",
                "FUN_080053d4",
                "FUN_08004b94",
                "FUN_08003688",
                "FUN_08001cd0",
                "FUN_08003afa",
                "FUN_08004478",
                "FUN_080043b4",
                "FUN_080020f0",
                "FUN_08001f84",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08001cc4"
        },
        "FUN_08002db0": {
            "renaming": {
                "FUN_08002db0": "do_nothing_08002db0"
            },
            "code": "\nvoid do_nothing_08002db0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db0",
            "calling": [
                "FUN_08002efc",
                "FUN_08002db2"
            ],
            "imported": false,
            "current_name": "do_nothing_08002db0"
        },
        "FUN_08003ea0": {
            "renaming": {
                "FUN_08003ea0": "execute_function_if_both_flags_set_08003ea0",
                "param_1": "parameters",
                "**param_1": "flag1",
                "(*param_1)[1]": "flag2"
            },
            "code": "void execute_function_if_both_flags_set_08003ea0(uint **parameters)\n{\n  uint flag1 = **parameters;\n  uint flag2 = (*parameters)[1];\n  if ((flag1 & 2) && (flag2 & 2)) \n  {\n    execute_function_if_not_null_08004d18();\n    (*parameters)[1] = 0xfffffffd;\n  }\n  *(uint *)(DAT_08003ed4 + 0x14) = 0x20000;\n  *(uchar *)((int)parameters + 0x11) = 1;\n  return;\n}",
            "called": [
                "FUN_08004d18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ea0",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_if_both_flags_set_08003ea0"
        },
        "FUN_0800306c": {
            "renaming": {
                "FUN_0800306c": "process_data_0800306c",
                "param_1": "data_array",
                "puVar1": "current_data",
                "puVar2": "data_ptr",
                "(int)param_1 + 0x2a": "data_length",
                "(char)(*param_1)[4]": "data_char",
                "(uint *)((int)puVar1 + 1)": "data_ptr_next",
                "(undefined *)((int)param_1 + 0x3d)": "undefined_1",
                "(uint *)0x0": "uint_0",
                "(char *)((int)param_1 + 0x3e)": "char_ptr"
            },
            "code": "int process_data_0800306c(uint **data_array) {\n    uint *current_data = data_array[0xb];\n    int data_length = *(short *)((int)data_array + 0x2a);\n\n    if (data_length == 3) {\n        if (((current_data == (uint *)0x4) || (current_data == (uint *)0x8)) || (current_data == (uint *)0xffff0000)) {\n            **data_array = **data_array & 0xfffffbff;\n        }\n\n        uint *data_ptr = data_array[9];\n        data_array[9] = (uint *)((int)data_ptr + 1);\n        *(char *)data_ptr = (char)(*data_array)[4];\n        *(short *)((int)data_array + 0x2a) = data_length - 1;\n    }\n    else if (data_length == 2) {\n        if (((current_data == (uint *)0x4) || (current_data == (uint *)0x8)) || (current_data == (uint *)0xffff0000)) {\n            (*data_array)[1] = (*data_array)[1] & 0xfffffcff;\n            **data_array = **data_array | 0x200;\n        }\n        else {\n            if (current_data == (uint *)0x2) {\n                **data_array = **data_array | 0x400;\n            }\n            else {\n                **data_array = **data_array & 0xfffffbff;\n            }\n            (*data_array)[1] = (*data_array)[1] & 0xfffffcff;\n        }\n\n        uint *data_ptr = data_array[9];\n        data_array[9] = (uint *)((int)data_ptr + 1);\n        *(char *)data_ptr = (char)(*data_array)[4];\n        *(short *)((int)data_array + 0x2a) = data_length - 1;\n        data_ptr = data_array[9];\n        data_array[9] = (uint *)((int)data_ptr + 1);\n        *(char *)data_ptr = (char)(*data_array)[4];\n        *(short *)((int)data_array + 0x2a) = data_length - 2;\n        *(undefined *)((int)data_array + 0x3d) = 0x20;\n        data_array[0xc] = (uint *)0x0;\n        if (*(char *)((int)data_array + 0x3e) == '@') {\n            *(undefined *)((int)data_array + 0x3e) = 0;\n            do_nothing_08002f9a();\n        }\n        else {\n            *(undefined *)((int)data_array + 0x3e) = 0;\n            do_nothing_08002c50();\n        }\n    }\n    else {\n        uint *data_ptr = data_array[9];\n        data_array[9] = (uint *)((int)data_ptr + 1);\n        *(char *)data_ptr = (char)(*data_array)[4];\n        *(short *)((int)data_array + 0x2a) = data_length - 1;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08002c50",
                "FUN_08002f9a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800306c",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_data_0800306c"
        },
        "FUN_0800548c": {
            "renaming": {
                "FUN_0800548c": "is_combination_valid_0800548c",
                "param_1": "index",
                "uVar1": "combined_bytes",
                "PTR_DAT_080054ac": "address_ptr",
                "byte": "index_byte",
                "combine_bytes_080047e8": "combine_bytes"
            },
            "code": "bool is_combination_valid_0800548c(int index)\n{\n  uint16_t combined_bytes = combine_bytes(get_address_from_index(index));\n  return (combined_bytes & 0x22) == 0x22;\n}",
            "called": [
                "FUN_080047e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800548c",
            "calling": [
                "FUN_080054d4",
                "FUN_08005510"
            ],
            "imported": false,
            "current_name": "is_combination_valid_0800548c"
        },
        "FUN_08004848": {
            "renaming": {
                "FUN_08004848": "get_data_by_index_08004848",
                "param_1": "index",
                "DAT_08004870": "data_0",
                "DAT_08004880": "data_1",
                "DAT_08004874": "data_2",
                "DAT_08004878": "data_3",
                "DAT_0800487c": "data_4"
            },
            "code": "int get_data_by_index_08004848(int index) {\n    switch(index) {\n        case 0:\n            return DAT_08004870;\n        case 1:\n            return DAT_08004880;\n        case 2:\n            return DAT_08004874;\n        case 3:\n            return DAT_08004878;\n        case 4:\n            return DAT_0800487c;\n        default:\n            return 0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004848",
            "calling": [
                "FUN_08005890",
                "FUN_08005848"
            ],
            "imported": false,
            "current_name": "get_data_by_index_08004848"
        },
        "FUN_08005d82": {
            "renaming": {
                "FUN_08005d82": "convert_base_and_return_08005d82",
                "convert_base_08005d42": "convert_base"
            },
            "code": "void convert_base_and_return_08005d82(void)\n{\n  convert_base();\n  return;\n}",
            "called": [
                "FUN_08005d42"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d82",
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "convert_base_and_return_08005d82"
        },
        "FUN_08006f92": {
            "renaming": {
                "FUN_08006f92": "check_and_update_return_value_08006f92",
                "param_1": "file_descriptor",
                "param_2": "buffer_address",
                "iVar1": "return_value",
                "uVar2": "updated_flag",
                "bVar3": "is_return_value_negative"
            },
            "code": "void check_and_update_return_value_08006f92(undefined4 file_descriptor, int buffer_address)\n{\n  int return_value = check_return_value(file_descriptor, (int)*(short *)(buffer_address + 0xe));\n  bool is_return_value_negative = return_value == -1;\n  ushort updated_flag;\n  if (is_return_value_negative) {\n    updated_flag = *(ushort *)(buffer_address + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(buffer_address + 0x54) = return_value;\n    updated_flag = *(ushort *)(buffer_address + 0xc) | 0x1000;\n  }\n  *(ushort *)(buffer_address + 0xc) = updated_flag;\n}\n",
            "called": [
                "FUN_08007048"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f92",
            "calling": [],
            "imported": false,
            "current_name": "check_and_update_return_value_08006f92"
        },
        "FUN_080012c0": {
            "renaming": {
                "FUN_080012c0": "process_data_and_param_080012c0",
                "param_1": "data_ptr",
                "param_2": "param_val",
                "uVar1": "index",
                "process_data_08005848": "process_data",
                "process_data_from_param_080012a2": "process_data_from_param"
            },
            "code": "void process_data_and_param_080012c0(int data_ptr,int param_val)\n{\n  uint index;\n  for (index = 0; (int)index < 4; index++)\n  {\n    process_data(data_ptr + index + 0xb, param_val >> (index & 0xff) & 1);\n  }\n  process_data_from_param(data_ptr);\n  return;\n}",
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012c0",
            "calling": [
                "FUN_08001310",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "process_data_and_param_080012c0"
        },
        "FUN_08001f80": {
            "renaming": {
                "FUN_08001f80": "get_value_at_offset_08001f80",
                "param_1": "base_address",
                "PTR_": "pointer_",
                "DAT_": "data_"
            },
            "code": "int get_value_at_offset_08001f80(int base_address, int offset) {\n\treturn *(int *)(base_address + offset);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f80",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08001f80"
        },
        "FUN_08001f84": {
            "renaming": {
                "FUN_08001f84": "set_flag_and_check_08001f84",
                "param_1": "ptr",
                "param_2": "value",
                "iVar1": "current_value",
                "iVar3": "ptr_value",
                "local_14": "i",
                "DAT_08002000": "DATA_CONSTANT",
                "PTR_DAT_08001ffc": "PTR_CONSTANT"
            },
            "code": "int set_flag_and_check_08001f84(int *ptr, uint value) {\n  int ptr_value = *ptr;\n  if ((*(uint *)(ptr_value + 8) & 1) == 0) {\n    *(uint *)(ptr_value + 8) = *(uint *)(ptr_value + 8) | 1;\n    for (uint i = (uint)((ulonglong)DAT_08002000 * (ulonglong)*(uint *)PTR_DAT_08001ffc >> 0x32); i != 0; i--) {\n    }\n    int result = get_value_from_pointer(PTR_DAT_08001ffc, value, (int)((ulonglong)DAT_08002000 * (ulonglong)*(uint *)PTR_DAT_08001ffc));\n    do {\n      if ((*(uint *)(*ptr + 8) & 1) != 0) {\n        return 0;\n      }\n      int current_value = get_value_from_pointer(PTR_DAT_08001ffc);\n    } while ((uint)(current_value - result) < 3);\n    ptr[10] = ptr[10] | 0x10;\n    ptr[0xb] = ptr[0xb] | 1;\n    *(undefined *)(ptr + 9) = 0;\n    return 1;\n  }\n  else {\n    return 0;\n  }\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f84",
            "calling": [
                "FUN_08002004",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "set_flag_and_check_08001f84"
        },
        "FUN_08000bcc": {
            "renaming": {
                "FUN_08000bcc": "process_oven_data_08000bcc",
                "puVar1": "oven_data_ptr_1",
                "puVar2": "oven_data_ptr_2",
                "puVar3": "oven_data_ptr_3",
                "uVar4": "var_1",
                "PTR_DAT_08000c90": "oven_data_ptr_1",
                "PTR_DAT_08000c94": "oven_data_ptr_2",
                "PTR_DAT_08000c98": "oven_data_ptr_3",
                "PTR_DAT_08000c9c": "oven_data_ptr_4"
            },
            "code": "void process_oven_data_08000bcc(void)\n{\n  undefined *PTR_DAT_08000c90 = PTR_DAT_08000c90;\n  process_data( *(undefined4 *)PTR_DAT_08000c90,0);\n  process_bit_array( *(undefined4 *)PTR_DAT_08000c90,1);\n  undefined *PTR_DAT_08000c94 = PTR_DAT_08000c94;\n  process_data( *(undefined4 *)PTR_DAT_08000c94,0);\n  process_bit_array( *(undefined4 *)PTR_DAT_08000c94,1);\n  undefined *PTR_DAT_08000c98 = PTR_DAT_08000c98;\n  process_data( *(undefined4 *)PTR_DAT_08000c98,0);\n  process_bit_array( *(undefined4 *)PTR_DAT_08000c98,1);\n  process_data( *(undefined4 *)PTR_DAT_08000c94,1);\n  undefined *PTR_DAT_08000c9c = PTR_DAT_08000c9c;\n  process_data_with_parameters(PTR_DAT_08000c9c,8,2,0);\n  process_and_execute_data(PTR_DAT_08000c9c,0,PTR_DAT_08000ca0);\n  process_data_wrapper(PTR_DAT_08000c9c);\n  process_string(PTR_DAT_08000c9c,PTR_s_Reflow_08000ca4);\n  process_data(PTR_DAT_08000c9c,0,1);\n  process_string(PTR_DAT_08000c9c,PTR_s_Oven_1_2_08000ca8);\n  process_data( *(undefined4 *)PTR_DAT_08000c90,0);\n  do_nothing(0x9c4);\n  process_data_wrapper(PTR_DAT_08000c9c);\n  set_parameters(PTR_DAT_08000cac,0xe100,6);\n  process_data( *(undefined4 *)PTR_DAT_08000c98,1);\n  *(undefined4 *)PTR_DAT_08000cb0 = 2000;\n  undefined4 var_1 = get_value_and_return_wrapper();\n  *(undefined4 *)PTR_DAT_08000cb4 = var_1;\n  undefined4 var_2 = get_value_and_return_wrapper();\n  *(undefined4 *)PTR_DAT_08000cb8 = var_2;\n  execute_system_call(0);\n  return;\n}",
            "called": [
                "FUN_08005848",
                "FUN_08001550",
                "FUN_080058e8",
                "FUN_08001366",
                "FUN_08005a68",
                "FUN_0800135a",
                "FUN_080058e0",
                "FUN_080057b4",
                "FUN_080013a4",
                "FUN_08005c96",
                "FUN_08000aec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000bcc",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "process_oven_data_08000bcc"
        },
        "FUN_0800281e": {
            "renaming": {
                "FUN_0800281e": "set_value_at_offset_0800281e",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "offset",
                "*(int *)(param_1 + 0x10)": "*(int *)(base_address + 0x10)"
            },
            "code": "void set_value_at_offset_0800281e(int base_address, int value, int offset) {\n  if (offset == 0) {\n    *(int *)(base_address + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(base_address + 0x10) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800281e",
            "calling": [
                "FUN_08004c30"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_0800281e"
        },
        "FUN_08006198": {
            "renaming": {
                "FUN_08006198": "execute_functions_08006198"
            },
            "code": "void execute_functions_08006198(void)\n{\n  undefined *function_ptr_array = PTR_DAT_080061d0;\n  int function_ptr_array_size = (int)PTR_DAT_080061d4 - (int)PTR_DAT_080061d0;\n  for (int i = 0; i < function_ptr_array_size / 4; i++) {\n    (**(code **)(function_ptr_array + i * 4))();\n  }\n  do_nothing_08007328();\n  function_ptr_array = PTR_DAT_080061d8;\n  function_ptr_array_size = (int)PTR_DAT_080061dc - (int)PTR_DAT_080061d8;\n  for (int i = 0; i < function_ptr_array_size / 4; i++) {\n    (**(code **)(function_ptr_array + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_08007328",
                "FUN_08005f5e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006198",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": false,
            "current_name": "execute_functions_08006198"
        },
        "FUN_08007048": {
            "renaming": {
                "FUN_08007048": "check_return_value_08007048",
                "param_1": "output",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "ptr",
                "iVar2": "return_value"
            },
            "code": "void check_return_value_08007048(int *output, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n  undefined *ptr = PTR_DAT_08007068;\n  *(undefined4 *)PTR_DAT_08007068 = 0;\n  int return_value = return_zero_08005728(arg1, arg2, arg3, arg3, arg3);\n  if ((return_value == -1) && (*(int *)ptr != 0)) {\n    *output = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08005728"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007048",
            "calling": [
                "FUN_08006f5a",
                "FUN_08006f92"
            ],
            "imported": false,
            "current_name": "check_return_value_08007048"
        },
        "FUN_08003c50": {
            "renaming": {
                "FUN_08003c50": "get_shifted_value_from_pointer_08003c50",
                "uVar1": "value",
                "get_value_from_pointer_08003c44": "get_value_from_pointer",
                "PTR_DAT_08003c6c": "shift_amount_array",
                "DAT_08003c68": "pointer_to_data"
            },
            "code": "uint get_shifted_value_from_pointer_08003c50(void)\n{\n  uint value = get_value_from_pointer();\n  uint shift_amount = PTR_DAT_08003c6c[(uint)(*(int *)(DAT_08003c68 + 4) << 0x15) >> 0x1d];\n  return value >> shift_amount;\n}",
            "called": [
                "FUN_08003c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c50",
            "calling": [
                "FUN_08004204"
            ],
            "imported": false,
            "current_name": "get_shifted_value_from_pointer_08003c50"
        },
        "FUN_080065c0": {
            "renaming": {
                "FUN_080065c0": "encode_string_080065c0",
                "param_1": "input",
                "param_2": "output_start",
                "param_3": "output_end",
                "param_4": "unknown",
                "param_5": "callback_func",
                "iVar1": "callback_result",
                "uVar2": "max_output_length",
                "uVar3": "output_length",
                "bVar4": "is_output_offset_valid",
                "output_position": "output_offset",
                "output_length": "output_offset_length",
                "output_offset": "output_offset_position",
                "output_max_length": "max_output_remaining_length",
                "output_remaining_length": "output_remaining_length"
            },
            "code": "int encode_string_080065c0(int input, uint *output_start, uint *output_end, int unknown, code *callback_func){\n    int i;\n    uint max_output_length = output_start[4];\n    if ((int)output_start[4] < (int)output_start[2]) {\n        max_output_length = output_start[2];\n    }\n    *output_end = max_output_length;\n    if (*(char *)((int)output_start + 0x43) != \"\\0\") {\n        *output_end = max_output_length + 1;\n    }\n    if ((int)(*output_start << 0x1a) < 0) {\n        *output_end = *output_end + 2;\n    }\n    uint output_position = *output_start & 6;\n    if (output_position == 0) {\n        for (; (int)output_position < (int)(output_start[3] - *output_end); output_position = output_position + 1) {\n            i = (*callback_func)(input, unknown, (int)output_start + 0x19, 1);\n            if (i == -1) {\n                return 0xffffffff;\n            }\n        }\n    }\n    uint output_length = (uint)*(byte *)((int)output_start + 0x43);\n    if (output_length != 0) {\n        output_length = 1;\n    }\n    uint output_offset = output_length;\n    if ((int)(*output_start << 0x1a) < 0) {\n        *(undefined *)((int)output_start + output_length + 0x43) = 0x30;\n        output_offset = output_length + 2;\n        *(undefined *)((int)output_start + output_length + 0x44) = *(undefined *)((int)output_start + 0x45);\n    }\n    i = (*callback_func)(input, unknown, (int)output_start + 0x43, output_offset);\n    if (i != -1) {\n        uint output_max_length = output_start[3];\n        bool is_output_offset_valid = (*output_start & 6) != 4;\n        if (is_output_offset_valid) {\n            output_max_length = 0;\n        }\n        uint output_remaining_length = 0;\n        if (!is_output_offset_valid) {\n            output_max_length = output_max_length - *output_end;\n        }\n        if (!is_output_offset_valid) {\n            output_max_length = output_max_length & ~((int)output_max_length >> 0x1f);\n        }\n        if ((int)output_start[4] < (int)output_start[2]) {\n            output_max_length = output_max_length + (output_start[2] - output_start[4]);\n        }\n        while( true ) {\n            if (output_max_length == output_remaining_length) {\n                return 0;\n            }\n            i = (*callback_func)(input, unknown, (int)output_start + 0x1a, 1);\n            if (i == -1) break;\n            output_remaining_length = output_remaining_length + 1;\n        }\n    }\n    return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080065c0",
            "calling": [
                "FUN_080066b0"
            ],
            "imported": false,
            "current_name": "encode_string_080065c0"
        },
        "FUN_080054d4": {
            "renaming": {
                "FUN_080054d4": "check_combination_080054d4",
                "param_1": "combination_length",
                "param_2": "combination",
                "param_3": "ptr_data",
                "param_4": "validation_data",
                "iVar1": "is_valid"
            },
            "code": "int check_combination_080054d4(int combination_length, char *combination, int ptr_data, int validation_data) {\n    if (combination_length == 0) {\n        return -1;\n    }\n    int is_valid = is_combination_valid(ptr_data);\n    if (is_valid == 0) {\n        *combination = *(char *)(combination_length + 0x45);\n        validate_input(*(int *)(PTR_DAT_0800550c + (uint)*(byte *)(combination_length + 0x44) * 4), combination_length + 0x45, 1, PTR_DAT_0800550c, validation_data);\n        return 0;\n    }\n    return -1;\n}",
            "called": [
                "FUN_080045a2",
                "FUN_0800548c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054d4",
            "calling": [
                "FUN_0800598a"
            ],
            "imported": false,
            "current_name": "check_combination_080054d4"
        },
        "FUN_08004d40": {
            "renaming": {
                "FUN_08004d40": "waitForInput_08004d40"
            },
            "code": "void waitForInput_08004d40(void)\n{\n  while(true)\n  {\n    //Do nothing block with infinite loop\n  }\n}",
            "called": [
                "FUN_08004d40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d40",
            "calling": [
                "FUN_08004d40",
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "waitForInput_08004d40"
        },
        "FUN_08004d44": {
            "renaming": {
                "FUN_08004d44": "initialize_flags_08004d44",
                "puVar1": "flag_ptr",
                "DAT_08004d84": "flag_array",
                "DAT_08004d88": "flag_value_1",
                "DAT_08004d8c": "flag_value_3",
                "MASK_1": "0xff80ffff",
                "MASK_2": "0x7f0000",
                "MASK_3": "0xfef6ffff",
                "MASK_4": "0xfffbffff",
                "MASK_5": "0xff80ffff",
                "FLAG_VALUE_2": "0x9f0000",
                "FLAG_VALUE_3": "0x8000000"
            },
            "code": "void initialize_flags_08004d44(void)\n{\n  uint *flag_ptr;\n  flag_ptr = DAT_08004d84;\n  *DAT_08004d84 = *DAT_08004d84 | 1;\n  flag_ptr[1] = (DAT_08004d84[1] & MASK_1) | (DAT_08004d88 & MASK_2);\n  *flag_ptr = *flag_ptr & MASK_3;\n  *flag_ptr = *flag_ptr & MASK_4;\n  flag_ptr[1] = flag_ptr[1] & MASK_5;\n  flag_ptr[2] = FLAG_VALUE_2;\n  *(undefined4 *)(DAT_08004d84 + 8) = FLAG_VALUE_3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d44",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": false,
            "current_name": "initialize_flags_08004d44"
        },
        "FUN_0800282c": {
            "renaming": {
                "FUN_0800282c": "update_param_and_check_response_0800282c",
                "param_1": "new_param",
                "PTR_DAT_08002844": "data_ptr"
            },
            "code": "void update_param_and_check_response_0800282c(uint new_param)\n{\n  uint* PTR_DAT_08002844 = (uint*)(DAT_08002844 + 0x14);\n  if ((*PTR_DAT_08002844 & new_param) != 0) {\n    *PTR_DAT_08002844 = new_param;\n    check_response_and_process_if_needed_080060e4();\n  }\n  return;\n}",
            "called": [
                "FUN_080060e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800282c",
            "calling": [],
            "imported": false,
            "current_name": "update_param_and_check_response_0800282c"
        },
        "FUN_080015b2": {
            "renaming": {
                "FUN_080015b2": "check_valid_parameters_080015b2",
                "param_1": "parameters",
                "uVar2": "i",
                "uVar3": "valid_parameters",
                "process_data_08005848": "process_data",
                "iVar1": "is_valid",
                "check_if_parameter_is_valid_08005890": "check_if_parameter_is_valid"
            },
            "code": "uint check_valid_parameters_080015b2(undefined *parameters)\n{\n  int is_valid;\n  uint valid_parameters = 0;\n  process_data(parameters[1],0);\n  for (uint i = 31; i != 0; i--) {\n    process_data(parameters[2],1);\n    is_valid = check_if_parameter_is_valid(*parameters);\n    if (is_valid != 0) {\n      valid_parameters |= 1 << (i & 0xff);\n    }\n    process_data(parameters[2],0);\n  }\n  process_data(parameters[1],1);\n  return valid_parameters;\n}",
            "called": [
                "FUN_08005890",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b2",
            "calling": [
                "FUN_080015f8"
            ],
            "imported": false,
            "current_name": "check_valid_parameters_080015b2"
        },
        "FUN_0800040c": {
            "renaming": {
                "FUN_0800040c": "reverse_bits_0800040c",
                "param_1": "input",
                "uVar1": "reversed_input",
                "uVar2": "shift_amount",
                "iVar3": "leading_zeroes",
                "uVar4": "mask",
                "in_r12": "unused",
                "bVar5": "is_negative_shift_amount",
                "bVar6": "is_zero_shift_amount",
                "bVar7": "is_negative_mask"
            },
            "code": "ulonglong reverse_bits_0800040c(uint input) {\n  uint leading_zeroes = count_leading_zeroes(input);\n  uint shift_amount = leading_zeroes - 11;\n  uint mask = 0xFFFFFFFF >> (31 - shift_amount);\n  uint shifted_input = input << shift_amount;\n  uint masked_input = shifted_input & mask;\n  uint reversed_input = 0;\n  for (int i = 0; i < 32; i++) {\n    reversed_input = (reversed_input << 1) | (masked_input & 1);\n    masked_input >>= 1;\n  }\n  return ((ulonglong)reversed_input << 32) | (ulonglong)shifted_input;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800040c",
            "calling": [
                "FUN_080015f8",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08000cd0",
                "FUN_08001918"
            ],
            "imported": false,
            "current_name": "reverse_bits_0800040c"
        },
        "FUN_08004df4": {
            "renaming": {
                "FUN_08004df4": "subtract_four_08004df4",
                "param_1": "num"
            },
            "code": "int subtract_four_08004df4(int num)\n{\n    return num - 4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df4",
            "calling": [
                "FUN_08004df8",
                "FUN_08004e12"
            ],
            "imported": false,
            "current_name": "subtract_four_08004df4"
        },
        "FUN_08004bb0": {
            "renaming": {
                "FUN_08004bb0": "process_input_bits_08004bb0",
                "param_1": "input_bit",
                "param_2": "output_bit_flags",
                "param_3": "flag_set",
                "uVar1": "flag",
                "local_20": "output_bit_flag",
                "local_14": "output_flag_set"
            },
            "code": "void process_input_bits_08004bb0(uint input_bit, uint* output_bit_flags, uint* flag_set) {\n  \n  uint flag = set_flag((input_bit << 0x18) >> 0x1c);\n  uint output_bit_flag = 1 << (input_bit & 0xf) & 0xffff;\n  uint output_flag_set = 3;\n  *(uint *)(flag_set + 0x18) = *(uint *)(flag_set + 0x18) | 1;\n  if ((input_bit - 0xd & 0xff) < 2) {\n    *(uint *)(flag_set + 0x1c + 4) = *(uint *)(flag_set + 0x1c + 4) & 0xf8ffffff | 0x4000000;\n  }\n  if (((input_bit == 0xf) || (input_bit == 0x13)) || (input_bit == 0x14)) {\n    *(uint *)(flag_set + 0x1c + 4) = *(uint *)(flag_set + 0x1c + 4) & 0xf8ffffff | 0x2000000;\n  }\n  *output_bit_flags = output_bit_flag;\n  *(output_bit_flags + 1) = output_flag_set;\n  process_bits(flag, output_bit_flags);\n  return;\n}\n",
            "called": [
                "FUN_08004884",
                "FUN_08002624"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bb0",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "process_input_bits_08004bb0"
        },
        "FUN_08004df8": {
            "renaming": {
                "FUN_08004df8": "execute_callback_if_flag_set_08004df8",
                "param_1": "flag",
                "iVar1": "callback_addr",
                "subtract_four_08004df4": "subtract_four",
                "code": "code_ptr",
                "flag_value": "flag_status"
            },
            "code": "void execute_callback_if_flag_set_08004df8(int flag) {\n  int callback_addr = subtract_four();\n  code *callback = *(code **)(callback_addr + 0x4c);\n  char flag_value = *(char *)(flag + 0x1c);\n  if (callback != NULL && flag_value == '\\x01') {\n    (*callback)(callback_addr, 0);\n  }\n  return;\n}",
            "called": [
                "FUN_08004df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df8",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "execute_callback_if_flag_set_08004df8"
        },
        "FUN_08001510": {
            "renaming": {
                "FUN_08001510": "processDataAndReturnOne_08001510",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "byte1",
                "param_6": "byte2",
                "param_7": "byte3",
                "set_data_080014ba": "set_data"
            },
            "code": "undefined4 *processDataAndReturnOne_08001510(undefined4 *data, undefined4 value1, undefined4 value2, undefined4 value3, undefined byte1, undefined byte2, undefined byte3) {\n    data[1] = 0;\n    *data = PTR_PTR_processDataAndReturnOne_08001510_0800134e_1_0800154c;\n    set_data(data, 1, value1, 0xff, value2, value3, byte1, byte2, byte3, 0, 0, 0, 0);\n    return data;\n}",
            "called": [
                "FUN_080014ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001510",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": false,
            "current_name": "processDataAndReturnOne_08001510"
        },
        "FUN_08002af8": {
            "renaming": {
                "FUN_08002af8": "check_and_update_08002af8",
                "param_1": "ptr_param1",
                "param_2": "ptr_param2",
                "param_3": "param3",
                "param_4": "ptr_param4",
                "uVar1": "result",
                "puVar2": "ptr_temp",
                "char_temp": "char_temp"
            },
            "code": "uint check_and_update_08002af8(uint **ptr_param1, uint *ptr_param2, int param3, uint *ptr_param4) {\n  uint result = 0;\n  uint *ptr_temp = NULL;\n  char char_temp = *(char *)((int)ptr_param1 + 0x3d);\n  \n  if (char_temp == '(') {\n    if (ptr_param2 == NULL || param3 == 0 || *(char *)(ptr_param1 + 0xf) == '\\x01') {\n      result = 1;\n    }\n    else {\n      *(undefined *)(ptr_param1 + 0xf) = 1;\n      ptr_temp = *ptr_param1;\n      if ((*ptr_temp & 1) == 0) {\n        *ptr_temp |= 1;\n      }\n      **ptr_param1 &= 0xfffff7ff;\n      *(undefined *)((int)ptr_param1 + 0x3d) = 0x29;\n      *(undefined *)((int)ptr_param1 + 0x3e) = 0x20;\n      result = 0;\n      ptr_param1[0x10] = NULL;\n      ptr_param1[9] = ptr_param2;\n      *(short *)((int)ptr_param1 + 0x2a) = (short)param3;\n      ptr_param1[0xb] = ptr_param4;\n      *(undefined2 *)(ptr_param1 + 10) = *(undefined2 *)((int)ptr_param1 + 0x2a);\n      *(undefined *)(ptr_param1 + 0xf) = 0;\n      (*ptr_param1)[1] |= 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002af8",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": false,
            "current_name": "check_and_update_08002af8"
        },
        "FUN_080028de": {
            "renaming": {
                "FUN_080028de": "set_flags_based_on_params_080028de",
                "param_1": "params",
                "puVar1": "param_11",
                "param_3d": "param_3d",
                "param_3e": "param_3e",
                "param_14": "param_14",
                "param_4": "param_4",
                "param_c": "param_c",
                "param_2a": "param_2a",
                "flag": "flag"
            },
            "code": "uint32_t set_flags_based_on_params_080028de(uint32_t **params) {\n  uint32_t *param_11 = params[11];\n  uint32_t flag = **params;\n  char param_3d = *(char *)((int)params + 0x3d);\n  char param_3e = *(char *)((int)params + 0x3e);\n  uint32_t *param_14 = params[20];\n  uint32_t *param_4 = params[4];\n  uint32_t *param_c = params[12];\n  uint16_t param_2a = *(uint16_t *)((int)params + 0x2a);\n\n  if (param_3d == '\"') {\n    if (param_14 != NULL || param_3e != '@') {\n      if (param_14 == NULL && param_4 == (uint32_t *)0xc000) {\n        flag |= 0x100;\n        param_14 = (uint32_t *)((int)param_14 + 1);\n      }\n      else {\n        if (param_2a == 0) {\n          flag |= 0x200;\n        }\n        else if (param_2a == 1) {\n          if (param_11 == (uint32_t *)0xffff0000) {\n            flag &= 0xfffffbff;\n            uint32_t *param_0 = *params;\n            if ((param_0[1] & 0x800) == 0) {\n              *param_0 |= 0x200;\n            }\n            else {\n              *param_0 &= 0xfffffbff;\n            }\n          }\n          else if (param_11 == (uint32_t *)0x4 || param_11 == (uint32_t *)0x8 || param_c == (uint32_t *)0x12) {\n            flag &= 0xfffffbff;\n            flag |= 0x200;\n          }\n          else if (param_11 == (uint32_t *)0x2) {\n            flag |= 0x400;\n          }\n          else {\n            flag &= 0xfffffbff;\n          }\n        }\n        else if (param_2a == 2) {\n          if (param_11 == (uint32_t *)0x2) {\n            flag |= 0x400;\n          }\n          else {\n            flag |= 0x800;\n            flag &= 0xfffffbff;\n          }\n          uint32_t *param_0 = *params;\n          if ((param_0[1] & 0x800) != 0) {\n            param_0[1] |= 0x1000;\n          }\n        }\n        else {\n          flag |= 0x400;\n          uint32_t *param_0 = *params;\n          if ((param_0[1] & 0x800) != 0) {\n            param_0[1] |= 0x1000;\n          }\n        }\n        param_14 = NULL;\n      }\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028de",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "set_flags_based_on_params_080028de"
        },
        "FUN_08002848": {
            "renaming": {
                "FUN_08002848": "set_flags_based_on_input_08002848",
                "param_1": "input",
                "*(char *)((int)param_1 + 0x3e)": "input_char",
                "param_1[0x14]": "input_type",
                "*(uint *)(*param_1 + 0x10)": "flag_value",
                "param_1[0x11]": "input_value",
                "*(char *)((int)param_1 + 0x3d)": "input_char_2",
                "0x4000": "SOME_CONSTANT",
                "0xfe": "FLAG_A",
                "0xffU": "FLAG_B",
                "1": "FLAG_C",
                "0xf0": "FLAG_D",
                "0xf1": "FLAG_E"
            },
            "code": "int set_flags_based_on_input_08002848(int *input)\n{\n    int flag_value = 0;\n    int input_offset = input[0];\n    int input_value = input[0x11];\n    int input_type = input[0x14];\n    char input_char = *(char *)((int)input + 0x3e);\n    char input_char_2 = *(char *)((int)input + 0x3d);\n\n    if (input_char == '@') {\n        if (input_type == 0) {\n            flag_value = input_value & 0xfe;\n        }\n        else {\n            flag_value = input_value & 0xffU | 1;\n        }\n    }\n    else if (input[4] == 0x4000) {\n        if (input_char_2 == '!') {\n            flag_value = input_value & 0xfe;\n        }\n        else {\n            flag_value = input_value & 0xffU | 1;\n        }\n    }\n    else if (input_type == 0) {\n        flag_value = (input_value << 0x10) >> 0x17 & 6 | 0xf0;\n    }\n    else if (input_type == 1) {\n        flag_value = (input_value << 0x10) >> 0x17 & 6 | 0xf1;\n    }\n    return flag_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "set_flags_based_on_input_08002848"
        },
        "FUN_08004e70": {
            "renaming": {
                "FUN_08004e70": "subtract_four_from_input_08004e70",
                "param_1": "input_num",
                "return": "result"
            },
            "code": "int subtract_four_from_input_08004e70(int input_num) {\n    int result = input_num - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e70",
            "calling": [
                "FUN_08004ef4",
                "FUN_08004e74",
                "FUN_08004ec4"
            ],
            "imported": false,
            "current_name": "subtract_four_from_input_08004e70"
        },
        "FUN_080020f0": {
            "renaming": {
                "FUN_080020f0": "check_and_update_value_080020f0",
                "param_1": "ptr_param",
                "iVar1": "ptr_var1",
                "iVar2": "ptr_var2"
            },
            "code": "int check_and_update_value_080020f0(int *ptr_param)\n{\n  int ptr_var1;\n  int ptr_var2;\n  \n  ptr_var2 = *ptr_param;\n  if ((*(uint *)(ptr_var2 + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(ptr_var2 + 8) = *(uint *)(ptr_var2 + 8) & 0xfffffffe;\n  ptr_var2 = get_value_from_pointer_08001cc4();\n  do {\n    if ((*(uint *)(*ptr_param + 8) & 1) == 0) {\n      return 0;\n    }\n    ptr_var1 = get_value_from_pointer_08001cc4();\n  } while ((uint)(ptr_var1 - ptr_var2) < 3);\n  ptr_param[10] = ptr_param[10] | 0x10;\n  ptr_param[0xb] = ptr_param[0xb] | 1;\n  return 1;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080020f0",
            "calling": [
                "FUN_08002348",
                "FUN_0800213c",
                "FUN_0800224c",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "check_and_update_value_080020f0"
        },
        "FUN_08006e10": {
            "renaming": {
                "FUN_08006e10": "allocate_memory_and_set_permissions_08006e10",
                "param_1": "process_id",
                "param_2": "memory_info",
                "local_18": "initial_memory_size",
                "local_14": "local_memory_info",
                "uVar1": "permission_flags",
                "iVar2": "allocated_memory_size"
            },
            "code": "void allocate_memory_and_set_permissions_08006e10(int process_id, int *memory_info)\n{\n  ushort permission_flags;\n  int allocated_memory_size;\n  int initial_memory_size;\n  int *local_memory_info;\n\n  if (-1 < (int)((uint)*(ushort *)(memory_info + 3) << 0x1e))) {\n    initial_memory_size = process_id;\n    local_memory_info = memory_info;\n    permission_flags = check_permissions_and_set(process_id, memory_info, &initial_memory_size, &local_memory_info);\n    allocated_memory_size = allocate_memory(process_id, initial_memory_size);\n    if (allocated_memory_size != 0) {\n      *(undefined **)(process_id + 0x28) = PTR_LAB_08006c34_1_08006e8c;\n      *memory_info = allocated_memory_size;\n      *(ushort *)(memory_info + 3) = *(ushort *)(memory_info + 3) | 0x80;\n      memory_info[4] = allocated_memory_size;\n      memory_info[5] = initial_memory_size;\n      if ((local_memory_info != (int *)0x0) &&\n         (allocated_memory_size = check_and_set_value(process_id,(int)*(short *)((int)memory_info + 0xe)), allocated_memory_size != 0)) {\n        *(ushort *)(memory_info + 3) = *(ushort *)(memory_info + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(memory_info + 3) = permission_flags | *(ushort *)(memory_info + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(memory_info + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(memory_info + 3) = *(ushort *)(memory_info + 3) & 0xfffc | 2;\n  }\n  *memory_info = (int)memory_info + 0x47;\n  memory_info[4] = (int)memory_info + 0x47;\n  memory_info[5] = 1;\n  return;\n}",
            "called": [
                "FUN_08006dc8",
                "FUN_08007028",
                "FUN_08006288"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e10",
            "calling": [
                "FUN_080069e4"
            ],
            "imported": false,
            "current_name": "allocate_memory_and_set_permissions_08006e10"
        },
        "FUN_08004e74": {
            "renaming": {
                "FUN_08004e74": "update_data_08004e74",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "check",
                "param_4": "param_4",
                "iVar1": "subtracted_value",
                "check_and_update_08002af8": "check_and_update",
                "check_and_initialize_08002b84": "check_and_initialize"
            },
            "code": "void update_data_08004e74(int data, int flag, int check, undefined4 param_4)\n{\n    int subtracted_value = subtract_four_from_input();\n    \n    if (check == *(int *)(data + 0xc))\n    {\n        if (flag == 0)\n        {\n            *(undefined *)(subtracted_value + 0x88) = 0;\n            *(undefined *)(subtracted_value + 0x5c) = 0;\n            \n            if (*(code **)(subtracted_value + 100) != (code *)0x0)\n            {\n                (**(code **)(subtracted_value + 100))();\n            }\n            \n            check_and_update(data, subtracted_value + 0x68, *(undefined *)(subtracted_value + 0x88), 8);\n            return;\n        }\n        \n        *(undefined *)(subtracted_value + 0x5c) = 1;\n        check_and_initialize(data, subtracted_value + 0x68, 0x20, 8, param_4);\n    }\n    \n    return;\n}",
            "called": [
                "FUN_08002af8",
                "FUN_08002b84",
                "FUN_08004e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "FUN_08002cf2"
            ],
            "imported": false,
            "current_name": "update_data_08004e74"
        },
        "FUN_08004c30": {
            "renaming": {
                "FUN_08004c30": "set_offset_value_if_param_not_zero_08004c30",
                "param_1": "base_address",
                "param_2": "offset",
                "param_3": "param_value",
                "param_4": "value_to_set",
                "set_value_at_offset_0800281e": "set_value_at_offset"
            },
            "code": "void set_offset_value_if_param_not_zero_08004c30(undefined4 base_address, undefined2 offset, int param_value, undefined4 value_to_set) {\n  if (param_value != 0) {\n    set_value_at_offset_0800281e(base_address, offset, 1, value_to_set, value_to_set);\n  } else {\n    set_value_at_offset_0800281e(base_address, offset, 0, value_to_set, value_to_set);\n  }\n}",
            "called": [
                "FUN_0800281e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c30",
            "calling": [
                "FUN_08005848"
            ],
            "imported": false,
            "current_name": "set_offset_value_if_param_not_zero_08004c30"
        },
        "FUN_08006f38": {
            "renaming": {
                "FUN_08006f38": "process_input_and_update_data_08006f38",
                "param_1": "input_data",
                "param_2": "data_offset",
                "iVar1": "input_processing_result",
                "uVar2": "updated_value",
                "bVar3": "is_process_successful"
            },
            "code": "void process_input_and_update_data_08006f38(void* input_data, int data_offset){\n  int input_length = (int)*(short *)(data_offset + 0xe);\n  int process_result = process_input_0800706c(input_data, input_length);\n  bool is_process_successful = process_result >= 0;\n  uint updated_value;\n  if (is_process_successful) {\n    updated_value = *(int *)(data_offset + 0x54) + process_result;\n  }\n  else {\n    updated_value = *(ushort *)(data_offset + 0xc) & 0xffffefff;\n  }\n  if (is_process_successful) {\n    *(uint *)(data_offset + 0x54) = updated_value;\n  }\n  else {\n    *(short *)(data_offset + 0xc) = (short)updated_value;\n  }\n  return;\n}",
            "called": [
                "FUN_0800706c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f38",
            "calling": [],
            "imported": false,
            "current_name": "process_input_and_update_data_08006f38"
        },
        "FUN_08004cce": {
            "renaming": {
                "FUN_08004cce": "get_param_value_08004cce",
                "param_1": "param_id",
                "uVar1": "param_value",
                "find_param_value_08004cb2": "find_param_value"
            },
            "code": "int get_param_value_08004cce(int param_id)\n{\n  int param_value;\n  if (param_id == -1) {\n    return -1;\n  }\n  param_value = find_param_value();\n  return param_value;\n}",
            "called": [
                "FUN_08004cb2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cce",
            "calling": [
                "FUN_08004948",
                "FUN_0800492c",
                "FUN_08004b3c",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "get_param_value_08004cce"
        },
        "FUN_08006eac": {
            "renaming": {
                "FUN_08006eac": "do_nothing_08006eac"
            },
            "code": "\nvoid do_nothing_08006eac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eac",
            "calling": [
                "FUN_080061f0",
                "FUN_08006288"
            ],
            "imported": false,
            "current_name": "do_nothing_08006eac"
        },
        "FUN_08006eae": {
            "renaming": {
                "FUN_08006eae": "do_nothing_08006eae"
            },
            "code": "\nvoid do_nothing_08006eae(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eae",
            "calling": [
                "FUN_080061f0",
                "FUN_08006288"
            ],
            "imported": false,
            "current_name": "do_nothing_08006eae"
        },
        "FUN_08005f5c": {
            "renaming": {
                "FUN_08005f5c": "do_nothing_08005f5c"
            },
            "code": "\nvoid do_nothing_08005f5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5c",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "do_nothing_08005f5c"
        },
        "FUN_08003ad4": {
            "renaming": {
                "FUN_08003ad4": "process_input_08003ad4",
                "param_1": "input",
                "param_2": "input_len",
                "puVar1": "ptr",
                "iVar2": "value_1",
                "iVar3": "value_2/value_3/value_4",
                "uVar4": "result"
            },
            "code": "uint32_t process_input_08003ad4(uint32_t *input, uint32_t input_len) {\n  uint32_t *ptr = global_var_1;\n  if (((*global_var_1 & 7) < input_len) && (*global_var_1 = *global_var_1 & 0xfffffff8 | input_len, input_len != (*ptr & 7))) {\n    return 1;\n  }\n  if ((*input & 2) != 0) {\n    global_var_2[1] = global_var_2[1] & 0xffffff0f | input[2];\n  }\n  if ((*input & 1) != 0) {\n    uint32_t input_1 = input[1];\n    if (input_1 == 1) {\n      if ((*global_var_2 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((input_1 != 2) && ((*global_var_2 & 2) == 0)) {\n      return 1;\n    }\n    global_var_2[1] = input_1 | global_var_2[1] & 0xfffffffc;\n    int32_t value_1 = get_value_from_pointer_08001cc4();\n    if (input[1] == 1) {\n      while ((global_var_2[1] & 0xc) != 4) {\n        int32_t value_2 = get_value_from_pointer_08001cc4();\n        if (5000 < (uint32_t)(value_2 - value_1)) {\n          return 3;\n        }\n      }\n    }\n    else if (input[1] == 2) {\n      while ((global_var_2[1] & 0xc) != 8) {\n        int32_t value_3 = get_value_from_pointer_08001cc4();\n        if (5000 < (uint32_t)(value_3 - value_1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((global_var_2[1] & 0xc) != 0) {\n        int32_t value_4 = get_value_from_pointer_08001cc4();\n        if (5000 < (uint32_t)(value_4 - value_1)) {\n          return 3;\n        }\n      }\n    }\n  }\n  ptr = global_var_1;\n  if ((input_len < (*global_var_1 & 7)) && (*global_var_1 = *global_var_1 & 0xfffffff8 | input_len, input_len != (*ptr & 7))) {\n    return 1;\n  }\n  if ((*input & 4) != 0) {\n    global_var_2[1] = global_var_2[1] & 0xfffff8ff | input[3];\n  }\n  if ((*input & 8) != 0) {\n    global_var_2[1] = global_var_2[1] & 0xffffc7ff | input[4] << 3;\n  }\n  uint32_t result = calculate_result_08003a68();\n  *(uint32_t *)global_var_3 = result >> global_var_4[(global_var_2[1] << 0x18) >> 0x1c];\n  validate_and_set_input_08001c3c(0xf);\n  return 0;\n}",
            "called": [
                "FUN_08003afa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ad4",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "process_input_08003ad4"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "set_bits_at_position_08004110",
                "param_1": "data",
                "param_2": "position",
                "param_3": "value",
                "*(uint *)(param_1 + 0x20)": "*data",
                "*(uint *)(param_1 + 0x20) & ~(4 << (param_2 & 0xff))": "mask",
                "param_3 << (param_2 & 0xff)": "value << (position & 0xff)"
            },
            "code": "void set_bits_at_position_08004110(uint32_t *data, uint8_t position, uint32_t value)\n{\n    uint32_t mask = ~(4 << (position & 0xff));\n    *data = (*data & mask) | (value << (position & 0xff));\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "FUN_0800412c"
            ],
            "imported": false,
            "current_name": "set_bits_at_position_08004110"
        },
        "FUN_08004ce2": {
            "renaming": {
                "FUN_08004ce2": "check_value_08004ce2",
                "param_1": "value_to_check",
                "param_2": "values",
                "*param_2": "*values"
            },
            "code": "int check_value_08004ce2(int value_to_check, char *values)\n{\n    if (value_to_check == -1) {\n        return 0;\n    }\n    while (*values != -1) {\n        if (value_to_check == *values) {\n            return 1;\n        }\n        values += 12;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ce2",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "check_value_08004ce2"
        },
        "FUN_08005568": {
            "renaming": {
                "FUN_08005568": "update_data_08005568",
                "param_1": "data_index",
                "param_2": "new_data",
                "bVar1": "index",
                "PTR_DAT_080055b0": "data_arr",
                "PTR_DAT_080055b4": "data_arr",
                "set_bits_08002494": "set_bits",
                "set_bit_at_index_080024f8": "set_bit",
                "validate_input_0800455a": "validate_data"
            },
            "code": "void update_data_08005568(int data_index, int new_data) {\n  if (data_index != 0) {\n    byte index = *(byte *)(data_index + 0x44);\n    *(int *)(PTR_DAT_080055b0 + (uint)index * 4) = data_index;\n    *(int *)(PTR_DAT_080055b0 + (uint)index * 4) = new_data;\n    set_bits(data_index);\n    set_bit(data_index);\n    validate_data(PTR_DAT_080055b0 + (uint)index * 4, *(int *)(data_index + 100) + (uint)*(ushort *)(data_index + 0x6a), 1);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_0800455a",
                "FUN_080024f8",
                "FUN_08002494"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005568",
            "calling": [],
            "imported": false,
            "current_name": "update_data_08005568"
        },
        "FUN_08004478": {
            "renaming": {
                "FUN_08004478": "process_input_08004478",
                "param_1": "input_buffer",
                "param_2": "input_data",
                "param_3": "input_length",
                "param_4": "input_value",
                "uVar1": "value_from_pointer",
                "iVar2": "status"
            },
            "code": "int process_input_08004478(int *input_buffer, ushort *input_data, int input_length, undefined4 input_value)\n{\n  undefined4 uVar1;\n  int status = 0;\n  if (*(char *)((int)input_buffer + 0x39) == ' ') {\n    if (input_data == (ushort *)0x0 || input_length == 0) {\n      status = 1;\n    }\n    else if (*(char *)(input_buffer + 0xe) == '\\x01') {\n      status = 2;\n    }\n    else {\n      *(undefined *)(input_buffer + 0xe) = 1;\n      input_buffer[0xf] = 0;\n      *(undefined *)((int)input_buffer + 0x39) = 0x21;\n      uVar1 = get_value_from_pointer_08001cc4();\n      *(short *)(input_buffer + 9) = (short)input_length;\n      *(short *)((int)input_buffer + 0x26) = (short)input_length;\n      while (*(short *)((int)input_buffer + 0x26) != 0) {\n        *(short *)((int)input_buffer + 0x26) = *(short *)((int)input_buffer + 0x26) + -1;\n        if (input_buffer[2] == 0x1000) {\n          status = check_parameters(input_buffer,0x80,0,uVar1,input_value);\n          if (status != 0) {\n            return 3;\n          }\n          *(uint *)(*input_buffer + 4) = *input_data & 0x1ff;\n          if (input_buffer[4] == 0) {\n            input_data = input_data + 1;\n          }\n          else {\n            input_data = (ushort *)((int)input_data + 1);\n          }\n        }\n        else {\n          status = check_parameters(input_buffer,0x80,0,uVar1,input_value);\n          if (status != 0) {\n            return 3;\n          }\n          *(uint *)(*input_buffer + 4) = (uint)*(byte *)input_data;\n          input_data = (ushort *)((int)input_data + 1);\n        }\n      }\n      status = check_parameters(input_buffer,0x40,0,uVar1,input_value);\n      if (status == 0) {\n        *(undefined *)((int)input_buffer + 0x39) = 0x20;\n        *(undefined *)(input_buffer + 0xe) = 0;\n      }\n      else {\n        status = 3;\n      }\n    }\n  }\n  else {\n    status = 2;\n  }\n  return status;\n}",
            "called": [
                "FUN_080043b4",
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004478",
            "calling": [
                "FUN_080053d4"
            ],
            "imported": false,
            "current_name": "process_input_08004478"
        },
        "FUN_08005f5e": {
            "renaming": {
                "FUN_08005f5e": "initialize_flags_and_update_register_08005f5e",
                "update_register_08002470": "update_register",
                "initialize_flags_08001c32": "initialize_flags"
            },
            "code": "void initialize_flags_and_update_register_08005f5e(void)\n{\n    update_register(3);\n    initialize_flags();\n    return;\n}",
            "called": [
                "FUN_08002470",
                "FUN_08001c32"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5e",
            "calling": [
                "FUN_08006198"
            ],
            "imported": false,
            "current_name": "initialize_flags_and_update_register_08005f5e"
        },
        "FUN_08005cb6": {
            "renaming": {
                "FUN_08005cb6": "execute_function_pointer_08005cb6",
                "*param_1": "function_pointer"
            },
            "code": "void execute_function_pointer_08005cb6(void *function_pointer) {\n  ((*((void (*)())function_pointer))();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cb6",
            "calling": [
                "FUN_08005da8",
                "FUN_08005d42"
            ],
            "imported": false,
            "current_name": "execute_function_pointer_08005cb6"
        },
        "FUN_08003c70": {
            "renaming": {
                "FUN_08003c70": "get_shifted_value_08003c70",
                "uVar1": "value",
                "get_value_from_pointer_08003c44": "get_pointer_value",
                "PTR_DAT_08003c8c": "shift_array",
                "DAT_08003c88": "data_pointer"
            },
            "code": "uint get_shifted_value_08003c70(void)\n{\n  uint value = get_pointer_value();\n  uint shift_amount = (uint)(*(int *)(DAT_08003c88 + 4) << 0x12) >> 0x1d;\n  return value >> shift_amount;\n}",
            "called": [
                "FUN_08003c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c70",
            "calling": [
                "FUN_08004204",
                "FUN_08003da4"
            ],
            "imported": false,
            "current_name": "get_shifted_value_08003c70"
        },
        "FUN_080053d4": {
            "renaming": {
                "FUN_080053d4": "process_input_080053d4",
                "param_1": "input_value",
                "param_2": "param_value",
                "iVar2": "value1",
                "cVar1": "char_value",
                "iVar3": "value2",
                "uVar4": "index",
                "PTR_DAT_0800547c": "input_chars",
                "find_param_08004c78": "find_param",
                "PTR_DAT_08005480": "param_list",
                "PTR_DAT_08005484": "param_list",
                "set_parameter_value_08005384": "set_parameter_value",
                "PTR_DAT_08005488": "param_list",
                "process_input_08004478": "process_input",
                "get_value_from_pointer_08001cc4": "get_value_from_pointer"
            },
            "code": "uint process_input_080053d4(uint input_value, uint param_value){\n  int value1 = get_value_from_pointer();\n  char char_value = PTR_DAT_0800547c[1];\n  int value2 = find_param((int)char_value, PTR_DAT_08005480);\n  if (value2 == 0) {\n    return 0;\n  }\n  uint index = 0;\n  while ((index < 5 && ((*(int *)(PTR_DAT_08005480 + index * 4) == 0 || (value2 = find_param((int)char_value, PTR_DAT_08005480), **(int **)(PTR_DAT_08005480 + index * 4) != value2))))) {\n    index++;\n  }\n  if (4 < index) {\n    if ((4 < (byte)PTR_DAT_08005480[0x44]) && (set_parameter_value(), 4 < (byte)PTR_DAT_08005480[0x44])) {\n      return 0;\n    }\n    index = (uint)(byte)PTR_DAT_08005480[0x44];\n  }\n  do {\n    value2 = process_input_080053d4(*(uint *)(PTR_DAT_08005480 + index * 4), input_value, param_value & 0xffff,1000);\n    if (value2 == 0) {\n      return param_value;\n    }\n    value2 = get_value_from_pointer();\n  } while ((uint)(value2 - value1) < 1000);\n  return 0;\n}",
            "called": [
                "FUN_08005384",
                "FUN_08004478",
                "FUN_08004c78",
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053d4",
            "calling": [
                "FUN_08005730"
            ],
            "imported": false,
            "current_name": "process_input_080053d4"
        },
        "FUN_08002b84": {
            "renaming": {
                "FUN_08002b84": "check_and_initialize_08002b84",
                "param_1": "pointer_to_pointer",
                "param_2": "pointer_to_int",
                "param_3": "int_value",
                "param_4": "pointer_to_uint",
                "uVar1": "return_value",
                "puVar2": "pointer_to_uint_2"
            },
            "code": "int check_and_initialize_08002b84(uint **pointer_to_pointer, uint *pointer_to_int, int int_value, uint *pointer_to_uint){\n  int return_value;\n  uint *pointer_to_uint_2;\n  if (*(char *)((int)pointer_to_pointer + 0x3d) == '(') {\n    if (pointer_to_int == NULL) {\n      return_value = 1;\n    }\n    else if (int_value == 0) {\n      return_value = 1;\n    }\n    else if (*(char *)(pointer_to_pointer + 0xf) == '\\x01') {\n      return_value = 2;\n    }\n    else {\n      *(undefined *)(pointer_to_pointer + 0xf) = 1;\n      pointer_to_uint_2 = *pointer_to_pointer;\n      if ((*pointer_to_uint_2 & 1) == 0) {\n        *pointer_to_uint_2 = *pointer_to_uint_2 | 1;\n      }\n      **pointer_to_pointer = **pointer_to_pointer & 0xfffff7ff;\n      *(undefined *)((int)pointer_to_pointer + 0x3d) = 0x2a;\n      *(undefined *)((int)pointer_to_pointer + 0x3e) = 0x20;\n      return_value = 0;\n      pointer_to_pointer[0x10] = NULL;\n      pointer_to_pointer[9] = pointer_to_int;\n      *(short *)((int)pointer_to_pointer + 0x2a) = (short)int_value;\n      pointer_to_pointer[0xb] = pointer_to_uint;\n      *(undefined2 *)(pointer_to_pointer + 10) = *(undefined2 *)((int)pointer_to_pointer + 0x2a);\n      *(undefined *)(pointer_to_pointer + 0xf) = 0;\n      (*pointer_to_pointer)[1] = (*pointer_to_pointer)[1] | 0x700;\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b84",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": false,
            "current_name": "check_and_initialize_08002b84"
        },
        "FUN_08004c48": {
            "renaming": {
                "FUN_08004c48": "check_params_are_in_array_08004c48",
                "param_1": "array",
                "param_2": "array_size",
                "param_3": "param1",
                "param_4": "param1_size",
                "PTR_08002810": "is_param2_in_ptr1_08002810",
                "DAT_08002810": "param2",
                "PTR_08002814": "param2_size"
            },
            "code": "void check_params_are_in_array_08004c48(void* array, int array_size, void* param1, int param1_size, void* DAT_08002810, int PTR_08002814)\n{\n  PTR_08002810(array, array_size, param1, param1_size, DAT_08002810, PTR_08002814);\n  return;\n}",
            "called": [
                "FUN_08002810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c48",
            "calling": [
                "FUN_08005890"
            ],
            "imported": false,
            "current_name": "check_params_are_in_array_08004c48"
        },
        "FUN_0800042c": {
            "renaming": {
                "FUN_0800042c": "improved_function_0800042c",
                "param_1": "param",
                "uVar1": "carry",
                "uVar2": "abs_param",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeroes",
                "uVar5": "shift_amount_2",
                "uVar6": "sign_bit",
                "in_r12": "trailing_zeroes",
                "bVar7": "cond_1",
                "bVar8": "cond_2",
                "bVar9": "carry_2"
            },
            "code": "ulonglong improved_function_0800042c(uint number) {\n    uint shift = 0x1f;\n    while (shift >= 0 && (number & (1U << shift)) == 0) {\n        shift--;\n    }\n    return (0x1f - shift);\n}\n\nulonglong improved_function_0800042c(uint param) {\n    uint sign_bit = param & 0x80000000;\n    uint abs_param = param;\n    if ((int)sign_bit < 0) {\n        abs_param = -param;\n    }\n    if (abs_param == 0) {\n        return 0;\n    }\n    uint leading_zeroes = improved_function_0800042c(abs_param);\n    uint shift_amount = leading_zeroes + 0x15;\n    if (shift_amount < 0x20) {\n        uint carry = (leading_zeroes - 0xb < 0);\n        shift_amount = shift_amount - carry * 0xc + carry;\n        uint shifted_param = abs_param << (shift_amount & 0xff);\n        uint shifted_sign = sign_bit | (abs_param >> (0xc - leading_zeroes + carry) & 0xffffffff << (shift_amount & 0xff));\n        return ((ulonglong)shifted_sign << 0x20) | shifted_param;\n    }\n    else {\n        uint trailing_zeroes = 0x20 - shift_amount;\n        uint shifted_param = abs_param << (leading_zeroes & 0xff);\n        uint shifted_sign = sign_bit | (abs_param >> trailing_zeroes);\n        uint shifted_zeroes = 0 << (leading_zeroes & 0xff);\n        if (trailing_zeroes > 0x1e) {\n            return ((ulonglong)shifted_sign << 0x20) | (shifted_param >> (trailing_zeroes - 0x1f & 0xff));\n        }\n        else {\n            uint carry = (leading_zeroes - 0xb < 0);\n            uint shifted_param_2 = (shifted_param >> (trailing_zeroes & 0xff)) | (shifted_param << (0x20 - trailing_zeroes & 0xff));\n            uint shifted_sign_2 = shifted_sign | (shifted_param >> (0x20 - (0xc - carry - trailing_zeroes) & 0xff));\n            return ((ulonglong)shifted_sign_2 << 0x20) | (shifted_zeroes >> (0x20 - (0xc - carry - trailing_zeroes) & 0xff) | shifted_param_2 << (0xc - carry - trailing_zeroes & 0xff));\n        }\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800042c",
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0",
                "FUN_08001918"
            ],
            "imported": false,
            "current_name": "improved_function_0800042c"
        },
        "FUN_08005f6c": {
            "renaming": {
                "FUN_08005f6c": "process_oven_data_loop_08005f6c",
                "process_oven_data_08000bcc": "process_oven_data",
                "do_nothing_08005f5c": "do_nothing",
                "FUN_08000cd0": "check_oven_data",
                "DAT_08005f88": "oven_data_ready",
                "calculate_value_if_not_zero_08005a18": "calculate_oven_value_if_not_zero"
            },
            "code": "void process_oven_data_loop_08005f6c(void)\n{\n  do_nothing();\n  process_oven_data();\n  do {\n    do {\n      check_oven_data();\n    } while (DAT_08005f88 == 0);\n    calculate_oven_value_if_not_zero();\n  } while(true);\n}",
            "called": [
                "FUN_08005a18",
                "FUN_08005f5c",
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f6c",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": false,
            "current_name": "process_oven_data_loop_08005f6c"
        },
        "FUN_08005cc0": {
            "renaming": {
                "FUN_08005cc0": "execute_function_08005cc0",
                "param_1": "function_pointer",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3"
            },
            "code": "void execute_function_08005cc0(int *function_pointer, undefined4 arg1, undefined4 arg2, undefined4 arg3){\n  (**(code **)(*function_pointer + 4))(function_pointer, PTR_DAT_08005cd0, 2, *(code **)(*function_pointer + 4), arg3);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cc0",
            "calling": [
                "FUN_08005f40",
                "FUN_08005cd4"
            ],
            "imported": false,
            "current_name": "execute_function_08005cc0"
        },
        "FUN_0800706c": {
            "renaming": {
                "FUN_0800706c": "process_input_0800706c",
                "param_1": "output",
                "param_2": "input_1",
                "param_3": "input_2",
                "param_4": "input_3",
                "puVar1": "data_pointer",
                "iVar2": "result"
            },
            "code": "void process_input_0800706c(int *output, undefined4 input_1, undefined4 input_2, undefined4 input_3) {\n  undefined *data_pointer = PTR_DAT_0800708c;\n  *(undefined4 *)PTR_DAT_0800708c = 0;\n  int result = return_zero_0800572c(input_1, input_2, input_3, input_3, input_3);\n  if ((result == -1) && (*(int *)data_pointer != 0)) {\n    *output = *(int *)data_pointer;\n  }\n  return;\n}",
            "called": [
                "FUN_0800572c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800706c",
            "calling": [
                "FUN_08006f38"
            ],
            "imported": false,
            "current_name": "process_input_0800706c"
        },
        "FUN_08002624": {
            "renaming": {
                "FUN_08002624": "process_bits_08002624",
                "param_1": "bit_mask",
                "param_2": "data",
                "puVar1": "bit_ptr",
                "uVar2": "bit_mask_val",
                "uVar3": "data_val",
                "uVar4": "bit_val",
                "uVar5": "bit_offset",
                "uVar6": "output_val",
                "uVar7": "i",
                "iVar8": "temp_val",
                "iVar10": "bit_offset",
                "DAT_080027f8": "PTR_DAT_080027f8",
                "DAT_0800280c": "PTR_DAT_0800280c",
                "DAT_080027fc": "PTR_DAT_080027fc",
                "DAT_08002800": "PTR_DAT_08002800"
            },
            "code": "void process_bits_08002624(uint *bit_mask, uint *data) {\n  uint *bit_ptr;\n  uint bit_mask_val;\n  uint data_val;\n  uint bit_val;\n  uint bit_offset;\n  uint output_val;\n  int i;\n  uint temp_val;\n\n  output_val = 0;\n  bit_offset = 0;\n  for (i = 0; i <= 15; i++) {\n    bit_mask_val = 1 << i;\n    bit_val = *bit_mask & bit_mask_val;\n    if (bit_val == bit_mask_val) {\n      data_val = data[1];\n      if (data_val == 0x12) {\n        output_val = data[3] + 0xc;\n      }\n      else if (data_val < 0x13) {\n        if (data_val == 2) {\n          output_val = data[3] + 8;\n        }\n        else if (data_val < 3) {\n          if (data_val == 0) {\n            goto LAB_08002776;\n          }\n          if (data_val == 1) {\n            output_val = data[3];\n          }\n        }\n        else if (data_val == 3) {\n          output_val = 0;\n        }\n        else if (data_val == 0x11) {\n          output_val = data[3] + 4;\n        }\n      }\n      else {\n        if (data_val != PTR_DAT_08002804) {\n          if (PTR_DAT_08002804 < data_val) {\n            if (data_val == PTR_DAT_08002808) {\n              goto LAB_08002776;\n            }\n            temp_val = PTR_DAT_08002808 + 0x10000;\n            bit_offset = PTR_DAT_08002808;\n          }\n          else {\n            temp_val = PTR_DAT_08002804 - 0x100000;\n            bit_offset = PTR_DAT_08002804;\n          }\n          if ((data_val != temp_val) && (data_val != bit_offset - 0xf0000)) {\n            goto LAB_0800263a;\n          }\n        }\n      }\n      bit_mask_val = i;\n      bit_ptr = bit_mask;\n      if (0xff < bit_val) {\n        bit_mask_val = i - 8;\n        bit_ptr = bit_mask + 1;\n      }\n      *bit_ptr = *bit_ptr & ~(0xf << (bit_mask_val << 2 & 0xff)) | output_val << (bit_mask_val << 2 & 0xff);\n      if ((data[1] & 0x10000000) != 0) {\n        *(uint *)(DAT_080027f8 + 0x18) = *(uint *)(DAT_080027f8 + 0x18) | 1;\n        temp_val = (i & 3) << 2;\n        if (bit_mask == DAT_0800280c) {\n          bit_offset = 0;\n        }\n        else if (bit_mask == DAT_0800280c + 0x100) {\n          bit_offset = 1;\n        }\n        else if (bit_mask == DAT_0800280c + 0x200) {\n          bit_offset = 2;\n        }\n        else if (bit_mask == DAT_0800280c + 0x300) {\n          bit_offset = 3;\n        }\n        else {\n          bit_offset = 4;\n        }\n        *(uint *)(DAT_080027fc + ((i >> 2) + 2) * 4) = *(uint *)(DAT_080027fc + ((i >> 2) + 2) * 4) & ~(0xf << temp_val) | bit_offset << temp_val;\n        if ((data[1] & 0x10000) == 0) {\n          *DAT_08002800 = *DAT_08002800 & ~bit_val;\n        }\n        else {\n          *DAT_08002800 = *DAT_08002800 | bit_val;\n        }\n        if ((data[1] & 0x20000) == 0) {\n          DAT_08002800[1] = DAT_08002800[1] & ~bit_val;\n        }\n        else {\n          DAT_08002800[1] = DAT_08002800[1] | bit_val;\n        }\n        if ((data[1] & 0x100000) == 0) {\n          DAT_08002800[2] = DAT_08002800[2] & ~bit_val;\n        }\n        else {\n          DAT_08002800[2] = DAT_08002800[2] | bit_val;\n        }\n        if ((data[1] & 0x200000) == 0) {\n          DAT_08002800[3] = DAT_08002800[3] & ~bit_val;\n        }\n        else {\n          DAT_08002800[3] = bit_val | DAT_08002800[3];\n        }\n      }\n    }\n    LAB_0800263a:\n    continue;\n    LAB_08002776:\n    if (data[2] == 0) {\n      output_val = 4;\n    }\n    else if (data[2] == 1) {\n      bit_mask[4] = bit_mask_val;\n      output_val = 8;\n    }\n    else {\n      bit_mask[5] = bit_mask_val;\n      output_val = 8;\n    }\n    goto LAB_0800263a;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002624",
            "calling": [
                "FUN_08004bb0",
                "FUN_08004974",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "process_bits_08002624"
        },
        "FUN_080040b0": {
            "renaming": {
                "FUN_080040b0": "set_bit_and_update_080040b0",
                "param_1": "bit_array",
                "param_2": "bit_position",
                "puVar1": "array",
                "DAT_0800410c": "data_array"
            },
            "code": "uint32_t set_bit_and_update_080040b0(uint32_t **bit_array, uint32_t bit_position)\n{\n  uint32_t *array = *bit_array;\n  set_bit_at_position(array, bit_position, 0);\n  if (((array == DAT_0800410c) && ((array[8] & 0x1111) == 0)) && ((array[8] & 0x444) == 0)) {\n    array[0x11] &= 0xffff7fff;\n  }\n  if (((array[8] & 0x1111) == 0) && ((array[8] & 0x444) == 0)) {\n    *array &= 0xfffffffe;\n  }\n  *(uint8_t *)((int)bit_array + 0x3d) = 1;\n  return 0;\n}",
            "called": [
                "FUN_08004092"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040b0",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "set_bit_and_update_080040b0"
        },
        "FUN_08005d42": {
            "renaming": {
                "FUN_08005d42": "convert_base_08005d42",
                "param_1": "function_pointer",
                "param_2": "number",
                "param_3": "base",
                "iVar1": "result",
                "iVar2": "absolute_value",
                "convert_base10_to_baseN_08005ce8": "convert_base10_to_baseN",
                "execute_function_pointer_08005cb6": "execute_function_pointer",
                "negative_sign": "negative_sign"
            },
            "code": "int convert_base_08005d42(uint32_t *function_pointer, uint32_t number, uint32_t base) {\n  int result;\n  int negative_sign = 0x2d;\n  if (base == 0) {\n    result = (**(code **)*function_pointer)(function_pointer,number & 0xff);\n  }\n  else if (base != 10) {\n    result = convert_base_08005d4210_to_baseN(function_pointer,number,base & 0xff);\n  }\n  else if (number >= 0) {\n    result = convert_base_08005d4210_to_baseN(function_pointer,number,10);\n  }\n  else {\n    result = execute_function_pointer(function_pointer,negative_sign);\n    int absolute_value = convert_base_08005d4210_to_baseN(function_pointer,-number,10);\n    result += absolute_value;\n  }\n  return result;\n}",
            "called": [
                "FUN_08005cb6",
                "FUN_08005ce8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d42",
            "calling": [
                "FUN_08005d82"
            ],
            "imported": false,
            "current_name": "convert_base_08005d42"
        },
        "FUN_08004b34": {
            "renaming": {
                "FUN_08004b34": "set_flags_based_on_input_08004d90_wrapper_08004b34"
            },
            "code": "void set_flags_based_on_input_08004d90_wrapper_08004b34(void)\n{\n  set_flags_based_on_input_08004d90();\n  return;\n}",
            "called": [
                "FUN_08004d90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b34",
            "calling": [
                "FUN_08003ed8"
            ],
            "imported": false,
            "current_name": "set_flags_based_on_input_08004d90_wrapper_08004b34"
        },
        "FUN_08004c52": {
            "renaming": {
                "FUN_08004c52": "initialize_and_set_flags_08004c52",
                "set_flag_and_update_register_08001c88": "set_flag_and_update_register",
                "initialize_settings_08001b48": "initialize_settings"
            },
            "code": "void initialize_and_set_flags_08004c52(void)\n{\n  set_flag_and_update_register();\n  initialize_settings();\n  return;\n}",
            "called": [
                "FUN_08001c88",
                "FUN_08001b48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c52",
            "calling": [
                "FUN_08001c32"
            ],
            "imported": false,
            "current_name": "initialize_and_set_flags_08004c52"
        },
        "FUN_080013a4": {
            "renaming": {
                "FUN_080013a4": "process_data_080013a4",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "param_2",
                "param_4": "bit_array_1",
                "iVar1": "bit_array_size",
                "iVar2": "bit_array_index"
            },
            "code": "void process_data_080013a4(int data, int data_size, int param_2, int bit_array_1, int bit_array_2) {\n  int bit_array_index = 0;\n\n  if (data_size > 1) {\n    *(byte *)(data + 0x13) |= 8;\n  }\n\n  *(char *)(data + 0x17) = (char)data_size;\n\n  set_params(data, 0, 0x40, param_2, param_2 + 0x40);\n\n  if ((bit_array_2 != 0) && (data_size == 1)) {\n    *(byte *)(data + 0x13) |= 4;\n  }\n\n  process_bit_array(*(undefined *)(data + 8), 1);\n\n  if (*(char *)(data + 9) != -1) {\n    process_bit_array(*(char *)(data + 9), 1);\n  }\n\n  process_bit_array(*(undefined *)(data + 10), 1);\n\n  while (bit_array_index < 8 && ((*(byte *)(data + 0x13) & 0x10) == 0 || bit_array_index < 4)) {\n    process_bit_array(*(undefined *)(data + bit_array_index + 0xb), 1);\n    bit_array_index++;\n  }\n\n  process_data_080013a4_wrapper(data);\n\n  if ((*(byte *)(data + 0x13) & 0x10) == 0) {\n    process_data_080013a4_and_param(data, 3);\n    process_data_080013a4_and_param(data, 3);\n    process_data_080013a4_and_param(data, 3);\n    process_data_080013a4_and_param(data, 2);\n  }\n  else {\n    process_data_080013a4(data, *(byte *)(data + 0x13) | 0x20, 0);\n    process_data_080013a4(data, *(byte *)(data + 0x13) | 0x20, 0);\n    process_data_080013a4(data, *(byte *)(data + 0x13) | 0x20, 0);\n  }\n\n  process_data_080013a4(data, *(byte *)(data + 0x13) | 0x20, 0);\n\n  *(undefined *)(data + 0x14) = 4;\n  set_data_flags(data);\n\n  *(undefined *)(data + 0x15) = 2;\n  process_data_080013a4(data, 6, 0);\n}\n",
            "called": [
                "FUN_08005848",
                "FUN_08001310",
                "FUN_080012c0",
                "FUN_08001294",
                "FUN_0800135a",
                "FUN_080057b4",
                "FUN_0800138e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080013a4",
            "calling": [
                "FUN_080014ba",
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "process_data_080013a4"
        },
        "FUN_08006d14": {
            "renaming": {
                "FUN_08006d14": "initialize_piVar2_array_08006d14",
                "param_1": "error_code_ptr",
                "param_2": "num_of_elements",
                "param_3": "fill_value",
                "param_4": "memory_ptr",
                "piVar1": "current_element_ptr",
                "piVar2": "piVar2_array_ptr",
                "iVar3": "root_memory_ptr",
                "ppiVar4": "current_memory_ptr_ptr",
                "root_memory_ptr": "PTR_PTR_DAT_08006d88",
                "initialize_root_memory_08006cb4": "initialize_root_memory",
                "fill_memory_with_value_080061e0": "fill_memory_with_value",
                "allocate_and_initialize_memory_08006c88": "allocate_and_initialize_memory"
            },
            "code": "int *initialize_piVar2_array_08006d14(int *error_code_ptr, int num_of_elements, int fill_value, int *memory_ptr) {\n  int *piVar1;\n  int *piVar2;\n  int iVar3;\n  int **ppiVar4;\n  int **root_memory_ptr = (int **)PTR_PTR_DAT_08006d88;\n\n  iVar3 = *(int *)root_memory_ptr;\n  if (*(int *)(iVar3 + 0x18) == 0) {\n    initialize_root_memory_08006cb4(iVar3);\n  }\n  ppiVar4 = (int **)(iVar3 + 0x48);\n  do {\n    piVar2 = ppiVar4[2];\n    piVar1 = ppiVar4[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_memory_with_value_080061e0(piVar2 + 0x17,fill_value,num_of_elements,1,memory_ptr);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar4 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_memory_08006c88(error_code_ptr,4);\n      *ppiVar4 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *error_code_ptr = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar4 = (int **)*ppiVar4;\n  } while( true );\n}",
            "called": [
                "FUN_080061e0",
                "FUN_08006c88",
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d14",
            "calling": [
                "FUN_08006cb4"
            ],
            "imported": false,
            "current_name": "initialize_piVar2_array_08006d14",
            "code_backup": "\nint * FUN_08006d14(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int iVar3;\n  int **ppiVar4;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08006d88;\n  if (*(int *)(iVar3 + 0x18) == 0) {\n    FUN_08006cb4(iVar3);\n  }\n  ppiVar4 = (int **)(iVar3 + 0x48);\n  do {\n    piVar2 = ppiVar4[2];\n    piVar1 = ppiVar4[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_memory_with_value_080061e0(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar4 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_memory_08006c88(param_1,4);\n      *ppiVar4 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar4 = (int **)*ppiVar4;\n  } while( true );\n}\n\n"
        },
        "FUN_080004f8": {
            "renaming": {
                "FUN_080004f8": "calculate_ulonglong_result_080004f8",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar1": "result_1",
                "lVar2": "result_2",
                "uVar3": "temp_var_1",
                "uVar4": "temp_var_2",
                "iVar5": "temp_var_3",
                "uVar6": "temp_var_4",
                "unaff_r5": "temp_var_5",
                "uVar7": "temp_var_6",
                "uVar8": "temp_var_7",
                "bVar9": "temp_var_8",
                "bVar10": "temp_var_9",
                "bVar11": "temp_var_10",
                "uVar12": "concatenated_input_params"
            },
            "code": "\nulonglong calculate_ulonglong_result_080004f8(undefined4 input_param_1,uint input_param_2,uint input_param_3,uint input_param_4)\n\n{\n  ulonglong result_1;\n  longlong result_2;\n  uint temp_var_1;\n  uint temp_var_2;\n  int temp_var_3;\n  uint temp_var_4;\n  uint temp_var_5;\n  uint temp_var_6;\n  uint temp_var_7;\n  bool temp_var_8;\n  bool temp_var_9;\n  bool temp_var_10;\n  ulonglong concatenated_input_params;\n  \n  concatenated_input_params = CONCAT44(input_param_2,input_param_1);\n  temp_var_6 = 0x7ff;\n  temp_var_2 = input_param_2 >> 0x14 & 0x7ff;\n  temp_var_8 = temp_var_2 == 0;\n  if (!temp_var_8) {\n    temp_var_5 = input_param_4 >> 0x14 & 0x7ff;\n    temp_var_8 = temp_var_5 == 0;\n  }\n  if (!temp_var_8) {\n    temp_var_8 = temp_var_2 == 0x7ff;\n  }\n  if (!temp_var_8) {\n    temp_var_8 = temp_var_5 == 0x7ff;\n  }\n  if (temp_var_8) {\n    concatenated_input_params = calculate_result_080006d4();\n  }\n  temp_var_1 = (uint)(concatenated_input_params >> 0x20);\n  temp_var_3 = temp_var_2 + temp_var_5;\n  temp_var_2 = temp_var_1 ^ input_param_4;\n  temp_var_1 = temp_var_1 & ~(temp_var_6 << 0x15);\n  input_param_4 = input_param_4 & ~(temp_var_6 << 0x15);\n  temp_var_8 = ((uint)concatenated_input_params | temp_var_1 << 0xc) == 0;\n  if (!temp_var_8) {\n    temp_var_8 = (input_param_3 | input_param_4 << 0xc) == 0;\n  }\n  temp_var_1 = temp_var_1 | 0x100000;\n  input_param_4 = input_param_4 | 0x100000;\n  if (temp_var_8) {\n    input_param_3 = (uint)concatenated_input_params | input_param_3;\n    input_param_4 = (temp_var_2 & 0x80000000 | temp_var_1) ^ input_param_4;\n    temp_var_2 = temp_var_6 >> 1;\n    temp_var_10 = SBORROW4(temp_var_3,temp_var_2);\n    temp_var_4 = temp_var_3 - temp_var_2;\n    temp_var_8 = temp_var_4 == 0;\n    temp_var_1 = temp_var_4;\n    if (!temp_var_8 && (int)temp_var_2 <= temp_var_3) {\n      temp_var_10 = SBORROW4(temp_var_6,temp_var_4);\n      temp_var_1 = temp_var_6 - temp_var_4;\n      temp_var_8 = temp_var_6 == temp_var_4;\n    }\n    if (!temp_var_8 && (int)temp_var_1 < 0 == temp_var_10) {\n      input_param_4 = input_param_4 | temp_var_4 * 0x100000;\n    }\n    if (!temp_var_8 && (int)temp_var_1 < 0 == temp_var_10) {\n      return CONCAT44(input_param_4,input_param_3);\n    }\n    input_param_4 = input_param_4 | 0x100000;\n    temp_var_6 = 0;\n    temp_var_10 = SBORROW4(temp_var_4,1);\n    temp_var_4 = temp_var_4 - 1;\n    temp_var_8 = temp_var_4 == 0;\n    temp_var_2 = temp_var_4;\n  }\n  else {\n    result_1 = (concatenated_input_params & 0xffffffff) * (ulonglong)input_param_3;\n    concatenated_input_params = (concatenated_input_params & 0xffffffff) * (ulonglong)input_param_4 +\n             (ulonglong)temp_var_1 * (ulonglong)input_param_3 + (result_1 >> 0x20);\n    temp_var_7 = (uint)concatenated_input_params;\n    result_2 = (ulonglong)temp_var_1 * (ulonglong)input_param_4 + (concatenated_input_params >> 0x20);\n    temp_var_6 = (uint)result_2;\n    temp_var_1 = (uint)((ulonglong)result_2 >> 0x20);\n    if ((int)result_1 != 0) {\n      temp_var_7 = temp_var_7 | 1;\n    }\n    temp_var_4 = (temp_var_3 + -0x3ff) - (uint)(temp_var_1 < 0x200);\n    if (temp_var_1 < 0x200) {\n      temp_var_8 = (temp_var_7 & 0x80000000) != 0;\n      temp_var_7 = temp_var_7 << 1;\n      result_2 = CONCAT44(temp_var_1 * 2 + (uint)(CARRY4(temp_var_6,temp_var_6) || CARRY4(temp_var_6 * 2,(uint)temp_var_8)),\n                       temp_var_6 * 2 + (uint)temp_var_8);\n    }\n    input_param_4 = temp_var_2 & 0x80000000 | (int)((ulonglong)result_2 >> 0x20) << 0xb | (uint)result_2 >> 0x15;\n    input_param_3 = (uint)result_2 << 0xb | temp_var_7 >> 0x15;\n    temp_var_6 = temp_var_7 * 0x800;\n    temp_var_9 = 0xfc < temp_var_4;\n    temp_var_10 = SBORROW4(temp_var_4,0xfd);\n    temp_var_1 = temp_var_4 - 0xfd;\n    temp_var_8 = temp_var_1 == 0;\n    temp_var_2 = temp_var_1;\n    if (temp_var_9 && !temp_var_8) {\n      temp_var_9 = 0x6ff < temp_var_1;\n      temp_var_10 = SBORROW4(temp_var_1,0x700);\n      temp_var_2 = temp_var_4 - 0x7fd;\n      temp_var_8 = temp_var_1 == 0x700;\n    }\n    if (!temp_var_9 || temp_var_8) {\n      temp_var_8 = 0x7fffffff < temp_var_6;\n      if (temp_var_6 == 0x80000000) {\n        temp_var_8 = (temp_var_7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input_param_4 + temp_var_4 * 0x100000 + (uint)CARRY4(input_param_3,(uint)temp_var_8),input_param_3 + temp_var_8\n                     );\n    }\n  }\n  if (!temp_var_8 && (int)temp_var_2 < 0 == temp_var_10) {\n    return (ulonglong)(input_param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  temp_var_9 = SCARRY4(temp_var_4,0x36);\n  temp_var_8 = (int)(temp_var_4 + 0x36) < 0;\n  temp_var_10 = temp_var_4 == 0xffffffca;\n  if (temp_var_10 || temp_var_8 != temp_var_9) {\n    input_param_3 = 0;\n  }\n  if (temp_var_10 || temp_var_8 != temp_var_9) {\n    input_param_4 = input_param_4 & 0x80000000;\n  }\n  if (temp_var_10 || temp_var_8 != temp_var_9) {\n    return CONCAT44(input_param_4,input_param_3);\n  }\n  temp_var_2 = -temp_var_4;\n  temp_var_1 = temp_var_2 - 0x20;\n  if (0x1f < (int)temp_var_2) {\n    temp_var_4 = input_param_3 >> (temp_var_1 & 0xff) | input_param_4 << (0x20 - temp_var_1 & 0xff);\n    temp_var_2 = (input_param_4 >> (temp_var_1 & 0xff) & ~((input_param_4 & 0x80000000) >> (temp_var_1 & 0xff))) -\n            ((int)temp_var_4 >> 0x1f);\n    if ((temp_var_6 | input_param_3 << (0x20 - temp_var_1 & 0xff) | temp_var_4 << 1) == 0) {\n      temp_var_2 = temp_var_2 & ~(temp_var_4 >> 0x1f);\n    }\n    return CONCAT44(input_param_4,temp_var_2) & 0x80000000ffffffff;\n  }\n  temp_var_3 = temp_var_2 - 0x14;\n  if (temp_var_3 == 0 || temp_var_3 < 0 != SCARRY4(temp_var_1,0xc)) {\n    temp_var_7 = input_param_3 << (temp_var_4 + 0x20 & 0xff);\n    temp_var_1 = input_param_3 >> (temp_var_2 & 0xff) | input_param_4 << (temp_var_4 + 0x20 & 0xff);\n    temp_var_4 = temp_var_1 + -((int)temp_var_7 >> 0x1f);\n    if ((temp_var_6 | temp_var_7 << 1) == 0) {\n      temp_var_4 = temp_var_4 & ~(temp_var_7 >> 0x1f);\n    }\n    return CONCAT44((input_param_4 & 0x80000000) +\n                    ((input_param_4 & 0x7fffffff) >> (temp_var_2 & 0xff)) +\n                    (uint)CARRY4(temp_var_1,-((int)temp_var_7 >> 0x1f)),temp_var_4);\n  }\n  temp_var_2 = 0xc - temp_var_3;\n  temp_var_4 = input_param_3 << (temp_var_2 & 0xff);\n  temp_var_2 = input_param_3 >> (0x20 - temp_var_2 & 0xff) | input_param_4 << (temp_var_2 & 0xff);\n  temp_var_1 = temp_var_2 + -((int)temp_var_4 >> 0x1f);\n  if ((temp_var_6 | temp_var_4 << 1) == 0) {\n    temp_var_1 = temp_var_1 & ~(temp_var_4 >> 0x1f);\n  }\n  return CONCAT44((input_param_4 & 0x80000000) + (uint)CARRY4(temp_var_2,-((int)temp_var_4 >> 0x1f)),temp_var_1);\n}\n\n",
            "called": [
                "FUN_080006d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004f8",
            "calling": [
                "FUN_080015f8",
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001918"
            ],
            "imported": false,
            "current_name": "calculate_ulonglong_result_080004f8"
        }
    },
    "used_tokens": 252488,
    "layers": [
        [
            "FUN_08002470",
            "FUN_08005740",
            "FUN_08006158",
            "FUN_08000178",
            "FUN_0800258c",
            "FUN_0800573c",
            "FUN_08004d06",
            "FUN_080056d8",
            "FUN_08002f9c",
            "FUN_08005750",
            "FUN_08002ab8",
            "FUN_08002c54",
            "FUN_08004d18",
            "FUN_080006d4",
            "FUN_08006174",
            "FUN_08002494",
            "FUN_080055bc",
            "FUN_08002810",
            "FUN_08004cb2",
            "FUN_08001294",
            "FUN_08002ad8",
            "FUN_0800455a",
            "FUN_08001a66",
            "FUN_08003c44",
            "FUN_080028d2",
            "FUN_08005b3c",
            "FUN_08004c8a",
            "FUN_08002ca6",
            "FUN_080045a2",
            "FUN_080047e8",
            "thunk_FUN_08005750",
            "FUN_0800092c",
            "FUN_08002560",
            "FUN_08006e90",
            "FUN_080008ba",
            "FUN_08005714",
            "FUN_08005a44",
            "FUN_0800417c",
            "FUN_080047f4",
            "FUN_08002c10",
            "FUN_080024f8",
            "FUN_08004198",
            "FUN_08000a2c",
            "FUN_08000ae8",
            "FUN_080061e0",
            "FUN_08005724",
            "FUN_08005728",
            "FUN_0800571a",
            "FUN_08002efc",
            "FUN_0800365c",
            "FUN_08002582",
            "FUN_08004884",
            "FUN_080061f0",
            "FUN_0800572c",
            "FUN_08000a58",
            "FUN_08004092",
            "FUN_08002514",
            "FUN_08005c1c",
            "FUN_0800480a",
            "FUN_08005f8c",
            "FUN_08004c5e",
            "FUN_08004d90",
            "FUN_08004828",
            "FUN_08005b24",
            "FUN_080049f0",
            "FUN_08001e40",
            "FUN_08003a68",
            "FUN_08001e48",
            "FUN_08000aa8",
            "FUN_0800010c",
            "FUN_08001cac",
            "FUN_0800591e",
            "FUN_08002540",
            "FUN_08002db2",
            "FUN_08001cc4",
            "FUN_0800306c",
            "FUN_08004848",
            "FUN_08001f80",
            "FUN_0800281e",
            "FUN_08006198",
            "FUN_080065c0",
            "FUN_08004d40",
            "FUN_08004d44",
            "FUN_0800040c",
            "FUN_08004df4",
            "FUN_08002af8",
            "FUN_080028de",
            "FUN_08002848",
            "FUN_08004e70",
            "FUN_08004110",
            "FUN_08004ce2",
            "FUN_08005cb6",
            "FUN_08002b84",
            "FUN_0800042c",
            "FUN_08005cc0",
            "FUN_08002624"
        ],
        [
            "FUN_08007004",
            "FUN_08004ec4",
            "FUN_080043b4",
            "FUN_08007028",
            "FUN_08004ca2",
            "FUN_080054b0",
            "FUN_08006f00",
            "FUN_08004ef4",
            "FUN_080055e0",
            "FUN_08006112",
            "FUN_08004974",
            "FUN_08006c40",
            "FUN_08006920",
            "FUN_08004b94",
            "FUN_08001918",
            "FUN_08001c3c",
            "FUN_08005604",
            "FUN_08005c96",
            "FUN_08004b9e",
            "FUN_08000aec",
            "FUN_08004e12",
            "FUN_08003c90",
            "FUN_0800412c",
            "FUN_08005c38",
            "FUN_08005ce8",
            "FUN_08004c78",
            "FUN_080009b8",
            "FUN_08005a18",
            "FUN_08003ea0",
            "FUN_0800548c",
            "FUN_08001f84",
            "FUN_08007048",
            "FUN_08003c50",
            "FUN_08004bb0",
            "FUN_08004df8",
            "FUN_080020f0",
            "FUN_08004e74",
            "FUN_08004c30",
            "FUN_08004cce",
            "FUN_08005568",
            "FUN_08003c70",
            "FUN_08004c48",
            "FUN_0800706c",
            "FUN_080040b0",
            "FUN_08004b34"
        ],
        [
            "FUN_08005510",
            "FUN_08002cf2",
            "FUN_08006288",
            "FUN_08002004",
            "FUN_08005fc8",
            "FUN_08001c88",
            "FUN_0800224c",
            "FUN_08005890",
            "FUN_08004204",
            "FUN_080045fe",
            "FUN_0800213c",
            "FUN_08005384",
            "FUN_08005b54",
            "FUN_08004618",
            "FUN_08005d8a",
            "FUN_08002d1c",
            "FUN_08003da4",
            "FUN_080009dc",
            "FUN_080058e0",
            "FUN_080009f0",
            "FUN_08006ac0",
            "FUN_08005848",
            "FUN_08003ed8",
            "FUN_08002348",
            "FUN_08005cd4",
            "FUN_08006dc8",
            "FUN_0800492c",
            "FUN_080009a8",
            "FUN_0800316c",
            "FUN_08003afa",
            "FUN_08004948",
            "FUN_08003f18",
            "FUN_080009c8",
            "FUN_08006f92",
            "FUN_080054d4",
            "FUN_08006f38",
            "FUN_08003ad4",
            "FUN_08004478",
            "FUN_08005d42"
        ],
        [
            "FUN_08006c88",
            "FUN_08004e20",
            "FUN_080032b4",
            "FUN_0800598a",
            "FUN_0800441a",
            "FUN_08005da0",
            "FUN_08002384",
            "FUN_08000a18",
            "FUN_080046b8",
            "FUN_08001cd0",
            "FUN_08003520",
            "FUN_0800611c",
            "FUN_08001814",
            "FUN_08001b48",
            "FUN_08005bb0",
            "FUN_08004b3c",
            "FUN_080012a2",
            "FUN_08000a04",
            "FUN_08005d82",
            "FUN_080015b2",
            "FUN_08006e10",
            "FUN_080053d4"
        ],
        [
            "FUN_080019f6",
            "FUN_08001960",
            "FUN_080016b4",
            "FUN_080018f8",
            "FUN_08005da8",
            "FUN_08004a4c",
            "FUN_080057b4",
            "FUN_080012e8",
            "FUN_080033b8",
            "FUN_08005730",
            "FUN_08005a68",
            "FUN_080015f8",
            "FUN_080012c0",
            "FUN_08004c52"
        ],
        [
            "FUN_08005754",
            "FUN_08001a44",
            "FUN_08005f2c",
            "FUN_0800157c",
            "FUN_08001c32",
            "FUN_08001ab0",
            "FUN_08006f5a",
            "FUN_08001310"
        ],
        [
            "FUN_0800138e",
            "FUN_08005f40",
            "FUN_08001b18",
            "FUN_0800134e",
            "FUN_08001366",
            "FUN_0800135a",
            "FUN_08001550",
            "FUN_08005f5e"
        ],
        [
            "FUN_080013a4"
        ],
        [
            "FUN_080014ba",
            "FUN_08000bcc"
        ],
        [
            "FUN_08001510",
            "FUN_08005f6c"
        ],
        [
            "FUN_08001be8",
            "FUN_08000b08"
        ],
        [
            "FUN_08007090"
        ],
        [
            "FUN_080060d4"
        ],
        [
            "FUN_080060e4"
        ],
        [
            "FUN_0800282c"
        ],
        [
            "FUN_080068f0",
            "FUN_08006be0",
            "FUN_080069e4",
            "FUN_08006d14"
        ],
        [
            "FUN_08006cb4"
        ],
        [
            "FUN_08006344"
        ],
        [
            "FUN_08006370"
        ],
        [
            "FUN_08003688",
            "FUN_080066b0",
            "FUN_08000190",
            "FUN_08000194",
            "FUN_08004f4c",
            "FUN_0800074c",
            "FUN_08000cd0",
            "FUN_080004f8"
        ],
        [
            "FUN_08006394"
        ]
    ],
    "locked_functions": []
}