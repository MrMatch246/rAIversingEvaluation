{
    "functions": {
        "FUN_08002470": {
            "renaming": {
                "FUN_08002470": "updateValue_08002470",
                "param_1": "param",
                "DAT_08002490": "data",
                "PTR_0800249c": "ptr_value",
                "PTR_080024a0": "mask"
            },
            "code": "void updateValue_08002470(uint param)\n{\n  uint* PTR_0800249c = (uint *)(DAT_08002490 + 0xc);\n  uint PTR_080024a0 = 0xf8ff;\n  uint newValue = (param & 7) << 8 | (*PTR_0800249c & PTR_080024a0) | 0x5fa0000;\n  *PTR_0800249c = newValue;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002470",
            "calling": [
                "FUN_08001c88",
                "FUN_08005f5e"
            ],
            "imported": false,
            "current_name": "updateValue_08002470"
        },
        "FUN_08007004": {
            "renaming": {
                "FUN_08007004": "initialize_integer_08007004",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "data_ptr",
                "iVar2": "function_result"
            },
            "code": "void initialize_integer_08007004(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n    undefined *data_ptr = PTR_DAT_08007024;\n    *(undefined4 *)PTR_DAT_08007024 = 0;\n    int function_result = perform_operation(arg1, arg2, arg2, 0, arg3);\n    if ((function_result == -1) && (*(int *)data_ptr != 0))\n    {\n        *result = *(int *)data_ptr;\n    }\n    return;\n}",
            "called": [
                "FUN_0800571a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007004",
            "calling": [
                "FUN_08006dc8"
            ],
            "imported": false,
            "current_name": "initialize_integer_08007004"
        },
        "FUN_08006394": {
            "renaming": {
                "FUN_08006394": "parseFormatString_08006394",
                "param_1": "formatStringData",
                "param_2": "argList",
                "param_3": "outputBuffer",
                "param_4": "outputBufferLength",
                "puVar1": "ptr1",
                "iVar2": "result",
                "piVar3": "ptr2",
                "bVar4": "flag",
                "pbVar5": "pChar",
                "pbVar6": "pStart",
                "unaff_r9": "savedArgList",
                "iVar7": "tempResult",
                "local_8c": "argListPtr",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "width",
                "local_7c": "minWidth",
                "local_74": "totalCharsWritten",
                "local_70": "currentChar",
                "local_6f": "spaceChar",
                "local_6e": "zeroChar",
                "local_45": "signChar",
                "local_30": "temp"
            },
            "code": "\nint parseFormatString_08006394(int formatStringData,undefined *argList,byte *outputBuffer,int *outputBufferLength)\n\n{\n  undefined *ptr1;\n  int result;\n  int *ptr2;\n  bool flag;\n  byte *pChar;\n  byte *pStart;\n  int savedArgList;\n  int tempResult;\n  int *argListPtr;\n  uint flags;\n  int precision;\n  undefined4 width;\n  int minWidth;\n  int totalCharsWritten;\n  byte currentChar;\n  undefined spaceChar;\n  undefined zeroChar;\n  undefined signChar;\n  undefined4 temp;\n  \n  argListPtr = outputBufferLength;\n  if ((formatStringData != 0) && (*(int *)(formatStringData + 0x18) == 0)) {\n    FUN_08006cb4();\n  }\n  if (argList == PTR_DAT_080065a0) {\n    argList = *(undefined **)(formatStringData + 4);\n  }\n  else if (argList == PTR_DAT_080065a8) {\n    argList = *(undefined **)(formatStringData + 8);\n  }\n  else if (argList == PTR_DAT_080065ac) {\n    argList = *(undefined **)(formatStringData + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(argList + 0xc) << 0x1c)) || (*(int *)(argList + 0x10) == 0)) &&\n     (tempResult = FUN_080069e4(formatStringData,argList), tempResult != 0)) {\n    return -1;\n  }\n  totalCharsWritten = 0;\n  spaceChar = 0x20;\n  zeroChar = 0x30;\n  pChar = outputBuffer;\nLAB_080063d6:\n  pStart = pChar;\n  if (*pStart != 0) goto LAB_0800648c;\n  goto LAB_080063e0;\nLAB_0800648c:\n  pChar = pStart + 1;\n  if (*pStart != 0x25) goto LAB_080063d6;\nLAB_080063e0:\n  tempResult = (int)pStart - (int)outputBuffer;\n  if (tempResult != 0) {\n    result = FUN_08006370(formatStringData,argList,outputBuffer,tempResult);\n    if (result == -1) {\nLAB_08006580:\n      if ((int)((uint)*(ushort *)(argList + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return totalCharsWritten;\n    }\n    totalCharsWritten = totalCharsWritten + tempResult;\n  }\n  if (*pStart == 0) goto LAB_08006580;\n  flags = 0;\n  minWidth = 0;\n  precision = -1;\n  width = 0;\n  signChar = 0;\n  temp = 0;\n  pChar = pStart + 1;\n  while( true ) {\n    tempResult = FUN_08006e90(PTR_s___0__080065a4,*pChar);\n    ptr1 = PTR_DAT_080065b0;\n    outputBuffer = pChar + 1;\n    if (tempResult == 0) break;\n    flags = 1 << (tempResult - (int)PTR_s___0__080065a4 & 0xffU) | flags;\n    pChar = outputBuffer;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    signChar = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    signChar = 0x2b;\n  }\n  if (*pChar == 0x2a) {\n    ptr2 = argListPtr + 1;\n    tempResult = *argListPtr;\n    argListPtr = ptr2;\n    if (-1 < tempResult) goto LAB_080064b0;\n    minWidth = -tempResult;\n    flags = flags | 2;\n  }\n  else {\n    flag = false;\n    tempResult = minWidth;\n    outputBuffer = pChar;\n    while( true ) {\n      if (9 < *outputBuffer - 0x30) break;\n      tempResult = tempResult * 10 + (*outputBuffer - 0x30);\n      flag = true;\n      outputBuffer = outputBuffer + 1;\n    }\n    if (flag) {\nLAB_080064b0:\n      minWidth = tempResult;\n    }\n  }\n  if (*outputBuffer == 0x2e) {\n    if (outputBuffer[1] == 0x2a) {\n      outputBuffer = outputBuffer + 2;\n      ptr2 = argListPtr + 1;\n      precision = *argListPtr;\n      argListPtr = ptr2;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      flag = false;\n      tempResult = 0;\n      precision = 0;\n      while( true ) {\n        outputBuffer = outputBuffer + 1;\n        if (9 < *outputBuffer - 0x30) break;\n        tempResult = tempResult * 10 + (*outputBuffer - 0x30);\n        flag = true;\n      }\n      if (flag) {\n        precision = tempResult;\n      }\n    }\n  }\n  tempResult = FUN_08006e90(PTR_DAT_080065b0,*outputBuffer,3);\n  if (tempResult != 0) {\n    outputBuffer = outputBuffer + 1;\n    flags = flags | 0x40 << (tempResult - (int)ptr1 & 0xffU);\n  }\n  currentChar = *outputBuffer;\n  outputBuffer = outputBuffer + 1;\n  tempResult = FUN_08006e90(PTR_s_efgEFG_080065b4,currentChar,6);\n  if (tempResult == 0) {\n    tempResult = FUNC_080066b0(formatStringData,&flags,argList,DAT_080065bc,&argListPtr);\n  }\n  else {\n    tempResult = formatStringData;\n    if (DAT_080065b8 == 0) {\n      argListPtr = (int *)(((int)argListPtr + 7U & 0xfffffff8) + 8);\n      tempResult = savedArgList;\n      goto LAB_08006532;\n    }\n  }\n  if (tempResult == -1) goto LAB_08006580;\nLAB_08006532:\n  totalCharsWritten = totalCharsWritten + tempResult;\n  pChar = outputBuffer;\n  savedArgList = tempResult;\n  goto LAB_080063d6;\n}\n\n",
            "called": [
                "FUN_08006e90",
                "FUN_080066b0",
                "FUN_080069e4",
                "FUN_08006cb4",
                "FUN_08006370"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006394",
            "calling": [
                "FUN_08006174",
                "FUN_080068f0"
            ],
            "imported": false,
            "current_name": "parseFormatString_08006394"
        },
        "FUN_08005740": {
            "renaming": {
                "FUN_08005740": "set_data_pointer_to_22_08005740",
                "PTR_DAT_0800574c": "data_pointer"
            },
            "code": "void set_data_pointer_to_22_08005740(void)\n{\n  int* PTR_DAT_0800574c = (int*) PTR_DAT_0800574c;\n  *PTR_DAT_0800574c = 22;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005740",
            "calling": [
                "FUN_08006f00"
            ],
            "imported": false,
            "current_name": "set_data_pointer_to_22_08005740"
        },
        "FUN_08006158": {
            "renaming": {
                "FUN_08006158": "calculate_value_08006158",
                "param_1": "flag",
                "param_2": "value",
                "DAT_08006170": "data"
            },
            "code": "longlong calculate_value_08006158(undefined4 flag, uint value) {\n  if (DAT_08006170 != 0) {\n    return CONCAT44(flag,2);\n  }\n  return (ulonglong)value << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006158",
            "calling": [
                "FUN_08006112"
            ],
            "imported": false,
            "current_name": "calculate_value_08006158"
        },
        "FUN_08003688": {
            "renaming": {
                "FUN_08003688": "check_and_wait_08003688",
                "param_1": "flags",
                "puVar1": "global_ptr_1",
                "puVar2": "global_ptr_2",
                "iVar3": "start_time",
                "iVar4": "current_time",
                "uVar5": "result",
                "uVar6": "flag_value",
                "bVar7": "bool_flag"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined4 check_and_wait_08003688(uint *flags)\n\n{\n  uint *global_ptr_1;\n  uint *global_ptr_2;\n  int start_time;\n  int current_time;\n  undefined4 result;\n  uint flag_value;\n  bool bool_flag;\n  \n  global_ptr_1 = DAT_08003948;\n  if ((*flags & 1) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 4) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) != 0)))) {\n      if (((*DAT_08003948 & 0x20000) != 0) && (flags[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      flag_value = flags[1];\n      if (flag_value == 0x10000) {\n        *DAT_08003948 = *DAT_08003948 | 0x10000;\n      }\n      else if (flag_value == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (flag_value == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        *DAT_08003948 = *DAT_08003948 & 0xfffeffff;\n        *global_ptr_1 = *global_ptr_1 & 0xfffbffff;\n      }\n      if (flags[1] == 0) {\n        start_time = FUN_08001cc4();\n        while ((*DAT_08003948 & 0x20000) != 0) {\n          current_time = FUN_08001cc4();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        start_time = FUN_08001cc4();\n        while ((*DAT_08003948 & 0x20000) == 0) {\n          current_time = FUN_08001cc4();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 0) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) == 0)))) {\n      if (((*DAT_08003948 & 2) != 0) && (flags[4] != 1)) {\n        return 1;\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | flags[5] << 3;\n    }\n    else if (flags[4] == 0) {\n      *DAT_0800394c = 0;\n      start_time = FUN_08001cc4();\n      while ((*DAT_08003948 & 2) != 0) {\n        current_time = FUN_08001cc4();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_0800394c = 1;\n      start_time = FUN_08001cc4();\n      while ((*DAT_08003948 & 2) == 0) {\n        current_time = FUN_08001cc4();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | flags[5] << 3;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flags[6] == 0) {\n      *DAT_08003950 = 0;\n      start_time = FUN_08001cc4();\n      while ((DAT_08003948[9] & 2) != 0) {\n        current_time = FUN_08001cc4();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08003950 = 1;\n      start_time = FUN_08001cc4();\n      while ((DAT_08003948[9] & 2) == 0) {\n        current_time = FUN_08001cc4();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      FUN_0800365c(1);\n    }\n  }\n  if ((*flags & 4) != 0) {\n    bool_flag = (DAT_08003948[7] & 0x10000000) == 0;\n    if (bool_flag) {\n      DAT_08003948[7] = DAT_08003948[7] | 0x10000000;\n    }\n    if ((*DAT_08003954 & 0x100) == 0) {\n      *DAT_08003954 = *DAT_08003954 | 0x100;\n      start_time = FUN_08001cc4();\n      while ((*DAT_08003954 & 0x100) == 0) {\n        current_time = FUN_08001cc4();\n        if (100 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    global_ptr_2 = DAT_08003a60;\n    global_ptr_1 = DAT_08003948;\n    flag_value = flags[3];\n    if (flag_value == 1) {\n      DAT_08003948[8] = DAT_08003948[8] | 1;\n    }\n    else if (flag_value == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (flag_value == 5) {\n      DAT_08003a60[8] = DAT_08003a60[8] | 4;\n      global_ptr_2[8] = global_ptr_2[8] | 1;\n    }\n    else {\n      DAT_08003948[8] = DAT_08003948[8] & 0xfffffffe;\n      global_ptr_1[8] = global_ptr_1[8] & 0xfffffffb;\n    }\n    if (flags[3] == 0) {\n      start_time = FUN_08001cc4();\n      while ((DAT_08003a60[8] & 2) != 0) {\n        current_time = FUN_08001cc4();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      start_time = FUN_08001cc4();\n      while ((DAT_08003948[8] & 2) == 0) {\n        current_time = FUN_08001cc4();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    if (bool_flag) {\n      DAT_08003a60[7] = DAT_08003a60[7] & 0xefffffff;\n    }\n  }\n  if (flags[7] == 0) {\n    result = 0;\n  }\n  else if ((DAT_08003a60[1] & 0xc) == 8) {\n    result = 1;\n  }\n  else if (flags[7] == 2) {\n    *DAT_08003a64 = 0;\n    start_time = FUN_08001cc4();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        if (flags[8] == 0x10000) {\n          DAT_08003a60[1] = DAT_08003a60[1] & 0xfffdffff | flags[2];\n        }\n        DAT_08003a60[1] = DAT_08003a60[1] & 0xffc2ffff | flags[8] | flags[9];\n        *DAT_08003a64 = 1;\n        start_time = FUN_08001cc4();\n        do {\n          if ((*DAT_08003a60 & 0x2000000) != 0) {\n            return 0;\n          }\n          current_time = FUN_08001cc4();\n        } while ((uint)(current_time - start_time) < 3);\n        return 3;\n      }\n      current_time = FUN_08001cc4();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  else {\n    *DAT_08003a64 = 0;\n    start_time = FUN_08001cc4();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        return 0;\n      }\n      current_time = FUN_08001cc4();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_0800365c",
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003688",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "check_and_wait_08003688"
        },
        "FUN_08004ec4": {
            "renaming": {
                "FUN_08004ec4": "process_input_and_call_function_08004ec4",
                "param_1": "input_param",
                "iVar1": "function_pointer_address"
            },
            "code": "void process_input_and_call_function_08004ec4(undefined4 input_param)\n{\n  int function_pointer_address = get_function_pointer_address();\n  if (((*(code **)(function_pointer_address + 0x60) != (code *)0x0) && (*(char *)(function_pointer_address + 0x5c) == '\\x01')) && (*(char *)(function_pointer_address + 0x2c) != ' ')) {\n    (**(code **)(function_pointer_address + 0x60))(function_pointer_address + 0x68);\n  }\n  process_input(input_param);\n  return;\n}",
            "called": [
                "FUN_08002c10",
                "FUN_08004e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ec4",
            "calling": [
                "FUN_0800316c",
                "FUN_08002d1c",
                "FUN_080032b4"
            ],
            "imported": false,
            "current_name": "process_input_and_call_function_08004ec4"
        },
        "FUN_08000178": {
            "renaming": {
                "FUN_08000178": "find_end_of_string_08000178",
                "param_1": "str",
                "pcVar2": "current_char",
                "pcVar3": "current_char",
                "cVar1": "current_char_value"
            },
            "code": "char* find_end_of_string_08000178(char* str) {\n  char* current_char = str;\n  while (*current_char != '\\0') {\n    current_char++;\n  }\n  return current_char;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000178",
            "calling": [
                "FUN_08005c96",
                "FUN_08005ce8"
            ],
            "imported": false,
            "current_name": "find_end_of_string_08000178"
        },
        "FUN_08004418": {
            "renaming": {
                "FUN_08004418": "do_nothing_08004418"
            },
            "code": "\nvoid do_nothing_08004418(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004418",
            "calling": [
                "FUN_0800441a"
            ],
            "imported": false,
            "current_name": "do_nothing_08004418"
        },
        "FUN_08006c88": {
            "renaming": {
                "FUN_08006c88": "allocate_memory_for_struct_08006c88",
                "param_1": "num_structs",
                "param_2": "struct_size",
                "puVar1": "struct_ptr",
                "iVar2": "total_size",
                "FUN_08006288": "allocate_memory",
                "FUN_080061e0": "initialize_memory"
            },
            "code": "undefined4* allocate_memory_for_struct_08006c88(int num_structs, int struct_size)\n{\n    undefined4* struct_ptr;\n    int total_size = (num_structs - 1) * struct_size + 0x74;\n    struct_ptr = (undefined4*)allocate_memory(total_size);\n    if(struct_ptr != NULL)\n    {\n        *struct_ptr = 0;\n        *(struct_ptr + 1) = num_structs;\n        *(struct_ptr + 2) = struct_ptr + 3;\n        initialize_memory((struct_ptr + 3), 0, total_size - 0x68);\n    }\n    return struct_ptr;\n}",
            "called": [
                "FUN_08006288",
                "FUN_080061e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c88",
            "calling": [
                "FUN_08006d14"
            ],
            "imported": false,
            "current_name": "allocate_memory_for_struct_08006c88"
        },
        "FUN_080060e4": {
            "renaming": {
                "FUN_080060e4": "check_if_valid_080060e4",
                "iVar1": "index",
                "FUN_08005f8c": "get_index",
                "PTR_DAT_08006100": "data_pointer",
                "ptr": "data_pointer_at_index",
                "*ptr": "data_at_index",
                "FUN_080060d4": "perform_action"
            },
            "code": "void check_if_valid_080060e4() {\n    int index = get_index();\n    int* ptr = (int*)(PTR_DAT_08006100 + index * 0x14 + 0xc);\n    if (*ptr != 0) {\n        perform_action();\n    }\n    return;\n}",
            "called": [
                "FUN_08005f8c",
                "FUN_080060d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060e4",
            "calling": [
                "FUN_0800282c"
            ],
            "imported": false,
            "current_name": "check_if_valid_080060e4"
        },
        "FUN_0800258c": {
            "renaming": {
                "FUN_0800258c": "get_value_from_param_0800258c",
                "param_1": "param",
                "uVar1": "value",
                "puVar2": "ptr",
                "DAT_0800261c": "PTR_DAT_0800261c",
                "DAT_08002620": "PTR_DAT_08002620"
            },
            "code": "uint get_value_from_param_0800258c(uint **param)\n{\n    uint value;\n    if (*(char *)((int)param + 0x21) != '\\x02') {\n        param[0xe] = (uint *)0x4;\n        return 1;\n    }\n    **param = **param & 0xfffffff1;\n    **param = **param & 0xfffffffe;\n    uint *ptr = *param;\n    if (ptr == DAT_0800261c) {\n        value = 1;\n    }\n    else if (ptr == DAT_0800261c + 5) {\n        value = 0x10;\n    }\n    else if (ptr == DAT_0800261c + 10) {\n        value = 0x100;\n    }\n    else if (ptr == DAT_0800261c + 0xf) {\n        value = 0x1000;\n    }\n    else if (ptr == DAT_0800261c + 0x14) {\n        value = 0x10000;\n    }\n    else if (ptr == DAT_0800261c + 0x19) {\n        value = 0x100000;\n    }\n    else {\n        value = 0x1000000;\n    }\n    *(uint *)(DAT_08002620 + 4) = value;\n    *(char *)((int)param + 0x21) = 1;\n    *(uint *)(param + 8) = 0;\n    if (param[0xd] != (uint *)0x0) {\n        (*(void (*)())param[0xd])();\n        return 0;\n    }\n    return 0;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800258c",
            "calling": [
                "FUN_0800316c",
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "get_value_from_param_0800258c"
        },
        "FUN_08004e20": {
            "renaming": {
                "FUN_08004e20": "checkPointerValidity_08004e20",
                "PTR_DAT_08004e30": "pointerData",
                "FUN_08003f18": "callFunctionToHandleInvalidPointer"
            },
            "code": "void checkPointerValidity_08004e20(void)\n{\n  int* pointer = (int*)PTR_DAT_08004e30;\n  if (*pointer != 0) {\n    callFunctionToHandleInvalidPointer();\n  }\n  return;\n}",
            "called": [
                "FUN_08003f18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e20",
            "calling": [],
            "imported": false,
            "current_name": "checkPointerValidity_08004e20"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "wait_forever_0800573c"
            },
            "code": "void wait_forever_0800573c(void)\n{\n  while( true )\n  {\n    // Do nothing block with infinite loop\n  }\n}",
            "called": [
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "FUN_08006ac0",
                "FUN_0800573c"
            ],
            "imported": false,
            "current_name": "wait_forever_0800573c"
        },
        "FUN_080032b4": {
            "renaming": {
                "FUN_080032b4": "process_input_080032b4",
                "param_1": "input",
                "cVar1": "current_char",
                "puVar2": "ptr_1",
                "puVar3": "ptr_2"
            },
            "code": "uint32_t process_input_080032b4(uint32_t **input)\n{\n    char current_char = *(char *)((int)input + 0x3d);\n    (*input)[1] = (*input)[1] & 0xfffff8ff;\n    **input = **input | 1;\n    **input = **input & 0xfffffbff;\n    uint32_t *ptr_1 = *input;\n    if ((ptr_1[1] & 0x800) != 0)\n    {\n        if ((*(char *)((int)input + 0x3d) == '\"') || (*(char *)((int)input + 0x3d) == '*'))\n        {\n            *(short *)((int)input + 0x2a) = (short)*(uint32_t *)(*input[0xe] + 4);\n        }\n        else\n        {\n            *(short *)((int)input + 0x2a) = (short)*(uint32_t *)(*input[0xd] + 4);\n        }\n    }\n    if (*(short *)((int)input + 0x2a) != 0)\n    {\n        if ((ptr_1[5] & 4) != 0)\n        {\n            uint32_t *ptr_2 = input[9];\n            input[9] = (uint32_t *)((int)ptr_2 + 1);\n            *(char *)ptr_2 = (char)ptr_1[4];\n            *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n        }\n        if (((*input)[5] & 0x40) != 0)\n        {\n            ptr_1 = input[9];\n            input[9] = (uint32_t *)((int)ptr_1 + 1);\n            *(char *)ptr_1 = (char)(*input)[4];\n            *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n        }\n        input[0x10] = (uint32_t *)((uint32_t)input[0x10] | 4);\n    }\n    if (input[0x10] == (uint32_t *)0x0)\n    {\n        if (((current_char == '(') || (current_char == '*')) || (current_char == ')'))\n        {\n            input[0xb] = PTR_DAT_080033b4;\n            input[0xc] = (uint32_t *)0x0;\n            *(undefined *)((int)input + 0x3d) = 0x20;\n            *(undefined *)((int)input + 0x3e) = 0;\n            FUN_08004ec4();\n        }\n        else if ((input[0xc] == (uint32_t *)0x22) || (current_char == '\"'))\n        {\n            input[0xc] = (uint32_t *)0x0;\n            *(undefined *)((int)input + 0x3d) = 0x20;\n            *(undefined *)((int)input + 0x3e) = 0;\n            do_nothing_08002ca4();\n        }\n    }\n    else\n    {\n        FUN_0800316c();\n    }\n    return 0;\n}",
            "called": [
                "FUN_0800316c",
                "FUN_08002ca4",
                "FUN_08004ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032b4",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_080032b4"
        },
        "FUN_08004d06": {
            "renaming": {
                "FUN_08004d06": "compare_and_return_08004d06",
                "param_1": "num1",
                "param_2": "num2",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int compare_and_return_08004d06(int num1, int num2) {\n  if (num1 != num2) {\n    if (num1 == 0) {\n      return num2;\n    }\n    if (num2 == 0) {\n      return num1;\n    }\n    num1 = 0;\n  }\n  return num1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d06",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "compare_and_return_08004d06"
        },
        "FUN_080056d8": {
            "renaming": {
                "FUN_080056d8": "calculate_offset_080056d8",
                "param_1": "base_offset",
                "iVar1": "current_offset",
                "puVar2": "next_address"
            },
            "code": "int calculate_offset_080056d8(int base_offset){\n  int current_offset = *(int *)PTR_DAT_08005708;\n  undefined *next_address = (undefined *)(base_offset + current_offset);\n  if (next_address <= &stack0x00000000){\n    *(undefined **)PTR_DAT_08005708 = next_address;\n    return current_offset;\n  }\n  *(undefined4 *)PTR_DAT_08005710 = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d8",
            "calling": [
                "FUN_08006920"
            ],
            "imported": false,
            "current_name": "calculate_offset_080056d8"
        },
        "FUN_080019f6": {
            "renaming": {
                "FUN_080019f6": "process_data_080019f6",
                "param_1": "data_address",
                "uVar2": "result",
                "uVar3": "data_ptr_1",
                "uVar4": "data_ptr_2",
                "uVar5": "data_ptr_4",
                "iVar1": "result",
                "FUN_08000a18": "process_data_2",
                "FUN_080009dc": "process_data_1"
            },
            "code": "void process_data_080019f6(int data_address)\n{\n  int result;\n  undefined4 *data_ptr_1;\n  undefined4 *data_ptr_2;\n  undefined4 *data_ptr_3;\n  undefined4 *data_ptr_4;\n  data_ptr_1 = *(undefined4 **)(data_address + 0x3c);\n  data_ptr_2 = data_ptr_1[1];\n  *(undefined4 *)(data_address + 0x48) = data_ptr_1;\n  *(undefined4 *)(data_address + 0x4c) = data_ptr_2;\n  data_ptr_3 = *(undefined4 **)(data_address + 0x38);\n  data_ptr_4 = data_ptr_3[1];\n  *(undefined4 *)(data_address + 0x50) = *data_ptr_3;\n  *(undefined4 *)(data_address + 0x54) = data_ptr_4;\n  result = process_data_080019f6_2(data_ptr_1, data_ptr_2, *(undefined4 *)(data_address + 0x68), *(undefined4 *)(data_address + 0x6c));\n  if (result == 0) {\n    data_ptr_3 = *(undefined4 *)(data_address + 0x60);\n    data_ptr_4 = *(undefined4 *)(data_address + 100);\n    result = process_data_080019f6_1(data_ptr_1, data_ptr_2, data_ptr_3, data_ptr_4);\n    if (result != 0) {\n      *(undefined4 *)(data_address + 0x48) = data_ptr_3;\n      *(undefined4 *)(data_address + 0x4c) = data_ptr_4;\n    }\n    return;\n  }\n  *(undefined4 *)(data_address + 0x48) = *(undefined4 *)(data_address + 0x68);\n  *(undefined4 *)(data_address + 0x4c) = *(undefined4 *)(data_address + 0x6c);\n  return;\n}",
            "called": [
                "FUN_08000a18",
                "FUN_080009dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019f6",
            "calling": [
                "FUN_08001a44"
            ],
            "imported": false,
            "current_name": "process_data_080019f6"
        },
        "FUN_08002f9c": {
            "renaming": {
                "FUN_08002f9c": "parse_input_08002f9c",
                "param_1": "input",
                "puVar1": "ptr1",
                "input_char": "input_char_3d",
                "input_short": "input_short_2a",
                "input_b": "input_b",
                "input_c": "input_c",
                "input_4": "input_4",
                "input_1": "input_1",
                "input_9": "input_9",
                "input_char_3d": "input_char_3d",
                "input_char_3e": "input_char_3e"
            },
            "code": "uint32_t parse_input_08002f9c(uint32_t **input)\n{\n    uint32_t *ptr1;\n    uint32_t status = 0;\n\n    char input_char = *(char *)((int)input + 0x3d);\n    uint16_t input_short = *(uint16_t *)((int)input + 0x2a);\n    uint32_t *input_b = input[0xb];\n    uint32_t *input_c = input[0xc];\n    uint32_t *input_4 = &(*input)[4];\n    uint32_t *input_1 = &(*input)[1];\n    uint32_t *input_9 = input[9];\n    char input_char_3d = *(char *)((int)input + 0x3d);\n    char input_char_3e = *(char *)((int)input + 0x3e);\n\n    if (input_char == '\"') {\n        if (input_short < 4) {\n            if (input_short - 2 < 2) {\n                if (input_b == (uint32_t *)0x2) {\n                    **input |= 0x400;\n                }\n                else {\n                    **input &= 0xfffffbff;\n                    **input |= 0x800;\n                }\n                *input_1 &= 0xfffffbff;\n            }\n            else {\n                if (input_b == (uint32_t *)0x2) {\n                    **input |= 0x400;\n                }\n                else {\n                    **input &= 0xfffffbff;\n                }\n                *input_1 &= 0xfffff8ff;\n                ptr1 = input[9];\n                input[9] = (uint32_t *)((int)ptr1 + 1);\n                *(char *)ptr1 = (char)(*input_4);\n                input_short -= 1;\n                input_char_3d = 0x20;\n                input_c = (uint32_t *)0x0;\n                if (input_char_3e == '@') {\n                    input_char_3e = 0;\n                    do_nothing_08002f9a();\n                }\n                else {\n                    input_char_3e = 0;\n                    do_nothing_08002c50();\n                }\n            }\n        }\n        else {\n            ptr1 = input[9];\n            input[9] = (uint32_t *)((int)ptr1 + 1);\n            *(char *)ptr1 = (char)(*input_4);\n            input_short -= 1;\n        }\n    }\n    return status;\n}",
            "called": [
                "FUN_08002c50",
                "FUN_08002f9a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9c",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "parse_input_08002f9c"
        },
        "FUN_08005510": {
            "renaming": {
                "FUN_08005510": "create_and_store_08005510",
                "param_1": "object_address",
                "param_2": "object_value",
                "param_3": "object_type",
                "param_4": "object_size",
                "iVar1": "is_valid_object",
                "uVar2": "object_index"
            },
            "code": "void create_and_store_08005510(int object_address, int object_value, int object_type, int object_size) {\n    int is_valid_object = check_valid_object(object_address);\n    if (is_valid_object == 0) {\n        uint object_index = (uint)*(byte *)(object_address + OBJECT_INDEX_OFFSET);\n        *(int *)(OBJECT_VALUES_START + object_index * 4) = object_value;\n        *(int *)(OBJECT_TYPES_START + object_index * 4) = object_type;\n        execute_object_function((int)*(char *)(object_address + OBJECT_FUNTION_OFFSET), object_index, object_size, object_type);\n        execute_other_function((int)*(char *)(object_address + OBJECT_OTHER_FUNTION_OFFSET));\n        execute_another_function(*(int *)(OBJECT_ANOTHER_FUNTION_START + object_index * 4), object_address + OBJECT_ANOTHER_OFFSET, object_size);\n    }\n}",
            "called": [
                "FUN_080045a2",
                "FUN_08002494",
                "FUN_0800548c",
                "FUN_080024f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005510",
            "calling": [
                "FUN_08005a68"
            ],
            "imported": false,
            "current_name": "create_and_store_08005510"
        },
        "FUN_08002f9a": {
            "renaming": {
                "FUN_08002f9a": "do_nothing_08002f9a"
            },
            "code": "\nvoid do_nothing_08002f9a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9a",
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "imported": false,
            "current_name": "do_nothing_08002f9a"
        },
        "FUN_08005750": {
            "renaming": {
                "FUN_08005750": "get_one_08005750"
            },
            "code": "int get_one_08005750() {\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005750",
            "calling": [
                "thunk_FUN_08005750"
            ],
            "imported": false,
            "current_name": "get_one_08005750"
        },
        "FUN_08002cf2": {
            "renaming": {
                "FUN_08002cf2": "process_data_08002cf2",
                "param_1": "data_ptr",
                "param_2": "flag",
                "param_3": "data1",
                "param_4": "data2",
                "uVar1": "data_value",
                "uVar2": "data_offset"
            },
            "code": "int process_data_08002cf2(int *data_ptr, int flag, int data1, int data2)\n{\n  int data_offset = *(int *)(*data_ptr + 0x18);\n  int data_value;\n  if ((data_offset & 0x80) == 0) {\n    data_value = *(int *)(data_ptr + 3);\n  }\n  else {\n    data_value = *(int *)(data_ptr + 6);\n  }\n  process_data_08002cf2_helper(data_ptr, (data_offset & 4) == 0, data_value, data_offset, data2);\n  return 0;\n}",
            "called": [
                "FUN_08004e74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002cf2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_data_08002cf2"
        },
        "FUN_08006288": {
            "renaming": {
                "FUN_08006288": "allocate_memory_block_08006288",
                "param_1": "result",
                "param_2": "size",
                "puVar1": "pointer_1",
                "uVar2": "var_2",
                "puVar3": "pointer_3",
                "iVar4": "var_4",
                "puVar5": "pointer_5",
                "uVar6": "var_6",
                "puVar7": "pointer_7",
                "uVar8": "var_8"
            },
            "code": "uint allocate_memory_block_08006288(undefined4 *result, uint size)\n{\n  uint *prev_block;\n  uint *current_block;\n  uint block_size;\n  uint adjusted_size;\n  \n  adjusted_size = (size + 3 & 0xfffffffc) + 8;\n  if (adjusted_size < 0xc) {\n    adjusted_size = 0xc;\n  }\n  if (((int)adjusted_size < 0) || (adjusted_size < size)) {\n    *result = 0xc;\n  }\n  else {\n    do_nothing_08006eac();\n    prev_block = PTR_DAT_08006340;\n    current_block = *(uint **)PTR_DAT_0800633c;\n    while (prev_block = current_block, prev_block != (uint *)0x0) {\n      block_size = *prev_block - adjusted_size;\n      if (-1 < (int)block_size) {\n        if (block_size < 0xc) {\n          if (prev_block == current_block) {\n            adjusted_size = prev_block[1];\n            *(uint *)PTR_DAT_0800633c = adjusted_size;\n          }\n          else {\n            adjusted_size = current_block[1];\n          }\n          if (prev_block != current_block) {\n            prev_block[1] = adjusted_size;\n            prev_block = current_block;\n          }\n        }\n        else {\n          *prev_block = block_size;\n          *(uint *)((int)prev_block + block_size) = adjusted_size;\n          prev_block = (uint *)((int)prev_block + block_size);\n        }\n        goto LAB_080062ec;\n      }\n      current_block = (uint *)current_block[1];\n    }\n    if (*(int *)PTR_DAT_08006340 == 0) {\n      result = FUN_08006920(result);\n      *(undefined4 *)prev_block = result;\n    }\n    current_block = (uint *)FUN_08006920(result,adjusted_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((prev_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == prev_block ||\n        (block_size = FUN_08006920(result,(int)prev_block - (int)current_block), block_size != -1)))) {\n      *prev_block = adjusted_size;\nLAB_080062ec:\n      do_nothing_08006eae(result);\n      adjusted_size = (int)prev_block + 0xbU & 0xfffffff8;\n      block_size = adjusted_size - (int)(prev_block + 1);\n      if (block_size != 0) {\n        *(int *)((int)prev_block + block_size) = -block_size;\n        return adjusted_size;\n      }\n      return adjusted_size;\n    }\n    *result = 0xc;\n    do_nothing_08006eae(result);\n  }\n  return 0;\n}\n",
            "called": [
                "FUN_08006920",
                "FUN_08006eac",
                "FUN_08006eae"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006288",
            "calling": [
                "FUN_08006c88",
                "FUN_08006e10"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08006288"
        },
        "FUN_08002004": {
            "renaming": {
                "FUN_08002004": "check_flag_initialized_08002004",
                "param_1": "flag_ptr",
                "iVar1": "result",
                "puVar2": "ptr",
                "DAT_080020e8": "original_ptr"
            },
            "code": "int check_flag_initialized_08002004(undefined4 *flag_ptr) {\n  int result;\n  undefined4 *ptr;\n  \n  if (*(char *)(flag_ptr + 9) != '\\x01') {\n    *(undefined *)(flag_ptr + 9) = 1;\n    result = initialize_flag();\n    if (result == 0) {\n      flag_ptr[10] = (flag_ptr[10] & 0xfffffcfe) | 0x100;\n      ptr = (undefined4 *)*flag_ptr;\n      if ((ptr == DAT_080020e8) && ((DAT_080020e8[-0xff] & 0xf0000) != 0)) {\n        flag_ptr[10] |= 0x100000;\n        if ((*(uint *)(DAT_080020e8 + 4) & 0x400) != 0) {\n          flag_ptr[10] = (flag_ptr[10] & 0xffffcfff) | 0x1000;\n        }\n      }\n      else {\n        flag_ptr[10] &= 0xffefffff;\n        if ((ptr[1] & 0x400) != 0) {\n          flag_ptr[10] = (flag_ptr[10] & 0xffffcfff) | 0x1000;\n        }\n      }\n      if ((flag_ptr[10] & 0x1000) == 0) {\n        flag_ptr[0xb] = 0;\n      }\n      else {\n        flag_ptr[0xb] &= 0xfffffff9;\n      }\n      *(undefined *)(flag_ptr + 9) = 0;\n      *ptr = 0xfffffffd;\n      flag_ptr = (undefined4 *)*flag_ptr;\n      if (((flag_ptr[2] & 0xe0000) == 0xe0000) && ((flag_ptr != DAT_080020e8 || ((DAT_080020e8[-0xff] & 0xf0000) == 0)))) {\n        flag_ptr[2] |= 0x500000;\n      }\n      else {\n        flag_ptr[2] |= 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(flag_ptr + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}",
            "called": [
                "FUN_08001f84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002004",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "check_flag_initialized_08002004"
        },
        "FUN_08005754": {
            "renaming": {
                "FUN_08005754": "get_data_08005754",
                "param_1": "data_index",
                "bVar1": "is_valid_index",
                "cVar2": "data_value",
                "uVar3": "return_value",
                "uVar4": "shift_value"
            },
            "code": "uint get_data_08005754(uint data_index)\n{\n  bool is_valid_index;\n  char data_value;\n  uint return_value;\n  uint shift_value;\n  \n  if (data_index < 14) {\n    if (data_index + 46 < 60) {\n      is_valid_index = true;\n    }\n    else {\n      is_valid_index = false;\n    }\n  }\n  else {\n    is_valid_index = data_index < 60;\n  }\n  if (is_valid_index) {\n    if (data_index < 14) {\n      data_index += 46;\n    }\n    data_value = PTR_DAT_080057ac[data_index];\n  }\n  else {\n    data_value = -1;\n  }\n  if (data_value == -1) {\n    return_value = 0;\n  }\n  else {\n    return_value = FUN_08004a4c();\n    shift_value = *(uint *)PTR_DAT_080057b0;\n    if (shift_value != 12) {\n      if (shift_value < 12) {\n        return return_value >> (12 - shift_value);\n      }\n      return return_value << (shift_value - 12);\n    }\n  }\n  return return_value;\n}",
            "called": [
                "FUN_08004a4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005754",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "get_data_08005754"
        },
        "FUN_08005fc8": {
            "renaming": {
                "FUN_08005fc8": "initialize_data_08005fc8",
                "param_1": "count",
                "param_2": "value",
                "puVar1": "data_ptr"
            },
            "code": "void initialize_data_08005fc8(int count, int value, undefined4 param_3, undefined4 param_4)\n{\n  undefined *data_ptr;\n  data_ptr = PTR_DAT_08006068;\n  if (count != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    *PTR_DAT_08006068 = 6;\n    *(undefined4 *)(data_ptr + 0xc) = 0;\n    data_ptr[0x14] = 7;\n    *(undefined4 *)(data_ptr + 0x20) = 0;\n    data_ptr[0x28] = 8;\n    *(undefined4 *)(data_ptr + 0x34) = 0;\n    data_ptr[0x3c] = 9;\n    *(undefined4 *)(data_ptr + 0x48) = 0;\n    data_ptr[0x50] = 10;\n    *(undefined4 *)(data_ptr + 0x5c) = 0;\n    data_ptr[100] = 0x17;\n    *(undefined4 *)(data_ptr + 0x70) = 0;\n    data_ptr[0x78] = 0x17;\n    *(undefined4 *)(data_ptr + 0x84) = 0;\n    data_ptr[0x8c] = 0x17;\n    *(undefined4 *)(data_ptr + 0x98) = 0;\n    data_ptr[0xa0] = 0x17;\n    *(undefined4 *)(data_ptr + 0xac) = 0;\n    data_ptr[0xb4] = 0x17;\n    *(undefined4 *)(data_ptr + 0xc0) = 0;\n    data_ptr[200] = 0x28;\n    *(undefined4 *)(data_ptr + 0xd4) = 0;\n    data_ptr[0xdc] = 0x28;\n    *(undefined4 *)(data_ptr + 0xe8) = 0;\n    data_ptr[0xf0] = 0x28;\n    *(undefined4 *)(data_ptr + 0xfc) = 0;\n    data_ptr[0x104] = 0x28;\n    *(undefined4 *)(data_ptr + 0x110) = 0;\n    data_ptr[0x118] = 0x28;\n    *(undefined4 *)(data_ptr + 0x124) = 0;\n    data_ptr[300] = 0x28;\n    *(undefined4 *)(data_ptr + 0x138) = 0;\n    FUN_08006112(0,PTR_LAB_08005fa0_1_08006070,PTR_DAT_0800606c,data_ptr,param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_08006112"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fc8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_08005fc8"
        },
        "FUN_08002ab8": {
            "renaming": {
                "FUN_08002ab8": "increment_byte_at_ninth_param_08002ab8",
                "param_1": "param_array",
                "pbVar1": "byte_ptr",
                "short_ptr": "short_ptr",
                "uint_ptr": "uint_ptr"
            },
            "code": "int increment_byte_at_ninth_param_08002ab8(int *param_array)\n{\n  short *short_ptr = (short *)((int)param_array + 0x2a);\n  if (*short_ptr != 0) {\n    byte *byte_ptr = (byte *)param_array[9];\n    param_array[9] = (int)(byte_ptr + 1);\n    uint *uint_ptr = (uint *)(*param_array + 0x10);\n    *uint_ptr = (uint)*byte_ptr;\n    *short_ptr -= 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ab8",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "increment_byte_at_ninth_param_08002ab8"
        },
        "FUN_080068f0": {
            "renaming": {
                "FUN_080068f0": "process_data_080068f0",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "iVar1": "ptr",
                "uVar2": "arg1",
                "uStack_c": "arg2",
                "uStack_8": "arg3",
                "uStack_4": "arg4",
                "PTR_PTR_DAT_0800691c": "PTR_PTR_DAT_0800691c",
                "FUN_08006cb4": "cleanup",
                "FUN_08006394": "execute_function"
            },
            "code": "void process_data_080068f0(undefined4 data1, undefined4 data2, undefined4 data3, undefined4 data4)\n{\n  int ptr = *(int *)PTR_PTR_DAT_0800691c;\n  undefined4 arg1 = data1;\n  undefined4 arg2 = data2;\n  undefined4 arg3 = data3;\n  undefined4 arg4 = data4;\n  \n  if ((ptr != 0) && (*(int *)(ptr + 0x18) == 0)) {\n    cleanup(ptr);\n  }\n  execute_function(ptr, *(undefined4 *)(ptr + 8), data1, &arg2, arg1, &arg2);\n  return;\n}",
            "called": [
                "FUN_08006cb4",
                "FUN_08006394"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080068f0",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "process_data_080068f0"
        },
        "FUN_080066b0": {
            "renaming": {
                "FUN_080066b0": "FUNC_080066b0"
            },
            "code": "\nuint FUNC_080066b0(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_0800686a;\n          if (bVar1 != 0x58) goto LAB_080066e0;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_080068ec;\nLAB_080067fa:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_08006790:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_080066e0;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_08006700;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08006700:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_080068ec;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_0800682e;\nLAB_080068dc:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_080068dc;\n          }\n          else {\nLAB_0800682e:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_080067d6;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08006740:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_08006766:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_08006774;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08006774:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_080068ec;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_08006790;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_08006726:\n            puVar5 = PTR_s_0123456789abcdef_080068e8;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_080067fa;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_08006766;\n          if (bVar1 == 0x78) goto LAB_08006726;\n        }\nLAB_080066e0:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08006740;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = FUN_08006e90(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080067d6;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_08006856;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_08006856:\n    *puVar3 = uVar6;\n  }\nLAB_0800686a:\n  param_2[4] = 0;\nLAB_080067d6:\n  iVar2 = FUN_080065c0(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_080067ea:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_080067ea;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08006e90",
                "FUN_080065c0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080066b0",
            "calling": [
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "FUNC_080066b0"
        },
        "FUN_08002c52": {
            "renaming": {
                "FUN_08002c52": "do_nothing_08002c52"
            },
            "code": "\nvoid do_nothing_08002c52(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c52",
            "calling": [
                "FUN_08002d1c",
                "FUN_08002c54"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c52"
        },
        "FUN_0800138e": {
            "renaming": {
                "FUN_0800138e": "set_flag_and_call_0800138e",
                "param_1": "data_ptr",
                "param_2": "flag",
                "param_3": "param_3",
                "param_4": "param_4",
                "bVar1": "original_flag"
            },
            "code": "void set_flag_and_call_0800138e(int data_ptr, unsigned char flag, int param_3, int param_4)\n{\n    unsigned char original_flag = *(unsigned char *)(data_ptr + 0x14);\n    *(unsigned char *)(data_ptr + 0x14) = original_flag | flag;\n    call_function(data_ptr, original_flag | 0xc, 0, param_4, param_4);\n    return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800138e",
            "calling": [
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "set_flag_and_call_0800138e"
        },
        "FUN_08002c50": {
            "renaming": {
                "FUN_08002c50": "do_nothing_08002c50"
            },
            "code": "\nvoid do_nothing_08002c50(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c50",
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c50"
        },
        "FUN_0800598a": {
            "renaming": {
                "FUN_0800598a": "update_data_0800598a",
                "param_1": "data_ptr",
                "iVar1": "status_code",
                "uVar2": "data_index",
                "local_9": "data_value"
            },
            "code": "void update_data_0800598a(int data_ptr)\n{\n  int status_code;\n  ushort data_index;\n  undefined data_value;\n  status_code = get_data(data_ptr,&data_value);\n  if ((status_code == 0) &&\n     (data_index = *(short *)(data_ptr + 0x60) + 1U & 0x3f, data_index != *(ushort *)(data_ptr + 0x62))) {\n    *(undefined *)(*(int *)(data_ptr + 0x5c) + (uint)*(ushort *)(data_ptr + 0x60)) = data_value;\n    *(ushort *)(data_ptr + 0x60) = data_index;\n  }\n  return;\n}",
            "called": [
                "FUN_080054d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800598a",
            "calling": [],
            "imported": false,
            "current_name": "update_data_0800598a"
        },
        "FUN_08001c88": {
            "renaming": {
                "FUN_08001c88": "set_flag_and_call_functions_08001c88",
                "FUN_08002470": "call_function_1",
                "FUN_08001c3c": "call_function_2",
                "do_nothing_08001c3a": "do_nothing",
                "DAT_08001ca8": "data_pointer"
            },
            "code": "int set_flag_and_call_functions_08001c88() {\n  *DAT_08001ca8 = *DAT_08001ca8 | 0x10;\n  call_function_1(3);\n  call_function_2(0xf);\n  do_nothing();\n  return 0;\n}",
            "called": [
                "FUN_08002470",
                "FUN_08001c3a",
                "FUN_08001c3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c88",
            "calling": [
                "FUN_08004c52"
            ],
            "imported": false,
            "current_name": "set_flag_and_call_functions_08001c88"
        },
        "FUN_08001a44": {
            "renaming": {
                "FUN_08001a44": "set_flag_if_second_param_is_one_08001a44",
                "param_1": "address",
                "param_2": "value",
                "uVar1": "flag",
                "PTR_": "PTR_",
                "DAT_": "DAT_",
                "*(char *)(param_1 + 0x70)": "*(char *)(address + 0x70)",
                "undefined": "bool",
                "*(undefined *)(param_1 + 0x70)": "*(bool *)(address + 0x70)",
                "FUN_080019f6": "initialize_flag"
            },
            "code": "void set_flag_if_second_param_is_one_08001a44(int address, int value) {\\n  bool flag;\\n  if (value == 1) {\\n    flag = true;\\n    if (*(char *)(address + 0x70) == \"\\0\") {\\n      initialize_flag();\\n    }\\n  }\\n  else {\\n    flag = false;\\n  }\\n  *(bool *)(address + 0x70) = flag;\\n  return;\\n}",
            "called": [
                "FUN_080019f6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a44",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "set_flag_if_second_param_is_one_08001a44"
        },
        "FUN_08002c54": {
            "renaming": {
                "FUN_08002c54": "decode_08002c54",
                "param_1": "params",
                "pbVar2": "byte_ptr",
                "cVar1": "closing_char"
            },
            "code": "int decode_08002c54(int *params){\n  char closing_char;\n  byte *byte_ptr;\n  \n  closing_char = *(char *)((int)params + 0x3d);\n  if (*(short *)((int)params + 0x2a) != 0) {\n    byte_ptr = (byte *)params[9];\n    params[9] = (int)(byte_ptr + 1);\n    *(uint *)(*params + 0x10) = (uint)*byte_ptr;\n    *(short *)((int)params + 0x2a) = *(short *)((int)params + 0x2a) + -1;\n    if ((*(short *)((int)params + 0x2a) == 0) && (closing_char == ')')) {\n      *(uint *)(*params + 4) = *(uint *)(*params + 4) & 0xfffffbff;\n      params[0xc] = 0x21;\n      *(undefined *)((int)params + 0x3d) = 0x28;\n      do_nothing_08002c52();\n    }\n    return 0;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c54",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "decode_08002c54"
        },
        "FUN_080043b4": {
            "renaming": {
                "FUN_080043b4": "check_permissions_080043b4",
                "param_1": "permissions",
                "param_2": "permission_mask",
                "param_3": "should_match",
                "param_4": "max_attempts",
                "param_5": "max_time",
                "iVar1": "attempts"
            },
            "code": "int check_permissions_080043b4(uint **permissions, uint permission_mask, bool should_match, int max_attempts, uint max_time) {\n  int attempts = 0;\n  while (max_time == 0xffffffff || (max_time != 0 && attempts < max_attempts)) {\n    if (((permission_mask & ~**permissions) == 0) != should_match) {\n      return 0;\n    }\n    attempts++;\n  }\n  (*permissions)[3] = (*permissions)[3] & 0xfffffe5f;\n  (*permissions)[5] = (*permissions)[5] & 0xfffffffe;\n  *(undefined *)((int)permissions + 0x39) = 0x20;\n  *(undefined *)((int)permissions + 0x3a) = 0x20;\n  *(undefined *)(permissions + 0xe) = 0;\n  return 3;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043b4",
            "calling": [
                "FUN_08004478"
            ],
            "imported": false,
            "current_name": "check_permissions_080043b4"
        },
        "FUN_0800441a": {
            "renaming": {
                "FUN_0800441a": "check_and_update_data_0800441a",
                "param_1": "data_ptr",
                "do_nothing_08004418": "do_nothing",
                "PTR_": "data_ptr",
                "DAT_": "data"
            },
            "code": "int check_and_update_data_0800441a(int *PTR_) {\\n  if (PTR_ != NULL) {\\n    if (*(char *)((int)PTR_ + 0x39) == \"\\0\") {\\n      *(undefined *)(PTR_ + 0xe) = 0;\\n      do_nothing();\\n    }\\n    *(undefined *)((int)PTR_ + 0x39) = 0x24;\\n    *(uint *)(*PTR_ + 0xc) &= 0xffffdfff;\\n    update_DAT_(PTR_);\\n    *(uint *)(*PTR_ + 0x10) &= 0xffffb7ff;\\n    *(uint *)(*PTR_ + 0x14) &= 0xffffffd5;\\n    *(uint *)(*PTR_ + 0xc) |= 0x2000;\\n    PTR_[0xf] = 0;\\n    *(undefined *)((int)PTR_ + 0x39) = 0x20;\\n    *(undefined *)((int)PTR_ + 0x3a) = 0x20;\\n    return 0;\\n  }\\n  return 1;\\n}",
            "called": [
                "FUN_08004418",
                "FUN_08004204"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800441a",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "check_and_update_data_0800441a"
        },
        "FUN_08004d18": {
            "renaming": {
                "FUN_08004d18": "execute_function_if_not_null_08004d18",
                "PTR_DAT_08004d28": "function_pointer",
                "PTR_DAT_08004d2c": "argument",
                "code": "function"
            },
            "code": "void execute_function_if_not_null_08004d18(void)\n{\n    code** PTR_DAT_08004d28 = *(code**)(PTR_DAT_08004d28);\n    if (PTR_DAT_08004d28 != NULL)\n    {\n        code* function = *PTR_DAT_08004d28;\n        int PTR_DAT_08004d2c = *(int*)(PTR_DAT_08004d2c);\n        function(PTR_DAT_08004d2c);\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d18",
            "calling": [
                "FUN_08003ea0"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_08004d18"
        },
        "FUN_080006d4": {
            "renaming": {
                "FUN_080006d4": "bit_shift_operation_080006d4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_1",
                "unaff_r4": "mask",
                "uVar2": "check",
                "uVar3": "temp_3",
                "in_r12": "unused_variable",
                "bVar4": "is_zero"
            },
            "code": "ulonglong bit_shift_operation_080006d4(uint input_1, uint input_2, uint input_3, uint input_4)\n{\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint mask = 0x80000000;\n  uint check = 0x100000;\n  bool is_zero;\n  bool is_equal;\n  \n  temp_1 = input_1 << 1;\n  temp_2 = input_2 << 1;\n  temp_3 = input_3 << 1;\n  temp_4 = input_4 << 1;\n  \n  if (input_2 & mask) {\n    temp_1 |= 1;\n  }\n  if (input_4 & mask) {\n    temp_3 |= 1;\n  }\n  \n  if (input_1 | temp_2) {\n    is_zero = false;\n  } else {\n    is_zero = true;\n  }\n  \n  if (!is_zero) {\n    if (input_3 | temp_4) {\n      is_zero = false;\n    } else {\n      is_zero = true;\n    }\n  }\n  \n  if (is_zero) {\n    return (ulonglong)((input_2 ^ input_4) & mask) << 0x20;\n  }\n  \n  if (input_3 == 0) {\n    temp_3 = input_2 & mask;\n    do {\n      temp_1 = input_1 & mask;\n      input_1 = temp_1 << 1;\n      input_2 = input_2 * 2 + (uint)(temp_1 != 0);\n    } while ((input_2 & check) == 0);\n    input_2 |= temp_3;\n    if ((input_4 & (input_4 >> 0x14)) != 0) {\n      return CONCAT44(input_2, input_1);\n    }\n  }\n  \n  do {\n    temp_4 = input_3 & mask;\n    input_3 = temp_4 << 1;\n    input_4 = input_4 * 2 + (uint)(temp_4 != 0);\n  } while ((input_4 & check) == 0);\n  \n  if ((input_4 & (input_4 >> 0x14)) != 0) {\n    return CONCAT44(input_2, input_1);\n  } else {\n    return (ulonglong)((input_2 ^ input_4) & mask | 0x7ff00000) << 0x20 | 0x7ff8000000000000;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006d4",
            "calling": [
                "FUN_080004f8"
            ],
            "imported": false,
            "current_name": "bit_shift_operation_080006d4"
        },
        "FUN_08000190": {
            "renaming": {
                "FUN_08000190": "calculate_decimal_from_binary_08000190",
                "param_1": "binary1",
                "param_2": "binary2",
                "param_3": "binary3",
                "param_4": "binary4",
                "iVar1": "shift1",
                "bVar2": "bit1",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "decimal1",
                "uVar7": "decimal2",
                "iVar8": "shift2",
                "uVar9": "temp4",
                "uVar10": "temp5",
                "uVar11": "decimal3",
                "uVar12": "temp6",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "flag3"
            },
            "code": "\nulonglong calculate_decimal_from_binary_08000190(uint binary1,uint binary2,uint binary3,uint binary4)\n\n{\n  int shift1;\n  byte bit1;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint decimal1;\n  uint decimal2;\n  int shift2;\n  uint temp4;\n  uint temp5;\n  uint decimal3;\n  uint temp6;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  decimal1 = binary4 ^ 0x80000000;\n  temp4 = binary2 << 1;\n  binary4 = binary4 << 1;\n  flag1 = ((binary2 ^ decimal1) & 0x7fffffff) == 0;\n  flag2 = flag1 && binary1 == binary3;\n  if (!flag1 || binary1 != binary3) {\n    flag2 = (temp4 | binary1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (binary4 | binary3) == 0;\n  }\n  shift2 = (int)temp4 >> 0x15;\n  if (!flag2) {\n    flag2 = shift2 == -1;\n  }\n  shift1 = (int)binary4 >> 0x15;\n  if (!flag2) {\n    flag2 = shift1 == -1;\n  }\n  if (flag2) {\n    if (shift2 == -1 || shift1 == -1) {\n      temp4 = decimal1;\n      decimal3 = binary3;\n      if (shift2 == -1) {\n        temp4 = binary2;\n        decimal3 = binary1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        binary3 = decimal3;\n        decimal1 = temp4;\n      }\n      flag2 = (decimal3 | temp4 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (binary3 | decimal1 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = temp4 == decimal1;\n      }\n      if (!flag2) {\n        temp4 = temp4 | 0x80000;\n      }\n      return CONCAT44(temp4,decimal3);\n    }\n    if (((binary2 ^ decimal1) & 0x7fffffff) != 0 || binary1 != binary3) {\n      if ((temp4 | binary1) == 0) {\n        binary1 = binary3;\n        binary2 = decimal1;\n      }\n      return CONCAT44(binary2,binary1);\n    }\n    if (binary2 != decimal1) {\n      return 0;\n    }\n    if (temp4 >> 0x15 == 0) {\n      flag2 = (binary1 & 0x80000000) != 0;\n      decimal1 = binary2 * 2 + (uint)flag2;\n      if (CARRY4(binary2,binary2) || CARRY4(binary2 * 2,(uint)flag2)) {\n        decimal1 = decimal1 | 0x80000000;\n      }\n      return CONCAT44(decimal1,binary1 << 1);\n    }\n    if (temp4 < 0xffc00000) {\n      return CONCAT44(binary2 + 0x100000,binary1);\n    }\n    binary2 = binary2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(binary2 | 0x7ff00000) << 0x20;\n  }\n  temp4 = temp4 >> 0x15;\n  binary4 = binary4 >> 0x15;\n  decimal3 = binary4 - temp4;\n  flag2 = decimal3 != 0;\n  if (binary4 < temp4) {\n    decimal3 = -decimal3;\n  }\n  temp5 = binary1;\n  decimal2 = binary2;\n  if (flag2 && temp4 <= binary4) {\n    temp4 = temp4 + decimal3;\n    temp5 = binary3;\n    decimal2 = decimal1;\n    binary3 = binary1;\n    decimal1 = binary2;\n  }\n  if (0x36 < decimal3) {\n    return CONCAT44(decimal2,temp5);\n  }\n  temp2 = decimal2 & 0xfffff | 0x100000;\n  if ((decimal2 & 0x80000000) != 0) {\n    flag2 = temp5 != 0;\n    temp5 = -temp5;\n    temp2 = -temp2 - (uint)flag2;\n  }\n  decimal2 = decimal1 & 0xfffff | 0x100000;\n  if ((decimal1 & 0x80000000) != 0) {\n    flag2 = binary3 != 0;\n    binary3 = -binary3;\n    decimal2 = -decimal2 - (uint)flag2;\n  }\n  if (temp4 == decimal3) {\n    decimal2 = decimal2 ^ 0x100000;\n    if (temp4 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      temp4 = 1;\n    }\n    else {\n      decimal3 = decimal3 - 1;\n    }\n  }\n  decimal1 = -decimal3 + 0x20;\n  if ((int)decimal3 < 0x21) {\n    temp6 = binary3 << (decimal1 & 0xff);\n    binary3 = binary3 >> (decimal3 & 0xff);\n    temp1 = temp5 + binary3;\n    temp3 = decimal2 << (decimal1 & 0xff);\n    decimal1 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(temp5,binary3) + ((int)decimal2 >> (decimal3 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    temp6 = decimal2 << (-decimal3 + 0x40 & 0xff);\n    if (binary3 != 0) {\n      temp6 = temp6 | 2;\n    }\n    decimal2 = (int)decimal2 >> (decimal3 - 0x20 & 0xff);\n    decimal1 = temp5 + decimal2;\n    temp2 = temp2 + ((int)decimal2 >> 0x1f) + (uint)CARRY4(temp5,decimal2);\n  }\n  binary2 = temp2 & 0x80000000;\n  decimal3 = temp2;\n  if ((int)temp2 < 0) {\n    flag2 = temp6 == 0;\n    temp6 = -temp6;\n    decimal3 = -decimal1;\n    decimal1 = -(uint)!flag2 - decimal1;\n    decimal3 = -(uint)(flag2 <= decimal3) - temp2;\n  }\n  if (0xfffff < decimal3) {\n    temp5 = temp4 - 1;\n    if (0x1fffff < decimal3) {\n      temp5 = decimal3 & 1;\n      decimal3 = decimal3 >> 1;\n      bit1 = (byte)decimal1;\n      decimal1 = (uint)(temp5 != 0) << 0x1f | decimal1 >> 1;\n      temp6 = (uint)(bit1 & 1) << 0x1f | temp6 >> 1;\n      temp5 = temp4;\n      if (0xffbfffff < temp4 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    flag2 = 0x7fffffff < temp6;\n    if (temp6 == 0x80000000) {\n      flag2 = (decimal1 & 1) != 0;\n    }\n    return CONCAT44(decimal3 + temp5 * 0x100000 + (uint)CARRY4(decimal1,(uint)flag2) | binary2,\n                    decimal1 + flag2);\n  }\n  flag1 = (temp6 & 0x80000000) != 0;\n  temp6 = temp6 << 1;\n  temp5 = decimal1 * 2;\n  flag2 = CARRY4(decimal1,decimal1);\n  decimal1 = decimal1 * 2 + (uint)flag1;\n  decimal3 = decimal3 * 2 + (uint)(flag2 || CARRY4(temp5,(uint)flag1));\n  temp5 = temp4 - 2;\n  if ((decimal3 & 0x100000) != 0) goto LAB_080002a0;\n  decimal2 = decimal1;\n  temp4 = decimal3;\n  if (decimal3 == 0) {\n    decimal2 = 0;\n    temp4 = decimal1;\n  }\n  shift2 = count_leading_zeroes(temp4);\n  if (decimal3 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  decimal3 = shift2 - 0xb;\n  flag3 = SBORROW4(decimal3,0x20);\n  decimal1 = shift2 - 0x2b;\n  flag2 = (int)decimal1 < 0;\n  flag1 = decimal1 == 0;\n  if ((int)decimal3 < 0x20) {\n    flag3 = SCARRY4(decimal1,0xc);\n    shift2 = shift2 + -0x1f;\n    flag2 = shift2 < 0;\n    flag1 = shift2 == 0;\n    decimal1 = decimal3;\n    if (!flag1 && flag2 == flag3) {\n      decimal2 = temp4 << (decimal3 & 0xff);\n      temp4 = temp4 >> (0xcU - shift2 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    temp6 = 0x20 - decimal1;\n  }\n  temp4 = temp4 << (decimal1 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    temp4 = temp4 | decimal2 >> (temp6 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    decimal2 = decimal2 << (decimal1 & 0xff);\n  }\nLAB_08000318:\n  if ((int)decimal3 <= (int)temp5) {\n    return CONCAT44(temp4 + (temp5 - decimal3) * 0x100000 | binary2,decimal2);\n  }\n  decimal1 = ~(temp5 - decimal3);\n  if ((int)decimal1 < 0x1f) {\n    shift2 = decimal1 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(decimal1 - 0x1f,0xc)) {\n      return CONCAT44(temp2,decimal2 >> (0x20 - (0xcU - shift2) & 0xff) | temp4 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    decimal1 = decimal1 + 1;\n    return CONCAT44(binary2 | temp4 >> (decimal1 & 0xff),\n                    decimal2 >> (decimal1 & 0xff) | temp4 << (0x20 - decimal1 & 0xff));\n  }\n  return CONCAT44(temp2,temp4 >> (decimal1 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000190",
            "calling": [
                "FUN_08001a66",
                "FUN_08001814",
                "FUN_080016b4",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "calculate_decimal_from_binary_08000190"
        },
        "FUN_08006174": {
            "renaming": {
                "FUN_08006174": "execute_function_with_params_08006174",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3_ptr",
                "param_4": "param4_ptr",
                "uStack_8": "param3",
                "uStack_4": "param4"
            },
            "code": "void execute_function_with_params_08006174(void* function_ptr, int param1, int param2, int* param3_ptr, int* param4_ptr) {\n  int param3 = *param3_ptr;\n  int param4 = *param4_ptr;\n  function_ptr(param1, param2, &param3, param1, &param3);\n  return;\n}",
            "called": [
                "FUN_08006394"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006174",
            "calling": [
                "FUN_0800611c"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_08006174"
        },
        "FUN_08007028": {
            "renaming": {
                "FUN_08007028": "processParam_08007028",
                "param_1": "result",
                "param_2": "input",
                "puVar1": "ptr1",
                "iVar2": "temp"
            },
            "code": "void processParam_08007028(int *result, undefined4 input)\n{\n  undefined *ptr1;\n  int temp;\n  ptr1 = PTR_DAT_08007044;\n  *(undefined4 *)ptr1 = 0;\n  temp = calculateValue(input);\n  if ((temp == -1) && (*(int *)ptr1 != 0)) {\n    *result = *(int *)ptr1;\n  }\n  return;\n}",
            "called": [
                "FUN_08005724"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007028",
            "calling": [
                "FUN_08006e10"
            ],
            "imported": false,
            "current_name": "processParam_08007028"
        },
        "FUN_08000194": {
            "renaming": {
                "FUN_08000194": "FUNC_08000194"
            },
            "code": "\nulonglong FUNC_08000194(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_080002a0;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000194",
            "calling": [
                "FUN_080015f8",
                "FUN_08000cd0",
                "FUN_080016b4",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "FUNC_08000194"
        },
        "FUN_08002494": {
            "renaming": {
                "FUN_08002494": "set_bits_in_memory_08002494",
                "param_1": "memory_address",
                "param_2": "bit_pattern",
                "param_3": "bit_mask",
                "uVar1": "shift_amount",
                "uVar2": "bits_to_shift",
                "DAT_080024f0": "data_location_1",
                "DAT_080024f4": "data_location_2"
            },
            "code": "void set_bits_in_memory_08002494(uint memory_address, uint bit_pattern, uint bit_mask) {\n  uint shift_amount = (*(int *)(DAT_080024f0 + 0xc) << 0x15) >> 0x1d;\n  uint bits_to_shift = 7 - shift_amount;\n  if (bits_to_shift > 3) {\n    bits_to_shift = 4;\n  }\n  if (shift_amount + 4 < 7) {\n    shift_amount = 0;\n  }\n  else {\n    shift_amount -= 3;\n  }\n  uint bits_to_set = (bit_pattern & (1 << (bits_to_shift & 0xff)) - 1U) << (shift_amount & 0xff) | (1 << (shift_amount & 0xff)) - 1U & bit_mask;\n  if ((int)memory_address < 0) {\n    *(char *)(DAT_080024f4 + (memory_address & 0xf)) = (char)(bits_to_set << 4);\n  }\n  else {\n    *(char *)(memory_address + 0xe000e400) = (char)(bits_to_set << 4);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002494",
            "calling": [
                "FUN_08001b48",
                "FUN_08001c3c",
                "FUN_08005510",
                "FUN_08005568"
            ],
            "imported": false,
            "current_name": "set_bits_in_memory_08002494"
        },
        "FUN_08002c4e": {
            "renaming": {
                "FUN_08002c4e": "do_nothing_08002c4e"
            },
            "code": "\nvoid do_nothing_08002c4e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c4e",
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c4e"
        },
        "FUN_08004f4c": {
            "renaming": {
                "FUN_08004f4c": "configure_uart_pins_08004f4c",
                "param_1": "pins",
                "iVar1": "uart1_base",
                "iVar2": "uart2_base",
                "iVar3": "uart3_base",
                "iVar4": "selected_uart_base",
                "uVar5": "uart_pin_mode",
                "uVar6": "uart_pin_number",
                "local_20": "pin_mask",
                "local_1c": "pin_function",
                "local_18": "pin_mode",
                "local_14": "uart_pins_count"
            },
            "code": "\nvoid configure_uart_pins_08004f4c(int *pins)\n\n{\n  int uart1_base;\n  int uart2_base;\n  int uart3_base;\n  int selected_uart_base;\n  undefined4 uart_pin_mode;\n  uint uart_pin_number;\n  uint pin_mask;\n  uint pin_function;\n  uint pin_mode;\n  undefined4 uart_pins_count;\n  \n  if (pins != (int *)0x0) {\n    uart2_base = FUN_08004c78((int)*(char *)(pins + 0x16),PTR_DAT_08005204);\n    uart3_base = FUN_08004c78((int)*(char *)((int)pins + 0x59),PTR_DAT_08005208);\n    if ((uart3_base == 0) || (uart2_base == 0)) {\n      FUN_080068f0(PTR_s_ERROR__at_least_one_UART_pin_has_0800521c,uart3_base);\n    }\n    else {\n      selected_uart_base = FUN_08004d06(uart2_base);\n      *pins = selected_uart_base;\n      uart1_base = DAT_08005214;\n      uart3_base = DAT_08005210;\n      uart2_base = DAT_0800520c;\n      if (selected_uart_base == 0) {\n        FUN_080068f0(PTR_s_ERROR__U_S_ART_pins_mismatch_08005220);\n      }\n      else {\n        if (selected_uart_base == DAT_0800520c) {\n          *(uint *)(DAT_0800520c + 0xd80c) = *(uint *)(DAT_0800520c + 0xd80c) | 0x4000;\n          *(uint *)(uart2_base + 0xd80c) = *(uint *)(uart2_base + 0xd80c) & 0xffffbfff;\n          *(uint *)(uart2_base + 0xd818) = *(uint *)(uart2_base + 0xd818) | 0x4000;\n          *(undefined *)(pins + 0x11) = 0;\n          *(undefined *)((int)pins + 0x5a) = 0x25;\n        }\n        else if (selected_uart_base == DAT_08005210) {\n          *(uint *)(DAT_08005210 + 0x1cc10) = *(uint *)(DAT_08005210 + 0x1cc10) | 0x20000;\n          *(uint *)(uart3_base + 0x1cc10) = *(uint *)(uart3_base + 0x1cc10) & 0xfffdffff;\n          *(uint *)(uart3_base + 0x1cc1c) = *(uint *)(uart3_base + 0x1cc1c) | 0x20000;\n          *(undefined *)(pins + 0x11) = 1;\n          *(undefined *)((int)pins + 0x5a) = 0x26;\n        }\n        else if (selected_uart_base == DAT_08005214) {\n          *(uint *)(DAT_08005214 + 0x1c810) = *(uint *)(DAT_08005214 + 0x1c810) | 0x40000;\n          *(uint *)(uart1_base + 0x1c810) = *(uint *)(uart1_base + 0x1c810) & 0xfffbffff;\n          *(uint *)(uart1_base + 0x1c81c) = *(uint *)(uart1_base + 0x1c81c) | 0x40000;\n          *(undefined *)(pins + 0x11) = 2;\n          *(undefined *)((int)pins + 0x5a) = 0x27;\n        }\n        uart_pin_mode = FUN_08004884((uint)((int)*(char *)((int)pins + 0x59) << 0x18) >> 0x1c);\n        uart_pin_number = FUN_08004cce((int)*(char *)((int)pins + 0x59),PTR_DAT_08005208);\n        pin_mask = 1 << (*(byte *)((int)pins + 0x59) & 0xf) & 0xffff;\n        pin_function = (uart_pin_number >> 3 & 1) << 4 | uart_pin_number & 7;\n        pin_mode = (uart_pin_number << 0x1a) >> 0x1e;\n        *(uint *)(DAT_08005218 + 0x18) = *(uint *)(DAT_08005218 + 0x18) | 1;\n        switch((uart_pin_number << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x4000000;\n        }\n        uart_pins_count = 3;\n        FUN_08002624(uart_pin_mode,&pin_mask);\n        uart_pin_mode = FUN_08004884((uint)((int)*(char *)(pins + 0x16) << 0x18) >> 0x1c);\n        uart_pin_number = FUN_08004cce((int)*(char *)(pins + 0x16),PTR_DAT_08005204);\n        pin_mask = 1 << (*(byte *)(pins + 0x16) & 0xf) & 0xffff;\n        pin_function = (uart_pin_number >> 3 & 1) << 4 | uart_pin_number & 7;\n        pin_mode = (uart_pin_number << 0x1a) >> 0x1e;\n        FUN_08002624(uart_pin_mode,&pin_mask);\n        *(int **)(PTR_DAT_08005228 + (uint)*(byte *)(pins + 0x11) * 4) = pins + 1;\n        pins[1] = *pins;\n        pins[2] = pins[0x12];\n        pins[3] = pins[0x13];\n        pins[4] = pins[0x14];\n        pins[5] = pins[0x15];\n        pins[6] = 0xc;\n        pins[7] = 0;\n        pins[8] = 0;\n        FUN_0800441a(pins + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800441a",
                "FUN_08004884",
                "FUN_08004d06",
                "FUN_080068f0",
                "FUN_08002624",
                "FUN_08004cce",
                "FUN_08004c78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f4c",
            "calling": [
                "FUN_08005a68",
                "FUN_08005384"
            ],
            "imported": false,
            "current_name": "configure_uart_pins_08004f4c"
        },
        "FUN_080055bc": {
            "renaming": {
                "FUN_080055bc": "find_index_of_value_080055bc",
                "param_1": "value_to_find",
                "uVar1": "index_of_value"
            },
            "code": "uint find_index_of_value_080055bc(int value_to_find) {\n    uint index_of_value = 0;\n    if (value_to_find == 0) {\n        index_of_value = 5;\n    }\n    else {\n        while (true) {\n            if (index_of_value > 4) {\n                return index_of_value;\n            }\n            if (value_to_find == *(int *)(PTR_DAT_080055dc + index_of_value * 4)) {\n                break;\n            }\n            index_of_value = (index_of_value + 1) & 0xFF;\n        }\n    }\n    return index_of_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055bc",
            "calling": [
                "FUN_080055e0",
                "FUN_08005604"
            ],
            "imported": false,
            "current_name": "find_index_of_value_080055bc"
        },
        "FUN_08001960": {
            "renaming": {
                "FUN_08001960": "update_data_08001960",
                "param_1": "data_ptr",
                "param_2": "data1",
                "param_3": "data2",
                "param_4": "data3",
                "param_5": "data4",
                "param_6": "data5",
                "iVar1": "result",
                "puVar2": "ptr",
                "uVar3": "val1",
                "uVar4": "val2",
                "uVar5": "val3",
                "uVar6": "val4"
            },
            "code": "void update_data_08001960(int data_ptr, int data1, int data2, int data3, int data4, int data5)\\n{\\n    int result = compute_data(data2, data3, data4, data5, data3);\\n    if (result == 0) {\\n        *(int *)(data_ptr + 0x60) = data2;\\n        *(int *)(data_ptr + 0x64) = data3;\\n        *(int *)(data_ptr + 0x68) = data4;\\n        *(int *)(data_ptr + 0x6C) = data5;\\n        if (*(char *)(data_ptr + 0x70) != \"\\0\") {\\n            int *ptr = *(int **)(data_ptr + 0x3C);\\n            int val1 = *ptr;\\n            int val2 = ptr[1];\\n            int result1 = compute_data(data4, data5, val1, val2);\\n            if (result1 == 0) {\\n                int result2 = compute_data(data2, data3, val1, val2);\\n                if (result2 != 0) {\\n                    *ptr = data2;\\n                    ptr[1] = data3;\\n                }\\n            } else {\\n                *ptr = data4;\\n                ptr[1] = data5;\\n            }\\n            int val3 = *(int *)(data_ptr + 0x48);\\n            int val4 = *(int *)(data_ptr + 0x4C);\\n            int result3 = compute_data(val3, val4, data4, data5);\\n            if (result3 != 0) {\\n                *(int *)(data_ptr + 0x48) = data4;\\n                *(int *)(data_ptr + 0x4C) = data5;\\n                return;\\n            }\\n            int result4 = compute_data(val3, val4, data2, data3);\\n            if (result4 != 0) {\\n                *(int *)(data_ptr + 0x48) = data2;\\n                *(int *)(data_ptr + 0x4C) = data3;\\n            }\\n        }\\n    }\\n    return;\\n}",
            "called": [
                "FUN_08000a04",
                "FUN_08000a18",
                "FUN_080009dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001960",
            "calling": [
                "FUN_08001ab0",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "update_data_08001960"
        },
        "FUN_08004ca2": {
            "renaming": {
                "FUN_08004ca2": "check_param_08004ca2",
                "param_1": "param",
                "uVar1": "result",
                "FUN_08004c8a": "call_func"
            },
            "code": "int check_param_08004ca2(int param){\n\tint result;\n\tif(param != 0){\n\t\tresult = call_func();\n\t}else{\n\t\tresult = -1;\n\t}\n\treturn result;\n}",
            "called": [
                "FUN_08004c8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ca2",
            "calling": [
                "FUN_08005384",
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "check_param_08004ca2"
        },
        "FUN_08002810": {
            "renaming": {
                "FUN_08002810": "is_param2_included_in_param1_08002810",
                "param_1": "ptr_param1",
                "param_2": "param2",
                "*(uint *)(param_1 + 8)": "param1_value"
            },
            "code": "int is_param2_included_in_param1_08002810(uint32_t* ptr_param1, uint32_t param2)\n{\n    uint32_t* ptr_param1_offset = ptr_param1 + 2;\n    uint32_t param1_value = *ptr_param1_offset;\n    if ((param2 & param1_value) == 0)\n    {\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002810",
            "calling": [
                "FUN_08004c48"
            ],
            "imported": false,
            "current_name": "is_param2_included_in_param1_08002810"
        },
        "FUN_0800224c": {
            "renaming": {
                "FUN_0800224c": "clear_bitmask_0800224c",
                "param_1": "bitmask",
                "iVar1": "result",
                "DAT_08002340": "BITMASK_1",
                "DAT_08002344": "BITMASK_2",
                "*(undefined4 *)*param_1": "*(int *)*bitmask",
                "*(uint *)(*param_1 + 4)": "*(unsigned int *)(*bitmask + 4)",
                "*(uint *)(*param_1 + 8)": "*(unsigned int *)(*bitmask + 8)",
                "*(uint *)(*param_1 + 0xc)": "bitmask[3]",
                "*(uint *)(*param_1 + 0x10)": "bitmask[4]",
                "*(uint *)(*param_1 + 0x14)": "bitmask[5]",
                "*(uint *)(*param_1 + 0x18)": "bitmask[6]",
                "*(uint *)(*param_1 + 0x1c)": "bitmask[7]",
                "*(uint *)(*param_1 + 0x20)": "bitmask[8]",
                "*(uint *)(*param_1 + 0x24)": "bitmask[9]",
                "*(uint *)(*param_1 + 0x28)": "bitmask[10]",
                "*(uint *)(*param_1 + 0x2c)": "bitmask[11]",
                "*(uint *)(*param_1 + 0x30)": "bitmask[12]",
                "*(uint *)(*param_1 + 0x34)": "bitmask[13]",
                "*(uint *)(*param_1 + 0x38)": "bitmask[14]",
                "FUN_080020f0": "do_something",
                "FUN_080049f0": "do_something_else"
            },
            "code": "int clear_bitmask_0800224c(int *bitmask)\n{\n  int result;\n  if (bitmask == NULL) {\n    result = 1;\n  }\n  else {\n    bitmask[10] |= 2;\n    result = do_something();\n    if (result == 0) {\n      *(int *)*bitmask = -32;\n      *(unsigned int *)(*bitmask + 4) &= DAT_08002340;\n      *(unsigned int *)(*bitmask + 8) &= DAT_08002344;\n      bitmask[3] &= 0xFF000000;\n      bitmask[4] &= 0xC0000000;\n      bitmask[5] &= 0xFFFFF000;\n      bitmask[6] &= 0xFFFFF000;\n      bitmask[7] &= 0xFFFFF000;\n      bitmask[8] &= 0xFFFFF000;\n      bitmask[9] &= 0xFFFFF000;\n      bitmask[11] = 0;\n      bitmask[10] = 0;\n      do_something_else(bitmask);\n    }\n    *(char *)(bitmask + 9) = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_080020f0",
                "FUN_080049f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800224c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "clear_bitmask_0800224c"
        },
        "FUN_080054b0": {
            "renaming": {
                "FUN_080054b0": "is_data_valid_080054b0",
                "param_1": "data_index",
                "uVar1": "data_ptr",
                "PTR_DAT_080054d0": "data_ptr_array",
                "byte": "data_index_byte",
                "FUN_080047e8": "process_data_ptr",
                "result": "result"
            },
            "code": "bool is_data_valid_080054b0(int data_index) {\n  uint data_ptr = *(undefined4 *)(PTR_DAT_080054d0 + (uint)*(byte *)(data_index + 0x44) * 4);\n  uint result = FUN_080047e8(data_ptr);\n  return (result & 0x21) == 0x21;\n}",
            "called": [
                "FUN_080047e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b0",
            "calling": [],
            "imported": false,
            "current_name": "is_data_valid_080054b0"
        },
        "FUN_08006f00": {
            "renaming": {
                "FUN_08006f00": "process_data_08006f00",
                "param_1": "data",
                "puVar1": "ptr",
                "uVar2": "function_result",
                "piVar3": "function_pointers",
                "iVar4": "function_pointer",
                "pcVar5": "function",
                "unaff_r4": "unused_register_4",
                "unaff_r5": "unused_register_5",
                "in_lr": "unused_register_lr",
                "puVar6": "ptr_to_ptr",
                "PTR_PTR_DAT_08006f0c": "ptr_to_ptr_data",
                "PTR_DAT_08006f30": "ptr_to_data"
            },
            "code": "int process_data_08006f00(uint data) {\n  int *function_pointers = *(int **)PTR_PTR_DAT_08006f0c;\n  if (data > 0x1f) {\n    *function_pointers = 0x16;\n    return -1;\n  }\n  int function_pointer = function_pointers[0x11];\n  if ((function_pointer != 0) && (*(code **)(function_pointer + data * 4) != (code *)0x0)) {\n    code *function = *(code **)(function_pointer + data * 4);\n    if (function != (code *)0x1) {\n      if (function == (code *)0xffffffff) {\n        *function_pointers = 0x16;\n        return 1;\n      }\n      *(int *)(function_pointer + data * 4) = 0;\n      (*function)(data);\n    }\n    return 0;\n  }\n  undefined *ptr_to_ptr = PTR_PTR_DAT_08006f0c;\n  int function_result = thunk_FUN_08005750(function_pointers);\n  undefined *PTR_DAT_08006f30 = PTR_DAT_08006f30;\n  *(int *)PTR_DAT_08006f30 = 0;\n  int result = FUN_08005740(function_result, data, data, 0, ptr_to_ptr, unaff_r4, unaff_r5, in_lr);\n  if ((result == -1) && (*(int *)PTR_DAT_08006f30 != 0)) {\n    *function_pointers = *(int *)PTR_DAT_08006f30;\n  }\n  return result;\n}",
            "called": [
                "FUN_08005740",
                "thunk_FUN_08005750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f00",
            "calling": [
                "FUN_08006ac0"
            ],
            "imported": false,
            "current_name": "process_data_08006f00"
        },
        "FUN_080016b4": {
            "renaming": {
                "FUN_080016b4": "check_valid_input_080016b4",
                "param_1": "input_address",
                "cVar1": "input_char",
                "iVar2": "var_1",
                "iVar3": "var_2",
                "uVar4": "var_3",
                "uVar5": "var_4",
                "uVar6": "var_5",
                "uVar7": "var_6",
                "uVar8": "var_7",
                "uVar9": "var_8",
                "uVar10": "var_9",
                "cVar11": "output_char",
                "uVar12": "var_10",
                "uVar13": "var_13",
                "uVar14": "var_14",
                "uVar15": "var_15",
                "uVar16": "var_16",
                "uVar17": "var_17",
                "uVar18": "var_18"
            },
            "code": "char check_valid_input_080016b4(int input_address)\n{\n  char input_char;\n  int var_1;\n  int var_2;\n  undefined4 var_3;\n  undefined4 var_4;\n  undefined4 var_5;\n  undefined4 var_6;\n  undefined4 var_7;\n  undefined4 var_8;\n  undefined4 var_9;\n  char output_char;\n  undefined4 var_10;\n  undefined4 var_11;\n  undefined4 var_12;\n  undefined8 var_13;\n  undefined8 var_14;\n  undefined8 var_15;\n  undefined8 var_16;\n  undefined4 var_17;\n  undefined4 var_18;\n\n  input_char = *(char *)(input_address + 0x70);\n  if (input_char != '\\0') {\n    var_1 = get_var1();\n    if ((uint)(var_1 - *(int *)(input_address + 0x44)) < *(uint *)(input_address + 0x58)) {\n      output_char = '\\0';\n    }\n    else {\n      var_4 = **(undefined4 **)(input_address + 0x38);\n      var_7 = (*(undefined4 **)(input_address + 0x38))[1];\n      var_13 = get_var13(**(undefined4 **)(input_address + 0x40),(*(undefined4 **)(input_address + 0x40))[1]);\n      var_12 = (undefined4)((ulonglong)var_13 >> 0x20);\n      var_14 = get_var14(var_4,var_7,*(undefined4 *)(input_address + 0x50),*(undefined4 *)(input_address + 0x54));\n      var_3 = (undefined4)((ulonglong)var_14 >> 0x20);\n      var_15 = get_var15((int)var_13,var_12,*(undefined4 *)(input_address + 0x20),*(undefined4 *)(input_address + 0x24));\n      var_15 = get_var13((int)var_15,(int)((ulonglong)var_15 >> 0x20),*(undefined4 *)(input_address + 0x48),*(undefined4 *)(input_address + 0x4c));\n      *(undefined8 *)(input_address + 0x48) = var_15;\n      output_char = *(char *)(input_address + 0x71);\n      if (output_char == '\\0') {\n        var_16 = get_var14((int)var_15,var_3,*(undefined4 *)(input_address + 0x18),*(undefined4 *)(input_address + 0x1c));\n        var_15 = get_var13((int)var_15,(int)((ulonglong)var_15 >> 0x20),(int)var_16,(int)((ulonglong)var_16 >> 0x20));\n        *(undefined8 *)(input_address + 0x48) = var_15;\n      }\n      var_5 = *(undefined4 *)(input_address + 0x48);\n      var_8 = *(undefined4 *)(input_address + 0x4c);\n      var_10 = *(undefined4 *)(undefined8 *)(input_address + 0x68);\n      var_11 = *(undefined4 *)(input_address + 0x6c);\n      var_15 = *(undefined8 *)(input_address + 0x68);\n      var_2 = check_input(var_5,var_8,var_10,var_11);\n      if (var_2 == 0) {\n        var_6 = *(undefined4 *)(input_address + 0x60);\n        var_9 = *(undefined4 *)(input_address + 100);\n        var_2 = check_var(var_5,var_8);\n        if (var_2 != 0) {\n          *(undefined4 *)(input_address + 0x48) = var_6;\n          *(undefined4 *)(input_address + 0x4c) = var_9;\n        }\n      }\n      else {\n        *(undefined4 *)(input_address + 0x48) = var_10;\n        *(undefined4 *)(input_address + 0x4c) = var_11;\n      }\n      if (output_char == '\\0') {\n        var_13 = 0;\n      }\n      else {\n        var_13 = get_var14((int)var_13,var_12,*(undefined4 *)(input_address + 0x18),*(undefined4 *)(input_address + 0x1c));\n      }\n      var_18 = (undefined4)((ulonglong)var_13 >> 0x20);\n      var_17 = (undefined4)var_13;\n      var_4 = *(undefined4 *)(input_address + 0x48);\n      var_5 = *(undefined4 *)(input_address + 0x4c);\n      var_13 = get_var14((int)var_14,var_3,*(undefined4 *)(input_address + 0x28),*(undefined4 *)(input_address + 0x2c));\n      var_13 = get_var13(var_4,var_5,(int)var_13,(int)((ulonglong)var_13 >> 0x20));\n      var_13 = get_var13(var_17,var_18,(int)var_13,(int)((ulonglong)var_13 >> 0x20));\n      var_4 = (undefined4)((ulonglong)var_13 >> 0x20);\n      var_2 = check_var(var_10,var_11,(int)var_13,var_4);\n      if (var_2 == 0) {\n        var_15 = *(undefined8 *)(input_address + 0x60);\n        var_2 = check_var((int)var_13,var_4,*(undefined4 *)(undefined8 *)(input_address + 0x60),*(undefined4 *)(input_address + 100));\n        if (var_2 == 0) {\n          var_15 = var_13;\n        }\n      }\n      **(undefined8 **)(input_address + 0x3c) = var_15;\n      *(undefined4 *)(input_address + 0x50) = var_4;\n      *(undefined4 *)(input_address + 0x54) = var_7;\n      *(int *)(input_address + 0x44) = var_1;\n    }\n  }\n  return output_char;\n}\n",
            "called": [
                "FUN_08000194",
                "FUN_08000a18",
                "FUN_080004f8",
                "FUN_080058e0",
                "FUN_08000190",
                "FUN_080009dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016b4",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "check_valid_input_080016b4"
        },
        "FUN_0800074c": {
            "renaming": {
                "FUN_0800074c": "FUNC_0800074c"
            },
            "code": "\nulonglong FUNC_0800074c(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = FUN_080008ba();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_0800086a;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_0800086a:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_080008ba"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800074c",
            "calling": [
                "FUN_080015f8",
                "FUN_08001814",
                "FUN_08001918",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "FUNC_0800074c"
        },
        "FUN_080018f8": {
            "renaming": {
                "FUN_080018f8": "call_first_function_and_return_080018f8",
                "FUN_08001814": "call_second_function"
            },
            "code": "void call_first_function_and_return_080018f8(void)\n{\n  call_second_function();\n  return;\n}",
            "called": [
                "FUN_08001814"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018f8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "call_first_function_and_return_080018f8"
        },
        "FUN_08005890": {
            "renaming": {
                "FUN_08005890": "get_character_from_data_08005890",
                "param_1": "index",
                "cVar1": "character",
                "iVar2": "found_index",
                "uVar3": "shifted_value",
                "uVar4": "data_value",
                "PTR_DAT_080058d8": "DATA_ARRAY_1",
                "PTR_DAT_080058dc": "DATA_ARRAY_2"
            },
            "code": "char get_character_from_data_08005890(uint index) {\n  char character = '\\0';\n  uint data_value;\n  if (index < 0x3c) {\n    data_value = (uint)(char)PTR_DAT_080058d8[index];\n  }\n  else {\n    data_value = 0xffffffff;\n  }\n  if (data_value != 0xffffffff) {\n    int found_index = find_index_in_data(data_value, PTR_DAT_080058dc);\n    if (found_index != 0) {\n      uint shifted_value = shift_bits(data_value);\n      character = get_character_from_shifted_value(shifted_value);\n    }\n  }\n  if (character != '\\0') {\n    character = '\\x01';\n  }\n  return character;\n}\n",
            "called": [
                "FUN_08004848",
                "FUN_080047f4",
                "FUN_08004c48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005890",
            "calling": [
                "FUN_08000cd0",
                "FUN_080015b2"
            ],
            "imported": false,
            "current_name": "get_character_from_data_08005890"
        },
        "FUN_08005da0": {
            "renaming": {
                "FUN_08005da0": "initialize_system_08005da0",
                "FUN_08005d8a": "initialize_network"
            },
            "code": "void initialize_system_08005da0(void)\n{\n  initialize_network();\n  return;\n}",
            "called": [
                "FUN_08005d8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da0",
            "calling": [],
            "imported": false,
            "current_name": "initialize_system_08005da0"
        },
        "FUN_08004cb2": {
            "renaming": {
                "FUN_08004cb2": "find_param_value_08004cb2",
                "param_1": "target",
                "param_2": "params",
                "*param_2": "*params",
                "undefined4": "unsigned int"
            },
            "code": "unsigned int find_param_value_08004cb2(int target, char *params)\n{\n    while (true) {\n        if (*params == -1) {\n            return 0xffffffff;\n        }\n        if (*params == target) {\n            break;\n        }\n        params = params + 12;\n    }\n    return *(unsigned int *)(params + 8);\n}",
            "called": [
                "FUN_08004cb2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb2",
            "calling": [
                "FUN_08004cb2",
                "FUN_08004cce"
            ],
            "imported": false,
            "current_name": "find_param_value_08004cb2"
        },
        "FUN_08004ef4": {
            "renaming": {
                "FUN_08004ef4": "check_and_call_function_08004ef4",
                "param_1": "parameter",
                "iVar1": "result",
                "FUN_08004e70": "get_result",
                "*(char *)(iVar1 + 0x5d)": "*(char *)(result + 0x5d)",
                "FUN_08002c10": "call_function"
            },
            "code": "void check_and_call_function_08004ef4(undefined4 parameter){\\n  int result = get_result();\\n  if (*(char *)(result + 0x5d) == \"\\0\") {\\n    call_function(parameter);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08002c10",
                "FUN_08004e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef4",
            "calling": [
                "FUN_0800316c"
            ],
            "imported": false,
            "current_name": "check_and_call_function_08004ef4"
        },
        "FUN_08001294": {
            "renaming": {
                "FUN_08001294": "set_parameters_08001294",
                "param_1": "object_address",
                "param_2": "parameter_1",
                "param_3": "parameter_2",
                "param_4": "parameter_3",
                "param_5": "parameter_4"
            },
            "code": "void set_parameters_08001294(int object_address, undefined parameter_1, undefined parameter_2, undefined parameter_3, undefined parameter_4) {\n  *(undefined *)(object_address + 0x18) = parameter_1;\n  *(undefined *)(object_address + 0x19) = parameter_2;\n  *(undefined *)(object_address + 0x1a) = parameter_3;\n  *(undefined *)(object_address + 0x1b) = parameter_4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001294",
            "calling": [
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "set_parameters_08001294"
        },
        "FUN_08002384": {
            "renaming": {
                "FUN_08002384": "process_08002384",
                "param_1": "params",
                "iVar1": "status",
                "uVar2": "divisor",
                "iVar3": "start_time",
                "iVar4": "current_time",
                "uVar5": "local_var",
                "local_14": "local_var"
            },
            "code": "int process_08002384(int *params)\n{\n  int status = 0;\n  uint divisor = 0;\n  int start_time = 0;\n  int current_time = 0;\n  int local_var = 0;\n  \n  if (*(char *)(params + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(params + 9) = 1;\n  status = initialize();\n  if (status == 0) {\n    params[10] = params[10] & 0xffffeefdU | 2;\n    divisor = *(uint *)PTR_DAT_0800246c;\n    divisor = FUN_08003da4(2);\n    for (local_var = divisor / divisor << 1; local_var != 0; local_var = local_var + -1) {\n    }\n    init_params(params);\n    *(uint *)(*params + 8) = *(uint *)(*params + 8) | 8;\n    start_time = get_time();\n    while (current_time = *params, (*(uint *)(current_time + 8) & 8) != 0) {\n      current_time = get_time();\n      if (10 < (uint)(current_time - start_time)) {\n        params[10] = params[10] & 0xffffffedU | 0x10;\n        *(undefined *)(params + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(current_time + 8) = *(uint *)(current_time + 8) | 4;\n    start_time = get_time();\n    while ((*(uint *)(*params + 8) & 4) != 0) {\n      current_time = get_time();\n      if (10 < (uint)(current_time - start_time)) {\n        params[10] = params[10] & 0xffffffedU | 0x10;\n        *(undefined *)(params + 9) = 0;\n        return 1;\n      }\n    }\n    params[10] = params[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(params + 9) = 0;\n  return status;\n}",
            "called": [
                "FUN_080020f0",
                "FUN_08003da4",
                "FUN_08001cc4",
                "FUN_08001f84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002384",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "process_08002384"
        },
        "FUN_08005650": {
            "renaming": {
                "FUN_08005650": "do_nothing_08005650"
            },
            "code": "\nvoid do_nothing_08005650(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005650",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "do_nothing_08005650"
        },
        "FUN_08002ad8": {
            "renaming": {
                "FUN_08002ad8": "increment_and_store_char_08002ad8",
                "param_1": "input_array",
                "puVar1": "char_ptr",
                "PTR_": "input_array",
                "DAT_": "constant",
                "*puVar1": "*char_ptr",
                "*(short *)((int)param_1 + 0x2a)": "*short_ptr",
                "*(undefined4 *)(*param_1 + 0x10)": "*(int *)(*input_array + 0x10)"
            },
            "code": "int increment_and_store_char_08002ad8(int *PTR_)\n{\n  int *short_ptr = (int *)((char *)PTR_ + 0x2a);\n  if (*short_ptr != 0) {\n    char *char_ptr = (char *)PTR_[9];\n    PTR_[9] = (int)(char_ptr + 1);\n    *char_ptr = (char)*(int *)(*PTR_ + 0x10);\n    *short_ptr = *short_ptr + -1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "increment_and_store_char_08002ad8"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "calculate_values_08004204",
                "param_1": "params",
                "uVar1": "multiplier",
                "uVar2": "value",
                "iVar3": "factor3",
                "iVar4": "factor4",
                "iVar5": "factor5",
                "iVar6": "factor6",
                "iVar7": "factor7",
                "iVar8": "params_1",
                "iVar9": "params_2",
                "iVar10": "params_3",
                "iVar11": "params_4",
                "iVar12": "ptr"
            },
            "code": "void calculate_values_08004204(int *params) {\n  uint multiplier = *(uint *)(*params + 0x10);\n  uint value = *(uint *)(*params + 0xc);\n  uint mask = *(uint *)(*params + 0x14);\n  if (*params != PTR_DAT_080043ac) {\n    uint factor1 = params[3];\n    uint factor2 = params[2] | params[4] | params[5];\n    uint factor3 = FUN_08003c50() * 0x19 / (params[1] << 2);\n    uint factor4 = FUN_08003c50() * 0x19 / (params[1] << 2);\n    uint factor5 = FUN_08003c50() * 0x19 / (params[1] << 2);\n    uint factor6 = FUN_08003c50() * 0x19 / (params[1] << 2);\n    uint factor7 = FUN_08003c50() * 0x19 / (params[1] << 2);\n    uint result = (multiplier * ((factor4 + (multiplier * (factor5 >> 0x25) * -100 + factor2) * 0x10 + 0x32) >> 0x25) & 0xf0) + (mask & 0xfffffcff | factor1) + (multiplier * (factor6 + (multiplier * (factor7 >> 0x25) * -100 + factor3) * 0x10 + 0x32) >> 0x20) << 0x17 >> 0x1c;\n    *(uint *)(*params + 8) = result;\n  } else {\n    uint factor1 = params[3];\n    uint factor2 = params[2] | params[4] | params[5];\n    uint factor3 = FUN_08003c70() * 0x19 / (params[1] << 2);\n    uint factor4 = FUN_08003c70() * 0x19 / (params[1] << 2);\n    uint factor5 = FUN_08003c70() * 0x19 / (params[1] << 2);\n    uint factor6 = FUN_08003c70() * 0x19 / (params[1] << 2);\n    uint factor7 = FUN_08003c70() * 0x19 / (params[1] << 2);\n    uint result = (multiplier * ((factor4 + (multiplier * (factor5 >> 0x25) * -100 + factor2) * 0x10 + 0x32) >> 0x25) & 0xf0) + (mask & 0xfffffcff | factor1) + (multiplier * (factor6 + (multiplier * (factor7 >> 0x25) * -100 + factor3) * 0x10 + 0x32) >> 0x20) << 0x17 >> 0x1c;\n    *(uint *)(*params + 8) = result;\n  }\n}",
            "called": [
                "FUN_08003c70",
                "FUN_08003c50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "FUN_0800441a"
            ],
            "imported": false,
            "current_name": "calculate_values_08004204"
        },
        "FUN_08005da8": {
            "renaming": {
                "FUN_08005da8": "process_data_08005da8",
                "param_1": "output_buffer",
                "param_2": "unused_param",
                "param_3": "input_buffer",
                "param_4": "input_buffer_size",
                "param_5": "num_bytes_to_process",
                "iVar1": "result",
                "uVar2": "temp_var_1",
                "iVar3": "temp_var_3",
                "bVar4": "byte_index",
                "lVar5": "temp_var_5",
                "uVar6": "temp_var_6",
                "uVar7": "temp_var_7",
                "FUN_08000a2c": "function_a",
                "FUN_080009f0": "function_b",
                "FUN_08005c96": "function_c",
                "FUN_08000a18": "function_d",
                "FUN_080009dc": "function_e",
                "FUN_08005cb6": "function_f",
                "FUN_0800074c": "function_g",
                "FUN_08000194": "function_h",
                "FUN_08000aa8": "function_i",
                "FUN_0800040c": "function_j",
                "FUN_08000190": "function_k",
                "FUN_08005d8a": "function_l",
                "PTR_DAT_08005f20": "ptr_1",
                "PTR_DAT_08005f28": "ptr_2",
                "DAT_08005f08": "dat_1",
                "DAT_08005f0c": "dat_2",
                "DAT_08005f10": "dat_3",
                "DAT_08005f14": "dat_4",
                "DAT_08005f18": "dat_5",
                "PTR_DAT_08005f1c": "ptr_3",
                "PTR_DAT_08005f24": "ptr_4",
                "PTR_DAT_08005f08": "ptr_5"
            },
            "code": "int process_data_08005da8(undefined4 param_1, undefined4 param_2, undefined4 param_3, uint param_4, byte num_bytes_to_process)\n{\n  int result = 0;\n  int temp_result = 0;\n  int temp_var_1 = 0;\n  int temp_var_2 = 0;\n  int temp_var_3 = 0;\n  int temp_var_4 = 0;\n  longlong temp_var_5 = 0;\n  undefined8 temp_var_6 = 0;\n  undefined8 temp_var_7 = 0;\n  \n  temp_result = FUN_08000a2c(param_3, param_4, param_3, param_4);\n  if (temp_result == 0) {\n    temp_result = FUN_08000a2c(param_3, param_4 & 0x7fffffff, 0xffffffff, DAT_08005f08);\n    if ((temp_result == 0) &&\n       (temp_result = FUN_080009f0(param_3, param_4 & 0x7fffffff, 0xffffffff, DAT_08005f08), temp_result == 0)) {\n      result = FUN_08005c96(param_1, PTR_DAT_08005f20);\n    }\n    else {\n      temp_result = FUN_08000a18(param_3, param_4, 0xe0000000, DAT_08005f0c);\n      if (temp_result == 0) {\n        temp_result = FUN_080009dc(param_3, param_4, 0xe0000000, DAT_08005f10);\n        if (temp_result == 0) {\n          temp_result = FUN_080009dc(param_3, param_4, 0, 0);\n          if (temp_result == 0) {\n            result = 0;\n          }\n          else {\n            result = FUN_08005cb6(param_1, 0x2d);\n            param_4 = param_4 + 0x80000000;\n          }\n          temp_var_5 = (ulonglong)DAT_08005f14 << 0x20;\n          for (byte_index = 0; temp_var_1 = (undefined4)((ulonglong)temp_var_5 >> 0x20), byte_index < num_bytes_to_process; byte_index = byte_index + 1) {\n            temp_var_5 = FUNC_0800074c((int)temp_var_5, temp_var_1, 0, DAT_08005f18);\n          }\n          temp_var_6 = FUNC_08000194(param_3, param_4, (int)temp_var_5, temp_var_1);\n          temp_var_1 = FUN_08000aa8();\n          temp_var_7 = FUN_0800040c();\n          temp_var_6 = FUN_08000190((int)temp_var_6, (int)((ulonglong)temp_var_6 >> 0x20), (int)temp_var_7, (int)((ulonglong)temp_var_7 >> 0x20));\n          temp_var_2 = FUN_08005d8a(param_1, temp_var_1, 10);\n          result = result + temp_var_2;\n          if (num_bytes_to_process != 0) {\n            temp_var_2 = FUN_08005c96(param_1, PTR_DAT_08005f28);\n            result = result + temp_var_2;\n          }\n          while (num_bytes_to_process != 0) {\n            temp_var_6 = FUN_080004f8((int)temp_var_6, (int)((ulonglong)temp_var_6 >> 0x20), 0, DAT_08005f18);\n            temp_var_1 = FUN_08000a58();\n            temp_var_3 = FUN_08005d82(param_1, temp_var_1, 10);\n            result = result + temp_var_3;\n            temp_var_7 = FUN_0800042c(temp_var_1);\n            temp_var_6 = FUN_08000190((int)temp_var_6, (int)((ulonglong)temp_var_6 >> 0x20), (int)temp_var_7, (int)((ulonglong)temp_var_7 >> 0x20));\n            num_bytes_to_process = num_bytes_to_process - 1;\n          }\n        }\n        else {\n          result = FUN_08005c96(param_1, PTR_DAT_08005f24);\n        }\n      }\n      else {\n        result = FUN_08005c96(param_1, PTR_DAT_08005f24);\n      }\n    }\n  }\n  else {\n    result = FUN_08005c96(param_1, PTR_DAT_08005f1c);\n  }\n  return result;\n}",
            "called": [
                "FUN_080009f0",
                "FUN_08000a18",
                "FUN_08000a58",
                "FUN_08000a2c",
                "FUN_0800074c",
                "FUN_080009dc",
                "FUN_0800040c",
                "FUN_08005c96",
                "FUN_08005cb6",
                "FUN_08000194",
                "FUN_080004f8",
                "FUN_08005d82",
                "FUN_0800042c",
                "FUN_08000aa8",
                "FUN_08005d8a",
                "FUN_08000190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da8",
            "calling": [
                "FUN_08005f2c"
            ],
            "imported": false,
            "current_name": "process_data_08005da8"
        },
        "FUN_080045fe": {
            "renaming": {
                "FUN_080045fe": "set_flag_080045fe",
                "param_1": "flag_ptr",
                "*(uint *)(*param_1 + 0xc)": "flag_value_ptr",
                "*(undefined *)((int)param_1 + 0x39)": "flag_char_ptr",
                "FUN_08005604": "call_some_function"
            },
            "code": "int set_flag_080045fe(int *flag_ptr) {\n    uint *flag_value_ptr = (uint *)(*flag_ptr + 0xc);\n    *flag_value_ptr = *flag_value_ptr & 0xffffffbf;\n    char *flag_char_ptr = (char *)((int)flag_ptr + 0x39);\n    *flag_char_ptr = 0x20;\n    call_some_function();\n    return 0;\n}",
            "called": [
                "FUN_08005604"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045fe",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "set_flag_080045fe"
        },
        "FUN_08005f2c": {
            "renaming": {
                "FUN_08005f2c": "call_function_08005f2c",
                "FUN_08005da8": "call_another_function"
            },
            "code": "void call_function_08005f2c() {\n    call_another_function();\n    return;\n}",
            "called": [
                "FUN_08005da8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f2c",
            "calling": [
                "FUN_08005f40",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "call_function_08005f2c"
        },
        "FUN_080055e0": {
            "renaming": {
                "FUN_080055e0": "execute_function_based_on_value_080055e0",
                "uVar1": "value",
                "PTR_DAT_080055fc": "function_pointer_array",
                "PTR_DAT_08005600": "parameter_array",
                "function_pointer": "function_pointer",
                "parameter_value": "parameter_value"
            },
            "code": "void execute_function_based_on_value_080055e0(void)\n{\n  uint value = get_value();\n  if (value < 5) {\n    void (*function_pointer)(uint) = *(void (**)(uint))(PTR_DAT_080055fc + value * 4);\n    uint parameter_value = *(uint *)(PTR_DAT_08005600 + value * 4);\n    function_pointer(parameter_value);\n  }\n  return;\n}",
            "called": [
                "FUN_080055bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055e0",
            "calling": [
                "FUN_08004618"
            ],
            "imported": false,
            "current_name": "execute_function_based_on_value_080055e0"
        },
        "FUN_08005f40": {
            "renaming": {
                "FUN_08005f40": "calculate_sum_of_params_and_result_of_two_functions_08005f40",
                "param_1": "param",
                "iVar1": "result_of_first_function",
                "iVar2": "result_of_second_function",
                "FUN_08005f2c": "get_first_function_result",
                "FUN_08005cc0": "get_second_function_result"
            },
            "code": "int calculate_sum_of_params_and_result_of_two_functions_08005f40(int param){\n  int result_of_first_function = get_first_function_result();\n  int result_of_second_function = get_second_function_result(param);\n  return result_of_second_function + result_of_first_function;\n}",
            "called": [
                "FUN_08005cc0",
                "FUN_08005f2c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f40",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "calculate_sum_of_params_and_result_of_two_functions_08005f40"
        },
        "FUN_0800213c": {
            "renaming": {
                "FUN_0800213c": "check_parameters_0800213c",
                "param_1": "parameters",
                "iVar1": "result",
                "uVar2": "value2",
                "uVar3": "value3",
                "DAT_08002244": "DATA_08002244",
                "DAT_08002248": "DATA_08002248"
            },
            "code": "int check_parameters_0800213c(int *parameters)\n{\n    int result;\n    int flag;\n    uint32_t value1;\n    uint32_t value2;\n    uint32_t value3;\n    uint32_t value4;\n    if (parameters == NULL)\n    {\n        return 1;\n    }\n    if (parameters[10] == 0)\n    {\n        parameters[11] = 0;\n        *(uint8_t *)(parameters + 9) = 0;\n        initialize();\n    }\n    result = check_values(parameters);\n    flag = parameters[10] & 0x10;\n    if (flag == 0 && result == 0)\n    {\n        parameters[10] = parameters[10] & 0xffffeefd | 2;\n        value2 = parameters[1] | parameters[7] | parameters[3] << 1;\n        if (parameters[2] == 0x100 || parameters[2] == 1)\n        {\n            value3 = 0x100;\n        }\n        else\n        {\n            value3 = 0;\n        }\n        if (parameters[5] == 1)\n        {\n            if (parameters[3] == 0)\n            {\n                value3 |= (parameters[6] - 1) * 0x2000 | 0x800;\n            }\n            else\n            {\n                parameters[10] |= 0x20;\n                parameters[11] |= 1;\n            }\n        }\n        *(uint32_t *)(*parameters + 4) = value3 | *(uint32_t *)(*parameters + 4) & 0xffff16ff;\n        *(uint32_t *)(*parameters + 8) = DAT_08002244 & *(uint32_t *)(*parameters + 8) | value2;\n        if (parameters[2] == 0x100 || parameters[2] == 1)\n        {\n            value3 = (parameters[4] - 1) * 0x100000;\n        }\n        else\n        {\n            value3 = 0;\n        }\n        *(uint32_t *)(*parameters + 0x2c) = value3 | *(uint32_t *)(*parameters + 0x2c) & 0xff0fffff;\n        if (value2 != (DAT_08002248 & *(uint32_t *)(*parameters + 8)))\n        {\n            parameters[10] = parameters[10] & 0xffffffed | 0x10;\n            parameters[11] |= 1;\n            return 1;\n        }\n        parameters[11] = 0;\n        parameters[10] = parameters[10] & 0xfffffffc | 1;\n        return 0;\n    }\n    parameters[10] = parameters[10] | 0x10;\n    return 1;\n}",
            "called": [
                "FUN_08004974",
                "FUN_080020f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800213c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "check_parameters_0800213c"
        },
        "FUN_0800455a": {
            "renaming": {
                "FUN_0800455a": "check_input_0800455a",
                "param_1": "input_array",
                "param_2": "array_size",
                "param_3": "element_size",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "int check_input_0800455a(int *input_array, int array_size, int element_size)\n{\n    if (*(char *)((int)input_array + 0x39) != ' ') {\n        return 2;\n    }\n    if (array_size == 0) {\n        return 1;\n    }\n    if (element_size == 0) {\n        return 1;\n    }\n    if (*(char *)(input_array + 0xe) != '\\x01') {\n        input_array[8] = array_size;\n        *(short *)(input_array + 9) = (short)element_size;\n        *(short *)((int)input_array + 0x26) = (short)element_size;\n        input_array[0xf] = 0;\n        *(undefined *)((int)input_array + 0x39) = 0x21;\n        *(undefined *)(input_array + 0xe) = 0;\n        *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x80;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800455a",
            "calling": [
                "FUN_08005604",
                "FUN_08005568"
            ],
            "imported": false,
            "current_name": "check_input_0800455a"
        },
        "FUN_08001a66": {
            "renaming": {
                "FUN_08001a66": "update_data_if_needed_08001a66",
                "param_1": "data_pointer",
                "param_2": "new_data",
                "uVar1": "updated_data_1/2/3",
                "param_3": "param_3",
                "param_4": "param_4"
            },
            "code": "void update_data_if_needed_08001a66(int data_pointer, int new_data, undefined4 param_3, undefined4 param_4) {\\n  if ((*(char *)(data_pointer + 0x70) != \"\\0\") && (*(int *)(data_pointer + 0x30) != new_data)) {\\n    undefined8 updated_data_1 = FUN_08000190(0,0,*(undefined4 *)(data_pointer + 0x18),*(undefined4 *)(data_pointer + 0x1c),param_4);\\n    *(undefined8 *)(data_pointer + 0x18) = updated_data_1;\\n    undefined8 updated_data_2 = FUN_08000190(0,0,*(undefined4 *)(data_pointer + 0x20),*(undefined4 *)(data_pointer + 0x24));\\n    *(undefined8 *)(data_pointer + 0x20) = updated_data_2;\\n    undefined8 updated_data_3 = FUN_08000190(0,0,*(undefined4 *)(data_pointer + 0x28),*(undefined4 *)(data_pointer + 0x2c));\\n    *(undefined8 *)(data_pointer + 0x28) = updated_data_3;\\n  }\\n  *(int *)(data_pointer + 0x30) = new_data;\\n  return;\\n}",
            "called": [
                "FUN_08000190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a66",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "update_data_if_needed_08001a66"
        },
        "FUN_08003c44": {
            "renaming": {
                "FUN_08003c44": "get_value_from_pointer_08003c44",
                "PTR_DAT_08003c4c": "pointer"
            },
            "code": "int get_value_from_pointer_08003c44(){\n                        int* PTR_DAT_08003c4c = (int*) PTR_DAT_08003c4c;\n                        int value = *PTR_DAT_08003c4c;\n                        return value;\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c44",
            "calling": [
                "FUN_08003c70",
                "FUN_08001b48",
                "FUN_08003c50"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08003c44"
        },
        "FUN_080028d2": {
            "renaming": {
                "FUN_080028d2": "write_byte_to_memory_080028d2",
                "param_1": "memory_address",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int write_byte_to_memory_080028d2(int *memory_address)\n{\n    int byte_to_write = memory_address[17] & 0xff;\n    *(unsigned int *)(*memory_address + 16) = byte_to_write;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "write_byte_to_memory_080028d2"
        },
        "FUN_08000a18": {
            "renaming": {
                "FUN_08000a18": "is_end_of_input_08000a18",
                "in_CY": "current_char",
                "FUN_080009a8": "read_input"
            },
            "code": "bool is_end_of_input_08000a18(void)\n{\n  char current_char;\n  read_input();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_080009a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a18",
            "calling": [
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08000cd0",
                "FUN_080016b4",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "is_end_of_input_08000a18"
        },
        "FUN_08005384": {
            "renaming": {
                "FUN_08005384": "print_and_set_values_if_valid_08005384",
                "PTR_DAT_080053c4": "input_data",
                "PTR_DAT_080053c8": "input_data",
                "PTR_DAT_080053cc": "output_data",
                "PTR_DAT_080053d0": "output_data",
                "cVar1": "input_char",
                "puVar2": "output_ptr",
                "uVar3": "output_char",
                "iVar4": "input_index",
                "uVar5": "input_value"
            },
            "code": "void print_and_set_values_if_valid_08005384(void)\n{\n    char input_char = PTR_DAT_080053c4[1];\n    int input_index = get_input_index((int)input_char, PTR_DAT_080053c4);\n    if (input_index != 0) {\n        int input_value = get_input_index((int)input_char, PTR_DAT_080053c4);\n        char output_char = get_output_char(input_value, PTR_DAT_080053cc);\n        unsigned char *output_ptr = PTR_DAT_080053cc;\n        output_ptr[0x59] = output_char;\n        output_ptr[0x58] = input_char;\n        *(unsigned int *)(output_ptr + 0x48) = 0x2580;\n        *(unsigned int *)(output_ptr + 0x54) = 0;\n        *(unsigned int *)(output_ptr + 0x4c) = 0;\n        *(unsigned int *)(output_ptr + 0x50) = 0;\n        print_output(output_ptr);\n    }\n    return;\n}",
            "called": [
                "FUN_08004f4c",
                "FUN_08004ca2",
                "FUN_08004c78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005384",
            "calling": [
                "FUN_080053d4"
            ],
            "imported": false,
            "current_name": "print_and_set_values_if_valid_08005384"
        },
        "FUN_08005b3c": {
            "renaming": {
                "FUN_08005b3c": "getByteValue_08005b3c",
                "param_1": "memoryOffset",
                "param_2": "byteIndex",
                "uVar1": "byteValue"
            },
            "code": "void getByteValue_08005b3c(int memoryOffset, uint byteIndex)\n{\n    unsigned char byteValue;\n\n    if (byteIndex < 0x3c)\n    {\n        byteValue = PTR_DAT_08005b50[byteIndex];\n    }\n    else\n    {\n        byteValue = 0xff;\n    }\n\n    *(unsigned char *)(memoryOffset + 300) = byteValue;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b3c",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "getByteValue_08005b3c"
        },
        "FUN_080046b8": {
            "renaming": {
                "FUN_080046b8": "process_data_080046b8",
                "param_1": "data",
                "iVar1": "result",
                "puVar3": "values",
                "uVar2": "value2",
                "uVar4": "bit_value",
                "uVar5": "value1",
                "FUN_08004618": "execute_function1",
                "FUN_08004198": "execute_function2",
                "FUN_080045fe": "execute_function3",
                "do_nothing_08005650": "do_nothing",
                "FUN_0800417c": "execute_function4",
                "PTR_LAB_080047d8_1_080047d4": "renamed_label_1"
            },
            "code": "void process_data_080046b8(uint **data)\n{\n    uint *values = *data;\n    uint value1 = *values;\n    uint value2 = values[3];\n    if (((value1 & 0xf) == 0) && ((value1 & 0x20) != 0)) && ((value2 & 0x20) != 0)) {\n        execute_function1(data);\n        return;\n    }\n    if (((value1 & 0xf) == 0) || ((values[5] & 1) == 0 && ((value2 & 0x120) == 0)))) {\n        if (((value1 & 0x80) != 0) && ((value2 & 0x80) != 0)) {\n            execute_function2(data);\n            return;\n        }\n        if (((value1 & 0x40) != 0) && ((value2 & 0x40) != 0)) {\n            execute_function3(data);\n        }\n    }\n    else {\n        if (((value1 & 1) != 0) && ((value2 & 0x100) != 0)) {\n            data[0xf] = (uint *)((uint)data[0xf] | 1);\n        }\n        if (((value1 & 4) != 0) && ((values[5] & 1) != 0)) {\n            data[0xf] = (uint *)((uint)data[0xf] | 2);\n        }\n        if (((value1 & 2) != 0) && ((values[5] & 1) != 0)) {\n            data[0xf] = (uint *)((uint)data[0xf] | 4);\n        }\n        if (((value1 & 8) != 0) && ((values[5] & 1) != 0)) {\n            data[0xf] = (uint *)((uint)data[0xf] | 8);\n        }\n        if (data[0xf] != (uint *)0x0) {\n            if (((value1 & 0x20) != 0) && ((value2 & 0x20) != 0)) {\n                execute_function1(data);\n            }\n            if ((((uint)data[0xf] & 8) == 0) && ((*(data[0]))[5] & 0x40) == 0)) {\n                do_nothing(data);\n                data[0xf] = (uint *)0x0;\n                return;\n            }\n            execute_function4(data);\n            values = *data;\n            if ((values[5] & 0x40) == 0) {\n                do_nothing(data);\n                return;\n            }\n            values[5] = values[5] & 0xffffffbf;\n            if (data[0xd] == (uint *)0x0) {\n                do_nothing(data);\n                return;\n            }\n            data[0xd][0xd] = (uint)PTR_LAB_080047d8_1_080047d4;\n            int result = function_call(data[0xd]);\n            if (result != 0) {\n                (*(code *)data[0xd][0xd])();\n                return;\n            }\n        }\n    }\n}",
            "called": [
                "FUN_08004198",
                "FUN_0800417c",
                "FUN_08004618",
                "FUN_080045fe",
                "FUN_08005650",
                "FUN_0800258c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b8",
            "calling": [],
            "imported": false,
            "current_name": "process_data_080046b8"
        },
        "FUN_08004c8a": {
            "renaming": {
                "FUN_08004c8a": "find_param_value_08004c8a",
                "param_1": "search_value",
                "param_2": "param_list",
                "*param_2": "*param_list"
            },
            "code": "int find_param_value_08004c8a(int search_value, char *param_list)\n{\n    while(true)\n    {\n        if (*(int *)(param_list + 4) == 0)\n        {\n            return -1;\n        }\n        if (*(int *)(param_list + 4) == search_value)\n        {\n            break;\n        }\n        param_list = param_list + 0xc;\n    }\n    return (int)*param_list;\n}",
            "called": [
                "FUN_08004c8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c8a",
            "calling": [
                "FUN_08004c8a",
                "FUN_08004ca2"
            ],
            "imported": false,
            "current_name": "find_param_value_08004c8a"
        },
        "FUN_08001cd0": {
            "renaming": {
                "FUN_08001cd0": "calculate_value_08001cd0",
                "param_1": "data",
                "param_2": "length",
                "iVar1": "start_time",
                "uVar2": "result",
                "iVar3": "elapsed_time",
                "uVar4": "result",
                "puVar5": "ptr",
                "uVar6": "numerator",
                "local_1c": "local_counter",
                "DAT_08001e2c": "denominator",
                "DAT_08001e30": "mask1",
                "DAT_08001e34": "mask2",
                "DAT_08001e38": "mask3",
                "DAT_08001e3c": "mask4"
            },
            "code": "uint32_t calculate_value_08001cd0(uint32_t **data, uint32_t length) {\n  int start_time = get_start_time();\n  uint32_t *ptr = *data;\n  uint32_t result = 0;\n  uint32_t local_counter = 0;\n  uint32_t factor = get_factor();\n  uint32_t threshold = get_threshold();\n  uint32_t DAT_08001e30 = get_DAT_08001e30();\n  uint32_t DAT_08001e34 = get_DAT_08001e34();\n  uint32_t DAT_08001e38 = get_DAT_08001e38();\n\n  if ((ptr[2] & DAT_08001e30) == 0) {\n    if (((ptr[1] & DAT_08001e30) == 0) && ((ptr[0xb] & DAT_08001e34) == 0)) {\n      while ((**data & 2) == 0) {\n        if ((length != 0xffffffff) && ((length != 0) && (get_start_time() - start_time > length))) {\n          (*data)[10] |= 4;\n          (*data)[9] = 0;\n          return 3;\n        }\n      }\n      (*data)[10] |= 4;\n      (*data)[9] = 0;\n      result = 3;\n    }\n    else {\n      uint32_t numerator = get_numerator();\n      uint32_t DAT_08001e2c = get_DAT_08001e2c(2);\n      uint32_t temp_result = 0;\n      if (((ptr[4] & DAT_08001e38) == 0) && ((ptr[3] & (DAT_08001e38 + 0xdc000000)) == 0)) {\n        if ((ptr[4] & DAT_08001e34) == 0) {\n          if ((ptr[3] & get_DAT_08001e3c()) == 0) {\n            temp_result = 0x14;\n          }\n          else {\n            temp_result = 0x29;\n          }\n        }\n        else {\n          temp_result = 0x29;\n        }\n      }\n      else if (((ptr[4] & DAT_08001e34) == 0) && ((ptr[3] & (DAT_08001e34 + 0xee000000)) == 0)) {\n        temp_result = 0x54;\n      }\n      else if ((get_mask5() & ptr[4]) == 0) {\n        if ((get_mask5() & ptr[3]) == 0) {\n          temp_result = 0x54;\n        }\n        else {\n          temp_result = 0xfc;\n        }\n      }\n      else {\n        temp_result = 0xfc;\n      }\n      result = (numerator / DAT_08001e2c) * temp_result;\n      while ((local_counter <= result) && (result - local_counter != 0)) {\n        if ((length != 0xffffffff) && ((length != 0) && (get_start_time() - start_time > length))) {\n          (*data)[10] |= 4;\n          (*data)[9] = 0;\n          return 3;\n        }\n        local_counter++;\n      }\n      (**data) = 0xffffffed;\n      (*data)[10] |= 0x200;\n      if (((*data)[2] & 0xe0000) == 0xe0000) {\n        if ((*data)[3] == NULL) {\n          (*data)[10] &= 0xfffffeff;\n          if (((*data)[10] & 0x1000) == 0) {\n            (*data)[10] |= 1;\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    (*data)[10] |= 0x20;\n    (*data)[9] = 0;\n    result = 1;\n  }\n  return result;\n}\n",
            "called": [
                "FUN_08003da4",
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cd0",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "calculate_value_08001cd0"
        },
        "FUN_08004178": {
            "renaming": {
                "FUN_08004178": "do_nothing_08004178"
            },
            "code": "\nvoid do_nothing_08004178(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004178",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08004178"
        },
        "FUN_08004a4c": {
            "renaming": {
                "FUN_08004a4c": "parse_data_08004a4c",
                "param_1": "params",
                "local_38": "params->local_var_38",
                "local_44": "params->local_var_44",
                "local_40": "params->local_var_40",
                "local_3c": "params->local_var_3c",
                "local_46": "params->local_var_46",
                "local_34": "params->local_var_34",
                "local_30": "params->local_var_30",
                "local_2c": "params->local_var_2c",
                "local_28": "params->local_var_28",
                "local_24": "params->local_var_24",
                "local_20": "params->local_var_20",
                "local_1c": "params->local_var_1c",
                "local_10": "params->local_var_10",
                "PTR_DAT_08004b2c": "PTR_DAT",
                "PTR_DAT_08004b30": "PTR_DAT_08004b30"
            },
            "code": "typedef unsigned short uint16_t;\n\ntypedef struct {\n    int32_t local_var_38;\n    uint16_t local_var_44;\n    int32_t local_var_40;\n    int32_t local_var_3c;\n    uint16_t local_var_46;\n    int32_t local_var_34;\n    int32_t local_var_30;\n    int32_t local_var_2c;\n    int32_t local_var_28;\n    int32_t local_var_24;\n    int32_t local_var_20;\n    int32_t local_var_1c;\n    int32_t local_var_10;\n} func_params_t;\n\nuint16_t parse_data_08004a4c(func_params_t* params) {\n    FUN_080061e0(&params->local_var_38, 0, 0x30);\n    params->local_var_44 = 0;\n    params->local_var_40 = 0;\n    params->local_var_3c = 0;\n    params->local_var_46 = 0;\n    params->local_var_38 = FUN_08004c78(params->local_var_38, PTR_DAT_08004b2c_08004b2c);\n    if (params->local_var_38 == 0) {\n        params->local_var_46 = 0;\n    }\n    else {\n        params->local_var_34 = 0;\n        params->local_var_30 = 0;\n        params->local_var_2c = 0;\n        params->local_var_24 = 0;\n        params->local_var_1c = 0xe0000;\n        params->local_var_10 = 0;\n        params->local_var_28 = 1;\n        params->local_var_20 = 0;\n        *PTR_DAT_08004b2c_08004b30 = (char)params->local_var_38;\n        int32_t ret = FUN_0800213c(&params->local_var_38);\n        if (ret == 0) {\n            params->local_var_44 = FUN_0800492c(params->local_var_38);\n            if (params->local_var_44 < 0x12) {\n                params->local_var_40 = 1;\n                params->local_var_3c = 2;\n                ret = FUN_08001e48(&params->local_var_38, &params->local_var_44);\n                if (ret == 0) {\n                    ret = FUN_08002384(&params->local_var_38);\n                    if (ret == 0) {\n                        ret = FUN_08002004(&params->local_var_38);\n                        if (ret == 0) {\n                            ret = FUN_08001cd0(&params->local_var_38, 10);\n                            if (ret == 0) {\n                                uint16_t uVar2 = FUN_08001f80(&params->local_var_38);\n                                if ((uVar2 & 0x200) != 0) {\n                                    params->local_var_46 = FUN_08001e40(&params->local_var_38);\n                                }\n                                ret = FUN_08002348(&params->local_var_38);\n                                if (ret != 0) {\n                                    params->local_var_46 = 0;\n                                }\n                                else {\n                                    ret = FUN_0800224c(&params->local_var_38);\n                                    if (ret != 0) {\n                                        params->local_var_46 = 0;\n                                    }\n                                }\n                            }\n                            else {\n                                params->local_var_46 = 0;\n                            }\n                        }\n                        else {\n                            params->local_var_46 = 0;\n                        }\n                    }\n                    else {\n                        params->local_var_46 = 0;\n                    }\n                }\n                else {\n                    params->local_var_46 = 0;\n                }\n            }\n            else {\n                params->local_var_46 = 0;\n            }\n        }\n        else {\n            params->local_var_46 = 0;\n        }\n    }\n    return params->local_var_46;\n}",
            "called": [
                "FUN_08001e40",
                "FUN_08001f80",
                "FUN_08001cd0",
                "FUN_0800492c",
                "FUN_0800224c",
                "FUN_08002348",
                "FUN_0800213c",
                "FUN_08002004",
                "FUN_08002384",
                "FUN_08001e48",
                "FUN_080061e0",
                "FUN_08004c78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a4c",
            "calling": [
                "FUN_08005754"
            ],
            "imported": false,
            "current_name": "parse_data_08004a4c"
        },
        "FUN_08006112": {
            "renaming": {
                "FUN_08006112": "swap_pointers_08006112",
                "param_1": "pointer_1",
                "param_2": "pointer_2",
                "FUN_08006158": "N/A"
            },
            "code": "void swap_pointers_08006112(void* pointer_1, void* pointer_2)\n{\n    void* temp_pointer = pointer_1;\n    pointer_1 = pointer_2;\n    pointer_2 = temp_pointer;\n    return;\n}",
            "called": [
                "FUN_08006158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006112",
            "calling": [
                "FUN_08005fc8"
            ],
            "imported": false,
            "current_name": "swap_pointers_08006112"
        },
        "FUN_08004974": {
            "renaming": {
                "FUN_08004974": "process_flags_08004974",
                "param_1": "flag_ptr",
                "param_2": "flag_value",
                "puVar1": "FLAG_G",
                "iVar2": "FLAG_PTR",
                "uVar3": "result",
                "uVar4": "flag_mask",
                "uVar5": "current_flag",
                "local_18": "local_bitfield",
                "local_14": "unused_variable",
                "local_10": "unused_variable"
            },
            "code": "void process_flags_08004974(uint *flag_ptr, undefined4 flag_value)\n{\n    uint current_flag = *flag_ptr;\n    uint flag_mask;\n    uint flag_bit;\n    uint local_bitfield;\n    undefined4 local_14;\n    undefined4 local_10;\n\n    if (current_flag == FLAG_A)\n    {\n        flag_mask = (uint)(FLAG_B) | FLAG_C;\n        *(uint *)(FLAG_PTR) = flag_mask;\n        flag_bit = *(uint *)(FLAG_PTR) & FLAG_B;\n    }\n    else if (current_flag == FLAG_D)\n    {\n        flag_mask = (uint)(FLAG_E) | FLAG_F;\n        *(uint *)(FLAG_PTR) = flag_mask;\n        flag_bit = *(uint *)(FLAG_PTR) & FLAG_E;\n    }\n\n    local_bitfield = 1 << ((byte)*FLAG_G & 0xf) & 0xffff;\n    local_14 = 3;\n    local_10 = 0;\n    uint result = calculate_result((uint)((int)(char)*FLAG_G << 0x18) >> 0x1c, flag_value, flag_mask, flag_bit);\n    apply_result(result, &local_bitfield);\n}",
            "called": [
                "FUN_08004884",
                "FUN_08002624"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004974",
            "calling": [
                "FUN_0800213c"
            ],
            "imported": false,
            "current_name": "process_flags_08004974"
        },
        "FUN_08003520": {
            "renaming": {
                "FUN_08003520": "check_and_update_flags_08003520",
                "param_1": "params",
                "cVar1": "character",
                "puVar2": "param_array",
                "uVar3": "flags",
                "uVar4": "flag_mask",
                "DAT_080035f8": "FLAG_1_MASK",
                "0x100": "FLAG_2_MASK",
                "0x10200": "FLAG_3_MASK",
                "0x10400": "FLAG_4_MASK",
                "0x10800": "FLAG_5_MASK",
                "0x10": "flag_update_array",
                "FUN_08002d1c": "do_something",
                "FUN_0800316c": "update_flags"
            },
            "code": "void check_and_update_flags_08003520(uint **params)\n{\n  uint *param_array = *params;\n  uint flags = param_array[5];\n  uint flag_mask = param_array[1];\n  \n  if (((flags & DAT_080035f8) != 0) && ((flag_mask & FLAG_2_MASK) != 0)) {\n    params[16] = (uint *)((uint)params[16] | 1);\n    param_array[5] = 0xfffffeff;\n    **params = **params | 0x8000;\n  }\n  \n  if (((flags & FLAG_3_MASK) != 0) && ((flag_mask & FLAG_2_MASK) != 0)) {\n    params[16] = (uint *)((uint)params[16] | 2);\n    (*params)[5] = 0xfffffdff;\n  }\n  \n  if (((flags & FLAG_4_MASK) != 0) && ((flag_mask & FLAG_2_MASK) != 0)) {\n    char c = *(char *)((int)params + 0x3d);\n    if (((*(char *)((int)params + 0x3e) == ' ') && (*(short *)((int)params + 0x2a) == 0)) &&\n       (((c == '!' || (c == ')')) || ((c == '(' && (params[12] == (uint *)0x21)))))) {\n      do_something(params);\n    }\n    else {\n      params[16] = (uint *)((uint)params[16] | 4);\n      if (*(char *)((int)params + 0x3e) == '\\x10') {\n        **params = **params | 0x200;\n      }\n      (*params)[5] = 0xfffffbff;\n    }\n  }\n  \n  if (((flags & FLAG_5_MASK) != 0) && ((flag_mask & FLAG_2_MASK) != 0)) {\n    params[16] = (uint *)((uint)params[16] | 8);\n    (*params)[5] = 0xfffff7ff;\n  }\n  \n  if (params[16] != (uint *)0x0) {\n    update_flags(params);\n  }\n  return;\n}",
            "called": [
                "FUN_0800316c",
                "FUN_08002d1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003520",
            "calling": [],
            "imported": false,
            "current_name": "check_and_update_flags_08003520"
        },
        "FUN_08002ca6": {
            "renaming": {
                "FUN_08002ca6": "process_data_08002ca6",
                "param_1": "data",
                "puVar2": "data_ptr",
                "cVar1": "current_char"
            },
            "code": "int process_data_08002ca6(int *data)\n{\n    char current_char = *(char *)((int)data + 0x3d);\n    if (*(short *)((int)data + 0x2a) != 0) {\n        undefined *data_ptr = (undefined *)data[9];\n        data[9] = (int)(data_ptr + 1);\n        *data_ptr = (char)*(undefined4 *)(*data + 0x10);\n        *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        if ((*(short *)((int)data + 0x2a) == 0) && (current_char == '*')) {\n            *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n            data[0xc] = 0x22;\n            *(undefined *)((int)data + 0x3d) = 0x28;\n            do_nothing();\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_08002ca4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca6",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_data_08002ca6"
        },
        "FUN_08002ca4": {
            "renaming": {
                "FUN_08002ca4": "do_nothing_08002ca4"
            },
            "code": "\nvoid do_nothing_08002ca4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca4",
            "calling": [
                "FUN_08002ca6",
                "FUN_080032b4"
            ],
            "imported": false,
            "current_name": "do_nothing_08002ca4"
        },
        "FUN_08007328": {
            "renaming": {
                "FUN_08007328": "do_nothing_08007328"
            },
            "code": "\nvoid do_nothing_08007328(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007328",
            "calling": [
                "FUN_08006198",
                "FUN_0800010c"
            ],
            "imported": false,
            "current_name": "do_nothing_08007328"
        },
        "FUN_08005b54": {
            "renaming": {
                "FUN_08005b54": "initialize_params_08005b54",
                "param_1": "params_array",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "PTR_PTR_LAB_080059c8_1_08005ba0": "PTR_PTR_LAB_080059c8_1_08005ba0",
                "PTR_DAT_08005ba4": "PTR_DAT_08005ba4",
                "FUN_08005b24": "initialize_params",
                "FUN_08005b3c": "set_param_flag",
                "FUN_08004ca2": "get_param_value",
                "PTR_DAT_08005ba8": "PTR_DAT_08005ba8",
                "PTR_DAT_08005bac": "PTR_DAT_08005bac",
                "finalize_params": "finalize_params",
                "*(undefined *)((int)param_1 + 0x12d)": "*(undefined *)((int)params_array + 0x12d)",
                "*(undefined *)(param_1 + 0x4b)": "*(undefined *)(params_array + 0x4b)"
            },
            "code": "undefined4 *initialize_params_08005b54(undefined4 *params_array, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined uVar1;\n  params_array[1] = 0;\n  params_array[2] = 1000;\n  *params_array = PTR_PTR_LAB_080059c8_1_08005ba0;\n  if (params_array == (undefined4 *)PTR_DAT_08005ba4) {\n    initialize_params_08005b54(params_array,0,param_3,PTR_DAT_08005ba4,param_4);\n    set_param_flag(params_array,1);\n  }\n  else {\n    uVar1 = get_param_value(param_2,PTR_DAT_08005ba8);\n    *(undefined *)((int)params_array + 0x12d) = uVar1;\n    uVar1 = get_param_value(param_2,PTR_DAT_08005bac);\n    *(undefined *)(params_array + 0x4b) = uVar1;\n  }\n  finalize_params(params_array);\n  return params_array;\n}",
            "called": [
                "FUN_08005b3c",
                "FUN_08005a44",
                "FUN_08005b24",
                "FUN_08004ca2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b54",
            "calling": [
                "FUN_08005bb0"
            ],
            "imported": false,
            "current_name": "initialize_params_08005b54"
        },
        "FUN_08004618": {
            "renaming": {
                "FUN_08004618": "process_data_08004618",
                "param_1": "data",
                "pbVar1": "destination_byte",
                "puVar3": "destination_char",
                "sVar2": "count",
                "source": "source_data",
                "string": "data_string",
                "type": "data_type"
            },
            "code": "int process_data_08004618(int *data)\n{\n    char *string = (char *)(data + 0x3a);\n    if (*string != '\"') {\n        return 2;\n    }\n    int type = data[2];\n    int *source = (int *)(*data + 4);\n    int *destination = (int *)(data + 10);\n    if (data[4] == 0) {\n        if (type == 0x1000) {\n            *destination = (ushort)((uint)(*source << 0x17) >> 0x17);\n            destination += 2;\n        } else {\n            *destination = (char)(*source);\n            ++destination;\n        }\n    } else {\n        if (type == 0x1000) {\n            *destination = (ushort)(*source & 0xff);\n            ++destination;\n        } else {\n            *destination = (byte)(*source & 0x7f);\n            ++destination;\n        }\n    }\n    short count = *(short *)(data + 0x2e) - 1;\n    *(short *)(data + 0x2e) = count;\n    if (count != 0) {\n        return 0;\n    }\n    *(uint *)(*data + 0xc) &= 0xffffffdf;\n    *(uint *)(*data + 0xc) &= 0xfffffeff;\n    *(uint *)(*data + 0x14) &= 0xfffffffe;\n    *string = ' ';\n    execute_function();\n    return 0;\n}",
            "called": [
                "FUN_080055e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004618",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "process_data_08004618"
        },
        "FUN_08006c40": {
            "renaming": {
                "FUN_08006c40": "initialize_array_08006c40",
                "param_1": "arr",
                "param_2": "val1",
                "param_3": "val2",
                "uVar1": "DAT_08006c78"
            },
            "code": "void initialize_array_08006c40(int* arr, int val1, int val2, int val3, int val4, int val5){\n    arr[0] = 0;\n    arr[1] = 0;\n    arr[2] = 0;\n    *(short*)(arr + 3) = val1;\n    arr[25] = 0;\n    *(short*)((int)arr + 14) = val2;\n    arr[4] = 0;\n    arr[5] = 0;\n    arr[6] = 0;\n    memset(arr + 23, 0, 8);\n    arr[8] = arr;\n    arr[9] = DAT_08006c78;\n    arr[10] = PTR_FUN_08006f5a_1_08006c7c;\n    arr[11] = PTR_FUN_08006f92_1_08006c80;\n    arr[12] = PTR_LAB_08006fb6_1_08006c84;\n}",
            "called": [
                "FUN_080061e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c40",
            "calling": [
                "FUN_08006cb4"
            ],
            "imported": false,
            "current_name": "initialize_array_08006c40"
        },
        "FUN_0800157c": {
            "renaming": {
                "FUN_0800157c": "encode_message_0800157c",
                "param_1": "message",
                "param_2": "message_length",
                "param_3": "first_char",
                "param_4": "second_char",
                "*param_1": "message[0]",
                "param_1[1]": "message[1]",
                "param_1[2]": "message[2]",
                "FUN_080057b4": "encode_char",
                "FUN_08005848": "some_other_function"
            },
            "code": "char* encode_message_0800157c(char* message, int message_length, char first_char, char second_char) {\n    message[0] = first_char;\n    message[1] = second_char;\n    message[2] = '\\0';\n    encode_char(first_char, 0);\n    encode_char(second_char, 1);\n    encode_char(message[1], 1);\n    encode_char(message[2], 0);\n    return message;\n}\n",
            "called": [
                "FUN_080057b4",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": false,
            "current_name": "encode_message_0800157c"
        },
        "FUN_080045a2": {
            "renaming": {
                "FUN_080045a2": "validate_input_080045a2",
                "param_1": "input_array",
                "param_2": "array_length",
                "param_3": "value",
                "*(char *)((int)param_1 + 0x3a)": "input_array[46]",
                "*(char *)(param_1 + 0xe)": "input_array[14]",
                "*(short *)(param_1 + 0xb)": "input_array[11]",
                "*(short *)((int)param_1 + 0x2e)": "input_array[46]",
                "param_1[0xf]": "input_array[15]",
                "*(undefined *)((int)param_1 + 0x3a)": "input_array[46]",
                "*(undefined *)(param_1 + 0xe)": "input_array[14]",
                "*(uint *)(*param_1 + 0xc)": "*input_array + 0xc",
                "*(uint *)(*param_1 + 0x14)": "*input_array + 0x14"
            },
            "code": "int validate_input_080045a2(int *input_array, int array_length, int value) {\n    if (input_array[10] != 0x20) {\n        return 2;\n    }\n    if (array_length == 0) {\n        return 1;\n    }\n    if (value == 0) {\n        return 1;\n    }\n    if (input_array[14] != 1) {\n        input_array[10] = array_length;\n        input_array[11] = (short)value;\n        input_array[14] = 0;\n        input_array[15] = 0;\n        input_array[46] = 0x22;\n        input_array[14] = 0;\n        *(uint *)(*input_array + 0xc) |= 0x100;\n        *(uint *)(*input_array + 0x14) |= 1;\n        *(uint *)(*input_array + 0xc) |= 0x20;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045a2",
            "calling": [
                "FUN_080054d4",
                "FUN_08005510"
            ],
            "imported": false,
            "current_name": "validate_input_080045a2"
        },
        "FUN_08001c32": {
            "renaming": {
                "FUN_08001c32": "execute_initialization_08001c32",
                "FUN_08004c52": "execute_system_startup"
            },
            "code": "void execute_initialization_08001c32(void)\n{\n  execute_system_startup();\n  return;\n}",
            "called": [
                "FUN_08004c52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c32",
            "calling": [
                "FUN_08005f5e"
            ],
            "imported": false,
            "current_name": "execute_initialization_08001c32"
        },
        "FUN_080047e8": {
            "renaming": {
                "FUN_080047e8": "combine_bytes_at_offsets_080047e8",
                "param_1": "address",
                "* (byte *) (param_1 + 0x3a)": "byte1",
                "* (byte *) (param_1 + 0x39)": "byte2"
            },
            "code": "byte combine_bytes_at_offsets_080047e8(int address)\n{\n    byte byte1 = *(byte *)(address + 0x3a);\n    byte byte2 = *(byte *)(address + 0x39);\n    return byte1 | byte2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047e8",
            "calling": [
                "FUN_0800548c",
                "FUN_080054b0"
            ],
            "imported": false,
            "current_name": "combine_bytes_at_offsets_080047e8"
        },
        "FUN_080057b4": {
            "renaming": {
                "FUN_080057b4": "process_data_080057b4",
                "param_1": "index",
                "param_2": "action_type",
                "param_3": "data_type",
                "param_4": "data_buffer",
                "iVar1": "result",
                "puVar2": "data_ptr",
                "iVar3": "data_index",
                "PTR_DAT_08005838": "original_data",
                "PTR_DAT_0800583c": "original_data_types",
                "PTR_DAT_08005840": "check_data",
                "FUN_08004ce2": "check_data",
                "FUN_08004b3c": "free_data",
                "FUN_08004828": "process_data_type",
                "FUN_08004bb0": "set_data_type",
                "FUN_0800480a": "set_data_status",
                "PTR_DAT_08005844": "original_data_status"
            },
            "code": "void process_data_080057b4(uint8_t index, uint32_t action_type, uint32_t data_type, uint8_t *data_buffer)\n{\n    int data_index;\n    uint8_t *data_ptr;\n    int data_length;\n  \n    if (index < 0x3c) {\n        data_index = (int)(char)PTR_DAT_08005838[index];\n        data_ptr = PTR_DAT_08005838;\n    }\n    else {\n        data_index = -1;\n        data_ptr = data_buffer;\n    }\n    if (data_index != -1) {\n        int result = process_data_080057b4_type(data_index, data_type, data_ptr, data_buffer);\n        if (result != 0) {\n            int check = PTR_DAT_08005840(data_index, PTR_DAT_0800583c);\n            if (check != 0) {\n                free_data(data_index);\n            }\n            process_data_080057b4_type(data_index, data_type, data_ptr, data_buffer);\n        }\n        switch(action_type) {\n            case 0:\n                set_data_type(data_index, 0);\n                break;\n            case 1:\n                set_data_type(data_index, 1, 0);\n                break;\n            case 2:\n                set_data_type(data_index, 0, 1);\n                break;\n            case 3:\n                set_data_type(data_index, 0, 2);\n        }\n        set_data_status(data_index, PTR_DAT_08005844);\n    }\n}",
            "called": [
                "FUN_08004b3c",
                "FUN_080047f4",
                "FUN_08004bb0",
                "FUN_08004828",
                "FUN_0800480a",
                "FUN_08004ce2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057b4",
            "calling": [
                "FUN_0800157c",
                "FUN_08000bcc",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "process_data_080057b4"
        },
        "FUN_08007334": {
            "renaming": {
                "FUN_08007334": "do_nothing_08007334"
            },
            "code": "\nvoid do_nothing_08007334(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007334",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08007334"
        },
        "FUN_08001b18": {
            "renaming": {
                "FUN_08001b18": "execute_function_08001b18",
                "param_1": "argument",
                "FUN_08001ab0": "call_function_A"
            },
            "code": "undefined4 execute_function_08001b18(undefined4 argument){\n  call_function_A();\n  return argument;\n}",
            "called": [
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b18",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": false,
            "current_name": "execute_function_08001b18"
        },
        "thunk_FUN_08005750": {
            "renaming": {
                "thunk_FUN_08005750": "return_one_thunk_08005750"
            },
            "code": "int return_one_thunk_08005750() {\n  return 1;\n}",
            "called": [
                "FUN_08005750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f34",
            "calling": [
                "FUN_08006f00"
            ],
            "imported": false,
            "current_name": "return_one_thunk_08005750"
        },
        "FUN_0800092c": {
            "renaming": {
                "FUN_0800092c": "check_params_0800092c",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "xor_of_second_and_fourth",
                "bVar2": "is_first_param_zero",
                "bVar3": "is_third_param_zero"
            },
            "code": "uint check_params_0800092c(uint first_param, uint second_param, uint third_param, uint fourth_param)\n{\n  uint result;\n  bool is_first_param_zero = (first_param | second_param << 1) == 0;\n  bool is_third_param_zero = (third_param | fourth_param << 1) == 0;\n  bool are_second_and_fourth_same = second_param == fourth_param;\n  bool are_first_and_third_same = first_param == third_param;\n  if (((int)(second_param << 1) >> 0x15 == -1 || (int)(fourth_param << 1) >> 0x15 == -1) && ((((int)(second_param << 1) >> 0x15 == -1 && !is_first_param_zero) || ((int)(fourth_param << 1) >> 0x15 == -1 && !is_third_param_zero))))) {\n    return 1;\n  }\n  if (!is_first_param_zero && !is_third_param_zero && !are_second_and_fourth_same && !are_first_and_third_same) {\n    uint xor_of_second_and_fourth = second_param ^ fourth_param;\n    bool is_xor_of_second_and_fourth_zero = xor_of_second_and_fourth == 0;\n    bool is_xor_of_second_and_fourth_negative = -1 < (int)xor_of_second_and_fourth;\n    bool is_fourth_param_less_than_or_equal_to_second_param = fourth_param <= second_param;\n    bool is_third_param_less_than_or_equal_to_first_param = third_param <= first_param;\n    if (is_xor_of_second_and_fourth_zero) {\n      result = is_third_param_less_than_or_equal_to_first_param;\n    }\n    else {\n      if (is_xor_of_second_and_fourth_negative) {\n        result = are_second_and_fourth_same || is_fourth_param_less_than_or_equal_to_second_param;\n      }\n      else {\n        result = !is_fourth_param_less_than_or_equal_to_second_param;\n      }\n      result = ~result + 1;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800092c",
            "calling": [
                "FUN_080009b8"
            ],
            "imported": false,
            "current_name": "check_params_0800092c"
        },
        "FUN_08005d8a": {
            "renaming": {
                "FUN_08005d8a": "process_data_08005d8a",
                "param_1": "func_ptr",
                "param_2": "data",
                "param_3": "length",
                "param_4": "param_4"
            },
            "code": "void process_data_08005d8a(undefined4 *func_ptr, uint data, uint length, undefined4 param_4){\n  if (length != 0) {\n    func_ptr(data, length & 0xff);\n    return;\n  }\n  (**(code **)*func_ptr)(func_ptr, data & 0xff, 0, *(code **)*func_ptr, param_4);\n  return;\n}",
            "called": [
                "FUN_08005ce8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d8a",
            "calling": [
                "FUN_08005da0",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "process_data_08005d8a"
        },
        "FUN_08002560": {
            "renaming": {
                "FUN_08002560": "set_flag_if_param_is_4_08002560",
                "param_1": "param",
                "*DAT_0800257c": "*flag_ptr"
            },
            "code": "void set_flag_if_param_is_4_08002560(int param) {\n  if (param != 4) {\n    *DAT_0800257c = *DAT_0800257c & 0xfffffffb;\n    return;\n  }\n  *DAT_0800257c = *DAT_0800257c | 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002560",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "set_flag_if_param_is_4_08002560"
        },
        "FUN_08006e90": {
            "renaming": {
                "FUN_08006e90": "find_char_in_string_08006e90",
                "param_1": "str",
                "param_2": "ch",
                "param_3": "str_len",
                "pcVar1": "current_char",
                "pcVar2": "temp_char"
            },
            "code": "char* find_char_in_string_08006e90(char* str, char ch, int str_len) {\n  char* current_char = str;\n  while (current_char != str + str_len) {\n    if (*current_char == ch) {\n      return current_char;\n    }\n    current_char++;\n  }\n  return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e90",
            "calling": [
                "FUN_080066b0",
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "find_char_in_string_08006e90"
        },
        "FUN_0800417a": {
            "renaming": {
                "FUN_0800417a": "do_nothing_0800417a"
            },
            "code": "\nvoid do_nothing_0800417a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417a",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_0800417a"
        },
        "FUN_08006920": {
            "renaming": {
                "FUN_08006920": "processInput_08006920",
                "param_1": "output",
                "param_2": "inputValue",
                "puVar1": "dataPtr",
                "iVar2": "result"
            },
            "code": "void processInput_08006920(int *output, undefined4 inputValue)\n{\n  undefined *dataPtr;\n  int result;\n  dataPtr = PTR_DAT_0800693c;\n  *(undefined4 *)PTR_DAT_0800693c = 0;\n  result = calculateValue(inputValue);\n  if ((result == -1) && (*(int *)dataPtr != 0)) {\n    *output = *(int *)dataPtr;\n  }\n  return;\n}",
            "called": [
                "FUN_080056d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006920",
            "calling": [
                "FUN_08006288"
            ],
            "imported": false,
            "current_name": "processInput_08006920"
        },
        "FUN_080008ba": {
            "renaming": {
                "FUN_080008ba": "calculate_result_080008ba",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "unaff_r4": "temp2",
                "uVar2": "temp3",
                "uVar3": "temp4",
                "in_r12": "flag",
                "bVar4": "flag2"
            },
            "code": "ulonglong calculate_result_080008ba(uint input1, uint input2, uint input3, uint input4)\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint flag;\n\n  temp1 = input4 >> 0x14;\n  temp2 = input2;\n  if (input3 != input4 || temp1 != input4) {\n    if (input3 == input4) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, temp2 = input4, temp1 != input4)) {\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (temp1 == input4) {\n      input1 = input3;\n      temp2 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      flag = (input1 | input2 << 1) == 0;\n      if (!flag) {\n        flag = (input3 | input4 << 1) == 0;\n      }\n      if (!flag) {\n        if (input3 == 0) {\n          temp2 = input2 & 0x80000000;\n          do {\n            temp3 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(temp3 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | temp2;\n          if (temp1 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          temp3 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(temp3 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_0800072c;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006f0;\n    }\n  }\n  return CONCAT44(temp2,input1) | 0x7ff8000000000000;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008ba",
            "calling": [
                "FUN_0800074c"
            ],
            "imported": false,
            "current_name": "calculate_result_080008ba"
        },
        "FUN_08002d1c": {
            "renaming": {
                "FUN_08002d1c": "process_input_08002d1c",
                "param_1": "input_data",
                "eleven": "eleven_ptr",
                "char_ptr": "char_ptr"
            },
            "code": "int process_input_08002d1c(uint **input_data){\n    uint *eleven = input_data[11];\n    char *char_ptr = (char *)input_data + 0x3d;\n    if ((eleven == (uint *)0x4 || eleven == (uint *)0x8) && (*char_ptr == '(')){\n        input_data[11] = PTR_DAT_08002dac;\n        (*input_data)[1] &= 0xfffff8ff;\n        (*input_data)[5] = 0xfffffbff;\n        **input_data &= 0xfffffbff;\n        input_data[12] = (uint *)0x0;\n        *char_ptr = 0x20;\n        *(char_ptr + 1) = 0x00;\n        FUN_08004ec4();\n    }\n    else if (*char_ptr == '!'){\n        input_data[11] = PTR_DAT_08002dac;\n        input_data[12] = (uint *)0x21;\n        *char_ptr = 0x20;\n        *(char_ptr + 1) = 0x00;\n        (*input_data)[1] &= 0xfffff8ff;\n        (*input_data)[5] = 0xfffffbff;\n        **input_data &= 0xfffffbff;\n        do_nothing_08002c52();\n    }\n    else {\n        (*input_data)[5] = 0xfffffbff;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08002c52",
                "FUN_08004ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d1c",
            "calling": [
                "FUN_08003520"
            ],
            "imported": false,
            "current_name": "process_input_08002d1c"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "get_error_code_08005714"
            },
            "code": "unsigned int get_error_code_08005714(void)\n{\n    return 0xFFFFFFFF;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [],
            "imported": false,
            "current_name": "get_error_code_08005714"
        },
        "FUN_08003da4": {
            "renaming": {
                "FUN_08003da4": "calculate_result_08003da4",
                "param_1": "input",
                "uVar1": "result",
                "local_24": "local_value_1",
                "abStack_20": "stack_array",
                "uStack_1c": "stack_value_1",
                "uStack_18": "stack_value_2",
                "uStack_14": "stack_value_3"
            },
            "code": "uint calculate_result_08003da4(int input) {\n  uint result;\n  undefined2 local_value_1;\n  byte stack_array[4];\n  undefined4 stack_value_1;\n  undefined4 stack_value_2;\n  undefined4 stack_value_3;\n\n  stack_value_3 = *(undefined4 *)(PTR_DAT_08003e8c + 8);\n  stack_value_2 = *(undefined4 *)(PTR_DAT_08003e8c + 4);\n  stack_value_1 = *(undefined4 *)PTR_DAT_08003e8c;\n  local_value_1 = *(undefined2 *)(PTR_DAT_08003e8c + 0x10);\n  if (input == 2) {\n    result = calculate_value();\n    result = result / ((((DAT_08003e90[1] << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input == 0x10) {\n    if ((*DAT_08003e90 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      result = DAT_08003e9c;\n      if ((DAT_08003e90[1] & 0x10000) != 0) {\n        result = DAT_08003e94 / *(byte *)((int)&local_value_1 - ((int)(DAT_08003e90[1] << 0xe) >> 0x1f));\n      }\n      result = result * stack_array[(DAT_08003e90[1] << 10) >> 0x1c];\n      if ((DAT_08003e90[1] & 0x400000) == 0) {\n        result = (uint)((ulonglong)DAT_08003e98 * (ulonglong)(result * 2) >> 0x21);\n      }\n    }\n  }\n  else if (input == 1) {\n    if ((DAT_08003e90[8] & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else {\n      result = DAT_08003e90[8] & 0x300;\n      if ((result == 0x200) && ((DAT_08003e90[9] & 2) != 0)) {\n        result = 32000;\n      }\n      else if (result == 0x300) {\n        if ((*DAT_08003e90 & 0x20000) == 0) {\n          result = 0;\n        }\n        else {\n          result = 0xf424;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n",
            "called": [
                "FUN_08003c70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003da4",
            "calling": [
                "FUN_08001cd0",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "calculate_result_08003da4"
        },
        "FUN_08005a44": {
            "renaming": {
                "FUN_08005a44": "initialize_struct_08005a44",
                "param_1": "struct_ptr",
                "*(int *)(param_1 + 0x130)": "*first_field",
                "param_1 + 0x11": "struct_ptr + 0x11",
                "*(undefined2 *)(param_1 + 0x134)": "*second_field",
                "*(undefined2 *)(param_1 + 0x136)": "*third_field",
                "*(int *)(param_1 + 0x138)": "*fourth_field",
                "param_1 + 0x51": "struct_ptr + 0x51",
                "*(undefined2 *)(param_1 + 0x13c)": "*fifth_field",
                "*(undefined2 *)(param_1 + 0x13e)": "*sixth_field"
            },
            "code": "void initialize_struct_08005a44(int struct_ptr)\n{\n    int* first_field = (int*)(struct_ptr + 0x130);\n    *first_field = struct_ptr + 0x11;\n    \n    short* second_field = (short*)(struct_ptr + 0x134);\n    *second_field = 0;\n    \n    short* third_field = (short*)(struct_ptr + 0x136);\n    *third_field = 0;\n    \n    int* fourth_field = (int*)(struct_ptr + 0x138);\n    *fourth_field = struct_ptr + 0x51;\n    \n    short* fifth_field = (short*)(struct_ptr + 0x13c);\n    *fifth_field = 0;\n    \n    short* sixth_field = (short*)(struct_ptr + 0x13e);\n    *sixth_field = 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a44",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "initialize_struct_08005a44"
        },
        "FUN_080009dc": {
            "renaming": {
                "FUN_080009dc": "isEndOfString_080009dc",
                "in_CY": "currentChar",
                "FUN_080009b8": "advanceToNextChar"
            },
            "code": "bool isEndOfString_080009dc(void)\n{\n  char currentChar;\n  advanceToNextChar();\n  return currentChar == '\\0';\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009dc",
            "calling": [
                "FUN_080019f6",
                "FUN_08001814",
                "FUN_08001960",
                "FUN_08000cd0",
                "FUN_080016b4",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "isEndOfString_080009dc"
        },
        "FUN_0800417c": {
            "renaming": {
                "FUN_0800417c": "clearFlags_0800417c",
                "param_1": "memory",
                "*param_1": "*memory",
                "memory_location_1": "memory_location_1",
                "memory_location_2": "memory_location_2"
            },
            "code": "void clearFlags_0800417c(int *memory)\n{\n    uint *memory_location_1 = (uint *)(*memory + 0xc);\n    uint *memory_location_2 = (uint *)(*memory + 0x14);\n    *memory_location_1 = *memory_location_1 & 0xfffffedf;\n    *memory_location_2 = *memory_location_2 & 0xfffffffe;\n    *(undefined *)((int)memory + 0x3a) = 0x20;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417c",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "clearFlags_0800417c"
        },
        "FUN_08004b94": {
            "renaming": {
                "FUN_08004b94": "initialize_application_08004b94",
                "FUN_08001cc4": "initialize_database"
            },
            "code": "void initialize_application_08004b94(void)\n{\n  initialize_database();\n  return;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b94",
            "calling": [
                "FUN_080058e0"
            ],
            "imported": false,
            "current_name": "initialize_application_08004b94"
        },
        "FUN_080058e0": {
            "renaming": {
                "FUN_080058e0": "print_hello_world_080058e0",
                "FUN_08004b94": "execute_initialization"
            },
            "code": "void print_hello_world_080058e0(void)\n{\n  execute_initialization();\n  return;\n}",
            "called": [
                "FUN_08004b94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e0",
            "calling": [
                "FUN_08001ab0",
                "FUN_08000cd0",
                "FUN_08000bcc",
                "FUN_080016b4"
            ],
            "imported": false,
            "current_name": "print_hello_world_080058e0"
        },
        "FUN_08001918": {
            "renaming": {
                "FUN_08001918": "process_data_08001918",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "temp1",
                "uVar2": "ptr1",
                "uVar3": "ptr2"
            },
            "code": "void process_data_08001918(int data_ptr, int data_size, undefined4 arg3, undefined4 arg4){\n    undefined4 temp1;\n    undefined8 ptr1;\n    undefined8 ptr2;\n    \n    if (data_size > 0) {\n        ptr1 = allocate_memory(data_size);\n        ptr2 = get_data_ptr(*(undefined4 *)(data_ptr + 0x58));\n        ptr1 = process_data_08001918_helper((int)ptr1, (int)((ulonglong)ptr1 >> 0x20), (int)ptr2, (int)((ulonglong)ptr2 >> 0x20), arg4);\n        temp1 = (undefined4)((ulonglong)ptr1 >> 0x20);\n        ptr2 = process_data_08001918_helper((int)ptr1, temp1, *(undefined4 *)(data_ptr + 0x20), *(undefined4 *)(data_ptr + 0x24));\n        *(undefined8 *)(data_ptr + 0x20) = ptr2;\n        ptr1 = process_data_08001918_helper(*(undefined4 *)(data_ptr + 0x28), *(undefined4 *)(data_ptr + 0x2c), (int)ptr1, temp1);\n        *(undefined8 *)(data_ptr + 0x28) = ptr1;\n        *(int *)(data_ptr + 0x58) = data_size;\n    }\n    return;\n}",
            "called": [
                "FUN_0800040c",
                "FUN_080004f8",
                "FUN_0800042c",
                "FUN_0800074c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001918",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "process_data_08001918"
        },
        "FUN_0800611c": {
            "renaming": {
                "FUN_0800611c": "check_assertion_and_log_error_0800611c",
                "param_1": "line_number",
                "param_2": "file_name",
                "param_3": "assertion",
                "param_4": "message",
                "uVar1": "error_code",
                "puVar2": "log_message",
                "uVar3": "current_time",
                "uVar4": "error_code"
            },
            "code": "void check_assertion_and_log_error_0800611c(int line_number, char* file_name, char* assertion, char* message) {\n  int error_code = *(int *)(*(int *)PTR_PTR_DAT_08006148 + 0xc);\n  char* log_message = PTR_s_assertion___s__failed__file___s__08006150;\n  if (message != NULL) {\n    do {\n      log_error(error_code, log_message, message, line_number, file_name, assertion);\n      unsigned long long current_time = get_current_time();\n      line_number = (int)(current_time >> 0x20);\n      error_code = (int)current_time;\n    } while (false);\n  } else {\n    char* default_message = PTR_s__08006154;\n    log_error(error_code, log_message, default_message, line_number, file_name, assertion);\n  }\n}",
            "called": [
                "FUN_08006174",
                "FUN_08006ac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800611c",
            "calling": [
                "FUN_08005a68"
            ],
            "imported": false,
            "current_name": "check_assertion_and_log_error_0800611c"
        },
        "FUN_080047f4": {
            "renaming": {
                "FUN_080047f4": "get_bit_at_position_080047f4",
                "param_1": "number",
                "param_2": "position",
                "* (uint *) (param_2 + ((param_1 << 0x18) >> 0x1c) * 4)": "ptr",
                "*(uint *)(param_2 + ((param_1 << 0x18) >> 0x1c) * 4)": "value"
            },
            "code": "uint get_bit_at_position_080047f4(uint number, int position) {\n    int index = ((number << 0x18) >> 0x1c) * 4 + position;\n    uint* ptr = (uint*)index;\n    uint value = *ptr;\n    return (value >> (number & 0xf)) & 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f4",
            "calling": [
                "FUN_08005890",
                "FUN_080057b4",
                "FUN_08005848"
            ],
            "imported": false,
            "current_name": "get_bit_at_position_080047f4"
        },
        "FUN_080009f0": {
            "renaming": {
                "FUN_080009f0": "is_CY_zero_or_ZR_nonzero_080009f0",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_nonzero"
            },
            "code": "bool is_CY_zero_or_ZR_nonzero_080009f0(void)\n{\n  bool is_CY_zero = FUN_080009b8();\n  bool is_ZR_nonzero = (bool)in_ZR;\n  return is_CY_zero || is_ZR_nonzero;\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009f0",
            "calling": [
                "FUN_08000cd0",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "is_CY_zero_or_ZR_nonzero_080009f0"
        },
        "FUN_0800134e": {
            "renaming": {
                "FUN_0800134e": "initialize_0800134e",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "param_3": "input_value_3",
                "param_4": "input_value_4",
                "FUN_08001310": "set_initial_values"
            },
            "code": "int initialize_0800134e(int param_1, int param_2, int param_3, int param_4)\n{\n  set_initial_values(param_1, param_2, 1, param_4, param_4);\n  return 1;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800134e",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "initialize_0800134e"
        },
        "FUN_08002c10": {
            "renaming": {
                "FUN_08002c10": "update_bits_08002c10",
                "param_1": "ptr_param",
                "puVar1": "param",
                "*puVar1": "*param",
                "*(char *)((int)param_1 + 0x3d)": "param[15]",
                "*(undefined *)((int)param_1 + 0x3d)": "param[15]",
                "**param_1": "*param",
                "(*param_1)[1]": "param[1]"
            },
            "code": "int update_bits_08002c10(uint **ptr_param) {\n  uint *param = *ptr_param;\n  if (param[15] != ' ') {\n    return 2;\n  }\n  param[15] = '(';\n  if ((param[0] & 1) == 0) {\n    param[0] |= 1;\n  }\n  *param |= 0x400;\n  param[1] |= 0x300;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c10",
            "calling": [
                "FUN_08004ef4",
                "FUN_08004ec4"
            ],
            "imported": false,
            "current_name": "update_bits_08002c10"
        },
        "FUN_08006be0": {
            "renaming": {
                "FUN_08006be0": "process_data_08006be0",
                "param_1": "data",
                "param_2": "params",
                "uVar1": "return_value",
                "iVar2": "temp_value",
                "piVar3": "param_ptr",
                "uVar4": "uint_value",
                "uVar5": "ushort_value",
                "iVar6": "temp_value2",
                "unaff_r4": "unused_register_4",
                "unaff_r5": "unused_register_5",
                "pcVar7": "function_pointer",
                "iVar8": "function_result",
                "uVar9": "param_value",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar10": "jump_table_flag",
                "loop_counter": "loop_counter",
                "jump_table_value": "jump_table_result"
            },
            "code": "uint32_t process_data_08006be0(uint32_t *data, int *params) {\n    uint32_t return_value;\n    int *param_ptr;\n    uint32_t temp_value;\n    uint32_t temp_value2;\n    uint32_t loop_counter;\n    bool jump_table_value;\n    code *function_pointer;\n    int function_result;\n    uint32_t param_value;\n    uint16_t ushort_value;\n    uint32_t uint_value;\n    uint32_t jump_table_result;\n    bool jump_table_flag;\n\n    if (params[4] != 0) {\n        if ((data != NULL) && (data[6] == 0)) {\n            init_function();\n        }\n        if (params == (int *)PTR_DAT_08006c28) {\n            param_ptr = (int *)data[1];\n        }\n        else if (params == (int *)PTR_DAT_08006c2c) {\n            param_ptr = (int *)data[2];\n        }\n        else if (params == (int *)PTR_DAT_08006c30) {\n            param_ptr = (int *)data[3];\n        }\n        if (*(uint16_t *)(param_ptr + 3) != 0) {\n            ushort_value = *(uint16_t *)(param_ptr + 3);\n            uint_value = (uint32_t)ushort_value;\n            if ((int)(uint_value << 0x1c) < 0) {\n                if (params[4] != 0) {\n                    temp_value2 = uint_value << 0x1e;\n                    jump_table_flag = temp_value2 == 0;\n                    if (jump_table_flag) {\n                        temp_value2 = 0;\n                    }\n                    temp_value = *param_ptr;\n                    if (!jump_table_flag) {\n                        temp_value2 = params[5];\n                    }\n                    *param_ptr = params[4];\n                    param_ptr[2] = temp_value2;\n                    for (loop_counter = temp_value - params[4]; loop_counter > 0; loop_counter -= temp_value2) {\n                        function_result = (*(code *)param_ptr[10])(data, params[8], params[4], loop_counter, unaff_r4, unaff_r5);\n                        if (function_result < 1) {\n                            ushort_value = *(uint16_t *)(param_ptr + 3);\n                            goto LAB_08006bc6;\n                        }\n                        params[4] += function_result;\n                    }\n                }\n            }\n            else if (((params[1] > 0) || (params[0x10] > 0)) && ((function_pointer = (code *)params[0xb]) != NULL)) {\n                param_value = *data;\n                *data = 0;\n                if ((ushort_value & 0x1000) == 0) {\n                    function_result = (*function_pointer)(data, params[8], uint_value & 0x1000, 1);\n                    if ((function_result == -1) && ((temp_value = *data) != 0)) {\n                        if ((temp_value != 0x1d) && (temp_value != 0x16)) {\n                            ushort_value = *(uint16_t *)(param_ptr + 3);\n                            *(uint16_t *)(param_ptr + 3) = ushort_value | 0x40;\n                            jump_table_result = (*UNRECOVERED_JUMPTABLE_00)();\n                            return jump_table_result;\n                        }\n                        *data = param_value;\n                        goto LAB_08006aea;\n                    }\n                }\n                else {\n                    function_result = params[0x15];\n                }\n                if (((int)((uint)ushort_value << 0x1d) < 0) && ((function_result = function_result - params[1]) && (params[0xd] != 0))) {\n                    function_result -= params[0x10];\n                }\n                function_result = (*(code *)params[0xb])(data, params[8], function_result, 0);\n                ushort_value = *(uint16_t *)(param_ptr + 3);\n                if ((function_result == -1) && ((temp_value = *data) > 0x1d || (-1 < (int)((DAT_08006bdc >> (*data & 0xff)) << 0x1f))))) {\n                    goto LAB_08006bc6;\n                }\n                params[1] = 0;\n                params[4] = params[4];\n                if (((int)((uint)ushort_value << 0x13) < 0) && ((function_result != -1) || (*data == 0))) {\n                    params[0x15] = function_result;\n                }\n                if ((params[0xd] != 0) && (params[0xd] != param_ptr + 0x11)) {\n                    init_function(data);\n                }\n                params[0xd] = 0;\n                jump_table_result = (*UNRECOVERED_JUMPTABLE_00)();\n                return jump_table_result;\n            }\n        }\n    }\n    return 0;\n}\n",
            "called": [
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006be0",
            "calling": [
                "FUN_08006344"
            ],
            "imported": false,
            "current_name": "process_data_08006be0"
        },
        "FUN_080012e8": {
            "renaming": {
                "FUN_080012e8": "perform_bitwise_operations_on_data_080012e8",
                "param_1": "data_address",
                "param_2": "bit_pattern",
                "uVar1": "bit_index",
                "FUN_08005848": "perform_bitwise_operation",
                "FUN_080012a2": "perform_cleanup"
            },
            "code": "void perform_bitwise_operations_on_data_080012e8(int data_address, int bit_pattern) {\n  uint8_t bit_index;\n  for (bit_index = 0; bit_index < 8; bit_index++) {\n    perform_bitwise_operation(*(uint8_t *)(data_address + bit_index + 0xb), bit_pattern >> (bit_index & 0xff) & 1);\n  }\n  perform_cleanup(data_address);\n  return;\n}",
            "called": [
                "FUN_080012a2",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012e8",
            "calling": [
                "FUN_08001310"
            ],
            "imported": false,
            "current_name": "perform_bitwise_operations_on_data_080012e8"
        },
        "FUN_080058e8": {
            "renaming": {
                "FUN_080058e8": "do_nothing_080058e8"
            },
            "code": "\nvoid do_nothing_080058e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e8",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "do_nothing_080058e8"
        },
        "FUN_08006370": {
            "renaming": {
                "FUN_08006370": "process_data_08006370",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data",
                "param_4": "data_len",
                "iVar1": "result",
                "puVar2": "end",
                "iVar3": "index",
                "FUN_08006344": "process_byte"
            },
            "code": "int process_data_08006370(undefined4 arg1, undefined4 arg2, undefined *data, int data_len) {\n  int index = 0;\n  int result = 0;\n  undefined *end = data + data_len;\n  while (data != end) {\n    result = process_byte(arg1, *data, arg2, data_len, index);\n    index = result + 1;\n    data++;\n  }\n  return result;\n}",
            "called": [
                "FUN_08006344"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006370",
            "calling": [
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "process_data_08006370"
        },
        "FUN_080024f8": {
            "renaming": {
                "FUN_080024f8": "set_bit_in_array_080024f8",
                "param_1": "bit_index",
                "PTR_DAT_08002510": "array_start_ptr",
                "DAT_08002510": "array_start_offset"
            },
            "code": "void set_bit_in_array_080024f8(uint bit_index) {\n  if (bit_index >= 0) {\n    uint array_index = bit_index >> 5;\n    uint bit_offset = bit_index & 0x1f;\n    uint* array_ptr = (uint*)(DAT_08002510 + array_index * 4);\n    *array_ptr = 1 << bit_offset;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080024f8",
            "calling": [
                "FUN_08005510",
                "FUN_08005568"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_080024f8"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "initialize_data_struct_08001ab0",
                "param_1": "data_ptr",
                "param_2": "data_1",
                "param_3": "data_2",
                "param_4": "data_3",
                "param_5": "data_4",
                "param_6": "data_5",
                "param_7": "data_6",
                "param_8": "data_7",
                "param_9": "data_8",
                "param_10": "data_9",
                "param_11": "data_10",
                "iVar1": "result"
            },
            "code": "int initialize_data_struct_08001ab0(int data_ptr, int data_1, int data_2, int data_3, int data_4, int data_5, int data_6, int data_7, int data_8, int data_9, int data_10, int data_11)\n{\n  int result = 0;\n  *(int *)(data_ptr + 60) = data_2;\n  *(int *)(data_ptr + 56) = data_1;\n  *(int *)(data_ptr + 64) = data_3;\n  *(char *)(data_ptr + 112) = 0;\n  set_data(data_ptr,data_1,0,0,DATA_08001b10,DATA_08001b14);\n  *(int *)(data_ptr + 88) = 100;\n  set_data_2(data_ptr,data_11);\n  set_data_3(data_ptr,data_4,data_5,data_6,data_7,data_8,data_9,data_10);\n  result = get_data();\n  *(int *)(data_ptr + 68) = result - *(int *)(data_ptr + 88);\n  return data_ptr;\n}",
            "called": [
                "FUN_08001a66",
                "FUN_08001814",
                "FUN_08001960",
                "FUN_080058e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08001b18"
            ],
            "imported": false,
            "current_name": "initialize_data_struct_08001ab0"
        },
        "FUN_08006ac0": {
            "renaming": {
                "FUN_08006ac0": "process_data_08006ac0",
                "puVar1": "data_ptr",
                "iVar2": "data_size",
                "piVar3": "ptr1",
                "piVar4": "ptr2",
                "uVar5": "flag",
                "uVar6": "flag_bits",
                "iVar7": "tmp1",
                "pcVar8": "func_ptr",
                "iVar9": "tmp2",
                "uVar10": "tmp3",
                "UNRECOVERED_JUMPTABLE_00": "jumptable_00",
                "bVar11": "bool_flag",
                "uVar12": "tmp4"
            },
            "code": "void process_data_08006ac0(void)\n{\n    uint *data_ptr;\n    int data_size;\n    int *ptr1;\n    int *ptr2;\n    uint flag;\n    ushort flag_bits;\n    int tmp1;\n    code *func_ptr;\n    int tmp2;\n    uint tmp3;\n    code *jumptable_00;\n    bool bool_flag;\n    undefined8 tmp4;\n\n    init(6);\n    jumptable_00 = (code *)0x8006acf;\n    tmp4 = get_data(1);\n    ptr1 = (int *)((ulonglong)tmp4 >> 0x20);\n    data_ptr = (uint *)tmp4;\n    flag_bits = *(ushort *)(ptr1 + 3);\n    flag = (uint)flag_bits;\n    if ((int)(flag << 0x1c) < 0) {\n        data_size = ptr1[4];\n        if (data_size != 0) {\n            tmp2 = flag << 0x1e;\n            bool_flag = tmp2 == 0;\n            if (bool_flag) {\n                tmp2 = 0;\n            }\n            tmp1 = *ptr1;\n            if (!bool_flag) {\n                tmp2 = ptr1[5];\n            }\n            *ptr1 = data_size;\n            ptr1[2] = tmp2;\n            for (tmp1 = tmp1 - data_size; 0 < tmp1; tmp1 = tmp1 - tmp2) {\n                tmp2 = (*(code *)ptr1[10])(data_ptr, ptr1[8], data_size, tmp1);\n                if (tmp2 < 1) {\n                    flag_bits = *(ushort *)(ptr1 + 3);\n                    goto LAB_08006bc6;\n                }\n                data_size = data_size + tmp2;\n            }\n        }\n    }\n    else if (((0 < ptr1[1]) || (0 < ptr1[0x10])) && (func_ptr = (code *)ptr1[0xb], func_ptr != (code *)0x0)) {\n        tmp3 = *data_ptr;\n        *data_ptr = 0;\n        if ((flag_bits & 0x1000) == 0) {\n            tmp2 = (*func_ptr)(data_ptr, ptr1[8], flag & 0x1000, 1);\n            if ((tmp2 == -1) && (tmp3 = *data_ptr, tmp3 != 0)) {\n                if ((tmp3 != 0x1d) && (tmp3 != 0x16)) {\n                    *(ushort *)(ptr1 + 3) = *(ushort *)(ptr1 + 3) | 0x40;\n                    jumptable_00();\n                    return;\n                }\n                *data_ptr = tmp3;\n                goto LAB_08006aea;\n            }\n        }\n        else {\n            tmp2 = ptr1[0x15];\n        }\n        if (((int)((uint)*(ushort *)(ptr1 + 3) << 0x1d) < 0) && (tmp2 = tmp2 - ptr1[1], ptr1[0xd] != 0)) {\n            tmp2 = tmp2 - ptr1[0x10];\n        }\n        tmp2 = (*(code *)ptr1[0xb])(data_ptr, ptr1[8], tmp2, 0);\n        flag_bits = *(ushort *)(ptr1 + 3);\n        if ((tmp2 == -1) && ((0x1d < *data_ptr || (-1 < (int)((DAT_08006bdc >> (*data_ptr & 0xff)) << 0x1f)))) {\n            goto LAB_08006bc6;\n        }\n        ptr1[1] = 0;\n        *ptr1 = ptr1[4];\n        if (((int)((uint)flag_bits << 0x13) < 0) && ((tmp2 != -1 || (*data_ptr == 0)))) {\n            ptr1[0x15] = tmp2;\n        }\n        ptr2 = (int *)ptr1[0xd];\n        *data_ptr = tmp3;\n        if (ptr2 != (int *)0x0) {\n            if (ptr2 != ptr1 + 0x11) {\n                process_data_08006ac0(data_ptr);\n            }\n            ptr1[0xd] = 0;\n            jumptable_00();\n            return;\n        }\n    }\nLAB_08006aea:\n    jumptable_00(0);\n    return;\n}\n",
            "called": [
                "FUN_080061f0",
                "FUN_08006f00",
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ac0",
            "calling": [
                "FUN_08007090",
                "FUN_0800611c"
            ],
            "imported": false,
            "current_name": "process_data_08006ac0"
        },
        "FUN_08004198": {
            "renaming": {
                "FUN_08004198": "process_data_08004198",
                "param_1": "data_ptr",
                "pbVar2": "source_ptr",
                "sVar1": "count",
                "target_ptr": "target_ptr",
                "source_ptr": "source_ptr"
            },
            "code": "int process_data_08004198(int *data_ptr) {\n  short count = *(short *)(data_ptr + 0x26) - 1;\n  if (*(char *)(data_ptr + 0x39) != '!') {\n    return 2;\n  }\n  if (data_ptr[2] == 0x1000) {\n    uint *target_ptr = (uint *)(*data_ptr + 4);\n    ushort *source_ptr = (ushort *)data_ptr[8];\n    *target_ptr = *source_ptr & 0x1ff;\n    if (data_ptr[4] == 0) {\n      data_ptr[8] += 2;\n    }\n    else {\n      data_ptr[8] += 1;\n    }\n  }\n  else {\n    byte *source_ptr = (byte *)data_ptr[8];\n    uint *target_ptr = (uint *)(*data_ptr + 4);\n    *target_ptr = (uint)*source_ptr;\n    data_ptr[8] = (int)(source_ptr + 1);\n  }\n  *(short *)(data_ptr + 0x26) = count;\n  if (count == 0) {\n    uint *flag_ptr = (uint *)(*data_ptr + 0xc);\n    *flag_ptr &= 0xffffff7f;\n    *flag_ptr |= 0x40;\n    return 0;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004198",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "process_data_08004198"
        },
        "FUN_08001c3c": {
            "renaming": {
                "FUN_08001c3c": "check_and_set_value_08001c3c",
                "param_1": "value",
                "iVar1": "result",
                "PTR_DAT_08001c80": "dividend_ptr",
                "PTR_DAT_08001c7c": "divisor_ptr",
                "divisor": "divisor",
                "0xf": "MAX_VALUE",
                "FUN_08002514": "check_divisor",
                "FUN_08002494": "set_value",
                "PTR_DAT_08001c84": "value_ptr"
            },
            "code": "int check_and_set_value_08001c3c(uint value)\n{\n    uint divisor = *(uint *)PTR_DAT_08001c80 / (1000 / (byte)*PTR_DAT_08001c7c);\n    int result = FUN_08002514(divisor);\n    if (result != 0) {\n        return 1;\n    }\n    if (value > 0xf) {\n        return 1;\n    }\n    FUN_08002494(0xffffffff, value, 0);\n    *(uint *)PTR_DAT_08001c84 = value;\n    return 0;\n}",
            "called": [
                "FUN_08002494",
                "FUN_08002514"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3c",
            "calling": [
                "FUN_08001c88",
                "FUN_08003afa"
            ],
            "imported": false,
            "current_name": "check_and_set_value_08001c3c"
        },
        "FUN_08001c3a": {
            "renaming": {
                "FUN_08001c3a": "do_nothing_08001c3a"
            },
            "code": "\nvoid do_nothing_08001c3a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3a",
            "calling": [
                "FUN_08001c88"
            ],
            "imported": false,
            "current_name": "do_nothing_08001c3a"
        },
        "FUN_08000a2c": {
            "renaming": {
                "FUN_08000a2c": "is_valid_input_08000a2c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "int is_valid_input_08000a2c(uint32_t input1, int input2, uint32_t input3, int input4) {\n  int is_input2_valid = ((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0);\n  int is_input4_valid = ((input4 << 1) >> 0x15 != -1) || ((input3 | input4 << 0xc) == 0);\n  if (is_input2_valid && is_input4_valid) {\n    return 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a2c",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "is_valid_input_08000a2c"
        },
        "FUN_08001366": {
            "renaming": {
                "FUN_08001366": "get_character_and_call_function_08001366",
                "param_1": "character_index",
                "param_2": "character",
                "param_3": "max_character_index",
                "param_4": "param_4",
                "cVar1": "character_to_add"
            },
            "code": "void get_character_and_call_function_08001366(int character_index, char character, uint max_character_index, undefined4 param_4)\n{\n  uint clamped_index = max_character_index > 3 ? 3 : max_character_index;\n  if ((int)(uint)*(byte *)(character_index + 0x17) <= (int)clamped_index) {\n    clamped_index = *(byte *)(character_index + 0x17) - 1 & 0xff;\n  }\n  char character_to_add = *(char *)(clamped_index + character_index + 0x18);\n  call_function(character_index, character + character_to_add | 0x80, 0, character_to_add, param_4);\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001366",
            "calling": [
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "get_character_and_call_function_08001366"
        },
        "FUN_08005848": {
            "renaming": {
                "FUN_08005848": "process_data_08005848",
                "param_1": "data_index",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "param_4": "data_ptr",
                "uVar4": "data_value",
                "puVar3": "data_array_ptr",
                "iVar1": "result"
            },
            "code": "void process_data_08005848(uint data_index, undefined4 parameter_2, undefined4 parameter_3, undefined *data_ptr) {\n  int result;\n  uint data_value;\n  undefined *data_array_ptr;\n  if (data_index < 0x3c) {\n    data_value = (uint)(char)PTR_DAT_08005888[data_index];\n    data_array_ptr = PTR_DAT_08005888;\n  }\n  else {\n    data_value = 0xffffffff;\n    data_array_ptr = data_ptr;\n  }\n  if ((data_value != 0xffffffff) && (result = FUN_080047f4(data_value, PTR_DAT_0800588c, parameter_3, data_array_ptr, data_ptr), result != 0)) {\n    undefined4 processed_data = FUN_08004848((data_value << 0x18) >> 0x1c);\n    FUN_08004c30(processed_data, 1 << (data_value & 0xf) & 0xffff, parameter_2);\n  }\n  return;\n}",
            "called": [
                "FUN_08004c30",
                "FUN_080047f4",
                "FUN_08004848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005848",
            "calling": [
                "FUN_080012c0",
                "FUN_080012a2",
                "FUN_0800157c",
                "FUN_08000cd0",
                "FUN_080012e8",
                "FUN_08001310",
                "FUN_08000bcc",
                "FUN_080013a4",
                "FUN_080015b2"
            ],
            "imported": false,
            "current_name": "process_data_08005848"
        },
        "FUN_08000ae8": {
            "renaming": {
                "FUN_08000ae8": "sendSoftwareInterrupt_08000ae8"
            },
            "code": "void sendSoftwareInterrupt_08000ae8(void)\n{\n  software_interrupt(0x3f);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ae8",
            "calling": [
                "FUN_08000aec"
            ],
            "imported": false,
            "current_name": "sendSoftwareInterrupt_08000ae8"
        },
        "FUN_08003ed8": {
            "renaming": {
                "FUN_08003ed8": "check_and_update_flags_08003ed8",
                "param_1": "data",
                "puVar1": "data_ptr"
            },
            "code": "void check_and_update_flags_08003ed8(uint **data)\n{\n  uint *data_ptr;\n  *(undefined *)((int)data + 0x3d) = 2;\n  data_ptr = *data;\n  if ((data_ptr[8] & 0x1111) == 0) {\n    if ((data_ptr[8] & 0x444) == 0) {\n      *data_ptr = *data_ptr & 0xfffffffe;\n    }\n  }\n  call_another_function(data);\n  *(undefined *)((int)data + 0x3d) = 0;\n  *(undefined *)(data + 0xf) = 0;\n  return;\n}",
            "called": [
                "FUN_08004b34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ed8",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "check_and_update_flags_08003ed8"
        },
        "FUN_080061e0": {
            "renaming": {
                "FUN_080061e0": "fill_array_with_value_080061e0",
                "param_1": "array",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end_of_array"
            },
            "code": "void fill_array_with_value_080061e0(char *array, char value, int size) {\n  char *end_of_array = array + size;\n  for (; array != end_of_array; array++) {\n    *array = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061e0",
            "calling": [
                "FUN_08006c88",
                "FUN_08006d14",
                "FUN_08006c40",
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "fill_array_with_value_080061e0"
        },
        "FUN_08005604": {
            "renaming": {
                "FUN_08005604": "get_random_value_and_execute_function_08005604",
                "uVar1": "random_value",
                "iVar2": "function_pointer",
                "iVar3": "function_data_pointer",
                "PTR_DAT_08005644": "function_data_pointer_array_1",
                "PTR_DAT_08005648": "function_pointer_array",
                "PTR_DAT_0800564c": "function_data_pointer_array_2"
            },
            "code": "void get_random_value_and_execute_function_08005604(void)\n{\n  uint32_t random_value = get_random_value();\n  int32_t function_pointer = *(int32_t *)(PTR_DAT_08005644 + random_value * 4);\n  if ((random_value < 5) && (function_pointer = (**(code **)(PTR_DAT_08005648 + random_value * 4))(function_pointer), function_pointer != -1)) {\n    uint32_t value_1 = *(uint32_t *)(PTR_DAT_0800564c + (uint32_t)*(byte *)(function_pointer + 0x44) * 4);\n    uint32_t value_2 = *(uint16_t *)(function_pointer + 0x6a);\n    uint32_t result = *(uint32_t *)(function_pointer + 100) + value_2;\n    execute_function(value_1, result, 1);\n  }\n  return;\n}",
            "called": [
                "FUN_080055bc",
                "FUN_0800455a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "FUN_080045fe"
            ],
            "imported": false,
            "current_name": "get_random_value_and_execute_function_08005604"
        },
        "FUN_08005724": {
            "renaming": {
                "FUN_08005724": "get_one_08005724"
            },
            "code": "int get_one_08005724(void)\n{\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005724",
            "calling": [
                "FUN_08007028"
            ],
            "imported": false,
            "current_name": "get_one_08005724"
        },
        "FUN_08005728": {
            "renaming": {
                "FUN_08005728": "return_zero_08005728"
            },
            "code": "int return_zero_08005728(void) {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "FUN_08007048"
            ],
            "imported": false,
            "current_name": "return_zero_08005728"
        },
        "FUN_0800135a": {
            "renaming": {
                "FUN_0800135a": "execute_function_with_params_0800135a",
                "param_1": "function",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "FUN_08001310": "execute_function"
            },
            "code": "void execute_function_with_params_0800135a(void* function, int param1, int param2, void* param3) {\n  execute_function(function, 1, 0, param3, param3);\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800135a",
            "calling": [
                "FUN_08000cd0",
                "FUN_08000bcc",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_0800135a"
        },
        "FUN_08005c96": {
            "renaming": {
                "FUN_08005c96": "execute_function_08005c96",
                "param_1": "function_pointer",
                "param_2": "argument_count",
                "param_3": "arg_3",
                "param_4": "arg_4",
                "uVar1": "result"
            },
            "code": "int execute_function_08005c96(int *function_pointer, int argument_count, undefined4 arg_3, undefined4 arg_4) {\n  if (argument_count != 0) {\n    int result = allocate_memory(argument_count);\n    result = (**(code **)(*function_pointer + 4))(function_pointer, argument_count, result, *(code **)(*function_pointer + 4), arg_4);\n    return result;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c96",
            "calling": [
                "FUN_08000cd0",
                "FUN_08005cd4",
                "FUN_08000bcc",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "execute_function_08005c96"
        },
        "FUN_0800571a": {
            "renaming": {
                "FUN_0800571a": "set_flag_to_0x2000_0800571a",
                "param_1": "buffer",
                "param_2": "size",
                "*(undefined4 *)(param_2 + 4)": "*(buffer + 1)"
            },
            "code": "void set_flag_to_0x2000_0800571a(int* buffer, int size){\n    *(buffer + 1) = 0x2000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800571a",
            "calling": [
                "FUN_08007004"
            ],
            "imported": false,
            "current_name": "set_flag_to_0x2000_0800571a"
        },
        "FUN_08002efc": {
            "renaming": {
                "FUN_08002efc": "handle_input_08002efc",
                "param_1": "input",
                "puVar1": "ptr_to_11th_element"
            },
            "code": "uint32_t handle_input_08002efc(uint32_t **input)\n{\n  uint32_t *ptr_to_11th_element = input[0xb];\n  if (*(char *)((int)input + 0x3d) == '!') {\n    if (*(uint16_t *)((int)input + 0x2a) == 0) {\n      if (((ptr_to_11th_element == (uint32_t *)0x4) || (ptr_to_11th_element == (uint32_t *)0x8)) || (ptr_to_11th_element == (uint32_t *)0xffff0000)) {\n        (*input)[1] = (*input)[1] & 0xfffff8ff;\n        **input = **input | 0x200;\n        input[0xc] = (uint32_t *)0x0;\n        *(char *)((int)input + 0x3d) = 0x20;\n        if (*(char *)((int)input + 0x3e) == '@') {\n          *(char *)((int)input + 0x3e) = 0;\n          do_nothing_08002db0();\n        }\n        else {\n          *(char *)((int)input + 0x3e) = 0;\n          do_nothing_08002c4e();\n        }\n      }\n      else {\n        (*input)[1] = (*input)[1] & 0xfffff8ff;\n        input[0xc] = (uint32_t *)0x11;\n        *(char *)((int)input + 0x3e) = 0;\n        *(char *)((int)input + 0x3d) = 0x20;\n        do_nothing_08002c4e();\n      }\n    }\n    else {\n      ptr_to_11th_element = input[9];\n      input[9] = (uint32_t *)((int)ptr_to_11th_element + 1);\n      (*input)[4] = (uint32_t)*(char *)ptr_to_11th_element;\n      *(uint16_t *)((int)input + 0x2a) = *(uint16_t *)((int)input + 0x2a) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c4e",
                "FUN_08002db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efc",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "handle_input_08002efc"
        },
        "FUN_0800365c": {
            "renaming": {
                "FUN_0800365c": "calculate_and_decrement_0800365c",
                "param_1": "input_value",
                "local_4": "calculated_value",
                "DAT_08003684": "DAT_CONSTANT",
                "PTR_DAT_08003680": "PTR_DAT_ADDRESS"
            },
            "code": "void calculate_and_decrement_0800365c(int input_value) {\n    const unsigned long long DAT_08003684 = 0x5dcd5dcd; \n    const unsigned int* PTR_DAT_08003680 = (unsigned int*)0x08003680; \n    int calculated_value = input_value * (unsigned int)(DAT_08003684 * (*PTR_DAT_08003680) >> 0x29); \n    while (calculated_value > 0) {\n        calculated_value--;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800365c",
            "calling": [
                "FUN_08003688"
            ],
            "imported": false,
            "current_name": "calculate_and_decrement_0800365c"
        },
        "FUN_080033b8": {
            "renaming": {
                "FUN_080033b8": "handle_data_080033b8",
                "param_1": "data",
                "iVar1": "data_ptr",
                "uVar2": "var1",
                "uVar3": "var3",
                "uVar4": "var2",
                "DAT_08003518": "GLOBAL_VAR1",
                "DAT_08003504": "GLOBAL_VAR2",
                "DAT_0800350c": "GLOBAL_VAR3",
                "DAT_0800351c": "GLOBAL_VAR4",
                "DAT_08003514": "GLOBAL_VAR5",
                "DAT_08003510": "GLOBAL_VAR6",
                "DAT_08003508": "GLOBAL_VAR7"
            },
            "code": "void handle_data_080033b8(int *data)\n{\n  int data_ptr = *data;\n  uint var1 = *(uint *)(data_ptr + 0x18);\n  uint var2 = *(uint *)(data_ptr + 0x14);\n  uint var3 = *(uint *)(data_ptr + 4);\n  \n  if ((*(char *)((int)data + 0x3e) == '\\x10') || (*(char *)((int)data + 0x3e) == '@')) {\n    if (((var2 & 0x10001) == 0) || ((var3 & 0x200) == 0)) {\n      if (((DAT_08003518 & var2) == 0) || ((var3 & 0x200) == 0)) {\n        if (((DAT_08003504 & var2) != 0) && ((var3 & 0x200) != 0)) {\n          do_something1(data);\n        }\n      }\n      else {\n        do_something2(data);\n      }\n    }\n    else {\n      do_something3(data);\n    }\n    if ((DAT_0800350c & var1) == 0) {\n      if ((((DAT_0800351c & var2) != 0) && ((var3 & 0x400) != 0)) && ((DAT_08003514 & var2) == 0)) {\n        do_something4(data);\n        return;\n      }\n      if (((DAT_08003514 & var2) != 0) && ((var3 & 0x200) != 0)) {\n        do_something5(data);\n        return;\n      }\n    }\n    else {\n      if ((((DAT_08003510 & var2) != 0) && ((var3 & 0x400) != 0)) && ((DAT_08003514 & var2) == 0)) {\n        do_something6(data);\n        return;\n      }\n      if (((DAT_08003514 & var2) != 0) && ((var3 & 0x200) != 0)) {\n        do_something7(data);\n        return;\n      }\n    }\n  }\n  else {\n    if (((DAT_08003504 & var2) != 0) && ((var3 & 0x200) != 0)) {\n      do_something8();\n      return;\n    }\n    if (((DAT_08003508 & var2) != 0) && ((var3 & 0x200) != 0)) {\n      do_something9(data);\n      return;\n    }\n    if ((DAT_0800350c & var1) == 0) {\n      if ((((DAT_0800351c & var2) != 0) && ((var3 & 0x400) != 0)) && ((DAT_08003514 & var2) == 0)) {\n        do_something10(data);\n        return;\n      }\n      if (((DAT_08003514 & var2) != 0) && ((var3 & 0x200) != 0)) {\n        do_something11(data);\n      }\n    }\n    else {\n      if ((((DAT_08003510 & var2) != 0) && ((var3 & 0x400) != 0)) && ((DAT_08003514 & var2) == 0)) {\n        do_something12(data);\n        return;\n      }\n      if (((DAT_08003514 & var2) != 0) && ((var3 & 0x200) != 0)) {\n        do_something13(data);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002db2",
                "FUN_080028d2",
                "FUN_080028de",
                "FUN_08002ca6",
                "FUN_08002ab8",
                "FUN_0800306c",
                "FUN_080032b4",
                "FUN_08002f9c",
                "FUN_08002cf2",
                "FUN_08002ad8",
                "FUN_08002efc",
                "FUN_08002848",
                "FUN_08002c54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033b8",
            "calling": [],
            "imported": false,
            "current_name": "handle_data_080033b8"
        },
        "FUN_080069e4": {
            "renaming": {
                "FUN_080069e4": "check_and_update_080069e4",
                "param_1": "status",
                "param_2": "data",
                "uVar1": "result",
                "uVar2": "data_value",
                "iVar3": "ptr_value"
            },
            "code": "uint32_t check_and_update_080069e4(uint32_t *status, uint32_t *data) {\n  uint32_t result;\n  uint16_t data_value;\n  int32_t ptr_value;\n\n  ptr_value = *(int32_t *)PTR_PTR_DAT_08006ab0;\n  if ((ptr_value != 0) && (*(int32_t *)(ptr_value + 0x18) == 0)) {\n    cleanup(ptr_value);\n  }\n  if (data == (uint32_t *)PTR_DAT_08006ab4) {\n    data = *(uint32_t **)(ptr_value + 4);\n  }\n  else if (data == (uint32_t *)PTR_DAT_08006ab8) {\n    data = *(uint32_t **)(ptr_value + 8);\n  }\n  else if (data == (uint32_t *)PTR_DAT_08006abc) {\n    data = *(uint32_t **)(ptr_value + 0xc);\n  }\n  data_value = *(uint16_t *)(data + 3);\n  result = (uint32_t)data_value;\n  if (-1 < (int32_t)(result << 0x1c)) {\n    if (-1 < (int32_t)(result << 0x1b)) {\n      *status = 9;\n      goto LAB_08006a14;\n    }\n    if ((uint32_t *)(data[0xd]) != (uint32_t *)0x0) {\n      if ((uint32_t *)(data[0xd]) != data + 0x11) {\n        clean_and_exit(status);\n      }\n      data[0xd] = 0;\n    }\n    *(uint16_t *)(data + 3) = *(uint16_t *)(data + 3) & 0xffdb;\n    data[1] = 0;\n    *data = data[4];\n  }\n  *(uint16_t *)(data + 3) = *(uint16_t *)(data + 3) | 8;\n  if ((data[4] == 0) && ((*(uint16_t *)(data + 3) & 0x280) != 0x200)) {\n    clean_and_exit(status, data);\n  }\n  data_value = *(uint16_t *)(data + 3);\n  result = data_value & 1;\n  if ((data_value & 1) == 0) {\n    if (-1 < (int32_t)((uint32_t)data_value << 0x1e)) {\n      result = data[5];\n    }\n    data[2] = result;\n  }\n  else {\n    data[2] = 0;\n    data[6] = -data[5];\n  }\n  if (data[4] == 0) {\n    data_value = *(uint16_t *)(data + 3);\n    result = (int16_t)data_value & 0x80;\n    if (result != 0) {\n      *(uint16_t *)(data + 3) = data_value | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_080061f0",
                "FUN_08006cb4",
                "FUN_08006e10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069e4",
            "calling": [
                "FUN_08006344",
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "check_and_update_080069e4"
        },
        "FUN_08002580": {
            "renaming": {
                "FUN_08002580": "do_nothing_08002580"
            },
            "code": "\nvoid do_nothing_08002580(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002580",
            "calling": [
                "FUN_08002582"
            ],
            "imported": false,
            "current_name": "do_nothing_08002580"
        },
        "FUN_08004b9e": {
            "renaming": {
                "FUN_08004b9e": "execute_program_08004b9e",
                "FUN_08001cac": "initialize_globals",
                "FUN_08002582": "load_configuration",
                "do_nothing_08004b9c": "do_nothing"
            },
            "code": "void execute_program_08004b9e(void)\n{\n  initialize_globals();\n  load_configuration();\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08002582",
                "FUN_08004b9c",
                "FUN_08001cac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9e",
            "calling": [],
            "imported": false,
            "current_name": "execute_program_08004b9e"
        },
        "FUN_08004b9c": {
            "renaming": {
                "FUN_08004b9c": "do_nothing_08004b9c"
            },
            "code": "\nvoid do_nothing_08004b9c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9c",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": false,
            "current_name": "do_nothing_08004b9c"
        },
        "FUN_08005730": {
            "renaming": {
                "FUN_08005730": "process_data_08005730",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "FUN_080053d4": "call_helper_function"
            },
            "code": "void process_data_08005730(int first_param, int second_param, int third_param, int fourth_param)\n{\n  call_helper_function(second_param, third_param, third_param, fourth_param, fourth_param);\n  return;\n}",
            "called": [
                "FUN_080053d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005730",
            "calling": [
                "FUN_08006f5a"
            ],
            "imported": false,
            "current_name": "process_data_08005730"
        },
        "FUN_08002582": {
            "renaming": {
                "FUN_08002582": "do_nothing_and_return_08002582",
                "do_nothing_08002580": "do_nothing"
            },
            "code": "void do_nothing_and_return_08002582(void)\n{\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08002580"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002582",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": false,
            "current_name": "do_nothing_and_return_08002582"
        },
        "FUN_08004884": {
            "renaming": {
                "FUN_08004884": "set_flag_08004884",
                "param_1": "flag",
                "uVar1": "return_val",
                "DAT_08004914": "flag_base_address",
                "DAT_08004918": "flag_0_return_val",
                "DAT_0800491c": "flag_1_return_val",
                "DAT_08004920": "flag_2_return_val",
                "DAT_08004924": "flag_3_return_val",
                "DAT_08004928": "flag_4_return_val"
            },
            "code": "uint32_t set_flag_08004884(uint32_t flag)\n{\n  uint32_t* flag_ptr = (uint32_t*)(DAT_08004914 + 0x18);\n  switch(flag)\n  {\n    case 0:\n      *flag_ptr |= 4;\n      return DAT_08004918;\n    case 1:\n      *flag_ptr |= 8;\n      return DAT_0800491c;\n    case 2:\n      *flag_ptr |= 0x10;\n      return DAT_08004920;\n    case 3:\n      *flag_ptr |= 0x20;\n      return DAT_08004924;\n    case 4:\n      *flag_ptr |= 0x40;\n      return DAT_08004928;\n    default:\n      return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "FUN_08004974",
                "FUN_08004bb0",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "set_flag_08004884"
        },
        "FUN_08001be8": {
            "renaming": {
                "FUN_08001be8": "copy_and_clear_memory_08001be8",
                "iVar1": "index",
                "puVar2": "destination_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "PTR_DAT_08001c28": "source_ptr",
                "PTR_DAT_08001c20": "destination_ptr",
                "DAT_08001c24": "end_of_destination_ptr",
                "FUN_08004d44": "<unchanged>",
                "FUN_08006198": "<unchanged>",
                "FUN_08005f6c": "<unchanged>"
            },
            "code": "void copy_and_clear_memory_08001be8(void)\n{\n  int index = 0;\n  undefined4 *PTR_DAT_08001c20 = PTR_DAT_08001c20;\n  undefined4 *PTR_DAT_08001c28 = (undefined4 *)PTR_DAT_08001c28;\n  while (PTR_DAT_08001c20 < DAT_08001c24) {\n    *PTR_DAT_08001c20 = *PTR_DAT_08001c28;\n    PTR_DAT_08001c20++;\n    PTR_DAT_08001c28++;\n  }\n  while (PTR_DAT_08001c28 < PTR_DAT_08001c2c) {\n    *PTR_DAT_08001c28 = 0;\n    PTR_DAT_08001c28++;\n  }\n  FUN_08004d44();\n  FUN_08006198();\n  code *jump_table = (code *)0x8001c1a;\n  FUN_08005f6c();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_08004d44",
                "FUN_08005f6c",
                "FUN_08006198"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001be8",
            "calling": [],
            "imported": false,
            "current_name": "copy_and_clear_memory_08001be8"
        },
        "FUN_080061f0": {
            "renaming": {
                "FUN_080061f0": "add_node_to_list_080061f0",
                "param_1": "head",
                "param_2": "size",
                "param_3": "value",
                "param_4": "unused",
                "puVar1": "pointer_to_pointer",
                "extraout_r1": "next",
                "ppiVar2": "node",
                "ppiVar3": "next_node",
                "piVar4": "current_node",
                "ppiVar5": "current",
                "ppiVar6": "prev",
                "ppiVar7": "tail"
            },
            "code": "void add_node_to_list_080061f0(int **head, int size, int value, int unused) {\n  if (size == 0) {\n    return;\n  }\n  int **tail = (int **)(size - 4);\n  if (*(int *)(size - 4) < 0) {\n    tail = (int **)((int)tail + *(int *)(size - 4));\n  }\n  do_nothing_08006eac();\n  int **current = *(int ***)PTR_DAT_08006284;\n  int **prev = (int **)PTR_DAT_08006284;\n  if (current == (int **)0x0) {\n    tail[1] = (int *)0x0;\n    *(int ***)PTR_DAT_08006284 = tail;\n    prev = head;\n  }\n  else if (tail < current) {\n    int **next = (int **)*tail;\n    prev = (int **)((int)tail + (int)next);\n    if (current == prev) {\n      int *node = *current;\n      current = (int **)current[1];\n      prev = (int **)((int)node + (int)next);\n      *tail = (int *)prev;\n    }\n    tail[1] = (int *)current;\n    *(int ***)PTR_DAT_08006284 = tail;\n  }\n  else {\n    while (current != (int **)0x0 && current <= tail) {\n      prev = current;\n      current = (int **)current[1];\n    }\n    int **next = (int **)*prev;\n    if ((int **)((int)prev + (int)next) == tail) {\n      next = (int **)((int)next + (int)*tail);\n      *prev = (int *)next;\n      if (current == (int **)((int)prev + (int)next)) {\n        int *node = *current;\n        current = (int **)current[1];\n        next = (int **)((int)next + (int)node);\n        *prev = (int *)next;\n        prev[1] = (int *)current;\n      }\n    }\n    else if (tail < (int **)((int)prev + (int)next)) {\n      *head = (int *)0xc;\n    }\n    else {\n      next = (int **)((int)tail + (int)*tail);\n      if (current == next) {\n        int *node = *current;\n        current = (int **)current[1];\n        next = (int **)((int)node + (int)*tail);\n        *tail = (int *)next;\n      }\n      tail[1] = (int *)current;\n      prev[1] = (int *)tail;\n    }\n  }\n  do_nothing_08006eae(head, prev, current, unused);\n  return;\n}",
            "called": [
                "FUN_08006eac",
                "FUN_08006eae"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061f0",
            "calling": [
                "FUN_080069e4",
                "FUN_08006ac0"
            ],
            "imported": false,
            "current_name": "add_node_to_list_080061f0"
        },
        "FUN_08002348": {
            "renaming": {
                "FUN_08002348": "check_flag_08002348",
                "param_1": "flag",
                "iVar1": "result",
                "FUN_080020f0": "check_connection"
            },
            "code": "int check_flag_08002348(int flag)\n{\n  int result;\n  if (*(char *)(flag + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(flag + 0x24) = 1;\n  result = check_connection();\n  if (result == 0) {\n    *(uint *)(flag + 0x28) = *(uint *)(flag + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(flag + 0x24) = 0;\n  return result;\n}",
            "called": [
                "FUN_080020f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002348",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "check_flag_08002348"
        },
        "FUN_080060d4": {
            "renaming": {
                "FUN_080060d4": "process_data_080060d4",
                "param_1": "data",
                "iVar1": "index",
                "PTR_DAT_08006100": "constant_array",
                "FUN_08007090": "initialize",
                "FUN_08005f8c": "get_value"
            },
            "code": "void process_data_080060d4(int data)\n{\n  int index = *(int *)(data + 8);\n  if (index != 0) {\n    (**(code **)(data + 0xc))();\n  }\n  else {\n    initialize();\n    int value = get_value();\n    if (*(int *)(PTR_DAT_08006100 + value * 0x14 + 0xc) != 0) {\n      process_data_080060d4();\n    }\n  }\n}",
            "called": [
                "FUN_08007090"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060d4",
            "calling": [
                "FUN_080060e4"
            ],
            "imported": false,
            "current_name": "process_data_080060d4"
        },
        "FUN_08005a68": {
            "renaming": {
                "FUN_08005a68": "set_flags_08005a68",
                "param_1": "target_address",
                "param_2": "flag_value",
                "param_3": "flag_type",
                "extraout_r1": "extra_out_1",
                "bVar1": "flag_bits",
                "iVar2": "flag_count",
                "pbVar3": "flag_ptr",
                "unaff_r4": "undefined_register_4",
                "unaff_r6": "undefined_register_6",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void set_flags_08005a68(int target_address, int flag_value, byte flag_type) {\n  uint extraout_r1;\n  byte flag_bits;\n  int flag_count;\n  byte *flag_ptr;\n  undefined unaff_r4;\n  int unaff_r6;\n  code *jump_table;\n  *(int *)(target_address + 0x11c) = flag_value;\n  *(byte *)(target_address + 0x140) = flag_type;\n  flag_bits = flag_type & 7;\n  if (flag_bits == 4) {\n    flag_count = 7;\n  }\n  else if (flag_bits == 6) {\n    flag_count = 8;\n  }\n  else if (flag_bits == 2) {\n    flag_count = 6;\n  }\n  else {\n    flag_count = 0;\n  }\n  if ((flag_type & 0x30) == 0x30) {\n    *(int *)(target_address + 0x128) = 0x600;\n    flag_count++;\n  }\n  else if ((flag_type & 0x20) == 0) {\n    *(int *)(target_address + 0x128) = 0;\n  }\n  else {\n    *(int *)(target_address + 0x128) = 0x400;\n    flag_count++;\n  }\n  if ((flag_type & 8) == 0) {\n    *(int *)(target_address + 0x124) = 0;\n  }\n  else {\n    *(int *)(target_address + 0x124) = 0x2000;\n  }\n  if (flag_count == 8) {\n    *(int *)(target_address + 0x120) = 0;\n  }\n  else if (flag_count == 9) {\n    *(int *)(target_address + 0x120) = 0x1000;\n  }\n  else {\n    flag_count = 0;\n  }\n  if (flag_count != 0) {\n    set_flag(target_address + 0xd4);\n    set_flag_value(target_address + 0xd4,uRam08005b14);\n    return;\n  }\n  jump_table = (code *)0x8005b12;\n  flag_count = iRam08005b1c;\n  set_flag_value(uRam08005b20,299,iRam08005b1c,uRam08005b18);\n  flag_ptr = *(byte **)(extraout_r1 + unaff_r6);\n  *(undefined *)(flag_count + 0x1e) = unaff_r4;\n  *(undefined *)(*flag_ptr + 0x1e) = 0;\n  if (extraout_r1 < 0x3c) {\n    uRam0000012d = PTR_DAT_08005b38[extraout_r1];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_0800611c",
                "FUN_08004f4c",
                "FUN_08005510"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "set_flags_08005a68"
        },
        "FUN_08001814": {
            "renaming": {
                "FUN_08001814": "initialize_params_08001814",
                "param_1": "params_array",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4",
                "param_6": "param5",
                "param_7": "param6",
                "param_8": "param7",
                "param_9": "flag",
                "iVar1": "result1",
                "uVar2": "temp_hi",
                "uVar3": "flag_value",
                "bVar4": "is_flag_one",
                "uVar5": "temp",
                "uVar6": "result4",
                "uVar7": "result6"
            },
            "code": "void initialize_params_08001814(int *params_array, int param1, int param2, int param3, int param4, int param5, int param6, int param7, int param8, int flag)\n{\n    int result1 = FUN_080009dc(param3, param4, 0, 0);\n    int result2 = FUN_080009dc(param5, param6, 0, 0);\n    int result3 = FUN_080009dc(param7, param8, 0, 0);\n\n    if (result1 == 0 && result2 == 0 && result3 == 0)\n    {\n        params_array[13] = flag;\n        bool is_flag_one = flag != 1;\n        int flag_value = is_flag_one ? 0 : 1;\n        *(char *)((int)params_array + 0x71) = flag_value;\n        params_array[0] = param3;\n        params_array[1] = param4;\n        params_array[2] = param5;\n        params_array[3] = param6;\n        params_array[4] = param7;\n        params_array[5] = param8;\n        unsigned long long temp = FUN_0800040c(params_array[22]);\n        temp = FUNC_0800074c((int)temp, (int)(temp >> 0x20), 0, DAT_080018f4);\n        int temp_hi = (int)(temp >> 0x20);\n        params_array[6] = param3;\n        params_array[7] = param4;\n        unsigned long long result4 = FUN_080004f8(param5, param6, (int)temp, temp_hi);\n        *(unsigned long long *)(params_array + 8) = result4;\n        unsigned long long result5 = FUNC_0800074c(param7, param8, (int)temp, temp_hi);\n        *(unsigned long long *)(params_array + 10) = result5;\n        if (params_array[0xc] == 1)\n        {\n            unsigned long long result6 = FUN_08000190(0, 0, param3, param4);\n            *(unsigned long long *)(params_array + 6) = result6;\n            result4 = FUN_08000190(0, 0, (int)result4, (int)(result4 >> 0x20));\n            *(unsigned long long *)(params_array + 8) = result4;\n            result5 = FUN_08000190(0, 0, (int)result5, (int)(result5 >> 0x20));\n            *(unsigned long long *)(params_array + 10) = result5;\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_0800040c",
                "FUN_080004f8",
                "FUN_0800074c",
                "FUN_080009dc",
                "FUN_08000190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001814",
            "calling": [
                "FUN_08001ab0",
                "FUN_080018f8"
            ],
            "imported": false,
            "current_name": "initialize_params_08001814"
        },
        "FUN_08000aec": {
            "renaming": {
                "FUN_08000aec": "check_and_call_function_08000aec",
                "param_1": "arg1",
                "param_2": "N/A",
                "param_3": "N/A",
                "param_4": "arg4",
                "uVar1": "result"
            },
            "code": "int check_and_call_function_08000aec(int arg1, int arg4) {\n  int result = 0;\n  if (*(int *)PTR_DAT_08000b04 == 0) {\n    result = call_function(1, arg1, 0, 0, arg4);\n  }\n  return result;\n}",
            "called": [
                "FUN_08000ae8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aec",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "check_and_call_function_08000aec"
        },
        "FUN_0800572c": {
            "renaming": {
                "FUN_0800572c": "return_zero_0800572c"
            },
            "code": "int return_zero_0800572c(void) {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800572c",
            "calling": [
                "FUN_0800706c"
            ],
            "imported": false,
            "current_name": "return_zero_0800572c"
        },
        "FUN_08004e12": {
            "renaming": {
                "FUN_08004e12": "execute_function_if_not_null_08004e12",
                "iVar1": "function_ptr_address",
                "FUN_08004df4": "get_function_ptr_address",
                "*(code **)(iVar1 + 0x48)": "function_ptr",
                "(code *)0x0": "null_pointer",
                "(**(code **)(iVar1 + 0x48))()": "execute_function()"
            },
            "code": "void execute_function_if_not_null_08004e12(void)\n{\n  int function_ptr_address = get_function_ptr_address();\n  if (*(code **)(function_ptr_address + 0x48) != (code *)0x0) {\n    (**(code **)(function_ptr_address + 0x48))();\n  }\n  return;\n}",
            "called": [
                "FUN_08004df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e12",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_08004e12"
        },
        "FUN_08000a58": {
            "renaming": {
                "FUN_08000a58": "convertToFixedPoint_08000a58",
                "param_1": "integerPart",
                "param_2": "fractionalPart",
                "uVar1": "result",
                "iVar2": "shiftAmount",
                "uVar3": "absShiftAmount"
            },
            "code": "uint convertToFixedPoint_08000a58(uint integerPart, uint fractionalPart) {\n  uint result;\n  int shiftAmount;\n  uint absShiftAmount;\n  \n  shiftAmount = fractionalPart * 2 + 0x200000;\n  if (fractionalPart * 2 < 0xffe00000) {\n    if (shiftAmount >= 0) {\n      return 0;\n    }\n    absShiftAmount = -shiftAmount - 0x3e1;\n    if (shiftAmount >> 0x15 < 0xfffffc20 && absShiftAmount != 0) {\n      result = (fractionalPart << 0xb | 0x80000000 | integerPart >> 0x15) >> (absShiftAmount & 0xff);\n      if ((fractionalPart & 0x80000000) != 0) {\n        result = -result;\n      }\n      return result;\n    }\n  }\n  else if ((integerPart | fractionalPart << 0xc) != 0) {\n    return 0;\n  }\n  fractionalPart = fractionalPart & 0x80000000;\n  if (fractionalPart == 0) {\n    fractionalPart = 0x7fffffff;\n  }\n  return fractionalPart;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a58",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "convertToFixedPoint_08000a58"
        },
        "FUN_08001b48": {
            "renaming": {
                "FUN_08001b48": "initialize_sensor_08001b48",
                "local_54": "sensor_values",
                "local_4c": "temp_value",
                "local_44": "temp_array[0]",
                "local_40": "temp_array[1]",
                "local_3c": "temp_array[2]",
                "local_38": "temp_array[3]",
                "local_34": "unused_variable",
                "local_30": "sensor_values",
                "local_20": "unused_variable",
                "local_1c": "unused_variable",
                "local_14": "unused_variable",
                "local_10": "unused_variable",
                "local_c": "temp_constant",
                "iVar1": "result",
                "FUN_08003688": "get_sensor_value",
                "FUN_08004d40": "print_error_message",
                "FUN_08003ad4": "set_sensor_value",
                "FUN_08003c90": "set_constant_value",
                "FUN_08003c44": "get_constant_value",
                "FUN_08002514": "print_sensor_value",
                "FUN_08002560": "print_sensor_value",
                "FUN_08002494": "print_sensor_value"
            },
            "code": "void initialize_sensor_08001b48(void)\n{\n  int result;\n  uint32_t sensor_values[2];\n  uint32_t temp_value;\n  uint32_t temp_array[4];\n  uint32_t temp_constant = 0x380000;\n  \n  sensor_values[0] = 2;\n  sensor_values[1] = 1;\n  \n  result = get_sensor_value(sensor_values);\n  if (result != 0) {\n    print_error_message(\"Error initializing sensor: Could not retrieve sensor values.\");\n  }\n  \n  temp_array[0] = 0xf;\n  temp_array[1] = 2;\n  temp_array[2] = 0;\n  temp_array[3] = 0x400;\n  result = set_sensor_value(temp_array);\n  if (result != 0) {\n    print_error_message(\"Error initializing sensor: Could not set sensor values.\");\n  }\n  \n  temp_value = 0x8000;\n  result = set_constant_value(temp_value);\n  if (result != 0) {\n    print_error_message(\"Error initializing sensor: Could not set constant value.\");\n  }\n  \n  temp_value = get_constant_value();\n  print_sensor_value((uint32_t)((uint64_t)temp_constant * (uint64_t)temp_value >> 0x26));\n  print_sensor_value(4);\n  print_sensor_value(0xffffffff);\n}\n",
            "called": [
                "FUN_08003688",
                "FUN_08003ad4",
                "FUN_08002560",
                "FUN_08002494",
                "FUN_08004d40",
                "FUN_08002514",
                "FUN_08003c90",
                "FUN_08003c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b48",
            "calling": [
                "FUN_08004c52"
            ],
            "imported": false,
            "current_name": "initialize_sensor_08001b48"
        },
        "FUN_08004092": {
            "renaming": {
                "FUN_08004092": "update_bit_08004092",
                "param_1": "data",
                "param_2": "bit_position",
                "param_3": "bit_value",
                "uint": "uint32_t",
                "*": "*",
                "*(uint *)(param_1 + 0x20)": "*data",
                "1 << (param_2 & 0xff)": "1 << (bit_position & 0xff)",
                "~(1 << (param_2 & 0xff))": "~(1 << (bit_position & 0xff))",
                "|": "|",
                "&": "&",
                "return;": ""
            },
            "code": "void update_bit_08004092(uint32_t *data, uint8_t bit_position, uint8_t bit_value) {\n    uint32_t mask = ~(1 << (bit_position & 0xff));\n    *data = (*data & mask) | (bit_value << (bit_position & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004092",
            "calling": [
                "FUN_080040b0"
            ],
            "imported": false,
            "current_name": "update_bit_08004092"
        },
        "FUN_08005cd4": {
            "renaming": {
                "FUN_08005cd4": "sum_of_two_numbers_08005cd4",
                "param_1": "num1",
                "iVar1": "result1",
                "iVar2": "result2",
                "FUN_08005c96": "get_first_number",
                "FUN_08005cc0": "get_second_number"
            },
            "code": "int sum_of_two_numbers_08005cd4(int num1)\n{\n  int result1;\n  int result2;\n  result1 = get_first_number();\n  result2 = get_second_number(num1);\n  return result2 + result1;\n}",
            "called": [
                "FUN_08005cc0",
                "FUN_08005c96"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cd4",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "sum_of_two_numbers_08005cd4"
        },
        "FUN_08005bb0": {
            "renaming": {
                "FUN_08005bb0": "check_param_08005bb0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "PTR_DAT_08005bd0": "PTR_DAT",
                "DAT_08005bcc": "DAT"
            },
            "code": "void check_param_08005bb0(int param1, int param2, undefined4 param3, undefined4 param4)\n{\n    if (param1 == 1)\n    {\n        if (param2 == 0xffff)\n        {\n            do_something(PTR_DAT_08005bcc_08005bd0_08005bd0, DAT_08005bcc_08005bcc, param3, 0xffff, param4);\n        }\n    }\n}",
            "called": [
                "FUN_08005b54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bb0",
            "calling": [],
            "imported": false,
            "current_name": "check_param_08005bb0"
        },
        "FUN_080014ba": {
            "renaming": {
                "FUN_080014ba": "copy_data_to_buffer_080014ba",
                "param_1": "buffer_address",
                "param_2": "is_zero",
                "param_3": "data_1",
                "param_4": "data_2",
                "param_5": "data_3",
                "param_6": "data_4",
                "param_7": "data_5",
                "param_8": "data_6",
                "param_9": "data_7",
                "param_10": "data_8",
                "param_11": "data_9",
                "param_12": "data_10",
                "param_13": "data_11"
            },
            "code": "void copy_data_to_buffer_080014ba(int buffer_address, int is_zero, undefined data_1, undefined4 data_2, undefined data_3, undefined data_4, undefined data_5, undefined data_6, undefined data_7, undefined data_8, undefined data_9, undefined data_10, undefined data_11) {\n    *(undefined *)(buffer_address + 8) = data_1;\n    *(char *)(buffer_address + 9) = (char)data_2;\n    *(undefined *)(buffer_address + 10) = data_3;\n    *(undefined *)(buffer_address + 0xb) = data_4;\n    *(undefined *)(buffer_address + 0xc) = data_5;\n    *(undefined *)(buffer_address + 0xd) = data_6;\n    *(undefined *)(buffer_address + 0xe) = data_7;\n    *(undefined *)(buffer_address + 0xf) = data_8;\n    *(undefined *)(buffer_address + 0x10) = data_9;\n    *(undefined *)(buffer_address + 0x11) = data_10;\n    *(undefined *)(buffer_address + 0x12) = data_11;\n    if (is_zero == 0) {\n        *(undefined *)(buffer_address + 0x13) = 0x10;\n    }\n    else {\n        *(undefined *)(buffer_address + 0x13) = 0;\n    }\n    FUN_080013a4(buffer_address, 0x10, 1, 0, data_2);\n    return;\n}",
            "called": [
                "FUN_080013a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ba",
            "calling": [
                "FUN_08001510"
            ],
            "imported": false,
            "current_name": "copy_data_to_buffer_080014ba"
        },
        "FUN_08003c90": {
            "renaming": {
                "FUN_08003c90": "update_settings_08003c90",
                "param_1": "settings",
                "puVar1": "ptr_settings_array",
                "iVar2": "ptr_flag",
                "iVar3": "current_time",
                "uVar4": "ptr_settings_value",
                "bVar5": "is_flag_set",
                "DAT_08003d98": "ptr_flag",
                "DAT_08003d9c": "ptr_setting_flag"
            },
            "code": "int update_settings_08003c90(uint *settings)\n{\n  bool is_bit_set = (*settings & 1) != 0;\n  if (is_bit_set) {\n    bool is_flag_set = (*(uint *)(DAT_08003d98) & 0x10000000) == 0;\n    if (is_flag_set) {\n      *(uint *)(DAT_08003d98) |= 0x10000000;\n    }\n    if ((*DAT_08003d9c & 0x100) == 0) {\n      *DAT_08003d9c |= 0x100;\n      int start_time = get_time();\n      while ((*DAT_08003d9c & 0x100) == 0) {\n        int current_time = get_time();\n        if (100 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    uint *ptr_settings = ptr_settings_array;\n    uint ptr_settings_value = *(uint *)(DAT_08003d98) & 0x300;\n    if ((ptr_settings_value != 0) && (ptr_settings_value != (settings[1] & 0x300))) {\n      ptr_settings_value = *(uint *)(DAT_08003d98) + 0x20;\n      *ptr_settings = 1;\n      *ptr_settings_array = 0;\n      *(uint *)(DAT_08003d98 + 0x20) = ptr_settings_value & 0xfffffcff;\n      if ((ptr_settings_value & 1) != 0) {\n        int start_time = get_time();\n        while ((*(uint *)(DAT_08003d98 + 0x20) & 2) == 0) {\n          int current_time = get_time();\n          if (5000 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n    *(uint *)(DAT_08003d98 + 0x20) = *(uint *)(DAT_08003d98 + 0x20) & 0xfffffcff | settings[1];\n    if (is_flag_set) {\n      *(uint *)(DAT_08003d98 + 0x1c) &= 0xefffffff;\n    }\n  }\n  if ((*settings & 2) != 0) {\n    *(uint *)(DAT_08003d98 + 4) &= 0xffff3fff | settings[2];\n  }\n  if ((*settings & 0x10) != 0) {\n    *(uint *)(DAT_08003d98 + 4) &= 0xffbfffff | settings[3];\n  }\n  return 0;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c90",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "update_settings_08003c90"
        },
        "FUN_08002514": {
            "renaming": {
                "FUN_08002514": "check_param_range_08002514",
                "param_1": "param",
                "puVar1": "range_ptr",
                "DAT_08002538": "range_ptr",
                "DAT_0800253c": "data_ptr"
            },
            "code": "int check_param_range_08002514(int param)\n{\n    int* DAT_08002538 = DAT_08002538;\n    if (param - 1U < 0x1000000) {\n        DAT_08002538[1] = param - 1U;\n        *(undefined *)(DAT_0800253c + 0x23) = 0xf0;\n        DAT_08002538[2] = 0;\n        *DAT_08002538 = 7;\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002514",
            "calling": [
                "FUN_08001b48",
                "FUN_08001c3c"
            ],
            "imported": false,
            "current_name": "check_param_range_08002514"
        },
        "FUN_08005c1c": {
            "renaming": {
                "FUN_08005c1c": "initialize_data_08005c1c",
                "param_1": "data_ptr",
                "param_2": "data_1",
                "param_3": "data_2",
                "param_4": "data_3",
                "param_5": "data_4"
            },
            "code": "void initialize_data_08005c1c(undefined4 *data_ptr, undefined data_1, undefined data_2, undefined data_3, undefined data_4)\n{\n  *data_ptr = data_start_ptr;\n  *(undefined *)(data_ptr + 1) = data_1;\n  *(undefined *)((int)data_ptr + 5) = data_2;\n  *(undefined *)((int)data_ptr + 6) = data_3;\n  *(undefined *)((int)data_ptr + 7) = data_4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c1c",
            "calling": [
                "FUN_08005c38"
            ],
            "imported": false,
            "current_name": "initialize_data_08005c1c"
        },
        "FUN_08006dc8": {
            "renaming": {
                "FUN_08006dc8": "check_permissions_and_set_flag_08006dc8",
                "param_1": "file_descriptor",
                "param_2": "file_header_offset",
                "param_3": "permission_flag",
                "param_4": "error_flag",
                "iVar1": "read_status",
                "uVar2": "header_flags",
                "auStack_4c": "stack_buffer",
                "local_48": "header_flags"
            },
            "code": "int check_permissions_and_set_flag_08006dc8(int file_descriptor, int file_header_offset, int* permission_flag, uint* error_flag) {\n  int read_status;\n  uint header_flags;\n  undefined stack_buffer[4];\n  if (*(short *)(file_header_offset + 0xe) < 0 || (read_status = read_header_flags(file_descriptor, (int)*(short *)(file_header_offset + 0xe), stack_buffer), read_status < 0)) {\n    *error_flag = 0;\n    if ((int)((uint)*(ushort *)(file_header_offset + 0xc) << 0x18) < 0) {\n      *permission_flag = 0x40;\n      goto LAB_08006e08;\n    }\n  }\n  else {\n    header_flags = (uint)((header_flags & 0xf000) == 0x2000);\n    *permission_flag = header_flags;\n  }\n  *permission_flag = 0x400;\nLAB_08006e08:\n  return 0;\n}\n",
            "called": [
                "FUN_08007004"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dc8",
            "calling": [
                "FUN_08006e10"
            ],
            "imported": false,
            "current_name": "check_permissions_and_set_flag_08006dc8"
        },
        "FUN_0800412c": {
            "renaming": {
                "FUN_0800412c": "clear_bits_0800412c",
                "param_1": "data",
                "param_2": "flag",
                "puVar1": "data_ptr"
            },
            "code": "int clear_bits_0800412c(uint **data, int flag) {\n  uint *data_ptr = *data;\n  if (((data_ptr[8] & 0x1111) == 0) && ((data_ptr[8] & 0x444) == 0)) {\n    data_ptr[0x11] &= 0xffff7fff;\n  }\n  if (((data_ptr[8] & 0x1111) == 0) && ((data_ptr[8] & 0x444) == 0)) {\n    *data_ptr &= 0xfffffffe;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800412c",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "clear_bits_0800412c"
        },
        "FUN_08007090": {
            "renaming": {
                "FUN_08007090": "update_flags_and_call_function_08007090",
                "UNRECOVERED_JUMPTABLE": "function_pointer",
                "PTR_DAT_0800712c": "flag_1",
                "PTR_DAT_08007130": "flag_2",
                "PTR_DAT_08007134": "flag_3",
                "PTR_DAT_08007138": "flag_4",
                "PTR_DAT_0800713c": "flag_5",
                "PTR_DAT_08007140": "flag_6",
                "PTR_DAT_08007144": "flag_7",
                "PTR_DAT_08007148": "flag_8",
                "PTR_DAT_0800714c": "flag_9",
                "PTR_DAT_08007150": "flag_10",
                "PTR_DAT_08007154": "flag_11",
                "PTR_DAT_08007158": "flag_12",
                "update_flag": "update_flag",
                "int": "int"
            },
            "code": "void update_flags_and_call_function_08007090(void)\n{\n  code *function_pointer;\n  function_pointer = update_flags_and_call_function_08007090;\n  update_flag(PTR_DAT_0800712c);\n  update_flag(PTR_DAT_08007130);\n  update_flag(PTR_DAT_08007134);\n  update_flag(PTR_DAT_08007138);\n  update_flag(PTR_DAT_0800713c);\n  update_flag(PTR_DAT_08007140);\n  update_flag(PTR_DAT_08007144);\n  update_flag(PTR_DAT_08007148);\n  update_flag(PTR_DAT_0800714c);\n  update_flag(PTR_DAT_08007150);\n  update_flag(PTR_DAT_08007154);\n  update_flag(PTR_DAT_08007158);\n  (*function_pointer)();\n  return;\n}\n\nvoid update_flag(int* flag_pointer)\n{\n    if (*flag_pointer < 0)\n    {\n        *flag_pointer = 1;\n    }\n}\n",
            "called": [
                "FUN_08006ac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007090",
            "calling": [
                "FUN_080060d4"
            ],
            "imported": false,
            "current_name": "update_flags_and_call_function_08007090"
        },
        "FUN_0800492c": {
            "renaming": {
                "FUN_0800492c": "calculate_result_0800492c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "intermediate_result",
                "uVar2": "shifted_result"
            },
            "code": "uint calculate_result_0800492c(uint input1, uint input2, uint input3, uint input4)\n{\n  int intermediate_result = perform_calculation(input1, PTR_DAT_08004944, input3, input4, input4);\n  uint shifted_result = (uint)(intermediate_result << 12) >> 27;\n  if (shifted_result > 0x10) {\n    shifted_result = 0;\n  }\n  return shifted_result;\n}",
            "called": [
                "FUN_08004cce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800492c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "calculate_result_0800492c"
        },
        "FUN_0800480a": {
            "renaming": {
                "FUN_0800480a": "set_bit_at_position_0800480a",
                "param_1": "bit_position",
                "param_2": "array_of_bits",
                "uVar1": "index",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void set_bit_at_position_0800480a(uint32_t bit_position, uint32_t* array_of_bits){\n\tuint32_t index = (bit_position << 0x18) >> 0x1c;\n\tuint32_t* target_bit = &array_of_bits[index];\n\tuint32_t bit_offset = bit_position & 0xf;\n\t*target_bit = *target_bit | (1 << bit_offset);\n\treturn;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800480a",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_0800480a"
        },
        "FUN_080015f8": {
            "renaming": {
                "FUN_080015f8": "get_flag_080015f8",
                "param_1": "some_param",
                "param_2": "some_other_param",
                "param_3": "another_param",
                "param_4": "yet_another_param",
                "uVar1": "flag",
                "uVar2": "value",
                "uVar3": "result",
                "DAT_0800169c": "some_constant",
                "DAT_08001698": "another_constant",
                "FUN_080015b2": "get_flag_helper",
                "FUN_0800040c": "get_value",
                "FUN_08000194": "perform_operation",
                "FUN_080004f8": "perform_operation",
                "DAT_080016a0": "some_constant",
                "DAT_080016a4": "another_constant",
                "DAT_080016a8": "yet_another_constant",
                "DAT_080016ac": "and_another_constant",
                "DAT_080016b0": "one_more_constant"
            },
            "code": "typedef unsigned int uint;\ntypedef unsigned long long ulonglong;\n\nuint get_flag_080015f8() {\n  uint flag = get_flag_080015f8_helper();\n  ulonglong value = 0;\n  if ((flag & 0x10000) == 0) {\n    uint extracted = flag >> 0x12 & 0x1fff;\n    ulonglong temp = get_value(extracted);\n    if ((flag & 0x2000) != 0) {\n      ulonglong negated = get_value(~extracted & 0x1fff);\n      value = perform_operation(negated, 0, value, DAT_080016a0);\n      value = (value & 0xffffffff) | ((ulonglong)((int)(value >> 0x20) + 0x80000000) << 0x20);\n    }\n    value = perform_operation(temp, 0, value, DAT_080016a4);\n    if (param_2 == 1) {\n      value = perform_operation(value, 0, value, DAT_080016a8);\n      value = perform_operation(value, 0, value, DAT_080016ac);\n      value = perform_operation(value, 0, value, DAT_080016b0);\n      return value;\n    }\n  }\n  else {\n    uint extracted = flag & 7;\n    if (extracted == 2) {\n      return CONCAT44(DAT_0800168c,DAT_08001688);\n    }\n    if (extracted == 4) {\n      return CONCAT44(DAT_08001694,DAT_08001690);\n    }\n    if (extracted != 1) {\n      return 0;\n    }\n  }\n  return value;\n}\n\n",
            "called": [
                "FUN_0800040c",
                "FUN_08000194",
                "FUN_080004f8",
                "FUN_0800074c",
                "FUN_080015b2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015f8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "get_flag_080015f8"
        },
        "FUN_08005c38": {
            "renaming": {
                "FUN_08005c38": "process_input_08005c38",
                "param_1": "input_one",
                "param_2": "input_two",
                "FUN_08005c1c": "execute_function",
                "PTR_DAT_08005c60": "PTR_DATA"
            },
            "code": "void process_input_08005c38(int input_one, int input_two)\n{\n    if ((input_one == 1) && (input_two == 0xffff)) {\n        execute_function(PTR_DAT_08005c60, 0, 0, 0, 0);\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_08005c1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c38",
            "calling": [],
            "imported": false,
            "current_name": "process_input_08005c38"
        },
        "FUN_08005f8c": {
            "renaming": {
                "FUN_08005f8c": "count_bits_set_08005f8c",
                "param_1": "number",
                "cVar1": "bit_count"
            },
            "code": "char count_bits_set_08005f8c(uint number) {\n  char bit_count = 0;\n  while (number != 1) {\n    bit_count++;\n    number = number >> 1;\n  }\n  return bit_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f8c",
            "calling": [
                "FUN_080060e4"
            ],
            "imported": false,
            "current_name": "count_bits_set_08005f8c"
        },
        "FUN_08006f5a": {
            "renaming": {
                "FUN_08006f5a": "process_data_08006f5a",
                "param_1": "output",
                "param_2": "data_address",
                "param_3": "unused_param1",
                "param_4": "unused_param2",
                "sVar1": "data_to_process",
                "puVar2": "data_pointer",
                "iVar3": "result",
                "unaff_r4": "unaff_r4",
                "unaff_r5": "unaff_r5",
                "in_lr": "in_lr"
            },
            "code": "void process_data_08006f5a(int *output, int data_address, int unused_param1, int unused_param2) {\n  \n  int data_value = *(ushort *)(data_address + 0xc);\n  int should_process = ((uint)data_value << 0x17) < 0;\n  \n  if (should_process) {\n    int data_to_process = *(short *)(data_address + 0xe);\n    FUN_08007048(output, data_to_process, 0, 2);\n  }\n  \n  *(ushort *)(data_address + 0xc) = data_value & 0xefff;\n  \n  int *data_pointer = (int *)PTR_DAT_08006fe0;\n  *data_pointer = 0;\n  int result = FUN_08005730(*(short *)(data_address + 0xe), unused_param1, unused_param2, unused_param2, unused_param2, unaff_r4, unaff_r5, in_lr);\n  \n  if (result == -1 && *data_pointer != 0) {\n    *output = *data_pointer;\n  }\n}",
            "called": [
                "FUN_08007048",
                "FUN_08005730"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f5a",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08006f5a"
        },
        "FUN_08000b08": {
            "renaming": {
                "FUN_08000b08": "process_data_08000b08",
                "param_1": "num",
                "param_2": "val",
                "FUN_08001b18": "process_first_data",
                "PTR_DAT_08000b9c": "data_ptr_1",
                "PTR_DAT_08000b98": "data_ptr_2",
                "PTR_DAT_08000b94": "data_ptr_3",
                "PTR_DAT_08000b90": "data_ptr_4",
                "PTR_DAT_08000b8c": "data_ptr_5",
                "PTR_DAT_08000b88": "data_ptr_6",
                "PTR_DAT_08000b84": "data_ptr_7",
                "FUN_08001510": "process_second_data",
                "PTR_DAT_08000bb8": "data_ptr_8",
                "PTR_DAT_08000ba0": "data_val_1",
                "PTR_DAT_08000ba4": "data_val_2",
                "PTR_DAT_08000ba8": "data_val_3",
                "PTR_DAT_08000bac": "data_val_4",
                "PTR_DAT_08000bb0": "data_val_5",
                "PTR_DAT_08000bb4": "data_val_6",
                "FUN_0800157c": "process_third_data",
                "PTR_DAT_08000bc8": "data_ptr_9",
                "PTR_DAT_08000bc4": "data_val_7",
                "PTR_DAT_08000bc0": "data_val_8",
                "PTR_DAT_08000bbc": "data_val_9"
            },
            "code": "void process_data_08000b08(int num, int val){\n    if (num == 1 && val == 0xffff){\n        process_first_data(PTR_DAT_08000b9c, PTR_DAT_08000b98, PTR_DAT_08000b94, PTR_DAT_08000b90, *(undefined4*)PTR_DAT_08000b8c, *(undefined4*)(PTR_DAT_08000b8c + 4), *(undefined4*)PTR_DAT_08000b88, *(undefined4*)(PTR_DAT_08000b88 + 4), *(undefined4*)PTR_DAT_08000b84, *(undefined4*)(PTR_DAT_08000b84 + 4), 0);\n        process_second_data(PTR_DAT_08000bb8, *PTR_DAT_08000ba0, *PTR_DAT_08000ba4, *PTR_DAT_08000ba8, *PTR_DAT_08000bac, *PTR_DAT_08000bb0, *PTR_DAT_08000bb4);\n        process_third_data(PTR_DAT_08000bc8, *PTR_DAT_08000bc4, *PTR_DAT_08000bc0, *PTR_DAT_08000bbc);\n    }\n}\n",
            "called": [
                "FUN_0800157c",
                "FUN_08001510",
                "FUN_08001b18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b08",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08000b08"
        },
        "FUN_08006cb4": {
            "renaming": {
                "FUN_08006cb4": "initialize_data_08006cb4",
                "param_1": "data_address",
                "bVar3": "is_global_data",
                "iVar2": "global_data_address",
                "PTR_PTR_DAT_08006d0c": "PTR_PTR_DAT",
                "PTR_LAB_08006c34_1_08006d10": "PTR_LAB",
                "*PTR_PTR_DAT_08006d0c": "*PTR_PTR_DAT",
                "*(undefined **)(param_1 + 0x28)": "*(undefined **)(data_address + 0x28)",
                "*(int *)(param_1 + 0x18)": "*(int *)(data_address + 0x18)",
                "*(undefined4 *)(param_1 + 0x48)": "*(undefined4 *)(data_address + 0x48)",
                "*(undefined4 *)(param_1 + 0x4c)": "*(undefined4 *)(data_address + 0x4c)",
                "*(undefined4 *)(param_1 + 0x50)": "*(undefined4 *)(data_address + 0x50)",
                "uVar1": "data",
                "FUN_08006d14()": "get_data()",
                "FUN_08006d14(param_1)": "get_data(data_address)",
                "FUN_08006c40": "set_data()"
            },
            "code": "void initialize_data_08006cb4(int data_address)\n{\n    if (*(int *)(data_address + 0x18) == 0) {\n        *(undefined4 *)(data_address + 0x48) = 0;\n        *(undefined4 *)(data_address + 0x4c) = 0;\n        *(undefined4 *)(data_address + 0x50) = 0;\n        int global_data_address = *(int *)PTR_PTR_DAT_08006d0c_08006d0c;\n        *(undefined **)(data_address + 0x28) = PTR_LAB_08006c34_1_08006d10_08006c34_1_08006d10;\n        bool is_global_data = data_address == global_data_address;\n        if (is_global_data) {\n            global_data_address = 1;\n        }\n        if (is_global_data) {\n            *(int *)(data_address + 0x18) = global_data_address;\n        }\n        undefined4 first_data = FUN_08006d14();\n        *(undefined4 *)(data_address + 4) = first_data;\n        undefined4 second_data = FUN_08006d14(data_address);\n        *(undefined4 *)(data_address + 8) = second_data;\n        undefined4 third_data = FUN_08006d14(data_address);\n        *(undefined4 *)(data_address + 0xc) = third_data;\n        FUN_08006c40(*(undefined4 *)(data_address + 4), 4, 0);\n        FUN_08006c40(*(undefined4 *)(data_address + 8), 9, 1);\n        FUN_08006c40(*(undefined4 *)(data_address + 0xc), 0x12, 2);\n        *(undefined4 *)(data_address + 0x18) = 1;\n    }\n    return;\n}",
            "called": [
                "FUN_08006d14",
                "FUN_08006c40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006cb4",
            "calling": [
                "FUN_08006be0",
                "FUN_08006d14",
                "FUN_080069e4",
                "FUN_08006344",
                "FUN_080068f0",
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "initialize_data_08006cb4"
        },
        "FUN_08004c5e": {
            "renaming": {
                "FUN_08004c5e": "find_first_occurrence_08004c5e",
                "param_1": "target",
                "param_2": "string",
                "*param_2": "*string",
                "DAT_08004c7c": "0xc",
                "PTR_08004c78": "*(int *)(string + 4)"
            },
            "code": "int find_first_occurrence_08004c5e(int target, char *string)\n{\n    while (*string != -1)\n    {\n        if (*string == target)\n        {\n            return PTR_08004c78;\n        }\n        string += 12;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004c5e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c5e",
            "calling": [
                "FUN_08004c5e",
                "FUN_08004c78"
            ],
            "imported": false,
            "current_name": "find_first_occurrence_08004c5e"
        },
        "FUN_08004b3c": {
            "renaming": {
                "FUN_08004b3c": "process_data_08004b3c",
                "param_1": "data",
                "iVar1": "result",
                "uVar2": "flag",
                "local_50": "local_array",
                "FUN_08004c78": "get_data",
                "PTR_DAT_08004b90": "PTR_DATA",
                "FUN_08004948": "get_info",
                "FUN_08004cce": "get_flag",
                "FUN_080040b0": "process_data_type1",
                "FUN_0800412c": "process_data_type2",
                "FUN_08003ed8": "finalize_data"
            },
            "code": "void process_data_08004b3c(int data)\n{\n  int result;\n  uint flag;\n  int local_array[17];\n  \n  local_array[0] = get_data(data, PTR_DAT_08004b90);\n  if ((local_array[0] != 0) &&\n     ((((result = get_info(data), result == 0 || (result == 4)) || (result == 8)) ||\n      ((result == 0xc || (result == 0x18)))))) {\n    flag = get_flag(data, PTR_DAT_08004b90);\n    if ((flag & 0x100000) == 0) {\n      process_data_08004b3c_type1(local_array,result);\n    }\n    else {\n      process_data_08004b3c_type2(local_array,result);\n    }\n    finalize_data(local_array);\n  }\n  return;\n}",
            "called": [
                "FUN_08004948",
                "FUN_0800412c",
                "FUN_080040b0",
                "FUN_08004cce",
                "FUN_08003ed8",
                "FUN_08004c78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b3c",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "process_data_08004b3c"
        },
        "FUN_08001550": {
            "renaming": {
                "FUN_08001550": "print_bytes_to_stream_08001550",
                "param_1": "stream",
                "param_2": "size",
                "param_3": "data_offset",
                "iVar1": "i",
                "FUN_08001310": "write_to_stream",
                "mask": "mask"
            },
            "code": "void print_bytes_to_stream_08001550(uint8_t *stream, uint size, int data_offset) {\n  uint8_t mask = (size & 7) << 3 | 0x40;\n  write_to_stream(stream, mask, 0);\n  for (int i = 0; i < 8; i++) {\n    (**(code **) *stream)(stream, *(undefined *)(data_offset + i));\n  }\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001550",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "print_bytes_to_stream_08001550"
        },
        "FUN_08000cd0": {
            "renaming": {
                "FUN_08000cd0": "FUNC_08000cd0"
            },
            "code": "\nvoid FUNC_08000cd0(void)\n\n{\n  char cVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  undefined *puVar4;\n  uint uVar5;\n  undefined4 uVar6;\n  int iVar7;\n  undefined4 extraout_r1;\n  undefined4 extraout_r1_00;\n  undefined4 extraout_r1_01;\n  undefined4 uVar8;\n  undefined8 uVar9;\n  \n  uVar5 = FUN_080058e0();\n  if (*(uint *)PTR_DAT_08000f50 < uVar5) {\n    *(uint *)PTR_DAT_08000f50 = *(uint *)PTR_DAT_08000f50 + 1000;\n    uVar9 = FUN_080015f8(PTR_DAT_08000f74,0);\n    uVar8 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar6 = (undefined4)uVar9;\n    *(undefined8 *)PTR_DAT_08000f6c = uVar9;\n    iVar7 = FUN_080009c8(uVar6,uVar8,DAT_08000f18,DAT_08000f1c);\n    if (((iVar7 != 0) || (iVar7 = FUN_080009c8(uVar6,uVar8,DAT_08000f20,DAT_08000f24), iVar7 != 0))\n       || (iVar7 = FUN_080009c8(uVar6,uVar8,DAT_08000f28,DAT_08000f2c), iVar7 != 0)) {\n      *PTR_DAT_08000f64 = 7;\n      *PTR_DAT_08000f58 = 0;\n    }\n  }\n  uVar5 = FUN_080058e0();\n  if (*(uint *)PTR_DAT_08000f54 < uVar5) {\n    *(uint *)PTR_DAT_08000f54 = *(uint *)PTR_DAT_08000f54 + 1000;\n    if (*PTR_DAT_08000f58 == '\\x01') {\n      uVar8 = *(undefined4 *)PTR_DAT_08000f5c;\n      uVar6 = FUN_08005890(uVar8);\n      uVar5 = count_leading_zeroes(uVar6);\n      FUN_08005848(uVar8,uVar5 >> 5);\n      iVar7 = *(int *)PTR_DAT_08000f78;\n      *(int *)PTR_DAT_08000f78 = iVar7 + 1;\n      puVar2 = PTR_DAT_08000f7c;\n      FUN_08005d82(PTR_DAT_08000f7c,iVar7 + 1,10);\n      puVar3 = PTR_DAT_08000f80;\n      FUN_08005c96(puVar2,PTR_DAT_08000f80);\n      FUN_08005f2c(puVar2,extraout_r1,*(undefined4 *)PTR_DAT_08000f84,\n                   *(undefined4 *)(PTR_DAT_08000f84 + 4),2);\n      FUN_08005c96(puVar2,puVar3);\n      FUN_08005f2c(puVar2,extraout_r1_00,*(undefined4 *)PTR_DAT_08000f6c,\n                   *(undefined4 *)(PTR_DAT_08000f6c + 4),2);\n      FUN_08005c96(puVar2,puVar3);\n      FUN_08005f40(puVar2,extraout_r1_01,*(undefined4 *)PTR_DAT_08000f88,\n                   *(undefined4 *)(PTR_DAT_08000f88 + 4),2);\n    }\n    else {\n      FUN_08005848(*(undefined4 *)PTR_DAT_08000f5c,1);\n    }\n    puVar2 = PTR_DAT_08000f60;\n    FUN_0800135a(PTR_DAT_08000f60);\n    puVar4 = PTR_DAT_08000f64;\n    FUN_08005c96(puVar2,*(undefined4 *)\n                         (PTR_PTR_s_Ready_08000f68 + (uint)(byte)*PTR_DAT_08000f64 * 4));\n    FUN_08001366(puVar2,0,1);\n    puVar3 = PTR_DAT_08000f60;\n    if (*puVar4 == '\\a') {\n      FUN_08005c96(puVar2,PTR_s_TC_Error__08000f8c);\n    }\n    else {\n      FUN_08005f2c(PTR_DAT_08000f60,2,*(undefined4 *)PTR_DAT_08000f6c,\n                   *(undefined4 *)(PTR_DAT_08000f6c + 4),2);\n      FUN_0800134e(puVar3,0);\n      FUN_08005c96(puVar3,PTR_DAT_08000f70);\n    }\n  }\n  if ((byte)*PTR_DAT_08000f64 < 8) {\n                    /* WARNING: Could not recover jumptable at 0x08000d5c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_08000d5c::switchdataD_08000d60 +\n              (&switchD_08000d5c::switchdataD_08000d60)[(byte)*PTR_DAT_08000f64]))();\n    return;\n  }\n  if ((*PTR_DAT_08001274 == '\\x01') && (*PTR_DAT_0800126c == '\\x01')) {\n    *PTR_DAT_0800126c = 0;\n    *PTR_DAT_08001258 = 0;\n  }\n  cVar1 = *PTR_DAT_08001278;\n  if (cVar1 == '\\x01') {\n    iVar7 = FUN_08005754(*(undefined4 *)PTR_DAT_08001280);\n    if (iVar7 == 0) {\n      iVar7 = FUN_080058e0();\n      if (0x32 < (uint)(iVar7 - *(int *)PTR_DAT_08001284)) {\n        *PTR_DAT_08001278 = 2;\n      }\n    }\n    else {\n      *PTR_DAT_08001278 = 0;\n    }\n  }\n  else if (cVar1 == '\\0') {\n    *PTR_DAT_08001274 = 0;\n    iVar7 = FUN_08005754(*(undefined4 *)PTR_DAT_08001280);\n    if (iVar7 == 0) {\n      uVar6 = FUN_080058e0();\n      *(undefined4 *)PTR_DAT_08001284 = uVar6;\n      *PTR_DAT_08001278 = 1;\n    }\n  }\n  else if ((cVar1 == '\\x02') && (iVar7 = FUN_08005754(*(undefined4 *)PTR_DAT_08001280), iVar7 != 0))\n  {\n    *PTR_DAT_08001274 = 1;\n    *PTR_DAT_08001278 = 0;\n  }\n  if (*PTR_DAT_0800126c == '\\x01') {\n    iVar7 = FUN_080058e0();\n    FUN_080016b4(PTR_DAT_08001250);\n    if (*(uint *)PTR_DAT_0800128c < (uint)(iVar7 - *(int *)PTR_DAT_08001288)) {\n      *(uint *)PTR_DAT_08001288 = *(int *)PTR_DAT_08001288 + *(uint *)PTR_DAT_0800128c;\n    }\n    uVar9 = FUN_0800040c(iVar7 - *(int *)PTR_DAT_08001288);\n    iVar7 = FUN_080009dc((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),*(undefined4 *)PTR_DAT_08001290,\n                         *(undefined4 *)(PTR_DAT_08001290 + 4));\n    if (iVar7 == 0) {\n      FUN_08005848(*(undefined4 *)PTR_DAT_0800127c,0);\n    }\n    else {\n      FUN_08005848(*(undefined4 *)PTR_DAT_0800127c,1);\n    }\n  }\n  else {\n    FUN_08005848(*(undefined4 *)PTR_DAT_0800127c,0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08005f2c",
                "FUN_08000a04",
                "FUN_08000a18",
                "FUN_08005f40",
                "FUN_0800134e",
                "FUN_0800135a",
                "FUN_0800040c",
                "FUN_08005c96",
                "FUN_08005890",
                "FUN_08005d82",
                "FUN_08001960",
                "FUN_0800042c",
                "FUN_080058e0",
                "FUN_08005cd4",
                "FUN_08001a44",
                "FUN_08001918",
                "FUN_080018f8",
                "FUN_080009c8",
                "FUN_080009f0",
                "FUN_080015f8",
                "FUN_08005754",
                "FUN_08001366",
                "FUN_080009dc",
                "FUN_080016b4",
                "FUN_08000194",
                "FUN_08005848"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cd0",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "FUNC_08000cd0"
        },
        "FUN_08001310": {
            "renaming": {
                "FUN_08001310": "process_data_08001310",
                "param_1": "data_address",
                "param_2": "data_size",
                "param_3": "arg1",
                "param_4": "arg2",
                "FUN_08005848": "process_data_helper",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "void process_data_08001310(int data_address, uint32_t data_size, uint32_t arg1, uint32_t arg2) {\n  process_data_08001310_helper(*(uint8_t *)(data_address + 8), arg1, arg1, arg2, arg2);\n  if (*(int8_t *)(data_address + 9) != -1) {\n    process_data_08001310_helper(*(int8_t *)(data_address + 9), 0, 0, 0, 0);\n  }\n  if ((*(uint8_t *)(data_address + 0x13) & 0x10) == 0) {\n    process_data_08001310_helper(data_address, data_size >> 4, 0, 0, 0);\n    process_data_08001310_helper(data_address, data_size, 0, 0, 0);\n    return;\n  }\n  process_data_08001310_helper(data_address, data_size, 0, 0, 0);\n  return;\n}\n",
            "called": [
                "FUN_080012c0",
                "FUN_080012e8",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001310",
            "calling": [
                "FUN_0800138e",
                "FUN_08001550",
                "FUN_0800134e",
                "FUN_08001366",
                "FUN_0800135a",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "process_data_08001310"
        },
        "FUN_080009a8": {
            "renaming": {
                "FUN_080009a8": "execute_function_with_swapped_params_080009a8",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "FUN_080009b8": "execute_function"
            },
            "code": "void execute_function_with_swapped_params_080009a8(void* param_3, void* param_4, void* param_1, void* param_2)\n{\n  execute_function(param_3, param_4, param_1, param_2);\n  return;\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009a8",
            "calling": [
                "FUN_08000a04",
                "FUN_08000a18"
            ],
            "imported": false,
            "current_name": "execute_function_with_swapped_params_080009a8"
        },
        "FUN_08004d90": {
            "renaming": {
                "FUN_08004d90": "set_flags_08004d90",
                "param_1": "flag_ptr",
                "DAT_08004de4": "FLAG_A",
                "DAT_08004df0": "FLAGS_BASE_ADDR",
                "DAT_08004df0 + 0x18": "FLAG_A_BIT",
                "DAT_08004df0 + 0x1c": "FLAG_B_BIT",
                "DAT_08004de8": "FLAG_C",
                "DAT_08004dec": "FLAG_D"
            },
            "code": "void set_flags_08004d90(int *flag_ptr) {\n    int flag_value = *flag_ptr;\n    if (flag_value == DAT_08004de4) {\n        uint32_t *flags_ptr = (uint32_t *)(DAT_08004df0 + 0x18);\n        *flags_ptr &= ~DAT_08004df0 + 0x18;\n    }\n    if (flag_value == FLAG_B) {\n        uint32_t *flags_ptr = (uint32_t *)(DAT_08004df0 + 0x1c);\n        *flags_ptr &= ~DAT_08004df0 + 0x1c;\n    }\n    if (flag_value == DAT_08004de8) {\n        uint32_t *flags_ptr = (uint32_t *)(DAT_08004df0 + 0x1c);\n        *flags_ptr &= ~DAT_08004de8_BIT;\n    }\n    if (flag_value == DAT_08004dec) {\n        uint32_t *flags_ptr = (uint32_t *)(DAT_08004df0 + 0x1c);\n        *flags_ptr &= ~DAT_08004dec_BIT;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d90",
            "calling": [
                "FUN_08004b34"
            ],
            "imported": false,
            "current_name": "set_flags_08004d90"
        },
        "FUN_08005ce8": {
            "renaming": {
                "FUN_08005ce8": "convert_decimal_to_base_08005ce8",
                "param_1": "ptr_input_num",
                "param_2": "input_num_len",
                "param_3": "base",
                "uVar2": "output_num",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "ptr_output_num",
                "cVar1": "digit_char",
                "local_15": "N/A"
            },
            "code": "int convert_decimal_to_base_08005ce8(int *ptr_input_num, uint input_num_len, uint base) {\n  char digit_char;\n  int remainder;\n  char *ptr_output_num = (char *)malloc(input_num_len + 1);\n  ptr_output_num[input_num_len] = '\\0';\n  if (base < 2) {\n    base = 10;\n  }\n  do {\n    remainder = *ptr_input_num % base;\n    *ptr_input_num /= base;\n    ptr_output_num[--input_num_len] = (remainder < 10) ? remainder + '0' : remainder + '7';\n  } while (*ptr_input_num != 0);\n  int output_num = FUN_08000178(ptr_output_num);\n  output_num = (**(code **)(*ptr_output_num + 4))(ptr_output_num, ptr_output_num, output_num);\n  free(ptr_output_num);\n  return output_num;\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005ce8",
            "calling": [
                "FUN_08005d8a",
                "FUN_08005d42"
            ],
            "imported": false,
            "current_name": "convert_decimal_to_base_08005ce8"
        },
        "FUN_0800316c": {
            "renaming": {
                "FUN_0800316c": "process_0800316c",
                "param_1": "params",
                "iVar1": "result",
                "puVar2": "ptr3",
                "puVar3": "ptr1",
                "condition": "condition",
                "ptr1": "ptr1",
                "ptr2": "ptr2",
                "ptr3": "ptr3",
                "ptr4": "ptr4",
                "ptr5": "ptr5",
                "ptr6": "ptr6"
            },
            "code": "void process_0800316c(uint **params){\n        int condition = *(byte *)((int)params + 0x3d) - 0x29;\n        uint *ptr1 = *params;\n        uint *ptr2 = params[0xc];\n        uint *ptr3 = params[9];\n        uint *ptr4 = params[0xd];\n        uint *ptr5 = params[0xe];\n        uint *ptr6 = params[0x10];\n        \n        if (condition < 2) {\n            ptr2 = (uint *)0x0;\n            *(undefined *)((int)params + 0x3d) = 0x28;\n        }\n        else {\n            if ((*(char *)((int)params + 0x3d) != '`') && ((ptr1[1] & 0x800) == 0)) {\n                *(undefined *)((int)params + 0x3d) = 0x20;\n            }\n            ptr2 = (uint *)0x0;\n            *(undefined *)((int)params + 0x3e) = 0;\n        }\n        *ptr1 = *ptr1 & 0xfffff7ff;\n        if ((ptr1[1] & 0x800) == 0) {\n            if (*(char *)((int)params + 0x3d) == '`') {\n                *(undefined *)((int)params + 0x3d) = 0x20;\n                params[0x10] = (uint *)0x0;\n                if ((ptr1[5] & 0x40) != 0) {\n                    ptr3 = (uint *)((int)ptr3 + 1);\n                    *(char *)ptr3 = (char)ptr1[4];\n                }\n                *ptr1 = *ptr1 & 0xfffffffe;\n                do_nothing(params);\n            }\n            else {\n                if ((ptr1[5] & 0x40) != 0) {\n                    ptr3 = (uint *)((int)ptr3 + 1);\n                    *(char *)ptr3 = (char)ptr1[4];\n                }\n                process_0800316c2(params);\n            }\n        }\n        else {\n            ptr1[1] = ptr1[1] & 0xfffff7ff;\n            if (*(char *)((int)params[0xd] + 0x21) == '\\x01') {\n                ptr5[0xd] = (uint)PTR_LAB_080035fc_1_080032ac;\n                int result = FUN_0800258c(ptr5);\n                if (result != 0) {\n                    if ((ptr1[5] & 0x40) != 0) {\n                        ptr3 = (uint *)((int)ptr3 + 1);\n                        *(char *)ptr3 = (char)ptr1[4];\n                    }\n                    *ptr1 = *ptr1 & 0xfffffffe;\n                    *(undefined *)((int)params + 0x3d) = 0x20;\n                    (*(code *)ptr5[0xd])();\n                }\n            }\n            else {\n                ptr4[0xd] = (uint)PTR_LAB_080035fc_1_080032ac;\n                int result = FUN_0800258c(ptr4);\n                if (result != 0) {\n                    *ptr1 = *ptr1 & 0xfffffffe;\n                    *(undefined *)((int)params + 0x3d) = 0x20;\n                    (*(code *)ptr4[0xd])();\n                }\n            }\n        }\n        if ((*(char *)((int)params + 0x3d) == '(') && (((uint)params[0x10] & 4) != 0)) {\n            params[0xb] = DAT_080032b0;\n            ptr2 = (uint *)0x0;\n            *(undefined *)((int)params + 0x3d) = 0x20;\n            *(undefined *)((int)params + 0x3e) = 0;\n            process_0800316c3(params);\n        }\n    }",
            "called": [
                "FUN_08004ef4",
                "FUN_0800316a",
                "FUN_0800258c",
                "FUN_08004ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "FUN_08003520",
                "FUN_080032b4"
            ],
            "imported": false,
            "current_name": "process_0800316c"
        },
        "FUN_08004828": {
            "renaming": {
                "FUN_08004828": "update_bit_08004828",
                "param_1": "bit_index",
                "param_2": "bit_array",
                "uVar1": "array_index",
                "PTR_": "pointer_",
                "DAT_": "data_"
            },
            "code": "void update_bit_08004828(uint bit_index, int* bit_array){\n    uint array_index = (bit_index << 0x18) >> 0x1c;\n    uint* array_ptr = bit_array + array_index;\n    uint bit_mask = 1 << (bit_index & 0xf);\n    *array_ptr = (*array_ptr) & ~bit_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004828",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "update_bit_08004828"
        },
        "FUN_08003afa": {
            "renaming": {
                "FUN_08003afa": "perform_action_08003afa",
                "param_1": "action_flags",
                "param_2": "action_param",
                "puVar1": "data_ptr",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "uVar4": "result",
                "DAT_08003c38": "original_data_ptr",
                "DAT_08003c34": "original_data_ptr_2",
                "FUN_08001cc4": "get_current_time",
                "FUN_08003a68": "perform_calculation",
                "FUN_08001c3c": "perform_cleanup",
                "PTR_DAT_08003c40": "lookup_table",
                "PTR_DAT_08003c3c": "calculation_shifts"
            },
            "code": "uint32_t perform_action_08003afa(uint32_t *action_flags, uint32_t action_param) {\n  uint32_t *data_ptr;\n  int32_t start_time;\n  int32_t current_time;\n  uint32_t result;\n\n  if ((*action_flags & 2) != 0) {\n    data_ptr[1] = data_ptr[1] & 0xffffff0f | action_flags[2];\n  }\n  if ((*action_flags & 1) != 0) {\n    uint32_t action_type = action_flags[1];\n    if (action_type == 1) {\n      if ((*data_ptr & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((action_type != 2) && ((*data_ptr & 2) == 0)) {\n      return 1;\n    }\n    data_ptr[1] = action_type | data_ptr[1] & 0xfffffffc;\n    start_time = get_current_time();\n    if (action_type == 1) {\n      while ((data_ptr[1] & 0xc) != 4) {\n        current_time = get_current_time();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (action_type == 2) {\n      while ((data_ptr[1] & 0xc) != 8) {\n        current_time = get_current_time();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((data_ptr[1] & 0xc) != 0) {\n        current_time = get_current_time();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  data_ptr = DAT_08003c38;\n  if ((action_param < (*DAT_08003c38 & 7)) &&\n     (*DAT_08003c38 = *DAT_08003c38 & 0xfffffff8 | action_param, action_param != (*data_ptr & 7))) {\n    return 1;\n  }\n  if ((*action_flags & 4) != 0) {\n    data_ptr[1] = data_ptr[1] & 0xfffff8ff | action_flags[3];\n  }\n  if ((*action_flags & 8) != 0) {\n    data_ptr[1] = data_ptr[1] & 0xffffc7ff | action_flags[4] << 3;\n  }\n  result = perform_calculation();\n  *(uint32_t *)DAT_08003c38 = result >> PTR_DAT_08003c40[(data_ptr[1] << 0x18) >> 0x1c];\n  perform_cleanup(0xf);\n  return 0;\n}",
            "called": [
                "FUN_08003a68",
                "FUN_08001c3c",
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003afa",
            "calling": [
                "FUN_08003ad4"
            ],
            "imported": false,
            "current_name": "perform_action_08003afa"
        },
        "FUN_08004948": {
            "renaming": {
                "FUN_08004948": "get_result_08004948",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "shifted_result"
            },
            "code": "uint32_t get_result_08004948(uint32_t param1, uint32_t param2, uint32_t param3, uint32_t param4) {\n  int32_t result = calculate(param1, PTR_DAT_08004970, param3, param4, param4);\n  uint32_t shifted_result = (uint32_t)(result << 12) >> 27;\n  if (shifted_result == 3) {\n    return 8;\n  }\n  if (shifted_result == 4) {\n    return 0xc;\n  }\n  if (shifted_result == 2) {\n    return 4;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004cce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004948",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "get_result_08004948"
        },
        "FUN_0800316a": {
            "renaming": {
                "FUN_0800316a": "do_nothing_0800316a"
            },
            "code": "\nvoid do_nothing_0800316a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316a",
            "calling": [
                "FUN_0800316c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800316a"
        },
        "FUN_08005b24": {
            "renaming": {
                "FUN_08005b24": "set_color_08005b24",
                "param_1": "address",
                "param_2": "color_index",
                "uVar1": "color_value",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void set_color_08005b24(int address, uint8_t color_index)\n{\n    uint8_t color_value;\n    code *jump_table;\n\n    if (color_index < 0x3c) {\n        color_value = PTR_DAT_08005b38[color_index];\n    }\n    else {\n        color_value = 0xff;\n    }\n    *(uint8_t *)(address + 0x12d) = color_value;\n    (*jump_table)();\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b24",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "set_color_08005b24"
        },
        "FUN_080049f0": {
            "renaming": {
                "FUN_080049f0": "process_data_080049f0",
                "param_1": "data_ptr",
                "iVar1": "base_address",
                "DAT_08004a48": "base_address",
                "DAT_08004a40": "first_value",
                "DAT_08004a44": "second_value",
                "PTR_08004a48": "base_address_ptr"
            },
            "code": "void process_data_080049f0(int *data_ptr)\n{\n  int DAT_08004a48 = DAT_08004a48;\n  int DAT_08004a40 = DAT_08004a40;\n  int DAT_08004a44 = DAT_08004a44;\n  \n  if (*data_ptr != DAT_08004a40) {\n    if (*data_ptr == DAT_08004a44) {\n      uint *PTR_08004a48 = (uint *)(DAT_08004a48 + 0xc);\n      *PTR_08004a48 |= 0x400;\n      *(uint *)(DAT_08004a48 + 0xc) &= 0xfffffbff;\n      *(uint *)(DAT_08004a48 + 0x18) &= 0xfffffbff;\n    }\n    return;\n  }\n  uint *PTR_08004a48 = (uint *)(DAT_08004a48 + 0xc);\n  *PTR_08004a48 |= 0x200;\n  *(uint *)(DAT_08004a48 + 0xc) &= 0xfffffdff;\n  *(uint *)(DAT_08004a48 + 0x18) &= 0xfffffdff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049f0",
            "calling": [
                "FUN_0800224c"
            ],
            "imported": false,
            "current_name": "process_data_080049f0"
        },
        "FUN_08001e40": {
            "renaming": {
                "FUN_08001e40": "get_value_at_offset_4c_08001e40",
                "param_1": "input_pointer"
            },
            "code": "int get_value_at_offset_4c_08001e40(int *input_pointer){\n    int offset = 0x4c;\n    int* value_pointer = input_pointer + offset;\n    int value = *value_pointer;\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e40",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_4c_08001e40"
        },
        "FUN_08003a68": {
            "renaming": {
                "FUN_08003a68": "calculate_value_08003a68",
                "uVar1": "result",
                "uVar2": "flags",
                "local_1c": "value",
                "abStack_18": "buffer",
                "uStack_c": "stack_c",
                "uStack_10": "stack_10",
                "uStack_14": "stack_14"
            },
            "code": "uint calculate_value_08003a68(void)\n{\n  uint result;\n  uint flags;\n  undefined2 value;\n  byte buffer[4];\n  undefined4 stack_c;\n  undefined4 stack_10;\n  undefined4 stack_14;\n  \n  stack_c = *(undefined4 *)(PTR_DAT_08003ac4 + 8);\n  stack_10 = *(undefined4 *)(PTR_DAT_08003ac4 + 4);\n  stack_14 = *(undefined4 *)PTR_DAT_08003ac4;\n  value = *(undefined2 *)(PTR_DAT_08003ac4 + 0x10);\n  flags = *(uint *)(DAT_08003ac8 + 4);\n  result = DAT_08003ad0;\n  if ((flags & 0xc) == 8) {\n    if ((flags & 0x10000) == 0) {\n      result = DAT_08003acc * (uint)buffer[(flags << 10) >> 0x1c];\n    }\n    else {\n      result = (DAT_08003ad0 * buffer[(flags << 10) >> 0x1c]) / (uint)*(byte *)((int)&value - ((*(int *)(DAT_08003ac8 + 4) << 0xe) >> 0x1f));\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a68",
            "calling": [
                "FUN_08003afa"
            ],
            "imported": false,
            "current_name": "calculate_value_08003a68"
        },
        "FUN_080012a2": {
            "renaming": {
                "FUN_080012a2": "print_twice_080012a2",
                "param_1": "str",
                "PTR_": "ptr",
                "DAT_": "data"
            },
            "code": "void print_twice_080012a2(char* str) {\n  char* PTR_ = str;\n  print(PTR_, 0);\n  print(PTR_, 1);\n  print(PTR_, 0);\n}\n",
            "called": [
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012a2",
            "calling": [
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "imported": false,
            "current_name": "print_twice_080012a2"
        },
        "FUN_08004c78": {
            "renaming": {
                "FUN_08004c78": "check_param_08004c78",
                "param_1": "param",
                "uVar1": "result",
                "FUN_08004c5e": "call_fun"
            },
            "code": "int check_param_08004c78(int param){\n  int result;\n  if (param != -1) {\n    result = call_fun();\n    return result;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004c5e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c78",
            "calling": [
                "FUN_08004b3c",
                "FUN_080053d4",
                "FUN_08005384",
                "FUN_08004a4c",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "check_param_08004c78"
        },
        "FUN_08001e48": {
            "renaming": {
                "FUN_08001e48": "update_data_08001e48",
                "param_1": "data_ptr",
                "param_2": "update_ptr",
                "uVar1": "result",
                "uVar2": "update_value",
                "iVar3": "data_value",
                "local_c": "wait_time"
            },
            "code": "uint32_t update_data_08001e48(int *data_ptr, uint32_t *update_ptr) {\n  uint32_t result;\n  uint32_t shift_amount;\n  uint32_t shift_mask;\n  uint32_t update_value;\n  int data_value;\n\n  if (*(char *)(data_ptr + 9) == 1) {\n    result = 2;\n  }\n  else {\n    *(char *)(data_ptr + 9) = 1;\n    update_value = update_ptr[1];\n    if (update_value < 7) {\n      shift_amount = update_value * 5 - 5;\n      shift_mask = ~(0x1f << (shift_amount & 0xff));\n      data_value = *data_ptr;\n      *(uint32_t *)(data_value + 0x34) = (*update_ptr << (shift_amount & 0xff)) | (data_value & shift_mask);\n    }\n    else if (update_value < 0xd) {\n      shift_amount = update_value * 5 - 0x23;\n      shift_mask = ~(0x1f << (shift_amount & 0xff));\n      data_value = *data_ptr;\n      *(uint32_t *)(data_value + 0x30) = (*update_ptr << (shift_amount & 0xff)) | (data_value & shift_mask);\n    }\n    else {\n      shift_amount = update_value * 5 - 0x41;\n      shift_mask = ~(0x1f << (shift_amount & 0xff));\n      data_value = *data_ptr;\n      *(uint32_t *)(data_value + 0x2c) = (*update_ptr << (shift_amount & 0xff)) | (data_value & shift_mask);\n    }\n    update_value = *update_ptr;\n    if (update_value < 10) {\n      shift_amount = update_ptr[2] << (update_value * 3 & 0xff);\n      shift_mask = ~(7 << (update_value * 3 & 0xff));\n      data_value = *data_ptr;\n      *(uint32_t *)(data_value + 0x10) = shift_amount | (data_value & shift_mask);\n    }\n    else {\n      shift_amount = update_value * 3 - 0x1e;\n      shift_mask = ~(7 << (shift_amount & 0xff));\n      data_value = *data_ptr;\n      *(uint32_t *)(data_value + 0xc) = (update_ptr[2] << (shift_amount & 0xff)) | (data_value & shift_mask);\n    }\n    if (*update_ptr - 0x10 < 2) {\n      data_value = *data_ptr;\n      if (data_value == DAT_08001f74) {\n        if ((*(uint32_t *)(data_value + 8) & 0x800000) == 0) {\n          *(uint32_t *)(data_value + 8) |= 0x800000;\n          if (*update_ptr == 0x10) {\n            uint32_t wait_time = (uint32_t)((uint64_t)DAT_08001f7c * (uint64_t)*(uint32_t *)PTR_DAT_08001f78 >> 0x32) * 10;\n            while (wait_time != 0) {\n              wait_time--;\n            }\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        data_ptr[10] |= 0x20;\n        result = 1;\n      }\n    }\n    else {\n      result = 0;\n    }\n    *(char *)(data_ptr + 9) = 0;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e48",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "update_data_08001e48"
        },
        "FUN_080009b8": {
            "renaming": {
                "FUN_080009b8": "execute_function_080009b8",
                "param_1": "input_param",
                "FUN_0800092c": "call_helper_function"
            },
            "code": "undefined4 execute_function_080009b8(undefined4 input_param)\n{\n    call_helper_function();\n    return input_param;\n}",
            "called": [
                "FUN_0800092c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009b8",
            "calling": [
                "FUN_080009c8",
                "FUN_080009f0",
                "FUN_080009a8",
                "FUN_080009dc"
            ],
            "imported": false,
            "current_name": "execute_function_080009b8"
        },
        "FUN_08000aa8": {
            "renaming": {
                "FUN_08000aa8": "calculate_shifted_value_08000aa8",
                "param_1": "input_value",
                "param_2": "shift_amount",
                "iVar1": "shifted_value",
                "uVar2": "shift_count"
            },
            "code": "uint32_t calculate_shifted_value_08000aa8(uint32_t input_value, uint32_t shift_amount)\n{\n    if ((shift_amount & 0x80000000) != 0)\n    {\n        return 0;\n    }\n    uint32_t shifted_value = shift_amount * 2 + 0x200000;\n    if (shift_amount * 2 < 0xffe00000)\n    {\n        if (shifted_value < 0)\n        {\n            return 0;\n        }\n        uint32_t shift_count = -(shifted_value >> 0x15) - 0x3e1;\n        if (shift_count < 0)\n        {\n            return 0;\n        }\n        return (shift_amount << 0xb | 0x80000000 | input_value >> 0x15) >> (shift_count & 0xff);\n    }\n    else if ((input_value | shift_amount << 0xc) != 0)\n    {\n        return 0;\n    }\n    return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aa8",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08000aa8"
        },
        "FUN_08000a04": {
            "renaming": {
                "FUN_08000a04": "should_execute_function_08000a04",
                "in_ZR": "zero_register",
                "in_CY": "carry_register",
                "FUN_080009a8": "execute_dependency"
            },
            "code": "bool should_execute_function_08000a04(void)\n{\n  undefined zero_register;\n  undefined carry_register;\n  execute_dependency();\n  return !(bool)carry_register || (bool)zero_register;\n}",
            "called": [
                "FUN_080009a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a04",
            "calling": [
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "should_execute_function_08000a04"
        },
        "FUN_0800010c": {
            "renaming": {
                "FUN_0800010c": "is_first_call_to_function_0800010c",
                "param_1": "has_been_called_before",
                "PTR_DAT_08000124": "has_been_called_before",
                "DAT_08000128": "num_calls",
                "PTR_FUN_0800012c": "return_true"
            },
            "code": "bool is_first_call_to_function_0800010c(bool *PTR_DAT_08000124, int *DAT_08000128){\n    if (*PTR_DAT_08000124 == false) {\n        if (*DAT_08000128 != 0) {\n            return true;\n        }\n        *PTR_DAT_08000124 = true;\n    }\n    return false;\n}",
            "called": [
                "FUN_08007328"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800010c",
            "calling": [],
            "imported": false,
            "current_name": "is_first_call_to_function_0800010c"
        },
        "FUN_08003f14": {
            "renaming": {
                "FUN_08003f14": "do_nothing_08003f14"
            },
            "code": "\nvoid do_nothing_08003f14(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f14",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f14"
        },
        "FUN_08001cac": {
            "renaming": {
                "FUN_08001cac": "calculateAndStoreValue_08001cac",
                "*PTR_DAT_08001cc0": "*dataPointer",
                "*(uint *)PTR_DAT_08001cbc": "*targetPointer",
                "*(int *)PTR_DAT_08001cbc": "*targetPointer"
            },
            "code": "void calculateAndStoreValue_08001cac(void)\n{\n    uint8_t byteValue = *PTR_DAT_08001cc0;\n    uint32_t* targetPointer = (uint32_t*)targetDataPointer;\n    *(uint *)PTR_DAT_08001cbc = byteValue + *(uint *)PTR_DAT_08001cbc;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cac",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": false,
            "current_name": "calculateAndStoreValue_08001cac"
        },
        "FUN_08003f12": {
            "renaming": {
                "FUN_08003f12": "do_nothing_08003f12"
            },
            "code": "\nvoid do_nothing_08003f12(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f12",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f12"
        },
        "FUN_08005a18": {
            "renaming": {
                "FUN_08005a18": "checkAndCallFunction_08005a18",
                "DAT_08005a3c": "isDataAvailable",
                "FUN_0800591e": "callFunctionWithDataPointer",
                "PTR_DAT_08005a40": "dataPointer"
            },
            "code": "void checkAndCallFunction_08005a18(void)\n{\n  if (DAT_08005a3c != 0) {\n    callFunctionWithDataPointer(PTR_DAT_08005a40);\n  }\n  return;\n}",
            "called": [
                "FUN_0800591e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a18",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "checkAndCallFunction_08005a18"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "check_conditions_08003f18",
                "param_1": "ptr_param_1",
                "iVar1": "var_1",
                "do_nothing_08003f14": "do_nothing_1",
                "do_nothing_08003f12": "do_nothing_2",
                "FUN_08004df8": "do_something_1",
                "*(undefined *)(param_1 + 7)": "*(undefined *)(ptr_param_1 + 7)",
                "FUN_08004e12": "do_something_3",
                "do_nothing_0800417a": "do_nothing_4",
                "do_nothing_08003f16": "do_nothing_5",
                "do_nothing_08004178": "do_nothing_6"
            },
            "code": "void check_conditions_08003f18(int *ptr_param_1)\n{\n  int var_1;\n  var_1 = *ptr_param_1;\n  if (((*(uint *)(var_1 + 0x10) & 2) != 0) && ((*(uint *)(var_1 + 0xc) & 2) != 0)) {\n    *(undefined4 *)(var_1 + 0x10) = 0xfffffffd;\n    *(undefined *)(ptr_param_1 + 7) = 1;\n    if ((*(uint *)(*ptr_param_1 + 0x18) & 3) == 0) {\n      do_something_1(ptr_param_1);\n      do_nothing_1(ptr_param_1);\n    }\n    else {\n      do_nothing_2(ptr_param_1);\n    }\n    *(undefined *)(ptr_param_1 + 7) = 0;\n  }\n  var_1 = *ptr_param_1;\n  if (((*(uint *)(var_1 + 0x10) & 4) != 0) && ((*(uint *)(var_1 + 0xc) & 4) != 0)) {\n    *(undefined4 *)(var_1 + 0x10) = 0xfffffffb;\n    *(undefined *)(ptr_param_1 + 7) = 2;\n    if ((*(uint *)(*ptr_param_1 + 0x18) & 0x300) == 0) {\n      do_something_1(ptr_param_1);\n      do_nothing_1(ptr_param_1);\n    }\n    else {\n      do_nothing_2(ptr_param_1);\n    }\n    *(undefined *)(ptr_param_1 + 7) = 0;\n  }\n  var_1 = *ptr_param_1;\n  if (((*(uint *)(var_1 + 0x10) & 8) != 0) && ((*(uint *)(var_1 + 0xc) & 8) != 0)) {\n    *(undefined4 *)(var_1 + 0x10) = 0xfffffff7;\n    *(undefined *)(ptr_param_1 + 7) = 4;\n    if ((*(uint *)(*ptr_param_1 + 0x1c) & 3) == 0) {\n      do_something_1(ptr_param_1);\n      do_nothing_1(ptr_param_1);\n    }\n    else {\n      do_nothing_2(ptr_param_1);\n    }\n    *(undefined *)(ptr_param_1 + 7) = 0;\n  }\n  var_1 = *ptr_param_1;\n  if (((*(uint *)(var_1 + 0x10) & 0x10) != 0) && ((*(uint *)(var_1 + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(var_1 + 0x10) = 0xffffffef;\n    *(undefined *)(ptr_param_1 + 7) = 8;\n    if ((*(uint *)(*ptr_param_1 + 0x1c) & 0x300) == 0) {\n      do_something_1(ptr_param_1);\n      do_nothing_1(ptr_param_1);\n    }\n    else {\n      do_nothing_2(ptr_param_1);\n    }\n    *(undefined *)(ptr_param_1 + 7) = 0;\n  }\n  var_1 = *ptr_param_1;\n  if (((*(uint *)(var_1 + 0x10) & 1) != 0) && ((*(uint *)(var_1 + 0xc) & 1) != 0)) {\n    *(undefined4 *)(var_1 + 0x10) = 0xfffffffe;\n    do_something_3(ptr_param_1);\n  }\n  var_1 = *ptr_param_1;\n  if (((*(uint *)(var_1 + 0x10) & 0x80) != 0) && ((*(uint *)(var_1 + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(var_1 + 0x10) = 0xffffff7f;\n    do_nothing_4(ptr_param_1);\n  }\n  var_1 = *ptr_param_1;\n  if (((*(uint *)(var_1 + 0x10) & 0x40) != 0) && ((*(uint *)(var_1 + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(var_1 + 0x10) = 0xffffffbf;\n    do_nothing_5(ptr_param_1);\n  }\n  var_1 = *ptr_param_1;\n  if (((*(uint *)(var_1 + 0x10) & 0x20) != 0) && ((*(uint *)(var_1 + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(var_1 + 0x10) = 0xffffffdf;\n    do_nothing_6(ptr_param_1);\n  }\n  return;\n}\n",
            "called": [
                "FUN_08003f12",
                "FUN_08004178",
                "FUN_08004df8",
                "FUN_08004e12",
                "FUN_08003f14",
                "FUN_08003f16",
                "FUN_0800417a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "FUN_08004e20"
            ],
            "imported": false,
            "current_name": "check_conditions_08003f18"
        },
        "FUN_08003f16": {
            "renaming": {
                "FUN_08003f16": "do_nothing_08003f16"
            },
            "code": "\nvoid do_nothing_08003f16(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f16",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f16"
        },
        "FUN_0800591e": {
            "renaming": {
                "FUN_0800591e": "calculate_shift_amount_0800591e",
                "param_1": "input_address",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "ushort calculate_shift_amount_0800591e(int input_address)\n{\n    ushort shift_amount = (*(short *)(input_address + 0x134) + 0x40) - *(short *)(input_address + 0x136) & 0x3f;\n    return shift_amount;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800591e",
            "calling": [
                "FUN_08005a18"
            ],
            "imported": false,
            "current_name": "calculate_shift_amount_0800591e"
        },
        "FUN_08002540": {
            "renaming": {
                "FUN_08002540": "set_bit_in_array_08002540",
                "param_1": "bit_index",
                "PTR_DAT_0800255c": "array_base_ptr",
                "DAT_0800255c": "array_base"
            },
            "code": "void set_bit_in_array_08002540(uint bit_index)\n{\n  if (bit_index >= 0) {\n    uint array_index = (bit_index >> 5) + 0x60;\n    uint* array_ptr = (uint*)(DAT_0800255c + array_index * 4);\n    uint bit_mask = 1 << (bit_index & 0x1f);\n    *array_ptr = bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002540",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_in_array_08002540"
        },
        "FUN_08006344": {
            "renaming": {
                "FUN_08006344": "decode_08006344",
                "param_1": "param",
                "param_2": "current_byte",
                "param_3": "buffer",
                "iVar1": "buffer_length",
                "pbVar2": "current_position",
                "pbVar3": "next_position",
                "uVar4": "current_byte_as_uint",
                "PTR_DAT_080069d8": "ptr_d1",
                "PTR_DAT_080069dc": "ptr_d2",
                "PTR_DAT_080069e0": "ptr_d3"
            },
            "code": "uint decode_08006344(int param, byte current_byte, byte **buffer){\n  int buffer_length = (int)(*buffer)[2]-1;\n  (*buffer)[2] = buffer_length;\n  if (buffer_length >= -1 || (buffer_length >= (int)(*buffer)[6] && current_byte != 0xa)){\n    byte *current_position = *buffer;\n    *buffer = current_position + 1;\n    *current_position = current_byte;\n    return (uint)current_byte;\n  }\n  if (param != 0 && *(int *)(param + 0x18) == 0){\n    handle_error();\n  }\n  if (buffer == (byte **)PTR_DAT_080069d8){\n    buffer = *(byte ***)(param + 4);\n  }\n  else if (buffer == (byte **)PTR_DAT_080069dc){\n    buffer = *(byte ***)(param + 8);\n  }\n  else if (buffer == (byte **)PTR_DAT_080069e0){\n    buffer = *(byte ***)(param + 0xc);\n  }\n  (*buffer)[2] = (*buffer)[6];\n  byte *next_position = (byte *)(uint)*(ushort *)(buffer + 3);\n  int shift = (int)next_position << 0x1c;\n  if ((shift < 0 && (next_position = buffer[4]) != (byte *)0x0) || (shift = handle_shift(param, buffer, shift, next_position, current_byte), shift == 0)){\n    uint current_byte_as_uint = (uint)current_byte;\n    int difference = (int)*buffer - (int)buffer[4];\n    if (difference < (int)buffer[5] || (difference = handle_difference(param, buffer), difference == 0)){\n      (*buffer)[2] = (*buffer)[2] - 1;\n      byte *current_position = *buffer;\n      *buffer = current_position + 1;\n      *current_position = current_byte;\n      if ((byte *)(difference + 1) != buffer[5]){\n        if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x1f)) {\n          return current_byte_as_uint;\n        }\n        if (current_byte_as_uint != 10) {\n          return current_byte_as_uint;\n        }\n      }\n      int result = handle_difference(param, buffer);\n      if (result == 0) {\n        return current_byte_as_uint;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "FUN_08006be0",
                "FUN_080069e4",
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006344",
            "calling": [
                "FUN_08006370"
            ],
            "imported": false,
            "current_name": "decode_08006344"
        },
        "FUN_080009c8": {
            "renaming": {
                "FUN_080009c8": "is_input_not_null_080009c8",
                "in_ZR": "input_char",
                "FUN_080009b8": "get_input_char"
            },
            "code": "bool is_input_not_null_080009c8(void)\n{\n  char input_char;\n  input_char = get_input_char();\n  return input_char != '\\0';\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "is_input_not_null_080009c8"
        },
        "FUN_08002db2": {
            "renaming": {
                "FUN_08002db2": "process_input_08002db2",
                "param_1": "input",
                "cVar1": "current_char",
                "puVar2": "ptr1",
                "do_nothing_08002db0": "do_nothing_1",
                "do_nothing_08002c4e": "do_nothing_2"
            },
            "code": "uint32_t process_input_08002db2(uint32_t **input) {\n  char current_char;\n  uint32_t *ptr1;\n  uint32_t **ptr2;\n  \n  current_char = *(char *)((int)input + 0x3d);\n  ptr1 = input[0xb];\n  if ((*(short *)(input + 10) == 0) && (current_char == '!')) {\n    if ((ptr1 == (uint32_t *)0x4) || ((ptr1 == (uint32_t *)0x8 || (ptr1 == (uint32_t *)0xffff0000)))) {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      **input = **input | 0x200;\n      input[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      if (*(char *)((int)input + 0x3e) == '@') {\n        *(undefined *)((int)input + 0x3e) = 0;\n        do_nothing_08002db0();\n      }\n      else {\n        *(undefined *)((int)input + 0x3e) = 0;\n        do_nothing_08002c4e();\n      }\n    }\n    else {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      input[0xc] = (uint32_t *)0x11;\n      *(undefined *)((int)input + 0x3e) = 0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      do_nothing_08002c4e();\n    }\n  }\n  else if ((current_char == '!') || ((*(char *)((int)input + 0x3e) == '@' && (current_char == '\"')))) {\n    if (*(short *)((int)input + 0x2a) == 0) {\n      (*input)[1] = (*input)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)input + 0x3e) == '@') {\n      if (input[0x14] == (uint32_t *)0x0) {\n        if (input[0x13] == (uint32_t *)0x1) {\n          (*input)[4] = (uint32_t)input[0x12] & 0xff;\n          input[0x14] = (uint32_t *)((int)input[0x14] + 2);\n        }\n        else {\n          (*input)[4] = (uint32_t)((int)input[0x12] << 0x10) >> 0x18;\n          input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n        }\n      }\n      else if (input[0x14] == (uint32_t *)0x1) {\n        (*input)[4] = (uint32_t)input[0x12] & 0xff;\n        input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n      }\n      else if (input[0x14] == (uint32_t *)0x2) {\n        if (*(char *)((int)input + 0x3d) == '\"') {\n          **input = **input | 0x100;\n        }\n        else if (*(char *)((int)input + 0x3d) == '!') {\n          ptr1 = input[9];\n          input[9] = (uint32_t *)((int)ptr1 + 1);\n          (*input)[4] = (uint32_t)*(byte *)ptr1;\n          *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      ptr1 = input[9];\n      input[9] = (uint32_t *)((int)ptr1 + 1);\n      (*input)[4] = (uint32_t)*(byte *)ptr1;\n      *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c4e",
                "FUN_08002db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_08002db2"
        },
        "FUN_08001cc4": {
            "renaming": {
                "FUN_08001cc4": "get_value_from_memory_location_08001cc4",
                "PTR_DAT_08001ccc": "memory_location"
            },
            "code": "get_value_from_memory_location_08001cc4() {\n  undefined4* value_ptr = (undefined4*)PTR_DAT_08001ccc;\n  return *value_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cc4",
            "calling": [
                "FUN_080043b4",
                "FUN_080053d4",
                "FUN_08001cd0",
                "FUN_08003688",
                "FUN_08003afa",
                "FUN_080020f0",
                "FUN_08004b94",
                "FUN_08004478",
                "FUN_08002384",
                "FUN_08003c90",
                "FUN_08001f84"
            ],
            "imported": false,
            "current_name": "get_value_from_memory_location_08001cc4"
        },
        "FUN_08002db0": {
            "renaming": {
                "FUN_08002db0": "do_nothing_08002db0"
            },
            "code": "\nvoid do_nothing_08002db0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db0",
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "imported": false,
            "current_name": "do_nothing_08002db0"
        },
        "FUN_08003ea0": {
            "renaming": {
                "FUN_08003ea0": "check_and_set_flags_08003ea0",
                "param_1": "flag_values",
                "**param_1": "first_flag_value",
                "(*param_1)[1]": "second_flag_value",
                "DAT_08003ed4": "some_constant",
                "is_first_flag_set": "is_first_flag_set",
                "is_second_flag_set": "is_second_flag_set",
                "call_some_function": "call_some_function"
            },
            "code": "void check_and_set_flags_08003ea0(uint **flag_values)\n{\n  bool is_first_flag_set = (**flag_values & 2) != 0;\n  bool is_second_flag_set = ((*flag_values)[1] & 2) != 0;\n  if (is_first_flag_set && is_second_flag_set) {\n    call_some_function();\n    (*flag_values)[1] = 0xfffffffd;\n  }\n  *(undefined4 *)(DAT_08003ed4 + 0x14) = 0x20000;\n  *(undefined *)((int)flag_values + 0x11) = 1;\n  return;\n}",
            "called": [
                "FUN_08004d18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ea0",
            "calling": [],
            "imported": false,
            "current_name": "check_and_set_flags_08003ea0"
        },
        "FUN_0800306c": {
            "renaming": {
                "FUN_0800306c": "process_input_0800306c",
                "param_1": "input_array",
                "puVar1": "current_value",
                "PTR_0804a008": "output_ptr",
                "PTR_0804a00c": "output_ptr",
                "DAT_0804a01d": "input_length"
            },
            "code": "int process_input_0800306c(uint **input_array) {\n    uint *current_value = input_array[11];\n    short DAT_0804a01d = *(short *)((int)input_array + 42);\n    if (DAT_0804a01d == 3) {\n        if (((current_value == (uint *)0x4) || (current_value == (uint *)0x8)) || (current_value == (uint *)0xffff0000)) {\n            **input_array = **input_array & 0xfffffbff;\n        }\n        uint *PTR_0804a008 = input_array[9];\n        input_array[9] = (uint *)((int)PTR_0804a008 + 1);\n        *(char *)PTR_0804a008 = (char)(*input_array)[4];\n        DAT_0804a01d--;\n    }\n    else if (DAT_0804a01d == 2) {\n        if (((current_value == (uint *)0x4) || (current_value == (uint *)0x8)) || (current_value == (uint *)0xffff0000)) {\n            (*input_array)[1] = (*input_array)[1] & 0xfffffcff;\n            **input_array = **input_array | 0x200;\n        }\n        else {\n            if (current_value == (uint *)0x2) {\n                **input_array = **input_array | 0x400;\n            }\n            else {\n                **input_array = **input_array & 0xfffffbff;\n            }\n            (*input_array)[1] = (*input_array)[1] & 0xfffffcff;\n        }\n        uint *PTR_0804a008 = input_array[9];\n        input_array[9] = (uint *)((int)PTR_0804a008 + 1);\n        *(char *)PTR_0804a008 = (char)(*input_array)[4];\n        DAT_0804a01d--;\n        PTR_0804a008 = input_array[9];\n        input_array[9] = (uint *)((int)PTR_0804a008 + 1);\n        *(char *)PTR_0804a008 = (char)(*input_array)[4];\n        DAT_0804a01d--;\n        *(undefined *)((int)input_array + 61) = 0x20;\n        input_array[12] = (uint *)0x0;\n        if (*(char *)((int)input_array + 62) == '@') {\n            *(undefined *)((int)input_array + 62) = 0;\n            do_nothing_08002f9a();\n        }\n        else {\n            *(undefined *)((int)input_array + 62) = 0;\n            do_nothing_08002c50();\n        }\n    }\n    else {\n        uint *PTR_0804a008 = input_array[9];\n        input_array[9] = (uint *)((int)PTR_0804a008 + 1);\n        *(char *)PTR_0804a008 = (char)(*input_array)[4];\n        DAT_0804a01d--;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08002c50",
                "FUN_08002f9a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800306c",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_0800306c"
        },
        "FUN_0800548c": {
            "renaming": {
                "FUN_0800548c": "is_flag_set_0800548c",
                "param_1": "data",
                "PTR_DAT_080054ac": "data_table",
                "byte": "index",
                "uVar1": "value",
                "FUN_080047e8": "get_value"
            },
            "code": "bool is_flag_set_0800548c(uint8_t* data, int index)\n{\n  uint32_t value = get_value(data, index);\n  return (value & 0x22) == 0x22;\n}",
            "called": [
                "FUN_080047e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800548c",
            "calling": [
                "FUN_080054d4",
                "FUN_08005510"
            ],
            "imported": false,
            "current_name": "is_flag_set_0800548c"
        },
        "FUN_08004848": {
            "renaming": {
                "FUN_08004848": "get_dat_value_08004848",
                "param_1": "param",
                "DAT_08004870": "data_value_1",
                "DAT_08004880": "data_value_2",
                "DAT_08004874": "data_value_3",
                "DAT_08004878": "data_value_4",
                "DAT_0800487c": "data_value_5"
            },
            "code": "unsigned int get_dat_value_08004848(unsigned int param) {\n    switch(param) {\n        case 0:\n            return DAT_08004870;\n        case 1:\n            return DAT_08004880;\n        case 2:\n            return DAT_08004874;\n        case 3:\n            return DAT_08004878;\n        case 4:\n            return DAT_0800487c;\n        default:\n            return 0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004848",
            "calling": [
                "FUN_08005890",
                "FUN_08005848"
            ],
            "imported": false,
            "current_name": "get_dat_value_08004848"
        },
        "FUN_08005d82": {
            "renaming": {
                "FUN_08005d82": "call_function_1_before_return_08005d82",
                "FUN_08005d42": "call_function_1"
            },
            "code": "void call_function_1_before_return_08005d82(void)\n{\n  call_function_1();\n  return;\n}",
            "called": [
                "FUN_08005d42"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d82",
            "calling": [
                "FUN_08000cd0",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "call_function_1_before_return_08005d82"
        },
        "FUN_08006f92": {
            "renaming": {
                "FUN_08006f92": "check_and_update_value_08006f92",
                "param_1": "value",
                "param_2": "offset",
                "iVar1": "result",
                "uVar2": "new_value",
                "bVar3": "is_result_negative"
            },
            "code": "void check_and_update_value_08006f92(undefined4 value, int offset) {\n  int result = get_updated_value(value, (int)*(short *)(offset + 0xe));\n  bool is_result_negative = result == -1;\n  ushort new_value;\n  if (is_result_negative) {\n    new_value = *(ushort *)(offset + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(offset + 0x54) = result;\n    new_value = *(ushort *)(offset + 0xc) | 0x1000;\n  }\n  if (is_result_negative) {\n    *(ushort *)(offset + 0xc) = new_value;\n  }\n  else {\n    *(ushort *)(offset + 0xc) = new_value;\n  }\n  return;\n}",
            "called": [
                "FUN_08007048"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f92",
            "calling": [],
            "imported": false,
            "current_name": "check_and_update_value_08006f92"
        },
        "FUN_080012c0": {
            "renaming": {
                "FUN_080012c0": "process_bits_080012c0",
                "param_1": "data_address",
                "param_2": "bit_mask",
                "uVar1": "bit_position",
                "FUN_08005848": "process_bit",
                "FUN_080012a2": "finalize_processing"
            },
            "code": "void process_bits_080012c0(int data_address, int bit_mask)\n    {\n        uint32_t bit_position;\n        for (bit_position = 0; bit_position < 4; bit_position++)\n        {\n            uint32_t data_byte_address = data_address + bit_position + 0xB;\n            uint32_t bit_value = bit_mask >> (bit_position & 0xff) & 1;\n            process_bit(data_byte_address, bit_value);\n        }\n        finalize_processing(data_address);\n    }",
            "called": [
                "FUN_080012a2",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012c0",
            "calling": [
                "FUN_08001310",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "process_bits_080012c0"
        },
        "FUN_08001f80": {
            "renaming": {
                "FUN_08001f80": "get_value_from_offset_08001f80",
                "param_1": "offset"
            },
            "code": "int get_value_from_offset_08001f80(int offset)\n{\n    return *(int *)(offset + 0x28);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f80",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "get_value_from_offset_08001f80"
        },
        "FUN_08001f84": {
            "renaming": {
                "FUN_08001f84": "activate_device_08001f84",
                "param_1": "device_info",
                "param_2": "activation_code",
                "iVar1": "activation_status",
                "iVar3": "device_info_ptr",
                "local_14": "delay_count",
                "PTR_DAT_08001ffc": "DEVICE_CONSTANT_PTR",
                "DAT_08002000": "DEVICE_DELAY_CONSTANT"
            },
            "code": "int activate_device_08001f84(int *device_info, uint32_t activation_code)\n{\n  int device_info_ptr = *device_info;\n  if ((*(uint32_t *)(device_info_ptr + 8) & 1) == 0) {\n    *(uint32_t *)(device_info_ptr + 8) |= 1;\n    uint32_t delay_count = (uint32_t)((uint64_t)DAT_08002000 * (uint64_t)*(uint32_t *)PTR_DAT_08001ffc >> 0x32);\n    for (; delay_count != 0; delay_count--) {\n    }\n    int activation_status = activate_device_08001f84_with_code(device_info, activation_code, (int)((uint64_t)DAT_08002000 * (uint64_t)*(uint32_t *)PTR_DAT_08001ffc));\n    do {\n      if ((*(uint32_t *)(*device_info + 8) & 1) != 0) {\n        return 0;\n      }\n      activation_status = activate_device_08001f84_with_code();\n    } while ((uint32_t)(activation_status - activation_status) < 3);\n    device_info[10] |= 0x10;\n    device_info[0xb] |= 1;\n    *(undefined *)(device_info + 9) = 0;\n    return 1;\n  }\n  else {\n    return 0;\n  }\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f84",
            "calling": [
                "FUN_08002004",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "activate_device_08001f84"
        },
        "FUN_08000bcc": {
            "renaming": {
                "FUN_08000bcc": "startCookingProcess_08000bcc",
                "PTR_DAT_08000c90": "oven1TempSensor",
                "PTR_DAT_08000c94": "oven2TempSensor",
                "PTR_DAT_08000c98": "reflowTempSensor",
                "PTR_DAT_08000c9c": "oven1State",
                "PTR_DAT_08000ca0": "oven2State",
                "PTR_DAT_08000ca4": "s_Reflow",
                "PTR_DAT_08000ca8": "s_Oven_1_2",
                "PTR_DAT_08000cac": "oven2StartTime",
                "PTR_DAT_08000cb0": "oven2EndTime",
                "FUN_08005848": "startSensor",
                "FUN_080057b4": "setSensorState",
                "FUN_080013a4": "prepareOven",
                "FUN_08001550": "setOvenState",
                "FUN_0800135a": "stopSensor",
                "FUN_08005c96": "doNothing",
                "FUN_08001366": "getCurrentTime",
                "FUN_080058e0": "calculateEndTime",
                "FUN_08000aec": "startCooking"
            },
            "code": "void startCookingProcess_08000bcc(void)\n{\n  // initialize variables\n  int *PTR_DAT_08000c90 = PTR_DAT_08000c90;\n  int *PTR_DAT_08000c94 = PTR_DAT_08000c94;\n  int *PTR_DAT_08000c98 = PTR_DAT_08000c98;\n  int *PTR_DAT_08000c9c = PTR_DAT_08000c9c;\n  int *PTR_DAT_08000ca0 = PTR_DAT_08000ca0;\n  \n  // start cooking process\n  startSensor(PTR_DAT_08000c90);\n  setSensorState(PTR_DAT_08000c90, 1);\n  startSensor(PTR_DAT_08000c94);\n  setSensorState(PTR_DAT_08000c94, 1);\n  startSensor(PTR_DAT_08000c98);\n  setSensorState(PTR_DAT_08000c98, 1);\n  setSensorState(PTR_DAT_08000c94, 0);\n  \n  // prepare oven1\n  prepareOven(PTR_DAT_08000c9c, 8, 2, 0);\n  setOvenState(PTR_DAT_08000c9c, 0, PTR_PTR_DAT_08000ca4_08000ca4);\n  setOvenState(PTR_DAT_08000c9c, 1, 0);\n  setOvenState(PTR_DAT_08000c9c, 2, PTR_PTR_DAT_08000ca8_08000ca8);\n  stopSensor(PTR_DAT_08000c90);\n  doNothing(0x9c4);\n  setOvenState(PTR_DAT_08000c9c, 1, 0);\n  \n  // prepare oven2\n  setSensorState(PTR_DAT_08000c94, 1);\n  setOvenState(PTR_DAT_08000ca0, 2000, 6);\n  int *PTR_DAT_08000cac = PTR_DAT_08000cb4;\n  int *PTR_DAT_08000cb0 = PTR_DAT_08000cb8;\n  *PTR_DAT_08000cac = getCurrentTime();\n  *PTR_DAT_08000cb0 = calculateEndTime();\n  \n  // start cooking\n  startCooking();\n}\n",
            "called": [
                "FUN_08005c96",
                "FUN_08005a68",
                "FUN_08001550",
                "FUN_080058e8",
                "FUN_080057b4",
                "FUN_080058e0",
                "FUN_08001366",
                "FUN_08005848",
                "FUN_0800135a",
                "FUN_080013a4",
                "FUN_08000aec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000bcc",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "startCookingProcess_08000bcc"
        },
        "FUN_0800281e": {
            "renaming": {
                "FUN_0800281e": "set_param_0800281e",
                "param_1": "data_address",
                "param_2": "value",
                "param_3": "shift_amount",
                "*(int *)(param_1 + 0x10)": "*(int *)(data_address + 0x10)"
            },
            "code": "void set_param_0800281e(int data_address, int value, int shift_amount) {\n  if (shift_amount == 0) {\n    *(int *)(data_address + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(data_address + 0x10) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800281e",
            "calling": [
                "FUN_08004c30"
            ],
            "imported": false,
            "current_name": "set_param_0800281e"
        },
        "FUN_08006198": {
            "renaming": {
                "FUN_08006198": "execute_functions_08006198",
                "puVar1": "function_list_1",
                "iVar2": "function_list_1_size",
                "iVar3": "i",
                "function_list_2": "function_list_2",
                "function_list_2_size": "function_list_2_size"
            },
            "code": "void execute_functions_08006198(void)\n{\n  void **function_list_1 = PTR_DAT_080061d0;\n  int function_list_1_size = (int)PTR_DAT_080061d4 - (int)PTR_DAT_080061d0;\n  for (int i = 0; i < function_list_1_size >> 2; i++) {\n    (**(void (**)(void))(function_list_1 + i * 4))();\n  }\n  do_nothing_08007328();\n  void **function_list_2 = PTR_DAT_080061d8;\n  int function_list_2_size = (int)PTR_DAT_080061dc - (int)PTR_DAT_080061d8;\n  for (int i = 0; i < function_list_2_size >> 2; i++) {\n    (**(void (**)(void))(function_list_2 + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_08005f5e",
                "FUN_08007328"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006198",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": false,
            "current_name": "execute_functions_08006198"
        },
        "FUN_08007048": {
            "renaming": {
                "FUN_08007048": "check_and_set_result_08007048",
                "param_1": "result",
                "param_2": "input_1",
                "param_3": "input_2",
                "param_4": "input_3",
                "puVar1": "result_ptr",
                "iVar2": "status"
            },
            "code": "void check_and_set_result_08007048(int *result, int param_2, int param_3, int param_4)\n{\n  int *result_ptr = PTR_DAT_08007068;\n  *result_ptr = 0;\n  int status = FUN_08005728(param_2, param_3, param_4, param_4, param_4);\n  if ((status == -1) && (*result_ptr != 0)) {\n    *result = *result_ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08005728"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007048",
            "calling": [
                "FUN_08006f92",
                "FUN_08006f5a"
            ],
            "imported": false,
            "current_name": "check_and_set_result_08007048"
        },
        "FUN_08003c50": {
            "renaming": {
                "FUN_08003c50": "calculate_shifted_value_08003c50",
                "uVar1": "shifted_value",
                "FUN_08003c44": "get_shifted_value",
                "PTR_DAT_08003c6c": "shift_amount",
                "DAT_08003c68": "data"
            },
            "code": "uint calculate_shifted_value_08003c50(void) {\n  uint shifted_value;\n  shifted_value = get_shifted_value();\n  uint PTR_DAT_08003c6c = (uint)(*(int *)(DAT_08003c68 + 4) << 0x15) >> 0x1d;\n  uint shifted_result = shifted_value >> PTR_DAT_08003c6c;\n  return shifted_result;\n}",
            "called": [
                "FUN_08003c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c50",
            "calling": [
                "FUN_08004204"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08003c50"
        },
        "FUN_080065c0": {
            "renaming": {
                "FUN_080065c0": "decode_data_080065c0",
                "param_1": "data",
                "param_2": "input_data",
                "param_3": "output_data",
                "param_4": "param_4",
                "param_5": "decode_func",
                "iVar1": "decode_result",
                "uVar2": "max_output_size",
                "uVar3": "byte_count",
                "bVar4": "is_four_byte"
            },
            "code": "undefined4 decode_data_080065c0(undefined4 param_1, uint *input_data, uint *output_data, undefined4 param_4, code *decode_func) {\n  int i;\n  uint max_output_size = input_data[4] < input_data[2] ? input_data[2] : input_data[4];\n  *output_data = max_output_size;\n  if (*(char *)((int)input_data + 0x43) != '\\0') {\n    *output_data = max_output_size + 1;\n  }\n  if ((int)(*input_data << 0x1a) < 0) {\n    *output_data += 2;\n  }\n  uint byte_count = *input_data & 6;\n  if (byte_count == 0) {\n    for (; (int)byte_count < (int)(input_data[3] - *output_data); byte_count++) {\n      int decode_result = (*decode_func)(param_1, param_4, (int)input_data + 0x19, 1);\n      if (decode_result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  uint extra_byte = (uint)*(byte *)((int)input_data + 0x43);\n  if (extra_byte != 0) {\n    extra_byte = 1;\n  }\n  uint output_byte = extra_byte;\n  if ((int)(*input_data << 0x1a) < 0) {\n    *(undefined *)((int)input_data + extra_byte + 0x43) = 0x30;\n    output_byte = extra_byte + 2;\n    *(undefined *)((int)input_data + extra_byte + 0x44) = *(undefined *)((int)input_data + 0x45);\n  }\n  int decode_result = (*decode_func)(param_1, param_4, (int)input_data + 0x43, output_byte);\n  if (decode_result != -1) {\n    uint output_size = input_data[3];\n    bool is_four_byte = (*input_data & 6) != 4;\n    if (is_four_byte) {\n      output_size = 0;\n    }\n    uint size_diff = 0;\n    if (!is_four_byte) {\n      size_diff = output_size - *output_data;\n    }\n    if (!is_four_byte) {\n      size_diff &= ~((int)size_diff >> 0x1f);\n    }\n    if (input_data[4] < input_data[2]) {\n      size_diff += input_data[2] - input_data[4];\n    }\n    while (true) {\n      if (size_diff == output_byte) {\n        return 0;\n      }\n      int decode_result = (*decode_func)(param_1, param_4, (int)input_data + 0x1a, 1);\n      if (decode_result == -1) break;\n      output_byte++;\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080065c0",
            "calling": [
                "FUN_080066b0"
            ],
            "imported": false,
            "current_name": "decode_data_080065c0"
        },
        "FUN_080054d4": {
            "renaming": {
                "FUN_080054d4": "get_value_from_param_080054d4",
                "param_1": "param_value",
                "param_2": "output",
                "param_3": "error_value",
                "param_4": "unknown_value",
                "iVar1": "result"
            },
            "code": "int get_value_from_param_080054d4(int param_value, undefined* output, int error_value, int unknown_value)\n{\n    if (param_value == 0) {\n        return error_value;\n    }\n    int result = FUN_0800548c();\n    if (result == 0) {\n        *output = *(undefined *)(param_value + 0x45);\n        FUN_080045a2(*(undefined4 *)(PTR_DAT_0800550c + (uint)*(byte *)(param_value + 0x44) * 4), param_value + 0x45, 1, PTR_DAT_0800550c, unknown_value);\n        return 0;\n    }\n    return error_value;\n}",
            "called": [
                "FUN_080045a2",
                "FUN_0800548c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054d4",
            "calling": [
                "FUN_0800598a"
            ],
            "imported": false,
            "current_name": "get_value_from_param_080054d4"
        },
        "FUN_08004d40": {
            "renaming": {
                "FUN_08004d40": "wait_forever_08004d40"
            },
            "code": "void wait_forever_08004d40(void)\n{\n    while(true)\n    {\n        // Do nothing, just wait forever\n    }\n}",
            "called": [
                "FUN_08004d40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d40",
            "calling": [
                "FUN_08001b48",
                "FUN_08004d40"
            ],
            "imported": false,
            "current_name": "wait_forever_08004d40"
        },
        "FUN_08004d44": {
            "renaming": {
                "FUN_08004d44": "set_flags_08004d44",
                "puVar1": "flags"
            },
            "code": "void set_flags_08004d44(void) {\n  uint *flags = DAT_08004d84;\n  *DAT_08004d84 |= 1;\n  flags[1] = DAT_08004d88 & flags[1];\n  *flags &= 0xfef6ffff;\n  *flags &= 0xfffbffff;\n  flags[1] &= 0xff80ffff;\n  flags[2] = 0x9f0000;\n  *(undefined4 *)(DAT_08004d8c + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d44",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": false,
            "current_name": "set_flags_08004d44"
        },
        "FUN_0800282c": {
            "renaming": {
                "FUN_0800282c": "update_parameter_0800282c",
                "param_1": "parameter_value",
                "DAT_08002844": "data_address",
                "PTR_080060e4": "function_ptr",
                "uint": "unsigned_int",
                "*(uint *)(DAT_08002844 + 0x14)": "parameter_ptr",
                "FUN_080060e4()": "call_function()"
            },
            "code": "void update_parameter_0800282c(uint parameter_value) {\n  uint* *(uint *)(DAT_08002844 + 0x14) = (uint*)(DAT_08002844 + 0x14);\n  if ((**(uint *)(DAT_08002844 + 0x14) & parameter_value) != 0) {\n    **(uint *)(DAT_08002844 + 0x14) = parameter_value;\n    call_function();\n  }\n  return;\n}",
            "called": [
                "FUN_080060e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800282c",
            "calling": [],
            "imported": false,
            "current_name": "update_parameter_0800282c"
        },
        "FUN_080015b2": {
            "renaming": {
                "FUN_080015b2": "get_bitmask_of_set_bits_080015b2",
                "*param_1": "input_data",
                "iVar1": "bit_value",
                "uVar2": "bit_index",
                "uVar3": "bitmask",
                "FUN_08005848": "set_bit_in_byte",
                "FUN_08005890": "get_bit_value"
            },
            "code": "uint get_bitmask_of_set_bits_080015b2(uint8_t *input_data)\n{\n  int bit_index;\n  uint bitmask = 0;\n  set_bit_in_byte(input_data[1], 0);\n  for (bit_index = 31; bit_index >= 0; bit_index--) {\n    set_bit_in_byte(input_data[2], 1);\n    int bit_value = get_bit_value(input_data[0]);\n    if (bit_value != 0) {\n      bitmask |= (1u << bit_index);\n    }\n    set_bit_in_byte(input_data[2], 0);\n  }\n  set_bit_in_byte(input_data[1], 1);\n  return bitmask;\n}",
            "called": [
                "FUN_08005890",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b2",
            "calling": [
                "FUN_080015f8"
            ],
            "imported": false,
            "current_name": "get_bitmask_of_set_bits_080015b2"
        },
        "FUN_0800040c": {
            "renaming": {
                "FUN_0800040c": "convert_uint_to_ulonglong_0800040c",
                "param_1": "input_num",
                "uVar1": "result_1",
                "uVar2": "shift_amount_2",
                "iVar3": "leading_zeroes_count",
                "uVar4": "shift_amount_1",
                "in_r12": "shift_amount_3",
                "bVar5": "is_shift_amount_2_negative",
                "bVar6": "is_shift_amount_2_zero",
                "bVar7": "is_shift_amount_1_greater_than_32",
                "shifted_num_1": "input_num_shifted_1",
                "shifted_num_2": "input_num_shifted_2"
            },
            "code": "ulonglong convert_uint_to_ulonglong_0800040c(uint input_num)\n{\n  uint leading_zeroes_count;\n  uint shift_amount_1;\n  uint shift_amount_2;\n  uint shift_amount_3;\n  uint shifted_num_1;\n  uint shifted_num_2;\n  uint result_1 = 0;\n  uint result_2 = 0;\n  if (input_num == 0) {\n    return 0;\n  }\n  leading_zeroes_count = count_leading_zeroes(input_num);\n  shift_amount_1 = leading_zeroes_count + 0x15;\n  shift_amount_2 = leading_zeroes_count - 0xb;\n  if ((int)shift_amount_1 < 0x20) {\n    shift_amount_3 = 0x20 - shift_amount_2;\n    shifted_num_1 = input_num << (shift_amount_1 & 0xff);\n    shifted_num_2 = input_num >> ((0xcU - leading_zeroes_count) & 0xff);\n    result_1 = shifted_num_1 | shifted_num_2;\n  }\n  else {\n    shift_amount_3 = shift_amount_2 & 0xff;\n    result_1 = input_num << shift_amount_3;\n    if (shift_amount_2 != 0) {\n      result_1 = result_1 | (0U >> ((0x20 - shift_amount_2) & 0xff));\n    }\n    if (shift_amount_2 != 0) {\n      result_2 = 0 << shift_amount_3;\n    }\n  }\n  if ((int)shift_amount_1 < 0x433) {\n    return CONCAT44(result_1 + ((0x432 - shift_amount_1) * 0x100000), result_2);\n  }\n  shift_amount_2 = ~(0x432 - shift_amount_1);\n  if (0x1e < (int)shift_amount_2) {\n    return (ulonglong)(result_1 >> ((shift_amount_2 - 0x1f) & 0xff));\n  }\n  shift_amount_3 = shift_amount_2 - 0x13;\n  if (shift_amount_3 == 0 || shift_amount_3 < 0 != SCARRY4(shift_amount_2 - 0x1f,0xc)) {\n    shift_amount_2 = shift_amount_2 + 1;\n    return CONCAT44(result_1 >> (shift_amount_2 & 0xff), result_2 >> (shift_amount_2 & 0xff) | result_1 << ((0x20 - shift_amount_2) & 0xff));\n  }\n  return (ulonglong)(result_2 >> ((0x20 - (0xcU - shift_amount_3)) & 0xff) | result_1 << ((0xcU - shift_amount_3) & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800040c",
            "calling": [
                "FUN_080015f8",
                "FUN_08001814",
                "FUN_08000cd0",
                "FUN_08001918",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "convert_uint_to_ulonglong_0800040c"
        },
        "FUN_08004df4": {
            "renaming": {
                "FUN_08004df4": "subtract_four_from_input_08004df4",
                "param_1": "input",
                "return": "result"
            },
            "code": "int subtract_four_from_input_08004df4(int input) {\n    int result = input - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df4",
            "calling": [
                "FUN_08004df8",
                "FUN_08004e12"
            ],
            "imported": false,
            "current_name": "subtract_four_from_input_08004df4"
        },
        "FUN_08004bb0": {
            "renaming": {
                "FUN_08004bb0": "process_input_08004bb0",
                "param_1": "input_value",
                "local_20": "bit_mask",
                "local_1c": "param_2",
                "local_18": "param_3",
                "local_14": "value_1",
                "DAT_08004c28": "data_ptr_1",
                "DAT_08004c2c": "data_ptr_2",
                "uVar1": "value_2"
            },
            "code": "void process_input_08004bb0(uint input_value, undefined4 param_2, undefined4 param_3)\n{\n  uint bit_mask;\n  uint flag_value;\n  uint value_1 = 3;\n  uint* DAT_08004c28 = (uint*)(DAT_08004c28 + 0x18);\n  uint* DAT_08004c2c = (uint*)(DAT_08004c2c + 4);\n  uint value_2 = (input_value << 0x18) >> 0x1c;\n  bit_mask = 1 << (input_value & 0xf) & 0xffff;\n  *DAT_08004c28 = *DAT_08004c28 | 1;\n  if ((input_value - 0xd & 0xff) < 2) {\n    *DAT_08004c2c = *DAT_08004c2c & 0xf8ffffff | 0x4000000;\n  }\n  if (((input_value == 0xf) || (input_value == 0x13)) || (input_value == 0x14)) {\n    *DAT_08004c2c = *DAT_08004c2c & 0xf8ffffff | 0x2000000;\n  }\n  FUN_08002624(FUN_08004884(value_2), &bit_mask, param_2, param_3);\n  return;\n}",
            "called": [
                "FUN_08004884",
                "FUN_08002624"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bb0",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "process_input_08004bb0"
        },
        "FUN_08004df8": {
            "renaming": {
                "FUN_08004df8": "execute_callback_if_set_08004df8",
                "param_1": "callback_param",
                "iVar1": "callback_ptr",
                "FUN_08004df4": "get_callback_ptr",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void execute_callback_if_set_08004df8(int callback_param) {\n  int callback_ptr = get_callback_ptr();\n  code* callback_func_ptr = *(code **)(callback_ptr + 0x4c);\n  if (callback_func_ptr != nullptr && *(char *)(callback_param + 0x1c) == '\\x01') {\n    (*callback_func_ptr)(callback_ptr, 0);\n  }\n  return;\n}",
            "called": [
                "FUN_08004df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df8",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "execute_callback_if_set_08004df8"
        },
        "FUN_08001510": {
            "renaming": {
                "FUN_08001510": "initialize_array_08001510",
                "param_1": "array",
                "param_2": "size",
                "param_3": "value",
                "param_4": "max_value",
                "param_5": "has_limit",
                "param_6": "is_signed",
                "param_7": "is_reversed",
                "FUN_080014ba": "initialize_array_helper",
                "*param_1": "*array",
                "PTR_PTR_FUN_0800134e_1_0800154c": "PTR_PTR_initialize_1_0800154c"
            },
            "code": "undefined4 *initialize_array_08001510(undefined4 *array, undefined4 size, undefined4 value, undefined4 max_value, undefined has_limit, undefined is_signed, undefined is_reversed){\n  array[1] = 0;\n  *array = PTR_PTR_FUN_0800134e_1_0800154c;\n  initialize_array_08001510_helper(array, 1, size, max_value, value, has_limit, is_signed, is_reversed);\n  return array;\n}",
            "called": [
                "FUN_080014ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001510",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": false,
            "current_name": "initialize_array_08001510"
        },
        "FUN_08002af8": {
            "renaming": {
                "FUN_08002af8": "validate_input_08002af8",
                "param_1": "input_ptr",
                "param_2": "input_data",
                "param_3": "input_len",
                "param_4": "input_flag",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "code": "int validate_input_08002af8(uint **input_ptr, uint *input_data, int input_len, uint *input_flag) {\n    int result;\n    uint *ptr;\n    if (*(char *)((int)input_ptr + 0x3d) == '(') {\n        if (input_data == NULL || input_len == 0 || *(char *)(input_ptr + 0xf) == '\\x01') {\n            result = 1;\n        }\n        else {\n            *(undefined *)(input_ptr + 0xf) = 1;\n            ptr = *input_ptr;\n            if ((*ptr & 1) == 0) {\n                *ptr = *ptr | 1;\n            }\n            **input_ptr = **input_ptr & 0xfffff7ff;\n            *(undefined *)((int)input_ptr + 0x3d) = 0x29;\n            *(undefined *)((int)input_ptr + 0x3e) = 0x20;\n            result = 0;\n            input_ptr[0x10] = NULL;\n            input_ptr[9] = input_data;\n            *(short *)((int)input_ptr + 0x2a) = (short)input_len;\n            input_ptr[0xb] = input_flag;\n            *(undefined2 *)(input_ptr + 10) = *(undefined2 *)((int)input_ptr + 0x2a);\n            *(undefined *)(input_ptr + 0xf) = 0;\n            (*input_ptr)[1] = (*input_ptr)[1] | 0x700;\n        }\n    }\n    else {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002af8",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": false,
            "current_name": "validate_input_08002af8"
        },
        "FUN_080028de": {
            "renaming": {
                "FUN_080028de": "process_input_080028de",
                "param_1": "input",
                "puVar1": "ptr1"
            },
            "code": "uint32_t process_input_080028de(uint32_t **input)\n{\n  uint32_t *ptr1 = input[11];\n  if ((*(char *)((int)input + 0x3d) == '\"') && ((input[20] != (uint32_t *)0x0 || (*(char *)((int)input + 0x3e) != '@')))) {\n    if ((input[20] == (uint32_t *)0x0) && (input[4] == (uint32_t *)0xc000)) {\n      **input = **input | 0x100;\n      input[20] = (uint32_t *)((int)input[20] + 1);\n    }\n    else {\n      if (*(short *)((int)input + 0x2a) == 0) {\n        **input = **input | 0x200;\n      }\n      else if (*(short *)((int)input + 0x2a) == 1) {\n        if (ptr1 == (uint32_t *)0xffff0000) {\n          **input = **input & 0xfffffbff;\n          ptr1 = *input;\n          if ((ptr1[1] & 0x800) == 0) {\n            *ptr1 = *ptr1 | 0x200;\n          }\n          else {\n            *ptr1 = *ptr1 & 0xfffffbff;\n          }\n        }\n        else if (((ptr1 == (uint32_t *)0x4) || (ptr1 == (uint32_t *)0x8)) || (input[12] == (uint32_t *)0x12)) {\n          **input = **input & 0xfffffbff;\n          **input = **input | 0x200;\n        }\n        else if (input[11] == (uint32_t *)0x2) {\n          **input = **input | 0x400;\n        }\n        else {\n          **input = **input & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)input + 0x2a) == 2) {\n        if (input[11] == (uint32_t *)0x2) {\n          **input = **input | 0x400;\n        }\n        else {\n          **input = **input | 0x800;\n          **input = **input & 0xfffffbff;\n        }\n        ptr1 = *input;\n        if ((ptr1[1] & 0x800) != 0) {\n          ptr1[1] = ptr1[1] | 0x1000;\n        }\n      }\n      else {\n        **input = **input | 0x400;\n        ptr1 = *input;\n        if ((ptr1[1] & 0x800) != 0) {\n          ptr1[1] = ptr1[1] | 0x1000;\n        }\n      }\n      input[20] = (uint32_t *)0x0;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028de",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_080028de"
        },
        "FUN_08002848": {
            "renaming": {
                "FUN_08002848": "get_status_08002848",
                "param_1": "status_data",
                "PTR_": "ptr_",
                "DAT_": "data_",
                "param_14": "data_param_14",
                "param_11": "data_param_11",
                "symbol": "data_symbol",
                "symbol_2": "data_symbol_2",
                "*param_1": "*ptr_status_data"
            },
            "code": "uint8_t get_status_08002848(int *status_data) {\n  uint8_t status = 0;\n  char symbol = *(char *)((int)status_data + 0x3e);\n  int param_14 = status_data[0x14];\n  int param_11 = status_data[0x11];\n  int *PTR_param_1 = (int *)*status_data;\n  if (symbol == '@') {\n    if (param_14 == 0) {\n      status = (uint8_t)(param_11 & 0xfe);\n    }\n    else {\n      status = (uint8_t)(param_11 & 0xffU | 1);\n    }\n  }\n  else if (status_data[4] == 0x4000) {\n    char symbol_2 = *(char *)((int)status_data + 0x3d);\n    if (symbol_2 == '!') {\n      status = (uint8_t)(param_11 & 0xfe);\n    }\n    else {\n      status = (uint8_t)(param_11 & 0xffU | 1);\n    }\n  }\n  else if (param_14 == 0) {\n    status = (uint8_t)((param_11 << 0x10) >> 0x17 & 6 | 0xf0);\n  }\n  else if (param_14 == 1) {\n    status = (uint8_t)((param_11 << 0x10) >> 0x17 & 6 | 0xf1);\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "get_status_08002848"
        },
        "FUN_08004e70": {
            "renaming": {
                "FUN_08004e70": "subtract_four_08004e70",
                "param_1": "num",
                "return": "result"
            },
            "code": "int subtract_four_08004e70(int num){\n    int result = num - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e70",
            "calling": [
                "FUN_08004ef4",
                "FUN_08004e74",
                "FUN_08004ec4"
            ],
            "imported": false,
            "current_name": "subtract_four_08004e70"
        },
        "FUN_080020f0": {
            "renaming": {
                "FUN_080020f0": "check_and_update_flags_080020f0",
                "param_1": "data_array",
                "iVar1": "current_time",
                "iVar2": "first_element"
            },
            "code": "int check_and_update_flags_080020f0(int *data_array)\n{\n    int first_element = *data_array;\n    if ((*(uint *)(first_element + 8) & 1) == 0) {\n        return 0;\n    }\n    *(uint *)(first_element + 8) = *(uint *)(first_element + 8) & 0xfffffffe;\n    int initial_time = FUN_08001cc4();\n    do {\n        if ((*(uint *)(*data_array + 8) & 1) == 0) {\n            return 0;\n        }\n        int current_time = FUN_08001cc4();\n    } while ((uint)(current_time - initial_time) < 3);\n    data_array[10] = data_array[10] | 0x10;\n    data_array[11] = data_array[11] | 1;\n    return 1;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080020f0",
            "calling": [
                "FUN_0800224c",
                "FUN_08002348",
                "FUN_0800213c",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "check_and_update_flags_080020f0"
        },
        "FUN_08006e10": {
            "renaming": {
                "FUN_08006e10": "process_data_08006e10",
                "param_1": "data_size",
                "param_2": "data",
                "local_18": "temp_size",
                "local_14": "temp_data",
                "uVar1": "flag",
                "iVar2": "result"
            },
            "code": "void process_data_08006e10(int data_size, int *data)\n{\n  ushort flag;\n  int temp_size;\n  int *temp_data;\n  \n  if (-1 < (int)((uint)*(ushort *)(data + 3) << 0x1e)) {\n    temp_size = data_size;\n    temp_data = data;\n    flag = get_flag(data_size, data, &temp_size, &temp_data);\n    int result = get_result(data_size, temp_size);\n    if (result != 0) {\n      *(undefined **)(data_size + 0x28) = PTR_LAB_08006c34_1_08006e8c;\n      *data = result;\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x80;\n      data[4] = result;\n      data[5] = temp_size;\n      if ((temp_data != (int *)0x0) &&\n         (result = check_data(data_size,(int)*(short *)((int)data + 0xe)), result != 0)) {\n        *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(data + 3) = flag | *(ushort *)(data + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(data + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfffc | 2;\n  }\n  *data = (int)data + 0x47;\n  data[4] = (int)data + 0x47;\n  data[5] = 1;\n  return;\n}",
            "called": [
                "FUN_08006288",
                "FUN_08006dc8",
                "FUN_08007028"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e10",
            "calling": [
                "FUN_080069e4"
            ],
            "imported": false,
            "current_name": "process_data_08006e10"
        },
        "FUN_08004e74": {
            "renaming": {
                "FUN_08004e74": "process_params_08004e74",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "obj",
                "FUN_08004e70": "create_object",
                "FUN_08002af8": "initialize_object",
                "FUN_08002b84": "set_object"
            },
            "code": "void process_params_08004e74(int param1, int param2, int param3, undefined4 param4) {\n  int obj = create_object();\n  if (param3 == *(int *)(param1 + 0xc)) {\n    if (param2 == 0) {\n      *(undefined *)(obj + 0x88) = 0;\n      *(undefined *)(obj + 0x5c) = 0;\n      if (*(code **)(obj + 100) != (code *)0x0) {\n        (**(code **)(obj + 100))();\n      }\n      initialize_object(param1,obj + 0x68,*(undefined *)(obj + 0x88),8);\n      return;\n    }\n    *(undefined *)(obj + 0x5c) = 1;\n    set_object(param1,obj + 0x68,0x20,8,param4);\n  }\n  return;\n}",
            "called": [
                "FUN_08004e70",
                "FUN_08002af8",
                "FUN_08002b84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "FUN_08002cf2"
            ],
            "imported": false,
            "current_name": "process_params_08004e74"
        },
        "FUN_08004c30": {
            "renaming": {
                "FUN_08004c30": "process_data_08004c30",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "flag",
                "param_4": "data_info",
                "FUN_0800281e": "process_data_helper"
            },
            "code": "void process_data_08004c30(undefined4 data_ptr, undefined2 data_size, int flag, undefined4 data_info) {\n  if (flag == 0) {\n    process_data_08004c30_helper(data_ptr, data_size, 0, data_info, data_info);\n    return;\n  }\n  process_data_08004c30_helper(data_ptr, data_size, 1, data_info, data_info);\n  return;\n}",
            "called": [
                "FUN_0800281e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c30",
            "calling": [
                "FUN_08005848"
            ],
            "imported": false,
            "current_name": "process_data_08004c30"
        },
        "FUN_08006f38": {
            "renaming": {
                "FUN_08006f38": "update_value_08006f38",
                "param_1": "base_address",
                "param_2": "offset_address",
                "iVar1": "result",
                "uVar2": "new_value",
                "bVar3": "is_positive"
            },
            "code": "void update_value_08006f38(uint32_t base_address, int16_t offset_address) {\n  int32_t result = get_result(base_address, *(int16_t *)(offset_address + 0xe));\n  bool is_positive = result >= 0;\n  uint32_t new_value;\n  if (is_positive) {\n    new_value = *(uint32_t *)(offset_address + 0x54) + result;\n  }\n  else {\n    new_value = *(uint16_t *)(offset_address + 0xc) & 0xffffefff;\n  }\n  if (is_positive) {\n    *(uint32_t *)(offset_address + 0x54) = new_value;\n  }\n  else {\n    *(int16_t *)(offset_address + 0xc) = (int16_t)new_value;\n  }\n  return;\n}",
            "called": [
                "FUN_0800706c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f38",
            "calling": [],
            "imported": false,
            "current_name": "update_value_08006f38"
        },
        "FUN_08004cce": {
            "renaming": {
                "FUN_08004cce": "get_result_08004cce",
                "param_1": "input",
                "uVar1": "result",
                "FUN_08004cb2": "calculate_result"
            },
            "code": "int get_result_08004cce(int input) {\n  if (input == -1) {\n    return -1;\n  }\n  int result = calculate_result();\n  return result;\n}",
            "called": [
                "FUN_08004cb2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cce",
            "calling": [
                "FUN_08004b3c",
                "FUN_08004948",
                "FUN_0800492c",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "get_result_08004cce"
        },
        "FUN_08006eac": {
            "renaming": {
                "FUN_08006eac": "do_nothing_08006eac"
            },
            "code": "\nvoid do_nothing_08006eac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eac",
            "calling": [
                "FUN_08006288",
                "FUN_080061f0"
            ],
            "imported": false,
            "current_name": "do_nothing_08006eac"
        },
        "FUN_08006eae": {
            "renaming": {
                "FUN_08006eae": "do_nothing_08006eae"
            },
            "code": "\nvoid do_nothing_08006eae(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eae",
            "calling": [
                "FUN_08006288",
                "FUN_080061f0"
            ],
            "imported": false,
            "current_name": "do_nothing_08006eae"
        },
        "FUN_08005f5c": {
            "renaming": {
                "FUN_08005f5c": "do_nothing_08005f5c"
            },
            "code": "\nvoid do_nothing_08005f5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5c",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "do_nothing_08005f5c"
        },
        "FUN_08003ad4": {
            "renaming": {
                "FUN_08003ad4": "process_data_08003ad4",
                "param_1": "data",
                "param_2": "data_length",
                "puVar1": "memory_location",
                "iVar2": "time_start",
                "iVar3": "time_current",
                "uVar4": "flag",
                "DAT_08003c34": "original_memory_location",
                "DAT_08003c38": "flags",
                "PTR_DAT_08003c40": "original_pointer_location",
                "PTR_DAT_08003c3c": "original_shift_location"
            },
            "code": "int process_data_08003ad4(uint *data, uint data_length)\n{\n  uint *memory_location;\n  int time_start;\n  int time_current;\n  uint flag;\n  \n  memory_location = DAT_08003c34;\n  if (((*DAT_08003c34 & 7) < data_length) && (*DAT_08003c34 = *DAT_08003c34 & 0xfffffff8 | data_length, data_length != (*memory_location & 7))) {\n    return 1;\n  }\n  if ((*data & 2) != 0) {\n    DAT_08003c38[1] = DAT_08003c38[1] & 0xffffff0f | data[2];\n  }\n  if ((*data & 1) != 0) {\n    flag = data[1];\n    if (flag == 1) {\n      if ((*DAT_08003c38 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((flag != 2) && ((*DAT_08003c38 & 2) == 0)) {\n      return 1;\n    }\n    DAT_08003c38[1] = flag | DAT_08003c38[1] & 0xfffffffc;\n    time_start = get_time();\n    if (data[1] == 1) {\n      while ((DAT_08003c38[1] & 0xc) != 4) {\n        time_current = get_time();\n        if (5000 < (uint)(time_current - time_start)) {\n          return 3;\n        }\n      }\n    }\n    else if (data[1] == 2) {\n      while ((DAT_08003c38[1] & 0xc) != 8) {\n        time_current = get_time();\n        if (5000 < (uint)(time_current - time_start)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((DAT_08003c38[1] & 0xc) != 0) {\n        time_current = get_time();\n        if (5000 < (uint)(time_current - time_start)) {\n          return 3;\n        }\n      }\n    }\n  }\n  memory_location = DAT_08003c34;\n  if ((data_length < (*DAT_08003c34 & 7)) && (*DAT_08003c34 = *DAT_08003c34 & 0xfffffff8 | data_length, data_length != (*memory_location & 7))) {\n    return 1;\n  }\n  if ((*data & 4) != 0) {\n    DAT_08003c38[1] = DAT_08003c38[1] & 0xfffff8ff | data[3];\n  }\n  if ((*data & 8) != 0) {\n    DAT_08003c38[1] = DAT_08003c38[1] & 0xffffc7ff | data[4] << 3;\n  }\n  flag = process_data_08003ad4_2();\n  *(uint *)PTR_DAT_08003c40 = flag >> PTR_DAT_08003c3c[(DAT_08003c38[1] << 0x18) >> 0x1c];\n  process_data_08003ad4_3(0xf);\n  return 0;\n}",
            "called": [
                "FUN_08003afa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ad4",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "process_data_08003ad4"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "set_bit_08004110",
                "param_1": "data",
                "param_2": "bit_position",
                "param_3": "bit_value",
                "*(uint *)(param_1 + 0x20)": "data_ptr",
                "*(uint *)(param_1 + 0x20) & ~(4 << (param_2 & 0xff))": "bit_mask",
                "param_3 << (param_2 & 0xff)": "bit_value << (bit_position & 0xff)"
            },
            "code": "void set_bit_08004110(uint32_t *data, uint8_t bit_position, uint32_t bit_value) {\n\tuint32_t *data_ptr = data + 0x20;\n\tuint32_t bit_mask = ~(4 << (bit_position & 0xff));\n\t*data_ptr = (*data_ptr & bit_mask) | (bit_value << (bit_position & 0xff));\n\treturn;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "FUN_0800412c"
            ],
            "imported": false,
            "current_name": "set_bit_08004110"
        },
        "FUN_08004ce2": {
            "renaming": {
                "FUN_08004ce2": "search_for_value_08004ce2",
                "param_1": "value_to_search",
                "param_2": "array_of_values",
                "*param_2": "*array_of_values"
            },
            "code": "int search_for_value_08004ce2(int value_to_search, char *array_of_values)\n{\n    if (value_to_search == -1) {\n        return 0;\n    }\n    while(*array_of_values != -1) {\n        if (value_to_search == *array_of_values) {\n            return 1;\n        }\n        array_of_values += 12;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ce2",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "search_for_value_08004ce2"
        },
        "FUN_08005568": {
            "renaming": {
                "FUN_08005568": "update_data_08005568",
                "param_1": "data_address",
                "param_2": "new_data",
                "bVar1": "index",
                "PTR_DAT_080055b0": "data_array",
                "PTR_DAT_080055b4": "address_array",
                "FUN_08002494": "update_char",
                "FUN_080024f8": "update_char",
                "FUN_0800455a": "update_data",
                "PTR_DAT_080055b8": "data_index_array"
            },
            "code": "void update_data_08005568(int data_address, int new_data) {\n    if (data_address != 0) {\n        byte index = *(byte *)(data_address + 0x44);\n        *(undefined4 *)(PTR_DAT_080055b0 + (uint)index * 4) = new_data;\n        *(int *)(PTR_DAT_080055b4 + (uint)index * 4) = data_address;\n        int char_index = *(char *)(data_address + 0x5a);\n        update_char(char_index, 0, 2);\n        update_char(char_index);\n        int PTR_DAT_080055b0_index = *(undefined4 *)(PTR_DAT_080055b8 + (uint)index * 4);\n        int address_offset = *(int *)(data_address + 100) + (uint)*(ushort *)(data_address + 0x6a);\n        update_data_08005568(PTR_DAT_080055b0_index, address_offset, 1);\n    }\n}",
            "called": [
                "FUN_0800455a",
                "FUN_08002494",
                "FUN_080024f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005568",
            "calling": [],
            "imported": false,
            "current_name": "update_data_08005568"
        },
        "FUN_08004478": {
            "renaming": {
                "FUN_08004478": "process_data_08004478",
                "param_1": "data_ptr",
                "param_2": "data_buffer",
                "param_3": "buffer_size",
                "param_4": "param_4",
                "uVar1": "data",
                "iVar2": "status"
            },
            "code": "int process_data_08004478(int *data_ptr, ushort *data_buffer, int buffer_size, undefined4 param_4)\n{\n  undefined4 uVar1;\n  int status;\n  if (*(char *)((int)data_ptr + 0x39) == ' ') {\n    if (data_buffer == (ushort *)0x0 || buffer_size == 0 || *(char *)(data_ptr + 0xe) == '\\x01') {\n      status = 2;\n    }\n    else {\n      *(undefined *)(data_ptr + 0xe) = 1;\n      data_ptr[0xf] = 0;\n      *(undefined *)((int)data_ptr + 0x39) = 0x21;\n      uVar1 = get_data(param_4);\n      *(short *)(data_ptr + 9) = (short)buffer_size;\n      *(short *)((int)data_ptr + 0x26) = (short)buffer_size;\n      while (*(short *)((int)data_ptr + 0x26) != 0) {\n        *(short *)((int)data_ptr + 0x26) = *(short *)((int)data_ptr + 0x26) + -1;\n        if (data_ptr[2] == 0x1000) {\n          status = process_data_08004478_chunk(data_ptr, 0x80, 0, uVar1, param_4);\n          if (status != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = *data_buffer & 0x1ff;\n          if (data_ptr[4] == 0) {\n            data_buffer = data_buffer + 1;\n          }\n          else {\n            data_buffer = (ushort *)((int)data_buffer + 1);\n          }\n        }\n        else {\n          status = process_data_08004478_chunk(data_ptr, 0x80, 0, uVar1, param_4);\n          if (status != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = (uint)*(byte *)data_buffer;\n          data_buffer = (ushort *)((int)data_buffer + 1);\n        }\n      }\n      status = process_data_08004478_chunk(data_ptr, 0x40, 0, uVar1, param_4);\n      if (status == 0) {\n        *(undefined *)((int)data_ptr + 0x39) = 0x20;\n        *(undefined *)(data_ptr + 0xe) = 0;\n      }\n      else {\n        status = 3;\n      }\n    }\n  }\n  else {\n    status = 2;\n  }\n  return status;\n}",
            "called": [
                "FUN_080043b4",
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004478",
            "calling": [
                "FUN_080053d4"
            ],
            "imported": false,
            "current_name": "process_data_08004478"
        },
        "FUN_08005f5e": {
            "renaming": {
                "FUN_08005f5e": "initialize_game_08005f5e",
                "FUN_08002470": "initialize_players",
                "FUN_08001c32": "initialize_game_board"
            },
            "code": "void initialize_game_08005f5e(void)\n{\n  initialize_players(3);\n  initialize_game_08005f5e_board();\n  return;\n}",
            "called": [
                "FUN_08002470",
                "FUN_08001c32"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5e",
            "calling": [
                "FUN_08006198"
            ],
            "imported": false,
            "current_name": "initialize_game_08005f5e"
        },
        "FUN_08005cb6": {
            "renaming": {
                "FUN_08005cb6": "execute_function_pointer_08005cb6",
                "param_1": "function_ptr"
            },
            "code": "void execute_function_pointer_08005cb6(void* function_ptr) {\n  (**(void (**)(void))function_ptr)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cb6",
            "calling": [
                "FUN_08005d42",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "execute_function_pointer_08005cb6"
        },
        "FUN_08003c70": {
            "renaming": {
                "FUN_08003c70": "calculate_shifted_result_08003c70",
                "uVar1": "result",
                "FUN_08003c44": "call_function",
                "PTR_DAT_08003c8c": "shift_array",
                "DAT_08003c88": "data_pointer"
            },
            "code": "uint calculate_shifted_result_08003c70(void)\n{\n  uint result = call_function();\n  uint index = *(int *)(DAT_08003c88 + 4) << 0x12;\n  uint shift_amount = index >> 0x1d;\n  uint shifted_result = result >> shift_amount;\n  return shifted_result;\n}",
            "called": [
                "FUN_08003c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c70",
            "calling": [
                "FUN_08004204",
                "FUN_08003da4"
            ],
            "imported": false,
            "current_name": "calculate_shifted_result_08003c70"
        },
        "FUN_080053d4": {
            "renaming": {
                "FUN_080053d4": "find_value_in_array_080053d4",
                "param_1": "value",
                "param_2": "array_size",
                "cVar1": "character",
                "iVar2": "start_time",
                "iVar3": "index",
                "uVar4": "i",
                "PTR_DAT_0800547c": "data_section",
                "FUN_08001cc4": "get_current_time",
                "PTR_DAT_08005480": "array_of_characters",
                "FUN_08004c78": "find_index_of_character_in_string",
                "PTR_DAT_08005484": "array_of_integers",
                "PTR_DAT_08005488": "array_of_bytes",
                "byte": "unsigned_char"
            },
            "code": "uint find_value_in_array_080053d4(uint value, uint array_size)\n{\n  int start_time = get_current_time();\n  char character = second_character_in_PTR_DAT_0800547c;\n  int index = find_index_of_character_in_string((int)character, PTR_DAT_08005480);\n  if (index == 0) {\n    return 0;\n  }\n  uint i = 0;\n  while ((i < 5 && ((*(int *)(PTR_DAT_08005484 + i * 4) == 0 || (index = find_index_of_character_in_string((int)character, PTR_DAT_08005480), **(int **)(PTR_DAT_08005484 + i * 4) != index))))) {\n    i = i + 1 & 0xff;\n  }\n  if (4 < i) {\n    if ((4 < (byte)PTR_DAT_08005488[0x44]) && (print_error(), 4 < (byte)PTR_DAT_08005488[0x44])) {\n      return 0;\n    }\n    i = (uint)(byte)PTR_DAT_08005488[0x44];\n  }\n  do {\n    index = find_index_of_character_in_string(*(uint *)(PTR_DAT_08005484 + i * 4), value, array_size, 1000);\n    if (index == 0) {\n      return array_size;\n    }\n    start_time = get_current_time();\n  } while ((uint)(get_current_time() - start_time) < 1000);\n  return 0;\n}",
            "called": [
                "FUN_08005384",
                "FUN_08004478",
                "FUN_08001cc4",
                "FUN_08004c78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053d4",
            "calling": [
                "FUN_08005730"
            ],
            "imported": false,
            "current_name": "find_value_in_array_080053d4"
        },
        "FUN_08002b84": {
            "renaming": {
                "FUN_08002b84": "validate_input_08002b84",
                "param_1": "ptr_input",
                "param_2": "ptr_input_size",
                "param_3": "input_type",
                "param_4": "ptr_input_data",
                "uVar1": "result",
                "puVar2": "ptr_flags"
            },
            "code": "int validate_input_08002b84(uint **ptr_input, uint *ptr_input_size, int input_type, uint *ptr_input_data){\n    int result = 0;\n    uint *ptr_flags = *ptr_input;\n    char flag = *(char *)((int)ptr_input + 0x3d);\n    \n    if (flag == '(') {\n        if (ptr_input_size == NULL || input_type == 0) {\n            result = 1;\n        }\n        else if (*(char *)(ptr_input + 0xf) == '\\x01') {\n            result = 2;\n        }\n        else {\n            *(undefined *)(ptr_input + 0xf) = 1;\n            if ((*ptr_flags & 1) == 0) {\n                *ptr_flags = *ptr_flags | 1;\n            }\n            **ptr_input = **ptr_input & 0xfffff7ff;\n            *(undefined *)((int)ptr_input + 0x3d) = '*';\n            *(undefined *)((int)ptr_input + 0x3e) = ' ';\n            ptr_input[0x10] = NULL;\n            ptr_input[9] = ptr_input_size;\n            *(short *)((int)ptr_input + 0x2a) = (short)input_type;\n            ptr_input[0xb] = ptr_input_data;\n            *(undefined2 *)(ptr_input + 10) = *(undefined2 *)((int)ptr_input + 0x2a);\n            *(undefined *)(ptr_input + 0xf) = 0;\n            (*ptr_input)[1] = (*ptr_input)[1] | 0x700;\n        }\n    }\n    else {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b84",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": false,
            "current_name": "validate_input_08002b84"
        },
        "FUN_08004c48": {
            "renaming": {
                "FUN_08004c48": "call_function_with_params_08004c48",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "FUN_08002810": "call_function"
            },
            "code": "void call_function_with_params_08004c48(undefined4 param_1, undefined2 param_2, undefined4 param_3, undefined4 param_4)\n{\n  call_function(param_1, param_2, param_3, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_08002810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c48",
            "calling": [
                "FUN_08005890"
            ],
            "imported": false,
            "current_name": "call_function_with_params_08004c48"
        },
        "FUN_0800042c": {
            "renaming": {
                "FUN_0800042c": "calculate_number_of_bits_0800042c",
                "param_1": "num",
                "uVar1": "shifted_num1",
                "uVar2": "abs_num",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeroes",
                "uVar5": "shift_amount2",
                "uVar6": "is_negative",
                "in_r12": "in_r12",
                "bVar7": "is_negative_check",
                "bVar8": "is_zero_check",
                "bVar9": "shift_amount_check"
            },
            "code": "ulonglong calculate_number_of_bits_0800042c(uint num) {\n  int count = 0;\n  while (num >> count != 0) {\n    count++;\n  }\n  return 32 - count;\n}\n\nulonglong calculate_number_of_bits_0800042c(uint num) {\n  if (num == 0) {\n    return 0;\n  }\n  uint is_negative = num & 0x80000000;\n  uint abs_num = num;\n  if ((int)is_negative < 0) {\n    abs_num = -num;\n  }\n  uint shift_amount = 0;\n  int leading_zeroes = calculate_number_of_bits_0800042c(abs_num);\n  shift_amount = leading_zeroes + 0x15;\n  if (shift_amount < 0x20) {\n    shift_amount = shift_amount - 0xb;\n    if (shift_amount < 0) {\n      shift_amount = 0;\n    }\n    uint shifted_num = abs_num << (shift_amount & 0xff);\n    uint shifted_num2 = abs_num >> (0xcU - leading_zeroes + shift_amount & 0xff);\n    return ((ulonglong)shifted_num2 << 32) | shifted_num;\n  }\n  if (shift_amount >= 0x433) {\n    return ((ulonglong)num << 32) | 0;\n  }\n  uint in_r12 = ~(0x432 - shift_amount);\n  if (in_r12 > 0x1e) {\n    uint shifted_num = abs_num >> (in_r12 - 0x1f & 0xff);\n    return ((ulonglong)num << 32) | (shifted_num & 0x80000000ffffffff);\n  }\n  int shift_amount2 = in_r12 - 0x13;\n  if (shift_amount2 == 0 || (shift_amount2 < 0) != (shift_amount - 0x1f < 0xc)) {\n    in_r12++;\n    uint shifted_num = abs_num >> (in_r12 & 0xff) | abs_num << (0x20 - in_r12 & 0xff);\n    uint shifted_num2 = num | shifted_num >> (in_r12 & 0xff);\n    return ((ulonglong)shifted_num2 << 32) | shifted_num;\n  }\n  uint shifted_num = abs_num >> (0x20 - (0xcU - shift_amount2) & 0xff) | abs_num << (0xcU - shift_amount2 & 0xff);\n  uint shifted_num2 = (num | shifted_num << (0x20 - shift_amount2 & 0xff)) & 0x80000000ffffffff;\n  return ((ulonglong)shifted_num2 << 32) | shifted_num;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800042c",
            "calling": [
                "FUN_08000cd0",
                "FUN_08001918",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "calculate_number_of_bits_0800042c"
        },
        "FUN_08005f6c": {
            "renaming": {
                "FUN_08005f6c": "execute_tasks_08005f6c",
                "FUN_08000bcc": "initialize_system",
                "FUN_08000cd0": "perform_operation",
                "FUN_08005a18": "perform_cleanup",
                "DAT_08005f88": "is_system_idle",
                "do_nothing_08005f5c": "do_nothing"
            },
            "code": "void execute_tasks_08005f6c(void)\n{\n  do_nothing();\n  initialize_system();\n  do {\n    do {\n      perform_operation();\n    } while (DAT_08005f88 == 0);\n    perform_cleanup();\n  } while( true );\n}",
            "called": [
                "FUN_08005f5c",
                "FUN_08005a18",
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f6c",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": false,
            "current_name": "execute_tasks_08005f6c"
        },
        "FUN_08005cc0": {
            "renaming": {
                "FUN_08005cc0": "execute_function_pointer_08005cc0",
                "param_1": "function_pointer",
                "param_2": "data_pointer",
                "param_3": "arg1",
                "param_4": "arg3",
                "PTR_DAT_08005cd0": "arg2"
            },
            "code": "void execute_function_pointer_08005cc0(int *function_pointer, int *data_pointer, int arg1, void *PTR_DAT_08005cd0, int arg3) {\n  (**(void (***)(int *, int *, int, void *, int))(function_pointer + 4))(function_pointer, data_pointer, arg1, PTR_DAT_08005cd0, arg3);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cc0",
            "calling": [
                "FUN_08005f40",
                "FUN_08005cd4"
            ],
            "imported": false,
            "current_name": "execute_function_pointer_08005cc0"
        },
        "FUN_0800706c": {
            "renaming": {
                "FUN_0800706c": "process_data_0800706c",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "data_ptr",
                "iVar2": "status"
            },
            "code": "void process_data_0800706c(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3) {\n    undefined *data_ptr;\n    int status;\n\n    data_ptr = PTR_DAT_0800708c;\n    *(undefined4 *)PTR_DAT_0800708c = 0;\n    status = process(arg1, arg2, arg3, arg3, arg3);\n    if ((status == -1) && (*(int *)data_ptr != 0)) {\n        *result = *(int *)data_ptr;\n    }\n    return;\n}",
            "called": [
                "FUN_0800572c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800706c",
            "calling": [
                "FUN_08006f38"
            ],
            "imported": false,
            "current_name": "process_data_0800706c"
        },
        "FUN_08002624": {
            "renaming": {
                "FUN_08002624": "update_bits_08002624",
                "param_1": "bit_array",
                "param_2": "update_array",
                "puVar1": "bit_ptr",
                "uVar2": "update_val",
                "uVar3": "bit_mask",
                "uVar4": "bit_val",
                "uVar5": "bit_offset",
                "uVar6": "update_type",
                "uVar7": "update_offset",
                "iVar8": "i",
                "uVar9": "update_val",
                "iVar10": "update_offset"
            },
            "code": "void update_bits_08002624(uint *bit_array, uint *update_array)\n{\n  uint *bit_ptr;\n  uint update_val;\n  uint bit_mask;\n  uint bit_offset;\n  uint bit_val;\n  uint update_type;\n  uint update_offset;\n  int i;\n  \n  bit_offset = 0;\n  for (i = 0; i <= 15; i++) {\n    if (bit_offset > 15) {\n      return;\n    }\n    bit_mask = 1 << bit_offset;\n    bit_val = *update_array & bit_mask;\n    if (bit_mask == bit_val) {\n      update_type = update_array[1];\n      if (update_type == 0x12) {\n        update_offset = update_array[3] + 0xc;\n      }\n      else if (update_type < 0x13) {\n        if (update_type == 2) {\n          update_offset = update_array[3] + 8;\n        }\n        else if (update_type < 3) {\n          if (update_type == 0) goto LAB_08002776;\n          if (update_type == 1) {\n            update_offset = update_array[3];\n          }\n        }\n        else if (update_type == 3) {\n          update_offset = 0;\n        }\n        else if (update_type == 0x11) {\n          update_offset = update_array[3] + 4;\n        }\n      }\n      else {\n        if (update_type != PTR_DAT_08002804) {\n          if (PTR_DAT_08002804 < update_type) {\n            if (update_type == PTR_DAT_08002808) goto LAB_08002776;\n            update_val = PTR_DAT_08002808 + 0x10000;\n            bit_val = PTR_DAT_08002808;\n          }\n          else {\n            update_val = PTR_DAT_08002804 - 0x100000;\n            bit_val = PTR_DAT_08002804;\n          }\n          if ((update_type != update_val) && (update_type != bit_val - 0xf0000)) goto LAB_0800263a;\n        }\n      }\n      if (update_array[2] == 0) {\n        update_offset = 4;\n      }\n      else if (update_array[2] == 1) {\n        bit_array[4] = bit_mask;\n        update_offset = 8;\n      }\n      else {\n        bit_array[5] = bit_mask;\n        update_offset = 8;\n      }\n    }\n    bit_offset = i;\n    bit_ptr = bit_array;\n    if (0xff < bit_val) {\n      bit_offset = i - 8;\n      bit_ptr = bit_array + 1;\n    }\n    *bit_ptr = *bit_ptr & ~(0xf << (bit_offset << 2)) | update_offset << (bit_offset << 2);\n    if ((update_array[1] & 0x10000000) != 0) {\n      *(uint *)(PTR_DAT_080027f8 + 0x18) = *(uint *)(PTR_DAT_080027f8 + 0x18) | 1;\n      update_val = (i & 3) << 2;\n      if (bit_ptr == PTR_DAT_0800280c) {\n        update_offset = 0;\n      }\n      else if (bit_ptr == PTR_DAT_0800280c + 0x100) {\n        update_offset = 1;\n      }\n      else if (bit_ptr == PTR_DAT_0800280c + 0x200) {\n        update_offset = 2;\n      }\n      else if (bit_ptr == PTR_DAT_0800280c + 0x300) {\n        update_offset = 3;\n      }\n      else {\n        update_offset = 4;\n      }\n      *(uint *)(PTR_DAT_080027fc + ((i >> 2) + 2) * 4) =\n           *(uint *)(PTR_DAT_080027fc + ((i >> 2) + 2) * 4) & ~(0xf << update_val) | update_offset << update_val;\n      if ((update_array[1] & 0x10000) == 0) {\n        *PTR_DAT_08002800 = *PTR_DAT_08002800 & ~bit_mask;\n      }\n      else {\n        *PTR_DAT_08002800 = *PTR_DAT_08002800 | bit_mask;\n      }\n      if ((update_array[1] & 0x20000) == 0) {\n        PTR_DAT_08002800[1] = PTR_DAT_08002800[1] & ~bit_mask;\n      }\n      else {\n        PTR_DAT_08002800[1] = PTR_DAT_08002800[1] | bit_mask;\n      }\n      if ((update_array[1] & 0x100000) == 0) {\n        PTR_DAT_08002800[2] = PTR_DAT_08002800[2] & ~bit_mask;\n      }\n      else {\n        PTR_DAT_08002800[2] = PTR_DAT_08002800[2] | bit_mask;\n      }\n      if ((update_array[1] & 0x200000) == 0) {\n        PTR_DAT_08002800[3] = PTR_DAT_08002800[3] & ~bit_mask;\n      }\n      else {\n        PTR_DAT_08002800[3] = bit_mask | PTR_DAT_08002800[3];\n      }\n    }\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002624",
            "calling": [
                "FUN_08004974",
                "FUN_08004bb0",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "update_bits_08002624"
        },
        "FUN_080040b0": {
            "renaming": {
                "FUN_080040b0": "clear_flags_080040b0",
                "param_1": "memory",
                "param_2": "flag",
                "puVar1": "memory_ptr",
                "DAT_0800410c": "PTR_FLAG"
            },
            "code": "int clear_flags_080040b0(uint **memory, int flag) {\\n\\\n    uint *memory_ptr = *memory;\\n\\\n    if (((memory_ptr == DAT_0800410c) && ((memory_ptr[8] & 0x1111) == 0)) && ((memory_ptr[8] & 0x444) == 0)) {\\n\\\n        memory_ptr[0x11] = memory_ptr[0x11] & 0xffff7fff;\\n\\\n    }\\n\\\n    memory_ptr = *memory;\\n\\\n    if (((memory_ptr[8] & 0x1111) == 0) && ((memory_ptr[8] & 0x444) == 0)) {\\n\\\n        *memory_ptr = *memory_ptr & 0xfffffffe;\\n\\\n    }\\n\\\n    *(undefined *)((int)memory + 0x3d) = 1;\\n\\\n    return 0;\\n\\\n}",
            "called": [
                "FUN_08004092"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040b0",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "clear_flags_080040b0"
        },
        "FUN_08005d42": {
            "renaming": {
                "FUN_08005d42": "calculate_result_08005d42",
                "param_1": "function_pointer",
                "param_2": "input_value",
                "param_3": "base",
                "iVar1": "result",
                "iVar2": "negative_sign",
                "FUN_08005ce8": "calculate_with_base",
                "FUN_08005cb6": "add_negative_sign"
            },
            "code": "int calculate_result_08005d42(undefined4 *function_pointer, uint input_value, uint base) {\n  int result;\n  int negative_sign = 0x2d;\n  if (base == 0) {\n    result = (**(code **)*function_pointer)(function_pointer, input_value & 0xff);\n    return result;\n  }\n  if (base != 10) {\n    result = calculate_with_base(function_pointer, input_value, base & 0xff);\n    return result;\n  }\n  if (-1 < (int)input_value) {\n    result = calculate_with_base(function_pointer, input_value, 10);\n    return result;\n  }\n  result = add_negative_sign(function_pointer, negative_sign);\n  int absolute_value = calculate_with_base(function_pointer, -input_value, 10);\n  return absolute_value + result;\n}",
            "called": [
                "FUN_08005cb6",
                "FUN_08005ce8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d42",
            "calling": [
                "FUN_08005d82"
            ],
            "imported": false,
            "current_name": "calculate_result_08005d42"
        },
        "FUN_08004b34": {
            "renaming": {
                "FUN_08004b34": "execute_application_08004b34",
                "FUN_08004d90": "initialize_application"
            },
            "code": "void execute_application_08004b34(void)\n{\n  initialize_application();\n  return;\n}",
            "called": [
                "FUN_08004d90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b34",
            "calling": [
                "FUN_08003ed8"
            ],
            "imported": false,
            "current_name": "execute_application_08004b34"
        },
        "FUN_08004c52": {
            "renaming": {
                "FUN_08004c52": "run_application_08004c52",
                "FUN_08001c88": "initialize_graphics",
                "FUN_08001b48": "load_data"
            },
            "code": "void run_application_08004c52(void)\n{\n  initialize_graphics();\n  load_data();\n  return;\n}",
            "called": [
                "FUN_08001c88",
                "FUN_08001b48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c52",
            "calling": [
                "FUN_08001c32"
            ],
            "imported": false,
            "current_name": "run_application_08004c52"
        },
        "FUN_080013a4": {
            "renaming": {
                "FUN_080013a4": "initialize_device_080013a4",
                "param_1": "device_address",
                "param_2": "buffer_address",
                "param_3": "buffer_size",
                "param_4": "device_type",
                "iVar1": "i",
                "iVar2": "num_additional_registers",
                "has_additional_registers": "has_additional_registers"
            },
            "code": "void initialize_device_080013a4(int device_address, int buffer_address, int buffer_size, int device_type){\n  int i;\n  int num_additional_registers;\n  bool has_additional_registers;\n  \n  if (buffer_size > 1) {\n    *(byte *)(device_address + 0x13) = *(byte *)(device_address + 0x13) | 8;\n  }\n  *(char *)(device_address + 0x17) = (char)buffer_size;\n  initialize_buffer(device_address,0,0x40,buffer_address,buffer_address + 0x40);\n  if ((device_type != 0) && (buffer_size == 1)) {\n    *(byte *)(device_address + 0x13) = *(byte *)(device_address + 0x13) | 4;\n  }\n  enable_device(*(undefined *)(device_address + 8),1);\n  if (*(char *)(device_address + 9) != -1) {\n    enable_device(*(char *)(device_address + 9),1);\n  }\n  enable_device(*(undefined *)(device_address + 10),1);\n  num_additional_registers = 0;\n  has_additional_registers = (*(byte *)(device_address + 0x13) & 0x10) != 0;\n  while( true ) {\n    if (!has_additional_registers) {\n      i = 4;\n    }\n    else {\n      i = 8;\n    }\n    if (i <= num_additional_registers) break;\n    enable_device(*(undefined *)(device_address + num_additional_registers + 0xb),1);\n    num_additional_registers = num_additional_registers + 1;\n  }\n  disable_device(*(undefined *)(device_address + 8),0);\n  disable_device(*(undefined *)(device_address + 10),0);\n  if (*(char *)(device_address + 9) != -1) {\n    disable_device(*(char *)(device_address + 9),0);\n  }\n  if (!has_additional_registers) {\n    initialize_device_080013a4(device_address,3);\n    initialize_device_080013a4(device_address,3);\n    initialize_device_080013a4(device_address,3);\n    initialize_device_080013a4(device_address,2);\n  }\n  else {\n    initialize_device_080013a4_with_type(device_address,*(byte *)(device_address + 0x13) | 0x20,0);\n    initialize_device_080013a4_with_type(device_address,*(byte *)(device_address + 0x13) | 0x20,0);\n    initialize_device_080013a4_with_type(device_address,*(byte *)(device_address + 0x13) | 0x20,0);\n  }\n  initialize_device_080013a4_with_type(device_address,*(byte *)(device_address + 0x13) | 0x20,0);\n  *(undefined *)(device_address + 0x14) = 4;\n  finalize_device_initialization(device_address);\n  finalize_buffer_initialization(device_address);\n  *(undefined *)(device_address + 0x15) = 2;\n  initialize_device_080013a4_with_type(device_address,6,0);\n  return;\n}",
            "called": [
                "FUN_0800138e",
                "FUN_080012c0",
                "FUN_08001294",
                "FUN_080057b4",
                "FUN_08001310",
                "FUN_0800135a",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080013a4",
            "calling": [
                "FUN_080014ba",
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "initialize_device_080013a4"
        },
        "FUN_08006d14": {
            "renaming": {
                "FUN_08006d14": "find_and_initialize_08006d14",
                "param_1": "error_code_ptr",
                "param_2": "search_value",
                "param_3": "initialize_value",
                "param_4": "size",
                "piVar1": "previous_ptr",
                "piVar2": "current_ptr",
                "iVar3": "list_head_ptr",
                "ppiVar4": "list_head_ptr_ptr"
            },
            "code": "int *find_and_initialize_08006d14(int *error_code_ptr, int search_value, int initialize_value, int size)\n{\n  int *current_ptr;\n  int *previous_ptr;\n  int *list_head_ptr;\n  int **list_head_ptr_ptr;\n  \n  list_head_ptr = *(int **)PTR_PTR_DAT_08006d88;\n  if (*(int *)(list_head_ptr + 0x18) == 0) {\n    initialize_list(list_head_ptr);\n  }\n  list_head_ptr_ptr = (int **)(list_head_ptr + 0x48);\n  do {\n    current_ptr = list_head_ptr_ptr[2];\n    previous_ptr = list_head_ptr_ptr[1];\n    while (previous_ptr = (int *)((int)previous_ptr + -1), -1 < (int)previous_ptr) {\n      if (*(short *)(current_ptr + 3) == 0) {\n        *(undefined2 *)((int)current_ptr + 0xe) = 0xffff;\n        current_ptr[0x19] = 0;\n        *(undefined2 *)(current_ptr + 3) = 1;\n        *current_ptr = 0;\n        current_ptr[2] = 0;\n        current_ptr[1] = 0;\n        current_ptr[4] = 0;\n        current_ptr[5] = 0;\n        current_ptr[6] = 0;\n        initialize_memory(current_ptr + 0x17, 0, 8, 1, size);\n        current_ptr[0xd] = 0;\n        current_ptr[0xe] = 0;\n        current_ptr[0x12] = 0;\n        current_ptr[0x13] = 0;\n        return current_ptr;\n      }\n      current_ptr = current_ptr + 0x1a;\n    }\n    if (*list_head_ptr_ptr == (int *)0x0) {\n      previous_ptr = (int *)allocate_memory(error_code_ptr, 4);\n      *list_head_ptr_ptr = previous_ptr;\n      if (previous_ptr == (int *)0x0) {\n        *error_code_ptr = 0xc;\n        return (int *)0x0;\n      }\n    }\n    list_head_ptr_ptr = (int **)*list_head_ptr_ptr;\n  } while(true);\n}\n",
            "called": [
                "FUN_08006c88",
                "FUN_08006cb4",
                "FUN_080061e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d14",
            "calling": [
                "FUN_08006cb4"
            ],
            "imported": false,
            "current_name": "find_and_initialize_08006d14"
        },
        "FUN_080004f8": {
            "renaming": {
                "FUN_080004f8": "multiply_and_add_080004f8",
                "uVar1": "low_product",
                "lVar2": "high_product",
                "uVar3": "high_a",
                "uVar4": "high_b",
                "iVar5": "exponent_sum",
                "uVar6": "mantissa",
                "uVar7": "upper_mantissa",
                "uVar8": "lower_mantissa",
                "bVar9": "is_zero",
                "bVar10": "overflow",
                "bVar11": "underflow",
                "uVar12": "combined_ab"
            },
            "code": "\nulonglong multiply_and_add_080004f8(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong low_product;\n  longlong high_product;\n  uint high_a;\n  uint high_b;\n  int exponent_sum;\n  uint mantissa;\n  uint unaff_r5;\n  uint upper_mantissa;\n  uint lower_mantissa;\n  bool is_zero;\n  bool overflow;\n  bool underflow;\n  ulonglong combined_ab;\n  \n  combined_ab = CONCAT44(param_2,param_1);\n  upper_mantissa = 0x7ff;\n  high_b = param_2 >> 0x14 & 0x7ff;\n  is_zero = high_b == 0;\n  if (!is_zero) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    is_zero = unaff_r5 == 0;\n  }\n  if (!is_zero) {\n    is_zero = high_b == 0x7ff;\n  }\n  if (!is_zero) {\n    is_zero = unaff_r5 == 0x7ff;\n  }\n  if (is_zero) {\n    combined_ab = FUN_080006d4();\n  }\n  high_a = (uint)(combined_ab >> 0x20);\n  exponent_sum = high_b + unaff_r5;\n  high_b = high_a ^ param_4;\n  high_a = high_a & ~(upper_mantissa << 0x15);\n  param_4 = param_4 & ~(upper_mantissa << 0x15);\n  is_zero = ((uint)combined_ab | high_a << 0xc) == 0;\n  if (!is_zero) {\n    is_zero = (param_3 | param_4 << 0xc) == 0;\n  }\n  high_a = high_a | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (is_zero) {\n    param_3 = (uint)combined_ab | param_3;\n    param_4 = (high_b & 0x80000000 | high_a) ^ param_4;\n    high_b = upper_mantissa >> 1;\n    underflow = SBORROW4(exponent_sum,high_b);\n    mantissa = exponent_sum - high_b;\n    is_zero = mantissa == 0;\n    high_a = mantissa;\n    if (!is_zero && (int)high_b <= exponent_sum) {\n      underflow = SBORROW4(upper_mantissa,mantissa);\n      high_a = upper_mantissa - mantissa;\n      is_zero = upper_mantissa == mantissa;\n    }\n    if (!is_zero && (int)high_a < 0 == underflow) {\n      param_4 = param_4 | mantissa * 0x100000;\n    }\n    if (!is_zero && (int)high_a < 0 == underflow) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    upper_mantissa = 0;\n    underflow = SBORROW4(mantissa,1);\n    mantissa = mantissa - 1;\n    is_zero = mantissa == 0;\n    high_b = mantissa;\n  }\n  else {\n    low_product = (combined_ab & 0xffffffff) * (ulonglong)param_3;\n    combined_ab = (combined_ab & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)high_a * (ulonglong)param_3 + (low_product >> 0x20);\n    lower_mantissa = (uint)combined_ab;\n    high_product = (ulonglong)high_a * (ulonglong)param_4 + (combined_ab >> 0x20);\n    upper_mantissa = (uint)high_product;\n    high_a = (uint)((ulonglong)high_product >> 0x20);\n    if ((int)low_product != 0) {\n      lower_mantissa = lower_mantissa | 1;\n    }\n    mantissa = (exponent_sum + -0x3ff) - (uint)(high_a < 0x200);\n    if (high_a < 0x200) {\n      is_zero = (lower_mantissa & 0x80000000) != 0;\n      lower_mantissa = lower_mantissa << 1;\n      high_product = CONCAT44(high_a * 2 + (uint)(CARRY4(upper_mantissa,upper_mantissa) || CARRY4(upper_mantissa * 2,(uint)is_zero)),\n                       upper_mantissa * 2 + (uint)is_zero);\n    }\n    param_4 = high_b & 0x80000000 | (int)((ulonglong)high_product >> 0x20) << 0xb | (uint)high_product >> 0x15;\n    param_3 = (uint)high_product << 0xb | lower_mantissa >> 0x15;\n    upper_mantissa = lower_mantissa * 0x800;\n    overflow = 0xfc < mantissa;\n    underflow = SBORROW4(mantissa,0xfd);\n    high_a = mantissa - 0xfd;\n    is_zero = high_a == 0;\n    high_b = high_a;\n    if (overflow && !is_zero) {\n      overflow = 0x6ff < high_a;\n      underflow = SBORROW4(high_a,0x700);\n      high_b = mantissa - 0x7fd;\n      is_zero = high_a == 0x700;\n    }\n    if (!overflow || is_zero) {\n      is_zero = 0x7fffffff < upper_mantissa;\n      if (upper_mantissa == 0x80000000) {\n        is_zero = (lower_mantissa >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + mantissa * 0x100000 + (uint)CARRY4(param_3,(uint)is_zero),param_3 + is_zero\n                     );\n    }\n  }\n  if (!is_zero && (int)high_b < 0 == underflow) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  overflow = SCARRY4(mantissa,0x36);\n  is_zero = (int)(mantissa + 0x36) < 0;\n  underflow = mantissa == 0xffffffca;\n  if (underflow || is_zero != overflow) {\n    param_3 = 0;\n  }\n  if (underflow || is_zero != overflow) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (underflow || is_zero != overflow) {\n    return CONCAT44(param_4,param_3);\n  }\n  high_b = -mantissa;\n  high_a = high_b - 0x20;\n  if (0x1f < (int)high_b) {\n    mantissa = param_3 >> (high_a & 0xff) | param_4 << (0x20 - high_a & 0xff);\n    high_b = (param_4 >> (high_a & 0xff) & ~((param_4 & 0x80000000) >> (high_a & 0xff))) -\n            ((int)mantissa >> 0x1f);\n    if ((upper_mantissa | param_3 << (0x20 - high_a & 0xff) | mantissa << 1) == 0) {\n      high_b = high_b & ~(mantissa >> 0x1f);\n    }\n    return CONCAT44(param_4,high_b) & 0x80000000ffffffff;\n  }\n  exponent_sum = high_b - 0x14;\n  if (exponent_sum == 0 || exponent_sum < 0 != SCARRY4(high_a,0xc)) {\n    lower_mantissa = param_3 << (mantissa + 0x20 & 0xff);\n    high_a = param_3 >> (high_b & 0xff) | param_4 << (mantissa + 0x20 & 0xff);\n    mantissa = high_a + -((int)lower_mantissa >> 0x1f);\n    if ((upper_mantissa | lower_mantissa << 1) == 0) {\n      mantissa = mantissa & ~(lower_mantissa >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (high_b & 0xff)) +\n                    (uint)CARRY4(high_a,-((int)lower_mantissa >> 0x1f)),mantissa);\n  }\n  high_b = 0xc - exponent_sum;\n  mantissa = param_3 << (high_b & 0xff);\n  high_b = param_3 >> (0x20 - high_b & 0xff) | param_4 << (high_b & 0xff);\n  high_a = high_b + -((int)mantissa >> 0x1f);\n  if ((upper_mantissa | mantissa << 1) == 0) {\n    high_a = high_a & ~(mantissa >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(high_b,-((int)mantissa >> 0x1f)),high_a);\n}\n\n",
            "called": [
                "FUN_080006d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004f8",
            "calling": [
                "FUN_080015f8",
                "FUN_08001814",
                "FUN_08001918",
                "FUN_080016b4",
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "multiply_and_add_080004f8"
        }
    },
    "used_tokens": 239597,
    "layers": [
        [
            "FUN_08002470",
            "FUN_08007004",
            "FUN_08005740",
            "FUN_08006158",
            "FUN_08004ec4",
            "FUN_08000178",
            "FUN_08006c88",
            "FUN_080060e4",
            "FUN_0800258c",
            "FUN_08004e20",
            "FUN_0800573c",
            "FUN_080032b4",
            "FUN_08004d06",
            "FUN_080056d8",
            "FUN_080019f6",
            "FUN_08002f9c",
            "FUN_08005510",
            "FUN_08005750",
            "FUN_08002cf2",
            "FUN_08006288",
            "FUN_08002004",
            "FUN_08005754",
            "FUN_08005fc8",
            "FUN_08002ab8",
            "FUN_080068f0",
            "FUN_0800138e",
            "FUN_0800598a",
            "FUN_08001c88",
            "FUN_08001a44",
            "FUN_08002c54",
            "FUN_080043b4",
            "FUN_0800441a",
            "FUN_08004d18",
            "FUN_080006d4",
            "FUN_08006174",
            "FUN_08007028",
            "FUN_08002494",
            "FUN_080055bc",
            "FUN_08001960",
            "FUN_08004ca2",
            "FUN_08002810",
            "FUN_0800224c",
            "FUN_080054b0",
            "FUN_08006f00",
            "FUN_080016b4",
            "FUN_080018f8",
            "FUN_08005890",
            "FUN_08005da0",
            "FUN_08004cb2",
            "FUN_08004ef4",
            "FUN_08001294",
            "FUN_08002384",
            "FUN_08002ad8",
            "FUN_08004204",
            "FUN_08005da8",
            "FUN_080045fe",
            "FUN_08005f2c",
            "FUN_080055e0",
            "FUN_08005f40",
            "FUN_0800213c",
            "FUN_0800455a",
            "FUN_08001a66",
            "FUN_08003c44",
            "FUN_080028d2",
            "FUN_08000a18",
            "FUN_08005384",
            "FUN_08005b3c",
            "FUN_080046b8",
            "FUN_08004c8a",
            "FUN_08001cd0",
            "FUN_08004a4c",
            "FUN_08006112",
            "FUN_08004974",
            "FUN_08003520",
            "FUN_08002ca6",
            "FUN_08005b54",
            "FUN_08004618",
            "FUN_08006c40",
            "FUN_0800157c",
            "FUN_080045a2",
            "FUN_08001c32",
            "FUN_080047e8",
            "FUN_080057b4",
            "FUN_08001b18",
            "thunk_FUN_08005750",
            "FUN_0800092c",
            "FUN_08005d8a",
            "FUN_08002560",
            "FUN_08006e90",
            "FUN_08006920",
            "FUN_080008ba",
            "FUN_08002d1c",
            "FUN_08005714",
            "FUN_08003da4",
            "FUN_08005a44",
            "FUN_080009dc",
            "FUN_0800417c",
            "FUN_08004b94",
            "FUN_080058e0",
            "FUN_08001918",
            "FUN_0800611c",
            "FUN_080047f4",
            "FUN_080009f0",
            "FUN_0800134e",
            "FUN_08002c10",
            "FUN_08006be0",
            "FUN_080012e8",
            "FUN_08006370",
            "FUN_080024f8",
            "FUN_08001ab0",
            "FUN_08006ac0",
            "FUN_08004198",
            "FUN_08001c3c",
            "FUN_08000a2c",
            "FUN_08001366",
            "FUN_08005848",
            "FUN_08000ae8",
            "FUN_08003ed8",
            "FUN_080061e0",
            "FUN_08005604",
            "FUN_08005724",
            "FUN_08005728",
            "FUN_0800135a",
            "FUN_08005c96",
            "FUN_0800571a",
            "FUN_08002efc",
            "FUN_0800365c",
            "FUN_080033b8",
            "FUN_080069e4",
            "FUN_08004b9e",
            "FUN_08005730",
            "FUN_08002582",
            "FUN_08004884",
            "FUN_08001be8",
            "FUN_080061f0",
            "FUN_08002348",
            "FUN_080060d4",
            "FUN_08005a68",
            "FUN_08001814",
            "FUN_08000aec",
            "FUN_0800572c",
            "FUN_08004e12",
            "FUN_08000a58",
            "FUN_08001b48",
            "FUN_08004092",
            "FUN_08005cd4",
            "FUN_08005bb0",
            "FUN_080014ba",
            "FUN_08003c90",
            "FUN_08002514",
            "FUN_08005c1c",
            "FUN_08006dc8",
            "FUN_0800412c",
            "FUN_08007090",
            "FUN_0800492c",
            "FUN_0800480a",
            "FUN_080015f8",
            "FUN_08005c38",
            "FUN_08005f8c",
            "FUN_08006f5a",
            "FUN_08000b08",
            "FUN_08006cb4",
            "FUN_08004c5e",
            "FUN_08004b3c",
            "FUN_08001550",
            "FUN_08001310",
            "FUN_080009a8",
            "FUN_08004d90",
            "FUN_08005ce8",
            "FUN_0800316c",
            "FUN_08004828",
            "FUN_08003afa",
            "FUN_08004948",
            "FUN_08005b24",
            "FUN_080049f0",
            "FUN_08001e40",
            "FUN_08003a68",
            "FUN_080012a2",
            "FUN_08004c78",
            "FUN_08001e48",
            "FUN_080009b8",
            "FUN_08000aa8",
            "FUN_08000a04",
            "FUN_0800010c",
            "FUN_08001cac",
            "FUN_08005a18",
            "FUN_08003f18",
            "FUN_0800591e",
            "FUN_08002540",
            "FUN_08006344",
            "FUN_080009c8",
            "FUN_08002db2",
            "FUN_08001cc4",
            "FUN_08003ea0",
            "FUN_0800306c",
            "FUN_0800548c",
            "FUN_08004848",
            "FUN_08005d82",
            "FUN_08006f92",
            "FUN_080012c0",
            "FUN_08001f80",
            "FUN_08001f84",
            "FUN_08000bcc",
            "FUN_0800281e",
            "FUN_08006198",
            "FUN_08007048",
            "FUN_08003c50",
            "FUN_080065c0",
            "FUN_080054d4",
            "FUN_08004d40",
            "FUN_08004d44",
            "FUN_0800282c",
            "FUN_080015b2",
            "FUN_0800040c",
            "FUN_08004df4",
            "FUN_08004bb0",
            "FUN_08004df8",
            "FUN_08001510",
            "FUN_08002af8",
            "FUN_080028de",
            "FUN_08002848",
            "FUN_08004e70",
            "FUN_080020f0",
            "FUN_08006e10",
            "FUN_08004e74",
            "FUN_08004c30",
            "FUN_08006f38",
            "FUN_08004cce",
            "FUN_08003ad4",
            "FUN_08004110",
            "FUN_08004ce2",
            "FUN_08005568",
            "FUN_08004478",
            "FUN_08005f5e",
            "FUN_08005cb6",
            "FUN_08003c70",
            "FUN_080053d4",
            "FUN_08002b84",
            "FUN_08004c48",
            "FUN_0800042c",
            "FUN_08005f6c",
            "FUN_08005cc0",
            "FUN_0800706c",
            "FUN_08002624",
            "FUN_080040b0",
            "FUN_08005d42",
            "FUN_08004b34",
            "FUN_08004c52",
            "FUN_080013a4",
            "FUN_08006d14"
        ],
        [
            "FUN_08006394",
            "FUN_08003688",
            "FUN_080066b0",
            "FUN_08000190",
            "FUN_08000194",
            "FUN_08004f4c",
            "FUN_0800074c",
            "FUN_08000cd0",
            "FUN_080004f8"
        ]
    ],
    "locked_functions": []
}