{
    "functions": {
        "FUN_0800192c": {
            "renaming": {
                "FUN_0800192c": "check_flag_status_0800192c",
                "PTR_DAT_08001954": "flag_array",
                "PTR_DAT_08001958": "flag_array_value"
            },
            "code": "void check_flag_status_0800192c(void)\n{\n  if ((PTR_DAT_08001954[0x28] & 8) == 0) {\n    *(int *)PTR_DAT_08001958 = 0;\n  }\n  else {\n    *(int *)PTR_DAT_08001958 = 1;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800192c",
            "calling": [
                "FUN_08004e30",
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "check_flag_status_0800192c"
        },
        "FUN_08006950": {
            "renaming": {
                "FUN_08006950": "set_param_08006950",
                "param_1": "param",
                "PTR_DAT_08006994": "ptr",
                "DAT_08006994": "DAT",
                "old_val": "old_val",
                "mask": "mask",
                "new_val": "new_val"
            },
            "code": "void set_param_08006950(uint param) {\n    uint* PTR_DAT_08006994 = (uint *)(DAT_08006994_08006994 + 0xc);\n    uint old_val = *PTR_DAT_08006994;\n    uint mask = 0xf8ff;\n    uint new_val = (param & 7) << 8 | 0x5fa0000;\n    *PTR_DAT_08006994 = (old_val & mask) | new_val;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006950",
            "calling": [
                "FUN_08006ce0"
            ],
            "imported": false,
            "current_name": "set_param_08006950"
        },
        "FUN_08008ba0": {
            "renaming": {
                "FUN_08008ba0": "convert_param_to_uint_08008ba0",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "converted_value",
                "iVar2": "shifted_value",
                "uVar3": "shifted_param"
            },
            "code": "uint convert_param_to_uint_08008ba0(uint param1, uint param2)\n{\n  uint converted_value;\n  int shifted_value;\n  uint shifted_param;\n  \n  shifted_value = param2 * 2 + 0x200000;\n  if (param2 * 2 < 0xffe00000) {\n    if (-1 < shifted_value) {\n      return 0;\n    }\n    converted_value = shifted_value >> 0x15;\n    shifted_param = -converted_value - 0x3e1;\n    if (converted_value < 0xfffffc20 && shifted_param != 0) {\n      converted_value = (param2 << 0xb | 0x80000000 | param1 >> 0x15) >> (shifted_param & 0xff);\n      if ((param2 & 0x80000000) != 0) {\n        converted_value = -converted_value;\n      }\n      return converted_value;\n    }\n  }\n  else if ((param1 | param2 << 0xc) != 0) {\n    return 0;\n  }\n  param2 = param2 & 0x80000000;\n  if (param2 == 0) {\n    param2 = 0x7fffffff;\n  }\n  return param2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ba0",
            "calling": [
                "FUN_0800adf0",
                "FUN_080005b4",
                "FUN_08003004",
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_080095b8",
                "FUN_0800a5a0",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "convert_param_to_uint_08008ba0"
        },
        "FUN_08005a5c": {
            "renaming": {
                "FUN_08005a5c": "do_nothing_08005a5c"
            },
            "code": "\nvoid do_nothing_08005a5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a5c",
            "calling": [
                "FUN_080059f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08005a5c"
        },
        "FUN_08005984": {
            "renaming": {
                "FUN_08005984": "check_initialized_08005984",
                "param_1": "param",
                "uVar1": "result",
                "PTR_DAT_080059b0": "ptr"
            },
            "code": "int check_initialized_08005984(int param){\n  int* PTR_DAT_080059b0 = (int*)PTR_DAT_080059b0;\n  int initialized = *PTR_DAT_080059b0;\n  if (initialized == 0){\n    return FUN_0800597c(1, param, 0);\n  }\n  else{\n    return 0;\n  }\n}",
            "called": [
                "FUN_0800597c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005984",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "check_initialized_08005984"
        },
        "FUN_08007a10": {
            "renaming": {
                "FUN_08007a10": "set_flags_08007a10",
                "param_1": "flag_value",
                "DAT_08007a64": "flags_ptr",
                "uint": "unsigned_int"
            },
            "code": "void set_flags_08007a10(int flag_value)\n{\n    uint* DAT_08007a64 = (uint*)(DAT_08007a64 + 0x40);\n    if (flag_value == 0x40000000) {\n        *DAT_08007a64 |= 1;\n    }\n    else if (flag_value == DAT_08007a68) {\n        *DAT_08007a64 |= 2;\n    }\n    else if (flag_value == DAT_08007a6c) {\n        *DAT_08007a64 |= 4;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007a10",
            "calling": [
                "FUN_08007d08",
                "FUN_08007ad0"
            ],
            "imported": false,
            "current_name": "set_flags_08007a10"
        },
        "FUN_0800856c": {
            "renaming": {
                "FUN_0800856c": "reverse_bits_0800856c",
                "param_1": "num",
                "uVar1": "carry",
                "uVar2": "num",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeroes",
                "uVar5": "shift_amount2",
                "uVar6": "sign_bit",
                "in_r12": "unused",
                "bVar7": "is_negative_shift_amount",
                "bVar8": "is_zero_shift_amount",
                "bVar9": "is_overflow_shift_amount"
            },
            "code": "ulonglong reverse_bits_0800856c(uint num)\n{\n    uint abs_num = num & 0x7fffffff;\n    if (abs_num == 0) {\n        return 0;\n    }\n    uint leading_zeroes = count_leading_zeroes(abs_num);\n    uint shift_amount = leading_zeroes + 21;\n    if (shift_amount < 32) {\n        uint carry = (leading_zeroes - 11) + 12;\n        uint result = (num << (shift_amount & 0xff)) | (num >> (carry & 0xff));\n        return ((num & 0x80000000) << 32) | result;\n    }\n    else {\n        uint shift_amount2 = ~(shift_amount - 32);\n        if (shift_amount2 > 30) {\n            return (num & 0x80000000ffffffff);\n        }\n        else {\n            uint carry = shift_amount2 - 19;\n            if (carry == 0 || (shift_amount2 - 32) < 12) {\n                uint result = ((num >> (shift_amount2 & 0xff)) | (num << ((32 - shift_amount2) & 0xff)));\n                return ((num & 0x80000000) << 32) | (result >> (shift_amount2 & 0xff));\n            }\n            else {\n                uint result = ((num >> (32 - carry)) | (num << carry));\n                return ((num & 0x80000000) << 32) | (result >> (12 - carry));\n            }\n        }\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800856c",
            "calling": [
                "FUN_08009d78",
                "FUN_0800a5a0",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "reverse_bits_0800856c"
        },
        "FUN_08008b00": {
            "renaming": {
                "FUN_08008b00": "execute_function_08008b00",
                "param_1": "input_parameter",
                "FUN_08008a74": "call_helper_function"
            },
            "code": "undefined4 execute_function_08008b00(undefined4 input_parameter)\n{\n  call_helper_function();\n  return input_parameter;\n}",
            "called": [
                "FUN_08008a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b00",
            "calling": [
                "FUN_08008b10",
                "FUN_08008b24",
                "FUN_08008af0"
            ],
            "imported": false,
            "current_name": "execute_function_08008b00"
        },
        "FUN_0800585c": {
            "renaming": {
                "FUN_0800585c": "update_data_if_condition_met_0800585c",
                "PTR_DAT_08005878": "data_array",
                "FUN_08005790": "update_data"
            },
            "code": "void update_data_if_condition_met_0800585c(void)\n{\n  if (PTR_DAT_08005878[1] == 2) {\n    PTR_DAT_08005878[1] = 3;\n    update_data();\n  }\n  return;\n}",
            "called": [
                "FUN_08005790"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800585c",
            "calling": [
                "FUN_08001e98",
                "FUN_080024c4",
                "FUN_08003a74"
            ],
            "imported": false,
            "current_name": "update_data_if_condition_met_0800585c"
        },
        "FUN_0800597c": {
            "renaming": {
                "FUN_0800597c": "trigger_software_interrupt_0800597c",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void trigger_software_interrupt_0800597c(void)\n{\n  software_interrupt(SOFTWARE_INTERRUPT_CODE);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800597c",
            "calling": [
                "FUN_08005984"
            ],
            "imported": false,
            "current_name": "trigger_software_interrupt_0800597c"
        },
        "FUN_08009798": {
            "renaming": {
                "FUN_08009798": "calculate_double_precision_08009798",
                "param_1": "exponent",
                "param_2": "mantissa",
                "uVar1": "exponent_diff",
                "uVar2": "shifted_mantissa",
                "lVar3": "shifted_mantissa_masked or result",
                "DAT_08009814": "mantissa_shift_mask"
            },
            "code": "longlong calculate_double_precision_08009798(uint exponent, uint mantissa, undefined4 param_3, undefined4 param_4)\n{\n  uint shifted_mantissa = (mantissa << 1) >> 0x15;\n  uint exponent_diff = shifted_mantissa - 0x3ff;\n  if ((int)exponent_diff < 0x14) {\n    if ((int)exponent_diff < 0) {\n      return ((ulonglong)mantissa & 0x80000000) << 0x20;\n    }\n    longlong shifted_mantissa_masked = (ulonglong)(mantissa & ~(DAT_08009814 >> (exponent_diff & 0xff))) << 0x20;\n    return shifted_mantissa_masked;\n  }\n  else {\n    if ((int)exponent_diff < 0x34) {\n      uint mantissa_masked = mantissa & ~(0xffffffffU >> (shifted_mantissa - 0x413 & 0xff));\n      return CONCAT44(mantissa, exponent & mantissa_masked);\n    }\n    if (exponent_diff != 0x400) {\n      return CONCAT44(mantissa, exponent);\n    }\n    longlong result = FUN_080082d4(exponent, mantissa, exponent, mantissa, param_4);\n    return result;\n  }\n}",
            "called": [
                "FUN_080082d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009798",
            "calling": [
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "calculate_double_precision_08009798"
        },
        "FUN_08008cd8": {
            "renaming": {
                "FUN_08008cd8": "calculate_float_08008cd8",
                "param_1": "significand",
                "param_2": "exponent",
                "param_3": "sign_bit",
                "param_4": "other_sign_bit",
                "iVar1": "int_result",
                "uVar2": "normalized_exponent",
                "uVar3": "exponent_significand",
                "uVar4": "shifted_significand",
                "uVar5": "shift_distance",
                "uVar6": "difference",
                "iVar7": "shifted_difference",
                "bVar8": "comparison_result"
            },
            "code": "\nuint calculate_float_08008cd8(uint significand,uint exponent,undefined4 sign_bit,uint other_sign_bit)\n\n{\n  int int_result;\n  uint normalized_exponent;\n  uint exponent_significand;\n  uint shifted_significand;\n  uint shift_distance;\n  uint difference;\n  int shifted_difference;\n  bool comparison_result;\n  \n  normalized_exponent = exponent ^ 0x80000000;\n  shifted_significand = significand << 1;\n  comparison_result = shifted_significand == 0;\n  if (!comparison_result) {\n    other_sign_bit = exponent << 1;\n    comparison_result = other_sign_bit == 0;\n  }\n  if (!comparison_result) {\n    comparison_result = shifted_significand == other_sign_bit;\n  }\n  shifted_difference = (int)shifted_significand >> 0x18;\n  if (!comparison_result) {\n    comparison_result = shifted_difference == -1;\n  }\n  if (!comparison_result) {\n    comparison_result = (int)other_sign_bit >> 0x18 == -1;\n  }\n  if (comparison_result) {\n    int_result = (int)(exponent << 1) >> 0x18;\n    if (shifted_difference == -1 || int_result == -1) {\n      shifted_significand = normalized_exponent;\n      if (shifted_difference == -1) {\n        shifted_significand = significand;\n      }\n      if (shifted_difference != -1 || int_result != -1) {\n        normalized_exponent = shifted_significand;\n      }\n      comparison_result = (shifted_significand & 0x7fffff) == 0;\n      if (comparison_result) {\n        comparison_result = (normalized_exponent & 0x7fffff) == 0;\n      }\n      if (comparison_result) {\n        comparison_result = shifted_significand == normalized_exponent;\n      }\n      if (!comparison_result) {\n        shifted_significand = shifted_significand | 0x400000;\n      }\n      return shifted_significand;\n    }\n    if (((significand ^ normalized_exponent) & 0x7fffffff) != 0) {\n      if (shifted_significand == 0) {\n        significand = normalized_exponent;\n      }\n      return significand;\n    }\n    if (significand != normalized_exponent) {\n      return 0;\n    }\n    if ((shifted_significand & 0xff000000) == 0) {\n      normalized_exponent = significand << 1;\n      if ((significand & 0x80000000) != 0) {\n        normalized_exponent = normalized_exponent | 0x80000000;\n      }\n      return normalized_exponent;\n    }\n    if (shifted_significand < 0xfe000000) {\n      return significand + 0x800000;\n    }\n    significand = significand & 0x80000000;\nLAB_08008e12:\n    return significand | 0x7f800000;\n  }\n  shifted_significand = shifted_significand >> 0x18;\n  other_sign_bit = other_sign_bit >> 0x18;\n  difference = other_sign_bit - shifted_significand;\n  comparison_result = difference != 0;\n  shift_distance = shifted_significand;\n  if (comparison_result && shifted_significand <= other_sign_bit) {\n    shift_distance = shifted_significand + difference;\n  }\n  if (comparison_result && shifted_significand <= other_sign_bit) {\n    normalized_exponent = normalized_exponent ^ significand;\n  }\n  if (comparison_result && shifted_significand <= other_sign_bit) {\n    significand = significand ^ normalized_exponent;\n  }\n  if (comparison_result && shifted_significand <= other_sign_bit) {\n    normalized_exponent = normalized_exponent ^ significand;\n  }\n  if (other_sign_bit < shifted_significand) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return significand;\n  }\n  shifted_significand = significand & 0xffffff | 0x800000;\n  if ((significand & 0x80000000) != 0) {\n    shifted_significand = -shifted_significand;\n  }\n  exponent_significand = normalized_exponent & 0xffffff | 0x800000;\n  if ((normalized_exponent & 0x80000000) != 0) {\n    exponent_significand = -exponent_significand;\n  }\n  if (shift_distance == difference) {\n    exponent_significand = exponent_significand ^ 0x800000;\n    if (shift_distance == 0) {\n      shifted_significand = shifted_significand ^ 0x800000;\n      shift_distance = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shifted_significand = shifted_significand + ((int)exponent_significand >> (difference & 0xff));\n  exponent_significand = exponent_significand << (0x20 - difference & 0xff);\n  significand = shifted_significand & 0x80000000;\n  if ((int)shifted_significand < 0) {\n    comparison_result = exponent_significand != 0;\n    exponent_significand = -exponent_significand;\n    shifted_significand = -shifted_significand - (uint)comparison_result;\n  }\n  if (shifted_significand < 0x800000) {\n    normalized_exponent = exponent_significand & 0x80000000;\n    exponent_significand = exponent_significand << 1;\n    shifted_significand = shifted_significand * 2 + (uint)(normalized_exponent != 0);\n    normalized_exponent = shift_distance - 2;\n    if (shift_distance - 1 == 0 || shifted_significand < 0x800000) {\n      shifted_difference = count_leading_zeroes(shifted_significand);\n      difference = shifted_difference - 8;\n      shifted_significand = shifted_significand << (difference & 0xff);\n      if ((int)normalized_exponent < (int)difference) {\n        shifted_significand = shifted_significand >> (-(normalized_exponent - difference) & 0xff);\n      }\n      else {\n        shifted_significand = shifted_significand + (normalized_exponent - difference) * 0x800000;\n      }\n      return shifted_significand | significand;\n    }\n  }\n  else {\n    normalized_exponent = shift_distance - 1;\n    if (0xffffff < shifted_significand) {\n      normalized_exponent = shifted_significand & 1;\n      shifted_significand = shifted_significand >> 1;\n      exponent_significand = (uint)(normalized_exponent != 0) << 0x1f | exponent_significand >> 1;\n      normalized_exponent = shift_distance;\n      if (0xfd < shift_distance) goto LAB_08008e12;\n    }\n  }\n  shifted_significand = shifted_significand + normalized_exponent * 0x800000 + (uint)(0x7fffffff < exponent_significand);\n  if (exponent_significand == 0x80000000) {\n    shifted_significand = shifted_significand & 0xfffffffe;\n  }\n  return shifted_significand | significand;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008cd8",
            "calling": [
                "FUN_08004940",
                "FUN_080005b4",
                "FUN_08002908",
                "FUN_080028bc",
                "FUN_08003004",
                "FUN_08002978",
                "FUN_08002408",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "calculate_float_08008cd8"
        },
        "FUN_08007930": {
            "renaming": {
                "FUN_08007930": "process_data_08007930",
                "puVar1": "data_ptr",
                "uVar2": "new_data",
                "uVar3": "data_mask",
                "uVar4": "current_data",
                "iVar5": "data_index"
            },
            "code": "void process_data_08007930(void)\n{\n  uint32_t *data_ptr = PTR_DAT_080079b8;\n  if (*(int *)PTR_DAT_080079bc != 0) {\n    int data_index = *(int *)(PTR_DAT_080079b8 + 0x14);\n    uint32_t new_data = generate_data();\n    *(uint32_t *)(data_ptr + data_index * 4) = new_data;\n    if (*(int *)(data_ptr + 0x14) == 3) {\n      data_index = 0;\n    }\n    else {\n      data_index = *(int *)(data_ptr + 0x14) + 1;\n    }\n    *(int *)(data_ptr + 0x14) = data_index;\n    uint32_t data_mask = generate_mask();\n    uint32_t current_data = *(uint32_t *)(data_ptr + 0x10);\n    if (data_mask != current_data) {\n      uint32_t mask_diff = (~current_data & data_mask);\n      if (mask_diff != 0) {\n        apply_mask(mask_diff);\n      }\n      mask_diff = (~data_mask & current_data);\n      if (mask_diff != 0) {\n        remove_mask(mask_diff);\n      }\n      *(uint32_t *)(data_ptr + 0x10) = data_mask;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08007884",
                "FUN_08007520",
                "FUN_080074c8",
                "FUN_080078f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007930",
            "calling": [
                "FUN_08007756"
            ],
            "imported": false,
            "current_name": "process_data_08007930"
        },
        "FUN_080082ba": {
            "renaming": {
                "FUN_080082ba": "do_nothing_080082ba"
            },
            "code": "\nvoid do_nothing_080082ba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080082ba",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "do_nothing_080082ba"
        },
        "FUN_08000188": {
            "renaming": {
                "FUN_08000188": "check_if_already_called_08000188",
                "param_1": "is_called",
                "PTR_DAT_080001a0": "is_called",
                "DAT_080001a4": "has_function_pointer",
                "PTR_FUN_080001a8": "function_pointer"
            },
            "code": "int *check_if_already_called_08000188(int *PTR_DAT_080001a0) {\n  if (*PTR_DAT_080001a0 == 0) {\n    if (DAT_080001a4 && PTR_FUN_080001a8 != NULL) {\n      PTR_DAT_080001a0 = PTR_FUN_080001a8;\n    }\n    *PTR_DAT_080001a0 = 1;\n  }\n  return PTR_DAT_080001a0;\n}",
            "called": [
                "FUN_0800b5b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000188",
            "calling": [],
            "imported": false,
            "current_name": "check_if_already_called_08000188"
        },
        "FUN_080082d0": {
            "renaming": {
                "FUN_080082d0": "calculate_uint64_from_uint32_080082d0",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "iVar1": "shift_amount1",
                "bVar2": "bit_value",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "iVar8": "shift_amount2",
                "uVar9": "bits1",
                "uVar10": "bits2",
                "uVar11": "result1",
                "uVar12": "result2",
                "bVar13": "bool1",
                "bVar14": "bool2",
                "bVar15": "bool3"
            },
            "code": "\nulonglong calculate_uint64_from_uint32_080082d0(uint value1,uint value2,uint value3,uint value4)\n\n{\n  int shift_amount1;\n  byte bit_value;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int shift_amount2;\n  uint bits1;\n  uint bits2;\n  uint result1;\n  uint result2;\n  bool bool1;\n  bool bool2;\n  bool bool3;\n  \n  temp4 = value4 ^ 0x80000000;\n  bits1 = value2 << 1;\n  value4 = value4 << 1;\n  bool1 = ((value2 ^ temp4) & 0x7fffffff) == 0;\n  bool2 = bool1 && value1 == value3;\n  if (!bool1 || value1 != value3) {\n    bool2 = (bits1 | value1) == 0;\n  }\n  if (!bool2) {\n    bool2 = (value4 | value3) == 0;\n  }\n  shift_amount2 = (int)bits1 >> 0x15;\n  if (!bool2) {\n    bool2 = shift_amount2 == -1;\n  }\n  shift_amount1 = (int)value4 >> 0x15;\n  if (!bool2) {\n    bool2 = shift_amount1 == -1;\n  }\n  if (bool2) {\n    if (shift_amount2 == -1 || shift_amount1 == -1) {\n      bits1 = temp4;\n      result1 = value3;\n      if (shift_amount2 == -1) {\n        bits1 = value2;\n        result1 = value1;\n      }\n      if (shift_amount2 != -1 || shift_amount1 != -1) {\n        value3 = result1;\n        temp4 = bits1;\n      }\n      bool2 = (result1 | bits1 << 0xc) == 0;\n      if (bool2) {\n        bool2 = (value3 | temp4 << 0xc) == 0;\n      }\n      if (bool2) {\n        bool2 = bits1 == temp4;\n      }\n      if (!bool2) {\n        bits1 = bits1 | 0x80000;\n      }\n      return CONCAT44(bits1,result1);\n    }\n    if (((value2 ^ temp4) & 0x7fffffff) != 0 || value1 != value3) {\n      if ((bits1 | value1) == 0) {\n        value1 = value3;\n        value2 = temp4;\n      }\n      return CONCAT44(value2,value1);\n    }\n    if (value2 != temp4) {\n      return 0;\n    }\n    if (bits1 >> 0x15 == 0) {\n      bool2 = (value1 & 0x80000000) != 0;\n      temp4 = value2 * 2 + (uint)bool2;\n      if (CARRY4(value2,value2) || CARRY4(value2 * 2,(uint)bool2)) {\n        temp4 = temp4 | 0x80000000;\n      }\n      return CONCAT44(temp4,value1 << 1);\n    }\n    if (bits1 < 0xffc00000) {\n      return CONCAT44(value2 + 0x100000,value1);\n    }\n    value2 = value2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(value2 | 0x7ff00000) << 0x20;\n  }\n  bits1 = bits1 >> 0x15;\n  value4 = value4 >> 0x15;\n  result1 = value4 - bits1;\n  bool2 = result1 != 0;\n  if (value4 < bits1) {\n    result1 = -result1;\n  }\n  bits2 = value1;\n  temp5 = value2;\n  if (bool2 && bits1 <= value4) {\n    bits1 = bits1 + result1;\n    bits2 = value3;\n    temp5 = temp4;\n    value3 = value1;\n    temp4 = value2;\n  }\n  if (0x36 < result1) {\n    return CONCAT44(temp5,bits2);\n  }\n  temp2 = temp5 & 0xfffff | 0x100000;\n  if ((temp5 & 0x80000000) != 0) {\n    bool2 = bits2 != 0;\n    bits2 = -bits2;\n    temp2 = -temp2 - (uint)bool2;\n  }\n  temp5 = temp4 & 0xfffff | 0x100000;\n  if ((temp4 & 0x80000000) != 0) {\n    bool2 = value3 != 0;\n    value3 = -value3;\n    temp5 = -temp5 - (uint)bool2;\n  }\n  if (bits1 == result1) {\n    temp5 = temp5 ^ 0x100000;\n    if (bits1 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      bits1 = 1;\n    }\n    else {\n      result1 = result1 - 1;\n    }\n  }\n  temp4 = -result1 + 0x20;\n  if ((int)result1 < 0x21) {\n    result2 = value3 << (temp4 & 0xff);\n    value3 = value3 >> (result1 & 0xff);\n    temp1 = bits2 + value3;\n    temp3 = temp5 << (temp4 & 0xff);\n    temp4 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(bits2,value3) + ((int)temp5 >> (result1 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    result2 = temp5 << (-result1 + 0x40 & 0xff);\n    if (value3 != 0) {\n      result2 = result2 | 2;\n    }\n    temp5 = (int)temp5 >> (result1 - 0x20 & 0xff);\n    temp4 = bits2 + temp5;\n    temp2 = temp2 + ((int)temp5 >> 0x1f) + (uint)CARRY4(bits2,temp5);\n  }\n  value2 = temp2 & 0x80000000;\n  result1 = temp2;\n  if ((int)temp2 < 0) {\n    bool2 = result2 == 0;\n    result2 = -result2;\n    result1 = -temp4;\n    temp4 = -(uint)!bool2 - temp4;\n    result1 = -(uint)(bool2 <= result1) - temp2;\n  }\n  if (0xfffff < result1) {\n    bits2 = bits1 - 1;\n    if (0x1fffff < result1) {\n      bits2 = result1 & 1;\n      result1 = result1 >> 1;\n      bit_value = (byte)temp4;\n      temp4 = (uint)(bits2 != 0) << 0x1f | temp4 >> 1;\n      result2 = (uint)(bit_value & 1) << 0x1f | result2 >> 1;\n      bits2 = bits1;\n      if (0xffbfffff < bits1 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    bool2 = 0x7fffffff < result2;\n    if (result2 == 0x80000000) {\n      bool2 = (temp4 & 1) != 0;\n    }\n    return CONCAT44(result1 + bits2 * 0x100000 + (uint)CARRY4(temp4,(uint)bool2) | value2,\n                    temp4 + bool2);\n  }\n  bool1 = (result2 & 0x80000000) != 0;\n  result2 = result2 << 1;\n  bits2 = temp4 * 2;\n  bool2 = CARRY4(temp4,temp4);\n  temp4 = temp4 * 2 + (uint)bool1;\n  result1 = result1 * 2 + (uint)(bool2 || CARRY4(bits2,(uint)bool1));\n  bits2 = bits1 - 2;\n  if (bits1 - 1 != 0 && 0xfffff < result1) goto LAB_080083e0;\n  temp5 = temp4;\n  bits1 = result1;\n  if (result1 == 0) {\n    temp5 = 0;\n    bits1 = temp4;\n  }\n  shift_amount2 = count_leading_zeroes(bits1);\n  if (result1 == 0) {\n    shift_amount2 = shift_amount2 + 0x20;\n  }\n  result1 = shift_amount2 - 0xb;\n  bool3 = SBORROW4(result1,0x20);\n  temp4 = shift_amount2 - 0x2b;\n  bool2 = (int)temp4 < 0;\n  bool1 = temp4 == 0;\n  if ((int)result1 < 0x20) {\n    bool3 = SCARRY4(temp4,0xc);\n    shift_amount2 = shift_amount2 + -0x1f;\n    bool2 = shift_amount2 < 0;\n    bool1 = shift_amount2 == 0;\n    temp4 = result1;\n    if (!bool1 && bool2 == bool3) {\n      temp5 = bits1 << (result1 & 0xff);\n      bits1 = bits1 >> (0xcU - shift_amount2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (bool1 || bool2 != bool3) {\n    result2 = 0x20 - temp4;\n  }\n  bits1 = bits1 << (temp4 & 0xff);\n  if (bool1 || bool2 != bool3) {\n    bits1 = bits1 | temp5 >> (result2 & 0xff);\n  }\n  if (bool1 || bool2 != bool3) {\n    temp5 = temp5 << (temp4 & 0xff);\n  }\nLAB_08008458:\n  if ((int)result1 <= (int)bits2) {\n    return CONCAT44(bits1 + (bits2 - result1) * 0x100000 | value2,temp5);\n  }\n  temp4 = ~(bits2 - result1);\n  if ((int)temp4 < 0x1f) {\n    shift_amount2 = temp4 - 0x13;\n    if (shift_amount2 != 0 && shift_amount2 < 0 == SCARRY4(temp4 - 0x1f,0xc)) {\n      return CONCAT44(temp2,temp5 >> (0x20 - (0xcU - shift_amount2) & 0xff) | bits1 << (0xcU - shift_amount2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp4 = temp4 + 1;\n    return CONCAT44(value2 | bits1 >> (temp4 & 0xff),\n                    temp5 >> (temp4 & 0xff) | bits1 << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(temp2,bits1 >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080082d0",
            "calling": [
                "FUN_08009410",
                "FUN_080096e8",
                "FUN_08004940",
                "FUN_08003004",
                "FUN_08009990",
                "FUN_08009d78",
                "FUN_0800af78",
                "FUN_08001f00",
                "FUN_0800a5a0",
                "FUN_0800adf0",
                "FUN_0800a1bc",
                "FUN_08009b24",
                "FUN_0800a348"
            ],
            "imported": false,
            "current_name": "calculate_uint64_from_uint32_080082d0"
        },
        "FUN_08009318": {
            "renaming": {
                "FUN_08009318": "calculate_result_08009318",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "iVar1": "result",
                "uVar2": "temp_1",
                "uVar3": "temp_2",
                "bVar4": "carry",
                "uVar5": "output",
                "lVar6": "output",
                "shift_amount": "shift_amount",
                "exponent": "exponent",
                "DAT_08009400": "DAT_08009400",
                "DAT_08009404": "DAT_08009404",
                "DAT_08009408": "DAT_08009408",
                "DAT_0800940c": "DAT_0800940c"
            },
            "code": "long long calculate_result_08009318(uint32_t input_1, uint32_t input_2, uint32_t param_3, uint32_t param_4)\n{\n    int result;\n    uint32_t temp_1, temp_2, mask;\n    bool carry;\n    uint64_t output;\n    uint32_t shift_amount = (input_2 << 1) >> 0x15;\n    uint32_t exponent = shift_amount - 0x3FF;\n    if ((int)exponent < 0x14) {\n        if ((int)exponent < 0) {\n            output = FUN_080082d4(input_1, input_2, DAT_08009400, DAT_08009404, param_4);\n            result = FUN_08008b60((int)output, (int)(output >> 0x20), 0, 0);\n            output = ((uint64_t)input_2 << 32) | input_1;\n            if (result != 0) {\n                if ((int)input_2 < 0) {\n                    output = 0x8000000000000000;\n                }\n                else {\n                    input_1 |= input_2;\n                    output = ((uint64_t)input_1 << 32);\n                    if (input_1 != 0) {\n                        output = (uint64_t)DAT_0800940c << 0x20;\n                    }\n                }\n            }\n        }\n        else {\n            mask = DAT_08009408 >> (exponent & 0xFF);\n            output = ((uint64_t)input_2 << 32) | input_1;\n            if ((input_2 & mask | input_1) != 0) {\n                output = FUN_080082d4(input_1, input_2, DAT_08009400, DAT_08009404, param_4);\n                result = FUN_08008b60((int)output, (int)(output >> 0x20), 0, 0);\n                output = ((uint64_t)input_2 << 32) | input_1;\n                if (result != 0) {\n                    if (0 < (int)input_2) {\n                        input_2 = input_2 + (0x100000 >> (exponent & 0xFF));\n                    }\n                    else {\n                        carry = __builtin_uadd_overflow(mask, input_1, &temp_1);\n                        input_1 = temp_1;\n                        if (carry) {\n                            input_2 = input_2 + 1;\n                        }\n                    }\n                    output = ((uint64_t)(input_2 & ~mask) << 32);\n                }\n            }\n        }\n    }\n    else if ((int)exponent < 0x34) {\n        mask = 0xFFFFFFFF >> ((shift_amount - 0x413) & 0xFF);\n        output = ((uint64_t)input_2 << 32) | input_1;\n        if ((mask & input_1) != 0) {\n            output = FUN_080082d4(input_1, input_2, DAT_08009400, DAT_08009404, param_4);\n            result = FUN_08008b60((int)output, (int)(output >> 0x20), 0, 0);\n            output = ((uint64_t)input_2 << 32) | input_1;\n            if (result != 0) {\n                if (0 < (int)input_2) {\n                    if (exponent == 0x14) {\n                        input_2 = input_2 + 1;\n                    }\n                    else {\n                        mask = 1 << (0x34 - exponent & 0xFF);\n                        carry = __builtin_uadd_overflow(mask, input_1, &temp_1);\n                        input_1 = temp_1;\n                        if (carry) {\n                            input_2 = input_2 + 1;\n                        }\n                    }\n                }\n                output = ((uint64_t)input_2 << 32) | (input_1 & ~mask);\n            }\n        }\n    }\n    else {\n        output = ((uint64_t)input_2 << 32) | input_1;\n        if (exponent == 0x400) {\n            output = FUN_080082d4();\n        }\n    }\n    return output;\n}",
            "called": [
                "FUN_080082d4",
                "FUN_08008b60"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009318",
            "calling": [
                "FUN_08001994",
                "FUN_08003004",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_result_08009318"
        },
        "FUN_080018cc": {
            "renaming": {
                "FUN_080018cc": "update_param_080018cc",
                "param_1": "new_param",
                "DAT_080018f8": "PTR_data",
                "PTR_data": "ptr",
                "mask": "MASK",
                "old_param": "prev_param",
                "masked_old_param": "prev_param_masked",
                "updated_param": "new_param_updated"
            },
            "code": "void update_param_080018cc(uint new_param){\n    uint* PTR_data = (uint*)(DAT_080018f8 + 0x14);\n    uint old_param = *PTR_data;\n    uint mask = 0xfffffaaf;\n    uint masked_old_param = old_param & mask;\n    uint updated_param = new_param | masked_old_param;\n    *PTR_data = updated_param;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018cc",
            "calling": [
                "FUN_08001994"
            ],
            "imported": false,
            "current_name": "update_param_080018cc"
        },
        "FUN_080079e0": {
            "renaming": {
                "FUN_080079e0": "set_bit_in_array_080079e0",
                "param_1": "bit_index",
                "DAT_08007a0c": "array_ptr",
                "uint": "unsigned_int",
                "int": "signed_int",
                "char": "signed_char",
                "array_index": "index_of_array",
                "bit_mask": "mask_for_bit"
            },
            "code": "void set_bit_in_array_080079e0(int bit_index) {\n    int array_index = (uint)(int)(char)bit_index >> 5;\n    int* DAT_08007a0c = DAT_08007a0c + array_index * 4;\n    int bit_mask = 1 << (bit_index & 0x1f);\n    *DAT_08007a0c = bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080079e0",
            "calling": [
                "FUN_08007a70"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_080079e0"
        },
        "FUN_08006a58": {
            "renaming": {
                "FUN_08006a58": "set_bit_in_array_08006a58",
                "param_1": "bit_position",
                "PTR_DAT_08006a88": "array_ptr",
                "DAT_08006a88": "array_start"
            },
            "code": "void set_bit_in_array_08006a58(byte bit_position){\n    int* PTR_DAT_08006a88 = (int*)(DAT_08006a88 + (((uint)(int)(char)bit_position >> 5) + 0x40) * 4);\n    int bit_mask = 1 << (bit_position & 0x1f);\n    *PTR_DAT_08006a88 = bit_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006a58",
            "calling": [
                "FUN_08006dc4"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_08006a58"
        },
        "FUN_08005a84": {
            "renaming": {
                "FUN_08005a84": "get_value_from_pointer_08005a84",
                "PTR_DAT_08005a94": "ptr_value"
            },
            "code": "int get_value_from_pointer_08005a84() {\n    int* PTR_DAT_08005a94 = (int*)PTR_DAT_08005a94;\n    return *PTR_DAT_08005a94;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a84",
            "calling": [
                "FUN_0800618c",
                "FUN_08005a98",
                "FUN_08007756",
                "FUN_08005cec",
                "FUN_08000268"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08005a84"
        },
        "FUN_08008b10": {
            "renaming": {
                "FUN_08008b10": "check_input_validity_08008b10",
                "in_ZR": "input_char",
                "FUN_08008b00": "execute_input_validation"
            },
            "code": "bool check_input_validity_08008b10(void)\n{\n  char input_char;\n  execute_input_validation();\n  return input_char != '\\0';\n}",
            "called": [
                "FUN_08008b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b10",
            "calling": [
                "FUN_08009d78",
                "FUN_0800a5a0"
            ],
            "imported": false,
            "current_name": "check_input_validity_08008b10"
        },
        "FUN_08004e30": {
            "renaming": {
                "FUN_08004e30": "process_input_08004e30",
                "param_1": "input_type",
                "param_2": "input_value",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "uVar3": "result_3",
                "iVar4": "result_4",
                "uVar5": "result_5"
            },
            "code": "\nundefined4 process_input_08004e30(int input_type,uint input_value)\n\n{\n  undefined result_1;\n  undefined2 result_2;\n  undefined4 result_3;\n  int result_4;\n  undefined8 result_5;\n  \n  switch(input_type) {\n  case 0:\n  case 1:\n  case 2:\n    result_4 = FUN_0800923c(input_value,0);\n    if (result_4 != 0) {\n      return 8;\n    }\n    *(uint *)(PTR_DAT_080051a8 + input_type * 4) = input_value;\n    break;\n  case 3:\n    result_4 = FUN_08009228(input_value,DAT_080051ac);\n    if (result_4 != 0) {\n      return 9;\n    }\n    result_5 = FUN_08008590(input_value);\n    result_5 = FUN_08009654((int)result_5,(int)((ulonglong)result_5 >> 0x20));\n    result_1 = FUN_08008bf0((int)result_5,(int)((ulonglong)result_5 >> 0x20));\n    PTR_DAT_080051a8[0xd] = result_1;\n    break;\n  case 4:\n    *(uint *)(PTR_DAT_080051a8 + 0x10) = input_value;\n    break;\n  case 5:\n    *(uint *)(PTR_DAT_080051a8 + 0x14) = input_value;\n    break;\n  case 6:\n    result_5 = FUN_08008590(input_value);\n    result_5 = FUN_08009798((int)result_5,(int)((ulonglong)result_5 >> 0x20));\n    result_2 = FUN_08008bf0((int)result_5,(int)((ulonglong)result_5 >> 0x20));\n    *(undefined2 *)(PTR_DAT_080051a8 + 0x18) = result_2;\n    break;\n  case 7:\n    result_5 = FUN_08008590(input_value);\n    result_5 = FUN_08009654((int)result_5,(int)((ulonglong)result_5 >> 0x20));\n    result_1 = FUN_08008bf0((int)result_5,(int)((ulonglong)result_5 >> 0x20));\n    PTR_DAT_080051a8[0x3c] = result_1;\n    break;\n  case 8:\n    result_3 = FUN_08008eec(input_value,DAT_080051b0);\n    result_3 = FUN_08008eec(result_3,DAT_080051b0);\n    *(undefined4 *)(PTR_DAT_080051a8 + 0x20) = result_3;\n    break;\n  case 9:\n    *(uint *)(PTR_DAT_080051a8 + 0x24) = input_value & 0x7fffffff;\n    break;\n  case 10:\n    *(uint *)(PTR_DAT_080051a8 + 0x1c) = input_value;\n    break;\n  case 0xb:\n    result_5 = FUN_08008590(input_value);\n    result_5 = FUN_08009654((int)result_5,(int)((ulonglong)result_5 >> 0x20));\n    result_1 = FUN_08008bf0((int)result_5,(int)((ulonglong)result_5 >> 0x20));\n    PTR_DAT_080051a8[0x3e] = result_1;\n    break;\n  case 0xc:\n    result_5 = FUN_08008590(input_value);\n    result_5 = FUN_08009654((int)result_5,(int)((ulonglong)result_5 >> 0x20));\n    result_1 = FUN_08008bf0((int)result_5,(int)((ulonglong)result_5 >> 0x20));\n    PTR_DAT_080051a8[0x3d] = result_1;\n    break;\n  case 0xd:\n    result_4 = FUN_08009214(input_value,0);\n    if (result_4 == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 1;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xfe;\n    }\n    break;\n  case 0xe:\n    result_4 = FUN_08009214(input_value,0);\n    if (result_4 == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 2;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xfd;\n    }\n    break;\n  case 0xf:\n    result_4 = FUN_08009214(input_value,0);\n    if (result_4 == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 4;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xfb;\n    }\n    break;\n  case 0x10:\n    result_4 = FUN_08009214(input_value,0);\n    if (result_4 == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 8;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xf7;\n    }\n    FUN_0800192c();\n    break;\n  case 0x11:\n    result_4 = FUN_08009214(input_value,0);\n    if (result_4 == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 0x10;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xef;\n    }\n    break;\n  case 0x12:\n    result_5 = FUN_08008590(input_value);\n    result_5 = FUN_08009798((int)result_5,(int)((ulonglong)result_5 >> 0x20));\n    result_2 = FUN_08008bf0((int)result_5,(int)((ulonglong)result_5 >> 0x20));\n    *(undefined2 *)(PTR_DAT_080051a8 + 0x2a) = result_2;\n    break;\n  case 0x13:\n    *(uint *)(PTR_DAT_080051a8 + 0x2c) = input_value;\n    break;\n  case 0x14:\n    *(uint *)(PTR_DAT_080051a8 + 0x30) = input_value;\n    break;\n  case 0x15:\n    result_5 = FUN_08008590(input_value);\n    result_5 = FUN_08009654((int)result_5,(int)((ulonglong)result_5 >> 0x20));\n    result_2 = FUN_08008bf0((int)result_5,(int)((ulonglong)result_5 >> 0x20));\n    *(undefined2 *)(PTR_DAT_080051a8 + 0x34) = result_2;\n    break;\n  case 0x16:\n    *(uint *)(PTR_DAT_080051a8 + 0x38) = input_value;\n    break;\n  case 0x17:\n    result_5 = FUN_08008590(input_value);\n    result_5 = FUN_08009798((int)result_5,(int)((ulonglong)result_5 >> 0x20));\n    result_2 = FUN_08008bf0((int)result_5,(int)((ulonglong)result_5 >> 0x20));\n    *(undefined2 *)(PTR_DAT_080051a8 + 0x1a) = result_2;\n    break;\n  default:\n    return 6;\n  }\n  FUN_08004c2a();\n  return 0;\n}\n\n",
            "called": [
                "FUN_08008590",
                "FUN_0800192c",
                "FUN_08009214",
                "FUN_08009798",
                "FUN_08008bf0",
                "FUN_08009228",
                "FUN_08004c2a",
                "FUN_0800923c",
                "FUN_08009654",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e30",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "process_input_08004e30"
        },
        "FUN_08008c30": {
            "renaming": {
                "FUN_08008c30": "calculate_float_bits_08008c30",
                "param_1": "float_bits",
                "param_2": "float_bits_expanded",
                "uVar1": "result",
                "uVar2": "expanded_times_two",
                "uVar3": "expanded_plus_0x90000000",
                "in_r12": "expanded_plus_0x8fe00000",
                "bVar4": "is_result_zero",
                "bVar5": "is_expanded_less_than_0x70000000",
                "SCARRY4": "SCARRY4",
                "shift_amount": "shift_amount",
                "shifted_float_bits": "shifted_float_bits",
                "shifted_and_masked_expanded": "shifted_and_masked_expanded"
            },
            "code": "uint calculate_float_bits_08008c30(uint float_bits, uint float_bits_expanded) {\n  uint expanded_times_two = float_bits_expanded * 2;\n  bool is_expanded_less_than_0x70000000 = expanded_times_two < 0x70000000;\n  uint expanded_plus_0x90000000 = expanded_times_two + 0x90000000;\n  uint result = expanded_plus_0x90000000;\n  if (!is_expanded_less_than_0x70000000) {\n    uint expanded_plus_0x8fe00000 = expanded_times_two + 0x8fe00000;\n    result = expanded_plus_0x8fe00000;\n  }\n  bool is_result_zero = result == 0;\n  if (!is_expanded_less_than_0x70000000 && expanded_plus_0x90000000 >= 0x200000) {\n    is_result_zero = expanded_plus_0x8fe00000 == 0x1fc00000;\n  }\n  if (((is_expanded_less_than_0x70000000 || expanded_plus_0x90000000 < 0x200000) || 0x1fc00000 < expanded_plus_0x8fe00000) || is_result_zero) {\n    if ((float_bits_expanded & 0x40000000) != 0) {\n      if (((int)expanded_times_two >> 0x15 == -1) && ((float_bits | float_bits_expanded << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return float_bits_expanded & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(expanded_times_two + 0x92e00000) < 0 != SCARRY4(expanded_plus_0x90000000,0x2e00000)) {\n      return float_bits_expanded & 0x80000000;\n    }\n    uint shift_amount = 0x18 - (expanded_times_two + 0x92e00000 >> 0x15);\n    uint shifted_float_bits = float_bits >> (shift_amount & 0xff);\n    if (float_bits << (0x20 - shift_amount & 0xff) != 0) {\n      shifted_float_bits = shifted_float_bits | 1;\n    }\n    uint shifted_and_masked_expanded = (float_bits_expanded & 0x1fffff) | 0x100000;\n    float_bits = shifted_float_bits | shifted_and_masked_expanded << (0x20 - shift_amount & 0xff);\n    shifted_and_masked_expanded = (shifted_and_masked_expanded >> (shift_amount & 0xff)) << 1;\n  }\n  result = (float_bits_expanded & 0x80000000 | float_bits >> 0x1d) + shifted_and_masked_expanded * 4 + (uint)(0x7fffffff < float_bits * 8);\n  if (float_bits * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c30",
            "calling": [
                "FUN_08001994",
                "FUN_080046d0",
                "FUN_08004940",
                "FUN_080005b4",
                "FUN_08003004",
                "FUN_0800056c",
                "FUN_08002638",
                "FUN_08002978",
                "FUN_080044e8",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "calculate_float_bits_08008c30"
        },
        "FUN_080082d4": {
            "renaming": {
                "FUN_080082d4": "calculate_result_080082d4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "shifted_input_4",
                "bVar2": "least_significant_bit",
                "uVar3": "sum_1",
                "uVar4": "sum_2",
                "uVar5": "input_2_with_extra_bit",
                "iVar6": "shifted_input_2",
                "uVar7": "input_2_shifted",
                "uVar8": "input_1_with_extra_bit",
                "uVar9": "result_high",
                "uVar10": "result_low",
                "uVar11": "temp_1",
                "uVar12": "temp_2",
                "bVar13": "bool_1",
                "bVar14": "bool_2",
                "bVar15": "bool_3"
            },
            "code": "\nulonglong calculate_result_080082d4(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int shifted_input_4;\n  byte least_significant_bit;\n  uint sum_1;\n  uint sum_2;\n  uint input_2_with_extra_bit;\n  int shifted_input_2;\n  uint input_2_shifted;\n  uint input_1_with_extra_bit;\n  uint result_high;\n  uint result_low;\n  uint temp_1;\n  uint temp_2;\n  bool bool_1;\n  bool bool_2;\n  bool bool_3;\n  \n  input_2_shifted = input_2 << 1;\n  result_high = input_4 << 1;\n  bool_1 = ((input_2 ^ input_4) & 0x7fffffff) == 0;\n  bool_2 = bool_1 && input_1 == input_3;\n  if (!bool_1 || input_1 != input_3) {\n    bool_2 = (input_2_shifted | input_1) == 0;\n  }\n  if (!bool_2) {\n    bool_2 = (result_high | input_3) == 0;\n  }\n  shifted_input_2 = (int)input_2_shifted >> 0x15;\n  if (!bool_2) {\n    bool_2 = shifted_input_2 == -1;\n  }\n  shifted_input_4 = (int)result_high >> 0x15;\n  if (!bool_2) {\n    bool_2 = shifted_input_4 == -1;\n  }\n  if (bool_2) {\n    if (shifted_input_2 == -1 || shifted_input_4 == -1) {\n      result_high = input_4;\n      input_2_shifted = input_3;\n      if (shifted_input_2 == -1) {\n        result_high = input_2;\n        input_2_shifted = input_1;\n      }\n      if (shifted_input_2 != -1 || shifted_input_4 != -1) {\n        input_3 = input_2_shifted;\n        input_4 = result_high;\n      }\n      bool_2 = (input_2_shifted | result_high << 0xc) == 0;\n      if (bool_2) {\n        bool_2 = (input_3 | input_4 << 0xc) == 0;\n      }\n      if (bool_2) {\n        bool_2 = result_high == input_4;\n      }\n      if (!bool_2) {\n        result_high = result_high | 0x80000;\n      }\n      return CONCAT44(result_high,input_2_shifted);\n    }\n    if (((input_2 ^ input_4) & 0x7fffffff) != 0 || input_1 != input_3) {\n      if ((input_2_shifted | input_1) == 0) {\n        input_1 = input_3;\n        input_2 = input_4;\n      }\n      return CONCAT44(input_2,input_1);\n    }\n    if (input_2 != input_4) {\n      return 0;\n    }\n    if (input_2_shifted >> 0x15 == 0) {\n      bool_2 = (input_1 & 0x80000000) != 0;\n      result_high = input_2 * 2 + (uint)bool_2;\n      if (CARRY4(input_2,input_2) || CARRY4(input_2 * 2,(uint)bool_2)) {\n        result_high = result_high | 0x80000000;\n      }\n      return CONCAT44(result_high,input_1 << 1);\n    }\n    if (input_2_shifted < 0xffc00000) {\n      return CONCAT44(input_2 + 0x100000,input_1);\n    }\n    input_2 = input_2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(input_2 | 0x7ff00000) << 0x20;\n  }\n  input_2_shifted = input_2_shifted >> 0x15;\n  result_high = result_high >> 0x15;\n  result_low = result_high - input_2_shifted;\n  bool_2 = result_low != 0;\n  if (result_high < input_2_shifted) {\n    result_low = -result_low;\n  }\n  input_1_with_extra_bit = input_1;\n  input_2_with_extra_bit = input_2;\n  if (bool_2 && input_2_shifted <= result_high) {\n    input_2_shifted = input_2_shifted + result_low;\n    input_1_with_extra_bit = input_3;\n    input_2_with_extra_bit = input_4;\n    input_3 = input_1;\n    input_4 = input_2;\n  }\n  if (0x36 < result_low) {\n    return CONCAT44(input_2_with_extra_bit,input_1_with_extra_bit);\n  }\n  result_high = input_2_with_extra_bit & 0xfffff | 0x100000;\n  if ((input_2_with_extra_bit & 0x80000000) != 0) {\n    bool_2 = input_1_with_extra_bit != 0;\n    input_1_with_extra_bit = -input_1_with_extra_bit;\n    result_high = -result_high - (uint)bool_2;\n  }\n  input_2_with_extra_bit = input_4 & 0xfffff | 0x100000;\n  if ((input_4 & 0x80000000) != 0) {\n    bool_2 = input_3 != 0;\n    input_3 = -input_3;\n    input_2_with_extra_bit = -input_2_with_extra_bit - (uint)bool_2;\n  }\n  if (input_2_shifted == result_low) {\n    input_2_with_extra_bit = input_2_with_extra_bit ^ 0x100000;\n    if (input_2_shifted == 0) {\n      result_high = result_high ^ 0x100000;\n      input_2_shifted = 1;\n    }\n    else {\n      result_low = result_low - 1;\n    }\n  }\n  temp_2 = -result_low + 0x20;\n  if ((int)result_low < 0x21) {\n    temp_1 = input_3 << (temp_2 & 0xff);\n    input_3 = input_3 >> (result_low & 0xff);\n    sum_1 = input_1_with_extra_bit + input_3;\n    sum_2 = input_2_with_extra_bit << (temp_2 & 0xff);\n    temp_2 = sum_1 + sum_2;\n    result_high = result_high + CARRY4(input_1_with_extra_bit,input_3) + ((int)input_2_with_extra_bit >> (result_low & 0xff)) +\n            (uint)CARRY4(sum_1,sum_2);\n  }\n  else {\n    temp_1 = input_2_with_extra_bit << (-result_low + 0x40 & 0xff);\n    if (input_3 != 0) {\n      temp_1 = temp_1 | 2;\n    }\n    input_2_with_extra_bit = (int)input_2_with_extra_bit >> (result_low - 0x20 & 0xff);\n    temp_2 = input_1_with_extra_bit + input_2_with_extra_bit;\n    result_high = result_high + ((int)input_2_with_extra_bit >> 0x1f) + (uint)CARRY4(input_1_with_extra_bit,input_2_with_extra_bit);\n  }\n  input_2 = result_high & 0x80000000;\n  result_low = result_high;\n  if ((int)result_high < 0) {\n    bool_2 = temp_1 == 0;\n    temp_1 = -temp_1;\n    result_low = -temp_2;\n    temp_2 = -(uint)!bool_2 - temp_2;\n    result_low = -(uint)(bool_2 <= result_low) - result_high;\n  }\n  if (0xfffff < result_low) {\n    input_1_with_extra_bit = input_2_shifted - 1;\n    if (0x1fffff < result_low) {\n      result_high = result_low & 1;\n      result_low = result_low >> 1;\n      least_significant_bit = (byte)temp_2;\n      temp_2 = (uint)(result_high != 0) << 0x1f | temp_2 >> 1;\n      temp_1 = (uint)(least_significant_bit & 1) << 0x1f | temp_1 >> 1;\n      input_1_with_extra_bit = input_2_shifted;\n      if (0xffbfffff < input_2_shifted * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    bool_2 = 0x7fffffff < temp_1;\n    if (temp_1 == 0x80000000) {\n      bool_2 = (temp_2 & 1) != 0;\n    }\n    return CONCAT44(result_low + input_1_with_extra_bit * 0x100000 + (uint)CARRY4(temp_2,(uint)bool_2) | input_2,\n                    temp_2 + bool_2);\n  }\n  bool_1 = (temp_1 & 0x80000000) != 0;\n  temp_1 = temp_1 << 1;\n  input_1_with_extra_bit = temp_2 * 2;\n  bool_2 = CARRY4(temp_2,temp_2);\n  temp_2 = temp_2 * 2 + (uint)bool_1;\n  result_low = result_low * 2 + (uint)(bool_2 || CARRY4(input_1_with_extra_bit,(uint)bool_1));\n  input_1_with_extra_bit = input_2_shifted - 2;\n  if (input_2_shifted - 1 != 0 && 0xfffff < result_low) goto LAB_080083e0;\n  input_2_with_extra_bit = temp_2;\n  input_2_shifted = result_low;\n  if (result_low == 0) {\n    input_2_with_extra_bit = 0;\n    input_2_shifted = temp_2;\n  }\n  shifted_input_2 = count_leading_zeroes(input_2_shifted);\n  if (result_low == 0) {\n    shifted_input_2 = shifted_input_2 + 0x20;\n  }\n  temp_2 = shifted_input_2 - 0xb;\n  bool_3 = SBORROW4(temp_2,0x20);\n  result_low = shifted_input_2 - 0x2b;\n  bool_2 = (int)result_low < 0;\n  bool_1 = result_low == 0;\n  if ((int)temp_2 < 0x20) {\n    bool_3 = SCARRY4(result_low,0xc);\n    shifted_input_2 = shifted_input_2 + -0x1f;\n    bool_2 = shifted_input_2 < 0;\n    bool_1 = shifted_input_2 == 0;\n    result_low = temp_2;\n    if (!bool_1 && bool_2 == bool_3) {\n      input_2_with_extra_bit = input_2_shifted << (temp_2 & 0xff);\n      input_2_shifted = input_2_shifted >> (0xcU - shifted_input_2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (bool_1 || bool_2 != bool_3) {\n    temp_1 = 0x20 - result_low;\n  }\n  input_2_shifted = input_2_shifted << (result_low & 0xff);\n  if (bool_1 || bool_2 != bool_3) {\n    input_2_shifted = input_2_shifted | input_2_with_extra_bit >> (temp_1 & 0xff);\n  }\n  if (bool_1 || bool_2 != bool_3) {\n    input_2_with_extra_bit = input_2_with_extra_bit << (result_low & 0xff);\n  }\nLAB_08008458:\n  if ((int)temp_2 <= (int)input_1_with_extra_bit) {\n    return CONCAT44(input_2_shifted + (input_1_with_extra_bit - temp_2) * 0x100000 | input_2,input_2_with_extra_bit);\n  }\n  result_low = ~(input_1_with_extra_bit - temp_2);\n  if ((int)result_low < 0x1f) {\n    shifted_input_2 = result_low - 0x13;\n    if (shifted_input_2 != 0 && shifted_input_2 < 0 == SCARRY4(result_low - 0x1f,0xc)) {\n      return CONCAT44(result_high,input_2_with_extra_bit >> (0x20 - (0xcU - shifted_input_2) & 0xff) | input_2_shifted << (0xcU - shifted_input_2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    result_low = result_low + 1;\n    return CONCAT44(input_2 | input_2_shifted >> (result_low & 0xff),\n                    input_2_with_extra_bit >> (result_low & 0xff) | input_2_shifted << (0x20 - result_low & 0xff));\n  }\n  return CONCAT44(result_high,input_2_shifted >> (result_low - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080082d4",
            "calling": [
                "FUN_08009318",
                "FUN_080094c0",
                "FUN_08009990",
                "FUN_08009d78",
                "FUN_0800af78",
                "FUN_0800b2e8",
                "FUN_08001f00",
                "FUN_0800a5a0",
                "FUN_0800adf0",
                "FUN_0800a1bc",
                "FUN_08009b24",
                "FUN_08009798",
                "FUN_0800a348",
                "FUN_08009654"
            ],
            "imported": false,
            "current_name": "calculate_result_080082d4"
        },
        "FUN_08007bf0": {
            "renaming": {
                "FUN_08007bf0": "set_lowest_value_08007bf0",
                "param_1": "value",
                "_DAT_4000002c": "lowest_value_ptr",
                "DAT_40000024": "lowest_value_seen"
            },
            "code": "void set_lowest_value_08007bf0(uint value)\n{\n  DAT_4000002c = value;\n  if (value <= DAT_40000024) {\n    DAT_40000024 = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007bf0",
            "calling": [
                "FUN_08005324"
            ],
            "imported": false,
            "current_name": "set_lowest_value_08007bf0"
        },
        "FUN_08008590": {
            "renaming": {
                "FUN_08008590": "decode_uint64_08008590",
                "param_1": "input",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "mask1",
                "uVar2": "output2",
                "uVar3": "output1",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar7": "shift1",
                "in_r12": "shift2",
                "bVar8": "is_shift2_negative",
                "bVar9": "is_shift2_zero",
                "bVar10": "is_shift1_negative",
                "is_zero": "is_input_zero",
                "is_mask2": "is_input_mask2",
                "leading_zeroes": "num_leading_zeroes",
                "count_leading_zeroes": "count_leading_zeroes"
            },
            "code": "ulonglong decode_uint64_08008590(uint input, undefined4 param_2, undefined4 param_3, uint param_4)\n{\n  uint mask1 = 0x80000000;\n  uint mask2 = 0xff000000;\n  uint output1;\n  uint output2;\n  bool is_zero = input << 1 == 0;\n  bool is_mask2 = (input << 1 & mask2) == mask2;\n  uint temp1 = (input << 1) >> 3 >> 1;\n  output1 = mask1 | temp1;\n  input = input << 0x1d;\n  if (!is_zero && !is_mask2)\n  {\n    return (output1 << 32) | input ^ 0x3800000000000000;\n  }\n  if ((input << 1 & 0xffffff) == 0)\n  {\n    return (output1 << 32) | input;\n  }\n  if (is_mask2)\n  {\n    return (output1 << 32) | input | 0x8000000000000;\n  }\n  uint temp2 = temp1 == 0 ? input : 0;\n  int leading_zeroes = temp1 == 0 ? count_leading_zeroes(input) + 0x20 : count_leading_zeroes(temp1);\n  uint shift1 = leading_zeroes - 0xb;\n  uint shift2 = leading_zeroes - 0x2b;\n  if (leading_zeroes < 0x20)\n  {\n    output2 = temp1 << (shift1 & 0xff);\n    temp1 = temp1 >> (0xcU - leading_zeroes & 0xff);\n  }\n  else if (shift2 >= 0 && ((shift2 == 0) || (shift2 < 0) != (shift1 < 0)))\n  {\n    output2 = temp1 << (shift1 & 0xff);\n    temp1 = temp1 >> (shift2 & 0xff);\n    input = input << (shift1 & 0xff);\n  }\n  else\n  {\n    output2 = temp1 >> (0x20 - (0xcU - shift2) & 0xff) | input << (0xcU - shift2 & 0xff);\n  }\n  if (leading_zeroes < 0x381)\n  {\n    return (output2 + (0x380 - leading_zeroes) * 0x100000 | mask1) << 32 | input;\n  }\n  uint shift3 = ~(0x380 - leading_zeroes);\n  if (shift3 > 0x1e)\n  {\n    return (output1 << 32) | output2 >> (shift3 - 0x1f & 0xff) & 0x80000000ffffffff;\n  }\n  int shift4 = shift3 - 0x13;\n  if (shift4 == 0 || (shift4 < 0) != (shift3 - 0x1f < 0xc))\n  {\n    shift3 = shift3 + 1;\n    return (mask1 | output2 >> (shift3 & 0xff)) << 32 | input >> (0x20 - shift3 & 0xff) | output2 << (shift3 - 0x20 & 0xff);\n  }\n  return (output1 << 32) | input >> (0x20 - (0xcU - shift4) & 0xff) | output2 << (0xcU - shift4 & 0xff) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008590",
            "calling": [
                "FUN_080046d0",
                "FUN_08004940",
                "FUN_08003004",
                "FUN_0800056c",
                "FUN_08002638",
                "FUN_08002978",
                "FUN_08004e30",
                "FUN_08001f00",
                "FUN_08003b98",
                "FUN_08002c18",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_080044e8",
                "FUN_08002408"
            ],
            "imported": false,
            "current_name": "decode_uint64_08008590"
        },
        "FUN_08007ad0": {
            "renaming": {
                "FUN_08007ad0": "initialize_data_registers_08007ad0",
                "_DAT_40000000": "global_data_4",
                "_DAT_40000004": "global_data_5",
                "_DAT_40000008": "global_data_6",
                "_DAT_4000000c": "global_data_7",
                "_DAT_40000010": "global_data_8",
                "_DAT_40000018": "global_data_9",
                "_DAT_4000001c": "global_data_10",
                "_DAT_40000020": "global_data_11",
                "_DAT_40000024": "global_data_12",
                "_DAT_40000028": "global_data_3",
                "_DAT_4000002c": "global_data_13",
                "_DAT_40000034": "global_data_14",
                "_DAT_40000038": "global_data_15",
                "_DAT_4000003c": "global_data_16",
                "_DAT_40000040": "global_data_17",
                "_DAT_40000048": "global_data_18",
                "_DAT_4000004c": "global_data_19",
                "FUN_08007a10": "initialize_memory_block",
                "DAT_08007b6c": "global_data_1",
                "PTR_DAT_08007b68": "global_data_2",
                "FUN_08007a70": "initialize_memory_block"
            },
            "code": "void initialize_data_registers_08007ad0(void)\n{\n    uint64_t product = (uint64_t)DAT_08007b6c * (uint64_t)*PTR_DAT_08007b68;\n    uint32_t result = (uint32_t)(product >> 56) - 1;\n    _DAT_40000028 = result;\n    _DAT_40000000 = 0;\n    _DAT_40000004 = 0;\n    _DAT_40000008 = 0;\n    _DAT_4000000c = 0;\n    _DAT_40000010 = 0;\n    _DAT_40000018 = 0;\n    _DAT_4000001c = 0;\n    _DAT_40000020 = 0;\n    _DAT_40000024 = 0;\n    _DAT_4000002c = 0;\n    _DAT_40000034 = 0;\n    _DAT_40000038 = 0;\n    _DAT_4000003c = 0;\n    _DAT_40000040 = 0;\n    initialize_memory_block((void*)DAT_08007b6c, 0, 0);\n}\n",
            "called": [
                "FUN_08007a10",
                "FUN_08007a70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ad0",
            "calling": [
                "FUN_08007e08"
            ],
            "imported": false,
            "current_name": "initialize_data_registers_08007ad0"
        },
        "FUN_080005b4": {
            "renaming": {
                "FUN_080005b4": "FUNC_080005b4"
            },
            "code": "\nuint FUNC_080005b4(undefined4 param_1)\n\n{\n  undefined *puVar1;\n  undefined uVar2;\n  int iVar3;\n  undefined4 uVar4;\n  uint uVar5;\n  undefined4 uVar6;\n  undefined8 uVar7;\n  undefined4 local_94 [4];\n  undefined4 local_84;\n  undefined4 local_80;\n  undefined4 local_7c;\n  undefined4 uStack_78;\n  undefined4 uStack_74;\n  undefined4 auStack_70 [6];\n  undefined4 local_58;\n  byte local_52;\n  undefined local_51 [20];\n  byte local_3d;\n  byte local_3c;\n  byte local_3b;\n  byte local_3a;\n  char local_39;\n  undefined4 local_38;\n  undefined4 local_34;\n  sbyte local_2f;\n  char local_2e;\n  char local_2d;\n  undefined4 local_2c;\n  byte local_27;\n  ushort local_26;\n  uint local_24;\n  \n  if (PTR_DAT_08000808[1] == '\\x06') {\n    uVar5 = 0xc;\n  }\n  else {\n    local_51[0] = 0;\n    local_26 = 0;\n    local_27 = 0;\n    local_2c = DAT_0800080c;\n    local_2d = '\\0';\n    local_2e = '\\0';\n    FUN_0800b430(auStack_70 + 3,0,0xc);\n    FUN_0800b430(auStack_70,0,0xc);\n    *PTR_DAT_08000810 = 0;\n    local_2f = 0;\n    while (iVar3 = FUN_0800184c(&local_52,auStack_70 + 6,param_1,local_51), iVar3 != 0) {\n      uVar7 = FUN_08008590(local_58);\n      uVar7 = FUN_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n      local_24 = FUN_08008ba0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n      if (local_52 == 0x47) {\n        switch(local_24) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 0x50:\n          local_2f = 2;\n          break;\n        case 4:\n        case 10:\n        case 0x1c:\n        case 0x1e:\n        case 0x35:\n        case 0x5c:\n          local_2f = 1;\n          break;\n        case 0x11:\n        case 0x12:\n        case 0x13:\n          local_2f = 3;\n          break;\n        case 0x14:\n        case 0x15:\n          local_2f = 7;\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          local_2f = 9;\n          break;\n        case 0x5a:\n        case 0x5b:\n          local_2f = 4;\n          break;\n        case 0x5d:\n        case 0x5e:\n          local_2f = 6;\n        }\n        switch(local_24) {\n        case 0:\n          PTR_DAT_08000ca0[1] = 0;\n          break;\n        case 1:\n          PTR_DAT_08000ca0[1] = 1;\n          break;\n        case 2:\n          PTR_DAT_08000ca0[1] = 2;\n          break;\n        case 3:\n          PTR_DAT_08000ca0[1] = 3;\n          break;\n        case 4:\n          local_2e = '\\x01';\n          break;\n        default:\n          *PTR_DAT_08000ca0 = 3;\n          break;\n        case 10:\n          local_2e = '\\x02';\n          break;\n        case 0x11:\n          FUN_08000478(0,1,2);\n          break;\n        case 0x12:\n          FUN_08000478(2,0,1);\n          break;\n        case 0x13:\n          FUN_08000478(1,2,0);\n          break;\n        case 0x14:\n          PTR_DAT_08000ca0[3] = 1;\n          break;\n        case 0x15:\n          PTR_DAT_08000ca0[3] = 0;\n          break;\n        case 0x1c:\n        case 0x1e:\n          uVar4 = FUN_08008eec(local_58,DAT_08000ca4);\n          uVar7 = FUN_08008590(uVar4);\n          uVar7 = FUN_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          local_24 = FUN_08008ba0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          switch(local_24) {\n          case 0x118:\n            local_2e = '\\x03';\n            break;\n          case 0x119:\n            local_2e = '\\x04';\n            break;\n          default:\n            *PTR_DAT_08000ca0 = 3;\n            break;\n          case 300:\n            local_2e = '\\x05';\n            break;\n          case 0x12d:\n            local_2e = '\\x06';\n          }\n          break;\n        case 0x35:\n          local_2d = '\\x01';\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          PTR_DAT_08000ca0[0x1c] = (char)local_24 + -0x36;\n          break;\n        case 0x50:\n          PTR_DAT_08000ca0[1] = 4;\n          break;\n        case 0x5a:\n          PTR_DAT_08000ca0[4] = 1;\n          break;\n        case 0x5b:\n          PTR_DAT_08000ca0[4] = 0;\n          break;\n        case 0x5c:\n          uVar4 = FUN_08008eec(local_58,DAT_08000ca4);\n          uVar7 = FUN_08008590(uVar4);\n          uVar7 = FUN_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          local_24 = FUN_08008ba0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          if (local_24 == 0x398) {\n            local_2e = '\\a';\n          }\n          else if (local_24 == 0x399) {\n            local_2e = '\\b';\n          }\n          else {\n            *PTR_DAT_08000ca0 = 3;\n          }\n          break;\n        case 0x5d:\n          PTR_DAT_08000ca0[2] = 1;\n          break;\n        case 0x5e:\n          PTR_DAT_08000ca0[2] = 0;\n        }\n      }\n      else if (local_52 == 0x4d) {\n        if (local_24 == 0x1e) {\nLAB_08000b96:\n          local_2f = 5;\n        }\n        else if ((int)local_24 < 0x1f) {\n          if ((int)local_24 < 3) {\n            if (-1 < (int)local_24) goto LAB_08000b96;\n          }\n          else if (local_24 - 3 < 3) {\n            local_2f = 8;\n          }\n        }\n        switch(local_24) {\n        case 0:\n          PTR_DAT_08000ca0[5] = 1;\n          break;\n        case 1:\n          break;\n        case 2:\n        case 0x1e:\n          PTR_DAT_08000ca0[5] = 2;\n          break;\n        case 3:\n          PTR_DAT_08000ca0[6] = 1;\n          break;\n        case 4:\n          PTR_DAT_08000ca0[6] = 0xff;\n          break;\n        case 5:\n          PTR_DAT_08000ca0[6] = 0;\n          break;\n        default:\n          *PTR_DAT_08000ca0 = 3;\n          break;\n        case 7:\n          PTR_DAT_08000ca0[7] = 2;\n          break;\n        case 8:\n          PTR_DAT_08000ca0[7] = 1;\n          break;\n        case 9:\n          PTR_DAT_08000ca0[7] = 0;\n        }\n      }\n      if (local_2f != 0) {\n        if (((int)(uint)local_26 >> local_2f & 1U) == 0) {\n          local_26 = local_26 | (ushort)(1 << local_2f);\n        }\n        else {\n          *PTR_DAT_08000ca0 = 5;\n        }\n        local_2f = 0;\n      }\n    }\n    if (*PTR_DAT_08000ff0 == '\\0') {\n      local_34 = 0;\n      local_38 = 0;\n      local_39 = '\\0';\n      local_51[0] = 0;\nswitchD_08000d18_caseD_47:\n      iVar3 = FUN_0800184c(&local_52,auStack_70 + 6,param_1,local_51);\n      if (iVar3 != 0) {\n        switch(local_52) {\n        case 0x46:\n          iVar3 = FUN_0800923c(local_58,0);\n          if (iVar3 != 0) {\n            *PTR_DAT_08000ff0 = 6;\n          }\n          if (PTR_DAT_08000ff0[2] == '\\0') {\n            uVar4 = FUN_0800056c(local_58);\n            *(undefined4 *)(PTR_DAT_08000ff0 + 8) = uVar4;\n          }\n          else {\n            local_2c = FUN_0800056c(local_58);\n          }\n          break;\n        case 0x47:\n        case 0x4d:\n        case 0x4e:\n          break;\n        default:\n          *PTR_DAT_08000ff0 = 3;\n          break;\n        case 0x49:\n        case 0x4a:\n        case 0x4b:\n          uVar5 = (uint)local_52;\n          uVar4 = FUN_0800056c(local_58);\n          auStack_70[uVar5 - 0x49] = uVar4;\n          break;\n        case 0x4c:\n          uVar7 = FUN_08008590(local_58);\n          uVar7 = FUN_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          local_39 = FUN_08008bf0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          break;\n        case 0x50:\n          local_34 = local_58;\n          break;\n        case 0x52:\n          local_38 = FUN_0800056c(local_58);\n          break;\n        case 0x53:\n          iVar3 = FUN_08009228(local_58,0);\n          if (iVar3 != 0) {\n            *PTR_DAT_08000ff0 = 6;\n          }\n          break;\n        case 0x54:\n          iVar3 = FUN_08009228(local_58,0);\n          if (iVar3 != 0) {\n            *PTR_DAT_08000ff0 = 6;\n          }\n          uVar7 = FUN_08008590(local_58);\n          uVar7 = FUN_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          uVar2 = FUN_08008bf0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          PTR_DAT_08000ff0[0x18] = uVar2;\n          break;\n        case 0x58:\n          auStack_70[3] = FUN_0800056c(local_58);\n          local_27 = local_27 | 1;\n          break;\n        case 0x59:\n          auStack_70[4] = FUN_0800056c(local_58);\n          local_27 = local_27 | 2;\n          break;\n        case 0x5a:\n          auStack_70[5] = FUN_0800056c(local_58);\n          local_27 = local_27 | 4;\n        }\n        goto switchD_08000d18_caseD_47;\n      }\n      if (*PTR_DAT_08000ff0 == '\\0') {\n        if (PTR_DAT_08000ff4[1] != '\\a') {\n          FUN_0800525c((int)(char)PTR_DAT_08000ff0[6]);\n          FUN_08000220(PTR_DAT_08000ff0[7]);\n        }\n        if ((local_26 & 0x200) != 0) {\n          iVar3 = FUN_08004d7c(PTR_DAT_08000ff0[0x1c],&local_7c);\n          puVar1 = PTR_DAT_08000ff0;\n          if (iVar3 == 0) {\n            return 10;\n          }\n          *(undefined4 *)(PTR_DAT_08000ff0 + 0x20) = local_7c;\n          *(undefined4 *)(puVar1 + 0x24) = uStack_78;\n          *(undefined4 *)(puVar1 + 0x28) = uStack_74;\n        }\n        switch(local_2e) {\n        case '\\x01':\n          iVar3 = FUN_08009228(local_34,0);\n          if (iVar3 == 0) {\n            if (PTR_DAT_08000ff4[1] != '\\a') {\n              FUN_08002408(local_34);\n            }\n          }\n          else {\n            *PTR_DAT_08000ff0 = 6;\n          }\n          break;\n        case '\\x02':\n          uVar7 = FUN_08008590(local_34);\n          uVar7 = FUN_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          local_24 = FUN_08008ba0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          if ((((local_39 == '\\x02') || (local_39 == '\\x14')) && (-1 < (int)local_24)) &&\n             ((int)local_24 < 7)) {\n            if ((local_27 == 0) && (local_39 == '\\x02')) {\n              *PTR_DAT_08000ff0 = 6;\n            }\n            else {\n              if ((int)local_24 < 1) {\n                local_24 = (uint)(byte)PTR_DAT_08001304[0x1c];\n              }\n              else {\n                local_24 = local_24 - 1;\n              }\n              iVar3 = FUN_08004d7c(local_24 & 0xff,local_94);\n              if (iVar3 == 0) {\n                return 10;\n              }\n              for (local_3a = 0; local_3a < 3; local_3a = local_3a + 1) {\n                if (((int)(uint)local_27 >> local_3a & 1U) != 0) {\n                  if (local_39 == '\\x14') {\n                    uVar5 = (uint)local_3a;\n                    uVar4 = FUN_08008cd8(*(undefined4 *)(PTR_DAT_08001304 + (local_3a + 2) * 4 + 4),\n                                         auStack_70[local_3a + 3]);\n                    local_94[uVar5] = uVar4;\n                  }\n                  else {\n                    local_94[local_3a] = auStack_70[local_3a + 3];\n                  }\n                }\n              }\n              FUN_08004bf4(local_24 & 0xff,local_94);\n              puVar1 = PTR_DAT_08001304;\n              if (local_24 == (byte)PTR_DAT_08001304[0x1c]) {\n                *(undefined4 *)(PTR_DAT_08001304 + 0x20) = local_94[0];\n                *(undefined4 *)(puVar1 + 0x24) = local_94[1];\n                *(undefined4 *)(puVar1 + 0x28) = local_94[2];\n              }\n            }\n          }\n          else {\n            *PTR_DAT_08000ff0 = 3;\n          }\n          local_27 = 0;\n          break;\n        case '\\x03':\n        case '\\x05':\n          if (local_27 != 0) {\n            for (local_3b = 0; local_3b < 3; local_3b = local_3b + 1) {\n              if (((int)(uint)local_27 >> local_3b & 1U) == 0) {\n                auStack_70[local_3b + 3] =\n                     *(undefined4 *)(PTR_DAT_08001304 + (local_3b + 2) * 4 + 4);\n              }\n              else if (PTR_DAT_08001304[4] == '\\0') {\n                uVar5 = (uint)local_3b;\n                uVar4 = FUN_08008cdc(auStack_70[local_3b + 3],\n                                     *(undefined4 *)(PTR_DAT_08001304 + (local_3b + 2) * 4 + 4));\n                auStack_70[uVar5 + 3] = uVar4;\n              }\n              else {\n                uVar6 = auStack_70[local_3b + 3];\n                uVar4 = FUN_08008cdc(*(undefined4 *)(PTR_DAT_08001304 + (local_3b + 8) * 4),\n                                     *(undefined4 *)(PTR_DAT_08001304 + (local_3b + 10) * 4 + 4));\n                uVar5 = (uint)local_3b;\n                uVar4 = FUN_08008cdc(uVar6,uVar4);\n                auStack_70[uVar5 + 3] = uVar4;\n              }\n            }\n            FUN_08001e98(auStack_70[3],auStack_70[4],auStack_70[5],\n                         *(undefined4 *)(PTR_DAT_08001308 + 0x14),0);\n          }\n          if (local_2e == '\\x05') {\n            iVar3 = FUN_08004d7c(7,local_94 + 3);\n            if (iVar3 == 0) {\n              return 10;\n            }\n          }\n          else {\n            iVar3 = FUN_08004d7c(6,local_94 + 3);\n            if (iVar3 == 0) {\n              return 10;\n            }\n          }\n          FUN_08001e98(local_94[3],local_84,local_80,*(undefined4 *)(PTR_DAT_08001308 + 0x14),0);\n          puVar1 = PTR_DAT_08001304;\n          *(undefined4 *)(PTR_DAT_08001304 + 0xc) = local_94[3];\n          *(undefined4 *)(puVar1 + 0x10) = local_84;\n          *(undefined4 *)(puVar1 + 0x14) = local_80;\n          local_27 = 0;\n          break;\n        case '\\x04':\n        case '\\x06':\n          if (local_2e == '\\x06') {\n            FUN_08004bf4(7,PTR_DAT_0800130c);\n          }\n          else {\n            FUN_08004bf4(6,PTR_DAT_0800130c);\n          }\n          break;\n        case '\\a':\n          if (local_27 == 0) {\n            *PTR_DAT_08001304 = 6;\n          }\n          else {\n            for (local_3c = 0; local_3c < 3; local_3c = local_3c + 1) {\n              if (((int)(uint)local_27 >> local_3c & 1U) != 0) {\n                uVar4 = FUN_08008cd8(*(undefined4 *)(PTR_DAT_08001304 + (local_3c + 2) * 4 + 4),\n                                     *(undefined4 *)(PTR_DAT_08001304 + (local_3c + 8) * 4));\n                uVar5 = (uint)local_3c;\n                uVar4 = FUN_08008cd8(uVar4,auStack_70[local_3c + 3]);\n                *(undefined4 *)(PTR_DAT_08001304 + (uVar5 + 10) * 4 + 4) = uVar4;\n              }\n            }\n          }\n          local_27 = 0;\n          break;\n        case '\\b':\n          FUN_0800b430(PTR_DAT_08001310,0,0xc);\n        }\n        if (((local_26 & 4) != 0) || (local_27 != 0)) {\n          if ((PTR_DAT_08001574[2] != '\\0') &&\n             ((iVar3 = FUN_08009228(local_2c,0), iVar3 != 0 && (PTR_DAT_08001574[1] != '\\x04')))) {\n            *PTR_DAT_08001574 = 6;\n          }\n          if (((local_2d != '\\0') && (PTR_DAT_08001574[1] != '\\0')) &&\n             (PTR_DAT_08001574[1] != '\\x01')) {\n            *PTR_DAT_08001574 = 6;\n          }\n          if (*PTR_DAT_08001574 != '\\0') {\n            return (uint)(byte)*PTR_DAT_08001574;\n          }\n          for (local_3d = 0; puVar1 = PTR_DAT_08001840, local_3d < 3; local_3d = local_3d + 1) {\n            if (((int)(uint)local_27 >> local_3d & 1U) == 0) {\n              auStack_70[local_3d + 3] = *(undefined4 *)(PTR_DAT_08001574 + (local_3d + 2) * 4 + 4);\n            }\n            else if (local_2d == '\\0') {\n              if (PTR_DAT_08001574[4] == '\\0') {\n                uVar5 = (uint)local_3d;\n                uVar4 = FUN_08008cdc(auStack_70[local_3d + 3],\n                                     *(undefined4 *)(PTR_DAT_08001574 + (local_3d + 2) * 4 + 4));\n                auStack_70[uVar5 + 3] = uVar4;\n              }\n              else {\n                uVar6 = auStack_70[local_3d + 3];\n                uVar4 = FUN_08008cdc(*(undefined4 *)(PTR_DAT_08001574 + (local_3d + 8) * 4),\n                                     *(undefined4 *)(PTR_DAT_08001574 + (local_3d + 10) * 4 + 4));\n                uVar5 = (uint)local_3d;\n                uVar4 = FUN_08008cdc(uVar6,uVar4);\n                auStack_70[uVar5 + 3] = uVar4;\n              }\n            }\n          }\n          if ((byte)PTR_DAT_08001574[1] < 5) {\n                    /* WARNING: Could not recover jumptable at 0x08001474. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n            uVar5 = (*(code *)(&switchD_08001474::switchdataD_08001478)[(byte)PTR_DAT_08001574[1]])\n                              ();\n            return uVar5;\n          }\n          if (*PTR_DAT_08001840 != '\\0') {\n            return (uint)(byte)*PTR_DAT_08001840;\n          }\n          *(undefined4 *)(PTR_DAT_08001840 + 0xc) = auStack_70[3];\n          *(undefined4 *)(puVar1 + 0x10) = auStack_70[4];\n          *(undefined4 *)(puVar1 + 0x14) = auStack_70[5];\n        }\n        if (PTR_DAT_08001840[5] != '\\0') {\n          FUN_08002fd4();\n          PTR_DAT_08001848[0x10] = 0;\n          if (PTR_DAT_08001840[5] == '\\x02') {\n            FUN_080025e8();\n          }\n          else {\n            PTR_DAT_08001840[5] = 0;\n          }\n        }\n        uVar5 = (uint)(byte)*PTR_DAT_08001840;\n      }\n      else {\n        uVar5 = (uint)(byte)*PTR_DAT_08000ff0;\n      }\n    }\n    else {\n      uVar5 = (uint)(byte)*PTR_DAT_08000ff0;\n    }\n  }\n  return uVar5;\n}\n\n",
            "called": [
                "FUN_08002fd4",
                "FUN_08008590",
                "FUN_08008bf0",
                "FUN_08000220",
                "FUN_08004d7c",
                "FUN_0800b430",
                "FUN_08001f00",
                "FUN_080025e8",
                "FUN_08001e98",
                "FUN_08000478",
                "FUN_08009798",
                "FUN_08009214",
                "FUN_08008cd8",
                "FUN_0800981c",
                "FUN_08008eec",
                "FUN_0800525c",
                "FUN_08004bf4",
                "FUN_080098d0",
                "FUN_08009228",
                "FUN_0800056c",
                "FUN_08008cdc",
                "FUN_08008c30",
                "FUN_08008ba0",
                "FUN_0800184c",
                "FUN_0800923c",
                "FUN_08008894",
                "FUN_08002408"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080005b4",
            "calling": [
                "FUN_080039bc",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "FUNC_080005b4"
        },
        "FUN_080039a0": {
            "renaming": {
                "FUN_080039a0": "initialize_system_080039a0",
                "FUN_08003980": "initialize_network",
                "FUN_08004228": "initialize_database"
            },
            "code": "void initialize_system_080039a0(void)\n{\n  initialize_network();\n  initialize_database();\n  *(undefined4 *)PTR_DAT_080039b8 = 1;\n  return;\n}",
            "called": [
                "FUN_08003980",
                "FUN_08004228"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080039a0",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "initialize_system_080039a0"
        },
        "FUN_08009204": {
            "renaming": {
                "FUN_08009204": "concatenate_integers_08009204",
                "param_1": "integer1",
                "param_2": "integer2",
                "FUN_0800919c": "execute_preprocessing_function"
            },
            "code": "undefined8 concatenate_integers_08009204(uint32_t integer1, uint32_t integer2)\n{\n  execute_preprocessing_function();\n  return CONCAT44(integer2, integer1);\n}",
            "called": [
                "FUN_0800919c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009204",
            "calling": [
                "FUN_08009214",
                "FUN_08009228",
                "FUN_080091fc",
                "FUN_0800923c"
            ],
            "imported": false,
            "current_name": "concatenate_integers_08009204"
        },
        "FUN_080029d8": {
            "renaming": {
                "FUN_080029d8": "processParamsAndExecuteFunction_080029d8",
                "param_1": "functionParam",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "result",
                "uVar2": "newParam1",
                "uVar3": "newParam2"
            },
            "code": "void processParamsAndExecuteFunction_080029d8(undefined4 functionParam, int param2, int param3) {\n  int result;\n  undefined4 newParam1;\n  undefined4 newParam2;\n\n  if ((param2 != 0) && (param3 != 0)) {\n    result = executeFunction(*(undefined4 *)(param2 + 0x18), *(undefined4 *)(param2 + 0x1c));\n    if (result == 0) {\n      if (*(char *)(param2 + 0x25) == '\\0') {\n        result = executeFunction(*(undefined4 *)(param2 + 0x1c), *(undefined4 *)(param3 + 0x18));\n        if (result != 0) {\n          newParam1 = *(undefined4 *)(param2 + 0x1c);\n          newParam2 = executeXOR(*(uint *)(PTR_DAT_08002a90 + 0x20) ^ 0x80000000, *(undefined4 *)(param3 + 0x18), *(undefined4 *)(param2 + 0x20));\n          result = executeFunction(newParam1, newParam2);\n          if (result == 0) {\n            newParam2 = executeXOR(*(uint *)(PTR_DAT_08002a90 + 0x20) ^ 0x80000000, *(undefined4 *)(param3 + 0x18), *(undefined4 *)(param2 + 0x20));\n          }\n        }\n        else {\n          newParam2 = *(undefined4 *)(param2 + 0x1c);\n        }\n        *(undefined4 *)(param2 + 0x18) = newParam2;\n      }\n      else {\n        *(undefined4 *)(param2 + 0x18) = *(undefined4 *)(param2 + 0x1c);\n      }\n      *(undefined *)(param2 + 0x24) = 1;\n    }\n  }\n}\n",
            "called": [
                "FUN_08009214",
                "FUN_08009264",
                "FUN_08009228",
                "FUN_08002978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080029d8",
            "calling": [
                "FUN_08002a94"
            ],
            "imported": false,
            "current_name": "processParamsAndExecuteFunction_080029d8"
        },
        "FUN_08007c5e": {
            "renaming": {
                "FUN_08007c5e": "set_global_variable_08007c5e",
                "param_1": "new_value",
                "_DAT_40000038": "global_variable"
            },
            "code": "void set_global_variable_08007c5e(int new_value) {\n    _DAT_40000038 = new_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007c5e",
            "calling": [
                "FUN_08005790"
            ],
            "imported": false,
            "current_name": "set_global_variable_08007c5e"
        },
        "FUN_08005760": {
            "renaming": {
                "FUN_08005760": "print_value_at_address_08005760",
                "PTR_DAT_08005774": "address_data_pointer"
            },
            "code": "void print_value_at_address_08005760(void)\n{\n  int* address = (int*)(PTR_DAT_08005774 + 0x18);\n  int value = *address;\n  printf(\"Value at address: %d\\n\", value);\n  return;\n}",
            "called": [
                "FUN_080052ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005760",
            "calling": [
                "FUN_08007c7c"
            ],
            "imported": false,
            "current_name": "print_value_at_address_08005760"
        },
        "FUN_08008b24": {
            "renaming": {
                "FUN_08008b24": "is_end_of_string_08008b24",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_08008b24(void)\n{\n  char current_char;\n  FUN_08008b00();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_08008b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b24",
            "calling": [
                "FUN_080098d0",
                "FUN_08009b24",
                "FUN_08003004"
            ],
            "imported": false,
            "current_name": "is_end_of_string_08008b24"
        },
        "FUN_08002814": {
            "renaming": {
                "FUN_08002814": "do_nothing_08002814"
            },
            "code": "\nvoid do_nothing_08002814(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002814",
            "calling": [
                "FUN_08001d4c",
                "FUN_08004148",
                "FUN_08002408"
            ],
            "imported": false,
            "current_name": "do_nothing_08002814"
        },
        "FUN_0800587c": {
            "renaming": {
                "FUN_0800587c": "set_ptr_dat_value_if_second_char_is_3_0800587c",
                "PTR_DAT_0800589c": "ptr_dat",
                "PTR_DAT_0800589c[1]": "second_char_of_ptr_dat",
                "PTR_DAT_0800589c[0x10]": "sixteenth_char_of_ptr_dat"
            },
            "code": "void set_ptr_dat_value_if_second_char_is_3_0800587c(void)\n{\n  if (PTR_DAT_0800589c[1]_is_3()) {\n    set_PTR_DAT_0800589c[1]_to_4();\n    set_PTR_DAT_0800589c[0x10]_to_0();\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800587c",
            "calling": [
                "FUN_08003a74"
            ],
            "imported": false,
            "current_name": "set_ptr_dat_value_if_second_char_is_3_0800587c"
        },
        "FUN_08008a02": {
            "renaming": {
                "FUN_08008a02": "calculate_result_08008a02",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp3",
                "unaff_r4": "temp4",
                "uVar2": "temp5",
                "uVar3": "temp6",
                "in_r12": "temp7",
                "bVar4": "is_zero"
            },
            "code": "ulonglong calculate_result_08008a02(uint input1, uint input2, uint input3, uint input4)\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint sign_bit;\n  bool is_zero;\n\n  temp1 = input1 << 1;\n  temp2 = input2 * 2;\n  sign_bit = input2 & 0x80000000;\n  if (input4 >> 0x14 != input3 || input3 != input1 || input4 >> 0x14 != input1)\n  {\n    if (input3 == input1 && ((input1 | input2 << 0xc) == 0))\n    {\n      temp1 = input3;\n      temp2 = input4;\n      if (input4 >> 0x14 != input1)\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n    }\n    else if (input4 >> 0x14 == input1)\n    {\n      temp1 = input3;\n      temp2 = input4;\n      if ((input3 | input4 << 0xc) == 0)\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    else\n    {\n      is_zero = (temp1 | temp2) == 0 || (input3 | input4 << 1) == 0;\n      if (!is_zero)\n      {\n        if (input3 == 0)\n        {\n          do\n          {\n            temp3 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            temp2 = temp2 + (uint)(temp3 != 0);\n          } while ((temp2 & 0x100000) == 0);\n          temp2 = temp2 | sign_bit;\n          if (input4 >> 0x14 != 0)\n            return CONCAT44(temp2, input1);\n        }\n        do\n        {\n          temp4 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(temp4 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(temp2, temp1);\n      }\n      if ((temp1 | temp2) != 0)\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      if ((input3 | input4 << 1) != 0)\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n  }\n  return CONCAT44(temp2, temp1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a02",
            "calling": [
                "FUN_08008894"
            ],
            "imported": false,
            "current_name": "calculate_result_08008a02"
        },
        "FUN_0800369c": {
            "renaming": {
                "FUN_0800369c": "print_string_0800369c",
                "param_1": "string_to_print",
                "local_c": "current_char_pointer",
                "*local_c": "*current_char_pointer",
                "FUN_08008250": "print_character"
            },
            "code": "void print_string_0800369c(char *string_to_print)\n{\n  char *current_char_pointer;\n  current_char_pointer = string_to_print;\n  while (*current_char_pointer != '\\0') {\n    print_character(*current_char_pointer);\n    current_char_pointer++;\n  }\n  return;\n}",
            "called": [
                "FUN_08008250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800369c",
            "calling": [
                "FUN_080039bc",
                "FUN_08004900"
            ],
            "imported": false,
            "current_name": "print_string_0800369c"
        },
        "FUN_08005a98": {
            "renaming": {
                "FUN_08005a98": "check_param_bounds_08005a98",
                "param_1": "param",
                "iVar1": "lower_bound",
                "uVar2": "upper_bound",
                "FUN_08005a84": "get_lower_bound/get_upper_bound"
            },
            "code": "void check_param_bounds_08005a98(int param) {\n  int lower_bound = get_lower_bound();\n  uint upper_bound;\n  do {\n    upper_bound = get_upper_bound();\n  } while (upper_bound < (uint)(param + lower_bound));\n  return;\n}",
            "called": [
                "FUN_08005a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a98",
            "calling": [
                "FUN_080002a0"
            ],
            "imported": false,
            "current_name": "check_param_bounds_08005a98"
        },
        "FUN_08008cdc": {
            "renaming": {
                "FUN_08008cdc": "calculate_float_08008cdc",
                "param_1": "float_a",
                "param_2": "float_b",
                "param_3": "undefined",
                "param_4": "undefined2",
                "iVar1": "integer_1",
                "uVar2": "uint_1",
                "uVar3": "uint_2",
                "uVar4": "uint_3",
                "uVar5": "uint_4",
                "iVar6": "integer_2",
                "bVar7": "bool_1"
            },
            "code": "\nuint calculate_float_08008cdc(uint float_a,uint float_b,undefined4 undefined,uint undefined2)\n\n{\n  int integer_1;\n  uint uint_1;\n  uint uint_2;\n  uint uint_3;\n  uint uint_4;\n  int integer_2;\n  bool bool_1;\n  \n  uint_2 = float_a << 1;\n  bool_1 = uint_2 == 0;\n  if (!bool_1) {\n    undefined2 = float_b << 1;\n    bool_1 = undefined2 == 0;\n  }\n  if (!bool_1) {\n    bool_1 = uint_2 == undefined2;\n  }\n  integer_2 = (int)uint_2 >> 0x18;\n  if (!bool_1) {\n    bool_1 = integer_2 == -1;\n  }\n  if (!bool_1) {\n    bool_1 = (int)undefined2 >> 0x18 == -1;\n  }\n  if (bool_1) {\n    integer_1 = (int)(float_b << 1) >> 0x18;\n    if (integer_2 == -1 || integer_1 == -1) {\n      uint_2 = float_b;\n      if (integer_2 == -1) {\n        uint_2 = float_a;\n      }\n      if (integer_2 != -1 || integer_1 != -1) {\n        float_b = uint_2;\n      }\n      bool_1 = (uint_2 & 0x7fffff) == 0;\n      if (bool_1) {\n        bool_1 = (float_b & 0x7fffff) == 0;\n      }\n      if (bool_1) {\n        bool_1 = uint_2 == float_b;\n      }\n      if (!bool_1) {\n        uint_2 = uint_2 | 0x400000;\n      }\n      return uint_2;\n    }\n    if (((float_a ^ float_b) & 0x7fffffff) != 0) {\n      if (uint_2 == 0) {\n        float_a = float_b;\n      }\n      return float_a;\n    }\n    if (float_a != float_b) {\n      return 0;\n    }\n    if ((uint_2 & 0xff000000) == 0) {\n      uint_2 = float_a << 1;\n      if ((float_a & 0x80000000) != 0) {\n        uint_2 = uint_2 | 0x80000000;\n      }\n      return uint_2;\n    }\n    if (uint_2 < 0xfe000000) {\n      return float_a + 0x800000;\n    }\n    float_a = float_a & 0x80000000;\nLAB_08008e12:\n    return float_a | 0x7f800000;\n  }\n  uint_2 = uint_2 >> 0x18;\n  undefined2 = undefined2 >> 0x18;\n  uint_4 = undefined2 - uint_2;\n  bool_1 = uint_4 != 0;\n  uint_3 = uint_2;\n  if (bool_1 && uint_2 <= undefined2) {\n    uint_3 = uint_2 + uint_4;\n  }\n  if (bool_1 && uint_2 <= undefined2) {\n    float_b = float_b ^ float_a;\n  }\n  if (bool_1 && uint_2 <= undefined2) {\n    float_a = float_a ^ float_b;\n  }\n  if (bool_1 && uint_2 <= undefined2) {\n    float_b = float_b ^ float_a;\n  }\n  if (undefined2 < uint_2) {\n    uint_4 = -uint_4;\n  }\n  if (0x19 < uint_4) {\n    return float_a;\n  }\n  uint_2 = float_a & 0xffffff | 0x800000;\n  if ((float_a & 0x80000000) != 0) {\n    uint_2 = -uint_2;\n  }\n  uint_1 = float_b & 0xffffff | 0x800000;\n  if ((float_b & 0x80000000) != 0) {\n    uint_1 = -uint_1;\n  }\n  if (uint_3 == uint_4) {\n    uint_1 = uint_1 ^ 0x800000;\n    if (uint_3 == 0) {\n      uint_2 = uint_2 ^ 0x800000;\n      uint_3 = 1;\n    }\n    else {\n      uint_4 = uint_4 - 1;\n    }\n  }\n  uint_2 = uint_2 + ((int)uint_1 >> (uint_4 & 0xff));\n  uint_1 = uint_1 << (0x20 - uint_4 & 0xff);\n  float_a = uint_2 & 0x80000000;\n  if ((int)uint_2 < 0) {\n    bool_1 = uint_1 != 0;\n    uint_1 = -uint_1;\n    uint_2 = -uint_2 - (uint)bool_1;\n  }\n  if (uint_2 < 0x800000) {\n    uint_4 = uint_1 & 0x80000000;\n    uint_1 = uint_1 << 1;\n    uint_2 = uint_2 * 2 + (uint)(uint_4 != 0);\n    uint_4 = uint_3 - 2;\n    if (uint_3 - 1 == 0 || uint_2 < 0x800000) {\n      integer_2 = count_leading_zeroes(uint_2);\n      uint_3 = integer_2 - 8;\n      uint_2 = uint_2 << (uint_3 & 0xff);\n      if ((int)uint_4 < (int)uint_3) {\n        uint_2 = uint_2 >> (-(uint_4 - uint_3) & 0xff);\n      }\n      else {\n        uint_2 = uint_2 + (uint_4 - uint_3) * 0x800000;\n      }\n      return uint_2 | float_a;\n    }\n  }\n  else {\n    uint_4 = uint_3 - 1;\n    if (0xffffff < uint_2) {\n      uint_4 = uint_2 & 1;\n      uint_2 = uint_2 >> 1;\n      uint_1 = (uint)(uint_4 != 0) << 0x1f | uint_1 >> 1;\n      uint_4 = uint_3;\n      if (0xfd < uint_3) goto LAB_08008e12;\n    }\n  }\n  uint_2 = uint_2 + uint_4 * 0x800000 + (uint)(0x7fffffff < uint_1);\n  if (uint_1 == 0x80000000) {\n    uint_2 = uint_2 & 0xfffffffe;\n  }\n  return uint_2 | float_a;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008cdc",
            "calling": [
                "FUN_08004940",
                "FUN_080005b4",
                "FUN_08003826",
                "FUN_08002908",
                "FUN_080028bc",
                "FUN_08003004",
                "FUN_08002978",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "calculate_float_08008cdc"
        },
        "FUN_080044e8": {
            "renaming": {
                "FUN_080044e8": "print_and_process_data_080044e8",
                "iVar1": "return_value",
                "uVar2": "temp_value",
                "uVar3": "temp_value_64",
                "auStack_18": "stack_array",
                "local_a": "i",
                "local_9": "counter"
            },
            "code": "void print_and_process_data_080044e8(void)\n{\n    int index;\n    undefined4 temp_value;\n    undefined8 temp_value_64;\n    undefined4 stack_array[3];\n    byte counter = 0;\n    while (counter <= 7)\n    {\n        if (counter > 7)\n        {\n            print_string(PTR_s__G92__080046c8);\n            for (byte i = 0; i < 3; i++)\n            {\n                if ((PTR_DAT_080046bc[0x28] & 1) == 0)\n                {\n                    print_value(*(undefined4 *)(PTR_DAT_080046cc + (i + 10) * 4 + 4));\n                }\n                else\n                {\n                    temp_value_64 = get_value(*(undefined4 *)(PTR_DAT_080046cc + (i + 10) * 4 + 4));\n                    temp_value_64 = process_value((int)temp_value_64, (int)((ulonglong)temp_value_64 >> 0x20), DAT_08004690, DAT_08004694);\n                    temp_value = get_value_32((int)temp_value_64, (int)((ulonglong)temp_value_64 >> 0x20));\n                    print_value(temp_value);\n                }\n                if (i < 2)\n                {\n                    print_string(PTR_DAT_080046c0);\n                }\n                else\n                {\n                    print_string(PTR_DAT_080046c4);\n                }\n            }\n            return;\n        }\n        if (!get_data(counter, stack_array))\n        {\n            break;\n        }\n        print_string(PTR_DAT_08004698);\n        switch (counter)\n        {\n        case 0:\n            print_string(PTR_DAT_0800469c);\n            break;\n        case 1:\n            print_string(PTR_DAT_080046a0);\n            break;\n        case 2:\n            print_string(PTR_DAT_080046a4);\n            break;\n        case 3:\n            print_string(PTR_DAT_080046a8);\n            break;\n        case 4:\n            print_string(PTR_DAT_080046ac);\n            break;\n        case 5:\n            print_string(PTR_DAT_080046b0);\n            break;\n        case 6:\n            print_string(PTR_DAT_080046b4);\n            break;\n        case 7:\n            print_string(PTR_DAT_080046b8);\n        }\n        for (byte i = 0; i < 3; i++)\n        {\n            if ((PTR_DAT_080046bc[0x28] & 1) == 0)\n            {\n                print_value(stack_array[i]);\n            }\n            else\n            {\n                temp_value_64 = get_value(stack_array[i]);\n                temp_value_64 = process_value((int)temp_value_64, (int)((ulonglong)temp_value_64 >> 0x20), DAT_08004690, DAT_08004694);\n                temp_value = get_value_32((int)temp_value_64, (int)((ulonglong)temp_value_64 >> 0x20));\n                print_value(temp_value);\n            }\n            if (i < 2)\n            {\n                print_string(PTR_DAT_080046c0);\n            }\n            else\n            {\n                print_string(PTR_DAT_080046c4);\n            }\n        }\n        counter++;\n    }\n    process_data(10);\n    return;\n}",
            "called": [
                "FUN_08008590",
                "FUN_08008c30",
                "FUN_08003826",
                "FUN_08008640",
                "FUN_08004d7c",
                "FUN_08004030",
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080044e8",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "print_and_process_data_080044e8"
        },
        "FUN_08006c9c": {
            "renaming": {
                "FUN_08006c9c": "is_valid_input_08006c9c",
                "param_1": "input",
                "bVar1": "is_valid",
                "DAT_08006cdc": "ptr_to_data"
            },
            "code": "bool is_valid_input_08006c9c(int input) {\n\tbool is_valid = input > 0 && input < 0x1000000;\n\tif (is_valid) {\n\t\tint* ptr_to_input_minus_one = DAT_08006cdc + 1;\n\t\t*ptr_to_input_minus_one = input - 1;\n\t\tFUN_08006b00(0xffffffff, 0xf);\n\t\t*(DAT_08006cdc + 2) = 0;\n\t\t*DAT_08006cdc = 7;\n\t}\n\treturn !is_valid;\n}",
            "called": [
                "FUN_08006b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c9c",
            "calling": [
                "FUN_08006d72"
            ],
            "imported": false,
            "current_name": "is_valid_input_08006c9c"
        },
        "FUN_0800a5a0": {
            "renaming": {
                "FUN_0800a5a0": "calculate_result_0800a5a0",
                "param_1": "input_value",
                "param_2": "result_array",
                "param_3": "array_length",
                "puVar1": "pointer_1",
                "uVar2": "result",
                "uVar3": "temp_result",
                "iVar4": "loop_counter",
                "puVar5": "pointer_2",
                "uVar6": "temp_1",
                "ppuVar7": "pointer_3",
                "uVar8": "temp_2",
                "iVar9": "loop_counter_2",
                "puVar10": "pointer_4",
                "uVar11": "temp_3",
                "uVar12": "temp_4",
                "puVar13": "pointer_5",
                "iVar14": "loop_counter_3",
                "puVar16": "pointer_6",
                "puVar18": "pointer_7",
                "uVar20": "temp_5",
                "puVar22": "pointer_8",
                "puVar23": "pointer_9",
                "uVar25": "temp_6",
                "uVar26": "temp_7",
                "uVar27": "temp_8",
                "uVar28": "temp_9",
                "uVar29": "temp_10",
                "local_284": "local_array_1",
                "local_280": "local_array_2",
                "local_270": "local_array_3",
                "local_26c": "local_array_4",
                "local_260": "local_array_5",
                "local_258": "local_array_6",
                "uStack_208": "temp_11",
                "local_168": "local_array_7",
                "local_160": "local_array_8",
                "uStack_c8": "temp_12"
            },
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nuint calculate_result_0800a5a0(int input_value,undefined8 *result_array,int array_length,int param_4,int param_5,int param_6)\n\n{\n  undefined4 *pointer_1;\n  uint result;\n  uint temp_result;\n  int loop_counter;\n  uint *pointer_2;\n  undefined4 temp_1;\n  uint **pointer_3;\n  undefined4 temp_2;\n  int loop_counter_2;\n  undefined4 *pointer_4;\n  undefined4 temp_3;\n  uint temp_4;\n  uint *pointer_5;\n  int loop_counter_3;\n  int iVar15;\n  undefined8 *pointer_6;\n  int iVar17;\n  undefined4 *pointer_7;\n  undefined8 *pointer_19;\n  undefined4 temp_5;\n  int iVar21;\n  undefined8 *pointer_8;\n  undefined4 *pointer_9;\n  bool bVar24;\n  undefined8 temp_6;\n  undefined8 temp_7;\n  undefined8 temp_8;\n  undefined8 temp_9;\n  ulonglong temp_10;\n  undefined8 *local_array_1;\n  int local_array_2;\n  int local_array_3;\n  int local_array_4;\n  uint *local_array_5 [2];\n  uint local_array_6 [20];\n  undefined8 temp_11;\n  undefined8 local_array_7;\n  int local_array_8 [38];\n  undefined8 temp_12;\n  \n  temp_9 = CONCAT44(param_5,param_5);\n  iVar15 = *(int *)(PTR_DAT_0800a894 + param_5 * 4);\n  loop_counter_2 = param_4 + -1;\n  local_array_5[1] = (uint *)result_array;\n  if (array_length + 0x14 < 0 == SCARRY4(array_length,0x14)) {\n    local_array_4 = (int)((longlong)DAT_0800a898 * (longlong)(array_length + -3) >> 0x22) -\n                (array_length + -3 >> 0x1f);\n    local_array_3 = (local_array_4 + 1) * -0x18;\n  }\n  else {\n    local_array_3 = -0x18;\n    local_array_4 = 0;\n  }\n  local_array_3 = array_length + local_array_3;\n  iVar17 = local_array_4 - loop_counter_2;\n  if (-1 < iVar15 + loop_counter_2) {\n    iVar21 = iVar15 + loop_counter_2 + 1 + iVar17;\n    pointer_6 = &temp_11;\n    do {\n      while (iVar17 < 0) {\n        iVar17 = iVar17 + 1;\n        *(undefined4 *)pointer_6 = 0;\n        *(undefined4 *)((int)pointer_6 + 4) = 0;\n        pointer_6 = pointer_6 + 1;\n        if (iVar17 == iVar21) goto LAB_0800a626;\n      }\n      temp_7 = FUN_0800856c(*(undefined4 *)(param_6 + iVar17 * 4));\n      iVar17 = iVar17 + 1;\n      *pointer_6 = temp_7;\n      pointer_6 = pointer_6 + 1;\n    } while (iVar17 != iVar21);\n  }\nLAB_0800a626:\n  pointer_4 = (undefined4 *)(input_value + -8);\n  if (-1 < iVar15) {\n    pointer_8 = &temp_11 + param_4;\n    iVar17 = loop_counter_2;\n    pointer_6 = &temp_12;\n    do {\n      if (loop_counter_2 < 0) {\n        temp_7 = 0;\n      }\n      else {\n        temp_7 = 0;\n        pointer_9 = pointer_4;\n        pointer_19 = pointer_8;\n        do {\n          pointer_7 = pointer_9 + 2;\n          temp_6 = FUN_08008640(*pointer_7,pointer_9[3],*(undefined4 *)(pointer_19 + -1),\n                                *(undefined4 *)((int)pointer_19 + -4));\n          temp_7 = FUN_080082d4((int)temp_7,(int)((ulonglong)temp_7 >> 0x20),(int)temp_6,\n                                (int)((ulonglong)temp_6 >> 0x20));\n          pointer_9 = pointer_7;\n          pointer_19 = pointer_19 + -1;\n        } while (pointer_7 != pointer_4 + param_4 * 2);\n      }\n      iVar17 = iVar17 + 1;\n      *pointer_6 = temp_7;\n      pointer_8 = pointer_8 + 1;\n      pointer_6 = pointer_6 + 1;\n    } while (iVar17 != iVar15 + param_4);\n  }\n  local_array_5[0] = local_array_6 + iVar15 + -1;\n  iVar17 = iVar15;\n  do {\n    temp_7 = CONCAT44(*(undefined4 *)((int)&temp_12 + iVar17 * 8 + 4),\n                      *(undefined4 *)(&temp_12 + iVar17));\n    if (0 < iVar17) {\n      pointer_6 = &temp_12 + iVar17;\n      pointer_2 = local_array_6;\n      do {\n        temp_1 = (undefined4)((ulonglong)temp_7 >> 0x20);\n        FUN_08008640((int)temp_7,temp_1,0,DAT_0800a89c);\n        FUN_08008ba0();\n        temp_6 = FUN_0800856c();\n        temp_2 = (undefined4)((ulonglong)temp_6 >> 0x20);\n        temp_8 = FUN_08008640((int)temp_6,temp_2,0,DAT_0800a8a0);\n        FUN_080082d0((int)temp_7,temp_1,(int)temp_8,(int)((ulonglong)temp_8 >> 0x20));\n        result = FUN_08008ba0();\n        pointer_8 = pointer_6 + -1;\n        temp_1 = *(undefined4 *)pointer_8;\n        temp_3 = *(undefined4 *)((int)pointer_6 + -4);\n        *pointer_2 = result;\n        temp_7 = FUN_080082d4((int)temp_6,temp_2,temp_1,temp_3);\n        pointer_6 = pointer_8;\n        pointer_2 = pointer_2 + 1;\n      } while (pointer_8 != &temp_12);\n    }\n    temp_7 = FUN_0800b2e8((int)temp_7,(int)((ulonglong)temp_7 >> 0x20),local_array_3);\n    temp_2 = (undefined4)((ulonglong)temp_7 >> 0x20);\n    FUN_08008640((int)temp_7,temp_2,0,0x3fc00000);\n    temp_6 = FUN_080094c0();\n    temp_6 = FUN_08008640((int)temp_6,(int)((ulonglong)temp_6 >> 0x20),0,DAT_0800a8a4);\n    temp_7 = FUN_080082d0((int)temp_7,temp_2,(int)temp_6,(int)((ulonglong)temp_6 >> 0x20));\n    result = FUN_08008ba0();\n    temp_6 = FUN_0800856c();\n    temp_7 = FUN_080082d0((int)temp_7,(int)((ulonglong)temp_7 >> 0x20),(int)temp_6,\n                          (int)((ulonglong)temp_6 >> 0x20));\n    temp_1 = (undefined4)((ulonglong)temp_7 >> 0x20);\n    temp_2 = (undefined4)temp_7;\n    if (local_array_3 < 1) {\n      if (local_array_3 == 0) {\n        iVar21 = (int)local_array_6[iVar17 + -1] >> 0x17;\n        goto joined_r0x0800a8b8;\n      }\n      iVar21 = FUN_08008b4c(temp_2,temp_1,0,DAT_0800ac3c);\n      if (iVar21 != 0) {\n        result = result + 1;\n        if (iVar17 < 1) {\n          temp_7 = FUN_080082d0(0,DAT_0800ac38,temp_2,temp_1);\n          iVar21 = 2;\n          goto LAB_0800a7a4;\n        }\n        iVar21 = 2;\n        goto LAB_0800a8c8;\n      }\n    }\n    else {\n      loop_counter = (int)local_array_6[iVar17 + -1] >> (0x18U - local_array_3 & 0xff);\n      temp_4 = local_array_6[iVar17 + -1] - (loop_counter << (0x18U - local_array_3 & 0xff));\n      iVar21 = (int)temp_4 >> (0x17U - local_array_3 & 0xff);\n      local_array_6[iVar17 + -1] = temp_4;\n      result = result + loop_counter;\njoined_r0x0800a8b8:\n      if (0 < iVar21) {\n        result = result + 1;\n        if (iVar17 < 1) {\n          temp_4 = 0;\n        }\n        else {\nLAB_0800a8c8:\n          temp_4 = local_array_6[0];\n          if (local_array_6[0] == 0) {\n            if (iVar17 != 1) {\n              pointer_2 = local_array_6;\n              loop_counter = 1;\n              do {\n                pointer_2 = pointer_2 + 1;\n                temp_4 = *pointer_2;\n                if (temp_4 != 0) {\n                  loop_counter_3 = loop_counter + 1;\n                  goto LAB_0800a8e2;\n                }\n                loop_counter = loop_counter + 1;\n              } while (loop_counter != iVar17);\n            }\n          }\n          else {\n            loop_counter_3 = 1;\n            loop_counter = 0;\nLAB_0800a8e2:\n            local_array_6[loop_counter] = 0x1000000 - temp_4;\n            if (loop_counter_3 < iVar17) {\n              temp_4 = local_array_6[loop_counter_3];\n              pointer_2 = local_array_6 + loop_counter_3;\n              while( true ) {\n                pointer_5 = pointer_2 + 1;\n                *pointer_2 = 0xffffff - temp_4;\n                if (pointer_5 == local_array_6 + iVar17) break;\n                temp_4 = *pointer_5;\n                pointer_2 = pointer_5;\n              }\n            }\n            temp_4 = 1;\n          }\n        }\n        if (0 < local_array_3) {\n          if (local_array_3 == 1) {\n            local_array_6[iVar17 + -1] = local_array_6[iVar17 + -1] & 0x7fffff;\n          }\n          else if (local_array_3 == 2) {\n            local_array_6[iVar17 + -1] = local_array_6[iVar17 + -1] & 0x3fffff;\n          }\n        }\n        if (iVar21 == 2) {\n          temp_7 = FUN_080082d0(0,DAT_0800ac38,temp_2,temp_1);\n          if (temp_4 != 0) {\n            temp_6 = FUN_0800b2e8(0,DAT_0800ac38,local_array_3);\n            temp_7 = FUN_080082d0((int)temp_7,(int)((ulonglong)temp_7 >> 0x20),(int)temp_6,\n                                  (int)((ulonglong)temp_6 >> 0x20));\n          }\n        }\n      }\n    }\nLAB_0800a7a4:\n    temp_2 = (undefined4)((ulonglong)temp_7 >> 0x20);\n    loop_counter = FUN_08008b10((int)temp_7,temp_2,0,0);\n    if (loop_counter == 0) {\n      temp_7 = FUN_0800b2e8((int)temp_7,temp_2,-local_array_3);\n      temp_1 = (undefined4)((ulonglong)temp_7 >> 0x20);\n      temp_2 = (undefined4)temp_7;\n      loop_counter_2 = FUN_08008b4c(temp_2,temp_1,0,DAT_0800ade4);\n      if (loop_counter_2 == 0) {\n        temp_4 = FUN_08008ba0(temp_2,temp_1);\n        local_array_6[iVar17] = temp_4;\n        loop_counter = iVar17;\n      }\n      else {\n        FUN_08008640(temp_2,temp_1,0,DAT_0800ade8);\n        temp_4 = FUN_08008ba0();\n        temp_7 = FUN_0800856c();\n        temp_7 = FUN_08008640((int)temp_7,(int)((ulonglong)temp_7 >> 0x20),0,DAT_0800ade4);\n        FUN_080082d0(temp_2,temp_1,(int)temp_7,(int)((ulonglong)temp_7 >> 0x20));\n        temp_result = FUN_08008ba0();\n        local_array_3 = local_array_3 + 0x18;\n        local_array_6[iVar17] = temp_result;\n        local_array_6[iVar17 + 1] = temp_4;\n        loop_counter = iVar17 + 1;\n      }\n      goto LAB_0800a9f6;\n    }\n    loop_counter = iVar17 + -1;\n    if (iVar15 <= loop_counter) {\n      temp_4 = 0;\n      pointer_2 = local_array_6 + iVar17 + 0x3fffffff;\n      do {\n        pointer_5 = pointer_2 + -1;\n        temp_4 = temp_4 | *pointer_2;\n        pointer_2 = pointer_5;\n      } while (pointer_5 != local_array_5[0]);\n      if (temp_4 != 0) break;\n    }\n    if (local_array_6[iVar15 + -1] == 0) {\n      local_array_2 = 1;\n      pointer_3 = local_array_5 + iVar15;\n      do {\n        pointer_2 = *pointer_3;\n        local_array_2 = local_array_2 + 1;\n        pointer_3 = pointer_3 + -1;\n      } while (pointer_2 == (uint *)0x0);\n      local_array_2 = iVar17 + local_array_2;\n    }\n    else {\n      local_array_2 = iVar17 + 1;\n    }\n    iVar21 = iVar17 + 1;\n    pointer_9 = (undefined4 *)(param_6 + (iVar21 + local_array_4 + 0x3fffffff) * 4);\n    pointer_6 = &temp_11 + iVar17 + param_4;\n    local_array_1 = &temp_12 + iVar21;\n    do {\n      pointer_9 = pointer_9 + 1;\n      temp_7 = FUN_0800856c(*pointer_9);\n      *pointer_6 = temp_7;\n      pointer_8 = pointer_6 + 1;\n      if (loop_counter_2 < 0) {\n        temp_6 = 0;\n      }\n      else {\n        temp_6 = 0;\n        pointer_7 = pointer_4;\n        while( true ) {\n          pointer_6 = pointer_6 + -1;\n          pointer_1 = pointer_7 + 2;\n          temp_7 = FUN_08008640((int)temp_7,(int)((ulonglong)temp_7 >> 0x20),*pointer_1,pointer_7[3]);\n          temp_6 = FUN_080082d4((int)temp_6,(int)((ulonglong)temp_6 >> 0x20),(int)temp_7,\n                                (int)((ulonglong)temp_7 >> 0x20));\n          if (pointer_1 == pointer_4 + param_4 * 2) break;\n          temp_7 = *pointer_6;\n          pointer_7 = pointer_1;\n        }\n      }\n      *local_array_1 = temp_6;\n      iVar21 = iVar21 + 1;\n      iVar17 = local_array_2;\n      pointer_6 = pointer_8;\n      local_array_1 = local_array_1 + 1;\n    } while (iVar21 <= local_array_2);\n  } while( true );\n  local_array_3 = local_array_3 + -0x18;\n  if (local_array_6[loop_counter] == 0) {\n    pointer_2 = local_array_6 + iVar17 + 0x3ffffffe;\n    do {\n      temp_4 = *pointer_2;\n      loop_counter = loop_counter + -1;\n      local_array_3 = local_array_3 + -0x18;\n      pointer_2 = pointer_2 + -1;\n    } while (temp_4 == 0);\n  }\nLAB_0800a9f6:\n  temp_7 = FUN_0800b2e8(0,DAT_0800ac38,local_array_3);\n  if (loop_counter < 0) {\n    if (2 < param_5) {\n      if (param_5 == 3) {\n        temp_9 = 0;\nLAB_0800abe4:\n        if (iVar21 == 0) {\n          *local_array_5[1] = (undefined4)local_array_7;\n          *(int *)((int)local_array_5[1] + 4) = local_array_7._4_4_;\n          *(undefined8 *)((int)local_array_5[1] + 0x10) = temp_9;\n          *(int *)((int)local_array_5[1] + 8) = local_array_8[0];\n          *(int *)((int)local_array_5[1] + 0xc) = local_array_8[1];\n          return result & 7;\n        }\n        *(int *)((int)local_array_5[1] + 0x10) = (int)temp_9;\n        *(int *)((int)local_array_5[1] + 8) = local_array_8[0];\n        *(int *)((int)local_array_5[1] + 0x14) = (int)((ulonglong)temp_9 >> 0x20) + -0x80000000;\n        *(int *)((int)local_array_5[1] + 4) = local_array_7._4_4_ + -0x80000000;\n        *(int *)((int)local_array_5[1] + 0xc) = local_array_8[1] + -0x80000000;\n        *local_array_5[1] = (undefined4)local_array_7;\n        return result & 7;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param_5 < 1) {\n      if (param_5 != 0) goto LAB_0800ab0e;\nLAB_0800aafc:\n      loop_counter_2 = (int)((ulonglong)temp_9 >> 0x20);\n      if (iVar21 != 0) {\n        loop_counter_2 = loop_counter_2 + -0x80000000;\n      }\n      *local_array_5[1] = (int)temp_9;\n      *(int *)((int)local_array_5[1] + 4) = loop_counter_2;\nLAB_0800ab0e:\n      return result & 7;\n    }\n    temp_9 = 0;\n  }\n  else {\n    pointer_8 = &temp_12 + loop_counter;\n    pointer_2 = local_array_6 + loop_counter + 1;\n    pointer_6 = &temp_12 + loop_counter + 1;\n    do {\n      temp_2 = (undefined4)((ulonglong)temp_7 >> 0x20);\n      pointer_2 = pointer_2 + -1;\n      temp_6 = FUN_0800856c(*pointer_2);\n      temp_6 = FUN_08008640((int)temp_6,(int)((ulonglong)temp_6 >> 0x20),(int)temp_7,temp_2);\n      pointer_6 = pointer_6 + -1;\n      *pointer_6 = temp_6;\n      temp_7 = FUN_08008640((int)temp_7,temp_2,0,DAT_0800ac40);\n    } while (pointer_2 != local_array_6);\n    loop_counter_2 = 0;\n    temp_2 = DAT_0800ac30;\n    temp_1 = DAT_0800ac34;\n    do {\n      DAT_0800ac30 = temp_2;\n      DAT_0800ac34 = temp_1;\n      if (iVar15 < 0) {\n        temp_7 = 0;\n      }\n      else {\n        temp_7 = 0;\n        iVar17 = 0;\n        pointer_6 = pointer_8;\n        pointer_4 = (undefined4 *)PTR_DAT_0800ac44;\n        while( true ) {\n          temp_6 = FUN_08008640(*(undefined4 *)pointer_6,*(undefined4 *)((int)pointer_6 + 4),temp_2,temp_1\n                               );\n          temp_7 = FUN_080082d4((int)temp_7,(int)((ulonglong)temp_7 >> 0x20),(int)temp_6,\n                                (int)((ulonglong)temp_6 >> 0x20));\n          iVar17 = iVar17 + 1;\n          if ((iVar15 < iVar17) || (loop_counter_2 < iVar17)) break;\n          temp_2 = *pointer_4;\n          temp_1 = pointer_4[1];\n          pointer_6 = pointer_6 + 1;\n          pointer_4 = pointer_4 + 2;\n        }\n      }\n      bVar24 = loop_counter_2 != loop_counter;\n      *(int *)(&local_array_7 + loop_counter_2) = (int)temp_7;\n      *(int *)((int)&local_array_7 + (loop_counter_2 * 2 + 1) * 4) = (int)((ulonglong)temp_7 >> 0x20);\n      pointer_8 = pointer_8 + -1;\n      loop_counter_2 = loop_counter_2 + 1;\n      temp_2 = DAT_0800ac30;\n      temp_1 = DAT_0800ac34;\n    } while (bVar24);\n    if (2 < param_5) {\n      if (param_5 == 3) {\n        if (loop_counter != 0) {\n          pointer_6 = &local_array_7 + loop_counter;\n          temp_9 = CONCAT44(*(undefined4 *)((int)&local_array_7 + (loop_counter * 2 + 1) * 4),\n                            *(undefined4 *)pointer_6);\n          do {\n            temp_1 = (undefined4)((ulonglong)temp_9 >> 0x20);\n            temp_2 = (undefined4)temp_9;\n            temp_3 = *(undefined4 *)(pointer_6 + -1);\n            temp_5 = *(undefined4 *)((int)pointer_6 + -4);\n            temp_9 = FUN_080082d4(temp_2,temp_1,temp_3,temp_5);\n            temp_7 = FUN_080082d0(temp_3,temp_5,(int)temp_9,(int)((ulonglong)temp_9 >> 0x20));\n            temp_7 = FUN_080082d4((int)temp_7,(int)((ulonglong)temp_7 >> 0x20),temp_2,temp_1);\n            *pointer_6 = temp_7;\n            pointer_6 = pointer_6 + -1;\n            *pointer_6 = temp_9;\n          } while (&local_array_7 != pointer_6);\n          if (1 < loop_counter) {\n            pointer_6 = &local_array_7 + loop_counter;\n            temp_9 = CONCAT44(*(undefined4 *)((int)&local_array_7 + (loop_counter * 2 + 1) * 4),\n                              *(undefined4 *)pointer_6);\n            do {\n              temp_1 = (undefined4)((ulonglong)temp_9 >> 0x20);\n              temp_2 = (undefined4)temp_9;\n              temp_3 = *(undefined4 *)(pointer_6 + -1);\n              temp_5 = *(undefined4 *)((int)pointer_6 + -4);\n              temp_9 = FUN_080082d4(temp_2,temp_1,temp_3,temp_5);\n              temp_7 = FUN_080082d0(temp_3,temp_5,(int)temp_9,(int)((ulonglong)temp_9 >> 0x20));\n              temp_7 = FUN_080082d4((int)temp_7,(int)((ulonglong)temp_7 >> 0x20),temp_2,temp_1);\n              *pointer_6 = temp_7;\n              pointer_6 = pointer_6 + -1;\n              *pointer_6 = temp_9;\n            } while (&local_array_7 + 1 != pointer_6);\n            temp_9 = 0;\n            pointer_6 = &local_array_7 + loop_counter + 1;\n            do {\n              pointer_8 = pointer_6 + -1;\n              temp_9 = FUN_080082d4((int)temp_9,(int)((ulonglong)temp_9 >> 0x20),\n                                    *(undefined4 *)pointer_8,*(undefined4 *)((int)pointer_6 + -4));\n              pointer_6 = pointer_8;\n            } while (&local_array_7 + 2 != pointer_8);\n            goto LAB_0800abe4;\n          }\n        }\n        temp_9 = 0;\n        goto LAB_0800abe4;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param_5 < 1) {\n      if (param_5 != 0) goto LAB_0800ab0e;\n      pointer_6 = &local_array_7 + loop_counter + 1;\n      do {\n        pointer_8 = pointer_6 + -1;\n        temp_9 = FUN_080082d4((int)temp_9,(int)((ulonglong)temp_9 >> 0x20),*(undefined4 *)pointer_8,\n                              *(undefined4 *)((int)pointer_6 + -4));\n        pointer_6 = pointer_8;\n      } while (&local_array_7 != pointer_8);\n      goto LAB_0800aafc;\n    }\n    temp_9 = 0;\n    pointer_6 = &local_array_7 + loop_counter + 1;\n    do {\n      pointer_8 = pointer_6 + -1;\n      temp_9 = FUN_080082d4((int)temp_9,(int)((ulonglong)temp_9 >> 0x20),*(undefined4 *)pointer_8,\n                            *(undefined4 *)((int)pointer_6 + -4));\n      pointer_6 = pointer_8;\n    } while (&local_array_7 != pointer_8);\n  }\n  loop_counter_2 = (int)((ulonglong)temp_9 >> 0x20);\n  temp_2 = (undefined4)temp_9;\n  if (iVar21 == 0) {\n    *(undefined8 *)local_array_5[1] = temp_9;\n    temp_10 = FUN_080082d0((undefined4)local_array_7,local_array_7._4_4_,temp_2,loop_counter_2);\n    if (loop_counter < 1) goto LAB_0800ad26;\nLAB_0800ad04:\n    loop_counter_2 = 1;\n    pointer_6 = &local_array_7;\n    do {\n      temp_10 = FUN_080082d4((int)temp_10,(int)(temp_10 >> 0x20),*(undefined4 *)(pointer_6 + 1),\n                            *(undefined4 *)((int)pointer_6 + 0xc));\n      loop_counter_2 = loop_counter_2 + 1;\n      pointer_6 = pointer_6 + 1;\n    } while (loop_counter_2 <= loop_counter);\n    if (iVar21 == 0) goto LAB_0800ad26;\n  }\n  else {\n    *local_array_5[1] = temp_2;\n    *(int *)((int)local_array_5[1] + 4) = loop_counter_2 + -0x80000000;\n    temp_10 = FUN_080082d0((undefined4)local_array_7,local_array_7._4_4_,temp_2,loop_counter_2);\n    if (0 < loop_counter) goto LAB_0800ad04;\n  }\n  temp_10 = temp_10 & 0xffffffff | (ulonglong)((int)(temp_10 >> 0x20) + 0x80000000) << 0x20;\nLAB_0800ad26:\n  *(ulonglong *)((int)local_array_5[1] + 8) = temp_10;\n  return result & 7;\n}\n\n",
            "called": [
                "FUN_080082d0",
                "FUN_08008b10",
                "FUN_080082d4",
                "FUN_080094c0",
                "FUN_0800856c",
                "FUN_08008ba0",
                "FUN_08008640",
                "FUN_0800b2e8",
                "FUN_08008b4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a5a0",
            "calling": [
                "FUN_08009d78"
            ],
            "imported": false,
            "current_name": "calculate_result_0800a5a0"
        },
        "FUN_0800195c": {
            "renaming": {
                "FUN_0800195c": "check_data_validity_0800195c",
                "PTR_DAT_08001990": "data_buffer"
            },
            "code": "void check_data_validity_0800195c(void)\n{\n  if ((PTR_DAT_08001990[1] != '\\x06') && ((PTR_DAT_08001990[2] & 0x20) == 0)) {\n    perform_data_correction();\n    PTR_DAT_08001990[2] = PTR_DAT_08001990[2] | 0x40;\n  }\n  return;\n}",
            "called": [
                "FUN_080025e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800195c",
            "calling": [
                "FUN_080074c8"
            ],
            "imported": false,
            "current_name": "check_data_validity_0800195c"
        },
        "FUN_08009214": {
            "renaming": {
                "FUN_08009214": "is_input_not_null_08009214",
                "in_ZR": "input_char",
                "FUN_08009204": "call_some_function"
            },
            "code": "bool is_input_not_null_08009214(void)\\n{\\n  char input_char;\\n  call_some_function();\\n  return input_char != \"\\0\";\\n}",
            "called": [
                "FUN_08009204"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009214",
            "calling": [
                "FUN_08002afc",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08002638",
                "FUN_08004e30",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "is_input_not_null_08009214"
        },
        "FUN_08004dd2": {
            "renaming": {
                "FUN_08004dd2": "check_input_validity_08004dd2",
                "bVar1": "input",
                "iVar2": "result",
                "PTR_DAT_08004e2c": "data_pointer"
            },
            "code": "int check_input_validity_08004dd2()\n{\n  byte input = get_user_input();\n  if (input == 5) {\n    int result = read_data(PTR_DAT_08004e2c, 1, 0x40);\n    if (result == 0) {\n      return 0;\n    }\n  }\n  else {\n    if (input > 4) {\n      return 0;\n    }\n    int result = read_data(PTR_DAT_08004e2c, 1, 0x28);\n    if (result == 0) {\n      return 0;\n    }\n    perform_additional_checks(0);\n  }\n  return 1;\n}",
            "called": [
                "FUN_08000310",
                "FUN_08004c48",
                "FUN_080003ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004dd2",
            "calling": [
                "FUN_080051b4"
            ],
            "imported": false,
            "current_name": "check_input_validity_08004dd2"
        },
        "FUN_08008244": {
            "renaming": {
                "FUN_08008244": "do_nothing_08008244"
            },
            "code": "\nvoid do_nothing_08008244(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008244",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "do_nothing_08008244"
        },
        "FUN_08005778": {
            "renaming": {
                "FUN_08005778": "execute_function_08005778",
                "PTR_DAT_0800578c": "function_pointer",
                "FUN_080052ac": "execute",
                "*(undefined2 *)PTR_DAT_0800578c": "data_pointer"
            },
            "code": "void execute_function_08005778(void)\n{\n  int16_t* *(undefined2 *)PTR_DAT_0800578c = (int16_t*)PTR_DAT_0800578c;\n  execute(*(undefined2 *)PTR_DAT_0800578c);\n  return;\n}",
            "called": [
                "FUN_080052ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005778",
            "calling": [
                "FUN_08007c7c"
            ],
            "imported": false,
            "current_name": "execute_function_08005778"
        },
        "FUN_080028bc": {
            "renaming": {
                "FUN_080028bc": "calculate_result_080028bc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar1": "result1",
                "uVar2": "result2",
                "FUN_08008eec": "calculate_square",
                "FUN_08008cd8": "calculate_sum",
                "FUN_08008cdc": "calculate_cube",
                "FUN_08009054": "calculate_final_result"
            },
            "code": "undefined4 calculate_result_080028bc(undefined4 input1, undefined4 input2, undefined4 input3)\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 intermediate_result1;\n  undefined4 intermediate_result2;\n  \n  intermediate_result1 = FUN_08008eec(input2, input2);\n  intermediate_result2 = FUN_08008eec(input1, input1);\n  result1 = FUN_08008cd8(intermediate_result1, intermediate_result2);\n  intermediate_result2 = FUN_08008cdc(input3, input3);\n  result1 = FUN_08009054(result1, intermediate_result2);\n  return result1;\n}",
            "called": [
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_08008cdc",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028bc",
            "calling": [
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_result_080028bc"
        },
        "FUN_08006628": {
            "renaming": {
                "FUN_08006628": "get_shifted_value_08006628",
                "uVar1": "value",
                "uVar2": "leading_zeroes",
                "PTR_DAT_0800667c": "ptr_result",
                "PTR_DAT_08006678": "ptr_shift",
                "DAT_08006674": "data"
            },
            "code": "uint32_t get_shifted_value_08006628() {\n    uint32_t value = get_value_from_function();\n    uint32_t leading_zeroes = count_leading_zeroes(0xf000000);\n    uint32_t shift = (*(uint32_t *)(ptr_dat_08006674 + 8) & 0xf0) >> (leading_zeroes & 0xff);\n    *(uint32_t *)ptr_dat_0800667c = value >> shift;\n    return *(uint32_t *)ptr_dat_0800667c;\n}",
            "called": [
                "FUN_080064ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006628",
            "calling": [
                "FUN_0800618c",
                "FUN_080066cc",
                "FUN_08006680"
            ],
            "imported": false,
            "current_name": "get_shifted_value_08006628"
        },
        "FUN_0800738e": {
            "renaming": {
                "FUN_0800738e": "update_param_if_valid_0800738e",
                "param_1": "new_param",
                "PTR_DAT_080073bc": "data_ptr",
                "DAT_080073bc": "data",
                "do_nothing_080073c0": "do_nothing"
            },
            "code": "void update_param_if_valid_0800738e(ushort new_param)\n{\n  uint* PTR_DAT_080073bc = (uint*)(DAT_080073bc + 0x14);\n  uint mask = *PTR_DAT_080073bc;\n  if ((uint)new_param & mask) {\n    *PTR_DAT_080073bc = (uint)new_param;\n    do_nothing_080073c0(new_param);\n  }\n  return;\n}",
            "called": [
                "FUN_080073c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800738e",
            "calling": [],
            "imported": false,
            "current_name": "update_param_if_valid_0800738e"
        },
        "FUN_08002828": {
            "renaming": {
                "FUN_08002828": "do_nothing_08002828"
            },
            "code": "\nvoid do_nothing_08002828(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002828",
            "calling": [
                "FUN_08001994"
            ],
            "imported": false,
            "current_name": "do_nothing_08002828"
        },
        "FUN_080053a0": {
            "renaming": {
                "FUN_080053a0": "FUNC_080053a0"
            },
            "code": "\nvoid FUNC_080053a0(void)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  \n  FUN_080052dc(*(undefined2 *)PTR_DAT_080055f0);\n  *(undefined2 *)PTR_DAT_080055f8 = *(undefined2 *)PTR_DAT_080055f4;\n  if (*(int *)PTR_DAT_080055fc == 0) {\n    uVar1 = FUN_08002f74();\n    *(undefined4 *)PTR_DAT_080055fc = uVar1;\n    if (*(int *)PTR_DAT_080055fc == 0) {\n      FUN_080057e4();\n      PTR_DAT_08005600[2] = PTR_DAT_08005600[2] | 4;\n    }\n    else {\n      if (PTR_DAT_08005600[1] == '\\x03') {\n        *(undefined4 *)(PTR_DAT_08005604 + 0x1c) = *(undefined4 *)(*(int *)PTR_DAT_080055fc + 0x28);\n        FUN_08005324(*(undefined4 *)(PTR_DAT_08005604 + 0x1c));\n        *(undefined4 *)(PTR_DAT_08005604 + 0x18) = DAT_08005608;\n      }\n      *(int *)(PTR_DAT_08005604 + 0x20) =\n           (*(int *)(*(int *)PTR_DAT_080055fc + 0x30) >> 1) +\n           *(int *)(*(int *)PTR_DAT_080055fc + 0x30);\n      *(int *)PTR_DAT_08005604 = -(*(int *)(*(int *)PTR_DAT_080055fc + 0x10) >> 1);\n      *(undefined4 *)(PTR_DAT_08005604 + 4) = *(undefined4 *)PTR_DAT_08005604;\n      *(undefined4 *)(PTR_DAT_08005604 + 8) = *(undefined4 *)PTR_DAT_08005604;\n      *(undefined4 *)(PTR_DAT_08005604 + 0xc) = *(undefined4 *)(*(int *)PTR_DAT_080055fc + 0x10);\n      *(undefined4 *)(PTR_DAT_08005604 + 0x10) = 0;\n    }\n  }\n  if (*(int *)PTR_DAT_080055fc != 0) {\n    *(undefined2 *)PTR_DAT_080055f0 = **(undefined2 **)PTR_DAT_080055fc;\n    *(undefined2 *)PTR_DAT_080055f4 = 0;\n    *(int *)PTR_DAT_08005604 = *(int *)(*(int *)PTR_DAT_080055fc + 4) + *(int *)PTR_DAT_08005604;\n    if (0 < *(int *)PTR_DAT_08005604) {\n      *(ushort *)PTR_DAT_080055f4 = *(ushort *)PTR_DAT_080055f4 | 0x10;\n      *(int *)PTR_DAT_08005604 = *(int *)PTR_DAT_08005604 - *(int *)(PTR_DAT_08005604 + 0xc);\n      if ((*(ushort *)PTR_DAT_080055f0 & 0x20) == 0) {\n        *(int *)(PTR_DAT_08005600 + 4) = *(int *)(PTR_DAT_08005600 + 4) + 1;\n      }\n      else {\n        *(int *)(PTR_DAT_08005600 + 4) = *(int *)(PTR_DAT_08005600 + 4) + -1;\n      }\n    }\n    *(int *)(PTR_DAT_08005604 + 4) =\n         *(int *)(*(int *)PTR_DAT_080055fc + 8) + *(int *)(PTR_DAT_08005604 + 4);\n    if (0 < *(int *)(PTR_DAT_08005604 + 4)) {\n      *(ushort *)PTR_DAT_080055f4 = *(ushort *)PTR_DAT_080055f4 | 0x440;\n      *(int *)(PTR_DAT_08005604 + 4) =\n           *(int *)(PTR_DAT_08005604 + 4) - *(int *)(PTR_DAT_08005604 + 0xc);\n      if ((*(ushort *)PTR_DAT_080055f0 & 0x80) == 0) {\n        *(int *)(PTR_DAT_08005600 + 8) = *(int *)(PTR_DAT_08005600 + 8) + 1;\n      }\n      else {\n        *(int *)(PTR_DAT_08005600 + 8) = *(int *)(PTR_DAT_08005600 + 8) + -1;\n      }\n    }\n    *(int *)(PTR_DAT_08005604 + 8) =\n         *(int *)(*(int *)PTR_DAT_080055fc + 0xc) + *(int *)(PTR_DAT_08005604 + 8);\n    if (0 < *(int *)(PTR_DAT_08005604 + 8)) {\n      *(ushort *)PTR_DAT_080055f4 = *(ushort *)PTR_DAT_080055f4 | 0x100;\n      *(int *)(PTR_DAT_08005604 + 8) =\n           *(int *)(PTR_DAT_08005604 + 8) - *(int *)(PTR_DAT_08005604 + 0xc);\n      if ((*(ushort *)PTR_DAT_080055f0 & 0x200) == 0) {\n        *(int *)(PTR_DAT_08005600 + 0xc) = *(int *)(PTR_DAT_08005600 + 0xc) + 1;\n      }\n      else {\n        *(int *)(PTR_DAT_08005600 + 0xc) = *(int *)(PTR_DAT_08005600 + 0xc) + -1;\n      }\n    }\n    *(int *)(PTR_DAT_08005604 + 0x10) = *(int *)(PTR_DAT_08005604 + 0x10) + 1;\n    if (*(uint *)(PTR_DAT_08005604 + 0x10) < *(uint *)(*(int *)PTR_DAT_080055fc + 0x10)) {\n      if (PTR_DAT_08005600[1] == '\\x04') {\n        iVar2 = FUN_08005360();\n        if (iVar2 != 0) {\n          if (*(uint *)(*(int *)PTR_DAT_080055fc + 0x30) < *(uint *)(PTR_DAT_08005604 + 0x1c)) {\n            *(int *)(PTR_DAT_08005604 + 0x1c) =\n                 *(int *)(PTR_DAT_08005604 + 0x1c) - *(int *)(*(int *)PTR_DAT_080055fc + 0x30);\n            FUN_08005324(*(undefined4 *)(PTR_DAT_08005604 + 0x1c));\n          }\n          else {\n            FUN_080057e4();\n            PTR_DAT_08005600[2] = PTR_DAT_08005600[2] | 4;\n          }\n        }\n      }\n      else if (*(uint *)(PTR_DAT_08005748 + 0x10) < *(uint *)(*(int *)PTR_DAT_0800574c + 0x34)) {\n        iVar2 = FUN_08005360();\n        if (iVar2 != 0) {\n          *(int *)(PTR_DAT_08005748 + 0x1c) =\n               *(int *)(PTR_DAT_08005748 + 0x1c) + *(int *)(*(int *)PTR_DAT_0800574c + 0x30);\n          if (*(uint *)(*(int *)PTR_DAT_0800574c + 0x3c) <= *(uint *)(PTR_DAT_08005748 + 0x1c)) {\n            *(undefined4 *)(PTR_DAT_08005748 + 0x1c) =\n                 *(undefined4 *)(*(int *)PTR_DAT_0800574c + 0x3c);\n          }\n          FUN_08005324(*(undefined4 *)(PTR_DAT_08005748 + 0x1c));\n        }\n      }\n      else if (*(uint *)(PTR_DAT_08005748 + 0x10) < *(uint *)(*(int *)PTR_DAT_0800574c + 0x38)) {\n        if (*(int *)(PTR_DAT_08005748 + 0x1c) != *(int *)(*(int *)PTR_DAT_0800574c + 0x3c)) {\n          *(undefined4 *)(PTR_DAT_08005748 + 0x1c) =\n               *(undefined4 *)(*(int *)PTR_DAT_0800574c + 0x3c);\n          FUN_08005324(*(undefined4 *)(PTR_DAT_08005748 + 0x1c));\n        }\n      }\n      else if (*(int *)(PTR_DAT_08005748 + 0x10) == *(int *)(*(int *)PTR_DAT_0800574c + 0x38)) {\n        if (*(int *)(PTR_DAT_08005748 + 0x1c) == *(int *)(*(int *)PTR_DAT_0800574c + 0x3c)) {\n          *(undefined4 *)(PTR_DAT_08005748 + 0x18) = DAT_08005750;\n        }\n        else {\n          *(int *)(PTR_DAT_08005748 + 0x18) = 420000 - *(int *)(PTR_DAT_08005748 + 0x18);\n        }\n      }\n      else {\n        iVar2 = FUN_08005360();\n        if (iVar2 != 0) {\n          if (*(uint *)(PTR_DAT_08005748 + 0x20) < *(uint *)(PTR_DAT_08005748 + 0x1c)) {\n            *(int *)(PTR_DAT_08005748 + 0x1c) =\n                 *(int *)(PTR_DAT_08005748 + 0x1c) - *(int *)(*(int *)PTR_DAT_0800574c + 0x30);\n          }\n          else {\n            *(uint *)(PTR_DAT_08005748 + 0x1c) = *(uint *)(PTR_DAT_08005748 + 0x1c) >> 1;\n          }\n          if (*(uint *)(PTR_DAT_08005748 + 0x1c) < *(uint *)(*(int *)PTR_DAT_0800574c + 0x2c)) {\n            *(undefined4 *)(PTR_DAT_08005748 + 0x1c) =\n                 *(undefined4 *)(*(int *)PTR_DAT_0800574c + 0x2c);\n          }\n          FUN_08005324(*(undefined4 *)(PTR_DAT_08005748 + 0x1c));\n        }\n      }\n    }\n    else {\n      *(undefined2 *)PTR_DAT_08005754 = 0;\n      *(undefined4 *)PTR_DAT_0800574c = 0;\n      FUN_08002f40();\n    }\n  }\n  *(ushort *)PTR_DAT_08005754 = *(ushort *)PTR_DAT_08005754 ^ *(ushort *)(PTR_DAT_08005758 + 0x18);\n  *(ushort *)PTR_DAT_0800575c = *(ushort *)PTR_DAT_0800575c ^ *(ushort *)(PTR_DAT_08005758 + 0x1a);\n  return;\n}\n\n",
            "called": [
                "FUN_080052dc",
                "FUN_08005324",
                "FUN_08002f40",
                "FUN_080057e4",
                "FUN_08005360",
                "FUN_08002f74"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080053a0",
            "calling": [
                "FUN_08007c7c"
            ],
            "imported": false,
            "current_name": "FUNC_080053a0"
        },
        "FUN_080092c4": {
            "renaming": {
                "FUN_080092c4": "copy_and_clear_memory_080092c4",
                "iVar1": "index",
                "puVar2": "src_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "PTR_DAT_0800930c": "PTR_DATA_START",
                "PTR_DAT_08009304": "PTR_DATA_END",
                "PTR_DAT_08009308": "DATA_START",
                "DAT_08009300": "DATA_START",
                "PTR_DAT_08009310": "PTR_BSS_END",
                "FUN_0800756c": "call_function_1",
                "FUN_0800b3e8": "call_function_2",
                "FUN_08007540": "call_function_3"
            },
            "code": "void copy_and_clear_memory_080092c4(void)\n{\n  int index;\n  undefined4 *src_ptr;\n  code *jump_table;\n  for (index = 0; PTR_DAT_0800930c + index < PTR_DAT_08009304; index += 4) {\n    *(undefined4 *)(PTR_DAT_0800930c + index) = *(undefined4 *)(PTR_DAT_08009308 + index);\n  }\n  for (src_ptr = (undefined4 *)PTR_BSS_START; src_ptr < PTR_DAT_08009310; src_ptr++) {\n    *src_ptr = 0;\n  }\n  call_function_1();\n  call_function_2();\n  jump_table = (code *)0x80092fa;\n  call_function_3();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_08007540",
                "FUN_0800756c",
                "FUN_0800b3e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080092c4",
            "calling": [],
            "imported": false,
            "current_name": "copy_and_clear_memory_080092c4"
        },
        "FUN_08008250": {
            "renaming": {
                "FUN_08008250": "call_function_08008250",
                "param_1": "data",
                "FUN_08007e1c": "call_another_function"
            },
            "code": "void call_function_08008250(void* data)\n{\n    call_another_function(data);\n    return;\n}",
            "called": [
                "FUN_08007e1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008250",
            "calling": [
                "FUN_0800369c",
                "FUN_08003826",
                "FUN_080036f0",
                "FUN_080037fc",
                "FUN_08003778",
                "FUN_080036c6"
            ],
            "imported": false,
            "current_name": "call_function_08008250"
        },
        "FUN_0800184c": {
            "renaming": {
                "FUN_0800184c": "check_letter_0800184c",
                "param_1": "output",
                "param_2": "string_address",
                "param_3": "string_length",
                "param_4": "current_position",
                "uVar2": "result",
                "iVar1": "check"
            },
            "code": "int check_letter_0800184c(byte *output, int string_address, int string_length, byte *current_position) {\n  int result = 0;\n  if (*(char *)(string_address + (uint)*current_position) == '\\0') {\n    result = 0;\n  }\n  else {\n    *output = *(byte *)(string_address + (uint)*current_position);\n    if ((*output < 0x41) || (0x5a < *output)) {\n      *PTR_DAT_080018c8 = 2;\n      result = 0;\n    }\n    else {\n      *current_position = *current_position + 1;\n      int check = check_letter_0800184c(output, string_address, string_length, current_position);\n      if (check == 0) {\n        *PTR_DAT_080018c8 = 1;\n        result = 0;\n      }\n      else {\n        result = 1;\n      }\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_08002638"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800184c",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "check_letter_0800184c"
        },
        "FUN_08001f00": {
            "renaming": {
                "FUN_08001f00": "calculate_hash_08001f00",
                "param_1": "buffer1",
                "param_2": "buffer2",
                "param_3": "buffer3",
                "param_4": "byte1_indices",
                "param_5": "byte2_indices",
                "param_6": "byte3_indices",
                "param_7": "uint1",
                "param_8": "char1",
                "param_9": "uint2",
                "param_10": "char2",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "comparison_result",
                "uVar4": "result3",
                "uVar5": "result4",
                "uVar6": "result5",
                "local_6c": "hash_values",
                "local_5c": "temp1",
                "local_58": "temp2",
                "local_54": "temp3",
                "local_50": "temp4",
                "local_4c": "temp5",
                "local_48": "temp6",
                "local_42": "hash_length",
                "local_40": "hash_result",
                "local_3c": "temp7",
                "local_38": "temp8",
                "local_34": "byte3_value",
                "local_30": "byte2_value",
                "local_2c": "byte1_value",
                "local_27": "loop_counter",
                "local_26": "loop_index",
                "local_24": "temp9",
                "local_20": "temp10",
                "local_1c": "temp11"
            },
            "code": "\nvoid calculate_hash_08001f00(int buffer1,undefined4 *buffer2,int buffer3,byte byte1_indices,byte byte2_indices,byte byte3_indices\n                 ,undefined4 uint1,char char1,undefined4 uint2,char char2)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int comparison_result;\n  uint result3;\n  undefined8 result4;\n  undefined8 result5;\n  uint hash_values [4];\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  ushort hash_length;\n  undefined4 hash_result;\n  undefined4 temp7;\n  undefined4 temp8;\n  uint byte3_value;\n  undefined4 byte2_value;\n  undefined4 byte1_value;\n  char loop_counter;\n  ushort loop_index;\n  undefined4 temp9;\n  uint temp10;\n  uint temp11;\n  \n  byte1_value = FUN_08008cdc(*(undefined4 *)((uint)byte1_indices * 4 + buffer1),\n                          *(undefined4 *)((uint)byte1_indices * 4 + buffer3));\n  byte2_value = FUN_08008cdc(*(undefined4 *)((uint)byte2_indices * 4 + buffer1),\n                          *(undefined4 *)((uint)byte2_indices * 4 + buffer3));\n  byte3_value = FUN_08008cd8(buffer2[byte3_indices],*(undefined4 *)((uint)byte3_indices * 4 + buffer1));\n  temp11 = *(uint *)((uint)byte1_indices * 4 + buffer3) ^ 0x80000000;\n  temp10 = *(uint *)((uint)byte2_indices * 4 + buffer3) ^ 0x80000000;\n  temp8 = FUN_08008cd8(buffer2[byte1_indices],byte1_value);\n  temp7 = FUN_08008cd8(buffer2[byte2_indices],byte2_value);\n  result1 = FUN_08008eec(temp11,temp7);\n  result2 = FUN_08008eec(temp10,temp8);\n  result1 = FUN_08008cd8(result1,result2);\n  result4 = FUN_08008590(result1);\n  result1 = FUN_08008eec(temp11,temp8);\n  result2 = FUN_08008eec(temp10,temp7);\n  result1 = FUN_08008cdc(result1,result2);\n  result5 = FUN_08008590(result1);\n  result4 = thunk_FUN_08009990((int)result4,(int)((ulonglong)result4 >> 0x20),(int)result5,\n                             (int)((ulonglong)result5 >> 0x20));\n  temp9 = FUN_08008c30((int)result4,(int)((ulonglong)result4 >> 0x20));\n  if (char2 == '\\0') {\n    comparison_result = FUN_0800923c(temp9,0);\n    if (comparison_result != 0) {\n      result4 = FUN_08008590(temp9);\n      result4 = FUN_080082d4((int)result4,(int)((ulonglong)result4 >> 0x20),DAT_08002240,DAT_08002244);\n      temp9 = FUN_08008c30((int)result4,(int)((ulonglong)result4 >> 0x20));\n    }\n  }\n  else {\n    comparison_result = FUN_08009250(temp9,0);\n    if (comparison_result != 0) {\n      result4 = FUN_08008590(temp9);\n      result4 = FUN_080082d0((int)result4,(int)((ulonglong)result4 >> 0x20),DAT_08002240,DAT_08002244);\n      temp9 = FUN_08008c30((int)result4,(int)((ulonglong)result4 >> 0x20));\n    }\n  }\n  result1 = FUN_08008eec(temp9,uint2);\n  result4 = FUN_08008590(result1);\n  result5 = FUN_08008590(byte3_value & 0x7fffffff);\n  result4 = FUN_0800981c((int)result4,(int)((ulonglong)result4 >> 0x20),(int)result5,\n                       (int)((ulonglong)result5 >> 0x20));\n  hash_result = FUN_08008c30((int)result4,(int)((ulonglong)result4 >> 0x20));\n  comparison_result = FUN_08009214(hash_result,0);\n  if (comparison_result == 0) {\n    result1 = FUN_08009054(hash_result,*(undefined4 *)(PTR_DAT_08002248 + 0x1c));\n    result4 = FUN_08008590(result1);\n    result4 = FUN_080094c0((int)result4,(int)((ulonglong)result4 >> 0x20));\n    hash_length = FUN_08008bf0((int)result4,(int)((ulonglong)result4 >> 0x20));\n    if (char1 != '\\0') {\n      result1 = FUN_08008e44(hash_length);\n      uint1 = FUN_08008eec(uint1,result1);\n    }\n    result1 = FUN_08008e44(hash_length);\n    temp6 = FUN_08009054(temp9,result1);\n    result1 = FUN_08008e44(hash_length);\n    temp5 = FUN_08009054(byte3_value,result1);\n    result4 = FUN_08008590(temp6);\n    result4 = FUN_08008640((int)result4,(int)((ulonglong)result4 >> 0x20),0,DAT_0800224c);\n    result5 = FUN_08008590(temp6);\n    result4 = FUN_08008640((int)result4,(int)((ulonglong)result4 >> 0x20),(int)result5,\n                         (int)((ulonglong)result5 >> 0x20));\n    result4 = FUN_080082d0(0,DAT_08002250,(int)result4,(int)((ulonglong)result4 >> 0x20));\n    temp4 = FUN_08008c30((int)result4,(int)((ulonglong)result4 >> 0x20));\n    temp3 = temp6;\n    loop_counter = '\\0';\n    hash_values[byte3_indices] = *(uint *)(buffer1 + (uint)byte3_indices * 4);\n    for (loop_index = 1; loop_index < hash_length; loop_index = loop_index + 1) {\n      if ((int)loop_counter < (int)(uint)(byte)PTR_DAT_08002248[0x3e]) {\n        result1 = FUN_08008eec(temp11,temp3);\n        result2 = FUN_08008eec(temp10,temp4);\n        hash_values[3] = FUN_08008cdc(result1,result2);\n        result1 = FUN_08008eec(temp11,temp4);\n        result2 = FUN_08008eec(temp10,temp3);\n        temp11 = FUN_08008cd8(result1,result2);\n        temp10 = hash_values[3];\n        loop_counter = loop_counter + '\\x01';\n      }\n      else {\n        result1 = FUN_08008e44(loop_index);\n        result1 = FUN_08008eec(result1,temp6);\n        result4 = FUN_08008590(result1);\n        result4 = FUN_08009410((int)result4,(int)((ulonglong)result4 >> 0x20));\n        temp2 = FUN_08008c30((int)result4,(int)((ulonglong)result4 >> 0x20));\n        result1 = FUN_08008e44(loop_index);\n        result1 = FUN_08008eec(result1,temp6);\n        result4 = FUN_08008590(result1);\n        result4 = FUN_080096e8((int)result4,(int)((ulonglong)result4 >> 0x20));\n        temp1 = FUN_08008c30((int)result4,(int)((ulonglong)result4 >> 0x20));\n        result1 = FUN_08008eec(*(uint *)((uint)byte1_indices * 4 + buffer3) ^ 0x80000000,temp2);\n        result2 = FUN_08008eec(*(undefined4 *)((uint)byte2_indices * 4 + buffer3),temp1);\n        temp11 = FUN_08008cdc(result1,result2);\n        result1 = FUN_08008eec(*(uint *)((uint)byte1_indices * 4 + buffer3) ^ 0x80000000,temp1);\n        result2 = FUN_08008eec(*(undefined4 *)((uint)byte2_indices * 4 + buffer3),temp2);\n        temp10 = FUN_08008cd8(result1,result2);\n        loop_counter = '\\0';\n      }\n      result3 = FUN_08008cdc(byte1_value,temp11);\n      hash_values[byte1_indices] = result3;\n      result3 = FUN_08008cdc(byte2_value,temp10);\n      hash_values[byte2_indices] = result3;\n      result3 = FUN_08008cdc(hash_values[byte3_indices],temp5);\n      hash_values[byte3_indices] = result3;\n      FUN_08001e98(hash_values[0],hash_values[1],hash_values[2],uint1,char1);\n      if (*PTR_DAT_08002404 != '\\0') {\n        return;\n      }\n    }\n    FUN_08001e98(*buffer2,buffer2[1],buffer2[2],uint1,char1);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08009250",
                "FUN_08009410",
                "FUN_080094c0",
                "FUN_08008590",
                "FUN_080096e8",
                "FUN_08008640",
                "FUN_08008bf0",
                "thunk_FUN_08009990",
                "FUN_08008cdc",
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_08008c30",
                "FUN_08008e44",
                "FUN_08001e98",
                "FUN_08009214",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_0800923c",
                "FUN_0800981c",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f00",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "calculate_hash_08001f00"
        },
        "FUN_08006ce0": {
            "renaming": {
                "FUN_08006ce0": "call_function_08006ce0",
                "param_1": "argument",
                "FUN_08006950": "execute_function"
            },
            "code": "void call_function_08006ce0(void* argument)\n{\n  execute_function(argument);\n  return;\n}",
            "called": [
                "FUN_08006950"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ce0",
            "calling": [
                "FUN_080059b4"
            ],
            "imported": false,
            "current_name": "call_function_08006ce0"
        },
        "FUN_08006d4a": {
            "renaming": {
                "FUN_08006d4a": "print_character_08006d4a",
                "param_1": "character_to_print",
                "FUN_080069e4": "print_to_console"
            },
            "code": "void print_character_08006d4a(char character_to_print)\n{\n  print_to_console((int)character_to_print);\n  return;\n}",
            "called": [
                "FUN_080069e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d4a",
            "calling": [],
            "imported": false,
            "current_name": "print_character_08006d4a"
        },
        "FUN_08008894": {
            "renaming": {
                "FUN_08008894": "calculate_double_precision_number_08008894",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_1",
                "uVar2": "temp_2",
                "uVar3": "temp_3",
                "uVar4": "temp_4",
                "uVar5": "temp_5",
                "uVar6": "temp_6",
                "uVar7": "temp_7",
                "iVar8": "temp_8",
                "uVar9": "temp_9",
                "unaff_r5": "temp_10",
                "uVar10": "temp_11",
                "uVar11": "temp_12",
                "uVar12": "temp_13",
                "uVar13": "temp_14",
                "bVar14": "flag_1",
                "bVar15": "flag_2",
                "bVar16": "flag_3",
                "uVar17": "result"
            },
            "code": "\nulonglong calculate_double_precision_number_08008894(undefined4 input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  uint temp_6;\n  uint temp_7;\n  int temp_8;\n  uint temp_9;\n  uint temp_10;\n  uint temp_11;\n  uint temp_12;\n  uint temp_13;\n  uint temp_14;\n  bool flag_1;\n  bool flag_2;\n  bool flag_3;\n  ulonglong result;\n  \n  result = CONCAT44(input_2,input_1);\n  temp_14 = 0x7ff;\n  temp_7 = input_2 >> 0x14 & 0x7ff;\n  flag_1 = temp_7 == 0;\n  if (!flag_1) {\n    temp_10 = input_4 >> 0x14 & 0x7ff;\n    flag_1 = temp_10 == 0;\n  }\n  if (!flag_1) {\n    flag_1 = temp_7 == 0x7ff;\n  }\n  if (!flag_1) {\n    flag_1 = temp_10 == 0x7ff;\n  }\n  if (flag_1) {\n    result = FUN_08008a02();\n  }\n  temp_9 = (uint)(result >> 0x20);\n  temp_12 = (uint)result;\n  temp_8 = temp_7 - temp_10;\n  if ((input_3 | input_4 << 0xc) == 0) {\n    temp_7 = (temp_9 ^ input_4) & 0x80000000 | temp_9 & 0xfffff;\n    flag_3 = SCARRY4(temp_8,temp_14 >> 1);\n    temp_9 = temp_8 + (temp_14 >> 1);\n    flag_1 = (int)temp_9 < 0;\n    flag_2 = temp_9 == 0;\n    if (!flag_2 && flag_1 == flag_3) {\n      flag_3 = SBORROW4(temp_14,temp_9);\n      flag_1 = (int)(temp_14 - temp_9) < 0;\n      flag_2 = temp_14 == temp_9;\n    }\n    if (!flag_2 && flag_1 == flag_3) {\n      temp_7 = temp_7 | temp_9 * 0x100000;\n    }\n    if (!flag_2 && flag_1 == flag_3) {\n      return result & 0xffffffff | (ulonglong)temp_7 << 0x20;\n    }\n    temp_7 = temp_7 | 0x100000;\n    temp_14 = 0;\n    flag_2 = SBORROW4(temp_9,1);\n    temp_9 = temp_9 - 1;\n    flag_1 = temp_9 == 0;\n    temp_3 = temp_9;\n  }\n  else {\n    temp_3 = (input_4 << 0xc) >> 4 | 0x10000000 | input_3 >> 0x18;\n    temp_14 = input_3 << 8;\n    temp_11 = (temp_9 << 0xc) >> 4 | 0x10000000 | temp_12 >> 0x18;\n    temp_12 = temp_12 * 0x100;\n    temp_7 = (temp_9 ^ input_4) & 0x80000000;\n    flag_1 = temp_3 <= temp_11;\n    if (temp_11 == temp_3) {\n      flag_1 = temp_14 <= temp_12;\n    }\n    temp_8 = temp_8 + (uint)flag_1;\n    temp_9 = temp_8 + 0x3fd;\n    if (flag_1 == false) {\n      temp_3 = temp_3 >> 1;\n      temp_14 = (uint)((input_3 >> 0x18 & 1) != 0) << 0x1f | temp_14 >> 1;\n    }\n    temp_13 = temp_12 - temp_14;\n    temp_11 = (temp_11 - temp_3) - (uint)(temp_12 < temp_14);\n    temp_4 = temp_3 >> 1;\n    temp_1 = (uint)((temp_3 & 1) != 0) << 0x1f | temp_14 >> 1;\n    temp_12 = 0x100000;\n    temp_3 = 0x80000;\n    while( true ) {\n      flag_1 = temp_1 <= temp_13;\n      if (temp_4 < temp_11 || temp_11 - temp_4 < (uint)flag_1) {\n        temp_13 = temp_13 - temp_1;\n        temp_12 = temp_12 | temp_3;\n        temp_11 = (temp_11 - temp_4) - (uint)!flag_1;\n      }\n      temp_5 = temp_4 >> 1;\n      temp_1 = (uint)((temp_4 & 1) != 0) << 0x1f | temp_1 >> 1;\n      flag_2 = temp_1 <= temp_13;\n      flag_1 = temp_11 - temp_5 < (uint)flag_2;\n      temp_14 = temp_11;\n      if (temp_5 < temp_11 || flag_1) {\n        temp_13 = temp_13 - temp_1;\n        temp_14 = (temp_11 - temp_5) - (uint)!flag_2;\n      }\n      if (temp_5 < temp_11 || flag_1) {\n        temp_12 = temp_12 | temp_3 >> 1;\n      }\n      temp_11 = temp_4 >> 2;\n      temp_2 = (uint)((temp_5 & 1) != 0) << 0x1f | temp_1 >> 1;\n      flag_2 = temp_2 <= temp_13;\n      flag_1 = temp_14 - temp_11 < (uint)flag_2;\n      temp_5 = temp_14;\n      if (temp_11 < temp_14 || flag_1) {\n        temp_13 = temp_13 - temp_2;\n        temp_5 = (temp_14 - temp_11) - (uint)!flag_2;\n      }\n      if (temp_11 < temp_14 || flag_1) {\n        temp_12 = temp_12 | temp_3 >> 2;\n      }\n      temp_6 = temp_4 >> 3;\n      temp_1 = (uint)((temp_11 & 1) != 0) << 0x1f | temp_2 >> 1;\n      flag_2 = temp_1 <= temp_13;\n      flag_1 = temp_5 - temp_6 < (uint)flag_2;\n      temp_11 = temp_5;\n      if (temp_6 < temp_5 || flag_1) {\n        temp_13 = temp_13 - temp_1;\n        temp_11 = (temp_5 - temp_6) - (uint)!flag_2;\n      }\n      if (temp_6 < temp_5 || flag_1) {\n        temp_12 = temp_12 | temp_3 >> 3;\n      }\n      temp_14 = temp_11 | temp_13;\n      if (temp_14 == 0) break;\n      temp_11 = temp_11 << 4 | temp_13 >> 0x1c;\n      temp_13 = temp_13 << 4;\n      temp_4 = temp_4 & 0xfffffff8 | temp_1 >> 0x1d;\n      temp_1 = (temp_2 >> 1) << 3;\n      temp_3 = temp_3 >> 4;\n      if (temp_3 == 0) {\n        temp_6 = temp_4;\n        if ((temp_7 & 0x100000) != 0) goto LAB_080089b2;\n        temp_7 = temp_7 | temp_12;\n        temp_12 = 0;\n        temp_3 = 0x80000000;\n      }\n    }\n    if ((temp_7 & 0x100000) == 0) {\n      temp_7 = temp_7 | temp_12;\n      temp_12 = 0;\n    }\nLAB_080089b2:\n    flag_3 = 0xfc < temp_9;\n    flag_2 = SBORROW4(temp_9,0xfd);\n    temp_4 = temp_8 + 0x300;\n    flag_1 = temp_4 == 0;\n    temp_3 = temp_4;\n    if (flag_3 && !flag_1) {\n      flag_3 = 0x6ff < temp_4;\n      flag_2 = SBORROW4(temp_4,0x700);\n      temp_3 = temp_8 - 0x400;\n      flag_1 = temp_4 == 0x700;\n    }\n    if (!flag_3 || flag_1) {\n      flag_1 = temp_6 <= temp_11;\n      if (temp_11 == temp_6) {\n        flag_1 = temp_1 <= temp_13;\n      }\n      if (temp_11 == temp_6 && temp_13 == temp_1) {\n        flag_1 = (temp_12 & 1) != 0;\n      }\n      return CONCAT44(temp_7 + temp_9 * 0x100000 + (uint)CARRY4(temp_12,(uint)flag_1),temp_12 + flag_1);\n    }\n  }\n  if (!flag_1 && (int)temp_3 < 0 == flag_2) {\n    return (ulonglong)(temp_7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag_3 = SCARRY4(temp_9,0x36);\n  flag_1 = (int)(temp_9 + 0x36) < 0;\n  flag_2 = temp_9 == 0xffffffca;\n  if (flag_2 || flag_1 != flag_3) {\n    temp_12 = 0;\n  }\n  if (flag_2 || flag_1 != flag_3) {\n    temp_7 = temp_7 & 0x80000000;\n  }\n  if (flag_2 || flag_1 != flag_3) {\n    return CONCAT44(temp_7,temp_12);\n  }\n  temp_3 = -temp_9;\n  temp_11 = temp_3 - 0x20;\n  if (0x1f < (int)temp_3) {\n    temp_3 = temp_12 >> (temp_11 & 0xff) | temp_7 << (0x20 - temp_11 & 0xff);\n    temp_9 = (temp_7 >> (temp_11 & 0xff) & ~((temp_7 & 0x80000000) >> (temp_11 & 0xff))) -\n            ((int)temp_3 >> 0x1f);\n    if ((temp_14 | temp_12 << (0x20 - temp_11 & 0xff) | temp_3 << 1) == 0) {\n      temp_9 = temp_9 & ~(temp_3 >> 0x1f);\n    }\n    return CONCAT44(temp_7,temp_9) & 0x80000000ffffffff;\n  }\n  temp_8 = temp_3 - 0x14;\n  if (temp_8 != 0 && temp_8 < 0 == SCARRY4(temp_11,0xc)) {\n    temp_9 = 0xc - temp_8;\n    temp_3 = temp_12 << (temp_9 & 0xff);\n    temp_12 = temp_12 >> (0x20 - temp_9 & 0xff) | temp_7 << (temp_9 & 0xff);\n    temp_9 = temp_12 + -((int)temp_3 >> 0x1f);\n    if ((temp_14 | temp_3 << 1) == 0) {\n      temp_9 = temp_9 & ~(temp_3 >> 0x1f);\n    }\n    return CONCAT44((temp_7 & 0x80000000) + (uint)CARRY4(temp_12,-((int)temp_3 >> 0x1f)),temp_9);\n  }\n  temp_11 = temp_12 << (temp_9 + 0x20 & 0xff);\n  temp_12 = temp_12 >> (temp_3 & 0xff) | temp_7 << (temp_9 + 0x20 & 0xff);\n  temp_9 = temp_12 + -((int)temp_11 >> 0x1f);\n  if ((temp_14 | temp_11 << 1) == 0) {\n    temp_9 = temp_9 & ~(temp_11 >> 0x1f);\n  }\n  return CONCAT44((temp_7 & 0x80000000) +\n                  ((temp_7 & 0x7fffffff) >> (temp_3 & 0xff)) +\n                  (uint)CARRY4(temp_12,-((int)temp_11 >> 0x1f)),temp_9);\n}\n\n",
            "called": [
                "FUN_08008a02"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008894",
            "calling": [
                "FUN_08001994",
                "FUN_080098d0",
                "FUN_0800a1bc",
                "FUN_080005b4",
                "FUN_08003004",
                "FUN_08009990",
                "FUN_0800af78"
            ],
            "imported": false,
            "current_name": "calculate_double_precision_number_08008894"
        },
        "FUN_08000374": {
            "renaming": {
                "FUN_08000374": "process_input_08000374",
                "param_1": "num_chars",
                "param_2": "input_buffer",
                "param_3": "starting_position",
                "local_1c": "remaining_chars",
                "local_18": "current_char",
                "local_14": "starting_position",
                "local_9": "checksum",
                "PTR_DAT_080003e8": "PTR_DAT_080003e8"
            },
            "code": "void process_input_08000374(int num_chars, char *input_buffer, int starting_position)\\n{\\n  int remaining_chars = num_chars;\\n  char *current_char = input_buffer;\\n  char checksum = \"\\0\";\\n  if (*(int *)PTR_DAT_080003e8 == 0) {\\n    initialize();\\n    current_char = input_buffer;\\n    starting_position = num_chars;\\n  }\\n  for (; remaining_chars != 0; remaining_chars--) {\\n    checksum = (checksum != \"\\0\") + *current_char;\\n    send_byte(starting_position, *current_char);\\n    current_char++;\\n    starting_position++;\\n  }\\n  send_byte(starting_position, checksum);\\n  return;\\n}",
            "called": [
                "FUN_080002f0",
                "FUN_08000340"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000374",
            "calling": [
                "FUN_08004bf4",
                "FUN_08004bc0",
                "FUN_08004c2a"
            ],
            "imported": false,
            "current_name": "process_input_08000374"
        },
        "FUN_080037fc": {
            "renaming": {
                "FUN_080037fc": "print_absolute_value_080037fc",
                "param_1": "value",
                "local_c": "absolute_value",
                "FUN_08008250": "print_character",
                "FUN_08003778": "print_integer"
            },
            "code": "void print_absolute_value_080037fc(int value)\n{\n  int absolute_value;\n  absolute_value = value;\n  if (value < 0) {\n    print_character('-');\n    absolute_value = -value;\n  }\n  print_integer(absolute_value);\n  return;\n}",
            "called": [
                "FUN_08008250",
                "FUN_08003778"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080037fc",
            "calling": [
                "FUN_08004250",
                "FUN_080046d0",
                "FUN_08004900"
            ],
            "imported": false,
            "current_name": "print_absolute_value_080037fc"
        },
        "FUN_0800a1bc": {
            "renaming": {
                "FUN_0800a1bc": "calculate_0800a1bc",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "uVar2": "remainder",
                "iVar3": "temp",
                "uVar4": "bit",
                "uVar5": "temp",
                "uVar6": "bit",
                "uVar7": "bit",
                "uVar8": "dividend",
                "uVar9": "temp",
                "uVar10": "dividend",
                "uVar11": "temp",
                "uVar12": "dividend",
                "uVar13": "quotient",
                "uVar14": "temp"
            },
            "code": "uint calculate_0800a1bc(uint dividend, uint divisor)\n{\n  uint quotient = 0;\n  uint remainder = 0;\n  uint bit = 0;\n  uint temp = 0;\n  if ((0x0800a340 & ~divisor) == 0)\n  {\n    temp = multiply(dividend, divisor);\n    quotient = divide(temp, divisor);\n    return quotient;\n  }\n  if ((int)divisor < 1)\n  {\n    if ((divisor & 0x7fffffff | dividend) == 0)\n    {\n      return dividend;\n    }\n    if (divisor != 0)\n    {\n      temp = divide(dividend, divisor);\n      quotient = multiply(temp, temp);\n      return quotient;\n    }\n    do\n    {\n      bit = dividend >> 0xb;\n      divisor = divisor - 0x15;\n      dividend = dividend << 0x15;\n    } while (bit == 0);\n    remainder = divisor;\n    if (-1 < (int)dividend)\n    {\n      remainder = 0x20;\n      bit = 0xffffffff;\n      divisor = dividend;\n    }\n  }\n  else\n  {\n    remainder = (int)divisor >> 0x14;\n    divisor = dividend;\n    if (remainder != 0)\n    {\n      remainder = 0x20 - count_leading_zeros(remainder);\n      divisor = dividend << remainder;\n    }\n  }\n  remainder = remainder + 0x16;\n  bit = 0x200000;\n  quotient = 0;\n  do\n  {\n    temp = quotient + bit;\n    if (temp <= (int)divisor)\n    {\n      divisor = divisor - temp;\n      quotient = temp + bit;\n    }\n    remainder = remainder - 1;\n    bit = bit >> 1;\n  } while (remainder != 0);\n  return quotient;\n}\n\nuint multiply(uint a, uint b)\n{\n  return (uint)(((ulonglong)a * (ulonglong)b) >> 32);\n}\n\nuint divide(uint a, uint b)\n{\n  return (uint)(((ulonglong)a << 32) / (ulonglong)b);\n}",
            "called": [
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008894"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a1bc",
            "calling": [
                "FUN_080098d0",
                "FUN_08009b24"
            ],
            "imported": false,
            "current_name": "calculate_0800a1bc"
        },
        "FUN_0800525c": {
            "renaming": {
                "FUN_0800525c": "check_and_update_0800525c",
                "param_1": "new_char",
                "*PTR_DAT_080052a8": "*current_char_ptr",
                "FUN_08002fd4": "perform_reset",
                "FUN_08005250": "perform_final_reset",
                "do_nothing_0800522c": "do_nothing_case1",
                "do_nothing_08005220": "do_nothing_case2",
                "do_nothing_08005208": "do_nothing_common"
            },
            "code": "void check_and_update_0800525c(char new_char) {\n  int current_char = (int)*PTR_DAT_080052a8;\n  if (current_char != (uint)(byte)new_char) {\n    perform_reset();\n    if (new_char == '\\0') {\n      perform_final_reset();\n    }\n    else {\n      if (new_char < '\\x01') {\n        do_nothing_case1();\n      }\n      else {\n        do_nothing_case2();\n      }\n      do_nothing_common();\n    }\n    *PTR_DAT_080052a8 = new_char;\n  }\n  return;\n}",
            "called": [
                "FUN_08005250",
                "FUN_08002fd4",
                "FUN_0800522c",
                "FUN_08005220",
                "FUN_08005208"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800525c",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "check_and_update_0800525c"
        },
        "FUN_080073d4": {
            "renaming": {
                "FUN_080073d4": "set_bit_at_position_080073d4",
                "param_1": "position",
                "PTR_": "pointer_",
                "DAT_": "data_"
            },
            "code": "void set_bit_at_position_080073d4(uint position)\n{\n    uint offset = position >> 4;\n    uint base_address = offset * 0x400 + 0x4002001a;\n    uint bit_position = position & 0xf;\n    short* address_to_write = (short*) base_address;\n    short value_to_write = (short)(1 << bit_position);\n    *address_to_write = value_to_write;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073d4",
            "calling": [
                "FUN_08007520"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_080073d4"
        },
        "FUN_08006dfe": {
            "renaming": {
                "FUN_08006dfe": "print_character_08006dfe",
                "param_1": "character",
                "FUN_08006a8c": "print_to_screen"
            },
            "code": "void print_character_08006dfe(char character){\n    print_to_screen((int)character);\n    return;\n}",
            "called": [
                "FUN_08006a8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dfe",
            "calling": [],
            "imported": false,
            "current_name": "print_character_08006dfe"
        },
        "FUN_08006d66": {
            "renaming": {
                "FUN_08006d66": "execute_main_function_08006d66",
                "FUN_08006c70": "call_helper_function"
            },
            "code": "void execute_main_function_08006d66(void)\n{\n  call_helper_function();\n  return;\n}",
            "called": [
                "FUN_08006c70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d66",
            "calling": [],
            "imported": false,
            "current_name": "execute_main_function_08006d66"
        },
        "FUN_08006e88": {
            "renaming": {
                "FUN_08006e88": "update_bits_08006e88",
                "param_1": "bitfield",
                "param_2": "mask",
                "uVar1": "bit",
                "uVar2": "mask_bit",
                "iVar3": "cc_index",
                "local_c": "index"
            },
            "code": "void update_bits_08006e88(uint *bitfield, uint *mask) {\n  uint bit;\n  uint mask_bit;\n  uint value;\n  uint index;\n  uint shift;\n  for (index = 0; index < 0x10; index++) {\n    bit = 1 << (index & 0xff);\n    mask_bit = *mask & bit;\n    if (mask_bit == bit) {\n      value = mask[1] & 3;\n      shift = (index & 0x7f) << 1;\n      bitfield[0] = bitfield[0] & ~(3 << shift);\n      bitfield[0] = bitfield[0] | value << shift;\n      if (((mask[1] == 1) || (mask[1] == 2) || (mask[1] == 0x11) || (mask[1] == 0x12))) {\n        value = mask[3];\n        bitfield[2] = bitfield[2] & ~(3 << shift);\n        bitfield[2] = bitfield[2] | value << shift;\n        bitfield[1] = bitfield[1] & ~(1 << (index & 0xff));\n        bitfield[1] = bitfield[1] | ((mask[1] >> 4) & 1) << (index & 0xff);\n      }\n      value = mask[2];\n      bitfield[3] = bitfield[3] & ~(3 << shift);\n      bitfield[3] = bitfield[3] | value << shift;\n      if ((mask[1] & 0x10000000) != 0) {\n        uint *DAT_0800719c = (uint *)0x0800719c;\n        uint *DAT_080071a0 = (uint *)0x080071a0;\n        uint *DAT_080071a4 = (uint *)0x080071a4;\n        uint *DAT_080071a8 = (uint *)0x080071a8;\n        uint *DAT_080071ac = (uint *)0x080071ac;\n        uint *DAT_080071b0 = (uint *)0x080071b0;\n        uint *DAT_080071b4 = (uint *)0x080071b4;\n        uint *DAT_080071b8 = (uint *)0x080071b8;\n        uint *DAT_080071bc = (uint *)0x080071bc;\n        uint *DAT_080071c0 = (uint *)0x080071c0;\n        uint *DAT_080071c4 = (uint *)0x080071c4;\n        uint *cc = (uint *)DAT_0800719c;\n        uint cc_index;\n        cc[1] = cc[1] & ~mask_bit;\n        cc[0] = cc[0] & ~mask_bit;\n        if ((mask[1] & 0x10000) != 0) {\n          cc[1] = cc[1] | mask_bit;\n        }\n        if ((mask[1] & 0x20000) != 0) {\n          cc[0] = cc[0] | mask_bit;\n        }\n        cc[3] = cc[3] & ~mask_bit;\n        cc[2] = cc[2] & ~mask_bit;\n        if ((mask[1] & 0x100000) != 0) {\n          cc[3] = cc[3] | mask_bit;\n        }\n        if ((mask[1] & 0x200000) != 0) {\n          cc[2] = cc[2] | mask_bit;\n        }\n        cc_index = (index >> 2) + 2;\n        DAT_080071a0[cc_index] = DAT_080071a0[cc_index] & ~(0xf << ((index & 3) << 2));\n        if (bitfield == DAT_080071a4) {\n          cc_index = 0;\n        }\n        else if (bitfield == DAT_080071a8) {\n          cc_index = 1;\n        }\n        else if (bitfield == DAT_080071ac) {\n          cc_index = 2;\n        }\n        else if (bitfield == DAT_080071b0) {\n          cc_index = 3;\n        }\n        else if (bitfield == DAT_080071b4) {\n          cc_index = 4;\n        }\n        else if (bitfield == DAT_080071b8) {\n          cc_index = 5;\n        }\n        else if (bitfield == DAT_080071bc) {\n          cc_index = 6;\n        }\n        else if (bitfield == DAT_080071c0) {\n          cc_index = 7;\n        }\n        else if (bitfield == DAT_080071c4) {\n          cc_index = 8;\n        }\n        else {\n          cc_index = 10;\n        }\n        DAT_080071a0[cc_index + 2] = DAT_080071a0[cc_index + 2] | (cc_index << ((index & 3) << 2));\n      }\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e88",
            "calling": [
                "FUN_0800640c",
                "FUN_0800778c"
            ],
            "imported": false,
            "current_name": "update_bits_08006e88"
        },
        "FUN_080001e0": {
            "renaming": {
                "FUN_080001e0": "do_nothing_080001e0"
            },
            "code": "\nvoid do_nothing_080001e0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001e0",
            "calling": [
                "FUN_08000220"
            ],
            "imported": false,
            "current_name": "do_nothing_080001e0"
        },
        "FUN_080036f0": {
            "renaming": {
                "FUN_080036f0": "print_binary_representation_of_number_080036f0",
                "param_1": "number",
                "param_2": "num_bits",
                "uVar1": "binary_digit",
                "local_10": "i",
                "local_c": "mask"
            },
            "code": "void print_binary_representation_of_number_080036f0(uint number, int num_bits) {\n\tuint mask = 1 << (num_bits - 1);\n\tfor (int i = 0; i < num_bits; i++) {\n\t\tif ((mask & number) == 0) {\n\t\t\tputchar('0');\n\t\t} else {\n\t\t\tputchar('1');\n\t\t}\n\t\tmask >>= 1;\n\t}\n}",
            "called": [
                "FUN_08008250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036f0",
            "calling": [
                "FUN_0800375c",
                "FUN_08003740"
            ],
            "imported": false,
            "current_name": "print_binary_representation_of_number_080036f0"
        },
        "FUN_08002edc": {
            "renaming": {
                "FUN_08002edc": "run_all_functions_08002edc",
                "FUN_08002a94": "initialize_data_structures",
                "FUN_08002ba8": "process_input_data",
                "FUN_08002e08": "output_results"
            },
            "code": "void run_all_functions_08002edc(void)\n{\n  initialize_data_structures();\n  process_input_data();\n  output_results();\n  return;\n}",
            "called": [
                "FUN_08002e08",
                "FUN_08002ba8",
                "FUN_08002a94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002edc",
            "calling": [
                "FUN_08003004",
                "FUN_08003618"
            ],
            "imported": false,
            "current_name": "run_all_functions_08002edc"
        },
        "FUN_0800375c": {
            "renaming": {
                "FUN_0800375c": "copy_data_to_buffer_0800375c",
                "param_1": "data",
                "FUN_080036f0": "copy_data",
                "buffer_size": "buffer_size"
            },
            "code": "void copy_data_to_buffer_0800375c(void* data) {\n    size_t buffer_size = 0x10;\n    copy_data(data, buffer_size);\n    return;\n}",
            "called": [
                "FUN_080036f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800375c",
            "calling": [
                "FUN_08004250"
            ],
            "imported": false,
            "current_name": "copy_data_to_buffer_0800375c"
        },
        "FUN_08009990": {
            "renaming": {
                "FUN_08009990": "calculate_08009990",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "iVar1": "difference",
                "uVar2": "result",
                "uVar3": "remainder1",
                "uVar4": "remainder2",
                "uVar5": "quotient1",
                "uVar6": "uVar6"
            },
            "code": "uint calculate_08009990(uint num1, uint num2, uint num3, uint num4)\n{\n  int difference;\n  undefined4 result;\n  uint remainder1;\n  uint remainder2;\n  uint quotient1;\n  uint quotient2;\n  undefined8 uVar6;\n  \n  uVar6 = CONCAT44(DAT_08009b04,DAT_08009b00);\n  remainder2 = num4 & 0x7fffffff;\n  if ((DAT_08009b18 < (remainder2 | (-num3 | num3) >> 0x1f)) ||\n     (remainder1 = num2 & 0x7fffffff, DAT_08009b18 < (remainder1 | (-num1 | num1) >> 0x1f))) {\n    remainder2 = FUN_080082d4(num3,num4,num1,num2);\n  }\n  else {\n    if ((num4 + 0xc0100000 | num3) == 0) {\n      remainder2 = FUNC_0800af78();\n      return remainder2;\n    }\n    quotient1 = (int)num4 >> 0x1e & 2U | num2 >> 0x1f;\n    if ((remainder1 | num1) == 0) {\n      remainder2 = DAT_08009af0;\n      if ((quotient1 != 2) && (remainder2 = num1, quotient1 == 3)) {\n        remainder2 = DAT_08009af8;\n      }\n    }\n    else {\n      if ((remainder2 | num3) != 0) {\n        if (remainder2 == DAT_08009b18) {\n          quotient1 = quotient1 - 1;\n          if (remainder1 == remainder2) {\n            if (2 < quotient1) {\n              return DAT_08009b10;\n            }\n            return *(uint *)(PTR_DAT_08009b20 + quotient1 * 8);\n          }\n          if (quotient1 < 3) {\n            return *(uint *)(PTR_DAT_08009b1c + quotient1 * 8);\n          }\n          return 0;\n        }\n        if (remainder1 != DAT_08009b18) {\n          difference = (int)(remainder1 - remainder2) >> 0x14;\n          if ((int)(remainder1 - remainder2) < 0x3d00000) {\n            if (((int)num4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n              uVar6 = 0;\n            }\n            else {\n              FUN_08008894(num1,num2,num3,num4,num4);\n              do_nothing_0800b2cc();\n              uVar6 = FUNC_0800af78();\n            }\n          }\n          result = (undefined4)((ulonglong)uVar6 >> 0x20);\n          remainder2 = (uint)uVar6;\n          if (quotient1 == 1) {\n            return remainder2;\n          }\n          if (quotient1 == 2) {\n            uVar6 = FUN_080082d0(remainder2,result,DAT_08009ae8,DAT_08009aec);\n            remainder2 = FUN_080082d0(DAT_08009af0,DAT_08009af4,(int)uVar6,\n                                 (int)((ulonglong)uVar6 >> 0x20));\n            return remainder2;\n          }\n          if (quotient1 == 0) {\n            return remainder2;\n          }\n          uVar6 = FUN_080082d0(remainder2,result,DAT_08009ae8,DAT_08009aec);\n          remainder2 = FUN_080082d0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_08009af0,DAT_08009af4)\n          ;\n          return remainder2;\n        }\n      }\n      remainder2 = DAT_08009b08;\n      if (-1 < (int)num2) {\n        remainder2 = DAT_08009b00;\n      }\n    }\n  }\n  return remainder2;\n}",
            "called": [
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_0800af78",
                "FUN_08008894",
                "FUN_0800b2cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009990",
            "calling": [
                "thunk_FUN_08009990"
            ],
            "imported": false,
            "current_name": "calculate_08009990"
        },
        "FUN_08007e58": {
            "renaming": {
                "FUN_08007e58": "is_bit_set_at_position_5_08007e58",
                "DAT_08007e80": "data_pointer"
            },
            "code": "bool is_bit_set_at_position_5_08007e58(void)\n{\n  const uint8_t* DAT_08007e80 = DAT_08007e80;\n  const uint8_t bit_mask = 0x20;\n  return (*DAT_08007e80 & bit_mask) != 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e58",
            "calling": [
                "FUN_08008286"
            ],
            "imported": false,
            "current_name": "is_bit_set_at_position_5_08007e58"
        },
        "FUN_080059f8": {
            "renaming": {
                "FUN_080059f8": "initialize_data_080059f8",
                "DAT_08005a4c": "data",
                "PTR_08005a5c": "do_nothing_08005a5c"
            },
            "code": "int initialize_data_080059f8() {\n    int* DAT_08005a4c_ptr = (int*)DAT_08005a4c;\n    *DAT_08005a4c_ptr++ = -1;\n    *DAT_08005a4c_ptr = 0;\n    *++DAT_08005a4c_ptr = -1;\n    *DAT_08005a4c_ptr = 0;\n    *++DAT_08005a4c_ptr = -1;\n    *DAT_08005a4c_ptr = 0;\n    *++DAT_08005a4c_ptr = -1;\n    *DAT_08005a4c_ptr = 0;\n    *++DAT_08005a4c_ptr = -1;\n    *DAT_08005a4c_ptr = 0;\n    PTR_08005a5c();\n    return 0;\n}",
            "called": [
                "FUN_08005a5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059f8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_080059f8"
        },
        "FUN_08003f34": {
            "renaming": {
                "FUN_08003f34": "read_input_and_process_08003f34",
                "bVar1": "current_char",
                "bVar2": "current_char",
                "uVar3": "result",
                "*PTR_DAT_08004028": "is_parenthesis_open",
                "*PTR_DAT_08004020": "input_buffer_index",
                "PTR_DAT_08004024": "input_buffer",
                "FUN_08008286": "get_next_char",
                "FUN_08003980": "print_prompt",
                "FUN_08003a74": "print_error_and_exit",
                "FUN_08003b98": "process_input",
                "*PTR_DAT_0800401c": "result"
            },
            "code": "void read_input_and_process_08003f34(void)\n{\n  char current_char;\n  char *PTR_DAT_08004028 = 0;\n  char PTR_DAT_08004024[256];\n  int *PTR_DAT_08004020 = 0;\n  int *PTR_DAT_0800401c = 0;\n  while(true) {\n    current_char = get_next_char();\n    if (current_char == 0xff) {\n      return;\n    }\n    if ((current_char == 10) || (current_char == 0xd)) {\n      continue;\n    }\n    if (PTR_DAT_08004024[0] == '\\0') {\n      if ((current_char > 0x20) && (current_char != 0x2f)) {\n        if (current_char == 0x28) {\n          *PTR_DAT_08004028 = 1;\n        }\n        else if (*PTR_DAT_0800401c == -1) {\n          print_error_and_exit();\n        }\n        else if ((current_char < 0x61) || (0x7a < current_char)) {\n          PTR_DAT_08004024[*PTR_DAT_08004020] = current_char;\n          *PTR_DAT_08004020++;\n        }\n        else {\n          PTR_DAT_08004024[*PTR_DAT_08004020] = current_char - 0x20;\n          *PTR_DAT_08004020++;\n        }\n      }\n    }\n    else if (current_char == 0x29) {\n      *PTR_DAT_08004028 = 0;\n    }\n    if (!*PTR_DAT_08004028) {\n      if (*PTR_DAT_0800401c != 0) {\n        PTR_DAT_08004024[*PTR_DAT_08004020] = '\\0';\n        *PTR_DAT_0800401c = process_input(PTR_DAT_08004024);\n        print_*PTR_DAT_0800401c(*PTR_DAT_0800401c);\n        *PTR_DAT_08004020 = 0;\n      }\n      else if (*PTR_DAT_08004020 == 0) {\n        print_prompt();\n      }\n    }\n  }\n}\n",
            "called": [
                "FUN_08008286",
                "FUN_08003980",
                "FUN_08004030",
                "FUN_08003b98",
                "FUN_08003a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f34",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "read_input_and_process_08003f34"
        },
        "FUN_080095b8": {
            "renaming": {
                "FUN_080095b8": "calculate_signed_dividend_080095b8",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "shifted_1",
                "uVar2": "divisor_shifted",
                "uVar3": "dividend_normalized",
                "uVar5": "divisor_shifted_minus_1023",
                "iVar4": "sign"
            },
            "code": "int calculate_signed_dividend_080095b8(uint dividend, uint divisor)\n{\n    uint divisor_shifted = (divisor << 1) >> 0x15;\n    uint divisor_shifted_minus_1023 = divisor_shifted - 0x3ff;\n    int sign = (int)divisor < 0 ? -1 : 1;\n    uint dividend_normalized = dividend & 0xfffff | 0x100000;\n    if ((int)divisor_shifted_minus_1023 < 0x14)\n    {\n        if ((int)divisor_shifted_minus_1023 < 0)\n        {\n            if (divisor_shifted_minus_1023 != 0xffffffff)\n            {\n                sign = 0;\n            }\n            return sign;\n        }\n        dividend_normalized = dividend_normalized + (0x80000 >> (divisor_shifted_minus_1023 & 0xff)) >> (0x14 - divisor_shifted_minus_1023 & 0xff);\n    }\n    else\n    {\n        if (0x1e < divisor_shifted_minus_1023)\n        {\n            return FUN_08008ba0();\n        }\n        if ((int)divisor_shifted_minus_1023 < 0x34)\n        {\n            uint divisor_shifted_minus_1043 = divisor_shifted - 0x413;\n            uint shift_amount = divisor_shifted_minus_1043 & 0xff;\n            uint shifted_1 = 0x80000000 >> shift_amount;\n            if (CARRY4(shifted_1, dividend) != false)\n            {\n                dividend_normalized = dividend_normalized + 1;\n            }\n            dividend_normalized = dividend_normalized << shift_amount;\n            if (divisor_shifted_minus_1023 != 0x14)\n            {\n                dividend_normalized = dividend_normalized | shifted_1 + dividend >> (0x34 - divisor_shifted_minus_1023 & 0xff);\n            }\n        }\n        else\n        {\n            uint divisor_shifted_minus_1075 = divisor_shifted - 0x433;\n            uint shift_amount_2 = divisor_shifted_minus_1075 & 0xff;\n            dividend_normalized = dividend_normalized << shift_amount_2 | dividend << shift_amount_2;\n        }\n    }\n    return dividend_normalized * sign;\n}",
            "called": [
                "FUN_08008ba0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080095b8",
            "calling": [
                "FUN_08001994",
                "FUN_08003004"
            ],
            "imported": false,
            "current_name": "calculate_signed_dividend_080095b8"
        },
        "FUN_08006cf6": {
            "renaming": {
                "FUN_08006cf6": "print_result_08006cf6",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "uVar1": "result",
                "FUN_08006998": "calculate_result",
                "FUN_08006ba0": "process_input",
                "FUN_08006b00": "print_output"
            },
            "code": "void print_result_08006cf6(char output, int input1, int input2)\n{\n  int result = calculate_result();\n  result = process_input(result, input1, input2);\n  print_output((int)output, result);\n  return;\n}",
            "called": [
                "FUN_08006b00",
                "FUN_08006998",
                "FUN_08006ba0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006cf6",
            "calling": [
                "FUN_08007a70"
            ],
            "imported": false,
            "current_name": "print_result_08006cf6"
        },
        "FUN_08002ef0": {
            "renaming": {
                "FUN_08002ef0": "copy_and_transform_data_08002ef0",
                "uVar1": "transformed_data",
                "*PTR_DAT_08002f1c": "destination_data",
                "*PTR_DAT_08002f18": "source_data",
                "*PTR_DAT_08002f20": "transformed_destination_data",
                "FUN_08002870": "transform_data"
            },
            "code": "void copy_and_transform_data_08002ef0() {\n  char* *PTR_DAT_08002f18 = PTR_DAT_08002f18;\n  char* *PTR_DAT_08002f1c = PTR_DAT_08002f1c;\n  char transformed_data = transform_data(**PTR_DAT_08002f18);\n  *PTR_DAT_08002f20 = transformed_data;\n  return;\n}",
            "called": [
                "FUN_08002870"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ef0",
            "calling": [
                "FUN_08002f24"
            ],
            "imported": false,
            "current_name": "copy_and_transform_data_08002ef0"
        },
        "FUN_08001d4c": {
            "renaming": {
                "FUN_08001d4c": "print_numbers_08001d4c",
                "cVar1": "current_number",
                "local_9": "loop_counter",
                "FUN_08001994": "print_number",
                "do_nothing_08002814": "do_nothing",
                "FUN_08005790": "initialize_printer",
                "FUN_080057e4": "finalize_printer"
            },
            "code": "void print_numbers_08001d4c(void)\\n{\\n  char current_number;\\n  char loop_counter;\\n  \\n  initialize_printer();\\n  print_number(4, 1, 0, *(undefined4 *)(PTR_DAT_08001dd8 + 0x30));\\n  print_number(3, 1, 0, *(undefined4 *)(PTR_DAT_08001dd8 + 0x30));\\n  do_nothing_08002814(*(undefined2 *)(PTR_DAT_08001dd8 + 0x34));\\n  loop_counter = 2;\\n  while( true ) {\\n    current_number = loop_counter + -1;\\n    if (loop_counter == \"\\0\") break;\\n    print_number(7, 0, 1, *(undefined4 *)(PTR_DAT_08001dd8 + 0x2c));\\n    do_nothing_08002814(*(undefined2 *)(PTR_DAT_08001dd8 + 0x34));\\n    loop_counter = current_number;\\n    if (\"\\0\" < current_number) {\\n      print_number(7, 1, 0, *(undefined4 *)(PTR_DAT_08001dd8 + 0x2c));\\n      do_nothing_08002814(*(undefined2 *)(PTR_DAT_08001dd8 + 0x34));\\n    }\\n  }\\n  finalize_printer();\\n  return;\\n}",
            "called": [
                "FUN_08001994",
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_08002814"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001d4c",
            "calling": [
                "FUN_080024c4"
            ],
            "imported": false,
            "current_name": "print_numbers_08001d4c"
        },
        "FUN_08000268": {
            "renaming": {
                "FUN_08000268": "calculate_result_08000268",
                "iVar1": "result",
                "FUN_08005a84": "get_value_from_function",
                "DAT_0800029c": "data_multiplier",
                "*(uint *)(DAT_08000298 + 8) >> 3": "data"
            },
            "code": "int calculate_result_08000268(void)\n{\n  int result = get_value_from_function();\n  int modified_result = (result + 1) * 1000;\n  int *(uint *)(DAT_08000298 + 8) >> 3 = *(uint *)(DAT_08000298 + 8) >> 3;\n  int DAT_0800029c = (uint)((ulonglong)DAT_0800029c * (ulonglong)*(uint *)(DAT_08000298 + 8) >> 3 >> 0x21);\n  return modified_result - DAT_0800029c;\n}",
            "called": [
                "FUN_08005a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000268",
            "calling": [
                "FUN_080002b6"
            ],
            "imported": false,
            "current_name": "calculate_result_08000268"
        },
        "FUN_08003778": {
            "renaming": {
                "FUN_08003778": "print_uint_as_string_08003778",
                "param_1": "number",
                "local_1c": "quotient",
                "acStack_15": "digits",
                "local_9": "digit_index",
                "uVar1": "remainder"
            },
            "code": "void print_uint_as_string_08003778(uint number)\n{\n  uint remainder;\n  uint quotient = number;\n  char digits[12];\n  byte digit_index = 0;\n  if (number == 0) {\n    print_char('0');\n  }\n  else {\n    for (; quotient != 0; quotient /= 10)\n    {\n      remainder = quotient % 10;\n      digits[digit_index] = remainder + '0';\n      digit_index++;\n    }\n    for (; digit_index != 0; digit_index--) {\n      print_char(digits[digit_index - 1]);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08008250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003778",
            "calling": [
                "FUN_080037fc"
            ],
            "imported": false,
            "current_name": "print_uint_as_string_08003778"
        },
        "FUN_0800b3dc": {
            "renaming": {
                "FUN_0800b3dc": "get_value_from_pointer_array_0800b3dc",
                "PTR_PTR_DAT_0800b3e4": "PTR_PTR_DAT_0800b3e4"
            },
            "code": "int get_value_from_pointer_array_0800b3dc() {\n    int* ptr_to_ptr = (int*) PTR_PTR_DAT_0800b3e4;\n    return *ptr_to_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b3dc",
            "calling": [
                "FUN_080098d0",
                "FUN_0800981c"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_array_0800b3dc"
        },
        "FUN_080046d0": {
            "renaming": {
                "FUN_080046d0": "print_data_080046d0",
                "PTR_DAT_08004890": "data_array",
                "PTR_DAT_080048a8": "string1",
                "PTR_DAT_08004890[0x1c]": "char1",
                "PTR_DAT_08004890[0x19]": "bool1",
                "PTR_DAT_08004890[0x1a]": "bool2",
                "PTR_DAT_080048ac": "string2",
                "PTR_DAT_080048b0": "string3",
                "PTR_DAT_080048b4": "string4",
                "PTR_DAT_08004890[3]": "bool3",
                "PTR_DAT_080048bc": "string5",
                "PTR_DAT_080048b8": "string6",
                "PTR_DAT_08004890[4]": "bool4",
                "PTR_DAT_080048c4": "string7",
                "PTR_DAT_080048c0": "string8",
                "PTR_DAT_08004890[2]": "bool5",
                "PTR_DAT_080048cc": "string9",
                "PTR_DAT_080048c8": "string10",
                "PTR_DAT_08004890[5]": "byte1",
                "PTR_DAT_080048d8": "string11",
                "PTR_DAT_08004890[6]": "char2",
                "PTR_DAT_080048dc": "string12",
                "PTR_DAT_08004890[7]": "byte2",
                "PTR_DAT_080048f0": "string13",
                "PTR_DAT_080048e8": "string14",
                "PTR_DAT_080048ec": "string15",
                "PTR_DAT_080048f4": "string16",
                "PTR_DAT_08004890[0x18]": "char3",
                "PTR_DAT_080048f8": "string17",
                "PTR_DAT_08004890[3] == 0": "bool6",
                "*(int *)(PTR_DAT_08004890 + 8)": "int1",
                "PTR_DAT_080048fc": "string18",
                "switchD_080046de::switchdataD_080046e4": "switch_table"
            },
            "code": "void print_data_080046d0(void)\n{\n    byte data1 = PTR_DAT_08004890[1];\n    if (data1 > 4) {\n        print_string(PTR_DAT_080048a8);\n        print_char(PTR_DAT_08004890[0x1c] + 0x36);\n        if (PTR_DAT_08004890[0x19] == 0) {\n            if (PTR_DAT_08004890[0x1a] == 1) {\n                print_string(PTR_DAT_080048ac);\n            }\n            else {\n                print_string(PTR_DAT_080048b0);\n            }\n        }\n        else {\n            print_string(PTR_DAT_080048b4);\n        }\n        if (PTR_DAT_08004890[3] == 0) {\n            print_string(PTR_DAT_080048bc);\n        }\n        else {\n            print_string(PTR_DAT_080048b8);\n        }\n        if (PTR_DAT_08004890[4] == 0) {\n            print_string(PTR_DAT_080048c4);\n        }\n        else {\n            print_string(PTR_DAT_080048c0);\n        }\n        if (PTR_DAT_08004890[2] == 0) {\n            print_string(PTR_DAT_080048cc);\n        }\n        else {\n            print_string(PTR_DAT_080048c8);\n        }\n        byte data2 = PTR_DAT_08004890[5];\n        if (data2 == 2) {\n            print_string(PTR_DAT_080048d8);\n        }\n        else if (data2 < 3) {\n            if (data2 == 0) {\n                print_string(PTR_DAT_080048d0);\n            }\n            else if (data2 == 1) {\n                print_string(PTR_DAT_080048d4);\n            }\n        }\n        char data3 = PTR_DAT_08004890[6];\n        if (data3 == 1) {\n            print_string(PTR_DAT_080048dc);\n        }\n        else if (data3 < 2) {\n            if (data3 == -1) {\n                print_string(PTR_DAT_080048e0);\n            }\n            else if (data3 == 0) {\n                print_string(PTR_DAT_080048e4);\n            }\n        }\n        byte data4 = PTR_DAT_08004890[7];\n        if (data4 == 2) {\n            print_string(PTR_DAT_080048f0);\n        }\n        else if (data4 < 3) {\n            if (data4 == 0) {\n                print_string(PTR_DAT_080048e8);\n            }\n            else if (data4 == 1) {\n                print_string(PTR_DAT_080048ec);\n            }\n        }\n        print_string(PTR_DAT_080048f4);\n        print_char(PTR_DAT_08004890[0x18]);\n        print_string(PTR_DAT_080048f8);\n        if (PTR_DAT_08004890[3] == 0) {\n            print_int(*(int *)(PTR_DAT_08004890 + 8));\n        }\n        else {\n            long long data5 = find_data(*(int *)(PTR_DAT_08004890 + 8));\n            data5 = process_data((int)data5, (int)(data5 >> 0x20), DAT_08004888, DAT_0800488c);\n            int result = calculate_data((int)data5, (int)(data5 >> 0x20));\n            print_int(result);\n        }\n        print_string(PTR_DAT_080048fc);\n        return;\n    }\n    (*(code *)(&switchD_080046de::switchdataD_080046e4)[data1])();\n    return;\n}",
            "called": [
                "FUN_08008590",
                "FUN_08008c30",
                "FUN_080037fc",
                "FUN_08003826",
                "FUN_08008640",
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046d0",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "print_data_080046d0"
        },
        "FUN_08006d72": {
            "renaming": {
                "FUN_08006d72": "calculate_value_08006d72",
                "param_1": "input_value",
                "uVar1": "result_value",
                "FUN_08006c9c": "calculate_intermediate_value"
            },
            "code": "undefined4 calculate_value_08006d72(undefined4 input_value)\n{\n  undefined4 result_value;\n  result_value = calculate_intermediate_value(input_value);\n  return result_value;\n}",
            "called": [
                "FUN_08006c9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d72",
            "calling": [
                "FUN_080059b4"
            ],
            "imported": false,
            "current_name": "calculate_value_08006d72"
        },
        "FUN_0800756c": {
            "renaming": {
                "FUN_0800756c": "set_bit_and_clear_other_bits_0800756c",
                "DAT_080075bc": "ptr_data",
                "DAT_080075c0": "value_to_set",
                "DAT_080075c4": "ptr_data2"
            },
            "code": "void set_bit_and_clear_other_bits_0800756c(void)\n{\n  unsigned int *DAT_080075bc = DAT_080075bc;\n  unsigned int mask1 = 0x1;\n  unsigned int mask2 = 0xfef6ffff;\n  unsigned int mask3 = 0xfffbffff;\n  unsigned int value1 = *DAT_080075bc | mask1;\n  DAT_080075bc[2] = 0;\n  unsigned int value2 = value1 & mask2;\n  DAT_080075bc[1] = DAT_080075c0;\n  unsigned int value3 = value2 & mask3;\n  DAT_080075bc[3] = 0;\n  unsigned int *DAT_080075c4 = (unsigned int *)(DAT_080075c4 + 8);\n  *DAT_080075c4 = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800756c",
            "calling": [
                "FUN_080092c4"
            ],
            "imported": false,
            "current_name": "set_bit_and_clear_other_bits_0800756c"
        },
        "FUN_080001f8": {
            "renaming": {
                "FUN_080001f8": "clear_pointer_and_call_function_080001f8",
                "PTR_DAT_0800020c": "pointer_to_data",
                "FUN_08000210": "call_other_function"
            },
            "code": "void clear_pointer_and_call_function_080001f8(void)\n{\n  *PTR_DAT_0800020c = 0;\n  call_other_function();\n  return;\n}",
            "called": [
                "FUN_08000210"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001f8",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "clear_pointer_and_call_function_080001f8"
        },
        "FUN_08002f74": {
            "renaming": {
                "FUN_08002f74": "get_data_pointer_08002f74",
                "*PTR_DAT_08002fa0": "data_start",
                "*PTR_DAT_08002fa4": "data_end",
                "puVar1": "data_pointer",
                "PTR_DAT_08002fa8": "data"
            },
            "code": "undefined* get_data_pointer_08002f74() {\n    undefined* PTR_DAT_08002fa8_pointer;\n    if (**PTR_DAT_08002fa0 == **PTR_DAT_08002fa4) {\n        PTR_DAT_08002fa8_pointer = (undefined*)0x0;\n    }\n    else {\n        PTR_DAT_08002fa8_pointer = *PTR_DAT_08002fa0 + (uint)(byte)**PTR_DAT_08002fa4 * 0x40;\n    }\n    return PTR_DAT_08002fa8_pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f74",
            "calling": [
                "FUN_080053a0",
                "FUN_08002fd4"
            ],
            "imported": false,
            "current_name": "get_data_pointer_08002f74"
        },
        "FUN_0800b3e8": {
            "renaming": {
                "FUN_0800b3e8": "execute_functions_0800b3e8",
                "iVar1": "i",
                "ppcVar2": "function_ptr",
                "iVar3": "num_functions2",
                "do_nothing_0800b5b0": "do_nothing"
            },
            "code": "void execute_functions_0800b3e8() {\n  int num_functions = (int)PTR_DAT_0800b420 - (int)PTR_DAT_0800b424 >> 2;\n  if (num_functions != 0) {\n    int i = 0;\n    code **function_ptr = (code **)PTR_DAT_0800b424;\n    do {\n      i++;\n      (**function_ptr)();\n      function_ptr++;\n    } while (num_functions != i);\n  }\n  function_ptr = (code **)PTR_DAT_0800b42c;\n  int num_functions2 = (int)PTR_DAT_0800b428 - (int)PTR_DAT_0800b42c >> 2;\n  do_nothing_0800b5b0();\n  if (num_functions2 != 0) {\n    int i = 0;\n    do {\n      i++;\n      (**function_ptr)();\n      function_ptr++;\n    } while (num_functions2 != i);\n  }\n}",
            "called": [
                "FUN_080001ac",
                "FUN_0800b4d0",
                "FUN_0800b5b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b3e8",
            "calling": [
                "FUN_080092c4"
            ],
            "imported": false,
            "current_name": "execute_functions_0800b3e8"
        },
        "FUN_080096e8": {
            "renaming": {
                "FUN_080096e8": "calculateResult_080096e8",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "tempInput",
                "local_28": "local1",
                "uStack_24": "stackVar1",
                "local_20": "local2",
                "uStack_1c": "stackVar2"
            },
            "code": "undefined4 calculateResult_080096e8(undefined4 input1, uint input2)\n{\n  undefined4 result;\n  uint tempInput;\n  undefined4 local1;\n  undefined4 stackVar1;\n  undefined4 local2;\n  undefined4 stackVar2;\n  if (DAT_08009790 < (int)(input2 & 0x7fffffff)) {\n    if (DAT_08009794 < (int)(input2 & 0x7fffffff)) {\n      result = FUN_080082d0(input1, input2, input1, input2);\n    }\n    else {\n      tempInput = FUNC_08009d78(input1, input2, &local1);\n      tempInput = tempInput & 3;\n      if (tempInput == 1) {\n        result = FUN_0800a348(local1, stackVar1, local2, stackVar2);\n      }\n      else if (tempInput == 2 || tempInput == 0) {\n        result = FUN_0800adf0(local1, stackVar1, local2, stackVar2, 1);\n      }\n      else {\n        result = FUN_0800a348(local1, stackVar1, local2, stackVar2);\n      }\n    }\n    return result;\n  }\n  result = FUN_0800adf0(input1, input2, 0, 0, 0);\n  return result;\n}",
            "called": [
                "FUN_0800adf0",
                "FUN_080082d0",
                "FUN_08009d78",
                "FUN_0800a348"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080096e8",
            "calling": [
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "calculateResult_080096e8"
        },
        "FUN_08006a18": {
            "renaming": {
                "FUN_08006a18": "check_bit_08006a18",
                "param_1": "input_byte",
                "DAT_08006a54": "PTR_data",
                "uint": "unsigned int",
                "index": "data_index",
                "bitmask": "bit_mask",
                "* (uint *)": "",
                "&": "",
                "<<": "",
                "!= 0": ""
            },
            "code": "bool check_bit_08006a18(byte input_byte){\n    uint* data = PTR_DAT_08006a54;\n    uint index = (((uint)input_byte >> 5) + 0x40) * 4;\n    uint bitmask = 1 << (input_byte & 0x1f);\n    return (*(data + index) & bitmask) != 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006a18",
            "calling": [
                "FUN_08006de0"
            ],
            "imported": false,
            "current_name": "check_bit_08006a18"
        },
        "FUN_08002c18": {
            "renaming": {
                "FUN_08002c18": "calculate_offsets_08002c18",
                "param_1": "base_address",
                "param_2": "string1_length",
                "param_3": "string2_length",
                "uVar1": "hash",
                "iVar2": "offset",
                "uVar3": "hash_result",
                "local_1c": "string1_offset",
                "local_20": "string2_offset",
                "local_24": "hash1_offset",
                "local_28": "hash2_offset",
                "uVar4": "hash3",
                "uVar5": "offset1",
                "uVar6": "offset2",
                "uVar7": "hash4",
                "uVar8": "offset3",
                "uVar9": "offset4"
            },
            "code": "void calculate_offsets_08002c18(int base_address, uint32_t param_2, uint32_t param_3)\n{\n    uint32_t local_1c;\n    int iVar2;\n    uint32_t local_20;\n    uint64_t uVar3;\n    uint32_t local_24;\n    uint32_t local_28;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uint32_t uVar9;\n\n    uVar3 = hash_string(*(char **)(base_address + 0x3c), param_2);\n    uVar3 = calculate_hash(uVar3);\n    local_24 = calculate_offset(uVar3);\n    uVar3 = hash_string(*(char **)(base_address + 0x3c), param_3);\n    uVar3 = calculate_hash(uVar3);\n    local_28 = calculate_offset(uVar3);\n    uVar3 = calculate_offset(*(int *)(base_address + 0x30) * 0x32);\n    uVar4 = calculate_hash(uVar3);\n    iVar2 = calculate_offset(uVar3, 0, DAT_08002e04);\n    uVar3 = hash_string(*(char **)(base_address + 0x28), *(char **)(base_address + 0x3c), iVar2);\n    uVar3 = calculate_hash(uVar3);\n    uVar5 = calculate_offset(uVar3);\n    uVar3 = hash_string(*(char **)(base_address + 0x3c), *(char **)(base_address + 0x2c), -iVar2);\n    uVar3 = calculate_hash(uVar3);\n    uVar6 = calculate_offset(uVar3);\n    uVar3 = calculate_offset(*(uint *)(base_address + 0x10) - uVar5 - uVar6);\n    uVar7 = calculate_hash(uVar3);\n    uVar8 = calculate_offset(uVar3);\n    uVar9 = uVar8 & ~((int)uVar8 >> 0x1f);\n    if ((int)uVar9 <= (int)*(uint *)(base_address + 0x10)) {\n        local_1c = uVar9;\n    } else {\n        local_1c = *(uint *)(base_address + 0x10);\n    }\n    local_20 = 0;\n    if ((int)uVar8 < (int)*(uint *)(base_address + 0x10)) {\n        local_20 = (int)*(uint *)(base_address + 0x10) - (int)uVar8;\n    }\n    *(uint *)(base_address + 0x34) = local_1c;\n    *(uint *)(base_address + 0x38) = local_1c + local_20;\n    return;\n}",
            "called": [
                "FUN_08009318",
                "FUN_080094c0",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008ba0",
                "FUN_0800856c",
                "FUN_08002908",
                "FUN_080028bc",
                "FUN_08008640",
                "FUN_08008bf0",
                "FUN_08008e3c",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c18",
            "calling": [
                "FUN_08002e08"
            ],
            "imported": false,
            "current_name": "calculate_offsets_08002c18"
        },
        "FUN_08006ac0": {
            "renaming": {
                "FUN_08006ac0": "check_bit_at_position_08006ac0",
                "param_1": "position",
                "DAT_08006afc": "data_start"
            },
            "code": "bool check_bit_at_position_08006ac0(byte position){\n    uint* data = (uint*)(DAT_08006afc + (((uint)(int)(char)position >> 5) + 0x80) * 4);\n    uint mask = 1 << (position & 0x1f);\n    return (*data & mask) != 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ac0",
            "calling": [
                "FUN_08006e1a"
            ],
            "imported": false,
            "current_name": "check_bit_at_position_08006ac0"
        },
        "FUN_080001ec": {
            "renaming": {
                "FUN_080001ec": "do_nothing_080001ec"
            },
            "code": "\nvoid do_nothing_080001ec(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ec",
            "calling": [
                "FUN_08000210"
            ],
            "imported": false,
            "current_name": "do_nothing_080001ec"
        },
        "FUN_08005a50": {
            "renaming": {
                "FUN_08005a50": "do_nothing_08005a50"
            },
            "code": "\nvoid do_nothing_08005a50(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a50",
            "calling": [
                "FUN_080059b4"
            ],
            "imported": false,
            "current_name": "do_nothing_08005a50"
        },
        "FUN_08002ba8": {
            "renaming": {
                "FUN_08002ba8": "copy_data_08002ba8",
                "PTR_DAT_08002c0c": "data_index_ptr",
                "PTR_DAT_08002c14": "data_end_ptr",
                "PTR_DAT_08002c10": "data_start_ptr",
                "local_9": "current_index",
                "local_14": "last_ptr",
                "local_10": "current_byte",
                "puVar1": "data_ptr",
                "puVar2": "prev_byte",
                "puVar3": "temp_ptr",
                "FUN_08002afc": "copy_data_block"
            },
            "code": "void copy_data_08002ba8() {\n  undefined *current_byte;\n  undefined *prev_byte;\n  undefined *data_ptr;\n  undefined *temp_ptr;\n  undefined *last_ptr;\n  byte current_index;\n  \n  current_index = *PTR_DAT_08002c0c;\n  last_ptr = (undefined *)0x0;\n  prev_byte = (undefined *)0x0;\n  current_byte = (undefined *)0x0;\n  while (prev_byte != PTR_DAT_08002c14) {\n    last_ptr = current_byte;\n    data_ptr = PTR_DAT_08002c10 + (uint)current_index * 0x40;\n    copy_data_08002ba8_block(prev_byte,current_byte,data_ptr);\n    current_index = get_next_index(current_index);\n    temp_ptr = current_byte;\n    current_byte = data_ptr;\n    prev_byte = temp_ptr;\n  }\n  copy_data_08002ba8_block(last_ptr,current_byte,0,last_ptr,prev_byte);\n  return;\n}",
            "called": [
                "FUN_08002afc",
                "FUN_08002870"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ba8",
            "calling": [
                "FUN_08002edc"
            ],
            "imported": false,
            "current_name": "copy_data_08002ba8"
        },
        "FUN_0800919c": {
            "renaming": {
                "FUN_0800919c": "calculate_result_0800919c",
                "param_1": "input1",
                "param_2": "input2",
                "bVar1": "is_xor_of_inputs_negative",
                "uVar2": "doubled_input1",
                "uVar3": "doubled_input2",
                "uVar4": "input1_with_sign_bit",
                "bVar5": "is_input1_with_sign_bit_zero"
            },
            "code": "uint calculate_result_0800919c(uint input1, uint input2)\n{\n  bool is_negative1;\n  uint doubled_input1 = input1 * 2;\n  uint doubled_input2 = input2 * 2;\n  bool is_negative2 = (int)doubled_input2 >> 0x18 == -1;\n  bool is_negative_doubled_input1 = (int)doubled_input1 >> 0x18 == -1;\n  if ((is_negative_doubled_input1 || is_negative2) && ((is_negative_doubled_input1 && ((input1 & 0x7fffff) != 0)) || ((is_negative2 && ((input2 & 0x7fffff) != 0)))) {\n    return 1;\n  }\n  uint input1_with_sign_bit = doubled_input1 | input2 & 0x7fffffff;\n  bool is_input1_with_sign_bit_zero = input1_with_sign_bit == 0;\n  if (!is_input1_with_sign_bit_zero) {\n    uint xor_of_inputs = input1 ^ input2;\n    is_input1_with_sign_bit_zero = xor_of_inputs == 0;\n  }\n  bool is_xor_of_inputs_negative = -1 < (int)(input1 ^ input2);\n  if (is_xor_of_inputs_negative) {\n    input1 = doubled_input1 + input2 * -2;\n    is_input1_with_sign_bit_zero = input1 == 0;\n  }\n  if (is_xor_of_inputs_negative && doubled_input2 <= doubled_input1 && !is_input1_with_sign_bit_zero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!is_xor_of_inputs_negative || doubled_input2 > doubled_input1) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!is_input1_with_sign_bit_zero) {\n    input1 = input1 | 1;\n  }\n  return input1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800919c",
            "calling": [
                "FUN_08009204"
            ],
            "imported": false,
            "current_name": "calculate_result_0800919c"
        },
        "FUN_0800b2cc": {
            "renaming": {
                "FUN_0800b2cc": "do_nothing_0800b2cc"
            },
            "code": "\nvoid do_nothing_0800b2cc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b2cc",
            "calling": [
                "FUN_08009990",
                "FUN_08009d78",
                "FUN_0800af78"
            ],
            "imported": false,
            "current_name": "do_nothing_0800b2cc"
        },
        "FUN_0800854c": {
            "renaming": {
                "FUN_0800854c": "bit_shift_0800854c",
                "param_1": "input",
                "uVar1": "result_lo",
                "uVar2": "shift_amount",
                "iVar3": "leading_zeroes",
                "uVar4": "temp",
                "in_r12": "remaining_bits",
                "bVar5": "cond1",
                "bVar6": "cond2",
                "bVar7": "cond3"
            },
            "code": "ulonglong bit_shift_0800854c(uint input)\n{\n  uint leading_zeroes = count_leading_zeroes(input);\n  uint shift_amount = leading_zeroes - 11;\n  uint result_lo = 0;\n  uint result_hi = 0;\n  if (input != 0) {\n    if (shift_amount >= 32) {\n      result_hi = 0;\n    } else if (shift_amount < 20) {\n      result_hi = input << shift_amount;\n      result_lo = 0;\n    } else {\n      uint remaining_bits = 52 - shift_amount;\n      if (remaining_bits <= 0) {\n        result_hi = input >> (-remaining_bits);\n      } else if (remaining_bits < 20) {\n        result_hi = input << remaining_bits;\n        result_lo = input >> (-shift_amount);\n      } else {\n        result_lo = input >> (-shift_amount + 12);\n      }\n    }\n  }\n  return ((ulonglong)result_hi << 32) | result_lo;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800854c",
            "calling": [
                "FUN_08001994"
            ],
            "imported": false,
            "current_name": "bit_shift_0800854c"
        },
        "FUN_08008e44": {
            "renaming": {
                "FUN_08008e44": "calculate_hash_08008e44",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "uVar3": "hash",
                "iVar4": "hash_base",
                "uVar5": "carry",
                "count_leading_zeroes": "count_leading_zeroes"
            },
            "code": "uint calculate_hash_08008e44(uint input)\n{\n  int leading_zeroes = count_leading_zeroes(input);\n  uint hash = ((input << (leading_zeroes - 8)) + ((input & 0x80000000) | 0x4b000000) - 0x800000);\n  if (leading_zeroes > 7)\n  {\n    uint shift_amount = leading_zeroes - 8;\n    uint shifted_input = input << (shift_amount & 0xff);\n    uint shifted_zero = 0U >> (0x20 - shift_amount & 0xff);\n    uint carry = (uint)(0x7fffffff < shifted_zero);\n    uint result = hash + shifted_input + shifted_zero + carry;\n    if (shifted_zero == 0x80000000)\n    {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  else\n  {\n    uint shift_amount = leading_zeroes + 0x18;\n    uint shifted_input = input << (shift_amount & 0xff);\n    uint shifted_hash = hash + ((input >> (0x20 - shift_amount & 0xff)) - ((int)shifted_input >> 0x1f));\n    if ((shifted_input & 0x7fffffff) == 0)\n    {\n      shifted_hash = shifted_hash & ~(shifted_input >> 0x1f);\n    }\n    return shifted_hash;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e44",
            "calling": [
                "FUN_080004fc",
                "FUN_08004940",
                "FUN_08003004",
                "FUN_08003618",
                "FUN_080024c4",
                "FUN_08002408",
                "FUN_08001f00",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_hash_08008e44"
        },
        "FUN_0800733e": {
            "renaming": {
                "FUN_0800733e": "set_parameter_at_offset_0800733e",
                "param_1": "base_address",
                "param_2": "parameter_value",
                "param_3": "parameter_offset",
                "undefined2": "unsigned short",
                "*(undefined2 *)(param_1 + 0x1a)": "*(unsigned short *)(base_address + 0x1a)",
                "*(undefined2 *)(param_1 + 0x18)": "*(unsigned short *)(base_address + 0x18)"
            },
            "code": "void set_parameter_at_offset_0800733e(int base_address, unsigned short parameter_value, char parameter_offset) {\n  if (parameter_offset == '\\0') {\n    *(unsigned short *)(base_address + 0x1a) = parameter_value;\n  }\n  else {\n    *(unsigned short *)(base_address + 0x18) = parameter_value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800733e",
            "calling": [
                "FUN_0800778c"
            ],
            "imported": false,
            "current_name": "set_parameter_at_offset_0800733e"
        },
        "FUN_0800583c": {
            "renaming": {
                "FUN_0800583c": "execute_main_function_0800583c",
                "PTR_DAT_08005858": "PTR_DATA_ARRAY",
                "FUN_080052ac": "initialize_data",
                "FUN_08005790": "perform_task_A",
                "FUN_080057e4": "perform_task_B"
            },
            "code": "void execute_main_function_0800583c(void)\n{\n  int data = *(int *)(PTR_DAT_08005858 + 0x18);\n  initialize_data(data);\n  perform_task_A();\n  perform_task_B();\n  return;\n}",
            "called": [
                "FUN_080052ac",
                "FUN_08005790",
                "FUN_080057e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800583c",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "execute_main_function_0800583c"
        },
        "FUN_08001e98": {
            "renaming": {
                "FUN_08001e98": "process_data_08001e98",
                "param_1": "data_ptr",
                "param_2": "size",
                "param_3": "length",
                "param_4": "count",
                "param_5": "flag",
                "iVar1": "result",
                "PTR_DAT_08001efc": "PTR_DATA",
                "FUN_08003a74": "perform_operation",
                "FUN_08002fac": "check_status",
                "FUN_08003004": "execute_function",
                "FUN_0800585c": "perform_additional_operation"
            },
            "code": "void process_data_08001e98(void *data_ptr, int size, int length, int count, char flag)\n{\n    int result;\n    if (PTR_DAT_08001efc[1] != '\\a') {\n        do {\n            perform_operation();\n            if (*PTR_DAT_08001efc != '\\0') {\n                return;\n            }\n            result = check_status();\n        } while (result != 0);\n        execute_function(data_ptr, size, length, count, flag);\n        if (PTR_DAT_08001efc[1] == '\\0') {\n            PTR_DAT_08001efc[1] = 2;\n        }\n        if (PTR_DAT_08001efc[0x10] != '\\0') {\n            perform_additional_operation();\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_08002fac",
                "FUN_08003004",
                "FUN_0800585c",
                "FUN_08003a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e98",
            "calling": [
                "FUN_080005b4",
                "FUN_080024c4",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "process_data_08001e98"
        },
        "FUN_080069e4": {
            "renaming": {
                "FUN_080069e4": "set_bit_at_position_080069e4",
                "param_1": "position",
                "DAT_08006a14": "PTR_data",
                "PTR_data": "PTR_data",
                "uint": "unsigned_integer",
                "int": "integer",
                "char": "character",
                "ptr": "pointer",
                "bit_value": "bit_value"
            },
            "code": "void set_bit_at_position_080069e4(byte position) {\n\tint* ptr = (int*)(DAT_08006a14 + (((uint)(int)(char)position >> 5) + 0x20) * 4);\n\tint bit_value = 1 << (position & 0x1f);\n\t*ptr = bit_value;\n\treturn;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069e4",
            "calling": [
                "FUN_08006d4a"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_080069e4"
        },
        "FUN_0800b2d4": {
            "renaming": {
                "FUN_0800b2d4": "set_msb_bit_and_divide_by_2_power_31_0800b2d4",
                "param_1": "input_num",
                "param_2": "original_num",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "uint32_t set_msb_bit_and_divide_by_2_power_31_0800b2d4(uint32_t input_num)\n{\n    uint32_t msb_set_num = input_num | 0x80000000;\n    uint32_t shifted_num = msb_set_num + 0x100000;\n    uint32_t result = shifted_num >> 0x1f;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b2d4",
            "calling": [
                "FUN_0800981c"
            ],
            "imported": false,
            "current_name": "set_msb_bit_and_divide_by_2_power_31_0800b2d4"
        },
        "FUN_08008e3c": {
            "renaming": {
                "FUN_08008e3c": "calculate_hash_08008e3c",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "iVar3": "multiplier",
                "uVar4": "carry",
                "shifted_input": "shifted_input",
                "shifted_zeroes": "shifted_zeroes",
                "result": "result",
                "shifted_input_sign": "shifted_input_sign",
                "shifted_input_abs": "shifted_input_abs"
            },
            "code": "uint calculate_hash_08008e3c(uint input)\n{\n  if (input == 0) {\n    return 0;\n  }\n  int leading_zeroes = count_leading_zeroes(input);\n  int shift_amount = leading_zeroes - 8;\n  int multiplier = shift_amount * -0x800000 + 0x4a800000;\n  if (leading_zeroes > 7) {\n    uint shifted_input = input << (shift_amount & 0xff);\n    uint shifted_zeroes = 0U >> (0x20 - shift_amount & 0xff);\n    uint carry = (uint)(0x7fffffff < 0);\n    uint result = multiplier + shifted_input + shifted_zeroes + carry;\n    if ((shifted_input & 0x80000000) != 0) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shifted_input = input << (leading_zeroes + 0x18U & 0xff);\n  uint shifted_input_sign = (int)shifted_input >> 0x1f;\n  uint shifted_input_abs = shifted_input & 0x7fffffff;\n  uint result = multiplier + ((input >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - shifted_input_sign);\n  if (shifted_input_abs == 0) {\n    result = result & ~(shifted_input_sign);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e3c",
            "calling": [
                "FUN_08002638",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_hash_08008e3c"
        },
        "FUN_08009654": {
            "renaming": {
                "FUN_08009654": "calculate_double_08009654",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "shift_amount",
                "uVar2": "shift",
                "lVar3": "result",
                "DAT_080096e4": "mask"
            },
            "code": "long long calculate_double_08009654(uint32_t param1, uint32_t param2)\n{\n    uint32_t shift = (param2 << 1) >> 0x15;\n    uint32_t shift_amount = shift - 0x3FF;\n    long long result = ((long long)param2 << 32) | param1;\n\n    if ((int)shift_amount < 0x14) {\n        if ((int)shift_amount < 0) {\n            param2 = param2 & 0x80000000;\n            if (shift_amount == 0xFFFFFFFF) {\n                param2 = param2 | 0x3FF00000;\n            }\n            result = (long long)param2 << 32;\n        }\n        else {\n            uint32_t DAT_080096e4 = DAT_080096e4 >> (shift_amount & 0xFF);\n            if ((param2 & DAT_080096e4 | param1) != 0) {\n                uint32_t add = (0x80000 >> (shift_amount & 0xFF));\n                param2 += add;\n                result = ((long long)param2 << 32) | ((param1 + add) & ~DAT_080096e4);\n            }\n        }\n    }\n    else if ((int)shift_amount < 0x34) {\n        uint32_t DAT_080096e4 = 0xFFFFFFFF >> ((shift - 0x413) & 0xFF);\n        if ((param1 & DAT_080096e4) != 0) {\n            uint32_t add = 1 << (0x33 - shift_amount & 0xFF);\n            if (__builtin_uadd_overflow(param1, add, &param1)) {\n                param2 += 1;\n            }\n            result = ((long long)param2 << 32) | (param1 & ~DAT_080096e4);\n        }\n    }\n    else {\n        if (shift_amount == 0x400) {\n            result = FUN_080082d4();\n        }\n    }\n    return result;\n}",
            "called": [
                "FUN_080082d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009654",
            "calling": [
                "FUN_08004e30"
            ],
            "imported": false,
            "current_name": "calculate_double_08009654"
        },
        "FUN_08007bc2": {
            "renaming": {
                "FUN_08007bc2": "clear_bits_08007bc2",
                "_DAT_40000000": "ptr_gpio_porta",
                "_DAT_4000000c": "ptr_gpio_portc"
            },
            "code": "void clear_bits_08007bc2(void)\n{\n  *_DAT_40000000 = *_DAT_40000000 & ~(1 << 0);\n  *_DAT_4000000c = *_DAT_4000000c & ~(1 << 3);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007bc2",
            "calling": [
                "FUN_080057e4"
            ],
            "imported": false,
            "current_name": "clear_bits_08007bc2"
        },
        "FUN_08009410": {
            "renaming": {
                "FUN_08009410": "calculate_result_08009410",
                "param_1": "input_value",
                "param_2": "input_mask",
                "uVar1": "result",
                "uVar2": "masked_input",
                "local_28": "local_var1",
                "uStack_24": "local_var2",
                "local_20": "local_var3",
                "uStack_1c": "local_var4"
            },
            "code": "undefined4 calculate_result_08009410(undefined4 input_value, uint input_mask)\n{\n  undefined4 result;\n  uint masked_input = input_mask & 0x7fffffff;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined4 local_var3;\n  undefined4 local_var4;\n  if (DAT_080094b4 < masked_input) {\n    if (DAT_080094b8 < masked_input) {\n      result = FUN_080082d0(input_value,masked_input,input_value,masked_input);\n    }\n    else {\n      uint uVar2 = FUNC_08009d78(input_value,masked_input,&local_var1);\n      uVar2 = uVar2 & 3;\n      if (uVar2 == 1) {\n        result = FUN_0800adf0(local_var1,local_var2,local_var3,local_var4,1);\n      }\n      else if (uVar2 == 2 || uVar2 == 0) {\n        result = FUN_0800a348(local_var1,local_var2,local_var3,local_var4);\n      }\n      else {\n        result = FUN_0800adf0(local_var1,local_var2,local_var3,local_var4,1);\n      }\n    }\n    return result;\n  }\n  result = FUN_0800a348(input_value,masked_input,0,0);\n  return result;\n}",
            "called": [
                "FUN_0800adf0",
                "FUN_080082d0",
                "FUN_08009d78",
                "FUN_0800a348"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009410",
            "calling": [
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "calculate_result_08009410"
        },
        "FUN_080035ec": {
            "renaming": {
                "FUN_080035ec": "store_params_in_data_segment_080035ec",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "PTR_DAT_08003614": "PTR_DATA_SEGMENT_START"
            },
            "code": "void store_params_in_data_segment_080035ec(int param1, int param2, int param3)\n{\n  *(int *)PTR_DAT_08003614 = param1;\n  *(int *)(PTR_DAT_08003614 + 4) = param2;\n  *(int *)(PTR_DAT_08003614 + 8) = param3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035ec",
            "calling": [
                "FUN_0800283a"
            ],
            "imported": false,
            "current_name": "store_params_in_data_segment_080035ec"
        },
        "FUN_08006c70": {
            "renaming": {
                "FUN_08006c70": "synchronize_data_08006c70",
                "PTR_08006c94": "ptr_data",
                "DAT_08006c94": "data_address",
                "DAT_08006c98": "data_value",
                "PTR_08006c98": "ptr_value"
            },
            "code": "void synchronize_data_08006c70(void)\n{\n  DataSynchronizationBarrier(0xf);\n  uint* PTR_08006c94 = (uint *)(DAT_08006c94 + 0xc);\n  uint DAT_08006c98 = *(uint *)(DAT_08006c94 + 0xc);\n  uint mask = 0x700;\n  *PTR_08006c94 = DAT_08006c98 | (DAT_08006c98 & mask);\n  DataSynchronizationBarrier(0xf);\n  while(true){}\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c70",
            "calling": [
                "FUN_08006d66"
            ],
            "imported": false,
            "current_name": "synchronize_data_08006c70"
        },
        "FUN_08006d98": {
            "renaming": {
                "FUN_08006d98": "convert_char_to_int_and_call_08006d98",
                "param_1": "input_char",
                "uVar1": "converted_int",
                "FUN_08006b54": "convert_char_to_int",
                "FUN_08006c04": "call_function_with_params"
            },
            "code": "void convert_char_to_int_and_call_08006d98(char input_char, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined4 converted_int = convert_char_to_int((int)input_char);\n  call_function_with_params(converted_int, param_2, param_3, param_4);\n  return;\n}",
            "called": [
                "FUN_08006c04",
                "FUN_08006b54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d98",
            "calling": [],
            "imported": false,
            "current_name": "convert_char_to_int_and_call_08006d98"
        },
        "FUN_08005a68": {
            "renaming": {
                "FUN_08005a68": "increment_pointer_value_08005a68",
                "PTR_DAT_08005a80": "pointer_to_data"
            },
            "code": "void increment_pointer_value_08005a68(void)\n{\n  int* PTR_DAT_08005a80 = (int*) PTR_DAT_08005a80;\n  *PTR_DAT_08005a80 = *PTR_DAT_08005a80 + 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "FUN_08007756"
            ],
            "imported": false,
            "current_name": "increment_pointer_value_08005a68"
        },
        "FUN_080079c0": {
            "renaming": {
                "FUN_080079c0": "initialize_data_080079c0",
                "PTR_DAT_080079d8": "data_array",
                "PTR_DAT_080079dc": "data_status"
            },
            "code": "void initialize_data_080079c0(void)\n{\n  memset(PTR_DAT_080079d8, 0, sizeof(PTR_DAT_080079d8));\n  *(int *)PTR_DAT_080079dc = 1;\n  return;\n}",
            "called": [
                "FUN_0800b430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080079c0",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "initialize_data_080079c0"
        },
        "FUN_0800b2e0": {
            "renaming": {
                "FUN_0800b2e0": "returnZero_0800b2e0"
            },
            "code": "int returnZero_0800b2e0() {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b2e0",
            "calling": [
                "FUN_080098d0",
                "FUN_0800981c"
            ],
            "imported": false,
            "current_name": "returnZero_0800b2e0"
        },
        "FUN_08002908": {
            "renaming": {
                "FUN_08002908": "calculate_result_08002908",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "intermediate_result1",
                "uVar2": "intermediate_result2",
                "FUN_08008cdc": "square",
                "FUN_08008eec": "add",
                "FUN_08008cd8": "add",
                "FUN_08009054": "add"
            },
            "code": "float calculate_result_08002908(float input1, float input2, float input3, float input4)\n{\n    float intermediate_result1 = square(input3);\n    float intermediate_result2 = add(intermediate_result1, input4);\n    float intermediate_result3 = square(input1);\n    float intermediate_result4 = add(intermediate_result2, intermediate_result3);\n    float intermediate_result5 = square(input2);\n    float intermediate_result6 = add(intermediate_result4, intermediate_result5);\n    float intermediate_result7 = add(intermediate_result6, 3.0);\n    return intermediate_result7;\n}",
            "called": [
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_08008cdc",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002908",
            "calling": [
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_result_08002908"
        },
        "FUN_08007c40": {
            "renaming": {
                "FUN_08007c40": "set_param_value_08007c40",
                "param_1": "param_value",
                "_DAT_40000034": "global_param"
            },
            "code": "void set_param_value_08007c40(undefined4 param_value)\n{\n  _DAT_40000034 = param_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007c40",
            "calling": [
                "FUN_08005790"
            ],
            "imported": false,
            "current_name": "set_param_value_08007c40"
        },
        "FUN_080094c0": {
            "renaming": {
                "FUN_080094c0": "calculate_value_080094c0",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "result",
                "uVar2": "shift_amount",
                "uVar3": "mask",
                "bVar4": "carry_flag",
                "uVar5": "func_result",
                "lVar6": "output_value"
            },
            "code": "longlong calculate_value_080094c0(uint input1, uint input2, undefined4 param_3, undefined4 param_4)\n{\n  int result;\n  uint shift_amount;\n  uint mask;\n  bool carry_flag;\n  undefined8 func_result;\n  longlong output_value;\n\n  shift_amount = (input2 << 1) >> 0x15;\n  mask = shift_amount - 0x3ff;\n\n  if ((int)mask < 0x14) {\n    if ((int)mask < 0) {\n      func_result = FUN_080082d4(input1, input2, DAT_080095a8, DAT_080095ac, param_4);\n      result = FUN_08008b60((int)func_result, (int)((ulonglong)func_result >> 0x20), 0, 0);\n      output_value = CONCAT44(input2, input1);\n\n      if (result != 0) {\n        if ((int)input2 < 0) {\n          if ((input1 | input2 & 0x7fffffff) != 0) {\n            input2 = DAT_080095b4;\n          }\n          output_value = (ulonglong)input2 << 0x20;\n        }\n        else {\n          output_value = 0;\n        }\n      }\n    }\n    else {\n      mask = DAT_080095b0 >> (mask & 0xff);\n      output_value = CONCAT44(input2, input1);\n\n      if ((input2 & mask | input1) != 0) {\n        func_result = FUN_080082d4(input1, input2, DAT_080095a8, DAT_080095ac, param_4);\n        result = FUN_08008b60((int)func_result, (int)((ulonglong)func_result >> 0x20), 0, 0);\n        output_value = CONCAT44(input2, input1);\n\n        if (result != 0) {\n          if ((int)input2 < 0) {\n            input2 = input2 + (0x100000 >> (mask & 0xff));\n          }\n          output_value = (ulonglong)(input2 & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)mask < 0x34) {\n    mask = 0xffffffff >> (shift_amount - 0x413 & 0xff);\n    output_value = CONCAT44(input2, input1);\n\n    if ((mask & input1) != 0) {\n      func_result = FUN_080082d4(input1, input2, DAT_080095a8, DAT_080095ac, param_4);\n      result = FUN_08008b60((int)func_result, (int)((ulonglong)func_result >> 0x20), 0, 0);\n      output_value = CONCAT44(input2, input1);\n\n      if (result != 0) {\n        if ((int)input2 < 0) {\n          if (mask == 0x14) {\n            input2 = input2 + 1;\n          }\n          else {\n            shift_amount = 1 << (0x34 - shift_amount & 0xff);\n            carry_flag = CARRY4(shift_amount, input1);\n            input1 = shift_amount + input1;\n            if (carry_flag != false) {\n              input2 = input2 + 1;\n            }\n          }\n        }\n        output_value = CONCAT44(input2, input1 & ~mask);\n      }\n    }\n  }\n  else {\n    output_value = CONCAT44(input2, input1);\n    if (mask == 0x400) {\n      output_value = FUN_080082d4();\n    }\n  }\n  return output_value;\n}",
            "called": [
                "FUN_080082d4",
                "FUN_08008b60"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080094c0",
            "calling": [
                "FUN_08002408",
                "FUN_08001f00",
                "FUN_0800a5a0",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_value_080094c0"
        },
        "FUN_08008eec": {
            "renaming": {
                "FUN_08008eec": "calculate_float_08008eec",
                "param_1": "float_value_1",
                "param_2": "float_value_2",
                "param_3": "unknown_value",
                "param_4": "exponent",
                "lVar1": "long_value",
                "uVar2": "result",
                "uVar3": "byte_value_1",
                "iVar4": "sum_of_bytes",
                "iVar5": "shift_amount",
                "iVar7": "remaining_shift",
                "uVar6": "product",
                "uVar8": "masked_float",
                "bVar9": "is_true",
                "bVar10": "is_overflow"
            },
            "code": "\nuint calculate_float_08008eec(uint float_value_1,uint float_value_2,undefined4 unknown_value,uint exponent)\n\n{\n  longlong long_value;\n  uint result;\n  uint byte_value_1;\n  int sum_of_bytes;\n  int shift_amount;\n  uint product;\n  int remaining_shift;\n  uint masked_float;\n  bool is_true;\n  bool is_overflow;\n  \n  byte_value_1 = float_value_1 >> 0x17 & 0xff;\n  is_true = byte_value_1 == 0;\n  if (!is_true) {\n    exponent = float_value_2 >> 0x17 & 0xff;\n    is_true = exponent == 0;\n  }\n  if (!is_true) {\n    is_true = byte_value_1 == 0xff;\n  }\n  if (!is_true) {\n    is_true = exponent == 0xff;\n  }\n  if (is_true) {\n    exponent = float_value_2 >> 0x17 & 0xff;\n    if (byte_value_1 == 0xff || exponent == 0xff) {\n      is_true = float_value_1 == 0 || float_value_1 == 0x80000000;\n      result = float_value_2;\n      if (float_value_1 != 0 && float_value_1 != 0x80000000) {\n        is_true = float_value_2 == 0;\n        result = float_value_1;\n      }\n      if (!is_true) {\n        is_true = float_value_2 == 0x80000000;\n      }\n      masked_float = result;\n      if (((is_true) || ((byte_value_1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((exponent == 0xff && (masked_float = float_value_2, (float_value_2 & 0x7fffff) != 0)))) {\n        return masked_float | 0x7fc00000;\n      }\n      result = result ^ float_value_2;\n      goto LAB_0800903c;\n    }\n    is_true = (float_value_1 & 0x7fffffff) == 0;\n    if (!is_true) {\n      is_true = (float_value_2 & 0x7fffffff) == 0;\n    }\n    if (is_true) {\n      return (float_value_1 ^ float_value_2) & 0x80000000;\n    }\n    is_true = byte_value_1 == 0;\n    result = float_value_1 & 0x80000000;\n    while( true ) {\n      if (is_true) {\n        float_value_1 = float_value_1 << 1;\n        is_true = (float_value_1 & 0x800000) == 0;\n      }\n      if (!is_true) break;\n      byte_value_1 = byte_value_1 - 1;\n    }\n    float_value_1 = float_value_1 | result;\n    is_true = exponent == 0;\n    result = float_value_2 & 0x80000000;\n    while( true ) {\n      if (is_true) {\n        float_value_2 = float_value_2 << 1;\n        is_true = (float_value_2 & 0x800000) == 0;\n      }\n      if (!is_true) break;\n      exponent = exponent - 1;\n    }\n    float_value_2 = float_value_2 | result;\n  }\n  sum_of_bytes = byte_value_1 + exponent;\n  masked_float = float_value_1 ^ float_value_2;\n  byte_value_1 = float_value_1 << 9;\n  is_true = byte_value_1 == 0;\n  if (!is_true) {\n    float_value_2 = float_value_2 << 9;\n    is_true = float_value_2 == 0;\n  }\n  if (is_true) {\n    if (byte_value_1 == 0) {\n      float_value_2 = float_value_2 << 9;\n    }\n    result = masked_float & 0x80000000 | float_value_1 & 0x7fffff | float_value_2 >> 9;\n    is_overflow = SBORROW4(sum_of_bytes,0x7f);\n    shift_amount = sum_of_bytes + -0x7f;\n    is_true = shift_amount == 0;\n    remaining_shift = shift_amount;\n    if (!is_true && 0x7e < sum_of_bytes) {\n      is_overflow = SBORROW4(0xff,shift_amount);\n      remaining_shift = 0xff - shift_amount;\n      is_true = shift_amount == 0xff;\n    }\n    if (!is_true && remaining_shift < 0 == is_overflow) {\n      result = result | shift_amount * 0x800000;\n    }\n    if (!is_true && remaining_shift < 0 == is_overflow) {\n      return result;\n    }\n    result = result | 0x800000;\n    product = 0;\n    is_overflow = SBORROW4(shift_amount,1);\n    masked_float = sum_of_bytes - 0x80;\n    is_true = masked_float == 0;\n    byte_value_1 = masked_float;\n  }\n  else {\n    long_value = (ulonglong)(byte_value_1 >> 5 | 0x8000000) * (ulonglong)(float_value_2 >> 5 | 0x8000000);\n    product = (uint)long_value;\n    result = (uint)((ulonglong)long_value >> 0x20);\n    is_true = result < 0x800000;\n    if (is_true) {\n      result = result << 1;\n    }\n    if (is_true) {\n      result = result | product >> 0x1f;\n      product = product << 1;\n    }\n    result = masked_float & 0x80000000 | result;\n    masked_float = (sum_of_bytes + -0x7f) - (uint)is_true;\n    is_overflow = SBORROW4(masked_float,0xfd);\n    is_true = masked_float == 0xfd;\n    byte_value_1 = masked_float - 0xfd;\n    if (masked_float < 0xfe) {\n      result = result + masked_float * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (is_true || (int)byte_value_1 < 0 != is_overflow) {\n    is_true = (int)(masked_float + 0x19) < 0;\n    if (masked_float == 0xffffffe7 || is_true != SCARRY4(masked_float,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (masked_float != 0xffffffe7 && is_true == SCARRY4(masked_float,0x19)) {\n      byte_value_1 = (result << 1) >> (-masked_float & 0xff);\n      masked_float = result << (masked_float + 0x20 & 0xff);\n      byte_value_1 = ((uint)((result & 0x80000000) != 0) << 0x1f | byte_value_1 >> 1) + (uint)((byte)byte_value_1 & 1);\n      if ((product | masked_float << 1) == 0) {\n        byte_value_1 = byte_value_1 & ~(masked_float >> 0x1f);\n      }\n      return byte_value_1;\n    }\n    return result;\n  }\nLAB_0800903c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008eec",
            "calling": [
                "FUN_08003004",
                "FUN_08003618",
                "FUN_08002638",
                "FUN_08002978",
                "FUN_08004e30",
                "FUN_08001f00",
                "FUN_08002c18",
                "FUN_08001994",
                "FUN_08003826",
                "FUN_080005b4",
                "FUN_08002908",
                "FUN_080028bc",
                "FUN_080024c4",
                "FUN_08002408"
            ],
            "imported": false,
            "current_name": "calculate_float_08008eec"
        },
        "FUN_08006b54": {
            "renaming": {
                "FUN_08006b54": "get_value_from_table_08006b54",
                "param_1": "input_value",
                "bVar1": "output_value",
                "DAT_08006b98": "table1",
                "DAT_08006b9c": "table2"
            },
            "code": "byte get_value_from_table_08006b54(byte input_value)\n{\n    byte output_value;\n    if (input_value < 0)\n    {\n        output_value = *(byte *)((input_value & 0xf) + DAT_08006b98 + 0x14);\n    }\n    else\n    {\n        output_value = *(byte *)((char)input_value + DAT_08006b9c + 0x300);\n    }\n    return output_value >> 4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b54",
            "calling": [
                "FUN_08006d98"
            ],
            "imported": false,
            "current_name": "get_value_from_table_08006b54"
        },
        "FUN_08007e84": {
            "renaming": {
                "FUN_08007e84": "get_byte_from_dat_08007ea0_plus_4_08007e84",
                "DAT_08007ea0": "dat_08007ea0",
                "PTR_": "ptr_"
            },
            "code": "uint get_byte_from_dat_08007ea0_plus_4_08007e84(void)\n{\n  uint* pointer_to_DAT_08007ea0_plus_4 = (uint *)(DAT_08007ea0 + 4);\n  uint value_at_pointer = *pointer_to_DAT_08007ea0_plus_4;\n  uint masked_value = value_at_pointer & 0xff;\n  return masked_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e84",
            "calling": [
                "FUN_08008286"
            ],
            "imported": false,
            "current_name": "get_byte_from_dat_08007ea0_plus_4_08007e84"
        },
        "FUN_080057e4": {
            "renaming": {
                "FUN_080057e4": "check_status_and_do_nothing_if_needed_080057e4",
                "FUN_08007bc2": "check_status",
                "do_nothing_0800530c": "do_nothing",
                "PTR_DAT_0800580c": "PTR_DAT_status_1",
                "PTR_DAT_08005810": "PTR_DAT_status_2"
            },
            "code": "void check_status_and_do_nothing_if_needed_080057e4(void)\n{\n  check_status();\n  if ((PTR_DAT_0800580c[0x3c] != -1) || ((PTR_DAT_08005810[2] & 0x20) != 0)) {\n    do_nothing();\n  }\n  return;\n}",
            "called": [
                "FUN_08007bc2",
                "FUN_0800530c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057e4",
            "calling": [
                "FUN_080025e8",
                "FUN_080053a0",
                "FUN_08001d4c",
                "FUN_0800583c"
            ],
            "imported": false,
            "current_name": "check_status_and_do_nothing_if_needed_080057e4"
        },
        "FUN_08006d8a": {
            "renaming": {
                "FUN_08006d8a": "get_result_08006d8a",
                "uVar1": "result",
                "FUN_08006998": "calculate"
            },
            "code": "int get_result_08006d8a(void)\n{\n  int result = calculate();\n  return result;\n}",
            "called": [
                "FUN_08006998"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d8a",
            "calling": [],
            "imported": false,
            "current_name": "get_result_08006d8a"
        },
        "FUN_0800b2e8": {
            "renaming": {
                "FUN_0800b2e8": "calculate_result_0800b2e8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "iVar2": "result2",
                "uVar3": "result3",
                "uVar4": "combined_inputs"
            },
            "code": "uint calculate_result_0800b2e8(uint input1, uint input2, int input3, undefined4 input4)\n{\n  uint result1;\n  int result2;\n  uint result3;\n  ulonglong combined_inputs;\n  \n  combined_inputs = CONCAT44(input2, input1);\n  result1 = (input2 << 1) >> 0x15;\n  if (result1 == 0) {\n    if ((input1 | input2 & 0x7fffffff) == 0) {\n      return input1;\n    }\n    combined_inputs = FUN_08008640(input1, input2, 0, DAT_0800b3c8);\n    if (input3 < DAT_0800b3cc) goto LAB_0800b34a;\n    result1 = ((uint)((int)(combined_inputs >> 0x20) << 1) >> 0x15) - 0x36;\n  }\n  else if (result1 == 0x7ff) {\n    result1 = FUN_080082d4(input1, input2, input1, input2, input4);\n    return result1;\n  }\n  result3 = (uint)(combined_inputs >> 0x20);\n  result2 = result1 + input3;\n  if (result2 < 0x7ff) {\n    if (0 < result2) {\n      return (uint)combined_inputs;\n    }\n    if (result2 + 0x35 < 0 == SCARRY4(result2, 0x35)) {\n      result1 = FUN_08008640((uint)combined_inputs, result3 & 0x800fffff | (result2 + 0x36) * 0x100000, 0, DAT_0800b3d8);\n      return result1;\n    }\n    if (input3 < 0xc351) {\n      combined_inputs = combined_inputs & 0x8000000000000000 | (ulonglong)DAT_0800b3d0 | 0x1a56e1f00000000;\nLAB_0800b34a:\n      result1 = FUN_08008640((int)combined_inputs, (int)(combined_inputs >> 0x20), DAT_0800b3b8, DAT_0800b3bc);\n      return result1;\n    }\n  }\n  result1 = FUN_08008640(DAT_0800b3d4, result3 & 0x80000000 | 0x7e37e43c, DAT_0800b3c0, DAT_0800b3c4);\n  return result1;\n}",
            "called": [
                "FUN_080082d4",
                "FUN_08008640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b2e8",
            "calling": [
                "FUN_0800a5a0"
            ],
            "imported": false,
            "current_name": "calculate_result_0800b2e8"
        },
        "FUN_08005220": {
            "renaming": {
                "FUN_08005220": "do_nothing_08005220"
            },
            "code": "\nvoid do_nothing_08005220(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005220",
            "calling": [
                "FUN_0800525c"
            ],
            "imported": false,
            "current_name": "do_nothing_08005220"
        },
        "FUN_08007520": {
            "renaming": {
                "FUN_08007520": "check_odd_08007520",
                "param_1": "input_value",
                "FUN_080073d4": "print_error"
            },
            "code": "void check_odd_08007520(uint input_value)\n{\n  if ((input_value & 1) != 0) {\n    print_error(0x3e);\n  }\n  return;\n}",
            "called": [
                "FUN_080073d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007520",
            "calling": [
                "FUN_08007930"
            ],
            "imported": false,
            "current_name": "check_odd_08007520"
        },
        "FUN_08007884": {
            "renaming": {
                "FUN_08007884": "calculate_result_08007884",
                "iVar1": "first_value",
                "iVar2": "second_value",
                "iVar3": "third_value",
                "iVar4": "fourth_value",
                "iVar5": "fifth_value",
                "uVar6": "result",
                "FUN_08007854": "get_value"
            },
            "code": "uint calculate_result_08007884(void)\n{\n  int first_value = get_value(0x36);\n  int second_value = get_value(0x37);\n  int third_value = get_value(0x38);\n  int fourth_value = get_value(0x39);\n  int fifth_value = get_value(0xf);\n  uint result = get_value(0);\n  return result | first_value << 4 | second_value << 3 | third_value << 2 | fourth_value << 1 | fifth_value << 7;\n}",
            "called": [
                "FUN_08007854"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007884",
            "calling": [
                "FUN_08007930"
            ],
            "imported": false,
            "current_name": "calculate_result_08007884"
        },
        "FUN_08004250": {
            "renaming": {
                "FUN_08004250": "configure_stepper_motor_settings_08004250",
                "FUN_080036c6": "set_step_mode",
                "FUN_08003826": "set_max_speed",
                "FUN_080037fc": "set_value",
                "PTR_DAT_08004470": "step_mode_data",
                "PTR_DAT_08004474": "max_speed_data",
                "PTR_s___x__step_mm___1__08004478": "x_step_size_data",
                "PTR_s___y__step_mm___2__0800447c": "y_step_size_data",
                "PTR_s___z__step_mm___3__08004480": "z_step_size_data",
                "PTR_s___step_pulse__usec___4__08004484": "step_pulse_duration_data",
                "PTR_s___default_feed__mm_min___5__08004488": "default_feed_rate_data",
                "PTR_s___default_seek__mm_min___6__0800448c": "default_seek_rate_data",
                "PTR_s___step_port_invert_mask__int__08004490": "step_port_invert_mask_data",
                "PTR_s___step_idle_delay__msec___8__08004498": "step_idle_delay_data",
                "PTR_s___acceleration__mm_sec_2___9__080044a0": "acceleration_data",
                "PTR_s___junction_deviation__mm___10__080044a4": "junction_deviation_data",
                "PTR_s___arc__mm_segment___11__080044a8": "arc_segment_length_data",
                "PTR_s___n_arc_correction__int___12__080044ac": "arc_correction_data",
                "PTR_s___n_decimals__int___13__080044b0": "number_of_decimals_data",
                "PTR_s___report_inches__bool___14__080044b4": "report_in_inches_data",
                "PTR_s___auto_start__bool___15__080044b8": "auto_start_data",
                "PTR_s___invert_step_enable__bool___16__080044bc": "invert_step_enable_data",
                "PTR_s___hard_limits__bool___17__080044c0": "hard_limits_data",
                "PTR_s___homing_cycle__bool___18__080044c4": "homing_cycle_data",
                "PTR_s___homing_dir_invert_mask__int__080044c8": "homing_dir_invert_mask_data",
                "PTR_s____19__080044cc": "unknown_data",
                "PTR_s___homing_feed__mm_min___20__080044d0": "homing_feed_rate_data",
                "PTR_s___homing_seek__mm_min___21__080044d4": "homing_seek_rate_data",
                "PTR_s___homing_debounce__msec___22__080044d8": "homing_debounce_time_data",
                "PTR_s___homing_pull_off__mm___23__080044dc": "homing_pull_off_distance_data",
                "DAT_0800449c": "unknown_value"
            },
            "code": "void configure_stepper_motor_settings_08004250(void)\n{\n    // Call functions to configure various stepper motor settings\n    set_step_mode(PTR_DAT_08004470);\n    set_max_speed(*(undefined4 *)PTR_DAT_08004474);\n    set_x_step_size(PTR_s___x__step_mm___1__08004478);\n    set_y_step_size(PTR_s___y__step_mm___2__0800447c);\n    set_z_step_size(PTR_s___z__step_mm___3__08004480);\n    set_step_pulse_duration(PTR_s___step_pulse__usec___4__08004484);\n    set_default_feed_rate(PTR_s___default_feed__mm_min___5__08004488);\n    set_default_seek_rate(PTR_s___default_seek__mm_min___6__0800448c);\n    set_step_port_invert_mask(*(undefined2 *)(PTR_DAT_08004474 + 0x18));\n    set_step_idle_delay(PTR_s___step_idle_delay__msec___8__08004498);\n    set_acceleration(PTR_s___acceleration__mm_sec_2___9__080044a0);\n    set_junction_deviation(PTR_s___junction_deviation__mm___10__080044a4);\n    set_arc_segment_length(PTR_s___arc__mm_segment___11__080044a8);\n    set_arc_correction(PTR_DAT_08004474[0x3d]);\n    set_number_of_decimals((PTR_DAT_08004474[0x28] & 1) != 0);\n    set_report_in_inches((PTR_DAT_08004474[0x28] & 2) != 0);\n    set_auto_start((PTR_DAT_08004474[0x28] & 4) != 0);\n    set_invert_step_enable((PTR_DAT_08004474[0x28] & 8) != 0);\n    set_hard_limits((PTR_DAT_08004474[0x28] & 0x10) != 0);\n    set_homing_cycle(*(undefined2 *)(PTR_DAT_08004474 + 0x2a));\n    set_homing_dir_invert_mask(*(undefined2 *)(PTR_DAT_08004474 + 0x2a));\n    set_homing_feed_rate(*(undefined4 *)(PTR_DAT_08004474 + 0x30));\n    set_homing_seek_rate(*(undefined2 *)(PTR_DAT_08004474 + 0x34));\n    set_homing_debounce_time(*(undefined4 *)(PTR_DAT_08004474 + 0x38));\n    set_homing_pull_off_distance(*(undefined2 *)(PTR_DAT_08004474 + 0x1a));\n    set_dir_port_invert_mask(*(undefined2 *)(PTR_DAT_08004474 + 0x1a));\n    set_DAT_0800449c(*(undefined4 *)(PTR_DAT_08004474 + 0x2c));\n}\n",
            "called": [
                "FUN_0800375c",
                "FUN_08003826",
                "FUN_080037fc",
                "FUN_08009054",
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004250",
            "calling": [
                "FUN_080051b4",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "configure_stepper_motor_settings_08004250"
        },
        "FUN_08006dc4": {
            "renaming": {
                "FUN_08006dc4": "process_character_08006dc4",
                "param_1": "character",
                "FUN_08006a58": "call_another_function"
            },
            "code": "void process_character_08006dc4(char character) {\n    call_another_function((int)character);\n    return;\n}",
            "called": [
                "FUN_08006a58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dc4",
            "calling": [],
            "imported": false,
            "current_name": "process_character_08006dc4"
        },
        "FUN_08007402": {
            "renaming": {
                "FUN_08007402": "set_bit_in_short_at_offset_08007402",
                "param_1": "offset"
            },
            "code": "void set_bit_in_short_at_offset_08007402(uint offset)\n{\n  uint base_address = (offset >> 4) * 0x400 + 0x40020018;\n  short* target_short = (short*)base_address;\n  uint bit_offset = offset & 0xf;\n  short bit_mask = (short)(1 << bit_offset);\n  *target_short = bit_mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007402",
            "calling": [
                "FUN_080074c8"
            ],
            "imported": false,
            "current_name": "set_bit_in_short_at_offset_08007402"
        },
        "FUN_08002870": {
            "renaming": {
                "FUN_08002870": "increment_char_08002870",
                "param_1": "input_char",
                "local_9": "incremented_char"
            },
            "code": "char increment_char_08002870(char input_char)\n{\n  char incremented_char;\n  incremented_char = input_char + 1;\n  if (incremented_char == 18) {\n    incremented_char = 0;\n  }\n  return incremented_char;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002870",
            "calling": [
                "FUN_08002ef0",
                "FUN_08002ba8",
                "FUN_08002e08",
                "FUN_08003004",
                "FUN_08002f40"
            ],
            "imported": false,
            "current_name": "increment_char_08002870"
        },
        "FUN_08000210": {
            "renaming": {
                "FUN_08000210": "do_two_nothing_functions_08000210"
            },
            "code": "void do_two_nothing_functions_08000210(void)\n{\n  do_nothing_080001ec();\n  do_nothing_080001d4();\n  return;\n}",
            "called": [
                "FUN_080001d4",
                "FUN_080001ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000210",
            "calling": [
                "FUN_080025e8",
                "FUN_080001f8",
                "FUN_08000220"
            ],
            "imported": false,
            "current_name": "do_two_nothing_functions_08000210"
        },
        "FUN_08005900": {
            "renaming": {
                "FUN_08005900": "check_character_08005900",
                "param_1": "character",
                "PTR_DAT_08005978": "data_pointer"
            },
            "code": "int check_character_08005900(byte character) {\n    if (character == '~') {\n        PTR_DAT_08005978[2] |= 2;\n        return 1;\n    }\n    if (character < 0x7f) {\n        if (character == '?') {\n            PTR_DAT_08005978[2] |= 1;\n            return 1;\n        }\n        if (character < 0x40) {\n            if (character == 0x18) {\n                execute_function();\n                return 1;\n            }\n            if (character == '!') {\n                PTR_DAT_08005978[2] |= 8;\n                return 1;\n            }\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_080025e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005900",
            "calling": [
                "FUN_08008286"
            ],
            "imported": false,
            "current_name": "check_character_08005900"
        },
        "FUN_08002638": {
            "renaming": {
                "FUN_08002638": "parse_integer_08002638",
                "param_1": "start_address",
                "param_2": "input_string",
                "param_3": "output_integer",
                "pcVar6": "current_position",
                "pcVar5": "start_position",
                "local_d": "current_char",
                "local_c": "input_position",
                "local_14": "integer_value",
                "local_15": "overflow_digits",
                "local_16": "digit_count",
                "local_1c": "result",
                "iVar4": "comparison_result",
                "bVar1": "digit_value",
                "bVar2": "is_negative",
                "bVar3": "is_overflow"
            },
            "code": "uint32_t parse_integer_08002638(int start_address, uint8_t *input_string, uint32_t *output_integer) {\n  uint8_t current_char;\n  bool is_negative = false;\n  bool is_overflow = false;\n  int32_t integer_value = 0;\n  int32_t digit_count = 0;\n  int32_t overflow_digits = 0;\n  char *current_position = (char *)(start_address + (uint32_t)*input_string);\n  char *start_position = current_position + 1;\n  current_char = *current_position;\n\n  if (current_char == '-') {\n    is_negative = true;\n    current_char = *(start_position++);\n  }\n  else if (current_char == '+') {\n    current_char = *(start_position++);\n  }\n\n  while (true) {\n    int32_t digit_value = current_char - '0';\n    if (digit_value >= 0 && digit_value <= 9) {\n      digit_count++;\n      if (digit_count < 9) {\n        integer_value = (integer_value * 10) + digit_value;\n      }\n      else if (!is_overflow) {\n        overflow_digits++;\n      }\n    }\n    else {\n      if (current_char != 0xfe || is_overflow) {\n        if (digit_count == 0) {\n          return 0;\n        }\n        else {\n          uint32_t result = 0;\n          if (is_overflow) {\n            while (overflow_digits > 0) {\n              result = result * 10 + 9;\n              overflow_digits--;\n            }\n          }\n          result = result * 10 + integer_value;\n          if (is_negative) {\n            *output_integer = result ^ 0x80000000;\n          }\n          else {\n            *output_integer = result;\n          }\n          *input_string = (uint8_t)(current_position - (char *)start_address - 1);\n          return 1;\n        }\n      }\n      is_overflow = true;\n    }\n    current_char = *(++current_position);\n  }\n}",
            "called": [
                "FUN_08008590",
                "FUN_08008c30",
                "FUN_08008640",
                "FUN_08009214",
                "FUN_08008e3c",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002638",
            "calling": [
                "FUN_0800184c",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "parse_integer_08002638"
        },
        "FUN_080051b4": {
            "renaming": {
                "FUN_080051b4": "check_and_print_data_080051b4",
                "iVar1": "result",
                "auStack_18": "data_buffer",
                "local_9": "data_index",
                "FUN_08004dd2": "check_data",
                "FUN_08004030": "print_error",
                "FUN_08004c48": "set_error_flag",
                "FUN_08004250": "reset_data",
                "FUN_08004d7c": "get_data"
            },
            "code": "void check_and_print_data_080051b4(void)\n{\n  int result;\n  undefined data_buffer [15];\n  byte data_index;\n  result = check_data();\n  if (result == 0) {\n    print_error(10);\n    set_error_flag(1);\n    reset_data();\n  }\n  for (data_index = 0; data_index < 8; data_index++) {\n    result = get_data(data_index,data_buffer);\n    if (result == 0) {\n      print_error(10);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08004250",
                "FUN_08004c48",
                "FUN_08004d7c",
                "FUN_08004030",
                "FUN_08004dd2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080051b4",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "check_and_print_data_080051b4"
        },
        "FUN_080098d0": {
            "renaming": {
                "FUN_080098d0": "process_input_data_080098d0",
                "param_1": "input1",
                "param_2": "input2",
                "cVar1": "input_char",
                "uVar2": "result",
                "iVar3": "input3_result",
                "puVar4": "result_ptr",
                "piVar5": "input4_result_ptr",
                "local_50": "local_var_1",
                "local_4c": "local_var_2",
                "local_48": "local_var_3",
                "uStack_44": "stack_var_1",
                "local_40": "local_var_4",
                "uStack_3c": "stack_var_2",
                "local_38": "local_var_5",
                "local_30": "input3",
                "PTR_DAT_08009988": "input_char_ptr",
                "PTR_DAT_0800998c": "input_char_ptr_2",
                "FUN_0800a1bc": "get_constant",
                "FUN_08008b74": "calculate_input3",
                "FUN_08008b24": "calculate_input4",
                "FUN_0800b2e0": "get_memory_location",
                "FUN_0800b3dc": "get_memory_location",
                "*puVar4": "*result_ptr",
                "*piVar5": "*input4_result_ptr"
            },
            "code": "undefined4 process_input_data_080098d0(undefined4 input1, undefined4 input2)\n{\n    char input_char;\n    undefined4 result;\n    int input3_result;\n    undefined4 *result_ptr;\n    int *input4_result_ptr;\n    undefined4 local_var_1;\n    undefined *local_var_2;\n    undefined4 local_var_3;\n    undefined4 stack_var_1;\n    undefined4 local_var_4;\n    undefined4 stack_var_2;\n    undefined8 local_var_5;\n    int input3;\n\n    result = get_constant();\n    input_char = *PTR_DAT_08009988;\n    if (input_char != -1 && (input3 = calculate_input3(input1, input2, input1, input2), input3 == 0) && (input3_result = calculate_input4(input1, input2, 0, 0), input3_result != 0))\n    {\n        local_var_1 = 1;\n        local_var_2 = PTR_DAT_0800998c;\n        local_var_3 = input1;\n        stack_var_1 = input2;\n        local_var_4 = input1;\n        stack_var_2 = input2;\n        if (input_char == '\\0')\n        {\n            local_var_5 = 0;\n            goto LAB_0800996c;\n        }\n        else\n        {\n            local_var_5 = calculate_input5(0, 0, 0, 0);\n            if (input_char != '\\x02')\n                goto LAB_0800996c;\n        }\n        result_ptr = (undefined4 *)get_memory_location();\n        *result_ptr = 0x21;\n    }\n    if (input3 != 0)\n    {\n        input4_result_ptr = (int *)get_memory_location();\n        *input4_result_ptr = input3;\n    }\n    return (undefined4)local_var_5;\n}\n",
            "called": [
                "FUN_0800a1bc",
                "FUN_0800b2e0",
                "FUN_08008b24",
                "FUN_08008894",
                "FUN_08008b74",
                "FUN_0800b3dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098d0",
            "calling": [
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08003004",
                "FUN_08002978"
            ],
            "imported": false,
            "current_name": "process_input_data_080098d0"
        },
        "FUN_08005c30": {
            "renaming": {
                "FUN_08005c30": "check_param_is_valid_08005c30",
                "param_1": "param",
                "bVar1": "is_valid",
                "DAT_08005c70": "ptr"
            },
            "code": "bool check_param_is_valid_08005c30(int param) {\n  bool is_valid = param < 0x1000000;\n  if (is_valid) {\n    int* DAT_08005c70 = DAT_08005c70;\n    DAT_08005c70[1] = param - 1;\n    set_flag(0xffffffff, 0xf);\n    DAT_08005c70[2] = 0;\n    *DAT_08005c70 = 7;\n  }\n  return !is_valid;\n}",
            "called": [
                "FUN_08005bdc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c30",
            "calling": [
                "FUN_0800618c"
            ],
            "imported": false,
            "current_name": "check_param_is_valid_08005c30"
        },
        "FUN_0800b51c": {
            "renaming": {
                "FUN_0800b51c": "do_nothing_0800b51c"
            },
            "code": "\nvoid do_nothing_0800b51c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b51c",
            "calling": [
                "FUN_0800b524"
            ],
            "imported": false,
            "current_name": "do_nothing_0800b51c"
        },
        "FUN_0800056c": {
            "renaming": {
                "FUN_0800056c": "perform_action_0800056c",
                "param_1": "action_param",
                "PTR_DAT_080005b0": "action_flags",
                "FUN_08008590": "get_action_result",
                "FUN_08008640": "process_result",
                "DAT_080005a8": "action_data",
                "DAT_080005ac": "action_data_size",
                "FUN_08008c30": "finalize_action"
            },
            "code": "int perform_action_0800056c(int action_param) {\\n  if (PTR_DAT_080005b0[3] != \"\\0\") {\\n    int result = get_action_result(action_param);\\n    result = process_result(result, DAT_080005a8, DAT_080005ac);\\n    action_param = finalize_action(result);\\n  }\\n  return action_param;\\n}",
            "called": [
                "FUN_08008590",
                "FUN_08008c30",
                "FUN_08008640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800056c",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "perform_action_0800056c"
        },
        "FUN_08002f24": {
            "renaming": {
                "FUN_08002f24": "initialize_system_08002f24",
                "FUN_08002ef0": "initialize_network",
                "FUN_0800b430": "initialize_memory"
            },
            "code": "void initialize_system_08002f24(void)\n{\n  initialize_network();\n  initialize_memory(PTR_DAT_08002f3c, 0, 0x1c);\n  return;\n}",
            "called": [
                "FUN_08002ef0",
                "FUN_0800b430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f24",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "initialize_system_08002f24"
        },
        "FUN_0800981c": {
            "renaming": {
                "FUN_0800981c": "calculate_hypotenuse_and_more_info_0800981c",
                "param_1": "side1",
                "param_2": "side2",
                "param_3": "angle1",
                "param_4": "angle2",
                "cVar1": "calculation_type",
                "puVar2": "data_pointer",
                "iVar3": "angle_sum",
                "puVar4": "result_pointer",
                "piVar5": "error_pointer",
                "uVar6": "result",
                "local_50": "hypotenuse",
                "puStack_4c": "hypotenuse_name",
                "local_48": "side1_copy",
                "uStack_44": "side2_copy",
                "local_40": "angle1_copy",
                "uStack_3c": "angle2_copy",
                "local_30": "angle_sum_copy"
            },
            "code": "undefined8 calculate_hypotenuse_and_more_info_0800981c(undefined4 side1, undefined4 side2, undefined4 angle1, undefined4 angle2)\n{\n    char calculation_type;\n    undefined *data_pointer;\n    int angle_sum;\n    undefined4 *result_pointer;\n    int *error_pointer;\n    undefined8 result;\n    undefined4 hypotenuse = 3;\n    undefined *hypotenuse_name = PTR_s_hypot_080098c0;\n    undefined4 side1_copy = side1;\n    undefined4 side2_copy = side2;\n    undefined4 angle1_copy = angle1;\n    undefined4 angle2_copy = angle2;\n    data_pointer = PTR_DAT_080098cc;\n    result = FUN_08009b24();\n    if (*data_pointer == -1) {\n        return result;\n    }\n    angle_sum = FUN_0800b2d4();\n    if (angle_sum != 0) {\n        return result;\n    }\n    if (FUN_0800b2d4(side1_copy, side2_copy) == 0) {\n        return result;\n    }\n    if (FUN_0800b2d4(angle1_copy, angle2_copy) == 0) {\n        return result;\n    }\n    calculation_type = *data_pointer;\n    hypotenuse_name = PTR_s_hypot_080098c0;\n    if (calculation_type == '\\0') {\n        hypotenuse = 0xe0000000;\n        hypotenuse_name = DAT_080098c8;\n    }\n    else if (calculation_type == '\\x02') {\n        hypotenuse = 0;\n        hypotenuse_name = DAT_080098c4;\n    }\n    result_pointer = (undefined4 *)FUN_0800b3dc();\n    *result_pointer = 0x22;\n    result = CONCAT44(hypotenuse, hypotenuse_name);\n    if (angle_sum != 0) {\n        error_pointer = (int *)FUN_0800b3dc();\n        *error_pointer = angle_sum;\n        result = CONCAT44(hypotenuse, hypotenuse_name);\n    }\n    return result;\n}",
            "called": [
                "FUN_0800b2e0",
                "FUN_0800b2d4",
                "FUN_08009b24",
                "FUN_0800b3dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800981c",
            "calling": [
                "FUN_080005b4",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "calculate_hypotenuse_and_more_info_0800981c"
        },
        "FUN_080059b4": {
            "renaming": {
                "FUN_080059b4": "set_flags_and_run_functions_080059b4",
                "*DAT_080059f4": "flag_ptr",
                "FUN_08006d72": "run_function_08006d72",
                "FUN_08006ce0": "run_function_08006ce0",
                "do_nothing_08005a50": "do_nothing_08005a50"
            },
            "code": "int set_flags_and_run_functions_080059b4(void) {\n    int* *DAT_080059f4 = DAT_080059f4;\n    **DAT_080059f4 |= 0x200;\n    **DAT_080059f4 |= 0x400;\n    **DAT_080059f4 |= 0x100;\n    run_function_08006d72(16000);\n    run_function_08006ce0(3);\n    do_nothing_08005a50();\n    return 0;\n}",
            "called": [
                "FUN_08005a50",
                "FUN_08006d72",
                "FUN_08006ce0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059b4",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "set_flags_and_run_functions_080059b4"
        },
        "FUN_08006c04": {
            "renaming": {
                "FUN_08006c04": "extract_bits_from_uint_08006c04",
                "param_1": "input",
                "param_2": "num_bits_to_extract",
                "param_3": "extracted_bits",
                "param_4": "remaining_bits",
                "uVar1": "num_bits_to_keep"
            },
            "code": "void extract_bits_from_uint_08006c04(uint input, uint num_bits_to_extract, uint *extracted_bits, uint *remaining_bits)\n{\n  uint num_bits_in_input = 32;\n  uint num_bits_to_keep = num_bits_in_input - num_bits_to_extract;\n  if (num_bits_to_keep > 4) {\n    num_bits_to_keep = 4;\n  }\n  if (num_bits_to_extract + 4 < num_bits_in_input) {\n    num_bits_to_extract = 0;\n  }\n  else {\n    num_bits_to_extract -= 3;\n  }\n  *extracted_bits = (1 << num_bits_to_keep) - 1U & input >> num_bits_to_extract;\n  *remaining_bits = (1 << num_bits_to_extract) - 1U & input;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c04",
            "calling": [
                "FUN_08006d98"
            ],
            "imported": false,
            "current_name": "extract_bits_from_uint_08006c04"
        },
        "FUN_08002e08": {
            "renaming": {
                "FUN_08002e08": "process_data_08002e08",
                "uVar1": "var1",
                "uVar2": "var2",
                "puVar3": "data_ptr",
                "local_18": "previous_data_ptr",
                "local_11": "current_byte"
            },
            "code": "void process_data_08002e08(void)\\n{\\n  undefined4 var1;\\n  undefined4 var2;\\n  undefined *data_ptr;\\n  undefined *previous_data_ptr;\\n  byte current_byte;\\n  current_byte = *PTR_DAT_08002ed0;\\n  previous_data_ptr = (undefined *)0x0;\\n  while (current_byte != *PTR_DAT_08002ed8) {\\n    data_ptr = PTR_DAT_08002ed4 + (uint)current_byte * 0x40;\\n    if ((previous_data_ptr != (undefined *)0x0) && ((previous_data_ptr[0x24] != \"\\0\" || (data_ptr[0x24] != \"\\0\")))) {\\n      var1 = FUN_08009054(*(undefined4 *)(previous_data_ptr + 0x18),*(undefined4 *)(previous_data_ptr + 0x14));\\n      var2 = FUN_08009054(*(undefined4 *)(data_ptr + 0x18),*(undefined4 *)(previous_data_ptr + 0x14));\\n      FUN_08002c18(previous_data_ptr,var1,var2);\\n      previous_data_ptr[0x24] = 0;\\n    }\\n    current_byte = FUN_08002870(current_byte);\\n    previous_data_ptr = data_ptr;\\n  }\\n  var1 = FUN_08009054(*(undefined4 *)(previous_data_ptr + 0x18),*(undefined4 *)(previous_data_ptr + 0x14));\\n  var2 = FUN_08009054(0,*(undefined4 *)(previous_data_ptr + 0x14));\\n  FUN_08002c18(previous_data_ptr,var1,var2);\\n  previous_data_ptr[0x24] = 0;\\n  return;\\n}",
            "called": [
                "FUN_08009054",
                "FUN_08002870",
                "FUN_08002c18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e08",
            "calling": [
                "FUN_08002edc"
            ],
            "imported": false,
            "current_name": "process_data_08002e08"
        },
        "FUN_08006680": {
            "renaming": {
                "FUN_08006680": "get_shifted_value_08006680",
                "uVar1": "shifted_value",
                "uVar2": "leading_zeroes_count",
                "FUN_08006628": "get_initial_value",
                "count_leading_zeroes": "count_leading_zeroes",
                "PTR_DAT_080066c8": "PTR_DAT_080066c8",
                "DAT_080066c4": "DAT_080066c4"
            },
            "code": "uint get_shifted_value_08006680(void)\n{\n  uint shifted_value;\n  uint leading_zeroes_count;\n  \n  shifted_value = get_initial_value();\n  leading_zeroes_count = count_leading_zeroes(0x380000);\n  return shifted_value >> PTR_DAT_080066c8[(*(uint *)(DAT_080066c4 + 8) & 0x1c00) >> (leading_zeroes_count & 0xff)];\n}",
            "called": [
                "FUN_08006628"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006680",
            "calling": [
                "FUN_08007f54"
            ],
            "imported": false,
            "current_name": "get_shifted_value_08006680"
        },
        "FUN_08000340": {
            "renaming": {
                "FUN_08000340": "set_param_value_08000340",
                "param_1": "param_index",
                "param_2": "param_value",
                "PTR_DAT_0800036c": "is_initialized",
                "FUN_080002f0": "initialize_params",
                "PTR_DAT_08000370": "param_array"
            },
            "code": "void set_param_value_08000340(uint param_index, undefined param_value)\n{\n  if (*PTR_DAT_0800036c == 0) {\n    initialize_params();\n  }\n  PTR_DAT_08000370[param_index & 0x3ff] = param_value;\n  return;\n}",
            "called": [
                "FUN_080002f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000340",
            "calling": [
                "FUN_08000374",
                "FUN_08004c2a"
            ],
            "imported": false,
            "current_name": "set_param_value_08000340"
        },
        "thunk_FUN_08009990": {
            "renaming": {
                "thunk_FUN_08009990": "calculate_thunk_thunk_08009990",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "difference",
                "uVar2": "result_upper",
                "uVar3": "result_lower",
                "uVar4": "abs_param4",
                "uVar5": "abs_param2",
                "uVar6": "combined_data",
                "DAT_08009b04": "data_upper",
                "DAT_08009b00": "data_lower",
                "DAT_08009b18": "threshold",
                "DAT_08009af0": "data_pointer",
                "DAT_08009af8": "data_pointer_2",
                "DAT_08009b10": "result_constant",
                "PTR_DAT_08009b20": "array_pointer_1",
                "PTR_DAT_08009b1c": "array_pointer_2",
                "DAT_08009ae8": "data_1",
                "DAT_08009aec": "data_2",
                "DAT_08009b08": "data_pointer_3"
            },
            "code": "uint calculate_thunk_thunk_08009990(uint param1, uint param2, uint param3, uint param4)\n{\n    int difference;\n    undefined4 result_upper;\n    uint result_lower;\n    uint abs_param1, abs_param2, abs_param3, abs_param4;\n    uint abs_difference;\n    uint abs_param4_masked;\n    uint abs_param2_masked;\n    uint abs_param4_shifted;\n    uint abs_param2_shifted;\n    uint shift_amount;\n    uint array_index;\n\n    uint64_t combined_data = ((uint64_t)DAT_08009b04 << 32) | DAT_08009b00;\n    uint DAT_08009b18 = DAT_08009b18;\n    uint DAT_08009af0 = 0;\n    uint DAT_08009af8 = 0;\n    uint DAT_08009b08 = 0;\n    uint result = 0;\n\n    abs_param1 = param1 & 0x7fffffff;\n    abs_param2 = param2 & 0x7fffffff;\n    abs_param3 = param3 & 0x7fffffff;\n    abs_param4 = param4 & 0x7fffffff;\n\n    abs_param4_masked = abs_param4 | (-param3 | param3) >> 0x1f;\n    abs_param2_masked = abs_param2 | (-param1 | param1) >> 0x1f;\n\n    if (DAT_08009b18 < abs_param4_masked || DAT_08009b18 < abs_param2_masked)\n    {\n        result = calculate_difference(abs_param3, abs_param4, abs_param1, abs_param2);\n    }\n    else\n    {\n        abs_param4_shifted = param4 + 0xc0100000 | param3;\n        if (abs_param4_shifted == 0)\n        {\n            result = FUNC_0800af78();\n            return result;\n        }\n\n        abs_param2_shifted = abs_param4_shifted >> 0x1e & 2U | abs_param2 >> 0x1f;\n        if (abs_param1 == 0 && abs_param2 == 0)\n        {\n            if (abs_param2_shifted != 2)\n            {\n                DAT_08009af0 = DAT_08009af0;\n            }\n            else\n            {\n                DAT_08009af0 = param1;\n                DAT_08009af0 = DAT_08009af8;\n            }\n        }\n        else if (abs_param4 != 0 || abs_param3 != 0)\n        {\n            if (abs_param4 == DAT_08009b18)\n            {\n                abs_param2_shifted = abs_param2_shifted - 1;\n                if (abs_param1 == abs_param4)\n                {\n                    if (2 < abs_param2_shifted)\n                    {\n                        result = DAT_08009b10;\n                        return result;\n                    }\n                    array_index = abs_param2_shifted * 8;\n                    result = *(uint *)(PTR_DAT_08009b20 + array_index);\n                }\n                else if (abs_param2_shifted < 3)\n                {\n                    array_index = abs_param2_shifted * 8;\n                    result = *(uint *)(PTR_DAT_08009b1c + array_index);\n                }\n                else\n                {\n                    result = 0;\n                }\n            }\n            else if (abs_param2 != DAT_08009b18)\n            {\n                difference = abs_param2 - abs_param4;\n                abs_difference = difference & 0x7fffffff;\n                if (difference < 0x3d00000)\n                {\n                    if ((int)param4 < 0 && (abs_difference + 0x3c < 0 != SCARRY4(abs_difference, 0x3c)))\n                    {\n                        combined_data = 0;\n                    }\n                    else\n                    {\n                        calculate_difference(abs_param1, abs_param2, abs_param3, abs_param4, abs_param4);\n                        do_nothing_0800b2cc();\n                        combined_data = FUNC_0800af78();\n                    }\n                }\n                result_upper = (undefined4)(combined_data >> 0x20);\n                result_lower = (uint)combined_data;\n                if (abs_param2_shifted == 1)\n                {\n                    result = result_lower;\n                }\n                else if (abs_param2_shifted == 2)\n                {\n                    combined_data = calculate_difference(result_lower, result_upper, DAT_08009ae8, DAT_08009aec);\n                    result_lower = calculate_difference(DAT_08009af0, DAT_08009af4, (int)combined_data, (int)(combined_data >> 0x20));\n                    result = result_lower;\n                }\n                else if (abs_param2_shifted == 0)\n                {\n                    result = result_lower;\n                }\n                else\n                {\n                    combined_data = calculate_difference(result_lower, result_upper, DAT_08009ae8, DAT_08009aec);\n                    result_lower = calculate_difference((int)combined_data, (int)(combined_data >> 0x20), DAT_08009af0, DAT_08009af4);\n                    result = result_lower;\n                }\n            }\n        }\n        else\n        {\n            if ((int)param2 >= 0)\n            {\n                DAT_08009af0 = DAT_08009b00;\n            }\n            else\n            {\n                DAT_08009af0 = DAT_08009b08;\n            }\n        }\n    }\n    return result;\n}\n\nuint calculate_difference(uint param1, uint param2, uint param3, uint param4, uint param5)\n{\n    uint result = 0;\n    result = FUN_08008894(param1, param2, param3, param4, param5);\n    do_nothing_0800b2cc();\n    result = FUNC_0800af78();\n    return result;\n}\n",
            "called": [
                "FUN_08009990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009818",
            "calling": [
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "calculate_thunk_thunk_08009990"
        },
        "FUN_08004bf4": {
            "renaming": {
                "FUN_08004bf4": "multiply_and_add_constant_to_param1_08004bf4",
                "param_1": "multiplied_value",
                "param_2": "parameter_2"
            },
            "code": "void multiply_and_add_constant_to_param1_08004bf4(ushort multiplied_value, undefined4 parameter_2)\n{\n  ushort constant = 0x200;\n  ushort result = multiplied_value * 0xD + constant;\n  FUN_08000374(result, parameter_2, 0xC);\n  return;\n}",
            "called": [
                "FUN_08000374"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bf4",
            "calling": [
                "FUN_080005b4",
                "FUN_08004d7c"
            ],
            "imported": false,
            "current_name": "multiply_and_add_constant_to_param1_08004bf4"
        },
        "FUN_08004d7c": {
            "renaming": {
                "FUN_08004d7c": "validate_input_08004d7c",
                "param_1": "input_char",
                "param_2": "input_data",
                "iVar1": "result",
                "FUN_080003ec": "verify_data",
                "FUN_0800b430": "reset_data",
                "FUN_08004bf4": "process_input"
            },
            "code": "bool validate_input_08004d7c(byte input_char, undefined4 input_data)\n{\n    int result = FUN_080003ec(input_data, (ushort)input_char * 0xd + 0x200, 0xc);\n    if (result == 0)\n    {\n        FUN_0800b430(input_data, 0, 0xc);\n        FUN_08004bf4(input_char, input_data);\n    }\n    return result != 0;\n}",
            "called": [
                "FUN_08004bf4",
                "FUN_0800b430",
                "FUN_080003ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d7c",
            "calling": [
                "FUN_080005b4",
                "FUN_080004ac",
                "FUN_080051b4",
                "FUN_080044e8"
            ],
            "imported": false,
            "current_name": "validate_input_08004d7c"
        },
        "FUN_08009278": {
            "renaming": {
                "FUN_08009278": "extract_bits_from_uint32_08009278",
                "param_1": "input_value",
                "uVar1": "shift_amount",
                "uVar2": "mask",
                "uVar3": "shifted_value",
                "uVar4": "output_value"
            },
            "code": "uint32_t extract_bits_from_uint32_08009278(uint32_t input_value) {\n    uint32_t shift_amount;\n    uint32_t shifted_value;\n    uint32_t output_value;\n    uint32_t mask;\n\n    if (input_value << 1 < 0x7f000000) {\n        return 0;\n    }\n\n    shift_amount = (input_value << 1) >> 0x18;\n    mask = 0x9e - shift_amount;\n\n    if (shift_amount < 0x9f && mask != 0) {\n        shifted_value = (input_value << 8 | 0x80000000) >> (mask & 0xff);\n        if ((input_value & 0x80000000) != 0) {\n            output_value = -shifted_value;\n        } else {\n            output_value = shifted_value;\n        }\n        return output_value;\n    }\n\n    if ((mask == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n        return 0;\n    }\n\n    if ((input_value & 0x80000000) == 0) {\n        output_value = 0x7fffffff;\n    } else {\n        output_value = input_value & 0x80000000;\n    }\n\n    return output_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009278",
            "calling": [
                "FUN_08003826",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "extract_bits_from_uint32_08009278"
        },
        "FUN_080004fc": {
            "renaming": {
                "FUN_080004fc": "process_params_and_store_080004fc",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "uVar1": "processed_param",
                "FUN_08008e44": "process_param",
                "FUN_08009054": "apply_func"
            },
            "code": "void process_params_and_store_080004fc(undefined4 param_1, undefined4 param_2, undefined4 param_3)\n{\n  undefined4 processed_param1 = process_param(param_1);\n  undefined4 processed_param2 = process_param(param_2);\n  undefined4 processed_param3 = process_param(param_3);\n  *(undefined4 *)(PTR_DAT_08000568 + 0xc) = apply_func(processed_param1, *(undefined4 *)PTR_DAT_08000564);\n  *(undefined4 *)(PTR_DAT_08000568 + 0x10) = apply_func(processed_param2, *(undefined4 *)(PTR_DAT_08000564 + 4));\n  *(undefined4 *)(PTR_DAT_08000568 + 0x14) = apply_func(processed_param3, *(undefined4 *)(PTR_DAT_08000564 + 8));\n  return;\n}\n",
            "called": [
                "FUN_08008e44",
                "FUN_08009054"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004fc",
            "calling": [
                "FUN_0800283a"
            ],
            "imported": false,
            "current_name": "process_params_and_store_080004fc"
        },
        "FUN_08000220": {
            "renaming": {
                "FUN_08000220": "update_current_param_08000220",
                "param_1": "new_param",
                "*PTR_DAT_08000264": "*current_param_ptr",
                "FUN_08002fd4": "call_reset_function",
                "do_nothing_080001c8": "do_first_thing",
                "do_nothing_080001e0": "do_second_thing",
                "FUN_08000210": "handle_unknown_param"
            },
            "code": "void update_current_param_08000220(char new_param)\n{\n    if (new_param != *PTR_DAT_08000264) {\n        call_reset_function();\n        if (new_param == '\\x01') {\n            do_first_thing();\n        }\n        else if (new_param == '\\x02') {\n            do_second_thing();\n        }\n        else {\n            handle_unknown_param();\n        }\n        *PTR_DAT_08000264 = new_param;\n    }\n    return;\n}",
            "called": [
                "FUN_08002fd4",
                "FUN_080001c8",
                "FUN_08000210",
                "FUN_080001e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000220",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "update_current_param_08000220"
        },
        "FUN_08005238": {
            "renaming": {
                "FUN_08005238": "clear_dat_ptr_08005238",
                "PTR_DAT_0800524c": "data_pointer",
                "FUN_08005250": "initialize_dat_ptr"
            },
            "code": "void clear_dat_ptr_08005238(){\n  *PTR_DAT_0800524c = 0;\n  initialize_dat_ptr();\n  return;\n}",
            "called": [
                "FUN_08005250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005238",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "clear_dat_ptr_08005238"
        },
        "FUN_08007da8": {
            "renaming": {
                "FUN_08007da8": "set_flag_and_enable_interrupts_08007da8",
                "puVar1": "flag_ptr"
            },
            "code": "void set_flag_and_enable_interrupts_08007da8(void)\n{\n  uint *flag_ptr;\n  flag_ptr = DAT_08007dd4;\n  DAT_08007dd4[8] |= 0x10;\n  *flag_ptr |= 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007da8",
            "calling": [
                "FUN_08007e08"
            ],
            "imported": false,
            "current_name": "set_flag_and_enable_interrupts_08007da8"
        },
        "FUN_08004148": {
            "renaming": {
                "FUN_08004148": "alarm_handler_08004148",
                "param_1": "alarm_type",
                "PTR_s_ALARM__08004190": "ALARM_MESSAGE",
                "PTR_s_Abort_during_cycle_08004198": "ABORT_MESSAGE",
                "PTR_s_Hard_limit_08004194": "HARD_LIMIT_MESSAGE",
                "PTR_s___MPos__0800419c": "CURRENT_POSITION_MESSAGE",
                "do_nothing_08002814": "wait"
            },
            "code": "void alarm_handler_08004148(char alarm_type)\n{\n  print_message(\"ALARM\");\n  if (alarm_type == -2) {\n    print_message(\"Abort during cycle\");\n  }\n  else if (alarm_type == -1) {\n    print_message(\"Hard limit\");\n  }\n  print_message(\"Current position\");\n  wait(500);\n  return;\n}",
            "called": [
                "FUN_08002814",
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004148",
            "calling": [
                "FUN_08003a74"
            ],
            "imported": false,
            "current_name": "alarm_handler_08004148"
        },
        "FUN_08004940": {
            "renaming": {
                "FUN_08004940": "process_data_08004940",
                "auStack_2c": "values",
                "uVar1": "temp",
                "uVar2": "index",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "local_11": "local_index"
            },
            "code": "void process_data_08004940(void)\n{\n    uint8_t index;\n    uint32_t values[3];\n    uint32_t temp;\n    uint8_t local_11;\n    \n    values[0] = *(uint32_t *)(PTR_DAT_08004b88 + 4);\n    values[1] = *(uint32_t *)(PTR_DAT_08004b88 + 8);\n    values[2] = *(uint32_t *)(PTR_DAT_08004b88 + 0xc);\n    \n    if ((uint8_t)PTR_DAT_08004b88[1] < 8) {\n        (*(void(*)())(&switchD_0800495e::switchdataD_08004964)[(byte)PTR_DAT_08004b88[1]])();\n        return;\n    }\n    \n    process_string(PTR_s__MPos__08004ba8);\n    for (index = 0; index < 3; index++) {\n        temp = get_value(values[index + 3]);\n        temp = process_value(temp, *(uint32_t *)(PTR_DAT_08004bac + index * 4));\n        values[index] = temp;\n        if ((PTR_DAT_08004bac[0x28] & 1) != 0) {\n            temp = swap_bytes(values[index]);\n            temp = process_swap(temp, DAT_08004b80, DAT_08004b84);\n            values[index] = get_value(temp);\n        }\n        process_data_08004940(values[index]);\n    }\n    \n    process_string(PTR_s_WPos__08004bb4);\n    for (local_11 = 0; local_11 < 3; local_11++) {\n        if ((PTR_DAT_08004bac[0x28] & 1) == 0) {\n            temp = values[local_11];\n            temp = process_math(*(uint32_t *)(PTR_DAT_08004bb8 + (local_11 + 8) * 4), *(uint32_t *)(PTR_DAT_08004bb8 + (local_11 + 10) * 4 + 4), temp);\n            values[local_11] = temp;\n        }\n        else {\n            temp = swap_bytes(values[local_11]);\n            uint32_t temp2 = process_math(*(uint32_t *)(PTR_DAT_08004bb8 + (local_11 + 8) * 4), *(uint32_t *)(PTR_DAT_08004bb8 + (local_11 + 10) * 4 + 4), swap_bytes(temp));\n            temp = process_swap(temp2, DAT_08004b80, DAT_08004b84);\n            values[local_11] = get_value(temp);\n        }\n        process_data_08004940(values[local_11]);\n        if (local_11 < 2) {\n            process_string(PTR_DAT_08004bb0);\n        }\n    }\n    process_string(PTR_DAT_08004bbc);\n    return;\n}",
            "called": [
                "FUN_080082d0",
                "FUN_08008590",
                "FUN_08008c30",
                "FUN_08008e44",
                "FUN_08003826",
                "FUN_08008640",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_08008cdc",
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004940",
            "calling": [
                "FUN_08003a74"
            ],
            "imported": false,
            "current_name": "process_data_08004940"
        },
        "FUN_08008a74": {
            "renaming": {
                "FUN_08008a74": "check_board_08008a74",
                "param_1": "row1",
                "param_2": "col1",
                "param_3": "row2",
                "param_4": "col2",
                "uVar1": "xor",
                "bVar2": "is_row1_empty",
                "bVar3": "is_row2_empty"
            },
            "code": "uint check_board_08008a74(uint row1, uint col1, uint row2, uint col2)\n{\n  bool is_row1_empty = (row1 | col1 << 1) == 0;\n  bool is_row2_empty = (row2 | col2 << 1) == 0;\n  bool is_same_col = col1 == col2;\n  bool is_same_row = row1 == row2;\n  if (is_row1_empty && is_row2_empty)\n  {\n    return 1;\n  }\n  if (is_same_col || is_same_row)\n  {\n    return 0;\n  }\n  uint xor = col1 ^ col2;\n  bool is_xor_zero = xor == 0;\n  bool is_xor_negative = -1 < (int)xor;\n  bool is_col2_smaller = col2 <= col1;\n  if (is_xor_zero)\n  {\n    is_col2_smaller = row2 <= row1;\n  }\n  uint result = (int)col2 >> 0x1f;\n  if (!is_col2_smaller)\n  {\n    result = ~result;\n  }\n  return result | 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a74",
            "calling": [
                "FUN_08008b00"
            ],
            "imported": false,
            "current_name": "check_board_08008a74"
        },
        "FUN_08002fd4": {
            "renaming": {
                "FUN_08002fd4": "process_data_08002fd4",
                "iVar1": "current_value",
                "FUN_08002f74": "get_next_value",
                "PTR_DAT_08003000": "data_pointer"
            },
            "code": "void process_data_08002fd4() {\\n  int current_value;\\n  while ((current_value = get_next_value(), current_value != 0 || (PTR_DAT_08003000[1] == \"\\x03\"))) {\\n    process_value();\\n    if (*PTR_DAT_08003000 != \"\\0\") {\\n      return;\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08002f74",
                "FUN_08003a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fd4",
            "calling": [
                "FUN_0800525c",
                "FUN_080005b4",
                "FUN_08000220",
                "FUN_080024c4",
                "FUN_08002408"
            ],
            "imported": false,
            "current_name": "process_data_08002fd4"
        },
        "FUN_08002408": {
            "renaming": {
                "FUN_08002408": "process_data_08002408",
                "param_1": "input",
                "uVar1": "result2",
                "uVar2": "result1",
                "uVar3": "result3",
                "uVar4": "result4",
                "local_12": "counter",
                "FUN_08008eec": "function1",
                "DAT_080024b8": "constant1",
                "FUN_08008590": "function2",
                "FUN_080094c0": "function3",
                "FUN_08008bf0": "function4",
                "FUN_08008e44": "function5",
                "FUN_08008cd8": "function6",
                "FUN_08002fd4": "do_nothing",
                "PTR_DAT_080024c0": "pointer_constant",
                "FUN_08003a74": "function7",
                "FUN_080002a0": "function8"
            },
            "code": "void process_data_08002408(undefined4 input)\\n{\\n  uint32_t result1;\\n  uint32_t result2;\\n  uint64_t result3;\\n  uint16_t counter;\\n  result1 = function1(input, DAT_080024b8);\\n  result3 = function2(result1);\\n  result3 = function3((int)result3, (int)(result3 >> 0x20));\\n  counter = function4((int)result3, (int)(result3 >> 0x20));\\n  do_nothing(function5(input, constant2));\\n  while ((counter != 0 && (function6(), *PTR_DAT_080024c0 == \"\\0\"))) {\\n    function7(constant3);\\n    counter--;\\n  }\\n  return;\\n}",
            "called": [
                "FUN_080094c0",
                "FUN_080002a0",
                "FUN_08008590",
                "FUN_08002fd4",
                "FUN_08008e44",
                "FUN_08008bf0",
                "FUN_08008cd8",
                "FUN_08002814",
                "FUN_08008eec",
                "FUN_08003a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002408",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "process_data_08002408"
        },
        "FUN_08002a94": {
            "renaming": {
                "FUN_08002a94": "decode_data_08002a94",
                "puVar1": "current_byte_ptr",
                "puVar2": "current_data_ptr",
                "local_18": "previous_byte_ptr",
                "local_14": "current_data_ptr",
                "local_9": "current_byte",
                "PTR_DAT_08002af0": "data_start_ptr",
                "PTR_DAT_08002af4": "data_table",
                "PTR_DAT_08002af8": "data_end_ptr",
                "FUN_08002896": "get_next_byte",
                "FUN_080029d8": "copy_data"
            },
            "code": "void decode_data_08002a94(void)\n{\n  uint8_t *current_byte_ptr;\n  uint8_t *previous_byte_ptr;\n  uint8_t *current_data_ptr;\n  uint8_t current_byte;\n  uint8_t initial_byte = *PTR_DAT_08002af0;\n\n  current_byte_ptr = PTR_DAT_08002af0;\n  previous_byte_ptr = NULL;\n  current_data_ptr = NULL;\n\n  while (initial_byte != *PTR_DAT_08002af8) {\n    current_byte = get_next_byte(initial_byte);\n    previous_byte_ptr = current_data_ptr;\n    current_data_ptr = PTR_DAT_08002af4 + (uint)current_byte * 0x40;\n    copy_data(current_data_ptr, previous_byte_ptr, current_byte_ptr);\n    current_byte_ptr = current_data_ptr;\n    initial_byte = current_byte;\n  }\n}\n",
            "called": [
                "FUN_08002896",
                "FUN_080029d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a94",
            "calling": [
                "FUN_08002edc"
            ],
            "imported": false,
            "current_name": "decode_data_08002a94"
        },
        "FUN_08003618": {
            "renaming": {
                "FUN_08003618": "update_data_in_buffer_08003618",
                "param_1": "new_data",
                "bVar1": "buffer_index",
                "puVar2": "buffer_pointer",
                "uVar3": "updated_data",
                "uVar4": "previous_data"
            },
            "code": "void update_data_in_buffer_08003618(int new_data){\n    byte buffer_index;\n    undefined *buffer_pointer;\n    undefined4 updated_data;\n    undefined4 previous_data;\n    \n    buffer_pointer = PTR_DAT_08003698;\n    buffer_index = *PTR_DAT_08003694;\n    updated_data = *(undefined4 *)(PTR_DAT_08003698 + (uint)buffer_index * 0x40 + 0x20);\n    previous_data = get_previous_data(new_data);\n    updated_data = update_data(updated_data, previous_data);\n    previous_data = get_previous_data(*(undefined4 *)(buffer_pointer + (uint)buffer_index * 0x40 + 0x10));\n    updated_data = update_data(updated_data, previous_data);\n    *(undefined4 *)(buffer_pointer + (uint)buffer_index * 0x40 + 0x20) = updated_data;\n    *(undefined4 *)(buffer_pointer + (uint)buffer_index * 0x40 + 0x10) = new_data;\n    *(undefined4 *)(buffer_pointer + (uint)buffer_index * 0x40 + 0x18) = 0;\n    *(undefined4 *)(buffer_pointer + (uint)buffer_index * 0x40 + 0x1c) = 0;\n    buffer_pointer[(uint)buffer_index * 0x40 + 0x25] = 0;\n    buffer_pointer[(uint)buffer_index * 0x40 + 0x24] = 1;\n    flush_buffer();\n    return;\n}",
            "called": [
                "FUN_08008e44",
                "FUN_08009054",
                "FUN_08002edc",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003618",
            "calling": [
                "FUN_080058a0"
            ],
            "imported": false,
            "current_name": "update_data_in_buffer_08003618"
        },
        "FUN_0800522c": {
            "renaming": {
                "FUN_0800522c": "do_nothing_0800522c"
            },
            "code": "\nvoid do_nothing_0800522c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800522c",
            "calling": [
                "FUN_0800525c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800522c"
        },
        "FUN_0800af78": {
            "renaming": {
                "FUN_0800af78": "FUNC_0800af78"
            },
            "code": "\nint FUNC_0800af78(int param_1,uint param_2)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  undefined8 uVar9;\n  undefined8 uVar10;\n  undefined4 local_2c;\n  \n  uVar9 = CONCAT44(param_2,param_1);\n  uVar8 = param_2 & 0x7fffffff;\n  if (DAT_0800b298 < (int)uVar8) {\n    if ((uVar8 != DAT_0800b29c && (int)DAT_0800b29c <= (int)uVar8) ||\n       ((iVar2 = DAT_0800b2a8, uVar8 == DAT_0800b29c && (param_1 != 0)))) {\n      iVar2 = FUN_080082d4(param_1,param_2,param_1);\n      return iVar2;\n    }\n  }\n  else {\n    if (DAT_0800b2ac < (int)uVar8) {\n      uVar9 = do_nothing_0800b2cc();\n      uVar6 = (undefined4)((ulonglong)uVar9 >> 0x20);\n      uVar3 = (undefined4)uVar9;\n      if (DAT_0800b2bc < (int)uVar8) {\n        if ((int)uVar8 < DAT_0800b2c0) {\n          uVar9 = FUN_080082d0(uVar3,uVar6,0,DAT_0800b2c4);\n          uVar10 = FUN_08008640(uVar3,uVar6,0,DAT_0800b2c4);\n          uVar10 = FUN_080082d4((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_0800b2b8);\n          uVar9 = FUN_08008894((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                               (int)((ulonglong)uVar10 >> 0x20));\n          iVar2 = 2;\n        }\n        else {\n          uVar9 = FUN_08008894(0,DAT_0800b2c8,uVar3,uVar6);\n          iVar2 = 3;\n        }\n      }\n      else if (DAT_0800b2bc + -0xd0000 < (int)uVar8) {\n        uVar9 = FUN_080082d0(uVar3,uVar6,0,DAT_0800b2b8);\n        uVar10 = FUN_080082d4(uVar3,uVar6,0,DAT_0800b2b8);\n        uVar9 = FUN_08008894((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                             (int)((ulonglong)uVar10 >> 0x20));\n        iVar2 = 1;\n      }\n      else {\n        uVar9 = FUN_080082d4(uVar3,uVar6,uVar3,uVar6);\n        uVar9 = FUN_080082d0((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),0,DAT_0800b2b8);\n        uVar10 = FUN_080082d4(uVar3,uVar6,0,0x40000000);\n        uVar9 = FUN_08008894((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                             (int)((ulonglong)uVar10 >> 0x20));\n        iVar2 = 0;\n      }\n    }\n    else {\n      if ((int)uVar8 <= DAT_0800b2ac + -0x1bc0000) {\n        uVar10 = FUN_080082d4(param_1,param_2,DAT_0800b290,DAT_0800b294);\n        iVar2 = FUN_08008b60((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_0800b2b8);\n        if (iVar2 != 0) {\n          return param_1;\n        }\n      }\n      iVar2 = -1;\n    }\n    local_2c = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar7 = (undefined4)uVar9;\n    uVar9 = FUN_08008640(uVar7,local_2c,uVar7);\n    uVar4 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar3 = (undefined4)uVar9;\n    uVar9 = FUN_08008640(uVar3,uVar4,uVar3,uVar4);\n    uVar5 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar6 = (undefined4)uVar9;\n    uVar9 = FUN_08008640(uVar6,uVar5,DAT_0800b238,DAT_0800b23c);\n    uVar9 = FUN_080082d4((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b240,DAT_0800b244);\n    uVar9 = FUN_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar6,uVar5);\n    uVar9 = FUN_080082d4((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b248,DAT_0800b24c);\n    uVar9 = FUN_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar6,uVar5);\n    uVar9 = FUN_080082d4((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b250,DAT_0800b254);\n    uVar9 = FUN_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar6,uVar5);\n    uVar9 = FUN_080082d4((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b258,DAT_0800b25c);\n    uVar9 = FUN_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar6,uVar5);\n    uVar9 = FUN_080082d4((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b260,DAT_0800b264);\n    uVar9 = FUN_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar3,uVar4);\n    uVar3 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar10 = FUN_08008640(uVar6,uVar5,DAT_0800b268,DAT_0800b26c);\n    uVar10 = FUN_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800b270,DAT_0800b274);\n    uVar10 = FUN_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar6,uVar5);\n    uVar10 = FUN_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800b278,DAT_0800b27c);\n    uVar10 = FUN_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar6,uVar5);\n    uVar10 = FUN_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800b280,DAT_0800b284);\n    uVar10 = FUN_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar6,uVar5);\n    uVar10 = FUN_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800b288,DAT_0800b28c);\n    uVar10 = FUN_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar6,uVar5);\n    uVar6 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    if (iVar2 == -1) {\n      uVar9 = FUN_080082d4((int)uVar9,uVar3,(int)uVar10,uVar6);\n      uVar9 = FUN_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar7,local_2c);\n      iVar2 = FUN_080082d0(uVar7,local_2c,(int)uVar9,(int)((ulonglong)uVar9 >> 0x20));\n      return iVar2;\n    }\n    uVar9 = FUN_080082d4((int)uVar9,uVar3,(int)uVar10,uVar6);\n    puVar1 = PTR_DAT_0800b2b0;\n    uVar9 = FUN_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar7,local_2c);\n    uVar9 = FUN_080082d0((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),\n                         *(undefined4 *)(PTR_DAT_0800b2b4 + iVar2 * 8),\n                         *(undefined4 *)((int)(PTR_DAT_0800b2b4 + iVar2 * 8) + 4));\n    uVar9 = FUN_080082d0((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar7,local_2c);\n    iVar2 = FUN_080082d0(*(undefined4 *)(puVar1 + iVar2 * 8),\n                         *(undefined4 *)((int)(puVar1 + iVar2 * 8) + 4),(int)uVar9,\n                         (int)((ulonglong)uVar9 >> 0x20));\n    if ((int)param_2 < 0) {\n      return iVar2;\n    }\n  }\n  return iVar2;\n}\n\n",
            "called": [
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_08008b60",
                "FUN_08008640",
                "FUN_08008894",
                "FUN_0800b2cc"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800af78",
            "calling": [
                "FUN_08009990"
            ],
            "imported": false,
            "current_name": "FUNC_0800af78"
        },
        "FUN_08007d08": {
            "renaming": {
                "FUN_08007d08": "initialize_settings_08007d08",
                "puVar1": "settings"
            },
            "code": "void initialize_settings_08007d08(void)\n{\n  undefined4 *settings = DAT_08007d9c;\n  FUN_08007a10(settings);\n  settings[0] = 128;\n  settings[1] = 0;\n  settings[2] = 0;\n  settings[3] = 0;\n  settings[4] = 0;\n  settings[5] = 1;\n  settings[6] = 26624;\n  settings[7] = 0;\n  settings[8] = 0;\n  settings[9] = 0;\n  settings[10] = (uint)((ulonglong)DAT_08007da4 * (ulonglong)*(uint *)PTR_DAT_08007da0 >> 0x35) - 1;\n  settings[11] = 199;\n  settings[13] = 0;\n  settings[14] = 100;\n  settings[15] = 0;\n  settings[16] = 0;\n  settings[18] = 0;\n  settings[19] = 0;\n  return;\n}",
            "called": [
                "FUN_08007a10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007d08",
            "calling": [
                "FUN_08007e08"
            ],
            "imported": false,
            "current_name": "initialize_settings_08007d08"
        },
        "FUN_080091fc": {
            "renaming": {
                "FUN_080091fc": "swap_pointers_080091fc",
                "param_1": "pointer1",
                "param_2": "pointer2",
                "FUN_08009204": "swap"
            },
            "code": "void swap_pointers_080091fc(void* pointer1, void* pointer2)\n{\n    swap(pointer2, pointer1);\n    return;\n}",
            "called": [
                "FUN_08009204"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091fc",
            "calling": [
                "FUN_08009250",
                "FUN_08009264"
            ],
            "imported": false,
            "current_name": "swap_pointers_080091fc"
        },
        "FUN_080058a0": {
            "renaming": {
                "FUN_080058a0": "process_data_080058a0",
                "PTR_DAT_080058f0": "data_pointer",
                "PTR_DAT_080058fc": "data_array",
                "PTR_DAT_080058f4": "data_offset",
                "DAT_080058f8": "default_value",
                "FUN_08003618": "perform_operation",
                "FUN_08005324": "print_result"
            },
            "code": "void process_data_080058a0(void) {\n  if (*PTR_DAT_080058f0 == 0) {\n    PTR_DAT_080058fc[1] = 0;\n  }\n  else {\n    int offset = *(int *)(*PTR_DAT_080058f0 + 0x10) - *(int *)(PTR_DAT_080058f4 + 0x10);\n    perform_operation(offset);\n    *(int *)(PTR_DAT_080058f4 + 0x1c) = 0;\n    print_result(*(int *)(PTR_DAT_080058f4 + 0x1c));\n    *(int *)(PTR_DAT_080058f4 + 0x18) = DAT_080058f8;\n    *(int *)(PTR_DAT_080058f4 + 0x10) = 0;\n    PTR_DAT_080058fc[1] = 2;\n  }\n  return;\n}",
            "called": [
                "FUN_08005324",
                "FUN_08003618"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058a0",
            "calling": [
                "FUN_08003a74"
            ],
            "imported": false,
            "current_name": "process_data_080058a0"
        },
        "FUN_080036c6": {
            "renaming": {
                "FUN_080036c6": "print_string_080036c6",
                "param_1": "string_to_print",
                "local_c": "current_char_ptr",
                "*local_c": "*current_char_ptr",
                "FUN_08008250": "print_char"
            },
            "code": "void print_string_080036c6(char *string_to_print)\n{\n  char *current_char_ptr;\n  current_char_ptr = string_to_print;\n  while (*current_char_ptr != '\\0') {\n    print_char(*current_char_ptr);\n    current_char_ptr = current_char_ptr + 1;\n  }\n  return;\n}",
            "called": [
                "FUN_08008250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036c6",
            "calling": [
                "FUN_08004250",
                "FUN_080046d0",
                "FUN_08004148",
                "FUN_08004940",
                "FUN_0800423c",
                "FUN_08004030",
                "FUN_080041a0",
                "FUN_08004228",
                "FUN_080044e8",
                "FUN_08004900"
            ],
            "imported": false,
            "current_name": "print_string_080036c6"
        },
        "FUN_08008190": {
            "renaming": {
                "FUN_08008190": "set_permissions_08008190",
                "puVar1": "permissions_ptr",
                "DAT_08008240": "permissions_data"
            },
            "code": "void set_permissions_08008190(void)\n{\n  uint *permissions_ptr;\n  permissions_ptr = DAT_08008240;\n  set_default_permissions(DAT_08008240);\n  permissions_ptr[3] = permissions_ptr[3] & 0xffffdfff;\n  permissions_ptr[3] = permissions_ptr[3] & 0xffff400c | 0xc;\n  permissions_ptr[4] = permissions_ptr[4] & 0xffff8090;\n  permissions_ptr[5] = permissions_ptr[5] & 0xfffff000;\n  *permissions_ptr = *permissions_ptr & 0xfffffc00;\n  set_specific_permissions(permissions_ptr,0x1c200);\n  permissions_ptr[6] = permissions_ptr[6];\n  permissions_ptr[3] = permissions_ptr[3] | 0x2000;\n  return;\n}",
            "called": [
                "FUN_08007ea4",
                "FUN_08007f54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008190",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "set_permissions_08008190"
        },
        "FUN_080074c8": {
            "renaming": {
                "FUN_080074c8": "check_inputs_080074c8",
                "param_1": "input_mask",
                "FUN_08007402": "send_error_message",
                "PTR_DAT_08007518": "initialization_flag",
                "FUN_0800195c": "perform_initialization",
                "PTR_DAT_0800751c": "advanced_operation_flag",
                "FUN_08003a18": "perform_advanced_operation"
            },
            "code": "void check_inputs_080074c8(uint input_mask)\n{\n    if ((input_mask & 1) != 0) {\n        send_error_message(0x3e);\n    }\n    if ((*(int *)PTR_DAT_08007518 != 0) && ((input_mask & 0x1e) != 0)) {\n        perform_initialization();\n    }\n    if ((*(int *)PTR_DAT_0800751c != 0) && ((input_mask & 0x80) != 0)) {\n        perform_advanced_operation(input_mask);\n    }\n    return;\n}",
            "called": [
                "FUN_08007402",
                "FUN_0800195c",
                "FUN_08003a18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080074c8",
            "calling": [
                "FUN_08007930"
            ],
            "imported": false,
            "current_name": "check_inputs_080074c8"
        },
        "FUN_0800b430": {
            "renaming": {
                "FUN_0800b430": "fill_memory_with_value_0800b430",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "current_word",
                "puVar2": "end_word",
                "uVar3": "num_words",
                "uVar4": "value32",
                "bVar5": "is_last_word"
            },
            "code": "void fill_memory_with_value_0800b430(uint32_t* memory, uint8_t value, uint32_t size)\n{\n    uint32_t *current_word;\n    uint32_t *end_word;\n    uint32_t num_words;\n    uint32_t remainder;\n    uint32_t value32 = (value << 24) | (value << 16) | (value << 8) | value;\n    if (((uint32_t)memory & 3) != 0) {\n        remainder = size - 1;\n        current_word = memory;\n        if (size == 0) {\n            return;\n        }\n        while (true) {\n            memory = (uint32_t *)((int)current_word + 1);\n            *(uint8_t *)current_word = value;\n            size = remainder;\n            if (((uint32_t)memory & 3) == 0) break;\n            remainder = remainder - 1;\n            current_word = memory;\n            if (remainder == 0) {\n                return;\n            }\n        }\n    }\n    num_words = size >> 4;\n    end_word = memory + num_words * 4;\n    while (memory != end_word) {\n        memory[0] = value32;\n        memory[1] = value32;\n        memory[2] = value32;\n        memory[3] = value32;\n        memory += 4;\n    }\n    remainder = size & 0xf;\n    if (remainder != 0) {\n        current_word = end_word;\n        while (memory != current_word + 1) {\n            *(uint8_t *)memory = value;\n            memory = (uint32_t *)((int)memory + 1);\n        }\n    }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b430",
            "calling": [
                "FUN_08001994",
                "FUN_080079c0",
                "FUN_080005b4",
                "FUN_080002f0",
                "FUN_080004ac",
                "FUN_08004d7c",
                "FUN_08005814",
                "FUN_080024c4",
                "FUN_08002f24",
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "fill_memory_with_value_0800b430"
        },
        "FUN_08004030": {
            "renaming": {
                "FUN_08004030": "printErrorMessage_08004030",
                "param_1": "errorCode"
            },
            "code": "void printErrorMessage_08004030(char errorCode)\\n{\\n    if (errorCode == \"\\0\") {\\n        print(PTR_DAT_08004108);\\n    }\\n    else {\\n        print(PTR_s_error__0800410c);\\n        switch(errorCode) {\\n        case \"\\x01\":\\n            print(PTR_s_Bad_number_format_08004110);\\n            break;\\n        case \"\\x02\":\\n            print(PTR_s_Expected_command_letter_08004114);\\n            break;\\n        case \"\\x03\":\\n            print(PTR_s_Unsupported_statement_08004118);\\n            break;\\n        case \"\\x04\":\\n            print(PTR_s_Invalid_radius_0800411c);\\n            break;\\n        case \"\\x05\":\\n            print(PTR_s_Modal_group_violation_08004120);\\n            break;\\n        case \"\\x06\":\\n            print(PTR_s_Invalid_statement_08004124);\\n            break;\\n        case \"\\a\":\\n            print(PTR_s_Setting_disabled_08004128);\\n            break;\\n        case \"\\b\":\\n            print(PTR_s_Value___0_0_0800412c);\\n            break;\\n        case \"\\t\":\\n            print(PTR_s_Value___3_usec_08004130);\\n            break;\\n        case \"\\n\":\\n            print(PTR_s_EEPROM_read_fail__Using_defaults_08004134);\\n            break;\\n        case \"\\v\":\\n            print(PTR_s_Busy_or_queued_08004138);\\n            break;\\n        case \"\\f\":\\n            print(PTR_s_Alarm_lock_0800413c);\\n            break;\\n        case \"\\r\":\\n            print(PTR_s_Line_overflow_08004140);\\n        }\\n        print(PTR_DAT_08004144);\\n    }\\n    return;\\n}",
            "called": [
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004030",
            "calling": [
                "FUN_08003f34",
                "FUN_080039bc",
                "FUN_080004ac",
                "FUN_080051b4",
                "FUN_080044e8",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "printErrorMessage_08004030"
        },
        "FUN_08005360": {
            "renaming": {
                "FUN_08005360": "check_if_threshold_exceeded_08005360",
                "uVar1": "threshold",
                "uVar2": "current_threshold_value",
                "PTR_DAT_08005398": "data_pointer",
                "DAT_0800539c": "threshold_value"
            },
            "code": "bool check_if_threshold_exceeded_08005360(void)\n{\n  int current_value = *(int *)(PTR_DAT_08005398 + 0x14);\n  int *threshold_ptr = (int *)(PTR_DAT_08005398 + 0x18);\n  *threshold_ptr += current_value;\n  uint threshold = DAT_0800539c;\n  uint current_DAT_0800539c = *(uint *)(PTR_DAT_08005398 + 0x18);\n  if (threshold < current_DAT_0800539c) {\n    *threshold_ptr -= 420000;\n  }\n  return threshold < current_DAT_0800539c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005360",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "check_if_threshold_exceeded_08005360"
        },
        "FUN_08003980": {
            "renaming": {
                "FUN_08003980": "clear_pointers_08003980",
                "PTR_DAT_08003998": "data_pointer_1",
                "PTR_DAT_0800399c": "data_pointer_2"
            },
            "code": "void clear_pointers_08003980(void)\n{\n  *PTR_DAT_08003998 = 0;\n  *PTR_DAT_0800399c = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003980",
            "calling": [
                "FUN_080039a0",
                "FUN_08003f34"
            ],
            "imported": false,
            "current_name": "clear_pointers_08003980"
        },
        "FUN_08006de0": {
            "renaming": {
                "FUN_08006de0": "convert_char_to_int_08006de0",
                "param_1": "input_char",
                "uVar1": "converted_int",
                "FUN_08006a18": "convert_char_to_int_helper"
            },
            "code": "int convert_char_to_int_08006de0(char input_char) {\n  int converted_int = convert_char_to_int_08006de0_helper((int)input_char);\n  return converted_int;\n}",
            "called": [
                "FUN_08006a18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006de0",
            "calling": [],
            "imported": false,
            "current_name": "convert_char_to_int_08006de0"
        },
        "FUN_08007540": {
            "renaming": {
                "FUN_08007540": "main_08007540",
                "FUN_080059b4": "initialize_screen",
                "FUN_08007436": "load_game_assets",
                "FUN_0800778c": "show_title_screen",
                "FUN_08007e08": "start_game_loop",
                "FUN_080079c0": "show_game_over_screen",
                "FUN_08008190": "cleanup",
                "FUN_08005984": "set_game_difficulty",
                "FUN_08001ddc": "initialize_random_seed"
            },
            "code": "int main_08007540(void)\n{\n  initialize_screen();\n  load_game_assets();\n  show_title_screen();\n  start_game_loop();\n  show_game_over_screen();\n  cleanup();\n  return 0;\n}",
            "called": [
                "FUN_080079c0",
                "FUN_08008190",
                "FUN_08007e08",
                "FUN_0800778c",
                "FUN_08007436",
                "FUN_08005984",
                "FUN_080059b4",
                "FUN_08001ddc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007540",
            "calling": [
                "FUN_080092c4"
            ],
            "imported": false,
            "current_name": "main_08007540"
        },
        "FUN_080052dc": {
            "renaming": {
                "FUN_080052dc": "update_parameter_080052dc",
                "param_1": "new_param",
                "*(uint *)(DAT_08005308 + 0x14)": "*ptr",
                "DAT_08005308": "data_location",
                "0x14": "offset",
                "mask": "bit_mask",
                "old_param": "previous_param",
                "masked_old_param": "previous_param_masked",
                "new_masked_param": "new_param_masked"
            },
            "code": "void update_parameter_080052dc(uint new_param) {\n    uint* ptr = (uint*)(DAT_08005308 + 0x14);\n    uint old_param = *(uint *)(DAT_08005308 + 0x14);\n    uint mask = 0xfffff55f;\n    uint masked_old_param = old_param & mask;\n    uint new_masked_param = new_param | masked_old_param;\n    *(uint *)(DAT_08005308 + 0x14) = new_masked_param;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052dc",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "update_parameter_080052dc"
        },
        "FUN_080064ec": {
            "renaming": {
                "FUN_080064ec": "calculate_data_rate_080064ec",
                "uVar1": "data_rate_type",
                "uVar2": "symbol_rate",
                "local_c": "mantissa",
                "count_leading_zeroes": "count_leading_zeros"
            },
            "code": "uint calculate_data_rate_080064ec(void)\n{\n  uint data_rate_type = *(uint *)(DAT_0800661c + 8) & 0xc;\n  if (data_rate_type == 8) {\n    uint symbol_rate = *(uint *)(DAT_0800661c + 4) & 0x3f;\n    uint exponent = count_leading_zeroes(0x200);\n    if ((*(uint *)(DAT_0800661c + 4) & 0x400000) >> (exponent & 0xff) == 0) {\n      exponent = count_leading_zeroes(0x3fe0000);\n      uint mantissa = ((*(uint *)(DAT_0800661c + 4) & 0x7fc0) >> (exponent & 0xff)) * (DAT_08006620 / symbol_rate);\n    }\n    else {\n      exponent = count_leading_zeroes(0x3fe0000);\n      uint mantissa = ((*(uint *)(DAT_0800661c + 4) & 0x7fc0) >> (exponent & 0xff)) * (DAT_08006624 / symbol_rate);\n    }\n    exponent = count_leading_zeroes(0xc000);\n    return mantissa / ((((*(uint *)(DAT_0800661c + 4) & 0x30000) >> (exponent & 0xff)) + 1) * 2);\n  }\n  if (data_rate_type < 9) {\n    if (data_rate_type == 0) {\n      return DAT_08006620;\n    }\n    if (data_rate_type == 4) {\n      return DAT_08006624;\n    }\n  }\n  return DAT_08006620;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ec",
            "calling": [
                "FUN_08006628"
            ],
            "imported": false,
            "current_name": "calculate_data_rate_080064ec"
        },
        "FUN_08006ba0": {
            "renaming": {
                "FUN_08006ba0": "get_bits_08006ba0",
                "param_1": "bit_count",
                "param_2": "mask",
                "param_3": "data",
                "uVar1": "bits_to_keep",
                "remaining_bits": "remaining_bits"
            },
            "code": "uint get_bits_08006ba0(uint bit_count, uint mask, uint data)\n{\n    uint remaining_bits = bit_count & 7;\n    uint bits_to_keep = 7 - remaining_bits;\n    if (bits_to_keep > 3) {\n        bits_to_keep = 4;\n    }\n    if (remaining_bits + 4 < 7) {\n        remaining_bits = 0;\n    }\n    else {\n        remaining_bits = remaining_bits - 3;\n    }\n    return data & (1 << (remaining_bits & 0xff)) - 1U |\n           ((1 << (bits_to_keep & 0xff)) - 1U & mask) << (remaining_bits & 0xff);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ba0",
            "calling": [
                "FUN_08006cf6"
            ],
            "imported": false,
            "current_name": "get_bits_08006ba0"
        },
        "FUN_080003ec": {
            "renaming": {
                "FUN_080003ec": "check_sum_080003ec",
                "param_1": "data",
                "param_2": "length",
                "param_3": "expected_sum",
                "cVar1": "current_char",
                "local_1c": "length_remaining",
                "local_18": "current_index",
                "local_14": "current_data",
                "local_9": "checksum",
                "PTR_DAT_08000470": "some_pointer",
                "FUN_080002f0": "initialize",
                "FUN_08000310": "get_next_char",
                "uVar2": "calculated_sum"
            },
            "code": "bool check_sum_080003ec(char *data, int length, int expected_sum) {\n  char current_char;\n  uint8_t checksum = 0;\n  int i;\n  \n  if (*(int *)PTR_DAT_08000470 == 0) {\n    initialize();\n  }\n  \n  for (i = 0; i < length; i++) {\n    current_char = get_next_char(data);\n    checksum += (current_char != 0);\n    *data = current_char;\n    data++;\n  }\n  \n  uint8_t calculated_sum = get_next_char(data);\n  return checksum == calculated_sum;\n}",
            "called": [
                "FUN_08000310",
                "FUN_080002f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003ec",
            "calling": [
                "FUN_08004d2c",
                "FUN_08004d7c",
                "FUN_08004dd2"
            ],
            "imported": false,
            "current_name": "check_sum_080003ec"
        },
        "FUN_08002896": {
            "renaming": {
                "FUN_08002896": "replace_null_with_0x12_08002896",
                "param_1": "character",
                "local_9": "result"
            },
            "code": "char replace_null_with_0x12_08002896(char character) {\n  char result = character;\n  if (character == '\\0') {\n    result = '\\x12';\n  }\n  return result - 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002896",
            "calling": [
                "FUN_08002a94"
            ],
            "imported": false,
            "current_name": "replace_null_with_0x12_08002896"
        },
        "FUN_0800a348": {
            "renaming": {
                "FUN_0800a348": "calculate_result_0800a348",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "success_flag",
                "uVar2": "result_lower",
                "uVar3": "result_upper",
                "uVar4": "input_2_unsigned",
                "uVar5": "temp_result_1",
                "uVar6": "temp_result_2",
                "uVar7": "temp_result_3",
                "lVar8": "long_result",
                "local_30": "result_1",
                "uStack_2c": "temp_result_4",
                "local_28": "result_2",
                "uStack_24": "temp_result_5"
            },
            "code": "\nundefined4 calculate_result_0800a348(undefined4 input_1,uint input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  int success_flag;\n  undefined4 result_lower;\n  undefined4 result_upper;\n  uint input_2_unsigned;\n  undefined8 temp_result_1;\n  undefined8 temp_result_2;\n  undefined8 temp_result_3;\n  longlong long_result;\n  undefined4 result_1;\n  undefined4 temp_result_4;\n  undefined4 result_2;\n  undefined4 temp_result_5;\n  \n  input_2_unsigned = input_2 & 0x7fffffff;\n  if (input_2_unsigned < 0x3e400000) {\n    success_flag = FUN_08008ba0();\n    if (success_flag == 0) {\n      return 0;\n    }\n    temp_result_1 = FUN_08008640(input_1,input_2,input_1,input_2);\n    result_upper = (undefined4)((ulonglong)temp_result_1 >> 0x20);\n    result_lower = (undefined4)temp_result_1;\n    temp_result_2 = FUN_08008640(result_lower,result_upper,DAT_0800a558,DAT_0800a55c);\n    temp_result_2 = FUN_080082d4((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),DAT_0800a560,DAT_0800a564);\n    temp_result_2 = FUN_08008640((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result_lower,result_upper);\n    temp_result_2 = FUN_080082d0((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),DAT_0800a568,DAT_0800a56c);\n    temp_result_2 = FUN_08008640((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result_lower,result_upper);\n    temp_result_2 = FUN_080082d4((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),DAT_0800a570,DAT_0800a574);\n    temp_result_2 = FUN_08008640((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result_lower,result_upper);\n    temp_result_2 = FUN_080082d0((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),DAT_0800a578,DAT_0800a57c);\n    temp_result_2 = FUN_08008640((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result_lower,result_upper);\n    temp_result_2 = FUN_080082d4((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),DAT_0800a580,DAT_0800a584);\n    temp_result_2 = FUN_08008640((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result_lower,result_upper);\n  }\n  else {\n    temp_result_1 = FUN_08008640(input_1,input_2,input_1,input_2);\n    result_upper = (undefined4)((ulonglong)temp_result_1 >> 0x20);\n    result_lower = (undefined4)temp_result_1;\n    temp_result_2 = FUN_08008640(result_lower,result_upper,DAT_0800a558,DAT_0800a55c);\n    temp_result_2 = FUN_080082d4((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),DAT_0800a560,DAT_0800a564);\n    temp_result_2 = FUN_08008640((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result_lower,result_upper);\n    temp_result_2 = FUN_080082d0((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),DAT_0800a568,DAT_0800a56c);\n    temp_result_2 = FUN_08008640((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result_lower,result_upper);\n    temp_result_2 = FUN_080082d4((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),DAT_0800a570,DAT_0800a574);\n    temp_result_2 = FUN_08008640((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result_lower,result_upper);\n    temp_result_2 = FUN_080082d0((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),DAT_0800a578,DAT_0800a57c);\n    temp_result_2 = FUN_08008640((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result_lower,result_upper);\n    temp_result_2 = FUN_080082d4((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),DAT_0800a580,DAT_0800a584);\n    temp_result_2 = FUN_08008640((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result_lower,result_upper);\n    if (DAT_0800a590 < (int)input_2_unsigned) {\n      if (DAT_0800a594 < (int)input_2_unsigned) {\n        long_result = (ulonglong)DAT_0800a598 << 0x20;\n        success_flag = DAT_0800a59c;\n      }\n      else {\n        long_result = FUN_080082d0(0,DAT_0800a58c,0,input_2_unsigned - 0x200000);\n        success_flag = input_2_unsigned - 0x200000;\n      }\n      temp_result_5 = (undefined4)((ulonglong)long_result >> 0x20);\n      result_2 = (undefined4)long_result;\n      temp_result_1 = FUN_08008640(result_lower,result_upper,0,DAT_0800a588);\n      temp_result_1 = FUN_080082d0((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0,success_flag);\n      temp_result_2 = FUN_08008640(result_lower,result_upper,(int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20));\n      temp_result_3 = FUN_08008640(input_1,input_2,input_3,input_4);\n      temp_result_2 = FUN_080082d0((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),(int)temp_result_3,\n                           (int)((ulonglong)temp_result_3 >> 0x20));\n      temp_result_1 = FUN_080082d0((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),(int)temp_result_2,\n                           (int)((ulonglong)temp_result_2 >> 0x20));\n      result_lower = FUN_080082d0(result_2,temp_result_5,(int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20));\n      return result_lower;\n    }\n  }\n  temp_result_4 = (undefined4)((ulonglong)temp_result_2 >> 0x20);\n  result_1 = (undefined4)temp_result_2;\n  result_lower = (undefined4)((ulonglong)temp_result_1 >> 0x20);\n  temp_result_2 = FUN_08008640((int)temp_result_1,result_lower,0,DAT_0800a588);\n  temp_result_1 = FUN_08008640((int)temp_result_1,result_lower,result_1,temp_result_4);\n  temp_result_3 = FUN_08008640(input_1,input_2,input_3,input_4);\n  temp_result_1 = FUN_080082d0((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),(int)temp_result_3,\n                       (int)((ulonglong)temp_result_3 >> 0x20));\n  temp_result_1 = FUN_080082d0((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),(int)temp_result_1,\n                       (int)((ulonglong)temp_result_1 >> 0x20));\n  result_lower = FUN_080082d0(0,DAT_0800a58c,(int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20));\n  return result_lower;\n}\n\n",
            "called": [
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_08008ba0",
                "FUN_08008640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a348",
            "calling": [
                "FUN_08009410",
                "FUN_080096e8"
            ],
            "imported": false,
            "current_name": "calculate_result_0800a348"
        },
        "FUN_080001ac": {
            "renaming": {
                "FUN_080001ac": "concatenate_080001ac",
                "param_1": "first",
                "param_2": "second",
                "DAT_080001bc": "global_flag",
                "PTR_FUN_080001c4": "global_first_ptr",
                "PTR_DAT_080001c0": "global_second_ptr"
            },
            "code": "uint64_t concatenate_080001ac(uint64_t* first, uint64_t* second)\n{\n    if (DAT_080001bc != 0) {\n        first = PTR_FUN_080001c4;\n        second = PTR_DAT_080001c0;\n    }\n    return ((uint64_t)(*second) << 32) | (*first);\n}",
            "called": [
                "FUN_0800b5b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ac",
            "calling": [
                "FUN_0800b3e8"
            ],
            "imported": false,
            "current_name": "concatenate_080001ac"
        },
        "FUN_08003740": {
            "renaming": {
                "FUN_08003740": "initialize_buffer_with_value_08003740",
                "param_1": "buffer",
                "FUN_080036f0": "memset",
                "DAT_08004000": "value"
            },
            "code": "void initialize_buffer_with_value_08003740(void* buffer, int DAT_08004000) {\n  memset(buffer, DAT_08004000, 8);\n  return;\n}",
            "called": [
                "FUN_080036f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003740",
            "calling": [],
            "imported": false,
            "current_name": "initialize_buffer_with_value_08003740"
        },
        "FUN_08000478": {
            "renaming": {
                "FUN_08000478": "set_params_in_array_08000478",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "code": "void set_params_in_array_08000478(int param1, int param2, int param3) {\n  array_of_params[25] = param1;\n  array_of_params[26] = param2;\n  array_of_params[27] = param3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000478",
            "calling": [
                "FUN_080005b4",
                "FUN_080004ac"
            ],
            "imported": false,
            "current_name": "set_params_in_array_08000478"
        },
        "FUN_08006d2e": {
            "renaming": {
                "FUN_08006d2e": "print_character_08006d2e",
                "param_1": "character_to_print",
                "FUN_080069b4": "print_ascii_code"
            },
            "code": "void print_character_08006d2e(char character_to_print)\n{\n  print_ascii_code((int)character_to_print);\n  return;\n}",
            "called": [
                "FUN_080069b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d2e",
            "calling": [],
            "imported": false,
            "current_name": "print_character_08006d2e"
        },
        "FUN_08007e1c": {
            "renaming": {
                "FUN_08007e1c": "wait_for_bit_set_08007e1c",
                "param_1": "bit_to_wait_for",
                "DAT_08007e48": "status_register"
            },
            "code": "void wait_for_bit_set_08007e1c(byte bit_to_wait_for) {\n  do {\n  } while ((*DAT_08007e48 & 0x80) == 0);\n  DAT_08007e48[1] = (uint)bit_to_wait_for;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e1c",
            "calling": [
                "FUN_08008250",
                "FUN_0800826a"
            ],
            "imported": false,
            "current_name": "wait_for_bit_set_08007e1c"
        },
        "FUN_0800adf0": {
            "renaming": {
                "FUN_0800adf0": "calculateResult_0800adf0",
                "param_1": "base",
                "param_2": "exponent",
                "param_3": "arg1",
                "param_4": "arg2",
                "param_5": "condition",
                "iVar1": "status",
                "uVar2": "result1",
                "uVar3": "result2",
                "uVar4": "result3",
                "uVar5": "result4",
                "uVar6": "result5",
                "uVar7": "result6",
                "uVar8": "result7"
            },
            "code": "undefined4 calculateResult_0800adf0(undefined4 base, uint exponent, undefined4 arg1, undefined4 arg2, int condition) {\n    int status;\n    undefined8 result1 = 0;\n    undefined8 result2 = 0;\n    undefined8 result3 = 0;\n    undefined8 result4 = 0;\n    undefined8 result5 = 0;\n    undefined8 result6 = 0;\n    undefined8 result7 = 0;\n    undefined8 result8 = 0;\n    \n    if (((exponent & 0x7fffffff) < 0x3e400000) && (status = checkStatus(), status == 0)) {\n        return base;\n    }\n    \n    result1 = multiply(base, exponent, base);\n    result2 = multiply(base, exponent, result1);\n    result3 = multiply(arg1, arg2, 0x0800af40, 0x0800af44);\n    result3 = manipulate(result3, 0x0800af48, 0x0800af4c);\n    result4 = multiply(result3, result2, base, exponent);\n    result4 = manipulate(result4, 0x0800af50, 0x0800af54);\n    result5 = multiply(result4, result2, base, exponent);\n    result5 = manipulate(result5, 0x0800af58, 0x0800af5c);\n    result6 = multiply(result5, result2, base, exponent);\n    result6 = manipulate(result6, 0x0800af60, 0x0800af64);\n    \n    if (condition != 0) {\n        result7 = multiply(arg1, arg2, 0, 0x0800af70);\n        result8 = manipulate(result2, result6, result7);\n        result8 = multiply(result8, base, exponent);\n        result8 = manipulate(result8, arg1, arg2);\n        result7 = multiply(result2, result5, 0x0800af68, 0x0800af6c);\n        result8 = manipulate(result7, result8);\n        return manipulate(base, exponent, result8);\n    }\n    \n    result7 = manipulate(result2, result6);\n    result7 = multiply(result7, 0x0800af68, 0x0800af6c);\n    result7 = manipulate(result7, result1);\n    return manipulate(result7, base, exponent);\n}",
            "called": [
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_08008ba0",
                "FUN_08008640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800adf0",
            "calling": [
                "FUN_08009410",
                "FUN_080096e8"
            ],
            "imported": false,
            "current_name": "calculateResult_0800adf0"
        },
        "FUN_08003a74": {
            "renaming": {
                "FUN_08003a74": "processByte_08003a74",
                "PTR_DAT_08003b90": "PTR_DATA",
                "PTR_DAT_08003b94": "PTR_DATA2",
                "sendError": "sendErrorCode",
                "reset": "resetSystem",
                "process1": "processType1",
                "process2": "processType2",
                "process3": "processType3",
                "process4": "processType4"
            },
            "code": "void processByte_08003a74(void)\\n{\\n  byte byteVar;\\n  if (PTR_DAT_08003b90[2] != \"\\0\") {\\n    byteVar = PTR_DAT_08003b90[2];\\n    if ((byteVar & 0x60) != 0) {\\n      PTR_DAT_08003b90[1] = 6;\\n      if ((byteVar & 0x40) == 0) {\\n        sendError(0xfffffffe);\\n      }\\n      else {\\n        sendError(0xffffffff);\\n        reset();\\n        PTR_DAT_08003b90[2] = PTR_DAT_08003b90[2] & 0xef;\\n        while ((PTR_DAT_08003b90[2] & 0x10) == 0);\\n      }\\n      PTR_DAT_08003b90[2] = PTR_DAT_08003b90[2] & 0x9f;\\n    }\\n    if ((byteVar & 0x10) == 0) {\\n      if ((byteVar & 1) != 0) {\\n        process1();\\n        PTR_DAT_08003b90[2] = PTR_DAT_08003b90[2] & 0xfe;\\n      }\\n      if ((byteVar & 8) != 0) {\\n        process2();\\n        PTR_DAT_08003b90[2] = PTR_DAT_08003b90[2] & 0xf7;\\n      }\\n      if ((byteVar & 4) != 0) {\\n        process3();\\n        PTR_DAT_08003b90[2] = PTR_DAT_08003b90[2] & 0xfb;\\n      }\\n      if ((byteVar & 2) != 0) {\\n        process4();\\n        if ((PTR_DAT_08003b90[40] & 2) != 0) {\\n          PTR_DAT_08003b90[16] = 1;\\n        }\\n        PTR_DAT_08003b90[2] = PTR_DAT_08003b90[2] & 0xfd;\\n      }\\n    }\\n    else {\\n      *PTR_DAT_08003b90 = 1;\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_080058a0",
                "FUN_08004940",
                "FUN_08004148",
                "FUN_0800587c",
                "FUN_0800585c",
                "FUN_080041a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a74",
            "calling": [
                "FUN_08002fd4",
                "FUN_08003f34",
                "FUN_08001e98",
                "FUN_080024c4",
                "FUN_08002408",
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "processByte_08003a74"
        },
        "FUN_08005cec": {
            "renaming": {
                "FUN_08005cec": "check_parameters_08005cec",
                "param_1": "parameters",
                "iVar1": "counter",
                "uVar2": "random_number",
                "uVar3": "shift_amount_1",
                "uVar4": "shift_amount_2"
            },
            "code": "\nundefined4 check_parameters_08005cec(uint *parameters)\n\n{\n  int counter;\n  uint random_number;\n  uint shift_amount_1;\n  uint shift_amount_2;\n  \n  if ((*parameters & 1) != 0) {\n    if (((DAT_08005fac[2] & 0xc) == 4) ||\n       (((DAT_08005fac[2] & 0xc) == 8 && ((DAT_08005fac[1] & 0x400000) == 0x400000)))) {\n      if (((*DAT_08005fac & 0x20000) != 0) && (parameters[1] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      *DAT_08005fb0 = 0;\n      counter = FUN_08005a84();\n      while ((*DAT_08005fac & 0x20000) != 0) {\n        random_number = FUN_08005a84();\n        if (counter + 5000U <= random_number) {\n          return 3;\n        }\n      }\n      *DAT_08005fb0 = (char)parameters[1];\n      if (parameters[1] == 1) {\n        counter = FUN_08005a84();\n        while ((*DAT_08005fac & 0x20000) == 0) {\n          random_number = FUN_08005a84();\n          if (counter + 5000U <= random_number) {\n            return 3;\n          }\n        }\n      }\n      else {\n        counter = FUN_08005a84();\n        while ((*DAT_08005fac & 0x20000) != 0) {\n          random_number = FUN_08005a84();\n          if (counter + 5000U <= random_number) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*parameters & 2) != 0) {\n    if (((DAT_08005fac[2] & 0xc) == 0) ||\n       (((DAT_08005fac[2] & 0xc) == 8 && ((DAT_08005fac[1] & 0x400000) == 0)))) {\n      if (((*DAT_08005fac & 2) != 0) && (parameters[3] != 1)) {\n        return 1;\n      }\n    }\n    else if (parameters[3] == 0) {\n      *DAT_08005fb4 = 0;\n      counter = FUN_08005a84();\n      while ((*DAT_08005fac & 2) != 0) {\n        random_number = FUN_08005a84();\n        if (counter + 100U <= random_number) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005fb4 = 1;\n      counter = FUN_08005a84();\n      while ((*DAT_08005fac & 2) == 0) {\n        random_number = FUN_08005a84();\n        if (counter + 100U <= random_number) {\n          return 3;\n        }\n      }\n      random_number = count_leading_zeroes(0x1f000000);\n      *DAT_08005fac = parameters[4] << (random_number & 0xff) | *DAT_08005fac & 0xffffff07;\n    }\n  }\n  if ((*parameters & 8) != 0) {\n    if (parameters[5] == 0) {\n      *DAT_08005fb8 = 0;\n      counter = FUN_08005a84();\n      while ((DAT_08005fac[0x1d] & 2) != 0) {\n        random_number = FUN_08005a84();\n        if (counter + 100U <= random_number) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005fb8 = 1;\n      counter = FUN_08005a84();\n      while ((DAT_08005fac[0x1d] & 2) == 0) {\n        random_number = FUN_08005a84();\n        if (counter + 100U <= random_number) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*parameters & 4) != 0) {\n    DAT_08005fac[0x10] = DAT_08005fac[0x10] | 0x10000000;\n    *DAT_08005fbc = *DAT_08005fbc | 0x100;\n    counter = FUN_08005a84();\n    while ((*DAT_08005fbc & 0x100) == 0) {\n      random_number = FUN_08005a84();\n      if (counter + 100U <= random_number) {\n        return 3;\n      }\n    }\n    *DAT_08005fc0 = 0;\n    counter = FUN_08005a84();\n    while ((DAT_08006180[0x1c] & 2) != 0) {\n      random_number = FUN_08005a84();\n      if (counter + 5000U <= random_number) {\n        return 3;\n      }\n    }\n    *DAT_08006184 = (char)parameters[2];\n    if (parameters[2] == 1) {\n      counter = FUN_08005a84();\n      while ((DAT_08006180[0x1c] & 2) == 0) {\n        random_number = FUN_08005a84();\n        if (counter + 5000U <= random_number) {\n          return 3;\n        }\n      }\n    }\n    else {\n      counter = FUN_08005a84();\n      while ((DAT_08006180[0x1c] & 2) != 0) {\n        random_number = FUN_08005a84();\n        if (counter + 5000U <= random_number) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (parameters[6] != 0) {\n    if ((DAT_08006180[2] & 0xc) == 8) {\n      return 1;\n    }\n    if (parameters[6] == 2) {\n      *DAT_08006188 = 0;\n      counter = FUN_08005a84();\n      while ((*DAT_08006180 & 0x2000000) != 0) {\n        random_number = FUN_08005a84();\n        if (counter + 100U <= random_number) {\n          return 3;\n        }\n      }\n      random_number = count_leading_zeroes(0x3fe0000);\n      shift_amount_1 = count_leading_zeroes(0xc000);\n      shift_amount_2 = count_leading_zeroes(0xf0);\n      DAT_08006180[1] =\n           parameters[0xb] << (shift_amount_2 & 0xff) |\n           parameters[8] | parameters[9] << (random_number & 0xff) | (parameters[10] >> 1) - 1 << (shift_amount_1 & 0xff) |\n           parameters[7] | 0x20000000;\n      *DAT_08006188 = 1;\n      counter = FUN_08005a84();\n      while ((*DAT_08006180 & 0x2000000) == 0) {\n        random_number = FUN_08005a84();\n        if (counter + 100U <= random_number) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08006188 = 0;\n      counter = FUN_08005a84();\n      while ((*DAT_08006180 & 0x2000000) != 0) {\n        random_number = FUN_08005a84();\n        if (counter + 100U <= random_number) {\n          return 3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_08005a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cec",
            "calling": [
                "FUN_08007436"
            ],
            "imported": false,
            "current_name": "check_parameters_08005cec"
        },
        "FUN_08006b00": {
            "renaming": {
                "FUN_08006b00": "write_data_08006b00",
                "param_1": "input",
                "param_2": "value",
                "DAT_08006b4c": "data_ptr_1",
                "DAT_08006b50": "data_ptr_2"
            },
            "code": "void write_data_08006b00(byte input, uint8_t value) {\n  if (input < 0) {\n    *(char *)((input & 0xf) + DAT_08006b4c + 0x14) = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)input + DAT_08006b50 + 0x300) = (char)((value & 0xff) << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b00",
            "calling": [
                "FUN_08006c9c",
                "FUN_08006cf6"
            ],
            "imported": false,
            "current_name": "write_data_08006b00"
        },
        "FUN_0800b4d0": {
            "renaming": {
                "FUN_0800b4d0": "checkIfDataExists_0800b4d0",
                "DAT_0800b4dc": "dataExists",
                "FUN_0800b524": "callFunctionWithParams",
                "PTR_LAB_0800b4f0_1_0800b4e0": "ptrLabel"
            },
            "code": "void checkIfDataExists_0800b4d0()\n{\n  if (DAT_0800b4dc != 0) {\n    callFunctionWithParams(0, PTR_LAB_0800b4f0_1_0800b4e0, 0);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_0800b524"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b4d0",
            "calling": [
                "FUN_0800b3e8"
            ],
            "imported": false,
            "current_name": "checkIfDataExists_0800b4d0"
        },
        "FUN_08007f54": {
            "renaming": {
                "FUN_08007f54": "calculate_hash_08007f54",
                "param_1": "data",
                "param_2": "size",
                "lVar1": "quotient",
                "iVar2": "quotient1",
                "iVar3": "quotient2",
                "uVar4": "random_value",
                "flag": "flag",
                "mask": "mask",
                "multiplier": "multiplier",
                "is_second_case": "is_second_case",
                "is_negative": "is_negative",
                "divisor": "divisor"
            },
            "code": "void calculate_hash_08007f54(int data, int size) {\n  long long quotient;\n  int quotient1;\n  int quotient2;\n  undefined8 random_value;\n  uint *flag = (uint *)(data + 8);\n  uint mask = ((uint)1 << 4) - 1;\n  uint multiplier = *(uint *)(data + 0xc);\n  bool is_second_case = (data == DAT_08008184) || (data == DAT_08008188);\n  bool is_negative = (multiplier & 0x8000) != 0;\n  uint divisor = is_negative ? size << 1 : size << 2;\n  random_value = is_second_case ? FUN_080066cc() : FUN_08006680();\n  quotient = (long long)DAT_0800818c * ((long long)(uint)((int)random_value * 0x19) / (long long)(uint)divisor);\n  quotient1 = is_second_case ? FUN_080066cc((int)random_value, (int)((unsigned long long)random_value >> 0x20), (int)quotient) : FUN_08006680((int)random_value, (int)((unsigned long long)random_value >> 0x20), (int)quotient);\n  quotient2 = is_second_case ? FUN_080066cc() : FUN_08006680();\n  *flag = ((uint)quotient >> 0x25) << 4 | ((uint)DAT_0800818c * (uint)((((uint)(quotient1 * 0x19) / divisor) + ((uint)DAT_0800818c * ((uint)(quotient2 * 0x19) / divisor) >> 0x25)) * -100 + 0x32) >> 0x25) & mask;\n}\n",
            "called": [
                "FUN_080066cc",
                "FUN_08006680"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f54",
            "calling": [
                "FUN_08008190"
            ],
            "imported": false,
            "current_name": "calculate_hash_08007f54"
        },
        "FUN_08003b98": {
            "renaming": {
                "FUN_08003b98": "process_input_08003b98",
                "param_1": "input",
                "bVar1": "first_byte",
                "iVar2": "result",
                "uVar3": "converted_value",
                "uVar4": "function_result",
                "uVar5": "hash_result",
                "local_14": "second_value",
                "local_10": "operator_index",
                "local_a": "index",
                "local_9": "second_input_flag"
            },
            "code": "uint process_input_08003b98(char *input) {\\n  byte first_char = input[0];\\n  if (first_char != \"$\") {\\n    uint result = process_non_special_input(input);\\n    return result;\\n  }\\n  byte second_char = input[1];\\n  if (second_char == 0) {\\n    handle_empty_input();\\n    return 0;\\n  }\\n  if ((second_char < 0x23) || (second_char > 0x58)) {\\n    return 1;\\n  }\\n  switch(second_char) {\\n    case 0x23:\\n      if (input[2] != \"\\0\") {\\n        return 2;\\n      }\\n      handle_special_input_case_23();\\n      break;\\n    case 0x24:\\n      if (input[2] != \"\\0\") {\\n        return 2;\\n      }\\n      handle_special_input_case_24();\\n      break;\\n    case 0x43:\\n      if (input[2] != \"\\0\") {\\n        return 2;\\n      }\\n      handle_special_input_case_43();\\n      break;\\n    case 0x47:\\n      if (input[2] != \"\\0\") {\\n        return 2;\\n      }\\n      handle_special_input_case_47();\\n      break;\\n    case 0x48:\\n      if ((PTR_DAT_08003f30[0x28] & 0x10) == 0) {\\n        return 3;\\n      }\\n      handle_special_input_case_48();\\n      break;\\n    case 0x4e:\\n      handle_special_input_case_4e(input);\\n      break;\\n    case 0x58:\\n      if (input[2] != \"\\0\") {\\n        return 2;\\n      }\\n      handle_special_input_case_58();\\n      break;\\n  }\\n  return 0;\\n}",
            "called": [
                "FUN_080046d0",
                "FUN_08008590",
                "FUN_08004bc0",
                "FUN_080039bc",
                "FUN_08008bf0",
                "FUN_0800423c",
                "FUN_08004030",
                "FUN_08009278",
                "FUN_08002638",
                "FUN_08004e30",
                "FUN_080025e8",
                "FUN_08004250",
                "FUN_08004d2c",
                "FUN_080005b4",
                "FUN_08009798",
                "FUN_080024c4",
                "FUN_080041a0",
                "FUN_08004900",
                "FUN_080044e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003b98",
            "calling": [
                "FUN_08003f34"
            ],
            "imported": false,
            "current_name": "process_input_08003b98"
        },
        "FUN_080024c4": {
            "renaming": {
                "FUN_080024c4": "initialize_080024c4",
                "PTR_DAT_080025d8": "data_array",
                "PTR_DAT_080025dc": "data_array_ptr",
                "FUN_08001d4c": "initialize_subsystem1",
                "FUN_08003a74": "initialize_subsystem2",
                "FUN_0800b430": "function1",
                "FUN_0800283a": "function2",
                "FUN_08008e44": "function3",
                "FUN_08008eec": "function4",
                "FUN_08001e98": "function5",
                "FUN_0800585c": "function6",
                "FUN_08002fd4": "function7"
            },
            "code": "void initialize_080024c4()\n{\n  int flag1;\n  int flag2;\n  int flag3;\n  char is_negative1;\n  char is_negative2;\n  char is_negative3;\n  \n  PTR_DAT_080025d8[1] = 5;\n  *(int *)PTR_DAT_080025dc = 0;\n  initialize_080024c4_subsystem1();\n  initialize_080024c4_subsystem2();\n  if (*PTR_DAT_080025d8 == '\\0') {\n    function1(PTR_DAT_080025dc,0,0xc);\n    function2();\n    PTR_DAT_080025d8[1] = 0;\n    if ((*(unsigned short *)(PTR_DAT_080025dc + 0x2a) & 0x20) == 0) {\n      is_negative1 = -1;\n    }\n    else {\n      is_negative1 = '\\x01';\n    }\n    if ((*(unsigned short *)(PTR_DAT_080025dc + 0x2a) & 0x80) == 0) {\n      is_negative2 = -1;\n    }\n    else {\n      is_negative2 = '\\x01';\n    }\n    if ((*(unsigned short *)(PTR_DAT_080025dc + 0x2a) & 0x200) == 0) {\n      is_negative3 = -1;\n    }\n    else {\n      is_negative3 = '\\x01';\n    }\n    flag1 = function3((int)is_negative1);\n    flag1 = function4(flag1,*(int *)(PTR_DAT_080025dc + 0x38));\n    flag2 = function3((int)is_negative2);\n    flag2 = function4(flag2,*(int *)(PTR_DAT_080025dc + 0x38));\n    flag3 = function3((int)is_negative3);\n    flag3 = function4(flag3,*(int *)(PTR_DAT_080025dc + 0x38));\n    function5(flag1,flag2,flag3,*(int *)(PTR_DAT_080025dc + 0x30),0);\n    function6();\n    function7();\n    function2();\n    if ((PTR_DAT_080025dc[0x28] & 8) != 0) {\n      *(int *)PTR_DAT_080025dc = 1;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002fd4",
                "FUN_08001d4c",
                "FUN_0800283a",
                "FUN_08008e44",
                "FUN_08001e98",
                "FUN_0800585c",
                "FUN_0800b430",
                "FUN_08008eec",
                "FUN_08003a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080024c4",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "initialize_080024c4"
        },
        "FUN_08002f40": {
            "renaming": {
                "FUN_08002f40": "check_and_update_value_08002f40",
                "*PTR_DAT_08002f6c": "*current_value_pointer",
                "*PTR_DAT_08002f70": "*expected_value_pointer",
                "uVar1": "updated_value",
                "FUN_08002870": "calculate_updated_value"
            },
            "code": "void check_and_update_value_08002f40(void)\n{\n  int current_value = *PTR_DAT_08002f6c;\n  int expected_value = *PTR_DAT_08002f70;\n  if (current_value != expected_value) {\n    int updated_value = calculate_updated_value(expected_value);\n    *PTR_DAT_08002f6c = updated_value;\n  }\n  return;\n}",
            "called": [
                "FUN_08002870"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f40",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "check_and_update_value_08002f40"
        },
        "FUN_08009054": {
            "renaming": {
                "FUN_08009054": "calculate_float_from_uints_08009054",
                "param_1": "uint_1",
                "param_2": "uint_2",
                "param_3": "undefined_4",
                "param_4": "uint_3",
                "uVar1": "temp_uint_1",
                "uVar2": "temp_uint_2",
                "uVar4": "temp_uint_3",
                "uVar6": "temp_uint_4",
                "iVar3": "temp_int_1",
                "iVar5": "temp_int_2",
                "bVar7": "temp_bool_1",
                "bVar8": "temp_bool_2",
                "bVar9": "temp_bool_3"
            },
            "code": "\nuint calculate_float_from_uints_08009054(uint uint_1,uint uint_2,undefined4 undefined_4,uint uint_3)\n\n{\n  uint temp_uint_1;\n  uint temp_uint_2;\n  int temp_int_1;\n  uint temp_uint_3;\n  int temp_int_2;\n  uint temp_uint_4;\n  bool temp_bool_1;\n  bool temp_bool_2;\n  bool temp_bool_3;\n  \n  temp_uint_2 = uint_1 >> 0x17 & 0xff;\n  temp_bool_1 = temp_uint_2 == 0;\n  if (!temp_bool_1) {\n    uint_3 = uint_2 >> 0x17 & 0xff;\n    temp_bool_1 = uint_3 == 0;\n  }\n  if (!temp_bool_1) {\n    temp_bool_1 = temp_uint_2 == 0xff;\n  }\n  if (!temp_bool_1) {\n    temp_bool_1 = uint_3 == 0xff;\n  }\n  if (temp_bool_1) {\n    uint_3 = uint_2 >> 0x17 & 0xff;\n    temp_uint_4 = uint_1;\n    if (temp_uint_2 == 0xff) {\n      if (((uint_1 & 0x7fffff) != 0) || (temp_uint_4 = uint_2, uint_3 == 0xff)) {\nLAB_0800904a:\n        return temp_uint_4 | 0x7fc00000;\n      }\n    }\n    else {\n      if (uint_3 == 0xff) {\n        temp_uint_4 = uint_2;\n        if ((uint_2 & 0x7fffff) == 0) {\nLAB_08009000:\n          return (uint_1 ^ uint_2) & 0x80000000;\n        }\n        goto LAB_0800904a;\n      }\n      temp_bool_1 = (uint_1 & 0x7fffffff) == 0;\n      if (!temp_bool_1) {\n        temp_bool_1 = (uint_2 & 0x7fffffff) == 0;\n      }\n      if (!temp_bool_1) {\n        temp_bool_1 = temp_uint_2 == 0;\n        temp_uint_4 = uint_1 & 0x80000000;\n        while( true ) {\n          if (temp_bool_1) {\n            uint_1 = uint_1 << 1;\n            temp_bool_1 = (uint_1 & 0x800000) == 0;\n          }\n          if (!temp_bool_1) break;\n          temp_uint_2 = temp_uint_2 - 1;\n        }\n        uint_1 = uint_1 | temp_uint_4;\n        temp_bool_1 = uint_3 == 0;\n        temp_uint_4 = uint_2 & 0x80000000;\n        while( true ) {\n          if (temp_bool_1) {\n            uint_2 = uint_2 << 1;\n            temp_bool_1 = (uint_2 & 0x800000) == 0;\n          }\n          if (!temp_bool_1) break;\n          uint_3 = uint_3 - 1;\n        }\n        uint_2 = uint_2 | temp_uint_4;\n        goto LAB_0800906c;\n      }\n      if ((uint_1 & 0x7fffffff) == 0) {\n        if ((uint_2 & 0x7fffffff) != 0) goto LAB_08009000;\n        goto LAB_0800904a;\n      }\n    }\n    uint_1 = uint_1 ^ uint_2;\n  }\n  else {\nLAB_0800906c:\n    temp_int_1 = temp_uint_2 - uint_3;\n    if (uint_2 << 9 == 0) {\n      uint_1 = (uint_1 ^ uint_2) & 0x80000000 | uint_1 & 0x7fffff;\n      temp_bool_3 = SCARRY4(temp_int_1,0x7f);\n      temp_int_2 = temp_int_1 + 0x7f;\n      temp_bool_1 = temp_int_2 < 0;\n      temp_bool_2 = temp_int_2 == 0;\n      if (!temp_bool_2 && temp_bool_1 == temp_bool_3) {\n        temp_bool_3 = SBORROW4(0xff,temp_int_2);\n        temp_bool_1 = 0xff - temp_int_2 < 0;\n        temp_bool_2 = temp_int_2 == 0xff;\n      }\n      if (!temp_bool_2 && temp_bool_1 == temp_bool_3) {\n        uint_1 = uint_1 | temp_int_2 * 0x800000;\n      }\n      if (!temp_bool_2 && temp_bool_1 == temp_bool_3) {\n        return uint_1;\n      }\n      uint_1 = uint_1 | 0x800000;\n      temp_uint_2 = 0;\n      temp_bool_2 = SBORROW4(temp_int_2,1);\n      temp_uint_3 = temp_int_1 + 0x7e;\n      temp_bool_1 = temp_uint_3 == 0;\n      temp_uint_4 = temp_uint_3;\n    }\n    else {\n      temp_uint_1 = (uint_2 << 9) >> 4 | 0x10000000;\n      temp_uint_2 = (uint_1 << 9) >> 4 | 0x10000000;\n      uint_1 = (uint_1 ^ uint_2) & 0x80000000;\n      temp_bool_1 = temp_uint_1 <= temp_uint_2;\n      if (!temp_bool_1) {\n        temp_uint_2 = temp_uint_2 << 1;\n      }\n      temp_uint_3 = temp_int_1 + 0x7d + (uint)temp_bool_1;\n      temp_uint_4 = 0x800000;\n      do {\n        if (temp_uint_1 <= temp_uint_2) {\n          temp_uint_2 = temp_uint_2 - temp_uint_1;\n          uint_1 = uint_1 | temp_uint_4;\n        }\n        temp_bool_1 = temp_uint_1 >> 1 <= temp_uint_2;\n        if (temp_bool_1) {\n          temp_uint_2 = temp_uint_2 - (temp_uint_1 >> 1);\n        }\n        if (temp_bool_1) {\n          uint_1 = uint_1 | temp_uint_4 >> 1;\n        }\n        temp_bool_1 = temp_uint_1 >> 2 <= temp_uint_2;\n        if (temp_bool_1) {\n          temp_uint_2 = temp_uint_2 - (temp_uint_1 >> 2);\n        }\n        if (temp_bool_1) {\n          uint_1 = uint_1 | temp_uint_4 >> 2;\n        }\n        temp_bool_1 = temp_uint_1 >> 3 <= temp_uint_2;\n        if (temp_bool_1) {\n          temp_uint_2 = temp_uint_2 - (temp_uint_1 >> 3);\n        }\n        if (temp_bool_1) {\n          uint_1 = uint_1 | temp_uint_4 >> 3;\n        }\n        temp_uint_2 = temp_uint_2 * 0x10;\n        temp_bool_1 = temp_uint_2 == 0;\n        if (!temp_bool_1) {\n          temp_uint_4 = temp_uint_4 >> 4;\n          temp_bool_1 = temp_uint_4 == 0;\n        }\n      } while (!temp_bool_1);\n      temp_bool_2 = SBORROW4(temp_uint_3,0xfd);\n      temp_bool_1 = temp_uint_3 == 0xfd;\n      temp_uint_4 = temp_uint_3 - 0xfd;\n      if (temp_uint_3 < 0xfe) {\n        uint_1 = uint_1 + temp_uint_3 * 0x800000 + (uint)(temp_uint_1 <= temp_uint_2);\n        if (temp_uint_2 - temp_uint_1 == 0) {\n          uint_1 = uint_1 & 0xfffffffe;\n        }\n        return uint_1;\n      }\n    }\n    if (temp_bool_1 || (int)temp_uint_4 < 0 != temp_bool_2) {\n      temp_bool_1 = (int)(temp_uint_3 + 0x19) < 0;\n      if (temp_uint_3 == 0xffffffe7 || temp_bool_1 != SCARRY4(temp_uint_3,0x19)) {\n        uint_1 = uint_1 & 0x80000000;\n      }\n      if (temp_uint_3 == 0xffffffe7 || temp_bool_1 != SCARRY4(temp_uint_3,0x19)) {\n        return uint_1;\n      }\n      temp_uint_4 = (uint_1 << 1) >> (-temp_uint_3 & 0xff);\n      temp_uint_3 = uint_1 << (temp_uint_3 + 0x20 & 0xff);\n      temp_uint_4 = ((uint)((uint_1 & 0x80000000) != 0) << 0x1f | temp_uint_4 >> 1) + (uint)((byte)temp_uint_4 & 1);\n      if ((temp_uint_2 | temp_uint_3 << 1) == 0) {\n        temp_uint_4 = temp_uint_4 & ~(temp_uint_3 >> 0x1f);\n      }\n      return temp_uint_4;\n    }\n  }\n  return uint_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009054",
            "calling": [
                "FUN_08004250",
                "FUN_08001994",
                "FUN_080004fc",
                "FUN_08004940",
                "FUN_08002908",
                "FUN_08002e08",
                "FUN_080028bc",
                "FUN_08003004",
                "FUN_08003618",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "calculate_float_from_uints_08009054"
        },
        "FUN_080025e8": {
            "renaming": {
                "FUN_080025e8": "set_flag_if_not_set_080025e8",
                "PTR_DAT_08002634": "PTR_FLAG_DATA",
                "FUN_08005250": "execute_first_function",
                "FUN_08000210": "execute_second_function",
                "FUN_080057e4": "execute_third_function"
            },
            "code": "void set_flag_if_not_set_080025e8()\n{\n  bool flag_not_set = ((PTR_DAT_08002634[2] & 0x10) == 0);\n  if (flag_not_set) {\n    PTR_DAT_08002634[2] |= 0x10;\n    execute_first_function();\n    execute_second_function();\n    bool is_third_byte_less_than_six = ((byte)PTR_DAT_08002634[1] - 3 < 3);\n    if (is_third_byte_less_than_six) {\n      PTR_DAT_08002634[2] |= 0x20;\n      execute_third_function();\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08005250",
                "FUN_080057e4",
                "FUN_08000210"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e8",
            "calling": [
                "FUN_08005900",
                "FUN_080005b4",
                "FUN_08003b98",
                "FUN_0800195c",
                "FUN_08003a18"
            ],
            "imported": false,
            "current_name": "set_flag_if_not_set_080025e8"
        },
        "FUN_080001c8": {
            "renaming": {
                "FUN_080001c8": "do_nothing_080001c8"
            },
            "code": "\nvoid do_nothing_080001c8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001c8",
            "calling": [
                "FUN_08000220"
            ],
            "imported": false,
            "current_name": "do_nothing_080001c8"
        },
        "FUN_08005250": {
            "renaming": {
                "FUN_08005250": "do_nothing_and_return_08005250",
                "do_nothing_08005214": "do_nothing"
            },
            "code": "void do_nothing_and_return_08005250(void)\n{\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08005214"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005250",
            "calling": [
                "FUN_080025e8",
                "FUN_0800525c",
                "FUN_08005238"
            ],
            "imported": false,
            "current_name": "do_nothing_and_return_08005250"
        },
        "FUN_08007430": {
            "renaming": {
                "FUN_08007430": "infinite_loop_08007430"
            },
            "code": "void infinite_loop_08007430() {\n  while (true) {\n    // Do nothing\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007430",
            "calling": [
                "FUN_08007436"
            ],
            "imported": false,
            "current_name": "infinite_loop_08007430"
        },
        "FUN_08008640": {
            "renaming": {
                "FUN_08008640": "calculate_double_precision_product_08008640",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "output_1",
                "param_4": "output_2",
                "uVar1": "product_low",
                "lVar2": "product_high",
                "uVar3": "temp_1",
                "uVar4": "exponent_1",
                "iVar5": "exponent_sum",
                "uVar6": "temp_2",
                "unaff_r5": "exponent_2",
                "uVar7": "mask",
                "uVar8": "temp_3",
                "bVar9": "flag_1",
                "bVar10": "flag_2",
                "bVar11": "flag_3",
                "uVar12": "product"
            },
            "code": "\nulonglong calculate_double_precision_product_08008640(undefined4 input_1,uint input_2,uint output_1,uint output_2)\n\n{\n  ulonglong product_low;\n  longlong product_high;\n  uint temp_1;\n  uint exponent_1;\n  int exponent_sum;\n  uint temp_2;\n  uint exponent_2;\n  uint mask;\n  uint temp_3;\n  bool flag_1;\n  bool flag_2;\n  bool flag_3;\n  ulonglong product;\n  \n  product = CONCAT44(input_2,input_1);\n  mask = 0x7ff;\n  exponent_1 = input_2 >> 0x14 & 0x7ff;\n  flag_1 = exponent_1 == 0;\n  if (!flag_1) {\n    exponent_2 = output_2 >> 0x14 & 0x7ff;\n    flag_1 = exponent_2 == 0;\n  }\n  if (!flag_1) {\n    flag_1 = exponent_1 == 0x7ff;\n  }\n  if (!flag_1) {\n    flag_1 = exponent_2 == 0x7ff;\n  }\n  if (flag_1) {\n    product = FUN_0800881c();\n  }\n  temp_1 = (uint)(product >> 0x20);\n  exponent_sum = exponent_1 + exponent_2;\n  exponent_1 = temp_1 ^ output_2;\n  temp_1 = temp_1 & ~(mask << 0x15);\n  output_2 = output_2 & ~(mask << 0x15);\n  flag_1 = ((uint)product | temp_1 << 0xc) == 0;\n  if (!flag_1) {\n    flag_1 = (output_1 | output_2 << 0xc) == 0;\n  }\n  temp_1 = temp_1 | 0x100000;\n  output_2 = output_2 | 0x100000;\n  if (flag_1) {\n    output_1 = (uint)product | output_1;\n    output_2 = (exponent_1 & 0x80000000 | temp_1) ^ output_2;\n    exponent_1 = mask >> 1;\n    flag_3 = SBORROW4(exponent_sum,exponent_1);\n    temp_2 = exponent_sum - exponent_1;\n    flag_1 = temp_2 == 0;\n    temp_1 = temp_2;\n    if (!flag_1 && (int)exponent_1 <= exponent_sum) {\n      flag_3 = SBORROW4(mask,temp_2);\n      temp_1 = mask - temp_2;\n      flag_1 = mask == temp_2;\n    }\n    if (!flag_1 && (int)temp_1 < 0 == flag_3) {\n      output_2 = output_2 | temp_2 * 0x100000;\n    }\n    if (!flag_1 && (int)temp_1 < 0 == flag_3) {\n      return CONCAT44(output_2,output_1);\n    }\n    output_2 = output_2 | 0x100000;\n    mask = 0;\n    flag_3 = SBORROW4(temp_2,1);\n    temp_2 = temp_2 - 1;\n    flag_1 = temp_2 == 0;\n    exponent_1 = temp_2;\n  }\n  else {\n    product_low = (product & 0xffffffff) * (ulonglong)output_1;\n    product = (product & 0xffffffff) * (ulonglong)output_2 +\n             (ulonglong)temp_1 * (ulonglong)output_1 + (product_low >> 0x20);\n    temp_3 = (uint)product;\n    product_high = (ulonglong)temp_1 * (ulonglong)output_2 + (product >> 0x20);\n    mask = (uint)product_high;\n    temp_1 = (uint)((ulonglong)product_high >> 0x20);\n    if ((int)product_low != 0) {\n      temp_3 = temp_3 | 1;\n    }\n    temp_2 = (exponent_sum + -0x3ff) - (uint)(temp_1 < 0x200);\n    if (temp_1 < 0x200) {\n      flag_1 = (temp_3 & 0x80000000) != 0;\n      temp_3 = temp_3 << 1;\n      product_high = CONCAT44(temp_1 * 2 + (uint)(CARRY4(mask,mask) || CARRY4(mask * 2,(uint)flag_1)),\n                       mask * 2 + (uint)flag_1);\n    }\n    output_2 = exponent_1 & 0x80000000 | (int)((ulonglong)product_high >> 0x20) << 0xb | (uint)product_high >> 0x15;\n    output_1 = (uint)product_high << 0xb | temp_3 >> 0x15;\n    mask = temp_3 * 0x800;\n    flag_2 = 0xfc < temp_2;\n    flag_3 = SBORROW4(temp_2,0xfd);\n    temp_1 = temp_2 - 0xfd;\n    flag_1 = temp_1 == 0;\n    exponent_1 = temp_1;\n    if (flag_2 && !flag_1) {\n      flag_2 = 0x6ff < temp_1;\n      flag_3 = SBORROW4(temp_1,0x700);\n      exponent_1 = temp_2 - 0x7fd;\n      flag_1 = temp_1 == 0x700;\n    }\n    if (!flag_2 || flag_1) {\n      flag_1 = 0x7fffffff < mask;\n      if (mask == 0x80000000) {\n        flag_1 = (temp_3 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(output_2 + temp_2 * 0x100000 + (uint)CARRY4(output_1,(uint)flag_1),output_1 + flag_1\n                     );\n    }\n  }\n  if (!flag_1 && (int)exponent_1 < 0 == flag_3) {\n    return (ulonglong)(output_2 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag_2 = SCARRY4(temp_2,0x36);\n  flag_1 = (int)(temp_2 + 0x36) < 0;\n  flag_3 = temp_2 == 0xffffffca;\n  if (flag_3 || flag_1 != flag_2) {\n    output_1 = 0;\n  }\n  if (flag_3 || flag_1 != flag_2) {\n    output_2 = output_2 & 0x80000000;\n  }\n  if (flag_3 || flag_1 != flag_2) {\n    return CONCAT44(output_2,output_1);\n  }\n  exponent_1 = -temp_2;\n  temp_1 = exponent_1 - 0x20;\n  if (0x1f < (int)exponent_1) {\n    temp_2 = output_1 >> (temp_1 & 0xff) | output_2 << (0x20 - temp_1 & 0xff);\n    exponent_1 = (output_2 >> (temp_1 & 0xff) & ~((output_2 & 0x80000000) >> (temp_1 & 0xff))) -\n            ((int)temp_2 >> 0x1f);\n    if ((mask | output_1 << (0x20 - temp_1 & 0xff) | temp_2 << 1) == 0) {\n      exponent_1 = exponent_1 & ~(temp_2 >> 0x1f);\n    }\n    return CONCAT44(output_2,exponent_1) & 0x80000000ffffffff;\n  }\n  exponent_sum = exponent_1 - 0x14;\n  if (exponent_sum == 0 || exponent_sum < 0 != SCARRY4(temp_1,0xc)) {\n    temp_3 = output_1 << (temp_2 + 0x20 & 0xff);\n    temp_1 = output_1 >> (exponent_1 & 0xff) | output_2 << (temp_2 + 0x20 & 0xff);\n    temp_2 = temp_1 + -((int)temp_3 >> 0x1f);\n    if ((mask | temp_3 << 1) == 0) {\n      temp_2 = temp_2 & ~(temp_3 >> 0x1f);\n    }\n    return CONCAT44((output_2 & 0x80000000) +\n                    ((output_2 & 0x7fffffff) >> (exponent_1 & 0xff)) +\n                    (uint)CARRY4(temp_1,-((int)temp_3 >> 0x1f)),temp_2);\n  }\n  exponent_1 = 0xc - exponent_sum;\n  temp_2 = output_1 << (exponent_1 & 0xff);\n  exponent_1 = output_1 >> (0x20 - exponent_1 & 0xff) | output_2 << (exponent_1 & 0xff);\n  temp_1 = exponent_1 + -((int)temp_2 >> 0x1f);\n  if ((mask | temp_2 << 1) == 0) {\n    temp_1 = temp_1 & ~(temp_2 >> 0x1f);\n  }\n  return CONCAT44((output_2 & 0x80000000) + (uint)CARRY4(exponent_1,-((int)temp_2 >> 0x1f)),temp_1);\n}\n\n",
            "called": [
                "FUN_0800881c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008640",
            "calling": [
                "FUN_080046d0",
                "FUN_08004940",
                "FUN_08003004",
                "FUN_08009d78",
                "FUN_0800056c",
                "FUN_0800af78",
                "FUN_08002638",
                "FUN_0800b2e8",
                "FUN_08001f00",
                "FUN_0800a5a0",
                "FUN_08002c18",
                "FUN_08001994",
                "FUN_0800adf0",
                "FUN_0800a1bc",
                "FUN_08009b24",
                "FUN_0800a348",
                "FUN_080044e8"
            ],
            "imported": false,
            "current_name": "calculate_double_precision_product_08008640"
        },
        "FUN_08007436": {
            "renaming": {
                "FUN_08007436": "initialize_and_set_flags_08007436",
                "local_4c": "flag1",
                "local_48": "flag2",
                "local_34": "flag3",
                "local_30": "flag4",
                "local_2c": "flag5",
                "local_28": "flag6",
                "local_24": "flag7",
                "local_20": "flag8",
                "local_1c": "flag9",
                "local_18": "flag10",
                "local_14": "flag11",
                "local_10": "flag12",
                "local_c": "flag13",
                "DAT_080074c0": "PTR_DAT_080074c0",
                "DAT_080074c4": "PTR_DAT_080074c4",
                "iVar1": "result"
            },
            "code": "void initialize_and_set_flags_08007436(void)\n{\n  int result;\n  uint32_t flag1 = 1;\n  uint32_t flag2 = 1;\n  uint32_t flag3 = 2;\n  uint32_t flag4 = 0x400000;\n  uint32_t flag5 = 8;\n  uint32_t flag6 = 0x150;\n  uint32_t flag7 = 2;\n  uint32_t flag8 = 7;\n  uint32_t flag9 = 0xf;\n  uint32_t flag10 = 2;\n  uint32_t flag11 = 0;\n  uint32_t flag12 = 0x1400;\n  uint32_t flag13 = 0x1000;\n\n  *(uint *)(DAT_080074c0 + 0x40) |= 0x10000000;\n  *DAT_080074c4 |= 0xc000;\n\n  result = FUN_08005cec(&flag1);\n  if (result != 0) {\n    FUN_08007430();\n  }\n\n  result = FUN_0800618c(&flag9,5);\n  if (result != 0) {\n    FUN_08007430();\n  }\n\n  return;\n}",
            "called": [
                "FUN_0800618c",
                "FUN_08005cec",
                "FUN_08007430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007436",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "initialize_and_set_flags_08007436"
        },
        "FUN_08005814": {
            "renaming": {
                "FUN_08005814": "initialize_data_08005814",
                "FUN_0800b430": "initialize_memory",
                "PTR_DAT_08005834": "PTR_DATA",
                "FUN_08005324": "set_mode",
                "PTR_DAT_08005838": "PTR_FLAG"
            },
            "code": "void initialize_data_08005814(void)\n{\n  initialize_memory(PTR_DAT_08005834, 0, 0x24);\n  set_mode(800);\n  *(undefined4 *)PTR_DAT_08005838 = 0;\n  return;\n}",
            "called": [
                "FUN_08005324",
                "FUN_0800b430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005814",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "initialize_data_08005814"
        },
        "FUN_08005bdc": {
            "renaming": {
                "FUN_08005bdc": "update_data_08005bdc",
                "param_1": "data_index",
                "param_2": "data_value",
                "DAT_08005c28": "data_array1",
                "DAT_08005c2c": "data_array2"
            },
            "code": "void update_data_08005bdc(byte data_index, uint data_value) {\n  if ((char)data_index < '\\0') {\n    *(char *)((data_index & 0xf) + DAT_08005c28 + 0x14) = (char)((data_value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)data_index + DAT_08005c2c + 0x300) = (char)((data_value & 0xff) << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bdc",
            "calling": [
                "FUN_08005c30"
            ],
            "imported": false,
            "current_name": "update_data_08005bdc"
        },
        "FUN_080002f0": {
            "renaming": {
                "FUN_080002f0": "set_data_and_flag_080002f0",
                "FUN_0800b430": "set_bytes_to_value",
                "PTR_DAT_08000308": "PTR_DATA_START",
                "PTR_DAT_0800030c": "PTR_FLAG"
            },
            "code": "void set_data_and_flag_080002f0(void)\n{\n  set_bytes_to_value(PTR_DAT_08000308, 0xff, 4);\n  *(unsigned int *)PTR_DAT_0800030c = 1;\n  return;\n}",
            "called": [
                "FUN_0800b430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002f0",
            "calling": [
                "FUN_08000374",
                "FUN_08000310",
                "FUN_08000340",
                "FUN_080003ec"
            ],
            "imported": false,
            "current_name": "set_data_and_flag_080002f0"
        },
        "FUN_080073c0": {
            "renaming": {
                "FUN_080073c0": "do_nothing_080073c0"
            },
            "code": "\nvoid do_nothing_080073c0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073c0",
            "calling": [
                "FUN_0800738e"
            ],
            "imported": false,
            "current_name": "do_nothing_080073c0"
        },
        "FUN_0800778c": {
            "renaming": {
                "FUN_0800778c": "process_data_0800778c",
                "local_24": "bit_position",
                "local_20": "mask_1",
                "local_1c": "mask_2",
                "local_18": "mask_3",
                "local_14": "mask_4",
                "local_10": "data_ptr",
                "local_c": "counter"
            },
            "code": "void process_data_0800778c(void)\n{\n    int bit_position;\n    uint mask_1;\n    uint mask_2;\n    uint mask_3;\n    uint mask_4;\n    uint mask_5;\n    uint *data_ptr;\n    uint counter;\n\n    for (counter = 0; counter < 0x11; counter++) {\n        data_ptr = (uint *)(PTR_DAT_0800784c + counter * 0x18);\n        *(uint *)(DAT_08007850 + 0x30) |= 1 << (*data_ptr >> 4 & 0xff);\n        bit_position = 1 << (*data_ptr & 0xf);\n        mask_2 = data_ptr[1];\n        mask_3 = data_ptr[2];\n        mask_4 = data_ptr[3];\n        mask_5 = data_ptr[4];\n        FUN_08006e88(((*data_ptr >> 4) + 0x100080) * 0x400, &bit_position);\n        if (-1 < (int)data_ptr[5]) {\n            FUN_0800733e(((*data_ptr >> 4) + 0x100080) * 0x400, 1 << (*data_ptr & 0xf) & 0xffff, data_ptr[5] & 0xff);\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_08006e88",
                "FUN_0800733e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800778c",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "process_data_0800778c"
        },
        "FUN_080001d4": {
            "renaming": {
                "FUN_080001d4": "do_nothing_080001d4"
            },
            "code": "\nvoid do_nothing_080001d4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001d4",
            "calling": [
                "FUN_08000210"
            ],
            "imported": false,
            "current_name": "do_nothing_080001d4"
        },
        "FUN_08001ddc": {
            "renaming": {
                "FUN_08001ddc": "game_loop_08001ddc",
                "FUN_080051b4": "initialize_game",
                "FUN_0800583c": "initialize_graphics",
                "FUN_0800b430": "initialize_sound",
                "*PTR_DAT_08001e90": "*PTR_GAME_STATE",
                "PTR_DAT_08001e90": "PTR_GAME_STATE",
                "PTR_DAT_08001e94": "PTR_GAME_DATA",
                "do_nothing_08008244": "do_nothing",
                "do_nothing_080082ba": "do_nothing",
                "FUN_08002f24": "update_game_state",
                "FUN_080004ac": "process_input",
                "FUN_080039a0": "update_physics",
                "FUN_08005238": "render_graphics",
                "FUN_080001f8": "play_sound",
                "FUN_0800192c": "update_score",
                "FUN_08005814": "update_ui",
                "FUN_0800283a": "check_game_over",
                "FUN_080041a0": "show_game_over_screen",
                "FUN_080039bc": "reset_game",
                "*PTR_DAT_08001e94": "*PTR_GAME_DATA"
            },
            "code": "void game_loop_08001ddc(void)\n{\n  do_nothing();\n  initialize_game();\n  initialize_graphics();\n  initialize_sound(PTR_SOUND_DATA, 0, 0x14);\n  *PTR_DAT_08001e90 = 1;\n  PTR_DAT_08001e90[1] = 1;\n  do {\n    if (*PTR_DAT_08001e90 != '\\0') {\n      do_nothing();\n      update_game_state();\n      process_input();\n      update_physics();\n      render_graphics();\n      play_sound();\n      update_score();\n      update_ui();\n      check_game_over();\n      *PTR_DAT_08001e90 = 0;\n      PTR_DAT_08001e90[2] = 0;\n      if ((PTR_DAT_08001e94[0x28] & 2) != 0) {\n        PTR_DAT_08001e90[0x10] = 1;\n      }\n      if ((PTR_DAT_08001e90[1] == '\\x01') && ((PTR_DAT_08001e94[0x28] & 0x10) != 0)) {\n        PTR_DAT_08001e90[1] = 6;\n      }\n      if (PTR_DAT_08001e90[1] == '\\x06') {\n        show_game_over_screen(2);\n      }\n      else {\n        PTR_DAT_08001e90[1] = 0;\n        reset_game();\n      }\n    }\n    update_timer();\n    update_network();\n  } while( true );\n}",
            "called": [
                "FUN_080039a0",
                "FUN_0800283a",
                "FUN_080039bc",
                "FUN_0800583c",
                "FUN_080001f8",
                "FUN_080004ac",
                "FUN_080051b4",
                "FUN_08005814",
                "FUN_0800b430",
                "FUN_08002f24",
                "FUN_080082ba",
                "FUN_08003a74",
                "FUN_08008244",
                "FUN_08003f34",
                "FUN_08005238",
                "FUN_0800192c",
                "FUN_080041a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ddc",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "game_loop_08001ddc"
        },
        "FUN_080069b4": {
            "renaming": {
                "FUN_080069b4": "set_bit_in_array_080069b4",
                "param_1": "bit_index",
                "DAT_080069e0": "array_start_ptr"
            },
            "code": "void set_bit_in_array_080069b4(uint8_t bit_index) {\n    uint32_t* array_ptr = (uint32_t*)(DAT_080069e0 + (bit_index >> 5) * 4);\n    uint32_t bit_mask = 1 << (bit_index & 0x1f);\n    *array_ptr = bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069b4",
            "calling": [
                "FUN_08006d2e"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_080069b4"
        },
        "FUN_08009228": {
            "renaming": {
                "FUN_08009228": "is_string_terminated_08009228",
                "in_CY": "current_char"
            },
            "code": "bool is_string_terminated_08009228(void)\n{\n  char current_char;\n  FUN_08009204();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_08009204"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009228",
            "calling": [
                "FUN_08002afc",
                "FUN_080005b4",
                "FUN_08003826",
                "FUN_080029d8",
                "FUN_08003004",
                "FUN_08004e30"
            ],
            "imported": false,
            "current_name": "is_string_terminated_08009228"
        },
        "FUN_08007c7c": {
            "renaming": {
                "FUN_08007c7c": "check_and_call_functions_08007c7c",
                "_DAT_40000010": "_data_register_1",
                "_DAT_4000000c": "_data_register_2",
                "FUN_08005778": "call_function_1",
                "FUN_08005760": "call_function_2",
                "FUN_080053a0": "call_function_3"
            },
            "code": "void check_and_call_functions_08007c7c(void)\n{\n  bool is_bit_2_set = (_DAT_40000010 & 2) != 0;\n  bool is_bit_4_set = (_DAT_40000010 & 4) != 0;\n  bool is_bit_1_set = (_DAT_40000010 & 1) != 0;\n  bool is_bit_2_cleared = (_DAT_4000000c & 2) == 0;\n  bool is_bit_4_cleared = (_DAT_4000000c & 4) == 0;\n  bool is_bit_1_cleared = (_DAT_4000000c & 1) == 0;\n\n  if (is_bit_2_set && !is_bit_2_cleared) {\n    _DAT_40000010 &= 0xfffffffd;\n    call_function_1();\n  }\n\n  if (is_bit_4_set && !is_bit_4_cleared) {\n    _DAT_40000010 &= 0xfffffffb;\n    call_function_2();\n  }\n\n  if (is_bit_1_set && !is_bit_1_cleared) {\n    _DAT_40000010 &= 0xfffffffe;\n    call_function_3();\n  }\n\n  return;\n}",
            "called": [
                "FUN_080053a0",
                "FUN_08005778",
                "FUN_08005760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007c7c",
            "calling": [],
            "imported": false,
            "current_name": "check_and_call_functions_08007c7c"
        },
        "FUN_08007b70": {
            "renaming": {
                "FUN_08007b70": "set_flags_based_on_global_variables_08007b70",
                "local_c": "flags",
                "_DAT_40000034": "global_variable_1",
                "_DAT_40000038": "global_variable_2",
                "_DAT_4000000c": "global_variable_3",
                "_DAT_40000000": "global_variable_4"
            },
            "code": "void set_flags_based_on_global_variables_08007b70(void)\n{\n  uint8_t flags = 1;\n  if (_DAT_40000034 != 0) {\n    flags |= 0x03;\n  }\n  if (_DAT_40000038 != 0) {\n    flags |= 0x04;\n  }\n  _DAT_4000000c |= flags;\n  _DAT_40000000 |= 0x01;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007b70",
            "calling": [
                "FUN_08005790"
            ],
            "imported": false,
            "current_name": "set_flags_based_on_global_variables_08007b70"
        },
        "FUN_08004d2c": {
            "renaming": {
                "FUN_08004d2c": "check_param_08004d2c",
                "param_1": "input_byte",
                "param_2": "output_ptr",
                "iVar1": "result",
                "*param_2": "*output_ptr"
            },
            "code": "bool check_param_08004d2c(byte input_byte, undefined *output_ptr)\n{\n    int result = FUN_080003ec(output_ptr, (ushort)input_byte * 0x101 + 0x300, 0x100);\n    if (result == 0)\n    {\n        *output_ptr = 0;\n        FUN_08004bc0(input_byte, output_ptr);\n    }\n    return result != 0;\n}",
            "called": [
                "FUN_08004bc0",
                "FUN_080003ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d2c",
            "calling": [
                "FUN_080039bc",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "check_param_08004d2c"
        },
        "FUN_08003004": {
            "renaming": {
                "FUN_08003004": "calculate_quality_score_08003004",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "flag",
                "puVar1": "ptr",
                "uVar2": "result",
                "uVar3": "temp_1",
                "iVar4": "score_1",
                "iVar5": "score_2",
                "iVar6": "score_3",
                "uVar7": "temp_2",
                "uVar8": "temp_3",
                "uVar9": "temp_4",
                "uVar10": "temp_5",
                "uVar11": "max_score",
                "puVar12": "quality_score",
                "iVar13": "difference",
                "uVar14": "temp_6",
                "uVar15": "temp_7",
                "uVar16": "temp_8",
                "uVar17": "temp_9",
                "local_20": "temp_10",
                "local_1c": "temp_11"
            },
            "code": "\nvoid calculate_quality_score_08003004(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4,\n                 char flag)\n\n{\n  undefined *ptr;\n  undefined result;\n  undefined4 temp_1;\n  int score_1;\n  int score_2;\n  int score_3;\n  undefined4 temp_2;\n  undefined4 temp_3;\n  undefined4 temp_4;\n  undefined4 temp_5;\n  uint max_score;\n  ushort *quality_score;\n  int difference;\n  uint temp_6;\n  undefined8 temp_7;\n  undefined8 temp_8;\n  undefined8 temp_9;\n  undefined4 temp_10;\n  undefined4 temp_11;\n  \n  quality_score = (ushort *)(PTR_DAT_08003234 + (uint)(byte)*PTR_DAT_08003230 * 0x40);\n  temp_1 = FUN_08008eec(*(undefined4 *)PTR_DAT_08003238,input_1);\n  temp_7 = FUN_08008590(temp_1);\n  score_1 = FUN_080095b8((int)temp_7,(int)((ulonglong)temp_7 >> 0x20));\n  temp_1 = FUN_08008eec(*(undefined4 *)(PTR_DAT_08003238 + 4),input_2);\n  temp_7 = FUN_08008590(temp_1);\n  score_2 = FUN_080095b8((int)temp_7,(int)((ulonglong)temp_7 >> 0x20));\n  temp_1 = FUN_08008eec(*(undefined4 *)(PTR_DAT_08003238 + 8),input_3);\n  temp_7 = FUN_08008590(temp_1);\n  score_3 = FUN_080095b8((int)temp_7,(int)((ulonglong)temp_7 >> 0x20));\n  *quality_score = 0;\n  if (score_1 < *(int *)PTR_DAT_0800323c) {\n    *quality_score = *quality_score | 0x20;\n  }\n  if (score_2 < *(int *)(PTR_DAT_0800323c + 4)) {\n    *quality_score = *quality_score | 0x880;\n  }\n  if (score_3 < *(int *)(PTR_DAT_0800323c + 8)) {\n    *quality_score = *quality_score | 0x200;\n  }\n  difference = score_1 - *(int *)PTR_DAT_0800323c;\n  if (difference < 0) {\n    difference = -difference;\n  }\n  *(int *)(quality_score + 2) = difference;\n  difference = score_2 - *(int *)(PTR_DAT_0800323c + 4);\n  if (difference < 0) {\n    difference = -difference;\n  }\n  *(int *)(quality_score + 4) = difference;\n  difference = score_3 - *(int *)(PTR_DAT_0800323c + 8);\n  if (difference < 0) {\n    difference = -difference;\n  }\n  *(int *)(quality_score + 6) = difference;\n  max_score = *(uint *)(quality_score + 6);\n  if (*(uint *)(quality_score + 6) < *(uint *)(quality_score + 4)) {\n    max_score = *(uint *)(quality_score + 4);\n  }\n  temp_6 = *(uint *)(quality_score + 2);\n  if (*(uint *)(quality_score + 2) < max_score) {\n    temp_6 = max_score;\n  }\n  *(uint *)(quality_score + 8) = temp_6;\n  if (*(int *)(quality_score + 8) != 0) {\n    temp_1 = FUN_08008e44(score_1 - *(int *)PTR_DAT_0800323c);\n    temp_1 = FUN_08009054(temp_1,*(undefined4 *)PTR_DAT_08003238);\n    temp_2 = FUN_08008e44(score_2 - *(int *)(PTR_DAT_0800323c + 4));\n    temp_2 = FUN_08009054(temp_2,*(undefined4 *)(PTR_DAT_08003238 + 4));\n    temp_3 = FUN_08008e44(score_3 - *(int *)(PTR_DAT_0800323c + 8));\n    temp_3 = FUN_08009054(temp_3,*(undefined4 *)(PTR_DAT_08003238 + 8));\n    temp_4 = FUN_08008eec(temp_1,temp_1);\n    temp_5 = FUN_08008eec(temp_2,temp_2);\n    temp_4 = FUN_08008cdc(temp_4,temp_5);\n    temp_5 = FUN_08008eec(temp_3,temp_3);\n    temp_4 = FUN_08008cdc(temp_4,temp_5);\n    temp_7 = FUN_08008590(temp_4);\n    temp_7 = FUN_080098d0((int)temp_7,(int)((ulonglong)temp_7 >> 0x20));\n    temp_4 = FUN_08008c30((int)temp_7,(int)((ulonglong)temp_7 >> 0x20));\n    *(undefined4 *)(quality_score + 0x10) = temp_4;\n    temp_4 = FUN_08009054(0x3f800000,*(undefined4 *)(quality_score + 0x10));\n    if (flag == '\\0') {\n      temp_11 = FUN_08008eec(input_4,temp_4);\n    }\n    else {\n      temp_11 = FUN_08009054(0x3f800000,input_4);\n    }\n    temp_5 = FUN_08008eec(*(undefined4 *)(quality_score + 0x10),temp_11);\n    *(undefined4 *)(quality_score + 10) = temp_5;\n    temp_5 = FUN_08008e44(*(undefined4 *)(quality_score + 8));\n    temp_5 = FUN_08008eec(temp_5,temp_11);\n    temp_7 = FUN_08008590(temp_5);\n    temp_7 = FUN_08009318((int)temp_7,(int)((ulonglong)temp_7 >> 0x20));\n    temp_5 = FUN_08008bf0((int)temp_7,(int)((ulonglong)temp_7 >> 0x20));\n    *(undefined4 *)(quality_score + 0x1e) = temp_5;\n    temp_5 = FUN_08008e44(*(undefined4 *)(quality_score + 8));\n    temp_5 = FUN_08008eec(temp_5,temp_4);\n    temp_5 = FUN_08008eec(temp_5,*(undefined4 *)(PTR_DAT_08003560 + 0x20));\n    temp_5 = FUN_08009054(temp_5,DAT_08003564);\n    temp_7 = FUN_08008590(temp_5);\n    temp_7 = FUN_08009318((int)temp_7,(int)((ulonglong)temp_7 >> 0x20));\n    temp_5 = FUN_08008ba0((int)temp_7,(int)((ulonglong)temp_7 >> 0x20));\n    *(undefined4 *)(quality_score + 0x18) = temp_5;\n    temp_1 = FUN_08008eec(temp_1,temp_4);\n    temp_2 = FUN_08008eec(temp_2,temp_4);\n    temp_3 = FUN_08008eec(temp_3,temp_4);\n    temp_10 = 0;\n    if ((*PTR_DAT_08003568 != *PTR_DAT_0800356c) &&\n       (difference = FUN_08009264(*(undefined4 *)(PTR_DAT_08003570 + 0x18),0), difference != 0)) {\n      temp_4 = FUN_08008eec(*(uint *)(PTR_DAT_08003570 + 0xc) ^ 0x80000000,temp_1);\n      temp_5 = FUN_08008eec(*(undefined4 *)(PTR_DAT_08003570 + 0x10),temp_2);\n      temp_4 = FUN_08008cd8(temp_4,temp_5);\n      temp_5 = FUN_08008eec(*(undefined4 *)(PTR_DAT_08003570 + 0x14),temp_3);\n      temp_4 = FUN_08008cd8(temp_4,temp_5);\n      temp_7 = FUN_08008590(temp_4);\n      difference = FUN_08008b24((int)temp_7,(int)((ulonglong)temp_7 >> 0x20),DAT_08003550,DAT_08003554);\n      if (difference != 0) {\n        difference = FUN_08009228(*(undefined4 *)(PTR_DAT_08003570 + 0x18),*(undefined4 *)(quality_score + 10)\n                             );\n        if (difference == 0) {\n          temp_10 = *(undefined4 *)(quality_score + 10);\n        }\n        else {\n          temp_10 = *(undefined4 *)(PTR_DAT_08003570 + 0x18);\n        }\n        temp_7 = FUN_08008590(temp_4);\n        difference = FUN_08008b60((int)temp_7,(int)((ulonglong)temp_7 >> 0x20),DAT_08003558,DAT_0800355c\n                             );\n        if (difference != 0) {\n          temp_7 = FUN_08008590(temp_4);\n          temp_7 = FUN_080082d0(0,DAT_08003574,(int)temp_7,(int)((ulonglong)temp_7 >> 0x20));\n          temp_7 = FUN_08008640((int)temp_7,(int)((ulonglong)temp_7 >> 0x20),0,DAT_08003578);\n          temp_7 = FUN_080098d0((int)temp_7,(int)((ulonglong)temp_7 >> 0x20));\n          temp_4 = FUN_08008c30((int)temp_7,(int)((ulonglong)temp_7 >> 0x20));\n          temp_7 = FUN_08008590(temp_10);\n          temp_5 = FUN_08008eec(*(undefined4 *)(PTR_DAT_08003560 + 0x20),\n                                *(undefined4 *)(PTR_DAT_08003560 + 0x24));\n          temp_5 = FUN_08008eec(temp_5,temp_4);\n          temp_8 = FUN_08008590(temp_5);\n          temp_9 = FUN_08008590(temp_4);\n          temp_9 = FUN_080082d0(0,DAT_08003574,(int)temp_9,(int)((ulonglong)temp_9 >> 0x20));\n          temp_8 = FUN_08008894((int)temp_8,(int)((ulonglong)temp_8 >> 0x20),(int)temp_9,\n                                (int)((ulonglong)temp_9 >> 0x20));\n          temp_8 = FUN_080098d0((int)temp_8,(int)((ulonglong)temp_8 >> 0x20));\n          difference = FUN_08008b24((int)temp_7,(int)((ulonglong)temp_7 >> 0x20),(int)temp_8,\n                                (int)((ulonglong)temp_8 >> 0x20));\n          if (difference == 0) {\n            temp_5 = FUN_08008eec(*(undefined4 *)(PTR_DAT_08003560 + 0x20),\n                                  *(undefined4 *)(PTR_DAT_08003560 + 0x24));\n            temp_5 = FUN_08008eec(temp_5,temp_4);\n            temp_7 = FUN_08008590(temp_5);\n            temp_8 = FUN_08008590(temp_4);\n            temp_8 = FUN_080082d0(0,DAT_08003574,(int)temp_8,(int)((ulonglong)temp_8 >> 0x20));\n            temp_7 = FUN_08008894((int)temp_7,(int)((ulonglong)temp_7 >> 0x20),(int)temp_8,\n                                  (int)((ulonglong)temp_8 >> 0x20));\n            temp_7 = FUN_080098d0((int)temp_7,(int)((ulonglong)temp_7 >> 0x20));\n            temp_10 = FUN_08008c30((int)temp_7,(int)((ulonglong)temp_7 >> 0x20));\n          }\n        }\n      }\n    }\n    *(undefined4 *)(quality_score + 0xe) = temp_10;\n    temp_5 = FUN_08002978(*(uint *)(PTR_DAT_08003560 + 0x20) ^ 0x80000000,0,\n                          *(undefined4 *)(quality_score + 0x10));\n    difference = FUN_08009228(temp_10,temp_5);\n    temp_4 = temp_5;\n    if (difference != 0) {\n      temp_4 = temp_10;\n    }\n    *(undefined4 *)(quality_score + 0xc) = temp_4;\n    difference = FUN_08009250(temp_5,*(undefined4 *)(quality_score + 10));\n    if (difference == 0) {\n      *(undefined *)((int)quality_score + 0x25) = 0;\n    }\n    else {\n      *(undefined *)((int)quality_score + 0x25) = 1;\n    }\n    *(undefined *)(quality_score + 0x12) = 1;\n    ptr = PTR_DAT_080035e0;\n    *(undefined4 *)(PTR_DAT_080035e0 + 0xc) = temp_1;\n    *(undefined4 *)(ptr + 0x10) = temp_2;\n    *(undefined4 *)(ptr + 0x14) = temp_3;\n    *(undefined4 *)(PTR_DAT_080035e0 + 0x18) = *(undefined4 *)(quality_score + 10);\n    *PTR_DAT_080035e8 = *PTR_DAT_080035e4;\n    result = FUN_08002870(*PTR_DAT_080035e8);\n    *PTR_DAT_080035e4 = result;\n    ptr = PTR_DAT_080035e0;\n    *(int *)PTR_DAT_080035e0 = score_1;\n    *(int *)(ptr + 4) = score_2;\n    *(int *)(ptr + 8) = score_3;\n    FUN_08002edc();\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08009318",
                "FUN_08009250",
                "FUN_080098d0",
                "FUN_08008590",
                "FUN_08008b60",
                "FUN_08008640",
                "FUN_08008b24",
                "FUN_08008bf0",
                "FUN_08009264",
                "FUN_08009228",
                "FUN_08002870",
                "FUN_08002978",
                "FUN_08008cdc",
                "FUN_08002edc",
                "FUN_080082d0",
                "FUN_08008c30",
                "FUN_08008e44",
                "FUN_08008ba0",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_08008894",
                "FUN_080095b8",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003004",
            "calling": [
                "FUN_08001e98"
            ],
            "imported": false,
            "current_name": "calculate_quality_score_08003004"
        },
        "FUN_080066cc": {
            "renaming": {
                "FUN_080066cc": "count_leading_zeroes_and_shift_080066cc",
                "uVar1": "function_result",
                "uVar2": "leading_zeroes_count",
                "PTR_DAT_08006714": "pointer_dat_08006714",
                "DAT_08006710": "dat_08006710"
            },
            "code": "uint count_leading_zeroes_and_shift_080066cc(uint input_value) {\n    uint function_result = FUN_08006628();\n    uint leading_zeroes_count = count_leading_zeroes(0x70000);\n    uint shifted_value = (*(uint *)(DAT_08006710 + 8) & 0xe000) >> (leading_zeroes_count & 0xff);\n    uint final_result = function_result >> PTR_DAT_08006714[shifted_value];\n    return final_result;\n}",
            "called": [
                "FUN_08006628"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080066cc",
            "calling": [
                "FUN_08007f54"
            ],
            "imported": false,
            "current_name": "count_leading_zeroes_and_shift_080066cc"
        },
        "FUN_080018fc": {
            "renaming": {
                "FUN_080018fc": "set_param_080018fc",
                "param_1": "new_param",
                "PTR_08001928": "ptr",
                "DAT_08001928": "ptr_offset"
            },
            "code": "void set_param_080018fc(uint new_param){\n    uint* PTR_08001928 = (uint*)(DAT_08001928 + 0x14);\n    uint mask = 0xfffff55f;\n    *PTR_08001928 = new_param | (*PTR_08001928 & mask);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018fc",
            "calling": [
                "FUN_08001994"
            ],
            "imported": false,
            "current_name": "set_param_080018fc"
        },
        "FUN_080039bc": {
            "renaming": {
                "FUN_080039bc": "check_data_080039bc",
                "iVar1": "result",
                "uVar2": "data_value",
                "local_9": "data_index",
                "FUN_08004d2c": "check_data_validity",
                "PTR_DAT_08003a14": "data_pointer",
                "FUN_08004030": "print_error_message",
                "FUN_0800369c": "print_data",
                "FUN_080005b4": "calculate_data_value"
            },
            "code": "void check_data_080039bc(void)\n{\n  int result;\n  char data_index;\n  for (data_index = 0; data_index < 2; data_index++) {\n    result = check_data_080039bc_validity(data_index, PTR_DAT_08003a14);\n    if (result == 0) {\n      print_error_message(10);\n    }\n    else if (*PTR_DAT_08003a14 != '\\0') {\n      print_data(PTR_DAT_08003a14);\n      int data_value = calculate_data_value(PTR_DAT_08003a14);\n      print_data_value(data_value);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08004d2c",
                "FUN_0800369c",
                "FUN_080005b4",
                "FUN_08004030"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080039bc",
            "calling": [
                "FUN_08001ddc",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "check_data_080039bc"
        },
        "FUN_0800618c": {
            "renaming": {
                "FUN_0800618c": "validate_input_0800618c",
                "param_1": "input",
                "param_2": "size",
                "lVar1": "result",
                "iVar2": "i",
                "uVar3": "delay",
                "uVar4": "expected_flag",
                "uVar5": "random_value",
                "*DAT_08006400": "data",
                "*DAT_08006404": "flag",
                "DAT_08006408": "multiplier"
            },
            "code": "uint32_t validate_input_0800618c(uint32_t *input, uint32_t size) {\n    uint32_t **DAT_08006400 = DAT_08006400;\n    uint32_t **DAT_08006404 = DAT_08006404;\n    uint32_t i, delay, expected_*DAT_08006404;\n    if ((**DAT_08006400 & 0xf) < size) {\n        **DAT_08006400 = (**DAT_08006400 & 0xfffffff0) | size;\n        if (size != (**DAT_08006400 & 0xf)) {\n            return 1;\n        }\n        if ((*input & 1) != 0) {\n            if (input[1] == 1) {\n                expected_*DAT_08006404 = 0x20000;\n            } else if (input[1] == 2) {\n                expected_*DAT_08006404 = 0x2000000;\n            } else {\n                expected_*DAT_08006404 = 2;\n            }\n            if ((**DAT_08006404 & expected_*DAT_08006404) == 0) {\n                return 1;\n            }\n            *DAT_08006404[2] = input[1] | (*DAT_08006404[2] & 0xfffffffc);\n            delay = FUN_08005a84() + 5000;\n            if (input[1] == 1) {\n                while((*DAT_08006404[2] & 0xc) != 4) {\n                    i = FUN_08005a84();\n                    if (delay <= i) {\n                        return 3;\n                    }\n                }\n            } else if (input[1] == 2) {\n                while((*DAT_08006404[2] & 0xc) != 8) {\n                    i = FUN_08005a84();\n                    if (delay <= i) {\n                        return 3;\n                    }\n                }\n            } else {\n                while((*DAT_08006404[2] & 0xc) != 0) {\n                    i = FUN_08005a84();\n                    if (delay <= i) {\n                        return 3;\n                    }\n                }\n            }\n        }\n    } else {\n        if ((*input & 1) != 0) {\n            if (input[1] == 1) {\n                expected_*DAT_08006404 = 0x20000;\n            } else if (input[1] == 2) {\n                expected_*DAT_08006404 = 0x2000000;\n            } else {\n                expected_*DAT_08006404 = 2;\n            }\n            if ((**DAT_08006404 & expected_*DAT_08006404) == 0) {\n                return 1;\n            }\n            *DAT_08006404[2] = input[1] | (*DAT_08006404[2] & 0xfffffffc);\n            delay = FUN_08005a84() + 5000;\n            if (input[1] == 1) {\n                while((*DAT_08006404[2] & 0xc) != 4) {\n                    i = FUN_08005a84();\n                    if (delay <= i) {\n                        return 3;\n                    }\n                }\n            } else if (input[1] == 2) {\n                while((*DAT_08006404[2] & 0xc) != 8) {\n                    i = FUN_08005a84();\n                    if (delay <= i) {\n                        return 3;\n                    }\n                }\n            } else {\n                while((*DAT_08006404[2] & 0xc) != 0) {\n                    i = FUN_08005a84();\n                    if (delay <= i) {\n                        return 3;\n                    }\n                }\n            }\n        }\n        **DAT_08006400 = (**DAT_08006400 & 0xfffffff0) | size;\n        if (size != (**DAT_08006400 & 0xf)) {\n            return 1;\n        }\n    }\n    if ((*input & 2) != 0) {\n        *DAT_08006404[2] = input[2] | (*DAT_08006404[2] & 0xffffff0f);\n    }\n    if ((*input & 4) != 0) {\n        *DAT_08006404[2] = input[3] | (*DAT_08006404[2] & 0xffffe3ff);\n    }\n    if ((*input & 8) != 0) {\n        *DAT_08006404[2] = (input[4] << 3) | (*DAT_08006404[2] & 0xffff1fff);\n    }\n    uint32_t result = FUN_08006628() * DAT_08006408;\n    FUN_08005c30((result >> 0x26), (uint32_t)(result >> 0x20), (uint32_t)result);\n    return 0;\n}",
            "called": [
                "FUN_08005c30",
                "FUN_08006628",
                "FUN_08005a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800618c",
            "calling": [
                "FUN_08007436"
            ],
            "imported": false,
            "current_name": "validate_input_0800618c"
        },
        "FUN_08006998": {
            "renaming": {
                "FUN_08006998": "get_data_from_pointer_08006998",
                "DAT_080069b0": "PTR_data"
            },
            "code": "uint get_data_from_pointer_08006998(void)\n{\n  uint data = *(uint *)(DAT_080069b0 + 0xc);\n  uint shifted_data = data >> 8;\n  uint masked_data = shifted_data & 7;\n  return masked_data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006998",
            "calling": [
                "FUN_08006cf6",
                "FUN_08006d8a"
            ],
            "imported": false,
            "current_name": "get_data_from_pointer_08006998"
        },
        "FUN_080004ac": {
            "renaming": {
                "FUN_080004ac": "initialize_data_and_check_if_valid_080004ac",
                "PTR_DAT_080004f0": "PTR_DATA_START",
                "PTR_DAT_080004f4": "PTR_DATA_MIDDLE",
                "PTR_DAT_080004f8": "PTR_DATA_END",
                "initialize_data": "initialize_data",
                "set_configuration": "set_configuration",
                "check_if_valid": "check_if_valid",
                "print_error": "print_error"
            },
            "code": "void initialize_data_and_check_if_valid_080004ac()\n{\n  int result;\n  \n  initialize_data(PTR_DAT_080004f0, 0, 0x38);\n  *(undefined4 *)(PTR_DAT_080004f0 + 8) = *(undefined4 *)(PTR_DAT_080004f4 + 0x10);\n  set_configuration(0, 1, 2);\n  PTR_DAT_080004f0[4] = 1;\n  result = check_if_valid(PTR_DAT_080004f0[0x1c], PTR_DAT_080004f8);\n  if (result == 0) {\n    print_error(10);\n  }\n  return;\n}\n",
            "called": [
                "FUN_08000478",
                "FUN_08004d7c",
                "FUN_0800b430",
                "FUN_08004030"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004ac",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "initialize_data_and_check_if_valid_080004ac"
        },
        "FUN_080078f4": {
            "renaming": {
                "FUN_080078f4": "sum_of_four_values_080078f4",
                "local_10": "index",
                "local_c": "sum"
            },
            "code": "uint sum_of_four_values_080078f4(void)\n{\n  int index;\n  uint sum = 0;\n  for (index = 0; index < 4; index++) {\n    sum |= *(uint *)(PTR_DAT_0800792c + index * 4);\n  }\n  return sum;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078f4",
            "calling": [
                "FUN_08001994",
                "FUN_08007930"
            ],
            "imported": false,
            "current_name": "sum_of_four_values_080078f4"
        },
        "FUN_080041a0": {
            "renaming": {
                "FUN_080041a0": "display_message_080041a0",
                "param_1": "message",
                "FUN_080036c6": "display",
                "PTR_DAT_0800420c": "PTR_message_header",
                "PTR_s_Reset_to_continue_08004210": "PTR_reset_prompt",
                "PTR_s___H____X__to_unlock_08004214": "PTR_unlock_prompt",
                "PTR_s_Caution__Unlocked_08004218": "PTR_unlocked_caution",
                "PTR_s_Enabled_0800421c": "PTR_enabled",
                "PTR_s_Disabled_08004220": "PTR_disabled",
                "PTR_DAT_08004224": "PTR_message_footer"
            },
            "code": "void display_message_080041a0(undefined message)\n{\n    display(PTR_DAT_0800420c);\n    switch(message) {\n        case 1:\n            display(PTR_s_Reset_to_continue_08004210);\n            break;\n        case 2:\n            display(PTR_s___H____X__to_unlock_08004214);\n            break;\n        case 3:\n            display(PTR_s_Caution__Unlocked_08004218);\n            break;\n        case 4:\n            display(PTR_s_Enabled_0800421c);\n            break;\n        case 5:\n            display(PTR_s_Disabled_08004220);\n            break;\n    }\n    display(PTR_DAT_08004224);\n    return;\n}",
            "called": [
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041a0",
            "calling": [
                "FUN_08001ddc",
                "FUN_08003b98",
                "FUN_08003a74"
            ],
            "imported": false,
            "current_name": "display_message_080041a0"
        },
        "FUN_08008bf0": {
            "renaming": {
                "FUN_08008bf0": "calculate_shift_amount_08008bf0",
                "param_1": "dividend",
                "param_2": "divisor",
                "iVar1": "intermediate_value",
                "uVar2": "quotient"
            },
            "code": "uint calculate_shift_amount_08008bf0(uint dividend, uint divisor)\n{\n  int intermediate_value;\n  uint quotient;\n\n  if ((divisor & 0x80000000) != 0) {\n    return 0;\n  }\n  intermediate_value = divisor * 2 + 0x200000;\n  if (divisor * 2 < 0xffe00000) {\n    if (-1 < intermediate_value) {\n      return 0;\n    }\n    quotient = -(intermediate_value >> 0x15) - 0x3e1;\n    if (-1 < (int)quotient) {\n      return (divisor << 0xb | 0x80000000 | dividend >> 0x15) >> (quotient & 0xff);\n    }\n  }\n  else if ((dividend | divisor << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008bf0",
            "calling": [
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08003004",
                "FUN_08004e30",
                "FUN_08002408",
                "FUN_08001f00",
                "FUN_08003b98",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_shift_amount_08008bf0"
        },
        "FUN_08003a18": {
            "renaming": {
                "FUN_08003a18": "check_flags_08003a18",
                "param_1": "flag"
            },
            "code": "void check_flags_08003a18(uint8_t flag)\n{\n    if ((flag & 0x80) == 0)\n    {\n        if ((flag & 0x40) == 0)\n        {\n            if ((flag & 0x20) != 0)\n            {\n                PTR_DAT_08003a70[2] |= 2;\n            }\n        }\n        else\n        {\n            PTR_DAT_08003a70[2] |= 8;\n        }\n    }\n    else\n    {\n        FUN_080025e8();\n    }\n    return;\n}",
            "called": [
                "FUN_080025e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a18",
            "calling": [
                "FUN_080074c8"
            ],
            "imported": false,
            "current_name": "check_flags_08003a18"
        },
        "FUN_08005790": {
            "renaming": {
                "FUN_08005790": "do_nothing_and_check_08005790",
                "PTR_DAT_080057d4": "data_pointer",
                "PTR_DAT_080057dc": "data_pointer_2",
                "PTR_DAT_080057d8": "data_pointer",
                "PTR_DAT_080057e0": "data_pointer_3",
                "FUN_08007c40": "execute_function_with_argument",
                "FUN_08007c5e": "execute_function_with_argument",
                "FUN_08007b70": "execute_function"
            },
            "code": "void do_nothing_and_check_08005790() {\n  do_nothing();\n  if (PTR_DAT_080057d4[1] == '\\x03') {\n    *(undefined2 *)PTR_DAT_080057dc = *(undefined2 *)(PTR_DAT_080057d4 + 0x18);\n    *(undefined2 *)PTR_DAT_080057e0 = *(undefined2 *)(PTR_DAT_080057d4 + 0x1a);\n    execute_function_with_argument(0x69);\n    execute_function_with_argument(((byte)PTR_DAT_080057d4[0xd] + 5) * 0x15);\n    execute_function();\n  }\n  return;\n}",
            "called": [
                "FUN_08007b70",
                "FUN_08007c5e",
                "FUN_08005318",
                "FUN_08007c40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005790",
            "calling": [
                "FUN_08001d4c",
                "FUN_0800583c",
                "FUN_0800585c"
            ],
            "imported": false,
            "current_name": "do_nothing_and_check_08005790"
        },
        "FUN_08001994": {
            "renaming": {
                "FUN_08001994": "process_data_08001994",
                "param_1": "flags",
                "param_2": "is_enabled",
                "param_3": "use_alternate",
                "param_4": "input_data",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "uVar3": "result_3",
                "uVar4": "result_4",
                "local_61": "counter",
                "local_5c": "value_1",
                "local_58": "value_2",
                "local_54": "value_3",
                "local_4e": "constant_value_1",
                "local_4c": "constant_value_2",
                "local_48": "constant_value_3",
                "local_44": "temporary_value",
                "local_40": "max_value",
                "local_3c": "random_value",
                "local_36": "output_value",
                "local_34": "counter_limit",
                "local_30": "increment_value",
                "local_2c": "difference_value",
                "local_28": "value_1_copy",
                "local_24": "value_2_copy",
                "local_20": "value_3_copy",
                "local_1a": "constant_value_4",
                "local_18": "constant_value_5",
                "local_11": "flag_counter"
            },
            "code": "\nvoid process_data_08001994(byte flags,char is_enabled,char use_alternate,undefined4 input_data)\n\n{\n  undefined4 result_1;\n  uint result_2;\n  undefined8 result_3;\n  undefined8 result_4;\n  byte counter;\n  uint value_1;\n  uint value_2;\n  uint value_3;\n  ushort constant_value_1;\n  uint constant_value_2;\n  int constant_value_3;\n  undefined4 temporary_value;\n  uint max_value;\n  uint random_value;\n  ushort output_value;\n  uint counter_limit;\n  uint increment_value;\n  int difference_value;\n  int value_1_copy;\n  int value_2_copy;\n  int value_3_copy;\n  ushort constant_value_4;\n  uint constant_value_5;\n  char flag_counter;\n  \n  flag_counter = '\\0';\n  FUN_0800b430(&value_1,0,0xc);\n  if ((flags & 1) != 0) {\n    flag_counter = flag_counter + '\\x01';\n    result_3 = FUN_08008590(*(undefined4 *)PTR_DAT_08001c90);\n    value_1 = FUN_080095b8((int)result_3,(int)((ulonglong)result_3 >> 0x20));\n  }\n  if ((flags & 2) != 0) {\n    flag_counter = flag_counter + '\\x01';\n    result_3 = FUN_08008590(*(undefined4 *)(PTR_DAT_08001c90 + 4));\n    value_2 = FUN_080095b8((int)result_3,(int)((ulonglong)result_3 >> 0x20));\n  }\n  if ((flags & 4) != 0) {\n    flag_counter = flag_counter + '\\x01';\n    result_3 = FUN_08008590(*(undefined4 *)(PTR_DAT_08001c90 + 8));\n    value_3 = FUN_080095b8((int)result_3,(int)((ulonglong)result_3 >> 0x20));\n  }\n  result_2 = value_3;\n  if (value_3 < value_2) {\n    result_2 = value_2;\n  }\n  max_value = value_1;\n  if (value_1 < result_2) {\n    max_value = result_2;\n  }\n  result_3 = FUN_0800854c(max_value);\n  result_4 = FUN_0800854c(flag_counter);\n  result_4 = FUN_080098d0((int)result_4,(int)((ulonglong)result_4 >> 0x20));\n  result_3 = FUN_08008894((int)result_3,(int)((ulonglong)result_3 >> 0x20),(int)result_4,\n                       (int)((ulonglong)result_4 >> 0x20));\n  temporary_value = FUN_08008c30((int)result_3,(int)((ulonglong)result_3 >> 0x20));\n  result_1 = FUN_08008eec(*(undefined4 *)(PTR_DAT_08001c90 + 0x20),temporary_value);\n  result_1 = FUN_08009054(result_1,DAT_08001c94);\n  result_3 = FUN_08008590(result_1);\n  result_3 = FUN_08009318((int)result_3,(int)((ulonglong)result_3 >> 0x20));\n  constant_value_3 = FUN_08008bf0((int)result_3,(int)((ulonglong)result_3 >> 0x20));\n  result_3 = FUN_0800854c(flag_counter);\n  result_3 = FUN_080098d0((int)result_3,(int)((ulonglong)result_3 >> 0x20));\n  result_4 = FUN_08008590(input_data);\n  result_3 = FUN_08008640((int)result_3,(int)((ulonglong)result_3 >> 0x20),(int)result_4,\n                       (int)((ulonglong)result_4 >> 0x20));\n  result_1 = FUN_08008c30((int)result_3,(int)((ulonglong)result_3 >> 0x20));\n  result_1 = FUN_08008eec(temporary_value,result_1);\n  result_1 = FUN_08009054(DAT_08001c98,result_1);\n  result_3 = FUN_08008590(result_1);\n  constant_value_2 = FUN_080095b8((int)result_3,(int)((ulonglong)result_3 >> 0x20));\n  constant_value_5 = DAT_08001c9c;\n  if (constant_value_2 < DAT_08001c9c) {\n    constant_value_5 = constant_value_2;\n  }\n  constant_value_1 = *(ushort *)(PTR_DAT_08001c90 + 0x18);\n  constant_value_4 = *(ushort *)(PTR_DAT_08001c90 + 0x1a) ^ *(ushort *)(PTR_DAT_08001c90 + 0x2a) & 0xaa0;\n  if (is_enabled == '\\0') {\n    constant_value_4 = constant_value_4 ^ 0xaa0;\n  }\n  FUN_080018fc(constant_value_4);\n  FUN_080018cc(constant_value_1);\n  value_1_copy = -(max_value >> 1);\n  difference_value = constant_value_5 - (byte)PTR_DAT_08001c90[0xd];\n  increment_value = 0;\n  counter_limit = 10000;\n  counter = flags;\n  value_2_copy = value_1_copy;\n  value_3_copy = value_1_copy;\n  while( true ) {\n    output_value = constant_value_1;\n    random_value = FUN_080078f4();\n    if (use_alternate == '\\0') {\n      random_value = random_value ^ 0x1e;\n    }\n    if (((counter & 1) != 0) && (value_3_copy = value_3_copy + value_1, 0 < value_3_copy)) {\n      if ((random_value & 0x10) == 0) {\n        counter = counter & 0xfe;\n      }\n      else {\n        output_value = output_value ^ 0x10;\n      }\n      value_3_copy = value_3_copy - max_value;\n    }\n    if (((counter & 2) != 0) && (value_2_copy = value_2_copy + value_2, 0 < value_2_copy)) {\n      if ((random_value & 8) == 0) {\n        counter = counter & 0xfd;\n      }\n      else {\n        output_value = output_value ^ 0x440;\n      }\n      value_2_copy = value_2_copy - max_value;\n    }\n    if (((counter & 4) != 0) && (value_1_copy = value_1_copy + value_3, 0 < value_1_copy)) {\n      if ((random_value & 4) == 0) {\n        counter = counter & 0xfb;\n      }\n      else {\n        output_value = output_value ^ 0x100;\n      }\n      value_1_copy = value_1_copy - max_value;\n    }\n    if ((counter == 0) || ((PTR_DAT_08001d40[2] & 0x10) != 0)) break;\n    FUN_080018cc(output_value);\n    do_nothing_08002828(PTR_DAT_08001d44[0xd]);\n    FUN_080018cc(constant_value_1);\n    do_nothing_08002828(difference_value);\n    if ((constant_value_2 < constant_value_5) && (counter_limit = constant_value_5 + counter_limit, 20000 < counter_limit)) {\n      counter_limit = counter_limit - 20000;\n      increment_value = constant_value_3 + increment_value;\n      constant_value_5 = DAT_08001d48 / increment_value;\n      if (constant_value_5 < constant_value_2) {\n        constant_value_5 = constant_value_2;\n      }\n      difference_value = constant_value_5 - (byte)PTR_DAT_08001d44[0xd];\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08009318",
                "FUN_08008590",
                "FUN_080098d0",
                "FUN_08008640",
                "FUN_080078f4",
                "FUN_08008bf0",
                "FUN_0800b430",
                "FUN_080018fc",
                "FUN_08008c30",
                "FUN_080018cc",
                "FUN_08002828",
                "FUN_08009054",
                "FUN_08008894",
                "FUN_080095b8",
                "FUN_0800854c",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001994",
            "calling": [
                "FUN_08001d4c"
            ],
            "imported": false,
            "current_name": "process_data_08001994"
        },
        "FUN_08007854": {
            "renaming": {
                "FUN_08007854": "get_bit_at_index_08007854",
                "param_1": "num",
                "PTR_": "base_",
                "DAT_": "shifted_"
            },
            "code": "uint get_bit_at_index_08007854(uint num, uint index){\n    uint PTR_address = ((int)num >> 4) * 0x400 + 0x40020010;\n    uint DAT_num = *(uint *)(PTR_address) >> (num & 0xf);\n    return DAT_num & 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007854",
            "calling": [
                "FUN_08007884"
            ],
            "imported": false,
            "current_name": "get_bit_at_index_08007854"
        },
        "FUN_08004900": {
            "renaming": {
                "FUN_08004900": "print_message_and_value_08004900",
                "param_1": "message",
                "param_2": "value",
                "PTR_DAT_08004934": "HEADER",
                "FUN_080036c6": "print_header",
                "FUN_080037fc": "print_message",
                "PTR_DAT_08004938": "FOOTER",
                "FUN_0800369c": "print_value",
                "PTR_DAT_0800493c": "FOOTER_END"
            },
            "code": "void print_message_and_value_08004900(char* message, int value){\n                        print_header();\n                        print_message(message);\n                        print_value(value);\n                        print_footer();\n                    }",
            "called": [
                "FUN_0800369c",
                "FUN_080037fc",
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004900",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "print_message_and_value_08004900"
        },
        "FUN_08005318": {
            "renaming": {
                "FUN_08005318": "do_nothing_08005318"
            },
            "code": "\nvoid do_nothing_08005318(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005318",
            "calling": [
                "FUN_08005790"
            ],
            "imported": false,
            "current_name": "do_nothing_08005318"
        },
        "FUN_08004228": {
            "renaming": {
                "FUN_08004228": "print_grbl_help_message_08004228",
                "PTR_s__Grbl_0_8c______for_help__08004238": "s__Grbl_help_message",
                "FUN_080036c6": "print_message"
            },
            "code": "void print_grbl_help_message_08004228(void)\n{\n  print_message(PTR_s__Grbl_0_8c______for_help__08004238);\n  return;\n}",
            "called": [
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004228",
            "calling": [
                "FUN_080039a0"
            ],
            "imported": false,
            "current_name": "print_grbl_help_message_08004228"
        },
        "FUN_08009b24": {
            "renaming": {
                "FUN_08009b24": "calculate_result_08009b24",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "undefined_var_1",
                "iVar2": "int_var_2",
                "uVar3": "undefined_var_3",
                "iVar4": "int_var_4",
                "uVar5": "undefined_var_5",
                "iVar6": "int_var_6",
                "uVar7": "undefined_var_7",
                "uVar8": "undefined_var_8",
                "uVar9": "undefined_var_9",
                "uVar10": "undefined_var_10",
                "uVar11": "undefined_var_11",
                "uVar12": "undefined_var_12",
                "uVar13": "undefined_var_13",
                "local_3c": "local_var_3c"
            },
            "code": "\nuint calculate_result_08009b24(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  undefined4 undefined_var_1;\n  int int_var_2;\n  uint undefined_var_3;\n  int int_var_4;\n  undefined4 undefined_var_5;\n  int int_var_6;\n  uint undefined_var_7;\n  undefined4 undefined_var_8;\n  undefined4 undefined_var_9;\n  undefined8 undefined_var_10;\n  undefined8 undefined_var_11;\n  undefined8 undefined_var_12;\n  undefined8 undefined_var_13;\n  int local_var_3c;\n  \n  undefined_var_1 = DAT_08009d70;\n  input_2 = input_2 & 0x7fffffff;\n  input_4 = input_4 & 0x7fffffff;\n  undefined_var_3 = input_1;\n  undefined_var_7 = input_2;\n  if (input_2 < input_4) {\n    undefined_var_3 = input_3;\n    input_3 = input_1;\n    undefined_var_7 = input_4;\n    input_4 = input_2;\n  }\n  if (0x3c00000 < (int)(undefined_var_7 - input_4)) {\n    undefined_var_3 = FUN_080082d4(undefined_var_3,undefined_var_7,input_3,input_4);\n    return undefined_var_3;\n  }\n  if (DAT_08009d68 < (int)undefined_var_7) {\n    if (DAT_08009d74 < (int)undefined_var_7) {\n      if ((undefined_var_7 & 0xfffff | undefined_var_3) != 0) {\n        undefined_var_3 = FUN_080082d4(undefined_var_3,undefined_var_7,input_3,input_4);\n      }\n      if ((input_4 ^ 0x7ff00000 | input_3) != 0) {\n        return undefined_var_3;\n      }\n      return input_3;\n    }\n    undefined_var_7 = undefined_var_7 + 0xda800000;\n    input_4 = input_4 + 0xda800000;\n    local_var_3c = 600;\n  }\n  else {\n    local_var_3c = 0;\n  }\n  undefined_var_11 = CONCAT44(undefined_var_7,undefined_var_3);\n  undefined_var_10 = CONCAT44(input_4,input_3);\n  if ((int)input_4 <= DAT_08009d6c) {\n    if ((int)input_4 < 0x100000) {\n      if ((input_4 | input_3) == 0) {\n        return undefined_var_3;\n      }\n      undefined_var_10 = FUN_08008640(input_3,input_4,0,DAT_08009d70);\n      undefined_var_11 = FUN_08008640(undefined_var_3,undefined_var_7,0,undefined_var_1);\n      local_var_3c = local_var_3c + -0x3fe;\n    }\n    else {\n      undefined_var_7 = undefined_var_7 + 0x25800000;\n      undefined_var_11 = CONCAT44(undefined_var_7,undefined_var_3);\n      input_4 = input_4 + 0x25800000;\n      undefined_var_10 = CONCAT44(input_4,input_3);\n      local_var_3c = local_var_3c + -600;\n    }\n  }\n  undefined_var_9 = (undefined4)((ulonglong)undefined_var_11 >> 0x20);\n  undefined_var_8 = (undefined4)undefined_var_11;\n  int_var_6 = (int)((ulonglong)undefined_var_10 >> 0x20);\n  undefined_var_5 = (undefined4)undefined_var_10;\n  undefined_var_10 = FUN_080082d0(undefined_var_8,undefined_var_9,undefined_var_5,int_var_6);\n  int_var_4 = (int)((ulonglong)undefined_var_10 >> 0x20);\n  undefined_var_1 = (undefined4)undefined_var_10;\n  int_var_2 = FUN_08008b24(undefined_var_5,int_var_6,undefined_var_1,int_var_4);\n  if (int_var_2 == 0) {\n    undefined_var_10 = FUN_08008640(0,input_4,0);\n    undefined_var_11 = FUN_08008640(undefined_var_1,int_var_4 + -0x80000000,undefined_var_1,int_var_4);\n    undefined_var_12 = FUN_080082d4(undefined_var_8,undefined_var_9,undefined_var_8,undefined_var_9);\n    undefined_var_12 = FUN_080082d0((int)undefined_var_12,(int)((ulonglong)undefined_var_12 >> 0x20),0,undefined_var_7 + 0x100000);\n    undefined_var_12 = FUN_08008640((int)undefined_var_12,(int)((ulonglong)undefined_var_12 >> 0x20),undefined_var_5,int_var_6);\n    undefined_var_13 = FUN_080082d0(undefined_var_5,int_var_6,0,input_4);\n    undefined_var_13 = FUN_08008640((int)undefined_var_13,(int)((ulonglong)undefined_var_13 >> 0x20),0,undefined_var_7 + 0x100000);\n    undefined_var_12 = FUN_080082d4((int)undefined_var_12,(int)((ulonglong)undefined_var_12 >> 0x20),(int)undefined_var_13,\n                          (int)((ulonglong)undefined_var_13 >> 0x20));\n    undefined_var_11 = FUN_080082d0((int)undefined_var_11,(int)((ulonglong)undefined_var_11 >> 0x20),(int)undefined_var_12,\n                          (int)((ulonglong)undefined_var_12 >> 0x20));\n    FUN_080082d0((int)undefined_var_10,(int)((ulonglong)undefined_var_10 >> 0x20),(int)undefined_var_11,\n                 (int)((ulonglong)undefined_var_11 >> 0x20));\n    undefined_var_10 = FUN_0800a1bc();\n  }\n  else {\n    undefined_var_10 = FUN_08008640(0,undefined_var_7,0,undefined_var_7);\n    undefined_var_11 = FUN_08008640(undefined_var_5,int_var_6 + -0x80000000,undefined_var_5,int_var_6);\n    undefined_var_12 = FUN_080082d4(undefined_var_8,undefined_var_9,0,undefined_var_7);\n    undefined_var_13 = FUN_080082d0(undefined_var_8,undefined_var_9,0,undefined_var_7);\n    undefined_var_12 = FUN_08008640((int)undefined_var_12,(int)((ulonglong)undefined_var_12 >> 0x20),(int)undefined_var_13,\n                          (int)((ulonglong)undefined_var_13 >> 0x20));\n    undefined_var_11 = FUN_080082d0((int)undefined_var_11,(int)((ulonglong)undefined_var_11 >> 0x20),(int)undefined_var_12,\n                          (int)((ulonglong)undefined_var_12 >> 0x20));\n    FUN_080082d0((int)undefined_var_10,(int)((ulonglong)undefined_var_10 >> 0x20),(int)undefined_var_11,\n                 (int)((ulonglong)undefined_var_11 >> 0x20));\n    undefined_var_10 = FUN_0800a1bc();\n  }\n  undefined_var_3 = (uint)undefined_var_10;\n  if (local_var_3c != 0) {\n    undefined_var_3 = FUN_08008640(undefined_var_3,(int)((ulonglong)undefined_var_10 >> 0x20),0,local_var_3c * 0x100000 + 0x3ff00000);\n  }\n  return undefined_var_3;\n}\n\n",
            "called": [
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_0800a1bc",
                "FUN_08008640",
                "FUN_08008b24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009b24",
            "calling": [
                "FUN_0800981c"
            ],
            "imported": false,
            "current_name": "calculate_result_08009b24"
        },
        "FUN_080076c8": {
            "renaming": {
                "FUN_080076c8": "set_bit_in_array_080076c8",
                "param_1": "array_index",
                "PTR_": "array_ptr",
                "DAT_": "bit_index"
            },
            "code": "void set_bit_in_array_080076c8(uint array_index)\n{\n    uint* PTR_ = (uint*)(array_index >> 4) * 0x400 + 0x40020014;\n    uint DAT_ = array_index & 0xf;\n    *PTR_ = (*PTR_) ^ (1 << DAT_);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080076c8",
            "calling": [
                "FUN_08007756"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_080076c8"
        },
        "FUN_0800530c": {
            "renaming": {
                "FUN_0800530c": "do_nothing_0800530c"
            },
            "code": "\nvoid do_nothing_0800530c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800530c",
            "calling": [
                "FUN_080057e4"
            ],
            "imported": false,
            "current_name": "do_nothing_0800530c"
        },
        "FUN_08006a8c": {
            "renaming": {
                "FUN_08006a8c": "set_bit_at_index_08006a8c",
                "param_1": "index",
                "DAT_08006abc": "data"
            },
            "code": "void set_bit_at_index_08006a8c(byte index) {\n    int* DAT_08006abc = (int*)(DAT_08006abc + (((uint)(int)(char)index >> 5) + 0x60) * 4);\n    int mask = 1 << (index & 0x1f);\n    *DAT_08006abc = mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006a8c",
            "calling": [
                "FUN_08006dfe"
            ],
            "imported": false,
            "current_name": "set_bit_at_index_08006a8c"
        },
        "FUN_0800283a": {
            "renaming": {
                "FUN_0800283a": "execute_operations_0800283a",
                "FUN_080035ec": "execute_operation1",
                "FUN_080004fc": "execute_operation2",
                "PTR_DAT_08002868": "PTR_DATA"
            },
            "code": "void execute_operations_0800283a(void)\n{\n    int arg1 = *(int*)(PTR_DAT_08002868 + 4);\n    int arg2 = *(int*)(PTR_DAT_08002868 + 8);\n    int arg3 = *(int*)(PTR_DAT_08002868 + 0xc);\n    execute_operation1(arg1, arg2, arg3);\n    execute_operation2(arg1, arg2, arg3);\n    return;\n}",
            "called": [
                "FUN_080004fc",
                "FUN_080035ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800283a",
            "calling": [
                "FUN_080024c4",
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "execute_operations_0800283a"
        },
        "FUN_0800881c": {
            "renaming": {
                "FUN_0800881c": "calculate_result_0800881c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "unaff_r4": "temp2",
                "uVar2": "temp3",
                "uVar3": "temp4",
                "in_r12": "mask",
                "bVar4": "is_zero",
                "exponent_mask": "exponent_mask",
                "nan_mask": "nan_mask",
                "check_bit": "check_bit"
            },
            "code": "ulonglong calculate_result_0800881c(uint input1, uint input2, uint input3, uint input4) {\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  bool is_zero;\n  uint mask = 0x80000000;\n  uint check_bit = 0x100000;\n  uint exponent_mask = 0x7ff00000;\n  uint nan_mask = 0x7ff8000000000000;\n  \n  temp1 = input4 >> 0x14;\n  if (input2 != input4 && temp1 != input4) {\n    is_zero = (input1 | input2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input3 | input4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input2 ^ input4) & mask) << 0x20;\n    }\n    if (input2 == 0) {\n      temp3 = input2 & mask;\n      do {\n        temp2 = input1 & mask;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(temp2 != 0);\n      } while ((input2 & check_bit) == 0);\n      input2 = input2 | temp3;\n      if (temp1 != 0) {\n        return CONCAT44(input2,input1);\n      }\n    }\n    do {\n      temp1 = input3 & mask;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(temp1 != 0);\n    } while ((input4 & check_bit) == 0);\n    return CONCAT44(input2,input1);\n  }\n  is_zero = (input1 | input2 << 1) == 0;\n  if (is_zero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!is_zero) {\n    is_zero = (input3 | input4 << 1) == 0;\n  }\n  temp3 = input2;\n  if (((!is_zero) && ((input2 != input4 || ((input1 | input2 << 0xc) == 0)))) && ((temp1 != input4 || (input1 = input3, temp3 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & mask | exponent_mask) << 0x20;\n  }\n  return CONCAT44(temp3,input1) | nan_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800881c",
            "calling": [
                "FUN_08008640"
            ],
            "imported": false,
            "current_name": "calculate_result_0800881c"
        },
        "FUN_08004bc0": {
            "renaming": {
                "FUN_08004bc0": "process_byte_08004bc0",
                "param_1": "input_byte",
                "param_2": "input_value"
            },
            "code": "void process_byte_08004bc0(byte input_byte, undefined4 input_value) {\n  ushort offset = (ushort)input_byte * 0x101 + 0x300;\n  FUN_08000374(offset, input_value, 0x100);\n  return;\n}",
            "called": [
                "FUN_08000374"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bc0",
            "calling": [
                "FUN_08004d2c",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "process_byte_08004bc0"
        },
        "FUN_08008b4c": {
            "renaming": {
                "FUN_08008b4c": "check_for_zero_or_carry_flag_08008b4c",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag",
                "FUN_08008af0": "set_flags"
            },
            "code": "bool check_for_zero_or_carry_flag_08008b4c(void)\n{\n  bool carry_flag;\n  bool zero_flag;\n  \n  set_flags();\n  return !carry_flag || zero_flag;\n}",
            "called": [
                "FUN_08008af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b4c",
            "calling": [
                "FUN_0800a5a0"
            ],
            "imported": false,
            "current_name": "check_for_zero_or_carry_flag_08008b4c"
        },
        "FUN_08004c2a": {
            "renaming": {
                "FUN_08004c2a": "print_hello_world_08004c2a",
                "FUN_08000340": "set_initial_value",
                "FUN_08000374": "copy_data_to_destination",
                "PTR_DAT_08004c44": "DATA_POINTER_08004c44"
            },
            "code": "void print_hello_world_08004c2a(void)\n{\n  set_initial_value(0,5);\n  copy_data_to_destination(1,PTR_DAT_08004c44,0x40);\n  return;\n}",
            "called": [
                "FUN_08000374",
                "FUN_08000340"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c2a",
            "calling": [
                "FUN_08004c48",
                "FUN_08004e30"
            ],
            "imported": false,
            "current_name": "print_hello_world_08004c2a"
        },
        "FUN_0800826a": {
            "renaming": {
                "FUN_0800826a": "run_function_0800826a",
                "param_1": "input_param",
                "FUN_08007e1c": "call_another_function"
            },
            "code": "int run_function_0800826a(undefined input_param) {\n  call_another_function(input_param);\n  return 0;\n}",
            "called": [
                "FUN_08007e1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800826a",
            "calling": [],
            "imported": false,
            "current_name": "run_function_0800826a"
        },
        "FUN_08008b60": {
            "renaming": {
                "FUN_08008b60": "is_CY_null_08008b60",
                "in_CY": "input_char"
            },
            "code": "bool is_CY_null_08008b60(void)\n{\n  char input_char;\n  call_another_function();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_08008af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b60",
            "calling": [
                "FUN_08009318",
                "FUN_080094c0",
                "FUN_08003004",
                "FUN_0800af78"
            ],
            "imported": false,
            "current_name": "is_CY_null_08008b60"
        },
        "FUN_08005324": {
            "renaming": {
                "FUN_08005324": "calculate_and_set_value_08005324",
                "param_1": "input_value",
                "local_14": "value_to_set"
            },
            "code": "void calculate_and_set_value_08005324(uint input_value)\n{\n  uint value_to_set;\n  if (input_value < 800) {\n    value_to_set = 800;\n  }\n  else {\n    value_to_set = input_value;\n  }\n  value_to_set = DAT_08005358 / value_to_set;\n  *(uint *)(PTR_DAT_0800535c + 0x14) = value_to_set;\n  FUN_08007bf0(value_to_set);\n  return;\n}",
            "called": [
                "FUN_08007bf0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005324",
            "calling": [
                "FUN_080058a0",
                "FUN_080053a0",
                "FUN_08005814"
            ],
            "imported": false,
            "current_name": "calculate_and_set_value_08005324"
        },
        "FUN_08000310": {
            "renaming": {
                "FUN_08000310": "getValueFromPointerArray_08000310",
                "param_1": "index",
                "PTR_DAT_08000338": "initialized",
                "FUN_080002f0": "initialize",
                "PTR_DAT_0800033c": "pointerArray"
            },
            "code": "int getValueFromPointerArray_08000310(uint index) {\n  if (*PTR_DAT_08000338 == 0) {\n    initialize();\n  }\n  return PTR_DAT_0800033c[index & 0x3ff];\n}",
            "called": [
                "FUN_080002f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000310",
            "calling": [
                "FUN_080003ec",
                "FUN_08004dd2"
            ],
            "imported": false,
            "current_name": "getValueFromPointerArray_08000310"
        },
        "FUN_08005208": {
            "renaming": {
                "FUN_08005208": "do_nothing_08005208"
            },
            "code": "\nvoid do_nothing_08005208(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005208",
            "calling": [
                "FUN_0800525c"
            ],
            "imported": false,
            "current_name": "do_nothing_08005208"
        },
        "FUN_08007a70": {
            "renaming": {
                "FUN_08007a70": "process_input_08007a70",
                "param_1": "input_value",
                "local_c": "local_variable",
                "DAT_08007ac8": "special_value_1",
                "DAT_08007acc": "special_value_2",
                "FUN_08006cf6": "execute_task_1",
                "FUN_080079e0": "execute_task_2"
            },
            "code": "void process_input_08007a70(int input_value, undefined4 param_2, undefined4 param_3)\n{\n    unsigned char local_variable;\n    if (input_value == 0x40000000) {\n        local_variable = 0x1c;\n    }\n    else if (input_value == DAT_08007ac8) {\n        local_variable = 0x1d;\n    }\n    else {\n        if (input_value != DAT_08007acc) {\n            return;\n        }\n        local_variable = 0x1e;\n    }\n    execute_task_1(local_variable, param_2, param_3);\n    execute_task_2(local_variable);\n    return;\n}",
            "called": [
                "FUN_080079e0",
                "FUN_08006cf6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007a70",
            "calling": [
                "FUN_08007ad0"
            ],
            "imported": false,
            "current_name": "process_input_08007a70"
        },
        "FUN_0800b5b0": {
            "renaming": {
                "FUN_0800b5b0": "do_nothing_0800b5b0"
            },
            "code": "\nvoid do_nothing_0800b5b0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b5b0",
            "calling": [
                "FUN_080001ac",
                "FUN_0800b3e8",
                "FUN_08000188"
            ],
            "imported": false,
            "current_name": "do_nothing_0800b5b0"
        },
        "FUN_08002978": {
            "renaming": {
                "FUN_08002978": "calculate_hash_08002978",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "uVar1": "hash_1",
                "uVar2": "hash_2",
                "uVar3": "hash_3",
                "FUN_08008eec": "compute_hash",
                "FUN_08008cdc": "compute_hash",
                "FUN_08008cd8": "combine_hashes",
                "FUN_08008590": "convert_to_long",
                "FUN_080098d0": "shuffle_bits",
                "FUN_08008c30": "convert_to_int"
            },
            "code": "undefined4 calculate_hash_08002978(undefined4 input_1, undefined4 input_2, undefined4 input_3)\n{\n  undefined4 hash_1;\n  undefined4 hash_2;\n  undefined8 hash_3;\n  hash_1 = compute_hash(input_2, input_2);\n  hash_2 = compute_hash(input_1, input_1);\n  hash_2 = compute_hash(hash_2, input_3);\n  hash_1 = combine_hashes(hash_1, hash_2);\n  hash_3 = convert_to_long(hash_1);\n  hash_3 = shuffle_bits((int)hash_3, (int)((ulonglong)hash_3 >> 0x20));\n  hash_1 = convert_to_int((int)hash_3, (int)((ulonglong)hash_3 >> 0x20));\n  return hash_1;\n}",
            "called": [
                "FUN_080098d0",
                "FUN_08008590",
                "FUN_08008c30",
                "FUN_08008cd8",
                "FUN_08008cdc",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002978",
            "calling": [
                "FUN_08002afc",
                "FUN_080029d8",
                "FUN_08003004"
            ],
            "imported": false,
            "current_name": "calculate_hash_08002978"
        },
        "FUN_08009d78": {
            "renaming": {
                "FUN_08009d78": "FUNC_08009d78"
            },
            "code": "\n/* WARNING: Could not reconcile some variable overlaps */\n\nint FUNC_08009d78(undefined4 param_1,uint param_2,undefined8 *param_3)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  int iVar9;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  undefined8 uVar12;\n  undefined4 local_50;\n  undefined4 uStack_4c;\n  undefined8 local_40;\n  undefined8 local_38;\n  undefined8 local_30;\n  \n  uVar8 = param_2 & 0x7fffffff;\n  if ((int)uVar8 <= DAT_08009fb0) {\n    *(undefined4 *)param_3 = param_1;\n    *(uint *)((int)param_3 + 4) = param_2;\n    *(undefined4 *)(param_3 + 1) = 0;\n    *(undefined4 *)((int)param_3 + 0xc) = 0;\n    return 0;\n  }\n  if ((int)uVar8 <= DAT_08009fb4) {\n    if ((int)param_2 < 1) {\n      uVar10 = FUN_080082d4(param_1,param_2,DAT_08009f88,DAT_08009f8c);\n      uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n      uVar1 = (undefined4)uVar10;\n      if (uVar8 != DAT_0800a1b8) {\n        uVar10 = FUN_080082d4(uVar1,uVar3,DAT_0800a1b0,DAT_0800a1b4);\n        *param_3 = uVar10;\n        uVar10 = FUN_080082d0(uVar1,uVar3);\n        uVar10 = FUN_080082d4((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800a1b0,DAT_0800a1b4\n                             );\n        param_3[1] = uVar10;\n        return -1;\n      }\n      uVar10 = FUN_080082d4(uVar1,uVar3,DAT_0800a190,DAT_0800a194);\n      uVar1 = (undefined4)((ulonglong)uVar10 >> 0x20);\n      uVar11 = FUN_080082d4((int)uVar10,uVar1,DAT_0800a198,DAT_0800a19c);\n      *param_3 = uVar11;\n      uVar10 = FUN_080082d0((int)uVar10,uVar1);\n      uVar10 = FUN_080082d4((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800a198,DAT_0800a19c);\n      param_3[1] = uVar10;\n      return -1;\n    }\n    uVar10 = FUN_080082d0();\n    uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar1 = (undefined4)uVar10;\n    if (uVar8 != DAT_08009fb8) {\n      uVar10 = FUN_080082d0(uVar1,uVar3,DAT_08009f90,DAT_08009f94);\n      *param_3 = uVar10;\n      uVar10 = FUN_080082d0(uVar1,uVar3);\n      uVar10 = FUN_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08009f90,DAT_08009f94);\n      param_3[1] = uVar10;\n      return 1;\n    }\n    uVar10 = FUN_080082d0(uVar1,uVar3,DAT_08009f98,DAT_08009f9c);\n    uVar1 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar11 = FUN_080082d0((int)uVar10,uVar1,DAT_08009fa0,DAT_08009fa4);\n    *param_3 = uVar11;\n    uVar10 = FUN_080082d0((int)uVar10,uVar1);\n    uVar10 = FUN_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08009fa0,DAT_08009fa4);\n    param_3[1] = uVar10;\n    return 1;\n  }\n  if (DAT_08009fbc < (int)uVar8) {\n    if (DAT_08009fc0 < (int)uVar8) {\n      uVar10 = FUN_080082d0(param_1,param_2,param_1,param_2);\n      param_3[1] = uVar10;\n      *param_3 = uVar10;\n      return 0;\n    }\n    iVar9 = ((int)uVar8 >> 0x14) + -0x416;\n    FUN_08008ba0();\n    local_40 = FUN_0800856c();\n    uVar10 = FUN_080082d0(param_1,uVar8 + iVar9 * -0x100000,(int)local_40,\n                          (int)((ulonglong)local_40 >> 0x20));\n    uVar10 = FUN_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08009fc4);\n    FUN_08008ba0();\n    local_38 = FUN_0800856c();\n    uVar10 = FUN_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20));\n    local_30 = FUN_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08009fc4);\n    FUN_08008b10((int)local_30,(int)((ulonglong)local_30 >> 0x20),0,0);\n    iVar9 = FUN_0800a5a0(&local_40,param_3,iVar9);\n    if (-1 < (int)param_2) {\n      return iVar9;\n    }\n    *(int *)((int)param_3 + 4) = *(int *)((int)param_3 + 4) + -0x80000000;\n    *(int *)((int)param_3 + 0xc) = *(int *)((int)param_3 + 0xc) + -0x80000000;\n    return -iVar9;\n  }\n  uVar10 = do_nothing_0800b2cc();\n  uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n  uVar11 = FUN_08008640((int)uVar10,uVar3,DAT_08009fa8,DAT_08009fac);\n  FUN_080082d4((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_08009fcc);\n  iVar9 = FUN_08008ba0();\n  uVar11 = FUN_0800856c();\n  uVar4 = (undefined4)((ulonglong)uVar11 >> 0x20);\n  uVar1 = (undefined4)uVar11;\n  uVar11 = FUN_08008640(uVar1,uVar4,DAT_08009f88,DAT_08009f8c);\n  uVar10 = FUN_080082d0((int)uVar10,uVar3,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n  uVar5 = (undefined4)((ulonglong)uVar10 >> 0x20);\n  uVar3 = (undefined4)uVar10;\n  uVar11 = FUN_08008640(uVar1,uVar4,DAT_08009f90,DAT_08009f94);\n  if ((0x1f < iVar9) || (*(uint *)(PTR_DAT_08009fd0 + (iVar9 + -1) * 4) == uVar8)) {\n    uVar12 = FUN_080082d0(uVar3,uVar5,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n    if ((int)((uVar8 >> 0x14) - ((uint)((int)((ulonglong)uVar12 >> 0x20) << 1) >> 0x15)) < 0x11)\n    goto LAB_0800a0ce;\n    uVar11 = FUN_08008640(uVar1,uVar4,DAT_0800a190,DAT_0800a194);\n    uVar6 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar10 = FUN_080082d0(uVar3,uVar5,(int)uVar11,uVar6);\n    uVar7 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar2 = (undefined4)uVar10;\n    uVar12 = FUN_080082d0(uVar3,uVar5,uVar2,uVar7);\n    uVar11 = FUN_080082d0((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar11,uVar6);\n    uVar12 = FUN_08008640(uVar1,uVar4,DAT_0800a198,DAT_0800a19c);\n    uVar11 = FUN_080082d0((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n    uVar12 = FUN_080082d0(uVar2,uVar7,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n    if ((int)(((int)uVar8 >> 0x14) - ((uint)((int)((ulonglong)uVar12 >> 0x20) << 1) >> 0x15)) < 0x32\n       ) goto LAB_0800a0ce;\n    uVar11 = FUN_08008640(uVar1,uVar4,DAT_0800a1a0,DAT_0800a1a4);\n    uVar3 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar10 = FUN_080082d0(uVar2,uVar7,(int)uVar11,uVar3);\n    uVar12 = FUN_080082d0(uVar2,uVar7);\n    uVar11 = FUN_080082d0((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar11,uVar3);\n    uVar12 = FUN_08008640(uVar1,uVar4,DAT_0800a1a8,DAT_0800a1ac);\n    uVar11 = FUN_080082d0((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n  }\n  uVar12 = FUN_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                        (int)((ulonglong)uVar11 >> 0x20));\nLAB_0800a0ce:\n  uStack_4c = (undefined4)((ulonglong)uVar10 >> 0x20);\n  local_50 = (undefined4)uVar10;\n  *param_3 = uVar12;\n  uVar10 = FUN_080082d0(local_50,uStack_4c);\n  uVar10 = FUN_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                        (int)((ulonglong)uVar11 >> 0x20));\n  param_3[1] = uVar10;\n  if ((int)param_2 < 0) {\n    *(int *)param_3 = (int)uVar12;\n    *(int *)((int)param_3 + 4) = (int)((ulonglong)uVar12 >> 0x20) + -0x80000000;\n    *(int *)(param_3 + 1) = (int)uVar10;\n    *(int *)((int)param_3 + 0xc) = (int)((ulonglong)uVar10 >> 0x20) + -0x80000000;\n    iVar9 = -iVar9;\n  }\n  return iVar9;\n}\n\n",
            "called": [
                "FUN_080082d0",
                "FUN_08008b10",
                "FUN_080082d4",
                "FUN_0800856c",
                "FUN_08008ba0",
                "FUN_08008640",
                "FUN_0800a5a0",
                "FUN_0800b2cc"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009d78",
            "calling": [
                "FUN_08009410",
                "FUN_080096e8"
            ],
            "imported": false,
            "current_name": "FUNC_08009d78"
        },
        "FUN_08003826": {
            "renaming": {
                "FUN_08003826": "print_decimal_fraction_08003826",
                "param_1": "num",
                "iVar1": "sign",
                "uVar2": "num_scaled",
                "bVar3": "bVar3",
                "uVar4": "quotient",
                "local_24": "temp_num",
                "acStack_1d": "fraction_str",
                "local_10": "num_fraction_digits",
                "local_a": "num_digits",
                "local_9": "local_9"
            },
            "code": "void print_decimal_fraction_08003826(uint32_t num)\n{\n    int32_t sign = get_sign(num);\n    num = num ^ 0x80000000;\n    uint8_t num_digits = PTR_DAT_08003970[0x3d];\n    uint32_t temp_num = num;\n    for (uint8_t i = num_digits; i > 1; i -= 2)\n    {\n        temp_num = multiply_by_10(temp_num, DAT_08003974);\n    }\n    if (num_digits % 2 != 0)\n    {\n        temp_num = multiply_by_10(temp_num, DAT_08003978);\n    }\n    uint32_t num_scaled = scale_number(temp_num, 0x3f000000);\n    uint8_t num_fraction_digits = 0;\n    char fraction_str[13];\n    fraction_str[num_digits + 1] = '.';\n    while (num_scaled != 0)\n    {\n        if (num_fraction_digits == num_digits)\n        {\n            num_fraction_digits++;\n        }\n        uint32_t quotient = num_scaled / DAT_0800397c;\n        uint32_t remainder = num_scaled % DAT_0800397c;\n        fraction_str[num_fraction_digits + 1] = (char)remainder + (char)((uint64_t)DAT_0800397c * quotient >> 0x23) * -10 + '0';\n        num_scaled = quotient;\n        num_fraction_digits++;\n    }\n    while (num_fraction_digits < num_digits)\n    {\n        fraction_str[num_fraction_digits + 1] = '0';\n        num_fraction_digits++;\n    }\n    if (num_fraction_digits == num_digits)\n    {\n        uint8_t bVar3 = num_fraction_digits + 1;\n        num_fraction_digits += 2;\n        fraction_str[bVar3 + 1] = '0';\n    }\n    for (; num_fraction_digits != 0; num_fraction_digits--)\n    {\n        print_char(fraction_str[num_fraction_digits]);\n    }\n    if (sign < 0)\n    {\n        print_char('-');\n    }\n}\n",
            "called": [
                "FUN_08008250",
                "FUN_08009228",
                "FUN_08009278",
                "FUN_08008cdc",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003826",
            "calling": [
                "FUN_08004250",
                "FUN_080046d0",
                "FUN_08004940",
                "FUN_080044e8"
            ],
            "imported": false,
            "current_name": "print_decimal_fraction_08003826"
        },
        "FUN_0800923c": {
            "renaming": {
                "FUN_0800923c": "should_continue_execution_0800923c",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag",
                "FUN_08009204": "execute_preparation_steps"
            },
            "code": "bool should_continue_execution_0800923c(void)\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  execute_preparation_steps();\n  return !(bool)carry_flag || (bool)zero_flag;\n}",
            "called": [
                "FUN_08009204"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800923c",
            "calling": [
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "should_continue_execution_0800923c"
        },
        "FUN_08002afc": {
            "renaming": {
                "FUN_08002afc": "process_data_08002afc",
                "param_1": "data_ptr_1",
                "param_2": "data_ptr_2",
                "iVar1": "result",
                "uVar2": "input_1",
                "uVar3": "input_2"
            },
            "code": "void process_data_08002afc(int data_ptr_1, int data_ptr_2) {\n                      int result;\n                      undefined4 input_1;\n                      undefined4 input_2;\n                      \n                      if (data_ptr_1 != 0 && *(char *)(data_ptr_1 + 0x25) == \"\\0\") {\n                          result = FUN_08009228(*(undefined4 *)(data_ptr_1 + 0x18),*(undefined4 *)(data_ptr_2 + 0x18));\n                          if (result != 0) {\n                              input_2 = *(undefined4 *)(data_ptr_2 + 0x18);\n                              input_1 = FUN_08002978(*(uint *)(PTR_DAT_08002ba4 + 0x20) ^ 0x80000000,\n                                                    *(undefined4 *)(data_ptr_1 + 0x18),*(undefined4 *)(data_ptr_1 + 0x20));\n                              result = FUN_08009228(input_2, input_1);\n                              if (result == 0) {\n                                  input_1 = FUN_08002978(*(uint *)(PTR_DAT_08002ba4 + 0x20) ^ 0x80000000,\n                                                        *(undefined4 *)(data_ptr_1 + 0x18),*(undefined4 *)(data_ptr_1 + 0x20));\n                              }\n                              else {\n                                  input_1 = *(undefined4 *)(data_ptr_2 + 0x18);\n                              }\n                              result = FUN_08009214(input_1,*(undefined4 *)(data_ptr_2 + 0x18));\n                              if (result == 0) {\n                                  *(undefined4 *)(data_ptr_2 + 0x18) = input_1;\n                                  *(undefined *)(data_ptr_2 + 0x24) = 1;\n                              }\n                          }\n                      }\n                  }",
            "called": [
                "FUN_08009214",
                "FUN_08009228",
                "FUN_08002978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002afc",
            "calling": [
                "FUN_08002ba8"
            ],
            "imported": false,
            "current_name": "process_data_08002afc"
        },
        "FUN_08004c48": {
            "renaming": {
                "FUN_08004c48": "initialize_config_08004c48",
                "param_1": "config_param",
                "PTR_DAT_08004d0c": "config_data",
                "DAT_08004d10": "config_value_1",
                "DAT_08004d14": "config_value_2",
                "DAT_08004d18": "config_value_3",
                "DAT_08004d1c": "config_value_4",
                "DAT_08004d20": "config_value_5",
                "DAT_08004d24": "config_value_6"
            },
            "code": "void initialize_config_08004c48(char config_param) {\n  if (config_param != '\\0') {\n    // initialize configuration values\n    int default_value = 10;\n    int default_threshold = 100;\n    float default_float = 1.0f;\n    int default_int = 25;\n    *(int *)PTR_DAT_08004d0c = DAT_08004d10;\n    *(int *)(PTR_DAT_08004d0c + 4) = DAT_08004d10;\n    *(int *)(PTR_DAT_08004d0c + 8) = DAT_08004d10;\n    PTR_DAT_08004d0c[13] = default_value;\n    *(int *)(PTR_DAT_08004d0c + 16) = DAT_08004d14;\n    *(int *)(PTR_DAT_08004d0c + 20) = DAT_08004d18;\n    *(float *)(PTR_DAT_08004d0c + 32) = default_float;\n    *(int *)(PTR_DAT_08004d0c + 28) = default_int;\n    *(short *)(PTR_DAT_08004d0c + 24) = 0;\n    *(short *)(PTR_DAT_08004d0c + 26) = 0xa80;\n    *(int *)(PTR_DAT_08004d0c + 36) = DAT_08004d1c;\n  }\n  PTR_DAT_08004d0c[40] |= 2;\n  PTR_DAT_08004d0c[40] |= 0x10;\n  *(short *)(PTR_DAT_08004d0c + 42) = 0;\n  *(int *)(PTR_DAT_08004d0c + 44) = DAT_08004d20;\n  *(int *)(PTR_DAT_08004d0c + 48) = DAT_08004d14;\n  *(short *)(PTR_DAT_08004d0c + 52) = default_threshold;\n  *(float *)(PTR_DAT_08004d0c + 56) = default_float;\n  PTR_DAT_08004d0c[60] = default_value;\n  PTR_DAT_08004d0c[61] = 3;\n  PTR_DAT_08004d0c[62] = default_value;\n  // call initialization function\n  initialize();\n}\n",
            "called": [
                "FUN_08004c2a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c48",
            "calling": [
                "FUN_080051b4",
                "FUN_08004dd2"
            ],
            "imported": false,
            "current_name": "initialize_config_08004c48"
        },
        "FUN_080002a0": {
            "renaming": {
                "FUN_080002a0": "call_function_with_param_080002a0",
                "param_1": "param",
                "FUN_08005a98": "call_specific_function"
            },
            "code": "void call_function_with_param_080002a0(void* param)\n{\n  call_specific_function(param);\n  return;\n}",
            "called": [
                "FUN_08005a98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002a0",
            "calling": [
                "FUN_08002408"
            ],
            "imported": false,
            "current_name": "call_function_with_param_080002a0"
        },
        "FUN_08009250": {
            "renaming": {
                "FUN_08009250": "check_if_carry_flag_is_set_or_zero_flag_is_clear_08009250",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag",
                "FUN_080091fc": "is_carry_flag_set"
            },
            "code": "bool check_if_carry_flag_is_set_or_zero_flag_is_clear_08009250(void)\n{\n  bool carry_flag = is_carry_flag_set();\n  bool zero_flag = is_zero_flag_set();\n  return !carry_flag || zero_flag;\n}",
            "called": [
                "FUN_080091fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009250",
            "calling": [
                "FUN_08003004",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "check_if_carry_flag_is_set_or_zero_flag_is_clear_08009250"
        },
        "FUN_0800640c": {
            "renaming": {
                "FUN_0800640c": "send_data_0800640c",
                "param_1": "data_type",
                "param_2": "param_2",
                "param_3": "param_3",
                "local_1c": "data_size",
                "local_18": "constant_1",
                "local_14": "constant_2",
                "local_10": "constant_3",
                "local_c": "constant_4",
                "DAT_080064b0": "flag_data_addr",
                "DAT_080064b4": "data_0_addr",
                "DAT_080064b8": "data_1_addr"
            },
            "code": "void send_data_0800640c(int data_type, uint32_t param_2, uint32_t param_3)\n{\n    uint32_t *data_ptr = (data_type == 0) ? (uint32_t *)DAT_080064b4 : (uint32_t *)DAT_080064b8;\n    uint32_t data_mask = (data_type == 0) ? 0xf89fffff : 0x7ffffff;\n    uint32_t data_value = (data_type == 0) ? (param_3 | param_2) : (param_2 | (param_3 << 3));\n    uint32_t *flag_ptr = (uint32_t *)(DAT_080064b0 + 0x30);\n    *flag_ptr |= (data_type == 0) ? 0x1 : 0x4;\n    uint32_t local_1c = 0x100;\n    uint32_t local_18 = 2;\n    uint32_t local_14 = 3;\n    uint32_t local_10 = 0;\n    uint32_t local_c = 0;\n    FUN_08006e88(data_ptr, &local_1c);\n    *(uint32_t *)(DAT_080064b0 + 8) = data_value | (*(uint32_t *)(DAT_080064b0 + 8) & data_mask);\n}",
            "called": [
                "FUN_08006e88"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800640c",
            "calling": [],
            "imported": false,
            "current_name": "send_data_0800640c"
        },
        "FUN_08008af0": {
            "renaming": {
                "FUN_08008af0": "swap_arguments_and_call_function_08008af0",
                "param_1": "first_arg",
                "param_2": "second_arg",
                "param_3": "third_arg",
                "param_4": "fourth_arg",
                "FUN_08008b00": "call_function_with_swapped_arguments"
            },
            "code": "void swap_arguments_and_call_function_08008af0(undefined4 first_arg, undefined4 second_arg, undefined4 third_arg, undefined4 fourth_arg)\n{\n  call_function_with_swapped_arguments(third_arg, fourth_arg, first_arg, second_arg);\n  return;\n}",
            "called": [
                "FUN_08008b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af0",
            "calling": [
                "FUN_08008b60",
                "FUN_08008b4c"
            ],
            "imported": false,
            "current_name": "swap_arguments_and_call_function_08008af0"
        },
        "FUN_08006e1a": {
            "renaming": {
                "FUN_08006e1a": "convert_param_to_int_08006e1a",
                "param_1": "input_char",
                "uVar1": "converted_int",
                "FUN_08006ac0": "convert_char_to_int"
            },
            "code": "int convert_param_to_int_08006e1a(char input_char) {\n    int converted_int = convert_char_to_int((int)input_char);\n    return converted_int;\n}",
            "called": [
                "FUN_08006ac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e1a",
            "calling": [],
            "imported": false,
            "current_name": "convert_param_to_int_08006e1a"
        },
        "FUN_080052ac": {
            "renaming": {
                "FUN_080052ac": "set_param_bits_080052ac",
                "param_1": "parameter",
                "DAT_080052d8": "dat_ptr_080052d8",
                "PTR_": "ptr_",
                "DAT_": "dat_",
                "ptr_": "ptr_",
                "dat_ptr_080052d8": "ptr_dat_080052d8",
                "ptr_param_bits": "ptr_param_bits",
                "mask": "mask"
            },
            "code": "void set_param_bits_080052ac(uint parameter) {\n    uint* PTR_DAT_080052d8 = (uint*)DAT_080052d8;\n    uint* PTR_param_bits = PTR_DAT_080052d8 + 0x14;\n    uint mask = 0xFFFFFAAF;\n    *PTR_param_bits = parameter | (*PTR_param_bits & mask);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052ac",
            "calling": [
                "FUN_0800583c",
                "FUN_08005778",
                "FUN_08005760"
            ],
            "imported": false,
            "current_name": "set_param_bits_080052ac"
        },
        "FUN_08008286": {
            "renaming": {
                "FUN_08008286": "check_validity_08008286",
                "uVar1": "result",
                "iVar2": "status",
                "FUN_08007e58": "check_status",
                "FUN_08007e84": "get_input_value",
                "FUN_08005900": "validate_input"
            },
            "code": "uint8_t check_validity_08008286(void)\n{\n  uint8_t result = 0xff;\n  int32_t status = check_status();\n  if (status != 0)\n  {\n    uint8_t input_value = get_input_value();\n    int32_t validation_status = validate_input(input_value);\n    if (validation_status == 0)\n    {\n      result = input_value;\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_08005900",
                "FUN_08007e58",
                "FUN_08007e84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008286",
            "calling": [
                "FUN_08003f34"
            ],
            "imported": false,
            "current_name": "check_validity_08008286"
        },
        "FUN_0800b5bc": {
            "renaming": {
                "FUN_0800b5bc": "do_nothing_0800b5bc"
            },
            "code": "\nvoid do_nothing_0800b5bc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b5bc",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_0800b5bc"
        },
        "FUN_08008b74": {
            "renaming": {
                "FUN_08008b74": "is_valid_input_08008b74",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "int is_valid_input_08008b74(uint32_t input1, int input2, uint32_t input3, int input4) {\n\tint is_input1_valid = ((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0);\n\tint is_input2_valid = ((input4 << 1) >> 0x15 != -1) || ((input3 | input4 << 0xc) == 0);\n\tif (is_input1_valid && is_input2_valid) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b74",
            "calling": [
                "FUN_080098d0"
            ],
            "imported": false,
            "current_name": "is_valid_input_08008b74"
        },
        "FUN_0800b524": {
            "renaming": {
                "FUN_0800b524": "insert_data_0800b524",
                "param_1": "data_type",
                "param_2": "data",
                "param_3": "data_size",
                "param_4": "data_flag",
                "puVar1": "ptr_ptr_data",
                "uVar2": "ptr_data_value",
                "uVar3": "flag",
                "iVar4": "ptr_data_a8",
                "iVar5": "ptr_data_148",
                "uVar6": "ptr_data_4",
                "iVar7": "ptr_data_offset"
            },
            "code": "int insert_data_0800b524(int data_type, int data, int data_size, int data_flag) {\\n\\\n    uint32_t* ptr_ptr_data = PTR_PTR_DAT_0800b5ac;\\n\\\n    do_nothing_0800b51c(*(uint32_t *)PTR_PTR_DAT_0800b5ac);\\n\\\n    int ptr_data_a8 = *(int *)PTR_PTR_DAT_0800b5a8;\\n\\\n    int ptr_data_148 = *(int *)(ptr_data_a8 + 0x148);\\n\\\n    if (ptr_data_148 == 0) {\\n\\\n        ptr_data_148 = ptr_data_a8 + 0x14c;\\n\\\n        *(int *)(ptr_data_a8 + 0x148) = ptr_data_148;\\n\\\n    }\\n\\\n    uint32_t ptr_data_4 = *(uint32_t *)(ptr_data_148 + 4);\\n\\\n    if ((int)ptr_data_4 < 0x20) {\\n\\\n        if (data_type != 0) {\\n\\\n            int ptr_data_offset = ptr_data_148 + ptr_data_4 * 4;\\n\\\n            *(int *)(ptr_data_offset + 0x88) = data_size;\\n\\\n            uint32_t flag = 1 << (ptr_data_4 & 0xff);\\n\\\n            *(uint32_t *)(ptr_data_148 + 0x188) = *(uint32_t *)(ptr_data_148 + 0x188) | flag;\\n\\\n            *(int *)(ptr_data_offset + 0x108) = data_flag;\\n\\\n            if (data_type == 2) {\\n\\\n                *(uint32_t *)(ptr_data_148 + 0x18c) = flag | *(uint32_t *)(ptr_data_148 + 0x18c);\\n\\\n            }\\n\\\n        }\\n\\\n        uint32_t ptr_data_value = *(uint32_t *)ptr_ptr_data;\\n\\\n        *(uint32_t *)(ptr_data_148 + (ptr_data_4 + 2) * 4) = data;\\n\\\n        *(uint32_t *)(ptr_data_148 + 4) = ptr_data_4 + 1;\\n\\\n        do_nothing_0800b520(ptr_data_value);\\n\\\n        return 0;\\n\\\n    }\\n\\\n    else {\\n\\\n        do_nothing_0800b520(*(uint32_t *)ptr_ptr_data);\\n\\\n        return -1;\\n\\\n    }\\n\\\n}",
            "called": [
                "FUN_0800b51c",
                "FUN_0800b520"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b524",
            "calling": [
                "FUN_0800b4d0"
            ],
            "imported": false,
            "current_name": "insert_data_0800b524"
        },
        "FUN_08005214": {
            "renaming": {
                "FUN_08005214": "do_nothing_08005214"
            },
            "code": "\nvoid do_nothing_08005214(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005214",
            "calling": [
                "FUN_08005250"
            ],
            "imported": false,
            "current_name": "do_nothing_08005214"
        },
        "FUN_08007ea4": {
            "renaming": {
                "FUN_08007ea4": "set_flag_08007ea4",
                "param_1": "flag",
                "DAT_08007f38": "FLAG_A",
                "DAT_08007f40": "FLAG_B",
                "DAT_08007f44": "FLAG_C",
                "DAT_08007f48": "FLAG_D",
                "DAT_08007f4c": "FLAG_E",
                "DAT_08007f50": "FLAG_F",
                "*(uint *)(DAT_08007f3c + 0x44)": "flag_A_ptr",
                "*(uint *)(DAT_08007f3c + 0x40)": "flag_B_ptr",
                "uint": "unsigned int",
                "|=": "bitwise OR assignment"
            },
            "code": "void set_flag_08007ea4(int flag) {\n    uint* flag_ptr = (flag == DAT_08007f38) ? (uint*)(DAT_08007f3c + 0x44) : (uint*)(DAT_08007f3c + 0x40);\n    uint flag_val = (flag == DAT_08007f38 || flag == DAT_08007f50) ? 0x10 : ((flag == DAT_08007f40) ? 0x20000 : ((flag == DAT_08007f44) ? 0x40000 : ((flag == DAT_08007f48) ? 0x80000 : 0x100000)));\n    *flag_ptr |= flag_val;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ea4",
            "calling": [
                "FUN_08008190"
            ],
            "imported": false,
            "current_name": "set_flag_08007ea4"
        },
        "FUN_08007756": {
            "renaming": {
                "FUN_08007756": "check_and_execute_08007756",
                "uVar1": "result",
                "FUN_08005a84": "get_status",
                "FUN_080076c8": "execute_task",
                "FUN_08007930": "perform_action",
                "FUN_08005a68": "update_status"
            },
            "code": "void check_and_execute_08007756(void)\n{\n  uint32_t result = get_status();\n  if ((result & 0x1ff) == 0)\n  {\n    execute_task(0x3c);\n  }\n  if ((result & 0xf) == 0)\n  {\n    perform_action();\n  }\n  update_status();\n  return;\n}",
            "called": [
                "FUN_08007930",
                "FUN_08005a68",
                "FUN_080076c8",
                "FUN_08005a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007756",
            "calling": [],
            "imported": false,
            "current_name": "check_and_execute_08007756"
        },
        "FUN_0800b520": {
            "renaming": {
                "FUN_0800b520": "do_nothing_0800b520"
            },
            "code": "\nvoid do_nothing_0800b520(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b520",
            "calling": [
                "FUN_0800b524"
            ],
            "imported": false,
            "current_name": "do_nothing_0800b520"
        },
        "FUN_0800423c": {
            "renaming": {
                "FUN_0800423c": "view_Grbl_settings_0800423c",
                "FUN_080036c6": "print_settings",
                "PTR_s_____view_Grbl_settings______view_0800424c": "settings_ptr"
            },
            "code": "void view_Grbl_settings_0800423c(){\n  print_settings(s_____view_Grbl_settings_0800423c______view_0800424c);\n  return;\n}",
            "called": [
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800423c",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "view_Grbl_settings_0800423c"
        },
        "FUN_08009264": {
            "renaming": {
                "FUN_08009264": "check_if_CY_is_null_08009264",
                "in_CY": "input_char",
                "FUN_080091fc": "get_input_char"
            },
            "code": "bool check_if_CY_is_null_08009264(void)\n{\n  char input_char;\n  input_char = get_input_char();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_080091fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009264",
            "calling": [
                "FUN_080029d8",
                "FUN_08003004"
            ],
            "imported": false,
            "current_name": "check_if_CY_is_null_08009264"
        },
        "FUN_08007e08": {
            "renaming": {
                "FUN_08007e08": "execute_three_functions_08007e08",
                "FUN_08007ad0": "execute_first_function",
                "FUN_08007d08": "execute_second_function",
                "FUN_08007da8": "execute_third_function"
            },
            "code": "void execute_three_functions_08007e08(void)\n{\n  execute_first_function();\n  execute_second_function();\n  execute_third_function();\n  return;\n}",
            "called": [
                "FUN_08007d08",
                "FUN_08007ad0",
                "FUN_08007da8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e08",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "execute_three_functions_08007e08"
        },
        "FUN_08002fac": {
            "renaming": {
                "FUN_08002fac": "are_ptrs_equal_08002fac",
                "PTR_DAT_08002fcc": "ptr_data1",
                "PTR_DAT_08002fd0": "ptr_data2"
            },
            "code": "bool are_ptrs_equal_08002fac(void)\n{\n  bool equal = (*PTR_DAT_08002fcc == *PTR_DAT_08002fd0);\n  return equal;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fac",
            "calling": [
                "FUN_08001e98"
            ],
            "imported": false,
            "current_name": "are_ptrs_equal_08002fac"
        },
        "FUN_080002b6": {
            "renaming": {
                "FUN_080002b6": "verify_param_080002b6",
                "param_1": "param",
                "uVar1": "random_high_bits",
                "uVar2": "high_bits",
                "bVar3": "is_greater",
                "lVar4": "random_val"
            },
            "code": "void verify_param_080002b6(uint64_t param) {\n  uint32_t high_bits = (uint32_t)(FUN_08000268() + (uint64_t)param >> 0x20);\n  do {\n    uint64_t random_val = FUN_08000268();\n    uint32_t random_high_bits = (uint32_t)(random_val >> 0x20);\n    bool is_greater = high_bits <= random_high_bits;\n    if (random_high_bits == high_bits) {\n      is_greater = (uint32_t)(FUN_08000268() + (uint64_t)param) <= (uint32_t)random_val;\n    }\n  } while (!is_greater);\n  return;\n}",
            "called": [
                "FUN_08000268"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002b6",
            "calling": [],
            "imported": false,
            "current_name": "verify_param_080002b6"
        }
    },
    "used_tokens": 255829,
    "layers": [
        [
            "FUN_0800192c",
            "FUN_08006950",
            "FUN_08008ba0",
            "FUN_08005984",
            "FUN_08007a10",
            "FUN_0800856c",
            "FUN_08008b00",
            "FUN_0800585c",
            "FUN_0800597c",
            "FUN_08009798",
            "FUN_08007930",
            "FUN_08000188",
            "FUN_08009318",
            "FUN_080018cc",
            "FUN_080079e0",
            "FUN_08006a58",
            "FUN_08005a84",
            "FUN_08008b10",
            "FUN_08008c30",
            "FUN_08007bf0",
            "FUN_08008590",
            "FUN_08007ad0",
            "FUN_080039a0",
            "FUN_08009204",
            "FUN_080029d8",
            "FUN_08007c5e",
            "FUN_08005760",
            "FUN_08008b24",
            "FUN_0800587c",
            "FUN_08008a02",
            "FUN_0800369c",
            "FUN_08005a98",
            "FUN_080044e8",
            "FUN_08006c9c",
            "FUN_0800195c",
            "FUN_08009214",
            "FUN_08004dd2",
            "FUN_08005778",
            "FUN_080028bc",
            "FUN_08006628",
            "FUN_0800738e",
            "FUN_080092c4",
            "FUN_08008250",
            "FUN_0800184c",
            "FUN_08006ce0",
            "FUN_08006d4a",
            "FUN_08000374",
            "FUN_080037fc",
            "FUN_0800a1bc",
            "FUN_0800525c",
            "FUN_080073d4",
            "FUN_08006dfe",
            "FUN_08006d66",
            "FUN_08006e88",
            "FUN_080036f0",
            "FUN_08002edc",
            "FUN_0800375c",
            "FUN_08009990",
            "FUN_08007e58",
            "FUN_080059f8",
            "FUN_08003f34",
            "FUN_080095b8",
            "FUN_08006cf6",
            "FUN_08002ef0",
            "FUN_08001d4c",
            "FUN_08000268",
            "FUN_08003778",
            "FUN_0800b3dc",
            "FUN_080046d0",
            "FUN_08006d72",
            "FUN_0800756c",
            "FUN_080001f8",
            "FUN_08002f74",
            "FUN_0800b3e8",
            "FUN_080096e8",
            "FUN_08006a18",
            "FUN_08002c18",
            "FUN_08006ac0",
            "FUN_08002ba8",
            "FUN_0800919c",
            "FUN_0800854c",
            "FUN_08008e44",
            "FUN_0800733e",
            "FUN_0800583c",
            "FUN_08001e98",
            "FUN_080069e4",
            "FUN_0800b2d4",
            "FUN_08008e3c",
            "FUN_08009654",
            "FUN_08007bc2",
            "FUN_08009410",
            "FUN_080035ec",
            "FUN_08006c70",
            "FUN_08006d98",
            "FUN_08005a68",
            "FUN_080079c0",
            "FUN_0800b2e0",
            "FUN_08002908",
            "FUN_08007c40",
            "FUN_080094c0",
            "FUN_08006b54",
            "FUN_08007e84",
            "FUN_080057e4",
            "FUN_08006d8a",
            "FUN_0800b2e8",
            "FUN_08007520",
            "FUN_08007884",
            "FUN_08004250",
            "FUN_08006dc4",
            "FUN_08007402",
            "FUN_08002870",
            "FUN_08000210",
            "FUN_08005900",
            "FUN_08002638",
            "FUN_080051b4",
            "FUN_080098d0",
            "FUN_08005c30",
            "FUN_0800056c",
            "FUN_08002f24",
            "FUN_0800981c",
            "FUN_080059b4",
            "FUN_08006c04",
            "FUN_08002e08",
            "FUN_08006680",
            "FUN_08000340",
            "thunk_FUN_08009990",
            "FUN_08004bf4",
            "FUN_08004d7c",
            "FUN_08009278",
            "FUN_080004fc",
            "FUN_08000220",
            "FUN_08005238",
            "FUN_08007da8",
            "FUN_08004148",
            "FUN_08004940",
            "FUN_08008a74",
            "FUN_08002fd4",
            "FUN_08002408",
            "FUN_08002a94",
            "FUN_08003618",
            "FUN_08007d08",
            "FUN_080091fc",
            "FUN_080058a0",
            "FUN_080036c6",
            "FUN_08008190",
            "FUN_080074c8",
            "FUN_0800b430",
            "FUN_08004030",
            "FUN_08005360",
            "FUN_08003980",
            "FUN_08006de0",
            "FUN_08007540",
            "FUN_080052dc",
            "FUN_080064ec",
            "FUN_08006ba0",
            "FUN_080003ec",
            "FUN_08002896",
            "FUN_080001ac",
            "FUN_08003740",
            "FUN_08000478",
            "FUN_08006d2e",
            "FUN_08007e1c",
            "FUN_0800adf0",
            "FUN_08003a74",
            "FUN_08006b00",
            "FUN_0800b4d0",
            "FUN_08007f54",
            "FUN_08003b98",
            "FUN_080024c4",
            "FUN_08002f40",
            "FUN_080025e8",
            "FUN_08005250",
            "FUN_08007430",
            "FUN_08007436",
            "FUN_08005814",
            "FUN_08005bdc",
            "FUN_080002f0",
            "FUN_0800778c",
            "FUN_08001ddc",
            "FUN_080069b4",
            "FUN_08009228",
            "FUN_08007c7c",
            "FUN_08007b70",
            "FUN_08004d2c",
            "FUN_080066cc",
            "FUN_080018fc",
            "FUN_080039bc",
            "FUN_0800618c",
            "FUN_08006998",
            "FUN_080004ac",
            "FUN_080078f4",
            "FUN_080041a0",
            "FUN_08008bf0",
            "FUN_08003a18",
            "FUN_08005790",
            "FUN_08007854",
            "FUN_08004900",
            "FUN_08004228",
            "FUN_080076c8",
            "FUN_08006a8c",
            "FUN_0800283a",
            "FUN_0800881c",
            "FUN_08004bc0",
            "FUN_08008b4c",
            "FUN_08004c2a",
            "FUN_0800826a",
            "FUN_08008b60",
            "FUN_08005324",
            "FUN_08000310",
            "FUN_08007a70",
            "FUN_08002978",
            "FUN_08003826",
            "FUN_0800923c",
            "FUN_08002afc",
            "FUN_08004c48",
            "FUN_080002a0",
            "FUN_08009250",
            "FUN_0800640c",
            "FUN_08008af0",
            "FUN_08006e1a",
            "FUN_080052ac",
            "FUN_08008286",
            "FUN_08008b74",
            "FUN_0800b524",
            "FUN_08007ea4",
            "FUN_08007756",
            "FUN_0800423c",
            "FUN_08009264",
            "FUN_08007e08",
            "FUN_08002fac",
            "FUN_080002b6"
        ],
        [
            "FUN_08008cd8",
            "FUN_080082d0",
            "FUN_08004e30",
            "FUN_080082d4",
            "FUN_080005b4",
            "FUN_08008cdc",
            "FUN_0800a5a0",
            "FUN_080053a0",
            "FUN_08001f00",
            "FUN_08008894",
            "FUN_08008eec",
            "FUN_0800af78",
            "FUN_0800a348",
            "FUN_08005cec",
            "FUN_08009054",
            "FUN_08008640",
            "FUN_08003004",
            "FUN_08001994",
            "FUN_08009b24",
            "FUN_08009d78"
        ]
    ],
    "locked_functions": []
}