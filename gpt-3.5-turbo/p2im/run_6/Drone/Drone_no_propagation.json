{
    "functions": {
        "FUN_080050fc": {
            "renaming": {
                "FUN_080050fc": "parse_string_080050fc",
                "param_1": "error_code",
                "param_2": "string_length",
                "param_3": "format_string",
                "param_4": "arg_list",
                "puVar1": "current_format_specifier_ptr",
                "iVar2": "field_width",
                "iVar3": "string_length_left",
                "puVar4": "return_val",
                "piVar5": "arg_list_ptr",
                "bVar6": "is_negative",
                "pbVar7": "current_char_ptr",
                "pbVar8": "format_string_ptr",
                "unaff_r9": "current_arg",
                "local_8c": "arg_list_ptr_copy",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "return_value",
                "local_7c": "field_width_copy",
                "local_74": "length_parsed",
                "local_70": "current_char_as_byte",
                "local_6f": "flags_space",
                "local_6e": "flags_plus",
                "local_45": "flags_zero",
                "local_30": "arg_list_copy"
            },
            "code": "int parse_string_080050fc(undefined4 *error_code, int *string_length, byte *format_string, int *arg_list)\n{\n  undefined *current_char;\n  int length_parsed;\n  int string_length_left;\n  undefined4 *current_arg;\n  int *arg_list_ptr;\n  bool is_negative;\n  byte *format_string_ptr;\n  byte current_format_specifier;\n  int field_width;\n  int precision;\n  uint flags;\n  byte current_char_as_byte;\n  undefined4 *return_val;\n\n  arg_list_ptr = arg_list;\n  if (((int)((uint)*(ushort *)(string_length + 3) << 0x18) < 0) && (string_length[4] == 0)) {\n    length_parsed = FUN_08005714(error_code,0x40);\n    *string_length = length_parsed;\n    string_length[4] = length_parsed;\n    if (length_parsed == 0) {\n      *error_code = 0xc;\n      return -1;\n    }\n    string_length[5] = 0x40;\n  }\n  length_parsed = 0;\n  flags = 0x20;\n  precision = 0x30;\n  current_char = format_string;\n\n  while(true) {\n    current_format_specifier = *current_char;\n    if (current_format_specifier == 0) {\n      if ((int)((uint)*(ushort *)(string_length + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return length_parsed;\n    }\n    if (current_format_specifier != 0x25) {\n      current_char++;\n      continue;\n    }\n    string_length_left = (int)current_char - (int)format_string;\n    if (string_length_left != 0) {\n      return_val = FUN_08005044(error_code, string_length, format_string, string_length_left);\n      if (return_val == (undefined4 *)-1) {\n        goto return_length_parsed;\n      }\n      length_parsed += string_length_left;\n    }\n    current_char++;\n    flags = 0;\n    while(true) {\n      field_width = FUN_08005614(PTR_DAT_080052d0, *current_char);\n      format_string_ptr = PTR_DAT_080052d4;\n      current_char++;\n      if (field_width == 0) {\n        break;\n      }\n      flags |= 1 << (field_width - (int)PTR_DAT_080052d0 & 0xffU);\n    }\n    if ((int)(flags << 0x1b) < 0) {\n      precision = 0x20;\n    }\n    if ((int)(flags << 0x1c) < 0) {\n      precision = 0x2b;\n    }\n    if (*current_char == 0x2a) {\n      arg_list_ptr++;\n      field_width = *arg_list;\n      arg_list = arg_list_ptr;\n      if (-1 < field_width) {\n        goto parse_field_width;\n      }\n      string_length_left = -field_width;\n      flags |= 2;\n    }\n    else {\n      is_negative = false;\n      field_width = string_length_left = 0;\n      while(true) {\n        if (9 < *current_char - 0x30) {\n          break;\n        }\n        field_width = field_width * 10 + (*current_char - 0x30);\n        is_negative = true;\n        current_char++;\n      }\n      if (is_negative) {\n        goto parse_field_width;\n      }\n    }\n    if (*current_char == 0x2e) {\n      if (current_char[1] == 0x2a) {\n        current_char += 2;\n        arg_list_ptr++;\n        field_width = *arg_list;\n        arg_list = arg_list_ptr;\n        if (field_width < 0) {\n          field_width = -1;\n        }\n      }\n      else {\n        is_negative = false;\n        field_width = 0;\n        while(true) {\n          current_char++;\n          if (9 < *current_char - 0x30) {\n            break;\n          }\n          field_width = field_width * 10 + (*current_char - 0x30);\n          is_negative = true;\n        }\n        if (is_negative) {\n          field_width = -field_width;\n        }\n      }\n    }\n    field_width = FUN_08005614(PTR_DAT_080052d4, *current_char, 3);\n    if (field_width != 0) {\n      current_char++;\n      flags |= 0x40 << (field_width - (int)format_string_ptr & 0xffU);\n    }\n    current_char_as_byte = *current_char;\n    current_char++;\n    field_width = FUN_08005614(PTR_s_efgEFG_080052d8, current_char_as_byte, 6);\n    if (field_width == 0) {\n      return_val = (undefined4 *)FUN_080053d4(error_code, &flags, string_length, DAT_080052e0, &arg_list);\n    }\n    else {\n      return_val = error_code;\n      if (DAT_080052dc == 0) {\n        arg_list = (int *)(((int)arg_list + 7U & 0xfffffff8) + 8);\n        return_val = current_arg;\n        goto parse_next_format_specifier;\n      }\n    }\n    if (return_val == (undefined4 *)-1) {\n      goto return_length_parsed;\n    }\n    length_parsed += (int)return_val;\n    current_char = format_string_ptr;\n    current_arg = return_val;\n  parse_field_width:\n    flags |= 4;\n    precision = field_width;\n  parse_next_format_specifier:\n    ;\n  }\n\n  return length_parsed;\n\nreturn_length_parsed:\n  if ((int)((uint)*(ushort *)(string_length + 3) << 0x19) < 0) {\n    return -1;\n  }\n  return length_parsed;\n}\n",
            "called": [
                "FUN_08005044",
                "FUN_080053d4",
                "FUN_08005614",
                "FUN_08005714"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080050fc",
            "calling": [
                "FUN_08004ffc"
            ],
            "imported": false,
            "current_name": "parse_string_080050fc"
        },
        "FUN_08003320": {
            "renaming": {
                "FUN_08003320": "save_parameter_to_pointer_08003320",
                "param_1": "parameter"
            },
            "code": "void save_parameter_to_pointer_08003320(void* parameter){\n  *(void**)PTR_DAT_08003328 = parameter;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003320",
            "calling": [
                "FUN_08002ea0",
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "save_parameter_to_pointer_08003320"
        },
        "FUN_08004410": {
            "renaming": {
                "FUN_08004410": "send_data_to_server_08004410",
                "param_1": "server_address",
                "param_2": "data_length",
                "param_3": "data",
                "local_10": "server_data_ptr",
                "local_c": "combined_data_length",
                "uStack_8": "data_ptr"
            },
            "code": "void send_data_to_server_08004410(undefined4 server_address, uint16_t data_length, undefined4 data)\n{\n  undefined4 server_data_ptr;\n  uint16_t combined_data_length;\n  undefined4 data_ptr;\n  \n  server_data_ptr = *(undefined4 *)PTR_DAT_08004430;\n  combined_data_length = data_length & 0xffff0000 | (uint16_t)*(ushort *)(PTR_DAT_08004430 + 4);\n  data_ptr = data;\n  send_packet_to_server(0x6c, &server_data_ptr, 6);\n  return;\n}",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004410",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "send_data_to_server_08004410"
        },
        "FUN_08001264": {
            "renaming": {
                "FUN_08001264": "process_bits_08001264",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "lookup_table_mask",
                "uVar2": "DAT_08001414",
                "uVar3": "DAT_08001418",
                "uVar4": "output_word",
                "uVar5": "input_bit",
                "uVar6": "input_word",
                "iVar7": "output_word_index",
                "uVar8": "bit_index",
                "uVar9": "output_word_mask_value",
                "uVar10": "lookup_table_value",
                "unaff_r10": "lookup_table_ptr",
                "iVar11": "lookup_table_index",
                "DAT_08001404": "lookup_table_mask",
                "DAT_08001408": "lookup_table",
                "DAT_0800140c": "output",
                "DAT_08001410": "lookup_table_value",
                "DAT_08001414": "uVar2",
                "DAT_08001418": "uVar3",
                "DAT_0800141c": "lookup_table_mask_value",
                "DAT_08001420": "lookup_table_mask_word_value"
            },
            "code": "void process_bits_08001264(uint *DAT_0800140c, uint *input)\n{\n  uint *DAT_0800140c_ptr;\n  uint input_bit;\n  uint input_word;\n  uint DAT_0800140c_word;\n  uint bit_index = 0;\n  uint DAT_0800140c_word_index = 0;\n  uint input_word_index = 0;\n  uint input_word_mask = 0;\n  uint DAT_0800140c_word_mask = 0;\n  uint bit_mask = 0;\n  uint *DAT_08001408_ptr;\n  uint DAT_08001410;\n  int DAT_0800140c_word_bit_index;\n  int DAT_08001408_index;\n  uint *DAT_08001408;\n  uint *DAT_08001404;\n  uint DAT_0800141c;\n  uint DAT_08001408_word_index;\n  uint DAT_08001408_word_value;\n  uint DAT_08001420;\n\n  while (bit_index < 16)\n  {\n    bit_mask = 1 << (bit_index & 0xff);\n    input_bit = bit_mask & *input;\n    if (input_bit == bit_mask)\n    {\n      input_word = input[1];\n      if (input_word == 0x12)\n      {\n        DAT_0800140c_word = input[3] + 0xc;\n      }\n      else if (input_word < 0x13)\n      {\n        if (input_word == 2)\n        {\n          DAT_0800140c_word = input[3] + 8;\n        }\n        else if (input_word < 3)\n        {\n          if (input_word == 0) goto LAB_080013be;\n          if (input_word == 1)\n          {\n            DAT_0800140c_word = input[3];\n          }\n        }\n        else if (input_word == 3)\n        {\n          DAT_0800140c_word = 0;\n        }\n        else if (input_word == 0x11)\n        {\n          DAT_0800140c_word = input[3] + 4;\n        }\n      }\n      else\n      {\n        if (input_word != 0x14)\n        {\n          if (0x14 < input_word)\n          {\n            if ((input_word != 0x10) && (DAT_08001410 = 0x18, input_word != 0x0f)) goto LAB_080013b8;\n          }\n          else if (input_word != 0x13)\n          {\n            DAT_08001410 = 0x1c;\n            goto LAB_080013b8;\n          }\n        }\nLAB_080013be:\n        DAT_0800140c_word = input[2];\n        if (DAT_0800140c_word == 0)\n        {\n          DAT_0800140c_word = 4;\n        }\n        else\n        {\n          if (DAT_0800140c_word == 1)\n          {\n            DAT_0800140c_word_mask = bit_mask;\n          }\n          if (DAT_0800140c_word != 1)\n          {\n            DAT_0800140c_word_mask = bit_mask << 4;\n          }\n          DAT_0800140c_word = 8;\n        }\n      }\nLAB_080012a8:\n      if (input_bit < 0x100)\n      {\n        DAT_0800140c_ptr = DAT_0800140c;\n        DAT_0800140c_word_bit_index = bit_index << 2;\n      }\n      else\n      {\n        DAT_0800140c_ptr = DAT_0800140c + 1;\n        DAT_0800140c_word_bit_index = (bit_index + 0x3ffffff8) << 2;\n      }\n      if (0xff < input_bit)\n      {\n        DAT_0800140c_word_mask = 0x10 << (DAT_0800140c_word_bit_index & 0xff);\n      }\n      DAT_0800140c_word_mask_value = ~(0xf << (DAT_0800140c_word_bit_index & 0xff));\n      DAT_0800140c_word = (DAT_0800140c[*DAT_0800140c_ptr] & DAT_0800140c_word_mask_value) | (DAT_0800140c_word << (DAT_0800140c_word_bit_index & 0xff));\n      *DAT_0800140c_ptr = DAT_0800140c_word;\n      DAT_08001408_ptr = (uint *)input[1];\n      if (((uint)DAT_08001408_ptr & 0x10000000) != 0)\n      {\n        *(uint *)(DAT_08001408 + 0x18) |= 1;\n        DAT_08001408_index = (bit_index & 3) << 2;\n        if (DAT_0800140c == DAT_0800140c)\n        {\n          DAT_08001408_word_index = 0;\n        }\n        else if (DAT_0800140c == DAT_0800140c + 0x100)\n        {\n          DAT_08001408_word_index = 1;\n        }\n        else if (DAT_0800140c == DAT_0800140c + 0x200)\n        {\n          DAT_08001408_word_index = 2;\n        }\n        else if (DAT_0800140c == DAT_0800140c + 0x300)\n        {\n          DAT_08001408_word_index = 3;\n        }\n        else\n        {\n          DAT_08001408_word_index = 4;\n        }\n        DAT_08001408 = (uint *)(&DAT_40010008 + (bit_index & 0xfffffffc));\n        DAT_08001408_word_value = DAT_08001408[DAT_08001408_word_index];\n        DAT_08001404 = (uint *)(&DAT_40010008 + (bit_index & 0xfffffffc));\n        DAT_08001420 = ~(0xf << DAT_08001408_index);\n        DAT_0800141c = DAT_08001404[DAT_08001408_word_index] & DAT_08001420;\n        DAT_0800141c |= DAT_08001408_word_value & (0xf << DAT_08001408_index);\n        DAT_08001404[DAT_08001408_word_index] = DAT_0800141c;\n        if (((uint)DAT_08001408_ptr & 0x10000) == 0)\n        {\n          DAT_08001410 = *DAT_08001408 & ~input_bit;\n        }\n        else\n        {\n          DAT_08001410 = *DAT_08001408 | input_bit;\n        }\n        *DAT_08001408 = DAT_08001410;\n        if (((uint)DAT_08001408_ptr & 0x20000) == 0)\n        {\n          DAT_08001410 = DAT_08001408[1] & ~input_bit;\n        }\n        else\n        {\n          DAT_08001410 = DAT_08001408[1] | input_bit;\n        }\n        DAT_08001408[1] = DAT_08001410;\n        if (((uint)DAT_08001408_ptr & 0x100000) == 0)\n        {\n          DAT_08001410 = DAT_08001408[2] & ~input_bit;\n        }\n        else\n        {\n          DAT_08001410 = DAT_08001408[2] | input_bit;\n        }\n        DAT_08001408[2] = DAT_08001410;\n        if (((uint)DAT_08001408_ptr & 0x200000) == 0)\n        {\n          DAT_08001410 = DAT_08001408[3] & ~input_bit;\n        }\n        else\n        {\n          DAT_08001410 = input_bit | DAT_08001408[3];\n        }\n        DAT_08001408[3] = DAT_08001410;\n      }\n    }\n    bit_index++;\n    if (bit_index == 0x10)\n    {\n      return;\n    }\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001264",
            "calling": [
                "FUN_08004d48",
                "FUN_08004e7c",
                "FUN_0800458c",
                "FUN_08004e14"
            ],
            "imported": false,
            "current_name": "process_bits_08001264"
        },
        "FUN_08002ea0": {
            "renaming": {
                "FUN_08002ea0": "initialize_and_execute_program_08002ea0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "extraout_r1": "return_value",
                "FUN_08002ad0": "initialize_first_module",
                "FUN_08002cb0": "initialize_second_module",
                "FUN_08003314": "set_global_variable",
                "DAT_08002ebc": "global_variable"
            },
            "code": "void initialize_and_execute_program_08002ea0(undefined4 arg1, undefined4 arg2, undefined4 arg3, undefined4 arg4)\n{\n  undefined4 return_value;\n  initialize_first_module();\n  initialize_second_module();\n  set_DAT_08002ebc(DAT_08002ebc);\n  execute_program(0,return_value,arg3,arg4);\n  return;\n}",
            "called": [
                "FUN_08002cb0",
                "FUN_08002ad0",
                "FUN_08003314",
                "FUN_08003320"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ea0",
            "calling": [
                "FUN_08004194"
            ],
            "imported": false,
            "current_name": "initialize_and_execute_program_08002ea0"
        },
        "FUN_080070b0": {
            "renaming": {
                "FUN_080070b0": "convert_to_64_bit_080070b0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "uVar8": "result",
                "exponent": "exponent",
                "mantissa": "mantissa",
                "mask": "mask"
            },
            "code": "ulonglong convert_to_64_bit_080070b0(uint input1, uint input2, undefined4 input3){\n  undefined4 temp1;\n  uint temp2;\n  undefined4 temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  undefined8 temp7;\n  ulonglong result;\n  temp6 = (input2 << 1) >> 0x15;\n  uint exponent = temp6 - 0x3ff;\n  uint mantissa = input2;\n  if ((int)exponent < 0x14) {\n    if ((int)exponent < 0) {\n      if ((input2 & 0x7fffffff | input1) == 0) {\n        return CONCAT44(input2,input1);\n      }\n      mantissa = input2 & 0xfffff | input1;\n      temp1 = *(undefined4 *)(PTR_DAT_080071b8 + ((int)input2 >> 0x1f) * -8);\n      temp3 = *(undefined4 *)((int)(PTR_DAT_080071b8 + ((int)input2 >> 0x1f) * -8) + 4);\n      temp7 = FUN_0800016c(input1,(-mantissa | mantissa) >> 0xc & 0x80000 | input2 & 0xfffe0000,temp1,temp3,input1,input2,input3);\n      result = FUN_08000168((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp1,temp3);\n      return result & 0xffffffff |\n             (ulonglong)((uint)(result >> 0x20) & 0x7fffffff | input2 & 0x80000000) << 0x20;\n    }\n    temp6 = DAT_080071bc >> (exponent & 0xff);\n    if ((input2 & temp6 | input1) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    temp6 = temp6 >> 1;\n    temp4 = input2 & temp6 | input1;\n    if (temp4 != 0) {\n      if (exponent == 0x13) {\n        temp4 = 0x80000000;\n      }\n      else {\n        temp4 = 0;\n      }\n      mantissa = 0x40000 >> (exponent & 0xff) | input2 & ~temp6;\n    }\n  }\n  else {\n    if (0x33 < (int)exponent) {\n      if (exponent != 0x400) {\n        return CONCAT44(input2,input1);\n      }\n      result = FUN_0800016c();\n      return result;\n    }\n    temp6 = temp6 - 0x413;\n    uint mask = 0xffffffff >> (temp6 & 0xff);\n    if ((input1 & mask) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    mask = mask >> 1;\n    temp4 = input1;\n    if ((input1 & mask) != 0) {\n      temp4 = 0x40000000 >> (temp6 & 0xff) | input1 & ~mask;\n    }\n  }\n  temp1 = *(undefined4 *)(PTR_DAT_080071b8 + ((int)input2 >> 0x1f) * -8);\n  temp3 = *(undefined4 *)((int)(PTR_DAT_080071b8 + ((int)input2 >> 0x1f) * -8) + 4);\n  temp7 = FUN_0800016c(temp4,mantissa,temp1,temp3,input1,input2,input3);\n  result = FUN_08000168((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp1,temp3);\n  return result;\n}",
            "called": [
                "FUN_0800016c",
                "FUN_08000168"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080070b0",
            "calling": [
                "FUN_08005900"
            ],
            "imported": false,
            "current_name": "convert_to_64_bit_080070b0"
        },
        "FUN_08002998": {
            "renaming": {
                "FUN_08002998": "do_nothing_08002998"
            },
            "code": "\nvoid do_nothing_08002998(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002998",
            "calling": [
                "FUN_0800299a"
            ],
            "imported": false,
            "current_name": "do_nothing_08002998"
        },
        "FUN_08001424": {
            "renaming": {
                "FUN_08001424": "update_value_at_address_08001424",
                "param_1": "address",
                "param_2": "value",
                "param_3": "shift_bits",
                "*(int *)(param_1 + 0x10)": "*(int *)(address + 0x10)"
            },
            "code": "void update_value_at_address_08001424(int address, int value, int shift_bits){\n  if(shift_bits == 0){\n    value <<= 16;\n  }\n  *(int *)(address + 0x10) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001424",
            "calling": [
                "FUN_08003f3c",
                "FUN_0800458c",
                "FUN_08004490"
            ],
            "imported": false,
            "current_name": "update_value_at_address_08001424"
        },
        "FUN_08001028": {
            "renaming": {
                "FUN_08001028": "is_end_of_string_08001028",
                "in_CY": "current_char",
                "FUN_08001004": "execute_predefined_function"
            },
            "code": "bool is_end_of_string_08001028(void)\\n{\\n  char current_char;\\n  execute_predefined_function();\\n  return current_char == \"\\0\";\\n}",
            "called": [
                "FUN_08001004"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001028",
            "calling": [
                "FUN_0800483c",
                "FUN_08002ee8",
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "is_end_of_string_08001028"
        },
        "FUN_08005900": {
            "renaming": {
                "FUN_08005900": "analyze_data_08005900",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "puVar2": "data_pointer",
                "iVar3": "result_1",
                "iVar4": "result_2",
                "piVar5": "result_pointer",
                "puVar6": "status_pointer",
                "uVar7": "high_32_bits",
                "uVar8": "low_32_bits",
                "lVar9": "return_value",
                "local_50": "status",
                "local_4c": "message_pointer",
                "local_48": "input_1_copy",
                "uStack_44": "input_2_copy",
                "local_40": "input_3_copy",
                "uStack_3c": "input_4_copy",
                "local_38": "final_status",
                "local_30": "temp_result"
            },
            "code": "\n/* WARNING: Could not reconcile some variable overlaps */\n\nlonglong analyze_data_08005900(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  char cVar1;\n  undefined *data_pointer;\n  int result_1;\n  int result_2;\n  int *result_pointer;\n  undefined4 *status_pointer;\n  undefined4 high_32_bits;\n  undefined4 low_32_bits;\n  longlong return_value;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  undefined4 status;\n  undefined *message_pointer;\n  undefined4 input_1_copy;\n  undefined4 input_2_copy;\n  undefined4 input_3_copy;\n  undefined4 input_4_copy;\n  undefined8 final_status;\n  int temp_result;\n  \n  return_value = FUNC_08006228();\n  data_pointer = PTR_DAT_08005ba8;\n  high_32_bits = (undefined4)((ulonglong)return_value >> 0x20);\n  low_32_bits = (undefined4)return_value;\n  cVar1 = *PTR_DAT_08005ba8;\n  if (cVar1 == -1) {\n    return return_value;\n  }\n  temp_result = FUN_08000a04(input_3,input_4,input_3,input_4);\n  if (temp_result != 0) {\n    return return_value;\n  }\n  result_1 = FUN_08000a04(input_1,input_2,input_1,input_2);\n  input_1_copy = input_1;\n  input_2_copy = input_2;\n  input_3_copy = input_3;\n  input_4_copy = input_4;\n  if (result_1 == 0) {\n    result_2 = FUN_080009a0(input_1,input_2,0,0);\n    if (result_2 != 0) {\n      temp_result = FUN_080009a0(input_3,input_4,0,0);\n      if (temp_result != 0) {\n        status = 1;\n        message_pointer = PTR_DAT_08005bac;\n        final_status = 0;\n        temp_result = result_1;\n        if (cVar1 != '\\0') {\n          final_status = (ulonglong)DAT_08005bb0 << 0x20;\n          goto LAB_080059d0;\n        }\n        goto LAB_08005978;\n      }\n      result_1 = FUN_08007092(input_3,input_4);\n      if (result_1 == 0) {\n        return return_value;\n      }\n      result_1 = FUN_080009b4(input_3,input_4,0,0);\n      if (result_1 == 0) {\n        return return_value;\n      }\n      status = 1;\n      message_pointer = PTR_DAT_08005bac;\n      cVar1 = *data_pointer;\n      if (cVar1 == '\\0') goto LAB_08005a22;\n      final_status = (ulonglong)DAT_08005bb4 << 0x20;\nLAB_08005a32:\n      if (cVar1 != '\\x02') goto LAB_08005978;\n      goto LAB_08005a34;\n    }\n    result_1 = FUN_08007092(low_32_bits,high_32_bits);\n    if (((result_1 != 0) || (result_2 = FUN_08007092(input_1,input_2), result_2 == 0)) ||\n       (result_2 = FUN_08007092(input_3,input_4), result_2 == 0)) {\n      result_1 = FUN_080009a0(low_32_bits,high_32_bits,0,0);\n      if (result_1 == 0) {\n        return return_value;\n      }\n      result_1 = FUN_08007092(input_1,input_2);\n      if (result_1 == 0) {\n        return return_value;\n      }\n      result_1 = FUN_08007092(input_3,input_4);\n      if (result_1 == 0) {\n        return return_value;\n      }\n      status = 4;\n      message_pointer = PTR_DAT_08005bac;\n      temp_result = 0;\n      final_status._0_4_ = 0;\n      final_status._4_4_ = 0;\n      goto LAB_08005afa;\n    }\n    temp_result = FUN_08000a04(low_32_bits,high_32_bits);\n    cVar1 = *data_pointer;\n    if (temp_result != 0) {\n      message_pointer = PTR_DAT_08005bac;\n      status = 1;\n      temp_result = result_1;\n      if (cVar1 != '\\0') {\n        final_status = FUN_08000724(0,0,0,0);\n        goto LAB_08005a32;\n      }\nLAB_08005a22:\n      status = 1;\n      final_status = 0;\n      message_pointer = PTR_DAT_08005bac;\n      goto LAB_08005978;\n    }\n    message_pointer = PTR_DAT_08005bac;\n    status = 3;\n    if (cVar1 == '\\0') {\n      final_status._0_4_ = 0xe0000000;\n      final_status._4_4_ = DAT_08005bb8;\n      result_1 = FUN_080009b4(input_1,input_2,0,0);\n      if (result_1 != 0) {\n        uVar10 = FUN_080004d0(input_3,input_4,0,DAT_08005bbc);\n        uVar11 = FUN_080070b0();\n        result_1 = FUN_080009a0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                             (int)((ulonglong)uVar11 >> 0x20));\n        if (result_1 == 0) {\n          final_status._0_4_ = 0xe0000000;\n          final_status._4_4_ = DAT_08005bc0;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      result_1 = FUN_0800709e(&status);\n      if (result_1 != 0) goto LAB_080059d0;\n    }\n    else {\n      final_status._0_4_ = 0;\n      final_status._4_4_ = DAT_08005bc4;\n      result_1 = FUN_080009b4(input_1,input_2,0,0);\n      if (result_1 != 0) {\n        uVar10 = FUN_080004d0(input_3,input_4,0,DAT_08005bbc);\n        uVar11 = FUN_080070b0();\n        result_1 = FUN_080009a0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                             (int)((ulonglong)uVar11 >> 0x20));\n        if (result_1 == 0) {\n          final_status._0_4_ = 0;\n          final_status._4_4_ = DAT_08005bb4;\n        }\n      }\nLAB_08005afa:\n      if (*data_pointer != '\\x02') goto LAB_08005b98;\n    }\n    status_pointer = (undefined4 *)FUN_080072ac();\n    low_32_bits = 0x22;\n  }\n  else {\n    result_1 = FUN_080009a0(input_3,input_4,0,0);\n    if (result_1 == 0) {\n      return return_value;\n    }\n    status = 1;\n    message_pointer = PTR_DAT_08005bac;\n    final_status = (ulonglong)DAT_08005bb0 << 0x20;\n    if (cVar1 == '\\x02') {\n      return (ulonglong)DAT_08005bb0 << 0x20;\n    }\nLAB_08005978:\n    result_1 = FUN_0800709e(&status);\n    if (result_1 != 0) goto LAB_080059d0;\nLAB_08005a34:\n    status_pointer = (undefined4 *)FUN_080072ac();\n    low_32_bits = 0x21;\n  }\n  *status_pointer = low_32_bits;\nLAB_080059d0:\n  if (temp_result != 0) {\n    result_pointer = (int *)FUN_080072ac();\n    *result_pointer = temp_result;\n  }\n  return final_status;\n}\n\n",
            "called": [
                "FUN_080072ac",
                "FUN_08000a04",
                "FUN_080070b0",
                "FUN_080009a0",
                "FUN_08007092",
                "FUN_080004d0",
                "FUN_08006228",
                "FUN_08000724",
                "FUN_0800709e",
                "FUN_080009b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005900",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "analyze_data_08005900"
        },
        "FUN_080006ac": {
            "renaming": {
                "FUN_080006ac": "calculate_result_080006ac",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "bit",
                "unaff_r4": "temp_5",
                "uVar2": "temp_6",
                "uVar3": "temp_7",
                "in_r12": "temp_8",
                "bVar4": "condition_1",
                "mask": "mask",
                "bit_check": "bit_check",
                "result_1": "result_1",
                "result_2": "result_2",
                "temp_1": "temp_1",
                "temp_2": "temp_2",
                "temp_3": "temp_3",
                "temp_4": "temp_4",
                "temp": "temp",
                "condition_2": "condition_2",
                "condition_3": "condition_3"
            },
            "code": "ulonglong calculate_result_080006ac(uint input_1, uint input_2, uint input_3, uint input_4) {\n  uint temp_1 = input_1, temp_2 = input_2, temp_3 = input_3, temp_4 = input_4;\n  uint mask = 0x80000000;\n  uint bit_check = 0x100000;\n  uint result_1 = 0, result_2 = 0;\n  bool condition_1 = (input_1 | (input_2 << 1)) == 0;\n  bool condition_2 = (input_3 | (input_4 << 1)) == 0;\n  bool condition_3 = false;\n  if (input_4 >> 0x14 != in_r12 && input_4 >> 0x14 != in_r12) {\n    if (!condition_1) {\n      condition_1 = condition_2;\n    }\n    if (condition_1) {\n      return (ulonglong)((input_2 ^ input_4) & mask) << 0x20;\n    }\n    if (input_4 == 0) {\n      uint temp = input_2 & mask;\n      do {\n        uint bit = input_1 & mask;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(bit != 0);\n      } while ((input_2 & bit_check) == 0);\n      input_2 = input_2 | temp;\n      if (input_4 >> 0x14 != 0) {\n        return CONCAT44(input_2, input_1);\n      }\n    }\n    do {\n      uint bit = input_3 & mask;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(bit != 0);\n    } while ((input_4 & bit_check) == 0);\n    return CONCAT44(input_2, input_1);\n  }\n  if (condition_1) {\n    temp_2 = input_4;\n    temp_1 = input_3;\n  }\n  if (!condition_1) {\n    condition_3 = condition_2;\n  }\n  if (((!condition_3) && ((input_4 >> 0x14 != in_r12 || ((input_1 | (input_2 << 0xc)) == 0)))) && ((input_4 >> 0x14 != in_r12 || (temp_1 = input_3, temp_2 = input_4, (input_3 | (input_4 << 0xc)) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & mask | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp_2, temp_1) | 0x7ff8000000000000;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006ac",
            "calling": [
                "FUN_080004d0"
            ],
            "imported": false,
            "current_name": "calculate_result_080006ac"
        },
        "FUN_08001828": {
            "renaming": {
                "FUN_08001828": "process_data_08001828",
                "param_1": "data_ptr",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "param_5": "buffer",
                "param_6": "buffer_size",
                "param_7": "arg4",
                "iVar1": "num_iterations",
                "iVar2": "current_time",
                "puVar3": "data",
                "uVar4": "original_value"
            },
            "code": "uint32_t process_data_08001828(uint32_t **data_ptr, uint32_t arg1, uint32_t arg2, uint32_t arg3, uint8_t *buffer, uint16_t buffer_size, uint32_t arg4)\n{\n    int num_iterations = 0;\n    int start_time = get_time();\n    uint32_t *data = *data_ptr;\n\n    if (*(char *)((int)data_ptr + 0x35) == ' ') {\n        if (buffer == NULL || buffer_size == 0) {\n            return 1;\n        }\n        num_iterations = get_iterations();\n        do {\n            if ((~data[6] & 2) != 0) {\n                if (*(char *)(data_ptr + 0xd) == '\\x01') {\n                    return 2;\n                }\n                uint32_t original_value = *data;\n                *(undefined *)(data_ptr + 0xd) = 1;\n                *data = original_value & 0xfffff7ff;\n                *(undefined *)((int)data_ptr + 0x35) = 0x21;\n                *(undefined *)((int)data_ptr + 0x36) = 0x40;\n                data_ptr[0xe] = NULL;\n                int result = process_data_08001828(data_ptr, arg1, arg2, arg3, arg4);\n                if (result != 0) {\n                    *(undefined *)(data_ptr + 0xd) = 0;\n                    if (data_ptr[0xe] == (uint32_t *)0x4) {\n                        return 1;\n                    }\n                    return 3;\n                }\n                goto end_of_loop;\n            }\n            int current_time = get_time();\n        } while ((uint32_t)(current_time - start_time) < 0x2711);\n        *(undefined *)(data_ptr + 0xd) = 0;\n        *(undefined *)((int)data_ptr + 0x35) = 0x20;\n    }\n    return 2;\n\nend_of_loop:\n    int result = process_data_08001828(data_ptr, arg4);\n    if (result == 0) {\n        **data_ptr = **data_ptr | 0x200;\n        *(undefined *)(data_ptr + 0xd) = 0;\n        *(undefined *)((int)data_ptr + 0x35) = 0x20;\n        *(undefined *)((int)data_ptr + 0x36) = 0;\n        return 0;\n    }\n    if (data_ptr[0xe] == (uint32_t *)0x4) {\n        **data_ptr = **data_ptr | 0x200;\n        return 1;\n    }\n    return 3;\n}",
            "called": [
                "FUN_08001530",
                "FUN_080014e2",
                "FUN_0800115c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001828",
            "calling": [
                "FUN_0800403c"
            ],
            "imported": false,
            "current_name": "process_data_08001828"
        },
        "FUN_08004c64": {
            "renaming": {
                "FUN_08004c64": "initialize_data_buffer_08004c64",
                "puVar1": "data_buffer",
                "iVar2": "index"
            },
            "code": "void initialize_data_buffer_08004c64(void)\n{\n  undefined *data_buffer = PTR_DAT_08004c6c;\n  int index = 0;\n  *(undefined2 *)(PTR_DAT_08004c6c + 0x800) = 0;\n  *(undefined2 *)(data_buffer + 0x802) = 0;\n  *(undefined2 *)(data_buffer + 0x804) = 0;\n  do {\n    data_buffer[index] = 0;\n    index++;\n  } while (index != 0x800);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c64",
            "calling": [
                "FUN_08004c70"
            ],
            "imported": false,
            "current_name": "initialize_data_buffer_08004c64"
        },
        "FUN_0800016c": {
            "renaming": {
                "FUN_0800016c": "calculate_result_0800016c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "shifted_input_4",
                "bVar2": "lsb_of_result",
                "uVar3": "sum_of_input_1_and_shifted_input_3",
                "uVar4": "sum_of_input_2_and_shifted_input_4",
                "uVar5": "masked_input_2",
                "iVar6": "shifted_input_2",
                "uVar7": "masked_input_1",
                "uVar8": "masked_input_3",
                "uVar9": "mantissa_of_result",
                "uVar10": "exponent_of_result",
                "uVar11": "shifted_mantissa",
                "uVar12": "shifted_sum",
                "bVar13": "inputs_are_equal",
                "bVar14": "is_zero",
                "bVar15": "overflow"
            },
            "code": "\nulonglong calculate_result_0800016c(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int shifted_input_4;\n  byte lsb_of_result;\n  uint sum_of_input_1_and_shifted_input_3;\n  uint sum_of_input_2_and_shifted_input_4;\n  uint masked_input_2;\n  int shifted_input_2;\n  uint masked_input_1;\n  uint masked_input_3;\n  uint mantissa_of_result;\n  uint exponent_of_result;\n  uint shifted_mantissa;\n  uint shifted_sum;\n  bool inputs_are_equal;\n  bool is_zero;\n  bool overflow;\n  \n  masked_input_1 = input_2 << 1;\n  mantissa_of_result = input_4 << 1;\n  inputs_are_equal = ((input_2 ^ input_4) & 0x7fffffff) == 0;\n  is_zero = inputs_are_equal && input_1 == input_3;\n  if (!inputs_are_equal || input_1 != input_3) {\n    is_zero = (masked_input_1 | input_1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = (mantissa_of_result | input_3) == 0;\n  }\n  shifted_input_2 = (int)masked_input_1 >> 0x15;\n  if (!is_zero) {\n    is_zero = shifted_input_2 == -1;\n  }\n  shifted_input_4 = (int)mantissa_of_result >> 0x15;\n  if (!is_zero) {\n    is_zero = shifted_input_4 == -1;\n  }\n  if (is_zero) {\n    if (shifted_input_2 == -1 || shifted_input_4 == -1) {\n      mantissa_of_result = input_4;\n      masked_input_1 = input_3;\n      if (shifted_input_2 == -1) {\n        mantissa_of_result = input_2;\n        masked_input_1 = input_1;\n      }\n      if (shifted_input_2 != -1 || shifted_input_4 != -1) {\n        input_3 = masked_input_1;\n        input_4 = mantissa_of_result;\n      }\n      is_zero = (masked_input_1 | mantissa_of_result << 0xc) == 0;\n      if (is_zero) {\n        is_zero = (input_3 | input_4 << 0xc) == 0;\n      }\n      if (is_zero) {\n        is_zero = mantissa_of_result == input_4;\n      }\n      if (!is_zero) {\n        mantissa_of_result = mantissa_of_result | 0x80000;\n      }\n      return CONCAT44(mantissa_of_result,masked_input_1);\n    }\n    if (((input_2 ^ input_4) & 0x7fffffff) != 0 || input_1 != input_3) {\n      if ((masked_input_1 | input_1) == 0) {\n        input_1 = input_3;\n        input_2 = input_4;\n      }\n      return CONCAT44(input_2,input_1);\n    }\n    if (input_2 != input_4) {\n      return 0;\n    }\n    if (masked_input_1 >> 0x15 == 0) {\n      is_zero = (input_1 & 0x80000000) != 0;\n      mantissa_of_result = input_2 * 2 + (uint)is_zero;\n      if (CARRY4(input_2,input_2) || CARRY4(input_2 * 2,(uint)is_zero)) {\n        mantissa_of_result = mantissa_of_result | 0x80000000;\n      }\n      return CONCAT44(mantissa_of_result,input_1 << 1);\n    }\n    if (masked_input_1 < 0xffc00000) {\n      return CONCAT44(input_2 + 0x100000,input_1);\n    }\n    input_2 = input_2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input_2 | 0x7ff00000) << 0x20;\n  }\n  masked_input_1 = masked_input_1 >> 0x15;\n  mantissa_of_result = mantissa_of_result >> 0x15;\n  exponent_of_result = mantissa_of_result - masked_input_1;\n  is_zero = exponent_of_result != 0;\n  if (mantissa_of_result < masked_input_1) {\n    exponent_of_result = -exponent_of_result;\n  }\n  masked_input_3 = input_1;\n  masked_input_2 = input_2;\n  if (is_zero && masked_input_1 <= mantissa_of_result) {\n    masked_input_1 = masked_input_1 + exponent_of_result;\n    masked_input_3 = input_3;\n    masked_input_2 = input_4;\n    input_3 = input_1;\n    input_4 = input_2;\n  }\n  if (0x36 < exponent_of_result) {\n    return CONCAT44(masked_input_2,masked_input_3);\n  }\n  mantissa_of_result = masked_input_2 & 0xfffff | 0x100000;\n  if ((masked_input_2 & 0x80000000) != 0) {\n    is_zero = masked_input_3 != 0;\n    masked_input_3 = -masked_input_3;\n    mantissa_of_result = -mantissa_of_result - (uint)is_zero;\n  }\n  masked_input_2 = input_4 & 0xfffff | 0x100000;\n  if ((input_4 & 0x80000000) != 0) {\n    is_zero = input_3 != 0;\n    input_3 = -input_3;\n    masked_input_2 = -masked_input_2 - (uint)is_zero;\n  }\n  if (masked_input_1 == exponent_of_result) {\n    masked_input_2 = masked_input_2 ^ 0x100000;\n    if (masked_input_1 == 0) {\n      mantissa_of_result = mantissa_of_result ^ 0x100000;\n      masked_input_1 = 1;\n    }\n    else {\n      exponent_of_result = exponent_of_result - 1;\n    }\n  }\n  shifted_sum = -exponent_of_result + 0x20;\n  if ((int)exponent_of_result < 0x21) {\n    shifted_mantissa = input_3 << (shifted_sum & 0xff);\n    input_3 = input_3 >> (exponent_of_result & 0xff);\n    sum_of_input_1_and_shifted_input_3 = masked_input_3 + input_3;\n    sum_of_input_2_and_shifted_input_4 = masked_input_2 << (shifted_sum & 0xff);\n    shifted_sum = sum_of_input_1_and_shifted_input_3 + sum_of_input_2_and_shifted_input_4;\n    mantissa_of_result = mantissa_of_result + CARRY4(masked_input_3,input_3) + ((int)masked_input_2 >> (exponent_of_result & 0xff)) +\n            (uint)CARRY4(sum_of_input_1_and_shifted_input_3,sum_of_input_2_and_shifted_input_4);\n  }\n  else {\n    shifted_mantissa = masked_input_2 << (-exponent_of_result + 0x40 & 0xff);\n    if (input_3 != 0) {\n      shifted_mantissa = shifted_mantissa | 2;\n    }\n    masked_input_2 = (int)masked_input_2 >> (exponent_of_result - 0x20 & 0xff);\n    shifted_sum = masked_input_3 + masked_input_2;\n    mantissa_of_result = mantissa_of_result + ((int)masked_input_2 >> 0x1f) + (uint)CARRY4(masked_input_3,masked_input_2);\n  }\n  input_2 = mantissa_of_result & 0x80000000;\n  exponent_of_result = mantissa_of_result;\n  if ((int)mantissa_of_result < 0) {\n    is_zero = shifted_mantissa == 0;\n    shifted_mantissa = -shifted_mantissa;\n    exponent_of_result = -shifted_sum;\n    shifted_sum = -(uint)!is_zero - shifted_sum;\n    exponent_of_result = -(uint)(is_zero <= exponent_of_result) - mantissa_of_result;\n  }\n  if (0xfffff < exponent_of_result) {\n    masked_input_3 = masked_input_1 - 1;\n    if (0x1fffff < exponent_of_result) {\n      mantissa_of_result = exponent_of_result & 1;\n      exponent_of_result = exponent_of_result >> 1;\n      lsb_of_result = (byte)shifted_sum;\n      shifted_sum = (uint)(mantissa_of_result != 0) << 0x1f | shifted_sum >> 1;\n      shifted_mantissa = (uint)(lsb_of_result & 1) << 0x1f | shifted_mantissa >> 1;\n      masked_input_3 = masked_input_1;\n      if (0xffbfffff < masked_input_1 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    is_zero = 0x7fffffff < shifted_mantissa;\n    if (shifted_mantissa == 0x80000000) {\n      is_zero = (shifted_sum & 1) != 0;\n    }\n    return CONCAT44(exponent_of_result + masked_input_3 * 0x100000 + (uint)CARRY4(shifted_sum,(uint)is_zero) | input_2,\n                    shifted_sum + is_zero);\n  }\n  inputs_are_equal = (shifted_mantissa & 0x80000000) != 0;\n  shifted_mantissa = shifted_mantissa << 1;\n  masked_input_3 = shifted_sum * 2;\n  is_zero = CARRY4(shifted_sum,shifted_sum);\n  shifted_sum = shifted_sum * 2 + (uint)inputs_are_equal;\n  exponent_of_result = exponent_of_result * 2 + (uint)(is_zero || CARRY4(masked_input_3,(uint)inputs_are_equal));\n  masked_input_3 = masked_input_1 - 2;\n  if ((exponent_of_result & 0x100000) != 0) goto LAB_08000278;\n  masked_input_2 = shifted_sum;\n  masked_input_1 = exponent_of_result;\n  if (exponent_of_result == 0) {\n    masked_input_2 = 0;\n    masked_input_1 = shifted_sum;\n  }\n  shifted_input_2 = count_leading_zeroes(masked_input_1);\n  if (exponent_of_result == 0) {\n    shifted_input_2 = shifted_input_2 + 0x20;\n  }\n  shifted_sum = shifted_input_2 - 0xb;\n  overflow = SBORROW4(shifted_sum,0x20);\n  exponent_of_result = shifted_input_2 - 0x2b;\n  is_zero = (int)exponent_of_result < 0;\n  inputs_are_equal = exponent_of_result == 0;\n  if ((int)shifted_sum < 0x20) {\n    overflow = SCARRY4(exponent_of_result,0xc);\n    shifted_input_2 = shifted_input_2 + -0x1f;\n    is_zero = shifted_input_2 < 0;\n    inputs_are_equal = shifted_input_2 == 0;\n    exponent_of_result = shifted_sum;\n    if (!inputs_are_equal && is_zero == overflow) {\n      masked_input_2 = masked_input_1 << (shifted_sum & 0xff);\n      masked_input_1 = masked_input_1 >> (0xcU - shifted_input_2 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (inputs_are_equal || is_zero != overflow) {\n    shifted_mantissa = 0x20 - exponent_of_result;\n  }\n  masked_input_1 = masked_input_1 << (exponent_of_result & 0xff);\n  if (inputs_are_equal || is_zero != overflow) {\n    masked_input_1 = masked_input_1 | masked_input_2 >> (shifted_mantissa & 0xff);\n  }\n  if (inputs_are_equal || is_zero != overflow) {\n    masked_input_2 = masked_input_2 << (exponent_of_result & 0xff);\n  }\nLAB_080002f0:\n  if ((int)shifted_sum <= (int)masked_input_3) {\n    return CONCAT44(masked_input_1 + (masked_input_3 - shifted_sum) * 0x100000 | input_2,masked_input_2);\n  }\n  exponent_of_result = ~(masked_input_3 - shifted_sum);\n  if ((int)exponent_of_result < 0x1f) {\n    shifted_input_2 = exponent_of_result - 0x13;\n    if (shifted_input_2 != 0 && shifted_input_2 < 0 == SCARRY4(exponent_of_result - 0x1f,0xc)) {\n      return CONCAT44(mantissa_of_result,masked_input_2 >> (0x20 - (0xcU - shifted_input_2) & 0xff) | masked_input_1 << (0xcU - shifted_input_2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    exponent_of_result = exponent_of_result + 1;\n    return CONCAT44(input_2 | masked_input_1 >> (exponent_of_result & 0xff),\n                    masked_input_2 >> (exponent_of_result & 0xff) | masked_input_1 << (0x20 - exponent_of_result & 0xff));\n  }\n  return CONCAT44(mantissa_of_result,masked_input_1 >> (exponent_of_result - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800016c",
            "calling": [
                "FUN_08005c70",
                "FUN_080070b0",
                "FUN_08006c0c",
                "FUN_080071c0",
                "FUN_08006228",
                "FUN_08006070",
                "FUN_08006d68"
            ],
            "imported": false,
            "current_name": "calculate_result_0800016c"
        },
        "FUN_08001b58": {
            "renaming": {
                "FUN_08001b58": "analyze_data_08001b58",
                "param_1": "data",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "iVar3": "var1",
                "iVar4": "var2",
                "uVar5": "var3"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\nundefined4 analyze_data_08001b58(int *data)\n\n{\n  uint *ptr1;\n  uint *ptr2;\n  int var1;\n  int var2;\n  uint var3;\n  \n  ptr1 = DAT_08001e70;\n  if (*data << 0x1f < 0) {\n    if (((DAT_08001e70[1] & 0xc) == 4) ||\n       (((DAT_08001e70[1] & 0xc) == 8 && ((int)(DAT_08001e70[1] << 0xf) < 0)))) {\n      var3 = count_leading_zeroes(0x4000);\n      if (((int)((*DAT_08001e70 >> (var3 & 0x1f)) << 0x1f) < 0) && (data[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      var2 = data[1];\n      if (var2 == 0x10000) {\nLAB_08001c1e:\n        var3 = *ptr1 | 0x10000;\n      }\n      else {\n        if (var2 == 0) {\n          *DAT_08001e70 = *DAT_08001e70 & 0xfffeffff;\n          *ptr1 = *ptr1 & 0xfffbffff;\n          var2 = FUN_0800115c();\n          while (var3 = count_leading_zeroes(0x4000),\n                (int)((*ptr1 >> (var3 & 0x1f)) << 0x1f) < 0) {\n            var1 = FUN_0800115c();\n            if (100 < (uint)(var1 - var2)) {\n              return 3;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (var2 == 0x50000) {\n          *DAT_08001e70 = *DAT_08001e70 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        *DAT_08001e70 = *DAT_08001e70 & 0xfffeffff;\n        var3 = *ptr1 & 0xfffbffff;\n      }\n      *ptr1 = var3;\n      var2 = FUN_0800115c();\n      while (var3 = count_leading_zeroes(0x4000), -1 < (int)((*ptr1 >> (var3 & 0x1f)) << 0x1f))\n      {\n        var1 = FUN_0800115c();\n        if (100 < (uint)(var1 - var2)) {\n          return 3;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  ptr1 = DAT_08001e70;\n  if (*data << 0x1e < 0) {\n    if (((DAT_08001e70[1] & 0xc) == 0) ||\n       (((DAT_08001e70[1] & 0xc) == 8 && (-1 < (int)(DAT_08001e70[1] << 0xf))))) {\n      var3 = count_leading_zeroes(0x40000000);\n      if (((int)((*DAT_08001e70 >> (var3 & 0x1f)) << 0x1f) < 0) && (data[4] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      if (data[4] == 0) {\n        var2 = count_leading_zeroes(0x80000000);\n        *(undefined4 *)(var2 * 4 + 0x42420000) = 0;\n        var2 = FUN_0800115c();\n        while (var3 = count_leading_zeroes(0x40000000),\n              (int)((*ptr1 >> (var3 & 0x1f)) << 0x1f) < 0) {\n          var1 = FUN_0800115c();\n          if (2 < (uint)(var1 - var2)) {\n            return 3;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      var2 = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(var2 * 4 + 0x42420000) = 1;\n      var2 = FUN_0800115c();\n      while (var3 = count_leading_zeroes(0x40000000),\n            -1 < (int)((*ptr1 >> (var3 & 0x1f)) << 0x1f)) {\n        var1 = FUN_0800115c();\n        if (2 < (uint)(var1 - var2)) {\n          return 3;\n        }\n      }\n    }\n    var3 = count_leading_zeroes(0x1f000000);\n    *ptr1 = data[5] << (var3 & 0xff) | *ptr1 & 0xffffff07;\n  }\nLAB_08001b6c:\n  ptr1 = DAT_08001e70;\n  if (*data << 0x1c < 0) {\n    if (data[6] == 0) {\n      var2 = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(DAT_08001e74 + var2 * 4) = 0;\n      var2 = FUN_0800115c();\n      while (var3 = count_leading_zeroes(0x40000000),\n            (int)((ptr1[9] >> (var3 & 0x1f)) << 0x1f) < 0) {\n        var1 = FUN_0800115c();\n        if (2 < (uint)(var1 - var2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      var2 = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(DAT_08001e74 + var2 * 4) = 1;\n      var2 = FUN_0800115c();\n      while (var3 = count_leading_zeroes(0x40000000),\n            -1 < (int)((ptr1[9] >> (var3 & 0x1f)) << 0x1f)) {\n        var1 = FUN_0800115c();\n        if (2 < (uint)(var1 - var2)) {\n          return 3;\n        }\n      }\n      do_nothing_08001168(1);\n    }\n  }\n  ptr2 = DAT_08001e78;\n  ptr1 = DAT_08001e70;\n  if (-1 < *data << 0x1d) goto LAB_08001bc2;\n  DAT_08001e70[7] = DAT_08001e70[7] | 0x10000000;\n  *ptr2 = *ptr2 | 0x100;\n  var2 = FUN_0800115c();\n  while (-1 < (int)(*ptr2 << 0x17)) {\n    var1 = FUN_0800115c();\n    if (100 < (uint)(var1 - var2)) {\n      return 3;\n    }\n  }\n  var2 = data[3];\n  if (var2 == 1) {\nLAB_08001e1a:\n    var3 = ptr1[8] | 1;\n  }\n  else {\n    if (var2 == 0) {\n      ptr1[8] = ptr1[8] & 0xfffffffe;\n      ptr1[8] = ptr1[8] & 0xfffffffb;\n      var2 = FUN_0800115c();\n      while (var3 = count_leading_zeroes(0x40000000),\n            (int)((ptr1[8] >> (var3 & 0x1f)) << 0x1f) < 0) {\n        var1 = FUN_0800115c();\n        if (5000 < (uint)(var1 - var2)) {\n          return 3;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (var2 == 5) {\n      ptr1[8] = ptr1[8] | 4;\n      goto LAB_08001e1a;\n    }\n    ptr1[8] = ptr1[8] & 0xfffffffe;\n    var3 = ptr1[8] & 0xfffffffb;\n  }\n  ptr1[8] = var3;\n  var2 = FUN_0800115c();\n  while (var3 = count_leading_zeroes(0x40000000), -1 < (int)((ptr1[8] >> (var3 & 0x1f)) << 0x1f)\n        ) {\n    var1 = FUN_0800115c();\n    if (5000 < (uint)(var1 - var2)) {\n      return 3;\n    }\n  }\nLAB_08001bc2:\n  ptr1 = DAT_08002004;\n  if (data[7] == 0) {\n    return 0;\n  }\n  if ((DAT_08002004[1] & 0xc) != 8) {\n    if (data[7] != 2) {\n      var2 = count_leading_zeroes(0x80);\n      *(undefined4 *)(var2 * 4 + 0x42420000) = 0;\n      var2 = FUN_0800115c();\n      do {\n        var3 = count_leading_zeroes(0x40);\n        if (-1 < (int)((*ptr1 >> (var3 & 0x1f)) << 0x1f)) {\n          return 0;\n        }\n        var1 = FUN_0800115c();\n      } while ((uint)(var1 - var2) < 3);\n      return 3;\n    }\n    var2 = count_leading_zeroes(0x80);\n    *(undefined4 *)(var2 * 4 + 0x42420000) = 0;\n    var2 = FUN_0800115c();\n    do {\n      var3 = count_leading_zeroes(0x40);\n      if (-1 < (int)((*ptr1 >> (var3 & 0x1f)) << 0x1f)) {\n        var3 = data[8];\n        if (var3 == 0x10000) {\n          ptr1[1] = ptr1[1] & 0xfffdffff | data[2];\n        }\n        ptr1[1] = var3 | data[9] | ptr1[1] & 0xffc2ffff;\n        var2 = count_leading_zeroes(0x80);\n        *(undefined4 *)(var2 * 4 + 0x42420000) = 1;\n        var2 = FUN_0800115c();\n        do {\n          var3 = count_leading_zeroes(0x40);\n          if ((int)((*ptr1 >> (var3 & 0x1f)) << 0x1f) < 0) {\n            return 0;\n          }\n          var1 = FUN_0800115c();\n        } while ((uint)(var1 - var2) < 3);\n        return 3;\n      }\n      var1 = FUN_0800115c();\n    } while ((uint)(var1 - var2) < 3);\n    return 3;\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_08001168",
                "FUN_0800115c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b58",
            "calling": [
                "FUN_08004514"
            ],
            "imported": false,
            "current_name": "analyze_data_08001b58"
        },
        "FUN_08007092": {
            "renaming": {
                "FUN_08007092": "set_sign_bit_08007092",
                "param_1": "value",
                "param_2": "mask"
            },
            "code": "uint set_sign_bit_08007092(uint value, uint mask){\n    uint signed_value = value | mask;\n    uint shifted_value = signed_value + 0x100000;\n    uint sign_bit = shifted_value >> 0x1f;\n    return sign_bit;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007092",
            "calling": [
                "FUN_08005900"
            ],
            "imported": false,
            "current_name": "set_sign_bit_08007092"
        },
        "FUN_0800290c": {
            "renaming": {
                "FUN_0800290c": "process_data_0800290c",
                "param_1": "data",
                "iVar2": "data_start",
                "puVar6": "data_ptr",
                "puVar7": "next_data_ptr",
                "bVar1": "byte_val",
                "uVar4": "undefined_val",
                "bVar8": "is_32",
                "sVar5": "count"
            },
            "code": "int process_data_0800290c(int *data)\n{\n    bool is_valid = (*(byte *)((int)data + 0x39) & 0xef) == 0x22;\n    if (!is_valid) {\n        return 2;\n    }\n    int data_start = *data;\n    ushort *data_ptr = (ushort *)data[10];\n    if (data[2] == 0x1000) {\n        if (data[4] == 0) {\n            data_ptr[0] = (ushort)((uint)(*(int *)(data_start + 4) << 0x17) >> 0x17);\n            data_ptr++;\n        }\n        else {\n            data_ptr[0] = (ushort)*(int *)(data_start + 4) & 0xff;\n            data_ptr = (ushort *)((int)data_ptr + 1);\n        }\n        data[10] = (int)data_ptr;\n    }\n    else {\n        if (data[4] == 0) {\n            byte b = (byte)*(undefined4 *)(data_start + 4);\n            data[10] = (int)data_ptr + 1;\n            *data_ptr = b;\n        }\n        else {\n            undefined4 u = *(undefined4 *)(data_start + 4);\n            data[10] = (int)data_ptr + 1;\n            *data_ptr = (byte)u & 0x7f;\n        }\n    }\n    short count = *(short *)((int)data + 0x2e) - 1;\n    *(short *)((int)data + 0x2e) = count;\n    if (count == 0) {\n        data_start = *data;\n        *(uint *)(data_start + 0xc) &= 0xffffffdf;\n        uint byte_val = (uint)*(byte *)((int)data + 0x39);\n        bool is_32 = byte_val == 0x32;\n        if (!is_32) {\n            byte_val = *(uint *)(data_start + 0xc) & 0xfffffeff;\n        }\n        else {\n            data_start = 0x12;\n        }\n        if (!is_32) {\n            *(uint *)(data_start + 0xc) = byte_val;\n            byte_val = *(uint *)(data_start + 0x14) & 0xfffffffe;\n        }\n        if (!is_32) {\n            *(uint *)(data_start + 0x14) = byte_val;\n            data_start = 1;\n        }\n        *(char *)((int)data + 0x39) = (char)data_start;\n        process_data_0800290c_2();\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004c30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800290c",
            "calling": [
                "FUN_0800299a"
            ],
            "imported": false,
            "current_name": "process_data_0800290c"
        },
        "FUN_08002f28": {
            "renaming": {
                "FUN_08002f28": "initialize_data_08002f28",
                "iVar6": "value_difference",
                "puVar2": "pointer1",
                "puVar3": "pointer3",
                "puVar4": "pointer2",
                "uVar5": "var1",
                "iVar8": "var4",
                "uVar7": "var3",
                "sVar1": "temperature"
            },
            "code": "void initialize_data_08002f28()\n{\n  short temperature;\n  undefined *ptr1;\n  undefined *ptr2;\n  undefined *ptr3;\n  undefined2 var1;\n  int var2;\n  undefined4 var3;\n  int var4;\n\n  initialize_function1();\n  initialize_function2();\n  initialize_function3();\n  var2 = get_value();\n  ptr1 = PTR_DAT_08003000;\n  ptr3 = PTR_DAT_08003004;\n  var4 = *(int *)PTR_DAT_08003000;\n  *(int *)PTR_DAT_08003004 = var2;\n  var3 = calculate_difference(var2 - var4);\n  set_value(var3, DAT_08003008);\n  initialize_function4();\n  ptr2 = PTR_DAT_0800300c;\n  *(undefined4 *)ptr1 = *(undefined4 *)ptr3;\n  initialize_function5(*(int *)(ptr2 + 4) + -0x80000000, *(int *)ptr2 + -0x80000000, *(undefined4 *)(ptr2 + 8), *(undefined4 *)(PTR_DAT_08003018 + 4), *(undefined4 *)PTR_DAT_08003018, *(int *)(PTR_DAT_08003018 + 8) + -0x80000000, *(undefined4 *)PTR_DAT_08003014, *(undefined4 *)(PTR_DAT_08003014 + 4), *(undefined4 *)(PTR_DAT_08003014 + 8), PTR_DAT_08003010);\n  ptr2 = PTR_DAT_08003024;\n  ptr3 = PTR_DAT_08003020;\n  ptr1 = PTR_DAT_0800301c;\n  *(short *)PTR_DAT_08003020 = (short)((uint)(int)*(short *)PTR_DAT_0800301c / 100);\n  temperature = *(short *)(ptr1 + 2);\n  *(short *)(ptr3 + 4) = (short)((uint)(int)*(short *)(ptr1 + 4) / 100);\n  ptr1 = PTR_DAT_08003028;\n  *(short *)(ptr3 + 2) = (short)((uint)(int)temperature / 100);\n  *(undefined2 *)(ptr3 + 6) = *(undefined2 *)ptr1;\n  var1 = *(undefined2 *)(ptr1 + 4);\n  *(undefined2 *)(ptr3 + 8) = *(undefined2 *)(ptr1 + 2);\n  *(undefined2 *)(ptr3 + 10) = var1;\n  ptr1 = PTR_DAT_0800302c;\n  *(undefined2 *)(ptr3 + 0xc) = *(undefined2 *)PTR_DAT_0800302c;\n  var1 = *(undefined2 *)(ptr1 + 4);\n  *(undefined2 *)(ptr3 + 0xe) = *(undefined2 *)(ptr1 + 2);\n  *(undefined2 *)(ptr3 + 0x10) = var1;\n  var3 = initialize_function6();\n  set_value(var3, DAT_08003030);\n  var1 = get_value();\n  *(undefined2 *)ptr2 = var1;\n  var3 = initialize_function7();\n  set_value(var3, DAT_08003030);\n  var1 = get_value();\n  *(undefined2 *)(ptr2 + 2) = var1;\n  initialize_function8();\n  var1 = get_value();\n  *(undefined2 *)(ptr2 + 4) = var1;\n}\n",
            "called": [
                "FUN_08002ec0",
                "FUN_08003330",
                "FUN_08002d88",
                "FUN_08000c3c",
                "thunk_FUN_0800115c",
                "FUN_08002ed4",
                "FUN_08002ee8",
                "FUN_08001078",
                "FUN_08000cec",
                "FUN_08002bf0",
                "FUN_08003320",
                "FUN_08000e54",
                "FUN_08002b48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f28",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "initialize_data_08002f28"
        },
        "FUN_08004384": {
            "renaming": {
                "FUN_08004384": "set_initial_values_08004384",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "puVar1": "data_ptr",
                "local_14": "local_var1",
                "uStack_10": "local_var2",
                "local_c": "local_var3"
            },
            "code": "void set_initial_values_08004384(uint32_t param1, uint32_t param2, uint32_t param3, uint32_t param4)\n{\n    uint8_t* data_ptr = PTR_DAT_080043b8;\n    data_ptr[4] = 7;\n    data_ptr[5] = 0;\n    data_ptr[6] = 0x2a;\n    data_ptr[7] = 0;\n    uint32_t local_var1 = *(uint32_t*)data_ptr;\n    uint32_t local_var2 = *(uint32_t*)(data_ptr + 4);\n    data_ptr[8] = 0;\n    data_ptr[9] = 0;\n    data_ptr[10] = 0;\n    uint32_t local_var3 = param4 & 0xff000000 | (uint32_t)*(uint16_t*)(data_ptr + 8);\n    set_value(0x65, &local_var1, 0xb, *(uint16_t*)(data_ptr + 8), param1);\n}",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004384",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "set_initial_values_08004384"
        },
        "FUN_080009a0": {
            "renaming": {
                "FUN_080009a0": "is_input_empty_080009a0",
                "in_ZR": "input_char",
                "FUN_08000990": "get_input_char"
            },
            "code": "bool is_input_empty_080009a0(void)\n{\n  char input_char;\n  input_char = get_input_char();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_08000990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009a0",
            "calling": [
                "FUN_08005900"
            ],
            "imported": false,
            "current_name": "is_input_empty_080009a0"
        },
        "FUN_0800290a": {
            "renaming": {
                "FUN_0800290a": "do_nothing_0800290a"
            },
            "code": "\nvoid do_nothing_0800290a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800290a",
            "calling": [
                "FUN_0800299a"
            ],
            "imported": false,
            "current_name": "do_nothing_0800290a"
        },
        "FUN_08003298": {
            "renaming": {
                "FUN_08003298": "read_MS5611_calibration_data_08003298",
                "puVar1": "calibration_data_ptr",
                "puVar2": "data_buffer_ptr",
                "puVar3": "data_buffer_ptr_2",
                "iVar4": "i",
                "local_1c": "local_data_buffer[0]",
                "local_1b": "local_data_buffer[1]"
            },
            "code": "void read_MS5611_calibration_data_08003298(void)\n{\n  unsigned char* calibration_data_ptr;\n  unsigned char* data_buffer_ptr;\n  unsigned char local_data_buffer[2];\n  int i = 0;\n  write_to_MS5611_register(0xee, 0x1e, 1);\n  delay_ms(10);\n  calibration_data_ptr = PTR_s____Src_MS5611_c_08003308;\n  data_buffer_ptr = PTR_DAT_0800330c;\n  *PTR_DAT_08003304 = 8;\n  do\n  {\n    local_data_buffer[0] = 0;\n    local_data_buffer[1] = 0;\n    read_MS5611_register(0xee, i + 0xa0U & 0xffff, local_data_buffer, 2, calibration_data_ptr, 0x7c);\n    *(unsigned short*)(data_buffer_ptr + i) = ((unsigned short)local_data_buffer[0] << 8) | local_data_buffer[1];\n    i += 2;\n  } while (i != 0x10);\n  i = 0;\n  do\n  {\n    *(unsigned int*)(PTR_DAT_08003310 + i * 4) = 0;\n    i++;\n  } while (i != 0x14);\n}\n",
            "called": [
                "FUN_0800403c",
                "thunk_FUN_08001168",
                "FUN_080040e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003298",
            "calling": [
                "FUN_08004194"
            ],
            "imported": false,
            "current_name": "read_MS5611_calibration_data_08003298"
        },
        "FUN_08004300": {
            "renaming": {
                "FUN_08004300": "calculate_checksum_08004300",
                "param_1": "initial_value",
                "param_2": "data",
                "param_3": "length",
                "uVar1": "checksum",
                "pbVar2": "current_byte",
                "FUN_08004c8c": "add_to_buffer",
                "FUN_08004c18": "add_to_buffer",
                "PTR_DAT_08004344": "BUFFER_START"
            },
            "code": "void calculate_checksum_08004300(uint8_t initial_value, uint8_t *data, uint length) {\n  uint8_t checksum = initial_value ^ (length & 0xff);\n  add_to_buffer(PTR_DAT_08004344);\n  add_to_buffer(length & 0xff);\n  add_to_buffer(initial_value);\n  for (uint i = 0; i < length; i++) {\n    add_to_buffer(data[i]);\n    checksum ^= data[i];\n  }\n  add_to_buffer(checksum);\n  return;\n}",
            "called": [
                "FUN_08004c18",
                "FUN_08004c8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004300",
            "calling": [
                "FUN_08004348",
                "FUN_08004410",
                "FUN_080043f0",
                "FUN_08004434",
                "FUN_08004384",
                "FUN_080043bc",
                "FUN_08004458"
            ],
            "imported": false,
            "current_name": "calculate_checksum_08004300"
        },
        "FUN_08005630": {
            "renaming": {
                "FUN_08005630": "copy_data_to_buffer_08005630",
                "param_1": "buffer_start_index",
                "param_2": "data_to_copy",
                "param_3": "data_length",
                "puVar1": "buffer_end_ptr",
                "puVar2": "buffer_ptr"
            },
            "code": "void copy_data_to_buffer_08005630(int buffer_start_index, undefined* data_to_copy, int data_length) {\n  undefined* buffer_ptr;\n  undefined* data_ptr;\n\n  buffer_ptr = (undefined*)(buffer_start_index - 1);\n  data_ptr = data_to_copy + data_length;\n  for (; data_to_copy != data_ptr; data_to_copy++) {\n    buffer_ptr++;\n    *buffer_ptr = *data_to_copy;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005630",
            "calling": [
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "imported": false,
            "current_name": "copy_data_to_buffer_08005630"
        },
        "FUN_08003330": {
            "renaming": {
                "FUN_08003330": "FUNC_08003330"
            },
            "code": "\nvoid FUNC_08003330(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined4 param_9,undefined4 *param_10)\n\n{\n  undefined *puVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  int iVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  int iVar9;\n  undefined4 uVar10;\n  undefined4 uVar11;\n  undefined4 uVar12;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  undefined4 uVar15;\n  undefined4 uVar16;\n  undefined4 uVar17;\n  undefined4 uVar18;\n  undefined4 uVar19;\n  int iVar20;\n  undefined4 uVar21;\n  undefined4 uVar22;\n  undefined4 uVar23;\n  undefined4 uVar24;\n  undefined4 uVar25;\n  undefined4 uVar26;\n  int iVar27;\n  undefined4 uVar28;\n  int iVar29;\n  undefined4 uVar30;\n  undefined4 uVar31;\n  undefined8 uVar32;\n  undefined8 uVar33;\n  \n  uVar28 = *(undefined4 *)PTR_DAT_080035d8;\n  iVar29 = *(int *)(PTR_DAT_080035d8 + 4);\n  uVar31 = *(undefined4 *)(PTR_DAT_080035d8 + 8);\n  uVar30 = *(undefined4 *)(PTR_DAT_080035d8 + 0xc);\n  uVar2 = FUN_08000cec(param_1,param_1);\n  uVar3 = FUN_08000cec(param_2);\n  uVar2 = FUN_08000adc(uVar2,uVar3);\n  uVar3 = FUN_08000cec(param_3);\n  FUN_08000adc(uVar2,uVar3);\n  FUN_08000428();\n  FUN_08005bc8();\n  uVar2 = FUN_08000a30();\n  iVar4 = FUN_08001014(uVar2,0);\n  if (iVar4 == 0) {\n    uVar3 = FUN_08000cec(param_7);\n    uVar5 = FUN_08000cec(param_8);\n    uVar3 = FUN_08000adc(uVar3,uVar5);\n    uVar5 = FUN_08000cec(param_9);\n    FUN_08000adc(uVar3,uVar5);\n    FUN_08000428();\n    FUN_08005bc8();\n    uVar3 = FUN_08000a30();\n    iVar4 = FUN_08001014(uVar3,0);\n    if (iVar4 == 0) {\n      uVar32 = FUN_08000428(param_4);\n      FUN_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar5 = FUN_08000a30();\n      uVar32 = FUN_08000428(param_5);\n      FUN_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar6 = FUN_08000a30();\n      uVar32 = FUN_08000428(param_6);\n      FUN_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar7 = FUN_08000a30();\n      iVar4 = FUN_08000adc(uVar28);\n      uVar8 = FUN_08000adc(iVar29);\n      iVar9 = FUN_08000adc(uVar31,uVar31);\n      uVar10 = FUN_08000adc(uVar30,uVar30);\n      uVar11 = FUN_08000cec(uVar28);\n      uVar12 = FUN_08000cec(uVar28,iVar29);\n      uVar13 = FUN_08000cec(uVar28,uVar31);\n      uVar14 = FUN_08000cec(iVar29);\n      uVar15 = FUN_08000cec(iVar29,uVar30);\n      uVar16 = FUN_08000cec(uVar31,uVar31);\n      uVar17 = FUN_08000cec(uVar30,uVar30);\n      uVar2 = FUN_08000e54(0x3f800000,uVar2);\n      uVar3 = FUN_08000e54(0x3f800000,uVar3);\n      uVar18 = FUN_08000cec(param_7,uVar3);\n      uVar19 = FUN_08000cec(param_8,uVar3);\n      uVar3 = FUN_08000cec(param_9,uVar3);\n      iVar20 = FUN_08000cec(iVar4,uVar18);\n      uVar21 = FUN_08000cec(iVar4,uVar19);\n      uVar22 = FUN_08000cec(iVar4,uVar3);\n      uVar23 = FUN_08000cec(uVar8,uVar18);\n      uVar24 = FUN_08000cec(uVar11,uVar18);\n      uVar25 = FUN_08000cec(uVar30,uVar21);\n      uVar24 = FUN_08000ad8(uVar24,uVar25);\n      uVar25 = FUN_08000cec(uVar31,uVar22);\n      uVar24 = FUN_08000adc(uVar24,uVar25);\n      uVar25 = FUN_08000cec(uVar14,uVar18);\n      uVar24 = FUN_08000adc(uVar24,uVar25);\n      uVar25 = FUN_08000cec(uVar8,uVar19);\n      uVar25 = FUN_08000cec(uVar25,uVar31);\n      uVar24 = FUN_08000adc(uVar24,uVar25);\n      uVar25 = FUN_08000cec(uVar8,uVar3);\n      uVar25 = FUN_08000cec(uVar25,uVar30);\n      uVar24 = FUN_08000adc(uVar24,uVar25);\n      uVar25 = FUN_08000cec(uVar16,uVar18);\n      uVar24 = FUN_08000ad8(uVar24,uVar25);\n      uVar25 = FUN_08000cec(uVar17,uVar18);\n      uVar24 = FUN_08000ad8(uVar24,uVar25);\n      uVar25 = FUN_08000cec(uVar30,iVar20);\n      uVar26 = FUN_08000cec(uVar11,uVar19);\n      uVar25 = FUN_08000adc(uVar25,uVar26);\n      uVar22 = FUN_08000cec(iVar29,uVar22);\n      uVar22 = FUN_08000ad8(uVar25,uVar22);\n      uVar25 = FUN_08000cec(uVar31,uVar23);\n      uVar22 = FUN_08000adc(uVar22,uVar25);\n      uVar25 = FUN_08000cec(uVar14,uVar19);\n      uVar22 = FUN_08000ad8(uVar22,uVar25);\n      uVar25 = FUN_08000cec(uVar16,uVar19);\n      uVar22 = FUN_08000adc(uVar22,uVar25);\n      uVar25 = FUN_08000cec(iVar9,uVar3);\n      uVar25 = FUN_08000cec(uVar25,uVar30);\n      uVar22 = FUN_08000adc(uVar22,uVar25);\n      uVar25 = FUN_08000cec(uVar17,uVar19);\n      uVar22 = FUN_08000ad8(uVar22,uVar25);\n      uVar24 = FUN_08000cec(uVar24,uVar24);\n      uVar22 = FUN_08000cec(uVar22,uVar22);\n      FUN_08000adc(uVar24,uVar22);\n      FUN_08000428();\n      FUN_08005bc8();\n      iVar27 = FUN_08000a30();\n      uVar22 = FUN_08000cec(iVar20 + -0x80000000,uVar31);\n      uVar21 = FUN_08000cec(iVar29,uVar21);\n      uVar21 = FUN_08000adc(uVar22,uVar21);\n      uVar11 = FUN_08000cec(uVar11,uVar3);\n      uVar11 = FUN_08000adc(uVar21,uVar11);\n      uVar21 = FUN_08000cec(uVar30,uVar23);\n      uVar11 = FUN_08000adc(uVar11,uVar21);\n      uVar21 = FUN_08000cec(uVar14,uVar3);\n      uVar11 = FUN_08000ad8(uVar11,uVar21);\n      uVar21 = FUN_08000cec(iVar9,uVar19);\n      uVar21 = FUN_08000cec(uVar21,uVar30);\n      uVar11 = FUN_08000adc(uVar11,uVar21);\n      uVar21 = FUN_08000cec(uVar16,uVar3);\n      uVar11 = FUN_08000ad8(uVar11,uVar21);\n      uVar21 = FUN_08000cec(uVar17,uVar3);\n      uVar11 = FUN_08000adc(uVar11,uVar21);\n      uVar21 = FUN_08000adc(uVar11,uVar11);\n      uVar22 = FUN_08000adc(uVar15);\n      uVar23 = FUN_08000cec(uVar31,iVar4);\n      uVar22 = FUN_08000ad8(uVar22,uVar23);\n      uVar23 = FUN_08000cec(param_1,uVar2);\n      uVar22 = FUN_08000ad8(uVar22,uVar23);\n      uVar23 = FUN_08000cec(uVar30,iVar9);\n      uVar24 = FUN_08000adc(uVar12);\n      uVar23 = FUN_08000adc(uVar23,uVar24);\n      uVar24 = FUN_08000cec(param_2,uVar2);\n      uVar23 = FUN_08000ad8(uVar23,uVar24);\n      uVar24 = FUN_08000cec(uVar31,uVar11);\n      uVar25 = FUN_08000ad8(0x3f000000,uVar16);\n      uVar17 = FUN_08000ad8(uVar25,uVar17);\n      uVar17 = FUN_08000cec(uVar17,iVar27);\n      uVar25 = FUN_08000ad8(uVar15,uVar13);\n      uVar25 = FUN_08000cec(uVar25,uVar11);\n      uVar17 = FUN_08000adc(uVar17,uVar25);\n      uVar17 = FUN_08000ad8(uVar17,uVar18);\n      uVar18 = FUN_08000cec(iVar29,uVar11);\n      uVar25 = FUN_08000cec(iVar29,uVar31);\n      uVar26 = FUN_08000cec(uVar28,uVar30);\n      uVar25 = FUN_08000ad8(uVar25,uVar26);\n      uVar25 = FUN_08000cec(uVar25,iVar27);\n      uVar26 = FUN_08000cec(uVar31,uVar30);\n      uVar12 = FUN_08000adc(uVar26,uVar12);\n      uVar12 = FUN_08000cec(uVar12,uVar11);\n      uVar12 = FUN_08000adc(uVar25,uVar12);\n      uVar12 = FUN_08000ad8(uVar12,uVar19);\n      uVar19 = FUN_08000cec(uVar31,iVar27);\n      uVar25 = FUN_08000ad8(0x3f000000,uVar14);\n      uVar25 = FUN_08000ad8(uVar25,uVar16);\n      uVar25 = FUN_08000cec(uVar25,uVar11);\n      uVar13 = FUN_08000adc(uVar13,uVar15);\n      uVar13 = FUN_08000cec(uVar13,iVar27);\n      uVar13 = FUN_08000adc(uVar25,uVar13);\n      uVar3 = FUN_08000ad8(uVar13,uVar3);\n      uVar13 = FUN_08000cec(iVar9 + -0x80000000,uVar22);\n      uVar15 = FUN_08000cec(uVar8,uVar23);\n      uVar13 = FUN_08000adc(uVar13,uVar15);\n      uVar15 = FUN_08000cec(uVar24,uVar17);\n      uVar13 = FUN_08000ad8(uVar13,uVar15);\n      uVar15 = FUN_08000cec(uVar30,iVar27 + -0x80000000);\n      uVar15 = FUN_08000adc(uVar15,uVar18);\n      uVar15 = FUN_08000cec(uVar15,uVar12);\n      uVar13 = FUN_08000adc(uVar13,uVar15);\n      uVar15 = FUN_08000cec(uVar19,uVar3);\n      uVar13 = FUN_08000adc(uVar13,uVar15);\n      uVar14 = FUN_08000adc(uVar14);\n      uVar14 = FUN_08000ad8(0x3f800000,uVar14);\n      uVar15 = FUN_08000adc(uVar16);\n      uVar14 = FUN_08000ad8(uVar14,uVar15);\n      uVar2 = FUN_08000cec(param_3,uVar2);\n      uVar2 = FUN_08000ad8(uVar14,uVar2);\n      uVar14 = FUN_08000cec(uVar30,uVar11);\n      uVar11 = FUN_08000cec(uVar28,uVar11);\n      uVar15 = FUN_08000cec(uVar10,uVar22);\n      uVar16 = FUN_08000cec(iVar4,uVar23);\n      uVar15 = FUN_08000adc(uVar15,uVar16);\n      uVar16 = FUN_08000cec(iVar29,0x40800000);\n      uVar16 = FUN_08000cec(uVar16,uVar2);\n      uVar15 = FUN_08000ad8(uVar15,uVar16);\n      uVar16 = FUN_08000cec(uVar17,uVar14);\n      uVar15 = FUN_08000adc(uVar15,uVar16);\n      uVar16 = FUN_08000adc(uVar19,uVar11);\n      uVar16 = FUN_08000cec(uVar16,uVar12);\n      uVar15 = FUN_08000adc(uVar15,uVar16);\n      uVar16 = FUN_08000cec(uVar30,iVar27);\n      uVar19 = FUN_08000cec(iVar29,uVar21);\n      uVar16 = FUN_08000ad8(uVar16,uVar19);\n      uVar16 = FUN_08000cec(uVar16,uVar3);\n      uVar15 = FUN_08000adc(uVar15,uVar16);\n      iVar20 = FUN_08000adc(iVar27,iVar27);\n      uVar16 = FUN_08000cec(iVar29,iVar27);\n      uVar19 = FUN_08000cec(iVar4 + -0x80000000,uVar22);\n      uVar10 = FUN_08000cec(uVar10,uVar23);\n      uVar10 = FUN_08000adc(uVar19,uVar10);\n      uVar19 = FUN_08000cec(uVar31,0x40800000);\n      uVar2 = FUN_08000cec(uVar19,uVar2);\n      uVar2 = FUN_08000ad8(uVar10,uVar2);\n      uVar10 = FUN_08000cec(uVar31,iVar20 + -0x80000000);\n      uVar10 = FUN_08000ad8(uVar10,uVar11);\n      uVar10 = FUN_08000cec(uVar10,uVar17);\n      uVar2 = FUN_08000adc(uVar2,uVar10);\n      uVar10 = FUN_08000adc(uVar14,uVar16);\n      uVar10 = FUN_08000cec(uVar10,uVar12);\n      uVar2 = FUN_08000adc(uVar2,uVar10);\n      uVar10 = FUN_08000cec(uVar28,iVar27);\n      uVar11 = FUN_08000cec(uVar31,uVar21);\n      uVar10 = FUN_08000ad8(uVar10,uVar11);\n      uVar10 = FUN_08000cec(uVar10,uVar3);\n      uVar2 = FUN_08000adc(uVar2,uVar10);\n      uVar8 = FUN_08000cec(uVar8,uVar22);\n      uVar10 = FUN_08000cec(iVar9,uVar23);\n      uVar8 = FUN_08000adc(uVar8,uVar10);\n      uVar10 = FUN_08000cec(uVar30,iVar20 + -0x80000000);\n      uVar10 = FUN_08000adc(uVar10,uVar18);\n      uVar10 = FUN_08000cec(uVar10,uVar17);\n      uVar8 = FUN_08000adc(uVar8,uVar10);\n      uVar10 = FUN_08000cec(uVar28,iVar27 + -0x80000000);\n      uVar10 = FUN_08000adc(uVar10,uVar24);\n      uVar10 = FUN_08000cec(uVar10,uVar12);\n      uVar8 = FUN_08000adc(uVar8,uVar10);\n      uVar3 = FUN_08000cec(uVar3,uVar16);\n      uVar3 = FUN_08000adc(uVar8,uVar3);\n      uVar8 = FUN_08000cec(uVar13);\n      uVar10 = FUN_08000cec(uVar15);\n      uVar8 = FUN_08000adc(uVar8,uVar10);\n      uVar10 = FUN_08000cec(uVar2,uVar2);\n      uVar8 = FUN_08000adc(uVar8,uVar10);\n      uVar10 = FUN_08000cec(uVar3,uVar3);\n      FUN_08000adc(uVar8,uVar10);\n      FUN_08000428();\n      FUN_08005bc8();\n      uVar8 = FUN_08000a30();\n      uVar8 = FUN_08000e54(0x3f800000,uVar8);\n      puVar1 = PTR_DAT_08003d84;\n      uVar12 = *(undefined4 *)PTR_DAT_08003d80;\n      uVar14 = *(undefined4 *)PTR_DAT_08003d80;\n      uVar16 = *(undefined4 *)PTR_DAT_08003d80;\n      uVar17 = *(undefined4 *)PTR_DAT_08003d80;\n      uVar10 = FUN_08000cec(iVar29 + -0x80000000,uVar5);\n      uVar11 = FUN_08000cec(uVar31,uVar6);\n      uVar10 = FUN_08000ad8(uVar10,uVar11);\n      uVar11 = FUN_08000cec(uVar30,uVar7);\n      uVar10 = FUN_08000ad8(uVar10,uVar11);\n      uVar10 = FUN_08000cec(uVar10,0x3f000000);\n      uVar11 = FUN_08000cec(uVar13,uVar8);\n      uVar13 = *(undefined4 *)puVar1;\n      uVar11 = FUN_08000cec(uVar11,uVar12);\n      uVar10 = FUN_08000ad8(uVar10,uVar11);\n      uVar10 = FUN_08000cec(uVar10,uVar13);\n      uVar10 = FUN_08000adc(uVar10,uVar28);\n      uVar11 = FUN_08000cec(uVar28,uVar5);\n      uVar12 = FUN_08000cec(uVar31,uVar7);\n      uVar13 = *(undefined4 *)puVar1;\n      uVar11 = FUN_08000adc(uVar11,uVar12);\n      uVar12 = FUN_08000cec(uVar30,uVar6);\n      uVar11 = FUN_08000ad8(uVar11,uVar12);\n      uVar11 = FUN_08000cec(uVar11,0x3f000000);\n      uVar12 = FUN_08000cec(uVar15,uVar8);\n      uVar12 = FUN_08000cec(uVar12,uVar14);\n      uVar11 = FUN_08000ad8(uVar11,uVar12);\n      uVar11 = FUN_08000cec(uVar11,uVar13);\n      uVar11 = FUN_08000adc(uVar11,iVar29);\n      uVar14 = *(undefined4 *)puVar1;\n      uVar12 = FUN_08000cec(uVar28,uVar6);\n      uVar13 = FUN_08000cec(iVar29,uVar7);\n      uVar12 = FUN_08000ad8(uVar12,uVar13);\n      uVar13 = FUN_08000cec(uVar30,uVar5);\n      uVar12 = FUN_08000adc(uVar12,uVar13);\n      uVar12 = FUN_08000cec(uVar12,0x3f000000);\n      uVar2 = FUN_08000cec(uVar2,uVar8);\n      uVar2 = FUN_08000cec(uVar2,uVar16);\n      uVar2 = FUN_08000ad8(uVar12,uVar2);\n      uVar2 = FUN_08000cec(uVar2,uVar14);\n      uVar2 = FUN_08000adc(uVar2,uVar31);\n      uVar28 = FUN_08000cec(uVar28,uVar7);\n      uVar6 = FUN_08000cec(iVar29,uVar6);\n      uVar28 = FUN_08000adc(uVar28,uVar6);\n      uVar31 = FUN_08000cec(uVar31,uVar5);\n      uVar28 = FUN_08000ad8(uVar28,uVar31);\n      uVar28 = FUN_08000cec(uVar28,0x3f000000);\n      uVar3 = FUN_08000cec(uVar3,uVar8);\n      uVar3 = FUN_08000cec(uVar3,uVar17);\n      uVar31 = *(undefined4 *)puVar1;\n      uVar3 = FUN_08000ad8(uVar28,uVar3);\n      uVar3 = FUN_08000cec(uVar3,uVar31);\n      uVar3 = FUN_08000adc(uVar3,uVar30);\n      uVar28 = FUN_08000cec(uVar10,uVar10);\n      uVar30 = FUN_08000cec(uVar11,uVar11);\n      uVar28 = FUN_08000adc(uVar28,uVar30);\n      uVar30 = FUN_08000cec(uVar2,uVar2);\n      uVar28 = FUN_08000adc(uVar28,uVar30);\n      uVar30 = FUN_08000cec(uVar3,uVar3);\n      FUN_08000adc(uVar28,uVar30);\n      FUN_08000428();\n      FUN_08005bc8();\n      uVar28 = FUN_08000a30();\n      uVar28 = FUN_08000e54(0x3f800000,uVar28);\n      uVar30 = FUN_08000cec(uVar10,uVar28);\n      puVar1 = PTR_DAT_08003d88;\n      *(undefined4 *)PTR_DAT_08003d88 = uVar30;\n      uVar31 = FUN_08000cec(uVar11,uVar28);\n      *(undefined4 *)(puVar1 + 4) = uVar31;\n      uVar2 = FUN_08000cec(uVar2,uVar28);\n      *(undefined4 *)(puVar1 + 8) = uVar2;\n      uVar3 = FUN_08000cec(uVar3,uVar28);\n      *(undefined4 *)(puVar1 + 0xc) = uVar3;\n      uVar3 = FUN_08000cec(uVar31,uVar3);\n      uVar2 = FUN_08000cec(uVar30,uVar2);\n      uVar2 = FUN_08000ad8(uVar3,uVar2);\n      FUN_08000adc(uVar2,uVar2);\n      FUN_08000428();\n      uVar32 = FUN_08005854();\n      uVar32 = FUN_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_08003d8c);\n      FUN_08000724((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003d78,DAT_08003d7c);\n      uVar2 = FUN_08000a30();\n      *param_10 = uVar2;\n      uVar31 = *(undefined4 *)puVar1;\n      uVar5 = *(undefined4 *)(puVar1 + 4);\n      uVar2 = FUN_08000cec(uVar31,uVar31);\n      uVar3 = FUN_08000cec(uVar5,uVar5);\n      uVar2 = FUN_08000ad8(uVar2,uVar3);\n      uVar28 = *(undefined4 *)(puVar1 + 8);\n      uVar3 = FUN_08000cec(uVar28,uVar28);\n      uVar2 = FUN_08000ad8(uVar2,uVar3);\n      uVar30 = *(undefined4 *)(puVar1 + 0xc);\n      uVar3 = FUN_08000cec(uVar30,uVar30);\n      FUN_08000adc(uVar2,uVar3);\n      uVar32 = FUN_08000428();\n      uVar2 = FUN_08000cec(uVar31,uVar5);\n      uVar3 = FUN_08000cec(uVar28,uVar30);\n      uVar2 = FUN_08000adc(uVar2,uVar3);\n      FUN_08000adc(uVar2,uVar2);\n      uVar33 = FUN_08000428();\n      uVar32 = thunk_FUN_08006070((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar32,\n                                  (int)((ulonglong)uVar32 >> 0x20));\n      uVar32 = FUN_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_08003ea8);\n      FUN_08000724((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003ea0,DAT_08003ea4);\n      uVar2 = FUN_08000a30();\n      param_10[1] = uVar2;\n      uVar30 = *(undefined4 *)puVar1;\n      uVar31 = *(undefined4 *)(puVar1 + 4);\n      uVar2 = FUN_08000cec(uVar30,uVar30);\n      uVar3 = FUN_08000cec(uVar31,uVar31);\n      uVar2 = FUN_08000adc(uVar2,uVar3);\n      uVar5 = *(undefined4 *)(puVar1 + 8);\n      uVar3 = FUN_08000cec(uVar5,uVar5);\n      uVar2 = FUN_08000ad8(uVar2,uVar3);\n      uVar28 = *(undefined4 *)(puVar1 + 0xc);\n      uVar3 = FUN_08000cec(uVar28,uVar28);\n      FUN_08000ad8(uVar2,uVar3);\n      uVar32 = FUN_08000428();\n      uVar2 = FUN_08000cec(uVar31,uVar5);\n      uVar3 = FUN_08000cec(uVar30,uVar28);\n      uVar2 = FUN_08000adc(uVar2,uVar3);\n      FUN_08000adc(uVar2,uVar2);\n      uVar33 = FUN_08000428();\n      uVar32 = thunk_FUN_08006070((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar32,\n                                  (int)((ulonglong)uVar32 >> 0x20));\n      uVar32 = FUN_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_08003ea8);\n      FUN_08000724((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003ea0,DAT_08003ea4);\n      uVar2 = FUN_08000a30();\n      param_10[2] = uVar2;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08005854",
                "FUN_08000a30",
                "FUN_08000ad8",
                "FUN_080004d0",
                "FUN_08000cec",
                "FUN_08000428",
                "FUN_08005bc8",
                "FUN_08000adc",
                "FUN_08000724",
                "FUN_08001014",
                "FUN_08000e54",
                "thunk_FUN_08006070"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003330",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "FUNC_08003330"
        },
        "FUN_08000980": {
            "renaming": {
                "FUN_08000980": "call_with_swapped_params_08000980",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param"
            },
            "code": "void call_with_swapped_params_08000980(void* param_1, void* param_2, void* param_3, void* param_4)\n{\n  call_with_swapped_params_08000980(param_3, param_4, param_1, param_2);\n  return;\n}",
            "called": [
                "FUN_08000990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000980",
            "calling": [
                "FUN_080009f0"
            ],
            "imported": false,
            "current_name": "call_with_swapped_params_08000980"
        },
        "FUN_08004028": {
            "renaming": {
                "FUN_08004028": "run_loop_and_set_flag_08004028",
                "iVar1": "loop_counter",
                "FUN_0800458c": "run_some_function",
                "FUN_08003ff4": "wait_for_some_time",
                "FUN_08003f3c": "set_flag",
                "thunk_do_nothing_08001168": "do_nothing"
            },
            "code": "void run_loop_and_set_flag_08004028(void)\n{\n  int loop_counter = 3;\n  run_some_function();\n  do {\n    set_flag(1,0);\n    wait_for_some_time(100);\n    set_flag(0,1);\n    wait_for_some_time(100);\n    set_flag(0,0,1);\n    wait_for_some_time(100);\n    loop_counter--;\n  } while (loop_counter != 0);\n  set_flag(1,1);\n  return;\n}",
            "called": [
                "FUN_08003ff4",
                "FUN_08003f3c",
                "thunk_FUN_08001168",
                "FUN_0800458c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004028",
            "calling": [
                "FUN_08004194"
            ],
            "imported": false,
            "current_name": "run_loop_and_set_flag_08004028"
        },
        "FUN_0800708c": {
            "renaming": {
                "FUN_0800708c": "do_nothing_0800708c"
            },
            "code": "\nvoid do_nothing_0800708c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800708c",
            "calling": [
                "FUN_08005854",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_08006070",
                "FUN_08006d68"
            ],
            "imported": false,
            "current_name": "do_nothing_0800708c"
        },
        "FUN_08002368": {
            "renaming": {
                "FUN_08002368": "update_registers_08002368",
                "param_1": "register_values",
                "param_2": "new_values",
                "uVar1": "current_value",
                "puVar2": "base_register",
                "DAT_080023cc": "ptr_base_register"
            },
            "code": "void update_registers_08002368(uint *register_values, uint *new_values)\n{\n  uint current_value = *register_values;\n  if ((((register_values == DAT_080023cc) || (register_values == (uint *)0x40000000)) ||\n      (register_values == DAT_080023cc - 0x4a00)) || (register_values == DAT_080023cc - 0x4900)) {\n    current_value = current_value & 0xffffff8f | new_values[1];\n    if (((register_values == DAT_080023cc) || (register_values == (uint *)0x40000000)) ||\n       ((register_values == DAT_080023cc - 0x4a00 || (register_values == DAT_080023cc - 0x4900)))) {\n      current_value = current_value & 0xfffffcff | new_values[3];\n    }\n  }\n  *register_values = current_value;\n  register_values[11] = new_values[2];\n  register_values[10] = *new_values;\n  uint *base_register = DAT_080023cc;\n  if (register_values == DAT_080023cc) {\n    base_register = (uint *)new_values[4];\n  }\n  if (register_values == DAT_080023cc) {\n    register_values[12] = (uint)base_register;\n  }\n  register_values[5] = 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002368",
            "calling": [
                "FUN_080023d0"
            ],
            "imported": false,
            "current_name": "update_registers_08002368"
        },
        "FUN_08002520": {
            "renaming": {
                "FUN_08002520": "update_bits_08002520",
                "param_1": "ptr_data",
                "param_2": "bit_position",
                "param_3": "new_value",
                "uint": "uint32_t",
                "*": "*ptr_",
                "&": "&",
                "~": "~",
                "<<": "<<",
                "|": "|"
            },
            "code": "void update_bits_08002520(uint32_t* ptr_data, uint8_t bit_position, uint32_t new_value)\n{\n  uint32_t mask = ~(1 << (bit_position & 0xff));\n  uint32_t shifted_value = new_value << (bit_position & 0xff);\n  *ptr_data = (*ptr_data & mask) | shifted_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002520",
            "calling": [
                "FUN_08002538"
            ],
            "imported": false,
            "current_name": "update_bits_08002520"
        },
        "FUN_08002008": {
            "renaming": {
                "FUN_08002008": "calculate_value_08002008",
                "uVar1": "value_1",
                "uVar2": "value_2",
                "uVar3": "value_3",
                "uVar4": "count",
                "uVar5": "value",
                "puVar6": "pointer_1",
                "puVar7": "pointer_2",
                "local_24": "local_bytes",
                "local_20": "local_array"
            },
            "code": "uint calculate_value_08002008(void)\n{\n    uint value = 0;\n    uint count = 0;\n    uint bitmask = 0x3c00;\n    uint shift = 0xf;\n    uint byte_index = 0;\n    uint multiplier = 0;\n    uint divisor = 0;\n    uint lookup_index = 0;\n    uint local_array[5] = {0};\n    byte local_bytes[2] = {1, 2};\n\n    // Copy data from PTR_DAT_0800208c to local_array\n    for (int i = 0; i < 5; i++) {\n        local_array[i] = *(uint*)(PTR_DAT_0800208c + (i * 2 * sizeof(uint)));\n    }\n\n    // Check if the fourth bit and third bit are set in the value at DAT_08002090\n    if ((*(uint*)(DAT_08002090 + 4) & 0xc) == 8) {\n        // Count the number of leading zeroes in the bitmask\n        count = count_leading_zeroes(bitmask);\n        // Calculate the lookup index\n        lookup_index = (*(uint*)(DAT_08002090 + 4) & 0x3c0000) >> (count & 0xff);\n        // Calculate the multiplier\n        multiplier = local_bytes[lookup_index];\n        // Check if the 16th bit is set in the value at DAT_08002090\n        if ((int)(*(uint*)(DAT_08002090 + 4) << shift) < 0) {\n            // Count the number of leading zeroes in the divisor\n            count = count_leading_zeroes(0x4000);\n            // Calculate the divisor\n            divisor = local_bytes[(*(uint*)(DAT_08002090 + 4) & 0x20000) >> (count & 0xff)];\n            // Calculate the quotient\n            divisor = DAT_08002094 / divisor;\n            // Calculate the final value\n            value = multiplier * divisor;\n        }\n        else {\n            // Calculate the final value\n            value = multiplier * DAT_08002094;\n        }\n    }\n\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002008",
            "calling": [
                "FUN_0800209c"
            ],
            "imported": false,
            "current_name": "calculate_value_08002008"
        },
        "FUN_08002404": {
            "renaming": {
                "FUN_08002404": "update_data_08002404",
                "param_1": "data_address",
                "param_2": "data_array",
                "uVar1": "var1",
                "uVar2": "var2",
                "iVar3": "var3",
                "mask1": "mask1",
                "mask2": "mask2",
                "mask3": "mask3",
                "mask4": "mask4"
            },
            "code": "void update_data_08002404(int data_address, int *data_array){\n  uint mask1 = 0xffffffef;\n  uint mask2 = 0xfffff3ff;\n  uint mask3 = 0xffffffdf;\n  uint mask4 = 0xffffff7f;\n\n  *(uint *)(data_address + 0x20) = *(uint *)(data_address + 0x20) & mask1;\n\n  uint var1 = *(uint *)(data_address + 0x20) & mask3 | data_array[2] << 4;\n  uint var2 = *(uint *)(data_address + 4);\n  int var3 = *data_array;\n\n  if (data_address == DAT_08002458) {\n    var1 = (var1 & mask4 | data_array[3] << 4) & ~mask3;\n    var2 = var2 & mask2 | (data_array[5] | data_array[6]) << 2;\n  }\n\n  *(uint *)(data_address + 4) = var2;\n  *(uint *)(data_address + 0x18) = *(uint *)(data_address + 0x18) & 0xffff8cff | var3 << 8;\n  *(int *)(data_address + 0x38) = data_array[1];\n  *(uint *)(data_address + 0x20) = var1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002404",
            "calling": [
                "FUN_0800245c"
            ],
            "imported": false,
            "current_name": "update_data_08002404"
        },
        "FUN_08005bc8": {
            "renaming": {
                "FUN_08005bc8": "check_and_execute_08005bc8",
                "param_1": "input_1",
                "param_2": "input_2",
                "local_50": "success_flag",
                "local_4c": "data_pointer",
                "local_48": "input_1_copy",
                "uStack_44": "input_2_copy",
                "local_40": "input_1_copy_2",
                "uStack_3c": "input_2_copy_2",
                "local_38": "result",
                "local_30": "error_code",
                "cVar1": "char_value",
                "iVar2": "int_value",
                "piVar3": "int_pointer",
                "puVar4": "undefined4_pointer"
            },
            "code": "\n/* WARNING: Could not reconcile some variable overlaps */\n\nundefined8 check_and_execute_08005bc8(undefined4 input_1,undefined4 input_2)\n\n{\n  char char_value;\n  int int_value;\n  int *int_pointer;\n  undefined4 *undefined4_pointer;\n  undefined8 uVar5;\n  undefined4 success_flag;\n  undefined *data_pointer;\n  undefined4 input_1_copy;\n  undefined4 input_2_copy;\n  undefined4 input_1_copy_2;\n  undefined4 input_2_copy_2;\n  undefined8 result;\n  int error_code;\n  \n  uVar5 = FUN_08006c0c();\n  char_value = *PTR_DAT_08005c68;\n  if (char_value == -1) {\n    return uVar5;\n  }\n  error_code = FUN_08000a04(input_1,input_2,input_1,input_2);\n  if (error_code != 0) {\n    return uVar5;\n  }\n  int_value = FUN_080009b4(input_1,input_2,0,0);\n  if (int_value == 0) {\n    return uVar5;\n  }\n  success_flag = 1;\n  data_pointer = PTR_DAT_08005c6c;\n  input_1_copy = input_1;\n  input_2_copy = input_2;\n  input_1_copy_2 = input_1;\n  input_2_copy_2 = input_2;\n  if (char_value == '\\0') {\n    result = 0;\nLAB_08005c26:\n    int_value = FUN_0800709e(&success_flag);\n    if (int_value != 0) goto LAB_08005c2e;\n  }\n  else {\n    result = FUN_08000724(0,0,0,0);\n    if (char_value != '\\x02') goto LAB_08005c26;\n  }\n  undefined4_pointer = (undefined4 *)FUN_080072ac();\n  *undefined4_pointer = 0x21;\nLAB_08005c2e:\n  if (error_code != 0) {\n    int_pointer = (int *)FUN_080072ac();\n    *int_pointer = error_code;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_080072ac",
                "FUN_08000a04",
                "FUN_08006c0c",
                "FUN_08000724",
                "FUN_0800709e",
                "FUN_080009b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bc8",
            "calling": [
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "check_and_execute_08005bc8"
        },
        "FUN_08001436": {
            "renaming": {
                "FUN_08001436": "clear_flag_if_set_08001436",
                "param_1": "ptr_param_1",
                "iVar1": "var_1"
            },
            "code": "int clear_flag_if_set_08001436(int *ptr_param_1)\n{\n  int var_1 = *ptr_param_1;\n  if ((*(uint *)(var_1 + 0x14) & 0x400) != 0) {\n    *(uint *)(var_1 + 0x14) &= 0xfffffbff;\n    ptr_param_1[14] = 4;\n    *(undefined *)((int)ptr_param_1 + 0x35) = 0x20;\n    *(undefined *)(ptr_param_1 + 13) = 0;\n    return 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001436",
            "calling": [
                "FUN_080014e2"
            ],
            "imported": false,
            "current_name": "clear_flag_if_set_08001436"
        },
        "FUN_08004a30": {
            "renaming": {
                "FUN_08004a30": "initialize_data_08004a30",
                "puVar1": "first_data_ptr",
                "puVar2": "second_data_ptr",
                "puVar3": "third_data_ptr",
                "uVar4": "function_result"
            },
            "code": "void initialize_data_08004a30()\\n{\\n  undefined *first_data_ptr;\\n  undefined *second_data_ptr;\\n  undefined *third_data_ptr;\\n  undefined4 function_result;\\n\\n  third_data_ptr = PTR_DAT_08004a7c;\\n  second_data_ptr = PTR_DAT_08004a78;\\n  first_data_ptr = PTR_DAT_08004a74;\\n  if (first_data_ptr[1] != \"\\0\") {\\n    if (*second_data_ptr == \"\\0\") {\\n      function_result = get_result();\\n      function_result = process_result(function_result, DAT_08004a80);\\n      *(undefined4 *)(third_data_ptr + 0x1c) = function_result;\\n      *second_data_ptr = 1;\\n    }\\n    else {\\n      function_result = get_result();\\n      function_result = process_result(function_result, DAT_08004a80);\\n      *(undefined4 *)(third_data_ptr + 0x30) = function_result;\\n    }\\n  }\\n  if (first_data_ptr[1] == \"\\0\") {\\n    if (*second_data_ptr != \"\\0\") {\\n      *second_data_ptr = 0;\\n    }\\n    *(undefined4 *)(third_data_ptr + 0x48) = *(undefined4 *)(first_data_ptr + 4);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08003068",
                "FUN_08000cec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a30",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "initialize_data_08004a30"
        },
        "FUN_08004c70": {
            "renaming": {
                "FUN_08004c70": "initialize_08004c70",
                "PTR_DAT_08004c88": "config_flag",
                "PTR_DAT_08004c84": "config_data",
                "puVar1": "config_data",
                "puVar2": "config_flag",
                "uVar3": "flag_value",
                "uVar4": "addr_value",
                "iVar5": "result"
            },
            "code": "int initialize_08004c70() {\n  byte *PTR_DAT_08004c84;\n  byte *PTR_DAT_08004c88;\n  byte flag_value;\n  uint32_t addr_value;\n  int result;\n  result = FUN_08004c64();\n  PTR_DAT_08004c88 = PTR_DAT_08004c88;\n  PTR_DAT_08004c84 = PTR_DAT_08004c84;\n  if ((PTR_DAT_08004c88[0x39] == 0x01) || (PTR_DAT_08004c88[0x39] == 0x12)) {\n    if (PTR_DAT_08004c84 == NULL) {\n      return 1;\n    }\n    if (PTR_DAT_08004c88[0x38] != 0x01) {\n      PTR_DAT_08004c88[0x38] = 0x01;\n      *(uint32_t *)(PTR_DAT_08004c88 + 0x3c) = 0;\n      *(uint16_t *)(PTR_DAT_08004c88 + 0x2c) = 1;\n      *(uint16_t *)(PTR_DAT_08004c88 + 0x2e) = 1;\n      PTR_DAT_08004c88[0x38] = 0;\n      if (PTR_DAT_08004c88[0x39] == 0x12) {\n        flag_value = 0x32;\n      }\n      else {\n        flag_value = 0x22;\n      }\n      addr_value = *(uint32_t *)PTR_DAT_08004c88;\n      PTR_DAT_08004c88[0x39] = flag_value;\n      *(byte **)(PTR_DAT_08004c88 + 0x28) = PTR_DAT_08004c84;\n      *(uint32_t *)(addr_value + 0xc) = *(uint32_t *)(addr_value + 0xc) | 0x100;\n      *(uint32_t *)(addr_value + 0x14) = *(uint32_t *)(addr_value + 0x14) | 1;\n      *(uint32_t *)(addr_value + 0xc) = *(uint32_t *)(addr_value + 0xc) | 0x20;\n      return 0;\n    }\n  }\n  return 2;\n}",
            "called": [
                "FUN_08004c64"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c70",
            "calling": [
                "FUN_08004194"
            ],
            "imported": false,
            "current_name": "initialize_08004c70"
        },
        "FUN_08000904": {
            "renaming": {
                "FUN_08000904": "compare_values_08000904",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "uVar1": "xorResult",
                "bVar2": "isTrue",
                "bVar3": "isSecondConditionTrue",
                "shift": "shiftValue"
            },
            "code": "uint compare_values_08000904(uint num1, uint num2, uint num3, uint num4)\n{\n  uint result;\n  bool isCondition1Met, isCondition2Met;\n  \n  isCondition1Met = ((int)(num2 << 1) >> 0x15 == -1 || (int)(num4 << 1) >> 0x15 == -1) && ((((int)(num2 << 1) >> 0x15 == -1 && ((num1 | num2 << 0xc) != 0)) || (((int)(num4 << 1) >> 0x15 == -1 && ((num3 | num4 << 0xc) != 0)))));\n  if (isCondition1Met)\n  {\n    result = 1;\n  }\n  else\n  {\n    bool isCondition3Met = (num1 | num2 << 1) == 0 && (num3 | num4 << 1) == 0;\n    bool isCondition4Met = num2 == num4 && num1 == num3;\n    if (!isCondition3Met)\n    {\n      uint xorResult = num2 ^ num4;\n      bool isCondition5Met = xorResult == 0 && num2 == num4;\n      bool isCondition6Met = -1 < (int)xorResult && num4 <= num2;\n      if (isCondition5Met)\n      {\n        isCondition6Met = num3 <= num1;\n      }\n      int shift = (int)num4 >> 0x1f;\n      if (!isCondition6Met)\n      {\n        shift = ~shift;\n      }\n      result = shift | 1;\n    }\n    else\n    {\n      result = 0;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000904",
            "calling": [
                "FUN_08000990"
            ],
            "imported": false,
            "current_name": "compare_values_08000904"
        },
        "FUN_0800299a": {
            "renaming": {
                "FUN_0800299a": "validate_input_0800299a",
                "param_1": "input",
                "uVar1": "fourth_element",
                "sVar2": "temp4",
                "uVar3": "first_element",
                "puVar4": "temp3",
                "uVar5": "temp7",
                "puVar6": "temp",
                "uVar7": "fifth_element",
                "bVar8": "condition"
            },
            "code": "void validate_input_0800299a(uint **input)\n{\n    uint first_element = **input;\n    uint fourth_element = (*input)[3];\n    if ((first_element & 0xf) == 0)\n    {\n        if (((int)(first_element << 0x1a) < 0) && ((int)(fourth_element << 0x1a) < 0))\n        {\n            handle_error();\n            return;\n        }\n    }\n    else\n    {\n        uint fifth_element = (*input)[5] & 1;\n        if ((fifth_element != 0) || ((fourth_element & 0x120) != 0))\n        {\n            uint *temp = (uint *)(first_element << 0x1f);\n            if ((int)temp < 0)\n            {\n                bool condition = (int)(fourth_element << 0x17) < 0;\n                if (condition)\n                {\n                    temp = (uint *)((uint)input[0xf] | 1);\n                }\n                if (condition)\n                {\n                    input[0xf] = temp;\n                }\n            }\n            if (((int)(first_element << 0x1d) < 0) && (fifth_element != 0))\n            {\n                input[0xf] = (uint *)((uint)input[0xf] | 2);\n            }\n            if (((int)(first_element << 0x1e) < 0) && (fifth_element != 0))\n            {\n                input[0xf] = (uint *)((uint)input[0xf] | 4);\n            }\n            if (((int)(first_element << 0x1c) < 0) && (fifth_element != 0))\n            {\n                input[0xf] = (uint *)((uint)input[0xf] | 8);\n            }\n            if (input[0xf] == (uint *)0x0)\n            {\n                return;\n            }\n            if (((int)(first_element << 0x1a) < 0) && ((int)(fourth_element << 0x1a) < 0))\n            {\n                handle_error(input);\n            }\n            uint *temp2 = *input;\n            if ((-1 < (int)input[0xf] << 0x1c) && ((temp2[5] & 0x40) == 0))\n            {\n                do_nothing(input);\n                input[0xf] = (uint *)0x0;\n                return;\n            }\n            temp2[3] = temp2[3] & 0xfffffedf;\n            temp2[5] = temp2[5] & 0xfffffffe;\n            *(undefined *)((int)input + 0x39) = 1;\n            do_nothing(input);\n            return;\n        }\n    }\n    if (((int)(first_element << 0x18) < 0) && ((int)(fourth_element << 0x18) < 0))\n    {\n        if ((*(byte *)((int)input + 0x39) & 0xdf) == 0x12)\n        {\n            uint *temp3 = input[8];\n            if (input[2] == (uint *)0x1000)\n            {\n                (*input)[1] = *(ushort *)temp3 & 0x1ff;\n                if (input[4] == (uint *)0x0)\n                {\n                    temp3 = (uint *)((int)temp3 + 2);\n                }\n                else\n                {\n                    temp3 = (uint *)((int)temp3 + 1);\n                }\n                input[8] = temp3;\n            }\n            else\n            {\n                input[8] = (uint *)((int)temp3 + 1);\n                (*input)[1] = (uint)*(byte *)temp3;\n            }\n            short temp4 = *(short *)((int)input + 0x26) + -1;\n            *(short *)((int)input + 0x26) = temp4;\n            if (temp4 == 0)\n            {\n                uint *temp5 = *input;\n                temp5[3] = temp5[3] & 0xffffff7f;\n                temp5[3] = temp5[3] | 0x40;\n                return;\n            }\n        }\n    }\n    else if (((int)(first_element << 0x19) < 0) && ((int)(fourth_element << 0x19) < 0))\n    {\n        uint *temp6 = *input;\n        temp6[3] = temp6[3] & 0xffffffbf;\n        if (*(char *)((int)input + 0x39) == '2')\n        {\n            *(undefined *)((int)input + 0x39) = 0x22;\n        }\n        else\n        {\n            *(undefined *)((int)input + 0x39) = 1;\n        }\n        do_nothing2(input);\n    }\n    return;\n}",
            "called": [
                "FUN_0800290c",
                "FUN_08002998",
                "FUN_0800290a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800299a",
            "calling": [],
            "imported": false,
            "current_name": "validate_input_0800299a"
        },
        "FUN_0800114c": {
            "renaming": {
                "FUN_0800114c": "increment_pointer_0800114c",
                "PTR_DAT_08001158": "ptr_data"
            },
            "code": "void increment_pointer_0800114c(void)\n{\n  int* PTR_DAT_08001158 = (int*) PTR_DAT_08001158;\n  *PTR_DAT_08001158 = *PTR_DAT_08001158 + 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800114c",
            "calling": [
                "FUN_080041ae"
            ],
            "imported": false,
            "current_name": "increment_pointer_0800114c"
        },
        "FUN_080052e4": {
            "renaming": {
                "FUN_080052e4": "process_data_080052e4",
                "param_1": "data",
                "param_2": "start",
                "param_3": "end",
                "param_4": "code",
                "param_5": "callback",
                "iVar1": "i",
                "uVar2": "max_len",
                "uVar3": "data_type",
                "bVar4": "is_data_type_4",
                "uVar5": "is_odd",
                "uVar6": "data_len",
                "uVar7": "end_len",
                "*param_3": "*end",
                "*param_2": "*start",
                "(int)param_2 + 0x43": "(int)start + 0x43",
                "(int)param_2 + 0x19": "(int)start + 0x19",
                "(int)param_2 + 0x45": "(int)start + 0x45",
                "(int)param_2 + uVar2 + 0x43": "(int)start + is_odd + 0x43",
                "(int)param_2 + uVar2 + 0x44": "(int)start + is_odd + 0x44",
                "(int)param_2 + 0x1a": "(int)start + 0x1a",
                "result": "result"
            },
            "code": "undefined4 process_data_080052e4(undefined4 data, uint *start, uint *end, undefined4 code, code *callback)\n{\n  int i = 0;\n  uint max_len = start[4] < start[2] ? start[2] : start[4];\n  *end = max_len;\n  if (*(char *)((int)start + 0x43) != '\\0') {\n    *end = max_len + 1;\n  }\n  if ((int)(*start << 0x1a) < 0) {\n    *end = *end + 2;\n  }\n  uint data_type = *start & 6;\n  if (data_type == 0) {\n    for (; (int)data_type < (int)(start[3] - *end); data_type++) {\n      int result = (*callback)(data, code, (int)start + 0x19, 1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  uint is_odd = (uint)*(byte *)((int)start + 0x43);\n  if (is_odd != 0) {\n    is_odd = 1;\n  }\n  uint data_len = is_odd;\n  if ((int)(*start << 0x1a) < 0) {\n    *(undefined *)((int)start + is_odd + 0x43) = 0x30;\n    data_len = is_odd + 2;\n    *(undefined *)((int)start + is_odd + 0x44) = *(undefined *)((int)start + 0x45);\n  }\n  int result = (*callback)(data, code, (int)start + 0x43, data_len);\n  if (result != -1) {\n    uint end_len = start[3];\n    bool is_data_type_4 = (*start & 6) != 4;\n    if (is_data_type_4) {\n      end_len = 0;\n    }\n    uint start_len = 0;\n    if (!is_data_type_4) {\n      end_len = end_len - *end;\n    }\n    if (!is_data_type_4) {\n      end_len = end_len & ~((int)end_len >> 0x1f);\n    }\n    if (start[4] < start[2]) {\n      end_len = end_len + (start[2] - start[4]);\n    }\n    while (true) {\n      if (end_len == start_len) {\n        return 0;\n      }\n      int result = (*callback)(data, code, (int)start + 0x1a, 1);\n      if (result == -1) {\n        break;\n      }\n      start_len++;\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052e4",
            "calling": [
                "FUN_080053d4"
            ],
            "imported": false,
            "current_name": "process_data_080052e4"
        },
        "FUN_080014e2": {
            "renaming": {
                "FUN_080014e2": "check_if_param_valid_080014e2",
                "param_1": "param_array",
                "param_2": "param_length",
                "iVar1": "start_time",
                "iVar2": "result"
            },
            "code": "int check_if_param_valid_080014e2(int *param_array, uint32_t param_length) {\n    int start_time = get_current_time();\n    while (true) {\n        if (*(int *)(param_array[0] + 20) << 24 < 0) {\n            return 0;\n        }\n        int result = check_param_array(param_array);\n        if (result != 0) {\n            break;\n        }\n        if ((param_length != UINT32_MAX) && ((param_length == 0) || (get_current_time() - start_time > param_length))) {\n            param_array[14] |= 0x20;\n            *(undefined *)((int)param_array + 53) = 0x20;\n            *(undefined *)(param_array + 13) = 0;\n            return 3;\n        }\n    }\n    return 1;\n}",
            "called": [
                "FUN_08001436",
                "FUN_0800115c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014e2",
            "calling": [
                "FUN_08001530",
                "FUN_080015e8",
                "FUN_08001828"
            ],
            "imported": false,
            "current_name": "check_if_param_valid_080014e2"
        },
        "FUN_0800142e": {
            "renaming": {
                "FUN_0800142e": "xor_with_param_0800142e",
                "param_1": "ptr_param1",
                "param_2": "param2",
                "*(uint *)(param_1 + 0xc)": "*ptr_var1",
                "uint": "uint",
                "return": "return",
                "=": "=",
                "^": "^",
                "*": "*"
            },
            "code": "void xor_with_param_0800142e(uint* ptr_param1, uint param2)\n{\n  uint* ptr_var1 = ptr_param1 + 0xc;\n  uint var1 = *ptr_var1;\n  var1 = var1 ^ param2;\n  *ptr_var1 = var1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800142e",
            "calling": [
                "FUN_08004490"
            ],
            "imported": false,
            "current_name": "xor_with_param_0800142e"
        },
        "FUN_08004d8c": {
            "renaming": {
                "FUN_08004d8c": "update_flags_08004d8c",
                "param_1": "flag",
                "iVar1": "flag_value",
                "DAT_08004e04": "FLAG_A",
                "*(uint *)(DAT_08004e08 + 0x18)": "*(unsigned int *)(FLAG_PTR + 0x18)",
                "0x800": "0b10000000000",
                "_DAT_4002101c": "_DAT_4002101c",
                "DAT_08004e0c": "FLAG_B",
                "*(uint *)(DAT_08004e08 + 0x1c)": "*(unsigned int *)(FLAG_PTR + 0x1c)",
                "2": "0b10",
                "DAT_08004e10": "FLAG_C",
                "4": "0b100",
                "8": "0b1000"
            },
            "code": "void update_flags_08004d8c(int *flag) {\n  int flag_value = *flag;\n  if (flag_value == DAT_08004e04) {\n    *(uint *)(DAT_08004e08 + 0x18) |= 0x800;\n  }\n  else if (flag_value == DAT_08004e0c) {\n    *(uint *)(DAT_08004e08 + 0x1c) |= 2;\n  }\n  else if (flag_value == DAT_08004e10) {\n    *(uint *)(DAT_08004e08 + 0x1c) |= 4;\n  }\n  else if (flag_value == FLAG_D) {\n    *(uint *)(DAT_08004e08 + 0x1c) |= 8;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d8c",
            "calling": [
                "FUN_080023d0"
            ],
            "imported": false,
            "current_name": "update_flags_08004d8c"
        },
        "FUN_08002250": {
            "renaming": {
                "FUN_08002250": "extract_bits_from_ptr_dat_08002278_08002250",
                "uVar1": "leading_zeroes",
                "PTR_DAT_0800227c": "ptr_dat_0800227c",
                "PTR_DAT_08002278": "PTR_DAT_08002278",
                "DAT_08002274": "dat_08002274"
            },
            "code": "uint extract_bits_from_ptr_dat_08002278_08002250(uint num){\n    uint leading_zeroes = 0;\n    while (num != 0) {\n        num >>= 1;\n        leading_zeroes++;\n    }\n    return leading_zeroes;\n}\n\nuint extract_bits_from_ptr_dat_08002278_08002250() {\n    uint PTR_DAT_0800227c = *(uint *)PTR_DAT_0800227c;\n    uint DAT_08002274 = DAT_08002274;\n    uint extracted_bits = (*(uint *)(DAT_08002274 + 4) & 0x3800) >> (extract_bits_from_ptr_dat_08002278_08002250(0x1c0000) & 0xff);\n    return PTR_DAT_0800227c >> extracted_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002250",
            "calling": [
                "FUN_080025e8"
            ],
            "imported": false,
            "current_name": "extract_bits_from_ptr_dat_08002278_08002250"
        },
        "FUN_080009b4": {
            "renaming": {
                "FUN_080009b4": "is_end_of_string_080009b4",
                "in_CY": "current_char",
                "FUN_08000990": "get_current_char"
            },
            "code": "bool is_end_of_string_080009b4(void)\\n{\\n  char current_char;\\n  current_char = get_current_char();\\n  return current_char == \"\\0\";\\n}",
            "called": [
                "FUN_08000990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009b4",
            "calling": [
                "FUN_08005900",
                "FUN_08005bc8"
            ],
            "imported": false,
            "current_name": "is_end_of_string_080009b4"
        },
        "FUN_080011fc": {
            "renaming": {
                "FUN_080011fc": "set_bit_at_position_080011fc",
                "param_1": "position",
                "PTR_08001210": "ptr",
                "DAT_08001210": "ptr_data"
            },
            "code": "void set_bit_at_position_080011fc(uint position) {\n    int* PTR_08001210 = (int*)(DAT_08001210 + (position >> 5) * 4);\n    int bit_position = position & 0x1f;\n    int bit_value = 1 << bit_position;\n    *PTR_08001210 = bit_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011fc",
            "calling": [
                "FUN_08004e7c"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_080011fc"
        },
        "FUN_08003068": {
            "renaming": {
                "FUN_08003068": "get_value_from_pointer_08003068",
                "PTR_DAT_08003070": "value_ptr"
            },
            "code": "uint32_t get_value_from_pointer_08003068() {\n  uint32_t* PTR_DAT_08003070 = (uint32_t*) PTR_DAT_08003070;\n  return *PTR_DAT_08003070;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003068",
            "calling": [
                "FUN_08004a30"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08003068"
        },
        "FUN_08005646": {
            "renaming": {
                "FUN_08005646": "reverse_copy_string_08005646",
                "param_1": "dst",
                "param_2": "src",
                "param_3": "length",
                "puVar1": "src_end"
            },
            "code": "void reverse_copy_string_08005646(char *dst, char *src, int length) {\n  char *src_end = src + length;\n  if ((src < dst) && (dst < src_end)) {\n    dst = dst + length;\n    length = length - (int)src_end;\n    while (src_end + length != (char *)0x0) {\n      src_end--;\n      dst--;\n      *dst = *src_end;\n    }\n    return;\n  }\n  dst--;\n  for (; src != src_end; src++) {\n    dst++;\n    *dst = *src;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005646",
            "calling": [
                "FUN_08005044"
            ],
            "imported": false,
            "current_name": "reverse_copy_string_08005646"
        },
        "FUN_08000990": {
            "renaming": {
                "FUN_08000990": "initializeFunction_08000990",
                "param_1": "inputParam",
                "FUN_08000904": "callHelperFunction"
            },
            "code": "undefined4 initializeFunction_08000990(undefined4 inputParam) {\n  callHelperFunction();\n  return inputParam;\n}",
            "called": [
                "FUN_08000904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000990",
            "calling": [
                "FUN_080009c8",
                "FUN_080009a0",
                "FUN_08000980",
                "FUN_080009b4"
            ],
            "imported": false,
            "current_name": "initializeFunction_08000990"
        },
        "FUN_08000110": {
            "renaming": {
                "FUN_08000110": "check_and_set_flag_if_null_08000110",
                "param_1": "input_param",
                "*PTR_DAT_08000128": "*PTR_FLAG_POINTER",
                "DAT_0800012c": "DAT_SECOND_FLAG",
                "PTR_FUN_08000130": "PTR_FUNTION_POINTER"
            },
            "code": "undefined *check_and_set_flag_if_null_08000110(undefined *input_param)\\n{\\n  if (*PTR_DAT_08000128 == \"\\0\") {\\n    if (DAT_0800012c != 0) {\\n      input_param = PTR_FUN_08000130;\\n    }\\n    *PTR_DAT_08000128 = 1;\\n  }\\n  return input_param;\\n}",
            "called": [
                "FUN_080072d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000110",
            "calling": [],
            "imported": false,
            "current_name": "check_and_set_flag_if_null_08000110"
        },
        "FUN_0800709e": {
            "renaming": {
                "FUN_0800709e": "returnZero_0800709e"
            },
            "code": "int returnZero_0800709e(void) {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800709e",
            "calling": [
                "FUN_08005854",
                "FUN_08005900",
                "FUN_08005bc8"
            ],
            "imported": false,
            "current_name": "returnZero_0800709e"
        },
        "FUN_08002ec0": {
            "renaming": {
                "FUN_08002ec0": "calculate_new_value_08002ec0",
                "PTR_DAT_08002ed0": "old_value_ptr",
                "PTR_DAT_08002ecc": "constant_value_ptr",
                "FUN_08000ad8": "multiply_floats",
                "FUN_08000cec": "add_floats",
                "FUN_08000adc": "subtract_floats",
                "uVar2": "intermediate_value_1",
                "uVar3": "constant_value",
                "uVar4": "old_value",
                "puVar1": "new_value_ptr"
            },
            "code": "void calculate_new_value_08002ec0(void)\n{\n  undefined *new_value_ptr;\n  undefined4 PTR_DAT_08002ed0;\n  undefined4 old_value;\n  undefined4 constant_value = 0x3f800000;\n  undefined4 intermediate_value_1;\n  undefined4 intermediate_value_2;\n  PTR_DAT_08002ed0 = PTR_DAT_08002ed0;\n  old_value = *(undefined4 *)(PTR_DAT_08002ed0 + 4);\n  intermediate_value_1 = FUN_08000ad8(constant_value, old_value);\n  intermediate_value_2 = FUN_08000cec(intermediate_value_1, *(undefined4 *)(PTR_DAT_08002ecc + 4));\n  intermediate_value_1 = FUN_08000cec(old_value, *(undefined4 *)PTR_DAT_08002ed0);\n  intermediate_value_2 = FUN_08000adc(intermediate_value_1, intermediate_value_2);\n  *(undefined4 *)PTR_DAT_08002ed0 = intermediate_value_2;\n  return;\n}",
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_08000adc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ec0",
            "calling": [
                "FUN_08002f28",
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "calculate_new_value_08002ec0"
        },
        "FUN_08004434": {
            "renaming": {
                "FUN_08004434": "read_and_send_data_to_fun_08004434",
                "param_1": "",
                "param_2": "param_2",
                "param_3": "param_3",
                "local_10": "ptr_dat_08004454_value",
                "local_c": "new_param_2_value",
                "uStack_8": "new_param_3_value"
            },
            "code": "void read_and_send_data_to_fun_08004434(uint16_t param_2, uint32_t param_3)\n{\n  uint32_t ptr_dat_08004454_value = *(uint32_t *)PTR_DAT_08004454;\n  uint32_t new_param_2_value = param_2 & 0xffff0000 | (uint32_t)*(uint16_t *)(PTR_DAT_08004454 + 4);\n  uint32_t new_param_3_value = param_3;\n  FUN_08004300(0x6d, &ptr_dat_08004454_value, 6);\n  return;\n}",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004434",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "read_and_send_data_to_fun_08004434"
        },
        "FUN_08001168": {
            "renaming": {
                "FUN_08001168": "do_nothing_08001168"
            },
            "code": "\nvoid do_nothing_08001168(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001168",
            "calling": [
                "thunk_FUN_08001168",
                "FUN_08001b58"
            ],
            "imported": false,
            "current_name": "do_nothing_08001168"
        },
        "FUN_08006c0c": {
            "renaming": {
                "FUN_08006c0c": "calculate_float_08006c0c",
                "param_1": "numerator",
                "param_2": "denominator",
                "uVar1": "result_high",
                "uVar2": "quotient",
                "iVar3": "exponent",
                "uVar4": "remainder",
                "uVar5": "high_bit",
                "uVar6": "temp_denominator",
                "uVar8": "temp_quotient",
                "uVar9": "temp_remainder",
                "iVar10": "i",
                "uVar11": "temp_bit",
                "uVar12": "final_quotient"
            },
            "code": "undefined8 calculate_float_08006c0c(uint numerator, uint denominator)\n{\n    undefined4 result_high;\n    uint quotient;\n    int exponent;\n    uint remainder;\n    uint high_bit;\n    uint temp_denominator;\n    uint temp_quotient;\n    uint temp_remainder;\n    int i;\n    uint temp_bit;\n    uint rounding_bit;\n    uint sticky_bit;\n    uint final_quotient;\n\n    if ((0x08006d60 & ~denominator) == 0)\n    {\n        undefined8 result = FUN_080004d0(numerator, denominator, numerator, denominator);\n        result = FUN_0800016c(numerator, denominator, (int)result, (int)((ulonglong)result >> 0x20));\n        return result;\n    }\n\n    if ((int)denominator < 1)\n    {\n        if ((denominator & 0x7fffffff | numerator) == 0)\n        {\n            return CONCAT44(denominator, numerator);\n        }\n\n        if (denominator != 0)\n        {\n            undefined8 result = FUN_08000168(numerator, denominator, numerator, denominator);\n            result_high = (undefined4)((ulonglong)result >> 0x20);\n            result = FUN_08000724((int)result, result_high, (int)result, result_high);\n            return result;\n        }\n    }\n\n    exponent = (int)denominator >> 0x14;\n\n    if (exponent == 0)\n    {\n        while (denominator == 0)\n        {\n            exponent--;\n            denominator = numerator >> 0xb;\n            numerator = numerator << 0x15;\n        }\n\n        high_bit = 0;\n\n        for (i = 0; -1 < (int)(denominator << 0xb); i++)\n        {\n            high_bit++;\n            denominator = denominator << 1;\n        }\n\n        exponent -= (high_bit - 1);\n        denominator = denominator | numerator >> (0x20 - high_bit & 0xff);\n        numerator = numerator << (high_bit & 0xff);\n    }\n\n    quotient = denominator & 0xfffff | 0x100000;\n    remainder = 0;\n    temp_denominator = quotient;\n    temp_quotient = 0x16;\n    temp_bit = 0x200000;\n    numerator = numerator << 1;\n\n    do\n    {\n        temp_remainder = remainder + temp_bit;\n\n        if (temp_remainder <= quotient)\n        {\n            quotient -= temp_remainder;\n            remainder = temp_remainder + temp_bit;\n            temp_quotient += temp_bit;\n        }\n\n        temp_bit = temp_bit >> 1;\n        temp_quotient--;\n        quotient = quotient << 1 | numerator >> 0x1f;\n        numerator = numerator << 1;\n    } while (temp_quotient != 0);\n\n    sticky_bit = remainder | numerator;\n\n    if (sticky_bit != 0)\n    {\n        if (temp_denominator == 0xffffffff)\n        {\n            exponent++;\n            temp_denominator = 0x20;\n        }\n        else\n        {\n            temp_denominator = temp_denominator + 1 & 0xfffffffe;\n        }\n    }\n\n    rounding_bit = temp_denominator >> 1;\n\n    if (exponent << 0x1f < 0)\n    {\n        final_quotient = quotient | 0x80000000;\n    }\n    else\n    {\n        final_quotient = quotient;\n    }\n\n    return CONCAT44((exponent >> 1) + 0x3fe00000 + ((int)denominator >> 0x14 >> 1) * 0x100000, final_quotient);\n}",
            "called": [
                "FUN_080004d0",
                "FUN_08000724",
                "FUN_0800016c",
                "FUN_08000168"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c0c",
            "calling": [
                "FUN_08005c70",
                "FUN_08005bc8",
                "FUN_08006228"
            ],
            "imported": false,
            "current_name": "calculate_float_08006c0c"
        },
        "FUN_0800426c": {
            "renaming": {
                "FUN_0800426c": "calculate_statistics_and_update_globals_0800426c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar3": "not_renamed_5",
                "uVar4": "not_renamed_6",
                "uVar5": "not_renamed_7",
                "uVar6": "not_renamed_8",
                "uVar7": "not_renamed_9",
                "uVar8": "not_renamed_10",
                "uVar9": "not_renamed_11",
                "puVar1": "not_renamed_1",
                "puVar2": "not_renamed_2",
                "PTR_DAT_08004264": "GLOBAL_CONSTANT_1",
                "DAT_080042fc": "MAX_VALUE",
                "PTR_DAT_08004268": "GLOBAL_CONSTANT_2",
                "FUN_08000ad8": "get_total",
                "FUN_08000adc": "get_value",
                "FUN_08001078": "not_renamed_3",
                "FUN_08003fc4": "not_renamed_4",
                "FUN_08003fd0": "update_global",
                "FUN_08003fdc": "update_global",
                "FUN_08003fe8": "update_global"
            },
            "code": "void calculate_statistics_and_update_globals_0800426c(int param1, int param2, int param3, int param4)\n    {\n        int total1 = get_total(param1, param2);\n        int total2 = get_total(total1, param3);\n        int total3 = get_total(total2, param4);\n        \n        update_global(total3, PTR_DAT_08004264);\n        \n        int value1 = get_value(total1, param3, param4);\n        update_global(value1, PTR_DAT_08004268);\n        \n        int value2 = get_value(total2, param3, param4);\n        update_global(value2, GLOBAL_CONSTANT_3);\n        \n        int value3 = get_value(param3, total1, param4);\n        update_global(value3, GLOBAL_CONSTANT_4);\n        \n        int value4 = get_value(param4, total1, total2);\n        \n        if (value4 > DAT_080042fc)\n        {\n            value4 = DAT_080042fc;\n        }\n        \n        if (value3 > DAT_080042fc)\n        {\n            value3 = DAT_080042fc;\n        }\n        \n        if (value2 > DAT_080042fc)\n        {\n            value2 = DAT_080042fc;\n        }\n        \n        if (value1 > DAT_080042fc)\n        {\n            value1 = DAT_080042fc;\n        }\n        \n        update_global(value4, GLOBAL_CONSTANT_5);\n        update_global(value1, GLOBAL_CONSTANT_6);\n        update_global(value2, GLOBAL_CONSTANT_7);\n        update_global(value3, GLOBAL_CONSTANT_8);\n        \n        update_global(total1 + 1000, GLOBAL_CONSTANT_9);\n        update_global(total2 + 1000, PTR_DAT_080042640);\n        update_global(total3 + 1000, PTR_DAT_080042641);\n        update_global(value4 + 1000, PTR_DAT_080042642);\n    }",
            "called": [
                "FUN_08003fe8",
                "FUN_08003fd0",
                "FUN_08001078",
                "FUN_08000ad8",
                "FUN_08000adc",
                "FUN_08003fc4",
                "FUN_08003fdc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800426c",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "calculate_statistics_and_update_globals_0800426c"
        },
        "FUN_08002538": {
            "renaming": {
                "FUN_08002538": "set_bit_and_update_pointer_08002538",
                "param_1": "pointer_to_pointer",
                "param_2": "value",
                "puVar1": "default_pointer",
                "puVar2": "pointer",
                "DAT_08002560": "DEFAULT_POINTER"
            },
            "code": "int set_bit_and_update_pointer_08002538(uint **pointer_to_pointer, uint value) {\n  uint *pointer = *pointer_to_pointer;\n  uint *default_pointer = DAT_08002560;\n  if (pointer == default_pointer) {\n    default_pointer = (uint *)(pointer[0x11] | 0x8000);\n  }\n  if (pointer == default_pointer) {\n    pointer[0x11] = (uint)default_pointer;\n  }\n  *pointer = *pointer | 1;\n  return 0;\n}",
            "called": [
                "FUN_08002520"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002538",
            "calling": [
                "FUN_08003ff4"
            ],
            "imported": false,
            "current_name": "set_bit_and_update_pointer_08002538"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "copy_i2c_data_to_buffer_080040e8",
                "param_1": "buffer_start",
                "param_2": "i2c_start_addr",
                "param_3": "num_bytes_to_copy",
                "param_4": "i2c_bus_id",
                "puVar1": "i2c_data_src",
                "puVar4": "buffer_ptr",
                "uVar2": "byte_to_copy",
                "iVar3": "byte_index",
                "iVar5": "buffer_start"
            },
            "code": "void copy_i2c_data_to_buffer_080040e8(unsigned int buffer_start, int i2c_start_addr, int num_bytes_to_copy, int i2c_bus_id) {\n  unsigned char *src_ptr;\n  unsigned char byte_to_copy;\n  unsigned char *buffer_ptr;\n  int byte_index;\n  src_ptr = i2c_data_src;\n  buffer_ptr = (unsigned char *)(num_bytes_to_copy + buffer_start - 1);\n  for (byte_index = 0; byte_index < num_bytes_to_copy; byte_index++) {\n    byte_to_copy = read_i2c_byte(i2c_start_addr, (i2c_bus_id + byte_index) & 0xffff, src_ptr, 0x4c, buffer_start);\n    buffer_ptr++;\n    *buffer_ptr = byte_to_copy;\n  }\n  return;\n}",
            "called": [
                "FUN_0800407c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "FUN_08002cb0",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08003298",
                "FUN_08002b48"
            ],
            "imported": false,
            "current_name": "copy_i2c_data_to_buffer_080040e8"
        },
        "FUN_08004ffc": {
            "renaming": {
                "FUN_08004ffc": "clear_string_and_call_function_08004ffc",
                "param_1": "string",
                "param_2": "param_2_copy",
                "param_3": "param_3_copy",
                "param_4": "param_4_copy",
                "local_78": "string_ptr",
                "local_70": "max_int",
                "local_6c": "unused",
                "local_6a": "max_short",
                "local_68": "current_char_ptr",
                "local_64": "unused",
                "uStack_c": "unused",
                "uStack_8": "unused",
                "uStack_4": "unused"
            },
            "code": "void clear_string_and_call_function_08004ffc(char *string, int param_2, int param_3, int param_4) {\n  char *string_ptr[2];\n  int max_int = 0x7fffffff;\n  int max_short = 0xffff;\n  string_ptr[0] = string;\n  char *current_char_ptr = string;\n  int param_2_copy = param_2;\n  int param_3_copy = param_3;\n  int param_4_copy = param_4;\n  call_function(*(int **)PTR_PTR_DAT_08005040, string_ptr, param_2_copy);\n  *string_ptr[0] = 0;\n  return;\n}",
            "called": [
                "FUN_080050fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ffc",
            "calling": [
                "FUN_08004cac"
            ],
            "imported": false,
            "current_name": "clear_string_and_call_function_08004ffc"
        },
        "FUN_0800115c": {
            "renaming": {
                "FUN_0800115c": "get_value_from_pointer_0800115c",
                "undefined4": "int",
                "PTR_DAT_08001164": "PTR_DAT_08001164"
            },
            "code": "int get_value_from_pointer_0800115c() {\n  int* ptr = (int*)PTR_DAT_08001164;\n  return *ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800115c",
            "calling": [
                "FUN_0800209c",
                "FUN_08001530",
                "thunk_FUN_0800115c",
                "FUN_08001460",
                "FUN_080014e2",
                "FUN_080015e8",
                "FUN_08004c18",
                "FUN_08001938",
                "FUN_080016f4",
                "FUN_08001b58",
                "FUN_08001828",
                "thunk_FUN_0800115c"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_0800115c"
        },
        "FUN_08002d88": {
            "renaming": {
                "FUN_08002d88": "process_MPU9250_data_08002d88",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "param_4": "data_4",
                "sVar1": "data_x",
                "sVar2": "data_y",
                "puVar3": "MPU9250_data",
                "puVar4": "MPU9250_data_z",
                "puVar5": "MPU9250_offset_x_h",
                "puVar6": "MPU9250_offset_y_h",
                "iVar7": "status",
                "uVar8": "temp",
                "uVar9": "temp",
                "local_28": "data_ptr",
                "uStack_21": "data_z",
                "uStack_26": "unused_1",
                "uStack_25": "unused_2",
                "local_24": "unused_3",
                "local_23": "unused_4",
                "local_22": "unused_5"
            },
            "code": "void process_MPU9250_data_08002d88(uint32_t data_1, uint32_t data_2, uint32_t data_3, uint32_t data_4) {\n    uint32_t status;\n    uint16_t data_x, data_y;\n    uint8_t data_z;\n    uint8_t *data_ptr;\n    uint32_t temp;\n    \n    data_ptr = MPU9250_data;\n    status = read_MPU9250_data(0x18, 2, data_ptr, 0xd7, data_1, data_2);\n    if (status >= 0) {\n        temp = (uint32_t)data_ptr[5] << 24 | (uint32_t)data_ptr[4] << 16 | (uint32_t)data_ptr[3] << 8 | (uint32_t)data_ptr[2];\n        data_x = (uint16_t)(temp >> 16);\n        data_y = (uint16_t)temp;\n        data_z = data_ptr[6];\n        \n        *(uint16_t *)MPU9250_data = data_x;\n        *(uint16_t *)(MPU9250_data + 2) = data_y;\n        *(uint8_t *)(MPU9250_data + 4) = data_z;\n        \n        temp = (uint32_t)data_x;\n        temp = process_data(temp, *(uint32_t *)MPU9250_offset_x_h, *(uint32_t *)(MPU9250_offset_x_h + 4), *(uint32_t *)(MPU9250_offset_x_h + 8));\n        *(uint32_t *)MPU9250_data_x = temp;\n        \n        temp = (uint32_t)data_y;\n        temp = process_data(temp, *(uint32_t *)MPU9250_offset_y_h, *(uint32_t *)(MPU9250_offset_y_h + 4), *(uint32_t *)(MPU9250_offset_y_h + 8));\n        *(uint32_t *)MPU9250_data_y = temp;\n        \n        temp = (uint32_t)data_z;\n        temp = process_data(temp, *(uint32_t *)MPU9250_offset_z_h, *(uint32_t *)(MPU9250_offset_z_h + 4), *(uint32_t *)(MPU9250_offset_z_h + 8));\n        *(uint32_t *)MPU9250_data_z = temp;\n    }\n}\n",
            "called": [
                "FUN_08000c44",
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_0800407c",
                "FUN_080040e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d88",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "process_MPU9250_data_08002d88"
        },
        "FUN_08000c44": {
            "renaming": {
                "FUN_08000c44": "calculate_hash_08000c44",
                "param_1": "input",
                "iVar1": "leading_zeroes_count",
                "uVar2": "shifted_input",
                "uVar3": "hash",
                "iVar4": "shifted_hash",
                "uVar5": "high_bits",
                "uVar6": "carry",
                "uVar7": "result",
                "uVar8": "shifted_input2",
                "iVar9": "carry2",
                "uVar10": "result2"
            },
            "code": "uint calculate_hash_08000c44(uint input)\n{\n  int leading_zeroes_count = count_leading_zeroes(input);\n  uint shifted_input = input << (leading_zeroes_count + 24);\n  uint hash = (shifted_input >> 31) | 0x4b000000;\n  if (leading_zeroes_count > 7) {\n    uint shifted_hash = hash << (leading_zeroes_count - 7);\n    uint high_bits = 0U >> (0x20 - (leading_zeroes_count - 7));\n    uint carry = (uint)(0x7fffffff < high_bits);\n    uint result = shifted_hash + (input << (leading_zeroes_count - 7)) + high_bits + carry;\n    if (high_bits == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shifted_hash = hash << (leading_zeroes_count + 24);\n  uint shifted_input2 = input >> (8 - leading_zeroes_count);\n  uint carry2 = (int)shifted_input << 1 >> 31;\n  uint result2 = shifted_hash + shifted_input2 - carry2;\n  if ((shifted_input & 0x7fffffff) == 0) {\n    result2 = result2 & ~(shifted_input << 1 >> 31);\n  }\n  return result2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c44",
            "calling": [
                "FUN_08002cb0",
                "FUN_0800483c",
                "FUN_08002d88",
                "FUN_0800411c",
                "FUN_08002bf0",
                "FUN_08002b48"
            ],
            "imported": false,
            "current_name": "calculate_hash_08000c44"
        },
        "FUN_08000a04": {
            "renaming": {
                "FUN_08000a04": "is_valid_input_08000a04",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "int is_valid_input_08000a04(uint input1, int input2, uint input3, int input4) {\n    int shifted_input2 = (input2 << 1) >> 0x15;\n    int shifted_input4 = (input4 << 1) >> 0x15;\n    if ((shifted_input2 != -1 || (input1 | (input2 << 0xc)) == 0) && (shifted_input4 != -1 || (input3 | (input4 << 0xc)) == 0)) {\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a04",
            "calling": [
                "FUN_08005854",
                "FUN_08005900",
                "FUN_08005bc8"
            ],
            "imported": false,
            "current_name": "is_valid_input_08000a04"
        },
        "FUN_080025e8": {
            "renaming": {
                "FUN_080025e8": "update_data_080025e8",
                "param_1": "data",
                "iVar1": "var1",
                "iVar2": "var2",
                "uVar3": "data_1",
                "iVar4": "var4",
                "iVar5": "var5",
                "iVar6": "var6"
            },
            "code": "void update_data_080025e8(int *data)\n{\n    int data_pointer = *data;\n    uint data_4 = data[4];\n    *(uint *)(data_pointer + 0x10) = *(uint *)(data_pointer + 0x10) & 0xffffcfff | data[3];\n    *(uint *)(data_pointer + 0xc) = data[2] | data_4 | data[5] | *(uint *)(data_pointer + 0xc) & 0xffffe9f3;\n    *(uint *)(data_pointer + 0x14) = *(uint *)(data_pointer + 0x14) & 0xfffffcff | data[6];\n    if (data_pointer == PTR_DAT_08002720) {\n        int var1 = get_value();\n        int var4 = (int)(((ulonglong)(uint)(var1 * 0x19) / (ulonglong)(uint)(data[1] << 2)) / 100);\n        int var2 = get_value();\n        int var5 = data[1];\n        int var6 = get_value();\n        var2 = (uint)(var2 * 0x19) / (uint)(var5 << 2) + (int)(((ulonglong)(uint)(var6 * 0x19) / (ulonglong)(uint)(data[1] << 2)) / 100) * -100;\n        int var3 = get_value();\n        uint data_1 = (uint)(var3 * 0x19) / (uint)(data[1] << 2);\n        int var7 = get_value();\n    }\n    else {\n        int var1 = get_value();\n        int var4 = (int)(((ulonglong)(uint)(var1 * 0x19) / (ulonglong)(uint)(data[1] << 2)) / 100);\n        int var2 = get_value();\n        int var5 = data[1];\n        int var6 = get_value();\n        var2 = (uint)(var2 * 0x19) / (uint)(var5 << 2) + (int)(((ulonglong)(uint)(var6 * 0x19) / (ulonglong)(uint)(data[1] << 2)) / 100) * -100;\n        int var3 = get_value();\n        uint data_1 = (uint)(var3 * 0x19) / (uint)(data[1] << 2);\n        int var7 = get_value();\n    }\n    *(uint *)(data_pointer + 8) = (((data_1 + (int)(((ulonglong)(uint)(var7 * 0x19) / (ulonglong)(uint)(data[1] << 2)) / 100)) * -100 + var2 * 0x10 + 0x32) / 100 & 0xf | (var2 * 0x10 + 0x32U) / 100 & 0xf0) + var4 * 0x10;\n    return;\n}\n",
            "called": [
                "FUN_08002250",
                "FUN_08002220"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e8",
            "calling": [
                "FUN_08002724"
            ],
            "imported": false,
            "current_name": "update_data_080025e8"
        },
        "FUN_08002b48": {
            "renaming": {
                "FUN_08002b48": "read_MPU9250_data_08002b48",
                "in_r3": "register_value",
                "local_18": "upper_bits",
                "local_14": "lower_bits",
                "PTR_s____Src_MPU9250_c_08002be4": "MPU9250_data_register_address",
                "PTR_DAT_08002be8": "MPU9250_data_pointer",
                "PTR_DAT_08002bec": "MPU9250_scaled_data_pointer",
                "uVar2": "scaled_data",
                "puVar1": "data_pointer",
                "FUN_08000c44": "i2c_read_bytes",
                "FUN_08000cec": "scale_accel_data"
            },
            "code": "void read_MPU9250_data_08002b48(void)\n{\n    uint16_t upper_bits_mask = 0xffff0000;\n    uint16_t lower_bits_mask = 0x0000ffff;\n    uint16_t data = 0;\n    uint32_t scaled_data = 0;\n    uint8_t register_address = 0xd0;\n    uint8_t bytes_to_read = 6;\n    i2c_read_bytes(register_address, bytes_to_read, (uint8_t*)&data);\n    MPU9250_data.accel_x = (int16_t)((data & upper_bits_mask) >> 16);\n    MPU9250_data.accel_y = (int16_t)(data & lower_bits_mask);\n    i2c_read_bytes(0x3b, bytes_to_read, (uint8_t*)&data);\n    MPU9250_data.accel_z = (int16_t)(data & lower_bits_mask);\n    scaled_data = scale_accel_data(MPU9250_data.accel_x);\n    MPU9250_data.accel_x_scaled = (float)scaled_data;\n    scaled_data = scale_accel_data(MPU9250_data.accel_y);\n    MPU9250_data.accel_y_scaled = (float)scaled_data;\n    scaled_data = scale_accel_data(MPU9250_data.accel_z);\n    MPU9250_data.accel_z_scaled = (float)scaled_data;\n}",
            "called": [
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_080040e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b48",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "read_MPU9250_data_08002b48"
        },
        "FUN_08004f68": {
            "renaming": {
                "FUN_08004f68": "copy_and_clear_memory_08004f68",
                "iVar1": "index",
                "puVar2": "destination_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table_ptr"
            },
            "code": "void copy_and_clear_memory_08004f68(void)\n{\n  int index;\n  undefined4 *destination_ptr;\n  code *jump_table_ptr;\n  for (index = 0; PTR_DAT_08004fa0 + index < PTR_DAT_08004fa4; index += 4) {\n    *(undefined4 *)(PTR_DAT_08004fa0 + index) = *(undefined4 *)(DAT_08004f9c + index);\n  }\n  for (destination_ptr = (undefined4 *)PTR_DAT_08004fa8; destination_ptr < PTR_DAT_08004fac; destination_ptr++) {\n    *destination_ptr = 0;\n  }\n  execute_function_1();\n  execute_function_2();\n  jump_table_ptr = (code *)0x8004f9a;\n  execute_function_3(jump_table_ptr);\n  return;\n}",
            "called": [
                "FUN_08004fb4",
                "FUN_080041ae",
                "FUN_08004f10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f68",
            "calling": [],
            "imported": false,
            "current_name": "copy_and_clear_memory_08004f68"
        },
        "FUN_08001170": {
            "renaming": {
                "FUN_08001170": "set_param_value_08001170",
                "param_1": "parameter",
                "DAT_08001190": "data_address",
                "PTR_0800119c": "mask",
                "PTR_08001198": "value"
            },
            "code": "void set_param_value_08001170(uint parameter) {\n    uint* DAT_08001190 = (uint*)(DAT_08001190 + 0xc);\n    uint PTR_0800119c = 0xf8ff;\n    uint PTR_08001198 = 0x5fa0000 | ((parameter & 7) << 8);\n    *DAT_08001190 = (*DAT_08001190 & PTR_0800119c) | PTR_08001198;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001170",
            "calling": [
                "FUN_08004ccc",
                "FUN_08001128"
            ],
            "imported": false,
            "current_name": "set_param_value_08001170"
        },
        "FUN_08002bf0": {
            "renaming": {
                "FUN_08002bf0": "initialize_mpu9250_registers_08002bf0",
                "local_20": "low_byte",
                "local_1c": "high_byte",
                "PTR_s____Src_MPU9250_c_08002c9c": "MPU9250_REGISTER_ADDRESS_START",
                "PTR_DAT_08002ca0": "register_pointer",
                "PTR_DAT_08002ca4": "gyro_config_pointer",
                "PTR_DAT_08002cac": "accel_config_pointer",
                "uVar3": "register_value"
            },
            "code": "void initialize_mpu9250_registers_08002bf0(void)\n{\n  uint16_t high_byte, low_byte;\n  uint32_t register_value;\n  \n  high_byte = 0x43;\n  low_byte = 0xd0;\n  register_value = 0;\n  \n  read_mpu9250_registers(low_byte, high_byte, &register_value, 6, PTR_s____Src_MPU9250_c_08002c9c, 0x7b);\n  \n  uint8_t *PTR_DAT_08002ca0 = DAT_08002ca0;\n  *(uint16_t *)PTR_DAT_08002ca0 = (uint16_t)register_value;\n  *(uint16_t *)(PTR_DAT_08002ca0 + 2) = (uint16_t)(register_value >> 16);\n  *(uint16_t *)(PTR_DAT_08002ca0 + 4) = (uint16_t)0;\n  \n  uint32_t gyro_config = read_mpu9250_register(MPU9250_GYRO_CONFIG);\n  gyro_config = set_bits_in_value(gyro_config, 3, 2, 0x03);\n  gyro_config = set_bits_in_value(gyro_config, 4, 4, 0x00);\n  gyro_config = set_bits_in_value(gyro_config, 5, 5, 0x00);\n  write_mpu9250_register(MPU9250_GYRO_CONFIG, gyro_config);\n  \n  uint32_t accel_config = read_mpu9250_register(MPU9250_ACCEL_CONFIG);\n  accel_config = set_bits_in_value(accel_config, 3, 2, 0x03);\n  accel_config = set_bits_in_value(accel_config, 4, 4, 0x00);\n  write_mpu9250_register(MPU9250_ACCEL_CONFIG, accel_config);\n  \n  uint32_t sample_rate_divider = read_mpu9250_register(MPU9250_SMPLRT_DIV);\n  sample_rate_divider = set_bits_in_value(sample_rate_divider, 7, 0, 0x04);\n  write_mpu9250_register(MPU9250_SMPLRT_DIV, sample_rate_divider);\n}\n",
            "called": [
                "FUN_08000c44",
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_080040e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002bf0",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "initialize_mpu9250_registers_08002bf0"
        },
        "FUN_08002ad0": {
            "renaming": {
                "FUN_08002ad0": "initialize_MPU9250_08002ad0",
                "FUN_0800407c": "set_register_value",
                "FUN_0800403c": "set_register_value",
                "PTR_s____Src_MPU9250_c_08002b44": "PTR_register_address"
            },
            "code": "void initialize_MPU9250_08002ad0(void)\n{\n  set_register_value(0xd0,0x75,PTR_s____Src_MPU9250_c_08002b44,0x3b);\n  set_register_value(0xd0,0x6b,0x80,1);\n  set_register_value(0xd0,0x6b,1);\n  set_register_value(0xd0,0x6c,0,1);\n  set_register_value(0xd0,0x19,0,1);\n  set_register_value(0xd0,0x1d,3,1);\n  set_register_value(0xd0,0x1a,3,1);\n  set_register_value(0xd0,0x1b,0x10,1);\n  set_register_value(0xd0,0x1c,8,1);\n  return;\n}",
            "called": [
                "FUN_0800403c",
                "FUN_0800407c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad0",
            "calling": [
                "FUN_08002ea0"
            ],
            "imported": false,
            "current_name": "initialize_MPU9250_08002ad0"
        },
        "FUN_08001050": {
            "renaming": {
                "FUN_08001050": "should_execute_function_08001050",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag",
                "FUN_08000ffc": "execute_preparation_function"
            },
            "code": "bool should_execute_function_08001050(void)\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  execute_preparation_function();\n  return !(bool)carry_flag || (bool)zero_flag;\n}",
            "called": [
                "FUN_08000ffc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001050",
            "calling": [
                "FUN_08002ee8"
            ],
            "imported": false,
            "current_name": "should_execute_function_08001050"
        },
        "FUN_080009c8": {
            "renaming": {
                "FUN_080009c8": "should_continue_execution_080009c8",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "code": "bool should_continue_execution_080009c8(void)\n{\n  bool zero_flag = false;\n  bool carry_flag = false;\n  FUN_08000990();\n  return !carry_flag || zero_flag;\n}",
            "called": [
                "FUN_08000990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c8",
            "calling": [
                "FUN_08006228"
            ],
            "imported": false,
            "current_name": "should_continue_execution_080009c8"
        },
        "FUN_08002ed4": {
            "renaming": {
                "FUN_08002ed4": "calculate_average_08002ed4",
                "puVar1": "average_ptr",
                "uVar2": "divisor",
                "uVar3": "numerator",
                "uVar4": "denominator"
            },
            "code": "void calculate_average_08002ed4(void)\n{\n  undefined *average_ptr;\n  undefined4 numerator;\n  undefined4 denominator;\n  undefined4 divisor;\n  \n  average_ptr = PTR_DAT_08002ee4;\n  numerator = *(undefined4 *)PTR_DAT_08002ee0;\n  denominator = *(undefined4 *)(PTR_DAT_08002ee4 + 4);\n  divisor = FUN_08000ad8(0x3f800000,denominator);\n  divisor = FUN_08000cec(divisor,numerator);\n  numerator = FUN_08000cec(denominator,*(undefined4 *)average_ptr);\n  divisor = FUN_08000adc(numerator,divisor);\n  *(undefined4 *)average_ptr = divisor;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ed4",
            "calling": [
                "FUN_08002f28",
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "calculate_average_08002ed4"
        },
        "FUN_08000f9c": {
            "renaming": {
                "FUN_08000f9c": "calculate_result_08000f9c",
                "param_1": "value1",
                "param_2": "value2",
                "bVar1": "is_negative_1",
                "uVar2": "doubled_value1",
                "uVar3": "doubled_value2",
                "uVar4": "bitwise_or_value",
                "bVar5": "is_bitwise_or_value_zero"
            },
            "code": "uint calculate_result_08000f9c(uint value1, uint value2) {\n  bool is_negative_1 = false;\n  bool is_negative_2 = false;\n  uint doubled_value1 = value1 * 2;\n  uint doubled_value2 = value2 * 2;\n  if (((int)doubled_value1 >> 0x18 == -1 || (int)doubled_value2 >> 0x18 == -1) && ((((int)doubled_value1 >> 0x18 == -1 && ((value1 & 0x7fffff) != 0)) || (((int)doubled_value2 >> 0x18 == -1 && ((value2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  uint bitwise_or_value = doubled_value1 | value2 & 0x7fffffff;\n  bool is_bitwise_or_value_zero = false;\n  if (!is_bitwise_or_value_zero) {\n    bitwise_or_value = value1 ^ value2;\n    is_bitwise_or_value_zero = bitwise_or_value == 0;\n  }\n  is_negative_1 = -1 < (int)bitwise_or_value;\n  if (is_negative_1) {\n    value1 = doubled_value1 + value2 * -2;\n    is_bitwise_or_value_zero = value1 == 0;\n  }\n  if ((is_negative_1 && doubled_value2 <= doubled_value1) && !is_bitwise_or_value_zero) {\n    value1 = (int)value2 >> 0x1f;\n  }\n  if (!is_negative_1 || doubled_value2 > doubled_value1) {\n    value1 = ~((int)value2 >> 0x1f);\n  }\n  if (!is_bitwise_or_value_zero) {\n    value1 = value1 | 1;\n  }\n  return value1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f9c",
            "calling": [
                "FUN_08001004"
            ],
            "imported": false,
            "current_name": "calculate_result_08000f9c"
        },
        "FUN_08006228": {
            "renaming": {
                "FUN_08006228": "FUNC_08006228"
            },
            "code": "\nuint FUNC_08006228(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  undefined4 uVar1;\n  uint uVar2;\n  uint extraout_r1;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 extraout_r1_00;\n  undefined4 extraout_r1_01;\n  uint extraout_r1_02;\n  undefined4 extraout_r1_03;\n  int iVar5;\n  int iVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  undefined4 uVar9;\n  uint uVar10;\n  undefined4 uVar11;\n  undefined4 uVar12;\n  ulonglong uVar13;\n  undefined8 uVar14;\n  undefined8 uVar15;\n  undefined8 uVar16;\n  undefined8 uVar17;\n  longlong lVar18;\n  ulonglong uVar19;\n  ulonglong uVar20;\n  undefined8 uVar21;\n  uint local_70;\n  undefined4 local_68;\n  undefined4 local_64;\n  int local_54;\n  \n  uVar10 = param_4 & 0x7fffffff;\n  if ((uVar10 | param_3) == 0) {\n    return 0;\n  }\n  uVar8 = param_2 & 0x7fffffff;\n  if ((int)uVar8 <= (int)DAT_08006428) {\n    if (uVar8 == DAT_08006428) {\n      if (param_1 == 0) {\n        if (uVar8 < uVar10) goto LAB_08006278;\nLAB_08006262:\n        if ((uVar10 != DAT_08006428) || (param_3 == 0)) {\n          if (-1 < (int)param_2) goto LAB_0800632a;\n          if (DAT_08006430 < (int)uVar10) {\n            local_70 = 2;\nLAB_080062ba:\n            if (param_3 == 0) {\n              if (uVar10 == DAT_08006428) {\n                if ((uVar8 + 0xc0100000 | param_1) == 0) {\n                  return 0;\n                }\n                if (DAT_08006434 < (int)uVar8) {\n                  if ((int)param_4 < 0) {\n                    return 0;\n                  }\n                  return 0;\n                }\n                if (-1 < (int)param_4) {\n                  return 0;\n                }\n                return 0;\n              }\nLAB_0800630c:\n              if (uVar10 == DAT_08006438) {\n                if (-1 < (int)param_4) {\n                  return param_1;\n                }\n                uVar8 = 0;\n                uVar10 = DAT_08006438;\n                goto LAB_08006320;\n              }\n              uVar19 = CONCAT44(param_2,param_1);\n              if (param_4 == 0x40000000) goto LAB_0800634a;\n              if ((param_4 == DAT_0800643c) && (-1 < (int)param_2)) {\n                uVar10 = FUN_08006c0c(param_1,param_2);\n                return uVar10;\n              }\n            }\n          }\n          else {\n            if ((int)uVar10 <= DAT_08006430 + -0x3500000) {\nLAB_0800632a:\n              local_70 = 0;\n              goto LAB_080062ba;\n            }\n            iVar6 = ((int)uVar10 >> 0x14) + -0x3ff;\n            if (0x14 < iVar6) {\n              uVar2 = param_3 >> (0x34U - iVar6 & 0xff);\n              if (param_3 == uVar2 << (0x34U - iVar6 & 0xff)) {\n                local_70 = 2 - (uVar2 & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (param_3 == 0) {\n              uVar2 = (int)uVar10 >> (0x14U - iVar6 & 0xff);\n              local_70 = param_3;\n              if (uVar10 == uVar2 << (0x14U - iVar6 & 0xff)) {\n                local_70 = 2 - (uVar2 & 1);\n              }\n              goto LAB_0800630c;\n            }\n            local_70 = 0;\n          }\n          uVar13 = do_nothing_0800708c(param_1,param_2);\n          uVar19 = CONCAT44(DAT_08006424,DAT_08006420);\n          uVar11 = (undefined4)(uVar13 >> 0x20);\n          uVar1 = (undefined4)uVar13;\n          uVar20 = uVar13 & 0xffffffff | ((ulonglong)param_2 & 0x7fffffff) << 0x20;\n          if ((param_1 == 0) && ((uVar8 == 0 || ((param_2 & 0x3fffffff) == DAT_08006438)))) {\n            if ((int)param_4 < 0) {\n              uVar13 = FUN_08000724(0,DAT_08006438,uVar1,uVar11);\n            }\n            if (-1 < (int)param_2) {\n              return (uint)uVar13;\n            }\n            if ((local_70 | uVar8 + 0xc0100000) != 0) {\n              return (uint)uVar13;\n            }\n          }\n          else {\n            uVar2 = 0xffffffff - ((int)param_2 >> 0x1f);\n            uVar13 = CONCAT44(param_2,param_1);\n            if ((local_70 | uVar2) != 0) {\n              if (DAT_08006440 < (int)uVar10) {\n                param_1 = DAT_08006420;\n                param_2 = DAT_08006424;\n                if (DAT_08006440 + 0x2100000 < (int)uVar10) {\n                  if (DAT_08006434 < (int)uVar8) {\nLAB_08006418:\n                    if ((int)param_4 < 1) {\n                      return 0;\n                    }\n                    goto LAB_0800634a;\n                  }\nLAB_080063fa:\n                  uVar19 = CONCAT44(DAT_08006424,DAT_08006420);\n                  if (-1 < (int)param_4) {\n                    return 0;\n                  }\n                  goto LAB_0800634a;\n                }\n                if ((int)uVar8 <= DAT_08006444) goto LAB_080063fa;\n                if ((int)DAT_08006438 < (int)uVar8) goto LAB_08006418;\n                uVar14 = FUN_08000168(uVar1,uVar11,0,DAT_080065d0);\n                uVar11 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar1 = (undefined4)uVar14;\n                uVar14 = FUN_080004d0(uVar1,uVar11,DAT_080065a8,DAT_080065ac);\n                uVar15 = FUN_080004d0(uVar1,uVar11,DAT_080065b0,DAT_080065b4);\n                uVar16 = FUN_080004d0(uVar1,uVar11,0,DAT_080065d4);\n                uVar16 = FUN_08000168(DAT_080065b8,DAT_080065bc,(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar16 = FUN_080004d0((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),uVar1,uVar11);\n                uVar16 = FUN_08000168(0,DAT_080065d8,(int)uVar16,(int)((ulonglong)uVar16 >> 0x20));\n                uVar17 = FUN_080004d0(uVar1,uVar11,uVar1,uVar11);\n                uVar16 = FUN_080004d0((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),(int)uVar17,\n                                      (int)((ulonglong)uVar17 >> 0x20));\n                uVar16 = FUN_080004d0((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),DAT_080065c0,\n                                      DAT_080065c4);\n                uVar15 = FUN_08000168((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                FUN_0800016c((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar15,\n                             (int)((ulonglong)uVar15 >> 0x20));\n                lVar18 = (ulonglong)extraout_r1 << 0x20;\n                uVar10 = extraout_r1;\n              }\n              else {\n                local_54 = 0;\n                if (uVar8 < 0x100000) {\n                  uVar20 = FUN_080004d0();\n                  local_54 = -0x35;\n                }\n                uVar10 = (uint)(uVar20 >> 0x20);\n                uVar1 = (undefined4)uVar20;\n                local_54 = ((int)uVar10 >> 0x14) + -0x3ff + local_54;\n                uVar10 = uVar10 & 0xfffff;\n                uVar8 = uVar10 | 0x3ff00000;\n                if (DAT_0800691c < (int)uVar10) {\n                  if (DAT_08006920 < (int)uVar10) {\n                    uVar8 = uVar8 - 0x100000;\n                    local_54 = local_54 + 1;\n                    goto LAB_08006628;\n                  }\n                  iVar6 = 1;\n                }\n                else {\nLAB_08006628:\n                  iVar6 = 0;\n                }\n                uVar7 = *(undefined4 *)(PTR_DAT_08006924 + iVar6 * 8);\n                uVar9 = *(undefined4 *)((int)(PTR_DAT_08006924 + iVar6 * 8) + 4);\n                uVar14 = FUN_08000168(uVar1,uVar8,uVar7,uVar9);\n                uVar12 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar15 = FUN_0800016c(uVar1,uVar8,uVar7,uVar9);\n                uVar15 = FUN_08000724(0,DAT_08006928,(int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n                uVar3 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar16 = FUN_080004d0((int)uVar14,uVar12,(int)uVar15,uVar3);\n                uVar4 = (undefined4)((ulonglong)uVar16 >> 0x20);\n                uVar11 = (undefined4)uVar16;\n                uVar16 = FUN_080004d0(0,uVar4);\n                uVar14 = FUN_08000168((int)uVar14,uVar12,(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar16 = FUN_08000168(0,((int)uVar8 >> 1 | 0x20000000U) + 0x80000 + iVar6 * 0x40000,\n                                      uVar7,uVar9);\n                uVar16 = FUN_08000168(uVar1,uVar8,(int)uVar16,(int)((ulonglong)uVar16 >> 0x20));\n                uVar16 = FUN_080004d0((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),0,uVar4);\n                uVar14 = FUN_08000168((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar14 = FUN_080004d0((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar15,uVar3\n                                     );\n                uVar12 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar15 = FUN_080004d0(uVar11,uVar4);\n                uVar3 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar1 = (undefined4)uVar15;\n                uVar15 = FUN_080004d0(uVar1,uVar3,DAT_080068d0,DAT_080068d4);\n                uVar15 = FUN_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_080068d8,\n                                      DAT_080068dc);\n                uVar15 = FUN_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar1,uVar3);\n                uVar15 = FUN_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_080068e0,\n                                      DAT_080068e4);\n                uVar15 = FUN_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar1,uVar3);\n                uVar15 = FUN_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_080068e8,\n                                      DAT_080068ec);\n                uVar15 = FUN_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar1,uVar3);\n                uVar15 = FUN_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_080068f0,\n                                      DAT_080068f4);\n                uVar15 = FUN_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar1,uVar3);\n                uVar15 = FUN_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_080068f8,\n                                      DAT_080068fc);\n                uVar16 = FUN_080004d0(uVar1,uVar3,uVar1,uVar3);\n                uVar15 = FUN_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar16 = FUN_0800016c(uVar11,uVar4,0,uVar4);\n                uVar16 = FUN_080004d0((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),(int)uVar14,\n                                      uVar12);\n                uVar15 = FUN_0800016c((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),(int)uVar15,\n                                      (int)((ulonglong)uVar15 >> 0x20));\n                uVar1 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar16 = FUN_080004d0(0,uVar4,0,uVar4);\n                uVar3 = (undefined4)((ulonglong)uVar16 >> 0x20);\n                uVar17 = FUN_0800016c((int)uVar16,uVar3,0,DAT_0800692c);\n                FUN_0800016c((int)uVar17,(int)((ulonglong)uVar17 >> 0x20),(int)uVar15,uVar1);\n                uVar17 = FUN_080004d0(0,uVar4,0,extraout_r1_00);\n                uVar7 = (undefined4)((ulonglong)uVar17 >> 0x20);\n                uVar21 = FUN_08000168(0,extraout_r1_00,0,DAT_0800692c);\n                uVar16 = FUN_08000168((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar16,uVar3\n                                     );\n                uVar15 = FUN_08000168((int)uVar15,uVar1,(int)uVar16,(int)((ulonglong)uVar16 >> 0x20)\n                                     );\n                uVar15 = FUN_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar11,uVar4);\n                uVar14 = FUN_080004d0((int)uVar14,uVar12,0,extraout_r1_00);\n                uVar15 = FUN_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar14,\n                                      (int)((ulonglong)uVar14 >> 0x20));\n                uVar1 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                FUN_0800016c((int)uVar17,uVar7,(int)uVar15,uVar1);\n                uVar14 = FUN_080004d0(0,extraout_r1_01,DAT_08006900,DAT_08006904);\n                uVar16 = FUN_08000168(0,extraout_r1_01,(int)uVar17,uVar7);\n                uVar15 = FUN_08000168((int)uVar15,uVar1,(int)uVar16,(int)((ulonglong)uVar16 >> 0x20)\n                                     );\n                uVar15 = FUN_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006908,\n                                      DAT_0800690c);\n                uVar16 = FUN_080004d0(0,extraout_r1_01,DAT_08006910,DAT_08006914);\n                uVar15 = FUN_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar15 = FUN_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),\n                                      *(undefined4 *)(PTR_DAT_08006930 + iVar6 * 8),\n                                      *(undefined4 *)((int)(PTR_DAT_08006930 + iVar6 * 8) + 4));\n                uVar16 = FUN_08000404(local_54);\n                uVar1 = (undefined4)((ulonglong)uVar16 >> 0x20);\n                uVar11 = *(undefined4 *)(PTR_DAT_08006934 + iVar6 * 8);\n                uVar12 = *(undefined4 *)((int)(PTR_DAT_08006934 + iVar6 * 8) + 4);\n                uVar17 = FUN_0800016c((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar15,\n                                      (int)((ulonglong)uVar15 >> 0x20));\n                uVar17 = FUN_0800016c((int)uVar17,(int)((ulonglong)uVar17 >> 0x20),uVar11,uVar12);\n                FUN_0800016c((int)uVar17,(int)((ulonglong)uVar17 >> 0x20),(int)uVar16,uVar1);\n                uVar16 = FUN_08000168(0,extraout_r1_02,(int)uVar16,uVar1);\n                lVar18 = FUN_08000168((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),uVar11,uVar12);\n                uVar10 = extraout_r1_02;\n              }\n              uVar14 = FUN_08000168((int)lVar18,(int)((ulonglong)lVar18 >> 0x20),(int)uVar14,\n                                    (int)((ulonglong)uVar14 >> 0x20));\n              uVar14 = FUN_08000168((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar14,\n                                    (int)((ulonglong)uVar14 >> 0x20));\n              param_2 = DAT_080065dc;\n              if ((local_70 - 1 | uVar2) != 0) {\n                param_2 = DAT_080065d0;\n              }\n              uVar15 = FUN_08000168(param_3,param_4,0,param_4);\n              uVar15 = FUN_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),0,uVar10);\n              uVar14 = FUN_080004d0((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),param_3,param_4);\n              uVar14 = FUN_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar14,\n                                    (int)((ulonglong)uVar14 >> 0x20));\n              uVar12 = (undefined4)((ulonglong)uVar14 >> 0x20);\n              uVar1 = (undefined4)uVar14;\n              uVar14 = FUN_080004d0(0,uVar10,0,param_4);\n              uVar3 = (undefined4)((ulonglong)uVar14 >> 0x20);\n              uVar11 = (undefined4)uVar14;\n              lVar18 = FUN_0800016c(uVar1,uVar12,uVar11,uVar3);\n              uVar8 = (uint)((ulonglong)lVar18 >> 0x20);\n              uVar10 = (uint)lVar18;\n              if (DAT_080065e0 < (int)uVar8) {\n                if ((uVar8 + 0xbf700000 | uVar10) == 0) {\n                  uVar15 = FUN_0800016c(uVar1,uVar12,DAT_08006ba8,DAT_08006bac);\n                  uVar16 = FUN_08000168(uVar10,uVar8,uVar11,uVar3);\n                  iVar6 = FUN_080009f0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                       (int)((ulonglong)uVar16 >> 0x20));\n                  if (iVar6 == 0) goto LAB_08006968;\n                }\n                uVar19 = FUN_080004d0(0,param_2,DAT_080065c8,DAT_080065cc);\n                param_1 = DAT_080065c8;\n                param_2 = DAT_080065cc;\n                goto LAB_0800634a;\n              }\n              if (DAT_08006c04 < (int)(uVar8 & 0x7fffffff)) {\n                if ((DAT_08006c08 + uVar8 | uVar10) == 0) {\n                  uVar15 = FUN_08000168(uVar10,uVar8,uVar11,uVar3);\n                  iVar6 = FUN_080009c8(uVar1,uVar12,(int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n                  if (iVar6 == 0) goto LAB_08006968;\n                }\n                uVar19 = FUN_080004d0(0,param_2,DAT_08006bf0,DAT_08006bf4);\n                param_1 = DAT_08006bf0;\n                param_2 = DAT_08006bf4;\n              }\n              else {\nLAB_08006968:\n                if (DAT_08006bf8 < (int)(uVar8 & 0x7fffffff)) {\n                  uVar8 = (0x100000 >> (((int)(uVar8 & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          uVar8;\n                  uVar10 = (uVar8 * 2 >> 0x15) - 0x3ff;\n                  iVar6 = (int)(uVar8 & 0xfffff | 0x100000) >> (0x14 - uVar10 & 0xff);\n                  if (lVar18 < 0) {\n                    iVar6 = -iVar6;\n                  }\n                  uVar14 = FUN_08000168(uVar11,uVar3,0,uVar8 & ~(DAT_08006bfc >> (uVar10 & 0xff)));\n                }\n                else {\n                  iVar6 = 0;\n                }\n                local_64 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                local_68 = (undefined4)uVar14;\n                FUN_0800016c(local_68,local_64,uVar1,uVar12);\n                uVar14 = FUN_080004d0(0,extraout_r1_03,DAT_08006bb0,DAT_08006bb4);\n                uVar11 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar15 = FUN_08000168(0,extraout_r1_03,local_68,local_64);\n                uVar15 = FUN_08000168(uVar1,uVar12,(int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n                uVar15 = FUN_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006bb8,\n                                      DAT_08006bbc);\n                uVar16 = FUN_080004d0(0,extraout_r1_03,DAT_08006bc0,DAT_08006bc4);\n                uVar15 = FUN_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar12 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar16 = FUN_0800016c((int)uVar14,uVar11,(int)uVar15,uVar12);\n                uVar3 = (undefined4)((ulonglong)uVar16 >> 0x20);\n                uVar1 = (undefined4)uVar16;\n                uVar14 = FUN_08000168(uVar1,uVar3,(int)uVar14,uVar11);\n                uVar14 = FUN_08000168((int)uVar15,uVar12,(int)uVar14,\n                                      (int)((ulonglong)uVar14 >> 0x20));\n                uVar12 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar15 = FUN_080004d0(uVar1,uVar3,uVar1,uVar3);\n                uVar4 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar11 = (undefined4)uVar15;\n                uVar15 = FUN_080004d0(uVar11,uVar4,DAT_08006bc8,DAT_08006bcc);\n                uVar15 = FUN_08000168((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006bd0,\n                                      DAT_08006bd4);\n                uVar15 = FUN_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar11,uVar4);\n                uVar15 = FUN_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006bd8,\n                                      DAT_08006bdc);\n                uVar15 = FUN_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar11,uVar4);\n                uVar15 = FUN_08000168((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006be0,\n                                      DAT_08006be4);\n                uVar15 = FUN_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar11,uVar4);\n                uVar15 = FUN_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006be8,\n                                      DAT_08006bec);\n                uVar15 = FUN_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar11,uVar4);\n                uVar15 = FUN_08000168(uVar1,uVar3,(int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n                uVar11 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar16 = FUN_080004d0(uVar1,uVar3,(int)uVar15,uVar11);\n                uVar15 = FUN_08000168((int)uVar15,uVar11,0,0x40000000);\n                uVar15 = FUN_08000724((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),(int)uVar15,\n                                      (int)((ulonglong)uVar15 >> 0x20));\n                uVar16 = FUN_080004d0(uVar1,uVar3,(int)uVar14,uVar12);\n                uVar14 = FUN_0800016c((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),(int)uVar14,\n                                      uVar12);\n                uVar14 = FUN_08000168((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar14,\n                                      (int)((ulonglong)uVar14 >> 0x20));\n                uVar14 = FUN_08000168((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),uVar1,uVar3);\n                uVar13 = FUN_08000168(0,DAT_08006c00,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                iVar5 = (int)(uVar13 >> 0x20);\n                uVar10 = iVar5 + iVar6 * 0x100000;\n                uVar19 = uVar13 & 0xffffffff | (ulonglong)uVar10 << 0x20;\n                if ((int)uVar10 < 0x100000) {\n                  uVar19 = FUN_080071c0((int)uVar13,iVar5,iVar6);\n                }\n                param_1 = 0;\n              }\nLAB_0800634a:\n              uVar10 = FUN_080004d0((int)uVar19,(int)(uVar19 >> 0x20),param_1,param_2);\n              return uVar10;\n            }\n          }\n          uVar1 = (undefined4)(uVar13 >> 0x20);\n          uVar14 = FUN_08000168((int)uVar13,uVar1,(int)uVar13,uVar1);\n          uVar10 = (uint)((ulonglong)uVar14 >> 0x20);\n          uVar8 = (uint)uVar14;\n          param_1 = uVar8;\n          param_2 = uVar10;\nLAB_08006320:\n          uVar10 = FUN_08000724(uVar8,uVar10,param_1,param_2);\n          return uVar10;\n        }\n      }\n    }\n    else if ((int)uVar10 <= (int)DAT_08006428) goto LAB_08006262;\n  }\n  if ((uVar8 + 0xc0100000 | param_1) == 0) {\n    return 0;\n  }\nLAB_08006278:\n  uVar10 = FUN_080070a4(PTR_DAT_0800642c);\n  return uVar10;\n}\n\n",
            "called": [
                "FUN_08000404",
                "FUN_080009c8",
                "FUN_080071c0",
                "FUN_08006c0c",
                "FUN_080004d0",
                "FUN_080009f0",
                "FUN_08000724",
                "FUN_0800016c",
                "FUN_0800708c",
                "FUN_080070a4",
                "FUN_08000168"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006228",
            "calling": [
                "FUN_08005900"
            ],
            "imported": false,
            "current_name": "FUNC_08006228"
        },
        "FUN_08000c3c": {
            "renaming": {
                "FUN_08000c3c": "calculate_hash_08000c3c",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "shift",
                "iVar3": "a",
                "uVar4": "temp"
            },
            "code": "uint calculate_hash_08000c3c(uint input)\n{\n    if (input == 0) {\n        return 0;\n    }\n    int leading_zeroes = count_leading_zeroes(input);\n    int shift = leading_zeroes - 8;\n    int a = shift * -0x800000 + 0x4a800000;\n    if (leading_zeroes > 7) {\n        uint temp = 0 << (shift & 0xff);\n        uint b = a + (input << (shift & 0xff)) + (0U >> (0x20 - shift & 0xff)) + (uint)(0x7fffffff < temp);\n        if (temp == 0x80000000) {\n            b = b & 0xfffffffe;\n        }\n        return b;\n    }\n    uint temp = input << (leading_zeroes + 0x18U & 0xff);\n    uint b = a + ((input >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)temp >> 0x1f));\n    if ((temp & 0x7fffffff) == 0) {\n        b = b & ~(temp >> 0x1f);\n    }\n    return b;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c3c",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "calculate_hash_08000c3c"
        },
        "FUN_080043bc": {
            "renaming": {
                "FUN_080043bc": "copy_data_and_call_function_080043bc",
                "puVar3": "dest_ptr",
                "puVar4": "src_ptr",
                "uVar1": "first_int",
                "uVar2": "second_int",
                "local_24": "data",
                "local_1c": "unused",
                "PTR_DAT_080043ec": "DATA_PTR_080043ec",
                "0x10": "num_pairs"
            },
            "code": "void copy_data_and_call_function_080043bc(void)\n{\n  int i;\n  int num_pairs = 8;\n  int data[num_pairs * 2];\n  int function_arg = 0x66;\n  int data_size = num_pairs * 2 * sizeof(int);\n  int *src_ptr = (int *)PTR_DAT_080043ec;\n  int *dest_ptr = data;\n  for(i = 0; i < num_pairs; i++)\n  {\n    *dest_ptr++ = *src_ptr++;\n    *dest_ptr++ = *src_ptr++;\n  }\n  call_function_with_data(function_arg, data, data_size);\n}\n",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043bc",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "copy_data_and_call_function_080043bc"
        },
        "FUN_08001214": {
            "renaming": {
                "FUN_08001214": "validate_input_08001214",
                "param_1": "input",
                "puVar1": "data_ptr",
                "iVar2": "data_value"
            },
            "code": "int validate_input_08001214(int input) {\n  int* data_ptr = DAT_08001238;\n  int data_value = DAT_0800123c;\n  if (input - 1U < 0x1000000) {\n    data_ptr[1] = input - 1U;\n    *(undefined *)(data_value + 0x23) = 0xf0;\n    data_ptr[2] = 0;\n    *data_ptr = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001214",
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "imported": false,
            "current_name": "validate_input_08001214"
        },
        "FUN_08003fc4": {
            "renaming": {
                "FUN_08003fc4": "set_value_in_memory_08003fc4",
                "param_1": "value",
                "PTR_DAT_08003fcc": "ptr",
                "offset": "offset",
                "address": "address"
            },
            "code": "void set_value_in_memory_08003fc4(int value)\n{\n    int* PTR_DAT_08003fcc = (int*) PTR_DAT_08003fcc;\n    int offset = 0x40;\n    int* address = PTR_DAT_08003fcc + offset;\n    *address = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fc4",
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "imported": false,
            "current_name": "set_value_in_memory_08003fc4"
        },
        "FUN_08000404": {
            "renaming": {
                "FUN_08000404": "reverse_and_improve_08000404",
                "param_1": "input",
                "uVar1": "mask",
                "uVar2": "abs_input",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeroes",
                "uVar5": "shift_amount_2",
                "uVar6": "mask",
                "bVar7": "shift_low",
                "bVar8": "shift_low",
                "bVar9": "shift_high",
                "in_r12": "unused"
            },
            "code": "ulonglong reverse_and_improve_08000404(uint input)\n{\n  uint mask = 0x80000000;\n  uint abs_input = input;\n  uint output_high = 0;\n  uint output_low = 0;\n  int leading_zeroes = count_leading_zeroes(abs_input);\n  uint shift_amount = leading_zeroes + 0x15;\n  bool shift_high = (shift_amount < 0x20);\n  bool shift_low = (leading_zeroes - 0xb <= 0);\n  if (input != 0)\n  {\n    if ((int)mask < 0)\n      abs_input = -input;\n    if (shift_high)\n    {\n      shift_amount = shift_amount + 1;\n      abs_input = abs_input << (shift_amount & 0xff);\n      output_high = abs_input >> (0xcU - leading_zeroes + shift_high & 0xff);\n    }\n    else\n    {\n      uint shift_amount_2 = 0x20 - shift_amount;\n      abs_input = abs_input << (leading_zeroes - 0xb & 0xff);\n      output_high = abs_input >> (shift_amount_2 & 0xff);\n      if (shift_low)\n        output_high = output_high | 0U >> (shift_amount_2 & 0xff);\n      else\n        output_low = 0 << (leading_zeroes - 0xb & 0xff);\n    }\n    if (shift_amount < 0x433)\n      return ((ulonglong)abs_input + (0x432 - shift_amount) * 0x100000 | (ulonglong)mask) << 32 | (ulonglong)output_high;\n    uint shift_amount_3 = ~(0x432 - shift_amount);\n    if (0x1e < (int)shift_amount_3)\n      return ((ulonglong)input | (ulonglong)abs_input >> (shift_amount_3 - 0x1f & 0xff)) & 0x80000000ffffffff;\n    int shift_amount_4 = shift_amount_3 - 0x13;\n    if (shift_amount_4 == 0 || shift_amount_4 < 0 != SCARRY4(shift_amount_3 - 0x1f,0xc))\n    {\n      shift_amount_3 = shift_amount_3 + 1;\n      return ((ulonglong)mask | (ulonglong)abs_input >> (shift_amount_3 & 0xff)) << 32 | (ulonglong)output_low | (ulonglong)abs_input << (0x20 - shift_amount_3 & 0xff);\n    }\n    return ((ulonglong)input | (ulonglong)output_low >> (0x20 - (0xcU - shift_amount_4) & 0xff) | (ulonglong)abs_input << (0xcU - shift_amount_4 & 0xff)) & 0x80000000ffffffff;\n  }\n  return 0;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000404",
            "calling": [
                "FUN_08006228"
            ],
            "imported": false,
            "current_name": "reverse_and_improve_08000404"
        },
        "FUN_0800209c": {
            "renaming": {
                "FUN_0800209c": "verify_and_process_input_0800209c",
                "param_1": "input_array",
                "param_2": "input_size",
                "puVar3": "ptr_1",
                "iVar4": "sign_bit_1",
                "iVar5": "function_result_2",
                "uVar6": "input_value_1",
                "uVar7": "input_value_2",
                "cVar1": "is_bit_set_1",
                "cVar2": "is_bit_set_2",
                "DAT_08002204": "ptr_1",
                "DAT_08002208": "ptr_2",
                "leading_zeroes_count": "leading_zeroes_count",
                "shifted_input_value_1": "shifted_input_value_1",
                "shifted_input_value_2": "shifted_input_value_2",
                "function_result_1": "function_result_1"
            },
            "code": "uint32_t verify_and_process_input_0800209c(uint32_t *input_array, uint32_t input_size)\n{\n  char is_bit_set_2;\n  char is_bit_set_1;\n  uint32_t *DAT_08002204 = DAT_08002204;\n  uint32_t *DAT_08002208 = DAT_08002208;\n  int32_t sign_bit_1;\n  int32_t sign_bit_2;\n  uint32_t input_value_1;\n  uint32_t input_value_2;\n  uint32_t leading_zeroes_count;\n  uint32_t shifted_input_value_1;\n  uint32_t shifted_input_value_2;\n  uint32_t function_result_1;\n  uint32_t function_result_2;\n\n  if ((input_size <= (*DAT_08002204 & 7)) || (*DAT_08002204 = *DAT_08002204 & 0xfffffff8 | input_size, input_size == (*DAT_08002204 & 7))) {\n    input_value_1 = *input_array;\n    sign_bit_1 = input_value_1 << 0x1e;\n    if (sign_bit_1 < 0) {\n      DAT_08002208[1] = DAT_08002208[1] & 0xffffff0f | input_array[2];\n    }\n    if (-1 < sign_bit_1) {\n      if ((input_size < (*DAT_08002204 & 7)) && (*DAT_08002204 = *DAT_08002204 & 0xfffffff8 | input_size, input_size != (*DAT_08002204 & 7))) {\n        return 1;\n      }\n      input_value_2 = *input_array;\n      is_bit_set_1 = (input_value_2 & 4) != 0;\n      if (is_bit_set_1) {\n        DAT_08002208[1] = DAT_08002208[1] & 0xfffff8ff | input_array[3];\n      }\n      sign_bit_2 = input_value_2 << 0x1c;\n      if (sign_bit_2 < 0) {\n        DAT_08002208[1] = DAT_08002208[1] & 0xffffc7ff | input_array[4] << 3;\n      }\n      function_result_1 = FUN_08002008();\n      leading_zeroes_count = count_leading_zeroes(0xf000000);\n      shifted_input_value_1 = DAT_08002208[1] & 0xf0;\n      shifted_input_value_2 = leading_zeroes_count & 0xff;\n      *(uint32_t *)PTR_DAT_08002210 = function_result_1 >> PTR_DAT_0800220c[shifted_input_value_1 >> shifted_input_value_2];\n      FUN_08001104(0);\n      return 0;\n    }\n    input_value_2 = input_array[1];\n    if (input_value_2 == 1) {\n      is_bit_set_2 = 1;\n      is_bit_set_1 = 0;\n    }\n    else {\n      if (input_value_2 == 2) {\n        shifted_input_value_1 = *DAT_08002208;\n        goto LAB_08002176;\n      }\n      is_bit_set_2 = 0;\n      is_bit_set_1 = 1;\n    }\n    leading_zeroes_count = count_leading_zeroes((uint32_t)(is_bit_set_1 << 6) << 0x18 | (uint32_t)(is_bit_set_2 << 6) << 8);\n    shifted_input_value_1 = (*DAT_08002208 >> (leading_zeroes_count & 0x1f)) << 0x1f;\n    if (shifted_input_value_1 < 0) {\n      DAT_08002208[1] = DAT_08002208[1] & 0xfffffffc | input_value_2;\n      sign_bit_1 = input_value_1 << 0x1f;\n      function_result_1 = FUN_0800115c(sign_bit_1, shifted_input_value_1);\n      if (input_array[1] == 1) {\n        do {\n          if ((DAT_08002208[1] & 0xc) == 4) goto LAB_080020ba;\n          function_result_2 = FUN_0800115c();\n        } while ((uint32_t)(function_result_2 - function_result_1) < 0x1389);\n      }\n      else if (input_array[1] == 2) {\n        do {\n          if ((DAT_08002208[1] & 0xc) == 8) goto LAB_080020ba;\n          function_result_2 = FUN_0800115c();\n        } while ((uint32_t)(function_result_2 - function_result_1) < 0x1389);\n      }\n      else {\n        do {\n          if ((DAT_08002208[1] & 0xc) == 0) goto LAB_080020ba;\n          function_result_2 = FUN_0800115c();\n        } while ((uint32_t)(function_result_2 - function_result_1) < 0x1389);\n      }\n      return 3;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_08002008",
                "FUN_08001104",
                "FUN_0800115c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800209c",
            "calling": [
                "FUN_08004514"
            ],
            "imported": false,
            "current_name": "verify_and_process_input_0800209c"
        },
        "FUN_0800403c": {
            "renaming": {
                "FUN_0800403c": "transfer_data_0800403c",
                "param_1": "slave_address",
                "param_2": "register_address",
                "param_3": "data",
                "param_4": "timeout_ms",
                "iVar1": "result",
                "local_14": "buffer",
                "PTR_DAT_08004074": "PTR_i2c_device",
                "FUN_08001828": "i2c_transfer",
                "PTR_s____Src_i2c_c_08004078": "PTR_s_error_message"
            },
            "code": "void transfer_data_0800403c(unsigned int slave_address, unsigned int register_address, unsigned char data, int timeout_ms) {\n  int result;\n  unsigned char buffer[8];\n  buffer[0] = data;\n  result = i2c_transfer(PTR_DAT_08004074, slave_address, register_address, buffer, 1, 200);\n  if (result != 0) {\n    log_error(PTR_s____Src_i2c_c_08004078, 27);\n  }\n  if (timeout_ms != 0) {\n    delay_ms(50);\n  }\n  return;\n}",
            "called": [
                "thunk_FUN_08001168",
                "FUN_08001828",
                "FUN_08004490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800403c",
            "calling": [
                "FUN_08002cb0",
                "FUN_08002ad0",
                "FUN_0800411c",
                "FUN_08003298"
            ],
            "imported": false,
            "current_name": "transfer_data_0800403c"
        },
        "FUN_08000cec": {
            "renaming": {
                "FUN_08000cec": "calculate_float_08000cec",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar2": "result",
                "uVar3": "byte_1",
                "uVar6": "product_lower",
                "uVar8": "value",
                "bVar9": "is_zero",
                "bVar10": "is_negative",
                "iVar4": "sum_of_bytes",
                "iVar5": "shift_amount",
                "iVar7": "temp",
                "lVar1": "product"
            },
            "code": "\nuint calculate_float_08000cec(uint input_1,uint input_2,undefined4 input_3,uint input_4)\n\n{\n  longlong product;\n  uint result;\n  uint byte_1;\n  int sum_of_bytes;\n  int shift_amount;\n  uint product_lower;\n  int temp;\n  uint value;\n  bool is_zero;\n  bool is_negative;\n  \n  byte_1 = input_1 >> 0x17 & 0xff;\n  is_zero = byte_1 == 0;\n  if (!is_zero) {\n    input_4 = input_2 >> 0x17 & 0xff;\n    is_zero = input_4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = byte_1 == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = input_4 == 0xff;\n  }\n  if (is_zero) {\n    input_4 = input_2 >> 0x17 & 0xff;\n    if (byte_1 == 0xff || input_4 == 0xff) {\n      is_zero = input_1 == 0 || input_1 == 0x80000000;\n      result = input_2;\n      if (input_1 != 0 && input_1 != 0x80000000) {\n        is_zero = input_2 == 0;\n        result = input_1;\n      }\n      if (!is_zero) {\n        is_zero = input_2 == 0x80000000;\n      }\n      value = result;\n      if (((is_zero) || ((byte_1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((input_4 == 0xff && (value = input_2, (input_2 & 0x7fffff) != 0)))) {\n        return value | 0x7fc00000;\n      }\n      result = result ^ input_2;\n      goto LAB_08000e3c;\n    }\n    is_zero = (input_1 & 0x7fffffff) == 0;\n    if (!is_zero) {\n      is_zero = (input_2 & 0x7fffffff) == 0;\n    }\n    if (is_zero) {\n      return (input_1 ^ input_2) & 0x80000000;\n    }\n    is_zero = byte_1 == 0;\n    result = input_1 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input_1 = input_1 << 1;\n        is_zero = (input_1 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      byte_1 = byte_1 - 1;\n    }\n    input_1 = input_1 | result;\n    is_zero = input_4 == 0;\n    result = input_2 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input_2 = input_2 << 1;\n        is_zero = (input_2 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      input_4 = input_4 - 1;\n    }\n    input_2 = input_2 | result;\n  }\n  sum_of_bytes = byte_1 + input_4;\n  value = input_1 ^ input_2;\n  byte_1 = input_1 << 9;\n  is_zero = byte_1 == 0;\n  if (!is_zero) {\n    input_2 = input_2 << 9;\n    is_zero = input_2 == 0;\n  }\n  if (is_zero) {\n    if (byte_1 == 0) {\n      input_2 = input_2 << 9;\n    }\n    result = value & 0x80000000 | input_1 & 0x7fffff | input_2 >> 9;\n    is_negative = SBORROW4(sum_of_bytes,0x7f);\n    shift_amount = sum_of_bytes + -0x7f;\n    is_zero = shift_amount == 0;\n    temp = shift_amount;\n    if (!is_zero && 0x7e < sum_of_bytes) {\n      is_negative = SBORROW4(0xff,shift_amount);\n      temp = 0xff - shift_amount;\n      is_zero = shift_amount == 0xff;\n    }\n    if (!is_zero && temp < 0 == is_negative) {\n      result = result | shift_amount * 0x800000;\n    }\n    if (!is_zero && temp < 0 == is_negative) {\n      return result;\n    }\n    result = result | 0x800000;\n    product_lower = 0;\n    is_negative = SBORROW4(shift_amount,1);\n    value = sum_of_bytes - 0x80;\n    is_zero = value == 0;\n    byte_1 = value;\n  }\n  else {\n    product = (ulonglong)(byte_1 >> 5 | 0x8000000) * (ulonglong)(input_2 >> 5 | 0x8000000);\n    product_lower = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    is_zero = result < 0x800000;\n    if (is_zero) {\n      result = result << 1;\n    }\n    if (is_zero) {\n      result = result | product_lower >> 0x1f;\n      product_lower = product_lower << 1;\n    }\n    result = value & 0x80000000 | result;\n    value = (sum_of_bytes + -0x7f) - (uint)is_zero;\n    is_negative = SBORROW4(value,0xfd);\n    is_zero = value == 0xfd;\n    byte_1 = value - 0xfd;\n    if (value < 0xfe) {\n      result = result + value * 0x800000 + (uint)(0x7fffffff < product_lower);\n      if (product_lower == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (is_zero || (int)byte_1 < 0 != is_negative) {\n    is_zero = (int)(value + 0x19) < 0;\n    if (value == 0xffffffe7 || is_zero != SCARRY4(value,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (value != 0xffffffe7 && is_zero == SCARRY4(value,0x19)) {\n      byte_1 = (result << 1) >> (-value & 0xff);\n      value = result << (value + 0x20 & 0xff);\n      byte_1 = ((uint)((result & 0x80000000) != 0) << 0x1f | byte_1 >> 1) + (uint)((byte)byte_1 & 1);\n      if ((product_lower | value << 1) == 0) {\n        byte_1 = byte_1 & ~(value >> 0x1f);\n      }\n      return byte_1;\n    }\n    return result;\n  }\nLAB_08000e3c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000cec",
            "calling": [
                "FUN_08002ec0",
                "FUN_08002cb0",
                "FUN_0800483c",
                "FUN_08002d88",
                "FUN_08003330",
                "FUN_08004a30",
                "FUN_08002bf0",
                "FUN_08002f28",
                "FUN_08004a84",
                "FUN_08002b48"
            ],
            "imported": false,
            "current_name": "calculate_float_08000cec"
        },
        "FUN_08006070": {
            "renaming": {
                "FUN_08006070": "calculate_result_08006070",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "result1",
                "uVar6": "result2",
                "uVar7": "var1",
                "uVar8": "var2",
                "constant1": "constant1",
                "constant2": "constant2"
            },
            "code": "ulonglong calculate_result_08006070(uint param1, uint param2, uint param3, uint param4)\n{\n    uint temp1, temp2;\n    int temp3;\n    uint temp4;\n    ulonglong result1, result2;\n    ulonglong constant1;\n    ulonglong constant2;\n    undefined8 var1;\n    undefined8 var2;\n\n    constant2 = CONCAT44(DAT_08006214, DAT_08006210);\n    constant1 = CONCAT44(DAT_08006204, DAT_08006200);\n    temp4 = param4 & 0x7fffffff;\n    if ((DAT_08006220 < (temp4 | (-param3 | param3) >> 0x1f)) || (temp2 = param2 & 0x7fffffff, DAT_08006220 < (temp2 | (-param1 | param1) >> 0x1f))) {\n        result1 = FUN_0800016c(param1, param2, param3, param4, param4);\n        return result1;\n    }\n    if ((param4 + 0xc0100000 | param3) == 0) {\n        result1 = FUN_08006d68();\n        return result1;\n    }\n    temp1 = (int)param4 >> 0x1e & 2U | param2 >> 0x1f;\n    if ((param1 | temp2) == 0) {\n        if (temp1 == 2) {\n            return CONCAT44(DAT_080061fc, DAT_080061f8);\n        }\n        if (temp1 != 3) {\n            return CONCAT44(param2, param1);\n        }\n    }\n    else {\n        if ((param3 | temp4) != 0) {\n            if (temp4 == DAT_08006220) {\n                if (temp2 == temp4) {\n                    if (temp1 == 2) {\n                        return CONCAT44(DAT_080061ec, DAT_080061e8);\n                    }\n                    if (temp1 == 3) {\n                        return CONCAT44(DAT_080061f4, DAT_080061f0);\n                    }\n                    if (temp1 != 1) {\n                        return CONCAT44(DAT_0800621c, DAT_08006218);\n                    }\n                    return CONCAT44(DAT_080061e4, DAT_080061e0);\n                }\n                if (temp1 == 2) {\n                    return CONCAT44(DAT_080061fc, DAT_080061f8);\n                }\n                if (temp1 == 3) {\n                    return result1;\n                }\n                if (temp1 == 1) {\n                    return 0x8000000000000000;\n                }\n                return 0;\n            }\n            if (temp2 != DAT_08006220) {\n                temp3 = (int)(temp2 - temp4) >> 0x14;\n                if (temp3 < 0x3d) {\n                    if (((int)param4 < 0) && (temp3 + 0x3c < 0 != SCARRY4(temp3, 0x3c))) {\n                        constant2 = 0;\n                    }\n                    else {\n                        FUN_08000724(param1, param2);\n                        do_nothing_0800708c();\n                        constant2 = FUN_08006d68();\n                    }\n                }\n                temp3 = (int)(constant2 >> 0x20);\n                if (temp1 != 1) {\n                    if (temp1 == 2) {\n                        var2 = FUN_08000168((int)constant2, temp3, DAT_08006208, DAT_0800620c);\n                        var1 = CONCAT44(DAT_080061fc, DAT_080061f8);\n                    }\n                    else {\n                        if (temp1 == 0) {\n                            return constant2;\n                        }\n                        var1 = FUN_08000168((int)constant2, temp3, DAT_08006208, DAT_0800620c);\n                        var2 = CONCAT44(DAT_080061fc, DAT_080061f8);\n                    }\n                    result1 = FUN_08000168((int)var1, (int)((ulonglong)var1 >> 0x20), (int)var2, (int)((ulonglong)var2 >> 0x20));\n                    return result1;\n                }\n                return constant2 & 0xffffffff | (ulonglong)(temp3 + 0x80000000) << 0x20;\n            }\n        }\n        result1 = constant2;\n        if ((int)param2 < 0) {\n            result1 = CONCAT44(DAT_080061dc, DAT_080061d8);\n        }\n    }\n    return result1;\n}",
            "called": [
                "FUN_08000724",
                "FUN_0800016c",
                "FUN_0800708c",
                "FUN_08000168",
                "FUN_08006d68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006070",
            "calling": [
                "thunk_FUN_08006070"
            ],
            "imported": false,
            "current_name": "calculate_result_08006070"
        },
        "thunk_FUN_08006070": {
            "renaming": {
                "thunk_FUN_08006070": "calculate_result_thunk_08006070",
                "param_1": "x",
                "param_2": "y",
                "param_3": "z",
                "param_4": "w",
                "uVar1": "h",
                "uVar2": "d",
                "iVar3": "i",
                "uVar4": "a",
                "uVar5": "g",
                "uVar6": "f",
                "uVar7": "k",
                "uVar8": "l"
            },
            "code": "ulonglong calculate_result_thunk_08006070(uint x, uint y, uint z, uint w)\n{\n  uint a = 0x7fffffff;\n  uint b = w & a;\n  uint c = z | (-z | z) >> 0x1f;\n  uint d = y & a;\n  uint e = x | d;\n  ulonglong f = CONCAT44(PTR_DAT_08006214, PTR_DAT_08006210);\n  ulonglong g = CONCAT44(PTR_DAT_08006204, PTR_DAT_08006200);\n  if (PTR_DAT_08006220 < c || PTR_DAT_08006220 < (b | (-w | w) >> 0x1f))\n  {\n    g = FUN_0800016c(x, y, z, w, w);\n    return g;\n  }\n  if ((w + 0xc0100000 | z) == 0)\n  {\n    g = FUN_08006d68();\n    return g;\n  }\n  uint h = (int)w >> 0x1e & 2U | d >> 0x1f;\n  if (e == 0 && d == 0)\n  {\n    if (h == 2)\n    {\n      return CONCAT44(PTR_DAT_080061fc, PTR_DAT_080061f8);\n    }\n    if (h != 3)\n    {\n      return CONCAT44(y, x);\n    }\n  }\n  else\n  {\n    if (b != PTR_DAT_08006220 || d != PTR_DAT_08006220)\n    {\n      int i = (int)(d - b) >> 0x14;\n      if (i < 0x3d)\n      {\n        if ((int)w < 0 && (i + 0x3c < 0 != SCARRY4(i, 0x3c)))\n        {\n          f = 0;\n        }\n        else\n        {\n          FUN_08000724(x, y);\n          do_nothing_0800708c();\n          f = FUN_08006d68();\n        }\n      }\n      int j = (int)(f >> 0x20);\n      if (h != 1)\n      {\n        if (h == 2)\n        {\n          ulonglong k = FUN_08000168((int)f, j, PTR_DAT_08006208, PTR_DAT_0800620c);\n          ulonglong l = CONCAT44(PTR_DAT_080061fc, PTR_DAT_080061f8);\n          g = FUN_08000168((int)l, (int)(l >> 0x20), (int)k, (int)(k >> 0x20));\n        }\n        else if (h == 0)\n        {\n          g = f;\n        }\n        else\n        {\n          ulonglong m = FUN_08000168((int)f, j, PTR_DAT_08006208, PTR_DAT_0800620c);\n          ulonglong n = CONCAT44(PTR_DAT_080061fc, PTR_DAT_080061f8);\n          g = FUN_08000168((int)n, (int)(n >> 0x20), (int)m, (int)(m >> 0x20));\n        }\n        return g;\n      }\n      g = f & 0xffffffff | (ulonglong)(j + 0x80000000) << 0x20;\n    }\n    else\n    {\n      if ((int)y < 0)\n      {\n        g = CONCAT44(PTR_DAT_080061dc, PTR_DAT_080061d8);\n      }\n      else\n      {\n        g = f;\n      }\n    }\n  }\n  return g;\n}",
            "called": [
                "FUN_08006070"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058fc",
            "calling": [
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "calculate_result_thunk_08006070"
        },
        "FUN_08004cac": {
            "renaming": {
                "FUN_08004cac": "process_data_08004cac",
                "param_1": "data",
                "puVar1": "data_ptr",
                "PTR_DAT_08004cc4": "data_start_ptr",
                "FUN_08004ffc": "perform_operation",
                "PTR_DAT_08004cc8": "data_end_ptr",
                "FUN_08004c8c": "cleanup"
            },
            "code": "void process_data_08004cac(undefined4 data){\n  undefined *data_ptr;\n  data_ptr = PTR_DAT_08004cc4;\n  perform_operation(PTR_DAT_08004cc4, PTR_DAT_08004cc8, data);\n  cleanup(data_ptr);\n  return;\n}",
            "called": [
                "FUN_08004ffc",
                "FUN_08004c8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cac",
            "calling": [
                "FUN_08004490"
            ],
            "imported": false,
            "current_name": "process_data_08004cac"
        },
        "FUN_08004c18": {
            "renaming": {
                "FUN_08004c18": "decode_string_08004c18",
                "param_1": "input",
                "puVar1": "output",
                "iVar2": "index_1",
                "iVar3": "index_2",
                "uVar4": "current_char",
                "puVar5": "string_ptr"
            },
            "code": "int decode_string_08004c18(char input) {\n  char *output;\n  int index_1;\n  int index_2;\n  char current_char;\n  unsigned short *string_ptr;\n  \n  string_ptr = (unsigned short *)STRING_PTR;\n  *STRING_PTR = input;\n  output = OUTPUT_PTR;\n  if ((OUTPUT_PTR[0x39] == '\\x01') || (OUTPUT_PTR[0x39] == '\"')) {\n    if (string_ptr == (unsigned short *)0x0) {\n      return 1;\n    }\n    if (OUTPUT_PTR[0x38] != '\\x01') {\n      OUTPUT_PTR[0x38] = 1;\n      *(int *)(output + 0x3c) = 0;\n      *(unsigned short *)(output + 0x24) = 1;\n      if (output[0x39] == '\"') {\n        current_char = 0x32;\n      }\n      else {\n        current_char = 0x12;\n      }\n      *(unsigned short *)(output + 0x26) = 1;\n      output[0x39] = current_char;\n      while (1) {\n        if (*(unsigned short *)(output + 0x26) == 0) {\n          index_1 = get_next_value();\n          do {\n            if (**(int **)output << 0x19 < 0) {\n              if (output[0x39] == '2') {\n                current_char = 0x22;\n              }\n              else {\n                current_char = 1;\n              }\n              output[0x39] = current_char;\n              output[0x38] = 0;\n              return 0;\n            }\n            index_2 = get_next_value();\n          } while ((unsigned int)(index_2 - index_1) < 6);\n          index_1 = *(int *)output;\n          *(unsigned int *)(index_1 + 0xc) = *(unsigned int *)(index_1 + 0xc) & 0xffffff7f;\n          *(unsigned int *)(index_1 + 0xc) = *(unsigned int *)(index_1 + 0xc) & 0xffffffdf;\n          *(unsigned int *)(index_1 + 0xc) = *(unsigned int *)(index_1 + 0xc) & 0xfffffeff;\n          *(unsigned int *)(index_1 + 0x14) = *(unsigned int *)(index_1 + 0x14) & 0xfffffffe;\n          output[0x39] = 1;\n          output[0x38] = 0;\n          return 3;\n        }\n        *(unsigned short *)(output + 0x26) = *(unsigned short *)(output + 0x26) + -1;\n        if (*(int *)(output + 8) == 0x1000) {\n          index_1 = get_next_value();\n          while (-1 < **(int **)output << 0x18) {\n            index_2 = get_next_value();\n            if (5 < (unsigned int)(index_2 - index_1)) {\n              index_1 = *(int **)output[1] = *string_ptr & 0x1ff;\n              if (*(int *)(output + 0x10) == 0) {\n                string_ptr = (unsigned short *)((int)string_ptr + 1);\n                goto LAB_080027c4;\n              }\n            }\n          }\n        }\n        else {\n          index_1 = get_next_value();\n          while (-1 < **(int **)output << 0x18) {\n            index_2 = get_next_value();\n            if (5 < (unsigned int)(index_2 - index_1)) {\n              *(int **)output[1] = (unsigned int)*(unsigned char *)string_ptr;\n            }\n            string_ptr = (unsigned short *)((int)string_ptr + 1);\n          }\n        }\n      }\n    }\n  }\n  return 2;\n}",
            "called": [
                "FUN_0800115c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c18",
            "calling": [
                "FUN_08004300",
                "FUN_08004490",
                "FUN_08004c8c"
            ],
            "imported": false,
            "current_name": "decode_string_08004c18"
        },
        "FUN_0800483c": {
            "renaming": {
                "FUN_0800483c": "calculate_result_0800483c",
                "param_1": "input_array",
                "uVar1": "third_value",
                "uVar2": "seventeenth_value",
                "iVar3": "eighth_value",
                "iVar4": "ninth_value",
                "iVar5": "tenth_value",
                "iVar6": "twelfth_value",
                "thirteenth_value": "thirteenth_value",
                "fourteenth_value": "fourteenth_value",
                "seventeenth_value": "seventeenth_value",
                "eighteenth_value": "eighteenth_value",
                "nineteenth_value": "nineteenth_value",
                "twentieth_value": "twentieth_value",
                "twenty_first_value": "twenty_first_value"
            },
            "code": "void calculate_result_0800483c(int *input_array)\n{\n    int array_length = input_array[0xc];\n    int first_value = input_array[7];\n    int second_value = input_array[9];\n    int third_value = FUN_08000adc(first_value, second_value);\n    int fourth_value = FUN_08000ad8(third_value, array_length);\n    input_array[10] = fourth_value;\n    if (*input_array == 3) {\n        int fifth_value = FUN_08001064(input_array[10], 0);\n        if (fifth_value == 0) {\n            fifth_value = FUN_08001028(input_array[10], DAT_08004974);\n        }\n        else {\n            fifth_value = FUN_08001064(input_array[10], DAT_08004964);\n        }\n        if (fifth_value != 0) {\n            int sixth_value = input_array[10];\n            int seventh_value = FUN_08000cec(input_array[10], DAT_08004968);\n            int eighth_value = FUN_08001064(input_array[10], 0);\n            int ninth_value = input_array[10];\n            if (eighth_value == 0) {\n                ninth_value = ninth_value + -0x80000000;\n            }\n            seventh_value = FUN_08000e54(seventh_value, ninth_value);\n            int tenth_value = FUN_08000ad8(sixth_value, seventh_value);\n            input_array[10] = tenth_value;\n        }\n    }\n    int eleventh_value = input_array[2];\n    int twelfth_value = input_array[3];\n    int thirteenth_value = FUN_08000cec(input_array[1], input_array[10]);\n    input_array[0xe] = thirteenth_value;\n    int fourteenth_value = FUN_08000adc(input_array[10], input_array[0xf]);\n    input_array[0xf] = fourteenth_value;\n    int fifteenth_value = FUN_08001028(input_array[0xf], DAT_0800496c);\n    int sixteenth_value = DAT_0800496c;\n    if ((fifteenth_value == 0) && (fifteenth_value = FUN_08001064(input_array[0xf], DAT_08004970), sixteenth_value = DAT_08004970, fifteenth_value == 0)) {\n        sixteenth_value = input_array[0xf];\n    }\n    input_array[0xf] = sixteenth_value;\n    int seventeenth_value = FUN_08000ad8(input_array[0xc], input_array[0xd]);\n    input_array[0x10] = seventeenth_value;\n    int eighteenth_value = input_array[0xe];\n    int nineteenth_value = FUN_08000cec(eleventh_value, input_array[0xf]);\n    nineteenth_value = FUN_08000adc(nineteenth_value, eighteenth_value);\n    int twentieth_value = FUN_08000cec(twelfth_value, input_array[0x10]);\n    seventeenth_value = FUN_08000ad8(nineteenth_value, twentieth_value);\n    input_array[0x12] = seventeenth_value;\n    int twenty_first_value = FUN_08000c44(input_array[0x13]);\n    fifteenth_value = FUN_08001028(input_array[0x12], DAT_0800496c);\n    sixteenth_value = DAT_0800496c;\n    if ((fifteenth_value == 0) && (fifteenth_value = FUN_08001064(input_array[0x12], DAT_08004970), sixteenth_value = DAT_08004970, fifteenth_value == 0)) {\n        sixteenth_value = input_array[0x12];\n    }\n    seventeenth_value = FUN_08000cec(sixteenth_value, twenty_first_value);\n    input_array[0x12] = seventeenth_value;\n    input_array[0xd] = input_array[0xc];\n    input_array[0xb] = input_array[10];\n    input_array[0x15] = input_array[0x14];\n}",
            "called": [
                "FUN_08000c44",
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_08000adc",
                "FUN_08001064",
                "FUN_08000e54",
                "FUN_08001028"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800483c",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "calculate_result_0800483c"
        },
        "FUN_08004c8c": {
            "renaming": {
                "FUN_08004c8c": "iterate_and_call_function_08004c8c",
                "param_1": "data",
                "uVar1": "distance_to_start",
                "puVar2": "current_pointer",
                "FUN_08000150": "calculate_distance_to_start",
                "FUN_08004c18": "call_function_on_pointer"
            },
            "code": "void iterate_and_call_function_08004c8c(void *data)\n{\n  uint distance_to_start;\n  void *current_pointer;\n  \n  current_pointer = data;\n  while( true ) {\n    distance_to_start = calculate_distance_to_start(data);\n    if (distance_to_start <= (uint)((int)current_pointer - (int)data)) break;\n    call_function_on_pointer(*current_pointer);\n    current_pointer = current_pointer + 1;\n  }\n  return;\n}",
            "called": [
                "FUN_08000150",
                "FUN_08004c18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c8c",
            "calling": [
                "FUN_08004cac",
                "FUN_08004300",
                "FUN_08004490"
            ],
            "imported": false,
            "current_name": "iterate_and_call_function_08004c8c"
        },
        "FUN_08001460": {
            "renaming": {
                "FUN_08001460": "check_if_bit_is_set_in_array_08001460",
                "param_1": "array",
                "param_2": "bit_index",
                "param_3": "timeout",
                "iVar1": "start_time",
                "puVar4": "current_array",
                "uVar3": "mask",
                "iVar2": "current_time",
                "mask_index": "mask_index"
            },
            "code": "uint32_t check_if_bit_is_set_in_array_08001460(uint32_t **array, uint32_t bit_index, uint32_t timeout) {\n    int start_time = get_current_time();\n    do {\n        uint32_t *current_array = *array;\n        uint32_t mask_index = ((bit_index << 8) >> 0x18) == 1 ? 5 : 6;\n        uint32_t mask = current_array[mask_index];\n        if ((bit_index & 0xffff & ~mask) == 0) {\n            return 0;\n        }\n        if ((int)(current_array[5] << 0x15) < 0) {\n            *current_array |= 0x200;\n            current_array[5] &= ~0x400;\n            array[0xe] = (uint32_t *)0x4;\n            *((uint8_t *)array + 0x35) = 0x20;\n            *(uint8_t *)(array + 0xd) = 0;\n            return 1;\n        }\n    } while ((timeout == 0xffffffff) || ((timeout != 0) && (get_current_time() - start_time) <= timeout));\n    *((uint8_t *)array + 0x35) = 0x20;\n    *(uint8_t *)(array + 0xd) = 0;\n    return 3;\n}",
            "called": [
                "FUN_0800115c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001460",
            "calling": [
                "FUN_08001530",
                "FUN_080015e8"
            ],
            "imported": false,
            "current_name": "check_if_bit_is_set_in_array_08001460"
        },
        "FUN_08001064": {
            "renaming": {
                "FUN_08001064": "is_end_of_input_08001064",
                "in_CY": "input_char",
                "FUN_08000ffc": "execute_input_function"
            },
            "code": "bool is_end_of_input_08001064(void)\n{\n  char input_char;\n  execute_input_function();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_08000ffc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001064",
            "calling": [
                "FUN_0800483c",
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "is_end_of_input_08001064"
        },
        "FUN_08003fd0": {
            "renaming": {
                "FUN_08003fd0": "set_parameter_value_08003fd0",
                "param_1": "value",
                "PTR_DAT_08003fd8": "ptr",
                "offset": "offset",
                "*(undefined4 *)(*(int *)PTR_DAT_08003fd8 + 0x3c)": "ptr[offset]",
                "*(int *)": "",
                "(int*)&value": "param_ptr"
            },
            "code": "void set_parameter_value_08003fd0(int value)\n{\n    int* PTR_DAT_08003fd8 = (int*)PTR_DAT_08003fd8;\n    int offset = 0x3c;\n    int* param_PTR_DAT_08003fd8 = (int*)&value;\n    *(undefined4 *)(*(int *)PTR_DAT_08003fd8 + 0x3c) = *param_PTR_DAT_08003fd8;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fd0",
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "imported": false,
            "current_name": "set_parameter_value_08003fd0"
        },
        "FUN_08000892": {
            "renaming": {
                "FUN_08000892": "calculate_result_08000892",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_1",
                "unaff_r4": "temp_2",
                "uVar2": "temp_3",
                "uVar3": "temp_4",
                "in_r12": "mask",
                "bVar4": "is_zero_1",
                "is_zero_1": "is_zero_1",
                "is_zero_2": "is_zero_2",
                "is_equal_1": "is_equal_1",
                "is_equal_2": "is_equal_2",
                "is_equal_3": "is_equal_3"
            },
            "code": "ulonglong calculate_result_08000892(uint input_1, uint input_2, uint input_3, uint input_4)\n{\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint mask = 0x80000000;\n  bool is_zero_1 = (input_1 | input_2 << 1) == 0;\n  bool is_zero_2 = (input_3 | input_4 << 1) == 0;\n  bool is_equal_1 = input_1 == input_3;\n  bool is_equal_2 = (input_4 >> 0x14) == input_3;\n  bool is_equal_3 = (input_2 & mask) == mask;\n  if (!is_equal_1 || !is_equal_2)\n  {\n    if (is_equal_1)\n    {\n      if (is_zero_1 && is_equal_3)\n      {\n        return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (is_equal_2)\n    {\n      if (is_zero_2)\n      {\n        return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n      }\n      input_1 = input_3;\n      input_2 = input_4;\n    }\n    else\n    {\n      if (!is_zero_1 && !is_zero_2)\n      {\n        if (input_3 == 0)\n        {\n          temp_3 = input_2 & mask;\n          do\n          {\n            temp_1 = input_1 & mask;\n            input_1 = input_1 << 1;\n            input_2 = input_2 * 2 + (uint)(temp_1 != 0);\n          } while ((input_2 & 0x100000) == 0);\n          input_2 = input_2 | temp_3;\n          if (is_equal_3)\n          {\n            return CONCAT44(input_2, input_1);\n          }\n        }\n        do\n        {\n          temp_4 = input_3 & mask;\n          input_3 = input_3 << 1;\n          input_4 = input_4 * 2 + (uint)(temp_4 != 0);\n        } while ((input_4 & 0x100000) == 0);\n        return CONCAT44(input_2, input_1);\n      }\n      if (is_zero_1)\n      {\n        return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n      if (is_zero_2)\n      {\n        return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n      }\n    }\n  }\n  return CONCAT44(input_2, input_1) | 0x7ff8000000000000;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000892",
            "calling": [
                "FUN_08000724"
            ],
            "imported": false,
            "current_name": "calculate_result_08000892"
        },
        "FUN_08004458": {
            "renaming": {
                "FUN_08004458": "copy_data_and_send_08004458",
                "puVar1": "dest_ptr",
                "puVar5": "start_ptr",
                "puVar4": "src_ptr",
                "puVar3": "dest_ptr",
                "uVar2": "temp_var",
                "local_30": "copied_data",
                "local_24": "copied_data_2"
            },
            "code": "void copy_data_and_send_08004458() {\n  undefined4 *dest_ptr;\n  undefined4 temp_var;\n  undefined4 *src_ptr;\n  undefined4 *end_ptr;\n  undefined4 *start_ptr;\n  undefined4 copied_data [3];\n  undefined2 copied_data_2 [10];\n  \n  dest_ptr = copied_data;\n  start_ptr = (undefined4 *)PTR_DAT_0800448c;\n  do {\n    end_ptr = start_ptr + 2;\n    src_ptr = start_ptr;\n    temp_var = src_ptr[1];\n    start_ptr = end_ptr;\n    *dest_ptr = *src_ptr;\n    dest_ptr[1] = temp_var;\n    dest_ptr += 2;\n  } while (end_ptr != (undefined4 *)(PTR_DAT_0800448c + 0x18));\n  dest_ptr[1] = *end_ptr;\n  *(undefined2 *)(dest_ptr + 2) = *(undefined2 *)(src_ptr + 2);\n  send_data(0x70, copied_data, 0x1e);\n  return;\n}",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004458",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "copy_data_and_send_08004458"
        },
        "thunk_FUN_08001168": {
            "renaming": {
                "thunk_FUN_08001168": "thunk_do_nothing_08001168"
            },
            "code": "\nvoid thunk_do_nothing_08001168(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "FUN_08001168"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f64",
            "calling": [
                "FUN_0800403c",
                "FUN_08004028",
                "FUN_08004490",
                "FUN_08003298"
            ],
            "imported": false,
            "current_name": "thunk_do_nothing_08001168"
        },
        "FUN_08000134": {
            "renaming": {
                "FUN_08000134": "getFunctionResult_08000134",
                "param_1": "ptrParam1",
                "param_2": "ptrParam2",
                "DAT_08000144": "shouldSwapParams",
                "PTR_FUN_0800014c": "newPtrParam1",
                "PTR_DAT_08000148": "newPtrParam2",
                "CONCAT44": "combineParams"
            },
            "code": "typedef unsigned long long uint64_t;\n\ntypedef struct {\n    uint64_t param1;\n    uint64_t param2;\n} FunctionResult;\n\nFunctionResult getFunctionResult_08000134(uint64_t* ptrParam1, uint64_t* ptrParam2) {\n    if (DAT_08000144 != 0) {\n        ptrParam1 = PTR_FUN_0800014c;\n        ptrParam2 = PTR_DAT_08000148;\n    }\n    FunctionResult result = { *ptrParam1, *ptrParam2 };\n    return result;\n}",
            "called": [
                "FUN_080072d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000134",
            "calling": [
                "FUN_08004fb4"
            ],
            "imported": false,
            "current_name": "getFunctionResult_08000134"
        },
        "FUN_08003eb0": {
            "renaming": {
                "FUN_08003eb0": "convert_param_to_64bit_08003eb0",
                "param_1": "param",
                "PTR_DAT_08003ec4": "ptr",
                "*PTR_DAT_08003ec4": "*ptr"
            },
            "code": "longlong convert_param_to_64bit_08003eb0(uint32_t param)\n{\n    int* PTR_DAT_08003ec4 = (int*)PTR_DAT_08003ec4;\n    if (*PTR_DAT_08003ec4 == 0)\n    {\n        software_interrupt(0x3f);\n        return CONCAT44(param,1);\n    }\n    else\n    {\n        return (ulonglong)param << 0x20;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eb0",
            "calling": [
                "FUN_080041ae"
            ],
            "imported": false,
            "current_name": "convert_param_to_64bit_08003eb0"
        },
        "FUN_08005c70": {
            "renaming": {
                "FUN_08005c70": "calculate_result_08005c70",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "maskedInput2",
                "uVar9": "finalResult",
                "uVar10": "tempResult1",
                "uVar11": "tempResult2",
                "uVar12": "tempResult3"
            },
            "code": "\nulonglong calculateResult_08005c70(uint input1,uint input2)\n\n{\n  int result;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  uint maskedInput2;\n  ulonglong finalResult;\n  undefined8 tempResult1;\n  undefined8 tempResult2;\n  undefined8 tempResult3;\n  \n  finalResult = CONCAT44(input2,input1);\n  maskedInput2 = input2 & 0x7fffffff;\n  if (DAT_08005f90 < (int)maskedInput2) {\n    if ((maskedInput2 + 0xc0100000 | input1) != 0) {\n      tempResult1 = FUN_08000168(input1,input2,input1,input2);\n      temp1 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n      finalResult = FUN_08000724((int)tempResult1,temp1,(int)tempResult1,temp1);\n      return finalResult;\n    }\n    finalResult = FUN_080004d0(input1,input2,DAT_08005f28,DAT_08005f2c);\n    tempResult1 = FUN_080004d0(input1,input2,DAT_08005f30,DAT_08005f34);\nLAB_08005cba:\n    finalResult = FUN_0800016c((int)finalResult,(int)(finalResult >> 0x20),(int)tempResult1,\n                         (int)((ulonglong)tempResult1 >> 0x20));\n  }\n  else {\n    if ((int)maskedInput2 <= DAT_08005f94) {\n      if (0x3e3fffff < maskedInput2) {\n        tempResult1 = FUN_080004d0(input1,input2,input1,input2);\n        temp6 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n        temp1 = (undefined4)tempResult1;\n        tempResult1 = FUN_080004d0(temp1,temp6,DAT_08005f40,DAT_08005f44);\n        tempResult1 = FUN_0800016c((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),DAT_08005f48,DAT_08005f4c\n                             );\n        tempResult1 = FUN_080004d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),temp1,temp6);\n        tempResult1 = FUN_08000168((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),DAT_08005f50,DAT_08005f54\n                             );\n        tempResult1 = FUN_080004d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),temp1,temp6);\n        tempResult1 = FUN_0800016c((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),DAT_08005f58,DAT_08005f5c\n                             );\n        tempResult1 = FUN_080004d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),temp1,temp6);\n        tempResult1 = FUN_08000168((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),DAT_08005f60,DAT_08005f64\n                             );\n        tempResult1 = FUN_080004d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),temp1,temp6);\n        tempResult1 = FUN_0800016c((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),DAT_08005f68,DAT_08005f6c\n                             );\n        tempResult1 = FUN_080004d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),temp1,temp6);\n        tempResult2 = FUN_080004d0(temp1,temp6,DAT_08005f70,DAT_08005f74);\n        tempResult2 = FUN_08000168((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),DAT_08005f78,DAT_08005f7c\n                             );\n        tempResult2 = FUN_080004d0((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),temp1,temp6);\n        tempResult2 = FUN_0800016c((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),DAT_08005f80,DAT_08005f84\n                             );\n        tempResult2 = FUN_080004d0((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),temp1,temp6);\n        tempResult2 = FUN_08000168((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),DAT_08005f88,DAT_08005f8c\n                             );\n        tempResult2 = FUN_080004d0((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),temp1,temp6);\n        tempResult2 = FUN_0800016c((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),0,DAT_08005f98);\n        tempResult1 = FUN_08000724((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),(int)tempResult2,\n                              (int)((ulonglong)tempResult2 >> 0x20));\n        tempResult1 = FUN_080004d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),input1,input2);\n        goto LAB_08005cba;\n      }\n      tempResult1 = FUN_0800016c(input1,input2,DAT_08005f38,DAT_08005f3c);\n      result = FUN_080009f0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),0,DAT_08005f98);\n      if (result != 0) {\n        return finalResult;\n      }\n    }\n    tempResult1 = do_nothing_0800708c(input1,input2);\n    tempResult1 = FUN_08000168(0,DAT_08005f98,(int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20));\n    tempResult1 = FUN_080004d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),0,DAT_08005f9c);\n    temp2 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n    temp1 = (undefined4)tempResult1;\n    tempResult1 = FUN_080004d0(temp1,temp2,DAT_08005f40,DAT_08005f44);\n    tempResult1 = FUN_0800016c((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),DAT_08005f48,DAT_08005f4c);\n    tempResult1 = FUN_080004d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),temp1,temp2);\n    tempResult1 = FUN_08000168((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),DAT_08005f50,DAT_08005f54);\n    tempResult1 = FUN_080004d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),temp1,temp2);\n    tempResult1 = FUN_0800016c((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),DAT_08005f58,DAT_08005f5c);\n    tempResult1 = FUN_080004d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),temp1,temp2);\n    tempResult1 = FUN_08000168((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),DAT_08005f60,DAT_08005f64);\n    tempResult1 = FUN_080004d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),temp1,temp2);\n    tempResult1 = FUN_0800016c((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),DAT_08005f68,DAT_08005f6c);\n    tempResult1 = FUN_080004d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),temp1,temp2);\n    temp3 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n    tempResult2 = FUN_080004d0(temp1,temp2,DAT_08005f70,DAT_08005f74);\n    tempResult2 = FUN_08000168((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),DAT_08005f78,DAT_08005f7c);\n    tempResult2 = FUN_080004d0((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),temp1,temp2);\n    tempResult2 = FUN_0800016c((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),DAT_08005f80,DAT_08005f84);\n    tempResult2 = FUN_080004d0((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),temp1,temp2);\n    tempResult2 = FUN_08000168((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),DAT_08005f88,DAT_08005f8c);\n    tempResult2 = FUN_080004d0((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),temp1,temp2);\n    tempResult2 = FUN_0800016c((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),0,DAT_08005f98);\n    temp4 = (undefined4)((ulonglong)tempResult2 >> 0x20);\n    tempResult3 = FUN_08006c0c(temp1,temp2);\n    temp5 = (undefined4)((ulonglong)tempResult3 >> 0x20);\n    temp6 = (undefined4)tempResult3;\n    if (DAT_08005fa0 < (int)maskedInput2) {\n      tempResult1 = FUN_08000724((int)tempResult1,temp3,(int)tempResult2,temp4);\n      tempResult1 = FUN_080004d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),temp6,temp5);\n      tempResult1 = FUN_0800016c((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),temp6,temp5);\n      temp1 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n      tempResult1 = FUN_0800016c((int)tempResult1,temp1,(int)tempResult1,temp1);\n      tempResult1 = FUN_08000168((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),DAT_08005f30,DAT_08005f34);\n      temp1 = DAT_08005f28;\n      temp6 = DAT_08005f2c;\n    }\n    else {\n      tempResult1 = FUN_08000724((int)tempResult1,temp3,(int)tempResult2,temp4);\n      tempResult2 = FUN_0800016c(temp6,temp5,temp6,temp5);\n      tempResult1 = FUN_080004d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),(int)tempResult2,\n                            (int)((ulonglong)tempResult2 >> 0x20));\n      tempResult2 = FUN_080004d0(0,temp5,0,temp5);\n      tempResult2 = FUN_08000168(temp1,temp2,(int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20));\n      tempResult3 = FUN_0800016c(temp6,temp5,0,temp5);\n      tempResult2 = FUN_08000724((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),(int)tempResult3,\n                            (int)((ulonglong)tempResult3 >> 0x20));\n      temp1 = (undefined4)((ulonglong)tempResult2 >> 0x20);\n      tempResult2 = FUN_0800016c((int)tempResult2,temp1,(int)tempResult2,temp1);\n      tempResult2 = FUN_08000168(DAT_08006060,DAT_08006064,(int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20));\n      tempResult1 = FUN_08000168((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),(int)tempResult2,\n                            (int)((ulonglong)tempResult2 >> 0x20));\n      tempResult2 = FUN_0800016c(0,temp5,0,temp5);\n      tempResult2 = FUN_08000168(DAT_08006068,DAT_0800606c,(int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20));\n      tempResult1 = FUN_08000168((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),(int)tempResult2,\n                            (int)((ulonglong)tempResult2 >> 0x20));\n      temp1 = DAT_08006068;\n      temp6 = DAT_0800606c;\n    }\n    finalResult = FUN_08000168(temp1,temp6,(int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20));\n    if ((int)input2 < 1) {\n      finalResult = finalResult & 0xffffffff | (ulonglong)((int)(finalResult >> 0x20) + 0x80000000) << 0x20;\n    }\n  }\n  return finalResult;\n}\n\n",
            "called": [
                "FUN_08006c0c",
                "FUN_080004d0",
                "FUN_080009f0",
                "FUN_08000724",
                "FUN_0800016c",
                "FUN_0800708c",
                "FUN_08000168"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c70",
            "calling": [
                "FUN_08005854"
            ],
            "imported": false,
            "current_name": "calculate_result_08005c70"
        },
        "FUN_08002ee8": {
            "renaming": {
                "FUN_08002ee8": "validate_and_execute_function_08002ee8",
                "iVar1": "result",
                "uVar2": "parameter1",
                "FUN_08001050": "call_function",
                "DAT_08002f1c": "parameter2",
                "FUN_08001028": "call_function",
                "DAT_08002f20": "parameter3",
                "FUN_08000adc": "execute_function",
                "DAT_08002f24": "parameter4"
            },
            "code": "void validate_and_execute_function_08002ee8(void)\n{\n  int result;\n  undefined4 parameter1 = *(undefined4 *)(PTR_DAT_08002f18 + 8);\n  result = call_function(parameter1, DAT_08002f1c);\n  if ((result != 0) && (result = call_function(parameter1, DAT_08002f20), result != 0)) {\n    execute_function(parameter1, DAT_08002f20);\n    return;\n  }\n  execute_function(parameter1, DAT_08002f24);\n  return;\n}",
            "called": [
                "FUN_08000ad8",
                "FUN_08001050",
                "FUN_08000adc",
                "FUN_08001028"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ee8",
            "calling": [
                "FUN_08002f28",
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "validate_and_execute_function_08002ee8"
        },
        "FUN_08001104": {
            "renaming": {
                "FUN_08001104": "calculate_time_elapsed_and_print_message_08001104",
                "param_1": "message_type",
                "uVar1": "milliseconds_elapsed",
                "FUN_08002214": "get_elapsed_time_in_milliseconds",
                "FUN_08001214": "print_time_elapsed_in_seconds",
                "FUN_08001194": "print_message"
            },
            "code": "int calculate_time_elapsed_and_print_message_08001104(int param_1)\n{\n  uint32_t milliseconds_elapsed = get_elapsed_time_in_milliseconds();\n  print_time_elapsed_in_seconds(milliseconds_elapsed / 1000);\n  print_message(0xffffffff, param_1, 0);\n  return 0;\n}",
            "called": [
                "FUN_08002214",
                "FUN_08001194",
                "FUN_08001214"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001104",
            "calling": [
                "FUN_0800209c",
                "FUN_08001128"
            ],
            "imported": false,
            "current_name": "calculate_time_elapsed_and_print_message_08001104"
        },
        "thunk_FUN_0800115c": {
            "renaming": {
                "thunk_FUN_0800115c": "get_value_from_pointer_thunk_0800115c",
                "PTR_DAT_08001164": "PTR_DATA"
            },
            "code": "int get_value_from_pointer_thunk_0800115c() {\n  int* value_pointer = (int*) PTR_DAT_08001164;\n  return *value_pointer;\n}",
            "called": [
                "FUN_0800115c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f60",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_thunk_0800115c"
        },
        "FUN_08006d68": {
            "renaming": {
                "FUN_08006d68": "calculate_hash_08006d68",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "hash_type",
                "uVar2": "hash_val_1",
                "uVar3": "hash_val_1_high",
                "uVar4": "temp_val_1",
                "uVar5": "temp_val_1_high",
                "uVar6": "hash_val_2",
                "uVar7": "hash_val_2_high",
                "uVar8": "abs_input_2",
                "puVar9": "ptr_to_hash_constants",
                "uVar10": "final_hash_val",
                "uVar11": "temp_val_2",
                "uVar12": "concatenated_inputs",
                "uVar13": "temp_val_3"
            },
            "code": "\nulonglong calculate_hash_08006d68(int input_1,uint input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  int hash_type;\n  undefined4 hash_val_1;\n  undefined4 hash_val_1_high;\n  undefined4 temp_val_1;\n  undefined4 temp_val_1_high;\n  undefined4 hash_val_2;\n  undefined4 hash_val_2_high;\n  uint abs_input_2;\n  undefined4 *ptr_to_hash_constants;\n  ulonglong final_hash_val;\n  undefined8 temp_val_2;\n  ulonglong concatenated_inputs;\n  undefined8 temp_val_3;\n  \n  final_hash_val = CONCAT44(DAT_08007088,DAT_08007060);\n  concatenated_inputs = CONCAT44(input_2,input_1);\n  abs_input_2 = input_2 & 0x7fffffff;\n  if (DAT_08007058 < (int)abs_input_2) {\n    if (((int)DAT_0800705c < (int)abs_input_2) || ((abs_input_2 == DAT_0800705c && (input_1 != 0)))) {\n      final_hash_val = FUN_0800016c(input_1,input_2,input_1,input_2,input_4);\n    }\n    else if ((int)input_2 < 1) {\n      final_hash_val = CONCAT44(DAT_08007064,DAT_08007060);\n    }\n  }\n  else {\n    if (DAT_08007068 < (int)abs_input_2) {\n      temp_val_2 = do_nothing_0800708c();\n      hash_val_1_high = (undefined4)((ulonglong)temp_val_2 >> 0x20);\n      hash_val_1 = (undefined4)temp_val_2;\n      if (DAT_08007070 < (int)abs_input_2) {\n        if (DAT_08007074 < (int)abs_input_2) {\n          concatenated_inputs = FUN_08000724(0,DAT_0800707c,hash_val_1,hash_val_1_high);\n          hash_type = 3;\n        }\n        else {\n          temp_val_2 = FUN_08000168(hash_val_1,hash_val_1_high,0,DAT_08007078);\n          temp_val_3 = FUN_080004d0(hash_val_1,hash_val_1_high,0,DAT_08007078);\n          temp_val_3 = FUN_0800016c((int)temp_val_3,(int)((ulonglong)temp_val_3 >> 0x20),0,DAT_0800706c);\n          concatenated_inputs = FUN_08000724((int)temp_val_2,(int)((ulonglong)temp_val_2 >> 0x20),(int)temp_val_3,\n                                (int)((ulonglong)temp_val_3 >> 0x20));\n          hash_type = 2;\n        }\n      }\n      else if (DAT_08007070 + -0xd0000 < (int)abs_input_2) {\n        temp_val_2 = FUN_08000168(hash_val_1,hash_val_1_high,0,DAT_0800706c);\n        temp_val_3 = FUN_0800016c(hash_val_1,hash_val_1_high,0,DAT_0800706c);\n        concatenated_inputs = FUN_08000724((int)temp_val_2,(int)((ulonglong)temp_val_2 >> 0x20),(int)temp_val_3,\n                              (int)((ulonglong)temp_val_3 >> 0x20));\n        hash_type = 1;\n      }\n      else {\n        temp_val_2 = FUN_0800016c(hash_val_1,hash_val_1_high,hash_val_1,hash_val_1_high);\n        temp_val_2 = FUN_08000168((int)temp_val_2,(int)((ulonglong)temp_val_2 >> 0x20),0,DAT_0800706c);\n        temp_val_3 = FUN_0800016c(hash_val_1,hash_val_1_high,0,0x40000000);\n        concatenated_inputs = FUN_08000724((int)temp_val_2,(int)((ulonglong)temp_val_2 >> 0x20),(int)temp_val_3,\n                              (int)((ulonglong)temp_val_3 >> 0x20));\n        hash_type = 0;\n      }\n    }\n    else {\n      if ((int)abs_input_2 <= DAT_08007068 + -0x1bc0000) {\n        temp_val_2 = FUN_0800016c(input_1,input_2,DAT_08006ff8,DAT_08006ffc,input_4);\n        hash_type = FUN_080009f0((int)temp_val_2,(int)((ulonglong)temp_val_2 >> 0x20),0,DAT_0800706c);\n        if (hash_type != 0) {\n          return concatenated_inputs;\n        }\n      }\n      hash_type = -1;\n    }\n    hash_val_2_high = (undefined4)(concatenated_inputs >> 0x20);\n    hash_val_2 = (undefined4)concatenated_inputs;\n    temp_val_2 = FUN_080004d0(hash_val_2,hash_val_2_high,hash_val_2,hash_val_2_high);\n    temp_val_1 = (undefined4)((ulonglong)temp_val_2 >> 0x20);\n    hash_val_1 = (undefined4)temp_val_2;\n    temp_val_2 = FUN_080004d0(hash_val_1,temp_val_1,hash_val_1,temp_val_1);\n    temp_val_1_high = (undefined4)((ulonglong)temp_val_2 >> 0x20);\n    hash_val_1_high = (undefined4)temp_val_2;\n    temp_val_2 = FUN_080004d0(hash_val_1_high,temp_val_1_high,DAT_08007000,DAT_08007004);\n    temp_val_2 = FUN_0800016c((int)temp_val_2,(int)((ulonglong)temp_val_2 >> 0x20),DAT_08007008,DAT_0800700c);\n    temp_val_2 = FUN_080004d0((int)temp_val_2,(int)((ulonglong)temp_val_2 >> 0x20),hash_val_1_high,temp_val_1_high);\n    temp_val_2 = FUN_0800016c((int)temp_val_2,(int)((ulonglong)temp_val_2 >> 0x20),DAT_08007010,DAT_08007014);\n    temp_val_2 = FUN_080004d0((int)temp_val_2,(int)((ulonglong)temp_val_2 >> 0x20),hash_val_1_high,temp_val_1_high);\n    temp_val_2 = FUN_0800016c((int)temp_val_2,(int)((ulonglong)temp_val_2 >> 0x20),DAT_08007018,DAT_0800701c);\n    temp_val_2 = FUN_080004d0((int)temp_val_2,(int)((ulonglong)temp_val_2 >> 0x20),hash_val_1_high,temp_val_1_high);\n    temp_val_2 = FUN_0800016c((int)temp_val_2,(int)((ulonglong)temp_val_2 >> 0x20),DAT_08007020,DAT_08007024);\n    temp_val_2 = FUN_080004d0((int)temp_val_2,(int)((ulonglong)temp_val_2 >> 0x20),hash_val_1_high,temp_val_1_high);\n    temp_val_2 = FUN_0800016c((int)temp_val_2,(int)((ulonglong)temp_val_2 >> 0x20),DAT_08007028,DAT_0800702c);\n    temp_val_2 = FUN_080004d0((int)temp_val_2,(int)((ulonglong)temp_val_2 >> 0x20),hash_val_1,temp_val_1);\n    hash_val_1 = (undefined4)((ulonglong)temp_val_2 >> 0x20);\n    temp_val_3 = FUN_080004d0(hash_val_1_high,temp_val_1_high,DAT_08007030,DAT_08007034);\n    temp_val_3 = FUN_08000168((int)temp_val_3,(int)((ulonglong)temp_val_3 >> 0x20),DAT_08007038,DAT_0800703c);\n    temp_val_3 = FUN_080004d0((int)temp_val_3,(int)((ulonglong)temp_val_3 >> 0x20),hash_val_1_high,temp_val_1_high);\n    temp_val_3 = FUN_08000168((int)temp_val_3,(int)((ulonglong)temp_val_3 >> 0x20),DAT_08007040,DAT_08007044);\n    temp_val_3 = FUN_080004d0((int)temp_val_3,(int)((ulonglong)temp_val_3 >> 0x20),hash_val_1_high,temp_val_1_high);\n    temp_val_3 = FUN_08000168((int)temp_val_3,(int)((ulonglong)temp_val_3 >> 0x20),DAT_08007048,DAT_0800704c);\n    temp_val_3 = FUN_080004d0((int)temp_val_3,(int)((ulonglong)temp_val_3 >> 0x20),hash_val_1_high,temp_val_1_high);\n    temp_val_3 = FUN_08000168((int)temp_val_3,(int)((ulonglong)temp_val_3 >> 0x20),DAT_08007050,DAT_08007054);\n    temp_val_3 = FUN_080004d0((int)temp_val_3,(int)((ulonglong)temp_val_3 >> 0x20),hash_val_1_high,temp_val_1_high);\n    hash_val_1_high = (undefined4)((ulonglong)temp_val_3 >> 0x20);\n    if (hash_type == -1) {\n      temp_val_2 = FUN_0800016c((int)temp_val_2,hash_val_1,(int)temp_val_3,hash_val_1_high);\n      temp_val_2 = FUN_080004d0((int)temp_val_2,(int)((ulonglong)temp_val_2 >> 0x20),hash_val_2,hash_val_2_high);\n      final_hash_val = FUN_08000168(hash_val_2,hash_val_2_high,(int)temp_val_2,(int)((ulonglong)temp_val_2 >> 0x20));\n    }\n    else {\n      temp_val_2 = FUN_0800016c((int)temp_val_2,hash_val_1,(int)temp_val_3,hash_val_1_high);\n      temp_val_2 = FUN_080004d0((int)temp_val_2,(int)((ulonglong)temp_val_2 >> 0x20),hash_val_2,hash_val_2_high);\n      ptr_to_hash_constants = (undefined4 *)(PTR_DAT_08007080 + hash_type * 8);\n      temp_val_2 = FUN_08000168((int)temp_val_2,(int)((ulonglong)temp_val_2 >> 0x20),\n                            *(undefined4 *)(PTR_DAT_08007084 + hash_type * 8),\n                            *(undefined4 *)((int)(PTR_DAT_08007084 + hash_type * 8) + 4));\n      temp_val_2 = FUN_08000168((int)temp_val_2,(int)((ulonglong)temp_val_2 >> 0x20),hash_val_2,hash_val_2_high);\n      final_hash_val = FUN_08000168(*ptr_to_hash_constants,ptr_to_hash_constants[1],(int)temp_val_2,(int)((ulonglong)temp_val_2 >> 0x20));\n      if ((int)input_2 < 0) {\n        final_hash_val = final_hash_val & 0xffffffff | (ulonglong)((int)(final_hash_val >> 0x20) + 0x80000000) << 0x20;\n      }\n    }\n  }\n  return final_hash_val;\n}\n\n",
            "called": [
                "FUN_080004d0",
                "FUN_080009f0",
                "FUN_08000724",
                "FUN_0800016c",
                "FUN_0800708c",
                "FUN_08000168"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d68",
            "calling": [
                "FUN_08006070"
            ],
            "imported": false,
            "current_name": "calculate_hash_08006d68"
        },
        "FUN_080072b8": {
            "renaming": {
                "FUN_080072b8": "updateValue_080072b8",
                "param_1": "value",
                "puVar1": "currentPointer"
            },
            "code": "void updateValue_080072b8(int value){\n  undefined *currentPointer;\n  currentPointer = PTR_DAT_080072cc;\n  if (*(int *)PTR_DAT_080072cc == 0) {\n    *(undefined **)PTR_DAT_080072cc = PTR_DAT_080072d0;\n  }\n  *(int *)currentPointer = value + *(int *)currentPointer;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072b8",
            "calling": [
                "FUN_0800581c"
            ],
            "imported": false,
            "current_name": "updateValue_080072b8"
        },
        "FUN_0800581c": {
            "renaming": {
                "FUN_0800581c": "process_input_0800581c",
                "param_1": "output_value",
                "param_2": "input_value",
                "puVar1": "memory_ptr",
                "iVar2": "function_result"
            },
            "code": "void process_input_0800581c(int *output_value, undefined4 input_value)\n{\n    undefined *memory_ptr;\n    int function_result;\n    \n    memory_ptr = PTR_DAT_08005838;\n    *(undefined4 *)PTR_DAT_08005838 = 0;\n    function_result = perform_operation(input_value);\n    if ((function_result == -1) && (*(int *)memory_ptr != 0)) {\n        *output_value = *(int *)memory_ptr;\n    }\n    return;\n}",
            "called": [
                "FUN_080072b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800581c",
            "calling": [
                "FUN_08005714"
            ],
            "imported": false,
            "current_name": "process_input_0800581c"
        },
        "FUN_08004d48": {
            "renaming": {
                "FUN_08004d48": "process_data_08004d48",
                "param_1": "data_ptr",
                "DAT_08004d80": "DATA_CONSTANT",
                "local_18": "FLAG_CONSTANT_1",
                "local_14": "FLAG_CONSTANT_2",
                "FUN_08001264": "send_data",
                "DAT_08004d84": "buffer",
                "DAT_08004d88": "FLAG_CONSTANT_1"
            },
            "code": "void process_data_08004d48(int *data_ptr, undefined4 param_2) {\n  uint32_t DAT_08004d80 = 0xdeadbeef;\n  uint32_t DAT_08004d88 = 0xc0;\n  uint32_t FLAG_CONSTANT_2 = 0x12;\n  \n  if (*data_ptr == DAT_08004d80) {\n    uint32_t DAT_08004d84[3] = {DAT_08004d80, DAT_08004d88, FLAG_CONSTANT_2};\n    send_data(DAT_08004d84, 3, data_ptr, param_2);\n    *(uint *)(DAT_08004d88 + 0x1c) = *(uint *)(DAT_08004d88 + 0x1c) | 0x200000;\n  }\n  return;\n}",
            "called": [
                "FUN_08001264"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d48",
            "calling": [
                "FUN_08001754"
            ],
            "imported": false,
            "current_name": "process_data_08004d48"
        },
        "FUN_080072ac": {
            "renaming": {
                "FUN_080072ac": "getValueFromPtrPtrData_080072ac",
                "PTR_PTR_DAT_080072b4": "pointerToPointerData"
            },
            "code": "getValueFromPtrPtrData_080072ac() {\n  return *(undefined4 *)PTR_PTR_DAT_080072b4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072ac",
            "calling": [
                "FUN_08005854",
                "FUN_08005900",
                "FUN_08005bc8"
            ],
            "imported": false,
            "current_name": "getValueFromPtrPtrData_080072ac"
        },
        "FUN_08002280": {
            "renaming": {
                "FUN_08002280": "set_flags_and_values_08002280",
                "param_1": "base_address",
                "param_2": "values_array",
                "uVar1": "flags_1",
                "uVar2": "flags_2",
                "uVar3": "value_1",
                "DAT_080022cc": "DAT_080022cc",
                "param_2[1]": "value_2",
                "param_2[2]": "value_3",
                "param_2[3]": "value_4",
                "param_2[5]": "value_5",
                "param_2[6]": "value_6"
            },
            "code": "void set_flags_and_values_08002280(int base_address, uint *values_array)\n{\n  uint flags_1;\n  uint flags_2;\n  uint value_1;\n  uint value_2;\n  uint value_3;\n  \n  flags_1 = *(uint *)(base_address + 0x20) & 0xfffffffe;\n  flags_2 = *(uint *)(base_address + 4);\n  value_1 = *(uint *)(base_address + 0x18) & 0xffffff8c | values_array[0];\n  value_2 = values_array[1];\n  value_3 = *(uint *)(base_address + 0x20) & 0xfffffffd | values_array[2];\n  if (base_address == DAT_080022cc) {\n    value_3 = (value_3 & 0xfffffff7 | values_array[3]) & 0xfffffffb;\n    flags_2 = flags_2 & 0xfffffcff | values_array[5] | values_array[6];\n  }\n  *(uint *)(base_address + 0x20) = flags_1;\n  *(uint *)(base_address + 4) = flags_2;\n  *(uint *)(base_address + 0x18) = value_1;\n  *(uint *)(base_address + 0x34) = value_2;\n  *(uint *)(base_address + 0x20) = value_3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002280",
            "calling": [
                "FUN_0800245c"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_08002280"
        },
        "FUN_08001194": {
            "renaming": {
                "FUN_08001194": "encode_data_08001194",
                "param_1": "data",
                "param_2": "mask",
                "param_3": "index",
                "uVar1": "encoded_data_shifted",
                "uVar2": "shift_diff",
                "uVar3": "shift",
                "uVar4": "mask_shifted",
                "DAT_080011f4": "ptr_data",
                "DAT_080011f8": "ptr_masked_index"
            },
            "code": "void encode_data_08001194(uint data, uint mask, uint index)\n{\n    uint shift = (uint)(*(int *)(DAT_080011f4 + 0xc) << 0x15) >> 0x1d;\n    uint shift_diff = 7 - shift;\n    uint mask_shifted = shift_diff > 3 ? 0xF : (1 << shift_diff) - 1;\n    uint index_shifted = shift > 6 ? index - 3 : index;\n    uint encoded_data = (data & (1 << index_shifted) - 1U) | ((mask & mask_shifted) << index_shifted);\n    if (data >= 0)\n    {\n        uint encoded_index = data + 0xe000e100;\n        *(undefined *)(encoded_index + 0x300) = (undefined)(encoded_data << 4);\n    }\n    else\n    {\n        uint masked_index = data & 0xf;\n        uint encoded_mask = DAT_080011f8;\n        *(undefined *)(encoded_mask + masked_index) = (undefined)(encoded_data << 4);\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001194",
            "calling": [
                "FUN_08004e7c",
                "FUN_08004ccc",
                "FUN_08001104",
                "FUN_08004514"
            ],
            "imported": false,
            "current_name": "encode_data_08001194"
        },
        "FUN_08002cb0": {
            "renaming": {
                "FUN_08002cb0": "process_sensor_data_and_store_in_memory_08002cb0",
                "param_1": "data_length",
                "param_2": "data_buffer",
                "param_3": "memory_buffer",
                "param_4": "memory_buffer_size",
                "puVar1": "data_pointer",
                "uVar2": "data_value",
                "local_c": "sensor_data"
            },
            "code": "void process_sensor_data_and_store_in_memory_08002cb0(uint16_t data_length, uint8_t *data_buffer, uint8_t *memory_buffer, uint32_t memory_buffer_size)\n{\n    uint32_t data_index = 0;\n    uint32_t memory_index = 0;\n    uint16_t data_value = 0;\n\n    // Send command to sensor to read data\n    send_command_to_sensor(0xd0, 0x37, 0x22, 1, data_buffer, data_length, memory_buffer);\n\n    // Read sensor data\n    read_sensor_data(0xd0, 0x6a, 1);\n\n    // Process sensor data\n    process_sensor_data(0x18, 0, data_buffer, 0xad);\n    process_sensor_data(0x18, 0xb, NULL, 1);\n    process_sensor_data(0x18, 10, NULL, 1);\n    process_sensor_data(0x18, 10, NULL, 0xf);\n    process_sensor_data_and_store_in_memory_08002cb0(0x18, 0x10, &data_value, 3, data_buffer, 0xb6);\n\n    // Store processed data in memory\n    store_data_in_memory(memory_buffer, memory_buffer_size, &memory_index, &data_value);\n    store_data_in_memory(memory_buffer, memory_buffer_size, &memory_index, &data_value);\n    store_data_in_memory(memory_buffer, memory_buffer_size, &memory_index, &data_value);\n    store_data_in_memory(memory_buffer, memory_buffer_size, &memory_index, &data_value);\n    store_data_in_memory(memory_buffer, memory_buffer_size, &memory_index, &data_value);\n    store_data_in_memory(memory_buffer, memory_buffer_size, &memory_index, &data_value);\n\n    // End processing\n    process_sensor_data(0x18, 10, NULL, 1);\n    process_sensor_data(0x18, 10, NULL, 0x16);\n}\n",
            "called": [
                "FUN_08000c44",
                "FUN_0800403c",
                "FUN_08000cec",
                "FUN_08000adc",
                "FUN_0800407c",
                "FUN_080040e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002cb0",
            "calling": [
                "FUN_08002ea0"
            ],
            "imported": false,
            "current_name": "process_sensor_data_and_store_in_memory_08002cb0"
        },
        "FUN_08004348": {
            "renaming": {
                "FUN_08004348": "create_jump_instruction_08004348",
                "param_1": "jump_location",
                "param_2": "jump_offset",
                "param_3": "function_start",
                "puVar1": "instruction_ptr",
                "local_10": "jump_instruction",
                "local_c": "offset_value",
                "uStack_8": "unused_variable",
                "PTR_DAT_08004380": "PTR_DAT_08004380"
            },
            "code": "void create_jump_instruction_08004348(undefined4 jump_location, uint jump_offset, undefined4 function_start){\n  undefined *instruction_ptr;\n  undefined4 jump_instruction;\n  uint offset_mask = 0xff000000;\n  uint offset_value = (uint)*(ushort *)(PTR_DAT_08004380 + 4);\n  instruction_ptr = PTR_DAT_08004380;\n  *instruction_ptr = 0xe9;\n  instruction_ptr[1] = 3;\n  instruction_ptr[3] = 4;\n  instruction_ptr[2] = 0;\n  jump_instruction = *(undefined4 *)instruction_ptr;\n  instruction_ptr[4] = 0;\n  instruction_ptr[5] = 0;\n  instruction_ptr[6] = 0;\n  jump_offset = jump_offset & offset_mask | offset_value;\n  function_start = function_start;\n  FUN_08004300(100, &jump_instruction, 7);\n  return;\n}",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004348",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "create_jump_instruction_08004348"
        },
        "FUN_08002324": {
            "renaming": {
                "FUN_08002324": "update_data_08002324",
                "param_1": "data_address",
                "param_2": "data_array",
                "uVar1": "data",
                "iVar2": "value1",
                "iVar3": "value2",
                "iVar4": "constant",
                "DAT_08002364": "constant_address"
            },
            "code": "void update_data_08002324(int data_address, int* data_array){\n  uint mask = 0xffffefff;\n  uint data = *(uint *)(data_address + 4);\n  int value1 = *data_array;\n  int value2 = data_array[2];\n  int constant = DAT_08002364;\n  if (data_address == DAT_08002364) {\n    constant = data_array[5];\n    mask = mask & 0xffffbfff;\n  }\n  if (data_address == DAT_08002364) {\n    data = data | constant << 6;\n  }\n  *(uint *)(data_address + 4) = data;\n  *(uint *)(data_address + 0x1c) = (*(uint *)(data_address + 0x1c) & 0xffff8cff) | (value1 << 8);\n  *(int *)(data_address + 0x40) = data_array[1];\n  *(uint *)(data_address + 0x20) = (*(uint *)(data_address + 0x20) & 0xffffdfff) | (value2 << 0xc);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002324",
            "calling": [
                "FUN_0800245c"
            ],
            "imported": false,
            "current_name": "update_data_08002324"
        },
        "FUN_08001078": {
            "renaming": {
                "FUN_08001078": "convert_to_int32_08001078",
                "param_1": "input",
                "uVar1": "shift_amount",
                "uVar2": "shifted_value"
            },
            "code": "uint convert_to_int32_08001078(uint input){\n  uint shifted_input = input << 1;\n  if (shifted_input < 0x7f000000){\n    return 0;\n  }\n  uint shift_amount = shifted_input >> 0x18;\n  uint shifted_value = 0x9e - shift_amount;\n  if (shift_amount < 0x9f && shifted_value != 0){\n    uint shifted_input_2 = (input << 8 | 0x80000000) >> (shifted_value & 0xff);\n    if ((input & 0x80000000) != 0){\n      shifted_input_2 = -shifted_input_2;\n    }\n    return shifted_input_2;\n  }\n  if ((shifted_value == 0xffffff9f) && ((input & 0x7fffff) != 0)){\n    return 0;\n  }\n  input = input & 0x80000000;\n  if (input == 0){\n    input = 0x7fffffff;\n  }\n  return input;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001078",
            "calling": [
                "FUN_0800411c",
                "FUN_0800426c",
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "convert_to_int32_08001078"
        },
        "FUN_08002564": {
            "renaming": {
                "FUN_08002564": "calculate_checksum_08002564",
                "param_1": "data",
                "param_2": "checksum_array",
                "uVar1": "result",
                "*(char *)(param_1 + 0xe)": "*(char *)(data + 0xe)",
                "*(undefined *)((int)param_1 + 0x39)": "*(int *)((int)data + 0x39)",
                "*(uint *)(*param_1 + 0x44)": "*(uint *)(*data + 0x44)",
                "*param_1": "*data",
                "param_2[0]": "checksum_array[0]",
                "param_2[1]": "checksum_array[1]",
                "param_2[2]": "checksum_array[2]",
                "param_2[3]": "checksum_array[3]",
                "param_2[4]": "checksum_array[4]",
                "param_2[5]": "checksum_array[5]",
                "param_2[6]": "checksum_array[6]"
            },
            "code": "int calculate_checksum_08002564(int *data, uint *checksum_array)\n{\n  int result = 2;\n  if (*(char *)(data + 0xe) != '\\x01') {\n    *(int *)((int)data + 0x39) = 2;\n    *(uint *)(*data + 0x44) =\n         checksum_array[0] | checksum_array[1] | checksum_array[2] | checksum_array[3] | checksum_array[4] | checksum_array[5] | checksum_array[6];\n    *(int *)((int)data + 0x39) = 1;\n    result = 0;\n    *(char *)(data + 0xe) = 0;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002564",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "calculate_checksum_08002564"
        },
        "FUN_08001754": {
            "renaming": {
                "FUN_08001754": "initialize_device_08001754",
                "param_1": "device_data",
                "uVar1": "device_id",
                "uVar2": "device_type",
                "puVar3": "device_info_start",
                "puVar4": "device_info_rate_ptr",
                "puVar5": "device_info",
                "uVar6": "device_info_size",
                "uVar7": "device_info_temp",
                "DAT_08001820": "device_info_start",
                "DAT_08001824": "device_info_size",
                "FUN_08004d48": "initialize_device_info"
            },
            "code": "int initialize_device_08001754(uint **device_data)\n{\n    uint device_id;\n    uint device_type;\n    uint *device_info;\n    uint *device_info_end;\n    uint *DAT_08001820;\n    uint DAT_08001824;\n    uint device_info_divisor;\n    uint device_info_multiplier;\n    uint device_info_rate;\n    uint *device_info_rate_ptr;\n    uint *DAT_08001824_ptr;\n    uint *device_info_divisor_ptr;\n    uint *device_info_multiplier_ptr;\n    uint device_info_temp_divisor;\n    uint device_info_temp_multiplier;\n    uint *device_info_temp_ptr;\n\n    if (device_data == NULL) {\n        return 1;\n    }\n    if (*(char *)((int)device_data + 0x35) == '\\0') {\n        *(undefined *)(device_data + 0xd) = 0;\n        initialize_device_08001754_info();\n    }\n    *(undefined *)((int)device_data + 0x35) = 0x24;\n    device_id = **device_data & 0xfffffffe;\n    device_type = get_device_type(device_id);\n    device_info = device_data[1];\n    DAT_08001820 = DAT_08001820;\n    device_info_end = DAT_08001820 + DAT_08001824;\n    device_info_divisor = device_type == 0 ? 3 : 0x19;\n    device_info_multiplier = device_info_end < device_info ? 300 : 1;\n    DAT_08001824 = device_id / device_info_divisor;\n    device_info_rate_ptr = device_data[8];\n    DAT_08001824_ptr = device_data[7];\n    device_info_divisor_ptr = device_data[6];\n    device_info_multiplier_ptr = device_data[5];\n    device_info_rate = device_id / (DAT_08001824 * device_info_divisor) | 0x8000;\n    if ((device_info_rate & 0xfff) == 0) {\n        device_info_rate = 1;\n    }\n    device_info_temp_ptr = device_data[4];\n    device_info_temp_divisor = *device_info_divisor_ptr;\n    device_info_temp_multiplier = *device_info_multiplier_ptr;\n    if (device_info_end < device_info) {\n        device_info_multiplier = DAT_08001824 * device_info_multiplier;\n        device_info_rate = device_id / (DAT_08001824 * device_info_divisor) | 0xc000;\n        if ((device_info_rate & 0xfff) == 0) {\n            device_info_rate = 1;\n        }\n    }\n    else {\n        device_info_rate = device_id / (DAT_08001824 << 1);\n        if ((device_info_rate & 0xfff) < 4) {\n            device_info_rate = 4;\n        }\n    }\n    *device_info_rate_ptr = device_info_rate;\n    *device_data[0] = (uint)DAT_08001824_ptr | (uint)device_info_divisor_ptr;\n    device_data[0][2] = (uint)device_info_temp_ptr | (uint)device_data[3];\n    device_data[0][3] = (uint)device_data[5] | (uint)device_data[6];\n    *device_data[0] = *device_data[0] | 1;\n    device_data[0xe] = NULL;\n    *(undefined *)((int)device_data + 0x35) = 0x20;\n    *(undefined *)((int)device_data + 0x36) = 0;\n    return 0;\n}",
            "called": [
                "FUN_08004d48",
                "FUN_08002220"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001754",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "initialize_device_08001754"
        },
        "FUN_08000ad8": {
            "renaming": {
                "FUN_08000ad8": "calculate_float_08000ad8",
                "param_1": "float_1",
                "param_2": "float_2",
                "param_3": "undefined",
                "param_4": "float_3",
                "iVar1": "int_1",
                "uVar2": "float_2_xor",
                "uVar3": "float_3_new",
                "uVar4": "float_1_shift_left",
                "uVar5": "shift_amount",
                "uVar6": "shift_difference",
                "iVar7": "shifted_float_1",
                "bVar8": "bool_1"
            },
            "code": "\nuint calculate_float_08000ad8(uint float_1,uint float_2,undefined4 undefined,uint float_3)\n\n{\n  int int_1;\n  uint float_2_xor;\n  uint float_3_new;\n  uint float_1_shift_left;\n  uint shift_amount;\n  uint shift_difference;\n  int shifted_float_1;\n  bool bool_1;\n  \n  float_2_xor = float_2 ^ 0x80000000;\n  float_1_shift_left = float_1 << 1;\n  bool_1 = float_1_shift_left == 0;\n  if (!bool_1) {\n    float_3 = float_2 << 1;\n    bool_1 = float_3 == 0;\n  }\n  if (!bool_1) {\n    bool_1 = float_1_shift_left == float_3;\n  }\n  shifted_float_1 = (int)float_1_shift_left >> 0x18;\n  if (!bool_1) {\n    bool_1 = shifted_float_1 == -1;\n  }\n  if (!bool_1) {\n    bool_1 = (int)float_3 >> 0x18 == -1;\n  }\n  if (bool_1) {\n    int_1 = (int)(float_2 << 1) >> 0x18;\n    if (shifted_float_1 == -1 || int_1 == -1) {\n      float_1_shift_left = float_2_xor;\n      if (shifted_float_1 == -1) {\n        float_1_shift_left = float_1;\n      }\n      if (shifted_float_1 != -1 || int_1 != -1) {\n        float_2_xor = float_1_shift_left;\n      }\n      bool_1 = (float_1_shift_left & 0x7fffff) == 0;\n      if (bool_1) {\n        bool_1 = (float_2_xor & 0x7fffff) == 0;\n      }\n      if (bool_1) {\n        bool_1 = float_1_shift_left == float_2_xor;\n      }\n      if (!bool_1) {\n        float_1_shift_left = float_1_shift_left | 0x400000;\n      }\n      return float_1_shift_left;\n    }\n    if (((float_1 ^ float_2_xor) & 0x7fffffff) != 0) {\n      if (float_1_shift_left == 0) {\n        float_1 = float_2_xor;\n      }\n      return float_1;\n    }\n    if (float_1 != float_2_xor) {\n      return 0;\n    }\n    if ((float_1_shift_left & 0xff000000) == 0) {\n      float_2_xor = float_1 << 1;\n      if ((float_1 & 0x80000000) != 0) {\n        float_2_xor = float_2_xor | 0x80000000;\n      }\n      return float_2_xor;\n    }\n    if (float_1_shift_left < 0xfe000000) {\n      return float_1 + 0x800000;\n    }\n    float_1 = float_1 & 0x80000000;\nLAB_08000c12:\n    return float_1 | 0x7f800000;\n  }\n  float_1_shift_left = float_1_shift_left >> 0x18;\n  float_3 = float_3 >> 0x18;\n  shift_difference = float_3 - float_1_shift_left;\n  bool_1 = shift_difference != 0;\n  shift_amount = float_1_shift_left;\n  if (bool_1 && float_1_shift_left <= float_3) {\n    shift_amount = float_1_shift_left + shift_difference;\n  }\n  if (bool_1 && float_1_shift_left <= float_3) {\n    float_2_xor = float_2_xor ^ float_1;\n  }\n  if (bool_1 && float_1_shift_left <= float_3) {\n    float_1 = float_1 ^ float_2_xor;\n  }\n  if (bool_1 && float_1_shift_left <= float_3) {\n    float_2_xor = float_2_xor ^ float_1;\n  }\n  if (float_3 < float_1_shift_left) {\n    shift_difference = -shift_difference;\n  }\n  if (0x19 < shift_difference) {\n    return float_1;\n  }\n  float_1_shift_left = float_1 & 0xffffff | 0x800000;\n  if ((float_1 & 0x80000000) != 0) {\n    float_1_shift_left = -float_1_shift_left;\n  }\n  float_3_new = float_2_xor & 0xffffff | 0x800000;\n  if ((float_2_xor & 0x80000000) != 0) {\n    float_3_new = -float_3_new;\n  }\n  if (shift_amount == shift_difference) {\n    float_3_new = float_3_new ^ 0x800000;\n    if (shift_amount == 0) {\n      float_1_shift_left = float_1_shift_left ^ 0x800000;\n      shift_amount = 1;\n    }\n    else {\n      shift_difference = shift_difference - 1;\n    }\n  }\n  float_1_shift_left = float_1_shift_left + ((int)float_3_new >> (shift_difference & 0xff));\n  float_3_new = float_3_new << (0x20 - shift_difference & 0xff);\n  float_1 = float_1_shift_left & 0x80000000;\n  if ((int)float_1_shift_left < 0) {\n    bool_1 = float_3_new != 0;\n    float_3_new = -float_3_new;\n    float_1_shift_left = -float_1_shift_left - (uint)bool_1;\n  }\n  if (float_1_shift_left < 0x800000) {\n    float_2_xor = float_3_new & 0x80000000;\n    float_3_new = float_3_new << 1;\n    float_1_shift_left = float_1_shift_left * 2 + (uint)(float_2_xor != 0);\n    float_2_xor = shift_amount - 2;\n    if ((float_1_shift_left & 0x800000) == 0) {\n      shifted_float_1 = count_leading_zeroes(float_1_shift_left);\n      shift_difference = shifted_float_1 - 8;\n      float_1_shift_left = float_1_shift_left << (shift_difference & 0xff);\n      if ((int)float_2_xor < (int)shift_difference) {\n        float_1_shift_left = float_1_shift_left >> (-(float_2_xor - shift_difference) & 0xff);\n      }\n      else {\n        float_1_shift_left = float_1_shift_left + (float_2_xor - shift_difference) * 0x800000;\n      }\n      return float_1_shift_left | float_1;\n    }\n  }\n  else {\n    float_2_xor = shift_amount - 1;\n    if (0xffffff < float_1_shift_left) {\n      float_2_xor = float_1_shift_left & 1;\n      float_1_shift_left = float_1_shift_left >> 1;\n      float_3_new = (uint)(float_2_xor != 0) << 0x1f | float_3_new >> 1;\n      float_2_xor = shift_amount;\n      if (0xfd < shift_amount) goto LAB_08000c12;\n    }\n  }\n  float_1_shift_left = float_1_shift_left + float_2_xor * 0x800000 + (uint)(0x7fffffff < float_3_new);\n  if (float_3_new == 0x80000000) {\n    float_1_shift_left = float_1_shift_left & 0xfffffffe;\n  }\n  return float_1_shift_left | float_1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ad8",
            "calling": [
                "FUN_08002ec0",
                "FUN_0800483c",
                "FUN_08002ee8",
                "FUN_08002d88",
                "FUN_08003330",
                "FUN_08002bf0",
                "FUN_0800426c"
            ],
            "imported": false,
            "current_name": "calculate_float_08000ad8"
        },
        "FUN_08003ec8": {
            "renaming": {
                "FUN_08003ec8": "increment_and_store_08003ec8",
                "param_1": "base_address",
                "param_2": "value",
                "*(short *)(param_1 + 0x804)": "*counter",
                "*(undefined *)(param_1 + (uint)*(ushort *)(param_1 + 0x802))": "*(char*)(base_address + (*index))",
                "*(ushort *)(param_1 + 0x802)": "*index"
            },
            "code": "int increment_and_store_08003ec8(int base_address, char value){\n  short* counter = (short*)(base_address + 0x804);\n  *counter = *counter + 1;\n  unsigned short* index = (unsigned short*)(base_address + 0x802);\n  *(char*)(base_address + (*index)) = value;\n  *index = (*index + 1) & 0x7ff;\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ec8",
            "calling": [
                "FUN_08004c30"
            ],
            "imported": false,
            "current_name": "increment_and_store_08003ec8"
        },
        "FUN_08002724": {
            "renaming": {
                "FUN_08002724": "disable_device_08002724",
                "param_1": "device",
                "iVar1": "device_ptr",
                "PTR_": "device_ptr",
                "DAT_": "data"
            },
            "code": "int disable_device_08002724(int *device)\n{\n    int PTR_ = *device;\n    if (device != NULL)\n    {\n        if (device[0x39] == 0)\n        {\n            device[0xe] = 0;\n            disable_interrupts();\n        }\n        device[0x39] = 2;\n        *(uint *)(PTR_ + 0xc) &= 0xffffdfff;\n        disable_device_08002724(device);\n        *(uint *)(PTR_ + 0x10) &= 0xffffb7ff;\n        *(uint *)(PTR_ + 0x14) &= 0xffffffd5;\n        *(uint *)(PTR_ + 0xc) |= 0x2000;\n        device[0xf] = 0;\n        device[0x39] = 1;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08004e7c",
                "FUN_080025e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002724",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "disable_device_08002724"
        },
        "FUN_08003fe8": {
            "renaming": {
                "FUN_08003fe8": "set_param_in_data_08003fe8",
                "param_1": "param",
                "PTR_DAT_08003ff0": "ptr_data"
            },
            "code": "void set_param_in_data_08003fe8(int param){\n    int* ptr = *(int*)PTR_DAT_08003ff0;\n    int offset = 0x3c;\n    *(ptr + offset) = param;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fe8",
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "imported": false,
            "current_name": "set_param_in_data_08003fe8"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "allocate_memory_block_08005714",
                "param_1": "out",
                "param_2": "size",
                "puVar1": "pointer",
                "uVar2": "result",
                "puVar3": "list_head",
                "iVar4": "padding",
                "puVar5": "block_start",
                "uVar6": "block_size",
                "puVar7": "prev_block",
                "uVar8": "adjusted_size"
            },
            "code": "uint allocate_memory_block_08005714(undefined4 *out, uint size)\n{\n  uint adjusted_size = (size + 3 & 0xfffffffc) + 8;\n  if (adjusted_size < 0xc) {\n    adjusted_size = 0xc;\n  }\n  if (((int)adjusted_size < 0) || (adjusted_size < size)) {\n    *out = 0xc;\n  }\n  else {\n    do_nothing_0800583c();\n    uint *list_head = *(uint **)PTR_DAT_080057c8;\n    uint *prev_block = *(uint **)PTR_DAT_080057c8;\n    while (list_head != (uint *)0x0) {\n      uint block_size = *list_head - adjusted_size;\n      if (-1 < (int)block_size) {\n        if (block_size < 0xc) {\n          if (prev_block == list_head) {\n            uint next_block = prev_block[1];\n            *(uint *)PTR_DAT_080057c8 = next_block;\n          }\n          else {\n            uint next_block = list_head[1];\n          }\n          if (prev_block != list_head) {\n            prev_block[1] = next_block;\n            prev_block = list_head;\n          }\n        }\n        else {\n          *list_head = block_size;\n          *(uint *)((int)list_head + block_size) = adjusted_size;\n          prev_block = (uint *)((int)list_head + block_size);\n        }\n        goto LAB_08005778;\n      }\n      prev_block = list_head;\n      list_head = (uint *)list_head[1];\n    }\n    if (*(int *)PTR_DAT_080057cc == 0) {\n      uint result = FUN_0800581c(out);\n      *(undefined4 *)PTR_DAT_080057cc = result;\n    }\n    list_head = (uint *)FUN_0800581c(out, adjusted_size);\n    if ((list_head != (uint *)0xffffffff) &&\n       ((prev_block = (uint *)((int)list_head + 3U & 0xfffffffc), list_head == prev_block ||\n        (block_size = FUN_0800581c(out,(int)prev_block - (int)list_head), block_size != -1)))) {\n      *prev_block = adjusted_size;\nLAB_08005778:\n      do_nothing_0800583e(out);\n      uint block_end = (int)prev_block + 0xbU & 0xfffffff8;\n      int block_padding = block_end - (int)(prev_block + 1);\n      if (block_padding != 0) {\n        *(int *)((int)prev_block + block_padding) = -block_padding;\n        return block_end;\n      }\n      return block_end;\n    }\n    *out = 0xc;\n    do_nothing_0800583e(out);\n  }\n  return 0;\n}",
            "called": [
                "FUN_0800583c",
                "FUN_0800581c",
                "FUN_0800583e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [
                "FUN_08005044",
                "FUN_080057d0",
                "FUN_080050fc"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08005714"
        },
        "FUN_08004fb4": {
            "renaming": {
                "FUN_08004fb4": "execute_functions_08004fb4",
                "puVar1": "function_ptr_array_start",
                "iVar2": "function_ptr_array_size",
                "iVar3": "i"
            },
            "code": "void execute_functions_08004fb4(void)\n{\n  undefined *function_ptr_array_start = PTR_DAT_08004fec;\n  int function_ptr_array_size = (int)PTR_DAT_08004ff0 - (int)PTR_DAT_08004fec;\n  for (int i = 0; i < function_ptr_array_size >> 2; i++) {\n    (**(code **)(function_ptr_array_start + i * 4))();\n  }\n  do_nothing_080072d4();\n  function_ptr_array_start = PTR_DAT_08004ff4;\n  function_ptr_array_size = (int)PTR_DAT_08004ff8 - (int)PTR_DAT_08004ff4;\n  for (int i = 0; i < function_ptr_array_size >> 2; i++) {\n    (**(code **)(function_ptr_array_start + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_08000134",
                "FUN_080072d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fb4",
            "calling": [
                "FUN_08004f68"
            ],
            "imported": false,
            "current_name": "execute_functions_08004fb4"
        },
        "FUN_080043f0": {
            "renaming": {
                "FUN_080043f0": "process_data_and_send_to_server_080043f0",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "server_ptr",
                "local_10": "data_address",
                "uStack_c": "server_address_copy[1]",
                "auStack_8": "server_address_copy",
                "PTR_DAT_0800440c": "PTR_DATA_ADDRESS"
            },
            "code": "void process_data_and_send_to_server_080043f0(undefined4 data_ptr, undefined4 data_size, undefined4 server_ptr) {\n  undefined4 data_address;\n  undefined4 data_size_copy;\n  undefined4 server_address_copy[2];\n  \n  data_address = *(undefined4 *)PTR_DAT_0800440c;\n  server_address_copy[0] = server_ptr;\n  data_size_copy = data_size;\n  server_address_copy[1] = *(undefined4 *)(PTR_DAT_0800440c + 4);\n  \n  send_data_to_server(0x68, &data_address, 8, server_address_copy);\n  return;\n}",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043f0",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "process_data_and_send_to_server_080043f0"
        },
        "FUN_08000428": {
            "renaming": {
                "FUN_08000428": "reverseBits_08000428",
                "param_1": "num",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "shift",
                "uVar1": "signBit",
                "uVar2": "shiftByTwo",
                "uVar3": "result",
                "uVar4": "shiftByThree",
                "uVar5": "shiftBy",
                "uVar7": "shiftByFour",
                "iVar6": "leadingZeros",
                "bVar8": "isShiftByFiveZero",
                "bVar9": "isShiftByFiveNegative",
                "bVar10": "isShiftByFourNegative",
                "in_r12": "mask"
            },
            "code": "ulonglong reverseBits_08000428(uint num, undefined4 param_2, undefined4 param_3, uint shift) {\n  uint shiftBy = num << 1;\n  bool isShiftByZero = shiftBy == 0;\n  uint signBit = (uint)((num & 0x80000000) != 0) << 0x1f;\n  uint shiftByThree = (uint)((int)shiftBy >> 3) >> 1;\n  uint result = signBit | shiftByThree;\n  num = num << 0x1d;\n  if (!isShiftByZero) {\n    uint mask = shiftBy & 0xff000000;\n    isShiftByZero = mask == 0;\n  }\n  if (!isShiftByZero) {\n    isShiftByZero = mask == 0xff000000;\n  }\n  if (!isShiftByZero) {\n    return CONCAT44(result,num) ^ 0x3800000000000000;\n  }\n  if (shiftBy == 0 || mask == 0xff000000) {\n    return CONCAT44(result,num);\n  }\n  uint shiftByTwo = shiftByThree;\n  uint numTwo = num;\n  if (shiftByThree == 0) {\n    numTwo = 0;\n    shiftByTwo = num;\n  }\n  int leadingZeros = count_leading_zeroes(shiftByTwo);\n  if (shiftByThree == 0) {\n    leadingZeros = leadingZeros + 0x20;\n  }\n  uint shiftByFour = leadingZeros - 0xb;\n  bool isShiftByFourNegative = SBORROW4(shiftByFour,0x20);\n  uint shiftByFive = leadingZeros - 0x2b;\n  bool isShiftByFiveNegative = (int)shiftByFive < 0;\n  bool isShiftByFiveZero = shiftByFive == 0;\n  if ((int)shiftByFour < 0x20) {\n    isShiftByFourNegative = SCARRY4(shiftByFive,0xc);\n    leadingZeros = leadingZeros + -0x1f;\n    isShiftByFiveNegative = leadingZeros < 0;\n    isShiftByFiveZero = leadingZeros == 0;\n    shiftByFour = shiftByFive;\n    if (!isShiftByFiveZero && isShiftByFiveNegative == isShiftByFourNegative) {\n      shiftByTwo = shiftByTwo << (shiftByFive & 0xff);\n      shiftByTwo = shiftByTwo >> (0xcU - leadingZeros & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  uint shiftBySix = ~(0x380 - shiftByFour);\n  if ((int)shiftBySix < 0x1f) {\n    int shiftBySeven = shiftBySix - 0x13;\n    if (shiftBySeven != 0 && shiftBySeven < 0 == SCARRY4(shiftBySix - 0x1f,0xc)) {\n      return CONCAT44(signBit,shiftByTwo >> (0x20 - (0xcU - shiftBySeven) & 0xff) | shiftByTwo << (0xcU - shiftBySeven & 0xff)) & 0x80000000ffffffff;\n    }\n    shiftBySix = shiftBySix + 1;\n    return CONCAT44(signBit | shiftByTwo >> (shiftBySix & 0xff),\n                    shiftByTwo >> (shiftBySix & 0xff) | shiftByTwo << (0x20 - shiftBySix & 0xff));\n  }\n  return CONCAT44(result,shiftByTwo >> (shiftBySix - 0x1f & 0xff)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000428",
            "calling": [
                "FUN_08003330",
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "reverseBits_08000428"
        },
        "FUN_08004ccc": {
            "renaming": {
                "FUN_08004ccc": "set_flag_and_call_functions_08004ccc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "var1",
                "uVar2": "flag1",
                "uVar3": "flag2"
            },
            "code": "void set_flag_and_call_functions_08004ccc(int param1, int param2, int param3)\n{\n    int var1 = DAT_08004d44;\n    uint flag1 = *(uint *)(DAT_08004d44 + 0x18) | 1;\n    *(uint *)(DAT_08004d44 + 0x18) = flag1;\n    uint flag2 = *(uint *)(var1 + 0x18) & 1;\n    FUN_08001170(3, param2, flag1, flag2, param1, flag2, param3);\n    FUN_08001194(0xfffffff4, 0);\n    FUN_08001194(0xfffffff5, 0);\n    FUN_08001194(0xfffffff6, 0);\n    FUN_08001194(0xfffffffb, 0);\n    FUN_08001194(0xfffffffc, 0);\n    FUN_08001194(0xfffffffe, 0);\n    FUN_08001194(0xffffffff, 0);\n    return;\n}",
            "called": [
                "FUN_08001170",
                "FUN_08001194"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ccc",
            "calling": [
                "FUN_08001128"
            ],
            "imported": false,
            "current_name": "set_flag_and_call_functions_08004ccc"
        },
        "FUN_08000a30": {
            "renaming": {
                "FUN_08000a30": "calculate_float_08000a30",
                "param_1": "exponent",
                "param_2": "mantissa",
                "uVar1": "exponent_bits",
                "uVar2": "shifted_mantissa_twice",
                "uVar3": "shifted_exponent",
                "in_r12": "biased_exponent",
                "bVar4": "is_zero",
                "bVar5": "is_normal",
                "is_denormal": "is_denormal",
                "is_infinity": "is_infinity",
                "is_negative_zero": "is_negative_zero",
                "is_negative_infinity": "is_negative_infinity",
                "is_nan": "is_nan",
                "shift_amount": "shift_amount",
                "mantissa_bits": "mantissa_bits",
                "exponent_bits": "exponent_bits",
                "sign_bit": "sign_bit"
            },
            "code": "uint calculate_float_08000a30(uint exponent, uint mantissa)\n{\n  uint sign_bit, exponent_bits, mantissa_bits, shifted_mantissa, shifted_exponent, biased_exponent;\n  bool is_normal, is_denormal, is_zero, is_infinity, is_negative_zero, is_negative_infinity, is_nan;\n  \n  uint shifted_mantissa_twice = mantissa * 2;\n  is_normal = shifted_mantissa_twice < 0x70000000;\n  shifted_exponent = shifted_mantissa_twice + 0x90000000;\n  biased_exponent = shifted_exponent;\n  if (!is_normal) {\n    shifted_exponent = shifted_mantissa_twice + 0x8fe00000;\n    biased_exponent = shifted_exponent;\n  }\n  is_zero = biased_exponent == 0;\n  if (!is_normal && shifted_exponent >= 0x200000) {\n    is_zero = shifted_mantissa_twice + 0x8fe00000 == 0x1fc00000;\n  }\n  if (is_zero || is_normal || shifted_exponent < 0x200000 || 0x1fc00000 < shifted_mantissa_twice + 0x8fe00000) {\n    sign_bit = mantissa & 0x80000000;\n    is_negative_zero = sign_bit && biased_exponent == 0;\n    is_infinity = !sign_bit && biased_exponent == 0x7f800000;\n    is_negative_infinity = sign_bit && biased_exponent == 0x7f800000;\n    is_nan = biased_exponent == 0x7f800000 && (mantissa & 0x7fffff) != 0;\n    if ((mantissa & 0x40000000) != 0) {\n      if (((int)shifted_mantissa_twice >> 0x15 == -1) && ((exponent | mantissa << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return mantissa & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(shifted_mantissa_twice + 0x92e00000) < 0 != SCARRY4(shifted_exponent,0x2e00000)) {\n      return mantissa & 0x80000000;\n    }\n    uint shift_amount = 0x18 - (shifted_mantissa_twice + 0x92e00000 >> 0x15);\n    exponent_bits = exponent >> (shift_amount & 0xff);\n    if (exponent << (0x20 - shift_amount & 0xff) != 0) {\n      exponent_bits = exponent_bits | 1;\n    }\n    mantissa_bits = mantissa & 0x1fffff | 0x100000;\n    exponent_bits = exponent_bits | mantissa_bits << (0x20 - shift_amount & 0xff);\n    mantissa_bits = (mantissa_bits >> (shift_amount & 0xff)) << 1;\n  }\n  sign_bit = mantissa & 0x80000000;\n  exponent_bits = (mantissa & 0x80000000 | exponent >> 0x1d) + mantissa_bits * 4 + (uint)(0x7fffffff < exponent * 8);\n  if (exponent * 8 == 0x80000000) {\n    exponent_bits = exponent_bits & 0xfffffffe;\n  }\n  return exponent_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a30",
            "calling": [
                "FUN_08003330",
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "calculate_float_08000a30"
        },
        "FUN_080023d0": {
            "renaming": {
                "FUN_080023d0": "check_and_update_array_080023d0",
                "param_1": "array",
                "*(char *)((int)param_1 + 0x39)": "*(char *)((int)array + 0x39)",
                "*(undefined *)(param_1 + 0xe)": "*(undefined *)(array + 0xe)",
                "FUN_08004d8c": "call_function",
                "*(undefined *)((int)param_1 + 0x39)": "*(undefined *)((int)array + 0x39)",
                "*param_1": "*array",
                "param_1 + 1": "array + 1"
            },
            "code": "int check_and_update_array_080023d0(int *array)\n{\n    if (array != NULL) {\n        if (*(char *)((int)array + 0x39) == '\\0') {\n            *(undefined *)(array + 0xe) = 0;\n            call_function();\n        }\n        *(undefined *)((int)array + 0x39) = 2;\n        perform_operation(*array, array + 1);\n        *(undefined *)((int)array + 0x39) = 1;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08004d8c",
                "FUN_08002368"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080023d0",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "check_and_update_array_080023d0"
        },
        "FUN_08004c30": {
            "renaming": {
                "FUN_08004c30": "validate_input_08004c30",
                "param_1": "input",
                "puVar1": "data_pointer",
                "puVar2": "flag_pointer",
                "uVar3": "flag_value",
                "uVar4": "flag_index",
                "iVar5": "memory_address"
            },
            "code": "int * validate_input_08004c30(int *input)\n{\n  undefined *data_pointer;\n  undefined *flag_pointer;\n  undefined flag_value;\n  uint flag_index;\n  int memory_address;\n\n  data_pointer = data_start;\n  if (*input != data_value) {\n    return input;\n  }\n  initialize_data(data_pointer,data_start);\n  flag_pointer = flag_start;\n  if ((flag_start[0x39] == '\\x01') || (flag_start[0x39] == '\\x12')) {\n    if (data_pointer == (undefined *)0x0) {\n      return (int *)0x1;\n    }\n    if (flag_start[0x38] != '\\x01') {\n      flag_start[0x38] = 1;\n      *(undefined4 *)(flag_pointer + 0x3c) = 0;\n      *(undefined2 *)(flag_pointer + 0x2c) = 1;\n      *(undefined2 *)(flag_pointer + 0x2e) = 1;\n      flag_pointer[0x38] = 0;\n      if (flag_pointer[0x39] == '\\x12') {\n        flag_value = 0x32;\n      }\n      else {\n        flag_value = 0x22;\n      }\n      memory_address = *(int *)flag_pointer;\n      flag_pointer[0x39] = flag_value;\n      flag_index = *(uint *)(memory_address + 0xc);\n      *(undefined **)(flag_pointer + 0x28) = data_pointer;\n      *(uint *)(memory_address + 0xc) = flag_index | 0x100;\n      *(uint *)(memory_address + 0x14) = *(uint *)(memory_address + 0x14) | 1;\n      *(uint *)(memory_address + 0xc) = *(uint *)(memory_address + 0xc) | 0x20;\n      return (int *)0x0;\n    }\n  }\n  return (int *)0x2;\n}",
            "called": [
                "FUN_08003ec8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c30",
            "calling": [
                "FUN_0800290c"
            ],
            "imported": false,
            "current_name": "validate_input_08004c30"
        },
        "FUN_080004d0": {
            "renaming": {
                "FUN_080004d0": "calculate_product_and_round_080004d0",
                "param_1": "first_part_of_product",
                "param_2": "second_part_of_product",
                "param_3": "multiplier",
                "param_4": "multiplicand",
                "uVar1": "lower_32_bits_of_product",
                "lVar2": "temp_result",
                "uVar3": "upper_32_bits_of_product",
                "uVar4": "exponent_part_of_second_part_of_product",
                "uVar6": "difference_of_exponents",
                "uVar7": "mask_for_exponent_bits",
                "uVar8": "most_significant_32_bits_of_result",
                "bVar9": "is_special_case",
                "bVar10": "is_overflow",
                "bVar11": "is_underflow",
                "unaff_r5": "exponent_part_of_multiplicand",
                "uVar12": "product"
            },
            "code": "\nulonglong calculate_product_and_round_080004d0(undefined4 first_part_of_product,uint second_part_of_product,uint multiplier,uint multiplicand)\n\n{\n  ulonglong lower_32_bits_of_product;\n  longlong temp_result;\n  uint upper_32_bits_of_product;\n  uint exponent_part_of_second_part_of_product;\n  int iVar5;\n  uint difference_of_exponents;\n  uint exponent_part_of_multiplicand;\n  uint mask_for_exponent_bits;\n  uint most_significant_32_bits_of_result;\n  bool is_special_case;\n  bool is_overflow;\n  bool is_underflow;\n  ulonglong product;\n  \n  product = CONCAT44(second_part_of_product,first_part_of_product);\n  mask_for_exponent_bits = 0x7ff;\n  exponent_part_of_second_part_of_product = second_part_of_product >> 0x14 & 0x7ff;\n  is_special_case = exponent_part_of_second_part_of_product == 0;\n  if (!is_special_case) {\n    exponent_part_of_multiplicand = multiplicand >> 0x14 & 0x7ff;\n    is_special_case = exponent_part_of_multiplicand == 0;\n  }\n  if (!is_special_case) {\n    is_special_case = exponent_part_of_second_part_of_product == 0x7ff;\n  }\n  if (!is_special_case) {\n    is_special_case = exponent_part_of_multiplicand == 0x7ff;\n  }\n  if (is_special_case) {\n    product = FUN_080006ac();\n  }\n  upper_32_bits_of_product = (uint)(product >> 0x20);\n  iVar5 = exponent_part_of_second_part_of_product + exponent_part_of_multiplicand;\n  exponent_part_of_second_part_of_product = upper_32_bits_of_product ^ multiplicand;\n  upper_32_bits_of_product = upper_32_bits_of_product & ~(mask_for_exponent_bits << 0x15);\n  multiplicand = multiplicand & ~(mask_for_exponent_bits << 0x15);\n  is_special_case = ((uint)product | upper_32_bits_of_product << 0xc) == 0;\n  if (!is_special_case) {\n    is_special_case = (multiplier | multiplicand << 0xc) == 0;\n  }\n  upper_32_bits_of_product = upper_32_bits_of_product | 0x100000;\n  multiplicand = multiplicand | 0x100000;\n  if (is_special_case) {\n    multiplier = (uint)product | multiplier;\n    multiplicand = (exponent_part_of_second_part_of_product & 0x80000000 | upper_32_bits_of_product) ^ multiplicand;\n    exponent_part_of_second_part_of_product = mask_for_exponent_bits >> 1;\n    is_underflow = SBORROW4(iVar5,exponent_part_of_second_part_of_product);\n    difference_of_exponents = iVar5 - exponent_part_of_second_part_of_product;\n    is_special_case = difference_of_exponents == 0;\n    upper_32_bits_of_product = difference_of_exponents;\n    if (!is_special_case && (int)exponent_part_of_second_part_of_product <= iVar5) {\n      is_underflow = SBORROW4(mask_for_exponent_bits,difference_of_exponents);\n      upper_32_bits_of_product = mask_for_exponent_bits - difference_of_exponents;\n      is_special_case = mask_for_exponent_bits == difference_of_exponents;\n    }\n    if (!is_special_case && (int)upper_32_bits_of_product < 0 == is_underflow) {\n      multiplicand = multiplicand | difference_of_exponents * 0x100000;\n    }\n    if (!is_special_case && (int)upper_32_bits_of_product < 0 == is_underflow) {\n      return CONCAT44(multiplicand,multiplier);\n    }\n    multiplicand = multiplicand | 0x100000;\n    mask_for_exponent_bits = 0;\n    is_underflow = SBORROW4(difference_of_exponents,1);\n    difference_of_exponents = difference_of_exponents - 1;\n    is_special_case = difference_of_exponents == 0;\n    exponent_part_of_second_part_of_product = difference_of_exponents;\n  }\n  else {\n    lower_32_bits_of_product = (product & 0xffffffff) * (ulonglong)multiplier;\n    product = (product & 0xffffffff) * (ulonglong)multiplicand +\n             (ulonglong)upper_32_bits_of_product * (ulonglong)multiplier + (lower_32_bits_of_product >> 0x20);\n    most_significant_32_bits_of_result = (uint)product;\n    temp_result = (ulonglong)upper_32_bits_of_product * (ulonglong)multiplicand + (product >> 0x20);\n    mask_for_exponent_bits = (uint)temp_result;\n    upper_32_bits_of_product = (uint)((ulonglong)temp_result >> 0x20);\n    if ((int)lower_32_bits_of_product != 0) {\n      most_significant_32_bits_of_result = most_significant_32_bits_of_result | 1;\n    }\n    difference_of_exponents = (iVar5 + -0x3ff) - (uint)(upper_32_bits_of_product < 0x200);\n    if (upper_32_bits_of_product < 0x200) {\n      is_special_case = (most_significant_32_bits_of_result & 0x80000000) != 0;\n      most_significant_32_bits_of_result = most_significant_32_bits_of_result << 1;\n      temp_result = CONCAT44(upper_32_bits_of_product * 2 + (uint)(CARRY4(mask_for_exponent_bits,mask_for_exponent_bits) || CARRY4(mask_for_exponent_bits * 2,(uint)is_special_case)),\n                       mask_for_exponent_bits * 2 + (uint)is_special_case);\n    }\n    multiplicand = exponent_part_of_second_part_of_product & 0x80000000 | (int)((ulonglong)temp_result >> 0x20) << 0xb | (uint)temp_result >> 0x15;\n    multiplier = (uint)temp_result << 0xb | most_significant_32_bits_of_result >> 0x15;\n    mask_for_exponent_bits = most_significant_32_bits_of_result * 0x800;\n    is_overflow = 0xfc < difference_of_exponents;\n    is_underflow = SBORROW4(difference_of_exponents,0xfd);\n    upper_32_bits_of_product = difference_of_exponents - 0xfd;\n    is_special_case = upper_32_bits_of_product == 0;\n    exponent_part_of_second_part_of_product = upper_32_bits_of_product;\n    if (is_overflow && !is_special_case) {\n      is_overflow = 0x6ff < upper_32_bits_of_product;\n      is_underflow = SBORROW4(upper_32_bits_of_product,0x700);\n      exponent_part_of_second_part_of_product = difference_of_exponents - 0x7fd;\n      is_special_case = upper_32_bits_of_product == 0x700;\n    }\n    if (!is_overflow || is_special_case) {\n      is_special_case = 0x7fffffff < mask_for_exponent_bits;\n      if (mask_for_exponent_bits == 0x80000000) {\n        is_special_case = (most_significant_32_bits_of_result >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(multiplicand + difference_of_exponents * 0x100000 + (uint)CARRY4(multiplier,(uint)is_special_case),multiplier + is_special_case\n                     );\n    }\n  }\n  if (!is_special_case && (int)exponent_part_of_second_part_of_product < 0 == is_underflow) {\n    return (ulonglong)(multiplicand & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  is_overflow = SCARRY4(difference_of_exponents,0x36);\n  is_special_case = (int)(difference_of_exponents + 0x36) < 0;\n  is_underflow = difference_of_exponents == 0xffffffca;\n  if (is_underflow || is_special_case != is_overflow) {\n    multiplier = 0;\n  }\n  if (is_underflow || is_special_case != is_overflow) {\n    multiplicand = multiplicand & 0x80000000;\n  }\n  if (is_underflow || is_special_case != is_overflow) {\n    return CONCAT44(multiplicand,multiplier);\n  }\n  exponent_part_of_second_part_of_product = -difference_of_exponents;\n  upper_32_bits_of_product = exponent_part_of_second_part_of_product - 0x20;\n  if (0x1f < (int)exponent_part_of_second_part_of_product) {\n    difference_of_exponents = multiplier >> (upper_32_bits_of_product & 0xff) | multiplicand << (0x20 - upper_32_bits_of_product & 0xff);\n    exponent_part_of_second_part_of_product = (multiplicand >> (upper_32_bits_of_product & 0xff) & ~((multiplicand & 0x80000000) >> (upper_32_bits_of_product & 0xff))) -\n            ((int)difference_of_exponents >> 0x1f);\n    if ((mask_for_exponent_bits | multiplier << (0x20 - upper_32_bits_of_product & 0xff) | difference_of_exponents << 1) == 0) {\n      exponent_part_of_second_part_of_product = exponent_part_of_second_part_of_product & ~(difference_of_exponents >> 0x1f);\n    }\n    return CONCAT44(multiplicand,exponent_part_of_second_part_of_product) & 0x80000000ffffffff;\n  }\n  iVar5 = exponent_part_of_second_part_of_product - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(upper_32_bits_of_product,0xc)) {\n    most_significant_32_bits_of_result = multiplier << (difference_of_exponents + 0x20 & 0xff);\n    upper_32_bits_of_product = multiplier >> (exponent_part_of_second_part_of_product & 0xff) | multiplicand << (difference_of_exponents + 0x20 & 0xff);\n    difference_of_exponents = upper_32_bits_of_product + -((int)most_significant_32_bits_of_result >> 0x1f);\n    if ((mask_for_exponent_bits | most_significant_32_bits_of_result << 1) == 0) {\n      difference_of_exponents = difference_of_exponents & ~(most_significant_32_bits_of_result >> 0x1f);\n    }\n    return CONCAT44((multiplicand & 0x80000000) +\n                    ((multiplicand & 0x7fffffff) >> (exponent_part_of_second_part_of_product & 0xff)) +\n                    (uint)CARRY4(upper_32_bits_of_product,-((int)most_significant_32_bits_of_result >> 0x1f)),difference_of_exponents);\n  }\n  exponent_part_of_second_part_of_product = 0xc - iVar5;\n  difference_of_exponents = multiplier << (exponent_part_of_second_part_of_product & 0xff);\n  exponent_part_of_second_part_of_product = multiplier >> (0x20 - exponent_part_of_second_part_of_product & 0xff) | multiplicand << (exponent_part_of_second_part_of_product & 0xff);\n  upper_32_bits_of_product = exponent_part_of_second_part_of_product + -((int)difference_of_exponents >> 0x1f);\n  if ((mask_for_exponent_bits | difference_of_exponents << 1) == 0) {\n    upper_32_bits_of_product = upper_32_bits_of_product & ~(difference_of_exponents >> 0x1f);\n  }\n  return CONCAT44((multiplicand & 0x80000000) + (uint)CARRY4(exponent_part_of_second_part_of_product,-((int)difference_of_exponents >> 0x1f)),upper_32_bits_of_product);\n}\n\n",
            "called": [
                "FUN_080006ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004d0",
            "calling": [
                "FUN_08005900",
                "FUN_08003330",
                "FUN_08005c70",
                "FUN_08006c0c",
                "FUN_080071c0",
                "FUN_0800411c",
                "FUN_08006228",
                "FUN_08006d68"
            ],
            "imported": false,
            "current_name": "calculate_product_and_round_080004d0"
        },
        "FUN_08003fdc": {
            "renaming": {
                "FUN_08003fdc": "set_parameter_in_memory_08003fdc",
                "param_1": "parameter_value",
                "PTR_DAT_08003fe4": "ptr"
            },
            "code": "void set_parameter_in_memory_08003fdc(int parameter_value)\n{\n  int* PTR_DAT_08003fe4 = *(int*)PTR_DAT_08003fe4;\n  int offset = 0x38;\n  int* address_to_write = PTR_DAT_08003fe4 + offset;\n  *address_to_write = parameter_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fdc",
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "imported": false,
            "current_name": "set_parameter_in_memory_08003fdc"
        },
        "FUN_080009f0": {
            "renaming": {
                "FUN_080009f0": "is_end_of_input_080009f0",
                "in_CY": "current_char",
                "FUN_08000980": "advance_input_pointer"
            },
            "code": "bool is_end_of_input_080009f0(void)\n{\n  char current_char;\n  advance_input_pointer();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_08000980"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009f0",
            "calling": [
                "FUN_08005854",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_08006d68"
            ],
            "imported": false,
            "current_name": "is_end_of_input_080009f0"
        },
        "FUN_08004f10": {
            "renaming": {
                "FUN_08004f10": "set_flags_and_values_08004f10",
                "puVar1": "flag_ptr",
                "DAT_08004f50": "flag_ptr",
                "DAT_08004f54": "flag_mask",
                "undefined4": "uint32_t",
                "DAT_08004f58": "flag_data"
            },
            "code": "void set_flags_and_values_08004f10(void)\n{\n  uint32_t *DAT_08004f50;\n  DAT_08004f50 = DAT_08004f50;\n  *DAT_08004f50 |= 1;\n  DAT_08004f50[1] &= DAT_08004f54;\n  *DAT_08004f50 &= 0xfef6ffff;\n  *DAT_08004f50 &= 0xfffbffff;\n  DAT_08004f50[1] &= 0xff80ffff;\n  DAT_08004f50[2] = 0x9f0000;\n  *(uint32_t *)(DAT_08004f58 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f10",
            "calling": [
                "FUN_08004f68"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_08004f10"
        },
        "FUN_08005044": {
            "renaming": {
                "FUN_08005044": "resize_buffer_08005044",
                "param_1": "buffer_start",
                "param_2": "buffer_info",
                "param_3": "buffer_data",
                "param_4": "buffer_size",
                "iVar1": "new_buffer_start",
                "iVar4": "buffer_diff",
                "uVar2": "new_size",
                "uVar3": "new_buffer_size"
            },
            "code": "uint32_t resize_buffer_08005044(uint32_t *buffer_start, int *buffer_info, uint32_t buffer_data, uint32_t buffer_size) {\n  int buffer_diff = *buffer_info - buffer_info[4];\n  uint32_t new_buffer_size = (uint32_t)(buffer_info[5] * 3) / 2;\n  if ((buffer_info[2] <= buffer_size) && ((*(uint16_t *)(buffer_info + 3) & 0x480) != 0)) {\n    uint32_t new_size = buffer_size + 1 + buffer_diff;\n    if (new_buffer_size < new_size) {\n      new_buffer_size = new_size;\n    }\n    if ((int)((uint32_t)*(uint16_t *)(buffer_info + 3) << 0x15) < 0) {\n      uint32_t new_buffer_start = allocate_memory(new_buffer_size);\n      if (new_buffer_start == 0) {\n        *buffer_start = 0xc;\n        *(uint16_t *)(buffer_info + 3) = *(uint16_t *)(buffer_info + 3) | 0x40;\n        return 0xffffffff;\n      }\n      copy_memory(new_buffer_start, buffer_info[4], buffer_diff);\n      *(uint16_t *)(buffer_info + 3) = *(uint16_t *)(buffer_info + 3) & 0xfb7f | 0x80;\n      buffer_info[4] = new_buffer_start;\n    }\n    else {\n      uint32_t new_buffer_start = allocate_memory(buffer_diff, new_buffer_size);\n      if (new_buffer_start == 0) {\n        copy_memory(buffer_start, buffer_info[4], buffer_diff);\n        *buffer_info = buffer_info[4] + buffer_diff;\n        *(uint16_t *)(buffer_info + 3) = *(uint16_t *)(buffer_info + 3) | 0x40;\n        return 0xffffffff;\n      }\n      buffer_info[4] = new_buffer_start;\n    }\n    *buffer_info = buffer_info[4] + buffer_diff;\n    buffer_info[5] = new_buffer_size;\n    buffer_info[2] = new_buffer_size - buffer_diff;\n    buffer_size = new_size;\n  }\n  if (buffer_size <= buffer_info[2]) {\n    buffer_info[2] = buffer_info[2] - buffer_size;\n    *buffer_info = buffer_size + *buffer_info;\n    copy_memory(buffer_start, buffer_data, buffer_size);\n  }\n  return 0;\n}",
            "called": [
                "FUN_08005630",
                "FUN_080057d0",
                "FUN_0800567c",
                "FUN_08005646",
                "FUN_08005714"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005044",
            "calling": [
                "FUN_080050fc"
            ],
            "imported": false,
            "current_name": "resize_buffer_08005044"
        },
        "FUN_08004194": {
            "renaming": {
                "FUN_08004194": "initialize_values_08004194",
                "PTR_DAT_080049f0": "ptr3",
                "PTR_DAT_080049ec": "ptr2",
                "PTR_DAT_080049e8": "ptr1",
                "PTR_DAT_080049f4": "ptr4",
                "DAT_080049f8": "var1",
                "DAT_08004a00": "var2",
                "DAT_080049fc": "var3",
                "DAT_08004a08": "var4",
                "DAT_08004a10": "var5",
                "DAT_08004a14": "var6",
                "DAT_08004a1c": "var7",
                "DAT_08004a18": "var8",
                "DAT_08004a20": "var9",
                "DAT_08004a24": "var10",
                "DAT_08004a28": "var11",
                "DAT_08004a2c": "var12"
            },
            "code": "void initialize_values_08004194()\n{\n  int* PTR_DAT_080049e8;\n  int* PTR_DAT_080049ec;\n  int* PTR_DAT_080049f0;\n  int* PTR_DAT_080049f4;\n  int DAT_080049f8;\n  int DAT_08004a00;\n  int DAT_080049fc;\n  int DAT_08004a08;\n\n  initialize_func1();\n  initialize_func2();\n  initialize_func3();\n  initialize_func4();\n\n  PTR_DAT_080049f0 = PTR_DAT_080049f0;\n  PTR_DAT_080049ec = PTR_DAT_080049ec;\n  PTR_DAT_080049e8 = PTR_DAT_080049e8;\n  *(int*)(PTR_DAT_080049ec + 0x4c) = 1;\n  *(int*)(PTR_DAT_080049e8 + 0x4c) = 1;\n  *(int*)(PTR_DAT_080049f0 + 0x4c) = -1;\n  DAT_080049f8 = DAT_080049f8;\n  PTR_DAT_080049f4 = PTR_DAT_080049f4;\n  *(int*)(PTR_DAT_080049f4 + 0x4c) = 1;\n  DAT_08004a00 = DAT_08004a00;\n  *(int*)(PTR_DAT_080049ec + 0x20) = DAT_080049fc;\n  DAT_080049fc = DAT_08004a08;\n  *(int*)(PTR_DAT_080049e8 + 0x20) = DAT_08004a04;\n  *(int*)(PTR_DAT_080049f0 + 0x20) = DAT_08004a0c;\n  *(int*)(PTR_DAT_080049f4 + 0x20) = 0;\n  *(int*)(PTR_DAT_080049ec + 4) = DAT_080049f8;\n  DAT_080049f8 = DAT_08004a10;\n  *(int*)(PTR_DAT_080049ec + 8) = DAT_08004a10;\n  *(int*)(PTR_DAT_080049ec + 0xc) = DAT_08004a00;\n  *(int*)(PTR_DAT_080049ec + 0x10) = DAT_080049fc;\n  DAT_080049fc = DAT_08004a14;\n  *(int*)(PTR_DAT_080049ec + 0x14) = DAT_080049f8;\n  *(int*)(PTR_DAT_080049ec + 0x18) = DAT_080049fc;\n  DAT_08004a08 = DAT_08004a1c;\n  DAT_080049fc = DAT_08004a18;\n  *(int*)(PTR_DAT_080049e8 + 4) = DAT_08004a18;\n  *(int*)(PTR_DAT_080049e8 + 8) = DAT_080049f8;\n  *(int*)(PTR_DAT_080049e8 + 0xc) = DAT_08004a08;\n  *(int*)(PTR_DAT_080049e8 + 0x10) = DAT_080049fc;\n  DAT_080049fc = DAT_08004a20;\n  *(int*)(PTR_DAT_080049e8 + 0x14) = DAT_080049f8;\n  *(int*)(PTR_DAT_080049e8 + 0x18) = DAT_080049fc;\n  *(int*)(PTR_DAT_080049f0 + 4) = DAT_08004a24;\n  *(int*)(PTR_DAT_080049f0 + 8) = DAT_08004a28;\n  *(int*)(PTR_DAT_080049f0 + 0xc) = DAT_08004a00;\n  *(int*)(PTR_DAT_080049f0 + 0x10) = 0;\n  *(int*)(PTR_DAT_080049f0 + 0x14) = 0;\n  *(int*)(PTR_DAT_080049f0 + 0x18) = 0;\n  *(int*)(PTR_DAT_080049f4 + 4) = DAT_08004a2c;\n  *(int*)(PTR_DAT_080049f4 + 8) = 0;\n  *(int*)(PTR_DAT_080049f4 + 0xc) = 0;\n  *(int*)(PTR_DAT_080049f4 + 0x10) = 0;\n  *(int*)(PTR_DAT_080049f4 + 0x14) = 0;\n  *(int*)(PTR_DAT_080049f4 + 0x18) = 0;\n  return;\n}",
            "called": [
                "FUN_08004028",
                "FUN_08002ea0",
                "FUN_08004c70",
                "FUN_08003298"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004194",
            "calling": [
                "FUN_080041ae"
            ],
            "imported": false,
            "current_name": "initialize_values_08004194"
        },
        "FUN_08001240": {
            "renaming": {
                "FUN_08001240": "set_bit_08001240",
                "param_1": "bit_position",
                "uVar1": "data_mask",
                "DAT_08001254": "data_pointer"
            },
            "code": "void set_bit_08001240(uint32_t bit_position)\n{\n  uint32_t* DAT_08001254 = DAT_08001254;\n  if (bit_position == 4) {\n    *DAT_08001254 |= 4;\n  }\n  else {\n    *DAT_08001254 &= 0xfffffffb;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001240",
            "calling": [
                "FUN_08004514"
            ],
            "imported": false,
            "current_name": "set_bit_08001240"
        },
        "FUN_08005840": {
            "renaming": {
                "FUN_08005840": "calculate_new_value_08005840",
                "param_1": "previous_value",
                "param_2": "data",
                "iVar1": "new_value"
            },
            "code": "int calculate_new_value_08005840(int previous_value, int* data){\n  int new_value = previous_value - 4;\n  if (previous_value < 0) {\n    new_value += data[new_value];\n  }\n  return new_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005840",
            "calling": [
                "FUN_080057d0"
            ],
            "imported": false,
            "current_name": "calculate_new_value_08005840"
        },
        "FUN_08000150": {
            "renaming": {
                "FUN_08000150": "get_string_length_08000150",
                "param_1": "string",
                "pcVar2": "current_position",
                "pcVar3": "current_position",
                "cVar1": "current_char"
            },
            "code": "char* get_string_length_08000150(char* string) { \n  char current_char; \n  char* current_position; \n  current_position = string; \n  do { \n    current_position++; \n    current_char = *current_position; \n  } while (current_char != '\\0'); \n  return current_position + (-1 - (int)string); \n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000150",
            "calling": [
                "FUN_08004c8c"
            ],
            "imported": false,
            "current_name": "get_string_length_08000150"
        },
        "FUN_08003f3c": {
            "renaming": {
                "FUN_08003f3c": "count_leading_zeroes_and_update_flags_08003f3c",
                "param_1": "parameter_1",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "uVar1": "flags",
                "uVar2": "zeroes_count",
                "DAT_08003f78": "flags",
                "FUN_08001424": "set_flag"
            },
            "code": "void count_leading_zeroes_and_update_flags_08003f3c(uint32_t parameter_1, uint32_t parameter_2, uint32_t parameter_3)\n{\n  uint32_t DAT_08003f78 = DAT_08003f78;\n  uint32_t zeroes_count = count_leading_zeroes(parameter_1);\n  set_flag(DAT_08003f78, 0x8000, zeroes_count >> 5);\n  zeroes_count = count_leading_zeroes(parameter_2);\n  set_flag(DAT_08003f78, 0x4000, zeroes_count >> 5);\n  zeroes_count = count_leading_zeroes(parameter_3);\n  set_flag(DAT_08003f78, 0x2000, zeroes_count >> 5);\n  return;\n}\n",
            "called": [
                "FUN_08001424"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f3c",
            "calling": [
                "FUN_08004028",
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "count_leading_zeroes_and_update_flags_08003f3c"
        },
        "FUN_08002214": {
            "renaming": {
                "FUN_08002214": "get_value_from_pointer_08002214",
                "PTR_DAT_0800221c": "value_pointer"
            },
            "code": "uint32_t get_value_from_pointer_08002214() {\n    uint32_t* PTR_DAT_0800221c = (uint32_t*)PTR_DAT_0800221c;\n    return *PTR_DAT_0800221c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002214",
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08002214"
        },
        "FUN_0800729c": {
            "renaming": {
                "FUN_0800729c": "do_nothing_0800729c"
            },
            "code": "\nvoid do_nothing_0800729c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800729c",
            "calling": [
                "FUN_080071c0"
            ],
            "imported": false,
            "current_name": "do_nothing_0800729c"
        },
        "FUN_08001004": {
            "renaming": {
                "FUN_08001004": "concatenate_integers_as_long_long_08001004",
                "param_1": "param1",
                "param_2": "param2",
                "CONCAT44": "((unsigned long long)param2 << 32) | param1"
            },
            "code": "undefined8 concatenate_integers_as_long_long_08001004(unsigned int param1, unsigned int param2)\n{\n  call_function_at_0x08000f9c();\n  return ((unsigned long long)param2 << 32) | param1;\n}",
            "called": [
                "FUN_08000f9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001004",
            "calling": [
                "FUN_08001014",
                "FUN_08000ffc",
                "FUN_08001028"
            ],
            "imported": false,
            "current_name": "concatenate_integers_as_long_long_08001004"
        },
        "FUN_08003ff4": {
            "renaming": {
                "FUN_08003ff4": "initialize_data_08003ff4",
                "PTR_DAT_0800401c": "data_start_ptr",
                "PTR_DAT_08004020": "data1_ptr",
                "PTR_DAT_08004024": "data2_ptr",
                "FUN_08002538": "initialize_memory"
            },
            "code": "void initialize_data_08003ff4(void)\n{\n  undefined *data_ptr;\n  data_ptr = PTR_DAT_0800401c;\n  initialize_memory(PTR_DAT_08004020, 4);\n  initialize_memory(PTR_DAT_08004024, 8);\n  initialize_memory(data_ptr, 8);\n  initialize_memory(data_ptr, 0xc);\n  return;\n}\n",
            "called": [
                "FUN_08002538"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ff4",
            "calling": [
                "FUN_08004028"
            ],
            "imported": false,
            "current_name": "initialize_data_08003ff4"
        },
        "FUN_080041ae": {
            "renaming": {
                "FUN_080041ae": "run_program_080041ae",
                "FUN_08003eb0": "initialize",
                "FUN_08004194": "print_welcome_message",
                "FUN_0800114c": "get_user_input",
                "FUN_0800411c": "process_input"
            },
            "code": "void run_program_080041ae(void)\n{\n  initialize(0);\n  print_welcome_message();\n  do {\n    get_user_input();\n    process_input();\n  } while( true );\n}",
            "called": [
                "FUN_08003eb0",
                "FUN_0800411c",
                "FUN_0800114c",
                "FUN_08004194"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041ae",
            "calling": [
                "FUN_08004f68"
            ],
            "imported": false,
            "current_name": "run_program_080041ae"
        },
        "FUN_08001128": {
            "renaming": {
                "FUN_08001128": "set_flag_and_call_functions_08001128",
                "FUN_08001170": "call_function_with_param_3",
                "FUN_08001104": "call_function_with_param_1",
                "FUN_08004ccc": "call_another_function",
                "DAT_08001148": "flag_ptr"
            },
            "code": "int set_flag_and_call_functions_08001128(void)\n{\n  int* DAT_08001148 = DAT_08001148;\n  *DAT_08001148 |= 0x10;\n  call_function_with_param_3(3);\n  call_function_with_param_1(0);\n  call_another_function();\n  return 0;\n}",
            "called": [
                "FUN_08001170",
                "FUN_08004ccc",
                "FUN_08001104"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001128",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "set_flag_and_call_functions_08001128"
        },
        "FUN_08004514": {
            "renaming": {
                "FUN_08004514": "initialize_peripherals_08004514",
                "iVar1": "peripheral_id",
                "uVar2": "system_clock_frequency",
                "uVar3": "peripheral_address",
                "iVar4": "timer_reload_value",
                "local_44": "timer_prescaler",
                "local_40": "timer_source_frequency",
                "local_3c": "peripheral_address",
                "local_38": "timer_clock_division",
                "local_34": "peripheral_address",
                "local_30": "timer_frequency",
                "local_20": "timer_frequency",
                "local_1c": "timer_prescaler",
                "local_14": "timer_reload_value",
                "local_10": "timer_ticks",
                "local_c": "timer_clock_division",
                "PTR_s____Src_peripherals_c_08004588": "PERIPHERAL_SOURCE_FILE",
                "FUN_08001b58": "get_peripheral_id",
                "FUN_08004490": "get_peripheral_id",
                "FUN_0800209c": "calculate_timer_clock_division",
                "FUN_08002214": "get_system_clock_frequency",
                "FUN_08001214": "delay_ms",
                "FUN_08001240": "initialize_adc",
                "FUN_08001194": "initialize_gpio"
            },
            "code": "void initialize_peripherals_08004514(void)\n{\n  int peripheral_id;\n  uint32_t peripheral_address;\n  uint32_t timer_frequency = 1;\n  uint32_t timer_prescaler = 0x10;\n  uint32_t timer_reload_value = 2;\n  uint32_t timer_clock_division = 0x380000;\n  uint32_t timer_source_frequency;\n  while(1)\n  {\n    peripheral_id = get_peripheral_id(PTR_s____Src_peripherals_c_08004588, 0x3c);\n    if (peripheral_id == 0) \n    {\n      break;\n    }\n    timer_frequency = 2;\n    peripheral_address = peripheral_id;\n    timer_prescaler = 0xf;\n    timer_reload_value = 0x400;\n    timer_source_frequency = timer_frequency * timer_prescaler * timer_reload_value;\n    timer_clock_division = calculate_timer_clock_division(timer_clock_division, timer_source_frequency, peripheral_address, peripheral_address);\n  }\n  uint32_t system_clock_frequency = get_system_clock_frequency();\n  uint32_t timer_ticks = timer_clock_division / system_clock_frequency;\n  delay_ms(timer_ticks / 1000);\n  initialize_adc();\n  initialize_gpio();\n  initialize_usart();\n}\n",
            "called": [
                "FUN_0800209c",
                "FUN_08002214",
                "FUN_08001240",
                "FUN_08001b58",
                "FUN_08001194",
                "FUN_08004490",
                "FUN_08001214"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004514",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "initialize_peripherals_08004514"
        },
        "FUN_08004a84": {
            "renaming": {
                "FUN_08004a84": "initialize_and_configure_app_08004a84",
                "puVar1": "app_name",
                "puVar2": "app_version",
                "puVar3": "app_author",
                "puVar4": "app_description",
                "puVar5": "app_license",
                "uVar6": "app_help",
                "uVar7": "result",
                "iVar8": "port_result"
            },
            "code": "void initialize_and_configure_app_08004a84(void)\n{\n  int result;\n  char *app_name = APP_NAME_PTR;\n  char *app_version = APP_VERSION_PTR;\n  char *app_author = APP_AUTHOR_PTR;\n  char *app_description = APP_DESCRIPTION_PTR;\n  char *app_license = APP_LICENSE_PTR;\n  char *app_help = APP_HELP_PTR;\n  char *app_config_file = APP_CONFIG_FILE_PTR;\n  char *app_data_dir = APP_DATA_DIR_PTR;\n  char *app_log_file = APP_LOG_FILE_PTR;\n  char *app_pid_file = APP_PID_FILE_PTR;\n  uint32_t app_log_level = DEFAULT_LOG_LEVEL;\n  uint32_t app_port = DEFAULT_PORT;\n\n  result = initialize_logger(app_name, app_version, app_author, app_description, app_license, app_help, app_log_file, app_log_level);\n  if (result != 0) {\n    log_error(\"Failed to initialize logger: %s\", strerror(result));\n    exit(1);\n  }\n\n  result = initialize_config(app_config_file);\n  if (result != 0) {\n    log_error(\"Failed to initialize config: %s\", strerror(result));\n    exit(1);\n  }\n\n  result = initialize_data_dir(app_data_dir);\n  if (result != 0) {\n    log_error(\"Failed to initialize data dir: %s\", strerror(result));\n    exit(1);\n  }\n\n  result = initialize_pid_file(app_pid_file);\n  if (result != 0) {\n    log_error(\"Failed to initialize pid file: %s\", strerror(result));\n    exit(1);\n  }\n\n  result = initialize_network(app_port);\n  if (result != 0) {\n    log_error(\"Failed to initialize network: %s\", strerror(result));\n    exit(1);\n  }\n}\n",
            "called": [
                "FUN_0800483c",
                "FUN_08002ec0",
                "FUN_080010c4",
                "FUN_08002ed4",
                "FUN_08001028",
                "FUN_08002ee8",
                "FUN_08003f3c",
                "FUN_08004a30",
                "FUN_08000cec",
                "FUN_08000adc",
                "FUN_0800426c",
                "FUN_08001064",
                "FUN_080041c4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a84",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "initialize_and_configure_app_08004a84"
        },
        "FUN_080041c4": {
            "renaming": {
                "FUN_080041c4": "initialize_params_and_call_func_080041c4",
                "FUN_08003fc4": "initialize_func_1",
                "FUN_08003fd0": "initialize_func_2",
                "FUN_08003fdc": "initialize_func_3",
                "FUN_08003fe8": "call_func_with_params",
                "param_1": "param_1",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "extraout_r1": "extra_return_value"
            },
            "code": "void initialize_params_and_call_func_080041c4(undefined4 param_1, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined4 extraout_r1;\n  initialize_func_1(0);\n  initialize_func_2(0);\n  initialize_func_3(0);\n  call_func_with_params(0, extraout_r1, param_3, param_4);\n  return;\n}",
            "called": [
                "FUN_08003fe8",
                "FUN_08003fd0",
                "FUN_08003fc4",
                "FUN_08003fdc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041c4",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "initialize_params_and_call_func_080041c4"
        },
        "FUN_080053d4": {
            "renaming": {
                "FUN_080053d4": "improved_code_080053d4",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "bVar1": "byte_val",
                "iVar2": "int_val1",
                "puVar3": "ptr_val1",
                "iVar4": "int_val2",
                "puVar5": "ptr_val2",
                "uVar6": "uint_val1",
                "ppuVar7": "ptr_ptr_val",
                "uVar8": "uint_val2",
                "uVar9": "uint_val3",
                "puVar10": "ptr_val3",
                "puVar11": "ptr_val4",
                "local_24": "local_arr"
            },
            "code": "\nuint improved_code_080053d4(undefined4 arg1,uint *arg2,undefined4 arg3,code *arg4,uint **arg5)\n\n{\n  byte byte_val;\n  int int_val1;\n  uint *ptr_val1;\n  int int_val2;\n  undefined *ptr_val2;\n  uint uint_val1;\n  uint **ptr_ptr_val;\n  uint uint_val2;\n  uint uint_val3;\n  undefined *ptr_val3;\n  undefined *ptr_val4;\n  uint local_arr [2];\n  \n  byte_val = *(byte *)(arg2 + 6);\n  ptr_val4 = (undefined *)((int)arg2 + 0x43);\n  if (byte_val != 0x6e) {\n    if (byte_val < 0x6f) {\n      if (byte_val != 99) {\n        if (byte_val < 100) {\n          if (byte_val == 0) goto LAB_0800558e;\n          if (byte_val != 0x58) goto LAB_08005404;\n          *(undefined *)((int)arg2 + 0x45) = 0x58;\n          ptr_val2 = PTR_s_0123456789ABCDEF_08005610;\nLAB_0800551e:\n          uint_val1 = *arg2;\n          ptr_val1 = *arg5;\n          *arg5 = ptr_val1 + 1;\n          if (((uint_val1 & 0x80) == 0) && ((int)(uint_val1 << 0x19) < 0)) {\n            uint_val2 = (uint)*(ushort *)ptr_val1;\n          }\n          else {\n            uint_val2 = *ptr_val1;\n          }\n          if ((int)(uint_val1 << 0x1f) < 0) {\n            *arg2 = uint_val1 | 0x20;\n          }\n          if (uint_val2 == 0) {\n            *arg2 = *arg2 & 0xffffffdf;\n          }\n          uint_val1 = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)arg2 + 0x43) = 0;\n        }\n        else {\n          if ((byte_val != 100) && (byte_val != 0x69)) goto LAB_08005404;\n          uint_val2 = *arg2;\n          ptr_val1 = *arg5;\n          if ((uint_val2 & 0x80) == 0) {\n            *arg5 = ptr_val1 + 1;\n            if ((uint_val2 & 0x40) == 0) goto LAB_08005424;\n            uint_val2 = (uint)(short)*(ushort *)ptr_val1;\n          }\n          else {\n            *arg5 = ptr_val1 + 1;\nLAB_08005424:\n            uint_val2 = *ptr_val1;\n          }\n          if ((int)uint_val2 < 0) {\n            uint_val2 = -uint_val2;\n            *(undefined *)((int)arg2 + 0x43) = 0x2d;\n          }\n          uint_val1 = 10;\n          ptr_val2 = PTR_s_0123456789ABCDEF_08005610;\n        }\n        uint_val3 = arg2[1];\n        arg2[2] = uint_val3;\n        ptr_val3 = ptr_val4;\n        if ((int)uint_val3 < 0) {\n          if (uint_val2 != 0) goto LAB_08005552;\nLAB_08005600:\n          *(undefined *)((int)arg2 + 0x42) = *ptr_val2;\n          ptr_val3 = (undefined *)((int)arg2 + 0x42);\n        }\n        else {\n          *arg2 = *arg2 & 0xfffffffb;\n          if (uint_val2 == 0) {\n            if (uint_val3 != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              uint_val3 = uint_val2 / uint_val1;\n              ptr_val3 = ptr_val3 + -1;\n              *ptr_val3 = ptr_val2[uint_val2 - uint_val1 * uint_val3];\n              uint_val2 = uint_val3;\n            } while (uint_val3 != 0);\n          }\n        }\n        if (((uint_val1 == 8) && ((int)(*arg2 << 0x1f) < 0)) && ((int)arg2[1] <= (int)arg2[4]))\n        {\n          ptr_val3[-1] = 0x30;\n          ptr_val3 = ptr_val3 + -1;\n        }\n        arg2[4] = (int)ptr_val4 - (int)ptr_val3;\n        ptr_val4 = ptr_val3;\n        goto LAB_080054fa;\n      }\n      ptr_val1 = *arg5;\n      *arg5 = ptr_val1 + 1;\n      *(char *)((int)arg2 + 0x42) = (char)*ptr_val1;\nLAB_08005464:\n      ptr_val4 = (undefined *)((int)arg2 + 0x42);\n      uint_val2 = 1;\n    }\n    else {\n      if (byte_val != 0x73) {\n        if (byte_val < 0x74) {\n          if (byte_val == 0x6f) {\nLAB_0800548a:\n            uint_val2 = *arg2;\n            ptr_val1 = *arg5;\n            if ((uint_val2 & 0x80) == 0) {\n              *arg5 = ptr_val1 + 1;\n              if ((uint_val2 & 0x40) == 0) goto LAB_08005498;\n              uint_val2 = (uint)*(ushort *)ptr_val1;\n            }\n            else {\n              *arg5 = ptr_val1 + 1;\nLAB_08005498:\n              uint_val2 = *ptr_val1;\n            }\n            ptr_val2 = PTR_s_0123456789ABCDEF_08005610;\n            if (byte_val == 0x6f) {\n              uint_val1 = 8;\n            }\n            else {\n              uint_val1 = 10;\n            }\n            goto LAB_080054b4;\n          }\n          if (byte_val == 0x70) {\n            *arg2 = *arg2 | 0x20;\nLAB_0800544a:\n            ptr_val2 = PTR_s_0123456789abcdef_0800560c;\n            *(undefined *)((int)arg2 + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (byte_val == 0x75) goto LAB_0800548a;\n          if (byte_val == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)arg2 + 0x42) = byte_val;\n        goto LAB_08005464;\n      }\n      ptr_val1 = *arg5;\n      *arg5 = ptr_val1 + 1;\n      ptr_val4 = (undefined *)*ptr_val1;\n      int_val1 = FUN_08005614(ptr_val4,0,arg2[1]);\n      if (int_val1 != 0) {\n        arg2[1] = int_val1 - (int)ptr_val4;\n      }\n      uint_val2 = arg2[1];\n    }\n    arg2[4] = uint_val2;\n    *(undefined *)((int)arg2 + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  uint_val2 = *arg2;\n  ptr_ptr_val = (uint **)*arg5;\n  uint_val1 = arg2[5];\n  if ((uint_val2 & 0x80) == 0) {\n    *arg5 = (uint *)(ptr_ptr_val + 1);\n    ptr_val1 = *ptr_ptr_val;\n    if ((uint_val2 & 0x40) == 0) goto LAB_0800557a;\n    *(short *)ptr_val1 = (short)uint_val1;\n  }\n  else {\n    *arg5 = (uint *)(ptr_ptr_val + 1);\n    ptr_val1 = *ptr_ptr_val;\nLAB_0800557a:\n    *ptr_val1 = uint_val1;\n  }\nLAB_0800558e:\n  arg2[4] = 0;\nLAB_080054fa:\n  int_val1 = FUN_080052e4(arg1,arg2,local_arr,arg3,arg4);\n  if ((int_val1 == -1) || (int_val1 = (*arg4)(arg1,arg3,ptr_val4,arg2[4]), int_val1 == -1)) {\nLAB_0800550e:\n    uint_val2 = 0xffffffff;\n  }\n  else {\n    if ((int)(*arg2 << 0x1e) < 0) {\n      for (int_val1 = 0; int_val1 < (int)(arg2[3] - local_arr[0]); int_val1 = int_val1 + 1) {\n        int_val2 = (*arg4)(arg1,arg3,(int)arg2 + 0x19,1);\n        if (int_val2 == -1) goto LAB_0800550e;\n      }\n    }\n    uint_val2 = arg2[3];\n    if ((int)arg2[3] < (int)local_arr[0]) {\n      uint_val2 = local_arr[0];\n    }\n  }\n  return uint_val2;\n}\n\n",
            "called": [
                "FUN_080052e4",
                "FUN_08005614"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053d4",
            "calling": [
                "FUN_080050fc"
            ],
            "imported": false,
            "current_name": "improved_code_080053d4"
        },
        "FUN_080057d0": {
            "renaming": {
                "FUN_080057d0": "calculate_result_080057d0",
                "param_1": "start_address",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "param_4",
                "uVar1": "result",
                "uVar2": "max_input",
                "FUN_0800567c": "print_error",
                "FUN_08005840": "get_max_input",
                "FUN_08005714": "calculate",
                "FUN_08005630": "print_result"
            },
            "code": "uint calculate_result_080057d0(undefined4 start_address, uint input1, uint input2, undefined4 param_4)\n{\n  uint result;\n  uint max_input;\n  \n  if (input1 != 0)\n  {\n    if (input2 == 0)\n    {\n      print_error();\n      result = input2;\n    }\n    else\n    {\n      max_input = get_max_input();\n      result = input1;\n      if ((max_input < input2) && (result = calculate(start_address, input2), result != 0))\n      {\n        print_result(result, input1, input2);\n        print_error(start_address, input1);\n      }\n    }\n    return result;\n  }\n  result = calculate(start_address, input2, input2, param_4);\n  return result;\n}",
            "called": [
                "FUN_08005630",
                "FUN_08005840",
                "FUN_0800567c",
                "FUN_08005714"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057d0",
            "calling": [
                "FUN_08005044"
            ],
            "imported": false,
            "current_name": "calculate_result_080057d0"
        },
        "FUN_0800567c": {
            "renaming": {
                "FUN_0800567c": "add_to_linked_list_0800567c",
                "param_1": "new_element",
                "param_2": "list_length",
                "param_3": "error_code",
                "param_4": "unused_parameter",
                "puVar1": "pointer_to_linked_list",
                "extraout_r1": "previous_element_ptr",
                "ppiVar2": "previous_element_ptr",
                "ppiVar3": "current_element_ptr",
                "piVar4": "first_element",
                "ppiVar5": "head_ptr",
                "ppiVar6": "previous_element_ptr",
                "ppiVar7": "current_element_ptr"
            },
            "code": "void add_to_linked_list_0800567c(int *new_element, int list_length, int error_code, int unused_parameter)\n{\n  int **previous_element_ptr;\n  int **current_element_ptr;\n  int **head_ptr;\n  \n  if (list_length == 0) {\n    return;\n  }\n  current_element_ptr = (int **)(list_length + -4);\n  if (*(int *)(list_length + -4) < 0) {\n    current_element_ptr = (int **)((int)current_element_ptr + *(int *)(list_length + -4));\n  }\n  do_nothing_0800583c();\n  head_ptr = *(int ***)PTR_DAT_08005710;\n  if (head_ptr == (int **)0x0) {\n    current_element_ptr[1] = (int *)0x0;\n    *(int ***)PTR_DAT_08005710 = current_element_ptr;\n    previous_element_ptr = extraout_r1;\n    current_element_ptr = (int **)PTR_DAT_08005710;\n  }\n  else if (current_element_ptr < head_ptr) {\n    previous_element_ptr = (int **)*current_element_ptr;\n    current_element_ptr = (int **)((int)current_element_ptr + (int)previous_element_ptr);\n    if (head_ptr == current_element_ptr) {\n      int *first_element = *head_ptr;\n      head_ptr = (int **)head_ptr[1];\n      current_element_ptr = (int **)((int)first_element + (int)previous_element_ptr);\n      *current_element_ptr = (int *)current_element_ptr;\n    }\n    current_element_ptr[1] = (int *)head_ptr;\n    *(int ***)PTR_DAT_08005710 = current_element_ptr;\n  }\n  else {\n    do {\n      previous_element_ptr = head_ptr;\n      current_element_ptr = (int **)head_ptr[1];\n      if (current_element_ptr == (int **)0x0) break;\n      head_ptr = current_element_ptr;\n    } while (current_element_ptr <= current_element_ptr);\n    int **last_element_ptr = (int **)((int)current_element_ptr + (int)*current_element_ptr);\n    if ((int **)last_element_ptr == current_element_ptr) {\n      int *last_element = *current_element_ptr;\n      current_element_ptr = (int **)current_element_ptr[1];\n      last_element_ptr = (int **)((int)last_element + (int)*current_element_ptr);\n      *current_element_ptr = (int *)last_element_ptr;\n      last_element_ptr[1] = (int *)current_element_ptr;\n    }\n    else if (current_element_ptr < (int **)((int)last_element_ptr + (int)*last_element_ptr)) {\n      error_code = 0xc;\n    }\n    else {\n      last_element_ptr = (int **)((int)current_element_ptr + (int)*current_element_ptr);\n      if ((int **)last_element_ptr == (int **)last_element_ptr[1]) {\n        int *last_element = *(int **)last_element_ptr[1];\n        last_element_ptr = (int **)((int)last_element + (int)*current_element_ptr);\n        *current_element_ptr = (int *)last_element_ptr;\n      }\n      current_element_ptr[1] = (int *)last_element_ptr[1];\n      previous_element_ptr[1] = (int *)current_element_ptr;\n    }\n  }\n  do_nothing_0800583e(&error_code, previous_element_ptr, current_element_ptr, unused_parameter);\n  return;\n}",
            "called": [
                "FUN_0800583c",
                "FUN_0800583e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800567c",
            "calling": [
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "imported": false,
            "current_name": "add_to_linked_list_0800567c"
        },
        "FUN_0800458c": {
            "renaming": {
                "FUN_0800458c": "initialize_peripherals_0800458c",
                "uVar1": "first_value",
                "puVar2": "pointer",
                "iVar3": "value",
                "uVar4": "second_value",
                "iVar5": "loop_counter",
                "local_58": "var_58",
                "local_54": "var_54",
                "local_50": "var_50",
                "local_4c": "var_4c",
                "local_48": "var_48",
                "local_40": "var_40",
                "local_3c": "var_3c",
                "local_38": "var_38",
                "local_34": "var_34",
                "local_30": "var_30",
                "local_2c": "var_2c",
                "local_28": "var_28",
                "local_24": "var_24",
                "local_20": "var_20",
                "local_1c": "var_1c"
            },
            "code": "\nvoid initialize_peripherals_0800458c(void)\n\n{\n  undefined4 first_value;\n  undefined *pointer;\n  int value;\n  undefined4 second_value;\n  int loop_counter;\n  int var_58;\n  int var_54;\n  int var_50;\n  int var_4c;\n  int var_48;\n  int var_40;\n  int var_3c;\n  int var_38;\n  int var_34;\n  int var_30;\n  int var_2c;\n  int var_28;\n  int var_24;\n  undefined4 var_20;\n  int var_1c;\n  \n  FUN_08001128();\n  FUN_08004514();\n  second_value = DAT_08004800;\n  value = DAT_080047fc;\n  *(uint *)(DAT_080047fc + 0x18) = *(uint *)(DAT_080047fc + 0x18) | 0x10;\n  loop_counter = 2;\n  *(uint *)(value + 0x18) = *(uint *)(value + 0x18) | 4;\n  first_value = DAT_08004804;\n  *(uint *)(value + 0x18) = *(uint *)(value + 0x18) | 8;\n  FUN_08001424(second_value,0xe000,0,*(uint *)(value + 0x18) & 8);\n  FUN_08001424(DAT_08004808,0x20,0);\n  var_34 = 0xe000;\n  var_30 = 1;\n  var_28 = 2;\n  FUN_08001264(DAT_08004800,&var_34);\n  var_34 = 0x20;\n  var_30 = 1;\n  var_28 = 2;\n  FUN_08001264(DAT_08004808,&var_34);\n  pointer = PTR_DAT_0800480c;\n  *(undefined4 *)PTR_DAT_0800480c = DAT_08004810;\n  *(undefined4 *)(pointer + 4) = first_value;\n  *(undefined4 *)(pointer + 0x10) = 0x4000;\n  *(undefined4 *)(pointer + 8) = 0;\n  *(undefined4 *)(pointer + 0xc) = 0;\n  *(undefined4 *)(pointer + 0x14) = 0;\n  *(undefined4 *)(pointer + 0x18) = 0;\n  *(undefined4 *)(pointer + 0x1c) = 0;\n  *(undefined4 *)(pointer + 0x20) = 0;\n  value = FUN_08001754();\n  if (value == 0) goto LAB_0800463a;\n  second_value = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  value = FUN_08004490(PTR_s____Src_peripherals_c_08004814,second_value);\nLAB_0800463a:\n                                  second_value = DAT_0800481c;\n                                  pointer = PTR_DAT_08004818;\n                                  *(int *)(PTR_DAT_08004818 + 8) = value;\n                                  *(int *)(pointer + 0xc) = value;\n                                  *(int *)(pointer + 0x10) = value;\n                                  *(int *)(pointer + 0x18) = value;\n                                  *(int *)(pointer + 0x1c) = value;\n                                  *(undefined4 *)pointer = second_value;\n                                  *(undefined4 *)(pointer + 4) = 0x1c200;\n                                  *(undefined4 *)(pointer + 0x14) = 0xc;\n                                  value = FUN_08002724(pointer);\n                                  second_value = DAT_08004824;\n                                  pointer = PTR_DAT_08004820;\n                                  if (value == 0) break;\n                                  second_value = 0x151;\n                                }\n                                *(undefined4 *)(PTR_DAT_08004820 + 8) = 0;\n                                *(undefined4 *)(pointer + 0x10) = 0;\n                                *(undefined4 *)(pointer + 0x14) = 0;\n                                *(undefined4 *)pointer = second_value;\n                                *(int *)(pointer + 4) = loop_counter;\n                                *(undefined4 *)(pointer + 0xc) = 1000;\n                                value = FUN_080023d0(pointer);\n                                if (value == 0) break;\n                                second_value = 0x88;\n                              }\n                              var_58 = value;\n                              var_54 = value;\n                              value = FUN_080025a4(pointer,&var_58);\n                              if (value == 0) break;\n                              second_value = 0x8f;\n                            }\n                            var_50 = 0x60;\n                            var_4c = value;\n                            var_48 = value;\n                            var_40 = value;\n                            var_3c = value;\n                            var_38 = value;\n                            value = FUN_0800245c(pointer,&var_50,0xc);\n                            if (value == 0) break;\n                            second_value = 0x9a;\n                          }\n                          var_20 = 0x2000;\n                          var_34 = value;\n                          var_30 = value;\n                          var_2c = value;\n                          var_28 = value;\n                          var_24 = value;\n                          var_1c = value;\n                          value = FUN_08002564(pointer,&var_34);\n                          if (value == 0) break;\n                          second_value = 0xa6;\n                        }\n                        FUN_08004e14(pointer);\n                        pointer = PTR_DAT_08004828;\n                        *(undefined4 *)PTR_DAT_08004828 = 0x40000000;\n                        *(int *)(pointer + 4) = loop_counter;\n                        *(undefined4 *)(pointer + 8) = 0;\n                        *(undefined4 *)(pointer + 0xc) = 1000;\n                        *(undefined4 *)(pointer + 0x10) = 0;\n                        value = FUN_080023d0(pointer);\n                        if (value == 0) break;\n                        second_value = 0xc3;\n                      }\n                      var_50 = value;\n                      var_4c = value;\n                      value = FUN_080025a4(pointer,&var_50);\n                      if (value == 0) break;\n                      second_value = 0xca;\n                    }\n                    var_34 = 0x60;\n                    var_30 = value;\n                    var_2c = value;\n                    var_24 = value;\n                    value = FUN_0800245c(pointer,&var_34,4);\n                    if (value == 0) break;\n                    second_value = 0xd3;\n                  }\n                  FUN_08004e14(pointer);\n                  second_value = DAT_08004830;\n                  pointer = PTR_DAT_0800482c;\n                  *(undefined4 *)(PTR_DAT_0800482c + 0xc) = 1000;\n                  *(undefined4 *)pointer = second_value;\n                  *(int *)(pointer + 4) = loop_counter;\n                  *(undefined4 *)(pointer + 8) = 0;\n                  *(undefined4 *)(pointer + 0x10) = 0;\n                  value = FUN_080023d0();\n                  if (value == 0) break;\n                  second_value = 0xf0;\n                }\n                var_50 = 0;\n                var_4c = 0;\n                value = FUN_080025a4(PTR_DAT_0800482c,&var_50);\n                if (value == 0) break;\n                second_value = 0xf7;\n              }\n              var_34 = 0x60;\n              var_30 = value;\n              var_2c = value;\n              var_24 = value;\n              value = FUN_0800245c(PTR_DAT_0800482c,&var_34,8);\n              if (value == 0) break;\n              second_value = 0x100;\n            }\n            loop_counter = FUN_0800245c(PTR_DAT_0800482c,&var_34,0xc);\n            if (loop_counter == 0) break;\n            second_value = 0x105;\n          }\n          FUN_08004e14(PTR_DAT_0800482c);\n          pointer = PTR_DAT_08004834;\n          *(undefined4 *)PTR_DAT_08004834 = DAT_08004838;\n          *(undefined4 *)(pointer + 4) = 2;\n          *(undefined4 *)(pointer + 8) = 0;\n          *(undefined4 *)(pointer + 0xc) = 1000;\n          *(undefined4 *)(pointer + 0x10) = 0;\n          value = FUN_080023d0(pointer);\n          if (value == 0) break;\n          second_value = 0x122;\n        }\n        var_50 = value;\n        var_4c = value;\n        value = FUN_080025a4(pointer,&var_50);\n        if (value == 0) break;\n        second_value = 0x129;\n      }\n      var_34 = 0x60;\n      var_30 = value;\n      var_2c = value;\n      var_24 = value;\n      value = FUN_0800245c(pointer,&var_34,8);\n      if (value == 0) break;\n      second_value = 0x132;\n    }\n    value = FUN_0800245c(pointer,&var_34,0xc);\n    if (value == 0) break;\n    second_value = 0x137;\n  }\n  FUN_08004e14(pointer);\n  return;\n}\n\n",
            "called": [
                "FUN_08001754",
                "FUN_080025a4",
                "FUN_0800245c",
                "FUN_080023d0",
                "FUN_08002564",
                "FUN_08001128",
                "FUN_08004490",
                "FUN_08004514",
                "FUN_08001264",
                "FUN_08004e14",
                "FUN_08002724",
                "FUN_08001424"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800458c",
            "calling": [
                "FUN_08004028"
            ],
            "imported": false,
            "current_name": "initialize_peripherals_0800458c"
        },
        "FUN_080072d4": {
            "renaming": {
                "FUN_080072d4": "do_nothing_080072d4"
            },
            "code": "\nvoid do_nothing_080072d4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072d4",
            "calling": [
                "FUN_08004fb4",
                "FUN_08000110",
                "FUN_08000134"
            ],
            "imported": false,
            "current_name": "do_nothing_080072d4"
        },
        "FUN_0800583c": {
            "renaming": {
                "FUN_0800583c": "do_nothing_0800583c"
            },
            "code": "\nvoid do_nothing_0800583c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800583c",
            "calling": [
                "FUN_0800567c",
                "FUN_08005714"
            ],
            "imported": false,
            "current_name": "do_nothing_0800583c"
        },
        "FUN_08000adc": {
            "renaming": {
                "FUN_08000adc": "calculate_float_08000adc",
                "param_1": "float_1",
                "param_2": "float_2",
                "param_3": "undefined4_param",
                "param_4": "float_3",
                "iVar1": "int_var_1",
                "uVar2": "uint_var_2",
                "uVar3": "uint_var_3",
                "uVar4": "uint_var_4",
                "uVar5": "uint_var_5",
                "iVar6": "int_var_6",
                "bVar7": "bool_var_7"
            },
            "code": "\nuint calculate_float_08000adc(uint float_1,uint float_2,undefined4 undefined4_param,uint float_3)\n\n{\n  int int_var_1;\n  uint uint_var_2;\n  uint uint_var_3;\n  uint uint_var_4;\n  uint uint_var_5;\n  int int_var_6;\n  bool bool_var_7;\n  \n  uint_var_3 = float_1 << 1;\n  bool_var_7 = uint_var_3 == 0;\n  if (!bool_var_7) {\n    float_3 = float_2 << 1;\n    bool_var_7 = float_3 == 0;\n  }\n  if (!bool_var_7) {\n    bool_var_7 = uint_var_3 == float_3;\n  }\n  int_var_6 = (int)uint_var_3 >> 0x18;\n  if (!bool_var_7) {\n    bool_var_7 = int_var_6 == -1;\n  }\n  if (!bool_var_7) {\n    bool_var_7 = (int)float_3 >> 0x18 == -1;\n  }\n  if (bool_var_7) {\n    int_var_1 = (int)(float_2 << 1) >> 0x18;\n    if (int_var_6 == -1 || int_var_1 == -1) {\n      uint_var_3 = float_2;\n      if (int_var_6 == -1) {\n        uint_var_3 = float_1;\n      }\n      if (int_var_6 != -1 || int_var_1 != -1) {\n        float_2 = uint_var_3;\n      }\n      bool_var_7 = (uint_var_3 & 0x7fffff) == 0;\n      if (bool_var_7) {\n        bool_var_7 = (float_2 & 0x7fffff) == 0;\n      }\n      if (bool_var_7) {\n        bool_var_7 = uint_var_3 == float_2;\n      }\n      if (!bool_var_7) {\n        uint_var_3 = uint_var_3 | 0x400000;\n      }\n      return uint_var_3;\n    }\n    if (((float_1 ^ float_2) & 0x7fffffff) != 0) {\n      if (uint_var_3 == 0) {\n        float_1 = float_2;\n      }\n      return float_1;\n    }\n    if (float_1 != float_2) {\n      return 0;\n    }\n    if ((uint_var_3 & 0xff000000) == 0) {\n      uint_var_3 = float_1 << 1;\n      if ((float_1 & 0x80000000) != 0) {\n        uint_var_3 = uint_var_3 | 0x80000000;\n      }\n      return uint_var_3;\n    }\n    if (uint_var_3 < 0xfe000000) {\n      return float_1 + 0x800000;\n    }\n    float_1 = float_1 & 0x80000000;\nLAB_08000c12:\n    return float_1 | 0x7f800000;\n  }\n  uint_var_3 = uint_var_3 >> 0x18;\n  float_3 = float_3 >> 0x18;\n  uint_var_5 = float_3 - uint_var_3;\n  bool_var_7 = uint_var_5 != 0;\n  uint_var_4 = uint_var_3;\n  if (bool_var_7 && uint_var_3 <= float_3) {\n    uint_var_4 = uint_var_3 + uint_var_5;\n  }\n  if (bool_var_7 && uint_var_3 <= float_3) {\n    float_2 = float_2 ^ float_1;\n  }\n  if (bool_var_7 && uint_var_3 <= float_3) {\n    float_1 = float_1 ^ float_2;\n  }\n  if (bool_var_7 && uint_var_3 <= float_3) {\n    float_2 = float_2 ^ float_1;\n  }\n  if (float_3 < uint_var_3) {\n    uint_var_5 = -uint_var_5;\n  }\n  if (0x19 < uint_var_5) {\n    return float_1;\n  }\n  uint_var_3 = float_1 & 0xffffff | 0x800000;\n  if ((float_1 & 0x80000000) != 0) {\n    uint_var_3 = -uint_var_3;\n  }\n  uint_var_2 = float_2 & 0xffffff | 0x800000;\n  if ((float_2 & 0x80000000) != 0) {\n    uint_var_2 = -uint_var_2;\n  }\n  if (uint_var_4 == uint_var_5) {\n    uint_var_2 = uint_var_2 ^ 0x800000;\n    if (uint_var_4 == 0) {\n      uint_var_3 = uint_var_3 ^ 0x800000;\n      uint_var_4 = 1;\n    }\n    else {\n      uint_var_5 = uint_var_5 - 1;\n    }\n  }\n  uint_var_3 = uint_var_3 + ((int)uint_var_2 >> (uint_var_5 & 0xff));\n  uint_var_2 = uint_var_2 << (0x20 - uint_var_5 & 0xff);\n  float_1 = uint_var_3 & 0x80000000;\n  if ((int)uint_var_3 < 0) {\n    bool_var_7 = uint_var_2 != 0;\n    uint_var_2 = -uint_var_2;\n    uint_var_3 = -uint_var_3 - (uint)bool_var_7;\n  }\n  if (uint_var_3 < 0x800000) {\n    uint_var_5 = uint_var_2 & 0x80000000;\n    uint_var_2 = uint_var_2 << 1;\n    uint_var_3 = uint_var_3 * 2 + (uint)(uint_var_5 != 0);\n    uint_var_5 = uint_var_4 - 2;\n    if ((uint_var_3 & 0x800000) == 0) {\n      int_var_6 = count_leading_zeroes(uint_var_3);\n      uint_var_4 = int_var_6 - 8;\n      uint_var_3 = uint_var_3 << (uint_var_4 & 0xff);\n      if ((int)uint_var_5 < (int)uint_var_4) {\n        uint_var_3 = uint_var_3 >> (-(uint_var_5 - uint_var_4) & 0xff);\n      }\n      else {\n        uint_var_3 = uint_var_3 + (uint_var_5 - uint_var_4) * 0x800000;\n      }\n      return uint_var_3 | float_1;\n    }\n  }\n  else {\n    uint_var_5 = uint_var_4 - 1;\n    if (0xffffff < uint_var_3) {\n      uint_var_5 = uint_var_3 & 1;\n      uint_var_3 = uint_var_3 >> 1;\n      uint_var_2 = (uint)(uint_var_5 != 0) << 0x1f | uint_var_2 >> 1;\n      uint_var_5 = uint_var_4;\n      if (0xfd < uint_var_4) goto LAB_08000c12;\n    }\n  }\n  uint_var_3 = uint_var_3 + uint_var_5 * 0x800000 + (uint)(0x7fffffff < uint_var_2);\n  if (uint_var_2 == 0x80000000) {\n    uint_var_3 = uint_var_3 & 0xfffffffe;\n  }\n  return uint_var_3 | float_1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000adc",
            "calling": [
                "FUN_08002ec0",
                "FUN_08002cb0",
                "FUN_0800483c",
                "FUN_08002ee8",
                "FUN_08003330",
                "FUN_0800411c",
                "FUN_0800426c",
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "calculate_float_08000adc"
        },
        "FUN_08000ffc": {
            "renaming": {
                "FUN_08000ffc": "swap_arguments_and_call_function_08000ffc",
                "param_1": "argument1",
                "param_2": "argument2",
                "FUN_08001004": "call_function_with_swapped_arguments"
            },
            "code": "void swap_arguments_and_call_function_08000ffc(undefined4 argument1, undefined4 argument2)\n{\n    call_function_with_swapped_arguments(argument2, argument1);\n    return;\n}",
            "called": [
                "FUN_08001004"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ffc",
            "calling": [
                "FUN_08001050",
                "FUN_08001064"
            ],
            "imported": false,
            "current_name": "swap_arguments_and_call_function_08000ffc"
        },
        "FUN_080016f4": {
            "renaming": {
                "FUN_080016f4": "check_flag_080016f4",
                "param_1": "flag_ptr",
                "param_2": "flag_size",
                "iVar1": "start_time",
                "iVar2": "curr_flag"
            },
            "code": "int check_flag_080016f4(int *flag_ptr, uint flag_size) {\n  int start_time = get_time();\n  while (true) {\n    int curr_flag = *flag_ptr;\n    if ((*(uint *)(curr_flag + 0x14) & 0x40) != 0) {\n      return 0;\n    }\n    if (*(int *)(curr_flag + 0x14) << 0x1b < 0) {\n      if ((flag_size == 0) || (get_time() - start_time > flag_size)) {\n        flag_ptr[14] |= 0x20;\n        *(undefined *)((int)flag_ptr + 0x35) = 0x20;\n        *(undefined *)(flag_ptr + 13) = 0;\n        return 3;\n      }\n    }\n    else {\n      *(uint *)(curr_flag + 0x14) &= 0xffffffef;\n      flag_ptr[14] = 0;\n      *(undefined *)(flag_ptr + 13) = 0;\n      *(undefined *)((int)flag_ptr + 0x35) = 0x20;\n      return 1;\n    }\n  }\n}",
            "called": [
                "FUN_0800115c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016f4",
            "calling": [
                "FUN_08001938"
            ],
            "imported": false,
            "current_name": "check_flag_080016f4"
        },
        "FUN_080025a4": {
            "renaming": {
                "FUN_080025a4": "set_flags_and_return_status_080025a4",
                "param_1": "flags",
                "param_2": "data",
                "uVar1": "data_0",
                "uVar2": "status",
                "iVar3": "flags_0",
                "uVar4": "data_1"
            },
            "code": "int set_flags_and_return_status_080025a4(int *flags, uint *data)\n{\n    uint data_0 = data[0];\n    uint data_1 = data[1];\n    int status = 2;\n    if (*(char *)(flags + 0xe) != '\\x01') {\n        *(undefined *)((int)flags + 0x39) = 2;\n        int flags_0 = *flags;\n        *(uint *)(flags_0 + 4) = *(uint *)(flags_0 + 4) & 0xffffff8f;\n        *(uint *)(flags_0 + 4) = *(uint *)(flags_0 + 4) | data_0;\n        *(uint *)(flags_0 + 8) = *(uint *)(flags_0 + 8) & 0xffffff7f;\n        *(uint *)(flags_0 + 8) = *(uint *)(flags_0 + 8) | data_1;\n        *(undefined *)((int)flags + 0x39) = 1;\n        *(char *)(flags + 0xe) = 0;\n        status = 0;\n    }\n    return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025a4",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "set_flags_and_return_status_080025a4"
        },
        "FUN_0800583e": {
            "renaming": {
                "FUN_0800583e": "do_nothing_0800583e"
            },
            "code": "\nvoid do_nothing_0800583e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800583e",
            "calling": [
                "FUN_0800567c",
                "FUN_08005714"
            ],
            "imported": false,
            "current_name": "do_nothing_0800583e"
        },
        "FUN_08002220": {
            "renaming": {
                "FUN_08002220": "get_shifted_value_based_on_leading_zeroes_08002220",
                "uVar1": "leading_zeroes_count",
                "PTR_DAT_0800224c": "ptr_dat_0800224c",
                "PTR_DAT_08002248": "ptr_dat_08002248",
                "DAT_08002244": "dat_08002244"
            },
            "code": "uint get_shifted_value_based_on_leading_zeroes_08002220(void)\n{\n  uint leading_zeroes_count = count_leading_zeroes(0xe00000);\n  uint shift_amount = (*(uint *)PTR_DAT_0800224c) >> PTR_DAT_08002248[(*(uint *)(DAT_08002244 + 4) & 0x700) >> (leading_zeroes_count & 0xff)];\n  return shift_amount;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002220",
            "calling": [
                "FUN_08001754",
                "FUN_080025e8"
            ],
            "imported": false,
            "current_name": "get_shifted_value_based_on_leading_zeroes_08002220"
        },
        "FUN_08003034": {
            "renaming": {
                "FUN_08003034": "convert_local_c_to_uint_and_concatenate_08003034",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "local_c",
                "local_c": "local_c",
                "FUN_080040b8": "convert_local_c_to_uint",
                "PTR_s____Src_MS5611_c_08003064": "PTR_s_src_MS5611_c",
                "CONCAT12": "concatenate_12_bytes",
                "CONCAT11": "concatenate_11_bytes",
                "undefined4": "unsigned_int"
            },
            "code": "uint convert_local_c_to_uint_and_concatenate_08003034(undefined4 param_1, undefined4 param_2, undefined4 param_3, undefined4 local_c)\n{\n  uint concatenated_value;\n  concatenated_value = 0;\n  convert_local_c_to_uint(0xee, 0, &local_c, 3, PTR_s____Src_MS5611_c_08003064, 0x8c, param_3);\n  concatenated_value = (uint)CONCAT12((undefined)local_c, CONCAT11(local_c._1_1_, local_c._2_1_));\n  return concatenated_value;\n}",
            "called": [
                "FUN_080040b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003034",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "convert_local_c_to_uint_and_concatenate_08003034"
        },
        "FUN_08004e7c": {
            "renaming": {
                "FUN_08004e7c": "set_flag_if_param_equals_constant_08004e7c",
                "param_1": "param",
                "local_18": "FIRST_ARG",
                "local_14": "SECOND_ARG",
                "local_10": "THIRD_ARG",
                "local_c": "UNUSED_VAR",
                "*param_1": "*param",
                "DAT_08004edc": "CONSTANT",
                "DAT_08004edc + 0xd818": "flag_ptr",
                "0x08004ee0": "UNUSED_CONSTANT",
                "0x25": "UNUSED_CONSTANT"
            },
            "code": "void set_flag_if_param_equals_constant_08004e7c(int *param)\n{\n  const int DAT_08004edc = 0x08004edc;\n  if (*param == DAT_08004edc) {\n    uint* DAT_08004edc + 0xd818 = (uint*)(DAT_08004edc + 0xd818);\n    *DAT_08004edc + 0xd818 |= 0x4000;\n    const uint FIRST_ARG = 0x200;\n    const uint SECOND_ARG = 2;\n    const uint THIRD_ARG = 3;\n    FUN_08001264(0x08004ee0, &FIRST_ARG);\n    FIRST_ARG = 0x400;\n    SECOND_ARG = 0;\n    THIRD_ARG = 0;\n    FUN_08001264(0x08004ee0, &FIRST_ARG);\n    FUN_08001194(0x25, 0, 0);\n    FUN_080011fc(0x25);\n  }\n  return;\n}",
            "called": [
                "FUN_080011fc",
                "FUN_08001194",
                "FUN_08001264"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e7c",
            "calling": [
                "FUN_08002724"
            ],
            "imported": false,
            "current_name": "set_flag_if_param_equals_constant_08004e7c"
        },
        "FUN_08001530": {
            "renaming": {
                "FUN_08001530": "set_flag_and_call_func_08001530",
                "param_1": "flag",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "param_4",
                "param_5": "param_5",
                "iVar1": "start_time",
                "iVar2": "end_time",
                "puVar3": "flag_ptr",
                "ppuVar4": "ptr_to_flag",
                "uVar5": "val1",
                "uVar6": "val2",
                "DAT_080015e4": "DAT_080015e4"
            },
            "code": "int set_flag_and_call_func_08001530(uint **flag, uint value1, uint value2, int param_4, uint param_5) {\n  int result;\n  int start_time = FUN_0800115c();\n  uint **ptr_to_flag = flag;\n  uint val1 = value1;\n  uint val2 = value2;\n  **flag |= 0x100;\n  do {\n    uint *flag_ptr = *flag;\n    do {\n      if ((int)(flag_ptr[5] << 0x1f) < 0) {\n        flag_ptr[4] = value1 & 0xfe;\n        result = FUN_08001460(flag,DAT_080015e4,param_5,flag_ptr,ptr_to_flag,val1,val2);\n        if (result == 0) {\n          result = FUN_080014e2(flag,param_5,(*flag)[5],(*flag)[6]);\n          if (result == 0) {\n            flag_ptr = *flag;\n            if (param_4 == 1) {\n              flag_ptr[4] = value2 & 0xff;\n              return result;\n            }\n            flag_ptr[4] = value2 >> 8;\n            result = FUN_080014e2(flag,param_5);\n            if (result == 0) {\n              flag_ptr = *flag;\n              flag_ptr[4] = value2 & 0xff;\n              return result;\n            }\n          }\n          if (flag[0xe] != (uint *)0x4) {\n            return 3;\n          }\n          **flag |= 0x200;\n        }\n        else if (flag[0xe] != (uint *)0x4) {\n          return 3;\n        }\n        return 1;\n      }\n    } while (param_5 == 0xffffffff);\n    int end_time = FUN_0800115c();\n    if ((param_5 == 0) || (param_5 < (uint)(end_time - start_time))) {\n      *(undefined *)((int)flag + 0x35) = 0x20;\n      *(undefined *)(flag + 0xd) = 0;\n      return 3;\n    }\n  } while( true );\n}\n",
            "called": [
                "FUN_08001460",
                "FUN_080014e2",
                "FUN_0800115c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001530",
            "calling": [
                "FUN_08001828"
            ],
            "imported": false,
            "current_name": "set_flag_and_call_func_08001530"
        },
        "FUN_08003314": {
            "renaming": {
                "FUN_08003314": "set_param_value_to_global_08003314",
                "param_1": "param_value",
                "PTR_DAT_0800331c": "global_param_ptr"
            },
            "code": "void set_param_value_to_global_08003314(int param_value) {\n  *(int *)PTR_DAT_0800331c = param_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003314",
            "calling": [
                "FUN_08002ea0"
            ],
            "imported": false,
            "current_name": "set_param_value_to_global_08003314"
        },
        "FUN_08005854": {
            "renaming": {
                "FUN_08005854": "check_and_do_something_08005854",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "puVar1": "ptr1",
                "iVar2": "result1",
                "puVar3": "ptr2",
                "piVar4": "ptr2",
                "uVar5": "system_time",
                "uVar6": "result2",
                "local_48": "var1",
                "local_44": "var3",
                "local_40": "var2",
                "uStack_3c": "var5",
                "local_38": "var2",
                "uStack_34": "var5",
                "local_30": "final_result",
                "local_28": "var4"
            },
            "code": "// This function checks for some conditions and returns a value\n// If the return value is not -1, then it does some more operations and returns a final value\n// If the final value is not 0, then it does some more operations and returns another final value\n// Otherwise, it does some more operations and returns the final value\n\n\nlong check_and_do_something_08005854(int param_1, int param_2)\n{\n  char *ptr1;\n  int result1;\n  int *ptr2;\n  long result2;\n  long final_result;\n  int var1;\n  int var2;\n  char *var3;\n  int var4;\n  int var5;\n  char *var6;\n  long var7;\n  \n  var7 = get_system_time();\n  ptr1 = PTR_DAT_080058f8;\n  if (*PTR_DAT_080058f8 == -1) {\n    return var7;\n  }\n  result1 = FUN_08000a04(param_1, param_2, param_1, param_2);\n  if (result1 != 0) {\n    return var7;\n  }\n  result2 = do_nothing_0800708c(param_1, param_2);\n  var4 = FUN_080009f0((int)result2, (int)((unsigned long long)result2 >> 0x20), 0, DAT_080058ec);\n  if (var4 == 0) {\n    return var7;\n  }\n  var1 = 1;\n  var3 = PTR_DAT_080058f0;\n  var2 = param_1;\n  var5 = param_2;\n  var6 = PTR_DAT_080058f4;\n  final_result = do_something_else(var1, var3, var2, var5, var2, var5, var6);\n  if (*ptr1 != '\\x02') {\n    var4 = do_more_stuff(&var1);\n    if (var4 != 0) {\n      ptr2 = (int *)FUN_080072ac();\n      *ptr2 = result1;\n      return final_result;\n    }\n  }\n  ptr2 = (int *)FUN_080072ac();\n  *ptr2 = result1;\n  return final_result;\n}",
            "called": [
                "FUN_080072ac",
                "FUN_08005c70",
                "FUN_08000a04",
                "FUN_080009f0",
                "FUN_0800709e",
                "FUN_0800708c",
                "FUN_080070a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005854",
            "calling": [
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "check_and_do_something_08005854"
        },
        "FUN_08000168": {
            "renaming": {
                "FUN_08000168": "calculate_double_precision_integer_08000168",
                "param_1": "left_operand",
                "param_2": "left_operand_upper_bits",
                "param_3": "right_operand",
                "param_4": "right_operand_upper_bits",
                "iVar1": "right_operand_upper_bits_shifted",
                "bVar2": "least_significant_bit",
                "uVar3": "sum_lower_bits",
                "uVar4": "left_operand_with_hidden_bit",
                "uVar5": "sum_upper_bits",
                "uVar6": "left_operand_with_hidden_bit_shifted",
                "uVar7": "right_operand_with_hidden_bit",
                "iVar8": "right_operand_with_hidden_bit_shifted",
                "uVar9": "left_operand_upper_bits_shifted",
                "uVar10": "difference_in_bits",
                "uVar11": "result_upper_bits",
                "uVar12": "sum_sign_bit",
                "bVar13": "left_operand_and_right_operand_have_same_sign",
                "bVar14": "condition_met",
                "bVar15": "carry_occurred"
            },
            "code": "\nulonglong calculate_double_precision_integer_08000168(uint left_operand,uint left_operand_upper_bits,uint right_operand,uint right_operand_upper_bits)\n\n{\n  int right_operand_upper_bits_shifted;\n  byte least_significant_bit;\n  uint sum_lower_bits;\n  uint left_operand_with_hidden_bit;\n  uint sum_upper_bits;\n  uint left_operand_with_hidden_bit_shifted;\n  uint right_operand_with_hidden_bit;\n  int right_operand_with_hidden_bit_shifted;\n  uint left_operand_upper_bits_shifted;\n  uint difference_in_bits;\n  uint result_upper_bits;\n  uint sum_sign_bit;\n  bool left_operand_and_right_operand_have_same_sign;\n  bool condition_met;\n  bool carry_occurred;\n  \n  left_operand_with_hidden_bit_shifted = right_operand_upper_bits ^ 0x80000000;\n  left_operand_upper_bits_shifted = left_operand_upper_bits << 1;\n  right_operand_upper_bits = right_operand_upper_bits << 1;\n  left_operand_and_right_operand_have_same_sign = ((left_operand_upper_bits ^ left_operand_with_hidden_bit_shifted) & 0x7fffffff) == 0;\n  condition_met = left_operand_and_right_operand_have_same_sign && left_operand == right_operand;\n  if (!left_operand_and_right_operand_have_same_sign || left_operand != right_operand) {\n    condition_met = (left_operand_upper_bits_shifted | left_operand) == 0;\n  }\n  if (!condition_met) {\n    condition_met = (right_operand_upper_bits | right_operand) == 0;\n  }\n  right_operand_with_hidden_bit_shifted = (int)left_operand_upper_bits_shifted >> 0x15;\n  if (!condition_met) {\n    condition_met = right_operand_with_hidden_bit_shifted == -1;\n  }\n  right_operand_upper_bits_shifted = (int)right_operand_upper_bits >> 0x15;\n  if (!condition_met) {\n    condition_met = right_operand_upper_bits_shifted == -1;\n  }\n  if (condition_met) {\n    if (right_operand_with_hidden_bit_shifted == -1 || right_operand_upper_bits_shifted == -1) {\n      left_operand_upper_bits_shifted = left_operand_with_hidden_bit_shifted;\n      result_upper_bits = right_operand;\n      if (right_operand_with_hidden_bit_shifted == -1) {\n        left_operand_upper_bits_shifted = left_operand_upper_bits;\n        result_upper_bits = left_operand;\n      }\n      if (right_operand_with_hidden_bit_shifted != -1 || right_operand_upper_bits_shifted != -1) {\n        right_operand = result_upper_bits;\n        left_operand_with_hidden_bit_shifted = left_operand_upper_bits_shifted;\n      }\n      condition_met = (result_upper_bits | left_operand_upper_bits_shifted << 0xc) == 0;\n      if (condition_met) {\n        condition_met = (right_operand | left_operand_with_hidden_bit_shifted << 0xc) == 0;\n      }\n      if (condition_met) {\n        condition_met = left_operand_upper_bits_shifted == left_operand_with_hidden_bit_shifted;\n      }\n      if (!condition_met) {\n        left_operand_upper_bits_shifted = left_operand_upper_bits_shifted | 0x80000;\n      }\n      return CONCAT44(left_operand_upper_bits_shifted,result_upper_bits);\n    }\n    if (((left_operand_upper_bits ^ left_operand_with_hidden_bit_shifted) & 0x7fffffff) != 0 || left_operand != right_operand) {\n      if ((left_operand_upper_bits_shifted | left_operand) == 0) {\n        left_operand = right_operand;\n        left_operand_upper_bits = left_operand_with_hidden_bit_shifted;\n      }\n      return CONCAT44(left_operand_upper_bits,left_operand);\n    }\n    if (left_operand_upper_bits != left_operand_with_hidden_bit_shifted) {\n      return 0;\n    }\n    if (left_operand_upper_bits_shifted >> 0x15 == 0) {\n      condition_met = (left_operand & 0x80000000) != 0;\n      left_operand_with_hidden_bit_shifted = left_operand_upper_bits * 2 + (uint)condition_met;\n      if (CARRY4(left_operand_upper_bits,left_operand_upper_bits) || CARRY4(left_operand_upper_bits * 2,(uint)condition_met)) {\n        left_operand_with_hidden_bit_shifted = left_operand_with_hidden_bit_shifted | 0x80000000;\n      }\n      return CONCAT44(left_operand_with_hidden_bit_shifted,left_operand << 1);\n    }\n    if (left_operand_upper_bits_shifted < 0xffc00000) {\n      return CONCAT44(left_operand_upper_bits + 0x100000,left_operand);\n    }\n    left_operand_upper_bits = left_operand_upper_bits & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(left_operand_upper_bits | 0x7ff00000) << 0x20;\n  }\n  left_operand_upper_bits_shifted = left_operand_upper_bits_shifted >> 0x15;\n  right_operand_upper_bits = right_operand_upper_bits >> 0x15;\n  result_upper_bits = right_operand_upper_bits - left_operand_upper_bits_shifted;\n  condition_met = result_upper_bits != 0;\n  if (right_operand_upper_bits < left_operand_upper_bits_shifted) {\n    result_upper_bits = -result_upper_bits;\n  }\n  difference_in_bits = left_operand;\n  right_operand_with_hidden_bit = left_operand_upper_bits;\n  if (condition_met && left_operand_upper_bits_shifted <= right_operand_upper_bits) {\n    left_operand_upper_bits_shifted = left_operand_upper_bits_shifted + result_upper_bits;\n    difference_in_bits = right_operand;\n    right_operand_with_hidden_bit = left_operand_with_hidden_bit_shifted;\n    right_operand = left_operand;\n    left_operand_with_hidden_bit_shifted = left_operand_upper_bits;\n  }\n  if (0x36 < result_upper_bits) {\n    return CONCAT44(right_operand_with_hidden_bit,difference_in_bits);\n  }\n  left_operand_with_hidden_bit = right_operand_with_hidden_bit & 0xfffff | 0x100000;\n  if ((right_operand_with_hidden_bit & 0x80000000) != 0) {\n    condition_met = difference_in_bits != 0;\n    difference_in_bits = -difference_in_bits;\n    left_operand_with_hidden_bit = -left_operand_with_hidden_bit - (uint)condition_met;\n  }\n  right_operand_with_hidden_bit = left_operand_with_hidden_bit_shifted & 0xfffff | 0x100000;\n  if ((left_operand_with_hidden_bit_shifted & 0x80000000) != 0) {\n    condition_met = right_operand != 0;\n    right_operand = -right_operand;\n    right_operand_with_hidden_bit = -right_operand_with_hidden_bit - (uint)condition_met;\n  }\n  if (left_operand_upper_bits_shifted == result_upper_bits) {\n    right_operand_with_hidden_bit = right_operand_with_hidden_bit ^ 0x100000;\n    if (left_operand_upper_bits_shifted == 0) {\n      left_operand_with_hidden_bit = left_operand_with_hidden_bit ^ 0x100000;\n      left_operand_upper_bits_shifted = 1;\n    }\n    else {\n      result_upper_bits = result_upper_bits - 1;\n    }\n  }\n  left_operand_with_hidden_bit_shifted = -result_upper_bits + 0x20;\n  if ((int)result_upper_bits < 0x21) {\n    sum_sign_bit = right_operand << (left_operand_with_hidden_bit_shifted & 0xff);\n    right_operand = right_operand >> (result_upper_bits & 0xff);\n    sum_lower_bits = difference_in_bits + right_operand;\n    sum_upper_bits = right_operand_with_hidden_bit << (left_operand_with_hidden_bit_shifted & 0xff);\n    left_operand_with_hidden_bit_shifted = sum_lower_bits + sum_upper_bits;\n    left_operand_with_hidden_bit = left_operand_with_hidden_bit + CARRY4(difference_in_bits,right_operand) + ((int)right_operand_with_hidden_bit >> (result_upper_bits & 0xff)) +\n            (uint)CARRY4(sum_lower_bits,sum_upper_bits);\n  }\n  else {\n    sum_sign_bit = right_operand_with_hidden_bit << (-result_upper_bits + 0x40 & 0xff);\n    if (right_operand != 0) {\n      sum_sign_bit = sum_sign_bit | 2;\n    }\n    right_operand_with_hidden_bit = (int)right_operand_with_hidden_bit >> (result_upper_bits - 0x20 & 0xff);\n    left_operand_with_hidden_bit_shifted = difference_in_bits + right_operand_with_hidden_bit;\n    left_operand_with_hidden_bit = left_operand_with_hidden_bit + ((int)right_operand_with_hidden_bit >> 0x1f) + (uint)CARRY4(difference_in_bits,right_operand_with_hidden_bit);\n  }\n  left_operand_upper_bits = left_operand_with_hidden_bit & 0x80000000;\n  result_upper_bits = left_operand_with_hidden_bit;\n  if ((int)left_operand_with_hidden_bit < 0) {\n    condition_met = sum_sign_bit == 0;\n    sum_sign_bit = -sum_sign_bit;\n    result_upper_bits = -left_operand_with_hidden_bit_shifted;\n    left_operand_with_hidden_bit_shifted = -(uint)!condition_met - left_operand_with_hidden_bit_shifted;\n    result_upper_bits = -(uint)(condition_met <= result_upper_bits) - left_operand_with_hidden_bit;\n  }\n  if (0xfffff < result_upper_bits) {\n    difference_in_bits = left_operand_upper_bits_shifted - 1;\n    if (0x1fffff < result_upper_bits) {\n      difference_in_bits = result_upper_bits & 1;\n      result_upper_bits = result_upper_bits >> 1;\n      least_significant_bit = (byte)left_operand_with_hidden_bit_shifted;\n      left_operand_with_hidden_bit_shifted = (uint)(difference_in_bits != 0) << 0x1f | left_operand_with_hidden_bit_shifted >> 1;\n      sum_sign_bit = (uint)(least_significant_bit & 1) << 0x1f | sum_sign_bit >> 1;\n      difference_in_bits = left_operand_upper_bits_shifted;\n      if (0xffbfffff < left_operand_upper_bits_shifted * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    condition_met = 0x7fffffff < sum_sign_bit;\n    if (sum_sign_bit == 0x80000000) {\n      condition_met = (left_operand_with_hidden_bit_shifted & 1) != 0;\n    }\n    return CONCAT44(result_upper_bits + difference_in_bits * 0x100000 + (uint)CARRY4(left_operand_with_hidden_bit_shifted,(uint)condition_met) | left_operand_upper_bits,\n                    left_operand_with_hidden_bit_shifted + condition_met);\n  }\n  left_operand_and_right_operand_have_same_sign = (sum_sign_bit & 0x80000000) != 0;\n  sum_sign_bit = sum_sign_bit << 1;\n  difference_in_bits = left_operand_with_hidden_bit_shifted * 2;\n  condition_met = CARRY4(left_operand_with_hidden_bit_shifted,left_operand_with_hidden_bit_shifted);\n  left_operand_with_hidden_bit_shifted = left_operand_with_hidden_bit_shifted * 2 + (uint)left_operand_and_right_operand_have_same_sign;\n  result_upper_bits = result_upper_bits * 2 + (uint)(condition_met || CARRY4(difference_in_bits,(uint)left_operand_and_right_operand_have_same_sign));\n  difference_in_bits = left_operand_upper_bits_shifted - 2;\n  if ((result_upper_bits & 0x100000) != 0) goto LAB_08000278;\n  right_operand_with_hidden_bit = left_operand_with_hidden_bit_shifted;\n  left_operand_upper_bits_shifted = result_upper_bits;\n  if (result_upper_bits == 0) {\n    right_operand_with_hidden_bit = 0;\n    left_operand_upper_bits_shifted = left_operand_with_hidden_bit_shifted;\n  }\n  right_operand_with_hidden_bit_shifted = count_leading_zeroes(left_operand_upper_bits_shifted);\n  if (result_upper_bits == 0) {\n    right_operand_with_hidden_bit_shifted = right_operand_with_hidden_bit_shifted + 0x20;\n  }\n  result_upper_bits = right_operand_with_hidden_bit_shifted - 0xb;\n  carry_occurred = SBORROW4(result_upper_bits,0x20);\n  left_operand_with_hidden_bit_shifted = right_operand_with_hidden_bit_shifted - 0x2b;\n  condition_met = (int)left_operand_with_hidden_bit_shifted < 0;\n  left_operand_and_right_operand_have_same_sign = left_operand_with_hidden_bit_shifted == 0;\n  if ((int)result_upper_bits < 0x20) {\n    carry_occurred = SCARRY4(left_operand_with_hidden_bit_shifted,0xc);\n    right_operand_with_hidden_bit_shifted = right_operand_with_hidden_bit_shifted + -0x1f;\n    condition_met = right_operand_with_hidden_bit_shifted < 0;\n    left_operand_and_right_operand_have_same_sign = right_operand_with_hidden_bit_shifted == 0;\n    left_operand_with_hidden_bit_shifted = result_upper_bits;\n    if (!left_operand_and_right_operand_have_same_sign && condition_met == carry_occurred) {\n      right_operand_with_hidden_bit = left_operand_upper_bits_shifted << (result_upper_bits & 0xff);\n      left_operand_upper_bits_shifted = left_operand_upper_bits_shifted >> (0xcU - right_operand_with_hidden_bit_shifted & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (left_operand_and_right_operand_have_same_sign || condition_met != carry_occurred) {\n    sum_sign_bit = 0x20 - left_operand_with_hidden_bit_shifted;\n  }\n  left_operand_upper_bits_shifted = left_operand_upper_bits_shifted << (left_operand_with_hidden_bit_shifted & 0xff);\n  if (left_operand_and_right_operand_have_same_sign || condition_met != carry_occurred) {\n    left_operand_upper_bits_shifted = left_operand_upper_bits_shifted | right_operand_with_hidden_bit >> (sum_sign_bit & 0xff);\n  }\n  if (left_operand_and_right_operand_have_same_sign || condition_met != carry_occurred) {\n    right_operand_with_hidden_bit = right_operand_with_hidden_bit << (left_operand_with_hidden_bit_shifted & 0xff);\n  }\nLAB_080002f0:\n  if ((int)result_upper_bits <= (int)difference_in_bits) {\n    return CONCAT44(left_operand_upper_bits_shifted + (difference_in_bits - result_upper_bits) * 0x100000 | left_operand_upper_bits,right_operand_with_hidden_bit);\n  }\n  left_operand_with_hidden_bit_shifted = ~(difference_in_bits - result_upper_bits);\n  if ((int)left_operand_with_hidden_bit_shifted < 0x1f) {\n    right_operand_with_hidden_bit_shifted = left_operand_with_hidden_bit_shifted - 0x13;\n    if (right_operand_with_hidden_bit_shifted != 0 && right_operand_with_hidden_bit_shifted < 0 == SCARRY4(left_operand_with_hidden_bit_shifted - 0x1f,0xc)) {\n      return CONCAT44(left_operand_with_hidden_bit,right_operand_with_hidden_bit >> (0x20 - (0xcU - right_operand_with_hidden_bit_shifted) & 0xff) | left_operand_upper_bits_shifted << (0xcU - right_operand_with_hidden_bit_shifted & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    left_operand_with_hidden_bit_shifted = left_operand_with_hidden_bit_shifted + 1;\n    return CONCAT44(left_operand_upper_bits | left_operand_upper_bits_shifted >> (left_operand_with_hidden_bit_shifted & 0xff),\n                    right_operand_with_hidden_bit >> (left_operand_with_hidden_bit_shifted & 0xff) | left_operand_upper_bits_shifted << (0x20 - left_operand_with_hidden_bit_shifted & 0xff));\n  }\n  return CONCAT44(left_operand_with_hidden_bit,left_operand_upper_bits_shifted >> (left_operand_with_hidden_bit_shifted - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000168",
            "calling": [
                "FUN_08005c70",
                "FUN_080070b0",
                "FUN_08006c0c",
                "FUN_0800411c",
                "FUN_08006228",
                "FUN_08006070",
                "FUN_08006d68"
            ],
            "imported": false,
            "current_name": "calculate_double_precision_integer_08000168"
        },
        "FUN_080072e0": {
            "renaming": {
                "FUN_080072e0": "do_nothing_080072e0"
            },
            "code": "\nvoid do_nothing_080072e0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072e0",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080072e0"
        },
        "FUN_08001014": {
            "renaming": {
                "FUN_08001014": "check_input_not_null_08001014",
                "in_ZR": "input_char",
                "FUN_08001004": "get_input_char"
            },
            "code": "bool check_input_not_null_08001014(void)\n{\n  char input_char;\n  input_char = get_input_char();\n  return input_char != '\\0';\n}",
            "called": [
                "FUN_08001004"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001014",
            "calling": [
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "check_input_not_null_08001014"
        },
        "FUN_080071c0": {
            "renaming": {
                "FUN_080071c0": "calculate_result_080071c0",
                "param_1": "first_value",
                "param_2": "second_value",
                "param_3": "exponent",
                "param_4": "parameter",
                "uVar1": "shifted_second_value",
                "iVar2": "shifted_exponent",
                "uVar3": "parameter1",
                "uVar4": "parameter2",
                "uVar5": "first_value_high_bits",
                "uVar6": "result"
            },
            "code": "unsigned long long calculate_result_080071c0(uint32_t first_value, uint32_t second_value, int exponent, uint32_t parameter) {\n    unsigned long long result = ((unsigned long long)second_value << 32) | first_value;\n    uint32_t shifted_second_value = (second_value << 1) >> 21;\n    if (shifted_second_value == 0) {\n        if ((second_value & 0x7fffffff | first_value) == 0) {\n            return result;\n        }\n        result = calculate_result_080071c0_with_parameter(first_value, second_value, parameter);\n        unsigned int parameter1 = 0x08007280;\n        unsigned int parameter2 = 0x08007284;\n        if (exponent < 0x08007294) {\n            goto LAB_0800722e;\n        }\n        shifted_second_value = ((((unsigned int)(result >> 32)) << 1) >> 21) - 54;\n    } else if (shifted_second_value == 0x7ff) {\n        return calculate_result_080071c0_special_case(first_value, second_value, parameter);\n    }\n    unsigned int first_value_high_bits = (unsigned int)(result >> 32);\n    int shifted_exponent = shifted_second_value + exponent;\n    if (shifted_exponent < 0x7ff) {\n        if (shifted_exponent > 0) {\n            return result & 0xffffffff | ((unsigned long long)(first_value_high_bits & 0x800fffff | shifted_exponent * 0x100000) << 32);\n        }\n        if ((shifted_exponent + 53 < 0) == __builtin_sub_overflow(shifted_exponent, 53, &amp;shifted_exponent)) {\n            result = result & 0xffffffff | ((unsigned long long)(first_value_high_bits & 0x800fffff | (shifted_exponent + 54) * 0x100000) << 32);\n            parameter1 = 0;\n            parameter2 = 0x08007298;\n            goto LAB_0800722e;\n        }\n        if (exponent < 49969) {\n            result = do_nothing_0800729c(0x08007280, 0x08007284, (int)result, first_value_high_bits);\n            parameter1 = 0x08007280;\n            parameter2 = 0x08007284;\n            goto LAB_0800722e;\n        }\n    }\n    result = do_nothing_0800729c(0x08007288, 0x0800728c, (int)result, first_value_high_bits);\n    parameter1 = 0x08007288;\n    parameter2 = 0x0800728c;\nLAB_0800722e:\n    result = calculate_result_080071c0_with_parameter((int)result, (int)(result >> 32), parameter1, parameter2);\n    return result;\n}",
            "called": [
                "FUN_080004d0",
                "FUN_0800016c",
                "FUN_0800729c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080071c0",
            "calling": [
                "FUN_08006228"
            ],
            "imported": false,
            "current_name": "calculate_result_080071c0"
        },
        "FUN_08001258": {
            "renaming": {
                "FUN_08001258": "do_nothing_08001258"
            },
            "code": "\nvoid do_nothing_08001258(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001258",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08001258"
        },
        "FUN_08005614": {
            "renaming": {
                "FUN_08005614": "find_char_in_string_08005614",
                "param_1": "str",
                "param_2": "target",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "current_char"
            },
            "code": "char* find_char_in_string_08005614(char* str, char target, int length) {\n  char* current_char = str;\n  while (current_char != str + length) {\n    if (*current_char == target) {\n      return current_char;\n    }\n    current_char++;\n  }\n  return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005614",
            "calling": [
                "FUN_080053d4",
                "FUN_080050fc"
            ],
            "imported": false,
            "current_name": "find_char_in_string_08005614"
        },
        "FUN_08000724": {
            "renaming": {
                "FUN_08000724": "calculate_double_precision_value_08000724",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "temp_var1",
                "uVar2": "temp_var2",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4",
                "uVar5": "temp_var5",
                "uVar6": "temp_var6",
                "uVar7": "temp_var7",
                "iVar8": "temp_var8",
                "uVar9": "temp_var9",
                "unaff_r5": "temp_var10",
                "uVar10": "temp_var11",
                "uVar11": "temp_var12",
                "uVar12": "temp_var13",
                "uVar13": "temp_var14",
                "bVar14": "temp_bool1",
                "bVar15": "temp_bool2",
                "bVar16": "temp_bool3",
                "uVar17": "double_precision_value"
            },
            "code": "\nulonglong calculate_double_precision_value_08000724(undefined4 first_param,uint second_param,uint third_param,uint fourth_param)\n\n{\n  uint temp_var1;\n  uint temp_var2;\n  uint temp_var3;\n  uint temp_var4;\n  uint temp_var5;\n  uint temp_var6;\n  uint temp_var7;\n  int temp_var8;\n  uint temp_var9;\n  uint temp_var10;\n  uint temp_var11;\n  uint temp_var12;\n  uint temp_var13;\n  uint temp_var14;\n  bool temp_bool1;\n  bool temp_bool2;\n  bool temp_bool3;\n  ulonglong double_precision_value;\n  \n  double_precision_value = CONCAT44(second_param,first_param);\n  temp_var14 = 0x7ff;\n  temp_var7 = second_param >> 0x14 & 0x7ff;\n  temp_bool1 = temp_var7 == 0;\n  if (!temp_bool1) {\n    temp_var10 = fourth_param >> 0x14 & 0x7ff;\n    temp_bool1 = temp_var10 == 0;\n  }\n  if (!temp_bool1) {\n    temp_bool1 = temp_var7 == 0x7ff;\n  }\n  if (!temp_bool1) {\n    temp_bool1 = temp_var10 == 0x7ff;\n  }\n  if (temp_bool1) {\n    double_precision_value = FUN_08000892();\n  }\n  temp_var9 = (uint)(double_precision_value >> 0x20);\n  temp_var12 = (uint)double_precision_value;\n  temp_var8 = temp_var7 - temp_var10;\n  if ((third_param | fourth_param << 0xc) == 0) {\n    temp_var7 = (temp_var9 ^ fourth_param) & 0x80000000 | temp_var9 & 0xfffff;\n    temp_bool3 = SCARRY4(temp_var8,temp_var14 >> 1);\n    temp_var9 = temp_var8 + (temp_var14 >> 1);\n    temp_bool1 = (int)temp_var9 < 0;\n    temp_bool2 = temp_var9 == 0;\n    if (!temp_bool2 && temp_bool1 == temp_bool3) {\n      temp_bool3 = SBORROW4(temp_var14,temp_var9);\n      temp_bool1 = (int)(temp_var14 - temp_var9) < 0;\n      temp_bool2 = temp_var14 == temp_var9;\n    }\n    if (!temp_bool2 && temp_bool1 == temp_bool3) {\n      temp_var7 = temp_var7 | temp_var9 * 0x100000;\n    }\n    if (!temp_bool2 && temp_bool1 == temp_bool3) {\n      return double_precision_value & 0xffffffff | (ulonglong)temp_var7 << 0x20;\n    }\n    temp_var7 = temp_var7 | 0x100000;\n    temp_var14 = 0;\n    temp_bool2 = SBORROW4(temp_var9,1);\n    temp_var9 = temp_var9 - 1;\n    temp_bool1 = temp_var9 == 0;\n    temp_var3 = temp_var9;\n  }\n  else {\n    temp_var3 = (fourth_param << 0xc) >> 4 | 0x10000000 | third_param >> 0x18;\n    temp_var14 = third_param << 8;\n    temp_var11 = (temp_var9 << 0xc) >> 4 | 0x10000000 | temp_var12 >> 0x18;\n    temp_var12 = temp_var12 * 0x100;\n    temp_var7 = (temp_var9 ^ fourth_param) & 0x80000000;\n    temp_bool1 = temp_var3 <= temp_var11;\n    if (temp_var11 == temp_var3) {\n      temp_bool1 = temp_var14 <= temp_var12;\n    }\n    temp_var8 = temp_var8 + (uint)temp_bool1;\n    temp_var9 = temp_var8 + 0x3fd;\n    if (temp_bool1 == false) {\n      temp_var3 = temp_var3 >> 1;\n      temp_var14 = (uint)((third_param >> 0x18 & 1) != 0) << 0x1f | temp_var14 >> 1;\n    }\n    temp_var13 = temp_var12 - temp_var14;\n    temp_var11 = (temp_var11 - temp_var3) - (uint)(temp_var12 < temp_var14);\n    temp_var4 = temp_var3 >> 1;\n    temp_var1 = (uint)((temp_var3 & 1) != 0) << 0x1f | temp_var14 >> 1;\n    temp_var12 = 0x100000;\n    temp_var3 = 0x80000;\n    while( true ) {\n      temp_bool1 = temp_var1 <= temp_var13;\n      if (temp_var4 < temp_var11 || temp_var11 - temp_var4 < (uint)temp_bool1) {\n        temp_var13 = temp_var13 - temp_var1;\n        temp_var12 = temp_var12 | temp_var3;\n        temp_var11 = (temp_var11 - temp_var4) - (uint)!temp_bool1;\n      }\n      temp_var5 = temp_var4 >> 1;\n      temp_var1 = (uint)((temp_var4 & 1) != 0) << 0x1f | temp_var1 >> 1;\n      temp_bool2 = temp_var1 <= temp_var13;\n      temp_bool1 = temp_var11 - temp_var5 < (uint)temp_bool2;\n      temp_var14 = temp_var11;\n      if (temp_var5 < temp_var11 || temp_bool1) {\n        temp_var13 = temp_var13 - temp_var1;\n        temp_var14 = (temp_var11 - temp_var5) - (uint)!temp_bool2;\n      }\n      if (temp_var5 < temp_var11 || temp_bool1) {\n        temp_var12 = temp_var12 | temp_var3 >> 1;\n      }\n      temp_var11 = temp_var4 >> 2;\n      temp_var2 = (uint)((temp_var5 & 1) != 0) << 0x1f | temp_var1 >> 1;\n      temp_bool2 = temp_var2 <= temp_var13;\n      temp_bool1 = temp_var14 - temp_var11 < (uint)temp_bool2;\n      temp_var5 = temp_var14;\n      if (temp_var11 < temp_var14 || temp_bool1) {\n        temp_var13 = temp_var13 - temp_var2;\n        temp_var5 = (temp_var14 - temp_var11) - (uint)!temp_bool2;\n      }\n      if (temp_var11 < temp_var14 || temp_bool1) {\n        temp_var12 = temp_var12 | temp_var3 >> 2;\n      }\n      temp_var6 = temp_var4 >> 3;\n      temp_var1 = (uint)((temp_var11 & 1) != 0) << 0x1f | temp_var2 >> 1;\n      temp_bool2 = temp_var1 <= temp_var13;\n      temp_bool1 = temp_var5 - temp_var6 < (uint)temp_bool2;\n      temp_var11 = temp_var5;\n      if (temp_var6 < temp_var5 || temp_bool1) {\n        temp_var13 = temp_var13 - temp_var1;\n        temp_var11 = (temp_var5 - temp_var6) - (uint)!temp_bool2;\n      }\n      if (temp_var6 < temp_var5 || temp_bool1) {\n        temp_var12 = temp_var12 | temp_var3 >> 3;\n      }\n      temp_var14 = temp_var11 | temp_var13;\n      if (temp_var14 == 0) break;\n      temp_var11 = temp_var11 << 4 | temp_var13 >> 0x1c;\n      temp_var13 = temp_var13 << 4;\n      temp_var4 = temp_var4 & 0xfffffff8 | temp_var1 >> 0x1d;\n      temp_var1 = (temp_var2 >> 1) << 3;\n      temp_var3 = temp_var3 >> 4;\n      if (temp_var3 == 0) {\n        temp_var6 = temp_var4;\n        if ((temp_var7 & 0x100000) != 0) goto LAB_08000842;\n        temp_var7 = temp_var7 | temp_var12;\n        temp_var12 = 0;\n        temp_var3 = 0x80000000;\n      }\n    }\n    if ((temp_var7 & 0x100000) == 0) {\n      temp_var7 = temp_var7 | temp_var12;\n      temp_var12 = 0;\n    }\nLAB_08000842:\n    temp_bool3 = 0xfc < temp_var9;\n    temp_bool2 = SBORROW4(temp_var9,0xfd);\n    temp_var4 = temp_var8 + 0x300;\n    temp_bool1 = temp_var4 == 0;\n    temp_var3 = temp_var4;\n    if (temp_bool3 && !temp_bool1) {\n      temp_bool3 = 0x6ff < temp_var4;\n      temp_bool2 = SBORROW4(temp_var4,0x700);\n      temp_var3 = temp_var8 - 0x400;\n      temp_bool1 = temp_var4 == 0x700;\n    }\n    if (!temp_bool3 || temp_bool1) {\n      temp_bool1 = temp_var6 <= temp_var11;\n      if (temp_var11 == temp_var6) {\n        temp_bool1 = temp_var1 <= temp_var13;\n      }\n      if (temp_var11 == temp_var6 && temp_var13 == temp_var1) {\n        temp_bool1 = (temp_var12 & 1) != 0;\n      }\n      return CONCAT44(temp_var7 + temp_var9 * 0x100000 + (uint)CARRY4(temp_var12,(uint)temp_bool1),temp_var12 + temp_bool1);\n    }\n  }\n  if (!temp_bool1 && (int)temp_var3 < 0 == temp_bool2) {\n    return (ulonglong)(temp_var7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  temp_bool3 = SCARRY4(temp_var9,0x36);\n  temp_bool1 = (int)(temp_var9 + 0x36) < 0;\n  temp_bool2 = temp_var9 == 0xffffffca;\n  if (temp_bool2 || temp_bool1 != temp_bool3) {\n    temp_var12 = 0;\n  }\n  if (temp_bool2 || temp_bool1 != temp_bool3) {\n    temp_var7 = temp_var7 & 0x80000000;\n  }\n  if (temp_bool2 || temp_bool1 != temp_bool3) {\n    return CONCAT44(temp_var7,temp_var12);\n  }\n  temp_var3 = -temp_var9;\n  temp_var11 = temp_var3 - 0x20;\n  if (0x1f < (int)temp_var3) {\n    temp_var3 = temp_var12 >> (temp_var11 & 0xff) | temp_var7 << (0x20 - temp_var11 & 0xff);\n    temp_var9 = (temp_var7 >> (temp_var11 & 0xff) & ~((temp_var7 & 0x80000000) >> (temp_var11 & 0xff))) -\n            ((int)temp_var3 >> 0x1f);\n    if ((temp_var14 | temp_var12 << (0x20 - temp_var11 & 0xff) | temp_var3 << 1) == 0) {\n      temp_var9 = temp_var9 & ~(temp_var3 >> 0x1f);\n    }\n    return CONCAT44(temp_var7,temp_var9) & 0x80000000ffffffff;\n  }\n  temp_var8 = temp_var3 - 0x14;\n  if (temp_var8 != 0 && temp_var8 < 0 == SCARRY4(temp_var11,0xc)) {\n    temp_var9 = 0xc - temp_var8;\n    temp_var3 = temp_var12 << (temp_var9 & 0xff);\n    temp_var12 = temp_var12 >> (0x20 - temp_var9 & 0xff) | temp_var7 << (temp_var9 & 0xff);\n    temp_var9 = temp_var12 + -((int)temp_var3 >> 0x1f);\n    if ((temp_var14 | temp_var3 << 1) == 0) {\n      temp_var9 = temp_var9 & ~(temp_var3 >> 0x1f);\n    }\n    return CONCAT44((temp_var7 & 0x80000000) + (uint)CARRY4(temp_var12,-((int)temp_var3 >> 0x1f)),temp_var9);\n  }\n  temp_var11 = temp_var12 << (temp_var9 + 0x20 & 0xff);\n  temp_var12 = temp_var12 >> (temp_var3 & 0xff) | temp_var7 << (temp_var9 + 0x20 & 0xff);\n  temp_var9 = temp_var12 + -((int)temp_var11 >> 0x1f);\n  if ((temp_var14 | temp_var11 << 1) == 0) {\n    temp_var9 = temp_var9 & ~(temp_var11 >> 0x1f);\n  }\n  return CONCAT44((temp_var7 & 0x80000000) +\n                  ((temp_var7 & 0x7fffffff) >> (temp_var3 & 0xff)) +\n                  (uint)CARRY4(temp_var12,-((int)temp_var11 >> 0x1f)),temp_var9);\n}\n\n",
            "called": [
                "FUN_08000892"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000724",
            "calling": [
                "FUN_08005900",
                "FUN_08003330",
                "FUN_08005c70",
                "FUN_08006c0c",
                "FUN_08005bc8",
                "FUN_08006228",
                "FUN_08006070",
                "FUN_08006d68"
            ],
            "imported": false,
            "current_name": "calculate_double_precision_value_08000724"
        },
        "FUN_080070a4": {
            "renaming": {
                "FUN_080070a4": "shift_left_32_bits_080070a4",
                "DAT_080070ac": "value"
            },
            "code": "unsigned long long shift_left_32_bits_080070a4(unsigned long long DAT_080070ac) {\n    return DAT_080070ac << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080070a4",
            "calling": [
                "FUN_08005854",
                "FUN_08006228"
            ],
            "imported": false,
            "current_name": "shift_left_32_bits_080070a4"
        },
        "FUN_0800407c": {
            "renaming": {
                "FUN_0800407c": "read_input_and_call_func_0800407c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "output1",
                "param_4": "output2",
                "iVar1": "success",
                "local_14": "result",
                "PTR_DAT_080040b4": "operation_data"
            },
            "code": "int read_input_and_call_func_0800407c(int input1, int input2, int output1, int output2){\n    int success;\n    int result[1] = {0};\n    success = perform_operation(PTR_DAT_080040b4, input1, input2, 1, result, 1, 200);\n    if (success != 0) {\n        write_output(output1, output2);\n    }\n    return result[0];\n}",
            "called": [
                "FUN_08001938",
                "FUN_08004490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800407c",
            "calling": [
                "FUN_08002cb0",
                "FUN_08002ad0",
                "FUN_08002d88",
                "FUN_080040e8"
            ],
            "imported": false,
            "current_name": "read_input_and_call_func_0800407c"
        },
        "FUN_08001938": {
            "renaming": {
                "FUN_08001938": "FUNC_08001938"
            },
            "code": "\nundefined4\nFUNC_08001938(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n            undefined *param_5,ushort param_6,uint param_7)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int iVar3;\n  uint *puVar4;\n  uint uVar5;\n  undefined *puVar6;\n  bool bVar7;\n  \n  if (*(char *)((int)param_1 + 0x35) != ' ') {\n    return 2;\n  }\n  if (param_5 == (undefined *)0x0) {\n    return 1;\n  }\n  if (param_6 == 0) {\n    return 1;\n  }\n  iVar2 = FUN_0800115c();\n  while (puVar4 = *param_1, (~puVar4[6] & 2) == 0) {\n    iVar3 = FUN_0800115c();\n    if (10000 < (uint)(iVar3 - iVar2)) {\n      *(undefined *)(param_1 + 0xd) = 0;\n      *(undefined *)((int)param_1 + 0x35) = 0x20;\n      return 2;\n    }\n  }\n  if (*(char *)(param_1 + 0xd) == '\\x01') {\n    return 2;\n  }\n  uVar5 = *puVar4;\n  *(undefined *)(param_1 + 0xd) = 1;\n  *puVar4 = uVar5 & 0xfffff7ff;\n  *(undefined *)((int)param_1 + 0x35) = 0x22;\n  *(undefined *)((int)param_1 + 0x36) = 0x40;\n  param_1[0xe] = (uint *)0x0;\n  iVar2 = FUN_080015e8(param_1,param_2,param_3,param_4,param_7);\n  if (iVar2 != 0) {\n    *(undefined *)(param_1 + 0xd) = 0;\n    if (param_1[0xe] == (uint *)0x4) {\n      return 1;\n    }\n    return 3;\n  }\n  puVar4 = *param_1;\n  uVar5 = *puVar4;\n  if (param_6 == 1) {\n    *puVar4 = uVar5 & 0xfffffbff;\n    disableIRQinterrupts();\n    **param_1 = **param_1 | 0x200;\n    enableIRQinterrupts();\n    iVar2 = FUN_080016f4(param_1,param_7);\n    if (iVar2 == 0) {\n      *param_5 = (char)(*param_1)[4];\nLAB_08001ab8:\n      *(undefined *)((int)param_1 + 0x35) = 0x20;\n      *(undefined *)((int)param_1 + 0x36) = 0;\n      *(undefined *)(param_1 + 0xd) = 0;\n      return 0;\n    }\nLAB_08001a18:\n    if (param_1[0xe] != (uint *)0x20) {\n      return 1;\n    }\n    return 3;\n  }\n  if (param_6 == 2) {\n    *puVar4 = uVar5 | 0x800;\n    disableIRQinterrupts();\n    **param_1 = **param_1 & 0xfffffbff;\n    enableIRQinterrupts();\n  }\n  else {\n    *puVar4 = uVar5 | 0x400;\n    while (3 < param_6) {\n      iVar2 = FUN_080016f4(param_1,param_7);\n      if (iVar2 != 0) goto LAB_08001a18;\n      *param_5 = (char)(*param_1)[4];\n      puVar4 = *param_1;\n      bVar7 = (int)(puVar4[5] << 0x1d) < 0;\n      if (bVar7) {\n        puVar4 = (uint *)puVar4[4];\n        puVar6 = param_5 + 2;\n        param_6 = param_6 - 2;\n      }\n      else {\n        puVar6 = param_5 + 1;\n        param_6 = param_6 - 1;\n      }\n      puVar1 = param_5 + 1;\n      param_5 = puVar6;\n      if (bVar7) {\n        *puVar1 = (char)puVar4;\n      }\n    }\n    if (param_6 != 2) {\n      iVar2 = FUN_0800115c();\n      do {\n        puVar4 = *param_1;\n        do {\n          if ((int)(puVar4[5] << 0x1d) < 0) {\n            *puVar4 = *puVar4 & 0xfffffbff;\n            disableIRQinterrupts();\n            *param_5 = (char)(*param_1)[4];\n            iVar2 = FUN_0800115c();\n            goto LAB_08001b3a;\n          }\n        } while (param_7 == 0xffffffff);\n      } while ((param_7 != 0) && (iVar3 = FUN_0800115c(), (uint)(iVar3 - iVar2) <= param_7));\n      goto LAB_08001afa;\n    }\n  }\n  iVar2 = FUN_0800115c();\n  do {\n    do {\n      if ((int)((*param_1)[5] << 0x1d) < 0) {\n        disableIRQinterrupts();\n        puVar4 = *param_1;\n        *puVar4 = *puVar4 | 0x200;\n        *param_5 = (char)puVar4[4];\n        enableIRQinterrupts();\n        param_5[1] = (char)(*param_1)[4];\n        goto LAB_08001ab8;\n      }\n    } while (param_7 == 0xffffffff);\n  } while ((param_7 != 0) && (iVar3 = FUN_0800115c(), (uint)(iVar3 - iVar2) <= param_7));\nLAB_08001afa:\n  *(undefined *)((int)param_1 + 0x35) = 0x20;\n  *(undefined *)(param_1 + 0xd) = 0;\n  return 3;\nLAB_08001b3a:\n  do {\n    puVar4 = *param_1;\n    do {\n      if ((int)(puVar4[5] << 0x1d) < 0) {\n        *puVar4 = *puVar4 | 0x200;\n        param_5[1] = (char)puVar4[4];\n        enableIRQinterrupts();\n        param_5[2] = (char)(*param_1)[4];\n        goto LAB_08001ab8;\n      }\n    } while (param_7 == 0xffffffff);\n  } while ((param_7 != 0) && (iVar3 = FUN_0800115c(), (uint)(iVar3 - iVar2) <= param_7));\n  goto LAB_08001afa;\n}\n\n",
            "called": [
                "FUN_080015e8",
                "FUN_080016f4",
                "FUN_0800115c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001938",
            "calling": [
                "FUN_080040b8",
                "FUN_0800407c"
            ],
            "imported": false,
            "current_name": "FUNC_08001938"
        },
        "FUN_0800411c": {
            "renaming": {
                "FUN_0800411c": "improved_code_0800411c",
                "puVar1": "pointer_1",
                "bVar2": "byte_2",
                "lVar3": "long_3",
                "uVar4": "uint_4",
                "puVar5": "pointer_5",
                "puVar6": "pointer_6",
                "puVar7": "pointer_7",
                "uVar8": "uint_8",
                "uVar9": "uint_9",
                "uVar10": "uint_10",
                "uVar11": "uint_11",
                "iVar12": "int_12",
                "uVar13": "uint_13",
                "uVar14": "uint_14",
                "uVar15": "uint_15",
                "uVar16": "uint_16",
                "uVar17": "uint_17",
                "puVar18": "pointer_18",
                "iVar19": "int_19",
                "iVar20": "int_20",
                "bVar21": "bool_21",
                "uVar22": "uint_22"
            },
            "code": "\nvoid improved_code_0800411c(void)\n\n{\n  undefined4 *pointer_1;\n  byte byte_2;\n  longlong long_3;\n  uint uint_4;\n  undefined *pointer_5;\n  undefined *pointer_6;\n  undefined *pointer_7;\n  uint uint_8;\n  uint uint_9;\n  undefined4 uint_10;\n  undefined4 uint_11;\n  int int_12;\n  undefined4 uint_13;\n  uint uint_14;\n  uint uint_15;\n  uint uint_16;\n  uint uint_17;\n  undefined4 *pointer_18;\n  undefined4 unaff_r4;\n  int int_19;\n  int int_20;\n  bool bool_21;\n  undefined8 uint_22;\n  \n  int_12 = thunk_FUN_0800115c();\n  pointer_5 = PTR_DAT_08004188;\n  if (1 < (uint)(int_12 - *(int *)PTR_DAT_08004188)) {\n    uint_13 = thunk_FUN_0800115c();\n    *(undefined4 *)pointer_5 = uint_13;\n    FUN_08002f28();\n  }\n  int_12 = thunk_FUN_0800115c();\n  pointer_5 = PTR_DAT_0800418c;\n  if (2 < (uint)(int_12 - *(int *)PTR_DAT_0800418c)) {\n    uint_13 = thunk_FUN_0800115c();\n    *(undefined4 *)pointer_5 = uint_13;\n    FUN_08004a84();\n  }\n  int_12 = thunk_FUN_0800115c();\n  pointer_5 = PTR_DAT_08004190;\n  if (3 < (uint)(int_12 - *(int *)PTR_DAT_08004190)) {\n    uint_13 = thunk_FUN_0800115c();\n    *(undefined4 *)pointer_5 = uint_13;\n    FUN_08004348();\n    FUN_08004384();\n    FUN_080043f0();\n    FUN_08004410();\n    FUN_08004434();\n    FUN_080043bc();\n    FUN_08004458();\n  }\n  pointer_6 = PTR_DAT_08003254;\n  pointer_5 = PTR_DAT_08003250;\n  if ((*PTR_DAT_08003250 != '\\0') && (*PTR_DAT_08003254 != '\\0')) {\n    int_20 = *(int *)PTR_DAT_0800325c + (uint)*(ushort *)(PTR_DAT_08003258 + 10) * -0x100;\n    uint_14 = (uint)((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 0xc) * (longlong)int_20) >>\n             0x17 | (int)((ulonglong)\n                          ((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 0xc) *\n                          (longlong)int_20) >> 0x20) << 9;\n    uint_15 = (uint)((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 8) * (longlong)int_20 >> 7);\n    uint_16 = uint_15 + (uint)*(ushort *)(PTR_DAT_08003258 + 4) * 0x10000;\n    uint_8 = (uint)((ulonglong)\n                   ((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 6) * (longlong)int_20) >> 8)\n    ;\n    int_12 = uint_14 + 2000;\n    uint_9 = uint_8 + (uint)*(ushort *)(PTR_DAT_08003258 + 2) * 0x8000;\n    bool_21 = (int)uint_14 < 0;\n    if (1999 < int_12) {\n      uint_14 = 0;\n    }\n    uint_4 = uint_14;\n    if (bool_21 != SBORROW4(int_12,2000)) {\n      int_19 = uint_14 * uint_14 * 5;\n      uint_14 = int_19 >> 2;\n      uint_4 = int_19 >> 1;\n    }\n    uint_17 = uint_16 - uint_4;\n    long_3 = (ulonglong)(uint_9 - uint_14) * (ulonglong)*(uint *)PTR_DAT_08003260;\n    int_19 = *(uint *)PTR_DAT_08003260 *\n             ((((int)((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 6) * (longlong)int_20 >>\n                     0x28) + (uint)CARRY4(uint_8,(uint)*(ushort *)(PTR_DAT_08003258 + 2) * 0x8000)) -\n              ((int)uint_14 >> 0x1f)) - (uint)(uint_9 < uint_14)) + (int)((ulonglong)long_3 >> 0x20);\n    uint_8 = (uint)long_3 >> 0x15 | int_19 * 0x800;\n    uint_13 = FUN_08000c44(uint_8 - uint_17 >> 0xf |\n                          (((int_19 >> 0x15) -\n                           ((((int)((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 8) *\n                                    (longlong)int_20 >> 0x27) +\n                             (uint)CARRY4(uint_15,(uint)*(ushort *)(PTR_DAT_08003258 + 4) * 0x10000))\n                            - ((int)uint_4 >> 0x1f)) - (uint)(uint_16 < uint_4))) -\n                          (uint)(uint_8 < uint_17)) * 0x20000);\n    uint_10 = FUN_08000e54(uint_13,DAT_08003264);\n    *(undefined4 *)PTR_DAT_08003268 = uint_10;\n    uint_13 = FUN_08000c44(int_12);\n    uint_11 = FUN_08000e54(uint_13,DAT_08003264);\n    uint_13 = DAT_08003270;\n    *(undefined4 *)PTR_DAT_0800326c = uint_11;\n    FUN_08000e54(uint_10,uint_13);\n    uint_22 = FUN_08000428();\n    uint_22 = FUN_08005900((int)uint_22,(int)((ulonglong)uint_22 >> 0x20),DAT_08003240,DAT_08003244);\n    uint_22 = FUN_08000168(0,DAT_08003274,(int)uint_22,(int)((ulonglong)uint_22 >> 0x20));\n    FUN_080004d0((int)uint_22,(int)((ulonglong)uint_22 >> 0x20),DAT_08003248,DAT_0800324c);\n    uint_13 = FUN_08000a30();\n    pointer_7 = PTR_DAT_08003278;\n    *(undefined4 *)PTR_DAT_0800327c = uint_13;\n    uint_10 = 0;\n    pointer_18 = (undefined4 *)pointer_7;\n    do {\n      pointer_1 = pointer_18 + 1;\n      *pointer_18 = *pointer_1;\n      uint_10 = FUN_08000adc(uint_10);\n      pointer_18 = pointer_1;\n    } while ((undefined4 *)(pointer_7 + 0x4c) != pointer_1);\n    *(undefined4 *)(pointer_7 + 0x4c) = uint_13;\n    uint_13 = FUN_08000adc(uint_10,uint_13);\n    uint_13 = FUN_08000e54(uint_13,DAT_08003280);\n    *(undefined4 *)PTR_DAT_08003284 = uint_13;\n    int_12 = FUN_08001078();\n    pointer_7 = PTR_DAT_0800328c;\n    *(int *)PTR_DAT_08003288 = int_12 * 100;\n    byte_2 = *pointer_7;\n    *pointer_5 = 0;\n    *pointer_6 = 0;\n    FUN_0800403c(0xee,byte_2 + 0x50,1);\n    uint_13 = thunk_FUN_0800115c();\n    *(undefined4 *)PTR_DAT_08003290 = uint_13;\n  }\n  int_12 = thunk_FUN_0800115c();\n  pointer_6 = PTR_DAT_08003294;\n  if (((10 < (uint)(int_12 - *(int *)PTR_DAT_08003290)) && (*pointer_5 == '\\0')) &&\n     (*PTR_DAT_08003254 == '\\0')) {\n    uint_13 = FUN_08003034();\n    pointer_7 = PTR_DAT_0800325c;\n    *pointer_5 = 1;\n    *(undefined4 *)pointer_7 = uint_13;\n    FUN_0800403c(0xee,(byte)*PTR_DAT_0800328c + 0x40,1,0,unaff_r4);\n    uint_13 = thunk_FUN_0800115c();\n    *(undefined4 *)pointer_6 = uint_13;\n  }\n  int_12 = thunk_FUN_0800115c();\n  pointer_7 = PTR_DAT_08003254;\n  if (((10 < (uint)(int_12 - *(int *)pointer_6)) && (*pointer_5 != '\\0')) && (*PTR_DAT_08003254 == '\\0'))\n  {\n    uint_13 = FUN_08003034();\n    *(undefined4 *)PTR_DAT_08003260 = uint_13;\n    *pointer_7 = 1;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08000c44",
                "FUN_08005900",
                "FUN_08003034",
                "FUN_08004348",
                "FUN_08002f28",
                "FUN_080043bc",
                "FUN_08004410",
                "thunk_FUN_0800115c",
                "FUN_0800403c",
                "FUN_08000a30",
                "FUN_08001078",
                "FUN_080043f0",
                "FUN_080004d0",
                "FUN_08000428",
                "FUN_08004434",
                "FUN_08000adc",
                "FUN_08004384",
                "FUN_08004a84",
                "FUN_08000168",
                "FUN_08000e54",
                "FUN_08004458"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800411c",
            "calling": [
                "FUN_080041ae"
            ],
            "imported": false,
            "current_name": "improved_code_0800411c"
        },
        "FUN_080022d0": {
            "renaming": {
                "FUN_080022d0": "update_data_struct_080022d0",
                "param_1": "struct_address",
                "param_2": "data_array",
                "uVar1": "updated_flag",
                "uVar2": "old_value",
                "uVar3": "new_value"
            },
            "code": "void update_data_struct_080022d0(int struct_address, uint *data_array)\n{\n  uint updated_flag = *(uint *)(struct_address + 0x20) & 0xfffffeff;\n  uint old_value = *(uint *)(struct_address + 4);\n  uint new_value = *data_array;\n  updated_flag = (updated_flag & 0xfffffdff) | (data_array[2] << 8);\n  if (struct_address == DAT_08002320) {\n    updated_flag = (updated_flag & 0xfffff7ff) | (data_array[3] << 8);\n    old_value = (old_value & 0xffffcfff) | ((data_array[5] | data_array[6]) << 4);\n  }\n  *(uint *)(struct_address + 4) = old_value;\n  *(uint *)(struct_address + 0x1c) = (*(uint *)(struct_address + 0x1c) & 0xffffff8c) | new_value;\n  *(uint *)(struct_address + 0x3c) = data_array[1];\n  *(uint *)(struct_address + 0x20) = updated_flag;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080022d0",
            "calling": [
                "FUN_0800245c"
            ],
            "imported": false,
            "current_name": "update_data_struct_080022d0"
        },
        "FUN_080010c4": {
            "renaming": {
                "FUN_080010c4": "calculate_shifted_value_080010c4",
                "param_1": "input_value",
                "uVar1": "shift_amount",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "uint calculate_shifted_value_080010c4(uint input_value) {\n  uint shifted_value;\n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  uint shift_amount = 0x9e - ((input_value << 1) >> 0x18);\n  if (shift_amount >= 0) {\n    shifted_value = (input_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n    return shifted_value;\n  }\n  else if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  else {\n    return 0xffffffff;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080010c4",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_080010c4"
        },
        "FUN_080040b8": {
            "renaming": {
                "FUN_080040b8": "process_data_080040b8",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "output_1",
                "param_6": "output_2",
                "iVar1": "result",
                "FUN_08001938": "call_external_function",
                "PTR_DAT_080040e4": "external_data_pointer",
                "FUN_08004490": "send_error_message"
            },
            "code": "void process_data_080040b8(int input_1, int input_2, int input_3, int input_4, int output_1, int output_2)\n{\n  int result = call_external_function(PTR_DAT_080040e4, input_1, input_2, 1, input_3, input_4, 200, input_4);\n  if (result != 0) {\n    send_error_message(output_1, output_2);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08001938",
                "FUN_08004490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040b8",
            "calling": [
                "FUN_08003034"
            ],
            "imported": false,
            "current_name": "process_data_080040b8"
        },
        "FUN_0800245c": {
            "renaming": {
                "FUN_0800245c": "modify_param_0800245c",
                "param_1": "param_ptr",
                "param_2": "param2",
                "param_3": "param3",
                "extraout_r1": "extra_out_r1",
                "extraout_r1_00": "extra_out_r1_00",
                "extraout_r1_01": "extra_out_r1_01",
                "extraout_r1_02": "extra_out_r1_02",
                "iVar1": "int_var1",
                "iVar2": "int_var2",
                "flag": "param_flag",
                "uVar2": "uint_var2"
            },
            "code": "void modify_param_0800245c(int *param_array, undefined4 param_2, undefined4 param_3)\n{\n  int extraout_r1;\n  int extraout_r1_00;\n  int extraout_r1_01;\n  int extraout_r1_02;\n  int param_1 = *param_array;\n  int flag = *(char *)(param_array + 0xe);\n  if (flag == 1) {\n    return;\n  }\n  *(undefined *)((int)param_array + 0x39) = 2;\n  *(undefined *)(param_array + 0xe) = 1;\n  switch(param_3) {\n    case 0:\n      function1(param_1);\n      uint uVar2 = *(uint *)(extraout_r1 + 0x10);\n      *(uint *)(param_1 + 0x18) = (*(uint *)(param_1 + 0x18) | 8) & 0xfffffffb | uVar2;\n      break;\n    case 4:\n      function2(param_1);\n      int iVar1 = *(int *)(extraout_r1_00 + 0x10);\n      uint uVar2 = (*(uint *)(param_1 + 0x18) | 0x800) & 0xfffffbff | iVar1 << 8;\n      *(uint *)(param_1 + 0x18) = uVar2;\n      break;\n    case 8:\n      function3(param_1);\n      uint uVar2 = *(uint *)(extraout_r1_01 + 0x10);\n      *(uint *)(param_1 + 0x1c) = (*(uint *)(param_1 + 0x1c) | 8) & 0xfffffffb | uVar2;\n      goto LAB_080024fa;\n    case 0xc:\n      function4(param_1);\n      int iVar2 = *(int *)(extraout_r1_02 + 0x10);\n      uint uVar2 = (*(uint *)(param_1 + 0x1c) | 0x800) & 0xfffffbff | iVar2 << 8;\n      *(uint *)(param_1 + 0x1c) = uVar2;\n      goto LAB_080024fa;\n  }\n  *(uint *)(param_1 + 0x18) = uVar2;\nLAB_080024fa:\n  *(undefined *)((int)param_array + 0x39) = 1;\n  *(undefined *)(param_array + 0xe) = 0;\n  return;\n}",
            "called": [
                "FUN_08002324",
                "FUN_080022d0",
                "FUN_08002404",
                "FUN_08002280"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800245c",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "modify_param_0800245c"
        },
        "FUN_08004490": {
            "renaming": {
                "FUN_08004490": "print_error_message_and_wait_for_input_08004490",
                "param_1": "error_code",
                "param_2": "input_code",
                "puVar2": "input_message",
                "puVar3": "error_message"
            },
            "code": "void print_error_message_and_wait_for_input_08004490(int error_code, int input_code) {\n  initialize_printer(DAT_08004508, 0x4000, 1);\n  initialize_printer(DAT_08004508, 0x8000, 0);\n  initialize_printer(DAT_08004508, 0x2000, 0);\n  char* error_message = PTR_s_Error_with_08004510;\n  char* input_message = PTR_s__at_line__0800450c;\n  while(true) {\n    print_with_printer(DAT_08004508, 0x4000);\n    print_with_printer(DAT_08004508, 0x8000);\n    print_with_printer(DAT_08004508, 0x2000);\n    print_with_printer(error_message);\n    print_with_printer(error_code);\n    print_with_printer(input_message);\n    print_with_printer(input_code);\n    print_with_printer(\"\\n\");\n    wait_for_some_time(500);\n  }\n}",
            "called": [
                "thunk_FUN_08001168",
                "FUN_08004cac",
                "FUN_08004c18",
                "FUN_0800142e",
                "FUN_08004c8c",
                "FUN_08001424"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004490",
            "calling": [
                "FUN_080040b8",
                "FUN_0800403c",
                "FUN_0800407c",
                "FUN_0800458c",
                "FUN_08004514"
            ],
            "imported": false,
            "current_name": "print_error_message_and_wait_for_input_08004490"
        },
        "FUN_08000e54": {
            "renaming": {
                "FUN_08000e54": "float_conversion_08000e54",
                "param_1": "float_bits_1",
                "param_2": "float_bits_2",
                "param_3": "rounding_mode",
                "param_4": "exception_flags",
                "uVar1": "mantissa_mask",
                "uVar2": "exponent_1",
                "iVar3": "exponent_diff",
                "uVar4": "shift_amount",
                "iVar5": "new_exponent",
                "uVar6": "result_bits",
                "bVar7": "condition",
                "bVar8": "overflow",
                "bVar9": "carry"
            },
            "code": "\nuint float_conversion_08000e54(uint float_bits_1,uint float_bits_2,undefined4 rounding_mode,uint exception_flags)\n\n{\n  uint mantissa_mask;\n  uint exponent_1;\n  int exponent_diff;\n  uint shift_amount;\n  int new_exponent;\n  uint result_bits;\n  bool condition;\n  bool overflow;\n  bool carry;\n  \n  exponent_1 = float_bits_1 >> 0x17 & 0xff;\n  condition = exponent_1 == 0;\n  if (!condition) {\n    exception_flags = float_bits_2 >> 0x17 & 0xff;\n    condition = exception_flags == 0;\n  }\n  if (!condition) {\n    condition = exponent_1 == 0xff;\n  }\n  if (!condition) {\n    condition = exception_flags == 0xff;\n  }\n  if (condition) {\n    exception_flags = float_bits_2 >> 0x17 & 0xff;\n    result_bits = float_bits_1;\n    if (exponent_1 == 0xff) {\n      if (((float_bits_1 & 0x7fffff) != 0) || (result_bits = float_bits_2, exception_flags == 0xff)) {\nLAB_08000e4a:\n        return result_bits | 0x7fc00000;\n      }\n    }\n    else {\n      if (exception_flags == 0xff) {\n        result_bits = float_bits_2;\n        if ((float_bits_2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (float_bits_1 ^ float_bits_2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      condition = (float_bits_1 & 0x7fffffff) == 0;\n      if (!condition) {\n        condition = (float_bits_2 & 0x7fffffff) == 0;\n      }\n      if (!condition) {\n        condition = exponent_1 == 0;\n        result_bits = float_bits_1 & 0x80000000;\n        while( true ) {\n          if (condition) {\n            float_bits_1 = float_bits_1 << 1;\n            condition = (float_bits_1 & 0x800000) == 0;\n          }\n          if (!condition) break;\n          exponent_1 = exponent_1 - 1;\n        }\n        float_bits_1 = float_bits_1 | result_bits;\n        condition = exception_flags == 0;\n        result_bits = float_bits_2 & 0x80000000;\n        while( true ) {\n          if (condition) {\n            float_bits_2 = float_bits_2 << 1;\n            condition = (float_bits_2 & 0x800000) == 0;\n          }\n          if (!condition) break;\n          exception_flags = exception_flags - 1;\n        }\n        float_bits_2 = float_bits_2 | result_bits;\n        goto LAB_08000e6c;\n      }\n      if ((float_bits_1 & 0x7fffffff) == 0) {\n        if ((float_bits_2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    float_bits_1 = float_bits_1 ^ float_bits_2;\n  }\n  else {\nLAB_08000e6c:\n    exponent_diff = exponent_1 - exception_flags;\n    if (float_bits_2 << 9 == 0) {\n      float_bits_1 = (float_bits_1 ^ float_bits_2) & 0x80000000 | float_bits_1 & 0x7fffff;\n      carry = SCARRY4(exponent_diff,0x7f);\n      new_exponent = exponent_diff + 0x7f;\n      condition = new_exponent < 0;\n      overflow = new_exponent == 0;\n      if (!overflow && condition == carry) {\n        carry = SBORROW4(0xff,new_exponent);\n        condition = 0xff - new_exponent < 0;\n        overflow = new_exponent == 0xff;\n      }\n      if (!overflow && condition == carry) {\n        float_bits_1 = float_bits_1 | new_exponent * 0x800000;\n      }\n      if (!overflow && condition == carry) {\n        return float_bits_1;\n      }\n      float_bits_1 = float_bits_1 | 0x800000;\n      exponent_1 = 0;\n      overflow = SBORROW4(new_exponent,1);\n      shift_amount = exponent_diff + 0x7e;\n      condition = shift_amount == 0;\n      result_bits = shift_amount;\n    }\n    else {\n      mantissa_mask = (float_bits_2 << 9) >> 4 | 0x10000000;\n      exponent_1 = (float_bits_1 << 9) >> 4 | 0x10000000;\n      float_bits_1 = (float_bits_1 ^ float_bits_2) & 0x80000000;\n      condition = mantissa_mask <= exponent_1;\n      if (!condition) {\n        exponent_1 = exponent_1 << 1;\n      }\n      shift_amount = exponent_diff + 0x7d + (uint)condition;\n      result_bits = 0x800000;\n      do {\n        if (mantissa_mask <= exponent_1) {\n          exponent_1 = exponent_1 - mantissa_mask;\n          float_bits_1 = float_bits_1 | result_bits;\n        }\n        condition = mantissa_mask >> 1 <= exponent_1;\n        if (condition) {\n          exponent_1 = exponent_1 - (mantissa_mask >> 1);\n        }\n        if (condition) {\n          float_bits_1 = float_bits_1 | result_bits >> 1;\n        }\n        condition = mantissa_mask >> 2 <= exponent_1;\n        if (condition) {\n          exponent_1 = exponent_1 - (mantissa_mask >> 2);\n        }\n        if (condition) {\n          float_bits_1 = float_bits_1 | result_bits >> 2;\n        }\n        condition = mantissa_mask >> 3 <= exponent_1;\n        if (condition) {\n          exponent_1 = exponent_1 - (mantissa_mask >> 3);\n        }\n        if (condition) {\n          float_bits_1 = float_bits_1 | result_bits >> 3;\n        }\n        exponent_1 = exponent_1 * 0x10;\n        condition = exponent_1 == 0;\n        if (!condition) {\n          result_bits = result_bits >> 4;\n          condition = result_bits == 0;\n        }\n      } while (!condition);\n      overflow = SBORROW4(shift_amount,0xfd);\n      condition = shift_amount == 0xfd;\n      result_bits = shift_amount - 0xfd;\n      if (shift_amount < 0xfe) {\n        float_bits_1 = float_bits_1 + shift_amount * 0x800000 + (uint)(mantissa_mask <= exponent_1);\n        if (exponent_1 - mantissa_mask == 0) {\n          float_bits_1 = float_bits_1 & 0xfffffffe;\n        }\n        return float_bits_1;\n      }\n    }\n    if (condition || (int)result_bits < 0 != overflow) {\n      condition = (int)(shift_amount + 0x19) < 0;\n      if (shift_amount == 0xffffffe7 || condition != SCARRY4(shift_amount,0x19)) {\n        float_bits_1 = float_bits_1 & 0x80000000;\n      }\n      if (shift_amount == 0xffffffe7 || condition != SCARRY4(shift_amount,0x19)) {\n        return float_bits_1;\n      }\n      result_bits = (float_bits_1 << 1) >> (-shift_amount & 0xff);\n      shift_amount = float_bits_1 << (shift_amount + 0x20 & 0xff);\n      result_bits = ((uint)((float_bits_1 & 0x80000000) != 0) << 0x1f | result_bits >> 1) + (uint)((byte)result_bits & 1);\n      if ((exponent_1 | shift_amount << 1) == 0) {\n        result_bits = result_bits & ~(shift_amount >> 0x1f);\n      }\n      return result_bits;\n    }\n  }\n  return float_bits_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e54",
            "calling": [
                "FUN_0800483c",
                "FUN_08003330",
                "FUN_0800411c",
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "float_conversion_08000e54"
        },
        "FUN_080015e8": {
            "renaming": {
                "FUN_080015e8": "set_flags_080015e8",
                "param_1": "flags_ptr",
                "param_2": "flag1",
                "param_3": "flag2",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "time_start",
                "iVar2": "time_now",
                "puVar3": "flags",
                "ppuVar4": "ppuVar4",
                "uVar5": "uVar5",
                "uVar6": "uVar6",
                "DAT_080016f0": "DAT_080016f0",
                "error_code": "error_code"
            },
            "code": "uint32_t set_flags_080015e8(uint32_t **flags_ptr, uint32_t flag1, uint32_t flag2, int param4, uint32_t param5) {\n  uint32_t *flags = *flags_ptr;\n  *flags |= 0x400;\n  *flags |= 0x100;\n  uint32_t **ppuVar4 = flags_ptr;\n  uint32_t uVar5 = flag1;\n  uint32_t uVar6 = flag2;\n  int iVar1 = FUN_0800115c();\n  while (flags[5] << 0x1f == 0xffffffff && param5 == 0xffffffff) {\n  }\n  flags[4] = flag1 & 0xfe;\n  int error_code = FUN_08001460(flags_ptr, DAT_080016f0, param5, flags, ppuVar4, uVar5, uVar6);\n  if (error_code != 0) {\n    goto LAB_080016ba;\n  }\n  error_code = FUN_080014e2(flags_ptr, param5, (*flags_ptr)[5], (*flags_ptr)[6]);\n  if (error_code == 0) {\n    flags = *flags_ptr;\n    if (param4 != 1) {\n      flags[4] = flag2 >> 8;\n      error_code = FUN_080014e2(flags_ptr, param5);\n      if (error_code != 0) {\n        goto LAB_08001642;\n      }\n      flags = *flags_ptr;\n    }\n    flags[4] = flag2 & 0xff;\n    error_code = FUN_080014e2(flags_ptr, param5);\n    if (error_code == 0) {\n      **flags_ptr |= 0x100;\n      iVar1 = FUN_0800115c();\n      while (flags[5] << 0x1f >= 0 && (param5 == 0xffffffff || FUN_0800115c() - iVar1 <= param5)) {\n        if (flags[5] << 0x1f < 0) {\n          flags[4] = flag1 & 0xff | 1;\n          error_code = FUN_08001460(flags_ptr, DAT_080016f0, param5);\n          if (error_code == 0) {\n            return 0;\n          }\n          goto LAB_080016ba;\n        }\n      }\n      *(uint8_t *)((int)flags_ptr + 0x35) = 0x20;\n      *(uint32_t *)(flags_ptr + 0xd) = 0;\n      return 3;\n    }\n  }\nLAB_08001642:\n  if (flags_ptr[0xe] == (uint32_t *)0x4) {\n    **flags_ptr |= 0x200;\n    return 1;\n  }\n  return 3;\nLAB_080016ba:\n  if (flags_ptr[0xe] != (uint32_t *)0x4) {\n    return 3;\n  }\n  return 1;\n}\n",
            "called": [
                "FUN_08001460",
                "FUN_080014e2",
                "FUN_0800115c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015e8",
            "calling": [
                "FUN_08001938"
            ],
            "imported": false,
            "current_name": "set_flags_080015e8"
        },
        "FUN_08004e14": {
            "renaming": {
                "FUN_08004e14": "classify_integers_08004e14",
                "param_1": "input",
                "param_2": "var1",
                "param_3": "var2",
                "uVar1": "constant1",
                "iVar2": "input_value",
                "local_18": "size",
                "local_14": "constant4",
                "uStack_10": "stack_var",
                "local_c": "constant3"
            },
            "code": "void classify_integers_08004e14(int *input, undefined4 var1, undefined4 var2)\n{\n    undefined4 constant1 = DAT_08004e6c;\n    int input_value = *input;\n    undefined4 size;\n    undefined4 constant2;\n    undefined4 constant3 = 2;\n    undefined4 constant4 = 2;\n    undefined4 stack_var = var2;\n\n    if (input_value == DAT_08004e68) {\n        size = 0x800;\n    }\n    else if (input_value == 0x40000000) {\n        size = 2;\n    }\n    else {\n        constant1 = DAT_08004e74;\n        if (input_value == DAT_08004e70) {\n            size = 3;\n        }\n        else {\n            if (input_value != DAT_08004e78) {\n                return;\n            }\n            size = 0x300;\n        }\n    }\n    constant2 = constant1;\n    FUN_08001264(constant2, &size);\n}\n",
            "called": [
                "FUN_08001264"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e14",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "classify_integers_08004e14"
        }
    },
    "used_tokens": 205039,
    "layers": [
        [
            "FUN_080050fc",
            "FUN_08003320",
            "FUN_08004410",
            "FUN_08001264",
            "FUN_08002ea0",
            "FUN_080070b0",
            "FUN_08001424",
            "FUN_08001028",
            "FUN_080006ac",
            "FUN_08001828",
            "FUN_08004c64",
            "FUN_08007092",
            "FUN_0800290c",
            "FUN_08002f28",
            "FUN_08004384",
            "FUN_080009a0",
            "FUN_08003298",
            "FUN_08004300",
            "FUN_08005630",
            "FUN_08000980",
            "FUN_08004028",
            "FUN_08002368",
            "FUN_08002520",
            "FUN_08002008",
            "FUN_08002404",
            "FUN_08005bc8",
            "FUN_08001436",
            "FUN_08004a30",
            "FUN_08004c70",
            "FUN_08000904",
            "FUN_0800299a",
            "FUN_0800114c",
            "FUN_080052e4",
            "FUN_080014e2",
            "FUN_0800142e",
            "FUN_08004d8c",
            "FUN_08002250",
            "FUN_080009b4",
            "FUN_080011fc",
            "FUN_08003068",
            "FUN_08005646",
            "FUN_08000990",
            "FUN_08000110",
            "FUN_0800709e",
            "FUN_08002ec0",
            "FUN_08004434",
            "FUN_08006c0c",
            "FUN_0800426c",
            "FUN_08002538",
            "FUN_080040e8",
            "FUN_08004ffc",
            "FUN_0800115c",
            "FUN_08002d88",
            "FUN_08000c44",
            "FUN_08000a04",
            "FUN_080025e8",
            "FUN_08002b48",
            "FUN_08004f68",
            "FUN_08001170",
            "FUN_08002bf0",
            "FUN_08002ad0",
            "FUN_08001050",
            "FUN_080009c8",
            "FUN_08002ed4",
            "FUN_08000f9c",
            "FUN_08000c3c",
            "FUN_080043bc",
            "FUN_08001214",
            "FUN_08003fc4",
            "FUN_08000404",
            "FUN_0800209c",
            "FUN_0800403c",
            "FUN_08006070",
            "thunk_FUN_08006070",
            "FUN_08004cac",
            "FUN_08004c18",
            "FUN_0800483c",
            "FUN_08004c8c",
            "FUN_08001460",
            "FUN_08001064",
            "FUN_08003fd0",
            "FUN_08000892",
            "FUN_08004458",
            "FUN_08000134",
            "FUN_08003eb0",
            "FUN_08002ee8",
            "FUN_08001104",
            "thunk_FUN_0800115c",
            "FUN_080072b8",
            "FUN_0800581c",
            "FUN_08004d48",
            "FUN_080072ac",
            "FUN_08002280",
            "FUN_08001194",
            "FUN_08002cb0",
            "FUN_08004348",
            "FUN_08002324",
            "FUN_08001078",
            "FUN_08002564",
            "FUN_08001754",
            "FUN_08003ec8",
            "FUN_08002724",
            "FUN_08003fe8",
            "FUN_08005714",
            "FUN_08004fb4",
            "FUN_080043f0",
            "FUN_08000428",
            "FUN_08004ccc",
            "FUN_08000a30",
            "FUN_080023d0",
            "FUN_08004c30",
            "FUN_08003fdc",
            "FUN_080009f0",
            "FUN_08004f10",
            "FUN_08005044",
            "FUN_08004194",
            "FUN_08001240",
            "FUN_08005840",
            "FUN_08000150",
            "FUN_08003f3c",
            "FUN_08002214",
            "FUN_08001004",
            "FUN_08003ff4",
            "FUN_080041ae",
            "FUN_08001128",
            "FUN_08004514",
            "FUN_08004a84",
            "FUN_080041c4",
            "FUN_080057d0",
            "FUN_0800567c",
            "FUN_08000ffc",
            "FUN_080016f4",
            "FUN_080025a4",
            "FUN_08002220",
            "FUN_08003034",
            "FUN_08004e7c",
            "FUN_08001530",
            "FUN_08003314",
            "FUN_08005854",
            "FUN_08001014",
            "FUN_080071c0",
            "FUN_08005614",
            "FUN_080070a4",
            "FUN_0800407c",
            "FUN_080022d0",
            "FUN_080010c4",
            "FUN_080040b8",
            "FUN_0800245c",
            "FUN_08004490",
            "FUN_080015e8",
            "FUN_08004e14"
        ],
        [
            "FUN_08005900",
            "FUN_0800016c",
            "FUN_08001b58",
            "FUN_08003330",
            "FUN_08006228",
            "FUN_08000cec",
            "FUN_08005c70",
            "FUN_08006d68",
            "FUN_08000ad8",
            "FUN_080004d0",
            "FUN_080053d4",
            "FUN_0800458c",
            "FUN_08000adc",
            "FUN_08000168",
            "FUN_08000724",
            "FUN_08001938",
            "FUN_0800411c",
            "FUN_08000e54"
        ]
    ],
    "locked_functions": []
}