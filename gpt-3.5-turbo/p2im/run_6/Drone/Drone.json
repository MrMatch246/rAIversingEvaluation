{
    "functions": {
        "FUN_080050fc": {
            "renaming": {
                "FUN_080050fc": "reverse_and_copy_data_080050fc",
                "param_1": "error_code",
                "param_2": "memory_block",
                "param_3": "input_string",
                "param_4": "block_size",
                "puVar1": "char_ptr",
                "iVar2": "int_val",
                "iVar3": "copy_size",
                "puVar4": "return_val",
                "piVar5": "arg_ptr",
                "bVar6": "is_number",
                "pbVar7": "input_ptr",
                "pbVar8": "start_ptr",
                "unaff_r9": "initial_block_size",
                "local_8c": "arg_list",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "type_size",
                "local_7c": "field_width",
                "local_74": "input_length",
                "local_70": "type",
                "local_6f": "field_width_char",
                "local_6e": "precision_char",
                "local_45": "sign_char",
                "local_30": "type_char",
                "PTR_DAT_080052d0": "char_flags_1",
                "PTR_DAT_080052d4": "char_flags_2",
                "PTR_s_efgEFG_080052d8": "char_types",
                "DAT_080052dc": "use_alternate_form",
                "DAT_080052e0": "format_string"
            },
            "code": "int reverse_and_copy_data_080050fc(int* error_code, int* memory_block, byte* input_string, int* block_size) {\n  byte* input_ptr = input_string;\n  int input_length = 0;\n  int flags = 0;\n  int width = -1;\n  int precision = 0;\n  char type = 0;\n  int* arg_list = block_size;\n  int arg_count = 0;\n  int field_width = 0x20;\n  int precision_width = 0x30;\n  while (true) {\n    if (*input_ptr != '%') {\n      if (*input_ptr == '\\0') {\n        break;\n      }\n      input_ptr++;\n      input_length++;\n    }\n    else {\n      input_ptr++;\n      if (*input_ptr == '%') {\n        input_ptr++;\n        input_length++;\n      }\n      else {\n        while (true) {\n          int char_index = find_character_08005614(PTR_DAT_080052d0, *input_ptr);\n          if (char_index == 0) {\n            break;\n          }\n          flags |= 1 << (char_index - (int)PTR_DAT_080052d0 & 0xffU);\n          input_ptr++;\n        }\n        if ((int)(flags << 0x1b) < 0) {\n          field_width = 0x20;\n        }\n        if ((int)(flags << 0x1c) < 0) {\n          field_width = 0x2b;\n        }\n        if (*input_ptr == '*') {\n          input_ptr++;\n          arg_count++;\n          int arg_val = *arg_list++;\n          if (-1 < arg_val) {\n            goto LAB_080051ee;\n          }\n          arg_val = -arg_val;\n          flags |= 2;\n        }\n        else {\n          bool is_number = false;\n          int num_val = 0;\n          while (true) {\n            if (9 < *input_ptr - 0x30) {\n              break;\n            }\n            num_val = num_val * 10 + (*input_ptr - 0x30);\n            is_number = true;\n            input_ptr++;\n          }\n          if (is_number) {\n            goto LAB_080051ee;\n          }\n        }\n        if (*input_ptr == '.') {\n          input_ptr++;\n          if (*input_ptr == '*') {\n            input_ptr++;\n            arg_count++;\n            int arg_val = *arg_list++;\n            if (arg_val < 0) {\n              arg_val = -1;\n            }\n            precision = arg_val;\n          }\n          else {\n            bool is_number = false;\n            int num_val = 0;\n            while (true) {\n              input_ptr++;\n              if (9 < *input_ptr - 0x30) {\n                break;\n              }\n              num_val = num_val * 10 + (*input_ptr - 0x30);\n              is_number = true;\n            }\n            if (is_number) {\n              precision = num_val;\n            }\n          }\n        }\n        int char_index = find_character_08005614(PTR_DAT_080052d4, *input_ptr, 3);\n        if (char_index != 0) {\n          input_ptr++;\n          flags |= 0x40 << (char_index - (int)PTR_DAT_080052d4 & 0xffU);\n        }\n        type = *input_ptr++;\n        arg_count++;\n        int* arg_ptr = &arg_list[arg_count];\n        int arg_size = encode_and_send_data_080053d4(error_code, &flags, memory_block, DAT_080052e0, &arg_ptr);\n        if (arg_size == -1) {\n          if ((int)((uint)*(ushort *)(memory_block + 3) << 0x19) < 0) {\n            return -1;\n          }\n          return input_length;\n        }\n        input_length += arg_size;\n        flags = 0;\n        width = -1;\n        precision = 0;\n        type = 0;\n      }\n    }\n  }\n  if (((int)((uint)*(ushort *)(memory_block + 3) << 0x18) < 0) && (memory_block[4] == 0)) {\n    int block = allocate_memory_block_08005714(error_code, 0x40);\n    *memory_block = block;\n    memory_block[4] = block;\n    if (block == 0) {\n      *error_code = 0xc;\n      return -1;\n    }\n    memory_block[5] = 0x40;\n  }\n  if ((int)((uint)*(ushort *)(memory_block + 3) << 0x19) < 0) {\n    return -1;\n  }\n  return input_length;\n}\n",
            "called": [
                "FUN_080053d4",
                "FUN_08005614",
                "FUN_08005044",
                "FUN_08005714"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080050fc",
            "calling": [
                "FUN_08004ffc"
            ],
            "imported": false,
            "current_name": "reverse_and_copy_data_080050fc"
        },
        "FUN_08003320": {
            "renaming": {
                "FUN_08003320": "set_param_to_ptr_08003320",
                "param_1": "param",
                "PTR_DAT_08003328": "PTR_DATA"
            },
            "code": "void set_param_to_ptr_08003320(void *param) {\n  *(void **)PTR_DAT_08003328 = param;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003320",
            "calling": [
                "FUN_08002ea0",
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "set_param_to_ptr_08003320"
        },
        "FUN_08004410": {
            "renaming": {
                "FUN_08004410": "process_data_08004410",
                "param_1": "data",
                "param_2": "mask",
                "param_3": "value",
                "local_10": "ptr_data",
                "local_c": "masked_value",
                "uStack_8": "ptr_value"
            },
            "code": "void process_data_08004410(uint32_t data, uint32_t mask, uint32_t value){\n    uint32_t ptr_data = *(uint32_t *)PTR_DAT_08004430;\n    uint32_t masked_value = mask & 0xffff0000 | (uint32_t)*(uint16_t *)(PTR_DAT_08004430 + 4);\n    uint32_t ptr_value = value;\n    process_string_and_data_08004300(0x6c, &ptr_data, 6);\n    return;\n}",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004410",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "process_data_08004410"
        },
        "FUN_08001264": {
            "renaming": {
                "FUN_08001264": "process_bits_08001264",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "ptr1",
                "uVar2": "DAT_08001414_value",
                "uVar3": "DAT_08001418_value",
                "uVar4": "output_value",
                "uVar5": "input_bit",
                "uVar6": "input_op",
                "iVar7": "index",
                "uVar8": "bit_index",
                "uVar9": "temp1",
                "uVar10": "temp3",
                "unaff_r10": "ptr2",
                "iVar11": "input_index",
                "DAT_08001418": "DAT_08001418_value",
                "DAT_08001414": "DAT_08001414_value",
                "DAT_08001404": "DAT_08001404_value",
                "DAT_08001410": "DAT_08001410",
                "DAT_0800141c": "DAT_0800141c",
                "DAT_08001408": "DAT_08001408",
                "DAT_0800140c": "DAT_0800140c"
            },
            "code": "void process_bits_08001264(uint* output, uint* input) {\n  uint* ptr1;\n  uint bit_mask;\n  uint input_bit;\n  uint input_op;\n  uint output_op;\n  uint output_shift;\n  int index;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint* ptr2;\n  int input_index;\n  \n  uint DAT_08001418 = DAT_08001418;\n  uint DAT_08001414 = DAT_08001414;\n  uint* DAT_08001404 = DAT_08001404;\n  uint output_value = 0;\n  uint bit_index = 0;\n  \n  do {\n    bit_mask = 1 << (bit_index & 0xff);\n    input_bit = bit_mask & *input;\n    if (input_bit == bit_mask) {\n      input_op = input[1];\n      if (input_op == 0x12) {\n        output_value = input[3] + 0xc;\n      }\n      else if (input_op < 0x13) {\n        if (input_op == 2) {\n          output_value = input[3] + 8;\n        }\n        else if (input_op < 3) {\n          if (input_op == 0) goto LAB_080013be;\n          if (input_op == 1) {\n            output_value = input[3];\n          }\n        }\n        else if (input_op == 3) {\n          output_value = 0;\n        }\n        else if (input_op == 0x11) {\n          output_value = input[3] + 4;\n        }\n      }\n      else {\n        if (input_op != DAT_08001410) {\n          if (DAT_08001410 < input_op) {\n            if ((input_op != DAT_08001414) && (temp3 = DAT_08001420, input_op != DAT_08001418)) goto LAB_080013b8;\n          }\n          else if (input_op != DAT_0800141c) {\n            temp3 = DAT_0800141c + 0x10000;\nLAB_080013b8:\n            if (input_op != temp3) goto LAB_080012a8;\n          }\n        }\nLAB_080013be:\n        output_op = input[2];\n        if (output_op == 0) {\n          output_op = 4;\n        }\n        else {\n          if (output_op == 1) {\n            output_op = bit_mask;\n          }\n          if (output_op != 1) {\n            output_op = bit_mask << 1;\n          }\n          output_value = 8;\n        }\n      }\nLAB_080012a8:\n      if (input_bit < 0x100) {\n        output_shift = bit_index << 2;\n        ptr2 = output;\n      }\n      else {\n        output_shift = (bit_index + 0x3ffffff8) * 4;\n        ptr2 = output + 1;\n      }\n      if (0xff < input_bit) {\n        temp3 = output[1];\n        output_shift = (bit_index + 0x3ffffff8) * 4;\n      }\n      else {\n        temp3 = *output;\n      }\n      if (0xff < input_bit) {\n        ptr1 = output + 1;\n      }\n      else {\n        ptr1 = output;\n      }\n      *ptr1 = temp3 & ~(0xf << (output_shift & 0xff)) | output_value << (output_shift & 0xff);\n      ptr1 = (uint *)input[1];\n      if (((uint)ptr1 & 0x10000000) != 0) {\n        *(uint *)(DAT_08001408 + 0x18) = *(uint *)(DAT_08001408 + 0x18) | 1;\n        input_index = (bit_index & 3) << 2;\n        if (output == DAT_0800140c) {\n          index = 0;\n        }\n        else if (output == DAT_0800140c + 0x100) {\n          index = 1;\n        }\n        else if (output == DAT_0800140c + 0x200) {\n          index = 2;\n        }\n        else if (output == DAT_0800140c + 0x300) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)(&DAT_40010008 + (bit_index & 0xfffffffc)) =\n             index << input_index | *(uint *)(&DAT_40010008 + (bit_index & 0xfffffffc)) & ~(0xf << input_index);\n        if (((uint)ptr1 & 0x10000) == 0) {\n          temp1 = *DAT_08001404 & ~input_bit;\n        }\n        else {\n          temp1 = *DAT_08001404 | input_bit;\n        }\n        *DAT_08001404 = temp1;\n        if (((uint)ptr1 & 0x20000) == 0) {\n          temp1 = DAT_08001404[1] & ~input_bit;\n        }\n        else {\n          temp1 = DAT_08001404[1] | input_bit;\n        }\n        DAT_08001404[1] = temp1;\n        if (((uint)ptr1 & 0x100000) == 0) {\n          temp1 = DAT_08001404[2] & ~input_bit;\n        }\n        else {\n          temp1 = DAT_08001404[2] | input_bit;\n        }\n        DAT_08001404[2] = temp1;\n        if (((uint)ptr1 & 0x200000) == 0) {\n          input_bit = DAT_08001404[3] & ~input_bit;\n        }\n        else {\n          input_bit = input_bit | DAT_08001404[3];\n        }\n        DAT_08001404[3] = input_bit;\n      }\n    }\n    bit_index = bit_index + 1;\n    if (bit_index == 0x10) {\n      return;\n    }\n  } while( true );\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001264",
            "calling": [
                "FUN_08004d48",
                "FUN_08004e14",
                "FUN_0800458c",
                "FUN_08004e7c"
            ],
            "imported": false,
            "current_name": "process_bits_08001264"
        },
        "FUN_08002ea0": {
            "renaming": {
                "FUN_08002ea0": "process_and_calculate_data_08002ea0",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "extraout_r1": "extra_data",
                "set_param_08003314": "set_parameter",
                "set_param_to_ptr_08003320": "set_parameter_to_pointer"
            },
            "code": "void process_and_calculate_data_08002ea0(undefined4 data1, undefined4 data2, undefined4 data3, undefined4 data4)\n{\n  undefined4 extra_data;\n  \n  process_mpu9250_data();\n  calculate_i2c_data_and_hash();\n  set_parameter(DAT_08002ebc);\n  set_parameter_to_pointer(0,extra_data,data3,data4);\n  return;\n}",
            "called": [
                "FUN_08002cb0",
                "FUN_08003314",
                "FUN_08002ad0",
                "FUN_08003320"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ea0",
            "calling": [
                "FUN_08004194"
            ],
            "imported": false,
            "current_name": "process_and_calculate_data_08002ea0"
        },
        "FUN_080070b0": {
            "renaming": {
                "FUN_080070b0": "calculate_080070b0",
                "param_1": "numerator",
                "param_2": "denominator",
                "param_3": "param_3",
                "uVar1": "uVar1",
                "uVar2": "uVar2",
                "uVar3": "uVar3",
                "uVar4": "combined_num_den",
                "uVar5": "shift",
                "uVar6": "abs_denominator",
                "uVar7": "result",
                "uVar8": "result"
            },
            "code": "ulonglong calculate_080070b0(uint numerator, uint denominator, undefined4 param_3) {\n  uint abs_denominator = denominator & 0x7fffffff;\n  int exponent = ((denominator << 1) >> 0x15) - 0x3ff;\n  if (exponent < 0x14) {\n    if (exponent < 0) {\n      if ((numerator | abs_denominator) == 0) {\n        return CONCAT44(denominator,numerator);\n      }\n      uint combined_num_den = abs_denominator | (numerator & 0xfffff);\n      undefined4 uVar1 = *(undefined4 *)(PTR_DAT_080071b8 + ((int)denominator >> 0x1f) * -8);\n      undefined4 uVar2 = *(undefined4 *)((int)(PTR_DAT_080071b8 + ((int)denominator >> 0x1f) * -8) + 4);\n      undefined8 uVar3 = calculate_double_precision_0800016c(numerator, (-combined_num_den | combined_num_den) >> 0xc & 0x80000 | denominator & 0xfffe0000, uVar1, uVar2, numerator, denominator, param_3);\n      ulonglong result = calculate_double_precision_08000168((int)uVar3, (int)((ulonglong)uVar3 >> 0x20), uVar1, uVar2);\n      return result & 0xffffffff | (ulonglong)((uint)(result >> 0x20) & 0x7fffffff | denominator & 0x80000000) << 0x20;\n    }\n    uint shift = DAT_080071bc >> (exponent & 0xff);\n    if ((numerator & abs_denominator | abs_denominator) == 0) {\n      return CONCAT44(denominator,numerator);\n    }\n    shift = shift >> 1;\n    uint combined_num_den = numerator & shift | abs_denominator;\n    if (combined_num_den != 0) {\n      combined_num_den = exponent == 0x13 ? 0x80000000 : 0;\n      denominator = 0x40000 >> (exponent & 0xff) | denominator & ~shift;\n    }\n  }\n  else {\n    if (exponent > 0x33) {\n      if (exponent != 0x400) {\n        return CONCAT44(denominator,numerator);\n      }\n      ulonglong result = calculate_double_precision_0800016c();\n      return result;\n    }\n    exponent = exponent - 0x413;\n    uint mask = 0xffffffff >> (exponent & 0xff);\n    if ((numerator & mask) == 0) {\n      return CONCAT44(denominator,numerator);\n    }\n    mask = mask >> 1;\n    uint combined_num_den = numerator;\n    if ((numerator & mask) != 0) {\n      combined_num_den = 0x40000000 >> (exponent & 0xff) | numerator & ~mask;\n    }\n  }\n  undefined4 uVar1 = *(undefined4 *)(PTR_DAT_080071b8 + ((int)denominator >> 0x1f) * -8);\n  undefined4 uVar2 = *(undefined4 *)((int)(PTR_DAT_080071b8 + ((int)denominator >> 0x1f) * -8) + 4);\n  undefined8 uVar3 = calculate_double_precision_0800016c(combined_num_den, denominator, uVar1, uVar2, numerator, denominator, param_3);\n  ulonglong result = calculate_double_precision_08000168((int)uVar3, (int)((ulonglong)uVar3 >> 0x20), uVar1, uVar2);\n  return result;\n}\n",
            "called": [
                "FUN_08000168",
                "FUN_0800016c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080070b0",
            "calling": [
                "FUN_08005900"
            ],
            "imported": false,
            "current_name": "calculate_080070b0"
        },
        "FUN_08002998": {
            "renaming": {
                "FUN_08002998": "do_nothing_08002998"
            },
            "code": "\nvoid do_nothing_08002998(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002998",
            "calling": [
                "FUN_0800299a"
            ],
            "imported": false,
            "current_name": "do_nothing_08002998"
        },
        "FUN_08001424": {
            "renaming": {
                "FUN_08001424": "set_value_at_offset_08001424",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "offset"
            },
            "code": "void set_value_at_offset_08001424(int base_address, int value, int offset) {\n  if (offset == 0) {\n    value = value << 0x10;\n  }\n  *(int *)(base_address + 0x10) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001424",
            "calling": [
                "FUN_08003f3c",
                "FUN_0800458c",
                "FUN_08004490"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_08001424"
        },
        "FUN_08001028": {
            "renaming": {
                "FUN_08001028": "is_input_empty_08001028",
                "in_CY": "input_char",
                "concatenate_params_08001004": "concatenate_parameters"
            },
            "code": "bool is_input_empty_08001028(void)\n{\n  char input_char;\n  concatenate_parameters();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_08001004"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001028",
            "calling": [
                "FUN_08002ee8",
                "FUN_08004a84",
                "FUN_0800483c"
            ],
            "imported": false,
            "current_name": "is_input_empty_08001028"
        },
        "FUN_08005900": {
            "renaming": {
                "FUN_08005900": "process_input_08005900",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "cVar1": "char_val",
                "puVar2": "ptr_to_val",
                "iVar3": "is_valid_1",
                "iVar4": "is_valid_2",
                "piVar5": "ptr_to_int",
                "puVar6": "ptr_to_uint",
                "uVar7": "upper_bits",
                "uVar8": "lower_bits",
                "lVar9": "result",
                "uVar10": "ulonglong_val1",
                "uVar11": "ulonglong_val2",
                "local_50": "return_val",
                "local_4c": "ptr_to_data",
                "local_48": "input_1_copy",
                "uStack_44": "input_2_copy",
                "uStack_3c": "input_4_copy",
                "local_40": "input_3_copy",
                "local_38": "final_result",
                "local_30": "is_valid_input"
            },
            "code": "\n/* WARNING: Could not reconcile some variable overlaps */\n\nlonglong process_input_08005900(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  char char_val;\n  undefined *ptr_to_val;\n  int is_valid_1;\n  int is_valid_2;\n  int *ptr_to_int;\n  undefined4 *ptr_to_uint;\n  undefined4 upper_bits;\n  undefined4 lower_bits;\n  longlong result;\n  undefined8 ulonglong_val1;\n  undefined8 ulonglong_val2;\n  undefined4 return_val;\n  undefined *ptr_to_data;\n  undefined4 input_1_copy;\n  undefined4 input_2_copy;\n  undefined4 input_3_copy;\n  undefined4 input_4_copy;\n  undefined8 final_result;\n  int is_valid_input;\n  \n  result = FUNC_08006228();\n  ptr_to_val = PTR_DAT_08005ba8;\n  upper_bits = (undefined4)((ulonglong)result >> 0x20);\n  lower_bits = (undefined4)result;\n  char_val = *PTR_DAT_08005ba8;\n  if (char_val == -1) {\n    return result;\n  }\n  is_valid_input = is_valid_input_08000a04(input_3,input_4,input_3,input_4);\n  if (is_valid_input != 0) {\n    return result;\n  }\n  is_valid_1 = is_valid_input_08000a04(input_1,input_2,input_1,input_2);\n  input_1_copy = input_1;\n  input_2_copy = input_2;\n  input_3_copy = input_3;\n  input_4_copy = input_4;\n  if (is_valid_1 == 0) {\n    is_valid_2 = is_input_valid_080009a0(input_1,input_2,0,0);\n    if (is_valid_2 != 0) {\n      is_valid_input = is_input_valid_080009a0(input_3,input_4,0,0);\n      if (is_valid_input != 0) {\n        return_val = 1;\n        ptr_to_data = PTR_DAT_08005bac;\n        final_result = 0;\n        is_valid_input = is_valid_1;\n        if (char_val != '\\0') {\n          final_result = (ulonglong)DAT_08005bb0 << 0x20;\n          goto LAB_080059d0;\n        }\n        goto LAB_08005978;\n      }\n      is_valid_1 = set_sign_bit_and_divide_by_2_to_31_08007092(input_3,input_4);\n      if (is_valid_1 == 0) {\n        return result;\n      }\n      is_valid_1 = is_string_terminated_080009b4(input_3,input_4,0,0);\n      if (is_valid_1 == 0) {\n        return result;\n      }\n      return_val = 1;\n      ptr_to_data = PTR_DAT_08005bac;\n      char_val = *ptr_to_val;\n      if (char_val == '\\0') goto LAB_08005a22;\n      final_result = (ulonglong)DAT_08005bb4 << 0x20;\nLAB_08005a32:\n      if (char_val != '\\x02') goto LAB_08005978;\n      goto LAB_08005a34;\n    }\n    is_valid_1 = set_sign_bit_and_divide_by_2_to_31_08007092(lower_bits,upper_bits);\n    if (((is_valid_1 != 0) || (is_valid_2 = set_sign_bit_and_divide_by_2_to_31_08007092(input_1,input_2), is_valid_2 == 0)) ||\n       (is_valid_2 = set_sign_bit_and_divide_by_2_to_31_08007092(input_3,input_4), is_valid_2 == 0)) {\n      is_valid_1 = is_input_valid_080009a0(lower_bits,upper_bits,0,0);\n      if (is_valid_1 == 0) {\n        return result;\n      }\n      is_valid_1 = set_sign_bit_and_divide_by_2_to_31_08007092(input_1,input_2);\n      if (is_valid_1 == 0) {\n        return result;\n      }\n      is_valid_1 = set_sign_bit_and_divide_by_2_to_31_08007092(input_3,input_4);\n      if (is_valid_1 == 0) {\n        return result;\n      }\n      return_val = 4;\n      ptr_to_data = PTR_DAT_08005bac;\n      is_valid_input = 0;\n      final_result._0_4_ = 0;\n      final_result._4_4_ = 0;\n      goto LAB_08005afa;\n    }\n    is_valid_input = is_valid_input_08000a04(lower_bits,upper_bits);\n    char_val = *ptr_to_val;\n    if (is_valid_input != 0) {\n      ptr_to_data = PTR_DAT_08005bac;\n      return_val = 1;\n      is_valid_input = is_valid_1;\n      if (char_val != '\\0') {\n        final_result = calculate_result_08000724(0,0,0,0);\n        goto LAB_08005a32;\n      }\nLAB_08005a22:\n      return_val = 1;\n      final_result = 0;\n      ptr_to_data = PTR_DAT_08005bac;\n      goto LAB_08005978;\n    }\n    ptr_to_data = PTR_DAT_08005bac;\n    return_val = 3;\n    if (char_val == '\\0') {\n      final_result._0_4_ = 0xe0000000;\n      final_result._4_4_ = DAT_08005bb8;\n      is_valid_1 = is_string_terminated_080009b4(input_1,input_2,0,0);\n      if (is_valid_1 != 0) {\n        ulonglong_val1 = calculate_ulonglong_result_080004d0(input_3,input_4,0,DAT_08005bbc);\n        ulonglong_val2 = calculate_080070b0();\n        is_valid_1 = is_input_valid_080009a0((int)ulonglong_val1,(int)((ulonglong)ulonglong_val1 >> 0x20),(int)ulonglong_val2,\n                             (int)((ulonglong)ulonglong_val2 >> 0x20));\n        if (is_valid_1 == 0) {\n          final_result._0_4_ = 0xe0000000;\n          final_result._4_4_ = DAT_08005bc0;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      is_valid_1 = returnZero_0800709e(&return_val);\n      if (is_valid_1 != 0) goto LAB_080059d0;\n    }\n    else {\n      final_result._0_4_ = 0;\n      final_result._4_4_ = DAT_08005bc4;\n      is_valid_1 = is_string_terminated_080009b4(input_1,input_2,0,0);\n      if (is_valid_1 != 0) {\n        ulonglong_val1 = calculate_ulonglong_result_080004d0(input_3,input_4,0,DAT_08005bbc);\n        ulonglong_val2 = calculate_080070b0();\n        is_valid_1 = is_input_valid_080009a0((int)ulonglong_val1,(int)((ulonglong)ulonglong_val1 >> 0x20),(int)ulonglong_val2,\n                             (int)((ulonglong)ulonglong_val2 >> 0x20));\n        if (is_valid_1 == 0) {\n          final_result._0_4_ = 0;\n          final_result._4_4_ = DAT_08005bb4;\n        }\n      }\nLAB_08005afa:\n      if (*ptr_to_val != '\\x02') goto LAB_08005b98;\n    }\n    ptr_to_uint = (undefined4 *)get_value_from_pointer_080072ac();\n    lower_bits = 0x22;\n  }\n  else {\n    is_valid_1 = is_input_valid_080009a0(input_3,input_4,0,0);\n    if (is_valid_1 == 0) {\n      return result;\n    }\n    return_val = 1;\n    ptr_to_data = PTR_DAT_08005bac;\n    final_result = (ulonglong)DAT_08005bb0 << 0x20;\n    if (char_val == '\\x02') {\n      return (ulonglong)DAT_08005bb0 << 0x20;\n    }\nLAB_08005978:\n    is_valid_1 = returnZero_0800709e(&return_val);\n    if (is_valid_1 != 0) goto LAB_080059d0;\nLAB_08005a34:\n    ptr_to_uint = (undefined4 *)get_value_from_pointer_080072ac();\n    lower_bits = 0x21;\n  }\n  *ptr_to_uint = lower_bits;\nLAB_080059d0:\n  if (is_valid_input != 0) {\n    ptr_to_int = (int *)get_value_from_pointer_080072ac();\n    *ptr_to_int = is_valid_input;\n  }\n  return final_result;\n}\n\n",
            "called": [
                "FUN_08000a04",
                "FUN_08006228",
                "FUN_080009a0",
                "FUN_08000724",
                "FUN_08007092",
                "FUN_0800709e",
                "FUN_080004d0",
                "FUN_080072ac",
                "FUN_080009b4",
                "FUN_080070b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005900",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "process_input_08005900"
        },
        "FUN_080006ac": {
            "renaming": {
                "FUN_080006ac": "calculate_result_080006ac",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "temp1",
                "unaff_r4": "unaff_r4",
                "uVar2": "mask",
                "uVar3": "temp1",
                "in_r12": "in_r12",
                "bVar4": "zero_check"
            },
            "code": "ulonglong calculate_result_080006ac(uint param1, uint param2, uint param3, uint param4) {\n  uint mask = in_r12 & (param_4 >> 0x14);\n  if (unaff_r4 != in_r12 && mask != in_r12) {\n    bool zero_check = (param1 | (param2 << 1)) == 0;\n    if (!zero_check) {\n      zero_check = (param3 | (param4 << 1)) == 0;\n    }\n    if (zero_check) {\n      return (ulonglong)((param2 ^ param4) & 0x80000000) << 0x20;\n    }\n    if (unaff_r4 == 0) {\n      uint temp1 = param2 & 0x80000000;\n      do {\n        uint temp2 = param1 & 0x80000000;\n        param1 = param1 << 1;\n        param2 = param2 * 2 + (uint)(temp2 != 0);\n      } while ((param2 & 0x100000) == 0);\n      param2 = param2 | temp1;\n      if (mask != 0) {\n        return CONCAT44(param2, param1);\n      }\n    }\n    do {\n      uint temp2 = param3 & 0x80000000;\n      param3 = param3 << 1;\n      param4 = param4 * 2 + (uint)(temp2 != 0);\n    } while ((param4 & 0x100000) == 0);\n    return CONCAT44(param2, param1);\n  }\n  bool zero_check = (param1 | (param2 << 1)) == 0;\n  if (zero_check) {\n    param2 = param4;\n    param1 = param3;\n  }\n  if (!zero_check) {\n    zero_check = (param3 | (param4 << 1)) == 0;\n  }\n  uint temp1 = param2;\n  if (((!zero_check) && ((unaff_r4 != in_r12 || ((param1 | (param2 << 0xc)) == 0)))) && ((mask != in_r12 || (param1 = param3, temp1 = param4, (param3 | (param4 << 0xc)) == 0)))) {\n    return (ulonglong)((param2 ^ param4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp1, param1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006ac",
            "calling": [
                "FUN_080004d0"
            ],
            "imported": false,
            "current_name": "calculate_result_080006ac"
        },
        "FUN_08001828": {
            "renaming": {
                "FUN_08001828": "process_data_08001828",
                "param_1": "data_ptr",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "param_5": "input",
                "param_6": "input_len",
                "param_7": "arg4",
                "iVar1": "val1",
                "iVar2": "val2",
                "puVar3": "data",
                "uVar4": "data0",
                "process_data_08001530": "process_data_sub",
                "check_value_080014e2": "check_value"
            },
            "code": "undefined4 process_data_08001828(uint **data_ptr, undefined4 arg1, undefined4 arg2, undefined4 arg3, byte *input, short input_len, undefined4 arg4)\n{\n    int val1 = get_value_from_pointer_0800115c();\n    if (*(char *)((int)data_ptr + 0x35) == ' ')\n    {\n        if (input == (byte *)0x0 || input_len == 0)\n        {\n            return 1;\n        }\n        do\n        {\n            uint *data = *data_ptr;\n            if ((~data[6] & 2) != 0)\n            {\n                if (*(char *)(data_ptr + 0xd) == '\\x01')\n                {\n                    return 2;\n                }\n                uint data0 = *data;\n                *(undefined *)(data_ptr + 0xd) = 1;\n                *data = data0 & 0xfffff7ff;\n                *(undefined *)((int)data_ptr + 0x35) = 0x21;\n                *(undefined *)((int)data_ptr + 0x36) = 0x40;\n                data_ptr[0xe] = (uint *)0x0;\n                int result = process_data_08001828_08001530(data_ptr, arg1, arg2, arg3, arg4);\n                if (result != 0)\n                {\n                    *(undefined *)(data_ptr + 0xd) = 0;\n                    if (data_ptr[0xe] == (uint *)0x4)\n                    {\n                        return 1;\n                    }\n                    return 3;\n                }\n                goto LAB_080018e2;\n            }\n            int val2 = get_value_from_pointer_0800115c();\n        } while ((uint)(val2 - val1) < 0x2711);\n        *(undefined *)(data_ptr + 0xd) = 0;\n        *(undefined *)((int)data_ptr + 0x35) = 0x20;\n        return 2;\n    }\n    return 2;\n    while (input_len != 0)\n    {\nLAB_080018e2:\n        int result = check_value_080014e2(data_ptr, arg4);\n        if (result != 0)\n        {\n            goto LAB_080018ee;\n        }\n        uint *data = *data_ptr;\n        data[4] = (uint)*input;\n        if ((int)(data[5] << 0x1d) < 0)\n        {\n            if ((short)(input_len + -1) == 0)\n            {\n                break;\n            }\n            input_len = input_len + -2;\n            data[4] = (uint)input[1];\n            input = input + 2;\n        }\n        else\n        {\n            input = input + 1;\n            input_len = input_len + -1;\n        }\n    }\n    int result = check_value_080014e2(data_ptr, arg4);\n    if (result == 0)\n    {\n        **data_ptr = **data_ptr | 0x200;\n        *(undefined *)(data_ptr + 0xd) = 0;\n        *(undefined *)((int)data_ptr + 0x35) = 0x20;\n        *(undefined *)((int)data_ptr + 0x36) = 0;\n        return 0;\n    }\nLAB_080018ee:\n    if (data_ptr[0xe] == (uint *)0x4)\n    {\n        **data_ptr = **data_ptr | 0x200;\n        return 1;\n    }\n    return 3;\n}",
            "called": [
                "FUN_08001530",
                "FUN_0800115c",
                "FUN_080014e2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001828",
            "calling": [
                "FUN_0800403c"
            ],
            "imported": false,
            "current_name": "process_data_08001828"
        },
        "FUN_08004c64": {
            "renaming": {
                "FUN_08004c64": "initialize_data_08004c64",
                "puVar1": "data_ptr",
                "iVar2": "i"
            },
            "code": "void initialize_data_08004c64(void)\n{\n  undefined *data_ptr;\n  int i = 0;\n  data_ptr = PTR_DAT_08004c6c;\n  *(undefined2 *)(PTR_DAT_08004c6c + 0x800) = 0;\n  *(undefined2 *)(data_ptr + 0x802) = 0;\n  *(undefined2 *)(data_ptr + 0x804) = 0;\n  do {\n    data_ptr[i] = 0;\n    i++;\n  } while (i != 0x800);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c64",
            "calling": [
                "FUN_08004c70"
            ],
            "imported": false,
            "current_name": "initialize_data_08004c64"
        },
        "FUN_0800016c": {
            "renaming": {
                "FUN_0800016c": "calculate_double_precision_0800016c",
                "iVar1": "right_shifted_b",
                "bVar2": "lsb",
                "uVar3": "sum1",
                "uVar4": "sum2",
                "uVar5": "b_with_hidden_bit",
                "iVar6": "right_shifted_d",
                "uVar7": "b_shifted",
                "uVar9": "b_with_hidden_bit_d",
                "uVar10": "diff",
                "uVar11": "tmp",
                "uVar12": "sum",
                "bVar13": "is_negative",
                "bVar14": "is_zero",
                "bVar15": "borrow"
            },
            "code": "\nulonglong calculate_double_precision_0800016c(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int right_shifted_b;\n  byte lsb;\n  uint sum1;\n  uint sum2;\n  uint b_with_hidden_bit;\n  int right_shifted_d;\n  uint b_shifted;\n  uint uVar8;\n  uint b_with_hidden_bit_d;\n  uint diff;\n  uint tmp;\n  uint sum;\n  bool is_negative;\n  bool is_zero;\n  bool borrow;\n  \n  b_shifted = param_2 << 1;\n  b_with_hidden_bit_d = param_4 << 1;\n  is_negative = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  is_zero = is_negative && param_1 == param_3;\n  if (!is_negative || param_1 != param_3) {\n    is_zero = (b_shifted | param_1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = (b_with_hidden_bit_d | param_3) == 0;\n  }\n  right_shifted_d = (int)b_shifted >> 0x15;\n  if (!is_zero) {\n    is_zero = right_shifted_d == -1;\n  }\n  right_shifted_b = (int)b_with_hidden_bit_d >> 0x15;\n  if (!is_zero) {\n    is_zero = right_shifted_b == -1;\n  }\n  if (is_zero) {\n    if (right_shifted_d == -1 || right_shifted_b == -1) {\n      b_with_hidden_bit_d = param_4;\n      b_shifted = param_3;\n      if (right_shifted_d == -1) {\n        b_with_hidden_bit_d = param_2;\n        b_shifted = param_1;\n      }\n      if (right_shifted_d != -1 || right_shifted_b != -1) {\n        param_3 = b_shifted;\n        param_4 = b_with_hidden_bit_d;\n      }\n      is_zero = (b_shifted | b_with_hidden_bit_d << 0xc) == 0;\n      if (is_zero) {\n        is_zero = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (is_zero) {\n        is_zero = b_with_hidden_bit_d == param_4;\n      }\n      if (!is_zero) {\n        b_with_hidden_bit_d = b_with_hidden_bit_d | 0x80000;\n      }\n      return CONCAT44(b_with_hidden_bit_d,b_shifted);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((b_shifted | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (b_shifted >> 0x15 == 0) {\n      is_zero = (param_1 & 0x80000000) != 0;\n      b_with_hidden_bit_d = param_2 * 2 + (uint)is_zero;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)is_zero)) {\n        b_with_hidden_bit_d = b_with_hidden_bit_d | 0x80000000;\n      }\n      return CONCAT44(b_with_hidden_bit_d,param_1 << 1);\n    }\n    if (b_shifted < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  b_shifted = b_shifted >> 0x15;\n  b_with_hidden_bit_d = b_with_hidden_bit_d >> 0x15;\n  diff = b_with_hidden_bit_d - b_shifted;\n  is_zero = diff != 0;\n  if (b_with_hidden_bit_d < b_shifted) {\n    diff = -diff;\n  }\n  uVar8 = param_1;\n  b_with_hidden_bit = param_2;\n  if (is_zero && b_shifted <= b_with_hidden_bit_d) {\n    b_shifted = b_shifted + diff;\n    uVar8 = param_3;\n    b_with_hidden_bit = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < diff) {\n    return CONCAT44(b_with_hidden_bit,uVar8);\n  }\n  b_with_hidden_bit_d = b_with_hidden_bit & 0xfffff | 0x100000;\n  if ((b_with_hidden_bit & 0x80000000) != 0) {\n    is_zero = uVar8 != 0;\n    uVar8 = -uVar8;\n    b_with_hidden_bit_d = -b_with_hidden_bit_d - (uint)is_zero;\n  }\n  b_with_hidden_bit = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    is_zero = param_3 != 0;\n    param_3 = -param_3;\n    b_with_hidden_bit = -b_with_hidden_bit - (uint)is_zero;\n  }\n  if (b_shifted == diff) {\n    b_with_hidden_bit = b_with_hidden_bit ^ 0x100000;\n    if (b_shifted == 0) {\n      b_with_hidden_bit_d = b_with_hidden_bit_d ^ 0x100000;\n      b_shifted = 1;\n    }\n    else {\n      diff = diff - 1;\n    }\n  }\n  sum = -diff + 0x20;\n  if ((int)diff < 0x21) {\n    tmp = param_3 << (sum & 0xff);\n    param_3 = param_3 >> (diff & 0xff);\n    sum1 = uVar8 + param_3;\n    sum2 = b_with_hidden_bit << (sum & 0xff);\n    sum = sum1 + sum2;\n    b_with_hidden_bit_d = b_with_hidden_bit_d + CARRY4(uVar8,param_3) + ((int)b_with_hidden_bit >> (diff & 0xff)) +\n            (uint)CARRY4(sum1,sum2);\n  }\n  else {\n    tmp = b_with_hidden_bit << (-diff + 0x40 & 0xff);\n    if (param_3 != 0) {\n      tmp = tmp | 2;\n    }\n    b_with_hidden_bit = (int)b_with_hidden_bit >> (diff - 0x20 & 0xff);\n    sum = uVar8 + b_with_hidden_bit;\n    b_with_hidden_bit_d = b_with_hidden_bit_d + ((int)b_with_hidden_bit >> 0x1f) + (uint)CARRY4(uVar8,b_with_hidden_bit);\n  }\n  param_2 = b_with_hidden_bit_d & 0x80000000;\n  diff = b_with_hidden_bit_d;\n  if ((int)b_with_hidden_bit_d < 0) {\n    is_zero = tmp == 0;\n    tmp = -tmp;\n    diff = -sum;\n    sum = -(uint)!is_zero - sum;\n    diff = -(uint)(is_zero <= diff) - b_with_hidden_bit_d;\n  }\n  if (0xfffff < diff) {\n    uVar8 = b_shifted - 1;\n    if (0x1fffff < diff) {\n      b_with_hidden_bit_d = diff & 1;\n      diff = diff >> 1;\n      lsb = (byte)sum;\n      sum = (uint)(b_with_hidden_bit_d != 0) << 0x1f | sum >> 1;\n      tmp = (uint)(lsb & 1) << 0x1f | tmp >> 1;\n      uVar8 = b_shifted;\n      if (0xffbfffff < b_shifted * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    is_zero = 0x7fffffff < tmp;\n    if (tmp == 0x80000000) {\n      is_zero = (sum & 1) != 0;\n    }\n    return CONCAT44(diff + uVar8 * 0x100000 + (uint)CARRY4(sum,(uint)is_zero) | param_2,\n                    sum + is_zero);\n  }\n  is_negative = (tmp & 0x80000000) != 0;\n  tmp = tmp << 1;\n  uVar8 = sum * 2;\n  is_zero = CARRY4(sum,sum);\n  sum = sum * 2 + (uint)is_negative;\n  diff = diff * 2 + (uint)(is_zero || CARRY4(uVar8,(uint)is_negative));\n  uVar8 = b_shifted - 2;\n  if ((diff & 0x100000) != 0) goto LAB_08000278;\n  b_with_hidden_bit = sum;\n  b_shifted = diff;\n  if (diff == 0) {\n    b_with_hidden_bit = 0;\n    b_shifted = sum;\n  }\n  right_shifted_d = count_leading_zeroes(b_shifted);\n  if (diff == 0) {\n    right_shifted_d = right_shifted_d + 0x20;\n  }\n  sum = right_shifted_d - 0xb;\n  borrow = SBORROW4(sum,0x20);\n  diff = right_shifted_d - 0x2b;\n  is_zero = (int)diff < 0;\n  is_negative = diff == 0;\n  if ((int)sum < 0x20) {\n    borrow = SCARRY4(diff,0xc);\n    right_shifted_d = right_shifted_d + -0x1f;\n    is_zero = right_shifted_d < 0;\n    is_negative = right_shifted_d == 0;\n    diff = sum;\n    if (!is_negative && is_zero == borrow) {\n      b_with_hidden_bit = b_shifted << (sum & 0xff);\n      b_shifted = b_shifted >> (0xcU - right_shifted_d & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_negative || is_zero != borrow) {\n    tmp = 0x20 - diff;\n  }\n  b_shifted = b_shifted << (diff & 0xff);\n  if (is_negative || is_zero != borrow) {\n    b_shifted = b_shifted | b_with_hidden_bit >> (tmp & 0xff);\n  }\n  if (is_negative || is_zero != borrow) {\n    b_with_hidden_bit = b_with_hidden_bit << (diff & 0xff);\n  }\nLAB_080002f0:\n  if ((int)sum <= (int)uVar8) {\n    return CONCAT44(b_shifted + (uVar8 - sum) * 0x100000 | param_2,b_with_hidden_bit);\n  }\n  diff = ~(uVar8 - sum);\n  if ((int)diff < 0x1f) {\n    right_shifted_d = diff - 0x13;\n    if (right_shifted_d != 0 && right_shifted_d < 0 == SCARRY4(diff - 0x1f,0xc)) {\n      return CONCAT44(b_with_hidden_bit_d,b_with_hidden_bit >> (0x20 - (0xcU - right_shifted_d) & 0xff) | b_shifted << (0xcU - right_shifted_d & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    diff = diff + 1;\n    return CONCAT44(param_2 | b_shifted >> (diff & 0xff),\n                    b_with_hidden_bit >> (diff & 0xff) | b_shifted << (0x20 - diff & 0xff));\n  }\n  return CONCAT44(b_with_hidden_bit_d,b_shifted >> (diff - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800016c",
            "calling": [
                "FUN_08006070",
                "FUN_08006c0c",
                "FUN_08006228",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_080071c0",
                "FUN_080070b0"
            ],
            "imported": false,
            "current_name": "calculate_double_precision_0800016c"
        },
        "FUN_08001b58": {
            "renaming": {
                "FUN_08001b58": "check_parameters_08001b58",
                "param_1": "parameters",
                "puVar1": "pointer_1",
                "puVar2": "pointer_2",
                "iVar3": "int_1",
                "iVar4": "int_2",
                "uVar5": "uint_1"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\nundefined4 check_parameters_08001b58(int *parameters)\n\n{\n  uint *pointer_1;\n  uint *pointer_2;\n  int int_1;\n  int int_2;\n  uint uint_1;\n  \n  pointer_1 = DAT_08001e70;\n  if (*parameters << 0x1f < 0) {\n    if (((DAT_08001e70[1] & 0xc) == 4) ||\n       (((DAT_08001e70[1] & 0xc) == 8 && ((int)(DAT_08001e70[1] << 0xf) < 0)))) {\n      uint_1 = count_leading_zeroes(0x4000);\n      if (((int)((*DAT_08001e70 >> (uint_1 & 0x1f)) << 0x1f) < 0) && (parameters[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      int_2 = parameters[1];\n      if (int_2 == 0x10000) {\nLAB_08001c1e:\n        uint_1 = *pointer_1 | 0x10000;\n      }\n      else {\n        if (int_2 == 0) {\n          *DAT_08001e70 = *DAT_08001e70 & 0xfffeffff;\n          *pointer_1 = *pointer_1 & 0xfffbffff;\n          int_2 = get_value_from_pointer_0800115c();\n          while (uint_1 = count_leading_zeroes(0x4000),\n                (int)((*pointer_1 >> (uint_1 & 0x1f)) << 0x1f) < 0) {\n            int_1 = get_value_from_pointer_0800115c();\n            if (100 < (uint)(int_1 - int_2)) {\n              return 3;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (int_2 == 0x50000) {\n          *DAT_08001e70 = *DAT_08001e70 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        *DAT_08001e70 = *DAT_08001e70 & 0xfffeffff;\n        uint_1 = *pointer_1 & 0xfffbffff;\n      }\n      *pointer_1 = uint_1;\n      int_2 = get_value_from_pointer_0800115c();\n      while (uint_1 = count_leading_zeroes(0x4000), -1 < (int)((*pointer_1 >> (uint_1 & 0x1f)) << 0x1f))\n      {\n        int_1 = get_value_from_pointer_0800115c();\n        if (100 < (uint)(int_1 - int_2)) {\n          return 3;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  pointer_1 = DAT_08001e70;\n  if (*parameters << 0x1e < 0) {\n    if (((DAT_08001e70[1] & 0xc) == 0) ||\n       (((DAT_08001e70[1] & 0xc) == 8 && (-1 < (int)(DAT_08001e70[1] << 0xf))))) {\n      uint_1 = count_leading_zeroes(0x40000000);\n      if (((int)((*DAT_08001e70 >> (uint_1 & 0x1f)) << 0x1f) < 0) && (parameters[4] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      if (parameters[4] == 0) {\n        int_2 = count_leading_zeroes(0x80000000);\n        *(undefined4 *)(int_2 * 4 + 0x42420000) = 0;\n        int_2 = get_value_from_pointer_0800115c();\n        while (uint_1 = count_leading_zeroes(0x40000000),\n              (int)((*pointer_1 >> (uint_1 & 0x1f)) << 0x1f) < 0) {\n          int_1 = get_value_from_pointer_0800115c();\n          if (2 < (uint)(int_1 - int_2)) {\n            return 3;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      int_2 = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(int_2 * 4 + 0x42420000) = 1;\n      int_2 = get_value_from_pointer_0800115c();\n      while (uint_1 = count_leading_zeroes(0x40000000),\n            -1 < (int)((*pointer_1 >> (uint_1 & 0x1f)) << 0x1f)) {\n        int_1 = get_value_from_pointer_0800115c();\n        if (2 < (uint)(int_1 - int_2)) {\n          return 3;\n        }\n      }\n    }\n    uint_1 = count_leading_zeroes(0x1f000000);\n    *pointer_1 = parameters[5] << (uint_1 & 0xff) | *pointer_1 & 0xffffff07;\n  }\nLAB_08001b6c:\n  pointer_1 = DAT_08001e70;\n  if (*parameters << 0x1c < 0) {\n    if (parameters[6] == 0) {\n      int_2 = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(DAT_08001e74 + int_2 * 4) = 0;\n      int_2 = get_value_from_pointer_0800115c();\n      while (uint_1 = count_leading_zeroes(0x40000000),\n            (int)((pointer_1[9] >> (uint_1 & 0x1f)) << 0x1f) < 0) {\n        int_1 = get_value_from_pointer_0800115c();\n        if (2 < (uint)(int_1 - int_2)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      int_2 = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(DAT_08001e74 + int_2 * 4) = 1;\n      int_2 = get_value_from_pointer_0800115c();\n      while (uint_1 = count_leading_zeroes(0x40000000),\n            -1 < (int)((pointer_1[9] >> (uint_1 & 0x1f)) << 0x1f)) {\n        int_1 = get_value_from_pointer_0800115c();\n        if (2 < (uint)(int_1 - int_2)) {\n          return 3;\n        }\n      }\n      do_nothing_08001168(1);\n    }\n  }\n  pointer_2 = DAT_08001e78;\n  pointer_1 = DAT_08001e70;\n  if (-1 < *parameters << 0x1d) goto LAB_08001bc2;\n  DAT_08001e70[7] = DAT_08001e70[7] | 0x10000000;\n  *pointer_2 = *pointer_2 | 0x100;\n  int_2 = get_value_from_pointer_0800115c();\n  while (-1 < (int)(*pointer_2 << 0x17)) {\n    int_1 = get_value_from_pointer_0800115c();\n    if (100 < (uint)(int_1 - int_2)) {\n      return 3;\n    }\n  }\n  int_2 = parameters[3];\n  if (int_2 == 1) {\nLAB_08001e1a:\n    uint_1 = pointer_1[8] | 1;\n  }\n  else {\n    if (int_2 == 0) {\n      pointer_1[8] = pointer_1[8] & 0xfffffffe;\n      pointer_1[8] = pointer_1[8] & 0xfffffffb;\n      int_2 = get_value_from_pointer_0800115c();\n      while (uint_1 = count_leading_zeroes(0x40000000),\n            (int)((pointer_1[8] >> (uint_1 & 0x1f)) << 0x1f) < 0) {\n        int_1 = get_value_from_pointer_0800115c();\n        if (5000 < (uint)(int_1 - int_2)) {\n          return 3;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (int_2 == 5) {\n      pointer_1[8] = pointer_1[8] | 4;\n      goto LAB_08001e1a;\n    }\n    pointer_1[8] = pointer_1[8] & 0xfffffffe;\n    uint_1 = pointer_1[8] & 0xfffffffb;\n  }\n  pointer_1[8] = uint_1;\n  int_2 = get_value_from_pointer_0800115c();\n  while (uint_1 = count_leading_zeroes(0x40000000), -1 < (int)((pointer_1[8] >> (uint_1 & 0x1f)) << 0x1f)\n        ) {\n    int_1 = get_value_from_pointer_0800115c();\n    if (5000 < (uint)(int_1 - int_2)) {\n      return 3;\n    }\n  }\nLAB_08001bc2:\n  pointer_1 = DAT_08002004;\n  if (parameters[7] == 0) {\n    return 0;\n  }\n  if ((DAT_08002004[1] & 0xc) != 8) {\n    if (parameters[7] != 2) {\n      int_2 = count_leading_zeroes(0x80);\n      *(undefined4 *)(int_2 * 4 + 0x42420000) = 0;\n      int_2 = get_value_from_pointer_0800115c();\n      do {\n        uint_1 = count_leading_zeroes(0x40);\n        if (-1 < (int)((*pointer_1 >> (uint_1 & 0x1f)) << 0x1f)) {\n          return 0;\n        }\n        int_1 = get_value_from_pointer_0800115c();\n      } while ((uint)(int_1 - int_2) < 3);\n      return 3;\n    }\n    int_2 = count_leading_zeroes(0x80);\n    *(undefined4 *)(int_2 * 4 + 0x42420000) = 0;\n    int_2 = get_value_from_pointer_0800115c();\n    do {\n      uint_1 = count_leading_zeroes(0x40);\n      if (-1 < (int)((*pointer_1 >> (uint_1 & 0x1f)) << 0x1f)) {\n        uint_1 = parameters[8];\n        if (uint_1 == 0x10000) {\n          pointer_1[1] = pointer_1[1] & 0xfffdffff | parameters[2];\n        }\n        pointer_1[1] = uint_1 | parameters[9] | pointer_1[1] & 0xffc2ffff;\n        int_2 = count_leading_zeroes(0x80);\n        *(undefined4 *)(int_2 * 4 + 0x42420000) = 1;\n        int_2 = get_value_from_pointer_0800115c();\n        do {\n          uint_1 = count_leading_zeroes(0x40);\n          if ((int)((*pointer_1 >> (uint_1 & 0x1f)) << 0x1f) < 0) {\n            return 0;\n          }\n          int_1 = get_value_from_pointer_0800115c();\n        } while ((uint)(int_1 - int_2) < 3);\n        return 3;\n      }\n      int_1 = get_value_from_pointer_0800115c();\n    } while ((uint)(int_1 - int_2) < 3);\n    return 3;\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_0800115c",
                "FUN_08001168"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b58",
            "calling": [
                "FUN_08004514"
            ],
            "imported": false,
            "current_name": "check_parameters_08001b58"
        },
        "FUN_08007092": {
            "renaming": {
                "FUN_08007092": "set_sign_bit_and_divide_by_2_to_31_08007092",
                "param_1": "input_value",
                "param_2": "unused_variable",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint32_t set_sign_bit_and_divide_by_2_to_31_08007092(uint32_t input_value)\n{\n    uint32_t sign_bit_set = input_value | 0x80000000;\n    uint32_t add_constant = sign_bit_set + 0x100000;\n    uint32_t result = add_constant >> 0x1f;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007092",
            "calling": [
                "FUN_08005900"
            ],
            "imported": false,
            "current_name": "set_sign_bit_and_divide_by_2_to_31_08007092"
        },
        "FUN_0800290c": {
            "renaming": {
                "FUN_0800290c": "process_data_0800290c",
                "param_1": "data",
                "bVar1": "data_byte",
                "iVar2": "data_ptr",
                "puVar6": "short_ptr",
                "puVar7": "updated_short_ptr",
                "bVar8": "condition",
                "uVar3": "byte_value",
                "uVar4": "data_word",
                "sVar5": "count"
            },
            "code": "int process_data_0800290c(int *data) {\n  byte first_byte = *(byte *)((int)data + 0x39);\n  if ((first_byte & 0xef) != 0x22) {\n    return 2;\n  }\n  int data_ptr = *data;\n  ushort *short_ptr = (ushort *)data[10];\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      short_ptr[0] = (ushort)((uint)(*(int *)(data_ptr + 4) << 0x17) >> 0x17);\n      short_ptr = short_ptr + 1;\n    }\n    else {\n      short_ptr[0] = (ushort)*(int *)(data_ptr + 4) & 0xff;\n      short_ptr = (ushort *)((int)short_ptr + 1);\n    }\n    data[10] = (int)short_ptr;\n  }\n  else {\n    if (data[4] == 0) {\n      byte data_byte = (byte)*(undefined4 *)(data_ptr + 4);\n      data[10] = (int)short_ptr + 1;\n      *(byte *)short_ptr = data_byte;\n    }\n    else {\n      undefined4 data_word = *(undefined4 *)(data_ptr + 4);\n      data[10] = (int)short_ptr + 1;\n      *(byte *)short_ptr = (byte)data_word & 0x7f;\n    }\n  }\n  short count = *(short *)((int)data + 0x2e) - 1;\n  *(short *)((int)data + 0x2e) = count;\n  if (count == 0) {\n    data_ptr = *data;\n    *(uint *)(data_ptr + 0xc) = *(uint *)(data_ptr + 0xc) & 0xffffffdf;\n    uint byte_value = (uint)*(byte *)((int)data + 0x39);\n    bool condition = byte_value != 0x32;\n    if (condition) {\n      byte_value = *(uint *)(data_ptr + 0xc) & 0xfffffeff;\n    }\n    else {\n      data_ptr = 0x12;\n    }\n    if (condition) {\n      *(uint *)(data_ptr + 0xc) = byte_value;\n      byte_value = *(uint *)(data_ptr + 0x14) & 0xfffffffe;\n    }\n    if (condition) {\n      *(uint *)(data_ptr + 0x14) = byte_value;\n      data_ptr = 1;\n    }\n    *(char *)((int)data + 0x39) = (char)data_ptr;\n    increment_and_store_08004c30();\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004c30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800290c",
            "calling": [
                "FUN_0800299a"
            ],
            "imported": false,
            "current_name": "process_data_0800290c"
        },
        "FUN_08002f28": {
            "renaming": {
                "FUN_08002f28": "process_sensor_data_08002f28",
                "read_and_process_i2c_data_08002b48": "read_and_process_i2c_data",
                "read_and_calculate_mpu9250_data_08002bf0": "read_and_calculate_mpu9250_data",
                "process_i2c_data_08002d88": "process_i2c_data",
                "thunk_get_value_from_pointer_0800115c": "get_value_from_pointer",
                "PTR_DAT_08003004": "prev_value_ptr",
                "PTR_DAT_08003000": "ptr1_ptr",
                "calculate_hash_08000c3c": "calculate_hash",
                "FUN_08000e54": "set_param_to_ptr",
                "PTR_DAT_0800300c": "ptr2_ptr",
                "PTR_DAT_08003018": "ptr2_values_ptr",
                "PTR_DAT_08003014": "ptr1_values_ptr",
                "PTR_DAT_08003010": "ptr3_ptr",
                "calculate_result_08002ed4": "calculate_result",
                "FUN_08000cec": "calculate_average",
                "convert_param_to_int_08001078": "convert_param_to_int",
                "PTR_DAT_08003024": "ptr3_ptr",
                "PTR_DAT_08003020": "ptr3_values_ptr",
                "PTR_DAT_0800301c": "ptr2_values_ptr",
                "PTR_DAT_08003028": "ptr2_values_ptr",
                "PTR_DAT_0800302c": "ptr1_values_ptr",
                "DAT_08003008": "param_value",
                "DAT_08003030": "result_value"
            },
            "code": "void process_sensor_data_08002f28(void)\n{\n  int sensor_data = read_and_process_i2c_data();\n  int mpu_data = read_and_calculate_mpu9250_data();\n  process_i2c_data(sensor_data);\n  int hash_value = get_value_from_pointer();\n  int prev_value = *PTR_DAT_08003004;\n  *PTR_DAT_08003004 = hash_value;\n  int hash_result = calculate_hash(hash_value - prev_value);\n  set_param_to_ptr();\n  int *ptr1 = PTR_DAT_08003000;\n  int *ptr2 = PTR_DAT_0800300c;\n  int val1 = *(int *)ptr1;\n  int val2 = *(int *)ptr2;\n  int val3 = *(int *)(ptr2 + 8) + -0x80000000;\n  int val4 = *(int *)(ptr1 + 8) + -0x80000000;\n  int val5 = *(int *)(ptr2 + 4);\n  int val6 = *(int *)(ptr1 + 4);\n  int val7 = *(int *)(ptr2 + 8);\n  int val8 = *(int *)(ptr1 + 8);\n  int val9 = *(int *)ptr1;\n  int val10 = *(int *)(ptr2 + 4) / 100;\n  int val11 = *(int *)(ptr2 + 8) / 100;\n  int val12 = *(int *)(ptr1 + 4) / 100;\n  int val13 = *(short *)(ptr2 + 2);\n  int val14 = *(short *)(ptr2 + 4) / 100;\n  int val15 = *(short *)(ptr2 + 2) / 100;\n  int val16 = *(short *)(ptr1 + 2);\n  int val17 = *(short *)(ptr1 + 4) / 100;\n  int val18 = *(short *)(ptr1 + 2) / 100;\n  int result1 = calculate_result();\n  int result2 = calculate_average();\n  int input = convert_param_to_int();\n  *(short *)ptr3 = input;\n  *(short *)(ptr3 + 2) = result2;\n  *(short *)(ptr3 + 4) = input;\n  check_input_and_call_function();\n}\n",
            "called": [
                "FUN_08002b48",
                "FUN_08000cec",
                "FUN_08002ee8",
                "FUN_08002ec0",
                "FUN_08001078",
                "FUN_08003330",
                "FUN_08003320",
                "FUN_08000c3c",
                "FUN_08002ed4",
                "thunk_FUN_0800115c",
                "FUN_08000e54",
                "FUN_08002bf0",
                "FUN_08002d88"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f28",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "process_sensor_data_08002f28"
        },
        "FUN_08004384": {
            "renaming": {
                "FUN_08004384": "process_string_and_data_08004384",
                "param_1": "param1",
                "param_2": "local_var1",
                "param_3": "param2",
                "param_4": "param4",
                "puVar1": "ptr1",
                "local_14": "local_var1[0]",
                "uStack_10": "local_var1[1]",
                "local_c": "local_var3"
            },
            "code": "void process_string_and_data_08004384(uint8_t param1, uint32_t* local_var1, uint8_t param2, uint16_t local_var2, uint32_t param4) {\n  uint16_t* ptr1 = (uint16_t*)PTR_DAT_080043b8;\n  ptr1[2] = 42;\n  ptr1[3] = 0;\n  ptr1[4] = 7;\n  ptr1[5] = 0;\n  ptr1[6] = 42;\n  ptr1[7] = 0;\n  *local_var1 = *ptr1;\n  *(local_var1 + 1) = *(ptr1 + 1);\n  ptr1[8] = 0;\n  ptr1[9] = 0;\n  ptr1[10] = 0;\n  uint32_t local_var3 = (param4 & 0xff000000) | (uint32_t)*((uint16_t*)(ptr1 + 8));\n  process_string_and_data_08004384_08004300(101, local_var1, 11, *((uint16_t*)(ptr1 + 8)), param1);\n}\n",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004384",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "process_string_and_data_08004384"
        },
        "FUN_080009a0": {
            "renaming": {
                "FUN_080009a0": "is_input_valid_080009a0",
                "in_ZR": "input_char",
                "validate_params_08000990": "validate_input"
            },
            "code": "bool is_input_valid_080009a0(void)\n{\n  char input_char;\n  validate_input();\n  return input_char != '\\0';\n}",
            "called": [
                "FUN_08000990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009a0",
            "calling": [
                "FUN_08005900"
            ],
            "imported": false,
            "current_name": "is_input_valid_080009a0"
        },
        "FUN_0800290a": {
            "renaming": {
                "FUN_0800290a": "do_nothing_0800290a"
            },
            "code": "\nvoid do_nothing_0800290a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800290a",
            "calling": [
                "FUN_0800299a"
            ],
            "imported": false,
            "current_name": "do_nothing_0800290a"
        },
        "FUN_08003298": {
            "renaming": {
                "FUN_08003298": "read_MS5611_calibration_data_08003298",
                "puVar1": "data_ptr",
                "puVar2": "MS5611_calibration_data",
                "puVar3": "MS5611_calibration_data + 0x20",
                "iVar4": "i",
                "local_1c": "high_byte",
                "local_1b": "low_byte"
            },
            "code": "void read_MS5611_calibration_data_08003298(void)\n{\n    unsigned char high_byte;\n    unsigned char low_byte;\n    unsigned char* data_ptr = MS5611_calibration_data;\n    int i = 0;\n    process_i2c_data(0xEE, 0x1E, 1);\n    delay_ms(10);\n    *MS5611_calibration_data_size = 8;\n    do {\n        process_i2c_data(0xEE, i + 0xA0 & 0xFFFF, &high_byte, 2, data_ptr, 0x7C);\n        *(unsigned short*)(MS5611_calibration_data + i) = (high_byte << 8) | low_byte;\n        i += 2;\n    } while (i != 0x10);\n    for (i = 0; i != 0x14; ++i)\n        *(unsigned long*)(MS5611_calibration_data + 0x20 + i * 4) = 0;\n}\n",
            "called": [
                "FUN_0800403c",
                "thunk_FUN_08001168",
                "FUN_080040e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003298",
            "calling": [
                "FUN_08004194"
            ],
            "imported": false,
            "current_name": "read_MS5611_calibration_data_08003298"
        },
        "FUN_08004300": {
            "renaming": {
                "FUN_08004300": "process_string_and_data_08004300",
                "param_1": "key",
                "param_2": "data",
                "param_3": "length",
                "uVar1": "xor_result",
                "pbVar2": "ptr",
                "process_data_08004c18": "process_data",
                "process_string_data_08004c8c": "process_string_data"
            },
            "code": "void process_string_and_data_08004300(uint key, byte* data, uint length) {\n  uint xor_result = key ^ (length & 0xff);\n  process_string_data(PTR_DAT_08004344);\n  process_data(length & 0xff);\n  process_data(key);\n  for (byte* ptr = data; ptr < data + length; ptr++) {\n    process_data(*ptr);\n    xor_result ^= *ptr;\n  }\n  process_data(xor_result);\n  return;\n}",
            "called": [
                "FUN_08004c8c",
                "FUN_08004c18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004300",
            "calling": [
                "FUN_08004434",
                "FUN_080043f0",
                "FUN_08004458",
                "FUN_08004410",
                "FUN_080043bc",
                "FUN_08004348",
                "FUN_08004384"
            ],
            "imported": false,
            "current_name": "process_string_and_data_08004300"
        },
        "FUN_08005630": {
            "renaming": {
                "FUN_08005630": "copy_data_to_buffer_08005630",
                "param_1": "buffer_start_index",
                "param_2": "data",
                "param_3": "data_length",
                "puVar1": "buffer_ptr",
                "puVar2": "data_ptr"
            },
            "code": "void copy_data_to_buffer_08005630(int buffer_start_index, undefined *data, int data_length)\n{\n  undefined *buffer_ptr;\n  undefined *data_ptr;\n  buffer_ptr = (undefined *)(buffer_start_index - 1);\n  data_ptr = data + data_length;\n  for (; data != data_ptr; data++) {\n    buffer_ptr++;\n    *buffer_ptr = *data;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005630",
            "calling": [
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "imported": false,
            "current_name": "copy_data_to_buffer_08005630"
        },
        "FUN_08003330": {
            "renaming": {
                "FUN_08003330": "FUNC_08003330"
            },
            "code": "\nvoid FUNC_08003330(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined4 param_9,undefined4 *param_10)\n\n{\n  undefined *puVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  int iVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  int iVar9;\n  undefined4 uVar10;\n  undefined4 uVar11;\n  undefined4 uVar12;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  undefined4 uVar15;\n  undefined4 uVar16;\n  undefined4 uVar17;\n  undefined4 uVar18;\n  undefined4 uVar19;\n  int iVar20;\n  undefined4 uVar21;\n  undefined4 uVar22;\n  undefined4 uVar23;\n  undefined4 uVar24;\n  undefined4 uVar25;\n  undefined4 uVar26;\n  int iVar27;\n  undefined4 uVar28;\n  int iVar29;\n  undefined4 uVar30;\n  undefined4 uVar31;\n  undefined8 uVar32;\n  undefined8 uVar33;\n  \n  uVar28 = *(undefined4 *)PTR_DAT_080035d8;\n  iVar29 = *(int *)(PTR_DAT_080035d8 + 4);\n  uVar31 = *(undefined4 *)(PTR_DAT_080035d8 + 8);\n  uVar30 = *(undefined4 *)(PTR_DAT_080035d8 + 0xc);\n  uVar2 = calculate_float_08000cec(param_1,param_1);\n  uVar3 = calculate_float_08000cec(param_2);\n  uVar2 = calculate_float_08000adc(uVar2,uVar3);\n  uVar3 = calculate_float_08000cec(param_3);\n  calculate_float_08000adc(uVar2,uVar3);\n  calculate_hash_08000428();\n  calculate_and_return_value_08005bc8();\n  uVar2 = calculate_float_value_08000a30();\n  iVar4 = is_input_empty_08001014(uVar2,0);\n  if (iVar4 == 0) {\n    uVar3 = calculate_float_08000cec(param_7);\n    uVar5 = calculate_float_08000cec(param_8);\n    uVar3 = calculate_float_08000adc(uVar3,uVar5);\n    uVar5 = calculate_float_08000cec(param_9);\n    calculate_float_08000adc(uVar3,uVar5);\n    calculate_hash_08000428();\n    calculate_and_return_value_08005bc8();\n    uVar3 = calculate_float_value_08000a30();\n    iVar4 = is_input_empty_08001014(uVar3,0);\n    if (iVar4 == 0) {\n      uVar32 = calculate_hash_08000428(param_4);\n      calculate_ulonglong_result_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar5 = calculate_float_value_08000a30();\n      uVar32 = calculate_hash_08000428(param_5);\n      calculate_ulonglong_result_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar6 = calculate_float_value_08000a30();\n      uVar32 = calculate_hash_08000428(param_6);\n      calculate_ulonglong_result_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar7 = calculate_float_value_08000a30();\n      iVar4 = calculate_float_08000adc(uVar28);\n      uVar8 = calculate_float_08000adc(iVar29);\n      iVar9 = calculate_float_08000adc(uVar31,uVar31);\n      uVar10 = calculate_float_08000adc(uVar30,uVar30);\n      uVar11 = calculate_float_08000cec(uVar28);\n      uVar12 = calculate_float_08000cec(uVar28,iVar29);\n      uVar13 = calculate_float_08000cec(uVar28,uVar31);\n      uVar14 = calculate_float_08000cec(iVar29);\n      uVar15 = calculate_float_08000cec(iVar29,uVar30);\n      uVar16 = calculate_float_08000cec(uVar31,uVar31);\n      uVar17 = calculate_float_08000cec(uVar30,uVar30);\n      uVar2 = calculate_float_value_08000e54(0x3f800000,uVar2);\n      uVar3 = calculate_float_value_08000e54(0x3f800000,uVar3);\n      uVar18 = calculate_float_08000cec(param_7,uVar3);\n      uVar19 = calculate_float_08000cec(param_8,uVar3);\n      uVar3 = calculate_float_08000cec(param_9,uVar3);\n      iVar20 = calculate_float_08000cec(iVar4,uVar18);\n      uVar21 = calculate_float_08000cec(iVar4,uVar19);\n      uVar22 = calculate_float_08000cec(iVar4,uVar3);\n      uVar23 = calculate_float_08000cec(uVar8,uVar18);\n      uVar24 = calculate_float_08000cec(uVar11,uVar18);\n      uVar25 = calculate_float_08000cec(uVar30,uVar21);\n      uVar24 = calculate_float_08000ad8(uVar24,uVar25);\n      uVar25 = calculate_float_08000cec(uVar31,uVar22);\n      uVar24 = calculate_float_08000adc(uVar24,uVar25);\n      uVar25 = calculate_float_08000cec(uVar14,uVar18);\n      uVar24 = calculate_float_08000adc(uVar24,uVar25);\n      uVar25 = calculate_float_08000cec(uVar8,uVar19);\n      uVar25 = calculate_float_08000cec(uVar25,uVar31);\n      uVar24 = calculate_float_08000adc(uVar24,uVar25);\n      uVar25 = calculate_float_08000cec(uVar8,uVar3);\n      uVar25 = calculate_float_08000cec(uVar25,uVar30);\n      uVar24 = calculate_float_08000adc(uVar24,uVar25);\n      uVar25 = calculate_float_08000cec(uVar16,uVar18);\n      uVar24 = calculate_float_08000ad8(uVar24,uVar25);\n      uVar25 = calculate_float_08000cec(uVar17,uVar18);\n      uVar24 = calculate_float_08000ad8(uVar24,uVar25);\n      uVar25 = calculate_float_08000cec(uVar30,iVar20);\n      uVar26 = calculate_float_08000cec(uVar11,uVar19);\n      uVar25 = calculate_float_08000adc(uVar25,uVar26);\n      uVar22 = calculate_float_08000cec(iVar29,uVar22);\n      uVar22 = calculate_float_08000ad8(uVar25,uVar22);\n      uVar25 = calculate_float_08000cec(uVar31,uVar23);\n      uVar22 = calculate_float_08000adc(uVar22,uVar25);\n      uVar25 = calculate_float_08000cec(uVar14,uVar19);\n      uVar22 = calculate_float_08000ad8(uVar22,uVar25);\n      uVar25 = calculate_float_08000cec(uVar16,uVar19);\n      uVar22 = calculate_float_08000adc(uVar22,uVar25);\n      uVar25 = calculate_float_08000cec(iVar9,uVar3);\n      uVar25 = calculate_float_08000cec(uVar25,uVar30);\n      uVar22 = calculate_float_08000adc(uVar22,uVar25);\n      uVar25 = calculate_float_08000cec(uVar17,uVar19);\n      uVar22 = calculate_float_08000ad8(uVar22,uVar25);\n      uVar24 = calculate_float_08000cec(uVar24,uVar24);\n      uVar22 = calculate_float_08000cec(uVar22,uVar22);\n      calculate_float_08000adc(uVar24,uVar22);\n      calculate_hash_08000428();\n      calculate_and_return_value_08005bc8();\n      iVar27 = calculate_float_value_08000a30();\n      uVar22 = calculate_float_08000cec(iVar20 + -0x80000000,uVar31);\n      uVar21 = calculate_float_08000cec(iVar29,uVar21);\n      uVar21 = calculate_float_08000adc(uVar22,uVar21);\n      uVar11 = calculate_float_08000cec(uVar11,uVar3);\n      uVar11 = calculate_float_08000adc(uVar21,uVar11);\n      uVar21 = calculate_float_08000cec(uVar30,uVar23);\n      uVar11 = calculate_float_08000adc(uVar11,uVar21);\n      uVar21 = calculate_float_08000cec(uVar14,uVar3);\n      uVar11 = calculate_float_08000ad8(uVar11,uVar21);\n      uVar21 = calculate_float_08000cec(iVar9,uVar19);\n      uVar21 = calculate_float_08000cec(uVar21,uVar30);\n      uVar11 = calculate_float_08000adc(uVar11,uVar21);\n      uVar21 = calculate_float_08000cec(uVar16,uVar3);\n      uVar11 = calculate_float_08000ad8(uVar11,uVar21);\n      uVar21 = calculate_float_08000cec(uVar17,uVar3);\n      uVar11 = calculate_float_08000adc(uVar11,uVar21);\n      uVar21 = calculate_float_08000adc(uVar11,uVar11);\n      uVar22 = calculate_float_08000adc(uVar15);\n      uVar23 = calculate_float_08000cec(uVar31,iVar4);\n      uVar22 = calculate_float_08000ad8(uVar22,uVar23);\n      uVar23 = calculate_float_08000cec(param_1,uVar2);\n      uVar22 = calculate_float_08000ad8(uVar22,uVar23);\n      uVar23 = calculate_float_08000cec(uVar30,iVar9);\n      uVar24 = calculate_float_08000adc(uVar12);\n      uVar23 = calculate_float_08000adc(uVar23,uVar24);\n      uVar24 = calculate_float_08000cec(param_2,uVar2);\n      uVar23 = calculate_float_08000ad8(uVar23,uVar24);\n      uVar24 = calculate_float_08000cec(uVar31,uVar11);\n      uVar25 = calculate_float_08000ad8(0x3f000000,uVar16);\n      uVar17 = calculate_float_08000ad8(uVar25,uVar17);\n      uVar17 = calculate_float_08000cec(uVar17,iVar27);\n      uVar25 = calculate_float_08000ad8(uVar15,uVar13);\n      uVar25 = calculate_float_08000cec(uVar25,uVar11);\n      uVar17 = calculate_float_08000adc(uVar17,uVar25);\n      uVar17 = calculate_float_08000ad8(uVar17,uVar18);\n      uVar18 = calculate_float_08000cec(iVar29,uVar11);\n      uVar25 = calculate_float_08000cec(iVar29,uVar31);\n      uVar26 = calculate_float_08000cec(uVar28,uVar30);\n      uVar25 = calculate_float_08000ad8(uVar25,uVar26);\n      uVar25 = calculate_float_08000cec(uVar25,iVar27);\n      uVar26 = calculate_float_08000cec(uVar31,uVar30);\n      uVar12 = calculate_float_08000adc(uVar26,uVar12);\n      uVar12 = calculate_float_08000cec(uVar12,uVar11);\n      uVar12 = calculate_float_08000adc(uVar25,uVar12);\n      uVar12 = calculate_float_08000ad8(uVar12,uVar19);\n      uVar19 = calculate_float_08000cec(uVar31,iVar27);\n      uVar25 = calculate_float_08000ad8(0x3f000000,uVar14);\n      uVar25 = calculate_float_08000ad8(uVar25,uVar16);\n      uVar25 = calculate_float_08000cec(uVar25,uVar11);\n      uVar13 = calculate_float_08000adc(uVar13,uVar15);\n      uVar13 = calculate_float_08000cec(uVar13,iVar27);\n      uVar13 = calculate_float_08000adc(uVar25,uVar13);\n      uVar3 = calculate_float_08000ad8(uVar13,uVar3);\n      uVar13 = calculate_float_08000cec(iVar9 + -0x80000000,uVar22);\n      uVar15 = calculate_float_08000cec(uVar8,uVar23);\n      uVar13 = calculate_float_08000adc(uVar13,uVar15);\n      uVar15 = calculate_float_08000cec(uVar24,uVar17);\n      uVar13 = calculate_float_08000ad8(uVar13,uVar15);\n      uVar15 = calculate_float_08000cec(uVar30,iVar27 + -0x80000000);\n      uVar15 = calculate_float_08000adc(uVar15,uVar18);\n      uVar15 = calculate_float_08000cec(uVar15,uVar12);\n      uVar13 = calculate_float_08000adc(uVar13,uVar15);\n      uVar15 = calculate_float_08000cec(uVar19,uVar3);\n      uVar13 = calculate_float_08000adc(uVar13,uVar15);\n      uVar14 = calculate_float_08000adc(uVar14);\n      uVar14 = calculate_float_08000ad8(0x3f800000,uVar14);\n      uVar15 = calculate_float_08000adc(uVar16);\n      uVar14 = calculate_float_08000ad8(uVar14,uVar15);\n      uVar2 = calculate_float_08000cec(param_3,uVar2);\n      uVar2 = calculate_float_08000ad8(uVar14,uVar2);\n      uVar14 = calculate_float_08000cec(uVar30,uVar11);\n      uVar11 = calculate_float_08000cec(uVar28,uVar11);\n      uVar15 = calculate_float_08000cec(uVar10,uVar22);\n      uVar16 = calculate_float_08000cec(iVar4,uVar23);\n      uVar15 = calculate_float_08000adc(uVar15,uVar16);\n      uVar16 = calculate_float_08000cec(iVar29,0x40800000);\n      uVar16 = calculate_float_08000cec(uVar16,uVar2);\n      uVar15 = calculate_float_08000ad8(uVar15,uVar16);\n      uVar16 = calculate_float_08000cec(uVar17,uVar14);\n      uVar15 = calculate_float_08000adc(uVar15,uVar16);\n      uVar16 = calculate_float_08000adc(uVar19,uVar11);\n      uVar16 = calculate_float_08000cec(uVar16,uVar12);\n      uVar15 = calculate_float_08000adc(uVar15,uVar16);\n      uVar16 = calculate_float_08000cec(uVar30,iVar27);\n      uVar19 = calculate_float_08000cec(iVar29,uVar21);\n      uVar16 = calculate_float_08000ad8(uVar16,uVar19);\n      uVar16 = calculate_float_08000cec(uVar16,uVar3);\n      uVar15 = calculate_float_08000adc(uVar15,uVar16);\n      iVar20 = calculate_float_08000adc(iVar27,iVar27);\n      uVar16 = calculate_float_08000cec(iVar29,iVar27);\n      uVar19 = calculate_float_08000cec(iVar4 + -0x80000000,uVar22);\n      uVar10 = calculate_float_08000cec(uVar10,uVar23);\n      uVar10 = calculate_float_08000adc(uVar19,uVar10);\n      uVar19 = calculate_float_08000cec(uVar31,0x40800000);\n      uVar2 = calculate_float_08000cec(uVar19,uVar2);\n      uVar2 = calculate_float_08000ad8(uVar10,uVar2);\n      uVar10 = calculate_float_08000cec(uVar31,iVar20 + -0x80000000);\n      uVar10 = calculate_float_08000ad8(uVar10,uVar11);\n      uVar10 = calculate_float_08000cec(uVar10,uVar17);\n      uVar2 = calculate_float_08000adc(uVar2,uVar10);\n      uVar10 = calculate_float_08000adc(uVar14,uVar16);\n      uVar10 = calculate_float_08000cec(uVar10,uVar12);\n      uVar2 = calculate_float_08000adc(uVar2,uVar10);\n      uVar10 = calculate_float_08000cec(uVar28,iVar27);\n      uVar11 = calculate_float_08000cec(uVar31,uVar21);\n      uVar10 = calculate_float_08000ad8(uVar10,uVar11);\n      uVar10 = calculate_float_08000cec(uVar10,uVar3);\n      uVar2 = calculate_float_08000adc(uVar2,uVar10);\n      uVar8 = calculate_float_08000cec(uVar8,uVar22);\n      uVar10 = calculate_float_08000cec(iVar9,uVar23);\n      uVar8 = calculate_float_08000adc(uVar8,uVar10);\n      uVar10 = calculate_float_08000cec(uVar30,iVar20 + -0x80000000);\n      uVar10 = calculate_float_08000adc(uVar10,uVar18);\n      uVar10 = calculate_float_08000cec(uVar10,uVar17);\n      uVar8 = calculate_float_08000adc(uVar8,uVar10);\n      uVar10 = calculate_float_08000cec(uVar28,iVar27 + -0x80000000);\n      uVar10 = calculate_float_08000adc(uVar10,uVar24);\n      uVar10 = calculate_float_08000cec(uVar10,uVar12);\n      uVar8 = calculate_float_08000adc(uVar8,uVar10);\n      uVar3 = calculate_float_08000cec(uVar3,uVar16);\n      uVar3 = calculate_float_08000adc(uVar8,uVar3);\n      uVar8 = calculate_float_08000cec(uVar13);\n      uVar10 = calculate_float_08000cec(uVar15);\n      uVar8 = calculate_float_08000adc(uVar8,uVar10);\n      uVar10 = calculate_float_08000cec(uVar2,uVar2);\n      uVar8 = calculate_float_08000adc(uVar8,uVar10);\n      uVar10 = calculate_float_08000cec(uVar3,uVar3);\n      calculate_float_08000adc(uVar8,uVar10);\n      calculate_hash_08000428();\n      calculate_and_return_value_08005bc8();\n      uVar8 = calculate_float_value_08000a30();\n      uVar8 = calculate_float_value_08000e54(0x3f800000,uVar8);\n      puVar1 = PTR_DAT_08003d84;\n      uVar12 = *(undefined4 *)PTR_DAT_08003d80;\n      uVar14 = *(undefined4 *)PTR_DAT_08003d80;\n      uVar16 = *(undefined4 *)PTR_DAT_08003d80;\n      uVar17 = *(undefined4 *)PTR_DAT_08003d80;\n      uVar10 = calculate_float_08000cec(iVar29 + -0x80000000,uVar5);\n      uVar11 = calculate_float_08000cec(uVar31,uVar6);\n      uVar10 = calculate_float_08000ad8(uVar10,uVar11);\n      uVar11 = calculate_float_08000cec(uVar30,uVar7);\n      uVar10 = calculate_float_08000ad8(uVar10,uVar11);\n      uVar10 = calculate_float_08000cec(uVar10,0x3f000000);\n      uVar11 = calculate_float_08000cec(uVar13,uVar8);\n      uVar13 = *(undefined4 *)puVar1;\n      uVar11 = calculate_float_08000cec(uVar11,uVar12);\n      uVar10 = calculate_float_08000ad8(uVar10,uVar11);\n      uVar10 = calculate_float_08000cec(uVar10,uVar13);\n      uVar10 = calculate_float_08000adc(uVar10,uVar28);\n      uVar11 = calculate_float_08000cec(uVar28,uVar5);\n      uVar12 = calculate_float_08000cec(uVar31,uVar7);\n      uVar13 = *(undefined4 *)puVar1;\n      uVar11 = calculate_float_08000adc(uVar11,uVar12);\n      uVar12 = calculate_float_08000cec(uVar30,uVar6);\n      uVar11 = calculate_float_08000ad8(uVar11,uVar12);\n      uVar11 = calculate_float_08000cec(uVar11,0x3f000000);\n      uVar12 = calculate_float_08000cec(uVar15,uVar8);\n      uVar12 = calculate_float_08000cec(uVar12,uVar14);\n      uVar11 = calculate_float_08000ad8(uVar11,uVar12);\n      uVar11 = calculate_float_08000cec(uVar11,uVar13);\n      uVar11 = calculate_float_08000adc(uVar11,iVar29);\n      uVar14 = *(undefined4 *)puVar1;\n      uVar12 = calculate_float_08000cec(uVar28,uVar6);\n      uVar13 = calculate_float_08000cec(iVar29,uVar7);\n      uVar12 = calculate_float_08000ad8(uVar12,uVar13);\n      uVar13 = calculate_float_08000cec(uVar30,uVar5);\n      uVar12 = calculate_float_08000adc(uVar12,uVar13);\n      uVar12 = calculate_float_08000cec(uVar12,0x3f000000);\n      uVar2 = calculate_float_08000cec(uVar2,uVar8);\n      uVar2 = calculate_float_08000cec(uVar2,uVar16);\n      uVar2 = calculate_float_08000ad8(uVar12,uVar2);\n      uVar2 = calculate_float_08000cec(uVar2,uVar14);\n      uVar2 = calculate_float_08000adc(uVar2,uVar31);\n      uVar28 = calculate_float_08000cec(uVar28,uVar7);\n      uVar6 = calculate_float_08000cec(iVar29,uVar6);\n      uVar28 = calculate_float_08000adc(uVar28,uVar6);\n      uVar31 = calculate_float_08000cec(uVar31,uVar5);\n      uVar28 = calculate_float_08000ad8(uVar28,uVar31);\n      uVar28 = calculate_float_08000cec(uVar28,0x3f000000);\n      uVar3 = calculate_float_08000cec(uVar3,uVar8);\n      uVar3 = calculate_float_08000cec(uVar3,uVar17);\n      uVar31 = *(undefined4 *)puVar1;\n      uVar3 = calculate_float_08000ad8(uVar28,uVar3);\n      uVar3 = calculate_float_08000cec(uVar3,uVar31);\n      uVar3 = calculate_float_08000adc(uVar3,uVar30);\n      uVar28 = calculate_float_08000cec(uVar10,uVar10);\n      uVar30 = calculate_float_08000cec(uVar11,uVar11);\n      uVar28 = calculate_float_08000adc(uVar28,uVar30);\n      uVar30 = calculate_float_08000cec(uVar2,uVar2);\n      uVar28 = calculate_float_08000adc(uVar28,uVar30);\n      uVar30 = calculate_float_08000cec(uVar3,uVar3);\n      calculate_float_08000adc(uVar28,uVar30);\n      calculate_hash_08000428();\n      calculate_and_return_value_08005bc8();\n      uVar28 = calculate_float_value_08000a30();\n      uVar28 = calculate_float_value_08000e54(0x3f800000,uVar28);\n      uVar30 = calculate_float_08000cec(uVar10,uVar28);\n      puVar1 = PTR_DAT_08003d88;\n      *(undefined4 *)PTR_DAT_08003d88 = uVar30;\n      uVar31 = calculate_float_08000cec(uVar11,uVar28);\n      *(undefined4 *)(puVar1 + 4) = uVar31;\n      uVar2 = calculate_float_08000cec(uVar2,uVar28);\n      *(undefined4 *)(puVar1 + 8) = uVar2;\n      uVar3 = calculate_float_08000cec(uVar3,uVar28);\n      *(undefined4 *)(puVar1 + 0xc) = uVar3;\n      uVar3 = calculate_float_08000cec(uVar31,uVar3);\n      uVar2 = calculate_float_08000cec(uVar30,uVar2);\n      uVar2 = calculate_float_08000ad8(uVar3,uVar2);\n      calculate_float_08000adc(uVar2,uVar2);\n      calculate_hash_08000428();\n      uVar32 = validate_input_and_return_result_08005854();\n      uVar32 = calculate_ulonglong_result_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_08003d8c);\n      calculate_result_08000724((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003d78,DAT_08003d7c);\n      uVar2 = calculate_float_value_08000a30();\n      *param_10 = uVar2;\n      uVar31 = *(undefined4 *)puVar1;\n      uVar5 = *(undefined4 *)(puVar1 + 4);\n      uVar2 = calculate_float_08000cec(uVar31,uVar31);\n      uVar3 = calculate_float_08000cec(uVar5,uVar5);\n      uVar2 = calculate_float_08000ad8(uVar2,uVar3);\n      uVar28 = *(undefined4 *)(puVar1 + 8);\n      uVar3 = calculate_float_08000cec(uVar28,uVar28);\n      uVar2 = calculate_float_08000ad8(uVar2,uVar3);\n      uVar30 = *(undefined4 *)(puVar1 + 0xc);\n      uVar3 = calculate_float_08000cec(uVar30,uVar30);\n      calculate_float_08000adc(uVar2,uVar3);\n      uVar32 = calculate_hash_08000428();\n      uVar2 = calculate_float_08000cec(uVar31,uVar5);\n      uVar3 = calculate_float_08000cec(uVar28,uVar30);\n      uVar2 = calculate_float_08000adc(uVar2,uVar3);\n      calculate_float_08000adc(uVar2,uVar2);\n      uVar33 = calculate_hash_08000428();\n      uVar32 = thunk_calculate_result_08006070((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar32,\n                                  (int)((ulonglong)uVar32 >> 0x20));\n      uVar32 = calculate_ulonglong_result_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_08003ea8);\n      calculate_result_08000724((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003ea0,DAT_08003ea4);\n      uVar2 = calculate_float_value_08000a30();\n      param_10[1] = uVar2;\n      uVar30 = *(undefined4 *)puVar1;\n      uVar31 = *(undefined4 *)(puVar1 + 4);\n      uVar2 = calculate_float_08000cec(uVar30,uVar30);\n      uVar3 = calculate_float_08000cec(uVar31,uVar31);\n      uVar2 = calculate_float_08000adc(uVar2,uVar3);\n      uVar5 = *(undefined4 *)(puVar1 + 8);\n      uVar3 = calculate_float_08000cec(uVar5,uVar5);\n      uVar2 = calculate_float_08000ad8(uVar2,uVar3);\n      uVar28 = *(undefined4 *)(puVar1 + 0xc);\n      uVar3 = calculate_float_08000cec(uVar28,uVar28);\n      calculate_float_08000ad8(uVar2,uVar3);\n      uVar32 = calculate_hash_08000428();\n      uVar2 = calculate_float_08000cec(uVar31,uVar5);\n      uVar3 = calculate_float_08000cec(uVar30,uVar28);\n      uVar2 = calculate_float_08000adc(uVar2,uVar3);\n      calculate_float_08000adc(uVar2,uVar2);\n      uVar33 = calculate_hash_08000428();\n      uVar32 = thunk_calculate_result_08006070((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar32,\n                                  (int)((ulonglong)uVar32 >> 0x20));\n      uVar32 = calculate_ulonglong_result_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_08003ea8);\n      calculate_result_08000724((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003ea0,DAT_08003ea4);\n      uVar2 = calculate_float_value_08000a30();\n      param_10[2] = uVar2;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_08000724",
                "FUN_08001014",
                "FUN_08005854",
                "FUN_08000adc",
                "FUN_080004d0",
                "FUN_08000428",
                "FUN_08000e54",
                "FUN_08005bc8",
                "FUN_08000a30",
                "thunk_FUN_08006070"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003330",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "FUNC_08003330"
        },
        "FUN_08000980": {
            "renaming": {
                "FUN_08000980": "validate_params_and_return_08000980",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param"
            },
            "code": "void validate_params_and_return_08000980(undefined4 first_param, undefined4 second_param, undefined4 third_param, undefined4 fourth_param)\n{\n    validate_params_08000990(third_param, fourth_param, first_param, second_param);\n    return;\n}",
            "called": [
                "FUN_08000990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000980",
            "calling": [
                "FUN_080009f0"
            ],
            "imported": false,
            "current_name": "validate_params_and_return_08000980"
        },
        "FUN_08004028": {
            "renaming": {
                "FUN_08004028": "perform_bit_manipulation_08004028",
                "iVar1": "loop_counter",
                "FUN_0800458c": "call_function_to_initialize",
                "set_bits_in_array_08003ff4": "set_bits_in_array",
                "set_leading_zero_bits_count_in_offset_08003f3c": "set_leading_zero_bits_count_in_offset",
                "thunk_do_nothing_08001168": "wait_for_some_time"
            },
            "code": "void perform_bit_manipulation_08004028(void)\n{\n  int loop_counter;\n  call_function_to_initialize();\n  set_bits_in_array();\n  loop_counter = 3;\n  do {\n    set_leading_zero_bits_count_in_offset(1,0);\n    wait_for_some_time(100);\n    set_leading_zero_bits_count_in_offset(0,1);\n    wait_for_some_time(100);\n    set_leading_zero_bits_count_in_offset(0,0,1);\n    wait_for_some_time(100);\n    loop_counter--;\n  } while (loop_counter != 0);\n  set_leading_zero_bits_count_in_offset(1,1);\n  return;\n}",
            "called": [
                "thunk_FUN_08001168",
                "FUN_08003f3c",
                "FUN_0800458c",
                "FUN_08003ff4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004028",
            "calling": [
                "FUN_08004194"
            ],
            "imported": false,
            "current_name": "perform_bit_manipulation_08004028"
        },
        "FUN_0800708c": {
            "renaming": {
                "FUN_0800708c": "do_nothing_0800708c"
            },
            "code": "\nvoid do_nothing_0800708c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800708c",
            "calling": [
                "FUN_08006070",
                "FUN_08006228",
                "FUN_08005854",
                "FUN_08006d68",
                "FUN_08005c70"
            ],
            "imported": false,
            "current_name": "do_nothing_0800708c"
        },
        "FUN_08002368": {
            "renaming": {
                "FUN_08002368": "update_memory_08002368",
                "param_1": "memory_location",
                "param_2": "data",
                "uVar1": "original_value",
                "puVar2": "ptr_data_segment_copy"
            },
            "code": "void update_memory_08002368(uint *memory_location, uint *data)\n{\n  uint original_value = *memory_location;\n  if ((((memory_location == ptr_data_segment) || (memory_location == (uint *)0x40000000)) ||\n      (memory_location == ptr_data_segment - 0x4a00)) || (memory_location == ptr_data_segment - 0x4900)) {\n    original_value = original_value & 0xffffff8f | data[1];\n    if (((memory_location == ptr_data_segment) || (memory_location == (uint *)0x40000000)) ||\n       ((memory_location == ptr_data_segment - 0x4a00 || (memory_location == ptr_data_segment - 0x4900)))) {\n      original_value = original_value & 0xfffffcff | data[3];\n    }\n  }\n  *memory_location = original_value;\n  memory_location[0xb] = data[2];\n  memory_location[10] = *data;\n  uint *ptr_data_segment_copy = ptr_data_segment;\n  if (memory_location == ptr_data_segment) {\n    ptr_data_segment_copy = (uint *)data[4];\n  }\n  if (memory_location == ptr_data_segment) {\n    memory_location[0xc] = (uint)ptr_data_segment_copy;\n  }\n  memory_location[5] = 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002368",
            "calling": [
                "FUN_080023d0"
            ],
            "imported": false,
            "current_name": "update_memory_08002368"
        },
        "FUN_08002520": {
            "renaming": {
                "FUN_08002520": "update_bit_in_uint_array_08002520",
                "param_1": "array",
                "param_2": "index",
                "param_3": "value",
                "*(uint *)(param_1 + 0x20)": "array[0x20]",
                "uint": "uint32_t",
                "&": "&",
                "~": "~",
                "<<": "<<",
                "|": "|",
                "return;": "return;"
            },
            "code": "void update_bit_in_uint_array_08002520(uint32_t* array, uint32_t index, uint32_t value) {\n    uint32_t mask = ~(1 << (index & 0xff));\n    array[0x20] &= mask;\n    array[0x20] |= value << (index & 0xff);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002520",
            "calling": [
                "FUN_08002538"
            ],
            "imported": false,
            "current_name": "update_bit_in_uint_array_08002520"
        },
        "FUN_08002008": {
            "renaming": {
                "FUN_08002008": "calculate_value_08002008",
                "uVar1": "var1",
                "uVar2": "var2",
                "uVar3": "mask",
                "uVar4": "shift_amount",
                "uVar5": "value",
                "puVar6": "lookup_table_data",
                "puVar7": "lookup_table",
                "local_24": "local_mask",
                "local_20": "unused_data",
                "DAT_08002090": "mask_data",
                "DAT_08002094": "multiplier",
                "DAT_08002098": "unused_value"
            },
            "code": "uint calculate_value_08002008(void)\n{\n    undefined4 var1;\n    undefined4 var2;\n    uint value = 0;\n    uint mask = 0;\n    uint DAT_08002094 = 0;\n    uint lookup_table[5];\n    byte local_mask [4] = {1, 2, 0, 0};\n    \n    // Copy lookup table\n    for(int i = 0; i < 5; i++)\n    {\n        var1 = *(undefined4 *)(lookup_table_data + i * 2);\n        var2 = *(undefined4 *)(lookup_table_data + i * 2 + 4);\n        lookup_table[i * 2] = var1;\n        lookup_table[i * 2 + 1] = var2;\n    }\n    \n    mask = *(uint *)(DAT_08002090 + 4);\n    if((mask & 0xc) == 8)\n    {\n        uint shift_amount = count_leading_zeroes(0x3c00);\n        uint lookup_index = (mask & 0x3c0000) >> (shift_amount & 0xff);\n        DAT_08002094 = lookup_table[lookup_index];\n        if((int)(mask << 0xf) < 0)\n        {\n            uint divisor_shift_amount = count_leading_zeroes(0x4000);\n            uint divisor = local_mask[(mask & 0x20000) >> (divisor_shift_amount & 0xff)];\n            DAT_08002094 = DAT_08002094 / divisor;\n        }\n        value = DAT_08002094 * local_mask[lookup_index];\n    }\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002008",
            "calling": [
                "FUN_0800209c"
            ],
            "imported": false,
            "current_name": "calculate_value_08002008"
        },
        "FUN_08002404": {
            "renaming": {
                "FUN_08002404": "set_values_08002404",
                "param_1": "struct_address",
                "param_2": "values",
                "uVar1": "value1",
                "uVar2": "value2",
                "iVar3": "value3",
                "DAT_08002458": "special_struct_address",
                "bitmask1": "0xffffffef",
                "bitmask2": "0xffffffdf"
            },
            "code": "void set_values_08002404(int struct_address, int *values)\n{\n  uint bitmask1 = 0xffffffef;\n  uint bitmask2 = 0xffffffdf;\n  uint value1 = *(uint *)(struct_address + 0x20) & bitmask1;\n  uint value2 = *(uint *)(struct_address + 4);\n  int value3 = *values;\n  value1 = value1 | values[2] << 4;\n  if (struct_address == DAT_08002458) {\n    value1 = (value1 & 0xffffff7f) | values[3] << 4;\n    value2 = value2 & 0xfffff3ff | (values[5] | values[6]) << 2;\n  }\n  *(uint *)(struct_address + 4) = value2;\n  *(uint *)(struct_address + 0x18) = *(uint *)(struct_address + 0x18) & 0xffff8cff | value3 << 8;\n  *(int *)(struct_address + 0x38) = values[1];\n  *(uint *)(struct_address + 0x20) = value1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002404",
            "calling": [
                "FUN_0800245c"
            ],
            "imported": false,
            "current_name": "set_values_08002404"
        },
        "FUN_08005bc8": {
            "renaming": {
                "FUN_08005bc8": "calculate_and_return_value_08005bc8",
                "param_1": "input1",
                "param_2": "input2",
                "cVar1": "char_value",
                "iVar2": "is_string_terminated",
                "piVar3": "pointer_to_int",
                "puVar4": "pointer_to_undefined4",
                "uVar5": "return_value",
                "local_50": "local_variable_50",
                "local_4c": "local_pointer",
                "local_48": "local_variable_48",
                "uStack_44": "stack_variable_44",
                "local_40": "local_variable_40",
                "uStack_3c": "stack_variable_3c",
                "local_38": "local_variable_38",
                "local_30": "is_valid_input"
            },
            "code": "undefined8 calculate_and_return_value_08005bc8(undefined4 input1, undefined4 input2)\n{\n    char char_value;\n    int is_valid_input;\n    int *pointer_to_int;\n    undefined4 *pointer_to_undefined4;\n    undefined8 return_value;\n    undefined4 local_50;\n    undefined *local_pointer;\n    undefined4 local_48;\n    undefined4 uStack_44;\n    undefined4 local_40;\n    undefined4 uStack_3c;\n    undefined8 local_38;\n    int is_string_terminated;\n    \n    return_value = calculate_float_value();\n    char_value = *PTR_DAT_08005c68;\n    if (char_value == -1) {\n        return return_value;\n    }\n    is_valid_input = is_input_valid(input1, input2, input1, input2);\n    if (is_valid_input != 0) {\n        return return_value;\n    }\n    is_string_terminated = is_string_terminated(input1, input2, 0, 0);\n    if (is_string_terminated == 0) {\n        return return_value;\n    }\n    local_50 = 1;\n    local_pointer = PTR_DAT_08005c6c;\n    local_48 = input1;\n    uStack_44 = input2;\n    local_40 = input1;\n    uStack_3c = input2;\n    if (char_value == '\\0') {\n        local_38 = 0;\n        \n        LAB_08005c26:\n        is_valid_input = return_zero(&local_50);\n        if (is_valid_input != 0) goto LAB_08005c2e;\n    }\n    else {\n        local_38 = calculate_result_08000724(0, 0, 0, 0);\n        if (char_value != '\\x02') goto LAB_08005c26;\n    }\n    pointer_to_undefined4 = (undefined4 *)get_value_from_pointer_080072ac();\n    *pointer_to_undefined4 = 0x21;\n    LAB_08005c2e:\n    if (is_valid_input != 0) {\n        pointer_to_int = (int *)get_value_from_pointer_080072ac();\n        *pointer_to_int = is_valid_input;\n    }\n    return local_38;\n}",
            "called": [
                "FUN_08000a04",
                "FUN_08006c0c",
                "FUN_08000724",
                "FUN_0800709e",
                "FUN_080072ac",
                "FUN_080009b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bc8",
            "calling": [
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "calculate_and_return_value_08005bc8"
        },
        "FUN_08001436": {
            "renaming": {
                "FUN_08001436": "clear_flag_if_set_08001436",
                "param_1": "data",
                "*param_1": "data_ptr",
                "iVar1": "data_ptr",
                "*(uint *)(iVar1 + 0x14)": "*(uint *)(data_ptr + 0x14)",
                "param_1[0xe]": "data[14]",
                "*(undefined *)((int)param_1 + 0x35)": "*(undefined *)((int)data + 0x35)",
                "*(undefined *)(param_1 + 0xd)": "*(undefined *)(data + 13)"
            },
            "code": "int clear_flag_if_set_08001436(int *data)\n{\n  int data_ptr = *data;\n  if ((*(uint *)(data_ptr + 0x14) & 0x400) != 0) {\n    *(uint *)(data_ptr + 0x14) = *(uint *)(data_ptr + 0x14) & 0xfffffbff;\n    data[14] = 4;\n    *(undefined *)((int)data + 0x35) = 0x20;\n    *(undefined *)(data + 13) = 0;\n    return 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001436",
            "calling": [
                "FUN_080014e2"
            ],
            "imported": false,
            "current_name": "clear_flag_if_set_08001436"
        },
        "FUN_08004a30": {
            "renaming": {
                "FUN_08004a30": "update_data_if_needed_08004a30",
                "puVar1": "data_start_ptr",
                "puVar2": "data_mid_ptr",
                "puVar3": "data_end_ptr",
                "uVar4": "value"
            },
            "code": "void update_data_if_needed_08004a30() {\\n  undefined *data_end_ptr = PTR_DAT_08004a7c;\\n  undefined *data_mid_ptr = PTR_DAT_08004a78;\\n  undefined *data_start_ptr = PTR_DAT_08004a74;\\n  \\n  if (data_start_ptr[1] != \"\\0\") {\\n    if (*data_mid_ptr == \"\\0\") {\\n      undefined4 value = get_value_from_pointer_08003068();\\n      value = calculate_float_08000cec(value, DAT_08004a80);\\n      *(undefined4 *)(data_end_ptr + 0x1c) = value;\\n      *data_mid_ptr = 1;\\n    }\\n    else {\\n      undefined4 value = get_value_from_pointer_08003068();\\n      value = calculate_float_08000cec(value, DAT_08004a80);\\n      *(undefined4 *)(data_end_ptr + 0x30) = value;\\n    }\\n  }\\n  if (data_start_ptr[1] == \"\\0\") {\\n    if (*data_mid_ptr != \"\\0\") {\\n      *data_mid_ptr = 0;\\n    }\\n    *(undefined4 *)(data_end_ptr + 0x48) = *(undefined4 *)(data_start_ptr + 4);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08003068",
                "FUN_08000cec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a30",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "update_data_if_needed_08004a30"
        },
        "FUN_08004c70": {
            "renaming": {
                "FUN_08004c70": "initialize_and_check_data_08004c70",
                "puVar1": "data_ptr_1",
                "puVar2": "data_ptr_2",
                "uVar3": "data_1",
                "uVar4": "uint32_var_1",
                "iVar5": "int_var_1"
            },
            "code": "int initialize_and_check_data_08004c70() {\n  undefined *data_ptr_1;\n  undefined *data_ptr_2;\n  undefined data_1;\n  uint32_t uint32_var_1;\n  int int_var_1;\n  initialize_data();\n  data_ptr_2 = PTR_DAT_08004c88;\n  data_ptr_1 = PTR_DAT_08004c84;\n  if ((PTR_DAT_08004c88[0x39] == '\\x01') || (PTR_DAT_08004c88[0x39] == '\\x12')) {\n    if (PTR_DAT_08004c84 == (undefined *)0x0) {\n      return 1;\n    }\n    if (PTR_DAT_08004c88[0x38] != '\\x01') {\n      PTR_DAT_08004c88[0x38] = 1;\n      *(undefined4 *)(data_ptr_2 + 0x3c) = 0;\n      *(uint16_t *)(data_ptr_2 + 0x2c) = 1;\n      *(uint16_t *)(data_ptr_2 + 0x2e) = 1;\n      data_ptr_2[0x38] = 0;\n      if (data_ptr_2[0x39] == '\\x12') {\n        data_1 = 0x32;\n      }\n      else {\n        data_1 = 0x22;\n      }\n      int_var_1 = *(int *)data_ptr_2;\n      data_ptr_2[0x39] = data_1;\n      uint32_var_1 = *(uint32_t *)(int_var_1 + 0xc);\n      *(undefined **)(data_ptr_2 + 0x28) = data_ptr_1;\n      *(uint32_t *)(int_var_1 + 0xc) = uint32_var_1 | 0x100;\n      *(uint32_t *)(int_var_1 + 0x14) = *(uint32_t *)(int_var_1 + 0x14) | 1;\n      *(uint32_t *)(int_var_1 + 0xc) = *(uint32_t *)(int_var_1 + 0xc) | 0x20;\n      return 0;\n    }\n  }\n  return 2;\n}\n",
            "called": [
                "FUN_08004c64"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c70",
            "calling": [
                "FUN_08004194"
            ],
            "imported": false,
            "current_name": "initialize_and_check_data_08004c70"
        },
        "FUN_08000904": {
            "renaming": {
                "FUN_08000904": "check_params_08000904",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "xor_result",
                "bVar2": "are_both_zero",
                "bVar3": "is_xor_result_positive"
            },
            "code": "uint check_params_08000904(uint first_param, uint second_param, uint third_param, uint fourth_param)\n{\n  bool is_negative1 = ((int)(second_param << 1) >> 0x15 == -1 || (int)(fourth_param << 1) >> 0x15 == -1);\n  if (is_negative1 && ((((int)(second_param << 1) >> 0x15 == -1 && ((first_param | second_param << 0xc) != 0)) || (((int)(fourth_param << 1) >> 0x15 == -1 && ((third_param | fourth_param << 0xc) != 0)))))) {\n    return 1;\n  }\n  bool are_both_zero = (first_param | second_param << 1) == 0 && (third_param | fourth_param << 1) == 0;\n  if (!are_both_zero) {\n    bool are_second_and_fourth_equal = second_param == fourth_param;\n    if (are_second_and_fourth_equal) {\n      bool are_first_and_third_equal = first_param == third_param;\n      if (are_first_and_third_equal) {\n        return 0;\n      }\n    }\n    else {\n      uint xor_result = second_param ^ fourth_param;\n      bool is_xor_result_positive = -1 < (int)xor_result;\n      if (is_xor_result_positive) {\n        if (second_param == fourth_param) {\n          bool is_third_param_less_than_or_equal_to_first_param = third_param <= first_param;\n          if (is_third_param_less_than_or_equal_to_first_param) {\n            return 1;\n          }\n        }\n      }\n      else {\n        bool is_fourth_param_less_than_or_equal_to_second_param = fourth_param <= second_param;\n        if (!is_fourth_param_less_than_or_equal_to_second_param) {\n          return ~1;\n        }\n      }\n    }\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000904",
            "calling": [
                "FUN_08000990"
            ],
            "imported": false,
            "current_name": "check_params_08000904"
        },
        "FUN_0800299a": {
            "renaming": {
                "FUN_0800299a": "process_data_0800299a",
                "param_1": "data",
                "puVar6": "first_word_ptr",
                "uVar3": "first_word",
                "uVar1": "third_word",
                "bVar8": "is_bit_set_2",
                "uVar7": "is_bit_set",
                "puVar4": "eighth_word",
                "sVar2": "word_26",
                "process_data_0800290c": "process_data_0800290c",
                "param_1[0xf]": "data[15]",
                "do_nothing_08002998": "do_nothing",
                "*(undefined *)((int)param_1 + 0x39)": "flag",
                "*(byte *)puVar4": "byte_value",
                "*(ushort *)puVar4": "ushort_value"
            },
            "code": "void process_data_0800299a(uint **data)\n{\n  uint first_word = **data;\n  uint third_word = (*data)[3];\n  bool is_zero = (first_word & 0xf) == 0;\n  bool is_negative = (int)(first_word << 0x1a) < 0 && (int)(third_word << 0x1a) < 0;\n  if (is_zero && is_negative) {\n    process_data_0800299a_0800290c();\n    return;\n  }\n  else if (!is_zero) {\n    uint fifth_word = (*data)[5];\n    bool is_bit_set = (fifth_word & 1) != 0 || (third_word & 0x120) != 0;\n    if (is_bit_set) {\n      uint *fifteenth_word = (uint *)(first_word << 0x1f);\n      bool is_bit_set_2 = (int)(third_word << 0x17) < 0;\n      if (is_bit_set_2) {\n        fifteenth_word = (uint *)((uint)(*data)[15] | 1);\n        (*data)[15] = fifteenth_word;\n      }\n      if ((int)(first_word << 0x1d) < 0 && is_bit_set) {\n        (*data)[15] = (uint *)((uint)(*data)[15] | 2);\n      }\n      if ((int)(first_word << 0x1e) < 0 && is_bit_set) {\n        (*data)[15] = (uint *)((uint)(*data)[15] | 4);\n      }\n      if ((int)(first_word << 0x1c) < 0 && is_bit_set) {\n        (*data)[15] = (uint *)((uint)(*data)[15] | 8);\n      }\n      if ((*data)[15] == (uint *)0x0) {\n        return;\n      }\n      if (is_negative) {\n        process_data_0800299a(data);\n      }\n      uint *first_word_ptr = *data;\n      if ((int)(*data)[15] << 0x1c >= 0 && (fifth_word & 0x40) == 0) {\n        do_nothing(data);\n        (*data)[15] = (uint *)0x0;\n        return;\n      }\n      first_word_ptr[3] &= 0xfffffedf;\n      first_word_ptr[5] &= 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 1;\n      do_nothing(data);\n      return;\n    }\n  }\n  else if ((int)(first_word << 0x18) < 0 && (int)(third_word << 0x18) < 0) {\n    byte flag = *(byte *)((int)data + 0x39);\n    if ((flag & 0xdf) == 0x12) {\n      uint *eighth_word = (*data)[8];\n      if ((*data)[2] == (uint *)0x1000) {\n        first_word_ptr[1] = *(ushort *)eighth_word & 0x1ff;\n        if ((*data)[4] == (uint *)0x0) {\n          eighth_word = (uint *)((int)eighth_word + 2);\n        }\n        else {\n          eighth_word = (uint *)((int)eighth_word + 1);\n        }\n        (*data)[8] = eighth_word;\n      }\n      else {\n        (*data)[8] = (uint *)((int)eighth_word + 1);\n        first_word_ptr[1] = (uint)*(byte *)eighth_word;\n      }\n      short *word_26 = (short *)((int)data + 0x26);\n      *word_26 = *word_26 - 1;\n      if (*word_26 == 0) {\n        first_word_ptr[3] &= 0xffffff7f;\n        first_word_ptr[3] |= 0x40;\n        return;\n      }\n    }\n  }\n  else if ((int)(first_word << 0x19) < 0 && (int)(third_word << 0x19) < 0) {\n    first_word_ptr[3] &= 0xffffffbf;\n    byte flag = *(byte *)((int)data + 0x39);\n    if (flag == '2') {\n      *(undefined *)((int)data + 0x39) = 0x22;\n    }\n    else {\n      *(undefined *)((int)data + 0x39) = 1;\n    }\n    do_nothing_0800290a(data);\n  }\n  return;\n}",
            "called": [
                "FUN_08002998",
                "FUN_0800290a",
                "FUN_0800290c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800299a",
            "calling": [],
            "imported": false,
            "current_name": "process_data_0800299a"
        },
        "FUN_0800114c": {
            "renaming": {
                "FUN_0800114c": "increment_pointer_0800114c",
                "PTR_DAT_08001158": "pointer",
                "int": "integer"
            },
            "code": "void increment_pointer_0800114c(void)\n{\n  int* PTR_DAT_08001158 = (int*)PTR_DAT_08001158;\n  *PTR_DAT_08001158 = *PTR_DAT_08001158 + 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800114c",
            "calling": [
                "FUN_080041ae"
            ],
            "imported": false,
            "current_name": "increment_pointer_0800114c"
        },
        "FUN_080052e4": {
            "renaming": {
                "FUN_080052e4": "encode_data_080052e4",
                "param_1": "data",
                "param_2": "buffer_start",
                "param_3": "buffer_end",
                "param_4": "flags",
                "param_5": "encoder",
                "iVar1": "status",
                "uVar2": "buffer_length",
                "uVar3": "data_type",
                "bVar4": "is_data_type_4",
                "padding": "padding",
                "padding_length": "padding_size",
                "buffer_size": "buffer_size"
            },
            "code": "uint32_t encode_data_080052e4(uint32_t data, uint32_t *buffer_start, uint32_t *buffer_end, uint32_t flags, code *encoder) {\n  uint32_t buffer_length = buffer_start[4];\n  if (buffer_length < buffer_start[2]) {\n    buffer_length = buffer_start[2];\n  }\n  *buffer_end = buffer_length;\n  if (*(char *)((int)buffer_start + 0x43) != '\\0') {\n    *buffer_end = buffer_length + 1;\n  }\n  if ((int)(data << 0x1a) < 0) {\n    *buffer_end = *buffer_end + 2;\n  }\n  uint32_t data_type = data & 6;\n  if (data_type == 0) {\n    for (; (int)data_type < (int)(buffer_start[3] - *buffer_end); data_type = data_type + 1) {\n      int status = (*encoder)(data, flags, (int)buffer_start + 0x19, 1);\n      if (status == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  uint32_t padding = (uint32_t)*(byte *)((int)buffer_start + 0x43);\n  if (padding != 0) {\n    padding = 1;\n  }\n  uint32_t padding_length = padding;\n  if ((int)(data << 0x1a) < 0) {\n    *(undefined *)((int)buffer_start + padding + 0x43) = 0x30;\n    padding_length = padding + 2;\n    *(undefined *)((int)buffer_start + padding + 0x44) = *(undefined *)((int)buffer_start + 0x45);\n  }\n  int status = (*encoder)(data, flags, (int)buffer_start + 0x43, padding_length);\n  if (status != -1) {\n    uint32_t buffer_size = buffer_start[3];\n    bool is_data_type_4 = (data & 6) != 4;\n    if (is_data_type_4) {\n      buffer_size = 0;\n    }\n    uint32_t padding_size = 0;\n    if (!is_data_type_4) {\n      buffer_size = buffer_size - *buffer_end;\n    }\n    if (!is_data_type_4) {\n      buffer_size = buffer_size & ~((int)buffer_size >> 0x1f);\n    }\n    if (buffer_start[4] < buffer_start[2]) {\n      buffer_size = buffer_size + (buffer_start[2] - buffer_start[4]);\n    }\n    while (true) {\n      if (padding_size == buffer_size) {\n        return 0;\n      }\n      status = (*encoder)(data, flags, (int)buffer_start + 0x1a, 1);\n      if (status == -1) {\n        break;\n      }\n      padding_size = padding_size + 1;\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052e4",
            "calling": [
                "FUN_080053d4"
            ],
            "imported": false,
            "current_name": "encode_data_080052e4"
        },
        "FUN_080014e2": {
            "renaming": {
                "FUN_080014e2": "check_value_080014e2",
                "param_1": "pointer_array",
                "param_2": "value_limit",
                "iVar1": "start_value",
                "iVar2": "flag_cleared"
            },
            "code": "int check_value_080014e2(int *pointer_array, uint32_t value_limit) {\n  int start_value = get_start_value();\n  while(true) {\n    if (*(int *)(*(pointer_array + 0) + 20) << 24 < 0) {\n      return 0;\n    }\n    int flag_cleared = clear_flag_if_set(pointer_array);\n    if (flag_cleared != 0) break;\n    if ((value_limit != UINT32_MAX) && ((value_limit == 0 || (get_start_value() - start_value) > value_limit))) {\n      pointer_array[14] = pointer_array[14] | 32;\n      *(undefined *)((int)pointer_array + 53) = 32;\n      *(undefined *)(pointer_array + 13) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_0800115c",
                "FUN_08001436"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014e2",
            "calling": [
                "FUN_08001530",
                "FUN_08001828",
                "FUN_080015e8"
            ],
            "imported": false,
            "current_name": "check_value_080014e2"
        },
        "FUN_0800142e": {
            "renaming": {
                "FUN_0800142e": "xor_param_with_offset_0800142e",
                "param_1": "ptr_param",
                "param_2": "offset",
                "PTR_": "ptr_",
                "DAT_": "data_"
            },
            "code": "void xor_param_with_offset_0800142e(uint32_t* PTR_param, uint32_t offset) {\n    uint32_t* PTR_offset_param = PTR_param + 0xc;\n    *PTR_offset_param = offset ^ *PTR_offset_param;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800142e",
            "calling": [
                "FUN_08004490"
            ],
            "imported": false,
            "current_name": "xor_param_with_offset_0800142e"
        },
        "FUN_08004d8c": {
            "renaming": {
                "FUN_08004d8c": "update_status_08004d8c",
                "param_1": "status",
                "iVar1": "current_status",
                "DAT_08004e04": "STATUS_A",
                "DAT_08004e08": "STATUS_REGISTER",
                "DAT_08004e0c": "STATUS_C",
                "DAT_08004e10": "STATUS_D",
                "_DAT_4002101c": "STATUS_B_REGISTER",
                "0x40000000": "STATUS_B_BIT",
                "0x800": "STATUS_A_BIT",
                "0x2": "STATUS_C_BIT",
                "0x4": "STATUS_D_BIT"
            },
            "code": "void update_status_08004d8c(int *status)\n{\n  int current_status = *status;\n  \n  if (current_status == DAT_08004e04) {\n    *(uint *)(DAT_08004e08 + 0x18) |= DAT_08004e04_BIT;\n  }\n  else if (current_status == STATUS_B) {\n    _DAT_4002101c |= STATUS_B_BIT;\n  }\n  else if (current_status == DAT_08004e0c) {\n    *(uint *)(DAT_08004e08 + 0x1c) |= DAT_08004e0c_BIT;\n  }\n  else if (current_status == DAT_08004e10) {\n    *(uint *)(DAT_08004e08 + 0x1c) |= DAT_08004e10_BIT;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d8c",
            "calling": [
                "FUN_080023d0"
            ],
            "imported": false,
            "current_name": "update_status_08004d8c"
        },
        "FUN_08002250": {
            "renaming": {
                "FUN_08002250": "extract_bits_from_uint_08002250",
                "uVar1": "count",
                "PTR_DAT_0800227c": "data_pointer",
                "PTR_DAT_08002278": "shift_array",
                "DAT_08002274": "offset",
                "count_leading_zeroes": "count_leading_zeroes",
                "num": "input_uint",
                "count": "leading_zero_count",
                "mask": "bit_mask",
                "shift": "bit_shift",
                "index": "array_index"
            },
            "code": "uint extract_bits_from_uint_08002250(uint num) {\n  uint count = 0;\n  while(num) {\n    num >>= 1;\n    count++;\n  }\n  return 32 - count;\n}\n\nuint extract_bits_from_uint_08002250(uint num) {\n  uint mask = 0x3800;\n  uint shift = extract_bits_from_uint_08002250(0x1c0000);\n  uint index = (num & mask) >> shift;\n  return *(uint *)PTR_DAT_0800227c >> PTR_DAT_08002278[index];\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002250",
            "calling": [
                "FUN_080025e8"
            ],
            "imported": false,
            "current_name": "extract_bits_from_uint_08002250"
        },
        "FUN_080009b4": {
            "renaming": {
                "FUN_080009b4": "is_string_terminated_080009b4",
                "in_CY": "current_char",
                "validate_params_08000990": "validate_parameters"
            },
            "code": "bool is_string_terminated_080009b4() {\n  char current_char;\n  validate_parameters();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_08000990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009b4",
            "calling": [
                "FUN_08005900",
                "FUN_08005bc8"
            ],
            "imported": false,
            "current_name": "is_string_terminated_080009b4"
        },
        "FUN_080011fc": {
            "renaming": {
                "FUN_080011fc": "set_bit_in_array_080011fc",
                "param_1": "bit_position",
                "PTR_DAT_08001210": "array_ptr",
                "DAT_08001210": "array_base_address"
            },
            "code": "void set_bit_in_array_080011fc(uint bit_position) {\n    int* PTR_DAT_08001210 = (int*)(DAT_08001210 + (bit_position >> 5) * 4);\n    int bit_mask = 1 << (bit_position & 0x1f);\n    *PTR_DAT_08001210 = bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011fc",
            "calling": [
                "FUN_08004e7c"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_080011fc"
        },
        "FUN_08003068": {
            "renaming": {
                "FUN_08003068": "get_value_from_pointer_08003068",
                "PTR_DAT_08003070": "pointer_to_value"
            },
            "code": "int get_value_from_pointer_08003068() {\n  int* PTR_DAT_08003070 = (int*) PTR_DAT_08003070;\n  int value = *PTR_DAT_08003070;\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003068",
            "calling": [
                "FUN_08004a30"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08003068"
        },
        "FUN_08005646": {
            "renaming": {
                "FUN_08005646": "reverse_copy_memory_08005646",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "num_bytes",
                "puVar1": "dest_end"
            },
            "code": "void reverse_copy_memory_08005646(unsigned char *dest, const unsigned char *src, size_t num_bytes)\n{\n    unsigned char *dest_end = dest + num_bytes;\n    if ((src < dest) && (dest < dest_end)) {\n        dest = dest + num_bytes;\n        num_bytes = num_bytes - (int)dest_end;\n        while (dest_end + num_bytes != NULL) {\n            dest_end--;\n            dest--;\n            *dest = *dest_end;\n        }\n        return;\n    }\n    dest--;\n    for (; src != dest_end; src++) {\n        dest++;\n        *dest = *src;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005646",
            "calling": [
                "FUN_08005044"
            ],
            "imported": false,
            "current_name": "reverse_copy_memory_08005646"
        },
        "FUN_08000990": {
            "renaming": {
                "FUN_08000990": "validate_params_08000990",
                "param_1": "input_param",
                "check_params_08000904": "check_params"
            },
            "code": "undefined4 validate_params_08000990(undefined4 input_param)\n{\n  check_params();\n  return input_param;\n}",
            "called": [
                "FUN_08000904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000990",
            "calling": [
                "FUN_080009c8",
                "FUN_080009a0",
                "FUN_08000980",
                "FUN_080009b4"
            ],
            "imported": false,
            "current_name": "validate_params_08000990"
        },
        "FUN_08000110": {
            "renaming": {
                "FUN_08000110": "check_if_initialized_and_return_function_pointer_08000110",
                "param_1": "function_pointer",
                "*PTR_DAT_08000128": "*PTR_INITIALIZED_FLAG",
                "DAT_0800012c": "DAT_NON_ZERO",
                "PTR_FUN_08000130": "PTR_FUNTION"
            },
            "code": "undefined* check_if_initialized_and_return_function_pointer_08000110(undefined* function_pointer) {\\n  if (*PTR_DAT_08000128 == \"\\0\") {\\n    if (DAT_0800012c != 0) {\\n      function_pointer = PTR_FUN_08000130;\\n    }\\n    *PTR_DAT_08000128 = 1;\\n  }\\n  return function_pointer;\\n}",
            "called": [
                "FUN_080072d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000110",
            "calling": [],
            "imported": false,
            "current_name": "check_if_initialized_and_return_function_pointer_08000110"
        },
        "FUN_0800709e": {
            "renaming": {
                "FUN_0800709e": "returnZero_0800709e"
            },
            "code": "int returnZero_0800709e(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800709e",
            "calling": [
                "FUN_08005854",
                "FUN_08005900",
                "FUN_08005bc8"
            ],
            "imported": false,
            "current_name": "returnZero_0800709e"
        },
        "FUN_08002ec0": {
            "renaming": {
                "FUN_08002ec0": "calculate_average_08002ec0",
                "*puVar1": "data_pointer",
                "uVar2": "value1",
                "uVar3": "value2",
                "uVar4": "value3"
            },
            "code": "void calculate_average_08002ec0(void)\n{\n    undefined *data_pointer;\n    undefined4 value1;\n    undefined4 value2;\n    undefined4 value3;\n\n    data_pointer = PTR_DAT_08002ed0;\n    value2 = *(undefined4 *)(PTR_DAT_08002ed0 + 4);\n    value1 = calculate_float_08000ad8(0x3f800000, value2);\n    value1 = calculate_float_08000cec(value1, *(undefined4 *)(PTR_DAT_08002ecc + 4));\n    value3 = calculate_float_08000cec(value2, *(undefined4 *)data_pointer);\n    value1 = calculate_float_08000adc(value3, value1);\n    *(undefined4 *)data_pointer = value1;\n    return;\n}",
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_08000adc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ec0",
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "calculate_average_08002ec0"
        },
        "FUN_08004434": {
            "renaming": {
                "FUN_08004434": "process_data_08004434",
                "param_1": "param_1",
                "param_2": "modified_param_2",
                "param_3": "local_variable",
                "local_10": "starting_ptr",
                "local_c": "modified_param_2",
                "uStack_8": "local_variable"
            },
            "code": "void process_data_08004434(uint16_t param_1, uint32_t param_2, uint32_t param_3)\n{\n  uint32_t starting_ptr = *(uint32_t *)PTR_DAT_08004454;\n  uint32_t modified_param_2 = param_2 & 0xffff0000 | (uint32_t)*(uint16_t *)(PTR_DAT_08004454 + 4);\n  uint32_t local_variable = param_3;\n  process_string_and_data_08004300(0x6d, &starting_ptr, 6);\n  return;\n}",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004434",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "process_data_08004434"
        },
        "FUN_08001168": {
            "renaming": {
                "FUN_08001168": "do_nothing_08001168"
            },
            "code": "\nvoid do_nothing_08001168(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001168",
            "calling": [
                "thunk_FUN_08001168",
                "FUN_08001b58"
            ],
            "imported": false,
            "current_name": "do_nothing_08001168"
        },
        "FUN_08006c0c": {
            "renaming": {
                "FUN_08006c0c": "calculate_float_08006c0c",
                "param_1": "numerator",
                "param_2": "denominator",
                "uVar1": "quotient_high",
                "uVar2": "quotient_low",
                "iVar3": "numerator_shift_count",
                "uVar4": "shifted_denominator",
                "uVar5": "shifted_numerator",
                "iVar7": "exponent",
                "uVar8": "temp",
                "uVar9": "divisor",
                "uVar11": "quotient_accumulator",
                "uVar12": "remainder_mask",
                "uVar13": "quotient",
                "iVar10": "temp_accumulator",
                "accumulator": "accumulator",
                "mask": "mask",
                "DAT_08006d60": "constant",
                "FUN_080004d0": "function_1",
                "FUN_0800016c": "function_2",
                "FUN_08000168": "function_3",
                "FUN_08000724": "function_4"
            },
            "code": "undefined8 calculate_float_08006c0c(uint numerator, uint denominator)\n{\n  undefined4 quotient_high;\n  uint quotient_low;\n  int numerator_shift_count;\n  uint shifted_numerator;\n  uint shifted_denominator;\n  int exponent;\n  uint temp;\n  \n  if ((0x08006d60 & ~denominator) == 0) {\n    undefined8 quotient = calculate_ulonglong_result_080004d0(numerator, denominator, numerator, denominator);\n    quotient = calculate_double_precision_0800016c(numerator, denominator, (int)quotient, (int)((ulonglong)quotient >> 0x20));\n    return quotient;\n  }\n  if ((int)denominator < 1) {\n    if ((denominator & 0x7fffffff | numerator) == 0) {\n      return CONCAT44(denominator, numerator);\n    }\n    if (denominator != 0) {\n      undefined8 quotient = calculate_double_precision_08000168(numerator, denominator, numerator, denominator);\n      quotient_high = (undefined4)((ulonglong)quotient >> 0x20);\n      quotient = calculate_result_08000724((int)quotient, quotient_high, (int)quotient, quotient_high);\n      return quotient;\n    }\n  }\n  numerator_shift_count = (int)denominator >> 0x14;\n  if (numerator_shift_count == 0) {\n    while (denominator == 0) {\n      numerator_shift_count = numerator_shift_count + -0x15;\n      shifted_denominator = numerator >> 0xb;\n      numerator = numerator << 0x15;\n    }\n    exponent = 0;\n    for (; -1 < (int)(shifted_denominator << 0xb); shifted_denominator = shifted_denominator << 1) {\n      exponent = exponent + 1;\n    }\n    numerator_shift_count = numerator_shift_count - (exponent - 1);\n    shifted_denominator = shifted_denominator | numerator >> (0x20 - exponent & 0xff);\n    numerator = numerator << (exponent & 0xff);\n  }\n  temp = shifted_denominator & 0xfffff | 0x100000;\n  if ((numerator_shift_count + -0x3ff) * -0x80000000 < 0) {\n    temp = temp * 2 - ((int)numerator >> 0x1f);\n    numerator = numerator << 1;\n  }\n  temp = temp * 2 - ((int)numerator >> 0x1f);\n  uint divisor = 0x16;\n  uint accumulator = 0;\n  uint mask = 0x200000;\n  numerator = numerator << 1;\n  do {\n    int temp_accumulator = accumulator + mask;\n    if (temp_accumulator <= (int)temp) {\n      temp = temp - temp_accumulator;\n      accumulator = temp_accumulator + mask;\n      divisor = divisor + mask;\n    }\n    divisor = divisor - 1;\n    temp = temp * 2 - ((int)numerator >> 0x1f);\n    mask = mask >> 1;\n    numerator = numerator << 1;\n  } while (divisor != 0);\n  uint remainder_mask = 0x80000000;\n  uint quotient_mask = divisor;\n  uint quotient = accumulator;\n  do {\n    uint quotient_accumulator = quotient_mask + divisor;\n    uint temp_accumulator = accumulator;\n    if (((int)temp_accumulator < (int)temp) || ((temp == temp_accumulator) && (quotient_accumulator <= numerator))) {\n      quotient_mask = quotient_accumulator + quotient_mask;\n      if (((int)quotient_accumulator < 0) && (-1 < (int)quotient_mask)) {\n        temp_accumulator = accumulator + 1;\n      }\n      temp = temp - accumulator;\n      if (numerator < quotient_accumulator) {\n        temp = temp - 1;\n      }\n      numerator = numerator - quotient_accumulator;\n      quotient_mask = quotient_mask + divisor;\n    }\n    temp = temp * 2 - ((int)numerator >> 0x1f);\n    remainder_mask = remainder_mask >> 1;\n    accumulator = temp_accumulator >> 1;\n    divisor = divisor >> 1;\n  } while (remainder_mask != 0);\n  if ((numerator | temp) != 0) {\n    if (quotient_mask == 0xffffffff) {\n      divisor = divisor + 1;\n      quotient_mask = remainder_mask;\n    }\n    else {\n      quotient_mask = quotient_mask + 1 & 0xfffffffe;\n    }\n  }\n  quotient_mask = quotient_mask >> 1;\n  if (accumulator << 0x1f < 0) {\n    quotient_mask = quotient_mask | 0x80000000;\n  }\n  return CONCAT44((accumulator >> 1) + 0x3fe00000 + (numerator_shift_count + -0x3ff >> 1) * 0x100000, quotient_mask);\n}",
            "called": [
                "FUN_08000724",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_0800016c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c0c",
            "calling": [
                "FUN_08006228",
                "FUN_08005c70",
                "FUN_08005bc8"
            ],
            "imported": false,
            "current_name": "calculate_float_08006c0c"
        },
        "FUN_0800426c": {
            "renaming": {
                "FUN_0800426c": "calculate_values_and_set_parameters_0800426c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "pointer1",
                "puVar2": "pointer2",
                "uVar3": "value1",
                "uVar4": "value2",
                "uVar5": "value3",
                "uVar6": "value4",
                "uVar7": "value5",
                "uVar8": "value6",
                "uVar9": "max_value"
            },
            "code": "void calculate_values_and_set_parameters_0800426c(int param1, int param2, int param3, int param4)\n{\n  int value1, value2, value3, value4;\n  value1 = get_value_from_function1();\n  value2 = get_value_from_function2(param1, param2);\n  value3 = get_value_from_function1(value1, param3);\n  value3 = get_value_from_function2(value3, param4);\n  set_data_in_memory_location_08003fc4(value3, 0x080042fc);\n  value4 = convert_param_to_int_08001078();\n  value3 = get_value_from_function1(value2, param3);\n  value3 = get_value_from_function2(value3, param4);\n  set_data_in_memory_location_08003fc4(value3, 0x080042fc);\n  int value5 = convert_param_to_int_08001078();\n  value1 = get_value_from_function2(value1, param3);\n  value1 = get_value_from_function1(value1, param4);\n  set_data_in_memory_location_08003fc4(value1, 0x080042fc);\n  int value6 = convert_param_to_int_08001078();\n  value1 = get_value_from_function2(param3, value2);\n  value1 = get_value_from_function2(value1, param4);\n  set_data_in_memory_location_08003fc4(value1, 0x080042fc);\n  int max_value = 1000;\n  if (999 < value6) {\n    value6 = max_value;\n  }\n  if (999 < value5) {\n    value5 = max_value;\n  }\n  if (999 < value4) {\n    value4 = max_value;\n  }\n  if (999 < value4) {\n    value4 = max_value;\n  }\n  *(uint *)(PTR_DAT_08004264 + 8) = value3 & ~((int)value3 >> 0x1f);\n  *(uint *)(PTR_DAT_08004264 + 0xc) = value4 & ~((int)value4 >> 0x1f);\n  *(uint *)(PTR_DAT_08004264 + 4) = value5 & ~((int)value5 >> 0x1f);\n  *(uint *)PTR_DAT_08004264 = value6 & ~((int)value6 >> 0x1f);\n  set_data_in_struct_08003fd0(*(uint *)(PTR_DAT_08004264 + 4));\n  set_parameter_in_global_memory_08003fdc(*(uint *)(PTR_DAT_08004264 + 8));\n  set_parameter_value_08003fe8(*(uint *)(PTR_DAT_08004264 + 0xc));\n  *(short *)PTR_DAT_08004268 = (short)*(uint *)PTR_DAT_08004264 + max_value;\n  *(short *)(PTR_DAT_08004268 + 2) = (short)*(uint *)(PTR_DAT_08004264 + 4) + max_value;\n  *(short *)(PTR_DAT_08004268 + 4) = (short)*(uint *)(PTR_DAT_08004264 + 8) + max_value;\n  *(short *)(PTR_DAT_08004268 + 6) = (short)*(uint *)(PTR_DAT_08004264 + 0xc) + max_value;\n  return;\n}",
            "called": [
                "FUN_08000ad8",
                "FUN_08003fdc",
                "FUN_08003fd0",
                "FUN_08000adc",
                "FUN_08003fc4",
                "FUN_08003fe8",
                "FUN_08001078"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800426c",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "calculate_values_and_set_parameters_0800426c"
        },
        "FUN_08002538": {
            "renaming": {
                "FUN_08002538": "set_bit_in_array_08002538",
                "param_1": "array",
                "param_2": "index",
                "puVar1": "default_array",
                "puVar2": "current_array"
            },
            "code": "uint32_t set_bit_in_array_08002538(uint32_t **array, uint32_t index)\n{\n  uint32_t *current_array = *array;\n  uint32_t *default_array = DEFAULT_ARRAY;\n  update_bit_in_uint_array_08002520(current_array, index, 1);\n  if (current_array == default_array) {\n    default_array = (uint32_t *)(current_array[0x11] | 0x8000);\n  }\n  if (current_array == default_array) {\n    current_array[0x11] = (uint32_t)default_array;\n  }\n  *current_array = *current_array | 1;\n  return 0;\n}",
            "called": [
                "FUN_08002520"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002538",
            "calling": [
                "FUN_08003ff4"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_08002538"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "process_i2c_data_080040e8",
                "param_1": "data_buffer",
                "param_2": "buffer_offset",
                "param_3": "data_count",
                "param_4": "max_data_count",
                "puVar1": "src_data",
                "uVar2": "processed_data",
                "iVar3": "i",
                "puVar4": "dest_data",
                "iVar5": "max_data_count"
            },
            "code": "void process_i2c_data_080040e8(void *data_buffer, int buffer_offset, int data_count, int max_data_count)\n{\n    unsigned char *src_data = PTR_s____Src_i2c_c_08004118;\n    unsigned char *dest_data = (unsigned char *)(data_count + buffer_offset - 1);\n    for (int i = 0; i < max_data_count; i++) {\n        unsigned char processed_data = check_and_process_data(data_buffer, (buffer_offset + i) & 0xffff, src_data, 0x4c, data_count);\n        dest_data++;\n        *dest_data = processed_data;\n    }\n    return;\n}",
            "called": [
                "FUN_0800407c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "FUN_08002b48",
                "FUN_08002cb0",
                "FUN_08002bf0",
                "FUN_08002d88",
                "FUN_08003298"
            ],
            "imported": false,
            "current_name": "process_i2c_data_080040e8"
        },
        "FUN_08004ffc": {
            "renaming": {
                "FUN_08004ffc": "reverse_and_copy_data_08004ffc",
                "param_1": "input_data",
                "param_2": "input_size",
                "param_3": "output_size",
                "param_4": "output_data",
                "local_78": "output_data_ptr",
                "local_70": "max_input_size",
                "local_6c": "output_size_short",
                "local_6a": "max_output_size_short",
                "local_68": "input_data_ptr",
                "local_64": "max_output_size",
                "uStack_c": "input_size_copy",
                "uStack_8": "unused_stack_variable_2",
                "uStack_4": "unused_stack_variable_3"
            },
            "code": "void reverse_and_copy_data_08004ffc(undefined *input_data, undefined4 input_size, undefined4 output_size, undefined4 output_data){\n  undefined *output_data_ptr [2];\n  undefined4 max_input_size;\n  undefined2 output_size_short;\n  undefined2 max_output_size_short;\n  undefined *input_data_ptr;\n  undefined4 max_output_size;\n  undefined4 input_size_copy;\n  undefined4 unused_stack_variable_1;\n  undefined4 unused_stack_variable_2;\n  undefined4 unused_stack_variable_3;\n  output_size_short = 520;\n  max_input_size = 2147483647;\n  max_output_size = 2147483647;\n  max_output_size_short = 65535;\n  output_data_ptr[0] = input_data;\n  input_data_ptr = input_data;\n  input_size_copy = input_size;\n  unused_stack_variable_1 = input_size_copy;\n  unused_stack_variable_2 = output_size;\n  unused_stack_variable_3 = output_data;\n  reverse_and_copy_data_08004ffc_080050fc(*PTR_PTR_DAT_08005040, output_data_ptr, input_size_copy);\n  *output_data_ptr[0] = 0;\n}\n",
            "called": [
                "FUN_080050fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ffc",
            "calling": [
                "FUN_08004cac"
            ],
            "imported": false,
            "current_name": "reverse_and_copy_data_08004ffc"
        },
        "FUN_0800115c": {
            "renaming": {
                "FUN_0800115c": "get_value_from_pointer_0800115c",
                "PTR_DAT_08001164": "pointer_to_value"
            },
            "code": "get_value_from_pointer_0800115c() {\n  return *(undefined4 *)PTR_DAT_08001164;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800115c",
            "calling": [
                "FUN_08001530",
                "thunk_FUN_0800115c",
                "FUN_080016f4",
                "FUN_0800209c",
                "FUN_08001b58",
                "FUN_08001460",
                "FUN_08001828",
                "FUN_08004c18",
                "thunk_FUN_0800115c",
                "FUN_080014e2",
                "FUN_080015e8",
                "FUN_08001938"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_0800115c"
        },
        "FUN_08002d88": {
            "renaming": {
                "FUN_08002d88": "process_i2c_data_08002d88",
                "param_1": "address",
                "param_2": "length",
                "param_3": "data",
                "param_4": "checksum",
                "sVar1": "value1",
                "sVar2": "value2",
                "puVar3": "src_data",
                "iVar7": "check_result",
                "uVar8": "hash1",
                "uVar9": "hash2",
                "local_28": "value1",
                "uStack_26": "unused",
                "uStack_25": "unused",
                "local_24": "unused",
                "local_23": "unused",
                "local_22": "unused",
                "uStack_21": "unused"
            },
            "code": "void process_i2c_data_08002d88(int address, int length, uint8_t *data, uint8_t *checksum, uint32_t param_1, uint32_t param_2) {\n    uint16_t value1;\n    uint16_t value2;\n    uint8_t *src_data;\n    uint32_t hash1;\n    uint32_t hash2;\n    uint32_t hash3;\n    int check_result = check_and_process_data(address, length, data, checksum, param_1, param_2);\n    if (check_result >= 0) {\n        process_i2c_data_08002d88(address, 3, &value1, 7, data, 0xda);\n        if ((int)((uint)local_22 << 0x1c) < 0) {\n            *(short *)(DAT_08002e94 + 2) = *(short *)(DAT_08002e94 + 2) + 1;\n        }\n        else {\n            value1 = CONCAT11(data[2], data[1]);\n            value2 = CONCAT11(data[4], data[3]);\n            *(uint16_t *)DAT_08002e84 = value1;\n            *(uint16_t *)(DAT_08002e84 + 2) = value2;\n            hash1 = *(uint32_t *)PTR_DAT_08002e88;\n            hash2 = calculate_hash(hash1, *(uint32_t *)PTR_DAT_08002e98);\n            hash2 = calculate_hash(hash2, *(uint32_t *)PTR_DAT_08002e9c);\n            hash3 = calculate_hash(hash2, *(uint32_t *)PTR_DAT_08002e8c);\n            *(uint32_t *)DAT_08002e90 = hash3;\n            hash1 = calculate_hash(hash1, (int)value1);\n            hash2 = calculate_hash(hash2, *(uint32_t *)(PTR_DAT_08002e98 + 4));\n            hash2 = calculate_hash(hash2, *(uint32_t *)(PTR_DAT_08002e9c + 4));\n            hash3 = calculate_hash(hash2, *(uint32_t *)(PTR_DAT_08002e8c + 4));\n            *(uint32_t *)(DAT_08002e90 + 4) = hash3;\n            hash1 = calculate_hash(hash1, (int)value2);\n            hash2 = calculate_hash(hash2, *(uint32_t *)(PTR_DAT_08002e98 + 8));\n            hash2 = calculate_hash(hash2, *(uint32_t *)(PTR_DAT_08002e9c + 8));\n            hash3 = calculate_hash(hash2, *(uint32_t *)(PTR_DAT_08002e8c + 8));\n            *(uint32_t *)(DAT_08002e90 + 8) = hash3;\n        }\n    }\n}",
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_080040e8",
                "FUN_0800407c",
                "FUN_08000c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d88",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "process_i2c_data_08002d88"
        },
        "FUN_08000c44": {
            "renaming": {
                "FUN_08000c44": "calculate_hash_08000c44",
                "param_1": "input",
                "uVar2": "exponent",
                "uVar3": "sign_bit",
                "iVar1": "leading_zeroes",
                "iVar4": "base",
                "uVar5": "high_bits",
                "shift": "shift",
                "result": "result",
                "absolute_value": "absolute_value",
                "count_leading_zeroes": "count_leading_zeroes",
                "0x80000000": "0x80000000",
                "0x4b000000": "0x4b000000",
                "0x800000": "0x800000",
                "0x7fffffff": "0x7fffffff"
            },
            "code": "uint calculate_hash_08000c44(uint input)\n{\n  int leading_zeroes = count_leading_zeroes(input);\n  uint sign_bit = input & 0x80000000;\n  uint absolute_value = input;\n  if ((int)sign_bit < 0) {\n    absolute_value = -input;\n  }\n  if (absolute_value == 0) {\n    return 0;\n  }\n  uint exponent = leading_zeroes - 8;\n  uint base = ((sign_bit | 0x4b000000) - 0x800000) + exponent * -0x800000;\n  if (leading_zeroes > 7) {\n    uint shift = exponent & 0xff;\n    uint high_bits = 0 << shift;\n    uint low_bits = 0U >> (0x20 - shift & 0xff);\n    uint result = base + (absolute_value << shift) + high_bits + (uint)(0x7fffffff < high_bits);\n    if (high_bits == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shift = leading_zeroes + 0x18U & 0xff;\n  uint high_bits = absolute_value << shift;\n  uint low_bits = (absolute_value >> (0x20 - shift & 0xff)) - ((int)high_bits >> 0x1f);\n  uint result = base + low_bits;\n  if ((high_bits & 0x7fffffff) == 0) {\n    result = result & ~(high_bits >> 0x1f);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c44",
            "calling": [
                "FUN_08002b48",
                "FUN_08002cb0",
                "FUN_0800411c",
                "FUN_08002bf0",
                "FUN_0800483c",
                "FUN_08002d88"
            ],
            "imported": false,
            "current_name": "calculate_hash_08000c44"
        },
        "FUN_08000a04": {
            "renaming": {
                "FUN_08000a04": "is_valid_input_08000a04",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "bool is_valid_input_08000a04(uint32_t input1, int32_t input2, uint32_t input3, int32_t input4) {\n    bool is_input1_valid = ((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0);\n    bool is_input2_valid = ((input4 << 1) >> 0x15 != -1) || ((input3 | input4 << 0xc) == 0);\n    return is_input1_valid && is_input2_valid;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a04",
            "calling": [
                "FUN_08005854",
                "FUN_08005900",
                "FUN_08005bc8"
            ],
            "imported": false,
            "current_name": "is_valid_input_08000a04"
        },
        "FUN_080025e8": {
            "renaming": {
                "FUN_080025e8": "update_values_080025e8",
                "param_1": "values",
                "iVar1": "random_value_1",
                "iVar2": "random_value_2",
                "uVar3": "mask",
                "iVar4": "divisor",
                "iVar5": "dividend",
                "iVar6": "current_value"
            },
            "code": "void update_values_080025e8(int *values) {\n  int current_value = *values;\n  uint mask = values[4];\n  *(uint *)(current_value + 0x10) = *(uint *)(current_value + 0x10) & 0xffffcfff | values[3];\n  *(uint *)(current_value + 0xc) = values[2] | mask | values[5] | *(uint *)(current_value + 0xc) & 0xffffe9f3;\n  *(uint *)(current_value + 0x14) = *(uint *)(current_value + 0x14) & 0xfffffcff | values[6];\n  if (current_value == DAT_08002720) {\n    int random_value_1 = extract_bits_from_uint_08002250();\n    int divisor = (int)(((ulonglong)(uint)(random_value_1 * 0x19) / (ulonglong)(uint)(values[1] << 2)) / 100);\n    random_value_1 = extract_bits_from_uint_08002250();\n    int dividend = values[1];\n    int random_value_2 = extract_bits_from_uint_08002250();\n    dividend = (uint)(random_value_1 * 0x19) / (uint)(dividend << 2) + (int)(((ulonglong)(uint)(random_value_2 * 0x19) / (ulonglong)(uint)(values[1] << 2)) / 100) * -100;\n    random_value_1 = extract_bits_from_uint_08002250();\n    mask = (uint)(random_value_1 * 0x19) / (uint)(values[1] << 2);\n    random_value_1 = extract_bits_from_uint_08002250();\n  } else {\n    int random_value_1 = get_shifted_value_08002220();\n    int divisor = (int)(((ulonglong)(uint)(random_value_1 * 0x19) / (ulonglong)(uint)(values[1] << 2)) / 100);\n    random_value_1 = get_shifted_value_08002220();\n    int dividend = values[1];\n    int random_value_2 = get_shifted_value_08002220();\n    dividend = (uint)(random_value_1 * 0x19) / (uint)(dividend << 2) + (int)(((ulonglong)(uint)(random_value_2 * 0x19) / (ulonglong)(uint)(values[1] << 2)) / 100) * -100;\n    random_value_1 = get_shifted_value_08002220();\n    mask = (uint)(random_value_1 * 0x19) / (uint)(values[1] << 2);\n    random_value_1 = get_shifted_value_08002220();\n  }\n  *(uint *)(current_value + 8) = (((mask + (int)(((ulonglong)(uint)(random_value_1 * 0x19) / (ulonglong)(uint)(values[1] << 2)) / 100)) * -100 / 100 + 0x32) & 0xf | (dividend * 0x10 + 0x32U) / 100 & 0xf0) + divisor * 0x10;\n}",
            "called": [
                "FUN_08002220",
                "FUN_08002250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e8",
            "calling": [
                "FUN_08002724"
            ],
            "imported": false,
            "current_name": "update_values_080025e8"
        },
        "FUN_08002b48": {
            "renaming": {
                "FUN_08002b48": "read_and_process_i2c_data_08002b48",
                "in_r3": "data",
                "local_18": "lower_data",
                "local_14": "address",
                "PTR_s____Src_MPU9250_c_08002be4": "i2c_data_address",
                "PTR_DAT_08002be8": "hash_address",
                "PTR_DAT_08002bec": "hash_address_2",
                "calculate_hash_08000c44": "calculate_hash",
                "FUN_08000cec": "apply_hash_function",
                "puVar1": "temp_pointer"
            },
            "code": "void read_and_process_i2c_data_08002b48(void)\n{\n  uint16_t data = 0;\n  uint32_t address = 0;\n  uint32_t hash = 0;\n  uint32_t *PTR_DAT_08002be8 = (uint32_t *)(PTR_s____Src_MPU9250_c_08002be4 + 0x58);\n  \n  // Read data from I2C\n  process_i2c_data_080040e8(0xd0, 0x3b, &data, 6, PTR_s____Src_MPU9250_c_08002be4, 0x58);\n  \n  // Calculate hash of data and store it at PTR_DAT_08002be8\n  hash = calculate_hash_08000c44(data);\n  hash = calculate_float_08000cec(hash, 0x40800000);\n  hash = calculate_float_08000cec(hash, 0x38000000);\n  *PTR_DAT_08002be8 = hash;\n  \n  // Calculate hash of upper 16 bits of data and store it at PTR_DAT_08002be8 + 4\n  hash = calculate_hash_08000c44((uint16_t)(data >> 16));\n  hash = calculate_float_08000cec(hash, 0x40800000);\n  hash = calculate_float_08000cec(hash, 0x38000000);\n  *(PTR_DAT_08002be8 + 1) = hash;\n  \n  // Calculate hash of upper 16 bits of address and store it at PTR_DAT_08002be8 + 8\n  address = (uint32_t)(data & 0xffff0000);\n  hash = calculate_hash_08000c44((uint16_t)(address >> 16));\n  hash = calculate_float_08000cec(hash, 0x40800000);\n  hash = calculate_float_08000cec(hash, 0x38000000);\n  *(PTR_DAT_08002be8 + 2) = hash;\n}",
            "called": [
                "FUN_08000cec",
                "FUN_080040e8",
                "FUN_08000c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b48",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "read_and_process_i2c_data_08002b48"
        },
        "FUN_08004f68": {
            "renaming": {
                "FUN_08004f68": "copy_data_and_clear_memory_08004f68",
                "iVar1": "index",
                "puVar2": "data_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void copy_data_and_clear_memory_08004f68(void)\n{\n  int index;\n  undefined4 *data_ptr;\n  code *jump_table;\n  for (index = 0; PTR_DAT_08004fa0 + index < PTR_DAT_08004fa4; index += 4) {\n    *(undefined4 *)(PTR_DAT_08004fa0 + index) = *(undefined4 *)(DAT_08004f9c + index);\n  }\n  for (data_ptr = (undefined4 *)PTR_DAT_08004fa8; data_ptr < PTR_DAT_08004fac; data_ptr++) {\n    *data_ptr = 0;\n  }\n  set_bit_for_data_collection();\n  execute_data_collection_functions();\n  jump_table = (code *)0x8004f9a;\n  run_sensor_data_collection();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_080041ae",
                "FUN_08004f10",
                "FUN_08004fb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f68",
            "calling": [],
            "imported": false,
            "current_name": "copy_data_and_clear_memory_08004f68"
        },
        "FUN_08001170": {
            "renaming": {
                "FUN_08001170": "set_bit_in_register_08001170",
                "param_1": "register_value",
                "DAT_08001190": "register_address",
                "PTR_08001190": "register_pointer"
            },
            "code": "void set_bit_in_register_08001170(uint register_value)\n{\n    uint* register_ptr = (uint*)(DAT_08001190 + 0xc);\n    uint mask = 0xf8ff;\n    uint new_value = 0x5fa0000 | ((register_value & 7) << 8);\n    *register_ptr = (*register_ptr & mask) | new_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001170",
            "calling": [
                "FUN_08004ccc",
                "FUN_08001128"
            ],
            "imported": false,
            "current_name": "set_bit_in_register_08001170"
        },
        "FUN_08002bf0": {
            "renaming": {
                "FUN_08002bf0": "read_and_calculate_mpu9250_data_08002bf0",
                "local_20": "temp_data",
                "local_1c": "accel_data",
                "puVar1": "hash_ptr_1",
                "puVar2": "hash_ptr_2",
                "uVar3": "hash_value"
            },
            "code": "void read_and_calculate_mpu9250_data_08002bf0(void)\n{\n  uint16_t temp_data;\n  uint16_t gyro_data;\n  uint16_t accel_data;\n  uint32_t hash_value;\n  uint32_t *hash_ptr_1;\n  uint32_t *hash_ptr_2;\n  temp_data = 0;\n  gyro_data = 0;\n  accel_data = 0;\n  process_i2c_data_080040e8(0xd0,0x43,&temp_data,6,PTR_s____Src_MPU9250_c_08002c9c,0x7b);\n  hash_ptr_1 = PTR_DAT_08002ca0;\n  *(uint16_t *)PTR_DAT_08002ca0 = temp_data;\n  *(uint16_t *)(hash_ptr_1 + 1) = temp_data >> 16;\n  *(uint16_t *)(hash_ptr_1 + 2) = accel_data;\n  *(uint16_t *)(hash_ptr_1 + 3) = gyro_data;\n  hash_value = calculate_hash_08000c44();\n  hash_value = calculate_float_08000cec(hash_value,DAT_08002ca8);\n  hash_value = calculate_float_08000cec(hash_value,0x38000000);\n  hash_value = calculate_float_08000ad8(hash_value,*(uint32_t *)hash_ptr_1);\n  hash_ptr_2 = PTR_DAT_08002cac;\n  *hash_ptr_2 = hash_value;\n  hash_value = calculate_hash_08000c44((int)gyro_data);\n  hash_value = calculate_float_08000cec(hash_value,DAT_08002ca8);\n  hash_value = calculate_float_08000cec(hash_value,0x38000000);\n  hash_value = calculate_float_08000ad8(hash_value,*(uint32_t *)(hash_ptr_1 + 3));\n  *(hash_ptr_2 + 1) = hash_value;\n  hash_value = calculate_hash_08000c44((int)accel_data);\n  hash_value = calculate_float_08000cec(hash_value,DAT_08002ca8);\n  hash_value = calculate_float_08000cec(hash_value,0x38000000);\n  hash_value = calculate_float_08000ad8(hash_value,*(uint32_t *)(hash_ptr_1 + 2));\n  *(hash_ptr_2 + 2) = hash_value;\n  return;\n}",
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_080040e8",
                "FUN_08000c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002bf0",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "read_and_calculate_mpu9250_data_08002bf0"
        },
        "FUN_08002ad0": {
            "renaming": {
                "FUN_08002ad0": "process_mpu9250_data_08002ad0",
                "PTR_s____Src_MPU9250_c_08002b44": "MPU9250_src_c",
                "check_and_process_data_0800407c": "check_and_process_data",
                "process_i2c_data_0800403c": "process_i2c_data"
            },
            "code": "void process_mpu9250_data_08002ad0(void)\n{\n    check_and_process_data(0xd0, 0x75, PTR_s____Src_MPU9250_c_08002b44, 0x3b);\n    process_i2c_data(0xd0, 0x6b, 0x80, 1);\n    process_i2c_data(0xd0, 0x6b, 1);\n    process_i2c_data(0xd0, 0x6c, 0, 1);\n    process_i2c_data(0xd0, 0x19, 0, 1);\n    process_i2c_data(0xd0, 0x1d, 3, 1);\n    process_i2c_data(0xd0, 0x1a, 3, 1);\n    process_i2c_data(0xd0, 0x1b, 0x10, 1);\n    process_i2c_data(0xd0, 0x1c, 8, 1);\n    return;\n}",
            "called": [
                "FUN_0800403c",
                "FUN_0800407c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad0",
            "calling": [
                "FUN_08002ea0"
            ],
            "imported": false,
            "current_name": "process_mpu9250_data_08002ad0"
        },
        "FUN_08001050": {
            "renaming": {
                "FUN_08001050": "check_if_params_are_reversed_and_not_empty_08001050",
                "in_ZR": "is_zero",
                "in_CY": "is_carry",
                "concatenate_params_and_reverse_08000ffc": "concatenate_params_and_reverse"
            },
            "code": "bool check_if_params_are_reversed_and_not_empty_08001050(void)\n{\n  undefined is_zero = 0;\n  undefined is_carry = 0;\n  concatenate_params_and_reverse();\n  return !(bool)is_carry || (bool)is_zero;\n}",
            "called": [
                "FUN_08000ffc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001050",
            "calling": [
                "FUN_08002ee8"
            ],
            "imported": false,
            "current_name": "check_if_params_are_reversed_and_not_empty_08001050"
        },
        "FUN_080009c8": {
            "renaming": {
                "FUN_080009c8": "is_CY_zero_or_ZR_nonzero_080009c8",
                "in_CY": "param1",
                "in_ZR": "param2",
                "validate_params_08000990": "validate_parameters"
            },
            "code": "bool is_CY_zero_or_ZR_nonzero_080009c8(void)\n{\n  undefined param1;\n  undefined param2;\n  validate_parameters();\n  return (bool)param1 || !(bool)param2;\n}",
            "called": [
                "FUN_08000990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c8",
            "calling": [
                "FUN_08006228"
            ],
            "imported": false,
            "current_name": "is_CY_zero_or_ZR_nonzero_080009c8"
        },
        "FUN_08002ed4": {
            "renaming": {
                "FUN_08002ed4": "calculate_result_08002ed4",
                "puVar1": "result_ptr",
                "uVar2": "value1",
                "uVar3": "value2",
                "uVar4": "value3",
                "PTR_DAT_08002ee4": "PTR_RESULT",
                "PTR_DAT_08002ee0": "PTR_VALUE1",
                "PTR_DAT_08002ee4 + 4": "PTR_VALUE2",
                "FUN_08000ad8": "FUN_A",
                "FUN_08000cec": "FUN_B",
                "FUN_08000adc": "FUN_C"
            },
            "code": "void calculate_result_08002ed4(void)\n{\n  undefined *result_ptr;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  \n  result_ptr = PTR_DAT_08002ee4;\n  value2 = *(undefined4 *)PTR_DAT_08002ee4 + 4;\n  value3 = *(undefined4 *)(PTR_DAT_08002ee0 + 4);\n  value1 = FUN_A(0x3f800000,value3);\n  value1 = FUN_B(value1,value2);\n  value2 = FUN_B(value3,*(undefined4 *)result_ptr);\n  value1 = FUN_C(value2,value1);\n  *(undefined4 *)result_ptr = value1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ed4",
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "calculate_result_08002ed4"
        },
        "FUN_08000f9c": {
            "renaming": {
                "FUN_08000f9c": "calculate_result_08000f9c",
                "param_1": "first_number",
                "param_2": "second_number",
                "uVar2": "doubled_first_number",
                "uVar3": "doubled_second_number",
                "uVar4": "combined_numbers",
                "bVar1": "is_negative",
                "bVar5": "is_combined_zero"
            },
            "code": "uint calculate_result_08000f9c(uint first_number, uint second_number) {\n  bool is_negative;\n  uint doubled_first_number = first_number * 2;\n  uint doubled_second_number = second_number * 2;\n  if (((int)doubled_first_number >> 0x18 == -1 || (int)doubled_second_number >> 0x18 == -1) && ((((int)doubled_first_number >> 0x18 == -1 && ((first_number & 0x7fffff) != 0)) || (((int)doubled_second_number >> 0x18 == -1 && ((second_number & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  uint combined_numbers = doubled_first_number | second_number & 0x7fffffff;\n  bool is_combined_zero = combined_numbers == 0;\n  if (!is_combined_zero) {\n    combined_numbers = first_number ^ second_number;\n    is_combined_zero = combined_numbers == 0;\n  }\n  is_negative = -1 < (int)combined_numbers;\n  if (is_negative) {\n    first_number = doubled_first_number + second_number * -2;\n    is_combined_zero = first_number == 0;\n  }\n  if (is_negative && doubled_second_number <= doubled_first_number && !is_combined_zero) {\n    first_number = (int)second_number >> 0x1f;\n  }\n  if (!is_negative || doubled_second_number > doubled_first_number) {\n    first_number = ~((int)second_number >> 0x1f);\n  }\n  if (!is_combined_zero) {\n    first_number = first_number | 1;\n  }\n  return first_number;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f9c",
            "calling": [
                "FUN_08001004"
            ],
            "imported": false,
            "current_name": "calculate_result_08000f9c"
        },
        "FUN_08006228": {
            "renaming": {
                "FUN_08006228": "FUNC_08006228"
            },
            "code": "\nuint FUNC_08006228(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  undefined4 uVar1;\n  uint uVar2;\n  uint extraout_r1;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 extraout_r1_00;\n  undefined4 extraout_r1_01;\n  uint extraout_r1_02;\n  undefined4 extraout_r1_03;\n  int iVar5;\n  int iVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  undefined4 uVar9;\n  uint uVar10;\n  undefined4 uVar11;\n  undefined4 uVar12;\n  ulonglong uVar13;\n  undefined8 uVar14;\n  undefined8 uVar15;\n  undefined8 uVar16;\n  undefined8 uVar17;\n  longlong lVar18;\n  ulonglong uVar19;\n  ulonglong uVar20;\n  undefined8 uVar21;\n  uint local_70;\n  undefined4 local_68;\n  undefined4 local_64;\n  int local_54;\n  \n  uVar10 = param_4 & 0x7fffffff;\n  if ((uVar10 | param_3) == 0) {\n    return 0;\n  }\n  uVar8 = param_2 & 0x7fffffff;\n  if ((int)uVar8 <= (int)DAT_08006428) {\n    if (uVar8 == DAT_08006428) {\n      if (param_1 == 0) {\n        if (uVar8 < uVar10) goto LAB_08006278;\nLAB_08006262:\n        if ((uVar10 != DAT_08006428) || (param_3 == 0)) {\n          if (-1 < (int)param_2) goto LAB_0800632a;\n          if (DAT_08006430 < (int)uVar10) {\n            local_70 = 2;\nLAB_080062ba:\n            if (param_3 == 0) {\n              if (uVar10 == DAT_08006428) {\n                if ((uVar8 + 0xc0100000 | param_1) == 0) {\n                  return 0;\n                }\n                if (DAT_08006434 < (int)uVar8) {\n                  if ((int)param_4 < 0) {\n                    return 0;\n                  }\n                  return 0;\n                }\n                if (-1 < (int)param_4) {\n                  return 0;\n                }\n                return 0;\n              }\nLAB_0800630c:\n              if (uVar10 == DAT_08006438) {\n                if (-1 < (int)param_4) {\n                  return param_1;\n                }\n                uVar8 = 0;\n                uVar10 = DAT_08006438;\n                goto LAB_08006320;\n              }\n              uVar19 = CONCAT44(param_2,param_1);\n              if (param_4 == 0x40000000) goto LAB_0800634a;\n              if ((param_4 == DAT_0800643c) && (-1 < (int)param_2)) {\n                uVar10 = calculate_float_08006c0c(param_1,param_2);\n                return uVar10;\n              }\n            }\n          }\n          else {\n            if ((int)uVar10 <= DAT_08006430 + -0x3500000) {\nLAB_0800632a:\n              local_70 = 0;\n              goto LAB_080062ba;\n            }\n            iVar6 = ((int)uVar10 >> 0x14) + -0x3ff;\n            if (0x14 < iVar6) {\n              uVar2 = param_3 >> (0x34U - iVar6 & 0xff);\n              if (param_3 == uVar2 << (0x34U - iVar6 & 0xff)) {\n                local_70 = 2 - (uVar2 & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (param_3 == 0) {\n              uVar2 = (int)uVar10 >> (0x14U - iVar6 & 0xff);\n              local_70 = param_3;\n              if (uVar10 == uVar2 << (0x14U - iVar6 & 0xff)) {\n                local_70 = 2 - (uVar2 & 1);\n              }\n              goto LAB_0800630c;\n            }\n            local_70 = 0;\n          }\n          uVar13 = do_nothing_0800708c(param_1,param_2);\n          uVar19 = CONCAT44(DAT_08006424,DAT_08006420);\n          uVar11 = (undefined4)(uVar13 >> 0x20);\n          uVar1 = (undefined4)uVar13;\n          uVar20 = uVar13 & 0xffffffff | ((ulonglong)param_2 & 0x7fffffff) << 0x20;\n          if ((param_1 == 0) && ((uVar8 == 0 || ((param_2 & 0x3fffffff) == DAT_08006438)))) {\n            if ((int)param_4 < 0) {\n              uVar13 = calculate_result_08000724(0,DAT_08006438,uVar1,uVar11);\n            }\n            if (-1 < (int)param_2) {\n              return (uint)uVar13;\n            }\n            if ((local_70 | uVar8 + 0xc0100000) != 0) {\n              return (uint)uVar13;\n            }\n          }\n          else {\n            uVar2 = 0xffffffff - ((int)param_2 >> 0x1f);\n            uVar13 = CONCAT44(param_2,param_1);\n            if ((local_70 | uVar2) != 0) {\n              if (DAT_08006440 < (int)uVar10) {\n                param_1 = DAT_08006420;\n                param_2 = DAT_08006424;\n                if (DAT_08006440 + 0x2100000 < (int)uVar10) {\n                  if (DAT_08006434 < (int)uVar8) {\nLAB_08006418:\n                    if ((int)param_4 < 1) {\n                      return 0;\n                    }\n                    goto LAB_0800634a;\n                  }\nLAB_080063fa:\n                  uVar19 = CONCAT44(DAT_08006424,DAT_08006420);\n                  if (-1 < (int)param_4) {\n                    return 0;\n                  }\n                  goto LAB_0800634a;\n                }\n                if ((int)uVar8 <= DAT_08006444) goto LAB_080063fa;\n                if ((int)DAT_08006438 < (int)uVar8) goto LAB_08006418;\n                uVar14 = calculate_double_precision_08000168(uVar1,uVar11,0,DAT_080065d0);\n                uVar11 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar1 = (undefined4)uVar14;\n                uVar14 = calculate_ulonglong_result_080004d0(uVar1,uVar11,DAT_080065a8,DAT_080065ac);\n                uVar15 = calculate_ulonglong_result_080004d0(uVar1,uVar11,DAT_080065b0,DAT_080065b4);\n                uVar16 = calculate_ulonglong_result_080004d0(uVar1,uVar11,0,DAT_080065d4);\n                uVar16 = calculate_double_precision_08000168(DAT_080065b8,DAT_080065bc,(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar16 = calculate_ulonglong_result_080004d0((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),uVar1,uVar11);\n                uVar16 = calculate_double_precision_08000168(0,DAT_080065d8,(int)uVar16,(int)((ulonglong)uVar16 >> 0x20));\n                uVar17 = calculate_ulonglong_result_080004d0(uVar1,uVar11,uVar1,uVar11);\n                uVar16 = calculate_ulonglong_result_080004d0((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),(int)uVar17,\n                                      (int)((ulonglong)uVar17 >> 0x20));\n                uVar16 = calculate_ulonglong_result_080004d0((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),DAT_080065c0,\n                                      DAT_080065c4);\n                uVar15 = calculate_double_precision_08000168((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                calculate_double_precision_0800016c((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar15,\n                             (int)((ulonglong)uVar15 >> 0x20));\n                lVar18 = (ulonglong)extraout_r1 << 0x20;\n                uVar10 = extraout_r1;\n              }\n              else {\n                local_54 = 0;\n                if (uVar8 < 0x100000) {\n                  uVar20 = calculate_ulonglong_result_080004d0();\n                  local_54 = -0x35;\n                }\n                uVar10 = (uint)(uVar20 >> 0x20);\n                uVar1 = (undefined4)uVar20;\n                local_54 = ((int)uVar10 >> 0x14) + -0x3ff + local_54;\n                uVar10 = uVar10 & 0xfffff;\n                uVar8 = uVar10 | 0x3ff00000;\n                if (DAT_0800691c < (int)uVar10) {\n                  if (DAT_08006920 < (int)uVar10) {\n                    uVar8 = uVar8 - 0x100000;\n                    local_54 = local_54 + 1;\n                    goto LAB_08006628;\n                  }\n                  iVar6 = 1;\n                }\n                else {\nLAB_08006628:\n                  iVar6 = 0;\n                }\n                uVar7 = *(undefined4 *)(PTR_DAT_08006924 + iVar6 * 8);\n                uVar9 = *(undefined4 *)((int)(PTR_DAT_08006924 + iVar6 * 8) + 4);\n                uVar14 = calculate_double_precision_08000168(uVar1,uVar8,uVar7,uVar9);\n                uVar12 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar15 = calculate_double_precision_0800016c(uVar1,uVar8,uVar7,uVar9);\n                uVar15 = calculate_result_08000724(0,DAT_08006928,(int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n                uVar3 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar16 = calculate_ulonglong_result_080004d0((int)uVar14,uVar12,(int)uVar15,uVar3);\n                uVar4 = (undefined4)((ulonglong)uVar16 >> 0x20);\n                uVar11 = (undefined4)uVar16;\n                uVar16 = calculate_ulonglong_result_080004d0(0,uVar4);\n                uVar14 = calculate_double_precision_08000168((int)uVar14,uVar12,(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar16 = calculate_double_precision_08000168(0,((int)uVar8 >> 1 | 0x20000000U) + 0x80000 + iVar6 * 0x40000,\n                                      uVar7,uVar9);\n                uVar16 = calculate_double_precision_08000168(uVar1,uVar8,(int)uVar16,(int)((ulonglong)uVar16 >> 0x20));\n                uVar16 = calculate_ulonglong_result_080004d0((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),0,uVar4);\n                uVar14 = calculate_double_precision_08000168((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar14 = calculate_ulonglong_result_080004d0((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar15,uVar3\n                                     );\n                uVar12 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar15 = calculate_ulonglong_result_080004d0(uVar11,uVar4);\n                uVar3 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar1 = (undefined4)uVar15;\n                uVar15 = calculate_ulonglong_result_080004d0(uVar1,uVar3,DAT_080068d0,DAT_080068d4);\n                uVar15 = calculate_double_precision_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_080068d8,\n                                      DAT_080068dc);\n                uVar15 = calculate_ulonglong_result_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar1,uVar3);\n                uVar15 = calculate_double_precision_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_080068e0,\n                                      DAT_080068e4);\n                uVar15 = calculate_ulonglong_result_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar1,uVar3);\n                uVar15 = calculate_double_precision_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_080068e8,\n                                      DAT_080068ec);\n                uVar15 = calculate_ulonglong_result_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar1,uVar3);\n                uVar15 = calculate_double_precision_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_080068f0,\n                                      DAT_080068f4);\n                uVar15 = calculate_ulonglong_result_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar1,uVar3);\n                uVar15 = calculate_double_precision_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_080068f8,\n                                      DAT_080068fc);\n                uVar16 = calculate_ulonglong_result_080004d0(uVar1,uVar3,uVar1,uVar3);\n                uVar15 = calculate_ulonglong_result_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar16 = calculate_double_precision_0800016c(uVar11,uVar4,0,uVar4);\n                uVar16 = calculate_ulonglong_result_080004d0((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),(int)uVar14,\n                                      uVar12);\n                uVar15 = calculate_double_precision_0800016c((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),(int)uVar15,\n                                      (int)((ulonglong)uVar15 >> 0x20));\n                uVar1 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar16 = calculate_ulonglong_result_080004d0(0,uVar4,0,uVar4);\n                uVar3 = (undefined4)((ulonglong)uVar16 >> 0x20);\n                uVar17 = calculate_double_precision_0800016c((int)uVar16,uVar3,0,DAT_0800692c);\n                calculate_double_precision_0800016c((int)uVar17,(int)((ulonglong)uVar17 >> 0x20),(int)uVar15,uVar1);\n                uVar17 = calculate_ulonglong_result_080004d0(0,uVar4,0,extraout_r1_00);\n                uVar7 = (undefined4)((ulonglong)uVar17 >> 0x20);\n                uVar21 = calculate_double_precision_08000168(0,extraout_r1_00,0,DAT_0800692c);\n                uVar16 = calculate_double_precision_08000168((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar16,uVar3\n                                     );\n                uVar15 = calculate_double_precision_08000168((int)uVar15,uVar1,(int)uVar16,(int)((ulonglong)uVar16 >> 0x20)\n                                     );\n                uVar15 = calculate_ulonglong_result_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar11,uVar4);\n                uVar14 = calculate_ulonglong_result_080004d0((int)uVar14,uVar12,0,extraout_r1_00);\n                uVar15 = calculate_double_precision_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar14,\n                                      (int)((ulonglong)uVar14 >> 0x20));\n                uVar1 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                calculate_double_precision_0800016c((int)uVar17,uVar7,(int)uVar15,uVar1);\n                uVar14 = calculate_ulonglong_result_080004d0(0,extraout_r1_01,DAT_08006900,DAT_08006904);\n                uVar16 = calculate_double_precision_08000168(0,extraout_r1_01,(int)uVar17,uVar7);\n                uVar15 = calculate_double_precision_08000168((int)uVar15,uVar1,(int)uVar16,(int)((ulonglong)uVar16 >> 0x20)\n                                     );\n                uVar15 = calculate_ulonglong_result_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006908,\n                                      DAT_0800690c);\n                uVar16 = calculate_ulonglong_result_080004d0(0,extraout_r1_01,DAT_08006910,DAT_08006914);\n                uVar15 = calculate_double_precision_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar15 = calculate_double_precision_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),\n                                      *(undefined4 *)(PTR_DAT_08006930 + iVar6 * 8),\n                                      *(undefined4 *)((int)(PTR_DAT_08006930 + iVar6 * 8) + 4));\n                uVar16 = calculate_shifted_value_08000404(local_54);\n                uVar1 = (undefined4)((ulonglong)uVar16 >> 0x20);\n                uVar11 = *(undefined4 *)(PTR_DAT_08006934 + iVar6 * 8);\n                uVar12 = *(undefined4 *)((int)(PTR_DAT_08006934 + iVar6 * 8) + 4);\n                uVar17 = calculate_double_precision_0800016c((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar15,\n                                      (int)((ulonglong)uVar15 >> 0x20));\n                uVar17 = calculate_double_precision_0800016c((int)uVar17,(int)((ulonglong)uVar17 >> 0x20),uVar11,uVar12);\n                calculate_double_precision_0800016c((int)uVar17,(int)((ulonglong)uVar17 >> 0x20),(int)uVar16,uVar1);\n                uVar16 = calculate_double_precision_08000168(0,extraout_r1_02,(int)uVar16,uVar1);\n                lVar18 = calculate_double_precision_08000168((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),uVar11,uVar12);\n                uVar10 = extraout_r1_02;\n              }\n              uVar14 = calculate_double_precision_08000168((int)lVar18,(int)((ulonglong)lVar18 >> 0x20),(int)uVar14,\n                                    (int)((ulonglong)uVar14 >> 0x20));\n              uVar14 = calculate_double_precision_08000168((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar14,\n                                    (int)((ulonglong)uVar14 >> 0x20));\n              param_2 = DAT_080065dc;\n              if ((local_70 - 1 | uVar2) != 0) {\n                param_2 = DAT_080065d0;\n              }\n              uVar15 = calculate_double_precision_08000168(param_3,param_4,0,param_4);\n              uVar15 = calculate_ulonglong_result_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),0,uVar10);\n              uVar14 = calculate_ulonglong_result_080004d0((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),param_3,param_4);\n              uVar14 = calculate_double_precision_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar14,\n                                    (int)((ulonglong)uVar14 >> 0x20));\n              uVar12 = (undefined4)((ulonglong)uVar14 >> 0x20);\n              uVar1 = (undefined4)uVar14;\n              uVar14 = calculate_ulonglong_result_080004d0(0,uVar10,0,param_4);\n              uVar3 = (undefined4)((ulonglong)uVar14 >> 0x20);\n              uVar11 = (undefined4)uVar14;\n              lVar18 = calculate_double_precision_0800016c(uVar1,uVar12,uVar11,uVar3);\n              uVar8 = (uint)((ulonglong)lVar18 >> 0x20);\n              uVar10 = (uint)lVar18;\n              if (DAT_080065e0 < (int)uVar8) {\n                if ((uVar8 + 0xbf700000 | uVar10) == 0) {\n                  uVar15 = calculate_double_precision_0800016c(uVar1,uVar12,DAT_08006ba8,DAT_08006bac);\n                  uVar16 = calculate_double_precision_08000168(uVar10,uVar8,uVar11,uVar3);\n                  iVar6 = is_end_of_input_080009f0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                       (int)((ulonglong)uVar16 >> 0x20));\n                  if (iVar6 == 0) goto LAB_08006968;\n                }\n                uVar19 = calculate_ulonglong_result_080004d0(0,param_2,DAT_080065c8,DAT_080065cc);\n                param_1 = DAT_080065c8;\n                param_2 = DAT_080065cc;\n                goto LAB_0800634a;\n              }\n              if (DAT_08006c04 < (int)(uVar8 & 0x7fffffff)) {\n                if ((DAT_08006c08 + uVar8 | uVar10) == 0) {\n                  uVar15 = calculate_double_precision_08000168(uVar10,uVar8,uVar11,uVar3);\n                  iVar6 = is_CY_zero_or_ZR_nonzero_080009c8(uVar1,uVar12,(int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n                  if (iVar6 == 0) goto LAB_08006968;\n                }\n                uVar19 = calculate_ulonglong_result_080004d0(0,param_2,DAT_08006bf0,DAT_08006bf4);\n                param_1 = DAT_08006bf0;\n                param_2 = DAT_08006bf4;\n              }\n              else {\nLAB_08006968:\n                if (DAT_08006bf8 < (int)(uVar8 & 0x7fffffff)) {\n                  uVar8 = (0x100000 >> (((int)(uVar8 & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          uVar8;\n                  uVar10 = (uVar8 * 2 >> 0x15) - 0x3ff;\n                  iVar6 = (int)(uVar8 & 0xfffff | 0x100000) >> (0x14 - uVar10 & 0xff);\n                  if (lVar18 < 0) {\n                    iVar6 = -iVar6;\n                  }\n                  uVar14 = calculate_double_precision_08000168(uVar11,uVar3,0,uVar8 & ~(DAT_08006bfc >> (uVar10 & 0xff)));\n                }\n                else {\n                  iVar6 = 0;\n                }\n                local_64 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                local_68 = (undefined4)uVar14;\n                calculate_double_precision_0800016c(local_68,local_64,uVar1,uVar12);\n                uVar14 = calculate_ulonglong_result_080004d0(0,extraout_r1_03,DAT_08006bb0,DAT_08006bb4);\n                uVar11 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar15 = calculate_double_precision_08000168(0,extraout_r1_03,local_68,local_64);\n                uVar15 = calculate_double_precision_08000168(uVar1,uVar12,(int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n                uVar15 = calculate_ulonglong_result_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006bb8,\n                                      DAT_08006bbc);\n                uVar16 = calculate_ulonglong_result_080004d0(0,extraout_r1_03,DAT_08006bc0,DAT_08006bc4);\n                uVar15 = calculate_double_precision_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar12 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar16 = calculate_double_precision_0800016c((int)uVar14,uVar11,(int)uVar15,uVar12);\n                uVar3 = (undefined4)((ulonglong)uVar16 >> 0x20);\n                uVar1 = (undefined4)uVar16;\n                uVar14 = calculate_double_precision_08000168(uVar1,uVar3,(int)uVar14,uVar11);\n                uVar14 = calculate_double_precision_08000168((int)uVar15,uVar12,(int)uVar14,\n                                      (int)((ulonglong)uVar14 >> 0x20));\n                uVar12 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar15 = calculate_ulonglong_result_080004d0(uVar1,uVar3,uVar1,uVar3);\n                uVar4 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar11 = (undefined4)uVar15;\n                uVar15 = calculate_ulonglong_result_080004d0(uVar11,uVar4,DAT_08006bc8,DAT_08006bcc);\n                uVar15 = calculate_double_precision_08000168((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006bd0,\n                                      DAT_08006bd4);\n                uVar15 = calculate_ulonglong_result_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar11,uVar4);\n                uVar15 = calculate_double_precision_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006bd8,\n                                      DAT_08006bdc);\n                uVar15 = calculate_ulonglong_result_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar11,uVar4);\n                uVar15 = calculate_double_precision_08000168((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006be0,\n                                      DAT_08006be4);\n                uVar15 = calculate_ulonglong_result_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar11,uVar4);\n                uVar15 = calculate_double_precision_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006be8,\n                                      DAT_08006bec);\n                uVar15 = calculate_ulonglong_result_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar11,uVar4);\n                uVar15 = calculate_double_precision_08000168(uVar1,uVar3,(int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n                uVar11 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar16 = calculate_ulonglong_result_080004d0(uVar1,uVar3,(int)uVar15,uVar11);\n                uVar15 = calculate_double_precision_08000168((int)uVar15,uVar11,0,0x40000000);\n                uVar15 = calculate_result_08000724((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),(int)uVar15,\n                                      (int)((ulonglong)uVar15 >> 0x20));\n                uVar16 = calculate_ulonglong_result_080004d0(uVar1,uVar3,(int)uVar14,uVar12);\n                uVar14 = calculate_double_precision_0800016c((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),(int)uVar14,\n                                      uVar12);\n                uVar14 = calculate_double_precision_08000168((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar14,\n                                      (int)((ulonglong)uVar14 >> 0x20));\n                uVar14 = calculate_double_precision_08000168((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),uVar1,uVar3);\n                uVar13 = calculate_double_precision_08000168(0,DAT_08006c00,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                iVar5 = (int)(uVar13 >> 0x20);\n                uVar10 = iVar5 + iVar6 * 0x100000;\n                uVar19 = uVar13 & 0xffffffff | (ulonglong)uVar10 << 0x20;\n                if ((int)uVar10 < 0x100000) {\n                  uVar19 = calculate_result_080071c0((int)uVar13,iVar5,iVar6);\n                }\n                param_1 = 0;\n              }\nLAB_0800634a:\n              uVar10 = calculate_ulonglong_result_080004d0((int)uVar19,(int)(uVar19 >> 0x20),param_1,param_2);\n              return uVar10;\n            }\n          }\n          uVar1 = (undefined4)(uVar13 >> 0x20);\n          uVar14 = calculate_double_precision_08000168((int)uVar13,uVar1,(int)uVar13,uVar1);\n          uVar10 = (uint)((ulonglong)uVar14 >> 0x20);\n          uVar8 = (uint)uVar14;\n          param_1 = uVar8;\n          param_2 = uVar10;\nLAB_08006320:\n          uVar10 = calculate_result_08000724(uVar8,uVar10,param_1,param_2);\n          return uVar10;\n        }\n      }\n    }\n    else if ((int)uVar10 <= (int)DAT_08006428) goto LAB_08006262;\n  }\n  if ((uVar8 + 0xc0100000 | param_1) == 0) {\n    return 0;\n  }\nLAB_08006278:\n  uVar10 = shift_left_most_significant_bit_080070a4(PTR_DAT_0800642c);\n  return uVar10;\n}\n\n",
            "called": [
                "FUN_080009c8",
                "FUN_08006c0c",
                "FUN_08000724",
                "FUN_08000168",
                "FUN_08000404",
                "FUN_080004d0",
                "FUN_0800016c",
                "FUN_0800708c",
                "FUN_080071c0",
                "FUN_080070a4",
                "FUN_080009f0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006228",
            "calling": [
                "FUN_08005900"
            ],
            "imported": false,
            "current_name": "FUNC_08006228"
        },
        "FUN_08000c3c": {
            "renaming": {
                "FUN_08000c3c": "calculate_hash_08000c3c",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "shift",
                "iVar3": "multiplier",
                "uVar4": "shifted_input",
                "uVar5": "shift_mask",
                "addend": "addend",
                "result": "result",
                "count_leading_zeroes": "count_leading_zeroes"
            },
            "code": "uint calculate_hash_08000c3c(uint input)\n{\n  if (input == 0) {\n    return 0;\n  }\n  int leading_zeroes = count_leading_zeroes(input);\n  int shift = leading_zeroes - 8;\n  int multiplier = shift * -0x800000 + 0x4a800000;\n  if (leading_zeroes > 7) {\n    int shift_mask = shift & 0xff;\n    uint shifted_input = input << shift_mask;\n    uint shifted_zero = 0U >> (0x20 - shift_mask);\n    uint addend = (uint)(0x7fffffff < 0);\n    uint result = multiplier + shifted_input + shifted_zero + addend;\n    if ((0 << shift_mask) == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shifted_input = input << (leading_zeroes + 0x18U & 0xff);\n  int shift_mask = 0x20 - (leading_zeroes + 0x18U) & 0xff;\n  uint shifted_multiplier = (uint)(multiplier >> shift_mask);\n  uint subtractor = ((int)shifted_input >> 0x1f);\n  uint result = shifted_multiplier + ((input >> shift_mask) - subtractor);\n  if ((shifted_input & 0x7fffffff) == 0) {\n    result = result & ~(shifted_input >> 0x1f);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c3c",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "calculate_hash_08000c3c"
        },
        "FUN_080043bc": {
            "renaming": {
                "FUN_080043bc": "process_data_and_strings_080043bc",
                "puVar3": "destination",
                "puVar4": "source",
                "uVar1": "first_half",
                "uVar2": "second_half",
                "local_24": "first_half_and_second_half_ptr",
                "local_1c": "local_data_buffer"
            },
            "code": "void process_data_and_strings_080043bc(void)\n{\n    undefined4 first_half;\n    undefined4 second_half;\n    undefined4 *source = first_half_and_second_half_ptr;\n    undefined4 *destination = local_data_buffer;\n    for(int i = 0; i < 8; i++)\n    {\n        first_half = *source;\n        second_half = *(source + 1);\n        *destination = first_half;\n        *(destination + 1) = second_half;\n        source += 2;\n        destination += 2;\n    }\n    *(undefined2 *)destination = *(undefined2 *)source;\n    process_string_and_data(0x66, local_data_buffer, 0x12);\n    return;\n}",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043bc",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "process_data_and_strings_080043bc"
        },
        "FUN_08001214": {
            "renaming": {
                "FUN_08001214": "check_param_is_valid_08001214",
                "param_1": "param",
                "puVar1": "ptr_param_range",
                "iVar2": "ptr_data"
            },
            "code": "int check_param_is_valid_08001214(unsigned int param) {\n    unsigned int* ptr_param_range = DAT_08001238;\n    int ptr_data = DAT_0800123c;\n    if (param - 1U < 0x1000000) {\n        ptr_param_range[1] = param - 1U;\n        *(unsigned char*)(ptr_data + 0x23) = 0xf0;\n        ptr_param_range[2] = 0;\n        *ptr_param_range = 7;\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001214",
            "calling": [
                "FUN_08004514",
                "FUN_08001104"
            ],
            "imported": false,
            "current_name": "check_param_is_valid_08001214"
        },
        "FUN_08003fc4": {
            "renaming": {
                "FUN_08003fc4": "set_data_in_memory_location_08003fc4",
                "param_1": "data",
                "PTR_DAT_08003fcc": "pointer_to_memory_location"
            },
            "code": "void set_data_in_memory_location_08003fc4(int data) {\n    int* PTR_DAT_08003fcc = (int*) *(int*)PTR_DAT_08003fcc;\n    int offset = 0x40;\n    *(PTR_DAT_08003fcc + offset) = data;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fc4",
            "calling": [
                "FUN_080041c4",
                "FUN_0800426c"
            ],
            "imported": false,
            "current_name": "set_data_in_memory_location_08003fc4"
        },
        "FUN_08000404": {
            "renaming": {
                "FUN_08000404": "calculate_shifted_value_08000404",
                "param_1": "input_value",
                "uVar1": "shift_amount",
                "uVar2": "absolute_value",
                "uVar3": "remaining_bits",
                "iVar4": "leading_zeroes_count",
                "uVar5": "shifted_bits_count",
                "uVar6": "is_negative",
                "in_r12": "unused_variable",
                "bVar7": "is_negative_overflow",
                "bVar8": "is_negative_zero",
                "bVar9": "is_shift_overflow"
            },
            "code": "ulonglong calculate_shifted_value_08000404(uint input_value)\n{\n  uint absolute_value;\n  uint leading_zeroes_count;\n  uint shifted_value = 0;\n  uint high_bits = 0;\n  bool is_negative = input_value & 0x80000000;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  \n  absolute_value = is_negative ? -input_value : input_value;\n  leading_zeroes_count = count_leading_zeroes(absolute_value);\n  \n  if (leading_zeroes_count < 0xb) {\n    shifted_value = absolute_value << (0x15 - leading_zeroes_count);\n    high_bits = is_negative ? 0xffffffff << (0x15 - leading_zeroes_count) : 0;\n  }\n  else if (leading_zeroes_count < 0x20) {\n    shifted_value = absolute_value << (leading_zeroes_count - 0xb);\n    high_bits = is_negative ? 0xffffffff << (leading_zeroes_count - 0xb) : 0;\n  }\n  else {\n    uint remaining_bits = leading_zeroes_count - 0x432;\n    if (remaining_bits > 0x1e) {\n      return (ulonglong)input_value;\n    }\n    else if (remaining_bits > 0) {\n      shifted_value = absolute_value >> remaining_bits | is_negative ? 0xffffffff << (0x20 - remaining_bits) : 0;\n      high_bits = is_negative ? 0xffffffff << remaining_bits : 0;\n    }\n    else {\n      uint shift_amount = 0xc - (leading_zeroes_count - 0x432);\n      shifted_value = absolute_value << shift_amount;\n      high_bits = is_negative ? 0xffffffff << shift_amount : 0;\n    }\n  }\n  \n  return ((ulonglong)high_bits << 0x20) | shifted_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000404",
            "calling": [
                "FUN_08006228"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08000404"
        },
        "FUN_0800209c": {
            "renaming": {
                "FUN_0800209c": "check_and_calculate_0800209c",
                "param_1": "input_data",
                "param_2": "input_length",
                "cVar1": "second_value_char_1",
                "cVar2": "second_value_char_2",
                "puVar3": "data_ptr",
                "iVar4": "first_value_shifted",
                "iVar5": "value_from_pointer",
                "uVar6": "first_value",
                "uVar7": "second_value",
                "DAT_08002204": "data_pointer",
                "DAT_08002208": "data_pointer_ptr",
                "PTR_DAT_08002210": "calculated_value_ptr",
                "PTR_DAT_0800220c": "data_pointer_shift",
                "calculate_value_08002008": "calculate_value",
                "count_leading_zeroes": "count_leading_zeroes",
                "get_value_from_pointer_0800115c": "get_value_from_pointer",
                "calculate_encoded_data_08001104": "calculate_encoded_data"
            },
            "code": "uint32_t check_and_calculate_0800209c(uint32_t *input_data, uint32_t input_length)\\n\\\n{\\n\\\n    uint32_t *data_ptr = DAT_08002204;\\n\\\n    if ((input_length <= (*DAT_08002204 & 7)) || (*DAT_08002204 = *DAT_08002204 & 0xfffffff8 | input_length, input_length == (*data_ptr & 7))) {\\n\\\n        uint32_t first_value = *input_data;\\n\\\n        if ((int)(first_value << 0x1e) < 0) {\\n\\\n            DAT_08002204[1] = DAT_08002204[1] & 0xffffff0f | input_data[2];\\n\\\n        }\\n\\\n        data_ptr = DAT_08002204;\\n\\\n        int32_t first_value_shifted = first_value << 0x1f;\\n\\\n        if (-1 < first_value_shifted) {\\n\\\n            data_ptr = DAT_08002204;\\n\\\n            if ((input_length < (*DAT_08002204 & 7)) && (*DAT_08002204 = *DAT_08002204 & 0xfffffff8 | input_length, input_length != (*data_ptr & 7))) {\\n\\\n                return 1;\\n\\\n            }\\n\\\n            data_ptr = DAT_08002204;\\n\\\n            uint32_t second_value = *input_data;\\n\\\n            if ((second_value & 4) != 0) {\\n\\\n                DAT_08002204[1] = DAT_08002204[1] & 0xfffff8ff | input_data[3];\\n\\\n            }\\n\\\n            if ((int)(second_value << 0x1c) < 0) {\\n\\\n                DAT_08002204[1] = DAT_08002204[1] & 0xffffc7ff | input_data[4] << 3;\\n\\\n            }\\n\\\n            uint32_t calculated_value = calculate_value();\\n\\\n            uint32_t leading_zeroes_count = count_leading_zeroes(0xf000000);\\n\\\n            *(uint32_t *)DAT_08002208 = calculated_value >> PTR_DAT_0800220c[(DAT_08002204[1] & 0xf0) >> (leading_zeroes_count & 0xff)];\\n\\\n            calculate_encoded_data(0);\\n\\\n            return 0;\\n\\\n        }\\n\\\n        uint32_t second_value = input_data[1];\\n\\\n        if (second_value == 1) {\\n\\\n            char second_value_char_1 = 1;\\n\\\n            char second_value_char_2 = 0;\\n\\\n        }\\n\\\n        else {\\n\\\n            if (second_value == 2) {\\n\\\n                uint32_t DAT_08002204_value = *DAT_08002204;\\n\\\n                uint32_t leading_zeroes_count = count_leading_zeroes((uint32_t)(char)(0 << 6) << 0x18 | (uint32_t)(char)(1 << 6) << 8);\\n\\\n                leading_zeroes_count = (*DAT_08002204 >> (leading_zeroes_count & 0x1f)) << 0x1f;\\n\\\n                if ((int)leading_zeroes_count < 0) {\\n\\\n                    DAT_08002204[1] = DAT_08002204[1] & 0xfffffffc | second_value;\\n\\\n                    int32_t value_from_pointer = get_value_from_pointer(first_value_shifted, leading_zeroes_count);\\n\\\n                    do {\\n\\\n                        if ((DAT_08002204[1] & 0xc) == 4) {\\n\\\n                            data_ptr = DAT_08002204;\\n\\\n                            if ((input_length < (*DAT_08002204 & 7)) && (*DAT_08002204 = *DAT_08002204 & 0xfffffff8 | input_length, input_length != (*data_ptr & 7))) {\\n\\\n                                return 1;\\n\\\n                            }\\n\\\n                            data_ptr = DAT_08002204;\\n\\\n                            uint32_t third_value = *input_data;\\n\\\n                            if ((third_value & 4) != 0) {\\n\\\n                                DAT_08002204[1] = DAT_08002204[1] & 0xfffff8ff | input_data[3];\\n\\\n                            }\\n\\\n                            if ((int)(third_value << 0x1c) < 0) {\\n\\\n                                DAT_08002204[1] = DAT_08002204[1] & 0xffffc7ff | input_data[4] << 3;\\n\\\n                            }\\n\\\n                            uint32_t calculated_value = calculate_value();\\n\\\n                            uint32_t leading_zeroes_count = count_leading_zeroes(0xf000000);\\n\\\n                            *(uint32_t *)DAT_08002208 = calculated_value >> PTR_DAT_0800220c[(DAT_08002204[1] & 0xf0) >> (leading_zeroes_count & 0xff)];\\n\\\n                            calculate_encoded_data(0);\\n\\\n                            return 0;\\n\\\n                        }\\n\\\n                        int32_t value_from_pointer_2 = get_value_from_pointer();\\n\\\n                    } while ((uint32_t)(value_from_pointer_2 - value_from_pointer) < 0x1389);\\n\\\n                }\\n\\\n            }\\n\\\n            else {\\n\\\n                char second_value_char_1 = 0;\\n\\\n                char second_value_char_2 = 1;\\n\\\n            }\\n\\\n        }\\n\\\n        uint32_t leading_zeroes_count = count_leading_zeroes((uint32_t)(char)(second_value_char_2 << 6) << 0x18 | (uint32_t)(char)(second_value_char_1 << 6) << 8);\\n\\\n        leading_zeroes_count = (*DAT_08002204 >> (leading_zeroes_count & 0x1f)) << 0x1f;\\n\\\n        if ((int)leading_zeroes_count < 0) {\\n\\\n            DAT_08002204[1] = DAT_08002204[1] & 0xfffffffc | second_value;\\n\\\n            int32_t value_from_pointer = get_value_from_pointer(first_value_shifted, leading_zeroes_count);\\n\\\n            if (input_data[1] == 1) {\\n\\\n                do {\\n\\\n                    if ((DAT_08002204[1] & 0xc) == 4) {\\n\\\n                        data_ptr = DAT_08002204;\\n\\\n                        if ((input_length < (*DAT_08002204 & 7)) && (*DAT_08002204 = *DAT_08002204 & 0xfffffff8 | input_length, input_length != (*data_ptr & 7))) {\\n\\\n                            return 1;\\n\\\n                        }\\n\\\n                        data_ptr = DAT_08002204;\\n\\\n                        uint32_t third_value = *input_data;\\n\\\n                        if ((third_value & 4) != 0) {\\n\\\n                            DAT_08002204[1] = DAT_08002204[1] & 0xfffff8ff | input_data[3];\\n\\\n                        }\\n\\\n                        if ((int)(third_value << 0x1c) < 0) {\\n\\\n                            DAT_08002204[1] = DAT_08002204[1] & 0xffffc7ff | input_data[4] << 3;\\n\\\n                        }\\n\\\n                        uint32_t calculated_value = calculate_value();\\n\\\n                        uint32_t leading_zeroes_count = count_leading_zeroes(0xf000000);\\n\\\n                        *(uint32_t *)DAT_08002208 = calculated_value >> PTR_DAT_0800220c[(DAT_08002204[1] & 0xf0) >> (leading_zeroes_count & 0xff)];\\n\\\n                        calculate_encoded_data(0);\\n\\\n                        return 0;\\n\\\n                    }\\n\\\n                    int32_t value_from_pointer_2 = get_value_from_pointer();\\n\\\n                } while ((uint32_t)(value_from_pointer_2 - value_from_pointer) < 0x1389);\\n\\\n            }\\n\\\n            else if (input_data[1] == 2) {\\n\\\n                do {\\n\\\n                    if ((DAT_08002204[1] & 0xc) == 8) {\\n\\\n                        data_ptr = DAT_08002204;\\n\\\n                        if ((input_length < (*DAT_08002204 & 7)) && (*DAT_08002204 = *DAT_08002204 & 0xfffffff8 | input_length, input_length != (*data_ptr & 7))) {\\n\\\n                            return 1;\\n\\\n                        }\\n\\\n                        data_ptr = DAT_08002204;\\n\\\n                        uint32_t third_value = *input_data;\\n\\\n                        if ((third_value & 4) != 0) {\\n\\\n                            DAT_08002204[1] = DAT_08002204[1] & 0xfffff8ff | input_data[3];\\n\\\n                        }\\n\\\n                        if ((int)(third_value << 0x1c) < 0) {\\n\\\n                            DAT_08002204[1] = DAT_08002204[1] & 0xffffc7ff | input_data[4] << 3;\\n\\\n                        }\\n\\\n                        uint32_t calculated_value = calculate_value();\\n\\\n                        uint32_t leading_zeroes_count = count_leading_zeroes(0xf000000);\\n\\\n                        *(uint32_t *)DAT_08002208 = calculated_value >> PTR_DAT_0800220c[(DAT_08002204[1] & 0xf0) >> (leading_zeroes_count & 0xff)];\\n\\\n                        calculate_encoded_data(0);\\n\\\n                        return 0;\\n\\\n                    }\\n\\\n                    int32_t value_from_pointer_2 = get_value_from_pointer();\\n\\\n                } while ((uint32_t)(value_from_pointer_2 - value_from_pointer) < 0x1389);\\n\\\n            }\\n\\\n            else {\\n\\\n                do {\\n\\\n                    if ((DAT_08002204[1] & 0xc) == 0) {\\n\\\n                        data_ptr = DAT_08002204;\\n\\\n                        if ((input_length < (*DAT_08002204 & 7)) && (*DAT_08002204 = *DAT_08002204 & 0xfffffff8 | input_length, input_length != (*data_ptr & 7))) {\\n\\\n                            return 1;\\n\\\n                        }\\n\\\n                        data_ptr = DAT_08002204;\\n\\\n                        uint32_t third_value = *input_data;\\n\\\n                        if ((third_value & 4) != 0) {\\n\\\n                            DAT_08002204[1] = DAT_08002204[1] & 0xfffff8ff | input_data[3];\\n\\\n                        }\\n\\\n                        if ((int)(third_value << 0x1c) < 0) {\\n\\\n                            DAT_08002204[1] = DAT_08002204[1] & 0xffffc7ff | input_data[4] << 3;\\n\\\n                        }\\n\\\n                        uint32_t calculated_value = calculate_value();\\n\\\n                        uint32_t leading_zeroes_count = count_leading_zeroes(0xf000000);\\n\\\n                        *(uint32_t *)DAT_08002208 = calculated_value >> PTR_DAT_0800220c[(DAT_08002204[1] & 0xf0) >> (leading_zeroes_count & 0xff)];\\n\\\n                        calculate_encoded_data(0);\\n\\\n                        return 0;\\n\\\n                    }\\n\\\n                    int32_t value_from_pointer_2 = get_value_from_pointer();\\n\\\n                } while ((uint32_t)(value_from_pointer_2 - value_from_pointer) < 0x1389);\\n\\\n            }\\n\\\n            return 3;\\n\\\n        }\\n\\\n    }\\n\\\n    return 1;\\n\\\n}",
            "called": [
                "FUN_0800115c",
                "FUN_08002008",
                "FUN_08001104"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800209c",
            "calling": [
                "FUN_08004514"
            ],
            "imported": false,
            "current_name": "check_and_calculate_0800209c"
        },
        "FUN_0800403c": {
            "renaming": {
                "FUN_0800403c": "process_i2c_data_0800403c",
                "param_1": "device_address",
                "param_2": "register_address",
                "param_3": "data",
                "param_4": "do_nothing",
                "iVar1": "result",
                "local_14": "buffer",
                "process_data_08001828": "process_i2c_data_at_address",
                "PTR_DAT_08004074": "i2c_data_address",
                "process_data_and_strings_08004490": "log_error",
                "PTR_s____Src_i2c_c_08004078": "i2c_error_log",
                "thunk_do_nothing_08001168": "do_nothing_thunk"
            },
            "code": "void process_i2c_data_0800403c(undefined4 device_address, undefined4 register_address, undefined data, int do_nothing) {\n  int result = 0;\n  undefined buffer[8];\n  buffer[0] = data;\n  result = process_i2c_data_0800403c_at_address(PTR_DAT_08004074, device_address, register_address, 1, buffer, 1, 200);\n  if (result != 0) {\n    log_error(PTR_s____Src_i2c_c_08004078, 0x1b);\n  }\n  if (do_nothing != 0) {\n    do_nothing_thunk(0x32);\n  }\n  return;\n}",
            "called": [
                "thunk_FUN_08001168",
                "FUN_08001828",
                "FUN_08004490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800403c",
            "calling": [
                "FUN_08002cb0",
                "FUN_0800411c",
                "FUN_08002ad0",
                "FUN_08003298"
            ],
            "imported": false,
            "current_name": "process_i2c_data_0800403c"
        },
        "FUN_08000cec": {
            "renaming": {
                "FUN_08000cec": "calculate_float_08000cec",
                "param_1": "float_bits_1",
                "param_2": "float_bits_2",
                "param_3": "undefined",
                "param_4": "byte_mask",
                "lVar1": "product",
                "uVar2": "float_bits",
                "uVar3": "exponent_bits_1",
                "uVar6": "product_bits",
                "uVar8": "result",
                "iVar4": "exponent_sum",
                "iVar5": "exponent_diff",
                "iVar7": "adjusted_exponent",
                "bVar9": "flag",
                "bVar10": "borrow_flag"
            },
            "code": "\nuint calculate_float_08000cec(uint float_bits_1,uint float_bits_2,undefined4 undefined,uint byte_mask)\n\n{\n  longlong product;\n  uint float_bits;\n  uint exponent_bits_1;\n  int exponent_sum;\n  int exponent_diff;\n  uint product_bits;\n  int adjusted_exponent;\n  uint result;\n  bool flag;\n  bool borrow_flag;\n  \n  exponent_bits_1 = float_bits_1 >> 0x17 & 0xff;\n  flag = exponent_bits_1 == 0;\n  if (!flag) {\n    byte_mask = float_bits_2 >> 0x17 & 0xff;\n    flag = byte_mask == 0;\n  }\n  if (!flag) {\n    flag = exponent_bits_1 == 0xff;\n  }\n  if (!flag) {\n    flag = byte_mask == 0xff;\n  }\n  if (flag) {\n    byte_mask = float_bits_2 >> 0x17 & 0xff;\n    if (exponent_bits_1 == 0xff || byte_mask == 0xff) {\n      flag = float_bits_1 == 0 || float_bits_1 == 0x80000000;\n      float_bits = float_bits_2;\n      if (float_bits_1 != 0 && float_bits_1 != 0x80000000) {\n        flag = float_bits_2 == 0;\n        float_bits = float_bits_1;\n      }\n      if (!flag) {\n        flag = float_bits_2 == 0x80000000;\n      }\n      result = float_bits;\n      if (((flag) || ((exponent_bits_1 == 0xff && ((float_bits & 0x7fffff) != 0)))) ||\n         ((byte_mask == 0xff && (result = float_bits_2, (float_bits_2 & 0x7fffff) != 0)))) {\n        return result | 0x7fc00000;\n      }\n      float_bits = float_bits ^ float_bits_2;\n      goto LAB_08000e3c;\n    }\n    flag = (float_bits_1 & 0x7fffffff) == 0;\n    if (!flag) {\n      flag = (float_bits_2 & 0x7fffffff) == 0;\n    }\n    if (flag) {\n      return (float_bits_1 ^ float_bits_2) & 0x80000000;\n    }\n    flag = exponent_bits_1 == 0;\n    float_bits = float_bits_1 & 0x80000000;\n    while( true ) {\n      if (flag) {\n        float_bits_1 = float_bits_1 << 1;\n        flag = (float_bits_1 & 0x800000) == 0;\n      }\n      if (!flag) break;\n      exponent_bits_1 = exponent_bits_1 - 1;\n    }\n    float_bits_1 = float_bits_1 | float_bits;\n    flag = byte_mask == 0;\n    float_bits = float_bits_2 & 0x80000000;\n    while( true ) {\n      if (flag) {\n        float_bits_2 = float_bits_2 << 1;\n        flag = (float_bits_2 & 0x800000) == 0;\n      }\n      if (!flag) break;\n      byte_mask = byte_mask - 1;\n    }\n    float_bits_2 = float_bits_2 | float_bits;\n  }\n  exponent_sum = exponent_bits_1 + byte_mask;\n  result = float_bits_1 ^ float_bits_2;\n  exponent_bits_1 = float_bits_1 << 9;\n  flag = exponent_bits_1 == 0;\n  if (!flag) {\n    float_bits_2 = float_bits_2 << 9;\n    flag = float_bits_2 == 0;\n  }\n  if (flag) {\n    if (exponent_bits_1 == 0) {\n      float_bits_2 = float_bits_2 << 9;\n    }\n    float_bits = result & 0x80000000 | float_bits_1 & 0x7fffff | float_bits_2 >> 9;\n    borrow_flag = SBORROW4(exponent_sum,0x7f);\n    exponent_diff = exponent_sum + -0x7f;\n    flag = exponent_diff == 0;\n    adjusted_exponent = exponent_diff;\n    if (!flag && 0x7e < exponent_sum) {\n      borrow_flag = SBORROW4(0xff,exponent_diff);\n      adjusted_exponent = 0xff - exponent_diff;\n      flag = exponent_diff == 0xff;\n    }\n    if (!flag && adjusted_exponent < 0 == borrow_flag) {\n      float_bits = float_bits | exponent_diff * 0x800000;\n    }\n    if (!flag && adjusted_exponent < 0 == borrow_flag) {\n      return float_bits;\n    }\n    float_bits = float_bits | 0x800000;\n    product_bits = 0;\n    borrow_flag = SBORROW4(exponent_diff,1);\n    result = exponent_sum - 0x80;\n    flag = result == 0;\n    exponent_bits_1 = result;\n  }\n  else {\n    product = (ulonglong)(exponent_bits_1 >> 5 | 0x8000000) * (ulonglong)(float_bits_2 >> 5 | 0x8000000);\n    product_bits = (uint)product;\n    float_bits = (uint)((ulonglong)product >> 0x20);\n    flag = float_bits < 0x800000;\n    if (flag) {\n      float_bits = float_bits << 1;\n    }\n    if (flag) {\n      float_bits = float_bits | product_bits >> 0x1f;\n      product_bits = product_bits << 1;\n    }\n    float_bits = result & 0x80000000 | float_bits;\n    result = (exponent_sum + -0x7f) - (uint)flag;\n    borrow_flag = SBORROW4(result,0xfd);\n    flag = result == 0xfd;\n    exponent_bits_1 = result - 0xfd;\n    if (result < 0xfe) {\n      float_bits = float_bits + result * 0x800000 + (uint)(0x7fffffff < product_bits);\n      if (product_bits == 0x80000000) {\n        float_bits = float_bits & 0xfffffffe;\n      }\n      return float_bits;\n    }\n  }\n  if (flag || (int)exponent_bits_1 < 0 != borrow_flag) {\n    flag = (int)(result + 0x19) < 0;\n    if (result == 0xffffffe7 || flag != SCARRY4(result,0x19)) {\n      float_bits = float_bits & 0x80000000;\n    }\n    if (result != 0xffffffe7 && flag == SCARRY4(result,0x19)) {\n      exponent_bits_1 = (float_bits << 1) >> (-result & 0xff);\n      result = float_bits << (result + 0x20 & 0xff);\n      exponent_bits_1 = ((uint)((float_bits & 0x80000000) != 0) << 0x1f | exponent_bits_1 >> 1) + (uint)((byte)exponent_bits_1 & 1);\n      if ((product_bits | result << 1) == 0) {\n        exponent_bits_1 = exponent_bits_1 & ~(result >> 0x1f);\n      }\n      return exponent_bits_1;\n    }\n    return float_bits;\n  }\nLAB_08000e3c:\n  return float_bits & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000cec",
            "calling": [
                "FUN_08002b48",
                "FUN_08004a30",
                "FUN_08002cb0",
                "FUN_08002ec0",
                "FUN_08004a84",
                "FUN_08002bf0",
                "FUN_08002f28",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002d88"
            ],
            "imported": false,
            "current_name": "calculate_float_08000cec"
        },
        "FUN_08006070": {
            "renaming": {
                "FUN_08006070": "calculate_result_08006070",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "unsigned_var1",
                "uVar2": "unsigned_var2",
                "iVar3": "signed_var3",
                "uVar4": "unsigned_var4",
                "uVar5": "result1",
                "uVar6": "result2",
                "uVar7": "undefined_var1",
                "uVar8": "undefined_var2"
            },
            "code": "ulonglong calculate_result_08006070(uint input1, uint input2, uint input3, uint input4)\n{\n  uint unsigned_var1;\n  uint unsigned_var2;\n  int signed_var3;\n  uint unsigned_var4;\n  ulonglong result1;\n  ulonglong result2;\n  undefined8 undefined_var1;\n  undefined8 undefined_var2;\n  \n  result2 = CONCAT44(DAT_08006214,DAT_08006210);\n  result1 = CONCAT44(DAT_08006204,DAT_08006200);\n  unsigned_var4 = input4 & 0x7fffffff;\n  if ((DAT_08006220 < (unsigned_var4 | (-input3 | input3) >> 0x1f)) ||\n     (unsigned_var2 = input2 & 0x7fffffff, DAT_08006220 < (unsigned_var2 | (-input1 | input1) >> 0x1f))) {\n    result1 = calculate_double_precision_0800016c(input1, input2, input3, input4, input4);\n    return result1;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    result1 = calculate_result_08006d68();\n    return result1;\n  }\n  unsigned_var1 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((input1 | unsigned_var2) == 0) {\n    if (unsigned_var1 == 2) {\n      return CONCAT44(DAT_080061fc,DAT_080061f8);\n    }\n    if (unsigned_var1 != 3) {\n      return CONCAT44(input2, input1);\n    }\n  }\n  else {\n    if ((input3 | unsigned_var4) != 0) {\n      if (unsigned_var4 == DAT_08006220) {\n        if (unsigned_var2 == unsigned_var4) {\n          if (unsigned_var1 == 2) {\n            return CONCAT44(DAT_080061ec,DAT_080061e8);\n          }\n          if (unsigned_var1 == 3) {\n            return CONCAT44(DAT_080061f4,DAT_080061f0);\n          }\n          if (unsigned_var1 != 1) {\n            return CONCAT44(DAT_0800621c,DAT_08006218);\n          }\n          return CONCAT44(DAT_080061e4,DAT_080061e0);\n        }\n        if (unsigned_var1 == 2) {\n          return CONCAT44(DAT_080061fc,DAT_080061f8);\n        }\n        if (unsigned_var1 == 3) {\n          return result1;\n        }\n        if (unsigned_var1 == 1) {\n          return 0x8000000000000000;\n        }\n        return 0;\n      }\n      if (unsigned_var2 != DAT_08006220) {\n        signed_var3 = (int)(unsigned_var2 - unsigned_var4) >> 0x14;\n        if (signed_var3 < 0x3d) {\n          if (((int)input4 < 0) && (signed_var3 + 0x3c < 0 != SCARRY4(signed_var3,0x3c))) {\n            result2 = 0;\n          }\n          else {\n            calculate_result_08000724(input1, input2);\n            do_nothing_0800708c();\n            result2 = calculate_result_08006d68();\n          }\n        }\n        signed_var3 = (int)(result2 >> 0x20);\n        if (unsigned_var1 != 1) {\n          if (unsigned_var1 == 2) {\n            undefined_var2 = calculate_double_precision_08000168((int)result2, signed_var3, DAT_08006208, DAT_0800620c);\n            undefined_var1 = CONCAT44(DAT_080061fc, DAT_080061f8);\n          }\n          else {\n            if (unsigned_var1 == 0) {\n              return result2;\n            }\n            undefined_var1 = calculate_double_precision_08000168((int)result2, signed_var3, DAT_08006208, DAT_0800620c);\n            undefined_var2 = CONCAT44(DAT_080061fc, DAT_080061f8);\n          }\n          result1 = calculate_double_precision_08000168((int)undefined_var1, (int)((ulonglong)undefined_var1 >> 0x20), (int)undefined_var2,\n                               (int)((ulonglong)undefined_var2 >> 0x20));\n          return result1;\n        }\n        return result2 & 0xffffffff | (ulonglong)(signed_var3 + 0x80000000) << 0x20;\n      }\n    }\n    result1 = result2;\n    if ((int)input2 < 0) {\n      result1 = CONCAT44(DAT_080061dc, DAT_080061d8);\n    }\n  }\n  return result1;\n}",
            "called": [
                "FUN_08000724",
                "FUN_08000168",
                "FUN_0800016c",
                "FUN_0800708c",
                "FUN_08006d68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006070",
            "calling": [
                "thunk_FUN_08006070"
            ],
            "imported": false,
            "current_name": "calculate_result_08006070"
        },
        "thunk_FUN_08006070": {
            "renaming": {
                "thunk_FUN_08006070": "calculate_result_thunk_08006070",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "bitwise_or",
                "uVar2": "abs_param2",
                "uVar3": "abs_param3",
                "uVar4": "abs_param4",
                "uVar5": "result",
                "uVar6": "temp1",
                "uVar7": "temp2",
                "uVar8": "temp3",
                "uVar9": "temp4",
                "uVar10": "temp5",
                "iVar3": "shift_amount",
                "iVar4": "high_bits"
            },
            "code": "ulonglong calculate_result_thunk_08006070(uint param1, uint param2, uint param3, uint param4)\n{\n  uint abs_param3 = abs(param3);\n  uint abs_param1 = abs(param1);\n  uint abs_param4 = abs(param4);\n  ulonglong result = 0;\n  ulonglong temp1 = ((ulonglong)PTR_DAT_08006214 << 32) | PTR_DAT_08006210;\n  ulonglong temp2 = ((ulonglong)PTR_DAT_08006204 << 32) | PTR_DAT_08006200;\n  if (PTR_DAT_08006220 < (abs_param4 | (-abs_param3 | abs_param3) >> 0x1f) || PTR_DAT_08006220 < (param2 & 0x7fffffff)) {\n    result = calculate_double_precision_0800016c(param1, param2, param3, param4, param4);\n  }\n  else if ((param4 + 0xc0100000 | param3) == 0) {\n    result = calculate_result_08006d68();\n  }\n  else {\n    uint uVar1 = (int)param4 >> 0x1e & 2U | param2 >> 0x1f;\n    if ((param1 | param2) == 0) {\n      if (uVar1 == 2) {\n        result = ((ulonglong)PTR_DAT_080061fc << 32) | PTR_DAT_080061f8;\n      }\n      else if (uVar1 == 3) {\n        result = ((ulonglong)PTR_DAT_080061f4 << 32) | PTR_DAT_080061f0;\n      }\n      else {\n        result = ((ulonglong)param2 << 32) | param1;\n      }\n    }\n    else {\n      if ((abs_param3 | abs_param4) != 0) {\n        if (abs_param4 == PTR_DAT_08006220) {\n          if (param2 == abs_param4) {\n            if (uVar1 == 2) {\n              result = ((ulonglong)PTR_DAT_080061ec << 32) | PTR_DAT_080061e8;\n            }\n            else if (uVar1 == 3) {\n              result = ((ulonglong)PTR_DAT_080061f4 << 32) | PTR_DAT_080061f0;\n            }\n            else if (uVar1 != 1) {\n              result = ((ulonglong)PTR_DAT_0800621c << 32) | PTR_DAT_08006218;\n            }\n            else {\n              result = ((ulonglong)PTR_DAT_080061e4 << 32) | PTR_DAT_080061e0;\n            }\n          }\n          else {\n            if (uVar1 == 2) {\n              result = ((ulonglong)PTR_DAT_080061fc << 32) | PTR_DAT_080061f8;\n            }\n            else if (uVar1 == 3) {\n              result = temp2;\n            }\n            else if (uVar1 == 1) {\n              result = 0x8000000000000000;\n            }\n          }\n        }\n        else if (param2 != PTR_DAT_08006220) {\n          int iVar3 = (int)(param2 - abs_param4) >> 0x14;\n          if (iVar3 < 0x3d) {\n            if (((int)param4 < 0) && (iVar3 + 0x3c < 0 != SCARRY4(iVar3,0x3c))) {\n              temp1 = 0;\n            }\n            else {\n              calculate_result_08000724(param1, param2);\n              do_nothing_0800708c();\n              temp1 = calculate_result_08006d68();\n            }\n          }\n          int iVar4 = (int)(temp1 >> 0x20);\n          if (uVar1 != 1) {\n            if (uVar1 == 2) {\n              ulonglong temp3 = ((ulonglong)PTR_DAT_08006208 << 32) | PTR_DAT_0800620c;\n              result = calculate_double_precision_08000168((int)temp1, iVar4, ((ulonglong)PTR_DAT_080061fc << 32) | PTR_DAT_080061f8, temp3);\n            }\n            else {\n              if (uVar1 == 0) {\n                result = temp1;\n              }\n              else {\n                ulonglong temp4 = ((ulonglong)PTR_DAT_08006208 << 32) | PTR_DAT_0800620c;\n                result = calculate_double_precision_08000168((int)temp1, iVar4, ((ulonglong)PTR_DAT_080061fc << 32) | PTR_DAT_080061f8, temp4);\n              }\n              ulonglong temp5 = ((ulonglong)result >> 0x20);\n              result = calculate_double_precision_08000168((int)result, iVar4, ((ulonglong)PTR_DAT_080061fc << 32) | PTR_DAT_080061f8, ((ulonglong)PTR_DAT_080061fc << 32) | PTR_DAT_080061f8);\n              result = result & 0xffffffff | temp5 << 0x20;\n            }\n          }\n          else {\n            result = temp1 & 0xffffffff | (ulonglong)(iVar4 + 0x80000000) << 0x20;\n          }\n        }\n      }\n      else {\n        result = temp1;\n        if ((int)param2 < 0) {\n          result = ((ulonglong)PTR_DAT_080061dc << 32) | PTR_DAT_080061d8;\n        }\n      }\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_08006070"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058fc",
            "calling": [
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "calculate_result_thunk_08006070"
        },
        "FUN_08004cac": {
            "renaming": {
                "FUN_08004cac": "reverse_copy_and_process_data_08004cac",
                "param_1": "data_size",
                "puVar1": "data_ptr",
                "PTR_DAT_08004cc4": "data_start",
                "PTR_DAT_08004cc8": "data_end",
                "reverse_and_copy_data_08004ffc": "reverse_and_copy_data",
                "process_string_data_08004c8c": "process_string_data"
            },
            "code": "void reverse_copy_and_process_data_08004cac(void* PTR_DAT_08004cc4, void* PTR_DAT_08004cc8, int data_size) {\n    void* data_ptr = PTR_DAT_08004cc4;\n    reverse_and_copy_data(PTR_DAT_08004cc4, PTR_DAT_08004cc8, data_size);\n    process_string_data(data_ptr);\n    return;\n}",
            "called": [
                "FUN_08004ffc",
                "FUN_08004c8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cac",
            "calling": [
                "FUN_08004490"
            ],
            "imported": false,
            "current_name": "reverse_copy_and_process_data_08004cac"
        },
        "FUN_08004c18": {
            "renaming": {
                "FUN_08004c18": "process_data_08004c18",
                "param_1": "input",
                "puVar1": "data_pointer",
                "iVar2": "counter1",
                "iVar3": "counter2",
                "uVar4": "flag",
                "puVar5": "data_array_pointer"
            },
            "code": "int process_data_08004c18(unsigned char input) {\n  unsigned char *data_pointer;\n  int counter1;\n  int counter2;\n  unsigned char flag;\n  unsigned short *data_array_pointer;\n  \n  data_array_pointer = (unsigned short *)data_array;\n  *data_array = input;\n  data_pointer = data_array_flags;\n  if ((data_array_flags[57] == 1) || (data_array_flags[57] == '\"')) {\n    if (data_array_pointer == (unsigned short *)0x0) {\n      return 1;\n    }\n    if (data_array_flags[56] != 1) {\n      data_array_flags[56] = 1;\n      *(int *)(data_pointer + 60) = 0;\n      *(unsigned short *)(data_pointer + 36) = 1;\n      if (data_pointer[57] == '\"') {\n        flag = 0x32;\n      }\n      else {\n        flag = 0x12;\n      }\n      *(unsigned short *)(data_pointer + 38) = 1;\n      data_pointer[57] = flag;\nLAB_080027c4:\n      do {\n        if (*(short *)(data_pointer + 38) == 0) {\n          counter1 = get_value_from_pointer_0800115c();\n          do {\n            if (**(int **)data_pointer << 0x19 < 0) {\n              if (data_pointer[57] == '2') {\n                flag = 0x22;\n              }\n              else {\n                flag = 1;\n              }\n              data_pointer[57] = flag;\n              data_array_flags[56] = 0;\n              return 0;\n            }\n            counter2 = get_value_from_pointer_0800115c();\n          } while ((unsigned int)(counter2 - counter1) < 6);\nLAB_0800281c:\n          counter1 = *(int *)data_pointer;\n          *(unsigned int *)(counter1 + 12) = *(unsigned int *)(counter1 + 12) & 0xffffff7f;\n          *(unsigned int *)(counter1 + 12) = *(unsigned int *)(counter1 + 12) & 0xffffffdf;\n          *(unsigned int *)(counter1 + 12) = *(unsigned int *)(counter1 + 12) & 0xfffffeff;\n          *(unsigned int *)(counter1 + 20) = *(unsigned int *)(counter1 + 20) & 0xfffffffe;\n          data_pointer[57] = 1;\n          data_array_flags[56] = 0;\n          return 3;\n        }\n        *(short *)(data_pointer + 38) = *(short *)(data_pointer + 38) + -1;\n        if (*(int *)(data_pointer + 8) == 0x1000) {\n          counter1 = get_value_from_pointer_0800115c();\n          while (-1 < **(int **)data_pointer << 0x18) {\n            counter2 = get_value_from_pointer_0800115c();\n            if (5 < (unsigned int)(counter2 - counter1)) goto LAB_0800281c;\n          }\n          (*(int **)data_pointer)[1] = *data_array_pointer & 0x1ff;\n          if (*(int *)(data_pointer + 16) == 0) {\n            data_array_pointer = (unsigned short *)((int)data_array_pointer + 1);\n            goto LAB_080027c4;\n          }\n        }\n        else {\n          counter1 = get_value_from_pointer_0800115c();\n          while (-1 < **(int **)data_pointer << 0x18) {\n            counter2 = get_value_from_pointer_0800115c();\n            if (5 < (unsigned int)(counter2 - counter1)) goto LAB_0800281c;\n          }\n          (*(int **)data_pointer)[1] = (unsigned int)*(unsigned char *)data_array_pointer;\n        }\n        data_array_pointer = (unsigned short *)((int)data_array_pointer + 1);\n      } while( true );\n    }\n  }\n  return 2;\n}",
            "called": [
                "FUN_0800115c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c18",
            "calling": [
                "FUN_08004c8c",
                "FUN_08004490",
                "FUN_08004300"
            ],
            "imported": false,
            "current_name": "process_data_08004c18"
        },
        "FUN_0800483c": {
            "renaming": {
                "FUN_0800483c": "calculate_hash_0800483c",
                "param_1": "input",
                "uVar1": "hash_input",
                "uVar2": "hash",
                "iVar3": "is_empty_input",
                "iVar4": "hash_length",
                "iVar5": "input_length",
                "iVar6": "hash_input1",
                "iVar7": "hash_input2",
                "is_string_empty_08001064": "is_string_empty",
                "is_input_empty_08001028": "is_input_empty",
                "FUN_08000adc": "hash_input_add",
                "FUN_08000ad8": "hash_input_sub",
                "FUN_08000cec": "hash_input_concat",
                "calculate_hash_08000c44": "calculate_hash"
            },
            "code": "void calculate_hash_0800483c(int *input)\n{\n    int input_length = input[0xc];\n    int hash_input = calculate_float_08000adc(input[7], input[9]);\n    int hash = calculate_float_08000ad8(hash_input, input_length);\n    input[10] = hash;\n    \n    if (*input == 3)\n    {\n        int is_empty_string = is_string_empty(input[10], 0);\n        if (is_empty_string == 0)\n        {\n            is_input_empty(input[10], DATA_08004974);\n        }\n        else\n        {\n            is_string_empty(input[10], DATA_08004964);\n        }\n        \n        if (is_empty_string != 0)\n        {\n            int hash_input = calculate_float_08000cec(input[10], DATA_08004968);\n            int is_empty_string = is_string_empty(input[10], 0);\n            int hash_length = input[10];\n            if (is_empty_string == 0)\n            {\n                hash_length -= 0x80000000;\n            }\n            hash_input = calculate_float_value_08000e54(hash_input, hash_length);\n            int hash = calculate_float_08000ad8(input[10], hash_input);\n            input[10] = hash;\n        }\n    }\n    \n    int hash_input1 = input[2];\n    int hash_input2 = input[3];\n    int hash_input = calculate_float_08000cec(input[1], input[10]);\n    input[0xe] = hash_input;\n    hash_input = calculate_float_08000adc(input[10], input[0xf]);\n    input[0xf] = hash_input;\n    int is_empty_input = is_input_empty(input[0xf], DATA_0800496c);\n    int hash_length = DATA_0800496c;\n    if (is_empty_input == 0)\n    {\n        int is_empty_string = is_string_empty(input[0xf], DATA_08004970);\n        hash_length = DATA_08004970;\n        if (is_empty_string == 0)\n        {\n            hash_length = input[0xf];\n        }\n    }\n    input[0xf] = hash_length;\n    int hash = calculate_float_08000ad8(input[0xc], input[0xd]);\n    input[0x10] = hash;\n    hash_input = calculate_float_08000cec(hash_input1, input[0xf]);\n    hash_input = calculate_float_08000adc(hash_input, input[0xe]);\n    int hash = calculate_float_08000cec(hash_input2, input[0x10]);\n    hash = calculate_float_08000ad8(hash_input, hash);\n    input[0x12] = hash;\n    int hash1 = calculate_hash_0800483c(input[0x13]);\n    is_empty_input = is_input_empty(input[0x12], DATA_0800496c);\n    hash_length = DATA_0800496c;\n    if (is_empty_input == 0)\n    {\n        int is_empty_string = is_string_empty(input[0x12], DATA_08004970);\n        hash_length = DATA_08004970;\n        if (is_empty_string == 0)\n        {\n            hash_length = input[0x12];\n        }\n    }\n    hash_input = calculate_float_08000cec(hash_length, hash1);\n    input[0x12] = hash_input;\n    input[0xd] = input[0xc];\n    input[0xb] = input[10];\n    input[0x15] = input[0x14];\n}\n",
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_08001064",
                "FUN_08000adc",
                "FUN_08000e54",
                "FUN_08001028",
                "FUN_08000c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800483c",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "calculate_hash_0800483c"
        },
        "FUN_08004c8c": {
            "renaming": {
                "FUN_08004c8c": "process_string_data_08004c8c",
                "param_1": "string_data",
                "uVar1": "end_of_string_index",
                "puVar2": "current_char",
                "find_end_of_string_08000150": "find_end_of_string",
                "process_data_08004c18": "process_data"
            },
            "code": "void process_string_data_08004c8c(char *string_data)\n{\n  uint end_of_string_index;\n  char *current_char;\n  \n  current_char = string_data;\n  while( true ) {\n    end_of_string_index = find_end_of_string(current_char);\n    if (end_of_string_index <= (uint)((int)current_char - (int)string_data)) break;\n    process_data(*current_char);\n    current_char = current_char + 1;\n  }\n  return;\n}",
            "called": [
                "FUN_08000150",
                "FUN_08004c18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c8c",
            "calling": [
                "FUN_08004cac",
                "FUN_08004490",
                "FUN_08004300"
            ],
            "imported": false,
            "current_name": "process_string_data_08004c8c"
        },
        "FUN_08001460": {
            "renaming": {
                "FUN_08001460": "check_value_match_08001460",
                "param_1": "ptr_values",
                "param_2": "value",
                "param_3": "max_iterations",
                "iVar1": "start_value",
                "puVar4": "ptr",
                "uVar3": "match_value",
                "mask": "mask",
                "iVar2": "current_value"
            },
            "code": "uint32_t check_value_match_08001460(uint32_t **ptr_values, uint32_t value, uint32_t max_iterations) {\n    int32_t start_value = get_start_value();\n    do {\n        uint32_t *ptr = *ptr_values;\n        uint32_t mask = (value << 8) >> 0x18;\n        uint32_t match_value = ptr[mask == 1 ? 5 : 6];\n        if ((value & 0xffff & ~match_value) == 0) {\n            return 0;\n        }\n        if ((int32_t)(ptr[5] << 0x15) < 0) {\n            *ptr |= 0x200;\n            ptr[5] &= 0xfffffbff;\n            ptr_values[14] = (uint32_t *)0x4;\n            *((uint8_t *)ptr_values + 0x35) = 0x20;\n            *(uint8_t *)(ptr_values + 0xd) = 0;\n            return 1;\n        }\n    } while ((max_iterations == 0xffffffff) || ((max_iterations != 0 && (get_start_value() - start_value) <= max_iterations)));\n    *((uint8_t *)ptr_values + 0x35) = 0x20;\n    *(uint8_t *)(ptr_values + 0xd) = 0;\n    return 3;\n}",
            "called": [
                "FUN_0800115c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001460",
            "calling": [
                "FUN_08001530",
                "FUN_080015e8"
            ],
            "imported": false,
            "current_name": "check_value_match_08001460"
        },
        "FUN_08001064": {
            "renaming": {
                "FUN_08001064": "is_string_empty_08001064",
                "in_CY": "input_char",
                "concatenate_params_and_reverse_08000ffc": "concatenate_and_reverse_params"
            },
            "code": "bool is_string_empty_08001064(void)\n{\n  char input_char;\n  concatenate_and_reverse_params();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_08000ffc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001064",
            "calling": [
                "FUN_08004a84",
                "FUN_0800483c"
            ],
            "imported": false,
            "current_name": "is_string_empty_08001064"
        },
        "FUN_08003fd0": {
            "renaming": {
                "FUN_08003fd0": "set_data_in_struct_08003fd0",
                "param_1": "data",
                "PTR_DAT_08003fd8": "ptr",
                "offset": "offset"
            },
            "code": "void set_data_in_struct_08003fd0(int data) {\n    int* PTR_DAT_08003fd8 = (int*) PTR_DAT_08003fd8;\n    int offset = 0x3c;\n    *(PTR_DAT_08003fd8 + offset) = data;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fd0",
            "calling": [
                "FUN_080041c4",
                "FUN_0800426c"
            ],
            "imported": false,
            "current_name": "set_data_in_struct_08003fd0"
        },
        "FUN_08000892": {
            "renaming": {
                "FUN_08000892": "calculate_result_08000892",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "check4",
                "unaff_r4": "check2",
                "uVar2": "mask_check",
                "uVar3": "temp2",
                "in_r12": "mask",
                "bVar4": "check3",
                "LAB_08000704": "return_case1",
                "LAB_080006c8": "return_case2"
            },
            "code": "ulonglong calculate_result_08000892(uint input_1, uint input_2, uint input_3, uint input_4)\n{\n  uint mask = 0x80000000;\n  uint temp1 = input_1;\n  uint temp2 = input_2;\n  uint temp3 = input_3;\n  uint temp4 = input_4;\n  uint check1 = in_r12 & input_4 >> 0x14;\n  uint check2 = unaff_r4;\n  if (check2 != in_r12 || check1 != in_r12) {\n    if (check2 == in_r12) {\n      if (((input_1 | input_2 << 0xc) == 0) && (input_1 = input_3, temp2 = input_4, check1 != in_r12)) {\n        return (ulonglong)((input_2 ^ input_4) & mask | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (check1 == in_r12) {\n      input_1 = input_3;\n      temp2 = input_4;\n      if ((input_3 | input_4 << 0xc) == 0) {\n        return (ulonglong)((input_2 ^ input_4) & mask) << 0x20;\n      }\n    }\n    else {\n      bool check3 = (input_1 | input_2 << 1) == 0;\n      if (!check3) {\n        check3 = (input_3 | input_4 << 1) == 0;\n      }\n      if (!check3) {\n        if (unaff_r4 == 0) {\n          temp2 = input_2 & mask;\n          do {\n            uint check4 = input_1 & mask;\n            input_1 = input_1 << 1;\n            temp2 = temp2 * 2 + (uint)(check4 != 0);\n          } while ((temp2 & 0x100000) == 0);\n          temp2 = temp2 | check1;\n          if (check2 != 0) {\n            return CONCAT44(temp2,input_1);\n          }\n        }\n        do {\n          temp4 = input_3 & mask;\n          input_3 = input_3 << 1;\n          input_4 = input_4 * 2 + (uint)(temp4 != 0);\n        } while ((input_4 & 0x100000) == 0);\n        return CONCAT44(temp2,input_1);\n      }\n      if ((input_1 | input_2 << 1) != 0) goto LAB_08000704;\n      if ((input_3 | input_4 << 1) != 0) goto LAB_080006c8;\n    }\n  }\n  return CONCAT44(temp2,input_1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000892",
            "calling": [
                "FUN_08000724"
            ],
            "imported": false,
            "current_name": "calculate_result_08000892"
        },
        "FUN_08004458": {
            "renaming": {
                "FUN_08004458": "process_and_send_data_08004458",
                "puVar1": "current_data",
                "puVar2": "temp_data_1",
                "puVar3": "current_output",
                "puVar4": "input_data",
                "puVar5": "data_end",
                "local_30": "data_array",
                "local_24": "input_strings",
                "PTR_DAT_0800448c": "DATA_PTR_1",
                "PTR_DAT_080044a0": "DATA_PTR_2"
            },
            "code": "void process_and_send_data_08004458(void)\n{\n  undefined4 *current_data = data_array;\n  undefined4 temp_data_1;\n  undefined4 *current_output = output_array;\n  undefined4 *input_data = (undefined4 *)PTR_DAT_0800448c;\n  undefined2 *input_strings = (undefined2 *)PTR_DAT_080044a0;\n  undefined4 data_end = (undefined4)(PTR_DAT_0800448c + 0x18);\n  undefined2 string_end = (undefined2)(PTR_DAT_080044a0 + 0x1e);\n  while (current_data != data_end) {\n    temp_data_1 = current_data[1];\n    *current_output = *current_data;\n    current_output[1] = temp_data_1;\n    current_data += 2;\n    current_output += 2;\n  }\n  current_output[0] = *current_data;\n  *(undefined2 *)(current_output + 1) = *(undefined2 *)(current_data + 1);\n  process_string_and_data(0x70, data_array, output_array, input_strings, string_end);\n}\n",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004458",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "process_and_send_data_08004458"
        },
        "thunk_FUN_08001168": {
            "renaming": {
                "thunk_FUN_08001168": "thunk_do_nothing_08001168"
            },
            "code": "\nvoid thunk_do_nothing_08001168(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "FUN_08001168"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f64",
            "calling": [
                "FUN_0800403c",
                "FUN_08004028",
                "FUN_08004490",
                "FUN_08003298"
            ],
            "imported": false,
            "current_name": "thunk_do_nothing_08001168"
        },
        "FUN_08000134": {
            "renaming": {
                "FUN_08000134": "concatenate_08000134",
                "param_1": "num1",
                "param_2": "num2",
                "DAT_08000144": "global_flag",
                "PTR_FUN_0800014c": "global_ptr1",
                "PTR_DAT_08000148": "global_ptr2"
            },
            "code": "typedef unsigned long long uint64_t;\n\nuint64_t concatenate_08000134(uint64_t param_1, uint64_t param_2)\n{\n    if (DAT_08000144 != 0) {\n        param_1 = PTR_FUN_0800014c;\n        param_2 = PTR_DAT_08000148;\n    }\n    return ((uint64_t)param_2 << 32) | param_1;\n}\n",
            "called": [
                "FUN_080072d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000134",
            "calling": [
                "FUN_08004fb4"
            ],
            "imported": false,
            "current_name": "concatenate_08000134"
        },
        "FUN_08003eb0": {
            "renaming": {
                "FUN_08003eb0": "convert_to_64bit_08003eb0",
                "param_1": "input"
            },
            "code": "longlong convert_to_64bit_08003eb0(uint32_t input)\n{\n    if (*(int *)PTR_DAT_08003ec4 == 0)\n    {\n        software_interrupt(0x3f);\n        return CONCAT44(input, 1);\n    }\n    return (ulonglong)input << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eb0",
            "calling": [
                "FUN_080041ae"
            ],
            "imported": false,
            "current_name": "convert_to_64bit_08003eb0"
        },
        "FUN_08005c70": {
            "renaming": {
                "FUN_08005c70": "calculateResult_08005c70",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "result1",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "maskedInput2",
                "uVar9": "result",
                "uVar10": "tempResult1",
                "uVar11": "tempResult2",
                "uVar12": "tempResult3"
            },
            "code": "\nulonglong calculateResult_08005c70(uint input1,uint input2)\n\n{\n  int result1;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  uint maskedInput2;\n  ulonglong result;\n  undefined8 tempResult1;\n  undefined8 tempResult2;\n  undefined8 tempResult3;\n  \n  result = CONCAT44(input2,input1);\n  maskedInput2 = input2 & 0x7fffffff;\n  if (DAT_08005f90 < (int)maskedInput2) {\n    if ((maskedInput2 + 0xc0100000 | input1) != 0) {\n      tempResult1 = calculate_double_precision_08000168(input1,input2,input1,input2);\n      temp1 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n      result = calculate_result_08000724((int)tempResult1,temp1,(int)tempResult1,temp1);\n      return result;\n    }\n    result = calculate_ulonglong_result_080004d0(input1,input2,DAT_08005f28,DAT_08005f2c);\n    tempResult1 = calculate_ulonglong_result_080004d0(input1,input2,DAT_08005f30,DAT_08005f34);\nLAB_08005cba:\n    result = calculate_double_precision_0800016c((int)result,(int)(result >> 0x20),(int)tempResult1,\n                         (int)((ulonglong)tempResult1 >> 0x20));\n  }\n  else {\n    if ((int)maskedInput2 <= DAT_08005f94) {\n      if (0x3e3fffff < maskedInput2) {\n        tempResult1 = calculate_ulonglong_result_080004d0(input1,input2,input1,input2);\n        temp6 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n        temp1 = (undefined4)tempResult1;\n        tempResult1 = calculate_ulonglong_result_080004d0(temp1,temp6,DAT_08005f40,DAT_08005f44);\n        tempResult1 = calculate_double_precision_0800016c((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),DAT_08005f48,DAT_08005f4c\n                             );\n        tempResult1 = calculate_ulonglong_result_080004d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),temp1,temp6);\n        tempResult1 = calculate_double_precision_08000168((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),DAT_08005f50,DAT_08005f54\n                             );\n        tempResult1 = calculate_ulonglong_result_080004d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),temp1,temp6);\n        tempResult1 = calculate_double_precision_0800016c((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),DAT_08005f58,DAT_08005f5c\n                             );\n        tempResult1 = calculate_ulonglong_result_080004d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),temp1,temp6);\n        tempResult1 = calculate_double_precision_08000168((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),DAT_08005f60,DAT_08005f64\n                             );\n        tempResult1 = calculate_ulonglong_result_080004d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),temp1,temp6);\n        tempResult1 = calculate_double_precision_0800016c((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),DAT_08005f68,DAT_08005f6c\n                             );\n        tempResult1 = calculate_ulonglong_result_080004d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),temp1,temp6);\n        tempResult2 = calculate_ulonglong_result_080004d0(temp1,temp6,DAT_08005f70,DAT_08005f74);\n        tempResult2 = calculate_double_precision_08000168((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),DAT_08005f78,DAT_08005f7c\n                             );\n        tempResult2 = calculate_ulonglong_result_080004d0((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),temp1,temp6);\n        tempResult2 = calculate_double_precision_0800016c((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),DAT_08005f80,DAT_08005f84\n                             );\n        tempResult2 = calculate_ulonglong_result_080004d0((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),temp1,temp6);\n        tempResult2 = calculate_double_precision_08000168((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),DAT_08005f88,DAT_08005f8c\n                             );\n        tempResult2 = calculate_ulonglong_result_080004d0((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),temp1,temp6);\n        tempResult2 = calculate_double_precision_0800016c((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),0,DAT_08005f98);\n        tempResult1 = calculate_result_08000724((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),(int)tempResult2,\n                              (int)((ulonglong)tempResult2 >> 0x20));\n        tempResult1 = calculate_ulonglong_result_080004d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),input1,input2);\n        goto LAB_08005cba;\n      }\n      tempResult1 = calculate_double_precision_0800016c(input1,input2,DAT_08005f38,DAT_08005f3c);\n      result1 = is_end_of_input_080009f0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),0,DAT_08005f98);\n      if (result1 != 0) {\n        return result;\n      }\n    }\n    tempResult1 = do_nothing_0800708c(input1,input2);\n    tempResult1 = calculate_double_precision_08000168(0,DAT_08005f98,(int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20));\n    tempResult1 = calculate_ulonglong_result_080004d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),0,DAT_08005f9c);\n    temp2 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n    temp1 = (undefined4)tempResult1;\n    tempResult1 = calculate_ulonglong_result_080004d0(temp1,temp2,DAT_08005f40,DAT_08005f44);\n    tempResult1 = calculate_double_precision_0800016c((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),DAT_08005f48,DAT_08005f4c);\n    tempResult1 = calculate_ulonglong_result_080004d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),temp1,temp2);\n    tempResult1 = calculate_double_precision_08000168((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),DAT_08005f50,DAT_08005f54);\n    tempResult1 = calculate_ulonglong_result_080004d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),temp1,temp2);\n    tempResult1 = calculate_double_precision_0800016c((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),DAT_08005f58,DAT_08005f5c);\n    tempResult1 = calculate_ulonglong_result_080004d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),temp1,temp2);\n    tempResult1 = calculate_double_precision_08000168((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),DAT_08005f60,DAT_08005f64);\n    tempResult1 = calculate_ulonglong_result_080004d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),temp1,temp2);\n    tempResult1 = calculate_double_precision_0800016c((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),DAT_08005f68,DAT_08005f6c);\n    tempResult1 = calculate_ulonglong_result_080004d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),temp1,temp2);\n    temp3 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n    tempResult2 = calculate_ulonglong_result_080004d0(temp1,temp2,DAT_08005f70,DAT_08005f74);\n    tempResult2 = calculate_double_precision_08000168((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),DAT_08005f78,DAT_08005f7c);\n    tempResult2 = calculate_ulonglong_result_080004d0((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),temp1,temp2);\n    tempResult2 = calculate_double_precision_0800016c((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),DAT_08005f80,DAT_08005f84);\n    tempResult2 = calculate_ulonglong_result_080004d0((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),temp1,temp2);\n    tempResult2 = calculate_double_precision_08000168((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),DAT_08005f88,DAT_08005f8c);\n    tempResult2 = calculate_ulonglong_result_080004d0((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),temp1,temp2);\n    tempResult2 = calculate_double_precision_0800016c((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),0,DAT_08005f98);\n    temp4 = (undefined4)((ulonglong)tempResult2 >> 0x20);\n    tempResult3 = calculate_float_08006c0c(temp1,temp2);\n    temp5 = (undefined4)((ulonglong)tempResult3 >> 0x20);\n    temp6 = (undefined4)tempResult3;\n    if (DAT_08005fa0 < (int)maskedInput2) {\n      tempResult1 = calculate_result_08000724((int)tempResult1,temp3,(int)tempResult2,temp4);\n      tempResult1 = calculate_ulonglong_result_080004d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),temp6,temp5);\n      tempResult1 = calculate_double_precision_0800016c((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),temp6,temp5);\n      temp1 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n      tempResult1 = calculate_double_precision_0800016c((int)tempResult1,temp1,(int)tempResult1,temp1);\n      tempResult1 = calculate_double_precision_08000168((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),DAT_08005f30,DAT_08005f34);\n      temp1 = DAT_08005f28;\n      temp6 = DAT_08005f2c;\n    }\n    else {\n      tempResult1 = calculate_result_08000724((int)tempResult1,temp3,(int)tempResult2,temp4);\n      tempResult2 = calculate_double_precision_0800016c(temp6,temp5,temp6,temp5);\n      tempResult1 = calculate_ulonglong_result_080004d0((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),(int)tempResult2,\n                            (int)((ulonglong)tempResult2 >> 0x20));\n      tempResult2 = calculate_ulonglong_result_080004d0(0,temp5,0,temp5);\n      tempResult2 = calculate_double_precision_08000168(temp1,temp2,(int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20));\n      tempResult3 = calculate_double_precision_0800016c(temp6,temp5,0,temp5);\n      tempResult2 = calculate_result_08000724((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),(int)tempResult3,\n                            (int)((ulonglong)tempResult3 >> 0x20));\n      temp1 = (undefined4)((ulonglong)tempResult2 >> 0x20);\n      tempResult2 = calculate_double_precision_0800016c((int)tempResult2,temp1,(int)tempResult2,temp1);\n      tempResult2 = calculate_double_precision_08000168(DAT_08006060,DAT_08006064,(int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20));\n      tempResult1 = calculate_double_precision_08000168((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),(int)tempResult2,\n                            (int)((ulonglong)tempResult2 >> 0x20));\n      tempResult2 = calculate_double_precision_0800016c(0,temp5,0,temp5);\n      tempResult2 = calculate_double_precision_08000168(DAT_08006068,DAT_0800606c,(int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20));\n      tempResult1 = calculate_double_precision_08000168((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),(int)tempResult2,\n                            (int)((ulonglong)tempResult2 >> 0x20));\n      temp1 = DAT_08006068;\n      temp6 = DAT_0800606c;\n    }\n    result = calculate_double_precision_08000168(temp1,temp6,(int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20));\n    if ((int)input2 < 1) {\n      result = result & 0xffffffff | (ulonglong)((int)(result >> 0x20) + 0x80000000) << 0x20;\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_08006c0c",
                "FUN_08000724",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_0800016c",
                "FUN_0800708c",
                "FUN_080009f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c70",
            "calling": [
                "FUN_08005854"
            ],
            "imported": false,
            "current_name": "calculateResult_08005c70"
        },
        "FUN_08002ee8": {
            "renaming": {
                "FUN_08002ee8": "check_input_and_call_function_08002ee8",
                "uVar2": "param1",
                "iVar1": "params_reversed",
                "PTR_DAT_08002f18": "ptr_data",
                "DAT_08002f1c": "data_1",
                "is_input_empty_08001028": "is_input_empty",
                "DAT_08002f20": "input_data",
                "FUN_08000adc": "call_function_with_input",
                "FUN_08000ad8": "call_function_with_default_input",
                "DAT_08002f24": "default_input"
            },
            "code": "void check_input_and_call_function_08002ee8(void)\n{\n  int params_reversed;\n  undefined4 param1;\n  undefined4 param2;\n  \n  param1 = *(undefined4 *)(PTR_DAT_08002f18 + 8);\n  params_reversed = check_if_params_are_reversed_and_not_empty(param1, DAT_08002f1c);\n  if ((params_reversed != 0) && (is_input_empty(param1, DAT_08002f20) != 0)) {\n    call_function_with_input(param1, DAT_08002f20);\n    return;\n  }\n  call_function_with_DAT_08002f24(param1, DAT_08002f24);\n  return;\n}",
            "called": [
                "FUN_08000ad8",
                "FUN_08000adc",
                "FUN_08001028",
                "FUN_08001050"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ee8",
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "check_input_and_call_function_08002ee8"
        },
        "FUN_08001104": {
            "renaming": {
                "FUN_08001104": "calculate_encoded_data_08001104",
                "param_1": "input_value",
                "uVar1": "memory_value",
                "check_param_is_valid_08001214": "validate_param",
                "encode_data_08001194": "encode_data"
            },
            "code": "int calculate_encoded_data_08001104(int input_value) {\n\tint memory_value = get_value_at_memory_address();\n\tint validated_param = memory_value / 1000;\n\tencode_data(0xffffffff, input_value, 0);\n\treturn 0;\n}",
            "called": [
                "FUN_08001194",
                "FUN_08002214",
                "FUN_08001214"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001104",
            "calling": [
                "FUN_0800209c",
                "FUN_08001128"
            ],
            "imported": false,
            "current_name": "calculate_encoded_data_08001104"
        },
        "thunk_FUN_0800115c": {
            "renaming": {
                "thunk_FUN_0800115c": "get_value_from_pointer_thunk_0800115c",
                "undefined4": "int",
                "*": "pointer",
                "PTR_DAT_08001164": "value_pointer",
                "value": "value"
            },
            "code": "int get_value_from_pointer_thunk_0800115c() {\n    int *PTR_DAT_08001164 = PTR_DAT_08001164;\n    int value = *PTR_DAT_08001164;\n    return value;\n}",
            "called": [
                "FUN_0800115c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f60",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_thunk_0800115c"
        },
        "FUN_08006d68": {
            "renaming": {
                "FUN_08006d68": "calculate_result_08006d68",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "calculation_type",
                "uVar2": "result_low",
                "uVar3": "result_high",
                "uVar4": "temp_low",
                "uVar5": "temp_high",
                "uVar6": "input_1_low",
                "uVar7": "input_1_high",
                "uVar8": "input_2_unsigned",
                "uVar10": "final_result",
                "uVar11": "temp_result_low",
                "uVar12": "temp_result",
                "uVar13": "temp_result_high",
                "puVar9": "calculation_constants"
            },
            "code": "\nulonglong calculate_result_08006d68(int input_1,uint input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  int calculation_type;\n  undefined4 result_low;\n  undefined4 result_high;\n  undefined4 temp_low;\n  undefined4 temp_high;\n  undefined4 input_1_low;\n  undefined4 input_1_high;\n  uint input_2_unsigned;\n  undefined4 *calculation_constants;\n  ulonglong final_result;\n  undefined8 temp_result_low;\n  ulonglong temp_result;\n  undefined8 temp_result_high;\n  \n  final_result = CONCAT44(DAT_08007088,DAT_08007060);\n  temp_result = CONCAT44(input_2,input_1);\n  input_2_unsigned = input_2 & 0x7fffffff;\n  if (DAT_08007058 < (int)input_2_unsigned) {\n    if (((int)DAT_0800705c < (int)input_2_unsigned) || ((input_2_unsigned == DAT_0800705c && (input_1 != 0)))) {\n      final_result = calculate_double_precision_0800016c(input_1,input_2,input_1,input_2,input_4);\n    }\n    else if ((int)input_2 < 1) {\n      final_result = CONCAT44(DAT_08007064,DAT_08007060);\n    }\n  }\n  else {\n    if (DAT_08007068 < (int)input_2_unsigned) {\n      temp_result_low = do_nothing_0800708c();\n      result_high = (undefined4)((ulonglong)temp_result_low >> 0x20);\n      result_low = (undefined4)temp_result_low;\n      if (DAT_08007070 < (int)input_2_unsigned) {\n        if (DAT_08007074 < (int)input_2_unsigned) {\n          temp_result = calculate_result_08006d68_08000724(0,DAT_0800707c,result_low,result_high);\n          calculation_type = 3;\n        }\n        else {\n          temp_result_low = calculate_double_precision_08000168(result_low,result_high,0,DAT_08007078);\n          temp_result_high = calculate_ulonglong_result_080004d0(result_low,result_high,0,DAT_08007078);\n          temp_result_high = calculate_double_precision_0800016c((int)temp_result_high,(int)((ulonglong)temp_result_high >> 0x20),0,DAT_0800706c);\n          temp_result = calculate_result_08006d68_08000724((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),(int)temp_result_high,\n                                (int)((ulonglong)temp_result_high >> 0x20));\n          calculation_type = 2;\n        }\n      }\n      else if (DAT_08007070 + -0xd0000 < (int)input_2_unsigned) {\n        temp_result_low = calculate_double_precision_08000168(result_low,result_high,0,DAT_0800706c);\n        temp_result_high = calculate_double_precision_0800016c(result_low,result_high,0,DAT_0800706c);\n        temp_result = calculate_result_08006d68_08000724((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),(int)temp_result_high,\n                              (int)((ulonglong)temp_result_high >> 0x20));\n        calculation_type = 1;\n      }\n      else {\n        temp_result_low = calculate_double_precision_0800016c(result_low,result_high,result_low,result_high);\n        temp_result_low = calculate_double_precision_08000168((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),0,DAT_0800706c);\n        temp_result_high = calculate_double_precision_0800016c(result_low,result_high,0,0x40000000);\n        temp_result = calculate_result_08006d68_08000724((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),(int)temp_result_high,\n                              (int)((ulonglong)temp_result_high >> 0x20));\n        calculation_type = 0;\n      }\n    }\n    else {\n      if ((int)input_2_unsigned <= DAT_08007068 + -0x1bc0000) {\n        temp_result_low = calculate_double_precision_0800016c(input_1,input_2,DAT_08006ff8,DAT_08006ffc,input_4);\n        calculation_type = is_end_of_input_080009f0((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),0,DAT_0800706c);\n        if (calculation_type != 0) {\n          return temp_result;\n        }\n      }\n      calculation_type = -1;\n    }\n    input_1_high = (undefined4)(temp_result >> 0x20);\n    input_1_low = (undefined4)temp_result;\n    temp_result_low = calculate_ulonglong_result_080004d0(input_1_low,input_1_high,input_1_low,input_1_high);\n    temp_low = (undefined4)((ulonglong)temp_result_low >> 0x20);\n    result_low = (undefined4)temp_result_low;\n    temp_result_low = calculate_ulonglong_result_080004d0(result_low,temp_low,result_low,temp_low);\n    temp_high = (undefined4)((ulonglong)temp_result_low >> 0x20);\n    result_high = (undefined4)temp_result_low;\n    temp_result_low = calculate_ulonglong_result_080004d0(result_high,temp_high,DAT_08007000,DAT_08007004);\n    temp_result_low = calculate_double_precision_0800016c((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),DAT_08007008,DAT_0800700c);\n    temp_result_low = calculate_ulonglong_result_080004d0((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),result_high,temp_high);\n    temp_result_low = calculate_double_precision_0800016c((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),DAT_08007010,DAT_08007014);\n    temp_result_low = calculate_ulonglong_result_080004d0((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),result_high,temp_high);\n    temp_result_low = calculate_double_precision_0800016c((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),DAT_08007018,DAT_0800701c);\n    temp_result_low = calculate_ulonglong_result_080004d0((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),result_high,temp_high);\n    temp_result_low = calculate_double_precision_0800016c((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),DAT_08007020,DAT_08007024);\n    temp_result_low = calculate_ulonglong_result_080004d0((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),result_high,temp_high);\n    temp_result_low = calculate_double_precision_0800016c((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),DAT_08007028,DAT_0800702c);\n    temp_result_low = calculate_ulonglong_result_080004d0((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),result_low,temp_low);\n    result_low = (undefined4)((ulonglong)temp_result_low >> 0x20);\n    temp_result_high = calculate_ulonglong_result_080004d0(result_high,temp_high,DAT_08007030,DAT_08007034);\n    temp_result_high = calculate_double_precision_08000168((int)temp_result_high,(int)((ulonglong)temp_result_high >> 0x20),DAT_08007038,DAT_0800703c);\n    temp_result_high = calculate_ulonglong_result_080004d0((int)temp_result_high,(int)((ulonglong)temp_result_high >> 0x20),result_high,temp_high);\n    temp_result_high = calculate_double_precision_08000168((int)temp_result_high,(int)((ulonglong)temp_result_high >> 0x20),DAT_08007040,DAT_08007044);\n    temp_result_high = calculate_ulonglong_result_080004d0((int)temp_result_high,(int)((ulonglong)temp_result_high >> 0x20),result_high,temp_high);\n    temp_result_high = calculate_double_precision_08000168((int)temp_result_high,(int)((ulonglong)temp_result_high >> 0x20),DAT_08007048,DAT_0800704c);\n    temp_result_high = calculate_ulonglong_result_080004d0((int)temp_result_high,(int)((ulonglong)temp_result_high >> 0x20),result_high,temp_high);\n    temp_result_high = calculate_double_precision_08000168((int)temp_result_high,(int)((ulonglong)temp_result_high >> 0x20),DAT_08007050,DAT_08007054);\n    temp_result_high = calculate_ulonglong_result_080004d0((int)temp_result_high,(int)((ulonglong)temp_result_high >> 0x20),result_high,temp_high);\n    result_high = (undefined4)((ulonglong)temp_result_high >> 0x20);\n    if (calculation_type == -1) {\n      temp_result_low = calculate_double_precision_0800016c((int)temp_result_low,result_low,(int)temp_result_high,result_high);\n      temp_result_low = calculate_ulonglong_result_080004d0((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),input_1_low,input_1_high);\n      final_result = calculate_double_precision_08000168(input_1_low,input_1_high,(int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20));\n    }\n    else {\n      temp_result_low = calculate_double_precision_0800016c((int)temp_result_low,result_low,(int)temp_result_high,result_high);\n      temp_result_low = calculate_ulonglong_result_080004d0((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),input_1_low,input_1_high);\n      calculation_constants = (undefined4 *)(PTR_DAT_08007080 + calculation_type * 8);\n      temp_result_low = calculate_double_precision_08000168((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),\n                            *(undefined4 *)(PTR_DAT_08007084 + calculation_type * 8),\n                            *(undefined4 *)((int)(PTR_DAT_08007084 + calculation_type * 8) + 4));\n      temp_result_low = calculate_double_precision_08000168((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),input_1_low,input_1_high);\n      final_result = calculate_double_precision_08000168(*calculation_constants,calculation_constants[1],(int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20));\n      if ((int)input_2 < 0) {\n        final_result = final_result & 0xffffffff | (ulonglong)((int)(final_result >> 0x20) + 0x80000000) << 0x20;\n      }\n    }\n  }\n  return final_result;\n}\n\n",
            "called": [
                "FUN_08000724",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_0800016c",
                "FUN_0800708c",
                "FUN_080009f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d68",
            "calling": [
                "FUN_08006070"
            ],
            "imported": false,
            "current_name": "calculate_result_08006d68"
        },
        "FUN_080072b8": {
            "renaming": {
                "FUN_080072b8": "add_to_global_sum_080072b8",
                "param_1": "num",
                "puVar1": "global_ptr"
            },
            "code": "void add_to_global_sum_080072b8(int num) {\n  undefined *global_ptr;\n  global_ptr = PTR_DAT_080072cc;\n  if (*(int *)PTR_DAT_080072cc == 0) {\n    *(undefined **)PTR_DAT_080072cc = PTR_DAT_080072d0;\n  }\n  *(int *)global_ptr = num + *(int *)global_ptr;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072b8",
            "calling": [
                "FUN_0800581c"
            ],
            "imported": false,
            "current_name": "add_to_global_sum_080072b8"
        },
        "FUN_0800581c": {
            "renaming": {
                "FUN_0800581c": "add_global_sum_to_array_0800581c",
                "param_1": "result_array",
                "param_2": "value",
                "puVar1": "global_sum_pointer",
                "iVar2": "add_result"
            },
            "code": "void add_global_sum_to_array_0800581c(int *result_array, undefined4 value)\n{\n  undefined *global_sum_pointer;\n  int add_result;\n  global_sum_pointer = PTR_DAT_08005838;\n  *(undefined4 *)PTR_DAT_08005838 = 0;\n  add_result = add_to_global_sum_080072b8(value);\n  if ((add_result == -1) && (*(int *)global_sum_pointer != 0)) {\n    *result_array = *(int *)global_sum_pointer;\n  }\n  return;\n}",
            "called": [
                "FUN_080072b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800581c",
            "calling": [
                "FUN_08005714"
            ],
            "imported": false,
            "current_name": "add_global_sum_to_array_0800581c"
        },
        "FUN_08004d48": {
            "renaming": {
                "FUN_08004d48": "process_data_08004d48",
                "param_1": "data_ptr",
                "param_2": "param_val",
                "local_18": "local_var1",
                "local_14": "local_var2",
                "*param_1": "*data_ptr",
                "DAT_08004d80": "DATA_CONST1",
                "process_bits_08001264": "process_bits",
                "DAT_08004d84": "DATA_CONST2",
                "DAT_08004d88": "DATA_CONST3"
            },
            "code": "void process_data_08004d48(int *data_ptr, uint32_t param_val) {\n    uint32_t local_var1;\n    uint32_t local_var2;\n    \n    if (*data_ptr == DAT_08004d80) {\n        local_var1 = 0xc0;\n        local_var2 = 0x12;\n        process_bits(DAT_08004d84, &local_var1, *data_ptr, 3, data_ptr, param_val);\n        *(uint *)(DAT_08004d88 + 0x1c) = *(uint *)(DAT_08004d88 + 0x1c) | 0x200000;\n    }\n    return;\n}",
            "called": [
                "FUN_08001264"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d48",
            "calling": [
                "FUN_08001754"
            ],
            "imported": false,
            "current_name": "process_data_08004d48"
        },
        "FUN_080072ac": {
            "renaming": {
                "FUN_080072ac": "get_value_from_pointer_080072ac",
                "undefined4": "int",
                "PTR_PTR_DAT_080072b4": "PTR_PTR_DATA",
                "*": "",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "int get_value_from_pointer_080072ac() {\n    int* pointer = *(int**)PTR_PTR_DAT_080072b4;\n    return *pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072ac",
            "calling": [
                "FUN_08005854",
                "FUN_08005900",
                "FUN_08005bc8"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_080072ac"
        },
        "FUN_08002280": {
            "renaming": {
                "FUN_08002280": "update_params_08002280",
                "param_1": "param_pointer",
                "param_2": "params_array",
                "uVar1": "mask1",
                "uVar2": "param_2",
                "uVar3": "param_3",
                "DAT_080022cc": "PTR_DAT_080022cc",
                "mask1": "mask1",
                "mask2": "mask2",
                "mask3": "mask3",
                "mask4": "mask4",
                "*(uint *)(param_1 + 0x20)": "param_pointer[5]",
                "*(uint *)(param_1 + 4)": "param_pointer[4]",
                "*param_2": "param_2",
                "param_2[2]": "param_3",
                "param_2[3]": "param_4",
                "param_2[5]": "param_5",
                "param_2[6]": "param_6",
                "*(uint *)(param_1 + 0x18)": "param_pointer[1]",
                "param_2[1]": "params_array[1]",
                "*(uint *)(param_1 + 0x34)": "param_pointer[8]"
            },
            "code": "void update_params_08002280(int param, uint *params_array) {\n    uint mask1 = 0xfffffffe;\n    uint mask2 = 0xfffffffd;\n    uint mask3 = 0xfffffff7;\n    uint mask4 = 0xfffffffb;\n    uint *param_1 = (uint *)param;\n    uint param_2 = params_array[0];\n    uint param_3 = params_array[2];\n    uint param_4 = params_array[3];\n    uint param_5 = params_array[5];\n    uint param_6 = params_array[6];\n\n    param_1[5] = (param_1[5] & mask1) | param_3;\n    if (param_1 == DAT_080022cc) {\n        param_1[5] = (param_1[5] & 0xfffffcff) | param_5 | param_6;\n        param_2 = (param_2 & mask2) | param_4 | param_6;\n    }\n    param_1[1] = (param_1[1] & 0xffffff8c) | params_array[1];\n    param_1[8] = params_array[4];\n    param_1[5] = (param_1[5] & mask2) | param_2;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002280",
            "calling": [
                "FUN_0800245c"
            ],
            "imported": false,
            "current_name": "update_params_08002280"
        },
        "FUN_08001194": {
            "renaming": {
                "FUN_08001194": "encode_data_08001194",
                "param_1": "data",
                "param_2": "mask",
                "param_3": "shift",
                "uVar1": "encoded_data",
                "uVar2": "shift_distance",
                "uVar3": "shift_amount",
                "uVar4": "mask_bits"
            },
            "code": "void encode_data_08001194(uint data, uint mask, uint shift){\n  uint shift_amount = (*(int *)(DAT_080011f4 + 0xc) << 0x15) >> 0x1d;\n  uint shift_distance = 7 - shift_amount;\n  uint mask_bits = shift_amount + 4;\n  if (shift_distance > 3) {\n    shift_distance = 4;\n  }\n  if (mask_bits < 7) {\n    shift_amount = 0;\n  }\n  shift_distance = (1 << (shift_distance & 0xff)) - 1;\n  if (mask_bits > 6) {\n    shift_amount = shift_amount - 3;\n  }\n  undefined encoded_data = (undefined)\n          ((shift & (1 << (shift_amount & 0xff)) - 1U | (mask & shift_distance) << (shift_amount & 0xff)) << 4);\n  if (-1 < (int)data) {\n    data = data + 0xe000e100;\n  }\n  else {\n    uint data_shift = data & 0xf;\n    uint data_mask = DAT_080011f8;\n  }\n  if (-1 < (int)data) {\n    *(undefined *)(data + 0x300) = encoded_data;\n  }\n  else {\n    *(undefined *)(data_mask + data_shift) = encoded_data;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001194",
            "calling": [
                "FUN_08004ccc",
                "FUN_08004514",
                "FUN_08004e7c",
                "FUN_08001104"
            ],
            "imported": false,
            "current_name": "encode_data_08001194"
        },
        "FUN_08002cb0": {
            "renaming": {
                "FUN_08002cb0": "calculate_i2c_data_and_hash_08002cb0",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "param_4": "i2c_data",
                "puVar1": "src_data",
                "uVar2": "hash",
                "local_c": "i2c_data"
            },
            "code": "void calculate_i2c_data_and_hash_08002cb0(uint8_t param_1, uint8_t param_2, uint8_t param_3, uint32_t param_4) {\n  uint32_t i2c_data = param_4;\n  process_i2c_data(0xd0, 0x37, 0x22, 1, param_1, param_2, param_3);\n  uint8_t* src_data = s_src_mpu9250_c_08002d80;\n  process_i2c_data(0xd0, 0x6a, 1);\n  check_and_process_data(0x18, 0, src_data, 0xad);\n  process_i2c_data(0x18, 0xb, 1);\n  process_i2c_data(0x18, 10, 0, 1);\n  process_i2c_data(0x18, 10, 0xf, 1);\n  process_i2c_data_with_params(0x18, 0x10, &i2c_data, 3, src_data, 0xb6);\n  uint8_t* hash_data = DAT_08002d84;\n  uint32_t hash = calculate_hash((i2c_data & 0xff) - 0x80);\n  hash = calculate_hash_with_params(hash, 0x3b800000);\n  hash = calculate_hash_with_params(hash, 0x3f800000);\n  *(uint32_t*)hash_data = hash;\n  hash = calculate_hash((i2c_data >> 8 & 0xff) - 0x80);\n  hash = calculate_hash_with_params(hash, 0x3b800000);\n  hash = calculate_hash_with_params(hash, 0x3f800000);\n  *(uint32_t*)(hash_data + 4) = hash;\n  hash = calculate_hash((i2c_data >> 0x10 & 0xff) - 0x80);\n  hash = calculate_hash_with_params(hash, 0x3b800000);\n  hash = calculate_hash_with_params(hash, 0x3f800000);\n  *(uint32_t*)(hash_data + 8) = hash;\n  process_i2c_data(0x18, 10, 0, 1);\n  process_i2c_data(0x18, 10, 0x16, 1);\n}",
            "called": [
                "FUN_0800403c",
                "FUN_08000cec",
                "FUN_08000adc",
                "FUN_080040e8",
                "FUN_08000c44",
                "FUN_0800407c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002cb0",
            "calling": [
                "FUN_08002ea0"
            ],
            "imported": false,
            "current_name": "calculate_i2c_data_and_hash_08002cb0"
        },
        "FUN_08004348": {
            "renaming": {
                "FUN_08004348": "process_and_execute_instructions_08004348",
                "param_1": "instruction_address",
                "param_2": "instruction_length",
                "param_3": "data_address",
                "puVar1": "INSTRUCTION_PTR",
                "local_10": "instruction",
                "local_c": "data",
                "uStack_8": "unused_variable"
            },
            "code": "void process_and_execute_instructions_08004348(uint32_t instruction_address, uint32_t instruction_length, uint32_t data_address)\n{\n    uint8_t* instruction_ptr = INSTRUCTION_PTR;\n    *INSTRUCTION_PTR = 0xe9;\n    instruction_ptr[1] = 3;\n    instruction_ptr[3] = 4;\n    instruction_ptr[2] = 0;\n    uint32_t instruction = *(uint32_t*)instruction_ptr;\n    instruction_ptr[4] = 0;\n    instruction_ptr[5] = 0;\n    instruction_ptr[6] = 0;\n    uint32_t data = instruction_length & 0xff000000 | (uint)*(uint16_t*)(instruction_ptr + 4);\n    execute_instructions_and_data(instruction_address, &instruction, data_address, &data, 7);\n    return;\n}",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004348",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "process_and_execute_instructions_08004348"
        },
        "FUN_08002324": {
            "renaming": {
                "FUN_08002324": "update_data_structure_08002324",
                "param_1": "data_structure_address",
                "param_2": "data",
                "uVar1": "flags",
                "iVar2": "value1",
                "iVar3": "value2",
                "iVar4": "constant"
            },
            "code": "void update_data_structure_08002324(int data_structure_address, int* data) {\n  uint bitmask = 0xffffefff;\n  uint flags = *(uint *)(data_structure_address + 0x04);\n  int value1 = *data;\n  int value2 = data[2];\n  int constant = DAT_08002364;\n  if (data_structure_address == DAT_08002364) {\n    constant = data[5];\n    flags &= 0xffffbfff;\n  }\n  if (data_structure_address == DAT_08002364) {\n    flags |= (constant << 6);\n  }\n  *(uint *)(data_structure_address + 0x04) = flags;\n  *(uint *)(data_structure_address + 0x1c) = (*(uint *)(data_structure_address + 0x1c) & 0xffff8cff) | (value1 << 8);\n  *(int *)(data_structure_address + 0x40) = data[1];\n  *(uint *)(data_structure_address + 0x20) = (*(uint *)(data_structure_address + 0x20) & 0xffffdfff) | (value2 << 0xc);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002324",
            "calling": [
                "FUN_0800245c"
            ],
            "imported": false,
            "current_name": "update_data_structure_08002324"
        },
        "FUN_08001078": {
            "renaming": {
                "FUN_08001078": "convert_param_to_int_08001078",
                "param_1": "input_param",
                "uVar1": "shift_amount",
                "uVar2": "subtracted_value",
                "uVar3": "shifted_param",
                "uVar4": "bit_mask",
                "uVar5": "output_int"
            },
            "code": "uint convert_param_to_int_08001078(uint input_param)\n{\n    uint output_int;\n    uint shift_amount;\n    uint shifted_param;\n    uint subtracted_value;\n    uint bit_mask = 0xff;\n\n    if (input_param << 1 < 0x7f000000) {\n        return 0;\n    }\n\n    shift_amount = (input_param << 1) >> 0x18;\n    subtracted_value = 0x9e - shift_amount;\n\n    if (shift_amount < 0x9f && subtracted_value != 0) {\n        shifted_param = (input_param << 8 | 0x80000000) >> (subtracted_value & bit_mask);\n\n        if ((input_param & 0x80000000) != 0) {\n            output_int = -shifted_param;\n        } else {\n            output_int = shifted_param;\n        }\n        return output_int;\n    }\n\n    if ((subtracted_value == 0xffffff9f) && ((input_param & 0x7fffff) != 0)) {\n        return 0;\n    }\n\n    input_param = input_param & 0x80000000;\n    if (input_param == 0) {\n        input_param = 0x7fffffff;\n    }\n    return input_param;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001078",
            "calling": [
                "FUN_0800411c",
                "FUN_0800426c",
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "convert_param_to_int_08001078"
        },
        "FUN_08002564": {
            "renaming": {
                "FUN_08002564": "set_flag_and_calculate_08002564",
                "param_1": "data",
                "param_2": "flag",
                "uVar1": "result",
                "*(char *)(param_1 + 0xe)": "*(char *)(flag + 0xe)",
                "*(undefined *)((int)param_1 + 0x39)": "*(int *)((int)flag + 0x39)",
                "*(uint *)(*param_1 + 0x44)": "*(uint *)(*flag + 0x44)",
                "*param_2 | param_2[1] | param_2[2] | param_2[3] | param_2[4] | param_2[5] | param_2[6]": "data[0] | data[1] | data[2] | data[3] | data[4] | data[5] | data[6]",
                "*(undefined *)(param_1 + 0xe)": "*(char *)(flag + 0xe)"
            },
            "code": "int set_flag_and_calculate_08002564(uint *data, int *flag) {\n    int result = 2;\n    if (*(char *)(flag + 0xe) != '\\x01') {\n        *(int *)((int)flag + 0x39) = 2;\n        *(uint *)(*flag + 0x44) = data[0] | data[1] | data[2] | data[3] | data[4] | data[5] | data[6];\n        *(int *)((int)flag + 0x39) = 1;\n        result = 0;\n        *(char *)(flag + 0xe) = 0;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002564",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "set_flag_and_calculate_08002564"
        },
        "FUN_08001754": {
            "renaming": {
                "FUN_08001754": "configure_device_08001754",
                "param_1": "device_config",
                "uVar1": "shift_value_lower",
                "uVar2": "shift_value_upper",
                "puVar3": "config_ptr1",
                "puVar4": "config_ptr2",
                "puVar5": "config_ptr3",
                "uVar6": "shift_value",
                "uVar7": "shifted_value"
            },
            "code": "int configure_device_08001754(uint **device_config)\n{\n  uint shift_value_lower;\n  uint shift_value_upper;\n  uint *config_ptr1;\n  uint *config_ptr2;\n  uint *config_ptr3;\n  uint shift_value;\n  undefined8 shifted_value;\n\n  if (device_config == NULL) {\n    return 1;\n  }\n\n  if (*(char *)((int)device_config + 0x35) == '\\0') {\n    *(undefined *)(device_config + 0xd) = 0;\n    process_device_data();\n  }\n\n  *(undefined *)((int)device_config + 0x35) = 0x24;\n  config_ptr1 = PTR_DAT_08001820;\n  **device_config &= 0xfffffffe;\n  shifted_value = get_shifted_value();\n  shift_value_upper = (uint)((ulonglong)shifted_value >> 0x20);\n  shift_value_lower = (uint)shifted_value;\n  config_ptr3 = device_config[1];\n  shift_value = shift_value_lower / PTR_DAT_08001824;\n\n  if (config_ptr1 < config_ptr3) {\n    shift_value_upper = 300;\n  }\n\n  config_ptr2 = *device_config;\n\n  if (config_ptr1 < config_ptr3) {\n    shift_value_upper = shift_value * shift_value_upper;\n  }\n\n  config_ptr2[1] = shift_value;\n\n  if (config_ptr1 < config_ptr3) {\n    shift_value = shift_value_upper / 1000;\n  }\n\n  config_ptr2[8] = shift_value + 1;\n\n  if (config_ptr1 < config_ptr3) {\n    if (device_config[2] == NULL) {\n      shift_value_lower = shift_value_lower / (uint)((int)config_ptr3 * 3) | 0x8000;\n    }\n    else {\n      shift_value_lower = shift_value_lower / (uint)((int)config_ptr3 * 0x19) | 0xc000;\n    }\n    if ((shift_value_lower & 0xfff) == 0) {\n      shift_value_lower = 1;\n    }\n  }\n  else {\n    shift_value_lower = shift_value_lower / (uint)((int)config_ptr3 << 1);\n    if ((shift_value_lower & 0xfff) < 4) {\n      shift_value_lower = 4;\n    }\n  }\n\n  config_ptr1 = device_config[8];\n  config_ptr3 = device_config[7];\n  config_ptr2[7] = shift_value_lower;\n  *config_ptr2 = (uint)config_ptr3 | (uint)config_ptr1;\n  config_ptr2[2] = (uint)device_config[4] | (uint)device_config[3];\n  config_ptr2[3] = (uint)device_config[5] | (uint)device_config[6];\n  *config_ptr2 |= 1;\n  device_config[0xe] = NULL;\n  *(undefined *)((int)device_config + 0x35) = 0x20;\n  *(undefined *)((int)device_config + 0x36) = 0;\n  return 0;\n}",
            "called": [
                "FUN_08004d48",
                "FUN_08002220"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001754",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "configure_device_08001754"
        },
        "FUN_08000ad8": {
            "renaming": {
                "FUN_08000ad8": "calculate_float_08000ad8",
                "param_1": "float_a",
                "param_2": "float_b",
                "param_3": "uint_c",
                "param_4": "uint_d",
                "iVar1": "int_result_1",
                "uVar2": "uint_result_1",
                "uVar3": "uint_result_2",
                "uVar4": "uint_result_3",
                "uVar5": "uint_result_4",
                "uVar6": "uint_result_5",
                "iVar7": "int_result_2",
                "bVar8": "bool_flag"
            },
            "code": "\nuint calculate_float_08000ad8(uint float_a,uint float_b,undefined4 uint_c,uint uint_d)\n\n{\n  int int_result_1;\n  uint uint_result_1;\n  uint uint_result_2;\n  uint uint_result_3;\n  uint uint_result_4;\n  uint uint_result_5;\n  int int_result_2;\n  bool bool_flag;\n  \n  uint_result_1 = float_b ^ 0x80000000;\n  uint_result_3 = float_a << 1;\n  bool_flag = uint_result_3 == 0;\n  if (!bool_flag) {\n    uint_d = float_b << 1;\n    bool_flag = uint_d == 0;\n  }\n  if (!bool_flag) {\n    bool_flag = uint_result_3 == uint_d;\n  }\n  int_result_2 = (int)uint_result_3 >> 0x18;\n  if (!bool_flag) {\n    bool_flag = int_result_2 == -1;\n  }\n  if (!bool_flag) {\n    bool_flag = (int)uint_d >> 0x18 == -1;\n  }\n  if (bool_flag) {\n    int_result_1 = (int)(float_b << 1) >> 0x18;\n    if (int_result_2 == -1 || int_result_1 == -1) {\n      uint_result_3 = uint_result_1;\n      if (int_result_2 == -1) {\n        uint_result_3 = float_a;\n      }\n      if (int_result_2 != -1 || int_result_1 != -1) {\n        uint_result_1 = uint_result_3;\n      }\n      bool_flag = (uint_result_3 & 0x7fffff) == 0;\n      if (bool_flag) {\n        bool_flag = (uint_result_1 & 0x7fffff) == 0;\n      }\n      if (bool_flag) {\n        bool_flag = uint_result_3 == uint_result_1;\n      }\n      if (!bool_flag) {\n        uint_result_3 = uint_result_3 | 0x400000;\n      }\n      return uint_result_3;\n    }\n    if (((float_a ^ uint_result_1) & 0x7fffffff) != 0) {\n      if (uint_result_3 == 0) {\n        float_a = uint_result_1;\n      }\n      return float_a;\n    }\n    if (float_a != uint_result_1) {\n      return 0;\n    }\n    if ((uint_result_3 & 0xff000000) == 0) {\n      uint_result_1 = float_a << 1;\n      if ((float_a & 0x80000000) != 0) {\n        uint_result_1 = uint_result_1 | 0x80000000;\n      }\n      return uint_result_1;\n    }\n    if (uint_result_3 < 0xfe000000) {\n      return float_a + 0x800000;\n    }\n    float_a = float_a & 0x80000000;\nLAB_08000c12:\n    return float_a | 0x7f800000;\n  }\n  uint_result_3 = uint_result_3 >> 0x18;\n  uint_d = uint_d >> 0x18;\n  uint_result_5 = uint_d - uint_result_3;\n  bool_flag = uint_result_5 != 0;\n  uint_result_4 = uint_result_3;\n  if (bool_flag && uint_result_3 <= uint_d) {\n    uint_result_4 = uint_result_3 + uint_result_5;\n  }\n  if (bool_flag && uint_result_3 <= uint_d) {\n    uint_result_1 = uint_result_1 ^ float_a;\n  }\n  if (bool_flag && uint_result_3 <= uint_d) {\n    float_a = float_a ^ uint_result_1;\n  }\n  if (bool_flag && uint_result_3 <= uint_d) {\n    uint_result_1 = uint_result_1 ^ float_a;\n  }\n  if (uint_d < uint_result_3) {\n    uint_result_5 = -uint_result_5;\n  }\n  if (0x19 < uint_result_5) {\n    return float_a;\n  }\n  uint_result_3 = float_a & 0xffffff | 0x800000;\n  if ((float_a & 0x80000000) != 0) {\n    uint_result_3 = -uint_result_3;\n  }\n  uint_result_2 = uint_result_1 & 0xffffff | 0x800000;\n  if ((uint_result_1 & 0x80000000) != 0) {\n    uint_result_2 = -uint_result_2;\n  }\n  if (uint_result_4 == uint_result_5) {\n    uint_result_2 = uint_result_2 ^ 0x800000;\n    if (uint_result_4 == 0) {\n      uint_result_3 = uint_result_3 ^ 0x800000;\n      uint_result_4 = 1;\n    }\n    else {\n      uint_result_5 = uint_result_5 - 1;\n    }\n  }\n  uint_result_3 = uint_result_3 + ((int)uint_result_2 >> (uint_result_5 & 0xff));\n  uint_result_2 = uint_result_2 << (0x20 - uint_result_5 & 0xff);\n  float_a = uint_result_3 & 0x80000000;\n  if ((int)uint_result_3 < 0) {\n    bool_flag = uint_result_2 != 0;\n    uint_result_2 = -uint_result_2;\n    uint_result_3 = -uint_result_3 - (uint)bool_flag;\n  }\n  if (uint_result_3 < 0x800000) {\n    uint_result_1 = uint_result_2 & 0x80000000;\n    uint_result_2 = uint_result_2 << 1;\n    uint_result_3 = uint_result_3 * 2 + (uint)(uint_result_1 != 0);\n    uint_result_1 = uint_result_4 - 2;\n    if ((uint_result_3 & 0x800000) == 0) {\n      int_result_2 = count_leading_zeroes(uint_result_3);\n      uint_result_5 = int_result_2 - 8;\n      uint_result_3 = uint_result_3 << (uint_result_5 & 0xff);\n      if ((int)uint_result_1 < (int)uint_result_5) {\n        uint_result_3 = uint_result_3 >> (-(uint_result_1 - uint_result_5) & 0xff);\n      }\n      else {\n        uint_result_3 = uint_result_3 + (uint_result_1 - uint_result_5) * 0x800000;\n      }\n      return uint_result_3 | float_a;\n    }\n  }\n  else {\n    uint_result_1 = uint_result_4 - 1;\n    if (0xffffff < uint_result_3) {\n      uint_result_1 = uint_result_3 & 1;\n      uint_result_3 = uint_result_3 >> 1;\n      uint_result_2 = (uint)(uint_result_1 != 0) << 0x1f | uint_result_2 >> 1;\n      uint_result_1 = uint_result_4;\n      if (0xfd < uint_result_4) goto LAB_08000c12;\n    }\n  }\n  uint_result_3 = uint_result_3 + uint_result_1 * 0x800000 + (uint)(0x7fffffff < uint_result_2);\n  if (uint_result_2 == 0x80000000) {\n    uint_result_3 = uint_result_3 & 0xfffffffe;\n  }\n  return uint_result_3 | float_a;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ad8",
            "calling": [
                "FUN_08002ee8",
                "FUN_08002ec0",
                "FUN_08002bf0",
                "FUN_0800426c",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002d88"
            ],
            "imported": false,
            "current_name": "calculate_float_08000ad8"
        },
        "FUN_08003ec8": {
            "renaming": {
                "FUN_08003ec8": "increment_and_store_08003ec8",
                "param_1": "base_address",
                "param_2": "value",
                "*(short *)(param_1 + 0x804)": "*count_ptr",
                "*(undefined *)(param_1 + (uint)*(ushort *)(param_1 + 0x802))": "*(unsigned char *)(base_address + (unsigned int)(*index_ptr))",
                "*(ushort *)(param_1 + 0x802)": "*index_ptr",
                "*(short *)(param_1 + 0x802) + 1U & 0x7ff": "(*index_ptr + 1) & 0x7ff"
            },
            "code": "int increment_and_store_08003ec8(int base_address, unsigned char value) {\n  short *count_ptr = (short *)(base_address + 0x804);\n  *count_ptr = *count_ptr + 1;\n  unsigned short *index_ptr = (unsigned short *)(base_address + 0x802);\n  *(unsigned char *)(base_address + (unsigned int)(*index_ptr)) = value;\n  *index_ptr = (*index_ptr + 1) & 0x7ff;\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ec8",
            "calling": [
                "FUN_08004c30"
            ],
            "imported": false,
            "current_name": "increment_and_store_08003ec8"
        },
        "FUN_08002724": {
            "renaming": {
                "FUN_08002724": "process_data_08002724",
                "param_1": "data",
                "iVar1": "data_pointer"
            },
            "code": "int process_data_08002724(int *data)\n{\n  int data_pointer;\n  if (data != NULL)\n  {\n    if (data[0x39] == 0)\n    {\n      *(char *)(data + 0xe) = 0;\n      process_data_08002724_08004e7c();\n    }\n    data[0x39] = 2;\n    *(uint *)(*data + 0xc) &= 0xffffdfff;\n    update_values(data);\n    data_pointer = *data;\n    *(uint *)(data_pointer + 0x10) &= 0xffffb7ff;\n    *(uint *)(data_pointer + 0x14) &= 0xffffffd5;\n    *(uint *)(data_pointer + 0xc) |= 0x2000;\n    data[0xf] = 0;\n    data[0x39] = 1;\n    return 0;\n  }\n  return 1;\n}",
            "called": [
                "FUN_080025e8",
                "FUN_08004e7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002724",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "process_data_08002724"
        },
        "FUN_08003fe8": {
            "renaming": {
                "FUN_08003fe8": "set_parameter_value_08003fe8",
                "param_1": "value",
                "PTR_DAT_08003ff0": "ptr"
            },
            "code": "void set_parameter_value_08003fe8(int value) {\n    int* PTR_DAT_08003ff0 = (int*) PTR_DAT_08003ff0;\n    int offset = 0x3c;\n    int* target_address = (int*) (PTR_DAT_08003ff0 + offset);\n    *target_address = value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fe8",
            "calling": [
                "FUN_080041c4",
                "FUN_0800426c"
            ],
            "imported": false,
            "current_name": "set_parameter_value_08003fe8"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "allocate_memory_block_08005714",
                "param_1": "mem_block_ptr",
                "param_2": "block_size",
                "puVar1": "void_ptr_1",
                "uVar2": "uint_temp",
                "puVar3": "curr_ptr",
                "iVar4": "int_temp",
                "puVar5": "free_block_ptr",
                "uVar6": "block_size_diff",
                "puVar7": "prev_ptr",
                "uVar8": "aligned_block_size",
                "PTR_DAT_080057cc": "free_list",
                "PTR_DAT_080057c8": "global_mem_block_ptr"
            },
            "code": "uint allocate_memory_block_08005714(undefined4 *mem_block_ptr, uint block_size) {\n  uint aligned_block_size = (block_size + 3 & 0xfffffffc) + 8;\n  if (aligned_block_size < 0xc) {\n    aligned_block_size = 0xc;\n  }\n  if (((int)aligned_block_size < 0) || (aligned_block_size < block_size)) {\n    *mem_block_ptr = 0xc;\n  }\n  else {\n    do_nothing_0800583c();\n    void *PTR_DAT_080057cc = PTR_DAT_080057cc;\n    uint **prev_ptr = *(uint ***)PTR_DAT_080057c8;\n    uint **curr_ptr = *(uint ***)PTR_DAT_080057c8;\n    while (curr_ptr != (uint **)0x0) {\n      uint block_size_diff = **curr_ptr - aligned_block_size;\n      if (-1 < (int)block_size_diff) {\n        if (block_size_diff < 0xc) {\n          if (prev_ptr == curr_ptr) {\n            uint next_block = (*curr_ptr)[1];\n            *(uint ***)PTR_DAT_080057c8 = (uint **)next_block;\n          }\n          else {\n            uint next_block = (*curr_ptr)[1];\n          }\n          if (prev_ptr != curr_ptr) {\n            (*prev_ptr)[1] = next_block;\n            prev_ptr = curr_ptr;\n          }\n        }\n        else {\n          **curr_ptr = block_size_diff;\n          *((uint *)((int)*curr_ptr + block_size_diff)) = aligned_block_size;\n          prev_ptr = (uint **)((int)*curr_ptr + block_size_diff);\n        }\n        goto LAB_08005778;\n      }\n      prev_ptr = curr_ptr;\n      curr_ptr = (uint **)*curr_ptr[1];\n    }\n    if (*(int *)PTR_DAT_080057cc == 0) {\n      uint new_block = add_global_sum_to_array_0800581c(mem_block_ptr);\n      *(undefined4 *)PTR_DAT_080057cc = new_block;\n    }\n    curr_ptr = (uint **)add_global_sum_to_array_0800581c(mem_block_ptr,aligned_block_size);\n    if ((curr_ptr != (uint **)0xffffffff) && ((prev_ptr = (uint **)((int)curr_ptr + 3U & 0xfffffffc), curr_ptr == prev_ptr || (int)add_global_sum_to_array_0800581c(mem_block_ptr,(int)prev_ptr - (int)curr_ptr) != -1))) {\n      *prev_ptr = (uint *)aligned_block_size;\nLAB_08005778:\n      do_nothing_0800583e(mem_block_ptr);\n      uint next_block = ((int)prev_ptr + 0xbU & 0xfffffff8) - ((int)prev_ptr + 1);\n      if (next_block != 0) {\n        *(int *)((int)prev_ptr + next_block) = -next_block;\n        return ((int)prev_ptr + 0xbU & 0xfffffff8);\n      }\n      return ((int)prev_ptr + 0xbU & 0xfffffff8);\n    }\n    *mem_block_ptr = 0xc;\n    do_nothing_0800583e(mem_block_ptr);\n  }\n  return 0;\n}\n",
            "called": [
                "FUN_0800583e",
                "FUN_0800581c",
                "FUN_0800583c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [
                "FUN_080050fc",
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08005714"
        },
        "FUN_08004fb4": {
            "renaming": {
                "FUN_08004fb4": "execute_functions_08004fb4",
                "puVar1": "function_ptrs_start",
                "iVar2": "function_ptrs_count",
                "iVar3": "i",
                "PTR_DAT_08004fec": "function_ptrs_start",
                "PTR_DAT_08004ff0": "function_ptrs_count",
                "do_nothing_080072d4": "do_nothing_080072d4",
                "PTR_DAT_08004ff4": "post_execution_function_ptrs_start",
                "PTR_DAT_08004ff8": "post_execution_function_ptrs_count"
            },
            "code": "void execute_functions_08004fb4(void)\n{\n  undefined *PTR_DAT_08004fec = PTR_DAT_08004fec;\n  int PTR_DAT_08004ff0 = (int)PTR_DAT_08004ff0 - (int)PTR_DAT_08004fec;\n  for (int i = 0; i < PTR_DAT_08004ff0 / 4; i++) {\n    (**(code **)(PTR_DAT_08004fec + i * 4))();\n  }\n  do_nothing_080072d4();\n  undefined *PTR_DAT_08004ff4 = PTR_DAT_08004ff4;\n  int PTR_DAT_08004ff8 = (int)PTR_DAT_08004ff8 - (int)PTR_DAT_08004ff4;\n  for (int i = 0; i < PTR_DAT_08004ff8 / 4; i++) {\n    (**(code **)(PTR_DAT_08004ff4 + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_080072d4",
                "FUN_08000134"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fb4",
            "calling": [
                "FUN_08004f68"
            ],
            "imported": false,
            "current_name": "execute_functions_08004fb4"
        },
        "FUN_080043f0": {
            "renaming": {
                "FUN_080043f0": "process_data_and_string_080043f0",
                "param_1": "data_ptr",
                "param_2": "data_ptr2",
                "param_3": "string_ptr",
                "local_10": "data1",
                "uStack_c": "data2",
                "auStack_8": "params"
            },
            "code": "void process_data_and_string_080043f0(uint32_t data_ptr, uint32_t data_ptr2, uint32_t string_ptr) {\n  uint32_t data1 = *(uint32_t *)data_ptr;\n  uint32_t data2 = *(uint32_t *)(data_ptr + 4);\n  uint32_t params[2] = {string_ptr, 0};\n  process_string_and_data(0x68, &data1, 8, params);\n  return;\n}",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043f0",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "process_data_and_string_080043f0"
        },
        "FUN_08000428": {
            "renaming": {
                "FUN_08000428": "calculate_hash_08000428",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "iVar6": "count",
                "uVar7": "temp6",
                "in_r12": "temp7",
                "bVar8": "is_FF",
                "bVar9": "is_zero",
                "bVar10": "is_negative"
            },
            "code": "ulonglong calculate_hash_08000428(uint input1, undefined4 input2, undefined4 input3, uint input4)\n{\n    uint temp1;\n    uint temp2;\n    uint temp3;\n    uint temp4;\n    uint temp5;\n    int count;\n    uint temp6;\n    uint temp7;\n    uint temp8;\n    bool is_zero;\n    bool is_FF;\n    bool is_negative;\n    temp5 = input1 << 1;\n    is_zero = temp5 == 0;\n    temp1 = (uint)((input1 & 0x80000000) != 0) << 0x1f;\n    temp4 = (uint)((int)temp5 >> 3) >> 1;\n    temp3 = temp1 | temp4;\n    input1 = input1 << 0x1d;\n    if (!is_zero) {\n        temp8 = temp5 & 0xff000000;\n        is_zero = temp8 == 0;\n    }\n    if (!is_zero) {\n        is_zero = temp8 == 0xff000000;\n    }\n    if (!is_zero) {\n        return CONCAT44(temp3, input1) ^ 0x3800000000000000;\n    }\n    if (temp5 == 0 || temp8 == 0xff000000) {\n        return CONCAT44(temp3, input1);\n    }\n    temp2 = input1;\n    temp5 = temp4;\n    if (temp4 == 0) {\n        temp2 = 0;\n        temp5 = input1;\n    }\n    count = count_leading_zeroes(temp5);\n    if (temp4 == 0) {\n        count = count + 0x20;\n    }\n    temp6 = count - 0xb;\n    is_negative = SBORROW4(temp6, 0x20);\n    temp4 = count - 0x2b;\n    is_zero = (int)temp4 < 0;\n    is_FF = temp4 == 0;\n    if ((int)temp6 < 0x20) {\n        is_negative = SCARRY4(temp4, 0xc);\n        count = count + -0x1f;\n        is_zero = count < 0;\n        is_FF = count == 0;\n        temp4 = temp6;\n        if (!is_FF && is_zero == is_negative) {\n            temp2 = temp5 << (temp6 & 0xff);\n            temp5 = temp5 >> (0xcU - count & 0xff);\n            goto LAB_080002f0;\n        }\n    }\n    if (is_FF || is_zero != is_negative) {\n        temp7 = 0x20 - temp4;\n    }\n    temp5 = temp5 << (temp4 & 0xff);\n    if (is_FF || is_zero != is_negative) {\n        temp5 = temp5 | temp2 >> (temp7 & 0xff);\n    }\n    if (is_FF || is_zero != is_negative) {\n        temp2 = temp2 << (temp4 & 0xff);\n    }\nLAB_080002f0:\n    if ((int)temp6 < 0x381) {\n        return CONCAT44(temp5 + (0x380 - temp6) * 0x100000 | temp1, temp2);\n    }\n    temp4 = ~(0x380 - temp6);\n    if ((int)temp4 < 0x1f) {\n        count = temp4 - 0x13;\n        if (count != 0 && count < 0 == SCARRY4(temp4 - 0x1f, 0xc)) {\n            return CONCAT44(temp3, temp2 >> (0x20 - (0xcU - count) & 0xff) | temp5 << (0xcU - count & 0xff)) & 0x80000000ffffffff;\n        }\n        temp4 = temp4 + 1;\n        return CONCAT44(temp1 | temp5 >> (temp4 & 0xff), temp2 >> (temp4 & 0xff) | temp5 << (0x20 - temp4 & 0xff));\n    }\n    return CONCAT44(temp3, temp5 >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000428",
            "calling": [
                "FUN_0800411c",
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "calculate_hash_08000428"
        },
        "FUN_08004ccc": {
            "renaming": {
                "FUN_08004ccc": "set_bit_and_encode_data_08004ccc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "data",
                "uVar2": "bit_mask",
                "uVar3": "bit_value"
            },
            "code": "void set_bit_and_encode_data_08004ccc(uint32_t param1, uint32_t param2, uint32_t param3)\n{\n  int data = DAT_08004d44;\n  uint32_t bit_mask = *(uint32_t *)(data + 0x18) | 1;\n  *(uint32_t *)(data + 0x18) = bit_mask;\n  uint32_t bit_value = *(uint32_t *)(data + 0x18) & 1;\n  set_bit_in_register_08001170(3, param2, bit_mask, bit_value, param1, bit_value, param3);\n  encode_data_08001194(0xfffffff4, 0);\n  encode_data_08001194(0xfffffff5, 0);\n  encode_data_08001194(0xfffffff6, 0);\n  encode_data_08001194(0xfffffffb, 0);\n  encode_data_08001194(0xfffffffc, 0);\n  encode_data_08001194(0xfffffffe, 0);\n  encode_data_08001194(0xffffffff, 0);\n  return;\n}",
            "called": [
                "FUN_08001194",
                "FUN_08001170"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ccc",
            "calling": [
                "FUN_08001128"
            ],
            "imported": false,
            "current_name": "set_bit_and_encode_data_08004ccc"
        },
        "FUN_08000a30": {
            "renaming": {
                "FUN_08000a30": "calculate_float_value_08000a30",
                "param_1": "float_bits",
                "param_2": "exponent_bits",
                "uVar1": "result",
                "uVar2": "exponent_multiplier",
                "uVar3": "fraction_bits",
                "in_r12": "unused_variable",
                "bVar4": "is_nan_or_infinity",
                "bVar5": "is_denormalized",
                "SCARRY4": "unused_macro"
            },
            "code": "uint calculate_float_value_08000a30(uint float_bits, uint exponent_bits)\n{\n  uint exponent_multiplier;\n  uint fraction_bits;\n  uint is_denormalized;\n  uint is_nan_or_infinity;\n  exponent_multiplier = exponent_bits * 2;\n  is_denormalized = exponent_multiplier < 0x70000000;\n  fraction_bits = exponent_multiplier + 0x90000000;\n  uint result = fraction_bits;\n  if (!is_denormalized) {\n    exponent_multiplier = exponent_multiplier + 0x8fe00000;\n    result = exponent_multiplier;\n  }\n  is_nan_or_infinity = result == 0;\n  if (!is_denormalized && fraction_bits >= 0x200000) {\n    is_nan_or_infinity = exponent_multiplier == 0x1fc00000;\n  }\n  if (((is_denormalized || fraction_bits < 0x200000) || 0x1fc00000 < exponent_multiplier) || is_nan_or_infinity) {\n    if ((exponent_bits & 0x40000000) != 0) {\n      if (((int)exponent_multiplier >> 0x15 == -1) && ((float_bits | exponent_bits << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return exponent_bits & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(exponent_multiplier + 0x92e00000) < 0 != SCARRY4(fraction_bits,0x2e00000)) {\n      return exponent_bits & 0x80000000;\n    }\n    exponent_multiplier = 0x18 - (exponent_multiplier + 0x92e00000 >> 0x15);\n    uint shifted_bits = float_bits >> (exponent_multiplier & 0xff);\n    if (float_bits << (0x20 - exponent_multiplier & 0xff) != 0) {\n      shifted_bits = shifted_bits | 1;\n    }\n    fraction_bits = exponent_bits & 0x1fffff | 0x100000;\n    float_bits = shifted_bits | fraction_bits << (0x20 - exponent_multiplier & 0xff);\n    fraction_bits = (fraction_bits >> (exponent_multiplier & 0xff)) << 1;\n  }\n  result = (exponent_bits & 0x80000000 | float_bits >> 0x1d) + fraction_bits * 4 + (uint)(0x7fffffff < float_bits * 8);\n  if (float_bits * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a30",
            "calling": [
                "FUN_0800411c",
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "calculate_float_value_08000a30"
        },
        "FUN_080023d0": {
            "renaming": {
                "FUN_080023d0": "process_data_080023d0",
                "param_1": "data_ptr",
                "*(char *)((int)param_1 + 0x39)": "data_ptr[9]",
                "*(undefined *)(param_1 + 0xe)": "*(unsigned char *)(data_ptr + 14)",
                "update_status_08004d8c": "update_status",
                "update_memory_08002368": "update_memory"
            },
            "code": "int process_data_080023d0(unsigned int *data_ptr)\n{\n    if (data_ptr != NULL)\n    {\n        if (data_ptr[9] == 0)\n        {\n            *(unsigned char *)(data_ptr + 14) = 0;\n            update_status();\n        }\n        data_ptr[9] = 2;\n        update_memory(data_ptr[0], data_ptr + 1);\n        data_ptr[9] = 1;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08004d8c",
                "FUN_08002368"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080023d0",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "process_data_080023d0"
        },
        "FUN_08004c30": {
            "renaming": {
                "FUN_08004c30": "increment_and_store_08004c30",
                "param_1": "value_ptr",
                "puVar1": "data_ptr",
                "puVar2": "flags_ptr",
                "uVar3": "flag_value",
                "uVar4": "old_value",
                "iVar5": "data_ptr_as_int"
            },
            "code": "int * increment_and_store_08004c30(int *value_ptr)\n{\n  undefined *data_ptr = data_start_ptr;\n  if (*value_ptr != target_value) {\n    return value_ptr;\n  }\n  increment_and_store_08004c30_08003ec8(data_ptr, *data_start_ptr);\n  undefined *flags_ptr = flags_start_ptr;\n  if ((flags_ptr[0x39] == '\\x01') || (flags_ptr[0x39] == '\\x12')) {\n    if (data_ptr == (undefined *)0x0) {\n      return (int *)0x1;\n    }\n    if (flags_ptr[0x38] != '\\x01') {\n      flags_ptr[0x38] = 1;\n      *(undefined4 *)(flags_ptr + 0x3c) = 0;\n      *(undefined2 *)(flags_ptr + 0x2c) = 1;\n      *(undefined2 *)(flags_ptr + 0x2e) = 1;\n      flags_ptr[0x38] = 0;\n      if (flags_ptr[0x39] == '\\x12') {\n        undefined flag_value = 0x32;\n      }\n      else {\n        undefined flag_value = 0x22;\n      }\n      int *data_ptr_as_int = *(int *)flags_ptr;\n      flags_ptr[0x39] = flag_value;\n      uint old_value = *(uint *)(data_ptr_as_int + 0xc);\n      *(undefined **)(flags_ptr + 0x28) = data_ptr;\n      *(uint *)(data_ptr_as_int + 0xc) = old_value | 0x100;\n      *(uint *)(data_ptr_as_int + 0x14) = *(uint *)(data_ptr_as_int + 0x14) | 1;\n      *(uint *)(data_ptr_as_int + 0xc) = *(uint *)(data_ptr_as_int + 0xc) | 0x20;\n      return (int *)0x0;\n    }\n  }\n  return (int *)0x2;\n}",
            "called": [
                "FUN_08003ec8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c30",
            "calling": [
                "FUN_0800290c"
            ],
            "imported": false,
            "current_name": "increment_and_store_08004c30"
        },
        "FUN_080004d0": {
            "renaming": {
                "FUN_080004d0": "calculate_ulonglong_result_080004d0",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar1": "result_1",
                "lVar2": "result_2",
                "uVar3": "result_3",
                "uVar4": "result_4",
                "iVar5": "result_5",
                "uVar6": "result_6",
                "unaff_r5": "result_7",
                "uVar7": "result_8",
                "uVar8": "result_9",
                "bVar9": "result_bool_1",
                "bVar10": "result_bool_2",
                "bVar11": "result_bool_3",
                "uVar12": "result_10"
            },
            "code": "\nulonglong calculate_ulonglong_result_080004d0(undefined4 input_param_1,uint input_param_2,uint input_param_3,uint input_param_4)\n\n{\n  ulonglong result_1;\n  longlong result_2;\n  uint result_3;\n  uint result_4;\n  int result_5;\n  uint result_6;\n  uint result_7;\n  uint result_8;\n  uint result_9;\n  bool result_bool_1;\n  bool result_bool_2;\n  bool result_bool_3;\n  ulonglong result_10;\n  \n  result_10 = CONCAT44(input_param_2,input_param_1);\n  result_8 = 0x7ff;\n  result_4 = input_param_2 >> 0x14 & 0x7ff;\n  result_bool_1 = result_4 == 0;\n  if (!result_bool_1) {\n    result_7 = input_param_4 >> 0x14 & 0x7ff;\n    result_bool_1 = result_7 == 0;\n  }\n  if (!result_bool_1) {\n    result_bool_1 = result_4 == 0x7ff;\n  }\n  if (!result_bool_1) {\n    result_bool_1 = result_7 == 0x7ff;\n  }\n  if (result_bool_1) {\n    result_10 = calculate_result_080006ac();\n  }\n  result_3 = (uint)(result_10 >> 0x20);\n  result_5 = result_4 + result_7;\n  result_4 = result_3 ^ input_param_4;\n  result_3 = result_3 & ~(result_8 << 0x15);\n  input_param_4 = input_param_4 & ~(result_8 << 0x15);\n  result_bool_1 = ((uint)result_10 | result_3 << 0xc) == 0;\n  if (!result_bool_1) {\n    result_bool_1 = (input_param_3 | input_param_4 << 0xc) == 0;\n  }\n  result_3 = result_3 | 0x100000;\n  input_param_4 = input_param_4 | 0x100000;\n  if (result_bool_1) {\n    input_param_3 = (uint)result_10 | input_param_3;\n    input_param_4 = (result_4 & 0x80000000 | result_3) ^ input_param_4;\n    result_4 = result_8 >> 1;\n    result_bool_3 = SBORROW4(result_5,result_4);\n    result_6 = result_5 - result_4;\n    result_bool_1 = result_6 == 0;\n    result_3 = result_6;\n    if (!result_bool_1 && (int)result_4 <= result_5) {\n      result_bool_3 = SBORROW4(result_8,result_6);\n      result_3 = result_8 - result_6;\n      result_bool_1 = result_8 == result_6;\n    }\n    if (!result_bool_1 && (int)result_3 < 0 == result_bool_3) {\n      input_param_4 = input_param_4 | result_6 * 0x100000;\n    }\n    if (!result_bool_1 && (int)result_3 < 0 == result_bool_3) {\n      return CONCAT44(input_param_4,input_param_3);\n    }\n    input_param_4 = input_param_4 | 0x100000;\n    result_8 = 0;\n    result_bool_3 = SBORROW4(result_6,1);\n    result_6 = result_6 - 1;\n    result_bool_1 = result_6 == 0;\n    result_4 = result_6;\n  }\n  else {\n    result_1 = (result_10 & 0xffffffff) * (ulonglong)input_param_3;\n    result_10 = (result_10 & 0xffffffff) * (ulonglong)input_param_4 +\n             (ulonglong)result_3 * (ulonglong)input_param_3 + (result_1 >> 0x20);\n    result_9 = (uint)result_10;\n    result_2 = (ulonglong)result_3 * (ulonglong)input_param_4 + (result_10 >> 0x20);\n    result_8 = (uint)result_2;\n    result_3 = (uint)((ulonglong)result_2 >> 0x20);\n    if ((int)result_1 != 0) {\n      result_9 = result_9 | 1;\n    }\n    result_6 = (result_5 + -0x3ff) - (uint)(result_3 < 0x200);\n    if (result_3 < 0x200) {\n      result_bool_1 = (result_9 & 0x80000000) != 0;\n      result_9 = result_9 << 1;\n      result_2 = CONCAT44(result_3 * 2 + (uint)(CARRY4(result_8,result_8) || CARRY4(result_8 * 2,(uint)result_bool_1)),\n                       result_8 * 2 + (uint)result_bool_1);\n    }\n    input_param_4 = result_4 & 0x80000000 | (int)((ulonglong)result_2 >> 0x20) << 0xb | (uint)result_2 >> 0x15;\n    input_param_3 = (uint)result_2 << 0xb | result_9 >> 0x15;\n    result_8 = result_9 * 0x800;\n    result_bool_2 = 0xfc < result_6;\n    result_bool_3 = SBORROW4(result_6,0xfd);\n    result_3 = result_6 - 0xfd;\n    result_bool_1 = result_3 == 0;\n    result_4 = result_3;\n    if (result_bool_2 && !result_bool_1) {\n      result_bool_2 = 0x6ff < result_3;\n      result_bool_3 = SBORROW4(result_3,0x700);\n      result_4 = result_6 - 0x7fd;\n      result_bool_1 = result_3 == 0x700;\n    }\n    if (!result_bool_2 || result_bool_1) {\n      result_bool_1 = 0x7fffffff < result_8;\n      if (result_8 == 0x80000000) {\n        result_bool_1 = (result_9 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input_param_4 + result_6 * 0x100000 + (uint)CARRY4(input_param_3,(uint)result_bool_1),input_param_3 + result_bool_1\n                     );\n    }\n  }\n  if (!result_bool_1 && (int)result_4 < 0 == result_bool_3) {\n    return (ulonglong)(input_param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  result_bool_2 = SCARRY4(result_6,0x36);\n  result_bool_1 = (int)(result_6 + 0x36) < 0;\n  result_bool_3 = result_6 == 0xffffffca;\n  if (result_bool_3 || result_bool_1 != result_bool_2) {\n    input_param_3 = 0;\n  }\n  if (result_bool_3 || result_bool_1 != result_bool_2) {\n    input_param_4 = input_param_4 & 0x80000000;\n  }\n  if (result_bool_3 || result_bool_1 != result_bool_2) {\n    return CONCAT44(input_param_4,input_param_3);\n  }\n  result_4 = -result_6;\n  result_3 = result_4 - 0x20;\n  if (0x1f < (int)result_4) {\n    result_6 = input_param_3 >> (result_3 & 0xff) | input_param_4 << (0x20 - result_3 & 0xff);\n    result_4 = (input_param_4 >> (result_3 & 0xff) & ~((input_param_4 & 0x80000000) >> (result_3 & 0xff))) -\n            ((int)result_6 >> 0x1f);\n    if ((result_8 | input_param_3 << (0x20 - result_3 & 0xff) | result_6 << 1) == 0) {\n      result_4 = result_4 & ~(result_6 >> 0x1f);\n    }\n    return CONCAT44(input_param_4,result_4) & 0x80000000ffffffff;\n  }\n  result_5 = result_4 - 0x14;\n  if (result_5 == 0 || result_5 < 0 != SCARRY4(result_3,0xc)) {\n    result_9 = input_param_3 << (result_6 + 0x20 & 0xff);\n    result_3 = input_param_3 >> (result_4 & 0xff) | input_param_4 << (result_6 + 0x20 & 0xff);\n    result_6 = result_3 + -((int)result_9 >> 0x1f);\n    if ((result_8 | result_9 << 1) == 0) {\n      result_6 = result_6 & ~(result_9 >> 0x1f);\n    }\n    return CONCAT44((input_param_4 & 0x80000000) +\n                    ((input_param_4 & 0x7fffffff) >> (result_4 & 0xff)) +\n                    (uint)CARRY4(result_3,-((int)result_9 >> 0x1f)),result_6);\n  }\n  result_4 = 0xc - result_5;\n  result_6 = input_param_3 << (result_4 & 0xff);\n  result_4 = input_param_3 >> (0x20 - result_4 & 0xff) | input_param_4 << (result_4 & 0xff);\n  result_3 = result_4 + -((int)result_6 >> 0x1f);\n  if ((result_8 | result_6 << 1) == 0) {\n    result_3 = result_3 & ~(result_6 >> 0x1f);\n  }\n  return CONCAT44((input_param_4 & 0x80000000) + (uint)CARRY4(result_4,-((int)result_6 >> 0x1f)),result_3);\n}\n\n",
            "called": [
                "FUN_080006ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004d0",
            "calling": [
                "FUN_08006c0c",
                "FUN_08006228",
                "FUN_0800411c",
                "FUN_08005900",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_080071c0",
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "calculate_ulonglong_result_080004d0"
        },
        "FUN_08003fdc": {
            "renaming": {
                "FUN_08003fdc": "set_parameter_in_global_memory_08003fdc",
                "param_1": "parameter_value",
                "PTR_DAT_08003fe4": "global_memory_address"
            },
            "code": "void set_parameter_in_global_memory_08003fdc(int parameter_value) {\n  int* PTR_DAT_08003fe4 = *(int*)PTR_DAT_08003fe4;\n  int offset_to_parameter = 0x38;\n  *(int*)(PTR_DAT_08003fe4 + offset_to_parameter) = parameter_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fdc",
            "calling": [
                "FUN_080041c4",
                "FUN_0800426c"
            ],
            "imported": false,
            "current_name": "set_parameter_in_global_memory_08003fdc"
        },
        "FUN_080009f0": {
            "renaming": {
                "FUN_080009f0": "is_end_of_input_080009f0",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_input_080009f0(void)\n{\n  char current_char;\n  validate_input_parameters();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_08000980"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009f0",
            "calling": [
                "FUN_08006228",
                "FUN_08005854",
                "FUN_08006d68",
                "FUN_08005c70"
            ],
            "imported": false,
            "current_name": "is_end_of_input_080009f0"
        },
        "FUN_08004f10": {
            "renaming": {
                "FUN_08004f10": "set_bit_08004f10",
                "puVar1": "ptr",
                "*DAT_08004f50": "*data",
                "DAT_08004f54": "mask",
                "puVar1[1]": "ptr[1]",
                "*puVar1": "*ptr",
                "puVar1[2]": "ptr[2]",
                "DAT_08004f58": "data2"
            },
            "code": "void set_bit_08004f10(uint *DAT_08004f50)\n{\n  uint *ptr = data;\n  *ptr |= 1;\n  ptr[1] &= DAT_08004f54;\n  *ptr &= 0xfef6ffff;\n  *ptr &= 0xfffbffff;\n  ptr[1] &= 0xff80ffff;\n  ptr[2] = 0x9f0000;\n  *(uint *)(DAT_08004f58 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f10",
            "calling": [
                "FUN_08004f68"
            ],
            "imported": false,
            "current_name": "set_bit_08004f10"
        },
        "FUN_08005044": {
            "renaming": {
                "FUN_08005044": "copy_and_reverse_data_08005044",
                "param_1": "out_buffer",
                "param_2": "data_info",
                "param_3": "data_size",
                "param_4": "buffer_size",
                "iVar1": "allocated_size",
                "iVar4": "data_offset",
                "uVar2": "min_buffer_size",
                "uVar3": "allocated_size",
                "flags": "data_info_flags"
            },
            "code": "uint32_t copy_and_reverse_data_08005044(uint32_t *out_buffer, int *data_info, uint32_t data_size, uint32_t buffer_size)\n{\n    int data_offset = data_info[0] - data_info[4];\n    uint32_t min_buffer_size = data_size + 1 + data_offset;\n    uint16_t flags = *(uint16_t *)(data_info + 3);\n    uint32_t allocated_size;\n\n    if (data_info[2] <= buffer_size && (flags & 0x480) != 0)\n    {\n        if ((data_info[5] * 3) / 2 > min_buffer_size)\n        {\n            allocated_size = (data_info[5] * 3) / 2;\n        }\n        else\n        {\n            allocated_size = min_buffer_size;\n        }\n        if ((int)((uint)flags << 0x15) < 0)\n        {\n            allocated_size = allocate_memory_block(out_buffer, allocated_size);\n            if (allocated_size == 0)\n            {\n                *out_buffer = 0xc;\n                *(uint16_t *)(data_info + 3) = flags | 0x40;\n                return 0xffffffff;\n            }\n            copy_data_to_buffer(allocated_size, data_info[4], data_offset);\n            *(uint16_t *)(data_info + 3) = flags & 0xfb7f | 0x80;\n        }\n        else\n        {\n            allocated_size = allocate_and_insert_into_list(out_buffer, data_info[4], allocated_size);\n            if (allocated_size == 0)\n            {\n                insert_into_linked_list(out_buffer, data_info[4]);\n                *out_buffer = 0xc;\n                *(uint16_t *)(data_info + 3) = flags | 0x40;\n                return 0xffffffff;\n            }\n        }\n        data_info[4] = allocated_size;\n        data_info[0] = allocated_size + data_offset;\n        data_info[5] = allocated_size;\n        data_info[2] = allocated_size - data_offset;\n        buffer_size = data_size;\n    }\n    if (data_size <= buffer_size)\n    {\n        buffer_size = data_size;\n    }\n    reverse_copy_memory(*data_info, out_buffer, buffer_size);\n    data_info[2] -= buffer_size;\n    data_info[0] = buffer_size + *data_info;\n    return 0;\n}",
            "called": [
                "FUN_08005646",
                "FUN_080057d0",
                "FUN_08005630",
                "FUN_0800567c",
                "FUN_08005714"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005044",
            "calling": [
                "FUN_080050fc"
            ],
            "imported": false,
            "current_name": "copy_and_reverse_data_08005044"
        },
        "FUN_08004194": {
            "renaming": {
                "FUN_08004194": "initialize_sensor_data_08004194",
                "PTR_DAT_080049f0": "ptr_1",
                "PTR_DAT_080049ec": "ptr_2",
                "PTR_DAT_080049e8": "ptr_3",
                "PTR_DAT_080049f4": "ptr_4",
                "DAT_080049f8": "data_1",
                "DAT_08004a00": "data_2",
                "DAT_080049fc": "data_3",
                "DAT_08004a08": "data_3",
                "DAT_08004a04": "data_3",
                "DAT_08004a10": "data_4",
                "DAT_08004a14": "data_5",
                "DAT_08004a1c": "data_6",
                "DAT_08004a18": "data_7",
                "DAT_08004a20": "data_8",
                "DAT_08004a24": "data_9",
                "DAT_08004a28": "data_10",
                "DAT_08004a2c": "data_11"
            },
            "code": "void initialize_sensor_data_08004194(void)\n{\n    //perform bit manipulation\n    perform_bit_manipulation();\n    //initialize and check data\n    initialize_and_check_data();\n    //process and calculate data\n    process_and_calculate_data();\n    //read MS5611 calibration data\n    read_MS5611_calibration_data();\n    //initialize sensor data\n    uint32_t* PTR_DAT_080049f0 = PTR_DAT_080049f0;\n    uint32_t* PTR_DAT_080049ec = PTR_DAT_080049ec;\n    uint32_t* PTR_DAT_080049e8 = PTR_DAT_080049e8;\n    *(uint32_t*)(PTR_DAT_080049ec + 0x4c) = 1;\n    *(uint32_t*)(PTR_DAT_080049e8 + 0x4c) = 1;\n    *(uint32_t*)(PTR_DAT_080049f0 + 0x4c) = 0xffffffff;\n    uint32_t DAT_080049f8 = DAT_080049f8;\n    uint32_t* PTR_DAT_080049f4 = PTR_DAT_080049f4;\n    *(uint32_t*)(PTR_DAT_080049f4 + 0x4c) = 1;\n    uint32_t DAT_08004a00 = DAT_08004a00;\n    *(uint32_t*)(PTR_DAT_080049ec + 0x20) = DAT_080049fc;\n    uint32_t DAT_080049fc = DAT_08004a08;\n    *(uint32_t*)(PTR_DAT_080049e8 + 0x20) = DAT_08004a0c;\n    *(uint32_t*)(PTR_DAT_080049f0 + 0x20) = DAT_08004a04;\n    *(uint32_t*)(PTR_DAT_080049f4 + 0x20) = 0;\n    *(uint32_t*)(PTR_DAT_080049ec + 4) = DAT_080049f8;\n    *(uint32_t*)(PTR_DAT_080049ec + 8) = DAT_08004a10;\n    *(uint32_t*)(PTR_DAT_080049ec + 0xc) = DAT_08004a00;\n    *(uint32_t*)(PTR_DAT_080049ec + 0x10) = DAT_080049fc;\n    *(uint32_t*)(PTR_DAT_080049ec + 0x14) = DAT_08004a10;\n    *(uint32_t*)(PTR_DAT_080049ec + 0x18) = DAT_08004a14;\n    uint32_t DAT_08004a10 = DAT_08004a18;\n    uint32_t DAT_08004a14 = DAT_08004a1c;\n    *(uint32_t*)(PTR_DAT_080049f0 + 4) = DAT_08004a10;\n    *(uint32_t*)(PTR_DAT_080049f0 + 8) = DAT_08004a10;\n    *(uint32_t*)(PTR_DAT_080049f0 + 0xc) = DAT_08004a14;\n    *(uint32_t*)(PTR_DAT_080049f0 + 0x10) = DAT_08004a10;\n    *(uint32_t*)(PTR_DAT_080049f0 + 0x14) = DAT_08004a20;\n    *(uint32_t*)(PTR_DAT_080049f0 + 0x18) = DAT_08004a20;\n    *(uint32_t*)(PTR_DAT_080049e8 + 4) = DAT_08004a24;\n    *(uint32_t*)(PTR_DAT_080049e8 + 8) = DAT_08004a28;\n    *(uint32_t*)(PTR_DAT_080049e8 + 0xc) = DAT_08004a00;\n    *(uint32_t*)(PTR_DAT_080049e8 + 0x10) = 0;\n    *(uint32_t*)(PTR_DAT_080049e8 + 0x14) = 0;\n    *(uint32_t*)(PTR_DAT_080049e8 + 0x18) = 0;\n    *(uint32_t*)(PTR_DAT_080049f4 + 4) = DAT_08004a2c;\n    *(uint32_t*)(PTR_DAT_080049f4 + 8) = 0;\n    *(uint32_t*)(PTR_DAT_080049f4 + 0xc) = 0;\n    *(uint32_t*)(PTR_DAT_080049f4 + 0x10) = 0;\n    *(uint32_t*)(PTR_DAT_080049f4 + 0x14) = 0;\n    *(uint32_t*)(PTR_DAT_080049f4 + 0x18) = 0;\n}",
            "called": [
                "FUN_08002ea0",
                "FUN_08004028",
                "FUN_08004c70",
                "FUN_08003298"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004194",
            "calling": [
                "FUN_080041ae"
            ],
            "imported": false,
            "current_name": "initialize_sensor_data_08004194"
        },
        "FUN_08001240": {
            "renaming": {
                "FUN_08001240": "set_flag_08001240",
                "param_1": "flag_value",
                "uVar1": "flag_mask",
                "*DAT_08001254": "flag_ptr"
            },
            "code": "void set_flag_08001240(int flag_value)\n{\n  uint32_t* *DAT_08001254 = DAT_08001254;\n  if (flag_value == 4) {\n    **DAT_08001254 |= 0x04;\n  }\n  else {\n    **DAT_08001254 &= 0xfffffffb;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001240",
            "calling": [
                "FUN_08004514"
            ],
            "imported": false,
            "current_name": "set_flag_08001240"
        },
        "FUN_08005840": {
            "renaming": {
                "FUN_08005840": "calculate_param_offset_08005840",
                "param_1": "offset",
                "param_2": "param_base",
                "iVar1": "param_offset"
            },
            "code": "int calculate_param_offset_08005840(int offset, int* param_base) {\n  int param_offset = *(int *)(param_base + offset) + -4;\n  if (*(int *)(param_base + offset) < 0) {\n    param_offset += *(int *)(param_base + param_offset);\n  }\n  return param_offset;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005840",
            "calling": [
                "FUN_080057d0"
            ],
            "imported": false,
            "current_name": "calculate_param_offset_08005840"
        },
        "FUN_08000150": {
            "renaming": {
                "FUN_08000150": "find_end_of_string_08000150",
                "param_1": "str",
                "pcVar2": "current_position",
                "pcVar3": "str_position",
                "cVar1": "current_char"
            },
            "code": "char* find_end_of_string_08000150(char* str) {\n  char current_char;\n  char* current_position;\n  current_position = str;\n  do {\n    current_position++;\n    current_char = *current_position;\n  } while (current_char != '\\0');\n  return current_position + (-1 - (int)str);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000150",
            "calling": [
                "FUN_08004c8c"
            ],
            "imported": false,
            "current_name": "find_end_of_string_08000150"
        },
        "FUN_08003f3c": {
            "renaming": {
                "FUN_08003f3c": "set_leading_zero_bits_count_in_offset_08003f3c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "uVar1": "data",
                "uVar2": "count",
                "DAT_08003f78": "data",
                "set_value_at_offset_08001424": "set_value_at_offset"
            },
            "code": "void set_leading_zero_bits_count_in_offset_08003f3c(uint32_t param_1, uint32_t param_2, uint32_t param_3)\n{\n  uint32_t DAT_08003f78 = DAT_08003f78;\n  uint32_t count1 = count_leading_zeroes(param_1);\n  uint32_t count2 = count_leading_zeroes(param_2);\n  uint32_t count3 = count_leading_zeroes(param_3);\n  set_value_at_offset_08001424(DAT_08003f78, 0x8000, count1 >> 5);\n  set_value_at_offset_08001424(DAT_08003f78, 0x4000, count2 >> 5);\n  set_value_at_offset_08001424(DAT_08003f78, 0x2000, count3 >> 5);\n  return;\n}",
            "called": [
                "FUN_08001424"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f3c",
            "calling": [
                "FUN_08004028",
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "set_leading_zero_bits_count_in_offset_08003f3c"
        },
        "FUN_08002214": {
            "renaming": {
                "FUN_08002214": "get_value_at_memory_address_08002214",
                "undefined4": "int",
                "PTR_DAT_0800221c": "memory_address"
            },
            "code": "int get_value_at_memory_address_08002214() {\n    int* PTR_DAT_0800221c = (int*) PTR_DAT_0800221c;\n    return *PTR_DAT_0800221c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002214",
            "calling": [
                "FUN_08004514",
                "FUN_08001104"
            ],
            "imported": false,
            "current_name": "get_value_at_memory_address_08002214"
        },
        "FUN_0800729c": {
            "renaming": {
                "FUN_0800729c": "do_nothing_0800729c"
            },
            "code": "\nvoid do_nothing_0800729c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800729c",
            "calling": [
                "FUN_080071c0"
            ],
            "imported": false,
            "current_name": "do_nothing_0800729c"
        },
        "FUN_08001004": {
            "renaming": {
                "FUN_08001004": "concatenate_params_08001004",
                "param_1": "param1",
                "param_2": "param2",
                "CONCAT44": "bitwise_concatenation",
                "calculate_result_08000f9c": "calculate_result"
            },
            "code": "uint64_t concatenate_params_08001004(uint32_t param1, uint32_t param2) {\n    calculate_result();\n    return ((uint64_t)param2 << 32) | param1;\n}",
            "called": [
                "FUN_08000f9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001004",
            "calling": [
                "FUN_08001014",
                "FUN_08001028",
                "FUN_08000ffc"
            ],
            "imported": false,
            "current_name": "concatenate_params_08001004"
        },
        "FUN_08003ff4": {
            "renaming": {
                "FUN_08003ff4": "set_bits_in_array_08003ff4",
                "puVar1": "array_start"
            },
            "code": "void set_bits_in_array_08003ff4(void)\n{\n  undefined *array_start = PTR_DAT_0800401c;\n  set_bit_in_array_08002538(PTR_DAT_08004020, 4);\n  set_bit_in_array_08002538(PTR_DAT_08004024, 8);\n  set_bit_in_array_08002538(array_start, 8);\n  set_bit_in_array_08002538(array_start, 0xc);\n  return;\n}",
            "called": [
                "FUN_08002538"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ff4",
            "calling": [
                "FUN_08004028"
            ],
            "imported": false,
            "current_name": "set_bits_in_array_08003ff4"
        },
        "FUN_080041ae": {
            "renaming": {
                "FUN_080041ae": "run_sensor_data_collection_080041ae",
                "convert_to_64bit_08003eb0": "convert_to_64bit",
                "initialize_sensor_data_08004194": "initialize_sensor_data",
                "increment_pointer_0800114c": "increment_pointer",
                "FUN_0800411c": "collect_sensor_data"
            },
            "code": "void run_sensor_data_collection_080041ae(void)\n{\n  convert_to_64bit(0);\n  initialize_sensor_data();\n  do {\n    increment_pointer();\n    collect_sensor_data();\n  } while( true );\n}",
            "called": [
                "FUN_08004194",
                "FUN_0800411c",
                "FUN_08003eb0",
                "FUN_0800114c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041ae",
            "calling": [
                "FUN_08004f68"
            ],
            "imported": false,
            "current_name": "run_sensor_data_collection_080041ae"
        },
        "FUN_08001128": {
            "renaming": {
                "FUN_08001128": "set_flags_and_encode_data_08001128",
                "*DAT_08001148": "flag_register",
                "set_bit_in_register_08001170": "set_flag_1",
                "calculate_encoded_data_08001104": "calculate_encoded_data",
                "set_bit_and_encode_data_08004ccc": "encode_data"
            },
            "code": "int set_flags_and_encode_data_08001128() {\n  set_flag_1();\n  set_flag_2();\n  calculate_encoded_data();\n  encode_data();\n  return 0;\n}",
            "called": [
                "FUN_08004ccc",
                "FUN_08001170",
                "FUN_08001104"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001128",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "set_flags_and_encode_data_08001128"
        },
        "FUN_08004514": {
            "renaming": {
                "FUN_08004514": "process_peripherals_08004514",
                "iVar1": "result",
                "uVar2": "value",
                "uVar3": "data",
                "iVar4": "current_index",
                "local_44": "var6",
                "local_40": "var7",
                "local_3c": "var8",
                "local_38": "var9",
                "local_34": "var10",
                "local_30": "arr",
                "local_20": "var11",
                "local_1c": "var12",
                "local_14": "var13",
                "local_10": "flag",
                "local_c": "var14",
                "PTR_s____Src_peripherals_c_08004588": "peripherals_data"
            },
            "code": "void process_peripherals_08004514()\n{\n  int var1;\n  uint value;\n  undefined4 var3;\n  int var4;\n  undefined4 flag = 0x1f;\n  int var6 = 0x10;\n  int var7 = 2;\n  undefined4 var8 = 0;\n  undefined4 arr[4] = {2, 0, 0, 0};\n  undefined4 var12 = 2;\n  undefined4 var13 = 0x380000;\n  var1 = check_parameters_08001b58(arr);\n  if (var1 != 0) {\n    var3 = 0x3c;\n    while (true) {\n      var1 = process_data_and_strings_08004490(PTR_s____Src_peripherals_c_08004588, var3);\n      var6 = 0xf;\n      var8 = 0x400;\n      var7 = var4;\n      var4 = check_and_calculate_0800209c(&var6, var4);\n      if (var4 == 0) break;\n      var3 = 0x49;\n    }\n    value = get_value_at_memory_address_08002214();\n    check_param_is_valid_08001214(value / 1000);\n    set_flag_08001240(4);\n    encode_data_08001194(0xffffffff,0,0);\n  }\n}\n",
            "called": [
                "FUN_08001194",
                "FUN_0800209c",
                "FUN_08001b58",
                "FUN_08004490",
                "FUN_08001214",
                "FUN_08002214",
                "FUN_08001240"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004514",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "process_peripherals_08004514"
        },
        "FUN_08004a84": {
            "renaming": {
                "FUN_08004a84": "calculate_and_update_data_08004a84",
                "calculate_average_08002ec0": "calculate_average",
                "calculate_result_08002ed4": "calculate_result",
                "check_input_and_call_function_08002ee8": "check_input_and_call_function",
                "update_data_if_needed_08004a30": "update_data_if_needed",
                "is_string_empty_08001064": "is_string_empty",
                "is_input_empty_08001028": "is_input_empty",
                "set_leading_zero_bits_count_in_offset_08003f3c": "set_leading_zero_bits_count_in_offset",
                "calculate_hash_0800483c": "calculate_hash",
                "initialize_data_and_parameters_080041c4": "initialize_data_and_parameters",
                "calculate_values_and_set_parameters_0800426c": "calculate_values_and_set_parameters",
                "FUN_08000adc": "decode_unsigned_integer",
                "FUN_08000cec": "FUN_08000cec",
                "DAT_08004c00": "DAT_08004c00",
                "DAT_08004bfc": "DAT_08004bfc",
                "DAT_08004c0c": "DAT_08004c0c",
                "DAT_08004c10": "DAT_08004c10",
                "PTR_DAT_08004bf0": "string1",
                "PTR_DAT_08004bf4": "string2",
                "PTR_DAT_08004bf8": "string3",
                "PTR_DAT_08004c04": "data",
                "PTR_DAT_08004c08": "PTR_DAT_08004c08",
                "PTR_DAT_08004c14": "PTR_DAT_08004c14"
            },
            "code": "void calculate_and_update_data_08004a84(void)\n{\n    int average = calculate_average();\n    int result = calculate_result();\n    int input_valid = check_input_and_call_function();\n    update_PTR_DAT_08004c04_if_needed();\n    undefined *PTR_DAT_08004bf0 = PTR_DAT_08004bf0;\n    undefined *PTR_DAT_08004bf4 = PTR_DAT_08004bf4;\n    undefined *PTR_DAT_08004bf8 = PTR_DAT_08004bf8;\n    if (!is_string_empty(*(undefined4 *)(PTR_DAT_08004bf0 + 0x30),0)) {\n        if (!is_input_empty(*(undefined4 *)(PTR_DAT_08004bf0 + 0x30),DAT_08004c00)) {\n            initialize_PTR_DAT_08004c04_and_parameters();\n            set_leading_zero_bits_count_in_offset(0,1);\n            return;\n        }\n    }\n    else if (is_string_empty(*(undefined4 *)(PTR_DAT_08004bf0 + 0x30),DAT_08004bfc)) {\n        initialize_PTR_DAT_08004c04_and_parameters();\n        set_leading_zero_bits_count_in_offset(0,1);\n        return;\n    }\n    if (!is_string_empty(*(undefined4 *)(PTR_DAT_08004bf4 + 0x30),0)) {\n        if (!is_input_empty(*(undefined4 *)(PTR_DAT_08004bf4 + 0x30),DAT_08004c00)) {\n            initialize_PTR_DAT_08004c04_and_parameters();\n            set_leading_zero_bits_count_in_offset(0,1);\n            return;\n        }\n    }\n    else if (is_string_empty(*(undefined4 *)(PTR_DAT_08004bf4 + 0x30),DAT_08004bfc)) {\n        initialize_PTR_DAT_08004c04_and_parameters();\n        set_leading_zero_bits_count_in_offset(0,1);\n        return;\n    }\n    set_leading_zero_bits_count_in_offset(1,1);\n    calculate_hash(PTR_DAT_08004bf0);\n    calculate_hash(PTR_DAT_08004bf4);\n    calculate_hash(PTR_DAT_08004bf8);\n    undefined *PTR_DAT_08004c04 = PTR_DAT_08004c04;\n    if (PTR_DAT_08004c04[1] != 0) {\n        calculate_hash(PTR_DAT_08004c08);\n        *(undefined4 *)(PTR_DAT_08004c04 + 0x48) = calculate_float_08000adc(*(undefined4 *)(PTR_DAT_08004c08 + 0x48),DAT_08004c0c);\n    }\n    *(undefined4 *)(PTR_DAT_08004c04 + 0x48) = *(undefined4 *)(PTR_DAT_08004c04 + 4);\n    if (*PTR_DAT_08004c04 == 0) {\n        initialize_PTR_DAT_08004c04_and_parameters();\n    }\n    else {\n        calculate_values_and_set_parameters(*(undefined4 *)(PTR_DAT_08004c04 + 0x48),*(undefined4 *)(PTR_DAT_08004bf0 + 0x48),*(undefined4 *)(PTR_DAT_08004bf4 + 0x48),*(undefined4 *)(PTR_DAT_08004bf8 + 0x48));\n    }\n    calculate_float_08000cec(*(undefined4 *)(PTR_DAT_08004bf0 + 4),DAT_08004c10);\n    PTR_DAT_08004c14[3] = decode_unsigned_integer();\n    calculate_float_08000cec(*(undefined4 *)(PTR_DAT_08004bf0 + 8),DAT_08004c10);\n    PTR_DAT_08004c14[4] = decode_unsigned_integer();\n    calculate_float_08000cec(*(undefined4 *)(PTR_DAT_08004bf4 + 4),DAT_08004c10);\n    *PTR_DAT_08004c14 = decode_unsigned_integer();\n    calculate_float_08000cec(*(undefined4 *)(PTR_DAT_08004bf4 + 8),DAT_08004c10);\n    PTR_DAT_08004c14[1] = decode_unsigned_integer();\n    calculate_float_08000cec(*(undefined4 *)(PTR_DAT_08004bf4 + 0xc),DAT_08004c10);\n    PTR_DAT_08004c14[2] = decode_unsigned_integer();\n    calculate_float_08000cec(*(undefined4 *)(PTR_DAT_08004bf8 + 4),DAT_08004c10);\n    PTR_DAT_08004c14[6] = decode_unsigned_integer();\n    calculate_float_08000cec(*(undefined4 *)(PTR_DAT_08004bf8 + 8),DAT_08004c10);\n    PTR_DAT_08004c14[7] = decode_unsigned_integer();\n    calculate_float_08000cec(*(undefined4 *)(PTR_DAT_08004bf8 + 0xc),DAT_08004c10);\n    PTR_DAT_08004c14[8] = decode_unsigned_integer();\n    calculate_float_08000cec(*(undefined4 *)(PTR_DAT_08004c08 + 4),DAT_08004c10);\n    PTR_DAT_08004c14[9] = decode_unsigned_integer();\n    calculate_float_08000cec(*(undefined4 *)(PTR_DAT_08004c08 + 8),DAT_08004c10);\n    PTR_DAT_08004c14[10] = decode_unsigned_integer();\n    calculate_float_08000cec(*(undefined4 *)(PTR_DAT_08004c08 + 0xc),DAT_08004c10);\n    PTR_DAT_08004c14[0xb] = decode_unsigned_integer();\n}\n",
            "called": [
                "FUN_08000cec",
                "FUN_08002ee8",
                "FUN_08003f3c",
                "FUN_08000adc",
                "FUN_08002ec0",
                "FUN_08001028",
                "FUN_0800483c",
                "FUN_08004a30",
                "FUN_08001064",
                "FUN_080010c4",
                "FUN_08002ed4",
                "FUN_080041c4",
                "FUN_0800426c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a84",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "calculate_and_update_data_08004a84"
        },
        "FUN_080041c4": {
            "renaming": {
                "FUN_080041c4": "initialize_data_and_parameters_080041c4",
                "param_1": "data_in_memory",
                "param_2": "data_in_struct",
                "param_3": "parameter_in_global_memory",
                "param_4": "parameter_3",
                "extraout_r1": "parameter_4",
                "set_data_in_memory_location_08003fc4": "set_data_in_memory_location",
                "set_data_in_struct_08003fd0": "set_data_in_struct",
                "set_parameter_in_global_memory_08003fdc": "set_parameter_in_global_memory",
                "set_parameter_value_08003fe8": "set_parameter_value"
            },
            "code": "void initialize_data_and_parameters_080041c4(undefined4 data_in_memory, undefined4 data_in_struct, undefined4 parameter_in_global_memory, undefined4 parameter_3, undefined4 parameter_4)\n{\n  undefined4 extraout_r1;\n  set_data_in_memory_location_08003fc4(data_in_memory);\n  set_data_in_struct_08003fd0(data_in_struct);\n  set_parameter_in_global_memory_08003fdc(parameter_in_global_memory);\n  set_parameter_value_08003fe8(0,extraout_r1,parameter_3,parameter_4);\n  return;\n}",
            "called": [
                "FUN_08003fd0",
                "FUN_08003fdc",
                "FUN_08003fc4",
                "FUN_08003fe8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041c4",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "initialize_data_and_parameters_080041c4"
        },
        "FUN_080053d4": {
            "renaming": {
                "FUN_080053d4": "encode_and_send_data_080053d4",
                "param_1": "socket_fd",
                "param_2": "data",
                "param_3": "data_size",
                "param_4": "send_callback",
                "param_5": "send_args",
                "bVar1": "first_byte",
                "iVar2": "result",
                "puVar3": "ptr",
                "iVar4": "i",
                "puVar5": "hex_chars",
                "uVar6": "base",
                "ppuVar7": "ptr_ptr",
                "uVar8": "value",
                "uVar9": "length",
                "puVar10": "str_ptr",
                "puVar11": "current_str_ptr",
                "local_24": "encoded_data"
            },
            "code": "\nuint encode_and_send_data_080053d4(undefined4 socket_fd,uint *data,undefined4 data_size,code *send_callback,uint **send_args)\n\n{\n  byte first_byte;\n  int result;\n  uint *ptr;\n  int i;\n  undefined *hex_chars;\n  uint base;\n  uint **ptr_ptr;\n  uint value;\n  uint length;\n  undefined *str_ptr;\n  undefined *current_str_ptr;\n  uint encoded_data [2];\n  \n  first_byte = *(byte *)(data + 6);\n  current_str_ptr = (undefined *)((int)data + 0x43);\n  if (first_byte != 0x6e) {\n    if (first_byte < 0x6f) {\n      if (first_byte != 99) {\n        if (first_byte < 100) {\n          if (first_byte == 0) goto LAB_0800558e;\n          if (first_byte != 0x58) goto LAB_08005404;\n          *(undefined *)((int)data + 0x45) = 0x58;\n          hex_chars = PTR_s_0123456789ABCDEF_08005610;\nLAB_0800551e:\n          base = *data;\n          ptr = *send_args;\n          *send_args = ptr + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            value = (uint)*(ushort *)ptr;\n          }\n          else {\n            value = *ptr;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *data = base | 0x20;\n          }\n          if (value == 0) {\n            *data = *data & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)data + 0x43) = 0;\n        }\n        else {\n          if ((first_byte != 100) && (first_byte != 0x69)) goto LAB_08005404;\n          value = *data;\n          ptr = *send_args;\n          if ((value & 0x80) == 0) {\n            *send_args = ptr + 1;\n            if ((value & 0x40) == 0) goto LAB_08005424;\n            value = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *send_args = ptr + 1;\nLAB_08005424:\n            value = *ptr;\n          }\n          if ((int)value < 0) {\n            value = -value;\n            *(undefined *)((int)data + 0x43) = 0x2d;\n          }\n          base = 10;\n          hex_chars = PTR_s_0123456789ABCDEF_08005610;\n        }\n        length = data[1];\n        data[2] = length;\n        str_ptr = current_str_ptr;\n        if ((int)length < 0) {\n          if (value != 0) goto LAB_08005552;\nLAB_08005600:\n          *(undefined *)((int)data + 0x42) = *hex_chars;\n          str_ptr = (undefined *)((int)data + 0x42);\n        }\n        else {\n          *data = *data & 0xfffffffb;\n          if (value == 0) {\n            if (length != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              length = value / base;\n              str_ptr = str_ptr + -1;\n              *str_ptr = hex_chars[value - base * length];\n              value = length;\n            } while (length != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*data << 0x1f) < 0)) && ((int)data[1] <= (int)data[4]))\n        {\n          str_ptr[-1] = 0x30;\n          str_ptr = str_ptr + -1;\n        }\n        data[4] = (int)current_str_ptr - (int)str_ptr;\n        current_str_ptr = str_ptr;\n        goto LAB_080054fa;\n      }\n      ptr = *send_args;\n      *send_args = ptr + 1;\n      *(char *)((int)data + 0x42) = (char)*ptr;\nLAB_08005464:\n      current_str_ptr = (undefined *)((int)data + 0x42);\n      value = 1;\n    }\n    else {\n      if (first_byte != 0x73) {\n        if (first_byte < 0x74) {\n          if (first_byte == 0x6f) {\nLAB_0800548a:\n            value = *data;\n            ptr = *send_args;\n            if ((value & 0x80) == 0) {\n              *send_args = ptr + 1;\n              if ((value & 0x40) == 0) goto LAB_08005498;\n              value = (uint)*(ushort *)ptr;\n            }\n            else {\n              *send_args = ptr + 1;\nLAB_08005498:\n              value = *ptr;\n            }\n            hex_chars = PTR_s_0123456789ABCDEF_08005610;\n            if (first_byte == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            goto LAB_080054b4;\n          }\n          if (first_byte == 0x70) {\n            *data = *data | 0x20;\nLAB_0800544a:\n            hex_chars = PTR_s_0123456789abcdef_0800560c;\n            *(undefined *)((int)data + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (first_byte == 0x75) goto LAB_0800548a;\n          if (first_byte == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)data + 0x42) = first_byte;\n        goto LAB_08005464;\n      }\n      ptr = *send_args;\n      *send_args = ptr + 1;\n      current_str_ptr = (undefined *)*ptr;\n      result = find_character_08005614(current_str_ptr,0,data[1]);\n      if (result != 0) {\n        data[1] = result - (int)current_str_ptr;\n      }\n      value = data[1];\n    }\n    data[4] = value;\n    *(undefined *)((int)data + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  value = *data;\n  ptr_ptr = (uint **)*send_args;\n  base = data[5];\n  if ((value & 0x80) == 0) {\n    *send_args = (uint *)(ptr_ptr + 1);\n    ptr = *ptr_ptr;\n    if ((value & 0x40) == 0) goto LAB_0800557a;\n    *(short *)ptr = (short)base;\n  }\n  else {\n    *send_args = (uint *)(ptr_ptr + 1);\n    ptr = *ptr_ptr;\nLAB_0800557a:\n    *ptr = base;\n  }\nLAB_0800558e:\n  data[4] = 0;\nLAB_080054fa:\n  result = encode_data_080052e4(socket_fd,data,encoded_data,data_size,send_callback);\n  if ((result == -1) || (result = (*send_callback)(socket_fd,data_size,current_str_ptr,data[4]), result == -1)) {\nLAB_0800550e:\n    value = 0xffffffff;\n  }\n  else {\n    if ((int)(*data << 0x1e) < 0) {\n      for (result = 0; result < (int)(data[3] - encoded_data[0]); result = result + 1) {\n        i = (*send_callback)(socket_fd,data_size,(int)data + 0x19,1);\n        if (i == -1) goto LAB_0800550e;\n      }\n    }\n    value = data[3];\n    if ((int)data[3] < (int)encoded_data[0]) {\n      value = encoded_data[0];\n    }\n  }\n  return value;\n}\n\n",
            "called": [
                "FUN_08005614",
                "FUN_080052e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053d4",
            "calling": [
                "FUN_080050fc"
            ],
            "imported": false,
            "current_name": "encode_and_send_data_080053d4"
        },
        "FUN_080057d0": {
            "renaming": {
                "FUN_080057d0": "allocate_and_insert_into_list_080057d0",
                "param_1": "address",
                "param_2": "size",
                "param_3": "offset",
                "param_4": "data",
                "uVar1": "result",
                "uVar2": "calculated_offset"
            },
            "code": "uint allocate_and_insert_into_list_080057d0(uint address, uint size, uint offset, uint data)\n{\n  uint result;\n  uint calculated_offset;\n  if (size != 0)\n  {\n    if (offset == 0)\n    {\n      insert_into_linked_list();\n      result = offset;\n    }\n    else\n    {\n      calculated_offset = calculate_param_offset();\n      result = size;\n      if ((calculated_offset < offset) && (result = allocate_memory_block(address, offset), result != 0))\n      {\n        copy_data_to_buffer(result, size, offset);\n        insert_into_linked_list(address, size);\n      }\n    }\n    return result;\n  }\n  result = allocate_memory_block(address, offset, offset, data);\n  return result;\n}",
            "called": [
                "FUN_08005840",
                "FUN_08005630",
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057d0",
            "calling": [
                "FUN_08005044"
            ],
            "imported": false,
            "current_name": "allocate_and_insert_into_list_080057d0"
        },
        "FUN_0800567c": {
            "renaming": {
                "FUN_0800567c": "insert_into_linked_list_0800567c",
                "param_1": "head",
                "param_2": "size",
                "param_3": "data",
                "param_4": "error_code",
                "puVar1": "ptr",
                "extraout_r1": "prev",
                "ppiVar2": "prev",
                "ppiVar3": "next",
                "piVar4": "next_data",
                "ppiVar5": "current",
                "ppiVar6": "prev",
                "ppiVar7": "tail"
            },
            "code": "void insert_into_linked_list_0800567c(int** head, int size, int* data, int error_code) {\n  if (size == 0) {\n    return;\n  }\n  int **tail = head + size - 1;\n  if (*tail < 0) {\n    tail = tail + *tail;\n  }\n  do_nothing_0800583c();\n  int **current = *(int ***)PTR_DAT_08005710;\n  if (current == NULL) {\n    *tail = NULL;\n    *(int ***)PTR_DAT_08005710 = tail;\n    int **prev = head;\n  }\n  else if (tail < current) {\n    int **prev = *tail;\n    int **next = (int **)((int)tail + (int)prev);\n    if (current == next) {\n      int *next_data = *current;\n      current = (int **)current[1];\n      next = (int **)((int)next_data + (int)prev);\n      *tail = next;\n    }\n    *tail = current;\n    *(int ***)PTR_DAT_08005710 = tail;\n    int **prev = head;\n  }\n  else {\n    do {\n      int **prev = current;\n      int **next = (int **)prev[1];\n      if (next == NULL) break;\n      current = next;\n    } while (next <= tail);\n    int **prev = *current;\n    if ((int **)((int)current + (int)prev) == tail) {\n      int **next = (int **)((int)prev + (int)*tail);\n      *current = next;\n      if (next == (int **)((int)current + (int)current[1])) {\n        int *next_data = *next;\n        next = (int **)next[1];\n        next = (int **)((int)next_data + (int)current[1]);\n        *current = next;\n        current[1] = (int *)next_data;\n      }\n    }\n    else if (tail < (int **)((int)current + (int)prev)) {\n      *error_code = 0xc;\n    }\n    else {\n      int **next = (int **)((int)tail + (int)*tail);\n      if (next == (int **)((int)current + current[1])) {\n        int *next_data = *next;\n        next = (int **)next[1];\n        next = (int **)((int)next_data + (int)*tail);\n        *tail = next;\n      }\n      *tail = current[1];\n      current[1] = tail;\n      int **prev = head;\n    }\n  }\n  do_nothing_0800583e(error_code, prev, current, data);\n  return;\n}",
            "called": [
                "FUN_0800583e",
                "FUN_0800583c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800567c",
            "calling": [
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "imported": false,
            "current_name": "insert_into_linked_list_0800567c"
        },
        "FUN_0800458c": {
            "renaming": {
                "FUN_0800458c": "process_data_0800458c",
                "uVar1": "value1",
                "puVar2": "pointer",
                "iVar3": "result",
                "uVar4": "value2",
                "iVar5": "counter",
                "local_58": "var1",
                "local_54": "var2",
                "local_50": "var3",
                "local_4c": "var4",
                "local_48": "var5",
                "local_40": "var6",
                "local_3c": "var7",
                "local_38": "var8",
                "local_34": "value3",
                "local_30": "value4",
                "local_2c": "value5",
                "local_28": "value6",
                "local_24": "value7",
                "local_20": "value8",
                "local_1c": "value9"
            },
            "code": "\nvoid process_data_0800458c(void)\n\n{\n  undefined4 value1;\n  undefined *pointer;\n  int result;\n  undefined4 value2;\n  int counter;\n  int var1;\n  int var2;\n  int var3;\n  int var4;\n  int var5;\n  int var6;\n  int var7;\n  int var8;\n  int value3;\n  int value4;\n  int value5;\n  int value6;\n  int value7;\n  undefined4 value8;\n  int value9;\n  \n  set_flags_and_encode_data_08001128();\n  process_peripherals_08004514();\n  value2 = DAT_08004800;\n  result = DAT_080047fc;\n  *(uint *)(DAT_080047fc + 0x18) = *(uint *)(DAT_080047fc + 0x18) | 0x10;\n  counter = 2;\n  *(uint *)(result + 0x18) = *(uint *)(result + 0x18) | 4;\n  value1 = DAT_08004804;\n  *(uint *)(result + 0x18) = *(uint *)(result + 0x18) | 8;\n  set_value_at_offset_08001424(value2,0xe000,0,*(uint *)(result + 0x18) & 8);\n  set_value_at_offset_08001424(DAT_08004808,0x20,0);\n  value3 = 0xe000;\n  value4 = 1;\n  value6 = 2;\n  process_bits_08001264(DAT_08004800,&value3);\n  value3 = 0x20;\n  value4 = 1;\n  value6 = 2;\n  process_bits_08001264(DAT_08004808,&value3);\n  pointer = PTR_DAT_0800480c;\n  *(undefined4 *)PTR_DAT_0800480c = DAT_08004810;\n  *(undefined4 *)(pointer + 4) = value1;\n  *(undefined4 *)(pointer + 0x10) = 0x4000;\n  *(undefined4 *)(pointer + 8) = 0;\n  *(undefined4 *)(pointer + 0xc) = 0;\n  *(undefined4 *)(pointer + 0x14) = 0;\n  *(undefined4 *)(pointer + 0x18) = 0;\n  *(undefined4 *)(pointer + 0x1c) = 0;\n  *(undefined4 *)(pointer + 0x20) = 0;\n  result = configure_device_08001754();\n  if (result == 0) goto LAB_0800463a;\n  value2 = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  result = process_data_0800458c_and_strings_08004490(PTR_s____Src_peripherals_c_08004814,value2);\nLAB_0800463a:\n                                  value2 = DAT_0800481c;\n                                  pointer = PTR_DAT_08004818;\n                                  *(int *)(PTR_DAT_08004818 + 8) = result;\n                                  *(int *)(pointer + 0xc) = result;\n                                  *(int *)(pointer + 0x10) = result;\n                                  *(int *)(pointer + 0x18) = result;\n                                  *(int *)(pointer + 0x1c) = result;\n                                  *(undefined4 *)pointer = value2;\n                                  *(undefined4 *)(pointer + 4) = 0x1c200;\n                                  *(undefined4 *)(pointer + 0x14) = 0xc;\n                                  result = process_data_0800458c_08002724(pointer);\n                                  value2 = DAT_08004824;\n                                  pointer = PTR_DAT_08004820;\n                                  if (result == 0) break;\n                                  value2 = 0x151;\n                                }\n                                *(undefined4 *)(PTR_DAT_08004820 + 8) = 0;\n                                *(undefined4 *)(pointer + 0x10) = 0;\n                                *(undefined4 *)(pointer + 0x14) = 0;\n                                *(undefined4 *)pointer = value2;\n                                *(int *)(pointer + 4) = counter;\n                                *(undefined4 *)(pointer + 0xc) = 1000;\n                                result = process_data_0800458c_080023d0(pointer);\n                                if (result == 0) break;\n                                value2 = 0x88;\n                              }\n                              var1 = result;\n                              var2 = result;\n                              result = set_bits_in_memory_080025a4(pointer,&var1);\n                              if (result == 0) break;\n                              value2 = 0x8f;\n                            }\n                            var3 = 0x60;\n                            var4 = result;\n                            var5 = result;\n                            var6 = result;\n                            var7 = result;\n                            var8 = result;\n                            result = update_data_0800245c(pointer,&var3,0xc);\n                            if (result == 0) break;\n                            value2 = 0x9a;\n                          }\n                          value8 = 0x2000;\n                          value3 = result;\n                          value4 = result;\n                          value5 = result;\n                          value6 = result;\n                          value7 = result;\n                          value9 = result;\n                          result = set_flag_and_calculate_08002564(pointer,&value3);\n                          if (result == 0) break;\n                          value2 = 0xa6;\n                        }\n                        process_data_0800458c_08004e14(pointer);\n                        pointer = PTR_DAT_08004828;\n                        *(undefined4 *)PTR_DAT_08004828 = 0x40000000;\n                        *(int *)(pointer + 4) = counter;\n                        *(undefined4 *)(pointer + 8) = 0;\n                        *(undefined4 *)(pointer + 0xc) = 1000;\n                        *(undefined4 *)(pointer + 0x10) = 0;\n                        result = process_data_0800458c_080023d0(pointer);\n                        if (result == 0) break;\n                        value2 = 0xc3;\n                      }\n                      var3 = result;\n                      var4 = result;\n                      result = set_bits_in_memory_080025a4(pointer,&var3);\n                      if (result == 0) break;\n                      value2 = 0xca;\n                    }\n                    value3 = 0x60;\n                    value4 = result;\n                    value5 = result;\n                    value7 = result;\n                    result = update_data_0800245c(pointer,&value3,4);\n                    if (result == 0) break;\n                    value2 = 0xd3;\n                  }\n                  process_data_0800458c_08004e14(pointer);\n                  value2 = DAT_08004830;\n                  pointer = PTR_DAT_0800482c;\n                  *(undefined4 *)(PTR_DAT_0800482c + 0xc) = 1000;\n                  *(undefined4 *)pointer = value2;\n                  *(int *)(pointer + 4) = counter;\n                  *(undefined4 *)(pointer + 8) = 0;\n                  *(undefined4 *)(pointer + 0x10) = 0;\n                  result = process_data_0800458c_080023d0();\n                  if (result == 0) break;\n                  value2 = 0xf0;\n                }\n                var3 = 0;\n                var4 = 0;\n                result = set_bits_in_memory_080025a4(PTR_DAT_0800482c,&var3);\n                if (result == 0) break;\n                value2 = 0xf7;\n              }\n              value3 = 0x60;\n              value4 = result;\n              value5 = result;\n              value7 = result;\n              result = update_data_0800245c(PTR_DAT_0800482c,&value3,8);\n              if (result == 0) break;\n              value2 = 0x100;\n            }\n            counter = update_data_0800245c(PTR_DAT_0800482c,&value3,0xc);\n            if (counter == 0) break;\n            value2 = 0x105;\n          }\n          process_data_0800458c_08004e14(PTR_DAT_0800482c);\n          pointer = PTR_DAT_08004834;\n          *(undefined4 *)PTR_DAT_08004834 = DAT_08004838;\n          *(undefined4 *)(pointer + 4) = 2;\n          *(undefined4 *)(pointer + 8) = 0;\n          *(undefined4 *)(pointer + 0xc) = 1000;\n          *(undefined4 *)(pointer + 0x10) = 0;\n          result = process_data_0800458c_080023d0(pointer);\n          if (result == 0) break;\n          value2 = 0x122;\n        }\n        var3 = result;\n        var4 = result;\n        result = set_bits_in_memory_080025a4(pointer,&var3);\n        if (result == 0) break;\n        value2 = 0x129;\n      }\n      value3 = 0x60;\n      value4 = result;\n      value5 = result;\n      value7 = result;\n      result = update_data_0800245c(pointer,&value3,8);\n      if (result == 0) break;\n      value2 = 0x132;\n    }\n    result = update_data_0800245c(pointer,&value3,0xc);\n    if (result == 0) break;\n    value2 = 0x137;\n  }\n  process_data_0800458c_08004e14(pointer);\n  return;\n}\n\n",
            "called": [
                "FUN_08001424",
                "FUN_080023d0",
                "FUN_080025a4",
                "FUN_08002564",
                "FUN_08004e14",
                "FUN_08002724",
                "FUN_08004490",
                "FUN_08001128",
                "FUN_08001754",
                "FUN_08004514",
                "FUN_08001264",
                "FUN_0800245c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800458c",
            "calling": [
                "FUN_08004028"
            ],
            "imported": false,
            "current_name": "process_data_0800458c"
        },
        "FUN_080072d4": {
            "renaming": {
                "FUN_080072d4": "do_nothing_080072d4"
            },
            "code": "\nvoid do_nothing_080072d4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072d4",
            "calling": [
                "FUN_08000110",
                "FUN_08000134",
                "FUN_08004fb4"
            ],
            "imported": false,
            "current_name": "do_nothing_080072d4"
        },
        "FUN_0800583c": {
            "renaming": {
                "FUN_0800583c": "do_nothing_0800583c"
            },
            "code": "\nvoid do_nothing_0800583c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800583c",
            "calling": [
                "FUN_0800567c",
                "FUN_08005714"
            ],
            "imported": false,
            "current_name": "do_nothing_0800583c"
        },
        "FUN_08000adc": {
            "renaming": {
                "FUN_08000adc": "calculate_float_08000adc",
                "param_1": "val1",
                "param_2": "val2",
                "param_3": "val3",
                "param_4": "val4",
                "iVar1": "intVar1",
                "iVar6": "intVar2",
                "uVar2": "uintVar1",
                "uVar3": "uintVar2",
                "uVar4": "uintVar3",
                "uVar5": "uintVar4",
                "bVar7": "boolVar1"
            },
            "code": "\nuint calculate_float_08000adc(uint val1,uint val2,undefined4 val3,uint val4)\n\n{\n  int intVar1;\n  uint uintVar1;\n  uint uintVar2;\n  uint uintVar3;\n  uint uintVar4;\n  int intVar2;\n  bool boolVar1;\n  \n  uintVar2 = val1 << 1;\n  boolVar1 = uintVar2 == 0;\n  if (!boolVar1) {\n    val4 = val2 << 1;\n    boolVar1 = val4 == 0;\n  }\n  if (!boolVar1) {\n    boolVar1 = uintVar2 == val4;\n  }\n  intVar2 = (int)uintVar2 >> 0x18;\n  if (!boolVar1) {\n    boolVar1 = intVar2 == -1;\n  }\n  if (!boolVar1) {\n    boolVar1 = (int)val4 >> 0x18 == -1;\n  }\n  if (boolVar1) {\n    intVar1 = (int)(val2 << 1) >> 0x18;\n    if (intVar2 == -1 || intVar1 == -1) {\n      uintVar2 = val2;\n      if (intVar2 == -1) {\n        uintVar2 = val1;\n      }\n      if (intVar2 != -1 || intVar1 != -1) {\n        val2 = uintVar2;\n      }\n      boolVar1 = (uintVar2 & 0x7fffff) == 0;\n      if (boolVar1) {\n        boolVar1 = (val2 & 0x7fffff) == 0;\n      }\n      if (boolVar1) {\n        boolVar1 = uintVar2 == val2;\n      }\n      if (!boolVar1) {\n        uintVar2 = uintVar2 | 0x400000;\n      }\n      return uintVar2;\n    }\n    if (((val1 ^ val2) & 0x7fffffff) != 0) {\n      if (uintVar2 == 0) {\n        val1 = val2;\n      }\n      return val1;\n    }\n    if (val1 != val2) {\n      return 0;\n    }\n    if ((uintVar2 & 0xff000000) == 0) {\n      uintVar2 = val1 << 1;\n      if ((val1 & 0x80000000) != 0) {\n        uintVar2 = uintVar2 | 0x80000000;\n      }\n      return uintVar2;\n    }\n    if (uintVar2 < 0xfe000000) {\n      return val1 + 0x800000;\n    }\n    val1 = val1 & 0x80000000;\nLAB_08000c12:\n    return val1 | 0x7f800000;\n  }\n  uintVar2 = uintVar2 >> 0x18;\n  val4 = val4 >> 0x18;\n  uintVar4 = val4 - uintVar2;\n  boolVar1 = uintVar4 != 0;\n  uintVar3 = uintVar2;\n  if (boolVar1 && uintVar2 <= val4) {\n    uintVar3 = uintVar2 + uintVar4;\n  }\n  if (boolVar1 && uintVar2 <= val4) {\n    val2 = val2 ^ val1;\n  }\n  if (boolVar1 && uintVar2 <= val4) {\n    val1 = val1 ^ val2;\n  }\n  if (boolVar1 && uintVar2 <= val4) {\n    val2 = val2 ^ val1;\n  }\n  if (val4 < uintVar2) {\n    uintVar4 = -uintVar4;\n  }\n  if (0x19 < uintVar4) {\n    return val1;\n  }\n  uintVar2 = val1 & 0xffffff | 0x800000;\n  if ((val1 & 0x80000000) != 0) {\n    uintVar2 = -uintVar2;\n  }\n  uintVar1 = val2 & 0xffffff | 0x800000;\n  if ((val2 & 0x80000000) != 0) {\n    uintVar1 = -uintVar1;\n  }\n  if (uintVar3 == uintVar4) {\n    uintVar1 = uintVar1 ^ 0x800000;\n    if (uintVar3 == 0) {\n      uintVar2 = uintVar2 ^ 0x800000;\n      uintVar3 = 1;\n    }\n    else {\n      uintVar4 = uintVar4 - 1;\n    }\n  }\n  uintVar2 = uintVar2 + ((int)uintVar1 >> (uintVar4 & 0xff));\n  uintVar1 = uintVar1 << (0x20 - uintVar4 & 0xff);\n  val1 = uintVar2 & 0x80000000;\n  if ((int)uintVar2 < 0) {\n    boolVar1 = uintVar1 != 0;\n    uintVar1 = -uintVar1;\n    uintVar2 = -uintVar2 - (uint)boolVar1;\n  }\n  if (uintVar2 < 0x800000) {\n    uintVar4 = uintVar1 & 0x80000000;\n    uintVar1 = uintVar1 << 1;\n    uintVar2 = uintVar2 * 2 + (uint)(uintVar4 != 0);\n    uintVar4 = uintVar3 - 2;\n    if ((uintVar2 & 0x800000) == 0) {\n      intVar2 = count_leading_zeroes(uintVar2);\n      uintVar3 = intVar2 - 8;\n      uintVar2 = uintVar2 << (uintVar3 & 0xff);\n      if ((int)uintVar4 < (int)uintVar3) {\n        uintVar2 = uintVar2 >> (-(uintVar4 - uintVar3) & 0xff);\n      }\n      else {\n        uintVar2 = uintVar2 + (uintVar4 - uintVar3) * 0x800000;\n      }\n      return uintVar2 | val1;\n    }\n  }\n  else {\n    uintVar4 = uintVar3 - 1;\n    if (0xffffff < uintVar2) {\n      uintVar4 = uintVar2 & 1;\n      uintVar2 = uintVar2 >> 1;\n      uintVar1 = (uint)(uintVar4 != 0) << 0x1f | uintVar1 >> 1;\n      uintVar4 = uintVar3;\n      if (0xfd < uintVar3) goto LAB_08000c12;\n    }\n  }\n  uintVar2 = uintVar2 + uintVar4 * 0x800000 + (uint)(0x7fffffff < uintVar1);\n  if (uintVar1 == 0x80000000) {\n    uintVar2 = uintVar2 & 0xfffffffe;\n  }\n  return uintVar2 | val1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000adc",
            "calling": [
                "FUN_08002ee8",
                "FUN_08002cb0",
                "FUN_0800411c",
                "FUN_08002ec0",
                "FUN_08004a84",
                "FUN_0800426c",
                "FUN_08003330",
                "FUN_0800483c"
            ],
            "imported": false,
            "current_name": "calculate_float_08000adc"
        },
        "FUN_08000ffc": {
            "renaming": {
                "FUN_08000ffc": "concatenate_params_and_reverse_08000ffc",
                "param_1": "str1",
                "param_2": "str2",
                "concatenate_params_08001004": "strcat",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void concatenate_params_and_reverse_08000ffc(char* str1, char* str2)\n{\n    strcat(str1, str2);\n    strrev(str1);\n    return;\n}",
            "called": [
                "FUN_08001004"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ffc",
            "calling": [
                "FUN_08001064",
                "FUN_08001050"
            ],
            "imported": false,
            "current_name": "concatenate_params_and_reverse_08000ffc"
        },
        "FUN_080016f4": {
            "renaming": {
                "FUN_080016f4": "check_value_and_range_080016f4",
                "param_1": "data",
                "param_2": "length",
                "iVar1": "start_value",
                "iVar2": "current_value"
            },
            "code": "int check_value_and_range_080016f4(int *data, uint length) {\n    int start_value = get_start_value();\n    while (true) {\n        int current_value = *data;\n        if ((*(uint *)(current_value + 0x14) & 0x40) != 0) {\n            return 0;\n        }\n        if (*(int *)(current_value + 0x14) << 0x1b < 0) {\n            if ((length == 0) || (current_value = get_start_value(), length < (uint)(current_value - start_value))) {\n                data[14] |= 0x20;\n                *(undefined *)((int)data + 0x35) = 0x20;\n                *(undefined *)(data + 13) = 0;\n                return 3;\n            }\n        } else {\n            *(uint *)(current_value + 0x14) = *(uint *)(current_value + 0x14) & 0xffffffef;\n            data[14] = 0;\n            *(undefined *)(data + 13) = 0;\n            *(undefined *)((int)data + 0x35) = 0x20;\n            return 1;\n        }\n    }\n}",
            "called": [
                "FUN_0800115c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016f4",
            "calling": [
                "FUN_08001938"
            ],
            "imported": false,
            "current_name": "check_value_and_range_080016f4"
        },
        "FUN_080025a4": {
            "renaming": {
                "FUN_080025a4": "set_bits_in_memory_080025a4",
                "param_1": "memory_address",
                "param_2": "bitmask",
                "uVar1": "bitmask1",
                "uVar2": "return_value",
                "iVar3": "memory_address0",
                "uVar4": "bitmask0"
            },
            "code": "int set_bits_in_memory_080025a4(int *memory_address, uint *bitmask) {\n  uint bitmask0 = bitmask[0];\n  uint bitmask1 = bitmask[1];\n  int return_value = 2;\n  if (*(char *)(memory_address + 0xe) != '\\x01') {\n    *(undefined *)((int)memory_address + 0x39) = 2;\n    int memory_address0 = *memory_address;\n    *(uint *)(memory_address0 + 4) = *(uint *)(memory_address0 + 4) & 0xffffff8f;\n    *(uint *)(memory_address0 + 4) = *(uint *)(memory_address0 + 4) | bitmask0;\n    *(uint *)(memory_address0 + 8) = *(uint *)(memory_address0 + 8) & 0xffffff7f;\n    *(uint *)(memory_address0 + 8) = *(uint *)(memory_address0 + 8) | bitmask1;\n    *(undefined *)((int)memory_address + 0x39) = 1;\n    return_value = 0;\n    *(undefined *)(memory_address + 0xe) = 0;\n  }\n  return return_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025a4",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "set_bits_in_memory_080025a4"
        },
        "FUN_0800583e": {
            "renaming": {
                "FUN_0800583e": "do_nothing_0800583e"
            },
            "code": "\nvoid do_nothing_0800583e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800583e",
            "calling": [
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800583e"
        },
        "FUN_08002220": {
            "renaming": {
                "FUN_08002220": "get_shifted_value_08002220",
                "uVar1": "leading_zero_count",
                "PTR_DAT_0800224c": "pointer_to_dat_0800224c",
                "PTR_DAT_08002248": "pointer_to_dat_08002248",
                "DAT_08002244": "dat_08002244",
                "count_leading_zeroes": "count_leading_zeroes",
                "input": "input",
                "count": "count",
                "mask": "mask"
            },
            "code": "uint get_shifted_value_08002220(uint input) {\n    uint count = 0;\n    while (input >>= 1) {\n        count++;\n    }\n    return 32 - count;\n}\n\nuint get_shifted_value_08002220(void) {\n    uint leading_zero_count = get_shifted_value_08002220(0xe00000);\n    uint mask = (*(uint *)PTR_DAT_0800224c) >> (PTR_DAT_08002248[(*(uint *)(DAT_08002244 + 4) & 0x700) >> (leading_zero_count & 0xff)]);\n    return mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002220",
            "calling": [
                "FUN_080025e8",
                "FUN_08001754"
            ],
            "imported": false,
            "current_name": "get_shifted_value_08002220"
        },
        "FUN_08003034": {
            "renaming": {
                "FUN_08003034": "process_sensor_data_08003034",
                "param_1": "sensor_address",
                "param_2": "sensor_register",
                "param_3": "sensor_data",
                "param_4": "data_length",
                "local_c": "local_data",
                "PTR_s____Src_MS5611_c_08003064": "sensor_address",
                "uint": "unsigned int",
                "undefined4": "uint32_t",
                "CONCAT12": "concatenate_12",
                "CONCAT11": "concatenate_11"
            },
            "code": "uint process_sensor_data_08003034(uint8_t PTR_s____Src_MS5611_c_08003064, uint8_t sensor_register, uint8_t* sensor_data, uint8_t data_length)\n{\n  uint8_t local_data[data_length];\n  memcpy(local_data, sensor_data, data_length);\n  process_data_and_strings_if_successful(0xee, 0, &local_data, 3, PTR_s____Src_MS5611_c_08003064, 0x8c, sensor_register);\n  return (uint)CONCAT12((undefined)local_data, CONCAT11(local_data._1_1_, local_data._2_1_));\n}",
            "called": [
                "FUN_080040b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003034",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "process_sensor_data_08003034"
        },
        "FUN_08004e7c": {
            "renaming": {
                "FUN_08004e7c": "process_data_08004e7c",
                "param_1": "data",
                "*param_1": "data_value",
                "DAT_08004edc": "DATA_CONST",
                "DAT_08004ee0": "DATA_CONST_2",
                "local_18": "bit_mask_1",
                "local_14": "bit_mask_2",
                "local_10": "bit_mask_3",
                "local_c": "unused"
            },
            "code": "void process_data_08004e7c(int *data)\n{\n  int data_value = *data;\n  if (data_value == DAT_08004edc) {\n    uint *data_ptr = (uint *)(DAT_08004edc + DATA_OFFSET);\n    *data_ptr |= BIT_MASK;\n    uint bit_mask_1 = 0x200;\n    uint bit_mask_2 = 2;\n    uint bit_mask_3 = 3;\n    process_bits(DAT_08004ee0, &bit_mask_1);\n    bit_mask_1 = 0x400;\n    bit_mask_2 = 0;\n    bit_mask_3 = 0;\n    process_bits(DAT_08004ee0, &bit_mask_1);\n    encode_data(0x25, 0, 0);\n    set_bit_in_array(0x25);\n  }\n  return;\n}",
            "called": [
                "FUN_08001194",
                "FUN_080011fc",
                "FUN_08001264"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e7c",
            "calling": [
                "FUN_08002724"
            ],
            "imported": false,
            "current_name": "process_data_08004e7c"
        },
        "FUN_08001530": {
            "renaming": {
                "FUN_08001530": "process_data_08001530",
                "param_1": "data",
                "param_2": "data_size_1",
                "param_3": "data_size_2",
                "param_4": "flag_1",
                "param_5": "flag_2",
                "puVar3": "data_ptr",
                "ppuVar4": "data_ptr_ptr",
                "uVar5": "size_1",
                "uVar6": "size_2",
                "iVar1": "value",
                "iVar2": "value_2",
                "check_value_match_08001460": "check_value_match",
                "check_value_080014e2": "check_value",
                "DAT_080015e4": "MATCH_DATA",
                "0x100": "FLAG_1",
                "0x200": "FLAG_2",
                "0xfe": "MASK_1",
                "0xff": "MASK_2",
                "get_value_from_pointer_0800115c": "get_value_from_pointer"
            },
            "code": "int process_data_08001530(uint **data, uint data_size_1, uint data_size_2, int flag_1, uint flag_2) {\n  int match_result;\n  int value;\n  uint *data_ptr;\n  uint **data_ptr_ptr;\n  uint size_1 = data_size_1;\n  uint size_2 = data_size_2;\n  **data = **data | 0x100;\n  data_ptr_ptr = data;\n  value = get_value_from_pointer();\n  do {\n    data_ptr = *data_ptr_ptr;\n    do {\n      if ((int)(data_ptr[5] << 0x1f) < 0) {\n        data_ptr[4] = data_size_1 & 0xfe;\n        match_result = check_value_match(data, DAT_080015e4, flag_2, data_ptr, data_ptr_ptr, size_1, size_2);\n        if (match_result == 0) {\n          match_result = check_value(data, flag_2, (*data)[5], (*data)[6]);\n          if (match_result == 0) {\n            data_ptr = *data;\n            if (flag_1 == 1) {\n              goto set_data_1;\n            }\n            data_ptr[4] = data_size_2 >> 8;\n            match_result = check_value(data, flag_2);\n            if (match_result == 0) {\n              data_ptr = *data;\n              goto set_data_1;\n            }\n          }\n          if (data[14] != (uint *)0x4) {\n            return 3;\n          }\n          **data = **data | 0x200;\n        }\n        else if (data[14] != (uint *)0x4) {\n          return 3;\n        }\n        return 1;\n      }\n    } while (flag_2 == 0xffffffff);\n    if ((flag_2 == 0) || (value = get_value_from_pointer(), flag_2 < (uint)(value - get_value_from_pointer()))) {\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 3;\n    }\n  } while( true );\n\n}",
            "called": [
                "FUN_0800115c",
                "FUN_08001460",
                "FUN_080014e2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001530",
            "calling": [
                "FUN_08001828"
            ],
            "imported": false,
            "current_name": "process_data_08001530"
        },
        "FUN_08003314": {
            "renaming": {
                "FUN_08003314": "set_param_08003314",
                "param_1": "new_param"
            },
            "code": "void set_param_08003314(void* new_param){\n  *(undefined4*)PTR_DAT_0800331c = new_param;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003314",
            "calling": [
                "FUN_08002ea0"
            ],
            "imported": false,
            "current_name": "set_param_08003314"
        },
        "FUN_08005854": {
            "renaming": {
                "FUN_08005854": "validate_input_and_return_result_08005854",
                "param_1": "input_1",
                "param_2": "input_2",
                "puVar1": "pointer_1",
                "iVar2": "result",
                "puVar3": "pointer_2",
                "piVar4": "pointer_3",
                "uVar5": "result_value",
                "uVar6": "do_nothing_result",
                "local_48": "value_1",
                "local_44": "pointer_4",
                "local_40": "value_2",
                "uStack_3c": "value_3",
                "local_38": "value_4",
                "uStack_34": "value_5",
                "local_30": "shifted_value",
                "local_28": "is_valid_input_result"
            },
            "code": "\n/* WARNING: Could not reconcile some variable overlaps */\n\nundefined8 validate_input_and_return_result_08005854(undefined4 input_1,undefined4 input_2)\n\n{\n  undefined *pointer_1;\n  int result;\n  undefined4 *pointer_2;\n  int *pointer_3;\n  undefined8 result_value;\n  undefined8 do_nothing_result;\n  undefined4 value_1;\n  undefined *pointer_4;\n  undefined4 value_2;\n  undefined4 value_3;\n  undefined4 value_4;\n  undefined4 value_5;\n  undefined8 shifted_value;\n  int is_valid_input_result;\n  \n  result_value = calculateResult_08005c70();\n  pointer_1 = PTR_DAT_080058f8;\n  if (*PTR_DAT_080058f8 == -1) {\n    return result_value;\n  }\n  is_valid_input_result = is_valid_input_08000a04(input_1,input_2,input_1,input_2);\n  if (is_valid_input_result != 0) {\n    return result_value;\n  }\n  do_nothing_result = do_nothing_0800708c(input_1,input_2);\n  result = is_end_of_input_080009f0((int)do_nothing_result,(int)((ulonglong)do_nothing_result >> 0x20),0,DAT_080058ec);\n  if (result == 0) {\n    return result_value;\n  }\n  value_1 = 1;\n  pointer_4 = PTR_DAT_080058f0;\n  value_2 = input_1;\n  value_3 = input_2;\n  value_4 = input_1;\n  value_5 = input_2;\n  shifted_value = shift_left_most_significant_bit_080070a4(PTR_DAT_080058f4);\n  if (*pointer_1 != '\\x02') {\n    result = returnZero_0800709e(&value_1);\n    if (result != 0) goto LAB_080058d0;\n  }\n  pointer_2 = (undefined4 *)get_value_from_pointer_080072ac();\n  *pointer_2 = 0x21;\nLAB_080058d0:\n  if (is_valid_input_result != 0) {\n    pointer_3 = (int *)get_value_from_pointer_080072ac();\n    *pointer_3 = is_valid_input_result;\n  }\n  return shifted_value;\n}\n\n",
            "called": [
                "FUN_08000a04",
                "FUN_0800709e",
                "FUN_0800708c",
                "FUN_080072ac",
                "FUN_08005c70",
                "FUN_080070a4",
                "FUN_080009f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005854",
            "calling": [
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "validate_input_and_return_result_08005854"
        },
        "FUN_08000168": {
            "renaming": {
                "FUN_08000168": "calculate_double_precision_08000168",
                "param_1": "x1",
                "param_2": "x2",
                "param_3": "y1",
                "param_4": "y2",
                "iVar1": "shift1",
                "bVar2": "bit",
                "uVar3": "sum1",
                "uVar4": "x1_bits",
                "uVar5": "sum2",
                "uVar6": "x2_bits",
                "uVar7": "y1_bits",
                "iVar8": "shift2",
                "uVar9": "x1_shifted",
                "uVar10": "sum3",
                "uVar11": "y2_shifted",
                "uVar12": "result",
                "bVar13": "is_negative",
                "bVar14": "cond",
                "bVar15": "borrow"
            },
            "code": "\nulonglong calculate_double_precision_08000168(uint x1,uint x2,uint y1,uint y2)\n\n{\n  int shift1;\n  byte bit;\n  uint sum1;\n  uint x1_bits;\n  uint sum2;\n  uint x2_bits;\n  uint y1_bits;\n  int shift2;\n  uint x1_shifted;\n  uint sum3;\n  uint y2_shifted;\n  uint result;\n  bool is_negative;\n  bool cond;\n  bool borrow;\n  \n  x2_bits = y2 ^ 0x80000000;\n  x1_shifted = x2 << 1;\n  y2 = y2 << 1;\n  is_negative = ((x2 ^ x2_bits) & 0x7fffffff) == 0;\n  cond = is_negative && x1 == y1;\n  if (!is_negative || x1 != y1) {\n    cond = (x1_shifted | x1) == 0;\n  }\n  if (!cond) {\n    cond = (y2 | y1) == 0;\n  }\n  shift2 = (int)x1_shifted >> 0x15;\n  if (!cond) {\n    cond = shift2 == -1;\n  }\n  shift1 = (int)y2 >> 0x15;\n  if (!cond) {\n    cond = shift1 == -1;\n  }\n  if (cond) {\n    if (shift2 == -1 || shift1 == -1) {\n      x1_shifted = x2_bits;\n      y2_shifted = y1;\n      if (shift2 == -1) {\n        x1_shifted = x2;\n        y2_shifted = x1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        y1 = y2_shifted;\n        x2_bits = x1_shifted;\n      }\n      cond = (y2_shifted | x1_shifted << 0xc) == 0;\n      if (cond) {\n        cond = (y1 | x2_bits << 0xc) == 0;\n      }\n      if (cond) {\n        cond = x1_shifted == x2_bits;\n      }\n      if (!cond) {\n        x1_shifted = x1_shifted | 0x80000;\n      }\n      return CONCAT44(x1_shifted,y2_shifted);\n    }\n    if (((x2 ^ x2_bits) & 0x7fffffff) != 0 || x1 != y1) {\n      if ((x1_shifted | x1) == 0) {\n        x1 = y1;\n        x2 = x2_bits;\n      }\n      return CONCAT44(x2,x1);\n    }\n    if (x2 != x2_bits) {\n      return 0;\n    }\n    if (x1_shifted >> 0x15 == 0) {\n      cond = (x1 & 0x80000000) != 0;\n      x2_bits = x2 * 2 + (uint)cond;\n      if (CARRY4(x2,x2) || CARRY4(x2 * 2,(uint)cond)) {\n        x2_bits = x2_bits | 0x80000000;\n      }\n      return CONCAT44(x2_bits,x1 << 1);\n    }\n    if (x1_shifted < 0xffc00000) {\n      return CONCAT44(x2 + 0x100000,x1);\n    }\n    x2 = x2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(x2 | 0x7ff00000) << 0x20;\n  }\n  x1_shifted = x1_shifted >> 0x15;\n  y2 = y2 >> 0x15;\n  y2_shifted = y2 - x1_shifted;\n  cond = y2_shifted != 0;\n  if (y2 < x1_shifted) {\n    y2_shifted = -y2_shifted;\n  }\n  sum3 = x1;\n  y1_bits = x2;\n  if (cond && x1_shifted <= y2) {\n    x1_shifted = x1_shifted + y2_shifted;\n    sum3 = y1;\n    y1_bits = x2_bits;\n    y1 = x1;\n    x2_bits = x2;\n  }\n  if (0x36 < y2_shifted) {\n    return CONCAT44(y1_bits,sum3);\n  }\n  x1_bits = y1_bits & 0xfffff | 0x100000;\n  if ((y1_bits & 0x80000000) != 0) {\n    cond = sum3 != 0;\n    sum3 = -sum3;\n    x1_bits = -x1_bits - (uint)cond;\n  }\n  y1_bits = x2_bits & 0xfffff | 0x100000;\n  if ((x2_bits & 0x80000000) != 0) {\n    cond = y1 != 0;\n    y1 = -y1;\n    y1_bits = -y1_bits - (uint)cond;\n  }\n  if (x1_shifted == y2_shifted) {\n    y1_bits = y1_bits ^ 0x100000;\n    if (x1_shifted == 0) {\n      x1_bits = x1_bits ^ 0x100000;\n      x1_shifted = 1;\n    }\n    else {\n      y2_shifted = y2_shifted - 1;\n    }\n  }\n  x2_bits = -y2_shifted + 0x20;\n  if ((int)y2_shifted < 0x21) {\n    result = y1 << (x2_bits & 0xff);\n    y1 = y1 >> (y2_shifted & 0xff);\n    sum1 = sum3 + y1;\n    sum2 = y1_bits << (x2_bits & 0xff);\n    x2_bits = sum1 + sum2;\n    x1_bits = x1_bits + CARRY4(sum3,y1) + ((int)y1_bits >> (y2_shifted & 0xff)) +\n            (uint)CARRY4(sum1,sum2);\n  }\n  else {\n    result = y1_bits << (-y2_shifted + 0x40 & 0xff);\n    if (y1 != 0) {\n      result = result | 2;\n    }\n    y1_bits = (int)y1_bits >> (y2_shifted - 0x20 & 0xff);\n    x2_bits = sum3 + y1_bits;\n    x1_bits = x1_bits + ((int)y1_bits >> 0x1f) + (uint)CARRY4(sum3,y1_bits);\n  }\n  x2 = x1_bits & 0x80000000;\n  y2_shifted = x1_bits;\n  if ((int)x1_bits < 0) {\n    cond = result == 0;\n    result = -result;\n    y2_shifted = -x2_bits;\n    x2_bits = -(uint)!cond - x2_bits;\n    y2_shifted = -(uint)(cond <= y2_shifted) - x1_bits;\n  }\n  if (0xfffff < y2_shifted) {\n    sum3 = x1_shifted - 1;\n    if (0x1fffff < y2_shifted) {\n      sum3 = y2_shifted & 1;\n      y2_shifted = y2_shifted >> 1;\n      bit = (byte)x2_bits;\n      x2_bits = (uint)(sum3 != 0) << 0x1f | x2_bits >> 1;\n      result = (uint)(bit & 1) << 0x1f | result >> 1;\n      sum3 = x1_shifted;\n      if (0xffbfffff < x1_shifted * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    cond = 0x7fffffff < result;\n    if (result == 0x80000000) {\n      cond = (x2_bits & 1) != 0;\n    }\n    return CONCAT44(y2_shifted + sum3 * 0x100000 + (uint)CARRY4(x2_bits,(uint)cond) | x2,\n                    x2_bits + cond);\n  }\n  is_negative = (result & 0x80000000) != 0;\n  result = result << 1;\n  sum3 = x2_bits * 2;\n  cond = CARRY4(x2_bits,x2_bits);\n  x2_bits = x2_bits * 2 + (uint)is_negative;\n  y2_shifted = y2_shifted * 2 + (uint)(cond || CARRY4(sum3,(uint)is_negative));\n  sum3 = x1_shifted - 2;\n  if ((y2_shifted & 0x100000) != 0) goto LAB_08000278;\n  y1_bits = x2_bits;\n  x1_shifted = y2_shifted;\n  if (y2_shifted == 0) {\n    y1_bits = 0;\n    x1_shifted = x2_bits;\n  }\n  shift2 = count_leading_zeroes(x1_shifted);\n  if (y2_shifted == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  y2_shifted = shift2 - 0xb;\n  borrow = SBORROW4(y2_shifted,0x20);\n  x2_bits = shift2 - 0x2b;\n  cond = (int)x2_bits < 0;\n  is_negative = x2_bits == 0;\n  if ((int)y2_shifted < 0x20) {\n    borrow = SCARRY4(x2_bits,0xc);\n    shift2 = shift2 + -0x1f;\n    cond = shift2 < 0;\n    is_negative = shift2 == 0;\n    x2_bits = y2_shifted;\n    if (!is_negative && cond == borrow) {\n      y1_bits = x1_shifted << (y2_shifted & 0xff);\n      x1_shifted = x1_shifted >> (0xcU - shift2 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_negative || cond != borrow) {\n    result = 0x20 - x2_bits;\n  }\n  x1_shifted = x1_shifted << (x2_bits & 0xff);\n  if (is_negative || cond != borrow) {\n    x1_shifted = x1_shifted | y1_bits >> (result & 0xff);\n  }\n  if (is_negative || cond != borrow) {\n    y1_bits = y1_bits << (x2_bits & 0xff);\n  }\nLAB_080002f0:\n  if ((int)y2_shifted <= (int)sum3) {\n    return CONCAT44(x1_shifted + (sum3 - y2_shifted) * 0x100000 | x2,y1_bits);\n  }\n  x2_bits = ~(sum3 - y2_shifted);\n  if ((int)x2_bits < 0x1f) {\n    shift2 = x2_bits - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(x2_bits - 0x1f,0xc)) {\n      return CONCAT44(x1_bits,y1_bits >> (0x20 - (0xcU - shift2) & 0xff) | x1_shifted << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    x2_bits = x2_bits + 1;\n    return CONCAT44(x2 | x1_shifted >> (x2_bits & 0xff),\n                    y1_bits >> (x2_bits & 0xff) | x1_shifted << (0x20 - x2_bits & 0xff));\n  }\n  return CONCAT44(x1_bits,x1_shifted >> (x2_bits - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000168",
            "calling": [
                "FUN_08006070",
                "FUN_08006c0c",
                "FUN_08006228",
                "FUN_0800411c",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_080070b0"
            ],
            "imported": false,
            "current_name": "calculate_double_precision_08000168"
        },
        "FUN_080072e0": {
            "renaming": {
                "FUN_080072e0": "do_nothing_080072e0"
            },
            "code": "\nvoid do_nothing_080072e0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072e0",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080072e0"
        },
        "FUN_08001014": {
            "renaming": {
                "FUN_08001014": "is_input_empty_08001014",
                "in_ZR": "input_char",
                "concatenate_params_08001004": "concatenate_input_params"
            },
            "code": "bool is_input_empty_08001014(void)\\n{\\n  char input_char;\\n  concatenate_input_params();\\n  return input_char != \"\\0\";\\n}",
            "called": [
                "FUN_08001004"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001014",
            "calling": [
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "is_input_empty_08001014"
        },
        "FUN_080071c0": {
            "renaming": {
                "FUN_080071c0": "calculate_result_080071c0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "shifted_param2",
                "iVar2": "var4",
                "uVar3": "var1",
                "uVar4": "var2",
                "uVar5": "var3",
                "uVar6": "result"
            },
            "code": "unsigned long long calculate_result_080071c0(uint32_t param1, uint32_t param2, int param3, uint32_t param4) {\n    unsigned long long result = ((unsigned long long)param2 << 32) | param1;\n    uint32_t shifted_param2 = (param2 << 1) >> 21;\n    if (shifted_param2 == 0) {\n        if ((param2 & 0x7fffffff | param1) == 0) {\n            return result;\n        }\n        result = calculate_ulonglong_result_080004d0(param1, param2, 0, DAT_08007290);\n        uint32_t var1 = DAT_08007280;\n        uint32_t var2 = DAT_08007284;\n        if (param3 < DAT_08007294) {\n            goto LAB_0800722e;\n        }\n        shifted_param2 = ((unsigned int)(result >> 32) << 1) >> 21 - 54;\n    } else if (shifted_param2 == 2047) {\n        result = calculate_double_precision_0800016c(param1, param2, param1, param2, param4);\n        return result;\n    }\n    uint32_t var3 = (uint32_t)(result >> 32);\n    int var4 = shifted_param2 + param3;\n    if (var4 < 2047) {\n        if (var4 > 0) {\n            result = result & 0xffffffff | (unsigned long long)(var3 & 0x800fffff | var4 * 0x100000) << 32;\n        } else if (var4 + 53 < 0) {\n            if (var3 & 0x80000000) {\n                result = result & 0xffffffff | (unsigned long long)(var3 & 0x800fffff | (var4 + 54) * 0x100000) << 32;\n                uint32_t var1 = 0;\n                uint32_t var2 = DAT_08007298;\n                goto LAB_0800722e;\n            }\n        } else if (param3 < 49969) {\n            result = do_nothing_0800729c(DAT_08007280, DAT_08007284, (int)result, var3);\n            uint32_t var1 = DAT_08007280;\n            uint32_t var2 = DAT_08007284;\n            goto LAB_0800722e;\n        }\n    }\n    result = do_nothing_0800729c(DAT_08007288, DAT_0800728c, (int)result, var3);\n    uint32_t var1 = DAT_08007288;\n    uint32_t var2 = DAT_0800728c;\nLAB_0800722e:\n    result = calculate_ulonglong_result_080004d0((int)result, (int)(result >> 32), var1, var2);\n    return result;\n}",
            "called": [
                "FUN_0800729c",
                "FUN_080004d0",
                "FUN_0800016c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080071c0",
            "calling": [
                "FUN_08006228"
            ],
            "imported": false,
            "current_name": "calculate_result_080071c0"
        },
        "FUN_08001258": {
            "renaming": {
                "FUN_08001258": "do_nothing_08001258"
            },
            "code": "\nvoid do_nothing_08001258(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001258",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08001258"
        },
        "FUN_08005614": {
            "renaming": {
                "FUN_08005614": "find_character_08005614",
                "param_1": "string",
                "param_2": "target",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "current_char"
            },
            "code": "char* find_character_08005614(char* string, char target, int length) {\n    char* current_char = string;\n    while (current_char != string + length) {\n        if (*current_char == target) {\n            return current_char;\n        }\n        current_char++;\n    }\n    return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005614",
            "calling": [
                "FUN_080053d4",
                "FUN_080050fc"
            ],
            "imported": false,
            "current_name": "find_character_08005614"
        },
        "FUN_08000724": {
            "renaming": {
                "FUN_08000724": "calculate_result_08000724",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "unaff_r5": "temp10",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "bVar14": "bool1",
                "bVar15": "bool2",
                "bVar16": "bool3",
                "uVar17": "result"
            },
            "code": "\nulonglong calculate_result_08000724(undefined4 param1,uint param2,uint param3,uint param4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool bool1;\n  bool bool2;\n  bool bool3;\n  ulonglong result;\n  \n  result = CONCAT44(param2,param1);\n  temp14 = 0x7ff;\n  temp7 = param2 >> 0x14 & 0x7ff;\n  bool1 = temp7 == 0;\n  if (!bool1) {\n    temp10 = param4 >> 0x14 & 0x7ff;\n    bool1 = temp10 == 0;\n  }\n  if (!bool1) {\n    bool1 = temp7 == 0x7ff;\n  }\n  if (!bool1) {\n    bool1 = temp10 == 0x7ff;\n  }\n  if (bool1) {\n    result = calculate_result_08000724_08000892();\n  }\n  temp9 = (uint)(result >> 0x20);\n  temp12 = (uint)result;\n  temp8 = temp7 - temp10;\n  if ((param3 | param4 << 0xc) == 0) {\n    temp7 = (temp9 ^ param4) & 0x80000000 | temp9 & 0xfffff;\n    bool3 = SCARRY4(temp8,temp14 >> 1);\n    temp9 = temp8 + (temp14 >> 1);\n    bool1 = (int)temp9 < 0;\n    bool2 = temp9 == 0;\n    if (!bool2 && bool1 == bool3) {\n      bool3 = SBORROW4(temp14,temp9);\n      bool1 = (int)(temp14 - temp9) < 0;\n      bool2 = temp14 == temp9;\n    }\n    if (!bool2 && bool1 == bool3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!bool2 && bool1 == bool3) {\n      return result & 0xffffffff | (ulonglong)temp7 << 0x20;\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    bool2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    bool1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (param4 << 0xc) >> 4 | 0x10000000 | param3 >> 0x18;\n    temp14 = param3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ param4) & 0x80000000;\n    bool1 = temp3 <= temp11;\n    if (temp11 == temp3) {\n      bool1 = temp14 <= temp12;\n    }\n    temp8 = temp8 + (uint)bool1;\n    temp9 = temp8 + 0x3fd;\n    if (bool1 == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((param3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      bool1 = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)bool1) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!bool1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      bool2 = temp1 <= temp13;\n      bool1 = temp11 - temp5 < (uint)bool2;\n      temp14 = temp11;\n      if (temp5 < temp11 || bool1) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!bool2;\n      }\n      if (temp5 < temp11 || bool1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      bool2 = temp2 <= temp13;\n      bool1 = temp14 - temp11 < (uint)bool2;\n      temp5 = temp14;\n      if (temp11 < temp14 || bool1) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!bool2;\n      }\n      if (temp11 < temp14 || bool1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      bool2 = temp1 <= temp13;\n      bool1 = temp5 - temp6 < (uint)bool2;\n      temp11 = temp5;\n      if (temp6 < temp5 || bool1) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!bool2;\n      }\n      if (temp6 < temp5 || bool1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_08000842;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_08000842:\n    bool3 = 0xfc < temp9;\n    bool2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    bool1 = temp4 == 0;\n    temp3 = temp4;\n    if (bool3 && !bool1) {\n      bool3 = 0x6ff < temp4;\n      bool2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      bool1 = temp4 == 0x700;\n    }\n    if (!bool3 || bool1) {\n      bool1 = temp6 <= temp11;\n      if (temp11 == temp6) {\n        bool1 = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        bool1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)bool1),temp12 + bool1);\n    }\n  }\n  if (!bool1 && (int)temp3 < 0 == bool2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bool3 = SCARRY4(temp9,0x36);\n  bool1 = (int)(temp9 + 0x36) < 0;\n  bool2 = temp9 == 0xffffffca;\n  if (bool2 || bool1 != bool3) {\n    temp12 = 0;\n  }\n  if (bool2 || bool1 != bool3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (bool2 || bool1 != bool3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "called": [
                "FUN_08000892"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000724",
            "calling": [
                "FUN_08006070",
                "FUN_08006c0c",
                "FUN_08006228",
                "FUN_08005900",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08003330",
                "FUN_08005bc8"
            ],
            "imported": false,
            "current_name": "calculate_result_08000724"
        },
        "FUN_080070a4": {
            "renaming": {
                "FUN_080070a4": "shift_left_most_significant_bit_080070a4",
                "DAT_080070ac": "*data"
            },
            "code": "unsigned long long shift_left_most_significant_bit_080070a4(unsigned int DAT_080070ac) {\n    return ((unsigned long long)(DAT_080070ac) << 0x20);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080070a4",
            "calling": [
                "FUN_08006228",
                "FUN_08005854"
            ],
            "imported": false,
            "current_name": "shift_left_most_significant_bit_080070a4"
        },
        "FUN_0800407c": {
            "renaming": {
                "FUN_0800407c": "check_and_process_data_0800407c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data1",
                "param_4": "data2",
                "iVar1": "result",
                "local_14": "buffer",
                "FUN_08001938": "function1"
            },
            "code": "int check_and_process_data_0800407c(int input1, int input2, int data1, int data2) {\n  int result;\n  char buffer[8];\n  buffer[0] = 0;\n  result = function1(PTR_DAT_080040b4, input1, input2, 1, buffer, 1, 200);\n  if (result != 0) {\n    process_data_and_strings_08004490(data1, data2);\n  }\n  return buffer[0];\n}",
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800407c",
            "calling": [
                "FUN_08002cb0",
                "FUN_080040e8",
                "FUN_08002ad0",
                "FUN_08002d88"
            ],
            "imported": false,
            "current_name": "check_and_process_data_0800407c"
        },
        "FUN_08001938": {
            "renaming": {
                "FUN_08001938": "FUNC_08001938"
            },
            "code": "\nundefined4\nFUNC_08001938(uint **param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n            undefined *param_5,ushort param_6,uint param_7)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int iVar3;\n  uint *puVar4;\n  uint uVar5;\n  undefined *puVar6;\n  bool bVar7;\n  \n  if (*(char *)((int)param_1 + 0x35) != ' ') {\n    return 2;\n  }\n  if (param_5 == (undefined *)0x0) {\n    return 1;\n  }\n  if (param_6 == 0) {\n    return 1;\n  }\n  iVar2 = get_value_from_pointer_0800115c();\n  while (puVar4 = *param_1, (~puVar4[6] & 2) == 0) {\n    iVar3 = get_value_from_pointer_0800115c();\n    if (10000 < (uint)(iVar3 - iVar2)) {\n      *(undefined *)(param_1 + 0xd) = 0;\n      *(undefined *)((int)param_1 + 0x35) = 0x20;\n      return 2;\n    }\n  }\n  if (*(char *)(param_1 + 0xd) == '\\x01') {\n    return 2;\n  }\n  uVar5 = *puVar4;\n  *(undefined *)(param_1 + 0xd) = 1;\n  *puVar4 = uVar5 & 0xfffff7ff;\n  *(undefined *)((int)param_1 + 0x35) = 0x22;\n  *(undefined *)((int)param_1 + 0x36) = 0x40;\n  param_1[0xe] = (uint *)0x0;\n  iVar2 = update_and_check_value_080015e8(param_1,param_2,param_3,param_4,param_7);\n  if (iVar2 != 0) {\n    *(undefined *)(param_1 + 0xd) = 0;\n    if (param_1[0xe] == (uint *)0x4) {\n      return 1;\n    }\n    return 3;\n  }\n  puVar4 = *param_1;\n  uVar5 = *puVar4;\n  if (param_6 == 1) {\n    *puVar4 = uVar5 & 0xfffffbff;\n    disableIRQinterrupts();\n    **param_1 = **param_1 | 0x200;\n    enableIRQinterrupts();\n    iVar2 = check_value_and_range_080016f4(param_1,param_7);\n    if (iVar2 == 0) {\n      *param_5 = (char)(*param_1)[4];\nLAB_08001ab8:\n      *(undefined *)((int)param_1 + 0x35) = 0x20;\n      *(undefined *)((int)param_1 + 0x36) = 0;\n      *(undefined *)(param_1 + 0xd) = 0;\n      return 0;\n    }\nLAB_08001a18:\n    if (param_1[0xe] != (uint *)0x20) {\n      return 1;\n    }\n    return 3;\n  }\n  if (param_6 == 2) {\n    *puVar4 = uVar5 | 0x800;\n    disableIRQinterrupts();\n    **param_1 = **param_1 & 0xfffffbff;\n    enableIRQinterrupts();\n  }\n  else {\n    *puVar4 = uVar5 | 0x400;\n    while (3 < param_6) {\n      iVar2 = check_value_and_range_080016f4(param_1,param_7);\n      if (iVar2 != 0) goto LAB_08001a18;\n      *param_5 = (char)(*param_1)[4];\n      puVar4 = *param_1;\n      bVar7 = (int)(puVar4[5] << 0x1d) < 0;\n      if (bVar7) {\n        puVar4 = (uint *)puVar4[4];\n        puVar6 = param_5 + 2;\n        param_6 = param_6 - 2;\n      }\n      else {\n        puVar6 = param_5 + 1;\n        param_6 = param_6 - 1;\n      }\n      puVar1 = param_5 + 1;\n      param_5 = puVar6;\n      if (bVar7) {\n        *puVar1 = (char)puVar4;\n      }\n    }\n    if (param_6 != 2) {\n      iVar2 = get_value_from_pointer_0800115c();\n      do {\n        puVar4 = *param_1;\n        do {\n          if ((int)(puVar4[5] << 0x1d) < 0) {\n            *puVar4 = *puVar4 & 0xfffffbff;\n            disableIRQinterrupts();\n            *param_5 = (char)(*param_1)[4];\n            iVar2 = get_value_from_pointer_0800115c();\n            goto LAB_08001b3a;\n          }\n        } while (param_7 == 0xffffffff);\n      } while ((param_7 != 0) && (iVar3 = get_value_from_pointer_0800115c(), (uint)(iVar3 - iVar2) <= param_7));\n      goto LAB_08001afa;\n    }\n  }\n  iVar2 = get_value_from_pointer_0800115c();\n  do {\n    do {\n      if ((int)((*param_1)[5] << 0x1d) < 0) {\n        disableIRQinterrupts();\n        puVar4 = *param_1;\n        *puVar4 = *puVar4 | 0x200;\n        *param_5 = (char)puVar4[4];\n        enableIRQinterrupts();\n        param_5[1] = (char)(*param_1)[4];\n        goto LAB_08001ab8;\n      }\n    } while (param_7 == 0xffffffff);\n  } while ((param_7 != 0) && (iVar3 = get_value_from_pointer_0800115c(), (uint)(iVar3 - iVar2) <= param_7));\nLAB_08001afa:\n  *(undefined *)((int)param_1 + 0x35) = 0x20;\n  *(undefined *)(param_1 + 0xd) = 0;\n  return 3;\nLAB_08001b3a:\n  do {\n    puVar4 = *param_1;\n    do {\n      if ((int)(puVar4[5] << 0x1d) < 0) {\n        *puVar4 = *puVar4 | 0x200;\n        param_5[1] = (char)puVar4[4];\n        enableIRQinterrupts();\n        param_5[2] = (char)(*param_1)[4];\n        goto LAB_08001ab8;\n      }\n    } while (param_7 == 0xffffffff);\n  } while ((param_7 != 0) && (iVar3 = get_value_from_pointer_0800115c(), (uint)(iVar3 - iVar2) <= param_7));\n  goto LAB_08001afa;\n}\n\n",
            "called": [
                "FUN_080016f4",
                "FUN_0800115c",
                "FUN_080015e8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001938",
            "calling": [
                "FUN_080040b8",
                "FUN_0800407c"
            ],
            "imported": false,
            "current_name": "FUNC_08001938"
        },
        "FUN_0800411c": {
            "renaming": {
                "FUN_0800411c": "process_data_0800411c",
                "puVar1": "ptr",
                "bVar2": "byte_val",
                "lVar3": "long_val",
                "uVar4": "uint_val_1",
                "puVar5": "ptr_1",
                "puVar6": "ptr_2",
                "puVar7": "ptr_3",
                "uVar8": "uint_val_2",
                "uVar9": "uint_val_3",
                "uVar10": "uint_val_4",
                "uVar11": "uint_val_5",
                "iVar12": "int_val",
                "uVar13": "uint_val_6",
                "uVar14": "uint_val_7",
                "uVar15": "uint_val_8",
                "uVar16": "uint_val_9",
                "uVar17": "uint_val_10",
                "puVar18": "ptr_4",
                "unaff_r4": "unaff_var",
                "iVar19": "int_val_2",
                "iVar20": "int_val_3",
                "bVar21": "bool_val",
                "uVar22": "uint64_val"
            },
            "code": "\nvoid process_data_0800411c(void)\n\n{\n  undefined4 *ptr;\n  byte byte_val;\n  longlong long_val;\n  uint uint_val_1;\n  undefined *ptr_1;\n  undefined *ptr_2;\n  undefined *ptr_3;\n  uint uint_val_2;\n  uint uint_val_3;\n  undefined4 uint_val_4;\n  undefined4 uint_val_5;\n  int int_val;\n  undefined4 uint_val_6;\n  uint uint_val_7;\n  uint uint_val_8;\n  uint uint_val_9;\n  uint uint_val_10;\n  undefined4 *ptr_4;\n  undefined4 unaff_var;\n  int int_val_2;\n  int int_val_3;\n  bool bool_val;\n  undefined8 uint64_val;\n  \n  int_val = thunk_get_value_from_pointer_0800115c();\n  ptr_1 = PTR_DAT_08004188;\n  if (1 < (uint)(int_val - *(int *)PTR_DAT_08004188)) {\n    uint_val_6 = thunk_get_value_from_pointer_0800115c();\n    *(undefined4 *)ptr_1 = uint_val_6;\n    process_sensor_data_08002f28();\n  }\n  int_val = thunk_get_value_from_pointer_0800115c();\n  ptr_1 = PTR_DAT_0800418c;\n  if (2 < (uint)(int_val - *(int *)PTR_DAT_0800418c)) {\n    uint_val_6 = thunk_get_value_from_pointer_0800115c();\n    *(undefined4 *)ptr_1 = uint_val_6;\n    calculate_and_update_data_08004a84();\n  }\n  int_val = thunk_get_value_from_pointer_0800115c();\n  ptr_1 = PTR_DAT_08004190;\n  if (3 < (uint)(int_val - *(int *)PTR_DAT_08004190)) {\n    uint_val_6 = thunk_get_value_from_pointer_0800115c();\n    *(undefined4 *)ptr_1 = uint_val_6;\n    process_and_execute_instructions_08004348();\n    process_string_and_data_08004384();\n    process_data_0800411c_and_string_080043f0();\n    process_data_0800411c_08004410();\n    process_data_0800411c_08004434();\n    process_data_0800411c_and_strings_080043bc();\n    process_and_send_data_08004458();\n  }\n  ptr_2 = PTR_DAT_08003254;\n  ptr_1 = PTR_DAT_08003250;\n  if ((*PTR_DAT_08003250 != '\\0') && (*PTR_DAT_08003254 != '\\0')) {\n    int_val_3 = *(int *)PTR_DAT_0800325c + (uint)*(ushort *)(PTR_DAT_08003258 + 10) * -0x100;\n    uint_val_7 = (uint)((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 0xc) * (longlong)int_val_3) >>\n             0x17 | (int)((ulonglong)\n                          ((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 0xc) *\n                          (longlong)int_val_3) >> 0x20) << 9;\n    uint_val_8 = (uint)((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 8) * (longlong)int_val_3 >> 7);\n    uint_val_9 = uint_val_8 + (uint)*(ushort *)(PTR_DAT_08003258 + 4) * 0x10000;\n    uint_val_2 = (uint)((ulonglong)\n                   ((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 6) * (longlong)int_val_3) >> 8)\n    ;\n    int_val = uint_val_7 + 2000;\n    uint_val_3 = uint_val_2 + (uint)*(ushort *)(PTR_DAT_08003258 + 2) * 0x8000;\n    bool_val = (int)uint_val_7 < 0;\n    if (1999 < int_val) {\n      uint_val_7 = 0;\n    }\n    uint_val_1 = uint_val_7;\n    if (bool_val != SBORROW4(int_val,2000)) {\n      int_val_2 = uint_val_7 * uint_val_7 * 5;\n      uint_val_7 = int_val_2 >> 2;\n      uint_val_1 = int_val_2 >> 1;\n    }\n    uint_val_10 = uint_val_9 - uint_val_1;\n    long_val = (ulonglong)(uint_val_3 - uint_val_7) * (ulonglong)*(uint *)PTR_DAT_08003260;\n    int_val_2 = *(uint *)PTR_DAT_08003260 *\n             ((((int)((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 6) * (longlong)int_val_3 >>\n                     0x28) + (uint)CARRY4(uint_val_2,(uint)*(ushort *)(PTR_DAT_08003258 + 2) * 0x8000)) -\n              ((int)uint_val_7 >> 0x1f)) - (uint)(uint_val_3 < uint_val_7)) + (int)((ulonglong)long_val >> 0x20);\n    uint_val_2 = (uint)long_val >> 0x15 | int_val_2 * 0x800;\n    uint_val_6 = calculate_hash_08000c44(uint_val_2 - uint_val_10 >> 0xf |\n                          (((int_val_2 >> 0x15) -\n                           ((((int)((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 8) *\n                                    (longlong)int_val_3 >> 0x27) +\n                             (uint)CARRY4(uint_val_8,(uint)*(ushort *)(PTR_DAT_08003258 + 4) * 0x10000))\n                            - ((int)uint_val_1 >> 0x1f)) - (uint)(uint_val_9 < uint_val_1))) -\n                          (uint)(uint_val_2 < uint_val_10)) * 0x20000);\n    uint_val_4 = calculate_float_value_08000e54(uint_val_6,DAT_08003264);\n    *(undefined4 *)PTR_DAT_08003268 = uint_val_4;\n    uint_val_6 = calculate_hash_08000c44(int_val);\n    uint_val_5 = calculate_float_value_08000e54(uint_val_6,DAT_08003264);\n    uint_val_6 = DAT_08003270;\n    *(undefined4 *)PTR_DAT_0800326c = uint_val_5;\n    calculate_float_value_08000e54(uint_val_4,uint_val_6);\n    uint64_val = calculate_hash_08000428();\n    uint64_val = process_input_08005900((int)uint64_val,(int)((ulonglong)uint64_val >> 0x20),DAT_08003240,DAT_08003244);\n    uint64_val = calculate_double_precision_08000168(0,DAT_08003274,(int)uint64_val,(int)((ulonglong)uint64_val >> 0x20));\n    calculate_ulonglong_result_080004d0((int)uint64_val,(int)((ulonglong)uint64_val >> 0x20),DAT_08003248,DAT_0800324c);\n    uint_val_6 = calculate_float_value_08000a30();\n    ptr_3 = PTR_DAT_08003278;\n    *(undefined4 *)PTR_DAT_0800327c = uint_val_6;\n    uint_val_4 = 0;\n    ptr_4 = (undefined4 *)ptr_3;\n    do {\n      ptr = ptr_4 + 1;\n      *ptr_4 = *ptr;\n      uint_val_4 = calculate_float_08000adc(uint_val_4);\n      ptr_4 = ptr;\n    } while ((undefined4 *)(ptr_3 + 0x4c) != ptr);\n    *(undefined4 *)(ptr_3 + 0x4c) = uint_val_6;\n    uint_val_6 = calculate_float_08000adc(uint_val_4,uint_val_6);\n    uint_val_6 = calculate_float_value_08000e54(uint_val_6,DAT_08003280);\n    *(undefined4 *)PTR_DAT_08003284 = uint_val_6;\n    int_val = convert_param_to_int_08001078();\n    ptr_3 = PTR_DAT_0800328c;\n    *(int *)PTR_DAT_08003288 = int_val * 100;\n    byte_val = *ptr_3;\n    *ptr_1 = 0;\n    *ptr_2 = 0;\n    process_i2c_data_0800403c(0xee,byte_val + 0x50,1);\n    uint_val_6 = thunk_get_value_from_pointer_0800115c();\n    *(undefined4 *)PTR_DAT_08003290 = uint_val_6;\n  }\n  int_val = thunk_get_value_from_pointer_0800115c();\n  ptr_2 = PTR_DAT_08003294;\n  if (((10 < (uint)(int_val - *(int *)PTR_DAT_08003290)) && (*ptr_1 == '\\0')) &&\n     (*PTR_DAT_08003254 == '\\0')) {\n    uint_val_6 = process_sensor_data_08003034();\n    ptr_3 = PTR_DAT_0800325c;\n    *ptr_1 = 1;\n    *(undefined4 *)ptr_3 = uint_val_6;\n    process_i2c_data_0800403c(0xee,(byte)*PTR_DAT_0800328c + 0x40,1,0,unaff_var);\n    uint_val_6 = thunk_get_value_from_pointer_0800115c();\n    *(undefined4 *)ptr_2 = uint_val_6;\n  }\n  int_val = thunk_get_value_from_pointer_0800115c();\n  ptr_3 = PTR_DAT_08003254;\n  if (((10 < (uint)(int_val - *(int *)ptr_2)) && (*ptr_1 != '\\0')) && (*PTR_DAT_08003254 == '\\0'))\n  {\n    uint_val_6 = process_sensor_data_08003034();\n    *(undefined4 *)PTR_DAT_08003260 = uint_val_6;\n    *ptr_3 = 1;\n  }\n  return;\n}\n\n",
            "called": [
                "thunk_FUN_0800115c",
                "FUN_08004434",
                "FUN_08003034",
                "FUN_08000adc",
                "FUN_080043bc",
                "FUN_08001078",
                "FUN_08000c44",
                "FUN_08004384",
                "FUN_08000a30",
                "FUN_0800403c",
                "FUN_08000168",
                "FUN_08004458",
                "FUN_080043f0",
                "FUN_080004d0",
                "FUN_08005900",
                "FUN_08004a84",
                "FUN_08004410",
                "FUN_08000e54",
                "FUN_08000428",
                "FUN_08004348",
                "FUN_08002f28"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800411c",
            "calling": [
                "FUN_080041ae"
            ],
            "imported": false,
            "current_name": "process_data_0800411c"
        },
        "FUN_080022d0": {
            "renaming": {
                "FUN_080022d0": "update_values_080022d0",
                "param_1": "pointer_to_values",
                "param_2": "array_of_values",
                "mask1": "bit_mask1",
                "mask2": "bit_mask2",
                "mask3": "bit_mask3",
                "mask4": "bit_mask4",
                "value1": "updated_value1",
                "value2": "updated_value2",
                "value3": "updated_value3",
                "value4": "updated_value4"
            },
            "code": "void update_values_080022d0(int param_1, uint *param_2)\n{\n    uint mask1 = 0xfffffeff;\n    uint mask2 = 0xfffffdff;\n    uint mask3 = 0xfffff7ff;\n    uint mask4 = 0xfffffbff;\n    uint value1 = *(uint *)(param_1 + 0x20) & mask1;\n    uint value2 = *(uint *)(param_1 + 4);\n    uint value3 = *param_2;\n    uint value4 = param_2[2] << 8;\n    if (param_1 == PTR_DAT_08002320) {\n        value4 = (value4 & mask3) | (param_2[3] << 8);\n        value2 = (value2 & 0xffffcfff) | ((param_2[5] | param_2[6]) << 4);\n        value1 = (value1 & mask2) | value4;\n    }\n    *(uint *)(param_1 + 4) = value2;\n    *(uint *)(param_1 + 0x1c) = (*(uint *)(param_1 + 0x1c) & 0xffffff8c) | value3;\n    *(uint *)(param_1 + 0x3c) = param_2[1];\n    *(uint *)(param_1 + 0x20) = value1;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080022d0",
            "calling": [
                "FUN_0800245c"
            ],
            "imported": false,
            "current_name": "update_values_080022d0"
        },
        "FUN_080010c4": {
            "renaming": {
                "FUN_080010c4": "decode_unsigned_integer_080010c4",
                "param_1": "encoded_integer",
                "uVar1": "shift_amount",
                "decoded_integer": "decoded_integer"
            },
            "code": "uint decode_unsigned_integer_080010c4(uint encoded_integer) {\n  uint decoded_integer;\n\n  if (((encoded_integer & 0x80000000) != 0) || (encoded_integer << 1 < 0x7f000000)) {\n    return 0;\n  }\n  uint shift_amount = 0x1F - ((encoded_integer << 1) >> 0x18);\n  if (shift_amount >= 0) {\n    decoded_integer = (encoded_integer << 8 | 0x80000000) >> (shift_amount & 0xff);\n    return decoded_integer;\n  }\n  if ((shift_amount == 0xFFFFFF9F) && ((encoded_integer & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080010c4",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "decode_unsigned_integer_080010c4"
        },
        "FUN_080040b8": {
            "renaming": {
                "FUN_080040b8": "process_data_and_strings_if_successful_080040b8",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "param_5": "fifth_param",
                "param_6": "sixth_param",
                "iVar1": "result"
            },
            "code": "void process_data_and_strings_if_successful_080040b8(int first_param, int second_param, int third_param, int fourth_param, int fifth_param, int sixth_param)\n{\n    int result = call_function_with_params(PTR_DAT_080040e4, first_param, second_param, 1, third_param, fourth_param, 200, fourth_param);\n    if (result != 0) {\n        process_data_and_strings_08004490(fifth_param, sixth_param);\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040b8",
            "calling": [
                "FUN_08003034"
            ],
            "imported": false,
            "current_name": "process_data_and_strings_if_successful_080040b8"
        },
        "FUN_0800245c": {
            "renaming": {
                "FUN_0800245c": "update_data_0800245c",
                "param_1": "parameters",
                "param_2": "arg2",
                "param_3": "arg3",
                "extraout_r1": "temp1",
                "extraout_r1_00": "temp2",
                "extraout_r1_01": "temp3",
                "extraout_r1_02": "temp4",
                "iVar1": "temp_value",
                "iVar3": "params",
                "uVar2": "updated_value"
            },
            "code": "void update_data_0800245c(int *parameters, undefined4 arg2, undefined4 arg3) {\n  int extraout_r1;\n  int extraout_r1_00;\n  int extraout_r1_01;\n  int extraout_r1_02;\n  int params = *parameters;\n  uint updated_value;\n  int temp_value;\n  if (*(char *)(params + 0xe) == '\\x01') {\n    return;\n  }\n  *(undefined *)((int)parameters + 0x39) = 2;\n  *(undefined *)(params + 0xe) = 1;\n  switch(arg3) {\n    case 0:\n      update_params(params);\n      updated_value = *(uint *)(extraout_r1 + 0x10);\n      *(uint *)(params + 0x18) = (*(uint *)(params + 0x18) | 8) & 0xfffffffb | updated_value;\n      break;\n    default:\n      goto case_1;\n    case 4:\n      set_values(params);\n      temp_value = *(int *)(extraout_r1_00 + 0x10);\n      updated_value = (*(uint *)(params + 0x18) | 0x800) & 0xfffffbff | temp_value << 8;\n      break;\n    case 8:\n      update_values(params);\n      updated_value = *(uint *)(extraout_r1_01 + 0x10);\n      *(uint *)(params + 0x1c) = (*(uint *)(params + 0x1c) | 8) & 0xfffffffb | updated_value;\n      goto case_c;\n    case 0xc:\n      update_data_0800245c_structure(params);\n      temp_value = *(int *)(extraout_r1_02 + 0x10);\n      updated_value = (*(uint *)(params + 0x1c) | 0x800) & 0xfffffbff | temp_value << 8;\n      *(uint *)(params + 0x1c) = updated_value;\n    case_c:\n      break;\n  }\n  *(uint *)(params + 0x18) = updated_value;\n  case_1:\n  *(undefined *)((int)parameters + 0x39) = 1;\n  *(undefined *)(params + 0xe) = 0;\n  return;\n}",
            "called": [
                "FUN_08002324",
                "FUN_080022d0",
                "FUN_08002280",
                "FUN_08002404"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800245c",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "update_data_0800245c"
        },
        "FUN_08004490": {
            "renaming": {
                "FUN_08004490": "process_data_and_strings_08004490",
                "param_1": "data",
                "param_2": "str",
                "puVar3": "errorMsg",
                "puVar2": "lineMsg",
                "uVar1": "mask"
            },
            "code": "void process_data_and_strings_08004490(undefined4 data, undefined4 str) {\n  undefined4 mask = DAT_08004508;\n  undefined *errorMsg = PTR_s_Error_with_08004510;\n  undefined *lineMsg = PTR_s__at_line__0800450c;\n  set_value_at_offset_08001424(mask, 0x4000, 1);\n  set_value_at_offset_08001424(mask, 0x8000, 0);\n  set_value_at_offset_08001424(mask, 0x2000, 0);\n  do {\n    xor_param_with_offset_0800142e(mask, 0x4000);\n    xor_param_with_offset_0800142e(mask, 0x8000);\n    xor_param_with_offset_0800142e(mask, 0x2000);\n    process_string_data_08004c8c(errorMsg);\n    process_string_data_08004c8c(data);\n    process_string_data_08004c8c(lineMsg);\n    reverse_copy_and_process_data_08004cac(str);\n    process_data_08004c18(10);\n    thunk_do_nothing_08001168(500);\n  } while(true);\n}",
            "called": [
                "FUN_08001424",
                "FUN_0800142e",
                "thunk_FUN_08001168",
                "FUN_08004c18",
                "FUN_08004cac",
                "FUN_08004c8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004490",
            "calling": [
                "FUN_0800403c",
                "FUN_080040b8",
                "FUN_0800458c",
                "FUN_0800407c",
                "FUN_08004514"
            ],
            "imported": false,
            "current_name": "process_data_and_strings_08004490"
        },
        "FUN_08000e54": {
            "renaming": {
                "FUN_08000e54": "calculate_float_value_08000e54",
                "param_1": "float_bits_1",
                "param_2": "float_bits_2",
                "param_3": "unused_param",
                "param_4": "exponent",
                "uVar1": "mantissa_bit",
                "uVar2": "exponent_bits_1",
                "uVar4": "exponent_difference",
                "uVar6": "float_bits",
                "iVar3": "exponent_difference_signed",
                "iVar5": "temp_var",
                "bVar7": "bool_1",
                "bVar8": "bool_2",
                "bVar9": "bool_3"
            },
            "code": "\nuint calculate_float_value_08000e54(uint float_bits_1,uint float_bits_2,undefined4 unused_param,uint exponent)\n\n{\n  uint mantissa_bit;\n  uint exponent_bits_1;\n  int exponent_difference_signed;\n  uint exponent_difference;\n  int temp_var;\n  uint float_bits;\n  bool bool_1;\n  bool bool_2;\n  bool bool_3;\n  \n  exponent_bits_1 = float_bits_1 >> 0x17 & 0xff;\n  bool_1 = exponent_bits_1 == 0;\n  if (!bool_1) {\n    exponent = float_bits_2 >> 0x17 & 0xff;\n    bool_1 = exponent == 0;\n  }\n  if (!bool_1) {\n    bool_1 = exponent_bits_1 == 0xff;\n  }\n  if (!bool_1) {\n    bool_1 = exponent == 0xff;\n  }\n  if (bool_1) {\n    exponent = float_bits_2 >> 0x17 & 0xff;\n    float_bits = float_bits_1;\n    if (exponent_bits_1 == 0xff) {\n      if (((float_bits_1 & 0x7fffff) != 0) || (float_bits = float_bits_2, exponent == 0xff)) {\nLAB_08000e4a:\n        return float_bits | 0x7fc00000;\n      }\n    }\n    else {\n      if (exponent == 0xff) {\n        float_bits = float_bits_2;\n        if ((float_bits_2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (float_bits_1 ^ float_bits_2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      bool_1 = (float_bits_1 & 0x7fffffff) == 0;\n      if (!bool_1) {\n        bool_1 = (float_bits_2 & 0x7fffffff) == 0;\n      }\n      if (!bool_1) {\n        bool_1 = exponent_bits_1 == 0;\n        float_bits = float_bits_1 & 0x80000000;\n        while( true ) {\n          if (bool_1) {\n            float_bits_1 = float_bits_1 << 1;\n            bool_1 = (float_bits_1 & 0x800000) == 0;\n          }\n          if (!bool_1) break;\n          exponent_bits_1 = exponent_bits_1 - 1;\n        }\n        float_bits_1 = float_bits_1 | float_bits;\n        bool_1 = exponent == 0;\n        float_bits = float_bits_2 & 0x80000000;\n        while( true ) {\n          if (bool_1) {\n            float_bits_2 = float_bits_2 << 1;\n            bool_1 = (float_bits_2 & 0x800000) == 0;\n          }\n          if (!bool_1) break;\n          exponent = exponent - 1;\n        }\n        float_bits_2 = float_bits_2 | float_bits;\n        goto LAB_08000e6c;\n      }\n      if ((float_bits_1 & 0x7fffffff) == 0) {\n        if ((float_bits_2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    float_bits_1 = float_bits_1 ^ float_bits_2;\n  }\n  else {\nLAB_08000e6c:\n    exponent_difference_signed = exponent_bits_1 - exponent;\n    if (float_bits_2 << 9 == 0) {\n      float_bits_1 = (float_bits_1 ^ float_bits_2) & 0x80000000 | float_bits_1 & 0x7fffff;\n      bool_3 = SCARRY4(exponent_difference_signed,0x7f);\n      temp_var = exponent_difference_signed + 0x7f;\n      bool_1 = temp_var < 0;\n      bool_2 = temp_var == 0;\n      if (!bool_2 && bool_1 == bool_3) {\n        bool_3 = SBORROW4(0xff,temp_var);\n        bool_1 = 0xff - temp_var < 0;\n        bool_2 = temp_var == 0xff;\n      }\n      if (!bool_2 && bool_1 == bool_3) {\n        float_bits_1 = float_bits_1 | temp_var * 0x800000;\n      }\n      if (!bool_2 && bool_1 == bool_3) {\n        return float_bits_1;\n      }\n      float_bits_1 = float_bits_1 | 0x800000;\n      exponent_bits_1 = 0;\n      bool_2 = SBORROW4(temp_var,1);\n      exponent_difference = exponent_difference_signed + 0x7e;\n      bool_1 = exponent_difference == 0;\n      float_bits = exponent_difference;\n    }\n    else {\n      mantissa_bit = (float_bits_2 << 9) >> 4 | 0x10000000;\n      exponent_bits_1 = (float_bits_1 << 9) >> 4 | 0x10000000;\n      float_bits_1 = (float_bits_1 ^ float_bits_2) & 0x80000000;\n      bool_1 = mantissa_bit <= exponent_bits_1;\n      if (!bool_1) {\n        exponent_bits_1 = exponent_bits_1 << 1;\n      }\n      exponent_difference = exponent_difference_signed + 0x7d + (uint)bool_1;\n      float_bits = 0x800000;\n      do {\n        if (mantissa_bit <= exponent_bits_1) {\n          exponent_bits_1 = exponent_bits_1 - mantissa_bit;\n          float_bits_1 = float_bits_1 | float_bits;\n        }\n        bool_1 = mantissa_bit >> 1 <= exponent_bits_1;\n        if (bool_1) {\n          exponent_bits_1 = exponent_bits_1 - (mantissa_bit >> 1);\n        }\n        if (bool_1) {\n          float_bits_1 = float_bits_1 | float_bits >> 1;\n        }\n        bool_1 = mantissa_bit >> 2 <= exponent_bits_1;\n        if (bool_1) {\n          exponent_bits_1 = exponent_bits_1 - (mantissa_bit >> 2);\n        }\n        if (bool_1) {\n          float_bits_1 = float_bits_1 | float_bits >> 2;\n        }\n        bool_1 = mantissa_bit >> 3 <= exponent_bits_1;\n        if (bool_1) {\n          exponent_bits_1 = exponent_bits_1 - (mantissa_bit >> 3);\n        }\n        if (bool_1) {\n          float_bits_1 = float_bits_1 | float_bits >> 3;\n        }\n        exponent_bits_1 = exponent_bits_1 * 0x10;\n        bool_1 = exponent_bits_1 == 0;\n        if (!bool_1) {\n          float_bits = float_bits >> 4;\n          bool_1 = float_bits == 0;\n        }\n      } while (!bool_1);\n      bool_2 = SBORROW4(exponent_difference,0xfd);\n      bool_1 = exponent_difference == 0xfd;\n      float_bits = exponent_difference - 0xfd;\n      if (exponent_difference < 0xfe) {\n        float_bits_1 = float_bits_1 + exponent_difference * 0x800000 + (uint)(mantissa_bit <= exponent_bits_1);\n        if (exponent_bits_1 - mantissa_bit == 0) {\n          float_bits_1 = float_bits_1 & 0xfffffffe;\n        }\n        return float_bits_1;\n      }\n    }\n    if (bool_1 || (int)float_bits < 0 != bool_2) {\n      bool_1 = (int)(exponent_difference + 0x19) < 0;\n      if (exponent_difference == 0xffffffe7 || bool_1 != SCARRY4(exponent_difference,0x19)) {\n        float_bits_1 = float_bits_1 & 0x80000000;\n      }\n      if (exponent_difference == 0xffffffe7 || bool_1 != SCARRY4(exponent_difference,0x19)) {\n        return float_bits_1;\n      }\n      float_bits = (float_bits_1 << 1) >> (-exponent_difference & 0xff);\n      exponent_difference = float_bits_1 << (exponent_difference + 0x20 & 0xff);\n      float_bits = ((uint)((float_bits_1 & 0x80000000) != 0) << 0x1f | float_bits >> 1) + (uint)((byte)float_bits & 1);\n      if ((exponent_bits_1 | exponent_difference << 1) == 0) {\n        float_bits = float_bits & ~(exponent_difference >> 0x1f);\n      }\n      return float_bits;\n    }\n  }\n  return float_bits_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e54",
            "calling": [
                "FUN_0800411c",
                "FUN_08002f28",
                "FUN_08003330",
                "FUN_0800483c"
            ],
            "imported": false,
            "current_name": "calculate_float_value_08000e54"
        },
        "FUN_080015e8": {
            "renaming": {
                "FUN_080015e8": "update_and_check_value_080015e8",
                "param_1": "value_ptr",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "flag",
                "param_5": "max_value",
                "puVar3": "value",
                "ppuVar4": "value_ptr_ptr",
                "uVar5": "value_3",
                "uVar6": "value_4",
                "iVar1": "value_5",
                "iVar2": "value_9",
                "iVar6": "value_6",
                "iVar7": "value_7",
                "iVar8": "value_8"
            },
            "code": "uint32_t update_and_check_value_080015e8(uint32_t **value_ptr, uint32_t value_1, uint32_t value_2, int flag, uint32_t max_value) {\n    uint32_t *value = *value_ptr;\n    value[0] |= 0x400;\n    value[0] |= 0x100;\n    uint32_t **value_ptr_ptr = value_ptr;\n    uint32_t value_3 = value_1;\n    uint32_t value_4 = value_2;\n    int value_5 = get_value_from_pointer_0800115c();\n    while (-1 < (int)(value[5] << 0x1f)) {\n        if (max_value != 0xffffffff) {\n            goto r0x0800165a;\n        }\n    }\n    value[4] = value_1 & 0xfe;\n    int value_6 = check_value_match_08001460(value_ptr, DAT_080016f0, max_value, value, value_ptr_ptr, value_3, value_4);\n    if (value_6 != 0) {\n        goto LAB_080016ba;\n    }\n    value_6 = check_value_080014e2(value_ptr, max_value, (*value_ptr)[5], (*value_ptr)[6]);\n    if (value_6 == 0) {\n        uint32_t *value = *value_ptr;\n        if (flag != 1) {\n            value[4] = value_2 >> 8;\n            int value_7 = check_value_080014e2(value_ptr, max_value);\n            if (value_7 != 0) {\n                goto LAB_08001642;\n            }\n            value = *value_ptr;\n        }\n        value[4] = value_2 & 0xff;\n        value_6 = check_value_080014e2(value_ptr, max_value);\n        if (value_6 == 0) {\n            **value_ptr = **value_ptr | 0x100;\n            int value_8 = get_value_from_pointer_0800115c();\n            while ((int)((*value_ptr)[5] << 0x1f) >= 0) {\n                if (max_value == 0xffffffff) {\n                    int value_9 = get_value_from_pointer_0800115c();\n                    if ((uint)(value_9 - value_8) <= max_value) {\n                        continue;\n                    }\n                } else {\n                    goto LAB_0800165a;\n                }\n                value_5 = get_value_from_pointer_0800115c();\n            }\n            (*value_ptr)[4] = value_1 & 0xff | 1;\n            value_6 = check_value_match_08001460(value_ptr, DAT_080016f0, max_value);\n            if (value_6 == 0) {\n                return 0;\n            }\n            goto LAB_080016ba;\n        }\n    }\n    LAB_08001642:\n    if (value_ptr[0xe] == (uint32_t **)0x4) {\n        **value_ptr = **value_ptr | 0x200;\n        return 1;\n    }\n    return 3;\n    r0x0800165a:\n    if ((max_value == 0) || ((uint)(get_value_from_pointer_0800115c() - value_5) > max_value)) {\n        *(char *)((int)value_ptr + 0x35) = 0x20;\n        *(uint32_t *)(value_ptr + 0xd) = 0;\n        return 3;\n    }\n    goto LAB_0800160e;\n}\n",
            "called": [
                "FUN_0800115c",
                "FUN_08001460",
                "FUN_080014e2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015e8",
            "calling": [
                "FUN_08001938"
            ],
            "imported": false,
            "current_name": "update_and_check_value_080015e8"
        },
        "FUN_08004e14": {
            "renaming": {
                "FUN_08004e14": "process_data_08004e14",
                "param_1": "data_ptr",
                "param_2": "param1",
                "param_3": "param2",
                "uVar1": "magic_number",
                "iVar2": "data_value",
                "local_18": "local1",
                "local_14": "local2",
                "uStack_10": "local3",
                "local_c": "unused"
            },
            "code": "void process_data_08004e14(int* data_ptr, int param1, int param2)\n{\n    int data_value = *data_ptr;\n    int magic_number = DAT_08004e6c;\n    if (data_value == DAT_08004e68) {\n        magic_number = 2048;\n    }\n    else if (data_value == 0x40000000) {\n        magic_number = 2;\n    }\n    else {\n        magic_number = DAT_08004e74;\n        if (data_value == DAT_08004e70) {\n            magic_number = 3;\n        }\n        else {\n            if (data_value != DAT_08004e78) {\n                return;\n            }\n            magic_number = 768;\n        }\n    }\n    int local1 = 2;\n    int local2 = 2;\n    int local3 = param2;\n    process_bits_08001264(magic_number, &local1);\n    return;\n}",
            "called": [
                "FUN_08001264"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e14",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "process_data_08004e14"
        }
    },
    "used_tokens": 198993,
    "layers": [
        [
            "FUN_08003320",
            "FUN_08001264",
            "FUN_080070b0",
            "FUN_08001424",
            "FUN_080006ac",
            "FUN_08004c64",
            "FUN_08007092",
            "FUN_08005630",
            "FUN_08002368",
            "FUN_08002520",
            "FUN_08002008",
            "FUN_08002404",
            "FUN_08001436",
            "FUN_08000904",
            "FUN_0800114c",
            "FUN_080052e4",
            "FUN_0800142e",
            "FUN_08004d8c",
            "FUN_08002250",
            "FUN_080011fc",
            "FUN_08003068",
            "FUN_08005646",
            "FUN_08000110",
            "FUN_0800709e",
            "FUN_08002ec0",
            "FUN_08006c0c",
            "FUN_0800115c",
            "FUN_08000c44",
            "FUN_08000a04",
            "FUN_08001170",
            "FUN_08002ed4",
            "FUN_08000f9c",
            "FUN_08000c3c",
            "FUN_08001214",
            "FUN_08003fc4",
            "FUN_08000404",
            "FUN_08006070",
            "thunk_FUN_08006070",
            "FUN_08003fd0",
            "FUN_08000892",
            "FUN_08000134",
            "FUN_08003eb0",
            "thunk_FUN_0800115c",
            "FUN_080072b8",
            "FUN_080072ac",
            "FUN_08002280",
            "FUN_08001194",
            "FUN_08002324",
            "FUN_08001078",
            "FUN_08002564",
            "FUN_08003ec8",
            "FUN_08003fe8",
            "FUN_08004fb4",
            "FUN_08000428",
            "FUN_08000a30",
            "FUN_08003fdc",
            "FUN_08004f10",
            "FUN_08001240",
            "FUN_08005840",
            "FUN_08000150",
            "FUN_08002214",
            "FUN_0800567c",
            "FUN_080025a4",
            "FUN_08002220",
            "FUN_08003314",
            "FUN_080071c0",
            "FUN_08005614",
            "FUN_080070a4",
            "FUN_080022d0",
            "FUN_080010c4"
        ],
        [
            "FUN_08004a30",
            "FUN_08004c70",
            "FUN_080014e2",
            "FUN_08000990",
            "FUN_0800426c",
            "FUN_08002538",
            "FUN_080025e8",
            "FUN_08004c18",
            "FUN_08001460",
            "FUN_08001104",
            "FUN_0800581c",
            "FUN_08004d48",
            "FUN_08004ccc",
            "FUN_080023d0",
            "FUN_08004c30",
            "FUN_08003f3c",
            "FUN_08001004",
            "FUN_080041c4",
            "FUN_080016f4",
            "FUN_08004e7c",
            "FUN_0800245c",
            "FUN_08004e14"
        ],
        [
            "FUN_08001028",
            "FUN_0800290c",
            "FUN_080009a0",
            "FUN_08000980",
            "FUN_080009b4",
            "FUN_080009c8",
            "FUN_0800209c",
            "FUN_08004c8c",
            "FUN_08001754",
            "FUN_08002724",
            "FUN_08005714",
            "FUN_08003ff4",
            "FUN_08001128",
            "FUN_08000ffc",
            "FUN_08001530",
            "FUN_08001014",
            "FUN_080015e8"
        ],
        [
            "FUN_08001828",
            "FUN_08004300",
            "FUN_08004028",
            "FUN_08005bc8",
            "FUN_0800299a",
            "FUN_08001050",
            "FUN_08001064",
            "FUN_080009f0",
            "FUN_080057d0"
        ],
        [
            "FUN_08004410",
            "FUN_08004384",
            "FUN_08004434",
            "FUN_080043bc",
            "FUN_0800483c",
            "FUN_08004458",
            "FUN_08002ee8",
            "FUN_08004348",
            "FUN_080043f0",
            "FUN_08005044",
            "FUN_08005854"
        ],
        [
            "FUN_080050fc",
            "FUN_08004a84"
        ],
        [
            "FUN_08004ffc"
        ],
        [
            "FUN_08004cac"
        ],
        [
            "FUN_08004490"
        ],
        [
            "FUN_0800403c",
            "FUN_08004514",
            "FUN_0800407c",
            "FUN_080040b8"
        ],
        [
            "FUN_080040e8",
            "FUN_08002ad0",
            "FUN_08003034"
        ],
        [
            "FUN_08003298",
            "FUN_08002d88",
            "FUN_08002b48",
            "FUN_08002bf0",
            "FUN_08002cb0"
        ],
        [
            "FUN_08002ea0",
            "FUN_08002f28"
        ],
        [
            "FUN_08004194"
        ],
        [
            "FUN_080041ae"
        ],
        [
            "FUN_08004f68"
        ],
        [
            "FUN_0800016c",
            "FUN_08001b58",
            "FUN_08000cec",
            "FUN_08000ad8",
            "FUN_080004d0",
            "FUN_080053d4",
            "FUN_0800458c",
            "FUN_08000adc",
            "FUN_08000168",
            "FUN_08000724",
            "FUN_08001938",
            "FUN_08000e54"
        ],
        [
            "FUN_08006228",
            "FUN_08005c70",
            "FUN_08006d68"
        ],
        [
            "FUN_08005900",
            "FUN_08005854"
        ],
        [
            "FUN_08003330",
            "FUN_0800411c"
        ]
    ],
    "locked_functions": []
}