{
    "functions": {
        "FUN_080006b4": {
            "renaming": {
                "FUN_080006b4": "read_data_080006b4",
                "param_1": "data",
                "bVar1": "is_overflow",
                "uVar2": "byte_data",
                "iVar3": "read_result",
                "bVar4": "data_index"
            },
            "code": "int read_data_080006b4(int **data)\n{\n  bool is_overflow = false;\n  undefined byte_data;\n  int read_result;\n  byte data_index;\n\n  if (1 < *(byte *)((int)data + 6)) {\n    read_result = read_byte_data(*(byte *)((int)data + 6),0);\n  }\n\n  *(undefined *)((int)data + 0x49) = 0;\n\n  if (*(byte *)((int)data + 5) < 4) {\n    while (read_result = (**(code **)(**(int **)data + 8))(), read_result != 0) {\n      data_index = *(byte *)((int)data + 0x49);\n      byte_data = (**(code **)(**(int **)data + 0xc))();\n      *(undefined *)((int)data + data_index + 9) = byte_data;\n      data_index = *(char *)((int)data + 0x49) + 1;\n      *(byte *)((int)data + 0x49) = data_index;\n      if (0x3f < data_index) {\n        is_overflow = true;\n      }\n    }\n  }\n\n  if (is_overflow) {\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n    return -3;\n  }\n\n  *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n  return (int)*(char *)((int)data + 0x49);\n}",
            "called": [
                "FUN_080041bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006b4",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "read_data_080006b4"
        },
        "FUN_080034da": {
            "renaming": {
                "FUN_080034da": "find_short_value_in_array_080034da",
                "param_1": "value_to_find",
                "param_2": "array",
                "*param_2": "*array"
            },
            "code": "int find_short_value_in_array_080034da(int value_to_find, short* array) {\n  while (*array != -1) {\n    if (*array == value_to_find) {\n      break;\n    }\n    array += 6;\n  }\n  return *(int*)(array + 2);\n}",
            "called": [
                "FUN_080034da"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034da",
            "calling": [
                "FUN_080034da",
                "FUN_080034f4"
            ],
            "imported": false,
            "current_name": "find_short_value_in_array_080034da"
        },
        "FUN_080035fc": {
            "renaming": {
                "FUN_080035fc": "set_bits_080035fc",
                "param_1": "bits",
                "DAT_08003718": "BIT_1",
                "DAT_0800371c": "BIT_3",
                "DAT_08003720": "BIT_4",
                "DAT_08003724": "BIT_5",
                "DAT_08003728": "BIT_6",
                "DAT_0800372c": "BIT_7",
                "DAT_08003730": "BIT_8",
                "DAT_08003734": "BIT_9",
                "DAT_08003738": "BIT_10",
                "DAT_0800373c": "BIT_11",
                "DAT_08003740": "BIT_12",
                "DAT_08003744": "BIT_13",
                "DAT_08003748": "BIT_14",
                "*param_1": "*bits",
                "DAT_0800374c": "flags_ptr"
            },
            "code": "void set_bits_080035fc(uint *bits)\n{\n    uint *flags = (uint *)(DAT_0800374c + 0x40);\n    uint *other_flags = (uint *)(DAT_0800374c + 0x44);\n    if (*bits == DAT_08003718)\n    {\n        *other_flags &= ~(1 << 0);\n    }\n    if (*bits == BIT_2)\n    {\n        *flags &= ~(1 << 0);\n    }\n    if (*bits == DAT_0800371c)\n    {\n        *flags &= ~(1 << 1);\n    }\n    if (*bits == DAT_08003720)\n    {\n        *flags &= ~(1 << 2);\n    }\n    if (*bits == DAT_08003724)\n    {\n        *flags &= ~(1 << 3);\n    }\n    if (*bits == DAT_08003728)\n    {\n        *flags &= ~(1 << 4);\n    }\n    if (*bits == DAT_0800372c)\n    {\n        *flags &= ~(1 << 5);\n    }\n    if (*bits == DAT_08003730)\n    {\n        *other_flags &= ~(1 << 1);\n    }\n    if (*bits == DAT_08003734)\n    {\n        *other_flags &= ~(1 << 16);\n    }\n    if (*bits == DAT_08003738)\n    {\n        *other_flags &= ~(1 << 17);\n    }\n    if (*bits == DAT_0800373c)\n    {\n        *other_flags &= ~(1 << 18);\n    }\n    if (*bits == DAT_08003740)\n    {\n        *flags &= ~(1 << 6);\n    }\n    if (*bits == DAT_08003744)\n    {\n        *flags &= ~(1 << 7);\n    }\n    if (*bits == DAT_08003748)\n    {\n        *flags &= ~(1 << 8);\n    }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fc",
            "calling": [
                "FUN_0800340c"
            ],
            "imported": false,
            "current_name": "set_bits_080035fc"
        },
        "FUN_08003dd0": {
            "renaming": {
                "FUN_08003dd0": "is_input_valid_08003dd0",
                "param_1": "input",
                "uVar1": "result"
            },
            "code": "bool is_input_valid_08003dd0(int input){\n  uint result = FUN_0800312c(*(undefined4 *)(PTR_DAT_08003df0 + (uint)*(byte *)(input + 0x44) * 4));\n  return (result & 0x22) == 0x22;\n}",
            "called": [
                "FUN_0800312c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003dd0",
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "imported": false,
            "current_name": "is_input_valid_08003dd0"
        },
        "FUN_08000c8c": {
            "renaming": {
                "FUN_08000c8c": "initialize_system_08000c8c",
                "local_54": "local_variable_1",
                "local_50": "local_variable_2",
                "local_3c": "local_variable_3",
                "local_38": "local_variable_4",
                "local_34": "local_variable_5",
                "local_30": "local_variable_6",
                "local_2c": "local_variable_7",
                "local_28": "local_variable_8",
                "DAT_08000d30": "system_register_1",
                "DAT_08000d34": "system_register_2",
                "local_24": "local_variable_9",
                "local_20": "local_variable_10",
                "local_1c": "local_variable_11",
                "local_18": "local_variable_12",
                "local_14": "local_variable_13",
                "FUN_0800201c": "function_1",
                "FUN_08001f9c": "function_2",
                "FUN_08002488": "function_3",
                "FUN_080025e0": "function_4",
                "FUN_08000ee0": "function_5",
                "FUN_08000f2c": "function_6",
                "FUN_08000e60": "function_7"
            },
            "code": "void initialize_system_08000c8c(void)\n{\n  uint32_t DAT_08000d30;\n  uint32_t DAT_08000d34;\n  uint32_t local_variable_1 = 1;\n  uint32_t local_variable_2 = 0x50000;\n  uint32_t local_variable_3 = 2;\n  uint32_t local_variable_4 = 0x400000;\n  uint32_t local_variable_5 = 8;\n  uint32_t local_variable_6 = 0x150;\n  uint32_t local_variable_7 = 2;\n  uint32_t local_variable_8 = 7;\n  set_bit(&DAT_08000d30, 0x1c);\n  set_bits(&DAT_08000d34, 0x0, 0xc000);\n  function_1(&local_variable_1);\n  function_2();\n  uint32_t local_variable_9 = 0xf;\n  uint32_t local_variable_10 = 2;\n  uint32_t local_variable_11 = 0;\n  uint32_t local_variable_12 = 0x1400;\n  uint32_t local_variable_13 = 0x1000;\n  function_3(&local_variable_9, 5);\n  uint32_t uVar1 = function_4();\n  function_5((uint32_t)((uint64_t)DAT_08000d34 * (uint64_t)uVar1 >> 0x26));\n  function_6(4);\n  function_7(0xffffffff, 0, 0);\n  return;\n}",
            "called": [
                "FUN_08000ee0",
                "FUN_08000f2c",
                "FUN_0800201c",
                "FUN_08000e60",
                "FUN_08001f9c",
                "FUN_080025e0",
                "FUN_08002488"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c8c",
            "calling": [
                "FUN_080034ce"
            ],
            "imported": false,
            "current_name": "initialize_system_08000c8c"
        },
        "FUN_08000a4e": {
            "renaming": {
                "FUN_08000a4e": "get_value_at_index_08000a4e",
                "param_1": "data",
                "param_2": "index",
                "bVar1": "byte_val",
                "uVar2": "val",
                "*(undefined *)(param_2 + (uint)bVar1 * 2)": "*val_ptr",
                "*(undefined *)(param_1 + 0x49)": "*(data + 0x49)"
            },
            "code": "uint8_t get_value_at_index_08000a4e(uint8_t* data, uint8_t index) {\n  uint8_t byte_val = get_byte_at_index(data, 0xB);\n  uint16_t val = get_byte_at_index(data, 0xD);\n  uint16_t* val_ptr = (uint16_t*)(data + (uint16_t)byte_val * 2);\n  *val_ptr = val;\n  *(data + 0x49) = 6;\n  do_something(data);\n  return 8;\n}",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a4e",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "get_value_at_index_08000a4e"
        },
        "FUN_08004658": {
            "renaming": {
                "FUN_08004658": "do_nothing_and_call_08000c4c_until_DAT_08004674_is_true_08004658",
                "FUN_08000c4c": "call_FUN_08000c4c",
                "FUN_08000c64": "call_FUN_08000c64",
                "FUN_08004338": "call_FUN_08004338"
            },
            "code": "void do_nothing_and_call_08000c4c_until_DAT_08004674_is_true_08004658(void)\n{\n  do_nothing_08004646();\n  FUN_08000c4c();\n  do {\n    do {\n      FUN_08000c64();\n    } while (DAT_08004674 == 0);\n    FUN_08004338();\n  } while( true );\n}\n",
            "called": [
                "FUN_08004646",
                "FUN_08000c64",
                "FUN_08004338",
                "FUN_08000c4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004658",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "do_nothing_and_call_08000c4c_until_DAT_08004674_is_true_08004658"
        },
        "FUN_080034f4": {
            "renaming": {
                "FUN_080034f4": "check_param_080034f4",
                "param_1": "input_param",
                "uVar1": "result",
                "FUN_080034da": "get_result"
            },
            "code": "int check_param_080034f4(int input_param) {\n  int result = 0;\n  if (input_param != -1) {\n    result = get_result();\n  }\n  return result;\n}",
            "called": [
                "FUN_080034da"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034f4",
            "calling": [
                "FUN_08003414",
                "FUN_08003d18",
                "FUN_08003cc8",
                "FUN_08003978",
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "check_param_080034f4"
        },
        "FUN_0800355e": {
            "renaming": {
                "FUN_0800355e": "is_value_in_array_0800355e",
                "param_1": "value",
                "param_2": "array",
                "*param_2": "*array"
            },
            "code": "int is_value_in_array_0800355e(int value, short *array)\n{\n  if (value == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (value == *array) break;\n    array = array + 6;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800355e",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "is_value_in_array_0800355e"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "process_result_0800573c",
                "param_1": "result",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "result_ptr",
                "iVar2": "process_result"
            },
            "code": "void process_result_0800573c(int *result, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined *result_ptr;\n  int process_result_0800573c;\n  \n  result_ptr = PTR_DAT_0800575c;\n  *(undefined4 *)PTR_DAT_0800575c = 0;\n  process_result_0800573c = perform_calculation(param_2, param_3, param_4, param_4, param_4);\n  if ((process_result_0800573c == -1) && (*(int *)result_ptr != 0)) {\n    *result = *(int *)result_ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "FUN_08005608"
            ],
            "imported": false,
            "current_name": "process_result_0800573c"
        },
        "FUN_08003e54": {
            "renaming": {
                "FUN_08003e54": "process_input_08003e54",
                "param_1": "input",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "iVar1": "result",
                "uVar2": "index",
                "char_index": "char_index"
            },
            "code": "void process_input_08003e54(int input, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  int result = FUN_08003dd0();\n  if (input != 0 && result == 0) {\n    uint index = (uint)*(byte *)(input + 0x44);\n    *(undefined4 *)(PTR_DAT_08003ea0 + index * 4) = param_2;\n    *(int *)(PTR_DAT_08003ea4 + index * 4) = input;\n    int char_index = (int)*(char *)(input + 0x5c);\n    FUN_08000e60(char_index,0,1,index,param_4);\n    FUN_08000ec4(char_index);\n    FUN_08002efa(*(undefined4 *)(PTR_DAT_08003ea8 + index * 4),input + 0x45,1);\n  }\n}",
            "called": [
                "FUN_08003dd0",
                "FUN_08000e60",
                "FUN_08000ec4",
                "FUN_08002efa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e54",
            "calling": [
                "FUN_08004388"
            ],
            "imported": false,
            "current_name": "process_input_08003e54"
        },
        "FUN_08004fdc": {
            "renaming": {
                "FUN_08004fdc": "process_data_08004fdc",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "iVar1": "data_ptr",
                "uVar2": "data1_copy",
                "uStack_c": "data2_copy",
                "uStack_8": "data3_copy",
                "uStack_4": "data4_copy",
                "PTR_PTR_DAT_08005008": "data_ptr_ptr",
                "FUN_08004a84": "process_data_helper",
                "FUN_080053a0": "free_data"
            },
            "code": "void process_data_08004fdc(int data1, int data2, int data3, int data4) {\n  int data_ptr = *(int *)PTR_PTR_DAT_08005008;\n  if ((data_ptr != 0) && (*(int *)(data_ptr + 0x18) == 0)) {\n    free_data(data_ptr);\n  }\n  process_data_08004fdc_helper(data_ptr, *(int *)(data_ptr + 8), data1, &data2, data3, &data4);\n  return;\n}",
            "called": [
                "FUN_080053a0",
                "FUN_08004a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fdc",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "process_data_08004fdc"
        },
        "FUN_080056d4": {
            "renaming": {
                "FUN_080056d4": "initialize_value_if_error_occurs_080056d4",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "ptr",
                "iVar2": "status"
            },
            "code": "void initialize_value_if_error_occurs_080056d4(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n  undefined *ptr = PTR_DAT_080056f4;\n  *(undefined4 *)PTR_DAT_080056f4 = 0;\n  int status = FUN_080040d6(arg1, arg2, arg2, 0, arg3);\n  if (status == -1 && *(int *)ptr != 0) {\n    *result = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_080040d6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d4",
            "calling": [
                "FUN_080054b4"
            ],
            "imported": false,
            "current_name": "initialize_value_if_error_occurs_080056d4"
        },
        "thunk_FUN_0800410c": {
            "renaming": {
                "thunk_FUN_0800410c": "get_one_thunk_0800410c"
            },
            "code": "int get_one_thunk_0800410c(void)\n{\n  return 1;\n}",
            "called": [
                "FUN_0800410c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "FUN_080055d0"
            ],
            "imported": false,
            "current_name": "get_one_thunk_0800410c"
        },
        "FUN_080033d8": {
            "renaming": {
                "FUN_080033d8": "process_data_080033d8",
                "param_1": "data",
                "local_1c": "data_array",
                "FUN_080034f4": "calculate_data",
                "PTR_DAT_08003408": "DATA_PTR_08003408",
                "FUN_08003380": "check_data",
                "iVar1": "result",
                "FUN_08000f72": "process_array",
                "FUN_08000f56": "finalize_data"
            },
            "code": "void process_data_080033d8(int data)\n{\n  int result;\n  int data_array[5];\n  data_array[0] = calculate_data(data, PTR_DAT_08003408);\n  result = check_data(data);\n  if ((data_array[0] != 0) && ((result == 0) || (result == 0x10))) {\n    process_array(data_array, result);\n    finalize_data(data_array);\n  }\n  return;\n}",
            "called": [
                "FUN_08003380",
                "FUN_08000f72",
                "FUN_08000f56",
                "FUN_080034f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033d8",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "process_data_080033d8"
        },
        "FUN_080029c8": {
            "renaming": {
                "FUN_080029c8": "calculate_values_080029c8",
                "param_1": "params",
                "uVar1": "multiplier",
                "uVar2": "constant",
                "iVar3": "value1",
                "iVar4": "value2",
                "iVar5": "value3",
                "iVar6": "value4",
                "iVar7": "value5",
                "iVar8": "value6",
                "iVar9": "value7",
                "iVar10": "value8",
                "iVar11": "value9",
                "iVar12": "base_address"
            },
            "code": "\nvoid calculate_values_080029c8(int *params)\n\n{\n  ulonglong multiplier;\n  uint constant;\n  int value1;\n  int value2;\n  int value3;\n  int value4;\n  int value5;\n  int value6;\n  int value7;\n  int value8;\n  int value9;\n  int base_address;\n  \n  *(uint *)(*params + 0x10) = *(uint *)(*params + 0x10) & 0xffffcfff | params[3];\n  *(uint *)(*params + 0xc) =\n       *(uint *)(*params + 0xc) & 0xffff69f3 | params[2] | params[4] | params[5] | params[7];\n  *(uint *)(*params + 0x14) = *(uint *)(*params + 0x14) & 0xfffffcff | params[6];\n  if (params[7] == 0x8000) {\n    base_address = *params;\n    if ((base_address != 0x40011000) && (base_address != 0x40011400)) {\n      value1 = FUN_080025ec();\n      constant = DAT_08002d08;\n      value6 = params[1];\n      multiplier = (ulonglong)DAT_08002d08;\n      value2 = FUN_080025ec();\n      value7 = params[1];\n      value3 = FUN_080025ec();\n      value8 = params[1];\n      value4 = FUN_080025ec();\n      value9 = params[1];\n      value5 = FUN_080025ec();\n      *(uint *)(base_address + 8) =\n           ((uint)((int)((ulonglong)constant *\n                         (ulonglong)\n                         (((uint)(value4 * 0x19) / (uint)(value9 << 1) +\n                          (uint)((ulonglong)constant *\n                                 ((ulonglong)(uint)(value5 * 0x19) /\n                                 (ulonglong)(uint)(params[1] << 1)) >> 0x25) * -100) * 8 + 0x32) >>\n                        0x20) << 0x18) >> 0x1d) +\n           ((uint)((ulonglong)constant *\n                   (ulonglong)\n                   (((uint)(value2 * 0x19) / (uint)(value7 << 1) +\n                    (uint)((ulonglong)constant *\n                           ((ulonglong)(uint)(value3 * 0x19) / (ulonglong)(uint)(value8 << 1)) >>\n                          0x25) * -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n           (uint)(multiplier * ((ulonglong)(uint)(value1 * 0x19) / (ulonglong)(uint)(value6 << 1)) >> 0x25)\n           * 0x10;\n      return;\n    }\n    value1 = FUN_0800260c();\n    constant = DAT_08002d08;\n    value6 = params[1];\n    multiplier = (ulonglong)DAT_08002d08;\n    value2 = FUN_0800260c();\n    value7 = params[1];\n    value3 = FUN_0800260c();\n    value8 = params[1];\n    value4 = FUN_0800260c();\n    value9 = params[1];\n    value5 = FUN_0800260c();\n    *(uint *)(base_address + 8) =\n         ((uint)((int)((ulonglong)constant *\n                       (ulonglong)\n                       (((uint)(value4 * 0x19) / (uint)(value9 << 1) +\n                        (uint)((ulonglong)constant *\n                               ((ulonglong)(uint)(value5 * 0x19) / (ulonglong)(uint)(params[1] << 1)\n                               ) >> 0x25) * -100) * 8 + 0x32) >> 0x20) << 0x18) >> 0x1d) +\n         ((uint)((ulonglong)constant *\n                 (ulonglong)\n                 (((uint)(value2 * 0x19) / (uint)(value7 << 1) +\n                  (uint)((ulonglong)constant *\n                         ((ulonglong)(uint)(value3 * 0x19) / (ulonglong)(uint)(value8 << 1)) >> 0x25)\n                  * -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n         (uint)(multiplier * ((ulonglong)(uint)(value1 * 0x19) / (ulonglong)(uint)(value6 << 1)) >> 0x25) *\n         0x10;\n    return;\n  }\n  base_address = *params;\n  if ((base_address != DAT_08002d04) && (base_address != DAT_08002d04 + 0x400)) {\n    value1 = FUN_080025ec();\n    constant = DAT_08002d08;\n    value6 = params[1];\n    multiplier = (ulonglong)DAT_08002d08;\n    value2 = FUN_080025ec();\n    value7 = params[1];\n    value3 = FUN_080025ec();\n    value8 = params[1];\n    value4 = FUN_080025ec();\n    value9 = params[1];\n    value5 = FUN_080025ec();\n    *(uint *)(base_address + 8) =\n         ((uint)((int)((ulonglong)constant *\n                       (ulonglong)\n                       (((uint)(value4 * 0x19) / (uint)(value9 << 2) +\n                        (uint)((ulonglong)constant *\n                               ((ulonglong)(uint)(value5 * 0x19) / (ulonglong)(uint)(params[1] << 2)\n                               ) >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n         ((uint)((ulonglong)constant *\n                 (ulonglong)\n                 (((uint)(value2 * 0x19) / (uint)(value7 << 2) +\n                  (uint)((ulonglong)constant *\n                         ((ulonglong)(uint)(value3 * 0x19) / (ulonglong)(uint)(value8 << 2)) >> 0x25)\n                  * -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n         (uint)(multiplier * ((ulonglong)(uint)(value1 * 0x19) / (ulonglong)(uint)(value6 << 2)) >> 0x25) *\n         0x10;\n    return;\n  }\n  value1 = FUN_0800260c();\n  constant = DAT_08002d08;\n  value6 = params[1];\n  multiplier = (ulonglong)DAT_08002d08;\n  value2 = FUN_0800260c();\n  value7 = params[1];\n  value3 = FUN_0800260c();\n  value8 = params[1];\n  value4 = FUN_0800260c();\n  value9 = params[1];\n  value5 = FUN_0800260c();\n  *(uint *)(base_address + 8) =\n       ((uint)((int)((ulonglong)constant *\n                     (ulonglong)\n                     (((uint)(value4 * 0x19) / (uint)(value9 << 2) +\n                      (uint)((ulonglong)constant *\n                             ((ulonglong)(uint)(value5 * 0x19) / (ulonglong)(uint)(params[1] << 2))\n                            >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n       ((uint)((ulonglong)constant *\n               (ulonglong)\n               (((uint)(value2 * 0x19) / (uint)(value7 << 2) +\n                (uint)((ulonglong)constant *\n                       ((ulonglong)(uint)(value3 * 0x19) / (ulonglong)(uint)(value8 << 2)) >> 0x25) *\n                -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n       (uint)(multiplier * ((ulonglong)(uint)(value1 * 0x19) / (ulonglong)(uint)(value6 << 2)) >> 0x25) *\n       0x10;\n  return;\n}\n\n",
            "called": [
                "FUN_080025ec",
                "FUN_0800260c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080029c8",
            "calling": [
                "FUN_08002d72"
            ],
            "imported": false,
            "current_name": "calculate_values_080029c8"
        },
        "FUN_08002488": {
            "renaming": {
                "FUN_08002488": "validate_parameters_08002488",
                "param_1": "parameters",
                "param_2": "num_params",
                "puVar1": "param_ptr",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "uVar4": "result",
                "DAT_080025d0": "param_table",
                "DAT_080025d4": "param_table_ptr",
                "PTR_DAT_080025dc": "param_table_shift",
                "PTR_DAT_080025d8": "param_table_shift"
            },
            "code": "int validate_parameters_08002488(uint *parameters, uint num_params) {\n  uint *param_ptr = DAT_080025d0;\n  if (parameters == NULL) {\n    return 1;\n  }\n  uint max_params = *param_ptr & 0xf;\n  if (max_params < num_params) {\n    *(char *)param_ptr = (char)num_params;\n    if (num_params != (*param_ptr & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*parameters & 2) != 0) {\n    if ((*parameters & 4) != 0) {\n      DAT_080025d0[2] |= 0x1c00;\n    }\n    if ((*parameters & 8) != 0) {\n      DAT_080025d0[2] |= 0xe000;\n    }\n    DAT_080025d0[2] &= 0xffffff0f | parameters[2];\n  }\n  if ((*parameters & 1) != 0) {\n    uint param_value = parameters[1];\n    if (param_value == 1) {\n      if ((DAT_080025d0[0] & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if (param_value - 2 < 2) {\n      if ((DAT_080025d0[0] & 0x2000000) == 0) {\n        return 1;\n      }\n    }\n    else if ((DAT_080025d0[0] & 2) == 0) {\n      return 1;\n    }\n    DAT_080025d0[2] = param_value | DAT_080025d0[2] & 0xfffffffc;\n    int start_time = get_time();\n    while (true) {\n      if ((DAT_080025d0[2] & 0xc) == parameters[1] * 4) {\n        break;\n      }\n      int current_time = get_time();\n      if (5000 < (uint)(current_time - start_time)) {\n        return 3;\n      }\n    }\n  }\n  param_ptr = DAT_080025d0;\n  if (num_params < (*param_ptr & 0xf)) {\n    *(char *)param_ptr = (char)num_params;\n    if (num_params != (*param_ptr & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*parameters & 4) != 0) {\n    DAT_080025d0[2] &= 0xffffe3ff | parameters[3];\n  }\n  if ((*parameters & 8) != 0) {\n    DAT_080025d0[2] &= 0xffff1fff | parameters[4] << 3;\n  }\n  uint result = get_result();\n  *(uint *)DAT_080025d4 = result >> PTR_DAT_080025dc[(DAT_080025d0[2] << 0x18) >> 0x1c];\n  do_something(0xf);\n  return 0;\n}",
            "called": [
                "FUN_080023b4",
                "FUN_08000d98",
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002488",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "validate_parameters_08002488"
        },
        "FUN_08004544": {
            "renaming": {
                "FUN_08004544": "initialize_parameters_08004544",
                "param_1": "parameter_list",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "param_5": "parameter_5"
            },
            "code": "void initialize_parameters_08004544(undefined4 *parameter_list, undefined param_2, undefined param_3, undefined param_4, undefined param_5)\n{\n  *parameter_list = PTR_PTR_LAB_0800450a_1_0800455c;\n  *(undefined *)(parameter_list + 1) = param_2;\n  *(undefined *)((int)parameter_list + 5) = param_3;\n  *(undefined *)((int)parameter_list + 6) = param_4;\n  *(undefined *)((int)parameter_list + 7) = param_5;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004544",
            "calling": [
                "FUN_08004560"
            ],
            "imported": false,
            "current_name": "initialize_parameters_08004544"
        },
        "FUN_08003cc8": {
            "renaming": {
                "FUN_08003cc8": "process_data_08003cc8",
                "sVar1": "data_value",
                "puVar2": "processing_data",
                "uVar3": "processed_value",
                "iVar4": "result",
                "uVar5": "calculated_value"
            },
            "code": "void process_data_08003cc8(void)\n{\n  short data_value = *(short *)(PTR_DATA_START + 0x9a);\n  int result = calculate_result((int)data_value, PTR_DATA_ARRAY);\n  if (result != 0) {\n    undefined4 calculated_value = calculate_result((int)data_value, PTR_DATA_ARRAY);\n    undefined2 processed_value = process_value(calculated_value, PTR_DATA_TABLE);\n    undefined *processing_data = PTR_DATA_RESULTS;\n    *(undefined2 *)(PTR_DATA_RESULTS + 0x5a) = processed_value;\n    *(short *)(processing_data + 0x58) = data_value;\n    *(undefined4 *)(processing_data + 0x48) = 0x2580;\n    *(undefined4 *)(processing_data + 0x54) = 0;\n    *(undefined4 *)(processing_data + 0x4c) = 0;\n    *(undefined4 *)(processing_data + 0x50) = 0;\n    execute_processing(processing_data);\n  }\n  return;\n}",
            "called": [
                "FUN_08003978",
                "FUN_0800351e",
                "FUN_080034f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003cc8",
            "calling": [
                "FUN_08003d18"
            ],
            "imported": false,
            "current_name": "process_data_08003cc8"
        },
        "FUN_08002d70": {
            "renaming": {
                "FUN_08002d70": "do_nothing_08002d70"
            },
            "code": "\nvoid do_nothing_08002d70(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d70",
            "calling": [
                "FUN_08002d72"
            ],
            "imported": false,
            "current_name": "do_nothing_08002d70"
        },
        "FUN_08000fb4": {
            "renaming": {
                "FUN_08000fb4": "update_data_08000fb4",
                "param_1": "data",
                "param_2": "mask",
                "puVar1": "data_ptr",
                "puVar2": "mask_ptr",
                "uVar3": "bit_value",
                "uVar4": "bit_mask",
                "uVar5": "bit_index",
                "uVar6": "mask_value",
                "uVar7": "data_index",
                "iVar8": "data_index_offset",
                "uVar9": "data_mask",
                "iVar10": "data_bit_offset"
            },
            "code": "void update_data_08000fb4(uint *data, uint *mask) {\n  uint *data_ptr;\n  uint *mask_ptr;\n  uint bit_mask;\n  uint bit_value;\n  uint bit_index;\n  uint mask_value;\n  uint data_value;\n  uint data_index;\n  uint data_mask;\n  int data_index_offset;\n  int data_bit_offset;\n  for (bit_index = 0; bit_index < 16; bit_index++) {\n    bit_mask = 1 << (bit_index & 0xff);\n    mask_value = bit_mask & *mask;\n    if (bit_mask == mask_value) {\n      if ((mask[1] == 2) || (mask[1] == 0x12)) {\n        data_index_offset = (bit_index >> 3) + 8;\n        data_bit_offset = (bit_index & 7) << 2;\n        data[data_index_offset] = data[data_index_offset] & ~(0xf << data_bit_offset) | mask[4] << data_bit_offset;\n      }\n      data_mask = ~(3 << (bit_index << 1 & 0xff));\n      data_value = (mask[1] & 3) << (bit_index << 1 & 0xff);\n      *data = *data & data_mask | data_value;\n      if (((mask[1] - 1 < 2) || (mask[1] == 0x11)) || (mask[1] == 0x12)) {\n        data_index = 2;\n        data[data_index] = data[data_index] & data_mask | mask[3] << (bit_index << 1 & 0xff);\n        data_index = 1;\n        data[data_index] = data[data_index] & ~bit_mask | ((mask[1] << 0x1b) >> 0x1f) << (bit_index & 0xff);\n      }\n      data_index = 3;\n      data[data_index] = data[data_index] & data_mask | mask[2] << (bit_index << 1 & 0xff);\n      if ((mask[1] & 0x10000000) != 0) {\n        *(uint *)(DAT_0800118c + 0x44) = *(uint *)(DAT_0800118c + 0x44) | 0x4000;\n        data_index_offset = bit_index & 3;\n        if (data == PTR_08001190) {\n          data_index = 0;\n        }\n        else if (data == PTR_08001194) {\n          data_index = 1;\n        }\n        else if (data == PTR_08001194 + 0x100) {\n          data_index = 2;\n        }\n        else if (data == PTR_08001194 + 0x200) {\n          data_index = 3;\n        }\n        else if (data == PTR_08001194 + 0x300) {\n          data_index = 4;\n        }\n        else if (data == PTR_08001194 + 0x400) {\n          data_index = 5;\n        }\n        else if (data == PTR_08001194 + 0x500) {\n          data_index = 6;\n        }\n        else if (data == PTR_08001194 + 0x600) {\n          data_index = 7;\n        }\n        else if (data == PTR_08001194 + 0x700) {\n          data_index = 8;\n        }\n        else {\n          data_index = 10;\n        }\n        *(uint *)(DAT_08001184 + ((bit_index >> 2) + 2) * 4) = *(uint *)(DAT_08001184 + ((bit_index >> 2) + 2) * 4) & ~(0xf << data_index_offset) | data_index << data_index_offset;\n        data_ptr = PTR_08001188;\n        bit_value = ~mask_value;\n        data_mask = *PTR_08001188 & bit_value;\n        if ((mask[1] & 0x10000) != 0) {\n          data_mask = mask_value | *PTR_08001188;\n        }\n        *PTR_08001188 = data_mask;\n        mask_ptr = PTR_08001188;\n        data_mask = bit_value & data_ptr[1];\n        if ((mask[1] & 0x20000) != 0) {\n          data_mask = mask_value | data_ptr[1];\n        }\n        PTR_08001188[1] = data_mask;\n        data_ptr = PTR_08001188;\n        data_mask = bit_value & mask_ptr[2];\n        if ((mask[1] & 0x100000) != 0) {\n          data_mask = mask_value | mask_ptr[2];\n        }\n        PTR_08001188[2] = data_mask;\n        bit_value = bit_value & data_ptr[3];\n        if ((mask[1] & 0x200000) != 0) {\n          bit_value = mask_value | data_ptr[3];\n        }\n        PTR_08001188[3] = bit_value;\n      }\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fb4",
            "calling": [
                "FUN_08003978",
                "FUN_08003486"
            ],
            "imported": false,
            "current_name": "update_data_08000fb4"
        },
        "FUN_08001718": {
            "renaming": {
                "FUN_08001718": "do_nothing_08001718"
            },
            "code": "\nvoid do_nothing_08001718(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001718",
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "imported": false,
            "current_name": "do_nothing_08001718"
        },
        "FUN_08001bfc": {
            "renaming": {
                "FUN_08001bfc": "process_input_08001bfc",
                "param_1": "input_ptr",
                "cVar1": "current_char",
                "puVar2": "ptr",
                "puVar3": "output_ptr",
                "DAT_08001cfc": "some_constant",
                "remaining_bytes": "remaining_bytes"
            },
            "code": "uint32_t process_input_08001bfc(uint32_t **input_ptr) {\n  char current_char = *(char *)((int)input_ptr + 0x3d);\n  (*input_ptr)[1] &= 0xfffff8ff;\n  **input_ptr |= 1;\n  **input_ptr &= 0xfffffbff;\n  uint32_t *ptr = *input_ptr;\n  \n  if ((ptr[1] & 0x800) != 0) {\n    if ((current_char == '\"') || (current_char == '*')) {\n      *(short *)((int)input_ptr + 0x2a) = (short)*(uint32_t *)(*input_ptr[0xe] + 4);\n    }\n    else {\n      *(short *)((int)input_ptr + 0x2a) = (short)*(uint32_t *)(*input_ptr[0xd] + 4);\n    }\n  }\n  \n  uint16_t remaining_bytes = *(uint16_t *)((int)input_ptr + 0x2a);\n  \n  if (remaining_bytes != 0) {\n    if ((ptr[5] & 4) != 0) {\n      uint8_t *output_ptr = (uint8_t *)input_ptr[9];\n      input_ptr[9] = (uint32_t *)((int)output_ptr + 1);\n      *(char *)output_ptr = (char)ptr[4];\n      remaining_bytes--;\n    }\n    if (((*input_ptr)[5] & 0x40) != 0) {\n      uint8_t *output_ptr = (uint8_t *)input_ptr[9];\n      input_ptr[9] = (uint32_t *)((int)output_ptr + 1);\n      *(char *)output_ptr = (char)(*input_ptr)[4];\n      remaining_bytes--;\n    }\n    input_ptr[0x10] = (uint32_t *)((uint32_t)input_ptr[0x10] | 4);\n  }\n  \n  if (input_ptr[0x10] == (uint32_t *)0x0) {\n    if (((current_char == '(') || (current_char == '*')) || (current_char == ')')) {\n      input_ptr[0xb] = input_ptr[0x1f];\n      input_ptr[0xc] = (uint32_t *)0x0;\n      *(char *)((int)input_ptr + 0x3d) = 0x20;\n      *(char *)((int)input_ptr + 0x3e) = 0;\n      do_something_1();\n    }\n    else if ((input_ptr[0xc] == (uint32_t *)0x22) || (current_char == '\"')) {\n      input_ptr[0xc] = (uint32_t *)0x0;\n      *(char *)((int)input_ptr + 0x3d) = 0x20;\n      *(char *)((int)input_ptr + 0x3e) = 0;\n      do_something_2();\n    }\n  }\n  else {\n    do_something_3();\n  }\n  return 0;\n}",
            "called": [
                "FUN_080038d0",
                "FUN_0800160c",
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001bfc",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_08001bfc"
        },
        "FUN_08002d72": {
            "renaming": {
                "FUN_08002d72": "validate_input_08002d72",
                "param_1": "input_ptr",
                "do_nothing_08002d70": "do_nothing",
                "*(char *)((int)param_1 + 0x39)": "*(char *)((int)input_ptr + 0x39)",
                "*(undefined *)(param_1 + 0xe)": "*(undefined *)(input_ptr + 0xe)",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*input_ptr + 0xc)",
                "FUN_080029c8": "update_input",
                "*(uint *)(*param_1 + 0x10)": "*(uint *)(*input_ptr + 0x10)",
                "*(uint *)(*param_1 + 0x14)": "*(uint *)(*input_ptr + 0x14)",
                "param_1[0xf]": "input_ptr[0xf]"
            },
            "code": "int validate_input_08002d72(int *input_ptr) {\n  if (input_ptr != NULL) {\n    if (*(char *)((int)input_ptr + 0x39) == '\\0') {\n      *(undefined *)(input_ptr + 0xe) = 0;\n      do_nothing();\n    }\n    *(undefined *)((int)input_ptr + 0x39) = 0x24;\n    *(uint *)(*input_ptr + 0xc) &= 0xffffdfff;\n    update_input(input_ptr);\n    *(uint *)(*input_ptr + 0x10) &= 0xffffb7ff;\n    *(uint *)(*input_ptr + 0x14) &= 0xffffffd5;\n    *(uint *)(*input_ptr + 0xc) |= 0x2000;\n    input_ptr[0xf] = 0;\n    *(undefined *)((int)input_ptr + 0x39) = 0x20;\n    *(undefined *)((int)input_ptr + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}",
            "called": [
                "FUN_080029c8",
                "FUN_08002d70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d72",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "validate_input_08002d72"
        },
        "FUN_080007f0": {
            "renaming": {
                "FUN_080007f0": "check_input_080007f0",
                "param_1": "input",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "bVar1": "found_match",
                "bVar2": "current_byte",
                "cVar3": "char1",
                "cVar4": "char2",
                "iVar5": "int1",
                "iVar7": "int3",
                "uVar6": "i"
            },
            "code": "int check_input_080007f0(int input, int value1, uint value2, int value3){\n    bool found_match;\n    byte current_byte;\n    char char1;\n    char char2;\n    int int1;\n    uint i = 0;\n    while (true) {\n        if (i > 7) {\n            found_match = false;\n            goto end_of_loop;\n        }\n        if ((byte)PTR_DAT_080008c8[i] == input) {\n            found_match = true;\n            goto end_of_loop;\n        }\n        i = (i + 1) & 0xff;\n    }\n    end_of_loop:\n    if (!found_match) {\n        *(short *)(value1 + 0x54) = *(short *)(value1 + 0x54) + 1;\n        return 1;\n    }\n    int3 = *(byte *)(value1 + 10) - 1;\n    switch (*(byte *)(value1 + 10)) {\n        case 1:\n        case 2:\n        case 0xf:\n            goto case_1_2_15;\n        case 3:\n        case 4:\n        case 0x10:\n            char1 = FUN_08004640(*(undefined *)(value1 + 0xb), *(undefined *)(value1 + 0xc), value2, int3, value3);\n            char2 = FUN_08004640(*(undefined *)(value1 + 0xd), *(undefined *)(value1 + 0xe));\n            if (*(byte *)(value1 + 0x60) < (byte)(char2 + char1)) {\n                return 2;\n            }\n            return 0;\n        case 5:\n            int1 = FUN_08004640(*(undefined *)(value1 + 0xb), *(undefined *)(value1 + 0xc), value2, int3, value3);\n            if ((uint)*(byte *)(value1 + 0x60) < (uint)(int1 << 0x14) >> 0x18) {\n                return 2;\n            }\n            return 0;\n        case 6:\n            current_byte = FUN_08004640(*(undefined *)(value1 + 0xb), *(undefined *)(value1 + 0xc), value2, int3, value3);\n            if (*(byte *)(value1 + 0x60) < current_byte) {\n                return 2;\n            }\n            return 0;\n        default:\n            return 0;\n    }\n    case_1_2_15:\n    int1 = FUN_08004640(*(undefined *)(value1 + 0xb), *(undefined *)(value1 + 0xc), value2, int3, value3);\n    int2 = FUN_08004640(*(undefined *)(value1 + 0xd), *(undefined *)(value1 + 0xe));\n    if ((uint)*(byte *)(value1 + 0x60) < (((uint)(int1 << 0xc) >> 0x10) + ((uint)(int2 << 0xc) >> 0x10) & 0xff)) {\n        return 2;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080007f0",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "check_input_080007f0"
        },
        "FUN_0800562a": {
            "renaming": {
                "FUN_0800562a": "process_input_0800562a",
                "param_1": "result",
                "param_2": "input_address",
                "param_3": "input_length",
                "param_4": "unused_param",
                "sVar1": "input_value",
                "puVar2": "global_variable",
                "iVar3": "function_result",
                "unaff_r4": "unused_param",
                "unaff_r5": "unused_param",
                "in_lr": "unused_param"
            },
            "code": "void process_input_0800562a(int *result, int input_address, int input_length, int unused_param)\n{\n    short input_value = *(short *)(input_address + 0xe);\n    *(ushort *)(input_address + 0xc) &= 0xefff;\n    int function_result = call_external_function(input_value, input_length, unused_param, unused_param, unused_param);\n    if (function_result == -1 && *global_variable != 0)\n    {\n        *result = *global_variable;\n    }\n}\n",
            "called": [
                "FUN_080040ec",
                "FUN_08005718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800562a",
            "calling": [],
            "imported": false,
            "current_name": "process_input_0800562a"
        },
        "FUN_080044d8": {
            "renaming": {
                "FUN_080044d8": "check_param_080044d8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "PTR_DAT_080044f8": "PTR_FUNTION_DATA",
                "DAT_080044f4": "FUNTION_DATA"
            },
            "code": "void check_param_080044d8(int param1, int param2, undefined4 param3, undefined4 param4)\n{\n  if (param1 != 1) {\n    return;\n  }\n  if (param2 == 0xffff) {\n    execute_function(PTR_DAT_080044f8, DAT_080044f4, param3, 0xffff, param4);\n  }\n  return;\n}",
            "called": [
                "FUN_0800447c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080044d8",
            "calling": [],
            "imported": false,
            "current_name": "check_param_080044d8"
        },
        "FUN_08003df4": {
            "renaming": {
                "FUN_08003df4": "is_valid_input_08003df4",
                "param_1": "input_index",
                "uVar1": "result",
                "PTR_DAT_08003e14": "data_pointer",
                "byte": "byte_value"
            },
            "code": "bool is_valid_input_08003df4(int input_index) {\n\tuint32_t PTR_DAT_08003e14 = PTR_DAT_08003e14 + (uint32_t)*(byte *)(input_index + 0x44) * 4;\n\tuint32_t result = FUN_0800312c(*(uint32_t *)PTR_DAT_08003e14);\n\treturn (result & 0x21) == 0x21;\n}",
            "called": [
                "FUN_0800312c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003df4",
            "calling": [
                "FUN_080042e8"
            ],
            "imported": false,
            "current_name": "is_valid_input_08003df4"
        },
        "FUN_08005400": {
            "renaming": {
                "FUN_08005400": "find_and_initialize_08005400",
                "param_1": "error_code",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "piVar1": "result",
                "piVar2": "current_item",
                "iVar3": "item_list",
                "ppiVar4": "next_item",
                "i": "i",
                "PTR_PTR_DAT_08005474": "item_list_pointer",
                "initialize_items": "initialize_items",
                "initialize_values": "initialize_values",
                "create_item": "create_item"
            },
            "code": "int * find_and_initialize_08005400(int *error_code, int param_2, int param_3, int param_4)\n{\n  int *result;\n  int *current_item;\n  int item_count;\n  int **item_list;\n  int **next_item;\n  int **new_item;\n  int i;\n  item_list = *(int ***)PTR_PTR_DAT_08005474;\n  if (*(int *)(item_list + 6) == 0) {\n    initialize_items(item_list);\n  }\n  next_item = (int **)(item_list + 0x12);\n  while (true) {\n    current_item = next_item[1];\n    item_count = next_item[2];\n    for (i = 0; i < item_count; i++) {\n      if (*(short *)(current_item + 6) == 0) {\n        *(undefined2 *)(current_item + 0xe) = 0xffff;\n        *(undefined2 *)(current_item + 0xc) = 1;\n        current_item[0x19] = 0;\n        *current_item = 0;\n        current_item[2] = 0;\n        current_item[4] = 0;\n        current_item[5] = 0;\n        current_item[6] = 0;\n        initialize_values(current_item + 0x17, param_4);\n        current_item[0xd] = 0;\n        current_item[0xe] = 0;\n        current_item[0x12] = 0;\n        current_item[0x13] = 0;\n        return current_item;\n      }\n      current_item += 0x1a;\n    }\n    new_item = (int **)next_item[0];\n    if (new_item == (int **)0x0) {\n      new_item = (int **)create_item(error_code, 4);\n      next_item[0] = new_item;\n      if (new_item == (int **)0x0) {\n        *error_code = 0xc;\n        return (int *)0x0;\n      }\n    }\n    next_item = new_item;\n  }\n}",
            "called": [
                "FUN_080053a0",
                "FUN_080048cc",
                "FUN_08005374"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005400",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "find_and_initialize_08005400"
        },
        "FUN_08003582": {
            "renaming": {
                "FUN_08003582": "find_nonzero_08003582",
                "param_1": "num1",
                "param_2": "num2"
            },
            "code": "int find_nonzero_08003582(int num1, int num2) {\n    if (num1 != num2) {\n        if (num1 == 0) {\n            return num2;\n        }\n        if (num2 == 0) {\n            return num1;\n        }\n        num1 = 0;\n    }\n    return num1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003582",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "find_nonzero_08003582"
        },
        "FUN_08005760": {
            "renaming": {
                "FUN_08005760": "initialize_pointers_and_call_function_08005760",
                "UNRECOVERED_JUMPTABLE": "function_pointer",
                "PTR_DAT_080057fc": "pointer_1",
                "PTR_DAT_08005800": "pointer_2",
                "PTR_DAT_08005804": "pointer_3",
                "PTR_DAT_08005808": "pointer_4",
                "PTR_DAT_0800580c": "pointer_5",
                "PTR_DAT_08005810": "pointer_6",
                "PTR_DAT_08005814": "pointer_7",
                "PTR_DAT_08005818": "pointer_8",
                "PTR_DAT_0800581c": "pointer_9",
                "PTR_DAT_08005820": "pointer_10",
                "PTR_DAT_08005824": "pointer_11",
                "PTR_DAT_08005828": "pointer_12",
                "initialize_pointer": "initialize_pointer"
            },
            "code": "void initialize_pointers_and_call_function_08005760(void)\n{\n  code *function_pointer;\n  function_pointer = initialize_pointers_and_call_function_08005760;\n  initialize_pointer(PTR_DAT_080057fc);\n  initialize_pointer(PTR_DAT_08005800);\n  initialize_pointer(PTR_DAT_08005804);\n  initialize_pointer(PTR_DAT_08005808);\n  initialize_pointer(PTR_DAT_0800580c);\n  initialize_pointer(PTR_DAT_08005810);\n  initialize_pointer(PTR_DAT_08005814);\n  initialize_pointer(PTR_DAT_08005818);\n  initialize_pointer(PTR_DAT_0800581c);\n  initialize_pointer(PTR_DAT_08005820);\n  initialize_pointer(PTR_DAT_08005824);\n  initialize_pointer(PTR_DAT_08005828);\n  (*function_pointer)();\n}\n\nvoid initialize_pointer(int *pointer)\n{\n  if (-1 < *pointer << 0x1f) {\n    *pointer = 1;\n  }\n}\n",
            "called": [
                "FUN_080051ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005760",
            "calling": [
                "FUN_080047c0"
            ],
            "imported": false,
            "current_name": "initialize_pointers_and_call_function_08005760"
        },
        "FUN_08004678": {
            "renaming": {
                "FUN_08004678": "count_bits_set_08004678",
                "param_1": "number",
                "cVar1": "count"
            },
            "code": "char count_bits_set_08004678(uint number) {\n  char count = 0;\n  while (number != 1) {\n    count++;\n    number = number >> 1;\n  }\n  return count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004678",
            "calling": [
                "FUN_080047d0"
            ],
            "imported": false,
            "current_name": "count_bits_set_08004678"
        },
        "FUN_08003900": {
            "renaming": {
                "FUN_08003900": "check_and_call_function_08003900",
                "param_1": "data",
                "iVar1": "result",
                "FUN_0800387c": "get_result_from_function",
                "*(char *)(iVar1 + 0x5f)": "check_result",
                "FUN_08001578": "call_another_function"
            },
            "code": "void check_and_call_function_08003900(void* data) {\\n  int result = get_result_from_function();\\n  if (*(char *)(result + 0x5f) == \"\\0\") {\\n    call_another_function(data);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003900",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "check_and_call_function_08003900"
        },
        "FUN_08000f0c": {
            "renaming": {
                "FUN_08000f0c": "set_bit_in_array_08000f0c",
                "param_1": "bit_index",
                "DAT_08000f28": "ARRAY_BASE_ADDRESS",
                "PTR_08000f24": "BITS_PER_WORD",
                "PTR_08000f20": "WORD_INDEX",
                "PTR_08000f1c": "BIT_INDEX",
                "PTR_08000f28": "ARRAY_BASE_ADDRESS",
                "int": "int",
                "word_address": "word_address"
            },
            "code": "void set_bit_in_array_08000f0c(uint bit_index)\n{\n    const int DAT_08000f28 = DAT_08000f28;\n    const int PTR_08000f24 = 32;\n    const int PTR_08000f20 = bit_index >> 5;\n    const int PTR_08000f1c = bit_index & 0x1f;\n\n    if (bit_index >= 0)\n    {\n        int* word_address = (int*)(DAT_08000f28 + (PTR_08000f20 + 0x60) * 4);\n        *word_address = 1 << PTR_08000f1c;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f0c",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_in_array_08000f0c"
        },
        "FUN_08000998": {
            "renaming": {
                "FUN_08000998": "process_data_08000998",
                "param_1": "data_ptr",
                "param_2": "data_length",
                "param_3": "param_3",
                "param_4": "param_4",
                "bVar1": "start_index",
                "cVar2": "index_char",
                "bVar3": "data_offset",
                "bVar4": "data_length_bytes",
                "uVar5": "data_index",
                "uVar6": "data_size"
            },
            "code": "int process_data_08000998(int data_ptr,int data_length,int param_3, int param_4)\n{\n  byte start_index;\n  char index_char;\n  byte data_offset;\n  byte data_length_bytes;\n  uint data_index;\n  uint data_size;\n  data_offset = get_data_offset(*(undefined *)(data_ptr + 0xb),*(undefined *)(data_ptr + 0xc),param_3,param_4,param_4);\n  data_length_bytes = get_data_offset(*(undefined *)(data_ptr + 0xd),*(undefined *)(data_ptr + 0xe));\n  *(byte *)(data_ptr + 0xb) = data_length_bytes << 1;\n  *(undefined *)(data_ptr + 0x49) = 3;\n  for (data_index = (uint)data_offset; data_index < (uint)data_offset + (uint)data_length_bytes; data_index = data_index + 1 & 0xff) {\n    start_index = *(byte *)(data_ptr + 0x49);\n    *(char *)(data_ptr + (uint)start_index + 9) = (char)((ushort)*(undefined2 *)(data_length + data_index * 2) >> 8);\n    data_size = start_index + 1 & 0xff;\n    index_char = (char)data_size;\n    *(char *)(data_ptr + 0x49) = index_char;\n    *(undefined *)(data_ptr + data_size + 9) = *(undefined *)(data_length + data_index * 2);\n    *(char *)(data_ptr + 0x49) = index_char + '\\x01';\n  }\n  index_char = *(char *)(data_ptr + 0x49);\n  finalize_data_process(data_ptr);\n  return (int)(char)(index_char + '\\x02');\n}",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "process_data_08000998"
        },
        "FUN_08003f94": {
            "renaming": {
                "FUN_08003f94": "do_nothing_08003f94"
            },
            "code": "\nvoid do_nothing_08003f94(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f94",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f94"
        },
        "FUN_080055d0": {
            "renaming": {
                "FUN_080055d0": "process_input_080055d0",
                "param_1": "input_size",
                "puVar1": "ptr1",
                "uVar2": "result",
                "piVar3": "status",
                "iVar4": "status_code",
                "pcVar5": "func_ptr",
                "unaff_r4": "unused_reg_4",
                "unaff_r5": "unused_reg_5",
                "in_lr": "unused_reg_lr",
                "puVar6": "ptr",
                "PTR_PTR_DAT_080055dc": "status_ptr_ptr",
                "PTR_DAT_08005600": "ptr2"
            },
            "code": "int process_input_080055d0(uint input_size)\n{\n  int *status = *(int **)PTR_PTR_DAT_080055dc;\n  if (input_size > 31) {\n    *status = 22;\n    return -1;\n  }\n  int *func_ptr = status[17];\n  if ((func_ptr != 0) && (func_ptr = *(int **)(func_ptr + input_size * 4), func_ptr != (int *)0x0)) {\n    if (func_ptr != (int *)0x1) {\n      if (func_ptr == (int *)0xffffffff) {\n        *status = 22;\n        return 1;\n      }\n      *(int *)(func_ptr + input_size * 4) = 0;\n      (*func_ptr)(input_size);\n    }\n    return 0;\n  }\n  undefined *ptr = PTR_PTR_DAT_080055dc;\n  int result = thunk_FUN_0800410c(status);\n  undefined *PTR_DAT_08005600 = PTR_DAT_08005600;\n  *(int *)PTR_DAT_08005600 = 0;\n  int status_code = FUN_080040fc(result, input_size, input_size, 0, ptr, unaff_r4, unaff_r5, in_lr);\n  if ((status_code == -1) && (*(int *)PTR_DAT_08005600 != 0)) {\n    *status = *(int *)PTR_DAT_08005600;\n  }\n  return status_code;\n}",
            "called": [
                "thunk_FUN_0800410c",
                "FUN_080040fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055d0",
            "calling": [
                "FUN_080051ac"
            ],
            "imported": false,
            "current_name": "process_input_080055d0"
        },
        "FUN_080056f8": {
            "renaming": {
                "FUN_080056f8": "checkAndSetParam_080056f8",
                "param_1": "outputValue",
                "param_2": "inputValue",
                "puVar1": "pointerToData",
                "iVar2": "result"
            },
            "code": "void checkAndSetParam_080056f8(int *outputValue, undefined4 inputValue) {\n  undefined *pointerToData = PTR_DAT_08005714;\n  *(undefined4 *)PTR_DAT_08005714 = 0;\n  int result = calculateValue(inputValue);\n  if ((result == -1) && (*(int *)pointerToData != 0)) {\n    *outputValue = *(int *)pointerToData;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056f8",
            "calling": [
                "FUN_080054fc"
            ],
            "imported": false,
            "current_name": "checkAndSetParam_080056f8"
        },
        "FUN_080054b4": {
            "renaming": {
                "FUN_080054b4": "check_permissions_and_set_flags_080054b4",
                "param_1": "permissions",
                "param_2": "input_permissions",
                "param_3": "flags",
                "param_4": "output_flags",
                "iVar1": "result",
                "uVar2": "temp_permissions",
                "auStack_4c": "temp_permissions_stack",
                "local_48": "temp_flags"
            },
            "code": "int check_permissions_and_set_flags_080054b4(uint16_t *permissions, uint16_t *flags, uint16_t *input_permissions, uint32_t *output_flags) {\n  int result = 0;\n  uint32_t temp_flags = 0;\n  if (*input_permissions & 0x8000) {\n    *permissions = 0x40;\n  } else if (*input_permissions & 0x7FFF) {\n    result = get_permissions(input_permissions, &temp_flags);\n    if (result < 0) {\n      *permissions = 0;\n    } else {\n      *flags = (temp_flags & 0xF000) == 0x2000;\n    }\n  } else {\n    *permissions = 0x400;\n  }\n  *output_flags = temp_flags;\n  return result;\n}",
            "called": [
                "FUN_080056d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b4",
            "calling": [
                "FUN_080054fc"
            ],
            "imported": false,
            "current_name": "check_permissions_and_set_flags_080054b4"
        },
        "FUN_0800171a": {
            "renaming": {
                "FUN_0800171a": "process_input_0800171a",
                "param_1": "input",
                "cVar1": "current_char",
                "puVar2": "ptr1"
            },
            "code": "uint32_t process_input_0800171a(uint32_t **input)\n{\n  char current_char;\n  uint32_t *ptr1;\n  uint32_t *ptr2;\n\n  current_char = *(char *)((int)input + 0x3d);\n  ptr1 = input[0xb];\n  if ((*(short *)(input + 10) == 0) && (current_char == '!')) {\n    if ((ptr1 == (uint32_t *)0x4) || ((ptr1 == (uint32_t *)0x8 || (ptr1 == (uint32_t *)0xffff0000)))) {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      **input = **input | 0x200;\n      input[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      if (*(char *)((int)input + 0x3e) == '@') {\n        *(undefined *)((int)input + 0x3e) = 0;\n        do_nothing_08001718();\n      }\n      else {\n        *(undefined *)((int)input + 0x3e) = 0;\n        do_nothing_080015b6();\n      }\n    }\n    else {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      input[0xc] = (uint32_t *)0x11;\n      *(undefined *)((int)input + 0x3e) = 0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      do_nothing_080015b6();\n    }\n  }\n  else if ((current_char == '!') || ((*(char *)((int)input + 0x3e) == '@' && (current_char == '\"')))) {\n    if (*(short *)((int)input + 0x2a) == 0) {\n      (*input)[1] = (*input)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)input + 0x3e) == '@') {\n      if (input[0x14] == (uint32_t *)0x0) {\n        if (input[0x13] == (uint32_t *)0x1) {\n          (*input)[4] = (uint32_t)input[0x12] & 0xff;\n          input[0x14] = (uint32_t *)((int)input[0x14] + 2);\n        }\n        else {\n          (*input)[4] = (uint32_t)((int)input[0x12] << 0x10) >> 0x18;\n          input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n        }\n      }\n      else if (input[0x14] == (uint32_t *)0x1) {\n        (*input)[4] = (uint32_t)input[0x12] & 0xff;\n        input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n      }\n      else if (input[0x14] == (uint32_t *)0x2) {\n        if (*(char *)((int)input + 0x3d) == '\"') {\n          **input = **input | 0x100;\n        }\n        else if (*(char *)((int)input + 0x3d) == '!') {\n          ptr2 = input[9];\n          input[9] = (uint32_t *)((int)ptr2 + 1);\n          (*input)[4] = (uint32_t)*(byte *)ptr2;\n          *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      ptr2 = input[9];\n      input[9] = (uint32_t *)((int)ptr2 + 1);\n      (*input)[4] = (uint32_t)*(byte *)ptr2;\n      *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800171a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_0800171a"
        },
        "FUN_08004560": {
            "renaming": {
                "FUN_08004560": "check_parameters_08004560",
                "param_1": "num1",
                "param_2": "num2",
                "FUN_08004544": "execute_function",
                "PTR_DAT_08004588": "PTR_FUNTION"
            },
            "code": "void check_parameters_08004560(int num1, int num2)\n{\n  if ((num1 == 1) && (num2 == 0xffff)) {\n    execute_function(PTR_DAT_08004588,0,0,0,0);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08004544"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004560",
            "calling": [],
            "imported": false,
            "current_name": "check_parameters_08004560"
        },
        "FUN_08000a7a": {
            "renaming": {
                "FUN_08000a7a": "set_bits_according_to_mask_08000a7a",
                "param_1": "mask_address",
                "param_2": "data_address",
                "param_3": "mask_length",
                "param_4": "data_length",
                "iVar1": "mask_index",
                "iVar2": "data_index",
                "uVar3": "i",
                "uVar4": "bit_mask",
                "uVar5": "mask_byte_offset",
                "uVar6": "byte_index",
                "uVar7": "bit_index"
            },
            "code": "int set_bits_according_to_mask_08000a7a(int mask_address, int data_address, int mask_length, int data_length, int data_offset){\n  int mask_index = FUN_08004640(*(undefined *)(mask_address + 0xb),*(undefined *)(mask_address + 0xc),mask_length,data_length,data_length);\n  int data_index = FUN_08004640(*(undefined *)(mask_address + 0xd),*(undefined *)(mask_address + 0xe));\n  uint bit_mask = 0;\n  uint mask_byte_offset = 7;\n  for (uint i = 0; i < data_index; i++) {\n    uint byte_index = (i + mask_index) * 0x100000 >> 0x18;\n    uint bit_index = i + mask_index & 0xf;\n    if (((int)(uint)*(byte *)(mask_address + mask_byte_offset + 9) >> bit_mask & 1U) == 0) {\n      *(ushort *)(data_address + byte_index * 2) = *(ushort *)(data_address + byte_index * 2) & ~(ushort)(1 << bit_index);\n    }\n    else {\n      *(ushort *)(data_address + byte_index * 2) = (ushort)(1 << bit_index) | *(ushort *)(data_address + byte_index * 2);\n    }\n    bit_mask = bit_mask + 1 & 0xff;\n    if (7 < bit_mask) {\n      mask_byte_offset = mask_byte_offset + 1 & 0xff;\n      bit_mask = 0;\n    }\n  }\n  *(undefined *)(mask_address + 0x49) = 6;\n  FUN_0800076c(mask_address);\n  return 8;\n}",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a7a",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "set_bits_according_to_mask_08000a7a"
        },
        "FUN_08003474": {
            "renaming": {
                "FUN_08003474": "do_nothing_08003474"
            },
            "code": "\nvoid do_nothing_08003474(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003474",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "do_nothing_08003474"
        },
        "FUN_08004cb0": {
            "renaming": {
                "FUN_08004cb0": "convert_data_to_string_08004cb0",
                "param_1": "input_data",
                "param_2": "data",
                "param_3": "output_length",
                "param_4": "conversion_parameter",
                "param_5": "conversion_function",
                "iVar1": "result",
                "uVar2": "data_type",
                "uVar3": "output_length_so_far",
                "bVar4": "has_padding",
                "max_output_length": "max_output_length",
                "output_length_with_padding": "output_length_with_padding",
                "data_has_padding": "data_has_padding"
            },
            "code": "undefined4 convert_data_to_string_08004cb0(undefined4 param_1, uint *data, uint *output_length, undefined4 param_4, code *conversion_function)\n{\n  int i;\n  uint max_output_length;\n  uint output_length_with_padding = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    output_length_with_padding = data[2];\n  }\n  *output_length = output_length_with_padding;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output_length = output_length_with_padding + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output_length = *output_length + 2;\n  }\n  uint data_type = *data & 6;\n  if (data_type == 0) {\n    for (; (int)data_type < (int)(data[3] - *output_length); data_type = data_type + 1) {\n      int result = (*conversion_function)(param_1, param_4, (int)data + 0x19, 1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  uint data_has_padding = (uint)*(byte *)((int)data + 0x43);\n  if (data_has_padding != 0) {\n    data_has_padding = 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + data_has_padding + 0x43) = 0x30;\n    *(undefined *)((int)data + data_has_padding + 0x44) = *(undefined *)((int)data + 0x45);\n    data_has_padding = data_has_padding + 2;\n  }\n  int result = (*conversion_function)(param_1, param_4, (int)data + 0x43, data_has_padding);\n  if (result != -1) {\n    max_output_length = data[3];\n    bool has_padding = (*data & 6) == 4;\n    if (has_padding) {\n      max_output_length = max_output_length - *output_length;\n    }\n    if (has_padding) {\n      max_output_length = max_output_length & ~((int)max_output_length >> 0x1f);\n    }\n    else {\n      max_output_length = 0;\n    }\n    if ((int)data[4] < (int)data[2]) {\n      max_output_length = max_output_length + (data[2] - data[4]);\n    }\n    uint output_length_so_far = 0;\n    while (true) {\n      if (max_output_length == output_length_so_far) {\n        return 0;\n      }\n      result = (*conversion_function)(param_1, param_4, (int)data + 0x1a, 1);\n      if (result == -1) {\n        break;\n      }\n      output_length_so_far = output_length_so_far + 1;\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb0",
            "calling": [
                "FUN_08004d9c"
            ],
            "imported": false,
            "current_name": "convert_data_to_string_08004cb0"
        },
        "FUN_08003594": {
            "renaming": {
                "FUN_08003594": "execute_code_if_not_null_08003594",
                "PTR_DAT_080035a4": "PTR_TO_CODE",
                "PTR_DAT_080035a8": "PTR_TO_ARGUMENT"
            },
            "code": "void execute_code_if_not_null_08003594(void)\n{\n  code* ptr_to_code = *(code**)PTR_DAT_080035a4;\n  if (ptr_to_code != NULL)\n  {\n    ptr_to_code(*(undefined4*)PTR_DAT_080035a8);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003594",
            "calling": [
                "FUN_0800262c"
            ],
            "imported": false,
            "current_name": "execute_code_if_not_null_08003594"
        },
        "FUN_08002940": {
            "renaming": {
                "FUN_08002940": "clear_flags_08002940",
                "param_1": "memory_address",
                "*param_1": "*memory_address",
                "uint": "uint32_t",
                "0xc": "0x0C",
                "0x14": "0x14",
                "*(uint *)(*param_1 + 0xc)": "*flag1_address",
                "*(uint *)(*param_1 + 0x14)": "*flag2_address",
                "0xfffffedf": "0xFFFFFEDF",
                "0xfffffffe": "0xFFFFFFFE",
                "undefined": "char",
                "(int)param_1 + 0x3a": "(int)memory_address + 0x3a"
            },
            "code": "void clear_flags_08002940(int *memory_address)\n{\n  uint32_t *flag1_address = (uint32_t *)(*memory_address + 0xc);\n  uint32_t *flag2_address = (uint32_t *)(*memory_address + 0x14);\n  *flag1_address = *flag1_address & 0xfffffedf;\n  *flag2_address = *flag2_address & 0xfffffffe;\n  *(char *)((int)memory_address + 0x3a) = 0x20;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002940",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "clear_flags_08002940"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "initialize_application_08004204",
                "FUN_0800346c": "initialize_network"
            },
            "code": "void initialize_application_08004204(void)\n{\n  initialize_network();\n  return;\n}",
            "called": [
                "FUN_0800346c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "FUN_08000b54",
                "FUN_0800076c"
            ],
            "imported": false,
            "current_name": "initialize_application_08004204"
        },
        "FUN_08003476": {
            "renaming": {
                "FUN_08003476": "perform_operations_08003476",
                "FUN_08000e18": "initialize_system",
                "FUN_08000f4e": "perform_data_processing",
                "do_nothing_08003474": "do_nothing"
            },
            "code": "void perform_operations_08003476(void)\n{\n  initialize_system();\n  perform_data_processing();\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08000e18",
                "FUN_08003474",
                "FUN_08000f4e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003476",
            "calling": [],
            "imported": false,
            "current_name": "perform_operations_08003476"
        },
        "FUN_08004444": {
            "renaming": {
                "FUN_08004444": "set_value_at_offset_08004444",
                "param_1": "offset",
                "param_2": "value",
                "uVar1": "result",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void set_value_at_offset_08004444(int offset, uint value) {\n    undefined2 result;\n    code *jump_table;\n\n    if (value < 0x60) {\n        result = *(undefined2 *)(PTR_DAT_0800445c + value * 2);\n    }\n    else {\n        result = 0xffff;\n    }\n    *(undefined2 *)(offset + 0x12e) = result;\n    (*jump_table)();\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004444",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_08004444"
        },
        "FUN_0800346c": {
            "renaming": {
                "FUN_0800346c": "initialize_program_0800346c",
                "FUN_08000e30": "call_initialize_memory"
            },
            "code": "void initialize_program_0800346c(void)\n{\n  call_initialize_memory();\n  return;\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800346c",
            "calling": [
                "FUN_08004204"
            ],
            "imported": false,
            "current_name": "initialize_program_0800346c"
        },
        "FUN_080053a0": {
            "renaming": {
                "FUN_080053a0": "initialize_data_080053a0",
                "param_1": "data_address",
                "uVar1": "zero",
                "iVar2": "ptr",
                "bVar3": "is_ptr_equal_to_data_address",
                "PTR_PTR_DAT_080053f8": "PTR_PTR_DATA",
                "PTR_LAB_08005320_1_080053fc": "PTR_LAB_DATA"
            },
            "code": "void initialize_data_080053a0(int data_address)\n{\n  undefined4 zero = 0;\n  int ptr = *(int *)PTR_PTR_DAT_080053f8;\n  *(undefined **)(data_address + 0x28) = PTR_LAB_08005320_1_080053fc;\n  bool is_ptr_equal_to_data_address = data_address == ptr;\n  if (is_ptr_equal_to_data_address) {\n    ptr = 1;\n  }\n  if (is_ptr_equal_to_data_address) {\n    *(int *)(data_address + 0x18) = ptr;\n  }\n  undefined4 first = FUN_08005400();\n  *(undefined4 *)(data_address + 4) = first;\n  undefined4 second = FUN_08005400(data_address);\n  *(undefined4 *)(data_address + 8) = second;\n  undefined4 third = FUN_08005400(data_address);\n  *(undefined4 *)(data_address + 0xc) = third;\n  FUN_0800532c(*(undefined4 *)(data_address + 4), 4, 0);\n  FUN_0800532c(*(undefined4 *)(data_address + 8), 9, 1);\n  FUN_0800532c(*(undefined4 *)(data_address + 0xc), 0x12, 2);\n  *(undefined4 *)(data_address + 0x18) = 1;\n}\n",
            "called": [
                "FUN_08005400",
                "FUN_0800532c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053a0",
            "calling": [
                "FUN_080052cc",
                "FUN_08005400",
                "FUN_08004fdc",
                "FUN_08004a34",
                "FUN_08004a84",
                "FUN_080050d0"
            ],
            "imported": false,
            "current_name": "initialize_data_080053a0"
        },
        "FUN_0800201c": {
            "renaming": {
                "FUN_0800201c": "check_parameters_0800201c",
                "param_1": "params",
                "puVar1": "ptr1",
                "iVar2": "var1",
                "iVar3": "var2",
                "uVar4": "result",
                "bVar5": "bool_val"
            },
            "code": "\nundefined4 check_parameters_0800201c(uint *params)\n\n{\n  uint *ptr1;\n  int var1;\n  int var2;\n  undefined4 result;\n  bool bool_val;\n  \n  ptr1 = DAT_080022d0;\n  if (params == (uint *)0x0) {\n    return 1;\n  }\n  if ((*params & 1) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 4) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) != 0)))) {\n      if (((*DAT_080022d0 & 0x20000) != 0) && (params[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (params[1] == 0x10000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x10000;\n      }\n      else if (params[1] == 0x50000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x40000;\n        *ptr1 = *ptr1 | 0x10000;\n      }\n      else {\n        *DAT_080022d0 = *DAT_080022d0 & 0xfffeffff;\n        *ptr1 = *ptr1 & 0xfffbffff;\n      }\n      if (params[1] == 0) {\n        var1 = FUN_08000e30();\n        while ((*DAT_080022d0 & 0x20000) != 0) {\n          var2 = FUN_08000e30();\n          if (100 < (uint)(var2 - var1)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        var1 = FUN_08000e30();\n        while ((*DAT_080022d0 & 0x20000) == 0) {\n          var2 = FUN_08000e30();\n          if (100 < (uint)(var2 - var1)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*params & 2) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 0) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) == 0)))) {\n      if (((*DAT_080022d0 & 2) != 0) && (params[3] != 1)) {\n        return 1;\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | params[4] << 3;\n    }\n    else if (params[3] == 0) {\n      *DAT_080022d4 = 0;\n      var1 = FUN_08000e30();\n      while ((*DAT_080022d0 & 2) != 0) {\n        var2 = FUN_08000e30();\n        if (2 < (uint)(var2 - var1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_080022d4 = 1;\n      var1 = FUN_08000e30();\n      while ((*DAT_080022d0 & 2) == 0) {\n        var2 = FUN_08000e30();\n        if (2 < (uint)(var2 - var1)) {\n          return 3;\n        }\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | params[4] << 3;\n    }\n  }\n  if ((*params & 8) != 0) {\n    if (params[5] == 0) {\n      *DAT_080022d8 = 0;\n      var1 = FUN_08000e30();\n      while ((DAT_080022d0[0x1d] & 2) != 0) {\n        var2 = FUN_08000e30();\n        if (2 < (uint)(var2 - var1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_080022d8 = 1;\n      var1 = FUN_08000e30();\n      while ((DAT_080022d0[0x1d] & 2) == 0) {\n        var2 = FUN_08000e30();\n        if (2 < (uint)(var2 - var1)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*params & 4) != 0) {\n    bool_val = (DAT_080022d0[0x10] & 0x10000000) == 0;\n    if (bool_val) {\n      DAT_080022d0[0x10] = DAT_080022d0[0x10] | 0x10000000;\n    }\n    if ((*DAT_080022dc & 0x100) == 0) {\n      *DAT_080022dc = *DAT_080022dc | 0x100;\n      var1 = FUN_08000e30();\n      while ((*DAT_080022dc & 0x100) == 0) {\n        var2 = FUN_08000e30();\n        if (2 < (uint)(var2 - var1)) {\n          return 3;\n        }\n      }\n    }\n    ptr1 = DAT_080022d0;\n    if (params[2] == 1) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 1;\n    }\n    else if (params[2] == 5) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 4;\n      ptr1[0x1c] = ptr1[0x1c] | 1;\n    }\n    else {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] & 0xfffffffe;\n      ptr1[0x1c] = ptr1[0x1c] & 0xfffffffb;\n    }\n    if (params[2] == 0) {\n      var1 = FUN_08000e30();\n      while ((DAT_080022d0[0x1c] & 2) != 0) {\n        var2 = FUN_08000e30();\n        if (5000 < (uint)(var2 - var1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      var1 = FUN_08000e30();\n      while ((DAT_080022d0[0x1c] & 2) == 0) {\n        var2 = FUN_08000e30();\n        if (5000 < (uint)(var2 - var1)) {\n          return 3;\n        }\n      }\n    }\n    if (bool_val) {\n      DAT_080023ac[0x10] = DAT_080023ac[0x10] & 0xefffffff;\n    }\n  }\n  if (params[6] == 0) {\n    result = 0;\n  }\n  else if ((DAT_080023ac[2] & 0xc) == 8) {\n    result = 1;\n  }\n  else if (params[6] == 2) {\n    *DAT_080023b0 = 0;\n    var1 = FUN_08000e30();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        DAT_080023ac[1] =\n             params[7] | params[8] | params[9] << 6 | ((params[10] >> 1) - 1) * 0x10000 |\n             params[0xb] << 0x18;\n        *DAT_080023b0 = 1;\n        var1 = FUN_08000e30();\n        do {\n          if ((*DAT_080023ac & 0x2000000) != 0) {\n            return 0;\n          }\n          var2 = FUN_08000e30();\n        } while ((uint)(var2 - var1) < 3);\n        return 3;\n      }\n      var2 = FUN_08000e30();\n    } while ((uint)(var2 - var1) < 3);\n    result = 3;\n  }\n  else {\n    *DAT_080023b0 = 0;\n    var1 = FUN_08000e30();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        return 0;\n      }\n      var2 = FUN_08000e30();\n    } while ((uint)(var2 - var1) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800201c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "check_parameters_0800201c"
        },
        "FUN_080028d4": {
            "renaming": {
                "FUN_080028d4": "update_bits_at_position_080028d4",
                "param_1": "ptr_data",
                "param_2": "bit_position",
                "param_3": "new_value",
                "uint": "uint32_t",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void update_bits_at_position_080028d4(int* PTR_data, uint8_t bit_position, int new_value) {\n    uint32_t* PTR_data_as_uint32 = (uint32_t*) PTR_data;\n    uint32_t mask = ~(4 << (bit_position & 0xff));\n    *PTR_data_as_uint32 = (*PTR_data_as_uint32 & mask) | (new_value << (bit_position & 0xff));\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d4",
            "calling": [
                "FUN_080028f0"
            ],
            "imported": false,
            "current_name": "update_bits_at_position_080028d4"
        },
        "FUN_0800293c": {
            "renaming": {
                "FUN_0800293c": "do_nothing_0800293c"
            },
            "code": "\nvoid do_nothing_0800293c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293c",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_0800293c"
        },
        "FUN_080040ec": {
            "renaming": {
                "FUN_080040ec": "process_data_080040ec",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "FUN_08003d18": "process_data_helper"
            },
            "code": "void process_data_080040ec(undefined4 data1, undefined4 data2, undefined4 data3, undefined4 data4)\n{\n  process_data_080040ec_helper(data2, data3, data3, data4, data4);\n  return;\n}",
            "called": [
                "FUN_08003d18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040ec",
            "calling": [
                "FUN_0800562a"
            ],
            "imported": false,
            "current_name": "process_data_080040ec"
        },
        "FUN_08001460": {
            "renaming": {
                "FUN_08001460": "process_input_08001460",
                "param_1": "input_ptr",
                "param_2": "input_data",
                "param_3": "input_len",
                "param_4": "output_ptr",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "code": "uint32_t process_input_08001460(uint32_t **input_ptr, uint32_t *input_data, int input_len, uint32_t *output_ptr) {\n    uint32_t result = 0;\n    uint32_t *ptr = *input_ptr;\n    if (*(char *)((int)input_ptr + 0x3d) != '(') {\n        result = 2;\n    }\n    else if (input_data == NULL || input_len == 0 || *(char *)(input_ptr + 0xf) == '\\x01') {\n        result = 1;\n    }\n    else {\n        *(undefined *)(input_ptr + 0xf) = 1;\n        if ((*ptr & 1) == 0) {\n            *ptr = *ptr | 1;\n        }\n        **input_ptr = **input_ptr & 0xfffff7ff;\n        *(undefined *)((int)input_ptr + 0x3d) = 0x29;\n        *(undefined *)((int)input_ptr + 0x3e) = 0x20;\n        result = 0;\n        input_ptr[0x10] = (uint32_t *)0x0;\n        input_ptr[9] = input_data;\n        *(short *)((int)input_ptr + 0x2a) = (short)input_len;\n        input_ptr[0xb] = output_ptr;\n        *(undefined2 *)(input_ptr + 10) = *(undefined2 *)((int)input_ptr + 0x2a);\n        *(undefined *)(input_ptr + 0xf) = 0;\n        (*input_ptr)[1] = (*input_ptr)[1] | 0x700;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001460",
            "calling": [
                "FUN_08003880"
            ],
            "imported": false,
            "current_name": "process_input_08001460"
        },
        "FUN_08003880": {
            "renaming": {
                "FUN_08003880": "processInput_08003880",
                "param_1": "inputAddress",
                "param_2": "flag",
                "param_3": "expectedValue",
                "param_4": "param_4",
                "iVar1": "processAddress"
            },
            "code": "void processInput_08003880(int inputAddress, int flag, int expectedValue, undefined4 param_4) {\n  int processAddress;\n  processAddress = FUN_0800387c();\n  if (expectedValue == *(int *)(inputAddress + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(processAddress + 0x88) = 0;\n      *(undefined *)(processAddress + 0x5e) = 0;\n      if (*(code **)(processAddress + 100) != (code *)0x0) {\n        (**(code **)(processAddress + 100))();\n      }\n      FUN_08001460(inputAddress,processAddress + 0x68,*(undefined *)(processAddress + 0x88),8);\n      return;\n    }\n    *(undefined *)(processAddress + 0x5e) = 1;\n    FUN_080014ec(inputAddress,processAddress + 0x68,0x20,8,param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_0800387c",
                "FUN_08001460",
                "FUN_080014ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003880",
            "calling": [
                "FUN_0800165a"
            ],
            "imported": false,
            "current_name": "processInput_08003880"
        },
        "FUN_08002f4c": {
            "renaming": {
                "FUN_08002f4c": "set_flag_and_call_function_08002f4c",
                "param_1": "flag_ptr",
                "*(uint *)(*param_1 + 0xc)": "*(uint32_t *)(*flag_ptr + 0xc)",
                "*(undefined *)((int)param_1 + 0x39)": "*(char *)((int)flag_ptr + 0x39)",
                "FUN_08003f48": "call_function"
            },
            "code": "int set_flag_and_call_function_08002f4c(int *flag_ptr) {\n  uint32_t *flag_value_ptr = (uint32_t *)(*flag_ptr + 0xc);\n  *flag_value_ptr = *flag_value_ptr & 0xffffffbf;\n  char *flag_char_ptr = (char *)((int)flag_ptr + 0x39);\n  *flag_char_ptr = 0x20;\n  call_function();\n  return 0;\n}",
            "called": [
                "FUN_08003f48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f4c",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "set_flag_and_call_function_08002f4c"
        },
        "FUN_080035bc": {
            "renaming": {
                "FUN_080035bc": "set_flags_and_values_080035bc",
                "puVar1": "flags_and_values_ptr"
            },
            "code": "void set_flags_and_values_080035bc(void)\n{\n  uint *flags_and_values_ptr;\n  flags_and_values_ptr = DAT_080035f0;\n  *DAT_080035f0 |= 1;\n  flags_and_values_ptr[2] = 0;\n  *flags_and_values_ptr &= 0xfef6ffff;\n  flags_and_values_ptr[1] = DAT_080035f4;\n  *flags_and_values_ptr &= 0xfffbffff;\n  flags_and_values_ptr[3] = 0;\n  *(undefined4 *)(DAT_080035f8 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035bc",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_080035bc"
        },
        "FUN_080025ec": {
            "renaming": {
                "FUN_080025ec": "calculate_shifted_value_080025ec",
                "uVar1": "shifted_value",
                "FUN_080025e0": "get_initial_value",
                "PTR_DAT_08002608": "data_array",
                "DAT_08002604": "data_address"
            },
            "code": "uint calculate_shifted_value_080025ec(void)\n{\n  uint shifted_value;\n  shifted_value = get_initial_value();\n  uint index = (uint)(*(int *)(PTR_DAT_08002608 + 8) << 0x13) >> 0x1d;\n  shifted_value = shifted_value >> index;\n  return shifted_value;\n}",
            "called": [
                "FUN_080025e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025ec",
            "calling": [
                "FUN_080029c8"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_080025ec"
        },
        "FUN_08000c4c": {
            "renaming": {
                "FUN_08000c4c": "initialize_08000c4c",
                "FUN_080005e4": "set_initial_value",
                "FUN_08000600": "set_memory"
            },
            "code": "void initialize_08000c4c(void)\n{\n  set_initial_value(0);\n  set_memory(PTR_DATA_08000c60, 0x4b00);\n  return;\n}",
            "called": [
                "FUN_08000600",
                "FUN_080005e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c4c",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "initialize_08000c4c"
        },
        "FUN_08004a60": {
            "renaming": {
                "FUN_08004a60": "count_chars_08004a60",
                "param_1": "start",
                "param_2": "end",
                "param_3": "str",
                "param_4": "length",
                "puVar2": "current_char",
                "iVar3": "current_index",
                "iVar1": "count",
                "FUN_08004a34": "count_chars_helper"
            },
            "code": "int count_chars_08004a60(int start, int end, char *str, int length) {\n  int count = 0;\n  char *current_char;\n  int current_index = 0;\n  current_char = str + length;\n  while (current_index != end) {\n    if (str == current_char) {\n      return 0;\n    }\n    count = count_chars_08004a60_helper(start, *str, end, length, current_index);\n    current_index = count + 1;\n    str = str + 1;\n  }\n  return count;\n}",
            "called": [
                "FUN_08004a34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a60",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "count_chars_08004a60"
        },
        "FUN_080050d0": {
            "renaming": {
                "FUN_080050d0": "decode_packet_080050d0",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "result",
                "uVar2": "flags",
                "iVar3": "header_offset"
            },
            "code": "uint32_t decode_packet_080050d0(uint32_t *output, uint32_t *input)\n{\n  uint32_t result;\n  uint16_t flags;\n  int32_t header_offset;\n  header_offset = *(int32_t *)PTR_PTR_DAT_0800519c;\n  if ((header_offset != 0) && (*(int32_t *)(header_offset + 0x18) == 0)) {\n    cleanup(header_offset);\n  }\n  if (input == (uint32_t *)PTR_DAT_080051a0) {\n    input = *(uint32_t **)(header_offset + 4);\n  }\n  else if (input == (uint32_t *)PTR_DAT_080051a4) {\n    input = *(uint32_t **)(header_offset + 8);\n  }\n  else if (input == (uint32_t *)PTR_DAT_080051a8) {\n    input = *(uint32_t **)(header_offset + 0xc);\n  }\n  flags = *(uint16_t *)(input + 3);\n  result = (uint32_t)flags;\n  if ((int32_t)(result << 0x1c) >= 0) {\n    if ((int32_t)(result << 0x1b) >= 0) {\n      *output = 9;\n      goto LAB_08005100;\n    }\n    if ((int32_t)(result << 0x1d) < 0) {\n      if ((uint32_t *)input[0xd] != (uint32_t *)0x0) {\n        if ((uint32_t *)input[0xd] != input + 0x11) {\n          cleanup(output);\n        }\n        input[0xd] = 0;\n      }\n      *(uint16_t *)(input + 3) = *(uint16_t *)(input + 3) & 0xffdb;\n      input[1] = 0;\n      *input = input[4];\n    }\n    *(uint16_t *)(input + 3) = *(uint16_t *)(input + 3) | 8;\n  }\n  if ((input[4] == 0) && ((*(uint16_t *)(input + 3) & 0x280) != 0x200)) {\n    cleanup(output,input);\n  }\n  flags = *(uint16_t *)(input + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if ((int32_t)((uint32_t)flags << 0x1e) >= 0) {\n      result = input[5];\n    }\n    input[2] = result;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (input[4] == 0) {\n    flags = *(uint16_t *)(input + 3);\n    result = (int16_t)flags & 0x80;\n    if (result != 0) {\n      *(uint16_t *)(input + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_080054fc",
                "FUN_080053a0",
                "FUN_080048dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080050d0",
            "calling": [
                "FUN_08004a34",
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "decode_packet_080050d0"
        },
        "FUN_08004978": {
            "renaming": {
                "FUN_08004978": "allocate_memory_block_08004978",
                "param_1": "out_block_start_address",
                "param_2": "requested_block_size",
                "puVar1": "unused_pointer",
                "uVar2": "new_function_result",
                "puVar3": "current_block_pointer",
                "iVar4": "difference",
                "uVar5": "block_difference",
                "puVar6": "previous_block_pointer",
                "puVar7": "block_pointer",
                "uVar8": "aligned_block_size",
                "PTR_DAT_08004a2c": "current_heap_pointer",
                "PTR_DAT_08004a30": "new_function_pointer"
            },
            "code": "uint allocate_memory_block_08004978(undefined4 *out_block_start_address, uint requested_block_size)\\n\\\n{\\n\\\n    uint *current_block_pointer;\\n\\\n    uint *previous_block_pointer;\\n\\\n    uint block_size;\\n\\\n    uint aligned_block_size;\\n\\\n    uint *new_block_pointer;\\n\\\n    \\n\\\n    aligned_block_size = (requested_block_size + 3 & 0xfffffffc) + 8;\\n\\\n    if (aligned_block_size < 0xc) {\\n\\\n        aligned_block_size = 0xc;\\n\\\n    }\\n\\\n    if (((int)aligned_block_size < 0) || (aligned_block_size < requested_block_size)) {\\n\\\n        *out_block_start_address = 0xc;\\n\\\n    }\\n\\\n    else {\\n\\\n        do_nothing_0800557c();\\n\\\n        current_block_pointer = *(uint **)PTR_DAT_08004a2c;\\n\\\n        previous_block_pointer = *(uint **)PTR_DAT_08004a2c;\\n\\\n        while (current_block_pointer != (uint *)0x0) {\\n\\\n            block_size = *current_block_pointer - aligned_block_size;\\n\\\n            if (-1 < (int)block_size) {\\n\\\n                if (block_size < 0xc) {\\n\\\n                    if (previous_block_pointer == current_block_pointer) {\\n\\\n                        aligned_block_size = previous_block_pointer[1];\\n\\\n                    }\\n\\\n                    else {\\n\\\n                        aligned_block_size = current_block_pointer[1];\\n\\\n                    }\\n\\\n                    if (previous_block_pointer == current_block_pointer) {\\n\\\n                        *(uint **)PTR_DAT_08004a2c = aligned_block_size;\\n\\\n                        current_block_pointer = previous_block_pointer;\\n\\\n                    }\\n\\\n                    else {\\n\\\n                        previous_block_pointer[1] = aligned_block_size;\\n\\\n                    }\\n\\\n                }\\n\\\n                else {\\n\\\n                    *current_block_pointer = block_size;\\n\\\n                    *(uint *)((int)current_block_pointer + block_size) = aligned_block_size;\\n\\\n                    current_block_pointer = (uint *)((int)current_block_pointer + block_size);\\n\\\n                }\\n\\\n                goto LAB_080049dc;\\n\\\n            }\\n\\\n            previous_block_pointer = current_block_pointer;\\n\\\n            current_block_pointer = (uint *)current_block_pointer[1];\\n\\\n        }\\n\\\n        if (*(int *)PTR_DAT_08004a30 == 0) {\\n\\\n            uint new_function_result = FUN_0800500c(out_block_start_address);\\n\\\n            *(undefined4 *)PTR_DAT_08004a30 = new_function_result;\\n\\\n        }\\n\\\n        new_block_pointer = (uint *)FUN_0800500c(out_block_start_address,aligned_block_size);\\n\\\n        if ((new_block_pointer != (uint *)0xffffffff) &&\\n\\\n            ((current_block_pointer = (uint *)((int)new_block_pointer + 3U & 0xfffffffc), new_block_pointer == current_block_pointer ||\\n\\\n            (block_size = FUN_0800500c(out_block_start_address,(int)current_block_pointer - (int)new_block_pointer), block_size != -1)))) {\\n\\\n            *current_block_pointer = aligned_block_size;\\n\\\n            LAB_080049dc:\\n\\\n            do_nothing_0800557e(out_block_start_address);\\n\\\n            aligned_block_size = (int)current_block_pointer + 0xbU & 0xfffffff8;\\n\\\n            block_size = aligned_block_size - (int)(current_block_pointer + 1);\\n\\\n            if (block_size != 0) {\\n\\\n                *(int *)((int)current_block_pointer + block_size) = -block_size;\\n\\\n                return aligned_block_size;\\n\\\n            }\\n\\\n            return aligned_block_size;\\n\\\n        }\\n\\\n        *out_block_start_address = 0xc;\\n\\\n        do_nothing_0800557e(out_block_start_address);\\n\\\n    }\\n\\\n    return 0;\\n\\\n}",
            "called": [
                "FUN_0800500c",
                "FUN_0800557e",
                "FUN_0800557c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004978",
            "calling": [
                "FUN_080054fc",
                "FUN_08005374"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08004978"
        },
        "FUN_08002d0c": {
            "renaming": {
                "FUN_08002d0c": "validate_inputs_08002d0c",
                "param_1": "input",
                "param_2": "input_length",
                "param_3": "expected_result",
                "param_4": "comparison_value",
                "param_5": "max_iterations",
                "iVar1": "difference"
            },
            "code": "uint validate_inputs_08002d0c(uint **input, uint input_length, uint expected_result, int comparison_value, uint max_iterations) {\n    int difference;\n    while (max_iterations != 0xffffffff && (max_iterations != 0 && (difference = calculate_difference(), (uint)(difference - comparison_value) <= max_iterations))) {\n        if (((input_length & ~**input) == 0) != expected_result) {\n            return 0;\n        }\n        (*input)[3] = (*input)[3] & 0xfffffe5f;\n        (*input)[5] = (*input)[5] & 0xfffffffe;\n        *((char*)input + 0x39) = 0x20;\n        *((char*)input + 0x3a) = 0x20;\n        *(input + 0xe) = 0;\n        return 3;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d0c",
            "calling": [
                "FUN_08002dd0"
            ],
            "imported": false,
            "current_name": "validate_inputs_08002d0c"
        },
        "FUN_08001902": {
            "renaming": {
                "FUN_08001902": "do_nothing_08001902"
            },
            "code": "\nvoid do_nothing_08001902(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001902",
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "imported": false,
            "current_name": "do_nothing_08001902"
        },
        "FUN_08001904": {
            "renaming": {
                "FUN_08001904": "process_input_08001904",
                "param_1": "input",
                "puVar1": "ptr_to_input_9",
                "input_2a": "input_2a",
                "input_3d": "input_3d",
                "input_3e": "input_3e",
                "**param_1": "input_ptr[0]",
                "(*param_1)[1]": "input_ptr[1]",
                "param_1[9]": "input[9]",
                "(uint *)((int)puVar1 + 1)": "(uint32_t *)((intptr_t)ptr_to_input_9 + 1)",
                "(char)(*param_1)[4]": "(char)input_ptr[4]",
                "*(undefined *)((int)param_1 + 0x3d)": "input_3d",
                "*(undefined *)((int)param_1 + 0x3e)": "input_3e",
                "*(short *)((int)param_1 + 0x2a)": "input_2a"
            },
            "code": "uint32_t process_input_08001904(uint32_t **input)\n{\n  uint32_t *input_ptr = *input;\n  uint32_t *ptr_to_input_9 = input[9];\n  uint16_t input_2a = (uint16_t)(intptr_t)(input + 0x2a);\n  char input_3d = (char)(intptr_t)(input + 0x3d);\n  char input_3e = (char)(intptr_t)(input + 0x3e);\n  \n  if (input_3d == '\"') {\n    if (input_2a < 4) {\n      if (input_2a < 2) {\n        input_ptr[0] &= 0xfffffbff;\n        input_ptr[1] &= 0xfffff8ff;\n        *ptr_to_input_9 = (uint32_t *)((intptr_t)ptr_to_input_9 + 1);\n        *(char *)ptr_to_input_9 = (char)input_ptr[4];\n        input_2a--;\n        input_3d = 0x20;\n        input[0xc] = (uint32_t *)0x0;\n        if (input_3e == '@') {\n          input_3e = 0;\n          do_nothing_08001902();\n        }\n        else {\n          input_3e = 0;\n          do_nothing_080015b8();\n        }\n      }\n    }\n    else {\n      *ptr_to_input_9 = (uint32_t *)((intptr_t)ptr_to_input_9 + 1);\n      *(char *)ptr_to_input_9 = (char)input_ptr[4];\n      input_2a--;\n      if (input_2a == 3) {\n        input_ptr[1] &= 0xfffffbff;\n      }\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015b8",
                "FUN_08001902"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001904",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_08001904"
        },
        "FUN_08000c64": {
            "renaming": {
                "FUN_08000c64": "print_data_08000c64",
                "in_r3": "argument1",
                "PTR_DAT_08000c78": "data_pointer1",
                "PTR_DAT_08000c74": "data_pointer2"
            },
            "code": "void print_data_08000c64(void)\n{\n  undefined4 argument1;\n  undefined4 argument2;\n  int buffer_size = 16;\n  FUN_08000b54(PTR_DAT_08000c78, PTR_DAT_08000c74, buffer_size, argument1, argument2);\n  return;\n}",
            "called": [
                "FUN_08000b54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c64",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "print_data_08000c64"
        },
        "FUN_08002ffc": {
            "renaming": {
                "FUN_08002ffc": "process_data_08002ffc",
                "param_1": "data",
                "iVar1": "result",
                "puVar3": "data_ptr",
                "uVar2": "data_2",
                "uVar4": "bit_value",
                "uVar5": "data_1"
            },
            "code": "void process_data_08002ffc(uint **data)\n{\n  uint *data_ptr = *data;\n  uint data_1 = *data_ptr;\n  uint data_2 = data_ptr[3];\n  \n  if ((((data_1 & 0xf) == 0) && ((data_1 & 0x20) != 0)) && ((data_2 & 0x20) != 0)) {\n    process_data_08002ffc_1(data);\n    return;\n  }\n  \n  if (((data_1 & 0xf) == 0) || ((data_ptr[5] & 1) == 0 && ((data_2 & 0x120) == 0)))) {\n    if (((data_1 & 0x80) != 0) && ((data_2 & 0x80) != 0)) {\n      process_data_08002ffc_2(data);\n      return;\n    }\n    if (((data_1 & 0x40) != 0) && ((data_2 & 0x40) != 0)) {\n      process_data_08002ffc_3(data);\n    }\n  }\n  else {\n    if (((data_1 & 1) != 0) && ((data_2 & 0x100) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 1);\n    }\n    if (((data_1 & 4) != 0) && ((data_ptr[5] & 1) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 2);\n    }\n    if (((data_1 & 2) != 0) && ((data_ptr[5] & 1) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 4);\n    }\n    if (((data_1 & 8) != 0) && ((data_ptr[5] & 1) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 8);\n    }\n    if (data[0xf] != (uint *)0x0) {\n      if (((data_1 & 0x20) != 0) && ((data_2 & 0x20) != 0)) {\n        process_data_08002ffc_1(data);\n      }\n      if ((((uint)data[0xf] & 8) == 0) && (((*data)[5] & 0x40) == 0)) {\n        do_nothing(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      process_data_08002ffc_4(data);\n      data_ptr = *data;\n      if ((data_ptr[5] & 0x40) == 0) {\n        do_nothing(data);\n        return;\n      }\n      data_ptr[5] = data_ptr[5] & 0xffffffbf;\n      if (data[0xd] == (uint *)0x0) {\n        do_nothing(data);\n        return;\n      }\n      data[0xd][0x14] = (uint *)process_data_08002ffc_5;\n      int result = function_call(data[0xd]);\n      if (result != 0) {\n        (*(code *)data[0xd][0x14])();\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08003f94",
                "FUN_08002f66",
                "FUN_08002940",
                "FUN_0800295c",
                "FUN_08002f4c",
                "FUN_08000f8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ffc",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08002ffc"
        },
        "FUN_0800387c": {
            "renaming": {
                "FUN_0800387c": "subtract_four_from_input_0800387c",
                "param_1": "input"
            },
            "code": "int subtract_four_from_input_0800387c(int input) {\n  return input - 4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800387c",
            "calling": [
                "FUN_080038d0",
                "FUN_08003880",
                "FUN_08003900"
            ],
            "imported": false,
            "current_name": "subtract_four_from_input_0800387c"
        },
        "FUN_0800351e": {
            "renaming": {
                "FUN_0800351e": "check_param_0800351e",
                "param_1": "param",
                "uVar1": "result",
                "FUN_08003506": "get_result"
            },
            "code": "int check_param_0800351e(int param) {\n  int result;\n  if (param != 0) {\n    result = get_result();\n    return result;\n  }\n  return -1;\n}",
            "called": [
                "FUN_08003506"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800351e",
            "calling": [
                "FUN_08003cc8",
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "check_param_0800351e"
        },
        "FUN_080059f8": {
            "renaming": {
                "FUN_080059f8": "do_nothing_080059f8"
            },
            "code": "\nvoid do_nothing_080059f8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059f8",
            "calling": [
                "FUN_080001ac",
                "FUN_08004884"
            ],
            "imported": false,
            "current_name": "do_nothing_080059f8"
        },
        "FUN_08002f66": {
            "renaming": {
                "FUN_08002f66": "process_data_08002f66",
                "param_1": "data_ptr",
                "pbVar1": "byte_ptr",
                "sVar2": "remaining_data",
                "puVar3": "output_ptr",
                "string_ptr": "string_ptr",
                "data_type": "data_type",
                "data_value": "data_value"
            },
            "code": "int process_data_08002f66(int *data_ptr) {\n  char *string_ptr = (char *)(data_ptr + 0x3a);\n  if (*string_ptr != '\"') {\n    return 2;\n  }\n  int data_type = data_ptr[2];\n  int data_value = *(int *)(*data_ptr + 4);\n  int *output_ptr = (int *)(data_ptr + 10);\n  if (data_type == 0x1000) {\n    if (data_ptr[4] == 0) {\n      *(unsigned short *)output_ptr = (unsigned short)((data_value << 0x17) >> 0x17);\n      output_ptr += 2;\n    }\n    else {\n      *(unsigned short *)output_ptr = (unsigned short)data_value & 0xff;\n      output_ptr += 1;\n    }\n  }\n  else {\n    if (data_ptr[4] == 0) {\n      *(char *)output_ptr = (char)data_value;\n      output_ptr += 1;\n    }\n    else {\n      *(char *)output_ptr = (char)data_value & 0x7f;\n      output_ptr += 1;\n    }\n  }\n  short remaining_data = *(short *)(data_ptr + 0x2e) - 1;\n  *(short *)(data_ptr + 0x2e) = remaining_data;\n  if (remaining_data != 0) {\n    return 0;\n  }\n  *(unsigned int *)(*data_ptr + 0xc) &= 0xfffffedf;\n  *(unsigned int *)(*data_ptr + 0x14) &= 0xfffffffe;\n  *string_ptr = ' ';\n  finalize_data_processing();\n  return 0;\n}",
            "called": [
                "FUN_08003f24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f66",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "process_data_08002f66"
        },
        "FUN_080034b6": {
            "renaming": {
                "FUN_080034b6": "process_data_080034b6",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "flag",
                "param_4": "data_info",
                "FUN_08001198": "process_data_helper"
            },
            "code": "void process_data_080034b6(undefined4 data_ptr, undefined2 data_size, int flag, undefined4 data_info) {\n  if (flag == 0) {\n    process_data_080034b6_helper(data_ptr, data_size, 0, data_info, data_info);\n    return;\n  }\n  process_data_080034b6_helper(data_ptr, data_size, 1, data_info, data_info);\n  return;\n}",
            "called": [
                "FUN_08001198"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034b6",
            "calling": [
                "FUN_080041bc"
            ],
            "imported": false,
            "current_name": "process_data_080034b6"
        },
        "FUN_08003eac": {
            "renaming": {
                "FUN_08003eac": "process_data_08003eac",
                "param_1": "data_ptr",
                "param_2": "data_value",
                "bVar1": "data_index",
                "PTR_DAT_08003ef4": "data_values",
                "PTR_DAT_08003ef8": "data_pointers",
                "PTR_DAT_08003efc": "data_operations"
            },
            "code": "void process_data_08003eac(int data_ptr, uint32_t data_value) {\n  if (data_ptr != 0) {\n    uint8_t data_index = *(uint8_t *)(data_ptr + 0x44);\n    PTR_DAT_08003ef4[data_index] = data_value;\n    PTR_DAT_08003ef8[data_index] = data_ptr;\n    process_data_08003eac_type(*(char *)(data_ptr + 0x5c));\n    process_data_08003eac_subtype(*(char *)(data_ptr + 0x5c));\n    process_data_08003eac_operation(PTR_DAT_08003efc[data_index],\n                          *(int *)(data_ptr + 0x68) + *(uint16_t *)(data_ptr + 0x6e),\n                          1);\n  }\n}\n",
            "called": [
                "FUN_08002eb2",
                "FUN_08000e60",
                "FUN_08000ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eac",
            "calling": [
                "FUN_080042e8"
            ],
            "imported": false,
            "current_name": "process_data_08003eac"
        },
        "FUN_08003e18": {
            "renaming": {
                "FUN_08003e18": "find_value_at_offset_08003e18",
                "param_1": "offset",
                "param_2": "buffer",
                "param_3": "buffer_size",
                "param_4": "default_value",
                "iVar1": "result",
                "value": "value_at_offset",
                "index": "ptr_index",
                "ptr": "ptr_at_index",
                "ptr_value": "ptr_value_at_index"
            },
            "code": "int find_value_at_offset_08003e18(int offset, char* buffer, int buffer_size, int default_value) {\n  if (offset == 0) {\n    return default_value;\n  }\n  int result = FUN_08003dd0();\n  if (result == 0) {\n    char value = *(char*)(offset + 0x45);\n    int index = (int)value * 4;\n    int* ptr = (int*)(PTR_DAT_08003e50 + index);\n    int ptr_value = *ptr;\n    FUN_08002efa(ptr_value, offset + 0x45, 1, PTR_DAT_08003e50, buffer_size);\n    return 0;\n  }\n  return default_value;\n}",
            "called": [
                "FUN_08003dd0",
                "FUN_08002efa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e18",
            "calling": [
                "FUN_080042ac"
            ],
            "imported": false,
            "current_name": "find_value_at_offset_08003e18"
        },
        "FUN_080040fc": {
            "renaming": {
                "FUN_080040fc": "set_value_and_return_negative_one_080040fc",
                "PTR_DAT_08004108": "ptr",
                "0x16": "22",
                "0xffffffff": "-1"
            },
            "code": "int set_value_and_return_negative_one_080040fc() {\n    int* PTR_DAT_08004108 = (int*) PTR_DAT_08004108;\n    *PTR_DAT_08004108 = 22;\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040fc",
            "calling": [
                "FUN_080055d0"
            ],
            "imported": false,
            "current_name": "set_value_and_return_negative_one_080040fc"
        },
        "FUN_08002dd0": {
            "renaming": {
                "FUN_08002dd0": "process_data_08002dd0",
                "param_1": "data_ptr",
                "param_2": "data_array",
                "param_3": "array_size",
                "param_4": "param_4",
                "uVar1": "func_return_value",
                "iVar2": "loop_counter"
            },
            "code": "int process_data_08002dd0(int *data_ptr, ushort *data_array, int array_size, undefined4 param_4) {\n  undefined4 func_return_value;\n  int loop_counter;\n\n  if (*(char *)((int)data_ptr + 0x39) == ' ') {\n    if (data_array == (ushort *)0x0) {\n      loop_counter = 1;\n    }\n    else if (array_size == 0) {\n      loop_counter = 1;\n    }\n    else if (*(char *)(data_ptr + 0xe) == '\\x01') {\n      loop_counter = 2;\n    }\n    else {\n      *(undefined *)(data_ptr + 0xe) = 1;\n      data_ptr[0xf] = 0;\n      *(undefined *)((int)data_ptr + 0x39) = 0x21;\n      func_return_value = get_data( );\n      *(short *)(data_ptr + 9) = (short)array_size;\n      *(short *)((int)data_ptr + 0x26) = (short)array_size;\n      while (*(short *)((int)data_ptr + 0x26) != 0) {\n        *(short *)((int)data_ptr + 0x26) = *(short *)((int)data_ptr + 0x26) + -1;\n        if (data_ptr[2] == 0x1000) {\n          loop_counter = process_data_08002dd0(data_ptr, 0x80, 0, func_return_value, param_4);\n          if (loop_counter != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = *data_array & 0x1ff;\n          if (data_ptr[4] == 0) {\n            data_array = data_array + 1;\n          }\n          else {\n            data_array = (ushort *)((int)data_array + 1);\n          }\n        }\n        else {\n          loop_counter = process_data_08002dd0(data_ptr, 0x80, 0, func_return_value, param_4);\n          if (loop_counter != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = (uint)*(byte *)data_array;\n          data_array = (ushort *)((int)data_array + 1);\n        }\n      }\n      loop_counter = process_data_08002dd0(data_ptr, 0x40, 0, func_return_value, param_4);\n      if (loop_counter == 0) {\n        *(undefined *)((int)data_ptr + 0x39) = 0x20;\n        *(undefined *)(data_ptr + 0xe) = 0;\n      }\n      else {\n        loop_counter = 3;\n      }\n    }\n  }\n  else {\n    loop_counter = 2;\n  }\n  return loop_counter;\n}\n",
            "called": [
                "FUN_08000e30",
                "FUN_08002d0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002dd0",
            "calling": [
                "FUN_08003d18"
            ],
            "imported": false,
            "current_name": "process_data_08002dd0"
        },
        "FUN_08004860": {
            "renaming": {
                "FUN_08004860": "execute_function_with_params_and_stack_pointer_08004860",
                "param_1": "function_address",
                "param_2": "param_1",
                "param_3": "stack_pointer_1_value",
                "param_4": "stack_pointer_2_value",
                "uStack_8": "stack_pointer_1_value",
                "uStack_4": "stack_pointer_2_value",
                "FUN_08004a84": "function_pointer",
                "PTR_PTR_DAT_08004880": "function_pointer_address"
            },
            "code": "void execute_function_with_params_and_stack_pointer_08004860(void* function_address, int param_1, int param_2, int* stack_pointer_1, int* stack_pointer_2){\n  int param_3 = *stack_pointer_1;\n  int param_4 = *stack_pointer_2;\n  function_pointer(function_address, param_1, param_2, &param_3, param_1, &param_3);\n  return;\n}",
            "called": [
                "FUN_08004a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004860",
            "calling": [
                "FUN_08004808"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_and_stack_pointer_08004860"
        },
        "FUN_08004622": {
            "renaming": {
                "FUN_08004622": "process_data_08004622",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "flag",
                "param_4": "callback_fn",
                "FUN_080045c8": "call_subroutine"
            },
            "code": "void process_data_08004622(undefined4 *data_ptr, uint data_size, uint flag, undefined4 callback_fn)\n{\n    if (flag != 0) {\n        call_subroutine(data_ptr, data_size, flag & 0xff);\n        return;\n    }\n    (**(code **)*data_ptr)(data_ptr, data_size & 0xff, 0, *(code **)*data_ptr, callback_fn);\n    return;\n}",
            "called": [
                "FUN_080045c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004622",
            "calling": [
                "FUN_08004638"
            ],
            "imported": false,
            "current_name": "process_data_08004622"
        },
        "FUN_08003414": {
            "renaming": {
                "FUN_08003414": "process_data_08003414",
                "param_1": "input",
                "local_4c": "data_array",
                "FUN_080034f4": "get_data",
                "PTR_DAT_08003468": "PTR_DATA",
                "FUN_0800339c": "check_data",
                "FUN_0800354a": "process_input",
                "uVar2": "flag",
                "FUN_08002864": "process_data_array",
                "FUN_080028f0": "process_data_array_v2",
                "FUN_0800268e": "finalize_data"
            },
            "code": "void process_data_08003414(int input)\n{\n  int result;\n  uint flag;\n  int data_array [16];\n  \n  data_array[0] = get_data(input, PTR_DAT_08003468);\n  if ((data_array[0] != 0) &&\n     ((((result = check_data(input), result == 0 || (result == 4)) || (result == 8)) ||\n      ((result == 0xc || (result == 0x18)))))) {\n    flag = process_input(input, PTR_DAT_08003468);\n    if ((flag & 0x100000) == 0) {\n      process_data_08003414_array(data_array,result);\n    }\n    else {\n      process_data_08003414_array_v2(data_array,result);\n    }\n    finalize_data(data_array);\n  }\n  return;\n}",
            "called": [
                "FUN_08002864",
                "FUN_0800268e",
                "FUN_080028f0",
                "FUN_0800339c",
                "FUN_080034f4",
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003414",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "process_data_08003414"
        },
        "FUN_08005718": {
            "renaming": {
                "FUN_08005718": "processResult_08005718",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "ptr",
                "iVar2": "status"
            },
            "code": "void processResult_08005718(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3) {\n  undefined *ptr = PTR_DAT_08005738;\n  *(undefined4 *)PTR_DAT_08005738 = 0;\n  int status = FUN_080040e4(arg1, arg2, arg3, arg3, arg3);\n  if ((status == -1) && (*(int *)ptr != 0)) {\n    *result = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005718",
            "calling": [
                "FUN_0800562a",
                "FUN_08005662"
            ],
            "imported": false,
            "current_name": "processResult_08005718"
        },
        "FUN_080011c0": {
            "renaming": {
                "FUN_080011c0": "set_flags_080011c0",
                "param_1": "params",
                "*(char *)((int)param_1 + 0x3e)": "c1",
                "param_1[0x11]": "i1",
                "*param_1": "i2",
                "param_1[0x14]": "i3",
                "*(char *)((int)param_1 + 0x3d)": "c2",
                "*(uint *)(*param_1 + 0x10)": "val"
            },
            "code": "int set_flags_080011c0(int *params)\n{\n    char c1 = *(char *)((int)params + 0x3e);\n    int i1 = params[0x11];\n    int i2 = *params;\n    int i3 = params[0x14];\n    char c2 = *(char *)((int)params + 0x3d);\n    uint val;\n    if (c1 == '@') {\n        val = (i3 == 0) ? (i1 & 0xfe) : (i1 & 0xffU | 1);\n    } else if (params[4] == 0x4000) {\n        val = (c2 == '!') ? (i1 & 0xfe) : (i1 & 0xffU | 1);\n    } else if (i3 == 0) {\n        val = (i1 << 0x10) >> 0x17 & 6 | 0xf0;\n    } else if (i3 == 1) {\n        val = (i1 << 0x10) >> 0x17 & 6 | 0xf1;\n    }\n    *(uint *)(i2 + 0x10) = val;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011c0",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "set_flags_080011c0"
        },
        "FUN_08000b54": {
            "renaming": {
                "FUN_08000b54": "process_data_08000b54",
                "param_1": "data",
                "param_2": "input_data",
                "param_3": "data_type",
                "bVar1": "result_byte",
                "iVar2": "result_int",
                "unaff_r5": "data_length",
                "iVar3": "output_data",
                "FUN_080006b4": "get_processed_data",
                "FUN_080007f0": "get_data_result",
                "FUN_08004204": "get_data_process",
                "FUN_080008e2": "process_data_type1",
                "FUN_08000998": "process_data_type2",
                "FUN_08000a00": "process_data_type3",
                "FUN_08000a4e": "process_data_type4",
                "FUN_08000a7a": "process_data_type5",
                "FUN_08000b04": "process_data_type6",
                "PTR_": "data_",
                "DAT_": "data_"
            },
            "code": "int process_data_08000b54(int **data, int *input_data, int PTR_type) {\n  byte result_byte;\n  int result_int;\n  uint PTR_length;\n  int output_data;\n  data[19] = input_data;\n  *(char *)(data + 24) = (char)PTR_type;\n  if (*(byte *)((int)data + 5) < 4) {\n    result_byte = (**(code **)(**data + 8))();\n    PTR_length = (uint)result_byte;\n  }\n  if (PTR_length == 0 || (int)PTR_length < 8) {\n    output_data = 0;\n  }\n  else {\n    output_data = get_processed_data(data);\n    *(char *)(data + 2) = (char)output_data;\n    if (*(char *)((int)data + 9) == *(char *)(data + 1)) {\n      result_int = get_PTR_result(data);\n      if (result_int < 1) {\n        result_int = get_PTR_process(data);\n        data[23] = (int *)((uint)*(ushort *)((int)data + 86) + result_int);\n        *(undefined *)(data + 2) = 0;\n        switch(*(undefined *)((int)data + 10)) {\n        case 1:\n        case 2:\n          output_data = process_PTR_type1(data, input_data, PTR_type);\n          break;\n        case 3:\n        case 4:\n          output_data = process_PTR_type2(data, input_data, PTR_type);\n          break;\n        case 5:\n          output_data = process_PTR_type3(data, input_data, PTR_type);\n          break;\n        case 6:\n          output_data = process_PTR_type4(data, input_data, PTR_type);\n          break;\n        case 15:\n          output_data = process_PTR_type5(data, input_data, PTR_type);\n          break;\n        case 16:\n          output_data = process_PTR_type6(data, input_data, PTR_type);\n        }\n      }\n      else {\n        if (result_int != 0xff) {\n          process_PTR_error(data, result_int);\n          process_PTR_cleanup(data);\n        }\n        *(char *)(data + 2) = (char)result_int;\n        output_data = (int)(char)result_int;\n      }\n    }\n    else {\n      output_data = 0;\n    }\n  }\n  return output_data;\n}\n",
            "called": [
                "FUN_08000a00",
                "FUN_080006b4",
                "FUN_080008cc",
                "FUN_080007f0",
                "FUN_08000b04",
                "FUN_08004204",
                "FUN_0800076c",
                "FUN_080008e2",
                "FUN_08000a7a",
                "FUN_08000a4e",
                "FUN_08000998"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b54",
            "calling": [
                "FUN_08000c64"
            ],
            "imported": false,
            "current_name": "process_data_08000b54"
        },
        "FUN_08000d96": {
            "renaming": {
                "FUN_08000d96": "do_nothing_08000d96"
            },
            "code": "\nvoid do_nothing_08000d96(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d96",
            "calling": [
                "FUN_08000de4"
            ],
            "imported": false,
            "current_name": "do_nothing_08000d96"
        },
        "FUN_0800376e": {
            "renaming": {
                "FUN_0800376e": "execute_function_if_exists_0800376e",
                "iVar1": "function_pointer_address",
                "FUN_08003750": "get_function_pointer_address",
                "PTR_": "",
                "DAT_": "",
                "code": "code_pointer",
                "function_pointer": "code_pointer",
                "(code *)0x0": "NULL"
            },
            "code": "void execute_function_if_exists_0800376e(void)\n{\n  int function_pointer_address = get_function_pointer_address();\n  code* function_pointer = *(code**)(function_pointer_address + 0x44);\n  if (function_pointer != (code*)0x0)\n  {\n    (*function_pointer)();\n  }\n  return;\n}",
            "called": [
                "FUN_08003750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800376e",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "execute_function_if_exists_0800376e"
        },
        "FUN_08000d98": {
            "renaming": {
                "FUN_08000d98": "validate_input_and_set_value_08000d98",
                "param_1": "input_value",
                "iVar1": "result",
                "PTR_DAT_08000ddc": "divisor_ptr",
                "PTR_DAT_08000dd8": "byte_ptr",
                "FUN_08000ee0": "calculate_dividend",
                "PTR_DAT_08000de0": "output_value_ptr",
                "FUN_08000e60": "set_value"
            },
            "code": "int validate_input_and_set_value_08000d98(uint input_value)\n{\n    uint divisor = *(uint *)PTR_DAT_08000ddc / (1000 / (byte)*PTR_DAT_08000dd8);\n    int result = FUN_08000ee0(divisor);\n\n    if (result != 0 || input_value > 0xf) {\n        return 1;\n    }\n\n    FUN_08000e60(0xffffffff, input_value, 0);\n    *(uint *)PTR_DAT_08000de0 = input_value;\n    return 0;\n}",
            "called": [
                "FUN_08000ee0",
                "FUN_08000e60"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d98",
            "calling": [
                "FUN_08000de4",
                "FUN_08002488"
            ],
            "imported": false,
            "current_name": "validate_input_and_set_value_08000d98"
        },
        "FUN_08003f48": {
            "renaming": {
                "FUN_08003f48": "initialize_data_08003f48",
                "uVar1": "random_number",
                "iVar2": "data_processor",
                "iVar3": "data_pointer",
                "PTR_DAT_08003f88": "data_array_pointer",
                "PTR_DAT_08003f8c": "processor_array_pointer",
                "PTR_DAT_08003f90": "data_info_pointer"
            },
            "code": "void initialize_data_08003f48()\n{\n  uint32_t random_number = generate_random_number();\n  int32_t data_pointer = *(int32_t *)(PTR_DAT_08003f88 + random_number * 4);\n  if ((random_number < 10) && (data_processor = (**(code **)(PTR_DAT_08003f8c + random_number * 4))(data_pointer), data_processor != -1)) {\n    process_data(*(uint32_t *)(PTR_DAT_08003f90 + (uint32_t)*(byte *)(data_pointer + 0x44) * 4),\n                 *(int32_t *)(data_pointer + 0x68) + (uint32_t)*(uint16_t *)(data_pointer + 0x6e),1);\n  }\n  return;\n}",
            "called": [
                "FUN_08003f00",
                "FUN_08002eb2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f48",
            "calling": [
                "FUN_08002f4c"
            ],
            "imported": false,
            "current_name": "initialize_data_08003f48"
        },
        "FUN_0800340c": {
            "renaming": {
                "FUN_0800340c": "execute_function_0800340c",
                "FUN_080035fc": "call_another_function"
            },
            "code": "void execute_function_0800340c(void)\n{\n  call_another_function();\n  return;\n}",
            "called": [
                "FUN_080035fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800340c",
            "calling": [
                "FUN_0800268e"
            ],
            "imported": false,
            "current_name": "execute_function_0800340c"
        },
        "FUN_0800352e": {
            "renaming": {
                "FUN_0800352e": "find_value_in_array_0800352e",
                "param_1": "value",
                "param_2": "array",
                "*param_2": "*array"
            },
            "code": "unsigned int find_value_in_array_0800352e(int value, short *array)\n{\n    while(true)\n    {\n        if(*array == -1)\n        {\n            return 0xffffffff;\n        }\n        if(*array == value)\n        {\n            break;\n        }\n        array = array + 6;\n    }\n    return *(unsigned int *)(array + 4);\n}",
            "called": [
                "FUN_0800352e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800352e",
            "calling": [
                "FUN_0800354a",
                "FUN_0800352e"
            ],
            "imported": false,
            "current_name": "find_value_in_array_0800352e"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "process_data_08001ab0",
                "param_1": "data",
                "puVar2": "current_data",
                "puVar3": "previous_data",
                "iVar1": "count"
            },
            "code": "void process_data_08001ab0(uint **data)\n{\n  int count;\n  uint *current_data;\n  uint *previous_data;\n  \n  if (*(byte *)((int)data + 0x3d) - 0x29 < 2) {\n    data[12] = NULL;\n    *(undefined *)((int)data + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)data + 0x3d) != '`') && (((*data)[1] & 0x800) == 0)) {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n    }\n    data[12] = NULL;\n    *(undefined *)((int)data + 0x3e) = 0;\n  }\n  **data = **data & 0xfffff7ff;\n  previous_data = *data;\n  if ((previous_data[1] & 0x800) == 0) {\n    if (*(char *)((int)data + 0x3d) == '`') {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      data[16] = NULL;\n      if ((previous_data[5] & 0x40) != 0) {\n        current_data = data[9];\n        data[9] = (uint *)((int)current_data + 1);\n        *(char *)current_data = (char)previous_data[4];\n      }\n      **data = **data & 0xfffffffe;\n      do_nothing(data);\n    }\n    else {\n      if ((previous_data[5] & 0x40) != 0) {\n        current_data = data[9];\n        data[9] = (uint *)((int)current_data + 1);\n        *(char *)current_data = (char)previous_data[4];\n      }\n      process_data_08001ab0_2(data);\n    }\n  }\n  else {\n    previous_data[1] = previous_data[1] & 0xfffff7ff;\n    if (*(char *)((int)data[13] + 0x35) == '\\x01') {\n      data[14][0x14] = (uint)PTR_LAB_08001f3c_1_08001bf4;\n      count = function1(data[14]);\n      if (count != 0) {\n        if (((*data)[5] & 0x40) != 0) {\n          current_data = data[9];\n          data[9] = (uint *)((int)current_data + 1);\n          *(char *)current_data = (char)(*data)[4];\n        }\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[14][0x14])();\n      }\n    }\n    else {\n      data[13][0x14] = (uint)PTR_LAB_08001f3c_1_08001bf4;\n      count = function1(data[13]);\n      if (count != 0) {\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[13][0x14])();\n      }\n    }\n  }\n  if ((*(char *)((int)data + 0x3d) == '(') && (((uint)data[16] & 4) != 0)) {\n    data[11] = DAT_08001bf8;\n    data[12] = NULL;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    function2(data);\n  }\n  return;\n}",
            "called": [
                "FUN_080038d0",
                "FUN_08001aac",
                "FUN_08003900",
                "FUN_08000f8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08001e68",
                "FUN_08001bfc"
            ],
            "imported": false,
            "current_name": "process_data_08001ab0"
        },
        "FUN_08001f9c": {
            "renaming": {
                "FUN_08001f9c": "set_flag_and_check_status_08001f9c",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "ptr_data1": "ptr_flag",
                "ptr_data2": "ptr_status",
                "ptr_data3": "ptr_result",
                "DAT_0800200c": "mem_location_1",
                "DAT_08002010": "mem_location_2",
                "DAT_08002014": "mem_location_3",
                "DAT_08002018": "mem_location_4"
            },
            "code": "int set_flag_and_check_status_08001f9c() {\n    int start_time = get_current_time();\n    uint* ptr_data1 = (uint*)(DAT_0800200c + 0x40);\n    *ptr_data1 |= 0x10000000;\n    uint* ptr_data2 = (uint*)DAT_08002014;\n    int* ptr_data3 = (int*)DAT_08002018;\n    *ptr_data3 = 1;\n    int res = FUN_08000e30();\n    while((get_current_time() - start_time) < 0x3e9) {\n        if((*ptr_data2 & 0x10000) != 0) {\n            res = FUN_08000e30();\n            while((get_current_time() - start_time) < 0x3e9) {\n                if((*ptr_data2 & 0x20000) != 0) {\n                    return 0;\n                }\n                res = FUN_08000e30();\n            }\n            return 3;\n        }\n        res = FUN_08000e30();\n    }\n    return 3;\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f9c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "set_flag_and_check_status_08001f9c"
        },
        "FUN_08000d8e": {
            "renaming": {
                "FUN_08000d8e": "execute_main_function_08000d8e",
                "FUN_080034ce": "execute_helper_function"
            },
            "code": "void execute_main_function_08000d8e(void)\n{\n  execute_helper_function();\n  return;\n}",
            "called": [
                "FUN_080034ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d8e",
            "calling": [
                "FUN_08004648"
            ],
            "imported": false,
            "current_name": "execute_main_function_08000d8e"
        },
        "FUN_08004638": {
            "renaming": {
                "FUN_08004638": "execute_initialization_08004638",
                "FUN_08004622": "initialize_system"
            },
            "code": "void execute_initialization_08004638(void)\n{\n  initialize_system();\n  return;\n}",
            "called": [
                "FUN_08004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004638",
            "calling": [],
            "imported": false,
            "current_name": "execute_initialization_08004638"
        },
        "FUN_080008cc": {
            "renaming": {
                "FUN_080008cc": "copy_and_modify_data_080008cc",
                "param_1": "data_address",
                "param_2": "new_value",
                "*(undefined *)(param_1 + 4)": "data_ptr",
                "*(byte *)(param_1 + 10)": "flag_ptr",
                "*(undefined *)(param_1 + 0x49)": "status_ptr",
                "*(undefined *)(param_1 + 9)": "old_data",
                "*(undefined *)(param_1 + 0xb)": "old_value"
            },
            "code": "void copy_and_modify_data_080008cc(int data_address, char new_value) {\n    char* data_ptr = (char*)(data_address + 4);\n    char* flag_ptr = (char*)(data_address + 10);\n    char* status_ptr = (char*)(data_address + 0x49);\n\n    *data_ptr = *(char*)(data_address + 9);\n    *flag_ptr ^= 0x80;\n    *status_ptr = 3;\n    *(char*)(data_address + 0xb) = new_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008cc",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "copy_and_modify_data_080008cc"
        },
        "FUN_08004a84": {
            "renaming": {
                "FUN_08004a84": "parse_and_format_string_08004a84",
                "param_1": "formatting_data",
                "param_2": "format_string",
                "param_3": "output_buffer",
                "param_4": "arg_list",
                "puVar1": "ptr_to_s___0__08004c94",
                "iVar2": "result",
                "piVar3": "arg_index_ptr",
                "bVar4": "is_digit",
                "pbVar5": "format_string_iterator",
                "pbVar6": "format_string_iterator_2",
                "unaff_r9": "saved_register",
                "iVar7": "temp_int",
                "local_8c": "arg_index",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "length_modifier",
                "local_7c": "field_width",
                "local_74": "output_size",
                "local_70": "conversion_specifier",
                "local_6f": "space_padding_char",
                "local_6e": "zero_padding_char",
                "local_45": "sign_char",
                "local_30": "null_terminator"
            },
            "code": "\nint parse_and_format_string_08004a84(int formatting_data,undefined *format_string,byte *output_buffer,int *arg_list)\n\n{\n  undefined *ptr_to_s___0__08004c94;\n  int result;\n  int *arg_index_ptr;\n  bool is_digit;\n  byte *format_string_iterator;\n  byte *format_string_iterator_2;\n  int saved_register;\n  int temp_int;\n  int *arg_index;\n  uint flags;\n  int precision;\n  undefined4 length_modifier;\n  int field_width;\n  int output_size;\n  byte conversion_specifier;\n  undefined space_padding_char;\n  undefined zero_padding_char;\n  undefined sign_char;\n  undefined4 null_terminator;\n  \n  arg_index = arg_list;\n  if ((formatting_data != 0) && (*(int *)(formatting_data + 0x18) == 0)) {\n    FUN_080053a0();\n  }\n  if (format_string == PTR_DAT_08004c90) {\n    format_string = *(undefined **)(formatting_data + 4);\n  }\n  else if (format_string == PTR_DAT_08004c98) {\n    format_string = *(undefined **)(formatting_data + 8);\n  }\n  else if (format_string == PTR_DAT_08004c9c) {\n    format_string = *(undefined **)(formatting_data + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(format_string + 0xc) << 0x1c)) || (*(int *)(format_string + 0x10) == 0)) &&\n     (temp_int = FUN_080050d0(formatting_data,format_string), temp_int != 0)) {\n    return -1;\n  }\n  output_size = 0;\n  space_padding_char = 0x20;\n  zero_padding_char = 0x30;\n  format_string_iterator = output_buffer;\nLAB_08004ac6:\n  format_string_iterator_2 = format_string_iterator;\n  if (*format_string_iterator_2 != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  format_string_iterator = format_string_iterator_2 + 1;\n  if (*format_string_iterator_2 != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  temp_int = (int)format_string_iterator_2 - (int)output_buffer;\n  if (temp_int != 0) {\n    result = FUN_08004a60(formatting_data,format_string,output_buffer,temp_int);\n    if (result == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(format_string + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return output_size;\n    }\n    output_size = output_size + temp_int;\n  }\n  if (*format_string_iterator_2 == 0) goto LAB_08004c70;\n  flags = 0;\n  field_width = 0;\n  precision = -1;\n  length_modifier = 0;\n  sign_char = 0;\n  null_terminator = 0;\n  format_string_iterator = format_string_iterator_2 + 1;\n  while( true ) {\n    temp_int = FUN_08000230(PTR_s___0__08004c94,*format_string_iterator);\n    ptr_to_s___0__08004c94 = PTR_DAT_08004ca0;\n    output_buffer = format_string_iterator + 1;\n    if (temp_int == 0) break;\n    flags = 1 << (temp_int - (int)PTR_s___0__08004c94 & 0xffU) | flags;\n    format_string_iterator = output_buffer;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    sign_char = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    sign_char = 0x2b;\n  }\n  if (*format_string_iterator == 0x2a) {\n    arg_index_ptr = arg_index + 1;\n    temp_int = *arg_index;\n    arg_index = arg_index_ptr;\n    if (-1 < temp_int) goto LAB_08004ba0;\n    field_width = -temp_int;\n    flags = flags | 2;\n  }\n  else {\n    is_digit = false;\n    temp_int = field_width;\n    output_buffer = format_string_iterator;\n    while( true ) {\n      if (9 < *output_buffer - 0x30) break;\n      temp_int = temp_int * 10 + (*output_buffer - 0x30);\n      is_digit = true;\n      output_buffer = output_buffer + 1;\n    }\n    if (is_digit) {\nLAB_08004ba0:\n      field_width = temp_int;\n    }\n  }\n  if (*output_buffer == 0x2e) {\n    if (output_buffer[1] == 0x2a) {\n      precision = *arg_index;\n      if (precision < 0) {\n        precision = -1;\n      }\n      output_buffer = output_buffer + 2;\n      arg_index = arg_index + 1;\n    }\n    else {\n      is_digit = false;\n      precision = 0;\n      temp_int = 0;\n      while( true ) {\n        output_buffer = output_buffer + 1;\n        if (9 < *output_buffer - 0x30) break;\n        temp_int = temp_int * 10 + (*output_buffer - 0x30);\n        is_digit = true;\n      }\n      if (is_digit) {\n        precision = temp_int;\n      }\n    }\n  }\n  temp_int = FUN_08000230(PTR_DAT_08004ca0,*output_buffer,3);\n  if (temp_int != 0) {\n    flags = flags | 0x40 << (temp_int - (int)ptr_to_s___0__08004c94 & 0xffU);\n    output_buffer = output_buffer + 1;\n  }\n  conversion_specifier = *output_buffer;\n  output_buffer = output_buffer + 1;\n  temp_int = FUN_08000230(PTR_s_efgEFG_08004ca4,conversion_specifier,6);\n  if (temp_int == 0) {\n    temp_int = FUN_08004d9c(formatting_data,&flags,format_string,DAT_08004cac,&arg_index);\n  }\n  else {\n    temp_int = formatting_data;\n    if (DAT_08004ca8 == 0) {\n      arg_index = (int *)(((int)arg_index + 7U & 0xfffffff8) + 8);\n      temp_int = saved_register;\n      goto LAB_08004c22;\n    }\n  }\n  if (temp_int == -1) goto LAB_08004c70;\nLAB_08004c22:\n  output_size = output_size + temp_int;\n  format_string_iterator = output_buffer;\n  saved_register = temp_int;\n  goto LAB_08004ac6;\n}\n\n",
            "called": [
                "FUN_08000230",
                "FUN_08004d9c",
                "FUN_080053a0",
                "FUN_08004a60",
                "FUN_080050d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a84",
            "calling": [
                "FUN_08004fdc",
                "FUN_08004860"
            ],
            "imported": false,
            "current_name": "parse_and_format_string_08004a84"
        },
        "FUN_08005608": {
            "renaming": {
                "FUN_08005608": "update_position_08005608",
                "param_1": "position",
                "param_2": "data",
                "iVar1": "offset",
                "uVar2": "new_position",
                "bVar3": "is_positive"
            },
            "code": "void update_position_08005608(int position, int data)\n{\n  int offset = get_offset(position, *(short *)(data + 0xe));\n  bool is_positive = offset >= 0;\n  uint new_position;\n  if (is_positive) {\n    new_position = *(int *)(data + 0x54) + offset;\n  }\n  else {\n    new_position = *(ushort *)(data + 0xc) & 0xffffefff;\n  }\n  if (is_positive) {\n    *(uint *)(data + 0x54) = new_position;\n  }\n  if (!is_positive) {\n    *(short *)(data + 0xc) = (short)new_position;\n  }\n  return;\n}",
            "called": [
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005608",
            "calling": [],
            "imported": false,
            "current_name": "update_position_08005608"
        },
        "FUN_08002efa": {
            "renaming": {
                "FUN_08002efa": "validate_input_08002efa",
                "param_1": "input_array",
                "param_2": "array_size",
                "param_3": "param_3",
                "*(char *)((int)param_1 + 0x3a)": "input_array[10]",
                "*(char *)(param_1 + 0xe)": "input_array[14]",
                "param_1[10]": "input_array[10]",
                "*(short *)(param_1 + 0xb)": "input_array[11]",
                "*(short *)((int)param_1 + 0x2e)": "input_array[30]",
                "param_1[0xf]": "input_array[15]",
                "*(undefined *)((int)param_1 + 0x3a)": "input_array[58]",
                "*(undefined *)(param_1 + 0xe)": "input_array[14]",
                "*(uint *)(*param_1 + 0x14)": "input_array[14]",
                "*(uint *)(*param_1 + 0xc)": "input_array[12]"
            },
            "code": "int validate_input_08002efa(int *input_array, int array_size, int param_3)\n{\n    int return_code = 0;\n    if (input_array[10] != ' ')\n    {\n        return_code = 2;\n    }\n    else if (array_size == 0 || param_3 == 0)\n    {\n        return_code = 1;\n    }\n    else if (input_array[14] != 1)\n    {\n        input_array[10] = array_size;\n        input_array[11] = (short)param_3;\n        input_array[14] = 0;\n        input_array[15] = 0;\n        input_array[30] = (short)param_3;\n        input_array[58] = 34;\n        input_array[14] |= 1;\n        input_array[12] |= 0x120;\n    }\n    else\n    {\n        return_code = 2;\n    }\n    return return_code;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efa",
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "imported": false,
            "current_name": "validate_input_08002efa"
        },
        "FUN_0800268c": {
            "renaming": {
                "FUN_0800268c": "do_nothing_0800268c"
            },
            "code": "\nvoid do_nothing_0800268c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268c",
            "calling": [
                "FUN_0800262c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800268c"
        },
        "FUN_08001aac": {
            "renaming": {
                "FUN_08001aac": "do_nothing_08001aac"
            },
            "code": "\nvoid do_nothing_08001aac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001aac",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "do_nothing_08001aac"
        },
        "FUN_0800377c": {
            "renaming": {
                "FUN_0800377c": "check_pointers_validity_0800377c",
                "*PTR_DAT_08003794": "first_pointer",
                "*(PTR_DAT_08003794 + 0x24)": "second_pointer",
                "FUN_080026ce()": "handle_invalid_pointer()"
            },
            "code": "void check_pointers_validity_0800377c(void)\n{\n  int* *PTR_DAT_08003794 = (int*) PTR_DAT_08003794;\n  int* *(PTR_DAT_08003794 + 0x24) = (int*) (PTR_DAT_08003794 + 0x24);\n  if (**PTR_DAT_08003794 != 0) {\n    FUN_080026ce();\n  }\n  if (**(PTR_DAT_08003794 + 0x24) != 0) {\n    FUN_080026ce();\n  }\n  return;\n}",
            "called": [
                "FUN_080026ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800377c",
            "calling": [],
            "imported": false,
            "current_name": "check_pointers_validity_0800377c"
        },
        "FUN_0800268e": {
            "renaming": {
                "FUN_0800268e": "update_flags_0800268e",
                "param_1": "memory_address",
                "puVar1": "memory_pointer"
            },
            "code": "void update_flags_0800268e(uint **memory_address) {\n  uint *memory_pointer;\n  memory_address[0][0x39] = 2;\n  memory_pointer = *memory_address;\n  if ((memory_pointer[8] & 0x1111) == 0) {\n    if ((memory_pointer[8] & 0x444) == 0) {\n      *memory_pointer = *memory_pointer & 0xfffffffe;\n    }\n  }\n  call_function(memory_address);\n  memory_address[0][0x39] = 0;\n  memory_address[0xe] = 0;\n  return;\n}",
            "called": [
                "FUN_0800340c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268e",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "update_flags_0800268e"
        },
        "FUN_080008e2": {
            "renaming": {
                "FUN_080008e2": "count_bits_080008e2",
                "param_1": "input",
                "param_2": "data",
                "param_3": "offset",
                "param_4": "unused",
                "iVar1": "offset",
                "uVar2": "num_words",
                "uVar3": "i",
                "uVar4": "bit_index",
                "cVar5": "count",
                "iVar6": "result_offset"
            },
            "code": "int count_bits_080008e2(uint16_t* data, int data_length, uint8_t* result) {\n    int offset = get_offset(PTR_param_1+0xb, PTR_param_1+0xc, DAT_param_3, DAT_param_4, DAT_param_4);\n    uint32_t num_words = get_offset(PTR_param_1+0xd, PTR_param_1+0xe);\n    uint8_t count = 0;\n    for (uint32_t i=0; i<num_words; i++) {\n        uint16_t word = data[(i+offset) >> 3];\n        uint8_t bit = (word >> ((i+offset) & 0x7)) & 1;\n        if (bit == 1) {\n            result[i >> 3] |= (1 << (i & 0x7));\n            count++;\n        }\n    }\n    *PTR_param_1 = count;\n    return count + 2;\n}",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008e2",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "count_bits_080008e2"
        },
        "FUN_080045c8": {
            "renaming": {
                "FUN_080045c8": "convert_base_080045c8",
                "param_1": "num_ptr",
                "param_2": "num",
                "param_3": "base",
                "cVar1": "digit",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "current_digit",
                "local_15": "reversed_digits"
            },
            "code": "undefined4 convert_base_080045c8(int *num_ptr, uint num, uint base)\n{\n  char digit;\n  undefined4 result;\n  uint quotient;\n  uint remainder;\n  char reversed_digits[9];\n\n  reversed_digits[0] = 0;\n  if ((int)base < 2) {\n    base = 10;\n  }\n  char *current_digit = reversed_digits + 1;\n  do {\n    quotient = num / base;\n    remainder = (num & 0xff) - ((int)(short)quotient * (int)(short)base & 0xffU) & 0xff;\n    current_digit = current_digit + -1;\n    digit = (char)remainder;\n    if (remainder < 10) {\n      digit = digit + '0';\n    }\n    else {\n      digit = digit + '7';\n    }\n    *current_digit = digit;\n    num = quotient;\n  } while (quotient != 0);\n  if (current_digit == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    result = FUN_08000218(current_digit);\n    result = (**(code **)(*num_ptr + 4))(num_ptr, current_digit, result);\n  }\n  return result;\n}",
            "called": [
                "FUN_08000218"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045c8",
            "calling": [
                "FUN_08004622"
            ],
            "imported": false,
            "current_name": "convert_base_080045c8"
        },
        "FUN_08003d18": {
            "renaming": {
                "FUN_08003d18": "check_value_08003d18",
                "param_1": "value_to_check",
                "param_2": "max_value",
                "sVar1": "short_value",
                "iVar2": "current_time",
                "iVar3": "checked_value",
                "uVar4": "index"
            },
            "code": "uint check_value_08003d18(uint value_to_check, uint max_value)\n{\n  uint current_time = get_current_time();\n  short short_value = *(short *)(PTR_DAT_08003dc0 + 0x9a);\n  int checked_value = FUN_080034f4((int)short_value, PTR_DAT_08003dc4);\n  if (checked_value == 0) {\n    return 0;\n  }\n  uint index = 0;\n  while ((index < 10 && ((*(int *)(PTR_DAT_08003dc8 + index * 4) == 0 || (checked_value = FUN_080034f4((int)short_value, PTR_DAT_08003dc4), **(int **)(PTR_DAT_08003dc8 + index * 4) != checked_value))))) {\n    index = index + 1 & 0xff;\n  }\n  if (9 < index) {\n    if ((9 < (byte)PTR_DAT_08003dcc[0x44]) && (FUN_08003cc8(), 9 < (byte)PTR_DAT_08003dcc[0x44])) {\n      return 0;\n    }\n    index = (uint)(byte)PTR_DAT_08003dcc[0x44];\n  }\n  do {\n    checked_value = FUN_08002dd0(*(undefined4 *)(PTR_DAT_08003dc8 + index * 4), value_to_check, max_value & 0xffff, 1000);\n    if (checked_value == 0) {\n      return max_value;\n    }\n    checked_value = get_current_time();\n  } while ((uint)(checked_value - current_time) < 1000);\n  return 0;\n}",
            "called": [
                "FUN_08003cc8",
                "FUN_08002dd0",
                "FUN_080034f4",
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d18",
            "calling": [
                "FUN_080040ec"
            ],
            "imported": false,
            "current_name": "check_value_08003d18"
        },
        "FUN_08004640": {
            "renaming": {
                "FUN_08004640": "bitwise_or_with_shift_left_08004640",
                "param_1": "input_1",
                "param_2": "input_2"
            },
            "code": "uint bitwise_or_with_shift_left_08004640(int input_1, uint input_2) {\n\treturn input_2 | input_1 << 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004640",
            "calling": [
                "FUN_08000a00",
                "FUN_080007f0",
                "FUN_08000b04",
                "FUN_080008e2",
                "FUN_08000a7a",
                "FUN_08000a4e",
                "FUN_08000998"
            ],
            "imported": false,
            "current_name": "bitwise_or_with_shift_left_08004640"
        },
        "FUN_080034ce": {
            "renaming": {
                "FUN_080034ce": "init_system_080034ce",
                "FUN_08000de4": "initialize_display",
                "FUN_08000c8c": "initialize_network"
            },
            "code": "void init_system_080034ce(void)\n{\n  initialize_display();\n  initialize_network();\n  return;\n}",
            "called": [
                "FUN_08000c8c",
                "FUN_08000de4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034ce",
            "calling": [
                "FUN_08000d8e"
            ],
            "imported": false,
            "current_name": "init_system_080034ce"
        },
        "FUN_080047fe": {
            "renaming": {
                "FUN_080047fe": "swap_params_and_call_func_080047fe",
                "param_1": "first_param",
                "param_2": "second_param",
                "FUN_08004844": "call_func_with_swapped_params"
            },
            "code": "void swap_params_and_call_func_080047fe(undefined4 first_param, undefined4 second_param)\n{\n  call_func_with_swapped_params(second_param, first_param);\n  return;\n}",
            "called": [
                "FUN_08004844"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047fe",
            "calling": [
                "FUN_080046b4"
            ],
            "imported": false,
            "current_name": "swap_params_and_call_func_080047fe"
        },
        "FUN_08001256": {
            "renaming": {
                "FUN_08001256": "set_flags_08001256",
                "param_1": "params",
                "puVar1": "flags"
            },
            "code": "uint32_t set_flags_08001256(uint32_t **params) {\n  uint32_t *flags = params[11];\n  if ((*(char *)((int)params + 0x3d) == '\"') && ((params[20] != (uint32_t *)0x0 || (*(char *)((int)params + 0x3e) != '@')))) {\n    if ((params[20] == (uint32_t *)0x0) && (params[4] == (uint32_t *)0xc000)) {\n      **params = **params | 0x100;\n      params[20] = (uint32_t *)((int)params[20] + 1);\n    }\n    else {\n      if (*(short *)((int)params + 0x2a) == 0) {\n        **params = **params | 0x200;\n      }\n      else if (*(short *)((int)params + 0x2a) == 1) {\n        if (flags == (uint32_t *)0xffff0000) {\n          **params = **params & 0xfffffbff;\n          flags = *params;\n          if ((flags[1] & 0x800) == 0) {\n            *flags = *flags | 0x200;\n          }\n          else {\n            *flags = *flags & 0xfffffbff;\n          }\n        }\n        else if (((flags == (uint32_t *)0x4) || (flags == (uint32_t *)0x8)) || (params[12] == (uint32_t *)0x12)) {\n          **params = **params & 0xfffffbff;\n          **params = **params | 0x200;\n        }\n        else if (params[11] == (uint32_t *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)params + 0x2a) == 2) {\n        if (params[11] == (uint32_t *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params & 0xfffffbff;\n          **params = **params | 0x800;\n        }\n        flags = *params;\n        if ((flags[1] & 0x800) != 0) {\n          flags[1] = flags[1] | 0x1000;\n        }\n      }\n      else {\n        **params = **params | 0x400;\n        flags = *params;\n        if ((flags[1] & 0x800) != 0) {\n          flags[1] = flags[1] | 0x1000;\n        }\n      }\n      params[20] = (uint32_t *)0x0;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001256",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "set_flags_08001256"
        },
        "FUN_08004884": {
            "renaming": {
                "FUN_08004884": "execute_functions_08004884",
                "puVar1": "function_ptr_start",
                "puVar2": "function_ptr_current",
                "puVar3": "function_ptr_end",
                "iVar4": "function_ptr_diff",
                "iVar5": "i"
            },
            "code": "void execute_functions_08004884(void)\n{\n  undefined *function_ptr_start = PTR_DAT_080048bc;\n  int function_ptr_diff = (int)PTR_DAT_080048c0 - (int)PTR_DAT_080048bc;\n  for (int i = 0; i != function_ptr_diff >> 2; i++) {\n    (**(code **)(function_ptr_start + i * 4))();\n  }\n  do_nothing_080059f8();\n  undefined *function_ptr_end = PTR_DAT_080048c8;\n  undefined *function_ptr_current = PTR_DAT_080048c4;\n  for (int i = 0; i != (int)function_ptr_end - (int)function_ptr_current >> 2; i++) {\n    (**(code **)(function_ptr_current + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_080059f8",
                "FUN_08004648"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "execute_functions_08004884"
        },
        "FUN_08004648": {
            "renaming": {
                "FUN_08004648": "print_hello_world_08004648",
                "FUN_08000e3c": "print_number_of_times",
                "FUN_08000d8e": "print_greeting"
            },
            "code": "void print_hello_world_08004648(void)\n{\n  print_number_of_times(3);\n  print_greeting();\n  return;\n}",
            "called": [
                "FUN_08000d8e",
                "FUN_08000e3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004648",
            "calling": [
                "FUN_08004884"
            ],
            "imported": false,
            "current_name": "print_hello_world_08004648"
        },
        "FUN_08000600": {
            "renaming": {
                "FUN_08000600": "process_input_08000600",
                "param_1": "input_ptr",
                "param_2": "input_size",
                "cVar1": "input_char",
                "iVar2": "result",
                "PTR_DAT_08000668": "PTR_DATA_08000668",
                "FUN_08004388": "call_function",
                "byte": "input_byte",
                "FUN_08004110": "do_something",
                "undefined": "input_undefined",
                "FUN_080041bc": "do_something_else"
            },
            "code": "void process_input_08000600(int **input_ptr, undefined4 input_size) {\n  char input_char = *(char *)((int)input_ptr + 5);\n  if (input_char == '\\x02' || input_char == '\\x03' || input_char == '\\x01') {\n    *input_ptr = (int *)PTR_DAT_08000668;\n  }\n  else {\n    *input_ptr = (int *)PTR_DAT_08000668;\n  }\n  call_function(*input_ptr, input_size, 6);\n  if (*(byte *)((int)input_ptr + 6) > 1) {\n    do_something(*(byte *)((int)input_ptr + 6), 1);\n    do_something_else(*(undefined *)((int)input_ptr + 6), 0);\n  }\n  int result;\n  do {\n    result = (**(code **)(**input_ptr + 0xc))();\n  } while (result >= 0);\n  *(undefined *)((int)input_ptr + 0x49) = 0;\n  *(undefined *)((int)input_ptr + 0x4a) = 0;\n  *(undefined2 *)(input_ptr + 0x15) = 0;\n  *(undefined2 *)((int)input_ptr + 0x52) = 0;\n  *(undefined2 *)(input_ptr + 0x14) = 0;\n}",
            "called": [
                "FUN_08004388",
                "FUN_080041bc",
                "FUN_08004110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000600",
            "calling": [
                "FUN_08000c4c"
            ],
            "imported": false,
            "current_name": "process_input_08000600"
        },
        "FUN_080045be": {
            "renaming": {
                "FUN_080045be": "call_function_pointer_080045be",
                "param_1": "function_pointer"
            },
            "code": "void call_function_pointer_080045be(void (*function_pointer)())\n{\n  (*function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045be",
            "calling": [],
            "imported": false,
            "current_name": "call_function_pointer_080045be"
        },
        "FUN_08004646": {
            "renaming": {
                "FUN_08004646": "do_nothing_08004646"
            },
            "code": "\nvoid do_nothing_08004646(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004646",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "do_nothing_08004646"
        },
        "FUN_08000728": {
            "renaming": {
                "FUN_08000728": "crc16_checksum_08000728",
                "param_1": "data_start_index",
                "param_2": "data_length",
                "uVar2": "crc",
                "uVar3": "bit",
                "uVar4": "i",
                "bVar1": "j"
            },
            "code": "uint crc16_checksum_08000728(int data_start_index, int data_length) {\n  byte current_byte;\n  uint crc = 0xffff;\n  for (uint i = 0; i < data_length; i++) {\n    current_byte = *(byte *)(data_start_index + i + 9);\n    crc ^= current_byte;\n    for (byte j = 1; j < 9; j++) {\n      if (crc & 1) {\n        crc = (crc >> 1) ^ 0xa001;\n      } else {\n        crc = crc >> 1;\n      }\n    }\n  }\n  return (crc & 0xff) << 8 | crc >> 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000728",
            "calling": [
                "FUN_0800076c"
            ],
            "imported": false,
            "current_name": "crc16_checksum_08000728"
        },
        "FUN_0800354a": {
            "renaming": {
                "FUN_0800354a": "get_result_0800354a",
                "param_1": "input",
                "uVar1": "result",
                "FUN_0800352e": "calculate_result"
            },
            "code": "int get_result_0800354a(int input) {\n    if (input == -1) {\n        return -1;\n    }\n    int result = calculate_result();\n    return result;\n}",
            "called": [
                "FUN_0800352e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800354a",
            "calling": [
                "FUN_08003380",
                "FUN_08003414",
                "FUN_08003978",
                "FUN_0800339c"
            ],
            "imported": false,
            "current_name": "get_result_0800354a"
        },
        "FUN_0800124a": {
            "renaming": {
                "FUN_0800124a": "set_value_at_offset_0800124a",
                "param_1": "base_ptr",
                "PTR_8": "offset",
                "DAT_0800125c": "value",
                "*PTR_8": "*(uint *)(base_ptr + offset)"
            },
            "code": "int set_value_at_offset_0800124a(int *base_ptr, int PTR_8, int DAT_0800125c)\n{\n  *PTR_8 = DAT_0800125c & 0xff;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800124a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_0800124a"
        },
        "FUN_08004094": {
            "renaming": {
                "FUN_08004094": "find_offset_08004094",
                "param_1": "offset",
                "iVar1": "current_offset",
                "puVar2": "address"
            },
            "code": "int find_offset_08004094(int offset) {\n  int current_offset = 0;\n  if (*ptr_dat_1 == 0) {\n    *ptr_dat_1 = ptr_dat_2;\n  }\n  current_offset = *ptr_dat_1;\n  undefined *address = (undefined *)(offset + current_offset);\n  if (address <= &stack0x00000000) {\n    *ptr_dat_1 = address;\n    return current_offset;\n  }\n  *ptr_dat_3 = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004094",
            "calling": [
                "FUN_0800500c"
            ],
            "imported": false,
            "current_name": "find_offset_08004094"
        },
        "FUN_080033c8": {
            "renaming": {
                "FUN_080033c8": "clear_bit_in_memory_address_080033c8",
                "DAT_080033d4": "memory_address"
            },
            "code": "void clear_bit_in_memory_address_080033c8(void)\n{\n  uint32_t *DAT_080033d4 = (uint32_t *)(DAT_080033d4 + 0x40);\n  uint32_t mask = 0xdfffffff;\n  *DAT_080033d4 &= mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033c8",
            "calling": [
                "FUN_08000f56"
            ],
            "imported": false,
            "current_name": "clear_bit_in_memory_address_080033c8"
        },
        "FUN_080031fc": {
            "renaming": {
                "FUN_080031fc": "set_flag_080031fc",
                "param_1": "flag",
                "DAT_08003350": "DATA_START",
                "FLAG_0": "0",
                "FLAG_1": "1",
                "FLAG_2": "2",
                "FLAG_3": "3",
                "FLAG_4": "4",
                "FLAG_5": "5",
                "FLAG_6": "6",
                "FLAG_7": "7",
                "FLAG_8": "8",
                "FLAG_9": "9",
                "FLAG_10": "10"
            },
            "code": "uint32_t set_flag_080031fc(uint32_t flag)\n{\n    uint32_t result;\n    switch(flag)\n    {\n        case 0:\n            *(uint32_t *)(DAT_08003350 + 0x30) |= 1;\n            result = FLAG_0;\n            break;\n        case 1:\n            *(uint32_t *)(DAT_08003350 + 0x30) |= 2;\n            result = FLAG_1;\n            break;\n        case 2:\n            *(uint32_t *)(DAT_08003350 + 0x30) |= 4;\n            result = FLAG_2;\n            break;\n        case 3:\n            *(uint32_t *)(DAT_08003350 + 0x30) |= 8;\n            result = FLAG_3;\n            break;\n        case 4:\n            *(uint32_t *)(DAT_08003350 + 0x30) |= 0x10;\n            result = FLAG_4;\n            break;\n        case 5:\n            *(uint32_t *)(DAT_08003350 + 0x30) |= 0x20;\n            result = FLAG_5;\n            break;\n        case 6:\n            *(uint32_t *)(DAT_08003350 + 0x30) |= 0x40;\n            result = FLAG_6;\n            break;\n        case 7:\n            *(uint32_t *)(DAT_08003350 + 0x30) |= 0x80;\n            result = FLAG_7;\n            break;\n        case 8:\n            *(uint32_t *)(DAT_08003350 + 0x30) |= 0x100;\n            result = FLAG_8;\n            break;\n        case 9:\n            *(uint32_t *)(DAT_08003350 + 0x30) |= 0x200;\n            result = FLAG_9;\n            break;\n        case 10:\n            *(uint32_t *)(DAT_08003350 + 0x30) |= 0x400;\n            result = FLAG_10;\n            break;\n        default:\n            result = 0;\n            break;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080031fc",
            "calling": [
                "FUN_08003978",
                "FUN_08003486"
            ],
            "imported": false,
            "current_name": "set_flag_080031fc"
        },
        "FUN_08000690": {
            "renaming": {
                "FUN_08000690": "check_parameter_08000690",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "FUN_08000682": "execute_function"
            },
            "code": "void check_parameter_08000690(int param1, int param2, undefined4 param3, undefined4 param4)\n{\n    if (param1 != 1) {\n        return;\n    }\n    if (param2 == 0xffff) {\n        execute_function(PTR_DATA_080006b0, 1, 0, 0, param4);\n    }\n    return;\n}",
            "called": [
                "FUN_08000682"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000690",
            "calling": [],
            "imported": false,
            "current_name": "check_parameter_08000690"
        },
        "FUN_080054fc": {
            "renaming": {
                "FUN_080054fc": "process_080054fc",
                "param_1": "process_id",
                "param_2": "process_info",
                "uVar1": "flag",
                "iVar2": "status",
                "local_18": "local_var_1",
                "local_14": "local_var_2"
            },
            "code": "void process_080054fc(int process_080054fc_id, int *process_080054fc_info)\n{\n    ushort flag;\n    int local_var_1;\n    int *local_var_2;\n\n    if (-1 < (int)((uint)*(ushort *)(process_080054fc_info + 3) << 0x1e)) {\n        local_var_1 = process_080054fc_id;\n        local_var_2 = process_080054fc_info;\n        flag = get_flag(process_080054fc_id, process_080054fc_info, &local_var_1, &local_var_2);\n        int status = get_status(process_080054fc_id, local_var_1);\n        if (status != 0) {\n            *(undefined **)(process_080054fc_id + 0x28) = PTR_LAB_08005320_1_08005578;\n            *process_080054fc_info = status;\n            *(ushort *)(process_080054fc_info + 3) = *(ushort *)(process_080054fc_info + 3) | 0x80;\n            process_080054fc_info[5] = local_var_1;\n            process_080054fc_info[4] = status;\n            if ((local_var_2 != (int *)0x0) &&\n                (status = check_flag(process_080054fc_id, (int)*(short *)((int)process_080054fc_info + 0xe)), status != 0)) {\n                *(ushort *)(process_080054fc_info + 3) = *(ushort *)(process_080054fc_info + 3) & 0xfffc | 1;\n            }\n            *(ushort *)(process_080054fc_info + 3) = flag | *(ushort *)(process_080054fc_info + 3);\n            return;\n        }\n        if ((int)(short)*(ushort *)(process_080054fc_info + 3) << 0x16 < 0) {\n            return;\n        }\n        *(ushort *)(process_080054fc_info + 3) = *(ushort *)(process_080054fc_info + 3) & 0xfffc | 2;\n    }\n    *process_080054fc_info = (int)process_080054fc_info + 0x47;\n    process_080054fc_info[4] = (int)process_080054fc_info + 0x47;\n    process_080054fc_info[5] = 1;\n    return;\n}",
            "called": [
                "FUN_080056f8",
                "FUN_08004978",
                "FUN_080054b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054fc",
            "calling": [
                "FUN_080050d0"
            ],
            "imported": false,
            "current_name": "process_080054fc"
        },
        "FUN_08001420": {
            "renaming": {
                "FUN_08001420": "increment_and_set_value_08001420",
                "param_1": "data_ptr",
                "pbVar1": "value_ptr"
            },
            "code": "int increment_and_set_value_08001420(uint8_t *data_ptr){\n  if (*(uint16_t *)(data_ptr + 0x2a) != 0) {\n    uint8_t *value_ptr = (uint8_t *)data_ptr[9];\n    data_ptr[9] = (int)(value_ptr + 1);\n    *(uint32_t *)(*data_ptr + 0x10) = (uint32_t)*value_ptr;\n    *(uint16_t *)(data_ptr + 0x2a) = *(uint16_t *)(data_ptr + 0x2a) - 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001420",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "increment_and_set_value_08001420"
        },
        "FUN_080026ca": {
            "renaming": {
                "FUN_080026ca": "do_nothing_080026ca"
            },
            "code": "\nvoid do_nothing_080026ca(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ca",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026ca"
        },
        "FUN_08000de4": {
            "renaming": {
                "FUN_08000de4": "set_flags_and_call_functions_08000de4",
                "puVar1": "flag1_ptr",
                "*puVar1": "*flag1_ptr",
                "FUN_08000e3c": "call_function1",
                "FUN_08000d98": "call_function2",
                "do_nothing_08000d96": "do_nothing"
            },
            "code": "int set_flags_and_call_functions_08000de4(void)\n{\n  uint *flag1_ptr;\n  flag1_ptr = DAT_08000e14;\n  *DAT_08000e14 |= 0x200;\n  *flag1_ptr |= 0x400;\n  *flag1_ptr |= 0x100;\n  call_function1(3);\n  call_function2(0xf);\n  do_nothing();\n  return 0;\n}",
            "called": [
                "FUN_08000d96",
                "FUN_08000d98",
                "FUN_08000e3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000de4",
            "calling": [
                "FUN_080034ce"
            ],
            "imported": false,
            "current_name": "set_flags_and_call_functions_08000de4"
        },
        "FUN_080026ce": {
            "renaming": {
                "FUN_080026ce": "perform_operations_080026ce",
                "param_1": "params",
                "iVar1": "var",
                "do_nothing_080026ca": "do_nothing_1",
                "do_nothing_080026c8": "do_nothing_2",
                "FUN_08003754": "perform_action_1",
                "FUN_0800376e": "perform_action_2",
                "do_nothing_0800293e": "do_nothing_3",
                "do_nothing_080026cc": "do_nothing_4",
                "do_nothing_0800293c": "do_nothing_5"
            },
            "code": "void perform_operations_080026ce(int *params) {\n    int var;\n    var = *params;\n    if (((*(uint *)(var + 0x10) & 2) != 0) && ((*(uint *)(var + 0xc) & 2) != 0)) {\n        *(undefined4 *)(var + 0x10) = 0xfffffffd;\n        *(undefined *)(params + 6) = 1;\n        if ((*(uint *)(*params + 0x18) & 3) == 0) {\n            perform_action_1();\n            do_nothing_1(params);\n        }\n        else {\n            do_nothing_2(params);\n        }\n        *(undefined *)(params + 6) = 0;\n    }\n    var = *params;\n    if (((*(uint *)(var + 0x10) & 4) != 0) && ((*(uint *)(var + 0xc) & 4) != 0)) {\n        *(undefined4 *)(var + 0x10) = 0xfffffffb;\n        *(undefined *)(params + 6) = 2;\n        if ((*(uint *)(*params + 0x18) & 0x300) == 0) {\n            perform_action_1(params);\n            do_nothing_1(params);\n        }\n        else {\n            do_nothing_2(params);\n        }\n        *(undefined *)(params + 6) = 0;\n    }\n    var = *params;\n    if (((*(uint *)(var + 0x10) & 8) != 0) && ((*(uint *)(var + 0xc) & 8) != 0)) {\n        *(undefined4 *)(var + 0x10) = 0xfffffff7;\n        *(undefined *)(params + 6) = 4;\n        if ((*(uint *)(*params + 0x1c) & 3) == 0) {\n            perform_action_1(params);\n            do_nothing_1(params);\n        }\n        else {\n            do_nothing_2(params);\n        }\n        *(undefined *)(params + 6) = 0;\n    }\n    var = *params;\n    if (((*(uint *)(var + 0x10) & 0x10) != 0) && ((*(uint *)(var + 0xc) & 0x10) != 0)) {\n        *(undefined4 *)(var + 0x10) = 0xffffffef;\n        *(undefined *)(params + 6) = 8;\n        if ((*(uint *)(*params + 0x1c) & 0x300) == 0) {\n            perform_action_1(params);\n            do_nothing_1(params);\n        }\n        else {\n            do_nothing_2(params);\n        }\n        *(undefined *)(params + 6) = 0;\n    }\n    var = *params;\n    if (((*(uint *)(var + 0x10) & 1) != 0) && ((*(uint *)(var + 0xc) & 1) != 0)) {\n        *(undefined4 *)(var + 0x10) = 0xfffffffe;\n        perform_action_2(params);\n    }\n    var = *params;\n    if (((*(uint *)(var + 0x10) & 0x80) != 0) && ((*(uint *)(var + 0xc) & 0x80) != 0)) {\n        *(undefined4 *)(var + 0x10) = 0xffffff7f;\n        do_nothing_3(params);\n    }\n    var = *params;\n    if (((*(uint *)(var + 0x10) & 0x40) != 0) && ((*(uint *)(var + 0xc) & 0x40) != 0)) {\n        *(undefined4 *)(var + 0x10) = 0xffffffbf;\n        do_nothing_4(params);\n    }\n    var = *params;\n    if (((*(uint *)(var + 0x10) & 0x20) != 0) && ((*(uint *)(var + 0xc) & 0x20) != 0)) {\n        *(undefined4 *)(var + 0x10) = 0xffffffdf;\n        do_nothing_5(params);\n    }\n    return;\n}\n",
            "called": [
                "FUN_080026c8",
                "FUN_0800376e",
                "FUN_080026ca",
                "FUN_0800293c",
                "FUN_080026cc",
                "FUN_0800293e",
                "FUN_08003754"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ce",
            "calling": [
                "FUN_0800377c"
            ],
            "imported": false,
            "current_name": "perform_operations_080026ce"
        },
        "FUN_080026cc": {
            "renaming": {
                "FUN_080026cc": "do_nothing_080026cc"
            },
            "code": "\nvoid do_nothing_080026cc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026cc",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026cc"
        },
        "FUN_08000218": {
            "renaming": {
                "FUN_08000218": "find_end_of_string_08000218",
                "param_1": "str",
                "pcVar3": "current_ptr",
                "pcVar2": "next_ptr",
                "cVar1": "current_char"
            },
            "code": "char* find_end_of_string_08000218(char* str) {\n  char current_char;\n  char* current_ptr = str;\n  do {\n    current_char = *current_ptr;\n    current_ptr++;\n  } while (current_char != '\\0');\n  return current_ptr - 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000218",
            "calling": [
                "FUN_080045c8"
            ],
            "imported": false,
            "current_name": "find_end_of_string_08000218"
        },
        "FUN_0800339c": {
            "renaming": {
                "FUN_0800339c": "determine_status_0800339c",
                "param_1": "input_1",
                "param_2": "input_3",
                "param_3": "input_4",
                "param_4": "input_5",
                "iVar1": "intermediate_result",
                "uVar2": "shifted_result"
            },
            "code": "uint8_t determine_status_0800339c(uint8_t input_1, uint8_t input_3, uint8_t input_4, uint8_t input_5) {\n    int intermediate_result = perform_operation(input_1, PTR_DAT_080033c4, input_3, input_4, input_5);\n    uint8_t shifted_result = (uint8_t) ((intermediate_result << 12) >> 27);\n    if (shifted_result == 3) {\n        return 8;\n    }\n    if (shifted_result == 4) {\n        return 12;\n    }\n    if (shifted_result == 2) {\n        return 4;\n    }\n    return 0;\n}",
            "called": [
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800339c",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "determine_status_0800339c"
        },
        "FUN_0800557e": {
            "renaming": {
                "FUN_0800557e": "do_nothing_0800557e"
            },
            "code": "\nvoid do_nothing_0800557e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557e",
            "calling": [
                "FUN_08004978",
                "FUN_080048dc"
            ],
            "imported": false,
            "current_name": "do_nothing_0800557e"
        },
        "FUN_08000e60": {
            "renaming": {
                "FUN_08000e60": "process_data_08000e60",
                "param_1": "data_index",
                "param_2": "data_value",
                "param_3": "mask",
                "uVar1": "bit_shift",
                "uVar2": "shift_amount",
                "DAT_08000ebc": "data_ptr_1",
                "DAT_08000ec0": "data_ptr_2",
                "masked_value": "masked_value"
            },
            "code": "void process_data_08000e60(uint data_index, uint data_value, uint mask) {\n  uint bit_shift = (uint)(*(int *)(DAT_08000ebc + 0xc) << 0x15) >> 0x1d;\n  uint shift_amount = 7 - bit_shift;\n  if (shift_amount > 3) {\n    shift_amount = 4;\n  }\n  if (bit_shift + 4 < 7) {\n    bit_shift = 0;\n  }\n  else {\n    bit_shift -= 3;\n  }\n  uint masked_value = (data_value & (1 << (shift_amount & 0xff)) - 1U) << (bit_shift & 0xff) |\n          (1 << (bit_shift & 0xff)) - 1U & mask;\n  if ((int)data_index < 0) {\n    *(char *)(DAT_08000ec0 + (data_index & 0xf)) = (char)(masked_value << 4);\n  }\n  else {\n    *(char *)(data_index + 0xe000e400) = (char)(masked_value << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e60",
            "calling": [
                "FUN_08000c8c",
                "FUN_08003eac",
                "FUN_08000d98",
                "FUN_08003e54"
            ],
            "imported": false,
            "current_name": "process_data_08000e60"
        },
        "FUN_0800557c": {
            "renaming": {
                "FUN_0800557c": "do_nothing_0800557c"
            },
            "code": "\nvoid do_nothing_0800557c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557c",
            "calling": [
                "FUN_08004978",
                "FUN_080048dc"
            ],
            "imported": false,
            "current_name": "do_nothing_0800557c"
        },
        "FUN_0800165a": {
            "renaming": {
                "FUN_0800165a": "process_data_0800165a",
                "param_1": "data_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "value",
                "uVar2": "flags"
            },
            "code": "int process_data_0800165a(int *data_ptr, int param_2, int param_3, int param_4) {\n    int flags = *(int *)(*data_ptr + 0x18);\n    int value = 0;\n    if ((flags & 0x80) == 0) {\n        value = *(int *)(data_ptr + 3);\n    }\n    else {\n        value = *(int *)(data_ptr + 6);\n    }\n    call_function(data_ptr, (flags & 4) == 0, value, flags, param_4);\n    return 0;\n}",
            "called": [
                "FUN_08003880"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800165a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_data_0800165a"
        },
        "FUN_08000b04": {
            "renaming": {
                "FUN_08000b04": "decode_and_store_08000b04",
                "param_1": "input",
                "param_2": "output",
                "bVar1": "index",
                "bVar2": "length",
                "cVar3": "result",
                "uVar4": "decoded",
                "uVar5": "i"
            },
            "code": "int decode_and_store_08000b04(uint8_t *input, uint16_t *output) {\n  uint8_t length = *(input + 0xe);\n  uint8_t index = *(input + 0xc);\n  *(input + 0xd) = 0;\n  *(input + 0xe) = length;\n  *(input + 0x49) = 6;\n  for (uint8_t i = 0; i < length; i++) {\n    uint16_t decoded = decode_byte_pair(*(input + i * 2 + 0x10), *(input + (i + 4) * 2 + 9));\n    *(output + (index + i) * 2) = decoded;\n  }\n  uint8_t result = *(input + 0x49);\n  finalize_decode(input);\n  return (int)(char)(result + 2);\n}\n",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b04",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "decode_and_store_08000b04"
        },
        "FUN_0800262c": {
            "renaming": {
                "FUN_0800262c": "process_data_0800262c",
                "param_1": "data_ptr",
                "do_nothing_0800268c": "perform_action2",
                "DAT_08002688": "data_section"
            },
            "code": "void process_data_0800262c(int *data_ptr) {\n  bool condition1 = (*(uint *)(*data_ptr + 0xc) & 0x100) != 0;\n  bool condition2 = (*(uint *)(*data_ptr + 8) & 0x1000) != 0;\n  if (condition1 && condition2) {\n    perform_action1();\n    *(uint *)(*data_ptr + 0xc) = *(uint *)(*data_ptr + 0xc) & 0xff | 0xfffffe7f;\n  }\n  bool condition3 = (*(uint *)(*data_ptr + 0xc) & 0x200) != 0;\n  bool condition4 = (*(uint *)(*data_ptr + 8) & 0x2000) != 0;\n  if (condition3 && condition4) {\n    perform_action2(data_ptr);\n    *(uint *)(*data_ptr + 0xc) = *(uint *)(*data_ptr + 0xc) & 0xff | 0xfffffd7f;\n  }\n  *(undefined4 *)(DAT_08002688 + 0x14) = 0x20000;\n  *(undefined *)((int)data_ptr + 0x1d) = 1;\n  return;\n}",
            "called": [
                "FUN_08003594",
                "FUN_0800268c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800262c",
            "calling": [],
            "imported": false,
            "current_name": "process_data_0800262c"
        },
        "FUN_08004388": {
            "renaming": {
                "FUN_08004388": "set_flags_and_call_function_08004388",
                "param_1": "input_param",
                "param_2": "param_value",
                "param_3": "flag_value",
                "bVar1": "flag_masked",
                "iVar2": "function_index",
                "UNRECOVERED_JUMPTABLE": "function_pointer",
                "FUN_08003978": "call_function_at_address",
                "FUN_08003e54": "call_another_function",
                "uRam08004434": "argument_1",
                "uRam08004440": "argument_2",
                "uRam0800443c": "argument_3",
                "PTR_DAT_0800445c": "data_pointer",
                "uRam0000012e": "result"
            },
            "code": "void set_flags_and_call_function_08004388(int input_param, int param_value, byte flag_value) {\n  uint flag_bits;\n  byte flag_masked;\n  int function_index;\n  code *function_pointer;\n  \n  *(int *)(input_param + 0x11c) = param_value;\n  *(byte *)(input_param + 0x144) = flag_value;\n  \n  flag_masked = flag_value & 7;\n  if (flag_masked == 4) {\n    function_index = 7;\n  }\n  else if (flag_masked == 6) {\n    function_index = 8;\n  }\n  else if (flag_masked == 2) {\n    function_index = 6;\n  }\n  else {\n    function_index = 0;\n  }\n  \n  flag_bits = flag_value & 0x30;\n  if (flag_bits == 0x30) {\n    *(int *)(input_param + 0x128) = 0x600;\n    function_index++;\n  }\n  else if (flag_bits == 0) {\n    *(int *)(input_param + 0x128) = 0;\n  }\n  else {\n    *(int *)(input_param + 0x128) = 0x400;\n    function_index++;\n  }\n  \n  flag_bits = flag_value & 8;\n  if (flag_bits == 0) {\n    *(int *)(input_param + 0x124) = 0;\n  }\n  else {\n    *(int *)(input_param + 0x124) = 0x2000;\n  }\n  \n  if (function_index == 8) {\n    *(int *)(input_param + 0x120) = 0;\n  }\n  else if (function_index == 9) {\n    *(int *)(input_param + 0x120) = 0x1000;\n  }\n  else {\n    function_index = 0;\n  }\n  \n  if (function_index != 0) {\n    call_function_at_address(input_param + 0xd4);\n    call_another_function(input_param + 0xd4,uRam08004434);\n    return;\n  }\n  \n  function_pointer = (code *)0x8004432;\n  call_function_with_arguments(uRam08004440,299,uRam0800443c);\n  if (extraout_r1 < 0x60) {\n    uRam0000012e = *(undefined2 *)(PTR_DAT_0800445c + extraout_r1 * 2);\n  }\n  else {\n    uRam0000012e = 0xffff;\n  }\n  (*function_pointer)();\n  return;\n}",
            "called": [
                "FUN_08003978",
                "FUN_08004808",
                "FUN_08003e54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004388",
            "calling": [
                "FUN_08000600"
            ],
            "imported": false,
            "current_name": "set_flags_and_call_function_08004388"
        },
        "FUN_080051ac": {
            "renaming": {
                "FUN_080051ac": "process_data_080051ac",
                "puVar1": "data_ptr",
                "iVar2": "data_length",
                "piVar3": "ptr1",
                "piVar4": "ptr2",
                "uVar5": "data_flags",
                "uVar6": "data_flags_short",
                "iVar7": "data_offset",
                "pcVar8": "function_ptr",
                "iVar9": "temp1",
                "uVar10": "temp2",
                "UNRECOVERED_JUMPTABLE_00": "UNRECOVERED_JUMPTABLE",
                "bVar11": "flag",
                "uVar12": "result"
            },
            "code": "void process_data_080051ac(void)\n{\n  uint *data_ptr;\n  int data_length;\n  int *ptr1;\n  int *ptr2;\n  uint data_flags;\n  ushort data_flags_short;\n  int data_offset;\n  code *function_ptr;\n  int temp1;\n  uint temp2;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool flag;\n  undefined8 result;\n  \n  initialize(6);\n  UNRECOVERED_JUMPTABLE_00 = (code *)0x80051bb;\n  result = fetch_data(1);\n  ptr1 = (int *)((ulonglong)result >> 0x20);\n  data_ptr = (uint *)result;\n  data_flags_short = *(ushort *)(ptr1 + 3);\n  data_flags = (uint)data_flags_short;\n  if ((int)(data_flags << 0x1c) < 0) {\n    data_length = ptr1[4];\n    if (data_length != 0) {\n      data_offset = data_flags << 0x1e;\n      flag = data_offset == 0;\n      temp1 = *ptr1;\n      if (flag) {\n        data_offset = ptr1[5];\n      }\n      *ptr1 = data_length;\n      if (!flag) {\n        data_offset = 0;\n      }\n      ptr1[2] = data_offset;\n      for (temp1 = temp1 - data_length; 0 < temp1; temp1 = temp1 - data_offset) {\n        data_offset = (*(code *)ptr1[10])(data_ptr,ptr1[8],data_length,temp1);\n        if (data_offset < 1) {\n          data_flags_short = *(ushort *)(ptr1 + 3);\n          goto LAB_080052b2;\n        }\n        data_length = data_length + data_offset;\n      }\n    }\n  }\n  else if (((0 < ptr1[1]) || (0 < ptr1[0x10])) &&\n          (function_ptr = (code *)ptr1[0xb], function_ptr != (code *)0x0)) {\n    temp2 = *data_ptr;\n    *data_ptr = 0;\n    if ((data_flags & 0x1000) == 0) {\n      data_length = (*function_ptr)(data_ptr,ptr1[8],data_flags & 0x1000,1);\n      if ((data_length == -1) && (data_flags_short = *data_ptr, data_flags_short != 0)) {\n        if ((data_flags_short != 0x1d) && (data_flags_short != 0x16)) {\n          *(ushort *)(ptr1 + 3) = *(ushort *)(ptr1 + 3) | 0x40;\n          (*UNRECOVERED_JUMPTABLE_00)();\n          return;\n        }\n        *data_ptr = temp2;\n        goto LAB_080051d6;\n      }\n    }\n    else {\n      data_length = ptr1[0x15];\n    }\n    if (((int)((uint)*(ushort *)(ptr1 + 3) << 0x1d) < 0) &&\n       (data_length = data_length - ptr1[1], ptr1[0xd] != 0)) {\n      data_length = data_length - ptr1[0x10];\n    }\n    data_length = (*(code *)ptr1[0xb])(data_ptr,ptr1[8],data_length,0);\n    data_flags_short = *(ushort *)(ptr1 + 3);\n    if ((data_length == -1) &&\n       ((0x1d < *data_ptr || (-1 < (int)((DAT_080052c8 >> (*data_ptr & 0xff)) << 0x1f)))) {\n      *(ushort *)(ptr1 + 3) = data_flags_short | 0x40;\n      (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n      return;\n    }\n    ptr1[1] = 0;\n    *ptr1 = ptr1[4];\n    if (((int)((uint)data_flags_short << 0x13) < 0) && ((data_length != -1 || (*data_ptr == 0)))) {\n      ptr1[0x15] = data_length;\n    }\n    ptr2 = (int *)ptr1[0xd];\n    *data_ptr = temp2;\n    if (ptr2 != (int *)0x0) {\n      if (ptr2 != ptr1 + 0x11) {\n        cleanup(data_ptr);\n      }\n      ptr1[0xd] = 0;\n      (*UNRECOVERED_JUMPTABLE_00)();\n      return;\n    }\n  }\nLAB_080051d6:\n  (*UNRECOVERED_JUMPTABLE_00)(0);\n  return;\n}",
            "called": [
                "FUN_080040f8",
                "FUN_080055d0",
                "FUN_080048dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080051ac",
            "calling": [
                "FUN_08004808",
                "FUN_08005760"
            ],
            "imported": false,
            "current_name": "process_data_080051ac"
        },
        "FUN_080052cc": {
            "renaming": {
                "FUN_080052cc": "process_data_080052cc",
                "param_1": "data",
                "param_2": "info",
                "uVar1": "result",
                "iVar2": "length",
                "piVar3": "info_ptr",
                "uVar4": "flag",
                "uVar5": "flag_value",
                "iVar6": "count",
                "unaff_r4": "temp",
                "unaff_r5": "function_result",
                "pcVar7": "function_ptr",
                "iVar8": "temp",
                "uVar9": "temp",
                "UNRECOVERED_JUMPTABLE_00": "UNRECOVERED_JUMPTABLE_00",
                "bVar10": "negative_flag"
            },
            "code": "uint32_t process_data_080052cc(uint32_t *data, int *info)\n{\n    uint32_t result;\n    int length;\n    int *info_ptr;\n    uint32_t flag;\n    uint16_t flag_value;\n    int count;\n    uint32_t temp;\n    uint32_t (*function_ptr)(uint32_t *, int, int, int, uint32_t, uint32_t);\n    uint32_t function_result;\n    uint32_t *data_ptr;\n    bool negative_flag;\n\n    if (info[4] != 0) {\n        if ((data != NULL) && (data[6] == 0)) {\n            reset_data();\n        }\n        if (info == (int *)PTR_DAT_08005314) {\n            info_ptr = (int *)data[1];\n        }\n        else if (info == (int *)PTR_DAT_08005318) {\n            info_ptr = (int *)data[2];\n        }\n        else if (info == (int *)PTR_DAT_0800531c) {\n            info_ptr = (int *)data[3];\n        }\n        if (*(uint16_t *)(info_ptr + 3) != 0) {\n            flag_value = *(uint16_t *)(info_ptr + 3);\n            flag = (uint32_t)flag_value;\n            if ((int)(flag << 0x1c) < 0) {\n                length = info_ptr[4];\n                if (length != 0) {\n                    count = flag << 0x1e;\n                    negative_flag = count == 0;\n                    temp = info_ptr[0];\n                    if (negative_flag) {\n                        count = info_ptr[5];\n                    }\n                    info_ptr[0] = length;\n                    if (!negative_flag) {\n                        count = 0;\n                    }\n                    info_ptr[2] = count;\n                    for (temp = temp - length; temp > 0; temp = temp - count) {\n                        function_ptr = (uint32_t (*)(uint32_t *, int, int, int, uint32_t, uint32_t))info_ptr[10];\n                        function_result = function_ptr(data, info_ptr[8], length, temp, unaff_r4, unaff_r5);\n                        if (function_result < 1) {\n                            flag_value = *(uint16_t *)(info_ptr + 3);\n                            goto LAB_080052b2;\n                        }\n                        length = length + function_result;\n                    }\n                }\n            }\n            else {\n                if (((info_ptr[1] > 0) || (info_ptr[0x10] > 0)) && ((function_ptr = (uint32_t (*)(uint32_t *, int, int, int, uint32_t, uint32_t))info_ptr[0xb]) != NULL)) {\n                    data_ptr = data;\n                    data = NULL;\n                    if ((flag_value & 0x1000) == 0) {\n                        function_result = function_ptr(data_ptr, info_ptr[8], flag & 0x1000, 1, unaff_r4, unaff_r5);\n                        if ((function_result == -1) && ((temp = *data_ptr) != 0)) {\n                            if ((temp != 0x1d) && (temp != 0x16)) {\n                                flag_value = *(uint16_t *)(info_ptr + 3);\n                                *(uint16_t *)(info_ptr + 3) = flag_value | 0x40;\n                                result = UNRECOVERED_JUMPTABLE_00(-1);\n                                return result;\n                            }\n                            *data_ptr = *data;\n                            goto LAB_080051d6;\n                        }\n                    }\n                    else {\n                        function_result = info_ptr[0x15];\n                    }\n                    if (((int)((uint)flag_value << 0x1d) < 0) && ((function_result = function_result - info_ptr[1]), info_ptr[0xd] != 0)) {\n                        function_result = function_result - info_ptr[0x10];\n                    }\n                    function_result = function_ptr(data_ptr, info_ptr[8], function_result, 0, unaff_r4, unaff_r5);\n                    flag_value = *(uint16_t *)(info_ptr + 3);\n                    if ((function_result == -1) && ((temp = *data_ptr) > 0x1d || (-1 < (int)((DAT_080052c8 >> (temp & 0xff)) << 0x1f))))) {\n                        flag_value = *(uint16_t *)(info_ptr + 3);\n                        *(uint16_t *)(info_ptr + 3) = flag_value | 0x40;\n                        result = UNRECOVERED_JUMPTABLE_00(-1);\n                        return result;\n                    }\n                    info_ptr[1] = 0;\n                    info_ptr[0] = info_ptr[4];\n                    if (((int)((uint)flag_value << 0x13) < 0) && ((function_result != -1) || (*data_ptr == 0))) {\n                        info_ptr[0x15] = function_result;\n                    }\n                    data = data_ptr;\n                    info_ptr[0xd] = 0;\n                    if (info_ptr[0xd] != (int *)0x0) {\n                        if (info_ptr[0xd] != info_ptr + 0x11) {\n                            reset_data();\n                        }\n                        info_ptr[0xd] = 0;\n                        result = UNRECOVERED_JUMPTABLE_00(-1);\n                        return result;\n                    }\n                }\n            }\n        }\n    }\n    result = 0;\n    return result;\n}",
            "called": [
                "FUN_080053a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052cc",
            "calling": [
                "FUN_08004a34"
            ],
            "imported": false,
            "current_name": "process_data_080052cc"
        },
        "FUN_08002eb2": {
            "renaming": {
                "FUN_08002eb2": "check_and_update_value_08002eb2",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "*(char *)((int)param_1 + 0x39)": "data[9]",
                "*(char *)(param_1 + 0xe)": "data[14]",
                "param_1[8]": "data[8]",
                "*(short *)(param_1 + 9)": "data[9]",
                "*(short *)((int)param_1 + 0x26)": "data[11]",
                "param_1[0xf]": "data[15]",
                "*(undefined *)((int)param_1 + 0x39)": "data[9]",
                "*(undefined *)(param_1 + 0xe)": "data[14]",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*data + 0xc)"
            },
            "code": "int check_and_update_value_08002eb2(int *data, int value1, int value2)\n{\n  if (data[9] != ' ') {\n    return 2;\n  }\n  if (value1 == 0 || value2 == 0) {\n    return 1;\n  }\n  if (data[14] != 1) {\n    data[8] = value1;\n    data[9] = (short)value2;\n    data[11] = (short)value2;\n    data[15] = 0;\n    data[9] = 0x21;\n    data[14] = 0;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002eb2",
            "calling": [
                "FUN_08003eac",
                "FUN_08003f48"
            ],
            "imported": false,
            "current_name": "check_and_update_value_08002eb2"
        },
        "FUN_08000d3c": {
            "renaming": {
                "FUN_08000d3c": "copy_and_clear_memory_08000d3c",
                "iVar1": "index",
                "puVar2": "dest_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void copy_and_clear_memory_08000d3c(void)\n{\n  int index;\n  undefined4 *dest_ptr;\n  code *jump_table;\n  for (index = 0; PTR_DAT_08000d7c + index < PTR_DAT_08000d80; index += 4) {\n    *(undefined4 *)(PTR_DAT_08000d7c + index) = *(undefined4 *)(DAT_08000d78 + index);\n  }\n  for (dest_ptr = (undefined4 *)PTR_DAT_08000d84; dest_ptr < PTR_DAT_08000d88; dest_ptr++) {\n    *dest_ptr = 0;\n  }\n  FUN_080035bc();\n  FUN_08004884();\n  jump_table = (code *)0x8000d72;\n  FUN_08004658();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_080035bc",
                "FUN_08004884",
                "FUN_08004658"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d3c",
            "calling": [],
            "imported": false,
            "current_name": "copy_and_clear_memory_08000d3c"
        },
        "FUN_08003978": {
            "renaming": {
                "FUN_08003978": "configure_UART_pins_08003978",
                "param_1": "UART_pin_config",
                "iVar1": "UART1_pin",
                "iVar2": "UART2_pin",
                "iVar3": "UART3_pin",
                "iVar4": "UART4_pin",
                "iVar5": "UART5_pin",
                "iVar6": "UART6_pin",
                "iVar7": "UART7_pin",
                "iVar8": "UART8_pin",
                "iVar9": "selected_UART_pin",
                "uVar10": "UART_pin_config_value",
                "uVar11": "UART_pin_config_bits",
                "local_2c": "UART_pin_mask",
                "local_28": "UART_pin_config_bits_2",
                "local_24": "UART_pin_config_bits_3",
                "local_20": "UART_pin_config_bits_4",
                "local_1c": "UART_pin_config_bits_5"
            },
            "code": "\nvoid configure_UART_pins_08003978(int *UART_pin_config)\n\n{\n  int UART1_pin;\n  int UART2_pin;\n  int UART3_pin;\n  int UART4_pin;\n  int UART5_pin;\n  int UART6_pin;\n  int UART7_pin;\n  int UART8_pin;\n  int selected_UART_pin;\n  undefined4 UART_pin_config_value;\n  uint UART_pin_config_bits;\n  uint UART_pin_mask;\n  uint UART_pin_config_bits_2;\n  uint UART_pin_config_bits_3;\n  undefined4 UART_pin_config_bits_4;\n  uint UART_pin_config_bits_5;\n  \n  if (UART_pin_config != (int *)0x0) {\n    UART7_pin = FUN_080034f4((int)*(short *)(UART_pin_config + 0x16),PTR_DAT_08003c58);\n    UART8_pin = FUN_080034f4((int)*(short *)((int)UART_pin_config + 0x5a),PTR_DAT_08003c5c);\n    if ((UART8_pin == 0) || (UART7_pin == 0)) {\n      FUN_08004fdc(PTR_s_ERROR__at_least_one_UART_pin_has_08003c84,UART8_pin);\n    }\n    else {\n      selected_UART_pin = FUN_08003582(UART7_pin);\n      *UART_pin_config = selected_UART_pin;\n      UART6_pin = DAT_08003c7c;\n      UART5_pin = DAT_08003c78;\n      UART4_pin = DAT_08003c74;\n      UART3_pin = DAT_08003c70;\n      UART2_pin = DAT_08003c6c;\n      UART1_pin = DAT_08003c68;\n      UART8_pin = DAT_08003c64;\n      UART7_pin = DAT_08003c60;\n      if (selected_UART_pin == 0) {\n        FUN_08004fdc(PTR_s_ERROR__U_S_ART_pins_mismatch_08003c88);\n      }\n      else {\n        if (selected_UART_pin == DAT_08003c60) {\n          *(uint *)(DAT_08003c60 + 0x12824) = *(uint *)(DAT_08003c60 + 0x12824) | 0x10;\n          *(uint *)(UART7_pin + 0x12824) = *(uint *)(UART7_pin + 0x12824) & 0xffffffef;\n          *(uint *)(UART7_pin + 0x12844) = *(uint *)(UART7_pin + 0x12844) | 0x10;\n          *(undefined *)(UART_pin_config + 0x11) = 0;\n          *(undefined *)(UART_pin_config + 0x17) = 0x25;\n        }\n        else if (selected_UART_pin == DAT_08003c64) {\n          *(uint *)(DAT_08003c64 + 0x1f420) = *(uint *)(DAT_08003c64 + 0x1f420) | 0x20000;\n          *(uint *)(UART8_pin + 0x1f420) = *(uint *)(UART8_pin + 0x1f420) & 0xfffdffff;\n          *(uint *)(UART8_pin + 0x1f440) = *(uint *)(UART8_pin + 0x1f440) | 0x20000;\n          *(undefined *)(UART_pin_config + 0x11) = 1;\n          *(undefined *)(UART_pin_config + 0x17) = 0x26;\n        }\n        else if (selected_UART_pin == DAT_08003c68) {\n          *(uint *)(DAT_08003c68 + 0x1f020) = *(uint *)(DAT_08003c68 + 0x1f020) | 0x40000;\n          *(uint *)(UART1_pin + 0x1f020) = *(uint *)(UART1_pin + 0x1f020) & 0xfffbffff;\n          *(uint *)(UART1_pin + 0x1f040) = *(uint *)(UART1_pin + 0x1f040) | 0x40000;\n          *(undefined *)(UART_pin_config + 0x11) = 2;\n          *(undefined *)(UART_pin_config + 0x17) = 0x27;\n        }\n        else if (selected_UART_pin == DAT_08003c6c) {\n          *(uint *)(DAT_08003c6c + 0x1ec20) = *(uint *)(DAT_08003c6c + 0x1ec20) | 0x80000;\n          *(uint *)(UART2_pin + 0x1ec20) = *(uint *)(UART2_pin + 0x1ec20) & 0xfff7ffff;\n          *(uint *)(UART2_pin + 0x1ec40) = *(uint *)(UART2_pin + 0x1ec40) | 0x80000;\n          *(undefined *)(UART_pin_config + 0x11) = 3;\n          *(undefined *)(UART_pin_config + 0x17) = 0x34;\n        }\n        else if (selected_UART_pin == DAT_08003c70) {\n          *(uint *)(DAT_08003c70 + 0x1e820) = *(uint *)(DAT_08003c70 + 0x1e820) | 0x100000;\n          *(uint *)(UART3_pin + 0x1e820) = *(uint *)(UART3_pin + 0x1e820) & 0xffefffff;\n          *(uint *)(UART3_pin + 0x1e840) = *(uint *)(UART3_pin + 0x1e840) | 0x100000;\n          *(undefined *)(UART_pin_config + 0x11) = 4;\n          *(undefined *)(UART_pin_config + 0x17) = 0x35;\n        }\n        else if (selected_UART_pin == DAT_08003c74) {\n          *(uint *)(DAT_08003c74 + 0x12424) = *(uint *)(DAT_08003c74 + 0x12424) | 0x20;\n          *(uint *)(UART4_pin + 0x12424) = *(uint *)(UART4_pin + 0x12424) & 0xffffffdf;\n          *(uint *)(UART4_pin + 0x12444) = *(uint *)(UART4_pin + 0x12444) | 0x20;\n          *(undefined *)(UART_pin_config + 0x11) = 5;\n          *(undefined *)(UART_pin_config + 0x17) = 0x47;\n        }\n        else if (selected_UART_pin == DAT_08003c78) {\n          *(uint *)(DAT_08003c78 + 0x1c020) = *(uint *)(DAT_08003c78 + 0x1c020) | 0x40000000;\n          *(uint *)(UART5_pin + 0x1c020) = *(uint *)(UART5_pin + 0x1c020) & 0xbfffffff;\n          *(uint *)(UART5_pin + 0x1c040) = *(uint *)(UART5_pin + 0x1c040) | 0x40000000;\n          *(undefined *)(UART_pin_config + 0x11) = 6;\n          *(undefined *)(UART_pin_config + 0x17) = 0x52;\n        }\n        else if (selected_UART_pin == DAT_08003c7c) {\n          *(uint *)(DAT_08003c7c + 0x1bc20) = *(uint *)(DAT_08003c7c + 0x1bc20) | 0x80000000;\n          *(uint *)(UART6_pin + 0x1bc20) = *(uint *)(UART6_pin + 0x1bc20) & 0x7fffffff;\n          *(uint *)(UART6_pin + 0x1bc40) = *(uint *)(UART6_pin + 0x1bc40) | 0x80000000;\n          *(undefined *)(UART_pin_config + 0x11) = 7;\n          *(undefined *)(UART_pin_config + 0x17) = 0x53;\n        }\n        UART_pin_config_value = FUN_080031fc((uint)((int)*(short *)((int)UART_pin_config + 0x5a) << 0x18) >> 0x1c);\n        UART_pin_config_bits = FUN_0800354a((int)*(short *)((int)UART_pin_config + 0x5a),PTR_DAT_08003c5c);\n        UART_pin_mask = 1 << (*(ushort *)((int)UART_pin_config + 0x5a) & 0xf) & 0xffff;\n        UART_pin_config_bits_2 = (UART_pin_config_bits >> 3 & 1) << 4 | UART_pin_config_bits & 7;\n        UART_pin_config_bits_3 = (UART_pin_config_bits << 0x1a) >> 0x1e;\n        UART_pin_config_bits_5 = (UART_pin_config_bits << 0x11) >> 0x19;\n        UART_pin_config_bits_4 = 3;\n        FUN_08000fb4(UART_pin_config_value,&UART_pin_mask);\n        UART_pin_config_value = FUN_080031fc((uint)((int)*(short *)(UART_pin_config + 0x16) << 0x18) >> 0x1c);\n        UART_pin_config_bits = FUN_0800354a((int)*(short *)(UART_pin_config + 0x16),PTR_DAT_08003c58);\n        UART_pin_mask = 1 << (*(ushort *)(UART_pin_config + 0x16) & 0xf) & 0xffff;\n        UART_pin_config_bits_2 = (UART_pin_config_bits >> 3 & 1) << 4 | UART_pin_config_bits & 7;\n        UART_pin_config_bits_3 = (UART_pin_config_bits << 0x1a) >> 0x1e;\n        FUN_08000fb4(UART_pin_config_value,&UART_pin_mask);\n        *(int **)(PTR_DAT_08003c80 + (uint)*(byte *)(UART_pin_config + 0x11) * 4) = UART_pin_config + 1;\n        UART_pin_config[1] = *UART_pin_config;\n        UART_pin_config[2] = UART_pin_config[0x12];\n        UART_pin_config[3] = UART_pin_config[0x13];\n        UART_pin_config[4] = UART_pin_config[0x14];\n        UART_pin_config[5] = UART_pin_config[0x15];\n        UART_pin_config[6] = 0xc;\n        UART_pin_config[7] = 0;\n        UART_pin_config[8] = 0;\n        FUN_08002d72(UART_pin_config + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08000fb4",
                "FUN_08004fdc",
                "FUN_08002d72",
                "FUN_080031fc",
                "FUN_08003582",
                "FUN_0800354a",
                "FUN_080034f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003978",
            "calling": [
                "FUN_08003cc8",
                "FUN_08004388"
            ],
            "imported": false,
            "current_name": "configure_UART_pins_08003978"
        },
        "FUN_0800316c": {
            "renaming": {
                "FUN_0800316c": "set_bit_to_zero_0800316c",
                "param_1": "bit_position",
                "param_2": "bit_array",
                "uVar1": "array_index",
                "*(uint *)(param_2 + uVar1 * 4)": "array_element",
                "mask": "mask"
            },
            "code": "void set_bit_to_zero_0800316c(uint bit_position, int* bit_array) {\n  uint array_index = (bit_position << 0x18) >> 0x1c;\n  uint* array_element = bit_array + array_index;\n  uint mask = ~(1 << (bit_position & 0xf));\n  *array_element = *array_element & mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "set_bit_to_zero_0800316c"
        },
        "FUN_080040d0": {
            "renaming": {
                "FUN_080040d0": "get_error_code_080040d0"
            },
            "code": "unsigned int get_error_code_080040d0(void)\n{\n  return 0xFFFFFFFF;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d0",
            "calling": [],
            "imported": false,
            "current_name": "get_error_code_080040d0"
        },
        "FUN_080040d6": {
            "renaming": {
                "FUN_080040d6": "set_memory_permissions_080040d6",
                "param_1": "memory_address",
                "param_2": "permission_level"
            },
            "code": "void set_memory_permissions_080040d6(int* memory_address, int permission_level) {\n    *(int *)(memory_address + 4) = permission_level;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d6",
            "calling": [
                "FUN_080056d4"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_080040d6"
        },
        "FUN_08004a34": {
            "renaming": {
                "FUN_08004a34": "decode_and_store_08004a34",
                "param_1": "decoder_value",
                "param_2": "input_byte",
                "param_3": "output_buffer",
                "iVar1": "temp_int_1",
                "pbVar2": "buffer_ptr",
                "pbVar3": "temp_byte_ptr",
                "uVar4": "decoded_value",
                "PTR_DAT_080050c4": "constant_ptr_1",
                "PTR_DAT_080050c8": "constant_ptr_2",
                "PTR_DAT_080050cc": "constant_ptr_3"
            },
            "code": "uint decode_and_store_08004a34(int decoder_value, byte input_byte, byte **output_buffer) {\n  int remaining_bytes;\n  byte *buffer_ptr, *output_ptr;\n  uint decoded_value;\n  \n  remaining_bytes = (*output_buffer)[5] - (*output_buffer - (*output_buffer)[4]);\n  if (remaining_bytes <= 0) {\n    FUN_080052cc(decoder_value, output_buffer);\n    remaining_bytes = (*output_buffer)[5] - (*output_buffer - (*output_buffer)[4]);\n  }\n  \n  decoded_value = (uint)input_byte;\n  if (decoded_value == 10) {\n    FUN_080052cc(decoder_value, output_buffer);\n    return decoded_value;\n  }\n  \n  if (remaining_bytes > 0) {\n    buffer_ptr = *output_buffer;\n    output_ptr = buffer_ptr + 1;\n    *output_buffer = output_ptr;\n    *buffer_ptr = input_byte;\n    return decoded_value;\n  }\n  \n  if (decoder_value != 0 && *(int *)(decoder_value + 0x18) == 0) {\n    FUN_080053a0();\n  }\n  \n  if (*output_buffer == (byte **)PTR_DAT_080050c4) {\n    *output_buffer = *(byte ***)(decoder_value + 4);\n  }\n  else if (*output_buffer == (byte **)PTR_DAT_080050c8) {\n    *output_buffer = *(byte ***)(decoder_value + 8);\n  }\n  else if (*output_buffer == (byte **)PTR_DAT_080050cc) {\n    *output_buffer = *(byte ***)(decoder_value + 0xc);\n  }\n  \n  (*output_buffer)[2] = (*output_buffer)[6];\n  decoded_value = (uint)*(ushort *)((*output_buffer) + 3);\n  if (decoded_value < 0) {\n    buffer_ptr = (*output_buffer)[4];\n    if (buffer_ptr != (byte *)0x0) {\n      decoded_value = FUN_080050d0(decoder_value, output_buffer, decoded_value << 0x1c, buffer_ptr, output_ptr);\n      if (decoded_value == 0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  else {\n    decoded_value <<= 0x1c;\n  }\n  \n  decoded_value = FUN_080050d0(decoder_value, output_buffer, decoded_value, NULL, output_ptr);\n  if (decoded_value == 0) {\n    return 0xffffffff;\n  }\n  \n  (*output_buffer)[2]--;\n  return (uint)input_byte;\n}\n",
            "called": [
                "FUN_080052cc",
                "FUN_080053a0",
                "FUN_080050d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a34",
            "calling": [
                "FUN_08004a60"
            ],
            "imported": false,
            "current_name": "decode_and_store_08004a34"
        },
        "FUN_080002d0": {
            "renaming": {
                "FUN_080002d0": "get_concatenated_values_080002d0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result"
            },
            "code": "typedef unsigned long long u64;\n\nu64 get_concatenated_values_080002d0(u64 param1, u64 param2, u64 param3, u64 param4)\n{\n    if ((param4 == 0) && (param3 == 0)) {\n        if (param2 != 0 || param1 != 0) {\n            param2 = -1;\n            param1 = -1;\n        }\n        return ((u64)param2 << 32) | param1;\n    }\n    u64 result = FUN_08000300();\n    return result;\n}",
            "called": [
                "FUN_08000300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002d0",
            "calling": [
                "FUN_080023b4"
            ],
            "imported": false,
            "current_name": "get_concatenated_values_080002d0"
        },
        "FUN_08003f00": {
            "renaming": {
                "FUN_08003f00": "find_index_08003f00",
                "param_1": "value",
                "uVar1": "index"
            },
            "code": "uint find_index_08003f00(int value) {\n  uint index;\n  if (value == 0) {\n    index = 10;\n  }\n  else {\n    index = 0;\n    while (true) {\n      if (index > 9) {\n        return index;\n      }\n      if (value == *(int *)(PTR_DAT_08003f20 + index * 4)) {\n        break;\n      }\n      index = (index + 1) & 0xff;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f00",
            "calling": [
                "FUN_08003f24",
                "FUN_08003f48"
            ],
            "imported": false,
            "current_name": "find_index_08003f00"
        },
        "FUN_08005a04": {
            "renaming": {
                "FUN_08005a04": "do_nothing_08005a04"
            },
            "code": "\nvoid do_nothing_08005a04(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a04",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08005a04"
        },
        "FUN_08001440": {
            "renaming": {
                "FUN_08001440": "write_char_to_buffer_08001440",
                "param_1": "buffer_ptr",
                "puVar1": "buffer",
                "PTR_00000000": "char_count_ptr",
                "DAT_08004010": "0x2a",
                "DAT_08004014": "0x10"
            },
            "code": "int write_char_to_buffer_08001440(int *buffer_ptr){\n    short *PTR_00000000 = (short *)((int)buffer_ptr + DAT_08004010);\n    if (*PTR_00000000 != 0) {\n        char *buffer = (char *)buffer_ptr[9];\n        buffer_ptr[9] = (int)(buffer + 1);\n        *buffer = (char)*(int *)(*buffer_ptr + DAT_08004014);\n        *PTR_00000000 = *PTR_00000000 - 1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001440",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "write_char_to_buffer_08001440"
        },
        "FUN_08000230": {
            "renaming": {
                "FUN_08000230": "find_byte_sequence_08000230",
                "param_1": "data",
                "param_2": "search_byte",
                "param_3": "data_length",
                "bVar1": "current_byte",
                "cVar2": "is_byte_1_zero",
                "cVar3": "is_byte_2_zero",
                "cVar4": "is_byte_3_zero",
                "cVar5": "is_byte_4_zero",
                "pbVar6": "current_pointer",
                "puVar7": "current_uint_pointer",
                "pbVar8": "result",
                "uVar9": "remaining_bytes",
                "uVar10": "remaining_data_length",
                "uVar11": "data_word_1",
                "uVar12": "data_word_2",
                "bVar13": "is_data_byte_1_zero",
                "bVar14": "is_data_byte_2_zero",
                "bVar15": "is_data_byte_3_zero",
                "bVar16": "is_data_byte_4_zero"
            },
            "code": "byte* find_byte_sequence_08000230(uint* data, uint search_byte, uint data_length) {\n    byte* result = NULL;\n    search_byte = search_byte & 0xff;\n\n    if ((int)data_length < 0x10) {\n        while (data_length-- > 0) {\n            if (*data == search_byte) {\n                return (byte*)data;\n            }\n            data++;\n        }\n    }\n    else {\n        uint search_word = search_byte | (search_byte << 8) | (search_byte << 16) | (search_byte << 24);\n        uint remaining_data_length = data_length & 0xfffffff8;\n        while (remaining_data_length != 0) {\n            uint data_word_1 = *data++;\n            uint data_word_2 = *data++;\n            remaining_data_length -= 8;\n\n            if ((data_word_1 ^ search_word) | (data_word_2 ^ search_word)) {\n                result = (byte*)(data - 1);\n                if ((data_word_1 & 0xff) == search_byte) {\n                    return result;\n                }\n                if ((data_word_1 & 0xff00) == (search_byte << 8)) {\n                    return result + 1;\n                }\n                if ((data_word_1 & 0xff0000) == (search_byte << 16)) {\n                    return result + 2;\n                }\n                if ((data_word_1 & 0xff000000) == (search_byte << 24)) {\n                    return result + 3;\n                }\n                if ((data_word_2 & 0xff) == search_byte) {\n                    return result + 4;\n                }\n                if ((data_word_2 & 0xff00) == (search_byte << 8)) {\n                    return result + 5;\n                }\n                if ((data_word_2 & 0xff0000) == (search_byte << 16)) {\n                    return result + 6;\n                }\n                if ((data_word_2 & 0xff000000) == (search_byte << 24)) {\n                    return result + 7;\n                }\n            }\n        }\n\n        while (data_length-- > 0) {\n            if (*data++ == search_byte) {\n                return (byte*)(data - 1);\n            }\n        }\n    }\n\n    return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000230",
            "calling": [
                "FUN_08004d9c",
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "find_byte_sequence_08000230"
        },
        "FUN_08001684": {
            "renaming": {
                "FUN_08001684": "set_params_08001684",
                "param_1": "params",
                "param_1[0xb]": "param_b",
                "param_1[0xc]": "param_c",
                "(int)param_1 + 0x3d": "param_3d",
                "DAT_08001714": "PTR_DAT_08001714"
            },
            "code": "int set_params_08001684(uint **params) {\n    uint *param_b = params[0xb];\n    char *param_3d = (char *) ((int) params + 0x3d);\n    if ((param_b == (uint *)0x4 || param_b == (uint *)0x8) && (*param_3d == '(')) {\n        params[0xb] = DAT_08001714;\n        (*params)[1] &= 0xfffff8ff;\n        (*params)[5] = 0xfffffbff;\n        **params &= 0xfffffbff;\n        params[0xc] = NULL;\n        *param_3d = ' ';\n        *(param_3d + 1) = 0;\n        FUN_080038d0();\n    } else if (*param_3d == '!') {\n        params[0xb] = DAT_08001714;\n        params[0xc] = (uint *)0x21;\n        *param_3d = ' ';\n        *(param_3d + 1) = 0;\n        (*params)[1] &= 0xfffff8ff;\n        (*params)[5] = 0xfffffbff;\n        **params &= 0xfffffbff;\n        do_nothing_080015ba();\n    } else {\n        (*params)[5] = 0xfffffbff;\n    }\n    return 0;\n}",
            "called": [
                "FUN_080015ba",
                "FUN_080038d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001684",
            "calling": [
                "FUN_08001e68"
            ],
            "imported": false,
            "current_name": "set_params_08001684"
        },
        "FUN_08000f8c": {
            "renaming": {
                "FUN_08000f8c": "set_flag_if_not_two_08000f8c",
                "param_1": "param_array",
                "uint": "unsigned int",
                "*(char *)((int)param_1 + 0x35)": "flag",
                "param_1[0x15]": "flag_ptr",
                "*(undefined *)((int)param_1 + 0x35)": "flag",
                "**param_1": "value_ptr",
                "0xfffffffe": "0b11111111111111111111111111111110"
            },
            "code": "int set_flag_if_not_two_08000f8c(uint **param_array){\n    if (*(char *)((int)param_array + 0x35) != '\\x02') {\n        param_array[21] = (uint *)0x80;\n        return 1;\n    }\n    *(undefined *)((int)param_array + 0x35) = 5;\n    **param_array &= 0xfffffffe;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f8c",
            "calling": [
                "FUN_08002ffc",
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "set_flag_if_not_two_08000f8c"
        },
        "FUN_080001ac": {
            "renaming": {
                "FUN_080001ac": "check_initialized_080001ac",
                "param_1": "data_ptr",
                "PTR_DAT_080001c4": "data_initialized",
                "DAT_080001c8": "data_value",
                "PTR_FUN_080001cc": "initialize_data"
            },
            "code": "int *check_initialized_080001ac(int *data_ptr)\n{\n  if (*PTR_DAT_080001c4 == 0)\n  {\n    if (DAT_080001c8 != 0)\n    {\n      data_ptr = PTR_FUN_080001cc;\n    }\n    *PTR_DAT_080001c4 = 1;\n  }\n  return data_ptr;\n}",
            "called": [
                "FUN_080059f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ac",
            "calling": [],
            "imported": false,
            "current_name": "check_initialized_080001ac"
        },
        "FUN_080040e0": {
            "renaming": {
                "FUN_080040e0": "returnOne_080040e0",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int returnOne_080040e0(){\n    int result = 1;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e0",
            "calling": [
                "FUN_080056f8"
            ],
            "imported": false,
            "current_name": "returnOne_080040e0"
        },
        "FUN_080048cc": {
            "renaming": {
                "FUN_080048cc": "fill_array_with_value_080048cc",
                "param_1": "array",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "end_of_array",
                "*param_1": "*array"
            },
            "code": "void fill_array_with_value_080048cc(unsigned char *array, unsigned char value, int length) {\n  unsigned char *end_of_array = array + length;\n  for (; array != end_of_array; array++) {\n    *array = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048cc",
            "calling": [
                "FUN_08005400",
                "FUN_0800532c",
                "FUN_08005374"
            ],
            "imported": false,
            "current_name": "fill_array_with_value_080048cc"
        },
        "FUN_080040e4": {
            "renaming": {
                "FUN_080040e4": "zero_080040e4"
            },
            "code": "int zero_080040e4() {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e4",
            "calling": [
                "FUN_08005718"
            ],
            "imported": false,
            "current_name": "zero_080040e4"
        },
        "FUN_08003506": {
            "renaming": {
                "FUN_08003506": "find_short_08003506",
                "param_1": "target",
                "param_2": "array"
            },
            "code": "int find_short_08003506(int target, short* array)\n{\n    while(true)\n    {\n        if (*(int *)(array + 2) == 0)\n        {\n            return -1;\n        }\n        if (*(int *)(array + 2) == target)\n        {\n            break;\n        }\n        array += 6;\n    }\n    return (int)*array;\n}",
            "called": [
                "FUN_08003506"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003506",
            "calling": [
                "FUN_08003506",
                "FUN_0800351e"
            ],
            "imported": false,
            "current_name": "find_short_08003506"
        },
        "FUN_080025e0": {
            "renaming": {
                "FUN_080025e0": "get_value_from_pointer_080025e0",
                "PTR_DAT_080025e8": "pointer_to_value"
            },
            "code": "int get_value_from_pointer_080025e0(){\n  int* PTR_DAT_080025e8 = (int*) PTR_DAT_080025e8;\n  return *PTR_DAT_080025e8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e0",
            "calling": [
                "FUN_08000c8c",
                "FUN_080025ec",
                "FUN_0800260c"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_080025e0"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "return_zero_080040e8"
            },
            "code": "int return_zero_080040e8(void) {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "FUN_0800573c"
            ],
            "imported": false,
            "current_name": "return_zero_080040e8"
        },
        "FUN_08000a00": {
            "renaming": {
                "FUN_08000a00": "set_bit_at_position_08000a00",
                "param_1": "input_position",
                "param_2": "output_position",
                "param_3": "output_buffer",
                "param_4": "bit_value",
                "uVar1": "hash",
                "uVar2": "bit_position"
            },
            "code": "int set_bit_at_position_08000a00(int input_position, int output_position, uint16_t *output_buffer, uint8_t bit_value){\n  uint32_t hash = hash_function(*(uint8_t *)(input_position + 0xb), *(uint8_t *)(input_position + 0xc), bit_value, bit_value, bit_value);\n  uint8_t bit_position = (hash << 0x14) >> 0x18;\n  if (*(int8_t *)(input_position + 0xd) == -1) {\n    *(output_buffer + bit_position) = (1 << (hash & 0xf)) | *(output_buffer + bit_position);\n  }\n  else {\n    *(output_buffer + bit_position) = *(output_buffer + bit_position) & ~(1 << (hash & 0xf));\n  }\n  *(uint8_t *)(input_position + 0x49) = 6;\n  update_data(input_position);\n  return 8;\n}",
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a00",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_08000a00"
        },
        "FUN_080047c0": {
            "renaming": {
                "FUN_080047c0": "execute_function_080047c0",
                "param_1": "function_address",
                "iVar1": "index",
                "PTR_DAT_080047ec": "PTR_DAT",
                "FUN_08005760": "call_function1",
                "FUN_08004678": "get_index",
                "var_index": "var_index",
                "ptr": "ptr"
            },
            "code": "void execute_function_080047c0(int function_address)\n{\n    int index = *(int *)(function_address + 8);\n    if (index != 0) {\n        code* function_ptr = *(code **)(function_address + 0xc);\n        (*function_ptr)();\n        return;\n    }\n    call_function1();\n    int var_index = get_index();\n    int* ptr = *(int **)(PTR_DAT_080047ec_080047ec + var_index * 0x14 + 0xc);\n    if (*ptr != 0) {\n        execute_function_080047c0(function_address);\n    }\n    return;\n}",
            "called": [
                "FUN_08005760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047c0",
            "calling": [
                "FUN_080047d0"
            ],
            "imported": false,
            "current_name": "execute_function_080047c0"
        },
        "FUN_08005374": {
            "renaming": {
                "FUN_08005374": "allocate_memory_block_08005374",
                "param_1": "base_address",
                "param_2": "block_number",
                "iVar2": "block_size",
                "puVar1": "block_ptr"
            },
            "code": "undefined4* allocate_memory_block_08005374(undefined4 base_address, int block_number) {\n    undefined4* block_ptr;\n    int block_size = (block_number - 1) * 0x68;\n    block_ptr = (undefined4*)FUN_08004978(base_address, block_size + 0x74);\n    if (block_ptr != (undefined4*)0x0) {\n        *block_ptr = 0;\n        block_ptr[1] = block_number;\n        block_ptr[2] = block_ptr + 3;\n        FUN_080048cc(block_ptr + 3, 0, block_size + 0x68);\n    }\n    return block_ptr;\n}",
            "called": [
                "FUN_08004978",
                "FUN_080048cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005374",
            "calling": [
                "FUN_08005400"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08005374"
        },
        "FUN_08004d9c": {
            "renaming": {
                "FUN_08004d9c": "process_data_08004d9c",
                "param_1": "arg1",
                "param_2": "data_ptr",
                "param_3": "arg3",
                "param_4": "callback_fn",
                "param_5": "out_data_ptr",
                "bVar1": "data_byte",
                "iVar2": "result",
                "puVar3": "ptr",
                "iVar4": "loop_var",
                "puVar5": "hex_chars",
                "uVar6": "divisor",
                "uVar8": "data_value",
                "uVar9": "data_length",
                "puVar10": "out_str_ptr",
                "puVar11": "str_ptr",
                "local_24": "out_data",
                "ppuVar7": "data_pptr"
            },
            "code": "\nuint process_data_08004d9c(undefined4 arg1,uint *data_ptr,undefined4 arg3,code *callback_fn,uint **out_data_ptr)\n\n{\n  byte data_byte;\n  int result;\n  uint *ptr;\n  int loop_var;\n  undefined *hex_chars;\n  uint divisor;\n  uint **data_pptr;\n  uint data_value;\n  uint data_length;\n  undefined *out_str_ptr;\n  undefined *str_ptr;\n  uint out_data [2];\n  \n  data_byte = *(byte *)(data_ptr + 6);\n  str_ptr = (undefined *)((int)data_ptr + 0x43);\n  if (data_byte != 0x6e) {\n    if (data_byte < 0x6f) {\n      if (data_byte != 99) {\n        if (data_byte < 100) {\n          if (data_byte == 0) goto LAB_08004f56;\n          if (data_byte != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)data_ptr + 0x45) = 0x58;\n          hex_chars = PTR_s_0123456789ABCDEF_08004fd8;\nLAB_08004ee6:\n          divisor = *data_ptr;\n          ptr = *out_data_ptr;\n          *out_data_ptr = ptr + 1;\n          if (((divisor & 0x80) == 0) && ((int)(divisor << 0x19) < 0)) {\n            data_value = (uint)*(ushort *)ptr;\n          }\n          else {\n            data_value = *ptr;\n          }\n          if ((int)(divisor << 0x1f) < 0) {\n            *data_ptr = divisor | 0x20;\n          }\n          if (data_value == 0) {\n            *data_ptr = *data_ptr & 0xffffffdf;\n          }\n          divisor = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)data_ptr + 0x43) = 0;\n        }\n        else {\n          if ((data_byte != 100) && (data_byte != 0x69)) goto LAB_08004dcc;\n          data_value = *data_ptr;\n          ptr = *out_data_ptr;\n          if ((data_value & 0x80) == 0) {\n            *out_data_ptr = ptr + 1;\n            if ((data_value & 0x40) == 0) goto LAB_08004dec;\n            data_value = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *out_data_ptr = ptr + 1;\nLAB_08004dec:\n            data_value = *ptr;\n          }\n          if ((int)data_value < 0) {\n            data_value = -data_value;\n            *(undefined *)((int)data_ptr + 0x43) = 0x2d;\n          }\n          divisor = 10;\n          hex_chars = PTR_s_0123456789ABCDEF_08004fd8;\n        }\n        data_length = data_ptr[1];\n        data_ptr[2] = data_length;\n        out_str_ptr = str_ptr;\n        if ((int)data_length < 0) {\n          if (data_value != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(undefined *)((int)data_ptr + 0x42) = *hex_chars;\n          out_str_ptr = (undefined *)((int)data_ptr + 0x42);\n        }\n        else {\n          *data_ptr = *data_ptr & 0xfffffffb;\n          if (data_value == 0) {\n            if (data_length != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              data_length = data_value / divisor;\n              out_str_ptr = out_str_ptr + -1;\n              *out_str_ptr = hex_chars[data_value - divisor * data_length];\n              data_value = data_length;\n            } while (data_length != 0);\n          }\n        }\n        if (((divisor == 8) && ((int)(*data_ptr << 0x1f) < 0)) && ((int)data_ptr[1] <= (int)data_ptr[4]))\n        {\n          out_str_ptr[-1] = 0x30;\n          out_str_ptr = out_str_ptr + -1;\n        }\n        data_ptr[4] = (int)str_ptr - (int)out_str_ptr;\n        str_ptr = out_str_ptr;\n        goto LAB_08004ec2;\n      }\n      ptr = *out_data_ptr;\n      *out_data_ptr = ptr + 1;\n      *(char *)((int)data_ptr + 0x42) = (char)*ptr;\nLAB_08004e2c:\n      str_ptr = (undefined *)((int)data_ptr + 0x42);\n      data_value = 1;\n    }\n    else {\n      if (data_byte != 0x73) {\n        if (data_byte < 0x74) {\n          if (data_byte == 0x6f) {\nLAB_08004e52:\n            data_value = *data_ptr;\n            ptr = *out_data_ptr;\n            if ((data_value & 0x80) == 0) {\n              *out_data_ptr = ptr + 1;\n              if ((data_value & 0x40) == 0) goto LAB_08004e60;\n              data_value = (uint)*(ushort *)ptr;\n            }\n            else {\n              *out_data_ptr = ptr + 1;\nLAB_08004e60:\n              data_value = *ptr;\n            }\n            hex_chars = PTR_s_0123456789ABCDEF_08004fd8;\n            if (data_byte == 0x6f) {\n              divisor = 8;\n            }\n            else {\n              divisor = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (data_byte == 0x70) {\n            *data_ptr = *data_ptr | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)data_ptr + 0x45) = 0x78;\n            hex_chars = PTR_s_0123456789abcdef_08004fd4;\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (data_byte == 0x75) goto LAB_08004e52;\n          if (data_byte == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)data_ptr + 0x42) = data_byte;\n        goto LAB_08004e2c;\n      }\n      ptr = *out_data_ptr;\n      *out_data_ptr = ptr + 1;\n      str_ptr = (undefined *)*ptr;\n      result = FUN_08000230(str_ptr,0,data_ptr[1]);\n      if (result != 0) {\n        data_ptr[1] = result - (int)str_ptr;\n      }\n      data_value = data_ptr[1];\n    }\n    data_ptr[4] = data_value;\n    *(undefined *)((int)data_ptr + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  data_value = *data_ptr;\n  data_pptr = (uint **)*out_data_ptr;\n  divisor = data_ptr[5];\n  if ((data_value & 0x80) == 0) {\n    *out_data_ptr = (uint *)(data_pptr + 1);\n    ptr = *data_pptr;\n    if ((data_value & 0x40) == 0) goto LAB_08004f42;\n    *(short *)ptr = (short)divisor;\n  }\n  else {\n    *out_data_ptr = (uint *)(data_pptr + 1);\n    ptr = *data_pptr;\nLAB_08004f42:\n    *ptr = divisor;\n  }\nLAB_08004f56:\n  data_ptr[4] = 0;\nLAB_08004ec2:\n  result = FUN_08004cb0(arg1,data_ptr,out_data,arg3,callback_fn);\n  if ((result == -1) || (result = (*callback_fn)(arg1,arg3,str_ptr,data_ptr[4]), result == -1)) {\nLAB_08004ed6:\n    data_value = 0xffffffff;\n  }\n  else {\n    if ((int)(*data_ptr << 0x1e) < 0) {\n      for (result = 0; result < (int)(data_ptr[3] - out_data[0]); result = result + 1) {\n        loop_var = (*callback_fn)(arg1,arg3,(int)data_ptr + 0x19,1);\n        if (loop_var == -1) goto LAB_08004ed6;\n      }\n    }\n    data_value = data_ptr[3];\n    if ((int)data_ptr[3] < (int)out_data[0]) {\n      data_value = out_data[0];\n    }\n  }\n  return data_value;\n}\n\n",
            "called": [
                "FUN_08000230",
                "FUN_08004cb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d9c",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "process_data_08004d9c"
        },
        "FUN_08003750": {
            "renaming": {
                "FUN_08003750": "subtract_four_from_input_08003750",
                "param_1": "input_num",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int subtract_four_from_input_08003750(int input_num) {\n    int result = input_num - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003750",
            "calling": [
                "FUN_0800376e",
                "FUN_08003754"
            ],
            "imported": false,
            "current_name": "subtract_four_from_input_08003750"
        },
        "FUN_080014ec": {
            "renaming": {
                "FUN_080014ec": "validate_parameters_080014ec",
                "param_1": "param_array",
                "param_2": "param_ptr",
                "param_3": "param_len",
                "param_4": "param_buffer",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "code": "int validate_parameters_080014ec(uint **param_array, uint *param_ptr, int param_len, uint *param_buffer) {\n    int result = 0;\n    uint *ptr = *param_array;\n    \n    if (*(char *)((int)param_array + 0x3d) == '(') {\n        if (param_ptr == NULL || param_len == 0 || *(char *)(param_array + 0xf) == '\\x01') {\n            result = 1;\n        }\n        else {\n            *(undefined *)(param_array + 0xf) = 1;\n            if ((*ptr & 1) == 0) {\n                *ptr = *ptr | 1;\n            }\n            **param_array = **param_array & 0xfffff7ff;\n            *(undefined *)((int)param_array + 0x3d) = 0x2a;\n            *(undefined *)((int)param_array + 0x3e) = 0x20;\n            param_array[0x10] = NULL;\n            param_array[9] = param_ptr;\n            *(short *)((int)param_array + 0x2a) = (short)param_len;\n            param_array[0xb] = param_buffer;\n            *(undefined2 *)(param_array + 10) = *(undefined2 *)((int)param_array + 0x2a);\n            *(undefined *)(param_array + 0xf) = 0;\n            (*param_array)[1] = (*param_array)[1] | 0x700;\n        }\n    }\n    else {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ec",
            "calling": [
                "FUN_08003880"
            ],
            "imported": false,
            "current_name": "validate_parameters_080014ec"
        },
        "FUN_080048dc": {
            "renaming": {
                "FUN_080048dc": "add_to_linked_list_080048dc",
                "param_1": "head_ptr",
                "param_2": "data",
                "param_3": "size",
                "param_4": "unused",
                "puVar1": "ptr_to_data",
                "piVar2": "data_ptr",
                "extraout_r1": "next",
                "ppiVar3": "prev",
                "ppiVar4": "next_ptr",
                "ppiVar5": "ptr_to_head",
                "ppiVar6": "prev",
                "ppiVar7": "head",
                "bVar8": "same_as_head"
            },
            "code": "void add_to_linked_list_080048dc(int* head_ptr, int data, int size, int unused) {\n  int **head = (int **)(size + -4);\n  if (*head_ptr < 0) {\n    head = (int **)((int)head + *head_ptr);\n  }\n  do_nothing_0800557c();\n  int **ptr_to_head = *(int ***)PTR_DAT_08004974;\n  if (ptr_to_head == (int **)0x0) {\n    head[1] = (int *)0x0;\n    *(int ***)PTR_DAT_08004974 = head;\n    int **next = (int **)extraout_r1;\n    int **prev = (int **)PTR_DAT_08004974;\n  }\n  else if (head < ptr_to_head) {\n    int **next = (int **)*head;\n    int **prev = (int **)((int)head + (int)next);\n    bool same_as_head = ptr_to_head == prev;\n    if (same_as_head) {\n      prev = (int **)*ptr_to_head;\n      ptr_to_head = (int **)ptr_to_head[1];\n    }\n    head[1] = (int *)ptr_to_head;\n    if (same_as_head) {\n      prev = (int **)((int)prev + (int)next);\n      *head = (int *)prev;\n    }\n    *(int ***)PTR_DAT_08004974 = head;\n  }\n  else {\n    while (true) {\n      int **prev = ptr_to_head;\n      int **next = (int **)prev[1];\n      if (next == (int **)0x0) break;\n      ptr_to_head = next;\n    }\n    int **next = (int **)*prev;\n    if ((int **)((int)prev + (int)next) == head) {\n      next = (int **)((int)next + (int)*head);\n      *prev = (int *)next;\n      if (ptr_to_head == (int **)((int)prev + (int)next)) {\n        int *data_ptr = *ptr_to_head;\n        int **next = (int **)ptr_to_head[1];\n        prev[1] = (int *)next;\n        next = (int **)((int)next + (int)data_ptr);\n        *prev = (int *)next;\n      }\n    }\n    else if (head < (int **)((int)prev + (int)next)) {\n      *head_ptr = 0xc;\n    }\n    else {\n      int **next = (int **)((int)head + (int)*head);\n      bool same_as_prev = ptr_to_head == next;\n      if (same_as_prev) {\n        next = (int **)*ptr_to_head;\n        ptr_to_head = (int **)ptr_to_head[1];\n      }\n      head[1] = (int *)ptr_to_head;\n      if (same_as_prev) {\n        next = (int **)((int)next + (int)*head);\n        *head = (int *)next;\n      }\n      prev[1] = (int *)head;\n    }\n  }\n  do_nothing_0800557e(head_ptr, prev, next, unused);\n}",
            "called": [
                "FUN_0800557e",
                "FUN_0800557c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048dc",
            "calling": [
                "FUN_080051ac",
                "FUN_080050d0"
            ],
            "imported": false,
            "current_name": "add_to_linked_list_080048dc"
        },
        "FUN_08003754": {
            "renaming": {
                "FUN_08003754": "execute_if_valid_callback_08003754",
                "param_1": "callback_param",
                "iVar1": "callback_address"
            },
            "code": "void execute_if_valid_callback_08003754(int callback_param) {\n  int callback_address = get_callback_address();\n  if (*(code **)(callback_address + 0x48) != (code *)0x0 && *(char *)(callback_param + 0x18) == '\\x01') {\n    (**(code **)(callback_address + 0x48))(callback_address, 0);\n  }\n  return;\n}",
            "called": [
                "FUN_08003750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003754",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "execute_if_valid_callback_08003754"
        },
        "FUN_08001578": {
            "renaming": {
                "FUN_08001578": "set_bit_and_flags_08001578",
                "param_1": "param_array",
                "puVar1": "param_ptr",
                "*(char *)((int)param_1 + 0x3d)": "space_char",
                "*(undefined *)((int)param_1 + 0x3d)": "open_parenthesis_char",
                "return": "return_value"
            },
            "code": "int set_bit_and_flags_08001578(uint **param_array) {\n  uint *param_ptr;\n  char space_char = ' ';\n  char open_parenthesis_char = '(';\n  int return_value = 0;\n  \n  if (param_array == NULL) {\n    return 2;\n  }\n  \n  if (**param_array & 1) {\n    **param_array |= 0x400;\n  }\n  else {\n    **param_array |= 1;\n    **param_array |= 0x400;\n  }\n  \n  (*param_array)[1] |= 0x300;\n  \n  param_ptr = *param_array;\n  if (param_ptr == NULL) {\n    return 2;\n  }\n  \n  if (*(char *)((int)param_array + 0x3d) != space_char) {\n    return_value = 2;\n  }\n  else {\n    *(char *)((int)param_array + 0x3d) = open_parenthesis_char;\n  }\n  \n  return return_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001578",
            "calling": [
                "FUN_080038d0",
                "FUN_08003900"
            ],
            "imported": false,
            "current_name": "set_bit_and_flags_08001578"
        },
        "FUN_08004844": {
            "renaming": {
                "FUN_08004844": "calculate_result_08004844",
                "param_1": "is_flag_set",
                "param_2": "input_value",
                "DAT_0800485c": "is_flag_set_set"
            },
            "code": "longlong calculate_result_08004844(undefined4 is_flag_set, uint input_value) {\n  if (is_flag_set != 0) {\n    return CONCAT44(input_value, 2);\n  }\n  return (ulonglong)input_value << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004844",
            "calling": [
                "FUN_080047fe"
            ],
            "imported": false,
            "current_name": "calculate_result_08004844"
        },
        "FUN_0800318c": {
            "renaming": {
                "FUN_0800318c": "get_data_at_index_0800318c",
                "param_1": "index",
                "DAT_080031d0": "data_0",
                "DAT_080031d4": "data_2",
                "DAT_080031d8": "data_3",
                "DAT_080031dc": "data_4",
                "DAT_080031e0": "data_5",
                "DAT_080031e4": "data_6",
                "DAT_080031e8": "data_7",
                "DAT_080031ec": "data_8",
                "DAT_080031f0": "data_9",
                "DAT_080031f4": "data_10",
                "DAT_080031f8": "data_1"
            },
            "code": "undefined4 get_data_at_index_0800318c(int index)\n{\n    switch(index) {\n        case 0:\n            return DAT_080031d0;\n        case 1:\n            return DAT_080031f8;\n        case 2:\n            return DAT_080031d4;\n        case 3:\n            return DAT_080031d8;\n        case 4:\n            return DAT_080031dc;\n        case 5:\n            return DAT_080031e0;\n        case 6:\n            return DAT_080031e4;\n        case 7:\n            return DAT_080031e8;\n        case 8:\n            return DAT_080031ec;\n        case 9:\n            return DAT_080031f0;\n        case 10:\n            return DAT_080031f4;\n        default:\n            return 0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800318c",
            "calling": [
                "FUN_080041bc"
            ],
            "imported": false,
            "current_name": "get_data_at_index_0800318c"
        },
        "FUN_080047d0": {
            "renaming": {
                "FUN_080047d0": "check_and_call_function_080047d0",
                "iVar1": "random_index",
                "FUN_08004678": "get_random_index",
                "PTR_DAT_080047ec": "some_pointer",
                "call_some_function": "call_some_function"
            },
            "code": "void check_and_call_function_080047d0(void)\n{\n  int random_index = get_random_index();\n  if (*(int *)(PTR_DAT_080047ec + random_index * 0x14 + 0xc) != 0) {\n    call_some_function();\n  }\n  return;\n}",
            "called": [
                "FUN_080047c0",
                "FUN_08004678"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047d0",
            "calling": [
                "FUN_080011a4"
            ],
            "imported": false,
            "current_name": "check_and_call_function_080047d0"
        },
        "FUN_080040f8": {
            "renaming": {
                "FUN_080040f8": "loop_forever_080040f8"
            },
            "code": "void loop_forever_080040f8(void)\n{\n  while( true ) {\n    // Do nothing\n  }\n}",
            "called": [
                "FUN_080040f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040f8",
            "calling": [
                "FUN_080051ac",
                "FUN_080040f8"
            ],
            "imported": false,
            "current_name": "loop_forever_080040f8"
        },
        "FUN_0800500c": {
            "renaming": {
                "FUN_0800500c": "process_input_0800500c",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "ptr_data",
                "iVar2": "result"
            },
            "code": "void process_input_0800500c(int *output, undefined4 input) {\n  undefined *ptr_data = PTR_DAT_08005028;\n  *(undefined4 *)PTR_DAT_08005028 = 0;\n  int result = calculate(input);\n  if ((result == -1) && (*(int *)ptr_data != 0)) {\n    *output = *(int *)ptr_data;\n  }\n  return;\n}",
            "called": [
                "FUN_08004094"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800500c",
            "calling": [
                "FUN_08004978"
            ],
            "imported": false,
            "current_name": "process_input_0800500c"
        },
        "FUN_080023b4": {
            "renaming": {
                "FUN_080023b4": "calculate_result_080023b4",
                "in_r3": "input_parameter",
                "DAT_0800247c": "memory_location",
                "DAT_08002480": "error_value",
                "DAT_08002484": "success_value",
                "flags": "flag_bits",
                "result": "final_result",
                "value": "input_value",
                "is_bit_set": "is_bit_activated",
                "multiplier": "calculation_multiplier",
                "factor": "calculation_factor",
                "divisor": "calculation_divisor"
            },
            "code": "uint calculate_result_080023b4(void)\n{\n    uint flags = *(uint *)(DAT_0800247c + 8) & 0xc;\n    uint result;\n\n    if (flags == 4) {\n        result = DAT_08002484;\n    }\n    else if (flags == 8) {\n        uint value = *(uint *)(DAT_0800247c + 4) & 0x3f;\n        uint is_bit_set = (*(uint *)(DAT_0800247c + 4) & 0x400000) == 0;\n        uint multiplier = (uint)(*(int *)(DAT_0800247c + 4) << 0x11) >> 0x17;\n        uint factor = (((uint)(multiplier * 0x20 < multiplier) * -0x3f - (uint)(multiplier * 0x7c0 < multiplier * 0x1f)) * 8 + (uint)CARRY4(multiplier * 0x3d08, multiplier)) * (is_bit_set ? 0x200 : 0x400) | multiplier * 0x3d09 >> 0x16;\n        result = FUN_080002d0(is_bit_set ? multiplier * 8000000 : multiplier * 16000000, factor, value, 0, in_r3);\n    }\n    else {\n        result = DAT_08002480;\n    }\n\n    uint divisor = ((((uint)(*(int *)(DAT_0800247c + 4) << 0xe) >> 0x1e) + 1) * 2);\n    return result / divisor;\n}",
            "called": [
                "FUN_080002d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080023b4",
            "calling": [
                "FUN_08002488"
            ],
            "imported": false,
            "current_name": "calculate_result_080023b4"
        },
        "FUN_080011a4": {
            "renaming": {
                "FUN_080011a4": "set_param_if_bit_set_080011a4",
                "param_1": "param",
                "DAT_080011bc": "ptr_dat_080011bc",
                "PTR_080011bc_14": "ptr_dat_080011bc_14"
            },
            "code": "void set_param_if_bit_set_080011a4(uint param)\n{\n  uint* PTR_080011bc_14 = (uint *)(DAT_080011bc + 0x14);\n  uint bit_mask = *(PTR_080011bc_14);\n  if ((bit_mask & param) != 0) {\n    *(PTR_080011bc_14) = param;\n    call_function_at_080047d0();\n  }\n  return;\n}",
            "called": [
                "FUN_080047d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011a4",
            "calling": [],
            "imported": false,
            "current_name": "set_param_if_bit_set_080011a4"
        },
        "FUN_08001e68": {
            "renaming": {
                "FUN_08001e68": "check_and_update_flags_08001e68",
                "param_1": "data",
                "puVar2": "ptr_data",
                "uVar3": "flag1",
                "uVar4": "flag2",
                "DAT_08001f38": "FLAG_1_MASK",
                "execute_function": "FUN_08001684",
                "PTR_00000021": "uint *0x21",
                "char": "char1"
            },
            "code": "void check_and_update_flags_08001e68(uint **data)\n{\n    uint *ptr_data = *data;\n    uint flag1 = ptr_data[5];\n    uint flag2 = ptr_data[1];\n\n    if (((flag1 & DAT_08001f38) != 0) && ((flag2 & FLAG_2_MASK) != 0)) {\n        data[16] = (uint *)((uint)data[16] | 1);\n        ptr_data[5] = 0xfffffeff;\n    }\n\n    if (((flag1 & FLAG_3_MASK) != 0) && ((flag2 & FLAG_2_MASK) != 0)) {\n        data[16] = (uint *)((uint)data[16] | 2);\n        (*data)[5] = 0xfffffdff;\n    }\n\n    if (((flag1 & FLAG_4_MASK) != 0) && ((flag2 & FLAG_2_MASK) != 0)) {\n        char char1 = *(char *)((int)data + 0x3d);\n        if (((*(char *)((int)data + 0x3e) == ' ') && (*(short *)((int)data + 0x2a) == 0)) && (((char1 == '!' || (char1 == ')')) || ((char1 == '(' && (data[0xc] == (uint *)0x21)))))) {\n            execute_function(data);\n        }\n        else {\n            data[16] = (uint *)((uint)data[16] | 4);\n            if (*(char *)((int)data + 0x3e) == '\\x10') {\n                **data = **data | 0x200;\n            }\n            (*data)[5] = 0xfffffbff;\n        }\n    }\n\n    if (((flag1 & FLAG_5_MASK) != 0) && ((flag2 & FLAG_2_MASK) != 0)) {\n        data[16] = (uint *)((uint)data[16] | 8);\n        (*data)[5] = 0xfffff7ff;\n    }\n\n    if (data[16] != (uint *)0x0) {\n        update_flags(data);\n    }\n    return;\n}",
            "called": [
                "FUN_08001684",
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e68",
            "calling": [],
            "imported": false,
            "current_name": "check_and_update_flags_08001e68"
        },
        "FUN_080019a0": {
            "renaming": {
                "FUN_080019a0": "process_data_080019a0",
                "param_1": "data_ptr",
                "puVar1": "char_ptr",
                "data_ptr": "data",
                "short_ptr": "short_ptr",
                "char_ptr": "char_ptr"
            },
            "code": "int process_data_080019a0(uint **data_ptr) {\n  uint *data = *data_ptr;\n  short *short_ptr = (short *)((int)data_ptr + 0x2a);\n  char *char_ptr = (char *)data_ptr[9];\n\n  if (*short_ptr == 4) {\n    data[1] &= 0xfffffbff;\n    data_ptr[9] = (uint *)((int)char_ptr + 1);\n    *char_ptr = (char)data[4];\n    *short_ptr -= 1;\n  }\n  else if (*short_ptr == 3) {\n    data[1] &= 0xfffffbff;\n    **data_ptr &= 0xfffffbff;\n    data_ptr[9] = (uint *)((int)char_ptr + 1);\n    *char_ptr = (char)data[4];\n    *short_ptr -= 1;\n  }\n  else if (*short_ptr == 2) {\n    if ((int)data_ptr[0xb] - 1U < 2) {\n      **data_ptr &= 0xfffffbff;\n      **data_ptr |= 0x100;\n    }\n    else {\n      **data_ptr |= 0x200;\n    }\n    data_ptr[9] = (uint *)((int)char_ptr + 1);\n    *char_ptr = (char)data[4];\n    *short_ptr -= 1;\n    data_ptr[9] = (uint *)((int)char_ptr + 1);\n    *char_ptr = (char)data[4];\n    *short_ptr -= 1;\n    data[1] &= 0xfffffcff;\n    *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n    data_ptr[0xc] = (uint *)0x0;\n    if (*(char *)((int)data_ptr + 0x3e) == '@') {\n      *(undefined *)((int)data_ptr + 0x3e) = 0;\n      do_nothing_08001902();\n    }\n    else {\n      *(undefined *)((int)data_ptr + 0x3e) = 0;\n      do_nothing_080015b8();\n    }\n  }\n  else {\n    data_ptr[9] = (uint *)((int)char_ptr + 1);\n    *char_ptr = (char)data[4];\n    *short_ptr -= 1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015b8",
                "FUN_08001902"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019a0",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_data_080019a0"
        },
        "FUN_08003f24": {
            "renaming": {
                "FUN_08003f24": "execute_function_if_less_than_10_08003f24",
                "uVar1": "function_index",
                "FUN_08003f00": "get_function_index",
                "PTR_DAT_08003f40": "function_table",
                "PTR_DAT_08003f44": "argument_table"
            },
            "code": "void execute_function_if_less_than_10_08003f24()\n{\n  uint function_index;\n  function_index = get_function_index();\n  if (function_index < 10) {\n    (**(code **)(PTR_DAT_08003f40 + function_index * 4))(*(undefined4 *)(PTR_DAT_08003f44 + function_index * 4));\n  }\n  return;\n}",
            "called": [
                "FUN_08003f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f24",
            "calling": [
                "FUN_08002f66"
            ],
            "imported": false,
            "current_name": "execute_function_if_less_than_10_08003f24"
        },
        "FUN_080046b4": {
            "renaming": {
                "FUN_080046b4": "parse_input_080046b4",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "data_ptr"
            },
            "code": "void parse_input_080046b4(int arg1, int arg2, undefined4 arg3, undefined4 arg4) {\n  undefined *data_ptr;\n  data_ptr = PTR_DATA;\n  if (arg1 != 1) {\n    return;\n  }\n  if (arg2 == 0xffff) {\n    data_ptr[0] = 6;\n    *(undefined4 *)(data_ptr + 0xc) = 0;\n    data_ptr[0x14] = 7;\n    *(undefined4 *)(data_ptr + 0x20) = 0;\n    data_ptr[0x28] = 8;\n    *(undefined4 *)(data_ptr + 0x34) = 0;\n    data_ptr[0x3c] = 9;\n    *(undefined4 *)(data_ptr + 0x48) = 0;\n    data_ptr[0x50] = 10;\n    *(undefined4 *)(data_ptr + 0x5c) = 0;\n    data_ptr[100] = 0x17;\n    *(undefined4 *)(data_ptr + 0x70) = 0;\n    data_ptr[0x78] = 0x17;\n    *(undefined4 *)(data_ptr + 0x84) = 0;\n    data_ptr[0x8c] = 0x17;\n    *(undefined4 *)(data_ptr + 0x98) = 0;\n    data_ptr[0xa0] = 0x17;\n    *(undefined4 *)(data_ptr + 0xac) = 0;\n    data_ptr[0xb4] = 0x17;\n    *(undefined4 *)(data_ptr + 0xc0) = 0;\n    data_ptr[200] = 0x28;\n    *(undefined4 *)(data_ptr + 0xd4) = 0;\n    data_ptr[0xdc] = 0x28;\n    *(undefined4 *)(data_ptr + 0xe8) = 0;\n    data_ptr[0xf0] = 0x28;\n    *(undefined4 *)(data_ptr + 0xfc) = 0;\n    data_ptr[0x104] = 0x28;\n    *(undefined4 *)(data_ptr + 0x110) = 0;\n    data_ptr[0x118] = 0x28;\n    *(undefined4 *)(data_ptr + 0x124) = 0;\n    data_ptr[300] = 0x28;\n    *(undefined4 *)(data_ptr + 0x138) = 0;\n    parse_data(0, PTR_LABEL_1, PTR_DATA_2, data_ptr, arg4);\n  }\n  return;\n}",
            "called": [
                "FUN_080047fe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b4",
            "calling": [],
            "imported": false,
            "current_name": "parse_input_080046b4"
        },
        "FUN_0800160c": {
            "renaming": {
                "FUN_0800160c": "do_nothing_0800160c"
            },
            "code": "\nvoid do_nothing_0800160c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160c",
            "calling": [
                "FUN_0800160e",
                "FUN_08001bfc"
            ],
            "imported": false,
            "current_name": "do_nothing_0800160c"
        },
        "FUN_0800160e": {
            "renaming": {
                "FUN_0800160e": "process_input_0800160e",
                "param_1": "input_array",
                "cVar1": "last_char",
                "puVar2": "output_ptr"
            },
            "code": "int process_input_0800160e(int *input_array) {\n    char last_char = *(char *)((int)input_array + 0x3d);\n    if (*(short *)((int)input_array + 0x2a) != 0) {\n        undefined *output_ptr = (undefined *)input_array[9];\n        input_array[9] = (int)(output_ptr + 1);\n        *output_ptr = (char)*(undefined4 *)(*input_array + 0x10);\n        *(short *)((int)input_array + 0x2a) = *(short *)((int)input_array + 0x2a) + -1;\n        if ((*(short *)((int)input_array + 0x2a) == 0) && (last_char == '*')) {\n            *(uint *)(*input_array + 4) = *(uint *)(*input_array + 4) & 0xfffffbff;\n            input_array[0xc] = 0x22;\n            *(undefined *)((int)input_array + 0x3d) = 0x28;\n            do_nothing_0800160c();\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_0800160c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160e",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_0800160e"
        },
        "FUN_0800293e": {
            "renaming": {
                "FUN_0800293e": "do_nothing_0800293e"
            },
            "code": "\nvoid do_nothing_0800293e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293e",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_0800293e"
        },
        "FUN_08000e18": {
            "renaming": {
                "FUN_08000e18": "addByteToUIntAndStore_08000e18",
                "PTR_DAT_08000e28": "destination",
                "PTR_DAT_08000e2c": "source",
                "*PTR_DAT_08000e28": "*destination",
                "*(uint *)PTR_DAT_08000e28": "convertedDestination",
                "(uint)(byte)*PTR_DAT_08000e2c": "convertedByte",
                "*(int *)PTR_DAT_08000e28": "destinationValue"
            },
            "code": "void addByteToUIntAndStore_08000e18(uint *PTR_DAT_08000e28, byte *PTR_DAT_08000e2c)\n{\n  uint (uint)(byte)*PTR_DAT_08000e2c = (uint)(*PTR_DAT_08000e2c);\n  *PTR_DAT_08000e28 += (uint)(byte)*PTR_DAT_08000e2c;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e18",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "addByteToUIntAndStore_08000e18"
        },
        "FUN_08003486": {
            "renaming": {
                "FUN_08003486": "process_input_08003486",
                "param_1": "input",
                "param_2": "output1",
                "param_3": "output2",
                "uVar1": "result",
                "local_24": "bitmask",
                "local_18": "constant",
                "local_20": "output1",
                "local_1c": "output2",
                "FUN_080031fc": "function1",
                "FUN_08000fb4": "function2"
            },
            "code": "void process_input_08003486(uint8_t input, uint32_t *output1, uint32_t *output2)\n{\n    uint32_t shifted_input = (input << 0x18) >> 0x1c;\n    uint32_t bitmask = 1 << (input & 0xf) & 0xffff;\n    uint32_t constant = 2;\n    uint32_t result = function1(shifted_input);\n    function2(result, &bitmask);\n    *output1 = bitmask;\n    *output2 = constant;\n}",
            "called": [
                "FUN_08000fb4",
                "FUN_080031fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003486",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "process_input_08003486"
        },
        "FUN_08005662": {
            "renaming": {
                "FUN_08005662": "check_value_and_set_flag_08005662",
                "param_1": "value",
                "param_2": "data",
                "iVar1": "result",
                "uVar2": "flag",
                "bVar3": "is_error"
            },
            "code": "void check_value_and_set_flag_08005662(int value, int* data) {\n  int result = FUN_08005718(value, *(short *)(data + 0xe));\n  bool is_error = result == -1;\n  ushort flag = *(ushort *)(data + 0xc);\n  if (is_error) {\n    flag &= 0xefff;\n  }\n  else {\n    *(int *)(data + 0x54) = result;\n    flag |= 0x1000;\n  }\n  *(ushort *)(data + 0xc) = flag;\n}\n",
            "called": [
                "FUN_08005718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005662",
            "calling": [],
            "imported": false,
            "current_name": "check_value_and_set_flag_08005662"
        },
        "FUN_080042ac": {
            "renaming": {
                "FUN_080042ac": "update_data_080042ac",
                "param_1": "data_ptr",
                "iVar1": "result",
                "uVar2": "new_index",
                "local_9": "new_data"
            },
            "code": "void update_data_080042ac(int data_ptr)\n{\n  int result;\n  ushort new_index;\n  undefined new_data;\n  result = get_data(data_ptr, &new_data);\n  if ((result == 0) && ((new_index = *(short *)(data_ptr + 100) + 1U & 0x3f) != *(ushort *)(data_ptr + 0x66))) {\n    *(undefined *)(*(int *)(data_ptr + 0x60) + (uint)*(ushort *)(data_ptr + 100)) = new_data;\n    *(ushort *)(data_ptr + 100) = new_index;\n  }\n  return;\n}",
            "called": [
                "FUN_08003e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042ac",
            "calling": [],
            "imported": false,
            "current_name": "update_data_080042ac"
        },
        "FUN_08001864": {
            "renaming": {
                "FUN_08001864": "handle_input_08001864",
                "param_1": "input",
                "puVar1": "input_ptr"
            },
            "code": "uint32_t handle_input_08001864(uint32_t **input)\n{\n  uint32_t *input_ptr;\n  input_ptr = input[11];\n  if (*(char *)((int)input + 0x3d) == '!') {\n    if (*(uint16_t *)((int)input + 0x2a) == 0) {\n      if (((input_ptr == (uint32_t *)0x4) || (input_ptr == (uint32_t *)0x8)) || (input_ptr == (uint32_t *)0xffff0000)) {\n        (*input)[1] = (*input)[1] & 0xfffff8ff;\n        **input = **input | 0x200;\n        input[12] = (uint32_t *)0x0;\n        *(char *)((int)input + 0x3d) = 0x20;\n        if (*(char *)((int)input + 0x3e) == '@') {\n          *(char *)((int)input + 0x3e) = 0;\n          do_nothing_08001718();\n        }\n        else {\n          *(char *)((int)input + 0x3e) = 0;\n          do_nothing_080015b6();\n        }\n      }\n      else {\n        (*input)[1] = (*input)[1] & 0xfffff8ff;\n        input[12] = (uint32_t *)0x11;\n        *(char *)((int)input + 0x3e) = 0;\n        *(char *)((int)input + 0x3d) = 0x20;\n        do_nothing_080015b6();\n      }\n    }\n    else {\n      input_ptr = input[9];\n      input[9] = (uint32_t *)((int)input_ptr + 1);\n      (*input)[4] = (uint32_t)*(char *)input_ptr;\n      *(uint16_t *)((int)input + 0x2a) = *(uint16_t *)((int)input + 0x2a) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001864",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "handle_input_08001864"
        },
        "FUN_08000f2c": {
            "renaming": {
                "FUN_08000f2c": "set_flag_08000f2c",
                "param_1": "flag_value",
                "*DAT_08000f48": "*flag_ptr"
            },
            "code": "void set_flag_08000f2c(int flag_value)\n{\n    if (flag_value != 4) {\n        *DAT_08000f48 = *DAT_08000f48 & 0xfffffffb;\n        return;\n    }\n    *DAT_08000f48 = *DAT_08000f48 | 4;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f2c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "set_flag_08000f2c"
        },
        "FUN_08000ec4": {
            "renaming": {
                "FUN_08000ec4": "set_bit_at_index_08000ec4",
                "param_1": "index"
            },
            "code": "\nvoid set_bit_at_index_08000ec4(uint index)\n\n{\n  if (-1 < (int)index) {\n    *(int *)(DAT_08000edc + (index >> 5) * 4) = 1 << (index & 0x1f);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ec4",
            "calling": [
                "FUN_08003eac",
                "FUN_08003e54"
            ],
            "imported": false,
            "current_name": "set_bit_at_index_08000ec4"
        },
        "FUN_08004338": {
            "renaming": {
                "FUN_08004338": "checkAndCallFunction_08004338",
                "DAT_0800435c": "shouldCallFunction",
                "PTR_DAT_08004360": "functionPointer"
            },
            "code": "void checkAndCallFunction_08004338(void)\n{\n    if (DAT_0800435c)\n    {\n        callFunction(PTR_DAT_08004360);\n    }\n    return;\n}",
            "called": [
                "FUN_08004240"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004338",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "checkAndCallFunction_08004338"
        },
        "FUN_080005e0": {
            "renaming": {
                "FUN_080005e0": "trigger_system_interrupt_080005e0",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void trigger_system_interrupt_080005e0(void)\n{\n  int interrupt_number = 0x3f;\n  software_interrupt(interrupt_number);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e0",
            "calling": [
                "FUN_080005e4"
            ],
            "imported": false,
            "current_name": "trigger_system_interrupt_080005e0"
        },
        "FUN_080005e4": {
            "renaming": {
                "FUN_080005e4": "check_and_call_function_080005e4",
                "param_1": "input_parameter_1",
                "param_2": "input_parameter_2",
                "param_3": "input_parameter_3",
                "param_4": "input_parameter_4",
                "uVar1": "return_value",
                "PTR_DAT_080005fc": "pointer_to_data"
            },
            "code": "int check_and_call_function_080005e4(int param_1, int param_2, int param_3, int param_4) {\n  int return_value;\n  if (*(int *)PTR_DAT_080005fc != 0) {\n    return 0;\n  }\n  return_value = call_function(1, param_1, 0, 0, param_4);\n  return return_value;\n}",
            "called": [
                "FUN_080005e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e4",
            "calling": [
                "FUN_08000c4c"
            ],
            "imported": false,
            "current_name": "check_and_call_function_080005e4"
        },
        "FUN_0800076c": {
            "renaming": {
                "FUN_0800076c": "process_data_0800076c",
                "param_1": "data",
                "param_2": "data_length",
                "param_3": "current_index",
                "param_4": "max_index",
                "uVar1": "current_short_value",
                "iVar2": "loop_result",
                "uVar3": "current_byte_value",
                "current_byte_index": "current_byte_index",
                "next_byte_index": "next_byte_index"
            },
            "code": "void process_data_0800076c(int **data, int data_length, int current_index, int max_index) {\n  int current_byte_index = (int)data + 0x49;\n  uint current_byte_value = (uint)*(byte *)current_byte_index;\n  uint next_byte_index = (current_byte_value + 1) & 0xff;\n  uint current_short_value = get_short_value(data, current_byte_value, max_index, current_index, current_index);\n  *(char *)(current_byte_index + current_byte_value + 9) = (char)(current_short_value >> 8);\n  *(char *)(current_byte_index + next_byte_index + 9) = (char)current_short_value;\n  *(char *)current_byte_index = (char)next_byte_index;\n  if (data[0x6][0] > 1) {\n    call_function_with_parameter(data[0x6][0], 1);\n  }\n  if (data[0x5][0] < 4) {\n    call_function_with_three_parameters(*data, (int)data + 9, *(undefined *)(current_byte_index));\n  }\n  if (data[0x6][0] > 1) {\n    call_function_with_parameter(data[0x6][0], 0);\n  }\n  if (data[0x5][0] < 4) {\n    int loop_result;\n    do {\n      loop_result = call_function_with_parameter(*data);\n    } while (loop_result >= -1);\n  }\n  *(undefined *)current_byte_index = 0;\n  int new_data_index = get_new_data_index();\n  data[0x17] = (int *)(new_data_index + (uint)*(ushort *)((int)data + 0x56));\n  *(short *)((int)data + 0x52) = *(short *)((int)data + 0x52) + 1;\n}",
            "called": [
                "FUN_08004204",
                "FUN_08000728",
                "FUN_080041bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800076c",
            "calling": [
                "FUN_08000a00",
                "FUN_08000b54",
                "FUN_08000b04",
                "FUN_080008e2",
                "FUN_08000a7a",
                "FUN_08000a4e",
                "FUN_08000998"
            ],
            "imported": false,
            "current_name": "process_data_0800076c"
        },
        "FUN_080015b6": {
            "renaming": {
                "FUN_080015b6": "do_nothing_080015b6"
            },
            "code": "\nvoid do_nothing_080015b6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b6",
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "imported": false,
            "current_name": "do_nothing_080015b6"
        },
        "FUN_08004460": {
            "renaming": {
                "FUN_08004460": "set_value_at_offset_08004460",
                "param_1": "base_address",
                "param_2": "offset",
                "uVar1": "value",
                "PTR_DAT_08004478": "PTR_DATA"
            },
            "code": "void set_value_at_offset_08004460(int base_address, uint offset) {\n\tconst uint MAX_OFFSET = 0x60;\n\tconst uint VALUE_SIZE = sizeof(uint16_t);\n\n\tuint16_t value;\n\n\tif (offset < MAX_OFFSET) {\n\t\tconst uint16_t* ptr = (const uint16_t*)(PTR_DAT_08004478 + offset * VALUE_SIZE);\n\t\tvalue = *ptr;\n\t} else {\n\t\tvalue = 0xFFFF;\n\t}\n\n\tuint16_t* target_address = (uint16_t*)(base_address + 300);\n\t*target_address = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004460",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_08004460"
        },
        "FUN_080015b8": {
            "renaming": {
                "FUN_080015b8": "do_nothing_080015b8"
            },
            "code": "\nvoid do_nothing_080015b8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b8",
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "imported": false,
            "current_name": "do_nothing_080015b8"
        },
        "FUN_08001198": {
            "renaming": {
                "FUN_08001198": "set_value_at_offset_08001198",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "offset"
            },
            "code": "void set_value_at_offset_08001198(int base_address, int value, int offset)\n{\n    if (offset == 0) {\n        *(int *)(base_address + 0x18) = value << 0x10;\n    } else {\n        *(int *)(base_address + 0x18) = value;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001198",
            "calling": [
                "FUN_080034b6"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_08001198"
        },
        "FUN_08003138": {
            "renaming": {
                "FUN_08003138": "get_bit_08003138",
                "param_1": "value",
                "param_2": "bit_position",
                "PTR_": "ptr",
                "DAT_": "DAT_08003138"
            },
            "code": "uint get_bit_08003138(uint value, int bit_position) {\n    uint* PTR_ = (uint*)(DAT_ + ((value << 0x18) >> 0x1c) * 4);\n    uint masked_value = *PTR_ >> (value & 0xf) & 1;\n    return masked_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003138",
            "calling": [
                "FUN_080041bc",
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "get_bit_08003138"
        },
        "FUN_08000300": {
            "renaming": {
                "FUN_08000300": "multiply_with_carry_08000300",
                "param_1": "multiplier",
                "param_2": "multiplicand_low",
                "param_3": "multiplicand_high",
                "param_4": "divisor",
                "param_5": "remainder",
                "uVar1": "product_low",
                "puVar2": "product_low_ptr",
                "puVar4": "product_high_ptr",
                "uVar3": "division_result",
                "uVar5": "quotient_low",
                "uVar6": "quotient",
                "uVar7": "remainder_low",
                "uVar8": "temp",
                "uVar9": "temp1",
                "uVar10": "temp2",
                "uVar11": "temp3",
                "uVar12": "shift_amount",
                "bVar13": "carry_flag"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong multiply_with_carry_08000300(uint multiplier,uint multiplicand_low,uint multiplicand_high,uint divisor,uint *remainder)\n\n{\n  ulonglong product_low;\n  uint *product_low_ptr;\n  uint division_result;\n  uint *product_high_ptr;\n  uint quotient_low;\n  uint quotient;\n  uint remainder_low;\n  uint temp;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint shift_amount;\n  bool carry_flag;\n  \n  if (divisor == 0) {\n    if (multiplicand_low < multiplicand_high) {\n      shift_amount = count_leading_zeroes(multiplicand_high);\n      if (shift_amount != 0) {\n        multiplicand_high = multiplicand_high << (shift_amount & 0xff);\n        multiplicand_low = multiplier >> (0x20 - shift_amount & 0xff) | multiplicand_low << (shift_amount & 0xff);\n        multiplier = multiplier << (shift_amount & 0xff);\n      }\n      temp2 = multiplicand_high >> 0x10;\n      temp = multiplicand_low / temp2;\n      remainder_low = multiplier >> 0x10 | (multiplicand_low - temp2 * temp) * 0x10000;\n      quotient = temp * (multiplicand_high & 0xffff);\n      quotient_low = temp;\n      if (remainder_low <= quotient && quotient - remainder_low != 0) {\n        carry_flag = CARRY4(remainder_low,multiplicand_high);\n        remainder_low = remainder_low + multiplicand_high;\n        quotient_low = temp - 1;\n        if ((carry_flag == false) && (remainder_low <= quotient && quotient - remainder_low != 0)) {\n          quotient_low = temp - 2;\n          remainder_low = remainder_low + multiplicand_high;\n        }\n      }\n      temp = (remainder_low - quotient) / temp2;\n      remainder_low = multiplier & 0xffff | ((remainder_low - quotient) - temp2 * temp) * 0x10000;\n      temp2 = temp * (multiplicand_high & 0xffff);\n      quotient = temp;\n      if (remainder_low <= temp2 && temp2 - remainder_low != 0) {\n        carry_flag = CARRY4(remainder_low,multiplicand_high);\n        remainder_low = remainder_low + multiplicand_high;\n        quotient = temp - 1;\n        if ((carry_flag == false) && (remainder_low <= temp2 && temp2 - remainder_low != 0)) {\n          quotient = temp - 2;\n          remainder_low = remainder_low + multiplicand_high;\n        }\n      }\n      remainder_low = remainder_low - temp2;\n      product_low_ptr = (uint *)(quotient | quotient_low << 0x10);\n      product_high_ptr = (uint *)0x0;\n    }\n    else {\n      if (multiplicand_high == 0) {\n        multiplicand_high = 1 / 0;\n      }\n      shift_amount = count_leading_zeroes(multiplicand_high);\n      if (shift_amount == 0) {\n        multiplicand_low = multiplicand_low - multiplicand_high;\n        remainder_low = multiplicand_high >> 0x10;\n        temp3 = multiplicand_high & 0xffff;\n        product_high_ptr = (uint *)0x1;\n      }\n      else {\n        multiplicand_high = multiplicand_high << (shift_amount & 0xff);\n        remainder_low = multiplicand_high >> 0x10;\n        quotient_low = multiplicand_low >> (0x20 - shift_amount & 0xff);\n        temp1 = multiplier >> (0x20 - shift_amount & 0xff) | multiplicand_low << (shift_amount & 0xff);\n        quotient = quotient_low / remainder_low;\n        temp3 = multiplicand_high & 0xffff;\n        temp2 = temp1 >> 0x10 | (quotient_low - remainder_low * quotient) * 0x10000;\n        temp = quotient * temp3;\n        multiplier = multiplier << (shift_amount & 0xff);\n        quotient_low = quotient;\n        if (temp2 <= temp && temp - temp2 != 0) {\n          carry_flag = CARRY4(temp2,multiplicand_high);\n          temp2 = temp2 + multiplicand_high;\n          quotient_low = quotient - 1;\n          if ((carry_flag == false) && (temp2 <= temp && temp - temp2 != 0)) {\n            quotient_low = quotient - 2;\n            temp2 = temp2 + multiplicand_high;\n          }\n        }\n        division_result = (temp2 - temp) / remainder_low;\n        multiplicand_low = temp1 & 0xffff | ((temp2 - temp) - remainder_low * division_result) * 0x10000;\n        temp = division_result * temp3;\n        quotient = division_result;\n        if (multiplicand_low <= temp && temp - multiplicand_low != 0) {\n          carry_flag = CARRY4(multiplicand_low,multiplicand_high);\n          multiplicand_low = multiplicand_low + multiplicand_high;\n          quotient = division_result - 1;\n          if ((carry_flag == false) && (multiplicand_low <= temp && temp - multiplicand_low != 0)) {\n            quotient = division_result - 2;\n            multiplicand_low = multiplicand_low + multiplicand_high;\n          }\n        }\n        multiplicand_low = multiplicand_low - temp;\n        product_high_ptr = (uint *)(quotient | quotient_low << 0x10);\n      }\n      temp2 = multiplicand_low / remainder_low;\n      temp = multiplier >> 0x10 | (multiplicand_low - remainder_low * temp2) * 0x10000;\n      quotient = temp3 * temp2;\n      quotient_low = temp2;\n      if (temp <= quotient && quotient - temp != 0) {\n        carry_flag = CARRY4(temp,multiplicand_high);\n        temp = temp + multiplicand_high;\n        quotient_low = temp2 - 1;\n        if ((carry_flag == false) && (temp <= quotient && quotient - temp != 0)) {\n          quotient_low = temp2 - 2;\n          temp = temp + multiplicand_high;\n        }\n      }\n      temp2 = (temp - quotient) / remainder_low;\n      remainder_low = multiplier & 0xffff | ((temp - quotient) - remainder_low * temp2) * 0x10000;\n      temp3 = temp3 * temp2;\n      quotient = temp2;\n      if (remainder_low <= temp3 && temp3 - remainder_low != 0) {\n        carry_flag = CARRY4(remainder_low,multiplicand_high);\n        remainder_low = remainder_low + multiplicand_high;\n        quotient = temp2 - 1;\n        if ((carry_flag == false) && (remainder_low <= temp3 && temp3 - remainder_low != 0)) {\n          quotient = temp2 - 2;\n          remainder_low = remainder_low + multiplicand_high;\n        }\n      }\n      remainder_low = remainder_low - temp3;\n      product_low_ptr = (uint *)(quotient | quotient_low << 0x10);\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = remainder_low >> (shift_amount & 0xff);\n      remainder[1] = 0;\n      return CONCAT44(product_high_ptr,product_low_ptr);\n    }\n  }\n  else if (multiplicand_low < divisor) {\n    product_low_ptr = remainder;\n    product_high_ptr = remainder;\n    if (remainder != (uint *)0x0) {\n      *remainder = multiplier;\n      remainder[1] = multiplicand_low;\n      return 0;\n    }\n  }\n  else {\n    product_high_ptr = (uint *)count_leading_zeroes(divisor);\n    if (product_high_ptr != (uint *)0x0) {\n      temp = 0x20 - (int)product_high_ptr;\n      quotient_low = multiplicand_high >> (temp & 0xff) | divisor << ((uint)product_high_ptr & 0xff);\n      temp1 = quotient_low >> 0x10;\n      shift_amount = multiplicand_low >> (temp & 0xff);\n      temp3 = multiplier >> (temp & 0xff) | multiplicand_low << ((uint)product_high_ptr & 0xff);\n      temp2 = shift_amount / temp1;\n      remainder_low = temp3 >> 0x10 | (shift_amount - temp1 * temp2) * 0x10000;\n      quotient = temp2 * (quotient_low & 0xffff);\n      multiplicand_high = multiplicand_high << ((uint)product_high_ptr & 0xff);\n      multiplier = multiplier << ((uint)product_high_ptr & 0xff);\n      shift_amount = temp2;\n      if (remainder_low <= quotient && quotient - remainder_low != 0) {\n        carry_flag = CARRY4(remainder_low,quotient_low);\n        remainder_low = remainder_low + quotient_low;\n        shift_amount = temp2 - 1;\n        if ((carry_flag == false) && (remainder_low <= quotient && quotient - remainder_low != 0)) {\n          shift_amount = temp2 - 2;\n          remainder_low = remainder_low + quotient_low;\n        }\n      }\n      temp2 = (remainder_low - quotient) / temp1;\n      remainder_low = temp3 & 0xffff | ((remainder_low - quotient) - temp1 * temp2) * 0x10000;\n      temp1 = temp2 * (quotient_low & 0xffff);\n      quotient = temp2;\n      if (remainder_low <= temp1 && temp1 - remainder_low != 0) {\n        carry_flag = CARRY4(remainder_low,quotient_low);\n        remainder_low = remainder_low + quotient_low;\n        quotient = temp2 - 1;\n        if ((carry_flag == false) && (remainder_low <= temp1 && temp1 - remainder_low != 0)) {\n          quotient = temp2 - 2;\n          remainder_low = remainder_low + quotient_low;\n        }\n      }\n      quotient = quotient | shift_amount << 0x10;\n      product_low = (ulonglong)quotient * (ulonglong)multiplicand_high;\n      if (CONCAT44(remainder_low - temp1,multiplier) < product_low) {\n        product_low = product_low - CONCAT44(quotient_low,multiplicand_high);\n        quotient = quotient - 1;\n      }\n      if (remainder != (uint *)0x0) {\n        shift_amount = ((remainder_low - temp1) - (int)(product_low >> 0x20)) - (uint)(multiplier < (uint)product_low);\n        *remainder = shift_amount << (temp & 0xff) | multiplier - (uint)product_low >> ((uint)product_high_ptr & 0xff);\n        remainder[1] = shift_amount >> ((uint)product_high_ptr & 0xff);\n      }\n      return (ulonglong)quotient;\n    }\n    if ((divisor < multiplicand_low) || (product_low_ptr = product_high_ptr, multiplicand_high <= multiplier)) {\n      carry_flag = multiplier < multiplicand_high;\n      multiplier = multiplier - multiplicand_high;\n      multiplicand_low = (multiplicand_low - divisor) - (uint)carry_flag;\n      product_low_ptr = (uint *)0x1;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = multiplier;\n      remainder[1] = multiplicand_low;\n      return ZEXT48(product_low_ptr);\n    }\n  }\n  return CONCAT44(product_high_ptr,product_low_ptr);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000300",
            "calling": [
                "FUN_080002d0"
            ],
            "imported": false,
            "current_name": "multiply_with_carry_08000300"
        },
        "FUN_08002848": {
            "renaming": {
                "FUN_08002848": "update_bits_08002848",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "new_value",
                "PTR_": "data",
                "DAT_": "mask"
            },
            "code": "void update_bits_08002848(int base_address, uint8_t bit_position, int new_value) {\n  uint32_t* PTR_ = (uint32_t*)(base_address + 0x20);\n  uint32_t DAT_ = ~(1 << (bit_position & 0xff));\n  *PTR_ = (*PTR_ & DAT_) | (new_value << (bit_position & 0xff));\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "FUN_08002864"
            ],
            "imported": false,
            "current_name": "update_bits_08002848"
        },
        "FUN_0800312c": {
            "renaming": {
                "FUN_0800312c": "combine_bytes_0800312c",
                "param_1": "address",
                "* (byte *) (param_1 + 0x3a)": "byte1",
                "* (byte *) (param_1 + 0x39)": "byte2"
            },
            "code": "byte combine_bytes_0800312c(int address){\n    byte byte1 = *(byte *)(address + 0x3a);\n    byte byte2 = *(byte *)(address + 0x39);\n    return byte1 | byte2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800312c",
            "calling": [
                "FUN_08003df4",
                "FUN_08003dd0"
            ],
            "imported": false,
            "current_name": "combine_bytes_0800312c"
        },
        "FUN_080028f0": {
            "renaming": {
                "FUN_080028f0": "clear_bit_080028f0",
                "param_1": "data",
                "param_2": "bit_position",
                "puVar1": "data_ptr"
            },
            "code": "uint32_t clear_bit_080028f0(uint32_t **data, uint32_t bit_position)\\n\\\n    {\\n\\\n        uint32_t *data_ptr;\\n\\\n        FUN_080028d4((*data), bit_position, 0);\\n\\\n        data_ptr = (*data);\\n\\\n        if (((data_ptr[8] & 0x1111) == 0) && ((data_ptr[8] & 0x444) == 0))\\n\\\n        {\\n\\\n            data_ptr[0x11] &= 0xffff7fff;\\n\\\n        }\\n\\\n        data_ptr = (*data);\\n\\\n        if (((data_ptr[8] & 0x1111) == 0) && ((data_ptr[8] & 0x444) == 0))\\n\\\n        {\\n\\\n            (*data) = (uint32_t *)(*data) & 0xfffffffe;\\n\\\n        }\\n\\\n        return 0;\\n\\\n    }",
            "called": [
                "FUN_080028d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028f0",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "clear_bit_080028f0"
        },
        "FUN_08000e30": {
            "renaming": {
                "FUN_08000e30": "get_value_from_pointer_08000e30",
                "PTR_DAT_08000e38": "pointer_to_value",
                "*": "value"
            },
            "code": "int get_value_from_pointer_08000e30() {\n    int* PTR_DAT_08000e38 = PTR_DAT_08000e38;\n    int value = *PTR_DAT_08000e38;\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e30",
            "calling": [
                "FUN_08003d18",
                "FUN_08002dd0",
                "FUN_0800201c",
                "FUN_0800346c",
                "FUN_08001f9c",
                "FUN_08002488",
                "FUN_08002d0c"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08000e30"
        },
        "FUN_08000f56": {
            "renaming": {
                "FUN_08000f56": "set_and_reset_08000f56",
                "param_1": "input_param",
                "*(undefined *)(param_1 + 4)": "*(undefined *)(input_param + 4)",
                "FUN_080033c8": "call_some_function",
                "*(undefined4 *)(param_1 + 0x10)": "*(undefined4 *)(input_param + 0x10)",
                "*(undefined *)(param_1 + 5)": "*(undefined *)(input_param + 5)"
            },
            "code": "int set_and_reset_08000f56(int input_param){\n    if (input_param != 0) {\n        *(undefined *)(input_param + 4) = 2;\n        call_some_function();\n        *(undefined4 *)(input_param + 0x10) = 0;\n        *(undefined *)(input_param + 4) = 0;\n        *(undefined *)(input_param + 5) = 0;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_080033c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f56",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "set_and_reset_08000f56"
        },
        "FUN_0800295c": {
            "renaming": {
                "FUN_0800295c": "decode_packet_0800295c",
                "param_1": "packet_data",
                "sVar1": "packet_count",
                "pbVar2": "payload_byte_ptr",
                "packet_header": "packet_header",
                "packet_type": "packet_type",
                "packet_payload_ptr": "packet_payload_ptr",
                "payload_byte_ptr": "payload_byte_ptr",
                "packet_count": "packet_count",
                "packet_flags": "packet_flags"
            },
            "code": "int decode_packet_0800295c(int *packet_data)\n{\n    char packet_header = *(char *)(packet_data + 0x39);\n    if (packet_header != '!') {\n        return 2;\n    }\n    int packet_type = packet_data[2];\n    int *packet_payload_ptr = (int *)(*packet_data + 4);\n    if (packet_type == 0x1000) {\n        *packet_payload_ptr = *(unsigned short *)packet_data[8] & 0x1ff;\n        if (packet_data[4] == 0) {\n            packet_data[8] += 2;\n        }\n        else {\n            packet_data[8]++;\n        }\n    }\n    else {\n        unsigned char *payload_byte_ptr = (unsigned char *)packet_data[8];\n        packet_data[8] = (int)(payload_byte_ptr + 1);\n        *packet_payload_ptr = (unsigned int)*payload_byte_ptr;\n    }\n    short packet_count = *(short *)(packet_data + 0x26) - 1;\n    *(short *)(packet_data + 0x26) = packet_count;\n    if (packet_count == 0) {\n        unsigned int *packet_flags = (unsigned int *)(*packet_data + 0xc);\n        *packet_flags &= 0xffffff7f;\n        *packet_flags |= 0x40;\n        return 0;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800295c",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "decode_packet_0800295c"
        },
        "FUN_08003380": {
            "renaming": {
                "FUN_08003380": "check_validity_of_input_08003380",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "iVar1": "result"
            },
            "code": "int check_validity_of_input_08003380(int num1, int num2, int num3, int num4)\n{\n  int result = calculate(num1, PTR_DAT_08003398, num3, num4, num4);\n  if ((uint)(result << 0xc) >> 0x1b != 2) {\n    return 0;\n  }\n  return 0x10;\n}",
            "called": [
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003380",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "check_validity_of_input_08003380"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "process_data_08004110",
                "param_1": "data_index",
                "param_2": "option",
                "param_3": "option_flag",
                "param_4": "data_array",
                "iVar1": "result",
                "puVar2": "data_ptr",
                "iVar3": "data_value"
            },
            "code": "void process_data_08004110(uint8_t data_index, uint32_t option, uint32_t option_flag, uint8_t *data_array)\n{\n  int16_t data_value;\n  uint8_t *data_ptr;\n  int32_t result;\n  \n  if (data_index < 0x60) {\n    data_value = (int16_t)*(short *)(data_array + data_index * 2);\n    data_ptr = data_array;\n  }\n  else {\n    data_value = -1;\n    data_ptr = data_array;\n  }\n  if (data_value != -1) {\n    result = process_data_08004110_value(data_value, PTR_DAT_080041ac, option_flag, data_ptr, data_array);\n    if (result != 0) {\n      if (check_value(data_value, PTR_DAT_080041b0) == 0) {\n        if (check_value(data_value, PTR_DAT_080041b4) != 0) {\n          process_data_08004110_cleanup(data_value);\n        }\n      }\n      else {\n        process_data_08004110_cleanup(data_value);\n      }\n      process_data_08004110_finalization(data_value, PTR_DAT_080041ac);\n    }\n    switch(option) {\n    case 0:\n      process_data_08004110_action(data_value, 0);\n      break;\n    case 1:\n      process_data_08004110_action(data_value, 1, 0);\n      break;\n    case 2:\n      process_data_08004110_action(data_value, 0, 1);\n      break;\n    case 3:\n      process_data_08004110_action(data_value, 0, 2);\n    }\n    process_data_08004110_logging(data_value, PTR_DAT_080041b8);\n  }\n  return;\n}",
            "called": [
                "FUN_0800314e",
                "FUN_08003138",
                "FUN_0800355e",
                "FUN_0800316c",
                "FUN_08003414",
                "FUN_080033d8",
                "FUN_08003486"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "FUN_08000600"
            ],
            "imported": false,
            "current_name": "process_data_08004110"
        },
        "FUN_08000ee0": {
            "renaming": {
                "FUN_08000ee0": "validate_input_08000ee0",
                "param_1": "user_input",
                "puVar1": "data_ptr",
                "DAT_08000f04": "data_ptr",
                "DAT_08000f08": "data_buffer"
            },
            "code": "int validate_input_08000ee0(unsigned int user_input)\n{\n    unsigned int *DAT_08000f04 = DAT_08000f04;\n    if (user_input - 1U < 0x1000000) {\n        DAT_08000f04[1] = user_input - 1U;\n        *(unsigned char *)(DAT_08000f08 + 0x23) = 0xf0;\n        DAT_08000f04[2] = 0;\n        *DAT_08000f04 = 7;\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ee0",
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98"
            ],
            "imported": false,
            "current_name": "validate_input_08000ee0"
        },
        "FUN_080015ba": {
            "renaming": {
                "FUN_080015ba": "do_nothing_080015ba"
            },
            "code": "\nvoid do_nothing_080015ba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015ba",
            "calling": [
                "FUN_08001684",
                "FUN_080015bc"
            ],
            "imported": false,
            "current_name": "do_nothing_080015ba"
        },
        "FUN_080015bc": {
            "renaming": {
                "FUN_080015bc": "process_data_080015bc",
                "param_1": "data_ptr",
                "pbVar2": "byte_ptr",
                "cVar1": "current_char"
            },
            "code": "int process_data_080015bc(int *data_ptr) {\n  char current_char;\n  byte *byte_ptr;\n  current_char = *(char *)((int)data_ptr + 0x3d);\n  if (*(short *)((int)data_ptr + 0x2a) != 0) {\n    byte_ptr = (byte *)data_ptr[9];\n    data_ptr[9] = (int)(byte_ptr + 1);\n    *(uint *)(*data_ptr + 0x10) = (uint)*byte_ptr;\n    *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) + -1;\n    if ((*(short *)((int)data_ptr + 0x2a) == 0) && (current_char == ')')) {\n      *(uint *)(*data_ptr + 4) = *(uint *)(*data_ptr + 4) & 0xfffffbff;\n      data_ptr[0xc] = 0x21;\n      *(undefined *)((int)data_ptr + 0x3d) = 0x28;\n      do_nothing_080015ba();\n    }\n    return 0;\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015bc",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_data_080015bc"
        },
        "FUN_08000f4c": {
            "renaming": {
                "FUN_08000f4c": "do_nothing_08000f4c"
            },
            "code": "\nvoid do_nothing_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4c",
            "calling": [
                "FUN_08000f4e"
            ],
            "imported": false,
            "current_name": "do_nothing_08000f4c"
        },
        "FUN_08000f4e": {
            "renaming": {
                "FUN_08000f4e": "do_nothing_and_return_08000f4e",
                "do_nothing_08000f4c": "do_nothing"
            },
            "code": "void do_nothing_and_return_08000f4e(void)\n{\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08000f4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4e",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "do_nothing_and_return_08000f4e"
        },
        "FUN_0800066c": {
            "renaming": {
                "FUN_0800066c": "update_data_at_address_0800066c",
                "param_1": "target_address",
                "param_2": "data",
                "param_3": "data_length",
                "param_4": "padding",
                "*(undefined *)(param_1 + 4)": "*(void**)(target_address + 4)",
                "*(char *)(param_1 + 5)": "*(char*)(target_address + 5)",
                "*(undefined *)(param_1 + 6)": "*(void**)(target_address + 6)",
                "*(undefined2 *)(param_1 + 0x56)": "*(short*)(target_address + 0x56)"
            },
            "code": "void update_data_at_address_0800066c(int target_address, void* data, int data_length, void* padding) {\n  *(void**)(target_address + 4) = data;\n  if (data_length > 3) {\n    data_length = 0;\n  }\n  *(char*)(target_address + 5) = (char)data_length;\n  *(void**)(target_address + 6) = padding;\n  *(short*)(target_address + 0x56) = 1000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800066c",
            "calling": [
                "FUN_08000682"
            ],
            "imported": false,
            "current_name": "update_data_at_address_0800066c"
        },
        "FUN_080042e8": {
            "renaming": {
                "FUN_080042e8": "set_value_and_check_080042e8",
                "param_1": "address",
                "param_2": "value",
                "bVar1": "byte_value",
                "bVar2": "masked_value",
                "iVar3": "incremented_value",
                "PTR_LAB_0800420c_1_08004334": "PTR_LAB_0800420c_1_08004334",
                "DAT_08004334": "DAT_08004334",
                "DAT_08004338": "DAT_08004338",
                "FUN_08003df4": "function_1",
                "FUN_08003eac": "function_2"
            },
            "code": "int set_value_and_check_080042e8(int address, char value) {\n    int incremented_value = *(unsigned short *)(address + 0x140) + 1;\n    char byte_value = (char)incremented_value;\n    char masked_value = byte_value & 0x7F;\n    if (incremented_value == 0) {\n        masked_value = -(-byte_value & 0x7F);\n    }\n    while (*(unsigned short *)(address + 0x142) == (unsigned short)masked_value);\n    *(char *)(*(int *)(address + 0x13C) + (unsigned int)*(unsigned short *)(address + 0x140)) = value;\n    *(unsigned short *)(address + 0x140) = (unsigned short)masked_value;\n    int is_zero = function_1(address + 0xD4);\n    if (is_zero == 0) {\n        function_2(address + 0xD4, PTR_LAB_0800420c_1_08004334);\n    }\n    return 1;\n}",
            "called": [
                "FUN_08003eac",
                "FUN_08003df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042e8",
            "calling": [],
            "imported": false,
            "current_name": "set_value_and_check_080042e8"
        },
        "FUN_080038d0": {
            "renaming": {
                "FUN_080038d0": "execute_function_if_valid_080038d0",
                "param_1": "function_parameter",
                "iVar1": "function_result",
                "FUN_0800387c": "get_function_result",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "void execute_function_if_valid_080038d0(code* function_ptr, char flag, char character) {\n  int function_result = get_function_result();\n  if (function_ptr != NULL && flag == '\\x01' && character != ' ') {\n    (*function_ptr)(function_result + 0x68);\n  }\n  execute_another_function(param_1);\n  return;\n}",
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038d0",
            "calling": [
                "FUN_08001684",
                "FUN_08001ab0",
                "FUN_08001bfc"
            ],
            "imported": false,
            "current_name": "execute_function_if_valid_080038d0"
        },
        "FUN_0800410c": {
            "renaming": {
                "FUN_0800410c": "get_one_0800410c"
            },
            "code": "\nundefined4 get_one_0800410c(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800410c",
            "calling": [
                "thunk_FUN_0800410c"
            ],
            "imported": false,
            "current_name": "get_one_0800410c"
        },
        "FUN_0800260c": {
            "renaming": {
                "FUN_0800260c": "calculate_shifted_result_0800260c",
                "uVar1": "result",
                "FUN_080025e0": "calculate_function_result",
                "PTR_DAT_08002628": "shift_array",
                "DAT_08002624": "data_array"
            },
            "code": "uint calculate_shifted_result_0800260c(void)\n{\n  uint result;\n  uint function_result = calculate_function_result();\n  uint shift_amount = PTR_DAT_08002628[(uint)(*(int *)(DAT_08002624 + 8) << 0x10) >> 0x1d];\n  result = function_result >> shift_amount;\n  return result;\n}",
            "called": [
                "FUN_080025e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800260c",
            "calling": [
                "FUN_080029c8"
            ],
            "imported": false,
            "current_name": "calculate_shifted_result_0800260c"
        },
        "FUN_08004240": {
            "renaming": {
                "FUN_08004240": "calculate_offset_08004240",
                "param_1": "base_address",
                "*(short *)(param_1 + 0x138)": "first_value",
                "*(short *)(param_1 + 0x13a)": "second_value",
                "result": "result"
            },
            "code": "ushort calculate_offset_08004240(int base_address){\n    ushort first_value = *(ushort *)(base_address + 0x138);\n    ushort second_value = *(ushort *)(base_address + 0x13a);\n    ushort result = (first_value + 0x40) - second_value & 0x3f;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004240",
            "calling": [
                "FUN_08004338"
            ],
            "imported": false,
            "current_name": "calculate_offset_08004240"
        },
        "FUN_080026c8": {
            "renaming": {
                "FUN_080026c8": "do_nothing_080026c8"
            },
            "code": "\nvoid do_nothing_080026c8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026c8",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026c8"
        },
        "FUN_080041bc": {
            "renaming": {
                "FUN_080041bc": "process_data_080041bc",
                "param_1": "data_index",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "data_ptr",
                "iVar1": "result",
                "uVar2": "modified_value",
                "puVar3": "data_array",
                "uVar4": "data_value",
                "PTR_DAT_080041fc": "data_array",
                "PTR_DAT_08004200": "lookup_table",
                "FUN_08003138": "calculate_data",
                "FUN_0800318c": "modify_data",
                "FUN_080034b6": "update_output"
            },
            "code": "void process_data_080041bc(uint data_index, undefined4 param_2, undefined4 param_3, undefined *data_ptr) {\n  int result = 0;\n  uint data_value = 0;\n  if (data_index < 0x60) {\n    data_value = (uint)*(short *)(PTR_DAT_080041fc + data_index * 2);\n  }\n  else {\n    data_value = 0xffffffff;\n    data_ptr = data_ptr;\n  }\n  if ((data_value != 0xffffffff) && (result = calculate_data(data_value, PTR_DAT_08004200, param_3, data_ptr, data_ptr), result != 0)) {\n    uint modified_value = modify_data((data_value << 0x18) >> 0x1c);\n    update_output(modified_value, 1 << (data_value & 0xf) & 0xffff, param_2);\n  }\n  return;\n}",
            "called": [
                "FUN_08003138",
                "FUN_0800318c",
                "FUN_080034b6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041bc",
            "calling": [
                "FUN_080006b4",
                "FUN_08000600",
                "FUN_0800076c"
            ],
            "imported": false,
            "current_name": "process_data_080041bc"
        },
        "FUN_08004364": {
            "renaming": {
                "FUN_08004364": "initialize_data_structures_08004364",
                "param_1": "data_structure_address",
                "*(int *)(param_1 + 0x134)": "*ptr_1",
                "*(undefined2 *)(param_1 + 0x138)": "*ptr_3",
                "*(undefined2 *)(param_1 + 0x13a)": "*ptr_4",
                "*(int *)(param_1 + 0x13c)": "*ptr_2",
                "*(undefined2 *)(param_1 + 0x140)": "*ptr_5",
                "*(undefined2 *)(param_1 + 0x142)": "*ptr_6"
            },
            "code": "void initialize_data_structures_08004364(int data_structure_address) {\n    int* ptr_1 = (int*)(data_structure_address + 0x134);\n    int* ptr_2 = (int*)(data_structure_address + 0x13c);\n    short* ptr_3 = (short*)(data_structure_address + 0x138);\n    short* ptr_4 = (short*)(data_structure_address + 0x13a);\n    short* ptr_5 = (short*)(data_structure_address + 0x140);\n    short* ptr_6 = (short*)(data_structure_address + 0x142);\n    *ptr_1 = data_structure_address + 0x11;\n    *ptr_2 = data_structure_address + 0x51;\n    *ptr_3 = 0;\n    *ptr_4 = 0;\n    *ptr_5 = 0;\n    *ptr_6 = 0;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004364",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_08004364"
        },
        "FUN_08000682": {
            "renaming": {
                "FUN_08000682": "execute_function_08000682",
                "param_1": "function_param",
                "FUN_0800066c": "call_initialize_function"
            },
            "code": "undefined4 execute_function_08000682(undefined4 function_param){\n  call_initialize_function();\n  return function_param;\n}",
            "called": [
                "FUN_0800066c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000682",
            "calling": [
                "FUN_08000690"
            ],
            "imported": false,
            "current_name": "execute_function_08000682"
        },
        "FUN_08000e3c": {
            "renaming": {
                "FUN_08000e3c": "update_register_08000e3c",
                "param_1": "register_value",
                "DAT_08000e5c": "register_base_address",
                "*PTR_DAT_08000e5c": "register_value_pointer"
            },
            "code": "void update_register_08000e3c(uint register_value) {\n    uint* register_address = (uint *)(DAT_08000e5c + 0xc);\n    uint shifted_value = (register_value & 7) << 8;\n    uint masked_register = *(uint *)(DAT_08000e5c + 0xc) & 0xf8ff;\n    uint new_register_value = shifted_value | masked_register | 0x5fa0000;\n    *register_address = new_register_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e3c",
            "calling": [
                "FUN_08000de4",
                "FUN_08004648"
            ],
            "imported": false,
            "current_name": "update_register_08000e3c"
        },
        "FUN_08002864": {
            "renaming": {
                "FUN_08002864": "disable_interrupts_on_condition_08002864",
                "param_1": "data",
                "param_2": "condition",
                "bVar1": "is_dat_equal_to_dat_080028d0",
                "puVar2": "data_ptr"
            },
            "code": "uint32_t disable_interrupts_on_condition_08002864(uint32_t **data, uint32_t condition) {\n  bool is_dat_equal_to_dat_080028d0 = false;\n  bool is_dat_equal_to_dat_080028d0_plus_0x100 = false;\n  uint32_t *data_ptr = *data;\n  FUN_08002848(*data, condition, 0);\n  if (data_ptr == DAT_080028d0) {\n    is_dat_equal_to_dat_080028d0 = true;\n  } else if (data_ptr == DAT_080028d0 + 0x100) {\n    is_dat_equal_to_dat_080028d0_plus_0x100 = true;\n  }\n  bool is_condition_true = is_dat_equal_to_dat_080028d0 || is_dat_equal_to_dat_080028d0_plus_0x100;\n  if (is_condition_true && ((data_ptr[8] & 0x1111) == 0) && ((data_ptr[8] & 0x444) == 0)) {\n    data_ptr[0x11] &= 0xffff7fff;\n  }\n  if (((data_ptr[8] & 0x1111) == 0) && ((data_ptr[8] & 0x444) == 0)) {\n    *data_ptr &= 0xfffffffe;\n  }\n  *(undefined *)((int)data + 0x39) = 1;\n  return 0;\n}",
            "called": [
                "FUN_08002848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002864",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "disable_interrupts_on_condition_08002864"
        },
        "FUN_0800532c": {
            "renaming": {
                "FUN_0800532c": "initialize_data_structure_0800532c",
                "param_1": "data_structure",
                "param_2": "initial_value_1",
                "param_3": "initial_value_2",
                "puVar1": "pointer_1"
            },
            "code": "void initialize_data_structure_0800532c(undefined4 *data_structure, undefined2 initial_value_1, undefined2 initial_value_2)\n{\n    undefined *pointer_1;\n    *data_structure = 0;\n    data_structure[1] = 0;\n    data_structure[2] = 0;\n    *(undefined2 *)(data_structure + 3) = initial_value_1;\n    data_structure[0x19] = 0;\n    *(undefined2 *)((int)data_structure + 0xe) = initial_value_2;\n    data_structure[4] = 0;\n    data_structure[5] = 0;\n    data_structure[6] = 0;\n    initialize_memory(data_structure + 0x17,0,8);\n    data_structure[9] = DAT_08005364;\n    data_structure[10] = PTR_FUN_0800562a_1_08005368;\n    data_structure[0xb] = PTR_FUN_08005662_1_0800536c;\n    pointer_1 = PTR_LAB_08005686_1_08005370;\n    data_structure[8] = data_structure;\n    data_structure[0xc] = pointer_1;\n}",
            "called": [
                "FUN_080048cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800532c",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_0800532c"
        },
        "FUN_0800314e": {
            "renaming": {
                "FUN_0800314e": "set_bit_at_offset_0800314e",
                "param_1": "bit_offset",
                "param_2": "bit_array",
                "uVar1": "index",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void set_bit_at_offset_0800314e(uint8_t bit_offset, int* bit_array) {\n  uint8_t index = (bit_offset << 0x18) >> 0x1c;\n  uint32_t* array_index = bit_array + (index * 4);\n  *array_index = *array_index | (1 << (bit_offset & 0xf));\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800314e",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "set_bit_at_offset_0800314e"
        },
        "FUN_0800447c": {
            "renaming": {
                "FUN_0800447c": "initialize_array_0800447c",
                "param_1": "array_ptr",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "uVar1": "value"
            },
            "code": "undefined4 *initialize_array_0800447c(undefined4 *array_ptr, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n    undefined2 value;\n    array_ptr[1] = 0;\n    array_ptr[2] = 1000;\n    *array_ptr = PTR_PTR_FUN_080042e8_1_080044c8;\n    if (array_ptr == (undefined4 *)PTR_DAT_080044cc) {\n        FUN_08004444(array_ptr, 0x4c, arg2, PTR_DAT_080044cc, arg3);\n        FUN_08004460(array_ptr, 0x4d);\n    }\n    else {\n        value = FUN_0800351e(arg1, PTR_DAT_080044d0);\n        *(undefined2 *)((int)array_ptr + 0x12e) = value;\n        value = FUN_0800351e(arg1, PTR_DAT_080044d4);\n        *(undefined2 *)(array_ptr + 0x4b) = value;\n    }\n    FUN_08004364(array_ptr);\n    return array_ptr;\n}",
            "called": [
                "FUN_08004444",
                "FUN_0800351e",
                "FUN_08004364",
                "FUN_08004460"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800447c",
            "calling": [
                "FUN_080044d8"
            ],
            "imported": false,
            "current_name": "initialize_array_0800447c"
        },
        "FUN_08004808": {
            "renaming": {
                "FUN_08004808": "processAssertion_08004808",
                "param_1": "assertion_type",
                "param_2": "line_number",
                "param_3": "file_name",
                "param_4": "error_code",
                "uVar1": "error_code_copy",
                "puVar2": "assertion_message",
                "uVar3": "current_time",
                "uVar4": "error_code_copy"
            },
            "code": "void processAssertion_08004808(undefined4 assertion_type, undefined4 line_number, undefined *file_name, undefined4 error_code) {\n  undefined4 error_code_copy = *(undefined4 *)(*(int *)PTR_PTR_DAT_08004834 + 0xc);\n  undefined *assertion_message = PTR_s___function__08004838;\n  if (file_name == (undefined *)0x0) {\n    return;\n  }\n  do {\n    FUN_08004860(error_code_copy, PTR_s_assertion___s__failed__file___s__0800483c, error_code, assertion_type, line_number, assertion_message, file_name, error_code);\n    undefined8 current_time = FUN_080051ac();\n    line_number = (undefined4)((ulonglong)current_time >> 0x20);\n    error_code_copy = (undefined4)current_time;\n  } while(true);\n}",
            "called": [
                "FUN_080051ac",
                "FUN_08004860"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004808",
            "calling": [
                "FUN_08004388"
            ],
            "imported": false,
            "current_name": "processAssertion_08004808"
        },
        "FUN_08000f72": {
            "renaming": {
                "FUN_08000f72": "clear_bit_08000f72",
                "param_1": "bit_array",
                "param_2": "bit_index",
                "**param_1": "bit_array_value",
                "*(undefined *)(param_1 + 1)": "flag",
                "uint": "uint32_t",
                "undefined4": "uint32_t",
                "&(1 << (param_2 & 0xff))": "mask"
            },
            "code": "uint32_t clear_bit_08000f72(uint32_t **bit_array, uint32_t bit_index) {\n\tuint32_t mask = ~(1 << (bit_index & 0xff));\n\t**bit_array = **bit_array & mask;\n\t*(uint8_t *)(bit_array + 1) = 1;\n\treturn 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f72",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "clear_bit_08000f72"
        },
        "FUN_08001d00": {
            "renaming": {
                "FUN_08001d00": "check_permissions_08001d00",
                "param_1": "param_array",
                "iVar1": "ptr1",
                "uVar2": "permission_set_2",
                "uVar3": "flag",
                "uVar4": "permission_set_1"
            },
            "code": "void check_permissions_08001d00(int *param_array)\n{\n  int ptr1 = *param_array;\n  uint permission_set_1 = *(uint *)(ptr1 + 0x18);\n  uint permission_set_2 = *(uint *)(ptr1 + 0x14);\n  uint flag = *(uint *)(ptr1 + 4);\n  \n  char permission_type = *(char *)((int)param_array + 0x3e);\n  \n  if ((permission_type == '\\x10') || (permission_type == '@')) {\n    if (((permission_set_2 & 0x10001) == 0) || ((flag & 0x200) == 0)) {\n      if (((DAT_08001e60 & permission_set_2) == 0) || ((flag & 0x200) == 0)) {\n        if (((DAT_08001e4c & permission_set_2) != 0) && ((flag & 0x200) != 0)) {\n          FUN_08001256(param_array);\n        }\n      }\n      else {\n        FUN_0800124a(param_array);\n      }\n    }\n    else {\n      FUN_080011c0(param_array);\n    }\n    if ((DAT_08001e54 & permission_set_1) == 0) {\n      if ((((DAT_08001e64 & permission_set_2) != 0) && ((flag & 0x400) != 0)) && ((DAT_08001e5c & permission_set_2) == 0)\n         ) {\n        FUN_08001904(param_array);\n        return;\n      }\n      if (((DAT_08001e5c & permission_set_2) != 0) && ((flag & 0x200) != 0)) {\n        FUN_080019a0(param_array);\n        return;\n      }\n    }\n    else {\n      if ((((DAT_08001e58 & permission_set_2) != 0) && ((flag & 0x400) != 0)) && ((DAT_08001e5c & permission_set_2) == 0)\n         ) {\n        FUN_0800171a(param_array);\n        return;\n      }\n      if (((DAT_08001e5c & permission_set_2) != 0) && ((flag & 0x200) != 0)) {\n        FUN_08001864(param_array);\n        return;\n      }\n    }\n  }\n  else {\n    if (((DAT_08001e4c & permission_set_2) != 0) && ((flag & 0x200) != 0)) {\n      FUN_0800165a();\n      return;\n    }\n    if (((DAT_08001e50 & permission_set_2) != 0) && ((flag & 0x200) != 0)) {\n      FUN_08001bfc(param_array);\n      return;\n    }\n    if ((DAT_08001e54 & permission_set_1) == 0) {\n      if ((((DAT_08001e64 & permission_set_2) != 0) && ((flag & 0x400) != 0)) && ((DAT_08001e5c & permission_set_2) == 0)\n         ) {\n        FUN_0800160e(param_array);\n        return;\n      }\n      if (((DAT_08001e5c & permission_set_2) != 0) && ((flag & 0x200) != 0)) {\n        FUN_08001440(param_array);\n      }\n    }\n    else {\n      if ((((DAT_08001e58 & permission_set_2) != 0) && ((flag & 0x400) != 0)) && ((DAT_08001e5c & permission_set_2) == 0)\n         ) {\n        FUN_080015bc(param_array);\n        return;\n      }\n      if (((DAT_08001e5c & permission_set_2) != 0) && ((flag & 0x200) != 0)) {\n        FUN_08001420(param_array);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_080015bc",
                "FUN_0800165a",
                "FUN_08001420",
                "FUN_08001256",
                "FUN_08001904",
                "FUN_080011c0",
                "FUN_0800171a",
                "FUN_08001440",
                "FUN_0800160e",
                "FUN_0800124a",
                "FUN_08001864",
                "FUN_08001bfc",
                "FUN_080019a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001d00",
            "calling": [],
            "imported": false,
            "current_name": "check_permissions_08001d00"
        }
    },
    "used_tokens": 194385,
    "layers": [
        [
            "FUN_080006b4",
            "FUN_080034da",
            "FUN_080035fc",
            "FUN_08003dd0",
            "FUN_08000c8c",
            "FUN_08000a4e",
            "FUN_08004658",
            "FUN_080034f4",
            "FUN_0800355e",
            "FUN_0800573c",
            "FUN_08003e54",
            "FUN_08004fdc",
            "FUN_080056d4",
            "thunk_FUN_0800410c",
            "FUN_080033d8",
            "FUN_08002488",
            "FUN_08004544",
            "FUN_08003cc8",
            "FUN_08000fb4",
            "FUN_08001bfc",
            "FUN_08002d72",
            "FUN_080007f0",
            "FUN_0800562a",
            "FUN_080044d8",
            "FUN_08003df4",
            "FUN_08005400",
            "FUN_08003582",
            "FUN_08005760",
            "FUN_08004678",
            "FUN_08003900",
            "FUN_08000f0c",
            "FUN_08000998",
            "FUN_080055d0",
            "FUN_080056f8",
            "FUN_080054b4",
            "FUN_0800171a",
            "FUN_08004560",
            "FUN_08000a7a",
            "FUN_08004cb0",
            "FUN_08003594",
            "FUN_08002940",
            "FUN_08004204",
            "FUN_08003476",
            "FUN_08004444",
            "FUN_0800346c",
            "FUN_080053a0",
            "FUN_080028d4",
            "FUN_080040ec",
            "FUN_08001460",
            "FUN_08003880",
            "FUN_08002f4c",
            "FUN_080035bc",
            "FUN_080025ec",
            "FUN_08000c4c",
            "FUN_08004a60",
            "FUN_080050d0",
            "FUN_08004978",
            "FUN_08002d0c",
            "FUN_08001904",
            "FUN_08000c64",
            "FUN_08002ffc",
            "FUN_0800387c",
            "FUN_0800351e",
            "FUN_08002f66",
            "FUN_080034b6",
            "FUN_08003eac",
            "FUN_08003e18",
            "FUN_080040fc",
            "FUN_08002dd0",
            "FUN_08004860",
            "FUN_08004622",
            "FUN_08003414",
            "FUN_08005718",
            "FUN_080011c0",
            "FUN_08000b54",
            "FUN_0800376e",
            "FUN_08000d98",
            "FUN_08003f48",
            "FUN_0800340c",
            "FUN_0800352e",
            "FUN_08001ab0",
            "FUN_08001f9c",
            "FUN_08000d8e",
            "FUN_08004638",
            "FUN_080008cc",
            "FUN_08005608",
            "FUN_08002efa",
            "FUN_0800377c",
            "FUN_0800268e",
            "FUN_080008e2",
            "FUN_080045c8",
            "FUN_08003d18",
            "FUN_08004640",
            "FUN_080034ce",
            "FUN_080047fe",
            "FUN_08001256",
            "FUN_08004884",
            "FUN_08004648",
            "FUN_08000600",
            "FUN_080045be",
            "FUN_08000728",
            "FUN_0800354a",
            "FUN_0800124a",
            "FUN_08004094",
            "FUN_080033c8",
            "FUN_080031fc",
            "FUN_08000690",
            "FUN_080054fc",
            "FUN_08001420",
            "FUN_08000de4",
            "FUN_080026ce",
            "FUN_08000218",
            "FUN_0800339c",
            "FUN_08000e60",
            "FUN_0800165a",
            "FUN_08000b04",
            "FUN_0800262c",
            "FUN_08004388",
            "FUN_080051ac",
            "FUN_080052cc",
            "FUN_08002eb2",
            "FUN_08000d3c",
            "FUN_0800316c",
            "FUN_080040d0",
            "FUN_080040d6",
            "FUN_08004a34",
            "FUN_080002d0",
            "FUN_08003f00",
            "FUN_08001440",
            "FUN_08000230",
            "FUN_08001684",
            "FUN_08000f8c",
            "FUN_080001ac",
            "FUN_080040e0",
            "FUN_080048cc",
            "FUN_080040e4",
            "FUN_08003506",
            "FUN_080025e0",
            "FUN_080040e8",
            "FUN_08000a00",
            "FUN_080047c0",
            "FUN_08005374",
            "FUN_08003750",
            "FUN_080014ec",
            "FUN_080048dc",
            "FUN_08003754",
            "FUN_08001578",
            "FUN_08004844",
            "FUN_0800318c",
            "FUN_080047d0",
            "FUN_080040f8",
            "FUN_0800500c",
            "FUN_080023b4",
            "FUN_080011a4",
            "FUN_08001e68",
            "FUN_080019a0",
            "FUN_08003f24",
            "FUN_080046b4",
            "FUN_0800160e",
            "FUN_08000e18",
            "FUN_08003486",
            "FUN_08005662",
            "FUN_080042ac",
            "FUN_08001864",
            "FUN_08000f2c",
            "FUN_08000ec4",
            "FUN_08004338",
            "FUN_080005e0",
            "FUN_080005e4",
            "FUN_0800076c",
            "FUN_08004460",
            "FUN_08001198",
            "FUN_08003138",
            "FUN_08002848",
            "FUN_0800312c",
            "FUN_080028f0",
            "FUN_08000e30",
            "FUN_08000f56",
            "FUN_0800295c",
            "FUN_08003380",
            "FUN_08004110",
            "FUN_08000ee0",
            "FUN_080015bc",
            "FUN_08000f4e",
            "FUN_0800066c",
            "FUN_080042e8",
            "FUN_080038d0",
            "FUN_0800410c",
            "FUN_0800260c",
            "FUN_08004240",
            "FUN_080041bc",
            "FUN_08004364",
            "FUN_08000682",
            "FUN_08000e3c",
            "FUN_08002864",
            "FUN_0800532c",
            "FUN_0800314e",
            "FUN_0800447c",
            "FUN_08004808",
            "FUN_08000f72",
            "FUN_08001d00"
        ],
        [
            "FUN_080029c8",
            "FUN_0800201c",
            "FUN_08004a84",
            "FUN_08003978",
            "FUN_08004d9c",
            "FUN_08000300"
        ]
    ],
    "locked_functions": []
}