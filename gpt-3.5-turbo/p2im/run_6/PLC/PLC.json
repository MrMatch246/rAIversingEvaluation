{
    "functions": {
        "FUN_080006b4": {
            "renaming": {
                "FUN_080006b4": "decode_and_count_080006b4",
                "param_1": "data",
                "bVar1": "is_overflow",
                "uVar2": "decoded_byte",
                "iVar3": "result",
                "bVar4": "current_byte"
            },
            "code": "int decode_and_count_080006b4(int **data)\n{\n  bool is_overflow = false;\n  undefined byte_count = 0;\n  \n  if (data[0][2] > 1)\n  {\n    decode_data_080041bc(data[0][2],0);\n  }\n  \n  *(undefined *)((int)data + 0x49) = 0;\n  \n  if (data[0][1] < 4)\n  {\n    while (true)\n    {\n      int result = (*(code **)(data[0][0] + 8))();\n      if (result == 0)\n      {\n        break;\n      }\n      \n      byte current_byte = *(byte *)((int)data + 0x49);\n      undefined decoded_byte = (*(code **)(data[0][0] + 0xc))();\n      *(undefined *)((int)data + current_byte + 9) = decoded_byte;\n      current_byte++;\n      *(byte *)((int)data + 0x49) = current_byte;\n      \n      if (current_byte > 0x3f)\n      {\n        is_overflow = true;\n        break;\n      }\n    }\n  }\n  \n  *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n  \n  if (is_overflow)\n  {\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n    return -3;\n  }\n  \n  return (int)*(char *)((int)data + 0x49);\n}",
            "called": [
                "FUN_080041bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006b4",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "decode_and_count_080006b4"
        },
        "FUN_080034da": {
            "renaming": {
                "FUN_080034da": "find_value_in_array_080034da",
                "param_1": "value",
                "param_2": "array",
                "*param_2": "*array"
            },
            "code": "int find_value_in_array_080034da(int value, short* array)\n{\n    while (*array != -1)\n    {\n        if (*array == value)\n        {\n            return *(int*)(array + 2);\n        }\n        array += 6;\n    }\n    return 0;\n}",
            "called": [
                "FUN_080034da"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034da",
            "calling": [
                "FUN_080034f4",
                "FUN_080034da"
            ],
            "imported": false,
            "current_name": "find_value_in_array_080034da"
        },
        "FUN_080035fc": {
            "renaming": {
                "FUN_080035fc": "set_bits_according_to_input_080035fc",
                "param_1": "input",
                "DAT_08003718": "DATA_1",
                "DAT_0800371c": "DATA_2",
                "DAT_08003720": "DATA_3",
                "DAT_08003724": "DATA_4",
                "DAT_08003728": "DATA_5",
                "DAT_0800372c": "DATA_6",
                "DAT_08003730": "DATA_7",
                "DAT_08003734": "DATA_8",
                "DAT_08003738": "DATA_9",
                "DAT_0800373c": "DATA_10",
                "DAT_08003740": "DATA_11",
                "DAT_08003744": "DATA_12",
                "DAT_08003748": "DATA_13",
                "DAT_0800374c": "data_ptr"
            },
            "code": "void set_bits_according_to_input_080035fc(int *input)\n{\n    uint32_t *DAT_0800374c = (uint32_t *)DAT_0800374c;\n    switch(*input)\n    {\n        case DAT_08003718:\n            DAT_0800374c[1] &= 0xfffffffe;\n            break;\n        case 0x40000000:\n            DAT_0800374c[0] &= 0xfffffffe;\n            break;\n        case DAT_0800371c:\n            DAT_0800374c[0] &= 0xfffffffd;\n            break;\n        case DAT_08003720:\n            DAT_0800374c[0] &= 0xfffffffb;\n            break;\n        case DAT_08003724:\n            DAT_0800374c[0] &= 0xfffffff7;\n            break;\n        case DAT_08003728:\n            DAT_0800374c[0] &= 0xffffffef;\n            break;\n        case DAT_0800372c:\n            DAT_0800374c[0] &= 0xffffffdf;\n            break;\n        case DAT_08003730:\n            DAT_0800374c[1] &= 0xfffffffd;\n            break;\n        case DAT_08003734:\n            DAT_0800374c[1] &= 0xfffeffff;\n            break;\n        case DAT_08003738:\n            DAT_0800374c[1] &= 0xfffdffff;\n            break;\n        case DAT_0800373c:\n            DAT_0800374c[1] &= 0xfffbffff;\n            break;\n        case DAT_08003740:\n            DAT_0800374c[0] &= 0xffffffbf;\n            break;\n        case DAT_08003744:\n            DAT_0800374c[0] &= 0xffffff7f;\n            break;\n        case DAT_08003748:\n            DAT_0800374c[0] &= 0xfffffeff;\n            break;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fc",
            "calling": [
                "FUN_0800340c"
            ],
            "imported": false,
            "current_name": "set_bits_according_to_input_080035fc"
        },
        "FUN_08003dd0": {
            "renaming": {
                "FUN_08003dd0": "is_valid_checksum_08003dd0",
                "param_1": "buffer_address",
                "uVar1": "combined_bytes",
                "PTR_DAT_08003df0": "get_buffer_address",
                "byte": "checksum_byte"
            },
            "code": "bool is_valid_checksum_08003dd0(int buffer_address)\n{\n  uint16_t combined_bytes = combine_bytes(PTR_DAT_08003df0(buffer_address));\n  return (combined_bytes & 0x22) == 0x22;\n}",
            "called": [
                "FUN_0800312c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003dd0",
            "calling": [
                "FUN_08003e54",
                "FUN_08003e18"
            ],
            "imported": false,
            "current_name": "is_valid_checksum_08003dd0"
        },
        "FUN_08000c8c": {
            "renaming": {
                "FUN_08000c8c": "set_flags_and_values_08000c8c",
                "local_1": "flags_1",
                "local_2": "flags_2",
                "local_3": "flags_3",
                "local_4": "flags_4",
                "local_5": "flags_5",
                "local_6": "flags_6",
                "local_7": "flags_7",
                "local_8": "flags_8",
                "local_9": "input_check_1",
                "local_10": "input_check_2",
                "local_11": "input_check_3",
                "local_12": "input_check_4",
                "local_13": "input_check_5",
                "DAT_08000d30": "data_1",
                "DAT_08000d34": "data_2",
                "DAT_08000d38": "data_3",
                "FUN_0800201c": "function_1",
                "check_if_pointer_is_valid_08001f9c": "function_2",
                "validate_input_08002488": "function_3",
                "get_value_from_pointer_080025e0": "function_4",
                "check_input_value_08000ee0": "function_5",
                "set_flag_if_param_is_4_08000f2c": "function_6",
                "set_bits_in_byte_08000e60": "function_7"
            },
            "code": "void set_flags_and_values_08000c8c(void)\n{\n  uint flags = *(uint *)(DAT_08000d30 + 0x40);\n  flags |= 0x10000000;\n  *(uint *)(DAT_08000d30 + 0x40) = flags;\n  uint input_check = *DAT_08000d34;\n  input_check |= 0xc000;\n  *DAT_08000d34 = input_check;\n  uint local_1 = 1;\n  uint local_2 = 0x50000;\n  uint local_3 = 2;\n  uint local_4 = 0x400000;\n  uint local_5 = 8;\n  uint local_6 = 0x150;\n  uint local_7 = 2;\n  uint local_8 = 7;\n  check_and_update_values_0800201c(&local_1);\n  check_if_pointer_is_valid_08001f9c();\n  uint local_9 = 0xf;\n  uint local_10 = 2;\n  uint local_11 = 0;\n  uint local_12 = 0x1400;\n  uint local_13 = 0x1000;\n  validate_input_08002488(&local_9,5);\n  uint value_from_pointer = get_value_from_pointer_080025e0();\n  uint input_value = (uint)((ulonglong)DAT_08000d38 * (ulonglong)value_from_pointer >> 0x26);\n  check_input_value_08000ee0(input_value);\n  set_flag_if_param_is_4_08000f2c(4);\n  set_bits_in_byte_08000e60(0xffffffff,0,0);\n}",
            "called": [
                "FUN_08000e60",
                "FUN_08002488",
                "FUN_08001f9c",
                "FUN_08000f2c",
                "FUN_080025e0",
                "FUN_08000ee0",
                "FUN_0800201c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c8c",
            "calling": [
                "FUN_080034ce"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_08000c8c"
        },
        "FUN_08000a4e": {
            "renaming": {
                "FUN_08000a4e": "get_updated_value_08000a4e",
                "param_1": "data",
                "param_2": "output",
                "bVar1": "first_byte",
                "uVar2": "second_byte"
            },
            "code": "uint8_t get_updated_value_08000a4e(uint8_t* data, uint8_t* output) {\n\tuint8_t first_byte = combine_values(data[11], data[12]);\n\tuint8_t second_byte = combine_values(data[13], data[14]);\n\toutput[first_byte * 2] = second_byte;\n\tdata[73] = 6;\n\tcalculate_and_update_crc(data);\n\treturn 8;\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a4e",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "get_updated_value_08000a4e"
        },
        "FUN_08004658": {
            "renaming": {
                "FUN_08004658": "handle_device_interrupts_08004658",
                "DAT_08004674": "data_available",
                "do_nothing_08004646": "do_nothing",
                "handle_interrupts_and_update_device_status_08000c4c": "update_device_status",
                "count_and_update_records_08000c64": "count_and_update_records",
                "calculate_checksum_if_data_available_08004338": "calculate_checksum_if_data_available"
            },
            "code": "void handle_device_interrupts_08004658(void)\n{\n  do_nothing_08004646();\n  update_device_status();\n  do {\n    do {\n      count_and_update_records();\n    } while (DAT_08004674() == 0);\n    calculate_checksum_if_DAT_08004674();\n  } while( true );\n}",
            "called": [
                "FUN_08004646",
                "FUN_08000c4c",
                "FUN_08004338",
                "FUN_08000c64"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004658",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "handle_device_interrupts_08004658"
        },
        "FUN_080034f4": {
            "renaming": {
                "FUN_080034f4": "find_value_080034f4",
                "param_1": "index",
                "uVar1": "value",
                "find_value_in_array_080034da": "find_value_in_array"
            },
            "code": "int find_value_080034f4(int index) {\n  int value = 0;\n  if (index != -1) {\n    value = find_value_080034f4_in_array_080034da();\n  }\n  return value;\n}",
            "called": [
                "FUN_080034da"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034f4",
            "calling": [
                "FUN_080033d8",
                "FUN_08003414",
                "FUN_08003978",
                "FUN_08003d18",
                "FUN_08003cc8"
            ],
            "imported": false,
            "current_name": "find_value_080034f4"
        },
        "FUN_0800355e": {
            "renaming": {
                "FUN_0800355e": "find_short_in_array_0800355e",
                "param_1": "search_value",
                "param_2": "array",
                "*param_2": "*array"
            },
            "code": "int find_short_in_array_0800355e(int search_value, short *array)\n{\n    if (search_value == -1) {\n        return 0;\n    }\n    while( true ) {\n        if (*array == -1) {\n            return 0;\n        }\n        if (search_value == *array) break;\n        array = array + 6;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800355e",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "find_short_in_array_0800355e"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "processReturnValue_0800573c",
                "param_1": "result",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "data_pointer",
                "iVar2": "return_value"
            },
            "code": "void processReturnValue_0800573c(int *result, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined *data_pointer;\n  int return_value;\n  data_pointer = PTR_DAT_0800575c;\n  *(undefined4 *)PTR_DAT_0800575c = 0;\n  return_value = returnZero_080040e8(param_2, param_3, param_4, param_4, param_4);\n  if ((return_value == -1) && (*(int *)data_pointer != 0)) {\n    *result = *(int *)data_pointer;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "FUN_08005608"
            ],
            "imported": false,
            "current_name": "processReturnValue_0800573c"
        },
        "FUN_08003e54": {
            "renaming": {
                "FUN_08003e54": "process_input_08003e54",
                "param_1": "input_address",
                "param_2": "data",
                "param_3": "checksum",
                "param_4": "flag",
                "iVar1": "is_valid",
                "uVar2": "index",
                "PTR_DAT_08003ea0": "input_data",
                "PTR_DAT_08003ea4": "input_address_list",
                "set_bits_in_byte_08000e60": "set_bits_in_byte",
                "set_bit_at_position_08000ec4": "set_bit_at_position",
                "validate_input_08002efa": "validate_input",
                "(uint)*(byte *)(param_1 + 0x44)": "*(uint8_t *)(input_address + 0x44)",
                "(int)*(char *)(param_1 + 0x5c)": "(int)*(char *)(input_address + 0x5c)",
                "*(undefined4 *)(PTR_DAT_08003ea8 + (uint)*(byte *)(param_1 + 0x44) * 4)": "input_checksum_list[index]"
            },
            "code": "void process_input_08003e54(int input_address, uint32_t data, uint32_t checksum, uint32_t flag) {\n  if (input_address != 0) {\n    int is_valid = is_valid_checksum();\n    if (is_valid == 0) {\n      uint32_t index = *(uint8_t *)(input_address + 0x44);\n      PTR_DAT_08003ea0[index] = data;\n      PTR_DAT_08003ea4[index] = input_address;\n      set_bits_in_byte_08000e60((int)*(char *)(input_address + 0x5c), 0, 1, index, flag);\n      set_bit_at_position_08000ec4((int)*(char *)(input_address + 0x5c));\n      validate_input_08002efa(*(undefined4 *)(PTR_DAT_08003ea8 + (uint)*(byte *)(param_1 + 0x44) * 4), input_address + 0x45, 1);\n    }\n  }\n}",
            "called": [
                "FUN_08000e60",
                "FUN_08000ec4",
                "FUN_08002efa",
                "FUN_08003dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e54",
            "calling": [
                "FUN_08004388"
            ],
            "imported": false,
            "current_name": "process_input_08003e54"
        },
        "FUN_08004fdc": {
            "renaming": {
                "FUN_08004fdc": "process_input_data_08004fdc",
                "param_1": "data_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "iVar1": "data_ptr_var",
                "uVar2": "param_1_var",
                "uStack_c": "param_2_var",
                "uStack_8": "param_3_var",
                "uStack_4": "param_4_var",
                "PTR_PTR_DAT_08005008": "PTR_PTR_DAT_08005008",
                "FUN_080053a0": "cleanup_data",
                "FUN_08004a84": "process_data"
            },
            "code": "void process_input_data_08004fdc(void *data_ptr, uint32_t param_2, uint32_t param_3, uint32_t param_4)\n{\n  int data_ptr_var = *(int *)PTR_PTR_DAT_08005008;\n  uint32_t param_1_var = (uint32_t)data_ptr;\n  uint32_t param_2_var = param_2;\n  uint32_t param_3_var = param_3;\n  uint32_t param_4_var = param_4;\n  if ((data_ptr_var != 0) && (*(int *)(data_ptr_var + 0x18) == 0)) {\n    cleanup_data(data_ptr_var);\n  }\n  process_input_and_output_08004a84(data_ptr_var, *(uint32_t *)(data_ptr_var + 8), param_1_var, &param_2_var, param_1_var, &param_3_var);\n  return;\n}",
            "called": [
                "FUN_080053a0",
                "FUN_08004a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fdc",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "process_input_data_08004fdc",
            "code_backup": "\nvoid FUN_08004fdc(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  iVar1 = *(int *)PTR_PTR_DAT_08005008;\n  uVar2 = param_1;\n  uStack_c = param_2;\n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  if ((iVar1 != 0) && (*(int *)(iVar1 + 0x18) == 0)) {\n    FUN_080053a0(iVar1);\n  }\n  FUN_08004a84(iVar1,*(undefined4 *)(iVar1 + 8),param_1,&uStack_c,uVar2,&uStack_c);\n  return;\n}\n\n"
        },
        "FUN_080056d4": {
            "renaming": {
                "FUN_080056d4": "set_permissions_080056d4",
                "param_1": "result",
                "param_2": "addr",
                "param_3": "size",
                "param_4": "flags",
                "puVar1": "ptr",
                "iVar2": "ret"
            },
            "code": "void set_permissions_080056d4(int *result, unsigned int addr, unsigned int size, int perms, unsigned int flags) {\n  unsigned char *ptr;\n  ptr = PTR_DAT_080056f4;\n  *(unsigned int *)PTR_DAT_080056f4 = 0;\n  int ret = set_memory_permissions_080040d6(addr, size, size, perms, flags);\n  if ((ret == -1) && (*(int *)ptr != 0)) {\n    *result = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_080040d6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d4",
            "calling": [
                "FUN_080054b4"
            ],
            "imported": false,
            "current_name": "set_permissions_080056d4"
        },
        "thunk_FUN_0800410c": {
            "renaming": {
                "thunk_FUN_0800410c": "get_one_thunk_0800410c",
                "undefined4": "int"
            },
            "code": "int get_one_thunk_0800410c(void)\n{\n  int result = 1;\n  return result;\n}",
            "called": [
                "FUN_0800410c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "FUN_080055d0"
            ],
            "imported": false,
            "current_name": "get_one_thunk_0800410c"
        },
        "FUN_080033d8": {
            "renaming": {
                "FUN_080033d8": "initialize_device_if_valid_080033d8",
                "param_1": "device_id",
                "local_1c": "device_values",
                "find_value_080034f4": "find_device_value",
                "find_value_08003380": "find_device_type",
                "unset_bit_08000f72": "unset_device_bit",
                "initialize_device_08000f56": "initialize_device",
                "iVar1": "device_type"
            },
            "code": "void initialize_device_if_valid_080033d8(int device_id)\n{\n  int bit_mask;\n  int device_values [5];\n  device_values[0] = find_device_value(device_id, PTR_DAT_08003408);\n  int device_type = find_device_value(device_id);\n  if ((device_values[0] != 0) && ((device_type == 0) || (device_type == 0x10))) {\n    bit_mask = get_bit_mask(device_type);\n    unset_bit_08000f72(device_values, bit_mask);\n    initialize_device(device_values);\n  }\n  return;\n}",
            "called": [
                "FUN_08000f72",
                "FUN_08000f56",
                "FUN_080034f4",
                "FUN_08003380"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033d8",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "initialize_device_if_valid_080033d8"
        },
        "FUN_080029c8": {
            "renaming": {
                "FUN_080029c8": "calculate_and_set_values_080029c8",
                "param_1": "input_array",
                "uVar1": "multiplier",
                "uVar2": "constant",
                "iVar3": "value1",
                "iVar4": "value2",
                "iVar5": "value3",
                "iVar6": "value4",
                "iVar7": "value5",
                "iVar8": "value6",
                "iVar9": "value7",
                "iVar10": "value8",
                "iVar11": "value9",
                "iVar12": "address",
                "get_shifted_value_from_pointer_080025ec": "get_value_from_pointer1",
                "get_shifted_value_from_pointer_0800260c": "get_value_from_pointer2"
            },
            "code": "\nvoid calculate_and_set_values_080029c8(int *input_array)\n\n{\n  ulonglong multiplier;\n  uint constant;\n  int value1;\n  int value2;\n  int value3;\n  int value4;\n  int value5;\n  int value6;\n  int value7;\n  int value8;\n  int value9;\n  int address;\n  \n  *(uint *)(*input_array + 0x10) = *(uint *)(*input_array + 0x10) & 0xffffcfff | input_array[3];\n  *(uint *)(*input_array + 0xc) =\n       *(uint *)(*input_array + 0xc) & 0xffff69f3 | input_array[2] | input_array[4] | input_array[5] | input_array[7];\n  *(uint *)(*input_array + 0x14) = *(uint *)(*input_array + 0x14) & 0xfffffcff | input_array[6];\n  if (input_array[7] == 0x8000) {\n    address = *input_array;\n    if ((address != 0x40011000) && (address != 0x40011400)) {\n      value1 = get_shifted_value_from_pointer_080025ec();\n      constant = DAT_08002d08;\n      value6 = input_array[1];\n      multiplier = (ulonglong)DAT_08002d08;\n      value2 = get_shifted_value_from_pointer_080025ec();\n      value7 = input_array[1];\n      value3 = get_shifted_value_from_pointer_080025ec();\n      value8 = input_array[1];\n      value4 = get_shifted_value_from_pointer_080025ec();\n      value9 = input_array[1];\n      value5 = get_shifted_value_from_pointer_080025ec();\n      *(uint *)(address + 8) =\n           ((uint)((int)((ulonglong)constant *\n                         (ulonglong)\n                         (((uint)(value4 * 0x19) / (uint)(value9 << 1) +\n                          (uint)((ulonglong)constant *\n                                 ((ulonglong)(uint)(value5 * 0x19) /\n                                 (ulonglong)(uint)(input_array[1] << 1)) >> 0x25) * -100) * 8 + 0x32) >>\n                        0x20) << 0x18) >> 0x1d) +\n           ((uint)((ulonglong)constant *\n                   (ulonglong)\n                   (((uint)(value2 * 0x19) / (uint)(value7 << 1) +\n                    (uint)((ulonglong)constant *\n                           ((ulonglong)(uint)(value3 * 0x19) / (ulonglong)(uint)(value8 << 1)) >>\n                          0x25) * -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n           (uint)(multiplier * ((ulonglong)(uint)(value1 * 0x19) / (ulonglong)(uint)(value6 << 1)) >> 0x25)\n           * 0x10;\n      return;\n    }\n    value1 = get_shifted_value_from_pointer_0800260c();\n    constant = DAT_08002d08;\n    value6 = input_array[1];\n    multiplier = (ulonglong)DAT_08002d08;\n    value2 = get_shifted_value_from_pointer_0800260c();\n    value7 = input_array[1];\n    value3 = get_shifted_value_from_pointer_0800260c();\n    value8 = input_array[1];\n    value4 = get_shifted_value_from_pointer_0800260c();\n    value9 = input_array[1];\n    value5 = get_shifted_value_from_pointer_0800260c();\n    *(uint *)(address + 8) =\n         ((uint)((int)((ulonglong)constant *\n                       (ulonglong)\n                       (((uint)(value4 * 0x19) / (uint)(value9 << 1) +\n                        (uint)((ulonglong)constant *\n                               ((ulonglong)(uint)(value5 * 0x19) / (ulonglong)(uint)(input_array[1] << 1)\n                               ) >> 0x25) * -100) * 8 + 0x32) >> 0x20) << 0x18) >> 0x1d) +\n         ((uint)((ulonglong)constant *\n                 (ulonglong)\n                 (((uint)(value2 * 0x19) / (uint)(value7 << 1) +\n                  (uint)((ulonglong)constant *\n                         ((ulonglong)(uint)(value3 * 0x19) / (ulonglong)(uint)(value8 << 1)) >> 0x25)\n                  * -100) * 8 + 0x32) >> 0x25) & 0xf8) * 2 +\n         (uint)(multiplier * ((ulonglong)(uint)(value1 * 0x19) / (ulonglong)(uint)(value6 << 1)) >> 0x25) *\n         0x10;\n    return;\n  }\n  address = *input_array;\n  if ((address != DAT_08002d04) && (address != DAT_08002d04 + 0x400)) {\n    value1 = get_shifted_value_from_pointer_080025ec();\n    constant = DAT_08002d08;\n    value6 = input_array[1];\n    multiplier = (ulonglong)DAT_08002d08;\n    value2 = get_shifted_value_from_pointer_080025ec();\n    value7 = input_array[1];\n    value3 = get_shifted_value_from_pointer_080025ec();\n    value8 = input_array[1];\n    value4 = get_shifted_value_from_pointer_080025ec();\n    value9 = input_array[1];\n    value5 = get_shifted_value_from_pointer_080025ec();\n    *(uint *)(address + 8) =\n         ((uint)((int)((ulonglong)constant *\n                       (ulonglong)\n                       (((uint)(value4 * 0x19) / (uint)(value9 << 2) +\n                        (uint)((ulonglong)constant *\n                               ((ulonglong)(uint)(value5 * 0x19) / (ulonglong)(uint)(input_array[1] << 2)\n                               ) >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n         ((uint)((ulonglong)constant *\n                 (ulonglong)\n                 (((uint)(value2 * 0x19) / (uint)(value7 << 2) +\n                  (uint)((ulonglong)constant *\n                         ((ulonglong)(uint)(value3 * 0x19) / (ulonglong)(uint)(value8 << 2)) >> 0x25)\n                  * -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n         (uint)(multiplier * ((ulonglong)(uint)(value1 * 0x19) / (ulonglong)(uint)(value6 << 2)) >> 0x25) *\n         0x10;\n    return;\n  }\n  value1 = get_shifted_value_from_pointer_0800260c();\n  constant = DAT_08002d08;\n  value6 = input_array[1];\n  multiplier = (ulonglong)DAT_08002d08;\n  value2 = get_shifted_value_from_pointer_0800260c();\n  value7 = input_array[1];\n  value3 = get_shifted_value_from_pointer_0800260c();\n  value8 = input_array[1];\n  value4 = get_shifted_value_from_pointer_0800260c();\n  value9 = input_array[1];\n  value5 = get_shifted_value_from_pointer_0800260c();\n  *(uint *)(address + 8) =\n       ((uint)((int)((ulonglong)constant *\n                     (ulonglong)\n                     (((uint)(value4 * 0x19) / (uint)(value9 << 2) +\n                      (uint)((ulonglong)constant *\n                             ((ulonglong)(uint)(value5 * 0x19) / (ulonglong)(uint)(input_array[1] << 2))\n                            >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n       ((uint)((ulonglong)constant *\n               (ulonglong)\n               (((uint)(value2 * 0x19) / (uint)(value7 << 2) +\n                (uint)((ulonglong)constant *\n                       ((ulonglong)(uint)(value3 * 0x19) / (ulonglong)(uint)(value8 << 2)) >> 0x25) *\n                -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n       (uint)(multiplier * ((ulonglong)(uint)(value1 * 0x19) / (ulonglong)(uint)(value6 << 2)) >> 0x25) *\n       0x10;\n  return;\n}\n\n",
            "called": [
                "FUN_080025ec",
                "FUN_0800260c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080029c8",
            "calling": [
                "FUN_08002d72"
            ],
            "imported": false,
            "current_name": "calculate_and_set_values_080029c8"
        },
        "FUN_08002488": {
            "renaming": {
                "FUN_08002488": "validate_input_08002488",
                "param_1": "input",
                "param_2": "input_length",
                "puVar1": "memory_pointer",
                "iVar2": "start_time",
                "iVar3": "end_time",
                "uVar4": "input_value"
            },
            "code": "int validate_input_08002488(uint *input, uint input_length)\n{\n    uint *memory_pointer = initial_memory_pointer;\n    if (input == NULL)\n    {\n        return 1;\n    }\n    if ((*initial_memory_pointer & 0xf) < input_length)\n    {\n        *(char *)initial_memory_pointer = (char)input_length;\n        if (input_length != (*memory_pointer & 0xf))\n        {\n            return 1;\n        }\n    }\n    if ((*input & 2) != 0)\n    {\n        if ((*input & 4) != 0)\n        {\n            memory_pointer[2] = memory_pointer[2] | 0x1c00;\n        }\n        if ((*input & 8) != 0)\n        {\n            memory_pointer[2] = memory_pointer[2] | 0xe000;\n        }\n        memory_pointer[2] = memory_pointer[2] & 0xffffff0f | input[2];\n    }\n    if ((*input & 1) != 0)\n    {\n        uint input_value = input[1];\n        if (input_value == 1)\n        {\n            if ((*initial_memory_pointer & 0x20000) == 0)\n            {\n                return 1;\n            }\n        }\n        else if (input_value - 2 < 2)\n        {\n            if ((*initial_memory_pointer & 0x2000000) == 0)\n            {\n                return 1;\n            }\n        }\n        else if ((*initial_memory_pointer & 2) == 0)\n        {\n            return 1;\n        }\n        memory_pointer[2] = input_value | memory_pointer[2] & 0xfffffffc;\n        int start_time = get_value_from_pointer_08000e30();\n        while ((memory_pointer[2] & 0xc) != input[1] * 4)\n        {\n            int end_time = get_value_from_pointer_08000e30();\n            if (5000 < (uint)(end_time - start_time))\n            {\n                return 3;\n            }\n        }\n    }\n    memory_pointer = initial_memory_pointer;\n    if (input_length < (*initial_memory_pointer & 0xf))\n    {\n        *(char *)initial_memory_pointer = (char)input_length;\n        if (input_length != (*memory_pointer & 0xf))\n        {\n            return 1;\n        }\n    }\n    if ((*input & 4) != 0)\n    {\n        memory_pointer[2] = memory_pointer[2] & 0xffffe3ff | input[3];\n    }\n    if ((*input & 8) != 0)\n    {\n        memory_pointer[2] = memory_pointer[2] & 0xffff1fff | input[4] << 3;\n    }\n    uint result = calculate_result_080023b4();\n    *(uint *)pointer_to_data = result >> pointer_to_table[(initial_memory_pointer[2] << 0x18) >> 0x1c];\n    check_and_set_input_08000d98(0xf);\n    return 0;\n}",
            "called": [
                "FUN_08000e30",
                "FUN_080023b4",
                "FUN_08000d98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002488",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "validate_input_08002488"
        },
        "FUN_08004544": {
            "renaming": {
                "FUN_08004544": "set_values_of_pointers_08004544",
                "param_1": "pointer_array",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "value_3",
                "param_5": "value_4"
            },
            "code": "void set_values_of_pointers_08004544(undefined4 *pointer_array, undefined value_1, undefined value_2, undefined value_3, undefined value_4)\n{\n  *pointer_array = PTR_PTR_LAB_0800450a_1_0800455c;\n  *(undefined *)(pointer_array + 1) = value_1;\n  *(undefined *)((int)pointer_array + 5) = value_2;\n  *(undefined *)((int)pointer_array + 6) = value_3;\n  *(undefined *)((int)pointer_array + 7) = value_4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004544",
            "calling": [
                "FUN_08004560"
            ],
            "imported": false,
            "current_name": "set_values_of_pointers_08004544"
        },
        "FUN_08003cc8": {
            "renaming": {
                "FUN_08003cc8": "update_data_08003cc8",
                "sVar1": "current_value",
                "puVar2": "data_ptr",
                "uVar3": "new_short_value",
                "iVar4": "found_index",
                "uVar5": "found_value"
            },
            "code": "void update_data_08003cc8(void)\n{\n  short current_value = *(short *)(PTR_DATA_START + 0x9a);\n  int found_index = find_value_index(current_value, PTR_DATA_ARRAY);\n  if (found_index != 0) {\n    undefined4 found_value = find_value(current_value, PTR_DATA_ARRAY);\n    undefined2 new_short_value = get_short_if_not_zero(found_value, PTR_SHORT_ARRAY);\n    undefined *data_ptr = PTR_DATA_START;\n    *(undefined2 *)(data_ptr + 0x5a) = new_short_value;\n    *(short *)(data_ptr + 0x58) = current_value;\n    *(undefined4 *)(data_ptr + 0x48) = 0x2580;\n    *(undefined4 *)(data_ptr + 0x54) = 0;\n    *(undefined4 *)(data_ptr + 0x4c) = 0;\n    *(undefined4 *)(data_ptr + 0x50) = 0;\n    update_data_08003cc8_helper(data_ptr);\n  }\n  return;\n}\n",
            "called": [
                "FUN_080034f4",
                "FUN_08003978",
                "FUN_0800351e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003cc8",
            "calling": [
                "FUN_08003d18"
            ],
            "imported": false,
            "current_name": "update_data_08003cc8"
        },
        "FUN_08002d70": {
            "renaming": {
                "FUN_08002d70": "do_nothing_08002d70"
            },
            "code": "\nvoid do_nothing_08002d70(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d70",
            "calling": [
                "FUN_08002d72"
            ],
            "imported": false,
            "current_name": "do_nothing_08002d70"
        },
        "FUN_08000fb4": {
            "renaming": {
                "FUN_08000fb4": "update_data_08000fb4",
                "param_1": "data_to_update",
                "param_2": "new_data",
                "puVar1": "data_ptr_1",
                "puVar2": "data_ptr_2",
                "uVar3": "bit_mask_1",
                "uVar4": "bit_mask_2",
                "uVar5": "bit_mask_3",
                "uVar6": "bit_mask_4",
                "uVar7": "bit_mask_5",
                "iVar8": "index_1",
                "uVar9": "bit_shift_1",
                "iVar10": "index_2",
                "data_1": "data_1",
                "data_2": "data_2",
                "data_3": "data_3",
                "data_4": "data_4",
                "index_3": "index_3",
                "bit_shift_3": "bit_shift_3",
                "data_5": "data_5"
            },
            "code": "void update_data_08000fb4(uint *data_to_update, uint *new_data) {\n  uint *data_ptr_1;\n  uint *data_ptr_2;\n  uint bit_mask_1;\n  uint bit_mask_2;\n  uint bit_mask_3;\n  uint bit_mask_4;\n  uint bit_mask_5;\n  int index_1;\n  uint bit_shift_1;\n  int index_2;\n  uint bit_shift_2;\n  uint data_1;\n  uint data_2;\n  uint data_3;\n  uint data_4;\n  int index_3;\n  uint bit_shift_3;\n  uint data_5;\n  if (data_to_update == (uint *)0x0) {\n    return;\n  }\n  for (bit_mask_1 = 0; bit_mask_1 < 0x10; bit_mask_1 = bit_mask_1 + 1) {\n    bit_mask_2 = 1 << (bit_mask_1 & 0xff);\n    bit_mask_3 = bit_mask_2 & *new_data;\n    if (bit_mask_2 == bit_mask_3) {\n      if ((new_data[1] == 2) || (new_data[1] == 0x12)) {\n        index_1 = (bit_mask_1 >> 3) + 8;\n        index_2 = (bit_mask_1 & 7) << 2;\n        data_to_update[index_1] = data_to_update[index_1] & ~(0xf << index_2) | new_data[4] << index_2;\n      }\n      bit_shift_1 = bit_mask_1 << 1;\n      bit_mask_4 = ~(3 << (bit_shift_1 & 0xff));\n      data_1 = *data_to_update & bit_mask_4 | (new_data[1] & 3) << (bit_shift_1 & 0xff);\n      data_to_update[0] = data_1;\n      data_2 = new_data[1];\n      if (((data_2 - 1 < 2) || (data_2 == 0x11)) || (data_2 == 0x12)) {\n        data_to_update[2] = data_to_update[2] & bit_mask_4 | new_data[3] << (bit_shift_1 & 0xff);\n        data_to_update[1] = data_to_update[1] & ~bit_mask_2 | ((new_data[1] << 0x1b) >> 0x1f) << (bit_mask_1 & 0xff);\n      }\n      bit_mask_5 = bit_mask_4 & data_to_update[3];\n      data_3 = new_data[2] << (bit_shift_1 & 0xff);\n      data_to_update[3] = bit_mask_5 | data_3;\n      if ((new_data[1] & 0x10000000) != 0) {\n        *(uint *)(PTR_DAT_0800118c + 0x44) = *(uint *)(PTR_DAT_0800118c + 0x44) | 0x4000;\n        index_2 = (bit_mask_1 & 3) << 2;\n        if (data_to_update == PTR_DAT_08001190) {\n          index_1 = 0;\n        }\n        else if (data_to_update == PTR_DAT_08001194) {\n          index_1 = 1;\n        }\n        else if (data_to_update == PTR_DAT_08001194 + 0x100) {\n          index_1 = 2;\n        }\n        else if (data_to_update == PTR_DAT_08001194 + 0x200) {\n          index_1 = 3;\n        }\n        else if (data_to_update == PTR_DAT_08001194 + 0x300) {\n          index_1 = 4;\n        }\n        else if (data_to_update == PTR_DAT_08001194 + 0x400) {\n          index_1 = 5;\n        }\n        else if (data_to_update == PTR_DAT_08001194 + 0x500) {\n          index_1 = 6;\n        }\n        else if (data_to_update == PTR_DAT_08001194 + 0x600) {\n          index_1 = 7;\n        }\n        else if (data_to_update == PTR_DAT_08001194 + 0x700) {\n          index_1 = 8;\n        }\n        else if (data_to_update == PTR_DAT_08001194 + 0x800) {\n          index_1 = 9;\n        }\n        else {\n          index_1 = 10;\n        }\n        data_4 = *(uint *)(PTR_DAT_08001184 + ((bit_mask_1 >> 2) + 2) * 4) & ~(0xf << index_2) | index_1 << index_2;\n        *(uint *)(PTR_DAT_08001184 + ((bit_mask_1 >> 2) + 2) * 4) = data_4;\n        data_ptr_1 = PTR_DAT_08001188;\n        data_5 = ~bit_mask_3;\n        bit_mask_4 = *PTR_DAT_08001188 & data_5;\n        if ((new_data[1] & 0x10000) != 0) {\n          bit_mask_4 = bit_mask_3 | *PTR_DAT_08001188;\n        }\n        *PTR_DAT_08001188 = bit_mask_4;\n        data_ptr_2 = PTR_DAT_08001188;\n        bit_mask_4 = data_5 & data_ptr_1[1];\n        if ((new_data[1] & 0x20000) != 0) {\n          bit_mask_4 = bit_mask_3 | data_ptr_1[1];\n        }\n        PTR_DAT_08001188[1] = bit_mask_4;\n        data_ptr_1 = PTR_DAT_08001188;\n        bit_mask_4 = data_5 & data_ptr_2[2];\n        if ((new_data[1] & 0x100000) != 0) {\n          bit_mask_4 = bit_mask_3 | data_ptr_2[2];\n        }\n        PTR_DAT_08001188[2] = bit_mask_4;\n        bit_mask_5 = data_5 & data_ptr_1[3];\n        if ((new_data[1] & 0x200000) != 0) {\n          bit_mask_5 = bit_mask_3 | data_ptr_1[3];\n        }\n        PTR_DAT_08001188[3] = bit_mask_5;\n      }\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000fb4",
            "calling": [
                "FUN_08003486",
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "update_data_08000fb4"
        },
        "FUN_08001718": {
            "renaming": {
                "FUN_08001718": "do_nothing_08001718"
            },
            "code": "\nvoid do_nothing_08001718(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001718",
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "imported": false,
            "current_name": "do_nothing_08001718"
        },
        "FUN_08001bfc": {
            "renaming": {
                "FUN_08001bfc": "process_input_08001bfc",
                "param_1": "input",
                "cVar1": "current_char",
                "puVar2": "input_ptr",
                "puVar3": "input_ptr_2",
                "DAT_08001cfc": "input_string_08001cfc"
            },
            "code": "uint32_t process_input_08001bfc(uint32_t **input)\\n\\\n{\\n\\\n    char current_char = *(char *)((int)input + 0x3d);\\n\\\n    uint32_t *input_ptr = *input;\\n\\\n    uint32_t *input_ptr_2 = *input;\\n\\\n    input_ptr[1] &= 0xfffff8ff;\\n\\\n    **input = **input | 1;\\n\\\n    **input &= 0xfffffbff;\\n\\\n    if ((input_ptr[1] & 0x800) != 0) {\\n\\\n        if ((*(char *)((int)input + 0x3d) == \"\\\"\") || (*(char *)((int)input + 0x3d) == \"*\")) {\\n\\\n            *(int16_t *)((int)input + 0x2a) = (int16_t)*(uint32_t *)(*input[0xe] + 4);\\n\\\n        }\\n\\\n        else {\\n\\\n            *(int16_t *)((int)input + 0x2a) = (int16_t)*(uint32_t *)(*input[0xd] + 4);\\n\\\n        }\\n\\\n    }\\n\\\n    if (*(int16_t *)((int)input + 0x2a) != 0) {\\n\\\n        if ((input_ptr[5] & 4) != 0) {\\n\\\n            uint32_t *input_ptr_3 = input[9];\\n\\\n            input[9] = (uint32_t *)((int)input_ptr_3 + 1);\\n\\\n            *(char *)input_ptr_3 = (char)input_ptr[4];\\n\\\n            *(int16_t *)((int)input + 0x2a) = *(int16_t *)((int)input + 0x2a) + -1;\\n\\\n        }\\n\\\n        if (((*input)[5] & 0x40) != 0) {\\n\\\n            uint32_t *input_ptr_4 = input[9];\\n\\\n            input[9] = (uint32_t *)((int)input_ptr_4 + 1);\\n\\\n            *(char *)input_ptr_4 = (char)(*input)[4];\\n\\\n            *(int16_t *)((int)input + 0x2a) = *(int16_t *)((int)input + 0x2a) + -1;\\n\\\n        }\\n\\\n        input[0x10] = (uint32_t *)((uint32_t)input[0x10] | 4);\\n\\\n    }\\n\\\n    if (input[0x10] == (uint32_t *)0x0) {\\n\\\n        if (((current_char == \"(\") || (current_char == \"*\")) || (current_char == \")\")) {\\n\\\n            input[0xb] = DAT_08001cfc;\\n\\\n            input[0xc] = (uint32_t *)0x0;\\n\\\n            *(undefined *)((int)input + 0x3d) = 0x20;\\n\\\n            *(undefined *)((int)input + 0x3e) = 0;\\n\\\n            process_input_08001bfc_and_set_flags_080038d0();\\n\\\n        }\\n\\\n        else if ((input[0xc] == (uint32_t *)0x22) || (current_char == \"\\\"\")) {\\n\\\n            input[0xc] = (uint32_t *)0x0;\\n\\\n            *(undefined *)((int)input + 0x3d) = 0x20;\\n\\\n            *(undefined *)((int)input + 0x3e) = 0;\\n\\\n            do_nothing_0800160c();\\n\\\n        }\\n\\\n    }\\n\\\n    else {\\n\\\n        process_input_08001bfc_08001ab0();\\n\\\n    }\\n\\\n    return 0;\\n\\\n}",
            "called": [
                "FUN_080038d0",
                "FUN_08001ab0",
                "FUN_0800160c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001bfc",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_08001bfc"
        },
        "FUN_08002d72": {
            "renaming": {
                "FUN_08002d72": "initialize_device_08002d72",
                "param_1": "device_ptr",
                "do_nothing_08002d70": "do_nothing",
                "*(char *)((int)param_1 + 0x39)": "*(char *)((int)device_ptr + 0x39)",
                "*(undefined *)(param_1 + 0xe)": "*(undefined *)(device_ptr + 0xe)",
                "*(undefined *)((int)param_1 + 0x39)": "*(undefined *)((int)device_ptr + 0x39)",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*device_ptr + 0xc)",
                "FUN_080029c8": "call_function",
                "*(uint *)(*param_1 + 0x10)": "*(uint *)(*device_ptr + 0x10)",
                "*(uint *)(*param_1 + 0x14)": "*(uint *)(*device_ptr + 0x14)",
                "param_1[0xf]": "device_ptr[0xf]",
                "*(undefined *)((int)param_1 + 0x3a)": "*(undefined *)((int)device_ptr + 0x3a)"
            },
            "code": "int initialize_device_08002d72(int *device_ptr) {\n    if (device_ptr != NULL) {\n        if (*(char *)((int)device_ptr + 0x39) == '\\0') {\n            *(undefined *)(device_ptr + 0xe) = 0;\n            do_nothing();\n        }\n        *(undefined *)((int)device_ptr + 0x39) = 0x24;\n        *(uint *)(*device_ptr + 0xc) &= 0xffffdfff;\n        calculate_and_set_values_080029c8(device_ptr);\n        *(uint *)(*device_ptr + 0x10) &= 0xffffb7ff;\n        *(uint *)(*device_ptr + 0x14) &= 0xffffffd5;\n        *(uint *)(*device_ptr + 0xc) |= 0x2000;\n        device_ptr[0xf] = 0;\n        *(undefined *)((int)device_ptr + 0x39) = 0x20;\n        *(undefined *)((int)device_ptr + 0x3a) = 0x20;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08002d70",
                "FUN_080029c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d72",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "initialize_device_08002d72"
        },
        "FUN_080007f0": {
            "renaming": {
                "FUN_080007f0": "validate_inputs_080007f0",
                "param_1": "input_buffer",
                "param_2": "buffer_size",
                "param_3": "input_type",
                "param_4": "secret_key",
                "bVar1": "is_valid",
                "bVar2": "current_value",
                "cVar3": "first_value",
                "cVar4": "second_value",
                "iVar5": "current_value",
                "iVar7": "current_value",
                "uVar6": "i"
            },
            "code": "int validate_inputs_080007f0(int input_buffer, int buffer_size, uint input_type, int secret_key) {\n    bool is_valid;\n    byte current_type;\n    char first_value;\n    char second_value;\n    int current_value;\n    \n    for (uint i = 0; i < 8; i++) {\n        current_type = (byte)PTR_DAT_080008c8[i];\n        if (current_type == input_type) {\n            is_valid = true;\n            break;\n        }\n    }\n    \n    if (!is_valid) {\n        return 0;\n    }\n    \n    switch(*(byte *)(input_buffer + 10)) {\n        case 1:\n        case 2:\n        case 0xf:\n            goto switchD_08000816_caseD_1;\n        case 3:\n        case 4:\n        case 0x10:\n            first_value = combine_values(*(undefined *)(input_buffer + 0xb), *(undefined *)(input_buffer + 0xc), buffer_size, (int)*(byte *)(input_buffer + 10) - 1, secret_key);\n            second_value = combine_values(*(undefined *)(input_buffer + 0xd), *(undefined *)(input_buffer + 0xe));\n            if (*(byte *)(input_buffer + 0x60) < (byte)(second_value + first_value)) {\n                return 2;\n            }\n            return 0;\n        case 5:\n            current_value = combine_values(*(undefined *)(input_buffer + 0xb), *(undefined *)(input_buffer + 0xc), buffer_size, (int)*(byte *)(input_buffer + 10) - 1, secret_key);\n            if ((uint)*(byte *)(input_buffer + 0x60) < (uint)(current_value << 0x14) >> 0x18) {\n                return 2;\n            }\n            return 0;\n        case 6:\n            current_value = combine_values(*(undefined *)(input_buffer + 0xb), *(undefined *)(input_buffer + 0xc), buffer_size, (int)*(byte *)(input_buffer + 10) - 1, secret_key);\n            if (*(byte *)(input_buffer + 0x60) < current_value) {\n                return 2;\n            }\n            return 0;\n        default:\n            return 0;\n    }\n\nswitchD_08000816_caseD_1:\n    first_value = combine_values(*(undefined *)(input_buffer + 0xb), *(undefined *)(input_buffer + 0xc), buffer_size, (int)*(byte *)(input_buffer + 10) - 1, secret_key);\n    current_value = combine_values(*(undefined *)(input_buffer + 0xd), *(undefined *)(input_buffer + 0xe));\n    if ((uint)*(byte *)(input_buffer + 0x60) < (((uint)(first_value << 0xc) >> 0x10) + ((uint)(current_value << 0xc) >> 0x10) & 0xff)) {\n        return 2;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080007f0",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "validate_inputs_080007f0"
        },
        "FUN_0800562a": {
            "renaming": {
                "FUN_0800562a": "process_data_0800562a",
                "param_1": "output",
                "param_2": "input_address",
                "param_3": "unused1",
                "param_4": "unused2",
                "sVar1": "data",
                "puVar2": "unused_pointer",
                "iVar3": "result"
            },
            "code": "void process_data_0800562a(int *output, int input_address, int unused1, int unused2) {\n  short data = *(short *)(input_address + 0xe);\n  *(ushort *)(input_address + 0xc) &= 0xefff;\n  int result = find_and_process_data_0800562a(data, unused1, unused2, unused2, unused2);\n  if (result == -1 && *PTR_DAT_080056b0 != 0) {\n    *output = *PTR_DAT_080056b0;\n  }\n  else {\n    process_input(output, data, 0, 2);\n  }\n}",
            "called": [
                "FUN_08005718",
                "FUN_080040ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800562a",
            "calling": [],
            "imported": false,
            "current_name": "process_data_0800562a"
        },
        "FUN_080044d8": {
            "renaming": {
                "FUN_080044d8": "initialize_if_param_one_equals_one_080044d8",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param"
            },
            "code": "void initialize_if_param_one_equals_one_080044d8(int first_param, int second_param, undefined4 third_param, undefined4 fourth_param)\n{\n    if (first_param != 1) {\n        return;\n    }\n    if (second_param == 0xffff) {\n        initialize_data_structures_0800447c(PTR_DAT_080044f8, DAT_080044f4, third_param, 0xffff, fourth_param);\n    }\n    return;\n}",
            "called": [
                "FUN_0800447c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080044d8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_if_param_one_equals_one_080044d8"
        },
        "FUN_08003df4": {
            "renaming": {
                "FUN_08003df4": "is_valid_flag_08003df4",
                "param_1": "flag",
                "uVar1": "combined_bytes",
                "PTR_DAT_08003e14": "flag_address_array"
            },
            "code": "bool is_valid_flag_08003df4(int flag)\n{\n  uint16_t combined_bytes = combine_bytes(get_flag_address(flag));\n  return (combined_bytes & 0x0021) == 0x0021;\n}",
            "called": [
                "FUN_0800312c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003df4",
            "calling": [
                "FUN_080042e8"
            ],
            "imported": false,
            "current_name": "is_valid_flag_08003df4"
        },
        "FUN_08005400": {
            "renaming": {
                "FUN_08005400": "allocate_and_initialize_struct_array_08005400",
                "param_1": "error_code",
                "param_2": "size",
                "param_3": "value1",
                "param_4": "value2",
                "piVar1": "currentStruct",
                "piVar2": "currentStructField",
                "iVar3": "arrayPointer",
                "ppiVar4": "currentArrayPointer",
                "fill_array_with_value_080048cc": "fill_array_with_value"
            },
            "code": "int* allocate_and_initialize_struct_array_08005400(undefined4* error_code, undefined4 size, undefined4 value1, undefined4 value2) {\n  int* newArray;\n  int* currentArray;\n  int* previousArray;\n  int** arrayPointer = *(int***)0x08005474;\n  if (*(int*)(arrayPointer + 6) == 0) {\n    initialize_struct_array_080053a0(arrayPointer);\n  }\n  currentArray = arrayPointer[3];\n  previousArray = 0;\n  while (currentArray != 0) {\n    if (*(short*)(currentArray + 6) == 0) {\n      *(undefined2*)(currentArray + 0xe) = 0xffff;\n      *(undefined2*)(currentArray + 0xc) = 1;\n      currentArray[0x13] = 0;\n      currentArray[0] = 0;\n      currentArray[2] = 0;\n      currentArray[1] = 0;\n      currentArray[4] = 0;\n      currentArray[5] = 0;\n      currentArray[6] = 0;\n      fill_array_with_value_080048cc(currentArray + 0x11, 0, 8, 1, value2);\n      currentArray[9] = 0;\n      currentArray[10] = 0;\n      currentArray[12] = 0;\n      currentArray[13] = 0;\n      return currentArray;\n    }\n    previousArray = currentArray;\n    currentArray = currentArray[3];\n  }\n  newArray = allocate_and_initialize_struct_array_08005400_08005374(error_code, size);\n  if (newArray == 0) {\n    *error_code = 0xc;\n    return 0;\n  }\n  if (previousArray == 0) {\n    arrayPointer[3] = newArray;\n  } else {\n    previousArray[3] = newArray;\n  }\n  newArray[2] = (int)previousArray;\n  return newArray;\n}",
            "called": [
                "FUN_08005374",
                "FUN_080053a0",
                "FUN_080048cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005400",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_struct_array_08005400",
            "code_backup": "\nint * FUN_08005400(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int iVar3;\n  int **ppiVar4;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08005474;\n  if (*(int *)(iVar3 + 0x18) == 0) {\n    FUN_080053a0(iVar3);\n  }\n  ppiVar4 = (int **)(iVar3 + 0x48);\n  do {\n    piVar2 = ppiVar4[2];\n    piVar1 = ppiVar4[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        piVar2[0x19] = 0;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_array_with_value_080048cc(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar4 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_array_of_structs_08005374(param_1,4);\n      *ppiVar4 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar4 = (int **)*ppiVar4;\n  } while( true );\n}\n\n"
        },
        "FUN_08003582": {
            "renaming": {
                "FUN_08003582": "compare_08003582",
                "param_1": "a",
                "param_2": "b"
            },
            "code": "int compare_08003582(int a, int b)\n{\n    if (a != b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        a = 0;\n    }\n    return a;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003582",
            "calling": [
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "compare_08003582"
        },
        "FUN_08005760": {
            "renaming": {
                "FUN_08005760": "run_program_08005760",
                "PTR_DAT_080057fc": "PTR_FLAG_1",
                "PTR_DAT_08005800": "PTR_FLAG_2",
                "PTR_DAT_08005804": "PTR_FLAG_3",
                "PTR_DAT_08005808": "PTR_FLAG_4",
                "PTR_DAT_0800580c": "PTR_FLAG_5",
                "PTR_DAT_08005810": "PTR_FLAG_6",
                "PTR_DAT_08005814": "PTR_FLAG_7",
                "PTR_DAT_08005818": "PTR_FLAG_8",
                "PTR_DAT_0800581c": "PTR_FLAG_9",
                "PTR_DAT_08005820": "PTR_FLAG_10",
                "PTR_DAT_08005824": "PTR_FLAG_11",
                "PTR_DAT_08005828": "PTR_FLAG_12"
            },
            "code": "void run_program_08005760(void)\n{\n  code *jump_table;\n  jump_table = run_program_08005760;\n  process_input_and_run_infinite_loop();\n  update_flag(PTR_DAT_080057fc);\n  update_flag(PTR_DAT_08005800);\n  update_flag(PTR_DAT_08005804);\n  update_flag(PTR_DAT_08005808);\n  update_flag(PTR_DAT_0800580c);\n  update_flag(PTR_DAT_08005810);\n  update_flag(PTR_DAT_08005814);\n  update_flag(PTR_DAT_08005818);\n  update_flag(PTR_DAT_0800581c);\n  update_flag(PTR_DAT_08005820);\n  update_flag(PTR_DAT_08005824);\n  update_flag(PTR_DAT_08005828);\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_080051ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005760",
            "calling": [
                "FUN_080047c0"
            ],
            "imported": false,
            "current_name": "run_program_08005760"
        },
        "FUN_08004678": {
            "renaming": {
                "FUN_08004678": "get_binary_digit_count_08004678",
                "param_1": "number",
                "cVar1": "digit_count"
            },
            "code": "char get_binary_digit_count_08004678(uint number) {\n  char digit_count = 0;\n  while (number != 1) {\n    number = number >> 1;\n    digit_count++;\n  }\n  return digit_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004678",
            "calling": [
                "FUN_080047d0"
            ],
            "imported": false,
            "current_name": "get_binary_digit_count_08004678"
        },
        "FUN_08003900": {
            "renaming": {
                "FUN_08003900": "check_and_set_flag_for_input_08003900",
                "param_1": "input_value",
                "iVar1": "subtracted_value",
                "subtract_four_from_input_0800387c": "subtract_four_from_input",
                "*(char *)(iVar1 + 0x5f)": "*ptr",
                "set_bit_and_flags_08001578": "set_bit_and_flags"
            },
            "code": "void check_and_set_flag_for_input_08003900(int input_value)\n{\n  int subtracted_value = subtract_four_from_input_0800387c();\n  char* ptr = (char*)(subtracted_value + 0x5f);\n  if (*ptr == \"\\0\") {\n    set_bit_and_flags_08001578(input_value);\n  }\n  return;\n}",
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003900",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "check_and_set_flag_for_input_08003900"
        },
        "FUN_08000f0c": {
            "renaming": {
                "FUN_08000f0c": "set_bit_at_index_08000f0c",
                "param_1": "index",
                "DAT_08000f28": "data_start"
            },
            "code": "void set_bit_at_index_08000f0c(uint index) {\n  if (index >= 0) {\n    int* data = (int*)(DAT_08000f28 + ((index >> 5) + 0x60) * 4);\n    int bit_index = index & 0x1f;\n    int mask = 1 << bit_index;\n    *data = mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f0c",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_at_index_08000f0c"
        },
        "FUN_08000998": {
            "renaming": {
                "FUN_08000998": "combine_and_update_08000998",
                "param_1": "target_address",
                "param_2": "source_address",
                "param_3": "start_offset",
                "param_4": "end_offset",
                "bVar1": "current_byte",
                "cVar2": "next_byte",
                "bVar3": "combined_value_1",
                "bVar4": "combined_value_2",
                "uVar5": "source_offset",
                "uVar6": "next_byte"
            },
            "code": "int combine_and_update_08000998(int target_address, int source_address, uint32_t start_offset, uint32_t end_offset, uint32_t default_value) {\n  byte combined_value_1;\n  byte combined_value_2;\n  byte current_byte;\n  byte num_bytes;\n  uint32_t source_offset;\n  uint32_t target_offset = *(byte *)(target_address + 0xb);\n  *(undefined *)(target_address + 0x49) = 3;\n  combined_value_1 = combine_values_08004640(*(undefined *)(target_address + 0xb),*(undefined *)(target_address + 0xc),start_offset,end_offset,default_value);\n  combined_value_2 = combine_values_08004640(*(undefined *)(target_address + 0xd),*(undefined *)(target_address + 0xe));\n  *(byte *)(target_address + 0xb) = combined_value_2 << 1;\n  for (source_offset = (uint32_t)combined_value_1; source_offset < (uint32_t)combined_value_1 + (uint32_t)combined_value_2; source_offset = source_offset + 1 & 0xff) {\n    current_byte = *(byte *)(target_address + 0x49);\n    *(char *)(target_address + (uint32_t)current_byte + 9) = (char)((ushort)*(undefined2 *)(source_address + source_offset * 2) >> 8);\n    uint32_t next_byte = current_byte + 1 & 0xff;\n    *(char *)(target_address + 0x49) = (char)next_byte;\n    *(undefined *)(target_address + next_byte + 9) = *(undefined *)(source_address + source_offset * 2);\n    *(char *)(target_address + 0x49) = (char)(next_byte + 1);\n  }\n  current_byte = *(char *)(target_address + 0x49);\n  calculate_and_update_crc_0800076c(target_address);\n  return (int)(char)(current_byte + 2);\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000998",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "combine_and_update_08000998"
        },
        "FUN_08003f94": {
            "renaming": {
                "FUN_08003f94": "do_nothing_08003f94"
            },
            "code": "\nvoid do_nothing_08003f94(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f94",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f94"
        },
        "FUN_080055d0": {
            "renaming": {
                "FUN_080055d0": "process_input_080055d0",
                "param_1": "input_size",
                "puVar1": "ptr3",
                "uVar2": "uVar1",
                "piVar3": "ptr1",
                "iVar4": "iVar2",
                "pcVar5": "ptr_func",
                "unaff_r4": "unused_reg_4",
                "unaff_r5": "unused_reg_5",
                "in_lr": "unused_lr",
                "puVar6": "unused_ptr_6"
            },
            "code": "int process_input_080055d0(uint input_size) {\n  int* ptr1 = *(int **)PTR_PTR_DAT_080055dc;\n  if (input_size > 31) {\n    *ptr1 = 22;\n    return -1;\n  }\n  int* ptr2 = ptr1[17];\n  if ((ptr2 != 0) && (*(code **)(ptr2 + input_size * 4) != (code *)0)) {\n    if (*(code **)(ptr2 + input_size * 4) != (code *)1) {\n      if (*(code **)(ptr2 + input_size * 4) == (code *)-1) {\n        *ptr1 = 22;\n        return 1;\n      }\n      *(code **)(ptr2 + input_size * 4) = 0;\n      (*(code **)(ptr2 + input_size * 4))(input_size);\n    }\n    return 0;\n  }\n  undefined4 uVar1 = get_one_thunk_0800410c(ptr1);\n  undefined *ptr3 = PTR_DAT_08005600;\n  *(undefined4 *)PTR_DAT_08005600 = 0;\n  int iVar2 = set_pointer_value_080040fc(uVar1,input_size,input_size,0,*(undefined **)(PTR_PTR_DAT_080055dc),unaff_r4,unaff_r5,in_lr);\n  if ((iVar2 == -1) && (*(int *)ptr3 != 0)) {\n    *ptr1 = *(int *)ptr3;\n  }\n  return iVar2;\n}",
            "called": [
                "thunk_FUN_0800410c",
                "FUN_080040fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055d0",
            "calling": [
                "FUN_080051ac"
            ],
            "imported": false,
            "current_name": "process_input_080055d0"
        },
        "FUN_080056f8": {
            "renaming": {
                "FUN_080056f8": "process_input_080056f8",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "data_ptr",
                "iVar2": "return_val"
            },
            "code": "void process_input_080056f8(int *output, undefined4 input) {\n  undefined *data_ptr;\n  int return_val;\n  data_ptr = PTR_DAT_08005714;\n  *(undefined4 *)PTR_DAT_08005714 = 0;\n  return_val = compute_value_080040e0(input);\n  if ((return_val == -1) && (*(int *)data_ptr != 0)) {\n    *output = *(int *)data_ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056f8",
            "calling": [
                "FUN_080054fc"
            ],
            "imported": false,
            "current_name": "process_input_080056f8"
        },
        "FUN_080054b4": {
            "renaming": {
                "FUN_080054b4": "check_permissions_and_set_flag_080054b4",
                "param_1": "file_path",
                "param_2": "file_descriptor",
                "param_3": "flag",
                "param_4": "is_shared_object",
                "iVar1": "set_permission_result",
                "uVar2": "flag_value",
                "auStack_4c": "file_type_buffer",
                "local_48": "file_type"
            },
            "code": "int check_permissions_and_set_flag_080054b4(uint8_t *file_path, int file_descriptor, uint8_t *flag, uint *is_shared_object)\n{\n  int set_permission_result;\n  uint file_type;\n  if ((*(short *)(file_descriptor + 0xe) < 0) ||\n     (set_permission_result = set_permissions(file_path, (int)*(short *)(file_descriptor + 0xe), &file_type), set_permission_result < 0)) {\n    *is_shared_object = 0;\n    if ((int)((uint)*(ushort *)(file_descriptor + 0xc) << 0x18) < 0) {\n      *flag = 0x40;\n      goto LAB_080054f4;\n    }\n  }\n  else {\n    *is_shared_object = (uint)((file_type & 0xf000) == 0x2000);\n  }\n  *flag = 0x400;\nLAB_080054f4:\n  return 0;\n}",
            "called": [
                "FUN_080056d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b4",
            "calling": [
                "FUN_080054fc"
            ],
            "imported": false,
            "current_name": "check_permissions_and_set_flag_080054b4"
        },
        "FUN_0800171a": {
            "renaming": {
                "FUN_0800171a": "process_input_0800171a",
                "param_1": "input",
                "cVar1": "current_char",
                "puVar2": "ptr_b"
            },
            "code": "uint32_t process_input_0800171a(uint32_t **input)\n{\n    char current_char = *(char *)((int)input + 0x3d);\n    uint32_t *ptr_b = input[0xb];\n    if ((*(short *)(input + 10) == 0) && (current_char == '!')) {\n        if ((ptr_b == (uint32_t *)0x4) || ((ptr_b == (uint32_t *)0x8 || (ptr_b == (uint32_t *)0xffff0000)))) {\n            (*input)[1] = (*input)[1] & 0xfffff8ff;\n            **input = **input | 0x200;\n            input[0xc] = (uint32_t *)0x0;\n            *(undefined *)((int)input + 0x3d) = 0x20;\n            if (*(char *)((int)input + 0x3e) == '@') {\n                *(undefined *)((int)input + 0x3e) = 0;\n                do_nothing_08001718();\n            }\n            else {\n                *(undefined *)((int)input + 0x3e) = 0;\n                do_nothing_080015b6();\n            }\n        }\n        else {\n            (*input)[1] = (*input)[1] & 0xfffff8ff;\n            input[0xc] = (uint32_t *)0x11;\n            *(undefined *)((int)input + 0x3e) = 0;\n            *(undefined *)((int)input + 0x3d) = 0x20;\n            do_nothing_080015b6();\n        }\n    }\n    else if ((current_char == '!') || ((*(char *)((int)input + 0x3e) == '@' && (current_char == '\"')))) {\n        if (*(short *)((int)input + 0x2a) == 0) {\n            (*input)[1] = (*input)[1] & 0xfffffbff;\n        }\n        else if (*(char *)((int)input + 0x3e) == '@') {\n            if (input[0x14] == (uint32_t *)0x0) {\n                if (input[0x13] == (uint32_t *)0x1) {\n                    (*input)[4] = (uint32_t)input[0x12] & 0xff;\n                    input[0x14] = (uint32_t *)((int)input[0x14] + 2);\n                }\n                else {\n                    (*input)[4] = (uint32_t)((int)input[0x12] << 0x10) >> 0x18;\n                    input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n                }\n            }\n            else if (input[0x14] == (uint32_t *)0x1) {\n                (*input)[4] = (uint32_t)input[0x12] & 0xff;\n                input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n            }\n            else if (input[0x14] == (uint32_t *)0x2) {\n                if (*(char *)((int)input + 0x3d) == '\"') {\n                    **input = **input | 0x100;\n                }\n                else if (*(char *)((int)input + 0x3d) == '!') {\n                    uint32_t *ptr_9 = input[9];\n                    input[9] = (uint32_t *)((int)ptr_9 + 1);\n                    (*input)[4] = (uint32_t)*(byte *)ptr_9;\n                    *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n                }\n            }\n        }\n        else {\n            uint32_t *ptr_9 = input[9];\n            input[9] = (uint32_t *)((int)ptr_9 + 1);\n            (*input)[4] = (uint32_t)*(byte *)ptr_9;\n            *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800171a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_0800171a"
        },
        "FUN_08004560": {
            "renaming": {
                "FUN_08004560": "set_pointers_08004560",
                "param_1": "input1",
                "param_2": "input2",
                "set_values_of_pointers_08004544": "set_values_of_pointers",
                "PTR_DAT_08004588": "PTR_DAT"
            },
            "code": "void set_pointers_08004560(int input1, int input2)\n{\n    if ((input1 == 1) && (input2 == 0xffff)) {\n        set_values_of_pointers_08004544(PTR_DAT_08004588_08004588, 0, 0, 0, 0);\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_08004544"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004560",
            "calling": [],
            "imported": false,
            "current_name": "set_pointers_08004560"
        },
        "FUN_08000a7a": {
            "renaming": {
                "FUN_08000a7a": "combine_and_update_values_08000a7a",
                "param_1": "data_addr",
                "param_2": "output_addr",
                "param_3": "value1",
                "param_4": "value2",
                "iVar1": "combined_value1",
                "iVar2": "combined_value2",
                "uVar3": "i",
                "uVar4": "bit_idx",
                "uVar5": "bit_pos",
                "uVar6": "bit_shift",
                "uVar7": "byte_idx",
                "byte_mask": "byte_mask",
                "bit_mask": "bit_mask"
            },
            "code": "int combine_and_update_values_08000a7a(int data_addr, int output_addr, int value1, int value2, int value3) {\n  int combined_value1 = combine_values(*(undefined *)(data_addr + 0xb), *(undefined *)(data_addr + 0xc), value1, value2, value3);\n  int combined_value2 = combine_values(*(undefined *)(data_addr + 0xd), *(undefined *)(data_addr + 0xe));\n  uint bit_idx = 0;\n  uint byte_idx = 7;\n  for (uint i = 0; i < combined_value2; i++) {\n    uint bit_shift = (i + combined_value1) * 0x100000 >> 0x18;\n    uint bit_pos = (i + combined_value1) & 0xf;\n    uint bit_mask = 1U << bit_idx;\n    uint byte_mask = *(byte *)(data_addr + byte_idx + 9);\n    if ((byte_mask >> bit_idx & 1U) == 0) {\n      *(ushort *)(output_addr + bit_shift * 2) = *(ushort *)(output_addr + bit_shift * 2) & ~(ushort)bit_mask;\n    }\n    else {\n      *(ushort *)(output_addr + bit_shift * 2) = (ushort)bit_mask | *(ushort *)(output_addr + bit_shift * 2);\n    }\n    bit_idx = (bit_idx + 1) & 0xff;\n    if (bit_idx > 7) {\n      byte_idx = (byte_idx + 1) & 0xff;\n      bit_idx = 0;\n    }\n  }\n  *(undefined *)(data_addr + 0x49) = 6;\n  calculate_and_update_crc(data_addr);\n  return 8;\n}\n",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a7a",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "combine_and_update_values_08000a7a"
        },
        "FUN_08003474": {
            "renaming": {
                "FUN_08003474": "do_nothing_08003474"
            },
            "code": "\nvoid do_nothing_08003474(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003474",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "do_nothing_08003474"
        },
        "FUN_08004cb0": {
            "renaming": {
                "FUN_08004cb0": "convert_and_copy_string_08004cb0",
                "param_1": "source",
                "param_2": "dest_capacity",
                "param_3": "dest_length",
                "param_4": "flags",
                "param_5": "write_func",
                "iVar1": "write_result",
                "uVar2": "source_length",
                "uVar3": "padding_length",
                "bVar4": "is_hex",
                "PTR_00000014": "dest_capacity + 0x10",
                "PTR_00000045": "dest_capacity + 0x45"
            },
            "code": "undefined4 convert_and_copy_string_08004cb0(uint32_t source, uint32_t *dest_length, uint32_t *dest_capacity, uint32_t flags, code *write_func) {\n  int write_result; \n  uint32_t source_length;\n  uint32_t padding_length = 0;\n  bool is_hex = (flags & 0x40000000) != 0;\n  \n  source_length = dest_capacity[1];\n  if (source_length < dest_capacity[0]) {\n    source_length = dest_capacity[0];\n  }\n  *dest_length = source_length;\n  if (*(char *)(PTR_00000014) != 0) {\n    *dest_length = source_length + 1;\n  }\n  if ((int)(flags << 0x1a) < 0) {\n    *dest_length = *dest_length + 2;\n    padding_length = 2;\n  }\n  if ((source & 6) == 0) {\n    for (uint32_t i = 0; i < dest_capacity[2] - *dest_length; i++) {\n      write_result = (*write_func)(source, flags, (int)dest_capacity + 0x19, 1);\n      if (write_result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  if (*(char *)(PTR_00000014) != 0) {\n    padding_length = 1;\n  }\n  if ((int)(flags << 0x1a) < 0) {\n    *(undefined *)((int)dest_capacity + padding_length + 0x10) = 0x30;\n    *(undefined *)((int)dest_capacity + padding_length + 0x11) = *(undefined *)((int)PTR_00000045);\n    padding_length += 2;\n  }\n  write_result = (*write_func)(source, flags, (int)PTR_00000014, padding_length);\n  if (write_result != -1) {\n    uint32_t source_remaining_length = dest_capacity[2];\n    bool is_hex_length = (source & 6) == 4;\n    if (is_hex_length) {\n      source_remaining_length = source_remaining_length - *dest_length;\n    }\n    if (is_hex_length) {\n      source_remaining_length = source_remaining_length & ~((int)source_remaining_length >> 0x1f);\n    }\n    else {\n      source_remaining_length = 0;\n    }\n    if (dest_capacity[1] < dest_capacity[0]) {\n      source_remaining_length = source_remaining_length + (dest_capacity[0] - dest_capacity[1]);\n    }\n    uint32_t i = 0;\n    while (source_remaining_length != i) {\n      write_result = (*write_func)(source, flags, (int)dest_capacity + 0x19, 1);\n      if (write_result == -1) {\n        return 0xffffffff;\n      }\n      i++;\n    }\n    return 0;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb0",
            "calling": [
                "FUN_08004d9c"
            ],
            "imported": false,
            "current_name": "convert_and_copy_string_08004cb0"
        },
        "FUN_08003594": {
            "renaming": {
                "FUN_08003594": "execute_code_if_pointer_not_null_08003594",
                "PTR_DAT_080035a4": "function_pointer_data",
                "PTR_DAT_080035a8": "function_parameter_data",
                "code": "code_pointer",
                "undefined4": "undefined_4_byte_data"
            },
            "code": "void execute_code_if_pointer_not_null_08003594(void)\n{\n  code* function_pointer = *(code**)PTR_DAT_080035a4;\n  if (function_pointer != NULL) {\n    (*function_pointer)(*(undefined4*)PTR_DAT_080035a8);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003594",
            "calling": [
                "FUN_0800262c"
            ],
            "imported": false,
            "current_name": "execute_code_if_pointer_not_null_08003594"
        },
        "FUN_08002940": {
            "renaming": {
                "FUN_08002940": "set_parameters_08002940",
                "*param_1": "param",
                "*ptr1": "ptr1",
                "*ptr2": "ptr2",
                "*char_ptr": "char_ptr"
            },
            "code": "void set_parameters_08002940(int *param){\n    uint *ptr1 = (uint *)(*param + 0xc);\n    uint *ptr2 = (uint *)(*param + 0x14);\n    char *char_ptr = (char *)(param + 0x3a);\n    *ptr1 &= 0xfffffedf;\n    *ptr2 &= 0xfffffffe;\n    *char_ptr = 0x20;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002940",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "set_parameters_08002940"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "get_value_and_return_08004204",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void get_value_and_return_08004204() {\n  get_value_and_return_08004204_0800346c();\n  return;\n}",
            "called": [
                "FUN_0800346c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "FUN_0800076c",
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "get_value_and_return_08004204"
        },
        "FUN_08003476": {
            "renaming": {
                "FUN_08003476": "update_and_do_nothing_08003476",
                "update_data_08000e18": "update_data",
                "do_nothing_and_return_08000f4e": "do_nothing_and_return",
                "do_nothing_08003474": "do_nothing"
            },
            "code": "void update_and_do_nothing_08003476(void)\n{\n  update_data_08000e18();\n  do_nothing_and_return_08000f4e();\n  do_nothing_08003474();\n  return;\n}",
            "called": [
                "FUN_08000e18",
                "FUN_08000f4e",
                "FUN_08003474"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003476",
            "calling": [],
            "imported": false,
            "current_name": "update_and_do_nothing_08003476"
        },
        "FUN_08004444": {
            "renaming": {
                "FUN_08004444": "set_value_based_on_param_08004444",
                "param_1": "memory_block",
                "param_2": "parameter",
                "uVar1": "value",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void set_value_based_on_param_08004444(uint8_t *memory_block, uint8_t parameter) {\n    uint16_t value;\n    if (parameter < 0x60) {\n        value = *(uint16_t *)(PTR_DAT_0800445c + parameter * 2);\n    }\n    else {\n        value = 0xffff;\n    }\n    *(uint16_t *)(memory_block + 0x12e) = value;\n    code *jump_table = (code *) PTR_FUN_08004452;\n    jump_table();\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004444",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "set_value_based_on_param_08004444"
        },
        "FUN_0800346c": {
            "renaming": {
                "FUN_0800346c": "get_value_and_return_0800346c",
                "get_value_from_pointer_08000e30": "get_value_from_pointer"
            },
            "code": "void get_value_and_return_0800346c(void)\n{\n  get_value_from_pointer_08000e30();\n  return;\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800346c",
            "calling": [
                "FUN_08004204"
            ],
            "imported": false,
            "current_name": "get_value_and_return_0800346c"
        },
        "FUN_080053a0": {
            "renaming": {
                "FUN_080053a0": "initialize_struct_array_080053a0",
                "param_1": "struct_array",
                "bVar3": "is_array_ptr",
                "iVar2": "struct_array_ptr"
            },
            "code": "void initialize_struct_array_080053a0(int struct_array){\n  undefined4 uVar1;\n  int struct_array_ptr = *(int *)(struct_array + 0x18);\n\n  if (struct_array_ptr == 0) {\n    *(undefined4 *)(struct_array + 0x48) = 0;\n    *(undefined4 *)(struct_array + 0x4c) = 0;\n    *(undefined4 *)(struct_array + 0x50) = 0;\n    bool is_array_ptr = struct_array == *(int *)PTR_PTR_DAT_080053f8;\n    if (is_array_ptr) {\n      struct_array_ptr = 1;\n    }\n    if (is_array_ptr) {\n      *(int *)(struct_array + 0x18) = struct_array_ptr;\n    }\n    uVar1 = allocate_and_initialize_struct_array_080053a0_08005400();\n    *(undefined4 *)(struct_array + 4) = uVar1;\n    uVar1 = allocate_and_initialize_struct_array_080053a0_08005400(struct_array);\n    *(undefined4 *)(struct_array + 8) = uVar1;\n    uVar1 = allocate_and_initialize_struct_array_080053a0_08005400(struct_array);\n    *(undefined4 *)(struct_array + 0xc) = uVar1;\n    initialize_params_0800532c(*(undefined4 *)(struct_array + 4),4,0);\n    initialize_params_0800532c(*(undefined4 *)(struct_array + 8),9,1);\n    initialize_params_0800532c(*(undefined4 *)(struct_array + 0xc),0x12,2);\n    *(int *)(struct_array + 0x18) = 1;\n  }\n  return;\n}",
            "called": [
                "FUN_08005400",
                "FUN_0800532c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053a0",
            "calling": [
                "FUN_08004a84",
                "FUN_08004fdc",
                "FUN_080052cc",
                "FUN_080050d0",
                "FUN_08004a34",
                "FUN_08005400"
            ],
            "imported": false,
            "current_name": "initialize_struct_array_080053a0"
        },
        "FUN_0800201c": {
            "renaming": {
                "FUN_0800201c": "check_and_update_values_0800201c",
                "param_1": "input_values",
                "puVar1": "ptr_to_data",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "uVar4": "return_value",
                "bVar5": "flag",
                "get_value_from_pointer_08000e30()": "get_current_time()"
            },
            "code": "\nundefined4 check_and_update_values_0800201c(uint *input_values)\n\n{\n  uint *ptr_to_data;\n  int start_time;\n  int current_time;\n  undefined4 return_value;\n  bool flag;\n  \n  ptr_to_data = DAT_080022d0;\n  if (input_values == (uint *)0x0) {\n    return 1;\n  }\n  if ((*input_values & 1) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 4) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) != 0)))) {\n      if (((*DAT_080022d0 & 0x20000) != 0) && (input_values[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (input_values[1] == 0x10000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x10000;\n      }\n      else if (input_values[1] == 0x50000) {\n        *DAT_080022d0 = *DAT_080022d0 | 0x40000;\n        *ptr_to_data = *ptr_to_data | 0x10000;\n      }\n      else {\n        *DAT_080022d0 = *DAT_080022d0 & 0xfffeffff;\n        *ptr_to_data = *ptr_to_data & 0xfffbffff;\n      }\n      if (input_values[1] == 0) {\n        start_time = get_current_time();\n        while ((*DAT_080022d0 & 0x20000) != 0) {\n          current_time = get_current_time();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        start_time = get_current_time();\n        while ((*DAT_080022d0 & 0x20000) == 0) {\n          current_time = get_current_time();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*input_values & 2) != 0) {\n    if (((DAT_080022d0[2] & 0xc) == 0) ||\n       (((DAT_080022d0[2] & 0xc) == 8 && ((DAT_080022d0[1] & 0x400000) == 0)))) {\n      if (((*DAT_080022d0 & 2) != 0) && (input_values[3] != 1)) {\n        return 1;\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | input_values[4] << 3;\n    }\n    else if (input_values[3] == 0) {\n      *DAT_080022d4 = 0;\n      start_time = get_current_time();\n      while ((*DAT_080022d0 & 2) != 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_080022d4 = 1;\n      start_time = get_current_time();\n      while ((*DAT_080022d0 & 2) == 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      *DAT_080022d0 = *DAT_080022d0 & 0xffffff07 | input_values[4] << 3;\n    }\n  }\n  if ((*input_values & 8) != 0) {\n    if (input_values[5] == 0) {\n      *DAT_080022d8 = 0;\n      start_time = get_current_time();\n      while ((DAT_080022d0[0x1d] & 2) != 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_080022d8 = 1;\n      start_time = get_current_time();\n      while ((DAT_080022d0[0x1d] & 2) == 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*input_values & 4) != 0) {\n    flag = (DAT_080022d0[0x10] & 0x10000000) == 0;\n    if (flag) {\n      DAT_080022d0[0x10] = DAT_080022d0[0x10] | 0x10000000;\n    }\n    if ((*DAT_080022dc & 0x100) == 0) {\n      *DAT_080022dc = *DAT_080022dc | 0x100;\n      start_time = get_current_time();\n      while ((*DAT_080022dc & 0x100) == 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    ptr_to_data = DAT_080022d0;\n    if (input_values[2] == 1) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 1;\n    }\n    else if (input_values[2] == 5) {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] | 4;\n      ptr_to_data[0x1c] = ptr_to_data[0x1c] | 1;\n    }\n    else {\n      DAT_080022d0[0x1c] = DAT_080022d0[0x1c] & 0xfffffffe;\n      ptr_to_data[0x1c] = ptr_to_data[0x1c] & 0xfffffffb;\n    }\n    if (input_values[2] == 0) {\n      start_time = get_current_time();\n      while ((DAT_080022d0[0x1c] & 2) != 0) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      start_time = get_current_time();\n      while ((DAT_080022d0[0x1c] & 2) == 0) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    if (flag) {\n      DAT_080023ac[0x10] = DAT_080023ac[0x10] & 0xefffffff;\n    }\n  }\n  if (input_values[6] == 0) {\n    return_value = 0;\n  }\n  else if ((DAT_080023ac[2] & 0xc) == 8) {\n    return_value = 1;\n  }\n  else if (input_values[6] == 2) {\n    *DAT_080023b0 = 0;\n    start_time = get_current_time();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        DAT_080023ac[1] =\n             input_values[7] | input_values[8] | input_values[9] << 6 | ((input_values[10] >> 1) - 1) * 0x10000 |\n             input_values[0xb] << 0x18;\n        *DAT_080023b0 = 1;\n        start_time = get_current_time();\n        do {\n          if ((*DAT_080023ac & 0x2000000) != 0) {\n            return 0;\n          }\n          current_time = get_current_time();\n        } while ((uint)(current_time - start_time) < 3);\n        return 3;\n      }\n      current_time = get_current_time();\n    } while ((uint)(current_time - start_time) < 3);\n    return_value = 3;\n  }\n  else {\n    *DAT_080023b0 = 0;\n    start_time = get_current_time();\n    do {\n      if ((*DAT_080023ac & 0x2000000) == 0) {\n        return 0;\n      }\n      current_time = get_current_time();\n    } while ((uint)(current_time - start_time) < 3);\n    return_value = 3;\n  }\n  return return_value;\n}\n\n",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800201c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "check_and_update_values_0800201c"
        },
        "FUN_080028d4": {
            "renaming": {
                "FUN_080028d4": "set_bit_080028d4",
                "param_1": "data",
                "param_2": "bit_position",
                "param_3": "bit_value",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void set_bit_080028d4(uint32_t *data, uint8_t bit_position, uint32_t bit_value) {\n  uint32_t mask = ~(4 << (bit_position & 0xff));\n  uint32_t cleared_data = *data & mask;\n  uint32_t shifted_value = bit_value << (bit_position & 0xff);\n  *data = cleared_data | shifted_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d4",
            "calling": [
                "FUN_080028f0"
            ],
            "imported": false,
            "current_name": "set_bit_080028d4"
        },
        "FUN_0800293c": {
            "renaming": {
                "FUN_0800293c": "do_nothing_0800293c"
            },
            "code": "\nvoid do_nothing_0800293c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293c",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_0800293c"
        },
        "FUN_080040ec": {
            "renaming": {
                "FUN_080040ec": "find_and_process_data_080040ec",
                "param_1": "",
                "param_2": "data_1",
                "param_3": "data_2",
                "param_4": "data_3"
            },
            "code": "void find_and_process_data_080040ec(void* data_1, void* data_2, void* data_3, void* data_4) {\n  find_and_process_data_080040ec_08003d18(data_1, data_2, data_3, data_4, data_4);\n  return;\n}",
            "called": [
                "FUN_08003d18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040ec",
            "calling": [
                "FUN_0800562a"
            ],
            "imported": false,
            "current_name": "find_and_process_data_080040ec"
        },
        "FUN_08001460": {
            "renaming": {
                "FUN_08001460": "check_params_and_set_values_08001460",
                "param_1": "param_array",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uVar1": "result",
                "puVar2": "ptr1"
            },
            "code": "uint32_t check_params_and_set_values_08001460(uint32_t **param_array, uint32_t *param1, uint32_t param2, uint32_t *param3)\n{\n    uint32_t result;\n    uint32_t *ptr1;\n    if (*((char *)(param_array + 0x3d)) == '(')\n    {\n        if (param1 == NULL)\n        {\n            result = 1;\n        }\n        else if (param2 == 0)\n        {\n            result = 1;\n        }\n        else if (*((char *)(param_array + 0xf)) == 1)\n        {\n            result = 2;\n        }\n        else\n        {\n            *((char *)(param_array + 0xf)) = 1;\n            ptr1 = *param_array;\n            if ((*ptr1 & 1) == 0)\n            {\n                *ptr1 = *ptr1 | 1;\n            }\n            **param_array = **param_array & 0xfffff7ff;\n            *((char *)(param_array + 0x3d)) = ')';\n            *((char *)(param_array + 0x3e)) = ' ';\n            result = 0;\n            param_array[0x10] = NULL;\n            param_array[9] = param1;\n            *((uint16_t *)(param_array + 0x2a)) = (uint16_t)param2;\n            param_array[0xb] = param3;\n            *((uint16_t *)(param_array + 10)) = *((uint16_t *)(param_array + 0x2a));\n            *((char *)(param_array + 0xf)) = 0;\n            (*param_array)[1] = (*param_array)[1] | 0x700;\n        }\n    }\n    else\n    {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001460",
            "calling": [
                "FUN_08003880"
            ],
            "imported": false,
            "current_name": "check_params_and_set_values_08001460"
        },
        "FUN_08003880": {
            "renaming": {
                "FUN_08003880": "process_input_08003880",
                "param_1": "input_address",
                "param_2": "flag",
                "param_3": "input_value",
                "param_4": "param_4",
                "iVar1": "result_address",
                "subtract_four_from_input_0800387c": "subtract_four_from_input",
                "check_params_and_set_values_08001460": "check_params_and_set_values",
                "parse_input_080014ec": "parse_input"
            },
            "code": "void process_input_08003880(int input_address, int flag, int input_value, undefined4 param_4)\n{\n    int result_address;\n    \n    result_address = subtract_four_from_input_0800387c();\n    if (input_value == *(int *)(input_address + 0xc))\n    {\n        if (flag == 0)\n        {\n            *(undefined *)(result_address + 0x88) = 0;\n            *(undefined *)(result_address + 0x5e) = 0;\n            if (*(code **)(result_address + 100) != (code *)0x0)\n            {\n                (**(code **)(result_address + 100))();\n            }\n            check_params_and_set_values_08001460(input_address, result_address + 0x68, *(undefined *)(result_address + 0x88), 8);\n            return;\n        }\n        *(undefined *)(result_address + 0x5e) = 1;\n        parse_input_080014ec(input_address, result_address + 0x68, 0x20, 8, param_4);\n    }\n    return;\n}",
            "called": [
                "FUN_080014ec",
                "FUN_08001460",
                "FUN_0800387c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003880",
            "calling": [
                "FUN_0800165a"
            ],
            "imported": false,
            "current_name": "process_input_08003880"
        },
        "FUN_08002f4c": {
            "renaming": {
                "FUN_08002f4c": "set_flag_and_process_input_08002f4c",
                "param_1": "input_ptr",
                "*param_1": "*input_ptr",
                "uint": "uint32_t",
                "char": "char",
                "(int)param_1": "(char *)input_ptr",
                "process_input_08003f48": "process_input_08003f48"
            },
            "code": "int set_flag_and_process_input_08002f4c(int *input_ptr) {\n  uint32_t *flag_ptr = (uint32_t *)(*input_ptr + 0xc);\n  *flag_ptr &= 0xffffffbf;\n  char *char_ptr = (char *)(input_ptr + 0x39);\n  *char_ptr = 0x20;\n  process_input_08003f48();\n  return 0;\n}",
            "called": [
                "FUN_08003f48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f4c",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "set_flag_and_process_input_08002f4c"
        },
        "FUN_080035bc": {
            "renaming": {
                "FUN_080035bc": "initialize_device_080035bc",
                "DAT_080035f0": "device_data_ptr",
                "DAT_080035f4": "device_data_ptr_2",
                "DAT_080035f8": "device_data_ptr_3",
                "puVar1": "device_ptr"
            },
            "code": "void initialize_device_080035bc(void)\n{\n  uint *device_ptr;\n  device_ptr = DAT_080035f0;\n  *DAT_080035f0 = *DAT_080035f0 | 1;\n  device_ptr[2] = 0;\n  *device_ptr = *device_ptr & 0xfef6ffff;\n  device_ptr[1] = DAT_080035f4;\n  *device_ptr = *device_ptr & 0xfffbffff;\n  device_ptr[3] = 0;\n  *(undefined4 *)(DAT_080035f8 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035bc",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "initialize_device_080035bc"
        },
        "FUN_080025ec": {
            "renaming": {
                "FUN_080025ec": "get_shifted_value_from_pointer_080025ec",
                "uVar1": "shifted_value",
                "get_value_from_pointer_080025e0": "get_value_from_pointer",
                "PTR_DAT_08002608": "PTR_DATA",
                "DAT_08002604": "data"
            },
            "code": "uint get_shifted_value_from_pointer_080025ec(void)\n{\n  uint shifted_value = get_value_from_pointer_080025e0();\n  uint index = (*(int *)(DAT_08002604 + 8) << 0x13) >> 0x1d;\n  uint shifted_result = shifted_value >> PTR_DAT_08002608[index];\n  return shifted_result;\n}",
            "called": [
                "FUN_080025e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025ec",
            "calling": [
                "FUN_080029c8"
            ],
            "imported": false,
            "current_name": "get_shifted_value_from_pointer_080025ec"
        },
        "FUN_08000c4c": {
            "renaming": {
                "FUN_08000c4c": "handle_interrupts_and_update_device_status_08000c4c",
                "PTR_DAT_08000c60": "device_status_ptr"
            },
            "code": "void handle_interrupts_and_update_device_status_08000c4c(void)\n{\n  handle_system_interrupts(0);\n  update_device_status(PTR_DAT_08000c60, 0x4b00);\n  return;\n}",
            "called": [
                "FUN_08000600",
                "FUN_080005e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c4c",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "handle_interrupts_and_update_device_status_08000c4c"
        },
        "FUN_08004a60": {
            "renaming": {
                "FUN_08004a60": "process_input_08004a60",
                "param_1": "input_param",
                "param_2": "input_value",
                "param_3": "input_string",
                "param_4": "input_length",
                "iVar1": "output_value",
                "puVar2": "string_end",
                "iVar3": "string_index"
            },
            "code": "int process_input_08004a60(int input_param, int input_value, char *input_string, int input_length)\n{\n  int output_value = 0;\n  char *string_end = input_string + input_length;\n  int string_index = 0;\n  do {\n    if (input_string == string_end) {\n      return 0;\n    }\n    output_value = process_input_08004a60_08004a34(input_param, *input_string, input_value, input_length, string_index);\n    input_length = output_value + 1;\n    input_string++;\n  } while (input_length != 0);\n  return output_value;\n}",
            "called": [
                "FUN_08004a34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a60",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "process_input_08004a60"
        },
        "FUN_080050d0": {
            "renaming": {
                "FUN_080050d0": "process_data_080050d0",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "result",
                "uVar2": "flags",
                "iVar3": "ptr",
                "PTR_PTR_DAT_0800519c": "ptr_ptr_dat",
                "PTR_DAT_080051a0": "ptr_dat_1",
                "PTR_DAT_080051a4": "ptr_dat_2",
                "PTR_DAT_080051a8": "ptr_dat_3"
            },
            "code": "uint process_data_080050d0(undefined4 *output, undefined4 *input)\n{\n  uint result;\n  ushort flags;\n  int ptr = *(int *)PTR_PTR_DAT_0800519c;\n  if ((ptr != 0) && (*(int *)(ptr + 0x18) == 0)) {\n    cleanup(ptr);\n  }\n  if (input == (undefined4 *)PTR_DAT_080051a0) {\n    input = *(undefined4 **)(ptr + 4);\n  }\n  else if (input == (undefined4 *)PTR_DAT_080051a4) {\n    input = *(undefined4 **)(ptr + 8);\n  }\n  else if (input == (undefined4 *)PTR_DAT_080051a8) {\n    input = *(undefined4 **)(ptr + 0xc);\n  }\n  flags = *(ushort *)(input + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)input[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input[0xd] != input + 0x11) {\n          insert_node(output);\n        }\n        input[0xd] = 0;\n      }\n      *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n      input[1] = 0;\n      *input = input[4];\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  }\n  if ((input[4] == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    process_input(output, input);\n  }\n  flags = *(ushort *)(input + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = input[5];\n    }\n    input[2] = result;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (input[4] == 0) {\n    flags = *(ushort *)(input + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\nLAB_08005100:\n      *(ushort *)(input + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_080054fc",
                "FUN_080053a0",
                "FUN_080048dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080050d0",
            "calling": [
                "FUN_08004a84",
                "FUN_08004a34"
            ],
            "imported": false,
            "current_name": "process_data_080050d0",
            "code_backup": "\nuint FUN_080050d0(undefined4 *param_1,undefined4 *param_2)\n\n{\n  uint uVar1;\n  ushort uVar2;\n  int iVar3;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_0800519c;\n  if ((iVar3 != 0) && (*(int *)(iVar3 + 0x18) == 0)) {\n    FUN_080053a0(iVar3);\n  }\n  if (param_2 == (undefined4 *)PTR_DAT_080051a0) {\n    param_2 = *(undefined4 **)(iVar3 + 4);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_080051a4) {\n    param_2 = *(undefined4 **)(iVar3 + 8);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_080051a8) {\n    param_2 = *(undefined4 **)(iVar3 + 0xc);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = (uint)uVar2;\n  if (-1 < (int)(uVar1 << 0x1c)) {\n    if (-1 < (int)(uVar1 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(uVar1 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          insert_node_080048dc(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    process_input_080054fc(param_1,param_2);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = uVar2 & 1;\n  if ((uVar2 & 1) == 0) {\n    if (-1 < (int)((uint)uVar2 << 0x1e)) {\n      uVar1 = param_2[5];\n    }\n    param_2[2] = uVar1;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar2 = *(ushort *)(param_2 + 3);\n    uVar1 = (int)(short)uVar2 & 0x80;\n    if (uVar1 != 0) {\nLAB_08005100:\n      *(ushort *)(param_2 + 3) = uVar2 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar1 = 0;\n  }\n  return uVar1;\n}\n\n"
        },
        "FUN_08004978": {
            "renaming": {
                "FUN_08004978": "allocate_and_set_08004978",
                "param_1": "out_buffer",
                "param_2": "size",
                "puVar1": "block_ptr",
                "uVar2": "offset",
                "puVar3": "prev_block_ptr",
                "iVar4": "diff",
                "uVar5": "block_size",
                "puVar6": "curr_block_ptr",
                "puVar7": "temp_block_ptr",
                "uVar8": "padded_size"
            },
            "code": "uint allocate_and_set_08004978(uint *out_buffer, uint size)\n{\n  uint *prev_block_ptr;\n  uint *curr_block_ptr;\n  uint block_size;\n  uint padded_size;\n  \n  padded_size = (size + 3 & 0xfffffffc) + 8;\n  if (padded_size < 0xc) {\n    padded_size = 0xc;\n  }\n  if (((int)padded_size < 0) || (padded_size < size)) {\n    *out_buffer = 0xc;\n  }\n  else {\n    do_nothing_0800557c();\n    prev_block_ptr = PTR_DAT_08004a30;\n    curr_block_ptr = *(uint **)PTR_DAT_08004a2c;\n    while (curr_block_ptr != (uint *)0x0) {\n      block_size = *curr_block_ptr - padded_size;\n      if (-1 < (int)block_size) {\n        if (block_size < 0xc) {\n          if (prev_block_ptr == curr_block_ptr) {\n            padded_size = prev_block_ptr[1];\n          }\n          else {\n            padded_size = curr_block_ptr[1];\n          }\n          if (prev_block_ptr == curr_block_ptr) {\n            *(uint *)PTR_DAT_08004a2c = padded_size;\n            curr_block_ptr = prev_block_ptr;\n          }\n          else {\n            prev_block_ptr[1] = padded_size;\n          }\n        }\n        else {\n          *curr_block_ptr = block_size;\n          *(uint *)((int)curr_block_ptr + block_size) = padded_size;\n          curr_block_ptr = (uint *)((int)curr_block_ptr + block_size);\n        }\n        goto LAB_080049dc;\n      }\n      prev_block_ptr = curr_block_ptr;\n      curr_block_ptr = (uint *)curr_block_ptr[1];\n    }\n    if (*(int *)PTR_DAT_08004a30 == 0) {\n      uint offset = find_and_set_offset_0800500c(out_buffer);\n      *(uint *)prev_block_ptr = offset;\n    }\n    curr_block_ptr = (uint *)find_and_set_offset_0800500c(out_buffer, padded_size);\n    if ((curr_block_ptr != (uint *)0xffffffff) && ((curr_block_ptr == (uint *)prev_block_ptr[1]) || (find_and_set_offset_0800500c(out_buffer, (int)curr_block_ptr + 3U & 0xfffffffc - (int)prev_block_ptr[1]) != -1))) {\n      *(uint *)((int)curr_block_ptr + 4) = padded_size;\nLAB_080049dc:\n      do_nothing_0800557e(out_buffer);\n      uint aligned_size = ((int)curr_block_ptr + 0xbU & 0xfffffff8) - ((int)curr_block_ptr + 4);\n      if (aligned_size != 0) {\n        *(int *)((int)curr_block_ptr + aligned_size) = -aligned_size;\n        return ((int)curr_block_ptr + 0xbU & 0xfffffff8);\n      }\n      return ((int)curr_block_ptr + 0xbU & 0xfffffff8);\n    }\n    *out_buffer = 0xc;\n    do_nothing_0800557e(out_buffer);\n  }\n  return 0;\n}",
            "called": [
                "FUN_0800500c",
                "FUN_0800557c",
                "FUN_0800557e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004978",
            "calling": [
                "FUN_08005374",
                "FUN_080054fc"
            ],
            "imported": false,
            "current_name": "allocate_and_set_08004978"
        },
        "FUN_08002d0c": {
            "renaming": {
                "FUN_08002d0c": "check_parameters_08002d0c",
                "param_1": "param_array",
                "param_2": "mask",
                "param_3": "expected_result",
                "param_4": "value",
                "param_5": "max_value_diff",
                "iVar1": "difference"
            },
            "code": "uint32_t check_parameters_08002d0c(uint32_t **param_array, uint32_t mask, bool expected_result, int value, uint32_t max_value_diff){\n    int difference;\n    while(true){\n        bool mask_check = ((mask & ~**param_array) == 0);\n        if(mask_check != expected_result){\n            return 0;\n        }\n        if((max_value_diff != 0xffffffff) && (max_value_diff != 0)){\n            difference = get_value_from_pointer_08000e30() - value;\n            if((difference > max_value_diff) || (difference < -max_value_diff)){\n                return 0;\n            }\n        }\n        (*param_array)[3] &= 0xfffffe5f;\n        (*param_array)[5] &= 0xfffffffe;\n        *((uint8_t *)param_array + 0x39) = 0x20;\n        *((uint8_t *)param_array + 0x3a) = 0x20;\n        *((uint32_t *)(param_array + 0xe)) = 0;\n        return 3;\n    }\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d0c",
            "calling": [
                "FUN_08002dd0"
            ],
            "imported": false,
            "current_name": "check_parameters_08002d0c"
        },
        "FUN_08001902": {
            "renaming": {
                "FUN_08001902": "do_nothing_08001902"
            },
            "code": "\nvoid do_nothing_08001902(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001902",
            "calling": [
                "FUN_080019a0",
                "FUN_08001904"
            ],
            "imported": false,
            "current_name": "do_nothing_08001902"
        },
        "FUN_08001904": {
            "renaming": {
                "FUN_08001904": "update_data_08001904",
                "param_1": "data",
                "puVar1": "last_updated_data",
                "delimiter": "delimiter",
                "count": "count",
                "**param_1": "*current_data",
                "(*param_1)[1]": "current_data[1]",
                "param_1[9]": "last_updated_data",
                "*(char *)puVar1": "((char *)current_data)[4]",
                "*(short *)((int)param_1 + 0x2a)": "*(uint16_t *)(data + 0x2a)",
                "*(undefined *)((int)param_1 + 0x3d)": "*delimiter",
                "param_1[0xc]": "data[0xc]",
                "*(char *)((int)param_1 + 0x3e)": "*(delimiter + 1)"
            },
            "code": "uint32_t update_data_08001904(uint32_t **data)\n{\n  uint32_t *current_data = *data;\n  char *delimiter = (char *)(data + 0x3d);\n  uint16_t *count = (uint16_t *)(data + 0x2a);\n  uint32_t *last_updated_data = data[9];\n  \n  if (*delimiter == '\"') {\n    if (*count < 4) {\n      if (*count < 2) {\n        *current_data &= 0xfffffbff;\n        current_data[1] &= 0xfffff8ff;\n        *last_updated_data = (uint32_t)((char *)current_data)[4];\n        last_updated_data++;\n        (*count)--;\n        *delimiter = ' ';\n        data[0xc] = NULL;\n        if (*(delimiter + 1) == '@') {\n          *(delimiter + 1) = 0;\n          do_nothing_08001902();\n        }\n        else {\n          *(delimiter + 1) = 0;\n          do_nothing_080015b8();\n        }\n      }\n    }\n    else {\n      *last_updated_data = (uint32_t)((char *)current_data)[4];\n      last_updated_data++;\n      (*count)--;\n      if (*count == 3) {\n        current_data[1] &= 0xfffffbff;\n      }\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08001902",
                "FUN_080015b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001904",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "update_data_08001904"
        },
        "FUN_08000c64": {
            "renaming": {
                "FUN_08000c64": "count_and_update_records_08000c64",
                "in_r3": "parameter_1",
                "PTR_DAT_08000c78": "PTR_1",
                "PTR_DAT_08000c74": "PTR_2"
            },
            "code": "void count_and_update_records_08000c64(void)\n{\n  undefined4 parameter_1;\n  undefined4 parameter_2;\n  undefined4 parameter_3 = 0x10;\n  undefined4 parameter_4;\n  undefined4 parameter_5;\n  count_and_update_08000b54(PTR_DAT_08000c78, PTR_DAT_08000c74, parameter_3, parameter_4, parameter_5);\n  return;\n}",
            "called": [
                "FUN_08000b54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c64",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "count_and_update_records_08000c64"
        },
        "FUN_08002ffc": {
            "renaming": {
                "FUN_08002ffc": "process_input_08002ffc",
                "param_1": "input_data",
                "iVar1": "result",
                "uVar2": "flag2",
                "uVar4": "flag3",
                "uVar5": "flags",
                "puVar3": "data"
            },
            "code": "void process_input_08002ffc(uint **input_data)\n{\n  uint *data = *input_data;\n  uint flags = *data;\n  uint flag2 = data[3];\n  if ((((flags & 0xf) == 0) && ((flags & 0x20) != 0)) && ((flag2 & 0x20) != 0)) {\n    process_data(input_data);\n    return;\n  }\n  if (((flags & 0xf) == 0) || ((data[5] & 1) == 0 && ((flag2 & 0x120) == 0)))) {\n    if (((flags & 0x80) != 0) && ((flag2 & 0x80) != 0)) {\n      process_data2(input_data);\n      return;\n    }\n    if (((flags & 0x40) != 0) && ((flag2 & 0x40) != 0)) {\n      set_flag_and_process_input_08002ffc(input_data);\n    }\n  }\n  else {\n    if (((flags & 1) != 0) && ((flag2 & 0x100) != 0)) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 1);\n    }\n    if (((flags & 4) != 0) && ((data[5] & 1) != 0)) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 2);\n    }\n    if (((flags & 2) != 0) && ((data[5] & 1) != 0)) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 4);\n    }\n    if (((flags & 8) != 0) && ((data[5] & 1) != 0)) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 8);\n    }\n    if (input_data[0xf] != (uint *)0x0) {\n      if (((flags & 0x20) != 0) && ((flag2 & 0x20) != 0)) {\n        process_data(input_data);\n      }\n      if ((((uint)input_data[0xf] & 8) == 0) && ((*(input_data[0]))[5] & 0x40) == 0)) {\n        do_nothing(input_data);\n        input_data[0xf] = (uint *)0x0;\n        return;\n      }\n      set_parameters(input_data);\n      uint *data = *input_data;\n      if ((data[5] & 0x40) == 0) {\n        do_nothing(input_data);\n        return;\n      }\n      data[5] = data[5] & 0xffffffbf;\n      if (input_data[0xd] == (uint *)0x0) {\n        do_nothing(input_data);\n        return;\n      }\n      input_data[0xd][0x14] = (uint *)process_value;\n      int result = set_param_value_if_not_two(input_data[0xd]);\n      if (result != 0) {\n        (*(code *)input_data[0xd][0x14])();\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002f66",
                "FUN_0800295c",
                "FUN_08003f94",
                "FUN_08002940",
                "FUN_08002f4c",
                "FUN_08000f8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ffc",
            "calling": [],
            "imported": false,
            "current_name": "process_input_08002ffc"
        },
        "FUN_0800387c": {
            "renaming": {
                "FUN_0800387c": "subtract_four_from_input_0800387c",
                "param_1": "input_value",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int subtract_four_from_input_0800387c(int input_value)\n{\n    int result = input_value - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800387c",
            "calling": [
                "FUN_08003900",
                "FUN_080038d0",
                "FUN_08003880"
            ],
            "imported": false,
            "current_name": "subtract_four_from_input_0800387c"
        },
        "FUN_0800351e": {
            "renaming": {
                "FUN_0800351e": "find_short_if_not_zero_0800351e",
                "param_1": "input_param",
                "uVar1": "result",
                "find_short_08003506": "find_short"
            },
            "code": "int find_short_if_not_zero_0800351e(int input_param)\n{\n    int result = -1;\n    if (input_param != 0)\n    {\n        result = find_short_08003506();\n    }\n    return result;\n}",
            "called": [
                "FUN_08003506"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800351e",
            "calling": [
                "FUN_0800447c",
                "FUN_08003cc8"
            ],
            "imported": false,
            "current_name": "find_short_if_not_zero_0800351e"
        },
        "FUN_080059f8": {
            "renaming": {
                "FUN_080059f8": "do_nothing_080059f8"
            },
            "code": "\nvoid do_nothing_080059f8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059f8",
            "calling": [
                "FUN_080001ac",
                "FUN_08004884"
            ],
            "imported": false,
            "current_name": "do_nothing_080059f8"
        },
        "FUN_08002f66": {
            "renaming": {
                "FUN_08002f66": "process_data_08002f66",
                "param_1": "data",
                "pbVar1": "output_uchar_ptr",
                "puVar3": "output_char_ptr",
                "sVar2": "counter",
                "string_start": "string_start",
                "page_size": "page_size",
                "data_offset": "data_offset",
                "output_ptr": "output_ptr"
            },
            "code": "int process_data_08002f66(int *data)\n{\n  char *string_start = (char *)((int)data + 0x3a);\n  if (*string_start != '\"') {\n    return 2;\n  }\n  \n  int page_size = data[2];\n  int data_offset = *data + 4;\n  int *output_ptr = &data[10];\n  \n  if (page_size == 0x1000) {\n    if (data[4] == 0) {\n      *output_ptr = (*(int *)data_offset << 0x17) >> 0x17;\n      output_ptr++;\n    }\n    else {\n      *output_ptr = *(int *)data_offset & 0xff;\n      output_ptr++;\n    }\n  }\n  else {\n    if (data[4] == 0) {\n      char *output_char_ptr = (char *)output_ptr;\n      *output_char_ptr = *(int *)data_offset;\n      output_ptr = (int *)(output_char_ptr + 1);\n    }\n    else {\n      unsigned char *output_uchar_ptr = (unsigned char *)output_ptr;\n      *output_uchar_ptr = *(int *)data_offset & 0x7f;\n      output_ptr = (int *)(output_uchar_ptr + 1);\n    }\n  }\n  \n  short counter = *(short *)((int)data + 0x2e) - 1;\n  *(short *)((int)data + 0x2e) = counter;\n  if (counter != 0) {\n    return 0;\n  }\n  \n  *(uint *)(*data + 0xc) &= 0xfffffedf;\n  *(uint *)(*data + 0x14) &= 0xfffffffe;\n  *string_start = ' ';\n  execute_function_if_index_below_10_08003f24();\n  return 0;\n}",
            "called": [
                "FUN_08003f24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f66",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "process_data_08002f66"
        },
        "FUN_080034b6": {
            "renaming": {
                "FUN_080034b6": "set_value_at_address_if_zero_080034b6",
                "param_1": "ptr_address",
                "param_2": "ptr_value",
                "param_3": "value_if_zero",
                "param_4": "ptr_param_4"
            },
            "code": "void set_value_at_address_if_zero_080034b6(int* ptr_address, short* ptr_value, int value_if_zero, int* ptr_param_4) {\n  if (value_if_zero == 0) {\n    set_value_at_address(ptr_address, ptr_value, 0, ptr_param_4, ptr_param_4);\n    return;\n  }\n  set_value_at_address(ptr_address, ptr_value, 1, ptr_param_4, ptr_param_4);\n  return;\n}",
            "called": [
                "FUN_08001198"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034b6",
            "calling": [
                "FUN_080041bc"
            ],
            "imported": false,
            "current_name": "set_value_at_address_if_zero_080034b6"
        },
        "FUN_08003eac": {
            "renaming": {
                "FUN_08003eac": "update_data_08003eac",
                "param_1": "data_ptr",
                "param_2": "new_data",
                "bVar1": "data_index",
                "PTR_DAT_08003ef4": "data_array_ptr",
                "PTR_DAT_08003ef8": "data_ptr_array_ptr",
                "PTR_DAT_08003efc": "validation_data_array_ptr"
            },
            "code": "void update_data_08003eac(int data_ptr, int new_data)\n{\n  if (data_ptr != 0) {\n    byte data_index = *(byte *)(data_ptr + 0x44);\n    *(undefined4 *)(PTR_DAT_08003ef4 + (uint)data_index * 4) = new_data;\n    *(int *)(PTR_DAT_08003ef8 + (uint)data_index * 4) = data_ptr;\n    set_bits_in_byte(2, (int)*(char *)(data_ptr + 0x5c));\n    set_bit_at_position((int)*(char *)(data_ptr + 0x5c));\n    validate_input(*(undefined4 *)(PTR_DAT_08003efc + (uint)data_index * 4), *(int *)(data_ptr + 0x68) + (uint)*(ushort *)(data_ptr + 0x6e),1);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08000e60",
                "FUN_08002eb2",
                "FUN_08000ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eac",
            "calling": [
                "FUN_080042e8"
            ],
            "imported": false,
            "current_name": "update_data_08003eac"
        },
        "FUN_08003e18": {
            "renaming": {
                "FUN_08003e18": "validate_and_get_input_08003e18",
                "param_1": "input_size",
                "param_2": "input_buffer",
                "param_3": "checksum",
                "param_4": "validation_flag",
                "iVar1": "is_checksum_valid",
                "is_valid_checksum_08003dd0": "is_valid_checksum",
                "*param_2": "input_char",
                "PTR_DAT_08003e50": "validation_data"
            },
            "code": "int validate_and_get_input_08003e18(int input_size, char* input_buffer, int checksum, int validation_flag)\n{\n  if (input_size == 0) {\n    return -1;\n  }\n  int is_checksum_valid = is_valid_checksum();\n  if (is_checksum_valid == 0) {\n    char input_char = *(char *)(input_size + 0x45);\n    int PTR_DAT_08003e50 = *(int *)(PTR_DAT_08003e50 + (uint)*(char *)(input_size + 0x44) * 4);\n    validate_input(PTR_DAT_08003e50, input_size + 0x45, 1, PTR_DAT_08003e50, validation_flag);\n    return 0;\n  }\n  return -1;\n}",
            "called": [
                "FUN_08002efa",
                "FUN_08003dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e18",
            "calling": [
                "FUN_080042ac"
            ],
            "imported": false,
            "current_name": "validate_and_get_input_08003e18"
        },
        "FUN_080040fc": {
            "renaming": {
                "FUN_080040fc": "set_pointer_value_080040fc",
                "PTR_DAT_08004108": "pointer_to_set",
                "0x16": "value_to_set"
            },
            "code": "void set_pointer_value_080040fc(void)\n{\n    int value_to_set = 22;\n    int* PTR_DAT_08004108 = (int*) PTR_DAT_08004108;\n    *PTR_DAT_08004108 = value_to_set;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040fc",
            "calling": [
                "FUN_080055d0"
            ],
            "imported": false,
            "current_name": "set_pointer_value_080040fc"
        },
        "FUN_08002dd0": {
            "renaming": {
                "FUN_08002dd0": "process_data_08002dd0",
                "param_1": "data_ptr",
                "param_2": "data_array",
                "param_3": "data_length",
                "uVar1": "value_from_pointer",
                "iVar2": "return_value"
            },
            "code": "int process_data_08002dd0(int *data_ptr, ushort *data_array, int data_length, undefined4 param_4)\n{\n  undefined4 value_from_pointer;\n  int return_value;\n  \n  if (*(char *)((int)data_ptr + 0x39) == ' ') {\n    if (data_array == (ushort *)0x0) {\n      return_value = 1;\n    }\n    else if (data_length == 0) {\n      return_value = 1;\n    }\n    else if (*(char *)(data_ptr + 0xe) == '\\x01') {\n      return_value = 2;\n    }\n    else {\n      *(undefined *)(data_ptr + 0xe) = 1;\n      data_ptr[0xf] = 0;\n      *(undefined *)((int)data_ptr + 0x39) = 0x21;\n      value_from_pointer = get_value_from_pointer_08000e30();\n      *(short *)(data_ptr + 9) = (short)data_length;\n      *(short *)((int)data_ptr + 0x26) = (short)data_length;\n      while (*(short *)((int)data_ptr + 0x26) != 0) {\n        *(short *)((int)data_ptr + 0x26) = *(short *)((int)data_ptr + 0x26) + -1;\n        if (data_ptr[2] == 0x1000) {\n          return_value = check_parameters_08002d0c(data_ptr,0x80,0,value_from_pointer,param_4);\n          if (return_value != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = *data_array & 0x1ff;\n          if (data_ptr[4] == 0) {\n            data_array = data_array + 1;\n          }\n          else {\n            data_array = (ushort *)((int)data_array + 1);\n          }\n        }\n        else {\n          return_value = check_parameters_08002d0c(data_ptr,0x80,0,value_from_pointer,param_4);\n          if (return_value != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = (uint)*(byte *)data_array;\n          data_array = (ushort *)((int)data_array + 1);\n        }\n      }\n      return_value = check_parameters_08002d0c(data_ptr,0x40,0,value_from_pointer,param_4);\n      if (return_value == 0) {\n        *(undefined *)((int)data_ptr + 0x39) = 0x20;\n        *(undefined *)(data_ptr + 0xe) = 0;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}",
            "called": [
                "FUN_08000e30",
                "FUN_08002d0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002dd0",
            "calling": [
                "FUN_08003d18"
            ],
            "imported": false,
            "current_name": "process_data_08002dd0"
        },
        "FUN_08004860": {
            "renaming": {
                "FUN_08004860": "process_data_08004860",
                "param_1": "data_size",
                "param_2": "data_buffer",
                "param_3": "output_buffer",
                "param_4": "temp_buffer",
                "uStack_8": "temp_data_size",
                "uStack_4": "temp_output_buffer",
                "PTR_PTR_DAT_08004880": "PTR_PTR_DAT_08004880"
            },
            "code": "void process_data_08004860(int data_size, int* data_buffer, int* output_buffer, int* temp_buffer) {\n  int temp_data_size = data_size;\n  int* temp_data_buffer = data_buffer;\n  int* temp_output_buffer = output_buffer;\n  process_input_and_output_08004a84(*(int*)PTR_PTR_DAT_08004880, data_size, data_buffer, &temp_data_size, temp_data_buffer, temp_output_buffer);\n  return;\n}",
            "called": [
                "FUN_08004a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004860",
            "calling": [
                "FUN_08004808"
            ],
            "imported": false,
            "current_name": "process_data_08004860"
        },
        "FUN_08004622": {
            "renaming": {
                "FUN_08004622": "convert_or_call_08004622",
                "param_1": "function_ptr",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "callback_ptr",
                "convert_base_080045c8": "convert_base"
            },
            "code": "void convert_or_call_08004622(void* function_ptr, uint32_t arg1, uint32_t arg2, void* callback_ptr)\n{\n    if (arg2 != 0)\n    {\n        convert_base(function_ptr, arg1, arg2 & 0xff);\n        return;\n    }\n    (**(void (**)(void*, uint32_t, uint32_t, void*))*function_ptr)(function_ptr, arg1 & 0xff, 0, *(void (**)(void*, uint32_t, uint32_t, void*))*function_ptr, callback_ptr);\n    return;\n}",
            "called": [
                "FUN_080045c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004622",
            "calling": [
                "FUN_08004638"
            ],
            "imported": false,
            "current_name": "convert_or_call_08004622"
        },
        "FUN_08003414": {
            "renaming": {
                "FUN_08003414": "update_bits_based_on_input_08003414",
                "param_1": "input_value",
                "local_4c": "bit_array",
                "find_value_080034f4": "find_value",
                "PTR_DAT_08003468": "PTR_INPUT_1",
                "find_value_0800339c": "find_value",
                "iVar1": "value_1",
                "find_value_or_negative_one_0800354a": "find_value_or_negative_one",
                "uVar2": "value_2",
                "clear_bit_and_set_flag_08002864": "clear_bit_and_set_flag",
                "clear_bit_and_check_if_empty_080028f0": "clear_bit_and_check_if_empty",
                "set_bits_according_to_input_0800268e": "set_bits_according_to_input"
            },
            "code": "void update_bits_based_on_input_08003414(int input_value) {\n  int bit_array[16];\n  int value_1 = find_value(input_value, PTR_DAT_08003468);\n  if (value_1 != 0 && (value_1 == 4 || value_1 == 8 || value_1 == 12 || value_1 == 24)) {\n    uint value_2 = find_value_or_negative_one(input_value, PTR_DAT_08003468);\n    if ((value_2 & 0x100000) == 0) {\n      clear_bit_and_set_flag(bit_array, value_1);\n    }\n    else {\n      clear_bit_and_check_if_empty(bit_array, value_1);\n    }\n    set_bits_according_to_input(bit_array);\n  }\n}\n",
            "called": [
                "FUN_0800339c",
                "FUN_080034f4",
                "FUN_080028f0",
                "FUN_08002864",
                "FUN_0800268e",
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003414",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "update_bits_based_on_input_08003414"
        },
        "FUN_08005718": {
            "renaming": {
                "FUN_08005718": "process_input_08005718",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "puVar1": "ptr_data",
                "iVar2": "result"
            },
            "code": "void process_input_08005718(int *output, undefined4 input1, undefined4 input2, undefined4 input3)\n{\n  undefined *ptr_data = PTR_DAT_08005738;\n  *(undefined4 *)PTR_DAT_08005738 = 0;\n  int result = return_zero_080040e4(input1, input2, input3, input3, input3);\n  if ((result == -1) && (*(int *)ptr_data != 0)) {\n    *output = *(int *)ptr_data;\n  }\n  return;\n}",
            "called": [
                "FUN_080040e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005718",
            "calling": [
                "FUN_08005662",
                "FUN_0800562a"
            ],
            "imported": false,
            "current_name": "process_input_08005718"
        },
        "FUN_080011c0": {
            "renaming": {
                "FUN_080011c0": "determine_mode_080011c0",
                "param_1": "param_array",
                "*(char *)((int)param_1 + 0x3e)": "character",
                "param_1[0x14]": "param_14",
                "*(uint *)(*param_1 + 0x10)": "param_0",
                "param_1[0x11]": "param_11",
                "*(char *)((int)param_1 + 0x3d)": "character_2"
            },
            "code": "uint8_t determine_mode_080011c0(int *param_array) {\n    uint8_t mode = 0;\n    char character = *(char *)((int)param_array + 0x3e);\n    uint16_t param_14 = param_array[0x14];\n    uint16_t param_11 = param_array[0x11];\n    uint32_t *param_0 = (uint32_t *)*param_array;\n    \n    if (character == '@') {\n        if (param_14 == 0) {\n            *param_0 |= (param_11 & 0xfe);\n        }\n        else {\n            *param_0 |= (param_11 & 0xffU | 1);\n        }\n    }\n    else if (param_array[4] == 0x4000) {\n        char character_2 = *(char *)((int)param_array + 0x3d);\n        if (character_2 == '!') {\n            *param_0 |= (param_11 & 0xfe);\n        }\n        else {\n            *param_0 |= (param_11 & 0xffU | 1);\n        }\n    }\n    else if (param_14 == 0) {\n        mode = (uint8_t)((param_11 << 0x10) >> 0x17 & 6 | 0xf0);\n    }\n    else if (param_14 == 1) {\n        mode = (uint8_t)((param_11 << 0x10) >> 0x17 & 6 | 0xf1);\n    }\n    return mode;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011c0",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "determine_mode_080011c0"
        },
        "FUN_08000b54": {
            "renaming": {
                "FUN_08000b54": "count_and_update_08000b54",
                "param_1": "inputs",
                "param_2": "data",
                "param_3": "flag",
                "bVar1": "result",
                "iVar2": "validation_result",
                "unaff_r5": "input_length",
                "iVar3": "count",
                "decode_and_count_080006b4": "decode_and_count",
                "validate_inputs_080007f0": "validate_inputs",
                "get_value_and_return_08004204": "get_value_and_return",
                "combine_and_update_values_080008e2": "combine_and_update_values",
                "combine_and_update_08000998": "combine_and_update",
                "update_data_08000a00": "update_data",
                "get_updated_value_08000a4e": "get_updated_value",
                "combine_and_update_values_08000a7a": "combine_and_update_values_2",
                "combine_and_update_values_08000b04": "combine_and_update_values_3",
                "copy_data_to_destination_080008cc": "copy_data_to_destination",
                "calculate_and_update_crc_0800076c": "calculate_and_update_crc"
            },
            "code": "int count_and_update_08000b54(int **inputs, int *data, int flag)\n{\n    byte result;\n    int count;\n    uint input_length;\n    int return_value;\n\n    inputs[19] = data;\n    *(char *)(inputs + 24) = (char)flag;\n\n    if (*(byte *)((int)inputs + 5) < 4) {\n        result = (**(code **)(**inputs + 8))();\n        input_length = (uint)result;\n    }\n\n    if (input_length == 0 || (int)input_length < 8) {\n        count = 0;\n    }\n    else {\n        count = decode_and_count(inputs);\n        *(char *)(inputs + 2) = (char)count;\n\n        if (*(char *)((int)inputs + 9) == *(char *)(inputs + 1)) {\n            int validation_result = validate_inputs(inputs);\n\n            if (validation_result < 1) {\n                int value = get_value_and_return();\n                inputs[23] = (int *)((uint)*(ushort *)((int)inputs + 86) + value);\n                *(undefined *)(inputs + 2) = 0;\n\n                switch (*(undefined *)((int)inputs + 10)) {\n                    case 1:\n                    case 2:\n                        return_value = combine_and_update_values(inputs, data, flag);\n                        break;\n                    case 3:\n                    case 4:\n                        return_value = combine_and_update(inputs, data, flag);\n                        break;\n                    case 5:\n                        return_value = update_data(inputs, data, flag);\n                        break;\n                    case 6:\n                        return_value = get_updated_value(inputs, data, flag);\n                        break;\n                    case 15:\n                        return_value = combine_and_update_values_2(inputs, data, flag);\n                        break;\n                    case 16:\n                        return_value = combine_and_update_values_3(inputs, data, flag);\n                        break;\n                }\n            }\n            else {\n                if (validation_result != 255) {\n                    copy_data_to_destination_080008cc(inputs, validation_result);\n                    calculate_and_update_crc(inputs);\n                }\n                *(char *)(inputs + 2) = (char)validation_result;\n                return_value = (int)(char)validation_result;\n            }\n        }\n        else {\n            return_value = 0;\n        }\n    }\n\n    return return_value;\n}",
            "called": [
                "FUN_08000a7a",
                "FUN_08004204",
                "FUN_080006b4",
                "FUN_080008e2",
                "FUN_08000a4e",
                "FUN_08000b04",
                "FUN_080007f0",
                "FUN_080008cc",
                "FUN_0800076c",
                "FUN_08000a00",
                "FUN_08000998"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b54",
            "calling": [
                "FUN_08000c64"
            ],
            "imported": false,
            "current_name": "count_and_update_08000b54"
        },
        "FUN_08000d96": {
            "renaming": {
                "FUN_08000d96": "do_nothing_08000d96"
            },
            "code": "\nvoid do_nothing_08000d96(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d96",
            "calling": [
                "FUN_08000de4"
            ],
            "imported": false,
            "current_name": "do_nothing_08000d96"
        },
        "FUN_0800376e": {
            "renaming": {
                "FUN_0800376e": "execute_callback_if_exists_0800376e",
                "iVar1": "subtracted_value",
                "subtract_four_from_param_08003750": "subtract_four_from_param"
            },
            "code": "void execute_callback_if_exists_0800376e(void)\n{\n  int subtracted_value = subtract_four_from_param_08003750();\n  if (*(code **)(subtracted_value + 0x44) != (code *)0x0) {\n    (**(code **)(subtracted_value + 0x44))();\n  }\n  return;\n}",
            "called": [
                "FUN_08003750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800376e",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "execute_callback_if_exists_0800376e"
        },
        "FUN_08000d98": {
            "renaming": {
                "FUN_08000d98": "check_and_set_input_08000d98",
                "param_1": "input_value",
                "iVar1": "check_result"
            },
            "code": "int check_and_set_input_08000d98(uint input_value) {\n    int check_result = check_input_value_08000ee0(*(uint *)PTR_DAT_08000ddc / (1000 / (byte)*PTR_DAT_08000dd8));\n    if (check_result != 0) {\n        return 1;\n    }\n    if (0xf < input_value) {\n        return 1;\n    }\n    set_bits_in_byte_08000e60(0xffffffff,input_value,0);\n    *(uint *)PTR_DAT_08000de0 = input_value;\n    return 0;\n}",
            "called": [
                "FUN_08000e60",
                "FUN_08000ee0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d98",
            "calling": [
                "FUN_08000de4",
                "FUN_08002488"
            ],
            "imported": false,
            "current_name": "check_and_set_input_08000d98"
        },
        "FUN_08003f48": {
            "renaming": {
                "FUN_08003f48": "process_input_08003f48",
                "uVar1": "index",
                "iVar2": "result",
                "iVar3": "data",
                "find_index_08003f00": "find_index",
                "PTR_DAT_08003f88": "data_ptr_1",
                "PTR_DAT_08003f8c": "data_ptr_2",
                "validate_input_08002eb2": "validate_input"
            },
            "code": "void process_input_08003f48(void)\n{\n  uint index = find_index();\n  int data = *(int *)(PTR_DAT_08003f88 + index * 4);\n  if ((index < 10) && ((*(code **)(PTR_DAT_08003f8c + index * 4))(data) != -1)) {\n    validate_input_08002eb2(*(undefined4 *)(PTR_DAT_08003f90 + (uint)*(byte *)(data + 0x44) * 4),\n                 *(int *)(data + 0x68) + (uint)*(ushort *)(data + 0x6e),1);\n  }\n  return;\n}",
            "called": [
                "FUN_08002eb2",
                "FUN_08003f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f48",
            "calling": [
                "FUN_08002f4c"
            ],
            "imported": false,
            "current_name": "process_input_08003f48"
        },
        "FUN_0800340c": {
            "renaming": {
                "FUN_0800340c": "set_bits_according_to_input_0800340c",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void set_bits_according_to_input_0800340c(void)\n{\n  // Code to set bits according to input\n  return;\n}",
            "called": [
                "FUN_080035fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800340c",
            "calling": [
                "FUN_0800268e"
            ],
            "imported": false,
            "current_name": "set_bits_according_to_input_0800340c"
        },
        "FUN_0800352e": {
            "renaming": {
                "FUN_0800352e": "find_value_in_array_0800352e",
                "param_1": "value",
                "param_2": "array",
                "*param_2": "*array"
            },
            "code": "unsigned int find_value_in_array_0800352e(int value, short *array)\n{\n  while(1)\n  {\n    if (*array == -1)\n    {\n      return 0xffffffff;\n    }\n    if (*array == value)\n    {\n      break;\n    }\n    array = array + 6;\n  }\n  return *(unsigned int *)(array + 4);\n}",
            "called": [
                "FUN_0800352e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800352e",
            "calling": [
                "FUN_0800352e",
                "FUN_0800354a"
            ],
            "imported": false,
            "current_name": "find_value_in_array_0800352e"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "process_input_08001ab0",
                "param_1": "input",
                "iVar1": "value",
                "puVar2": "flag_ptr",
                "puVar3": "input_ptr",
                "do_nothing_08001aac": "do_nothing",
                "check_and_set_flag_for_input_08003900": "check_and_set_flag_for_input",
                "set_param_value_if_not_two_08000f8c": "set_input_value"
            },
            "code": "void process_input_08001ab0(uint **input)\n{\n  int flag = *(byte *)((int)input + 0x3d) - 0x29;\n  if (flag < 2) {\n    input[0xc] = NULL;\n    *(undefined *)((int)input + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)input + 0x3d) != '`') && (((*input)[1] & 0x800) == 0)) {\n      *(undefined *)((int)input + 0x3d) = 0x20;\n    }\n    input[0xc] = NULL;\n    *(undefined *)((int)input + 0x3e) = 0;\n  }\n  **input &= 0xfffff7ff;\n  uint *input_ptr = *input;\n  if ((input_ptr[1] & 0x800) == 0) {\n    if (*(char *)((int)input + 0x3d) == '`') {\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      input[0x10] = NULL;\n      if ((input_ptr[5] & 0x40) != 0) {\n        uint *flag_ptr = input[9];\n        input[9] = (uint *)((int)flag_ptr + 1);\n        *(char *)flag_ptr = (char)input_ptr[4];\n      }\n      **input &= 0xfffffffe;\n      do_nothing_08001aac(input);\n    }\n    else {\n      if ((input_ptr[5] & 0x40) != 0) {\n        uint *flag_ptr = input[9];\n        input[9] = (uint *)((int)flag_ptr + 1);\n        *(char *)flag_ptr = (char)input_ptr[4];\n      }\n      check_and_set_flag_for_input(input);\n    }\n  }\n  else {\n    input_ptr[1] &= 0xfffff7ff;\n    if (*(char *)((int)input[0xd] + 0x35) == '\\x01') {\n      input[0xe][0x14] = (uint)PTR_LAB_08001f3c_1_08001bf4;\n      int value = set_param_value_if_not_two_08000f8c(input[0xe]);\n      if (value != 0) {\n        if (((*input)[5] & 0x40) != 0) {\n          uint *flag_ptr = input[9];\n          input[9] = (uint *)((int)flag_ptr + 1);\n          *(char *)flag_ptr = (char)(*input)[4];\n        }\n        **input &= 0xfffffffe;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        (*(code *)input[0xe][0x14])();\n      }\n    }\n    else {\n      input[0xd][0x14] = (uint)PTR_LAB_08001f3c_1_08001bf4;\n      int value = set_param_value_if_not_two_08000f8c(input[0xd]);\n      if (value != 0) {\n        **input &= 0xfffffffe;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        (*(code *)input[0xd][0x14])();\n      }\n    }\n  }\n  if ((*(char *)((int)input + 0x3d) == '(') && (((uint)input[0x10] & 4) != 0)) {\n    input[0xb] = DAT_08001bf8;\n    input[0xc] = NULL;\n    *(undefined *)((int)input + 0x3d) = 0x20;\n    *(undefined *)((int)input + 0x3e) = 0;\n    process_input_08001ab0_and_set_flags(input);\n  }\n}\n",
            "called": [
                "FUN_08003900",
                "FUN_08001aac",
                "FUN_080038d0",
                "FUN_08000f8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08001e68",
                "FUN_08001bfc"
            ],
            "imported": false,
            "current_name": "process_input_08001ab0"
        },
        "FUN_08001f9c": {
            "renaming": {
                "FUN_08001f9c": "check_if_pointer_is_valid_08001f9c",
                "iVar1": "current_value",
                "iVar2": "inner_current_value"
            },
            "code": "int check_if_pointer_is_valid_08001f9c(void)\n{\n    int current_value = get_current_value();\n    while (get_current_value() - current_value < 0x3e9)\n    {\n        if ((*PTR_08002014 + 4) & 0x10000)\n        {\n            *DAT_08002018 = 1;\n            int inner_current_value = get_current_value();\n            while (get_current_value() - inner_current_value < 0x3e9)\n            {\n                if ((*PTR_08002014 + 4) & 0x20000)\n                {\n                    return 0;\n                }\n            }\n            return 3;\n        }\n    }\n    return 3;\n}",
            "called": [
                "FUN_08000e30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f9c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "check_if_pointer_is_valid_08001f9c"
        },
        "FUN_08000d8e": {
            "renaming": {
                "FUN_08000d8e": "set_flags_before_function_call_08000d8e",
                "set_flags_080034ce": "set_flags"
            },
            "code": "void set_flags_before_function_call_08000d8e()\n{\n  set_flags();\n  return;\n}",
            "called": [
                "FUN_080034ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d8e",
            "calling": [
                "FUN_08004648"
            ],
            "imported": false,
            "current_name": "set_flags_before_function_call_08000d8e"
        },
        "FUN_08004638": {
            "renaming": {
                "FUN_08004638": "convert_or_call_08004638",
                "convert_or_call_08004622": "call_convert"
            },
            "code": "void convert_or_call_08004638() {\n  call_convert();\n  return;\n}",
            "called": [
                "FUN_08004622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004638",
            "calling": [],
            "imported": false,
            "current_name": "convert_or_call_08004638"
        },
        "FUN_080008cc": {
            "renaming": {
                "FUN_080008cc": "copy_data_to_destination_080008cc",
                "param_1": "destination_address",
                "param_2": "data",
                "PTR_": "",
                "DAT_": "",
                "undefined": "unsigned char",
                "byte": "unsigned char"
            },
            "code": "void copy_data_to_destination_080008cc(int destination_address, unsigned char data) {\n    *(unsigned char *)(destination_address + 9) = *(unsigned char *)(destination_address + 4);\n    *(unsigned char *)(destination_address + 10) = *(unsigned char *)(destination_address + 10) ^ 0x80;\n    *(unsigned char *)(destination_address + 0xb) = data;\n    *(unsigned char *)(destination_address + 0x49) = 3;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008cc",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "copy_data_to_destination_080008cc"
        },
        "FUN_08004a84": {
            "renaming": {
                "FUN_08004a84": "process_input_and_output_08004a84",
                "param_1": "struct_ptr",
                "param_2": "input_data_ptr",
                "param_3": "output_buffer_ptr",
                "param_4": "int_array_ptr",
                "puVar1": "byte_seq_ptr",
                "iVar2": "result",
                "piVar3": "int_ptr",
                "bVar4": "bool_val",
                "pbVar5": "byte_ptr_1",
                "pbVar6": "byte_ptr_2",
                "unaff_r9": "unaff_r9_val",
                "iVar7": "int_val_1",
                "local_8c": "int_array",
                "local_88": "uint_val_1",
                "local_84": "int_val_2",
                "local_80": "undefined4_val",
                "local_7c": "int_val_3",
                "local_74": "int_val_4",
                "local_70": "byte_val_1",
                "local_6f": "undefined_val_1",
                "local_6e": "undefined_val_2",
                "local_45": "undefined_val_3",
                "local_30": "undefined4_val_2"
            },
            "code": "\nint process_input_and_output_08004a84(int struct_ptr,undefined *input_data_ptr,byte *output_buffer_ptr,int *int_array_ptr)\n\n{\n  undefined *byte_seq_ptr;\n  int result;\n  int *int_ptr;\n  bool bool_val;\n  byte *byte_ptr_1;\n  byte *byte_ptr_2;\n  int unaff_r9_val;\n  int int_val_1;\n  int *int_array;\n  uint uint_val_1;\n  int int_val_2;\n  undefined4 undefined4_val;\n  int int_val_3;\n  int int_val_4;\n  byte byte_val_1;\n  undefined undefined_val_1;\n  undefined undefined_val_2;\n  undefined undefined_val_3;\n  undefined4 undefined4_val_2;\n  \n  int_array = int_array_ptr;\n  if ((struct_ptr != 0) && (*(int *)(struct_ptr + 0x18) == 0)) {\n    initialize_struct_array_080053a0();\n  }\n  if (input_data_ptr == PTR_DAT_08004c90) {\n    input_data_ptr = *(undefined **)(struct_ptr + 4);\n  }\n  else if (input_data_ptr == PTR_DAT_08004c98) {\n    input_data_ptr = *(undefined **)(struct_ptr + 8);\n  }\n  else if (input_data_ptr == PTR_DAT_08004c9c) {\n    input_data_ptr = *(undefined **)(struct_ptr + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(input_data_ptr + 0xc) << 0x1c)) || (*(int *)(input_data_ptr + 0x10) == 0)) &&\n     (int_val_1 = process_data_080050d0(struct_ptr,input_data_ptr), int_val_1 != 0)) {\n    return -1;\n  }\n  int_val_4 = 0;\n  undefined_val_1 = 0x20;\n  undefined_val_2 = 0x30;\n  byte_ptr_1 = output_buffer_ptr;\nLAB_08004ac6:\n  byte_ptr_2 = byte_ptr_1;\n  if (*byte_ptr_2 != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  byte_ptr_1 = byte_ptr_2 + 1;\n  if (*byte_ptr_2 != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  int_val_1 = (int)byte_ptr_2 - (int)output_buffer_ptr;\n  if (int_val_1 != 0) {\n    result = process_input_08004a60(struct_ptr,input_data_ptr,output_buffer_ptr,int_val_1);\n    if (result == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(input_data_ptr + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return int_val_4;\n    }\n    int_val_4 = int_val_4 + int_val_1;\n  }\n  if (*byte_ptr_2 == 0) goto LAB_08004c70;\n  uint_val_1 = 0;\n  int_val_3 = 0;\n  int_val_2 = -1;\n  undefined4_val = 0;\n  undefined_val_3 = 0;\n  undefined4_val_2 = 0;\n  byte_ptr_1 = byte_ptr_2 + 1;\n  while( true ) {\n    int_val_1 = find_byte_sequence_08000230(PTR_s___0__08004c94,*byte_ptr_1);\n    byte_seq_ptr = PTR_DAT_08004ca0;\n    output_buffer_ptr = byte_ptr_1 + 1;\n    if (int_val_1 == 0) break;\n    uint_val_1 = 1 << (int_val_1 - (int)PTR_s___0__08004c94 & 0xffU) | uint_val_1;\n    byte_ptr_1 = output_buffer_ptr;\n  }\n  if ((int)(uint_val_1 << 0x1b) < 0) {\n    undefined_val_3 = 0x20;\n  }\n  if ((int)(uint_val_1 << 0x1c) < 0) {\n    undefined_val_3 = 0x2b;\n  }\n  if (*byte_ptr_1 == 0x2a) {\n    int_ptr = int_array + 1;\n    int_val_1 = *int_array;\n    int_array = int_ptr;\n    if (-1 < int_val_1) goto LAB_08004ba0;\n    int_val_3 = -int_val_1;\n    uint_val_1 = uint_val_1 | 2;\n  }\n  else {\n    bool_val = false;\n    int_val_1 = int_val_3;\n    output_buffer_ptr = byte_ptr_1;\n    while( true ) {\n      if (9 < *output_buffer_ptr - 0x30) break;\n      int_val_1 = int_val_1 * 10 + (*output_buffer_ptr - 0x30);\n      bool_val = true;\n      output_buffer_ptr = output_buffer_ptr + 1;\n    }\n    if (bool_val) {\nLAB_08004ba0:\n      int_val_3 = int_val_1;\n    }\n  }\n  if (*output_buffer_ptr == 0x2e) {\n    if (output_buffer_ptr[1] == 0x2a) {\n      int_val_2 = *int_array;\n      if (int_val_2 < 0) {\n        int_val_2 = -1;\n      }\n      output_buffer_ptr = output_buffer_ptr + 2;\n      int_array = int_array + 1;\n    }\n    else {\n      bool_val = false;\n      int_val_2 = 0;\n      int_val_1 = 0;\n      while( true ) {\n        output_buffer_ptr = output_buffer_ptr + 1;\n        if (9 < *output_buffer_ptr - 0x30) break;\n        int_val_1 = int_val_1 * 10 + (*output_buffer_ptr - 0x30);\n        bool_val = true;\n      }\n      if (bool_val) {\n        int_val_2 = int_val_1;\n      }\n    }\n  }\n  int_val_1 = find_byte_sequence_08000230(PTR_DAT_08004ca0,*output_buffer_ptr,3);\n  if (int_val_1 != 0) {\n    uint_val_1 = uint_val_1 | 0x40 << (int_val_1 - (int)byte_seq_ptr & 0xffU);\n    output_buffer_ptr = output_buffer_ptr + 1;\n  }\n  byte_val_1 = *output_buffer_ptr;\n  output_buffer_ptr = output_buffer_ptr + 1;\n  int_val_1 = find_byte_sequence_08000230(PTR_s_efgEFG_08004ca4,byte_val_1,6);\n  if (int_val_1 == 0) {\n    int_val_1 = convert_and_copy_string_08004d9c(struct_ptr,&uint_val_1,input_data_ptr,DAT_08004cac,&int_array);\n  }\n  else {\n    int_val_1 = struct_ptr;\n    if (DAT_08004ca8 == 0) {\n      int_array = (int *)(((int)int_array + 7U & 0xfffffff8) + 8);\n      int_val_1 = unaff_r9_val;\n      goto LAB_08004c22;\n    }\n  }\n  if (int_val_1 == -1) goto LAB_08004c70;\nLAB_08004c22:\n  int_val_4 = int_val_4 + int_val_1;\n  byte_ptr_1 = output_buffer_ptr;\n  unaff_r9_val = int_val_1;\n  goto LAB_08004ac6;\n}\n\n",
            "called": [
                "FUN_080053a0",
                "FUN_08004d9c",
                "FUN_080050d0",
                "FUN_08004a60",
                "FUN_08000230"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a84",
            "calling": [
                "FUN_08004fdc",
                "FUN_08004860"
            ],
            "imported": false,
            "current_name": "process_input_and_output_08004a84"
        },
        "FUN_08005608": {
            "renaming": {
                "FUN_08005608": "processResult_08005608",
                "param_1": "result",
                "param_2": "data",
                "iVar1": "processValue",
                "uVar2": "updatedValue",
                "bVar3": "isProcessValuePositive"
            },
            "code": "void processResult_08005608(int result, int* data){\n\tint processValue = processReturnValue(param_1, (int)*(short *)(data + 0xe));\n\tbool isProcessValuePositive = processValue >= 0;\n\tuint updatedValue;\n\tif(isProcessValuePositive){\n\t\tupdatedValue = *(int *)(data + 0x54) + processValue;\n\t}\n\telse{\n\t\tupdatedValue = *(ushort *)(data + 0xc) & 0xffffefff;\n\t}\n\tif(isProcessValuePositive){\n\t\t*(uint *)(data + 0x54) = updatedValue;\n\t}\n\tif(!isProcessValuePositive){\n\t\t*(short *)(data + 0xc) = (short)updatedValue;\n\t}\n}",
            "called": [
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005608",
            "calling": [],
            "imported": false,
            "current_name": "processResult_08005608"
        },
        "FUN_08002efa": {
            "renaming": {
                "FUN_08002efa": "validate_input_08002efa",
                "param_1": "input_array",
                "param_2": "array_size",
                "param_3": "param_3",
                "*(char *)((int)param_1 + 0x3a)": "input_array[10]",
                "*(char *)(param_1 + 0xe)": "input_array[14]",
                "*(short *)(param_1 + 0xb)": "input_array[11]",
                "*(short *)((int)param_1 + 0x2e)": "input_array[12]",
                "param_1[10]": "input_array[10]",
                "param_1[0xf]": "input_array[15]",
                "*(undefined *)((int)param_1 + 0x3a)": "input_array[16]",
                "*(undefined *)(param_1 + 0xe)": "input_array[14]",
                "*(uint *)(*param_1 + 0x14)": "*(unsigned int *)(*input_array + 20)",
                "*(uint *)(*param_1 + 0xc)": "*(unsigned int *)(*input_array + 12)"
            },
            "code": "int validate_input_08002efa(int *input_array, int array_size, int param_3)\n{\n    if (input_array[10] != ' ')\n    {\n        return 2;\n    }\n    if (array_size == 0)\n    {\n        return 1;\n    }\n    if (param_3 == 0)\n    {\n        return 1;\n    }\n    if (input_array[14] != 1)\n    {\n        input_array[10] = array_size;\n        input_array[11] = (short)param_3;\n        input_array[15] = 0;\n        input_array[16] = 34;\n        input_array[14] = 0;\n        *(unsigned int *)(*input_array + 20) |= 1;\n        *(unsigned int *)(*input_array + 12) |= 288;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efa",
            "calling": [
                "FUN_08003e54",
                "FUN_08003e18"
            ],
            "imported": false,
            "current_name": "validate_input_08002efa"
        },
        "FUN_0800268c": {
            "renaming": {
                "FUN_0800268c": "do_nothing_0800268c"
            },
            "code": "\nvoid do_nothing_0800268c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268c",
            "calling": [
                "FUN_0800262c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800268c"
        },
        "FUN_08001aac": {
            "renaming": {
                "FUN_08001aac": "do_nothing_08001aac"
            },
            "code": "\nvoid do_nothing_08001aac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001aac",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "do_nothing_08001aac"
        },
        "FUN_0800377c": {
            "renaming": {
                "FUN_0800377c": "check_flags_0800377c",
                "PTR_DAT_08003794": "ptr_dat_08003794",
                "process_flags_080026ce": "process_flags",
                "PTR_DAT_08003794 + 0x24": "ptr_dat_080037b8"
            },
            "code": "void check_flags_0800377c() {\n  int* PTR_DAT_08003794 = (int*)PTR_DAT_08003794;\n  if (*PTR_DAT_08003794 != 0) {\n    process_flags_080026ce();\n  }\n  int* PTR_DAT_08003794 + 0x24 = (int*)(PTR_DAT_08003794 + 0x24);\n  if (*PTR_DAT_08003794 + 0x24 != 0) {\n    process_flags_080026ce();\n  }\n  return;\n}",
            "called": [
                "FUN_080026ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800377c",
            "calling": [],
            "imported": false,
            "current_name": "check_flags_0800377c"
        },
        "FUN_0800268e": {
            "renaming": {
                "FUN_0800268e": "set_bits_according_to_input_0800268e",
                "param_1": "input_array",
                "puVar1": "input_ptr"
            },
            "code": "void set_bits_according_to_input_0800268e(uint **input_array){\n uint *input_ptr;\n input_array[0][0x39] = 2;\n input_ptr = *input_array;\n if ((input_ptr[8] & 0x1111) == 0) {\n    if ((input_ptr[8] & 0x444) == 0) {\n      *input_ptr = *input_ptr & 0xfffffffe;\n    }\n  }\n set_bits_according_to_input_0800268e_0800340c(input_array);\n input_array[0][0x39] = 0;\n input_array[0][0x38] = 0;\n return;\n}",
            "called": [
                "FUN_0800340c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800268e",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "set_bits_according_to_input_0800268e"
        },
        "FUN_080008e2": {
            "renaming": {
                "FUN_080008e2": "combine_and_update_values_080008e2",
                "param_1": "data_ptr",
                "param_2": "data_ptr2",
                "param_3": "val1",
                "param_4": "val2",
                "iVar1": "combined_val",
                "uVar2": "num_values",
                "cVar5": "bit",
                "iVar6": "byte_ptr",
                "uVar3": "i",
                "uVar4": "bit_pos",
                "pos": "position",
                "value": "data_value"
            },
            "code": "int combine_and_update_values_080008e2(int data_ptr, int data_ptr2, int val1, int val2, int val3) {\n  \n  int combined_val = combine_values(*(undefined *)(data_ptr + 0xb), *(undefined *)(data_ptr + 0xc), val1, val2, val3);\n  \n  uint32_t num_values = combine_values(*(undefined *)(data_ptr + 0xd), *(undefined *)(data_ptr + 0xe));\n  \n  char bit = (char)((num_values << 0x15) >> 0x18);\n  \n  if ((num_values & 7) != 0) {\n    \n    bit++;\n  \n  }\n  \n  *(char *)(data_ptr + 0xb) = bit;\n  \n  *(undefined *)(data_ptr + 0x49) = 3;\n  \n  uint32_t bit_pos = 0;\n  \n  for (uint32_t i = 0; i < num_values; i++) {\n    \n    uint32_t pos = ((i + combined_val) * 0x100000 >> 0x18) * 2;\n    \n    uint16_t value = *(ushort *)(data_ptr2 + pos);\n    \n    uint32_t bit_val = ((uint32_t)value >> (i + combined_val & 0xf)) & 1U;\n    \n    uint32_t byte_ptr = (uint32_t)*(byte *)(data_ptr + 0x49) + data_ptr;\n    \n    if (bit_val == 0) {\n      \n      *(byte *)(byte_ptr + 9) &= ~(byte)(1 << bit_pos);\n    \n    }\n    \n    else {\n      \n      *(byte *)(byte_ptr + 9) |= (byte)(1 << bit_pos);\n    \n    }\n    \n    bit_pos++;\n    \n    if (bit_pos > 7) {\n      \n      *(char *)(data_ptr + 0x49)++;\n      \n      bit_pos = 0;\n    \n    }\n  \n  }\n  \n  if ((num_values & 7) != 0) {\n    \n    *(char *)(data_ptr + 0x49)++;\n  \n  }\n  \n  bit = *(char *)(data_ptr + 0x49);\n  \n  calculate_and_update_crc(data_ptr);\n  \n  return (int)(char)(bit + 0x02);\n\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008e2",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "combine_and_update_values_080008e2"
        },
        "FUN_080045c8": {
            "renaming": {
                "FUN_080045c8": "convert_base_080045c8",
                "param_1": "input_number",
                "param_2": "input_base",
                "param_3": "output_base",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "output_digits",
                "cVar1": "current_digit",
                "local_15": "unused_buffer"
            },
            "code": "int convert_base_080045c8(int *input_number, uint input_base, uint output_base) {\n  char current_digit;\n  int output_number = 0;\n  if ((int)output_base < 2) {\n    output_base = 10;\n  }\n  char *output_digits = malloc(sizeof(char) * 33);\n  output_digits[32] = '\\0';\n  do {\n    int quotient = input_number / output_base;\n    int remainder = input_number % output_base;\n    input_number = quotient;\n    if (remainder < 10) {\n      current_digit = remainder + '0';\n    }\n    else {\n      current_digit = remainder + '7';\n    }\n    output_digits[--i] = current_digit;\n  } while (input_number != 0);\n  int output_length = strlen(output_digits + i);\n  char *output_string = malloc(sizeof(char) * (output_length + 1));\n  strncpy(output_string, output_digits + i, output_length);\n  output_string[output_length] = '\\0';\n  free(output_digits);\n  int result = (**(code **)(*input_number + 4))(input_number, output_string, output_length);\n  free(output_string);\n  return result;\n}",
            "called": [
                "FUN_08000218"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045c8",
            "calling": [
                "FUN_08004622"
            ],
            "imported": false,
            "current_name": "convert_base_080045c8"
        },
        "FUN_08003d18": {
            "renaming": {
                "FUN_08003d18": "find_and_process_data_08003d18",
                "param_1": "input1",
                "param_2": "input2",
                "sVar1": "value2",
                "iVar2": "value1",
                "iVar3": "value3",
                "uVar4": "index"
            },
            "code": "uint find_and_process_data_08003d18(uint input1, uint input2)\n{\n  uint value1 = get_value_from_pointer();\n  short value2 = *(short *)(PTR_DAT_08003dc0 + 0x9a);\n  int value3 = find_value(value2, PTR_DAT_08003dc4);\n  if (value3 == 0) {\n    return 0;\n  }\n  uint index = 0;\n  while ((index < 10 && ((*(int *)(PTR_DAT_08003dc8 + index * 4) == 0 || (value3 = find_value(value2, PTR_DAT_08003dc4), **(int **)(PTR_DAT_08003dc8 + index * 4) != value3))))) {\n    index = index + 1 & 0xff;\n  }\n  if (9 < index) {\n    if ((9 < (byte)PTR_DAT_08003dcc[0x44]) && (update_data(), 9 < (byte)PTR_DAT_08003dcc[0x44])) {\n      return 0;\n    }\n    index = (uint)(byte)PTR_DAT_08003dcc[0x44];\n  }\n  do {\n    value3 = process_data(*(undefined4 *)(PTR_DAT_08003dc8 + index * 4), input1, input2 & 0xffff, 1000);\n    if (value3 == 0) {\n      return input2;\n    }\n    value3 = get_value_from_pointer();\n  } while ((uint)(value3 - value1) < 1000);\n  return 0;\n}",
            "called": [
                "FUN_08000e30",
                "FUN_080034f4",
                "FUN_08003cc8",
                "FUN_08002dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003d18",
            "calling": [
                "FUN_080040ec"
            ],
            "imported": false,
            "current_name": "find_and_process_data_08003d18"
        },
        "FUN_08004640": {
            "renaming": {
                "FUN_08004640": "combine_values_08004640",
                "param_1": "value1",
                "param_2": "value2"
            },
            "code": "uint combine_values_08004640(int value1, uint value2)\n{\n    return value2 | value1 << 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004640",
            "calling": [
                "FUN_08000a7a",
                "FUN_080008e2",
                "FUN_08000a4e",
                "FUN_08000b04",
                "FUN_080007f0",
                "FUN_08000a00",
                "FUN_08000998"
            ],
            "imported": false,
            "current_name": "combine_values_08004640"
        },
        "FUN_080034ce": {
            "renaming": {
                "FUN_080034ce": "set_flags_080034ce",
                "set_flags_and_values_08000de4": "set_flags_and_values",
                "set_flags_and_values_08000c8c": "set_flags_and_values_2"
            },
            "code": "void set_flags_080034ce(void)\n{\n  set_flags_080034ce_and_values();\n  set_flags_080034ce_and_values_2();\n  return;\n}",
            "called": [
                "FUN_08000de4",
                "FUN_08000c8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080034ce",
            "calling": [
                "FUN_08000d8e"
            ],
            "imported": false,
            "current_name": "set_flags_080034ce"
        },
        "FUN_080047fe": {
            "renaming": {
                "FUN_080047fe": "calculate_result_and_swap_params_080047fe",
                "param_1": "x",
                "param_2": "y",
                "calculate_result_08004844": "calculate_result"
            },
            "code": "void calculate_result_and_swap_params_080047fe(int x, int y)\n{\n  calculate_result(y, x);\n  return;\n}",
            "called": [
                "FUN_08004844"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047fe",
            "calling": [
                "FUN_080046b4"
            ],
            "imported": false,
            "current_name": "calculate_result_and_swap_params_080047fe"
        },
        "FUN_08001256": {
            "renaming": {
                "FUN_08001256": "process_input_08001256",
                "param_1": "input",
                "puVar1": "p1",
                "*(char *)((int)param_1 + 0x3d)": "input_char_1",
                "param_1[0x14]": "input_ptr_1",
                "*(char *)((int)param_1 + 0x3e)": "input_char_2",
                "param_1[4]": "input_ptr_2",
                "*(short *)((int)param_1 + 0x2a)": "short_val"
            },
            "code": "uint32_t process_input_08001256(uint32_t **input)\n{\n    uint32_t *p1;\n    p1 = input[11];\n    if ((*(char *)((int)input + 0x3d) == '\"') && ((input[20] != (uint32_t *)0x0 || (*(char *)((int)input + 0x3e) != '@')))) {\n        if ((input[20] == (uint32_t *)0x0) && (input[4] == (uint32_t *)0xc000)) {\n            **input = **input | 0x100;\n            input[20] = (uint32_t *)((int)input[20] + 1);\n        }\n        else {\n            uint32_t short_val = *(uint16_t *)((int)input + 0x2a);\n            if (short_val == 0) {\n                **input = **input | 0x200;\n            }\n            else if (short_val == 1) {\n                if (p1 == (uint32_t *)0xffff0000) {\n                    **input = **input & 0xfffffbff;\n                    p1 = *input;\n                    if ((p1[1] & 0x800) == 0) {\n                        *p1 = *p1 | 0x200;\n                    }\n                    else {\n                        *p1 = *p1 & 0xfffffbff;\n                    }\n                }\n                else if (((p1 == (uint32_t *)0x4) || (p1 == (uint32_t *)0x8)) || (input[12] == (uint32_t *)0x12)) {\n                    **input = **input & 0xfffffbff;\n                    **input = **input | 0x200;\n                }\n                else if (input[11] == (uint32_t *)0x2) {\n                    **input = **input | 0x400;\n                }\n                else {\n                    **input = **input & 0xfffffbff;\n                }\n            }\n            else if (short_val == 2) {\n                if (input[11] == (uint32_t *)0x2) {\n                    **input = **input | 0x400;\n                }\n                else {\n                    **input = **input & 0xfffffbff;\n                    **input = **input | 0x800;\n                }\n                p1 = *input;\n                if ((p1[1] & 0x800) != 0) {\n                    p1[1] = p1[1] | 0x1000;\n                }\n            }\n            else {\n                **input = **input | 0x400;\n                p1 = *input;\n                if ((p1[1] & 0x800) != 0) {\n                    p1[1] = p1[1] | 0x1000;\n                }\n            }\n            input[20] = (uint32_t *)0x0;\n        }\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001256",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_08001256"
        },
        "FUN_08004884": {
            "renaming": {
                "FUN_08004884": "run_functions_08004884",
                "puVar1": "startPtr",
                "puVar2": "endPtr",
                "puVar3": "currentPtr",
                "iVar4": "numFunctions",
                "iVar5": "i"
            },
            "code": "void run_functions_08004884(void)\n{\n  undefined *startPtr;\n  undefined *endPtr;\n  undefined *currentPtr;\n  int numFunctions;\n  int i;\n\n  startPtr = PTR_DAT_080048bc;\n  endPtr = PTR_DAT_080048c0;\n  numFunctions = (int)endPtr - (int)startPtr;\n  numFunctions /= 4;\n\n  for (i = 0; i < numFunctions; i++) {\n    (**(code **)(startPtr + i * 4))();\n  }\n\n  do_nothing_080059f8();\n\n  startPtr = PTR_DAT_080048c4;\n  endPtr = PTR_DAT_080048c8;\n  numFunctions = (int)endPtr - (int)startPtr;\n  numFunctions /= 4;\n\n  for (i = 0; i < numFunctions; i++) {\n    (**(code **)(startPtr + i * 4))();\n  }\n\n  return;\n}",
            "called": [
                "FUN_080059f8",
                "FUN_08004648"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "FUN_08000d3c"
            ],
            "imported": false,
            "current_name": "run_functions_08004884"
        },
        "FUN_08004648": {
            "renaming": {
                "FUN_08004648": "set_value_of_address_to_3_08004648",
                "set_uint_at_address_08000e3c": "set_uint_at_address",
                "set_flags_before_function_call_08000d8e": "set_flags_before_function_call"
            },
            "code": "void set_value_of_address_to_3_08004648(void)\n{\n  set_uint_at_address_08000e3c(3);\n  set_flags_before_function_call();\n  return;\n}",
            "called": [
                "FUN_08000e3c",
                "FUN_08000d8e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004648",
            "calling": [
                "FUN_08004884"
            ],
            "imported": false,
            "current_name": "set_value_of_address_to_3_08004648"
        },
        "FUN_08000600": {
            "renaming": {
                "FUN_08000600": "update_device_status_08000600",
                "param_1": "device",
                "param_2": "status",
                "cVar1": "device_type",
                "PTR_DAT_08000668": "device_data",
                "set_data_08004388": "set_device_data",
                "checkAndUpdateDeviceStatus_08004110": "check_and_update_device_status",
                "decode_data_080041bc": "decode_device_data",
                "iVar2": "result"
            },
            "code": "void update_device_status_08000600(int **device, undefined4 status) {\n  char device_type = *(char *)((int)device + 5);\n  if (device_type == '\\x02' || device_type == '\\x03' || device_type == '\\x01') {\n    *device = (int *)PTR_DAT_08000668;\n  }\n  else {\n    *device = (int *)PTR_DAT_08000668;\n  }\n  set_PTR_DAT_08000668(*device, status, 6);\n  if (*(byte *)((int)device + 6) > 1) {\n    check_and_update_device_status_08000600(*(byte *)((int)device + 6), 1);\n    decode_PTR_DAT_08000668(*(undefined *)((int)device + 6), 0);\n  }\n  do {\n    int result = (**(code **)(**device + 0xc))();\n  } while (result >= -1);\n  *(undefined *)((int)device + 0x49) = 0;\n  *(undefined *)((int)device + 0x4a) = 0;\n  *(undefined2 *)(device + 0x15) = 0;\n  *(undefined2 *)((int)device + 0x52) = 0;\n  *(undefined2 *)(device + 0x14) = 0;\n  return;\n}",
            "called": [
                "FUN_080041bc",
                "FUN_08004388",
                "FUN_08004110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000600",
            "calling": [
                "FUN_08000c4c"
            ],
            "imported": false,
            "current_name": "update_device_status_08000600"
        },
        "FUN_080045be": {
            "renaming": {
                "FUN_080045be": "call_function_pointer_080045be",
                "param_1": "function_pointer"
            },
            "code": "void call_function_pointer_080045be(void* function_pointer){\n  (*(void(*)())function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045be",
            "calling": [],
            "imported": false,
            "current_name": "call_function_pointer_080045be"
        },
        "FUN_08004646": {
            "renaming": {
                "FUN_08004646": "do_nothing_08004646"
            },
            "code": "\nvoid do_nothing_08004646(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004646",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "do_nothing_08004646"
        },
        "FUN_08000728": {
            "renaming": {
                "FUN_08000728": "calculate_crc16_ccitt_08000728",
                "param_1": "data_address",
                "param_2": "data_length",
                "uVar2": "crc",
                "uVar3": "crc_bit",
                "uVar4": "i",
                "bVar1": "j"
            },
            "code": "uint calculate_crc16_ccitt_08000728(int data_address, int data_length) {\n  byte current_byte;\n  uint crc = 0xffff;\n  for (uint i = 0; i < data_length; i++) {\n    current_byte = *(byte *)(data_address + i + 9);\n    crc = crc ^ current_byte;\n    for (byte j = 1; j < 9; j++) {\n      if (crc & 1) {\n        crc = (crc >> 1) ^ 0xa001;\n      } else {\n        crc = crc >> 1;\n      }\n    }\n  }\n  return (crc & 0xff) << 8 | crc >> 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000728",
            "calling": [
                "FUN_0800076c"
            ],
            "imported": false,
            "current_name": "calculate_crc16_ccitt_08000728"
        },
        "FUN_0800354a": {
            "renaming": {
                "FUN_0800354a": "find_value_or_negative_one_0800354a",
                "param_1": "value",
                "uVar1": "result",
                "find_value_in_array_0800352e": "find_value_in_array"
            },
            "code": "int find_value_or_negative_one_0800354a(int value)\n{\n    int result = -1;\n    if (value != -1)\n    {\n        result = find_value_in_array_0800352e();\n    }\n    return result;\n}",
            "called": [
                "FUN_0800352e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800354a",
            "calling": [
                "FUN_0800339c",
                "FUN_08003380",
                "FUN_08003414",
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "find_value_or_negative_one_0800354a"
        },
        "FUN_0800124a": {
            "renaming": {
                "FUN_0800124a": "set_param_value_0800124a",
                "param_1": "param_array",
                "*param_1": "*param_array",
                "*(uint *)(*param_1 + 0x10)": "*param_pointer",
                "param_1[0x11]": "param_value",
                "0xff": "0xff",
                "return 0;": "return 0;"
            },
            "code": "int set_param_value_0800124a(int *param_array){\n    int param_index = 0x11;\n    int *param_pointer = param_array + 0x10;\n    int param_value = param_array[param_index] & 0xff;\n    *param_pointer = param_value;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800124a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "set_param_value_0800124a"
        },
        "FUN_08004094": {
            "renaming": {
                "FUN_08004094": "findOffset_08004094",
                "param_1": "offset",
                "iVar1": "currentOffset",
                "puVar2": "stackPointer",
                "PTR_DAT_080040c4": "globalPointer",
                "PTR_DAT_080040c8": "initialPointer",
                "PTR_DAT_080040cc": "errorFlag",
                "&stack0x00000000": "&stackStart"
            },
            "code": "int findOffset_08004094(int offset)\n{\n  int currentOffset;\n  undefined *stackPointer;\n  \n  if (*(int *)PTR_DAT_080040c4 == 0) {\n    *(undefined **)PTR_DAT_080040c4 = PTR_DAT_080040c8;\n  }\n  currentOffset = *(int *)PTR_DAT_080040c4;\n  stackPointer = (undefined *)(offset + currentOffset);\n  if (stackPointer <= &stackStart) {\n    *(undefined **)PTR_DAT_080040c4 = stackPointer;\n    return currentOffset;\n  }\n  *(undefined4 *)PTR_DAT_080040cc = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004094",
            "calling": [
                "FUN_0800500c"
            ],
            "imported": false,
            "current_name": "findOffset_08004094"
        },
        "FUN_080033c8": {
            "renaming": {
                "FUN_080033c8": "clear_bit_in_address_080033c8",
                "DAT_080033d4": "address_data",
                "PTR_": "",
                "uint": "uint32_t",
                "address_ptr": "address_pointer",
                "mask": "bit_mask"
            },
            "code": "void clear_bit_in_address_080033c8(void)\n{\n  uint32_t *address_ptr = (uint32_t *)(DAT_080033d4 + 0x40);\n  uint32_t mask = 0xdfffffff;\n  *address_ptr &= mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033c8",
            "calling": [
                "FUN_08000f56"
            ],
            "imported": false,
            "current_name": "clear_bit_in_address_080033c8"
        },
        "FUN_080031fc": {
            "renaming": {
                "FUN_080031fc": "set_flag_080031fc",
                "param_1": "flag",
                "uVar1": "return_value",
                "DAT_08003350": "ptr_data",
                "DAT_08003354": "flag_0",
                "DAT_08003358": "flag_1",
                "DAT_0800335c": "flag_2",
                "DAT_08003360": "flag_3",
                "DAT_08003364": "flag_4",
                "DAT_08003368": "flag_5",
                "DAT_0800336c": "flag_6",
                "DAT_08003370": "flag_7",
                "DAT_08003374": "flag_8",
                "DAT_08003378": "flag_9",
                "DAT_0800337c": "flag_10"
            },
            "code": "uint32_t set_flag_080031fc(uint32_t flag){\n    uint32_t* ptr = (uint32_t*)(DAT_08003350 + 0x30);\n    switch(flag) {\n        case 0:\n            *ptr |= 1;\n            return DAT_08003354;\n        case 1:\n            *ptr |= 2;\n            return DAT_08003358;\n        case 2:\n            *ptr |= 4;\n            return DAT_0800335c;\n        case 3:\n            *ptr |= 8;\n            return DAT_08003360;\n        case 4:\n            *ptr |= 0x10;\n            return DAT_08003364;\n        case 5:\n            *ptr |= 0x20;\n            return DAT_08003368;\n        case 6:\n            *ptr |= 0x40;\n            return DAT_0800336c;\n        case 7:\n            *ptr |= 0x80;\n            return DAT_08003370;\n        case 8:\n            *ptr |= 0x100;\n            return DAT_08003374;\n        case 9:\n            *ptr |= 0x200;\n            return DAT_08003378;\n        case 10:\n            *ptr |= 0x400;\n            return DAT_0800337c;\n        default:\n            return 0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080031fc",
            "calling": [
                "FUN_08003486",
                "FUN_08003978"
            ],
            "imported": false,
            "current_name": "set_flag_080031fc"
        },
        "FUN_08000690": {
            "renaming": {
                "FUN_08000690": "check_param_and_set_data_08000690",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "code": "void check_param_and_set_data_08000690(int param1, int param2, undefined4 param3, undefined4 param4) {\n    if (param1 != 1) {\n        return;\n    }\n    if (param2 == 0xffff) {\n        set_data_and_return_param_08000682(PTR_DAT_080006b0, 1, 0, 0, param4);\n    }\n    return;\n}",
            "called": [
                "FUN_08000682"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000690",
            "calling": [],
            "imported": false,
            "current_name": "check_param_and_set_data_08000690"
        },
        "FUN_080054fc": {
            "renaming": {
                "FUN_080054fc": "process_input_080054fc",
                "param_1": "process_id",
                "param_2": "process_info",
                "uVar1": "flag",
                "iVar2": "allocation_result",
                "local_18": "permissions",
                "local_14": "local_process_info"
            },
            "code": "void process_input_080054fc(int process_id, int *process_info) {\n    ushort flag;\n    int allocation_result;\n    int permissions;\n    int *local_process_info;\n    \n    if (-1 < (int)((uint)*(ushort *)(process_info + 3) << 0x1e)) {\n        permissions = process_id;\n        local_process_info = process_info;\n        flag = check_permissions_and_set_flag(process_id, process_info, &permissions, &local_process_info);\n        allocation_result = allocate_and_set(process_id, permissions);\n        if (allocation_result != 0) {\n            *(undefined **)(process_id + 0x28) = PTR_LAB_08005320_1_08005578;\n            *process_info = allocation_result;\n            *(ushort *)(process_info + 3) = *(ushort *)(process_info + 3) | 0x80;\n            process_info[5] = permissions;\n            process_info[4] = allocation_result;\n            if ((local_process_info != (int *)0x0) && (process_input_080054fc(process_id, (int)*(short *)((int)process_info + 0xe)) != 0)) {\n                *(ushort *)(process_info + 3) = *(ushort *)(process_info + 3) & 0xfffc | 1;\n            }\n            *(ushort *)(process_info + 3) = flag | *(ushort *)(process_info + 3);\n            return;\n        }\n        if ((int)(short)*(ushort *)(process_info + 3) << 0x16 < 0) {\n            return;\n        }\n        *(ushort *)(process_info + 3) = *(ushort *)(process_info + 3) & 0xfffc | 2;\n    }\n    *process_info = (int)process_info + 0x47;\n    process_info[4] = (int)process_info + 0x47;\n    process_info[5] = 1;\n    return;\n}",
            "called": [
                "FUN_080056f8",
                "FUN_080054b4",
                "FUN_08004978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054fc",
            "calling": [
                "FUN_080050d0"
            ],
            "imported": false,
            "current_name": "process_input_080054fc"
        },
        "FUN_08001420": {
            "renaming": {
                "FUN_08001420": "increment_value_if_not_zero_08001420",
                "param_1": "param_array",
                "pbVar1": "byte_ptr",
                "short_ptr": "short_ptr",
                "int_ptr": "int_ptr",
                "*param_1": "*int_ptr",
                "*(short *)((int)param_1 + 0x2a)": "*short_ptr",
                "*(uint *)(*param_1 + 0x10)": "*int_ptr + 0x10"
            },
            "code": "int increment_value_if_not_zero_08001420(int *param_array){\n  short *short_ptr = (short *)(param_array + 0x2a);\n  int *int_ptr = (int *)(*param_array);\n  if (*short_ptr != 0) {\n    byte *byte_ptr = (byte *)(param_array[9]);\n    param_array[9] = (int)(byte_ptr + 1);\n    *int_ptr + 0x10 = (uint)*byte_ptr;\n    *short_ptr = *short_ptr - 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001420",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "increment_value_if_not_zero_08001420"
        },
        "FUN_080026ca": {
            "renaming": {
                "FUN_080026ca": "do_nothing_080026ca"
            },
            "code": "\nvoid do_nothing_080026ca(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ca",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026ca"
        },
        "FUN_08000de4": {
            "renaming": {
                "FUN_08000de4": "set_flags_and_values_08000de4",
                "puVar1": "flag1_ptr"
            },
            "code": "int set_flags_and_values_08000de4(){\n  uint *flag1_ptr;\n  flag1_ptr = DAT_08000e14;\n  *DAT_08000e14 |= 0x200;\n  *flag1_ptr |= 0x400;\n  *flag1_ptr |= 0x100;\n  set_uint_at_address_08000e3c(3);\n  check_and_set_input_08000d98(0xf);\n  do_nothing_08000d96();\n  return 0;\n}",
            "called": [
                "FUN_08000d96",
                "FUN_08000e3c",
                "FUN_08000d98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000de4",
            "calling": [
                "FUN_080034ce"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_08000de4"
        },
        "FUN_080026ce": {
            "renaming": {
                "FUN_080026ce": "process_flags_080026ce",
                "param_1": "flag_array",
                "iVar1": "flag_value"
            },
            "code": "void process_flags_080026ce(int *flag_array)\n{\n    int flag_value;\n    \n    flag_value = *flag_array;\n    if (((*(uint *)(flag_value + 0x10) & 2) != 0) && ((*(uint *)(flag_value + 0xc) & 2) != 0)) {\n        *(undefined4 *)(flag_value + 0x10) = 0xfffffffd;\n        *(undefined *)(flag_array + 6) = 1;\n        if ((*(uint *)(*flag_array + 0x18) & 3) == 0) {\n            execute_callback_08003754();\n            do_nothing_080026ca(flag_array);\n        }\n        else {\n            do_nothing_080026c8();\n        }\n        *(undefined *)(flag_array + 6) = 0;\n    }\n    flag_value = *flag_array;\n    if (((*(uint *)(flag_value + 0x10) & 4) != 0) && ((*(uint *)(flag_value + 0xc) & 4) != 0)) {\n        *(undefined4 *)(flag_value + 0x10) = 0xfffffffb;\n        *(undefined *)(flag_array + 6) = 2;\n        if ((*(uint *)(*flag_array + 0x18) & 0x300) == 0) {\n            execute_callback_08003754(flag_array);\n            do_nothing_080026ca(flag_array);\n        }\n        else {\n            do_nothing_080026c8(flag_array);\n        }\n        *(undefined *)(flag_array + 6) = 0;\n    }\n    flag_value = *flag_array;\n    if (((*(uint *)(flag_value + 0x10) & 8) != 0) && ((*(uint *)(flag_value + 0xc) & 8) != 0)) {\n        *(undefined4 *)(flag_value + 0x10) = 0xfffffff7;\n        *(undefined *)(flag_array + 6) = 4;\n        if ((*(uint *)(*flag_array + 0x1c) & 3) == 0) {\n            execute_callback_08003754(flag_array);\n            do_nothing_080026ca(flag_array);\n        }\n        else {\n            do_nothing_080026c8(flag_array);\n        }\n        *(undefined *)(flag_array + 6) = 0;\n    }\n    flag_value = *flag_array;\n    if (((*(uint *)(flag_value + 0x10) & 0x10) != 0) && ((*(uint *)(flag_value + 0xc) & 0x10) != 0)) {\n        *(undefined4 *)(flag_value + 0x10) = 0xffffffef;\n        *(undefined *)(flag_array + 6) = 8;\n        if ((*(uint *)(*flag_array + 0x1c) & 0x300) == 0) {\n            execute_callback_08003754(flag_array);\n            do_nothing_080026ca(flag_array);\n        }\n        else {\n            do_nothing_080026c8(flag_array);\n        }\n        *(undefined *)(flag_array + 6) = 0;\n    }\n    flag_value = *flag_array;\n    if (((*(uint *)(flag_value + 0x10) & 1) != 0) && ((*(uint *)(flag_value + 0xc) & 1) != 0)) {\n        *(undefined4 *)(flag_value + 0x10) = 0xfffffffe;\n        execute_callback_if_exists_0800376e(flag_array);\n    }\n    flag_value = *flag_array;\n    if (((*(uint *)(flag_value + 0x10) & 0x80) != 0) && ((*(uint *)(flag_value + 0xc) & 0x80) != 0)) {\n        *(undefined4 *)(flag_value + 0x10) = 0xffffff7f;\n        do_nothing_0800293e(flag_array);\n    }\n    flag_value = *flag_array;\n    if (((*(uint *)(flag_value + 0x10) & 0x40) != 0) && ((*(uint *)(flag_value + 0xc) & 0x40) != 0)) {\n        *(undefined4 *)(flag_value + 0x10) = 0xffffffbf;\n        do_nothing_080026cc(flag_array);\n    }\n    flag_value = *flag_array;\n    if (((*(uint *)(flag_value + 0x10) & 0x20) != 0) && ((*(uint *)(flag_value + 0xc) & 0x20) != 0)) {\n        *(undefined4 *)(flag_value + 0x10) = 0xffffffdf;\n        do_nothing_0800293c(flag_array);\n    }\n    return;\n}",
            "called": [
                "FUN_0800293e",
                "FUN_0800293c",
                "FUN_0800376e",
                "FUN_080026cc",
                "FUN_080026c8",
                "FUN_080026ca",
                "FUN_08003754"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026ce",
            "calling": [
                "FUN_0800377c"
            ],
            "imported": false,
            "current_name": "process_flags_080026ce"
        },
        "FUN_080026cc": {
            "renaming": {
                "FUN_080026cc": "do_nothing_080026cc"
            },
            "code": "\nvoid do_nothing_080026cc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026cc",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026cc"
        },
        "FUN_08000218": {
            "renaming": {
                "FUN_08000218": "find_string_end_08000218",
                "param_1": "str",
                "pcVar2": "current_char",
                "pcVar3": "str_ptr",
                "cVar1": "current_char_value"
            },
            "code": "char* find_string_end_08000218(char* str) {\n    char* current_char = str;\n    while (*current_char != \"\\0\") {\n        current_char++;\n    }\n    return current_char;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000218",
            "calling": [
                "FUN_080045c8"
            ],
            "imported": false,
            "current_name": "find_string_end_08000218"
        },
        "FUN_0800339c": {
            "renaming": {
                "FUN_0800339c": "find_value_0800339c",
                "param_1": "value",
                "param_2": "array",
                "param_3": "size",
                "param_4": "start_index",
                "iVar1": "index",
                "uVar2": "shifted_index"
            },
            "code": "int find_value_0800339c(int value, int* array, int size, int start_index, int end_index) {\n  int index = find_value_0800339c_or_negative_one(value, array, size, start_index, end_index);\n  int shifted_index = (index << 12) >> 27;\n  if (shifted_index == 3) {\n    return 8;\n  }\n  if (shifted_index == 4) {\n    return 12;\n  }\n  if (shifted_index == 2) {\n    return 4;\n  }\n  return 0;\n}",
            "called": [
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800339c",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "find_value_0800339c"
        },
        "FUN_0800557e": {
            "renaming": {
                "FUN_0800557e": "do_nothing_0800557e"
            },
            "code": "\nvoid do_nothing_0800557e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557e",
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "imported": false,
            "current_name": "do_nothing_0800557e"
        },
        "FUN_08000e60": {
            "renaming": {
                "FUN_08000e60": "set_bits_in_byte_08000e60",
                "param_1": "byte_ptr",
                "param_2": "mask",
                "param_3": "value",
                "uVar1": "num_bits_to_shift",
                "uVar2": "num_bits_to_keep",
                "DAT_08000ebc": "data_ptr_1",
                "DAT_08000ec0": "data_ptr_2"
            },
            "code": "void set_bits_in_byte_08000e60(uint8_t *byte_ptr, uint8_t mask, uint8_t value)\n{\n  uint8_t num_bits_to_shift = (uint8_t)(*(int *)(DAT_08000ebc + 0xc) << 0x15) >> 0x1d;\n  uint8_t num_bits_to_keep = 7 - num_bits_to_shift;\n  if (num_bits_to_keep > 4) {\n    num_bits_to_keep = 4;\n  }\n  if (num_bits_to_shift + 4 < 7) {\n    num_bits_to_shift = 0;\n  }\n  else {\n    num_bits_to_shift -= 3;\n  }\n  uint8_t bits_to_set = (mask & (1 << (num_bits_to_keep & 0xff)) - 1U) << (num_bits_to_shift & 0xff) |\n          (1 << (num_bits_to_shift & 0xff)) - 1U & value;\n  if ((int)byte_ptr < 0) {\n    *(char *)(DAT_08000ec0 + (byte_ptr & 0xf)) = (char)(bits_to_set << 4);\n  }\n  else {\n    *(char *)(byte_ptr + 0xe000e400) = (char)(bits_to_set << 4);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e60",
            "calling": [
                "FUN_08000c8c",
                "FUN_08003e54",
                "FUN_08000d98",
                "FUN_08003eac"
            ],
            "imported": false,
            "current_name": "set_bits_in_byte_08000e60"
        },
        "FUN_0800557c": {
            "renaming": {
                "FUN_0800557c": "do_nothing_0800557c"
            },
            "code": "\nvoid do_nothing_0800557c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800557c",
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "imported": false,
            "current_name": "do_nothing_0800557c"
        },
        "FUN_0800165a": {
            "renaming": {
                "FUN_0800165a": "process_input_0800165a",
                "param_1": "input_array",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "input_value",
                "uVar2": "input_flag"
            },
            "code": "int process_input_0800165a(int *input_array, int param_2, int param_3, int param_4) {\n    int input_flag = *(int *)(*input_array + 0x18);\n    int input_value;\n    if ((input_flag & 0x80) == 0) {\n        input_value = *(int *)(input_array + 3);\n    }\n    else {\n        input_value = *(int *)(input_array + 6);\n    }\n    process_input_0800165a_08003880(input_array, (input_flag & 4) == 0, input_value, input_flag, param_4);\n    return 0;\n}",
            "called": [
                "FUN_08003880"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800165a",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_0800165a"
        },
        "FUN_08000b04": {
            "renaming": {
                "FUN_08000b04": "combine_and_update_values_08000b04",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "bVar1": "byte_value_1",
                "bVar2": "byte_value_2",
                "cVar3": "char_value_1",
                "uVar4": "undefined_value_1",
                "uVar5": "uint_value_1"
            },
            "code": "int combine_and_update_values_08000b04(int input_value_1, int input_value_2)\n{\n  byte byte_value_1;\n  byte byte_value_2;\n  char char_value_1;\n  undefined2 undefined_value_1;\n  uint uint_value_1;\n  \n  byte_value_1 = *(byte *)(input_value_1 + 0xc);\n  byte_value_2 = *(byte *)(input_value_1 + 0xe);\n  *(undefined *)(input_value_1 + 0xd) = 0;\n  *(byte *)(input_value_1 + 0xe) = byte_value_2;\n  *(undefined *)(input_value_1 + 0x49) = 6;\n  \n  for (uint_value_1 = 0; uint_value_1 < byte_value_2; uint_value_1 = uint_value_1 + 1 & 0xff) {\n    undefined_value_1 = combine_values_08004640(*(undefined *)(uint_value_1 * 2 + input_value_1 + 0x10),\n                         *(undefined *)(input_value_1 + (uint_value_1 + 4) * 2 + 9));\n    *(undefined2 *)(input_value_2 + (byte_value_1 + uint_value_1) * 2) = undefined_value_1;\n  }\n  \n  char_value_1 = *(char *)(input_value_1 + 0x49);\n  calculate_and_update_crc_0800076c(input_value_1);\n  return (int)(char)(char_value_1 + '\\x02');\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b04",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "combine_and_update_values_08000b04"
        },
        "FUN_0800262c": {
            "renaming": {
                "FUN_0800262c": "execute_if_flags_set_0800262c",
                "param_1": "param_flags",
                "DAT_08002688": "DAT_08002688",
                "execute_code_if_pointer_not_null_08003594": "execute_code_if_pointer_not_null",
                "do_nothing_0800268c": "do_nothing"
            },
            "code": "void execute_if_flags_set_0800262c(int *param_flags)\n{\n  if (((*(uint *)(*param_flags + 0xc) & 0x100) != 0) && ((*(uint *)(*param_flags + 8) & 0x1000) != 0)) {\n    execute_code_if_pointer_not_null_08003594();\n    *(uint *)(*param_flags + 0xc) = (*(uint *)(*param_flags + 0xc) & 0xff) | 0xfffffe7f;\n  }\n  if (((*(uint *)(*param_flags + 0xc) & 0x200) != 0) && ((*(uint *)(*param_flags + 8) & 0x2000) != 0)) {\n    do_nothing_0800268c(param_flags);\n    *(uint *)(*param_flags + 0xc) = (*(uint *)(*param_flags + 0xc) & 0xff) | 0xfffffd7f;\n  }\n  *(undefined4 *)(DAT_08002688 + 0x14) = 0x20000;\n  *(undefined *)((int)param_flags + 0x1d) = 1;\n  return;\n}",
            "called": [
                "FUN_08003594",
                "FUN_0800268c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800262c",
            "calling": [],
            "imported": false,
            "current_name": "execute_if_flags_set_0800262c"
        },
        "FUN_08004388": {
            "renaming": {
                "FUN_08004388": "set_data_08004388",
                "param_1": "data_index",
                "param_2": "data_value",
                "param_3": "data_type",
                "bVar1": "type_mask",
                "iVar2": "priority_level",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "extraout_r1": "extra_output",
                "PTR_DAT_0800445c": "ptr_data_0800445c"
            },
            "code": "void set_data_08004388(int data_index, int data_value, byte data_type) {\n    // Set data value\n    *(int *)(data_index + 0x11c) = data_value;\n    // Set data type\n    *(byte *)(data_index + 0x144) = data_type;\n    // Determine priority level\n    int priority_level = 0;\n    byte type_mask = data_type & 7;\n    switch (type_mask) {\n        case 4:\n            priority_level = 7;\n            break;\n        case 6:\n            priority_level = 8;\n            break;\n        case 2:\n            priority_level = 6;\n            break;\n    }\n    // Determine memory region\n    int memory_region = 0;\n    byte region_mask = data_type & 0x30;\n    if (region_mask == 0x30) {\n        *(int *)(data_index + 0x128) = 0x600;\n        priority_level++;\n    }\n    else if (region_mask == 0x20) {\n        *(int *)(data_index + 0x128) = 0x400;\n        priority_level++;\n    }\n    else {\n        *(int *)(data_index + 0x128) = 0;\n    }\n    // Determine other attributes\n    if ((data_type & 8) == 0) {\n        *(int *)(data_index + 0x124) = 0;\n    }\n    else {\n        *(int *)(data_index + 0x124) = 0x2000;\n    }\n    // Determine final priority level\n    int final_priority_level = 0;\n    if (priority_level == 8) {\n        *(int *)(data_index + 0x120) = 0;\n    }\n    else if (priority_level == 9) {\n        *(int *)(data_index + 0x120) = 0x1000;\n    }\n    else {\n        final_priority_level = priority_level;\n    }\n    // Process data\n    if (final_priority_level != 0) {\n        process_data(data_index + 0xd4);\n        process_input(data_index + 0xd4, uRam08004434);\n        return;\n    }\n    // Process loop\n    code *jump_table = (code *)0x8004432;\n    process_data_and_run_loop(uRam08004440, 299, uRam0800443c);\n    if (extraout_r1 < 0x60) {\n        uRam0000012e = *(unsigned short *)(PTR_DAT_0800445c + extraout_r1 * 2);\n    }\n    else {\n        uRam0000012e = 0xffff;\n    }\n    (*jump_table)();\n}",
            "called": [
                "FUN_08004808",
                "FUN_08003e54",
                "FUN_08003978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004388",
            "calling": [
                "FUN_08000600"
            ],
            "imported": false,
            "current_name": "set_data_08004388"
        },
        "FUN_080051ac": {
            "renaming": {
                "FUN_080051ac": "process_input_and_run_infinite_loop_080051ac",
                "puVar1": "input_ptr",
                "iVar2": "difference",
                "piVar3": "ptr_to_int_1",
                "piVar4": "ptr_to_int_2",
                "uVar5": "input_value",
                "uVar6": "input_value_as_ushort",
                "iVar7": "loop_step",
                "pcVar8": "jump_table_entry",
                "iVar9": "loop_counter",
                "bVar11": "is_zero_difference",
                "uVar12": "loop_result_as_undefined8",
                "UNRECOVERED_JUMPTABLE_00": "jump_table_entry",
                "is_negative_input_value": "is_negative_input_value",
                "initial_value": "initial_value",
                "loop_step": "loop_step",
                "loop_counter": "loop_counter",
                "loop_result": "loop_result",
                "is_zero_difference": "is_zero_difference",
                "ptr_to_int_2": "ptr_to_int_2",
                "ptr_to_int_1": "ptr_to_int_1",
                "input_ptr": "input_ptr",
                "input_value": "input_value",
                "input_value_as_ushort": "input_value_as_ushort",
                "jump_table_entry": "jump_table_entry",
                "difference": "difference",
                "loop_result_as_undefined8": "loop_result_as_undefined8"
            },
            "code": "void process_input_and_run_infinite_loop_080051ac() {\n    uint *input_ptr;\n    int *ptr_to_int_1;\n    int *ptr_to_int_2;\n    uint input_value;\n    ushort input_value_as_ushort;\n    int difference;\n    int loop_result;\n    int loop_counter;\n    bool is_zero_difference;\n    int initial_value;\n    int loop_step;\n    code *jump_table_entry;\n    bool is_negative_input_value;\n    undefined8 loop_result_as_undefined8;\n    process_input_080055d0(6);\n    jump_table_entry = (code *)0x80051bb;\n    loop_result_as_undefined8 = run_infinite_loop_080040f8(1);\n    ptr_to_int_1 = (int *)((ulonglong)loop_result_as_undefined8 >> 0x20);\n    input_ptr = (uint *)loop_result_as_undefined8;\n    input_value_as_ushort = *(ushort *)(ptr_to_int_1 + 3);\n    input_value = (uint)input_value_as_ushort;\n    is_negative_input_value = (int)(input_value << 0x1c) < 0;\n    if (is_negative_input_value) {\n        initial_value = ptr_to_int_1[4];\n        if (initial_value != 0) {\n            loop_step = 0;\n            is_zero_difference = input_value << 0x1e == 0;\n            loop_counter = *ptr_to_int_1;\n            if (!is_zero_difference) {\n                loop_step = ptr_to_int_1[5];\n            }\n            *ptr_to_int_1 = initial_value;\n            if (is_zero_difference) {\n                loop_step = 0;\n            }\n            ptr_to_int_1[2] = loop_step;\n            for (difference = loop_counter - initial_value; difference > 0; difference = difference - loop_step) {\n                loop_result = (*(code *)ptr_to_int_1[10])(input_ptr, ptr_to_int_1[8], initial_value, difference);\n                if (loop_result < 1) {\n                    input_value_as_ushort = *(ushort *)(ptr_to_int_1 + 3);\n                    goto LAB_080052b2;\n                }\n                initial_value = initial_value + loop_result;\n            }\n        }\n    } else {\n        if ((ptr_to_int_1[1] > 0 || ptr_to_int_1[0x10] > 0) && (jump_table_entry = (code *)ptr_to_int_1[0xb], jump_table_entry != (code *)0x0)) {\n            difference = *input_ptr;\n            *input_ptr = 0;\n            if ((input_value_as_ushort & 0x1000) == 0) {\n                loop_result = (*jump_table_entry)(input_ptr, ptr_to_int_1[8], input_value & 0x1000, 1);\n                if (loop_result == -1 && *input_ptr != 0) {\n                    if (*input_ptr != 0x1d && *input_ptr != 0x16) {\n                        *(ushort *)(ptr_to_int_1 + 3) = *(ushort *)(ptr_to_int_1 + 3) | 0x40;\n                        (*jump_table_entry)();\n                        return;\n                    }\n                    *input_ptr = difference;\n                    goto LAB_080051d6;\n                }\n            } else {\n                loop_result = ptr_to_int_1[0x15];\n            }\n            if ((int)((uint)input_value_as_ushort << 0x1d) < 0 && ptr_to_int_1[1] != 0 && (difference = difference - ptr_to_int_1[1], ptr_to_int_1[0xd] != 0)) {\n                difference = difference - ptr_to_int_1[0x10];\n            }\n            loop_result = (*(code *)ptr_to_int_1[0xb])(input_ptr, ptr_to_int_1[8], difference, 0);\n            input_value_as_ushort = *(ushort *)(ptr_to_int_1 + 3);\n            if (loop_result == -1 && (*input_ptr > 0x1d || (-1 < (int)((DAT_080052c8 >> (*input_ptr & 0xff)) << 0x1f)) || *input_ptr == 0)) {\n                *(ushort *)(ptr_to_int_1 + 3) = input_value_as_ushort | 0x40;\n                (*jump_table_entry)(0xffffffff);\n                return;\n            }\n            ptr_to_int_1[1] = 0;\n            *ptr_to_int_1 = ptr_to_int_1[4];\n            if ((int)((uint)input_value_as_ushort << 0x13) < 0 && (loop_result != -1 || *input_ptr == 0)) {\n                ptr_to_int_1[0x15] = loop_result;\n            }\n            ptr_to_int_2 = (int *)ptr_to_int_1[0xd];\n            *input_ptr = difference;\n            if (ptr_to_int_2 != (int *)0x0) {\n                if (ptr_to_int_2 != ptr_to_int_1 + 0x11) {\n                    insert_node_080048dc(input_ptr);\n                }\n                ptr_to_int_1[0xd] = 0;\n                (*jump_table_entry)();\n                return;\n            }\n        }\n    }\nLAB_080051d6:\n    (*jump_table_entry)(0);\n    return;\n}",
            "called": [
                "FUN_080048dc",
                "FUN_080040f8",
                "FUN_080055d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080051ac",
            "calling": [
                "FUN_08004808",
                "FUN_08005760"
            ],
            "imported": false,
            "current_name": "process_input_and_run_infinite_loop_080051ac"
        },
        "FUN_080052cc": {
            "renaming": {
                "FUN_080052cc": "process_data_080052cc",
                "param_1": "data",
                "param_2": "params",
                "uVar1": "result",
                "iVar2": "offset",
                "piVar3": "data_ptr",
                "uVar4": "size",
                "uVar5": "flag",
                "iVar6": "temp",
                "unaff_r4": "unused",
                "unaff_r5": "unused",
                "pcVar7": "func_ptr",
                "iVar8": "increment",
                "uVar9": "value",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar10": "is_zero",
                "is_negative": "is_negative",
                "is_overflow": "is_overflow"
            },
            "code": "uint32_t process_data_080052cc(uint32_t *data, int *params)\n{\n  uint32_t result;\n  int *param_ptr;\n  uint32_t value;\n  uint16_t flag;\n  int increment;\n  int offset;\n  int size;\n  code *func_ptr;\n  int temp;\n  uint32_t *data_ptr;\n  bool is_zero;\n  bool is_negative;\n  bool is_overflow;\n  \n  if (params[4] != 0) {\n    if ((data != NULL) && (data[6] == 0)) {\n      initialize_data();\n    }\n    if (params == (int *)PARAM_1) {\n      param_ptr = (int *)data[1];\n    }\n    else if (params == (int *)PARAM_2) {\n      param_ptr = (int *)data[2];\n    }\n    else if (params == (int *)PARAM_3) {\n      param_ptr = (int *)data[3];\n    }\n    if (*(uint16_t *)(param_ptr + 3) != 0) {\n      flag = *(uint16_t *)(param_ptr + 3);\n      size = (int)flag;\n      if ((size << 0x1c) < 0) {\n        offset = params[4];\n        if (offset != 0) {\n          temp = size << 0x1e;\n          is_zero = temp == 0;\n          increment = *param_ptr;\n          if (is_zero) {\n            temp = param_ptr[5];\n          }\n          *param_ptr = offset;\n          if (!is_zero) {\n            temp = 0;\n          }\n          param_ptr[2] = temp;\n          for (increment = increment - offset; increment > 0; increment = increment - temp) {\n            temp = (*(code *)param_ptr[10])(data,param_ptr[8],offset,increment,0,0);\n            if (temp < 1) {\n              flag = *(uint16_t *)(param_ptr + 3);\n              goto LAB_080052b2;\n            }\n            offset = offset + temp;\n          }\n        }\n      }\n      else if (((params[1] > 0) || (params[16] > 0)) && ((func_ptr = (code *)param_ptr[0xb]) != NULL)) {\n        value = *data;\n        *data = 0;\n        if ((flag & 0x1000) == 0) {\n          temp = (*func_ptr)(data,param_ptr[8],size & 0x1000,1);\n          if ((temp == -1) && ((value = *data) != 0)) {\n            if ((value != 0x1d) && (value != 0x16)) {\n              *(uint16_t *)(param_ptr + 3) = *(uint16_t *)(param_ptr + 3) | 0x40;\n              result = (*UNRECOVERED_JUMPTABLE_00)();\n              return result;\n            }\n            *data = value;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          temp = params[21];\n        }\n        if (((int)((uint)flag << 0x1d) < 0) && ((temp = temp - params[1]), param_ptr[0xd] != 0)) {\n          temp = temp - params[16];\n        }\n        temp = (*(code *)param_ptr[0xb])(data,param_ptr[8],temp,0);\n        flag = *(uint16_t *)(param_ptr + 3);\n        if ((temp == -1) && ((value = *data) > 0x1d || (-1 < (int)((DAT_080052c8 >> (value & 0xff)) << 0x1f))))) {\n          flag = flag | 0x40;\n          goto LAB_080052b2;\n        }\n        params[1] = 0;\n        *param_ptr = params[4];\n        if (((int)((uint)flag << 0x13) < 0) && ((temp != -1) || (*data == 0))) {\n          params[21] = temp;\n        }\n        data_ptr = (uint32_t *)param_ptr[0xd];\n        *data = value;\n        if (data_ptr != NULL) {\n          if (data_ptr != param_ptr + 0x11) {\n            insert_node(data);\n          }\n          param_ptr[0xd] = 0;\n          result = (*UNRECOVERED_JUMPTABLE_00)();\n          return result;\n        }\n      }\nLAB_080051d6:\n      result = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return result;\n    }\n  }\n  return 0;\n}\n",
            "called": [
                "FUN_080053a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052cc",
            "calling": [
                "FUN_08004a34"
            ],
            "imported": false,
            "current_name": "process_data_080052cc",
            "code_backup": "\nundefined4 FUN_080052cc(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUN_080053a0();\n    }\n    if (param_2 == (int *)PTR_DAT_08005314) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)PTR_DAT_08005318) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)PTR_DAT_0800531c) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 == 0;\n          iVar8 = *param_2;\n          if (bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          if (!bVar10) {\n            iVar6 = 0;\n          }\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_080052b2;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((DAT_080052c8 >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            insert_node_080048dc(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_08002eb2": {
            "renaming": {
                "FUN_08002eb2": "validate_input_08002eb2",
                "param_1": "input_arr",
                "param_2": "input_size",
                "param_3": "input_value",
                "*(char *)((int)param_1 + 0x39)": "input_arr[9]",
                "*(char *)(param_1 + 0xe)": "input_arr[14]",
                "param_1[8]": "input_arr[8]",
                "*(short *)(param_1 + 9)": "input_arr[9]",
                "*(short *)((int)param_1 + 0x26)": "input_arr[11]",
                "param_1[0xf]": "input_arr[15]",
                "*(undefined *)((int)param_1 + 0x39)": "input_arr[9]",
                "*(undefined *)(param_1 + 0xe)": "input_arr[14]",
                "*(uint *)(*param_1 + 0xc)": "*(unsigned int *)(*input_arr + 0xc)"
            },
            "code": "int validate_input_08002eb2(int *input_arr, int input_size, int input_value)\n{\n    if (input_arr[9] != ' ')\n    {\n        return 2;\n    }\n    if (input_size == 0)\n    {\n        return 1;\n    }\n    if (input_value == 0)\n    {\n        return 1;\n    }\n    if (input_arr[14] != 1)\n    {\n        input_arr[8] = input_size;\n        input_arr[9] = (short)input_value;\n        input_arr[11] = (short)input_value;\n        input_arr[15] = 0;\n        input_arr[9] = '!';\n        input_arr[14] = 0;\n        *(unsigned int *)(*input_arr + 0xc) |= 0x80;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002eb2",
            "calling": [
                "FUN_08003f48",
                "FUN_08003eac"
            ],
            "imported": false,
            "current_name": "validate_input_08002eb2"
        },
        "FUN_08000d3c": {
            "renaming": {
                "FUN_08000d3c": "initialize_and_run_device_08000d3c",
                "iVar1": "index",
                "puVar2": "ptr_data_84",
                "UNRECOVERED_JUMPTABLE": "jumptable"
            },
            "code": "void initialize_and_run_device_08000d3c(void)\n{\n  int index;\n  undefined4 *ptr_data_84 = (undefined4 *)PTR_DAT_08000d84;\n  code *jumptable = (code *)0x8000d72;\n  \n  for (index = 0; PTR_DAT_08000d7c + index < PTR_DAT_08000d80; index += 4) {\n    *(undefined4 *)(PTR_DAT_08000d7c + index) = *(undefined4 *)(DAT_08000d78 + index);\n  }\n  for (; ptr_data_84 < PTR_DAT_08000d88; ptr_data_84++) {\n    *ptr_data_84 = 0;\n  }\n  initialize_device();\n  run_device_functions();\n  handle_device_interrupts();\n  (*jumptable)();\n  return;\n}",
            "called": [
                "FUN_080035bc",
                "FUN_08004658",
                "FUN_08004884"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000d3c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_and_run_device_08000d3c"
        },
        "FUN_08003978": {
            "renaming": {
                "FUN_08003978": "initialize_UART_pins_08003978",
                "param_1": "UART_pin_values",
                "iVar1": "UART_pin_7",
                "iVar2": "UART_pin_6",
                "iVar3": "UART_pin_5",
                "iVar4": "UART_pin_4",
                "iVar5": "UART_pin_3",
                "iVar6": "UART_pin_2",
                "iVar7": "UART_pin_1",
                "iVar8": "UART_pin_0",
                "iVar9": "matched_UART_pin",
                "uVar10": "flag_value",
                "uVar11": "UART_pin_index",
                "local_2c": "bit_mask",
                "local_28": "UART_pin_mode",
                "local_24": "UART_pin_stop_bits",
                "local_20": "UART_parity",
                "local_1c": "UART_data_bits",
                "process_input_data_08004fdc": "print_error_msg",
                "compare_08003582": "compare_UART_pins",
                "set_flag_080031fc": "set_flag_value",
                "find_value_or_negative_one_0800354a": "find_UART_pin_value",
                "update_data_08000fb4": "update_UART_pin_data",
                "initialize_device_08002d72": "initialize_UART_device"
            },
            "code": "\nvoid initialize_UART_pins_08003978(int *UART_pin_values)\n\n{\n  int UART_pin_7;\n  int UART_pin_6;\n  int UART_pin_5;\n  int UART_pin_4;\n  int UART_pin_3;\n  int UART_pin_2;\n  int UART_pin_1;\n  int UART_pin_0;\n  int matched_UART_pin;\n  undefined4 flag_value;\n  uint UART_pin_index;\n  uint bit_mask;\n  uint UART_pin_mode;\n  uint UART_pin_stop_bits;\n  undefined4 UART_parity;\n  uint UART_data_bits;\n  \n  if (UART_pin_values != (int *)0x0) {\n    UART_pin_1 = find_value_080034f4((int)*(short *)(UART_pin_values + 0x16),PTR_DAT_08003c58);\n    UART_pin_0 = find_value_080034f4((int)*(short *)((int)UART_pin_values + 0x5a),PTR_DAT_08003c5c);\n    if ((UART_pin_0 == 0) || (UART_pin_1 == 0)) {\n      process_input_data_08004fdc(PTR_s_ERROR__at_least_one_UART_pin_has_08003c84,UART_pin_0);\n    }\n    else {\n      matched_UART_pin = compare_08003582(UART_pin_1);\n      *UART_pin_values = matched_UART_pin;\n      UART_pin_2 = DAT_08003c7c;\n      UART_pin_3 = DAT_08003c78;\n      UART_pin_4 = DAT_08003c74;\n      UART_pin_5 = DAT_08003c70;\n      UART_pin_6 = DAT_08003c6c;\n      UART_pin_7 = DAT_08003c68;\n      UART_pin_0 = DAT_08003c64;\n      UART_pin_1 = DAT_08003c60;\n      if (matched_UART_pin == 0) {\n        process_input_data_08004fdc(PTR_s_ERROR__U_S_ART_pins_mismatch_08003c88);\n      }\n      else {\n        if (matched_UART_pin == DAT_08003c60) {\n          *(uint *)(DAT_08003c60 + 0x12824) = *(uint *)(DAT_08003c60 + 0x12824) | 0x10;\n          *(uint *)(UART_pin_1 + 0x12824) = *(uint *)(UART_pin_1 + 0x12824) & 0xffffffef;\n          *(uint *)(UART_pin_1 + 0x12844) = *(uint *)(UART_pin_1 + 0x12844) | 0x10;\n          *(undefined *)(UART_pin_values + 0x11) = 0;\n          *(undefined *)(UART_pin_values + 0x17) = 0x25;\n        }\n        else if (matched_UART_pin == DAT_08003c64) {\n          *(uint *)(DAT_08003c64 + 0x1f420) = *(uint *)(DAT_08003c64 + 0x1f420) | 0x20000;\n          *(uint *)(UART_pin_0 + 0x1f420) = *(uint *)(UART_pin_0 + 0x1f420) & 0xfffdffff;\n          *(uint *)(UART_pin_0 + 0x1f440) = *(uint *)(UART_pin_0 + 0x1f440) | 0x20000;\n          *(undefined *)(UART_pin_values + 0x11) = 1;\n          *(undefined *)(UART_pin_values + 0x17) = 0x26;\n        }\n        else if (matched_UART_pin == DAT_08003c68) {\n          *(uint *)(DAT_08003c68 + 0x1f020) = *(uint *)(DAT_08003c68 + 0x1f020) | 0x40000;\n          *(uint *)(UART_pin_7 + 0x1f020) = *(uint *)(UART_pin_7 + 0x1f020) & 0xfffbffff;\n          *(uint *)(UART_pin_7 + 0x1f040) = *(uint *)(UART_pin_7 + 0x1f040) | 0x40000;\n          *(undefined *)(UART_pin_values + 0x11) = 2;\n          *(undefined *)(UART_pin_values + 0x17) = 0x27;\n        }\n        else if (matched_UART_pin == DAT_08003c6c) {\n          *(uint *)(DAT_08003c6c + 0x1ec20) = *(uint *)(DAT_08003c6c + 0x1ec20) | 0x80000;\n          *(uint *)(UART_pin_6 + 0x1ec20) = *(uint *)(UART_pin_6 + 0x1ec20) & 0xfff7ffff;\n          *(uint *)(UART_pin_6 + 0x1ec40) = *(uint *)(UART_pin_6 + 0x1ec40) | 0x80000;\n          *(undefined *)(UART_pin_values + 0x11) = 3;\n          *(undefined *)(UART_pin_values + 0x17) = 0x34;\n        }\n        else if (matched_UART_pin == DAT_08003c70) {\n          *(uint *)(DAT_08003c70 + 0x1e820) = *(uint *)(DAT_08003c70 + 0x1e820) | 0x100000;\n          *(uint *)(UART_pin_5 + 0x1e820) = *(uint *)(UART_pin_5 + 0x1e820) & 0xffefffff;\n          *(uint *)(UART_pin_5 + 0x1e840) = *(uint *)(UART_pin_5 + 0x1e840) | 0x100000;\n          *(undefined *)(UART_pin_values + 0x11) = 4;\n          *(undefined *)(UART_pin_values + 0x17) = 0x35;\n        }\n        else if (matched_UART_pin == DAT_08003c74) {\n          *(uint *)(DAT_08003c74 + 0x12424) = *(uint *)(DAT_08003c74 + 0x12424) | 0x20;\n          *(uint *)(UART_pin_4 + 0x12424) = *(uint *)(UART_pin_4 + 0x12424) & 0xffffffdf;\n          *(uint *)(UART_pin_4 + 0x12444) = *(uint *)(UART_pin_4 + 0x12444) | 0x20;\n          *(undefined *)(UART_pin_values + 0x11) = 5;\n          *(undefined *)(UART_pin_values + 0x17) = 0x47;\n        }\n        else if (matched_UART_pin == DAT_08003c78) {\n          *(uint *)(DAT_08003c78 + 0x1c020) = *(uint *)(DAT_08003c78 + 0x1c020) | 0x40000000;\n          *(uint *)(UART_pin_3 + 0x1c020) = *(uint *)(UART_pin_3 + 0x1c020) & 0xbfffffff;\n          *(uint *)(UART_pin_3 + 0x1c040) = *(uint *)(UART_pin_3 + 0x1c040) | 0x40000000;\n          *(undefined *)(UART_pin_values + 0x11) = 6;\n          *(undefined *)(UART_pin_values + 0x17) = 0x52;\n        }\n        else if (matched_UART_pin == DAT_08003c7c) {\n          *(uint *)(DAT_08003c7c + 0x1bc20) = *(uint *)(DAT_08003c7c + 0x1bc20) | 0x80000000;\n          *(uint *)(UART_pin_2 + 0x1bc20) = *(uint *)(UART_pin_2 + 0x1bc20) & 0x7fffffff;\n          *(uint *)(UART_pin_2 + 0x1bc40) = *(uint *)(UART_pin_2 + 0x1bc40) | 0x80000000;\n          *(undefined *)(UART_pin_values + 0x11) = 7;\n          *(undefined *)(UART_pin_values + 0x17) = 0x53;\n        }\n        flag_value = set_flag_080031fc((uint)((int)*(short *)((int)UART_pin_values + 0x5a) << 0x18) >> 0x1c);\n        UART_pin_index = find_value_or_negative_one_0800354a((int)*(short *)((int)UART_pin_values + 0x5a),PTR_DAT_08003c5c);\n        bit_mask = 1 << (*(ushort *)((int)UART_pin_values + 0x5a) & 0xf) & 0xffff;\n        UART_pin_mode = (UART_pin_index >> 3 & 1) << 4 | UART_pin_index & 7;\n        UART_pin_stop_bits = (UART_pin_index << 0x1a) >> 0x1e;\n        UART_data_bits = (UART_pin_index << 0x11) >> 0x19;\n        UART_parity = 3;\n        update_data_08000fb4(flag_value,&bit_mask);\n        flag_value = set_flag_080031fc((uint)((int)*(short *)(UART_pin_values + 0x16) << 0x18) >> 0x1c);\n        UART_pin_index = find_value_or_negative_one_0800354a((int)*(short *)(UART_pin_values + 0x16),PTR_DAT_08003c58);\n        bit_mask = 1 << (*(ushort *)(UART_pin_values + 0x16) & 0xf) & 0xffff;\n        UART_pin_mode = (UART_pin_index >> 3 & 1) << 4 | UART_pin_index & 7;\n        UART_pin_stop_bits = (UART_pin_index << 0x1a) >> 0x1e;\n        update_data_08000fb4(flag_value,&bit_mask);\n        *(int **)(PTR_DAT_08003c80 + (uint)*(byte *)(UART_pin_values + 0x11) * 4) = UART_pin_values + 1;\n        UART_pin_values[1] = *UART_pin_values;\n        UART_pin_values[2] = UART_pin_values[0x12];\n        UART_pin_values[3] = UART_pin_values[0x13];\n        UART_pin_values[4] = UART_pin_values[0x14];\n        UART_pin_values[5] = UART_pin_values[0x15];\n        UART_pin_values[6] = 0xc;\n        UART_pin_values[7] = 0;\n        UART_pin_values[8] = 0;\n        initialize_device_08002d72(UART_pin_values + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08002d72",
                "FUN_08000fb4",
                "FUN_080034f4",
                "FUN_08004fdc",
                "FUN_08003582",
                "FUN_080031fc",
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003978",
            "calling": [
                "FUN_08004388",
                "FUN_08003cc8"
            ],
            "imported": false,
            "current_name": "initialize_UART_pins_08003978"
        },
        "FUN_0800316c": {
            "renaming": {
                "FUN_0800316c": "update_bit_0800316c",
                "param_1": "bit",
                "param_2": "array",
                "uVar1": "index",
                "target": "target",
                "mask": "mask"
            },
            "code": "void update_bit_0800316c(uint bit, int* array) {\n  uint index = (bit << 0x18) >> 0x1c;\n  uint* target = (uint*)(array + index * 4);\n  uint mask = ~(1 << (bit & 0xf));\n  *target &= mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "update_bit_0800316c"
        },
        "FUN_080040d0": {
            "renaming": {
                "FUN_080040d0": "get_error_code_080040d0"
            },
            "code": "unsigned int get_error_code_080040d0(void)\n{\n    return 0xFFFFFFFF;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d0",
            "calling": [],
            "imported": false,
            "current_name": "get_error_code_080040d0"
        },
        "FUN_080040d6": {
            "renaming": {
                "FUN_080040d6": "set_memory_permissions_080040d6",
                "param_1": "address",
                "param_2": "permissions",
                "*(undefined4 *)(param_2 + 4)": "*(int*)(address + 4)"
            },
            "code": "void set_memory_permissions_080040d6(int* address, int permissions) {\n    *(int*)(address + 4) = permissions;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040d6",
            "calling": [
                "FUN_080056d4"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_080040d6"
        },
        "FUN_08004a34": {
            "renaming": {
                "FUN_08004a34": "process_input_08004a34",
                "param_1": "input_length",
                "param_2": "current_byte",
                "param_3": "input_buffer",
                "iVar1": "buffer_size",
                "pbVar2": "buffer_start",
                "pbVar3": "data_ptr",
                "uVar4": "current_byte_uint"
            },
            "code": "uint process_input_08004a34(int input_length, byte current_byte, byte **input_buffer) {\n  int buffer_size = (int)(*input_buffer)[2] - 1;\n  (*input_buffer)[2] = (byte *)buffer_size;\n  if (buffer_size >= -1 || (buffer_size >= (int)(*input_buffer)[6] && current_byte != 0xa)) {\n    byte *buffer_start = *input_buffer;\n    *input_buffer = buffer_start + 1;\n    *buffer_start = current_byte;\n    return (uint)current_byte;\n  }\n  if (input_length != 0 && *(int *)(input_length + 0x18) == 0) {\n    initialize_struct_array_080053a0();\n  }\n  byte **input_buffer_ptr;\n  if (input_buffer == (byte **)PTR_DAT_080050c4) {\n    input_buffer_ptr = *(byte ***)(input_length + 4);\n  }\n  else if (input_buffer == (byte **)PTR_DAT_080050c8) {\n    input_buffer_ptr = *(byte ***)(input_length + 8);\n  }\n  else if (input_buffer == (byte **)PTR_DAT_080050cc) {\n    input_buffer_ptr = *(byte ***)(input_length + 0xc);\n  }\n  input_buffer[2] = input_buffer[6];\n  byte *data_ptr = (byte *)(uint)*(ushort *)(input_buffer + 3);\n  int data_length = (int)data_ptr << 0x1c;\n  if ((data_length < 0 && (data_ptr = input_buffer[4]) != (byte *)0x0) || (data_length = process_data(input_length, input_buffer, data_length, data_ptr, buffer_start), data_length == 0)) {\n    data_length = (int)*input_buffer - (int)input_buffer[4];\n    uint current_byte_uint = (uint)current_byte;\n    if (data_length >= (int)input_buffer[5] || (data_length = process_data_080052cc(input_length, input_buffer), data_length == 0)) {\n      (*input_buffer)[2] = (byte *)((int)(*input_buffer)[2] - 1);\n      byte *buffer_start = *input_buffer;\n      *input_buffer = buffer_start + 1;\n      *buffer_start = current_byte;\n      if ((byte *)(data_length + 1) != input_buffer[5]) {\n        if (-2147483648 == (int)((uint)*(ushort *)(input_buffer + 3) << 0x1f)) {\n          return current_byte_uint;\n        }\n        if (current_byte_uint != 10) {\n          return current_byte_uint;\n        }\n      }\n      data_length = process_data_080052cc(input_length, input_buffer);\n      if (data_length == 0) {\n        return current_byte_uint;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "FUN_080053a0",
                "FUN_080052cc",
                "FUN_080050d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a34",
            "calling": [
                "FUN_08004a60"
            ],
            "imported": false,
            "current_name": "process_input_08004a34"
        },
        "FUN_080002d0": {
            "renaming": {
                "FUN_080002d0": "get_result_080002d0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result"
            },
            "code": "typedef unsigned long long uint64_t;\n\nuint64_t get_result_080002d0(uint64_t input1, uint64_t input2, uint64_t input3, uint64_t input4)\n{\n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input2 = -1;\n      input1 = -1;\n    }\n    return ((uint64_t)input2 << 32) | input1;\n  }\n  uint64_t result = calculate_result();\n  return result;\n}",
            "called": [
                "FUN_08000300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002d0",
            "calling": [
                "FUN_080023b4"
            ],
            "imported": false,
            "current_name": "get_result_080002d0"
        },
        "FUN_08003f00": {
            "renaming": {
                "FUN_08003f00": "find_index_08003f00",
                "param_1": "value",
                "uVar1": "index"
            },
            "code": "uint find_index_08003f00(int value)\n{\n  uint index;\n  if (value == 0) {\n    index = 10;\n  }\n  else {\n    index = 0;\n    while(true) {\n      if (index > 9) {\n        return index;\n      }\n      if (value == *(int *)(PTR_DAT_08003f20 + index * 4)) {\n        break;\n      }\n      index++;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f00",
            "calling": [
                "FUN_08003f24",
                "FUN_08003f48"
            ],
            "imported": false,
            "current_name": "find_index_08003f00"
        },
        "FUN_08005a04": {
            "renaming": {
                "FUN_08005a04": "do_nothing_08005a04"
            },
            "code": "\nvoid do_nothing_08005a04(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a04",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08005a04"
        },
        "FUN_08001440": {
            "renaming": {
                "FUN_08001440": "increment_char_in_array_08001440",
                "param_1": "array_ptr",
                "puVar1": "char_ptr",
                "PTR_00000024": "short_ptr"
            },
            "code": "int increment_char_in_array_08001440(int *array_ptr){\n    short *PTR_00000024 = (short *)((int)array_ptr + 0x2a);\n    if (*PTR_00000024 != 0) {\n        char *char_ptr = (char *)array_ptr[9];\n        array_ptr[9] = (int)(char_ptr + 1);\n        *char_ptr = (char)*(int *)(*array_ptr + 0x10);\n        *PTR_00000024 = *PTR_00000024 - 1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001440",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "increment_char_in_array_08001440"
        },
        "FUN_08000230": {
            "renaming": {
                "FUN_08000230": "find_byte_sequence_08000230",
                "param_1": "data",
                "param_2": "target_byte",
                "param_3": "length",
                "bVar1": "current_byte",
                "puVar7": "current_data",
                "pbVar6": "result",
                "pbVar8": "result",
                "uVar9": "remaining_length",
                "uVar10": "remaining_length",
                "uVar11": "comparison_result",
                "uVar12": "comparison_result",
                "bVar13": "byte_found",
                "bVar14": "byte_found",
                "bVar15": "byte_found",
                "bVar16": "byte_found"
            },
            "code": "byte * find_byte_sequence_08000230(uint *data, uint target_byte, uint length) {\n  byte *result;\n  uint *current_data = data;\n  byte current_byte;\n  uint target_word = target_byte | target_byte << 8 | target_byte << 16 | target_byte << 24;\n  uint remaining_length;\n  bool found;\n  while (length >= 16) {\n    remaining_length = length - 8;\n    found = false;\n    do {\n      if (*current_data ^ target_word) {\n        current_data++;\n        remaining_length -= 4;\n      }\n      else {\n        if (current_data[1] ^ target_word) {\n          current_data += 2;\n          remaining_length -= 8;\n        }\n        else {\n          found = true;\n          result = (byte *)(current_data + 1);\n          break;\n        }\n      }\n    } while (remaining_length >= 8);\n    if (found) {\n      return result - 1;\n    }\n    length &= 7;\n  }\n  while (length != 0) {\n    current_byte = *(byte *)current_data;\n    if (current_byte == target_byte) {\n      return (byte *)current_data;\n    }\n    current_data = (uint *)((byte *)current_data + 1);\n    length--;\n  }\n  return (byte *)0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000230",
            "calling": [
                "FUN_08004d9c",
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "find_byte_sequence_08000230"
        },
        "FUN_08001684": {
            "renaming": {
                "FUN_08001684": "process_input_08001684",
                "param_1": "input_array",
                "DAT_08001714": "PTR_DAT_08001714",
                "uint": "unsigned int",
                "PTR_": "PTR_",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)((int)input_array + 0x3d)",
                "(*param_1)[1]": "(*input_array)[1]",
                "(*param_1)[5]": "(*input_array)[5]",
                "**param_1": "**input_array",
                "param_1[0xb]": "input_array[0xb]",
                "param_1[0xc]": "input_array[0xc]",
                "undefined": "void",
                "do_nothing_080015ba": "do_nothing",
                "(uint *)0x0": "PTR_NULL"
            },
            "code": "int process_input_08001684(uint **input_array) {\n    uint *type = input_array[0xb];\n    char *flag = (char *)((int)input_array + 0x3d);\n    if ((*type == 0x4 || *type == 0x8) && (*flag == '(')) {\n        *type = DAT_08001714;\n        (*input_array)[1] &= 0xfffff8ff;\n        (*input_array)[5] = 0xfffffbff;\n        **input_array &= 0xfffffbff;\n        input_array[0xc] = PTR_NULL;\n        *flag = 0x20;\n        *(flag + 1) = 0;\n        process_input_08001684_and_set_flags_080038d0();\n    }\n    else if (*flag == '!') {\n        *type = DAT_08001714;\n        input_array[0xc] = (uint *)0x21;\n        *flag = 0x20;\n        *(flag + 1) = 0;\n        (*input_array)[1] &= 0xfffff8ff;\n        (*input_array)[5] = 0xfffffbff;\n        **input_array &= 0xfffffbff;\n        do_nothing_080015ba();\n    }\n    else {\n        (*input_array)[5] = 0xfffffbff;\n    }\n    return 0;\n}",
            "called": [
                "FUN_080038d0",
                "FUN_080015ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001684",
            "calling": [
                "FUN_08001e68"
            ],
            "imported": false,
            "current_name": "process_input_08001684"
        },
        "FUN_08000f8c": {
            "renaming": {
                "FUN_08000f8c": "set_param_value_if_not_two_08000f8c",
                "param_1": "param_array",
                "*param_1": "**param_array",
                "*(char *)((int)param_1 + 0x35)": "*param_value",
                "param_1[0x15]": "param_array[21]"
            },
            "code": "int set_param_value_if_not_two_08000f8c(uint **param_array) {\n    char *param_value = (char *)((int)param_array + 0x35);\n    if (*param_value != 2) {\n        param_array[0x15] = (uint *)0x80;\n        return 1;\n    }\n    *param_value = 5;\n    **param_array &= 0xfffffffe;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f8c",
            "calling": [
                "FUN_08002ffc",
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "set_param_value_if_not_two_08000f8c"
        },
        "FUN_080001ac": {
            "renaming": {
                "FUN_080001ac": "check_and_set_080001ac",
                "param_1": "data",
                "*PTR_DAT_080001c4": "data_flag",
                "DAT_080001c8": "data_check",
                "PTR_FUN_080001cc": "data_pointer"
            },
            "code": "undefined* check_and_set_080001ac(undefined* data)\\n{\\n    if (**PTR_DAT_080001c4 == \"\\0\") {\\n        if (DAT_080001c8 != 0) {\\n            data = PTR_FUN_080001cc;\\n        }\\n        **PTR_DAT_080001c4 = 1;\\n    }\\n    return data;\\n}",
            "called": [
                "FUN_080059f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ac",
            "calling": [],
            "imported": false,
            "current_name": "check_and_set_080001ac"
        },
        "FUN_080040e0": {
            "renaming": {
                "FUN_080040e0": "return_one_080040e0"
            },
            "code": "int return_one_080040e0() {\n    int result = 1;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e0",
            "calling": [
                "FUN_080056f8"
            ],
            "imported": false,
            "current_name": "return_one_080040e0"
        },
        "FUN_080048cc": {
            "renaming": {
                "FUN_080048cc": "fill_array_with_value_080048cc",
                "param_1": "array",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "end"
            },
            "code": "void fill_array_with_value_080048cc(char *array, char value, int length){\n    char *end = array + length;\n    for (; array != end; array++) {\n        *array = value;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048cc",
            "calling": [
                "FUN_08005374",
                "FUN_08005400",
                "FUN_0800532c"
            ],
            "imported": false,
            "current_name": "fill_array_with_value_080048cc"
        },
        "FUN_080040e4": {
            "renaming": {
                "FUN_080040e4": "return_zero_080040e4"
            },
            "code": "int return_zero_080040e4(void)\n{\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e4",
            "calling": [
                "FUN_08005718"
            ],
            "imported": false,
            "current_name": "return_zero_080040e4"
        },
        "FUN_08003506": {
            "renaming": {
                "FUN_08003506": "find_short_08003506",
                "param_1": "target",
                "param_2": "short_array",
                "*param_2": "*short_array"
            },
            "code": "int find_short_08003506(int target, short *short_array){\n  while(true){\n    if(*(int *)(short_array + 2) == 0){\n      return -1;\n    }\n    if(*(int *)(short_array + 2) == target){\n      break;\n    }\n    short_array = short_array + 6;\n  }\n  return (int)*short_array;\n}",
            "called": [
                "FUN_08003506"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003506",
            "calling": [
                "FUN_08003506",
                "FUN_0800351e"
            ],
            "imported": false,
            "current_name": "find_short_08003506"
        },
        "FUN_080025e0": {
            "renaming": {
                "FUN_080025e0": "get_value_from_pointer_080025e0",
                "PTR_DAT_080025e8": "pointer_value"
            },
            "code": "uint32_t get_value_from_pointer_080025e0() {\n    uint32_t* PTR_DAT_080025e8 = (uint32_t*)PTR_DAT_080025e8;\n    return *PTR_DAT_080025e8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e0",
            "calling": [
                "FUN_08000c8c",
                "FUN_080025ec",
                "FUN_0800260c"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_080025e0"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "returnZero_080040e8"
            },
            "code": "int returnZero_080040e8() {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "FUN_0800573c"
            ],
            "imported": false,
            "current_name": "returnZero_080040e8"
        },
        "FUN_08000a00": {
            "renaming": {
                "FUN_08000a00": "update_data_08000a00",
                "param_1": "data_address",
                "param_2": "destination_address",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "combined_value",
                "uVar2": "shifted_value"
            },
            "code": "int update_data_08000a00(int data_address, int destination_address, int value1, int value2)\n{\n    int combined_value = combine_values(*(char *)(data_address + 0xb), *(char *)(data_address + 0xc), value1, value2, value2);\n    int shifted_value = (combined_value << 0x14) >> 0x18;\n    if (*(char *)(data_address + 0xd) == -1)\n    {\n        *(short *)(destination_address + shifted_value * 2) = (short)(1 << (combined_value & 0xf)) | *(short *)(destination_address + shifted_value * 2);\n    }\n    else\n    {\n        *(short *)(destination_address + shifted_value * 2) = *(short *)(destination_address + shifted_value * 2) & ~(short)(1 << (combined_value & 0xf));\n    }\n    *(char *)(data_address + 0x49) = 6;\n    calculate_and_update_crc(data_address);\n    return 8;\n}",
            "called": [
                "FUN_08004640",
                "FUN_0800076c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a00",
            "calling": [
                "FUN_08000b54"
            ],
            "imported": false,
            "current_name": "update_data_08000a00"
        },
        "FUN_080047c0": {
            "renaming": {
                "FUN_080047c0": "run_or_continue_program_080047c0",
                "param_1": "program_state",
                "iVar1": "binary_digit_count"
            },
            "code": "void run_or_continue_program_080047c0(int program_state)\n{\n  int binary_digit_count;\n  if (*(int *)(program_state + 8) != 0) {\n    (**(code **)(program_state + 0xc))();\n    return;\n  }\n  run_program_08005760();\n  binary_digit_count = get_binary_digit_count_08004678();\n  if (*(int *)(PTR_DAT_080047ec + binary_digit_count * 0x14 + 0xc) != 0) {\n    run_or_continue_program_080047c0(program_state);\n  }\n  return;\n}",
            "called": [
                "FUN_08005760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047c0",
            "calling": [
                "FUN_080047d0"
            ],
            "imported": false,
            "current_name": "run_or_continue_program_080047c0"
        },
        "FUN_08005374": {
            "renaming": {
                "FUN_08005374": "allocate_and_initialize_array_of_structs_08005374",
                "param_1": "mem_block",
                "param_2": "num_structs",
                "puVar1": "struct_array",
                "iVar2": "struct_size"
            },
            "code": "undefined4 * allocate_and_initialize_array_of_structs_08005374(undefined4 mem_block, int num_structs) {\n  int struct_size = (num_structs - 1) * 0x68;\n  undefined4 *struct_array = (undefined4 *)allocate_and_set_08004978(mem_block, struct_size + 0x74);\n  if (struct_array != (undefined4 *)0x0) {\n    *struct_array = 0;\n    struct_array[1] = num_structs;\n    struct_array[2] = struct_array + 3;\n    fill_array_with_value_080048cc(struct_array + 3, 0, struct_size + 0x68);\n  }\n  return struct_array;\n}",
            "called": [
                "FUN_080048cc",
                "FUN_08004978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005374",
            "calling": [
                "FUN_08005400"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_array_of_structs_08005374"
        },
        "FUN_08004d9c": {
            "renaming": {
                "FUN_08004d9c": "convert_and_copy_string_08004d9c",
                "param_1": "output_buffer",
                "param_2": "input_buffer",
                "param_3": "input_length",
                "param_4": "output_function",
                "param_5": "output_position",
                "bVar1": "first_byte",
                "iVar2": "loop_index",
                "puVar3": "byte_pointer",
                "iVar4": "function_result",
                "puVar5": "hex_digits",
                "uVar6": "base",
                "ppuVar7": "pointer_to_pointer",
                "uVar8": "first_word",
                "uVar9": "second_word",
                "puVar10": "output_pointer",
                "puVar11": "input_pointer",
                "local_24": "output_length"
            },
            "code": "\nuint convert_and_copy_string_08004d9c(undefined4 output_buffer,uint *input_buffer,undefined4 input_length,code *output_function,uint **output_position)\n\n{\n  byte first_byte;\n  int loop_index;\n  uint *byte_pointer;\n  int function_result;\n  undefined *hex_digits;\n  uint base;\n  uint **pointer_to_pointer;\n  uint first_word;\n  uint second_word;\n  undefined *output_pointer;\n  undefined *input_pointer;\n  uint output_length [2];\n  \n  first_byte = *(byte *)(input_buffer + 6);\n  input_pointer = (undefined *)((int)input_buffer + 0x43);\n  if (first_byte != 0x6e) {\n    if (first_byte < 0x6f) {\n      if (first_byte != 99) {\n        if (first_byte < 100) {\n          if (first_byte == 0) goto LAB_08004f56;\n          if (first_byte != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)input_buffer + 0x45) = 0x58;\n          hex_digits = PTR_s_0123456789ABCDEF_08004fd8;\nLAB_08004ee6:\n          base = *input_buffer;\n          byte_pointer = *output_position;\n          *output_position = byte_pointer + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            first_word = (uint)*(ushort *)byte_pointer;\n          }\n          else {\n            first_word = *byte_pointer;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *input_buffer = base | 0x20;\n          }\n          if (first_word == 0) {\n            *input_buffer = *input_buffer & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)input_buffer + 0x43) = 0;\n        }\n        else {\n          if ((first_byte != 100) && (first_byte != 0x69)) goto LAB_08004dcc;\n          first_word = *input_buffer;\n          byte_pointer = *output_position;\n          if ((first_word & 0x80) == 0) {\n            *output_position = byte_pointer + 1;\n            if ((first_word & 0x40) == 0) goto LAB_08004dec;\n            first_word = (uint)(short)*(ushort *)byte_pointer;\n          }\n          else {\n            *output_position = byte_pointer + 1;\nLAB_08004dec:\n            first_word = *byte_pointer;\n          }\n          if ((int)first_word < 0) {\n            first_word = -first_word;\n            *(undefined *)((int)input_buffer + 0x43) = 0x2d;\n          }\n          base = 10;\n          hex_digits = PTR_s_0123456789ABCDEF_08004fd8;\n        }\n        second_word = input_buffer[1];\n        input_buffer[2] = second_word;\n        output_pointer = input_pointer;\n        if ((int)second_word < 0) {\n          if (first_word != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(undefined *)((int)input_buffer + 0x42) = *hex_digits;\n          output_pointer = (undefined *)((int)input_buffer + 0x42);\n        }\n        else {\n          *input_buffer = *input_buffer & 0xfffffffb;\n          if (first_word == 0) {\n            if (second_word != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              second_word = first_word / base;\n              output_pointer = output_pointer + -1;\n              *output_pointer = hex_digits[first_word - base * second_word];\n              first_word = second_word;\n            } while (second_word != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*input_buffer << 0x1f) < 0)) && ((int)input_buffer[1] <= (int)input_buffer[4]))\n        {\n          output_pointer[-1] = 0x30;\n          output_pointer = output_pointer + -1;\n        }\n        input_buffer[4] = (int)input_pointer - (int)output_pointer;\n        input_pointer = output_pointer;\n        goto LAB_08004ec2;\n      }\n      byte_pointer = *output_position;\n      *output_position = byte_pointer + 1;\n      *(char *)((int)input_buffer + 0x42) = (char)*byte_pointer;\nLAB_08004e2c:\n      input_pointer = (undefined *)((int)input_buffer + 0x42);\n      first_word = 1;\n    }\n    else {\n      if (first_byte != 0x73) {\n        if (first_byte < 0x74) {\n          if (first_byte == 0x6f) {\nLAB_08004e52:\n            first_word = *input_buffer;\n            byte_pointer = *output_position;\n            if ((first_word & 0x80) == 0) {\n              *output_position = byte_pointer + 1;\n              if ((first_word & 0x40) == 0) goto LAB_08004e60;\n              first_word = (uint)*(ushort *)byte_pointer;\n            }\n            else {\n              *output_position = byte_pointer + 1;\nLAB_08004e60:\n              first_word = *byte_pointer;\n            }\n            hex_digits = PTR_s_0123456789ABCDEF_08004fd8;\n            if (first_byte == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (first_byte == 0x70) {\n            *input_buffer = *input_buffer | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)input_buffer + 0x45) = 0x78;\n            hex_digits = PTR_s_0123456789abcdef_08004fd4;\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (first_byte == 0x75) goto LAB_08004e52;\n          if (first_byte == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)input_buffer + 0x42) = first_byte;\n        goto LAB_08004e2c;\n      }\n      byte_pointer = *output_position;\n      *output_position = byte_pointer + 1;\n      input_pointer = (undefined *)*byte_pointer;\n      loop_index = find_byte_sequence_08000230(input_pointer,0,input_buffer[1]);\n      if (loop_index != 0) {\n        input_buffer[1] = loop_index - (int)input_pointer;\n      }\n      first_word = input_buffer[1];\n    }\n    input_buffer[4] = first_word;\n    *(undefined *)((int)input_buffer + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  first_word = *input_buffer;\n  pointer_to_pointer = (uint **)*output_position;\n  base = input_buffer[5];\n  if ((first_word & 0x80) == 0) {\n    *output_position = (uint *)(pointer_to_pointer + 1);\n    byte_pointer = *pointer_to_pointer;\n    if ((first_word & 0x40) == 0) goto LAB_08004f42;\n    *(short *)byte_pointer = (short)base;\n  }\n  else {\n    *output_position = (uint *)(pointer_to_pointer + 1);\n    byte_pointer = *pointer_to_pointer;\nLAB_08004f42:\n    *byte_pointer = base;\n  }\nLAB_08004f56:\n  input_buffer[4] = 0;\nLAB_08004ec2:\n  loop_index = convert_and_copy_string_08004d9c_08004cb0(output_buffer,input_buffer,output_length,input_length,output_function);\n  if ((loop_index == -1) || (loop_index = (*output_function)(output_buffer,input_length,input_pointer,input_buffer[4]), loop_index == -1)) {\nLAB_08004ed6:\n    first_word = 0xffffffff;\n  }\n  else {\n    if ((int)(*input_buffer << 0x1e) < 0) {\n      for (loop_index = 0; loop_index < (int)(input_buffer[3] - output_length[0]); loop_index = loop_index + 1) {\n        function_result = (*output_function)(output_buffer,input_length,(int)input_buffer + 0x19,1);\n        if (function_result == -1) goto LAB_08004ed6;\n      }\n    }\n    first_word = input_buffer[3];\n    if ((int)input_buffer[3] < (int)output_length[0]) {\n      first_word = output_length[0];\n    }\n  }\n  return first_word;\n}\n\n",
            "called": [
                "FUN_08004cb0",
                "FUN_08000230"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d9c",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "convert_and_copy_string_08004d9c"
        },
        "FUN_08003750": {
            "renaming": {
                "FUN_08003750": "subtract_four_from_param_08003750",
                "param_1": "parameter",
                "return": "result"
            },
            "code": "int subtract_four_from_param_08003750(int parameter){\n    int result = parameter - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003750",
            "calling": [
                "FUN_0800376e",
                "FUN_08003754"
            ],
            "imported": false,
            "current_name": "subtract_four_from_param_08003750"
        },
        "FUN_080014ec": {
            "renaming": {
                "FUN_080014ec": "parse_input_080014ec",
                "param_1": "input",
                "param_2": "size",
                "param_3": "flag",
                "param_4": "output",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "code": "uint32_t parse_input_080014ec(uint32_t **input, uint32_t *size, int flag, uint32_t *output)\n{\n    uint32_t result;\n    uint32_t *ptr;\n    \n    if (*(char *)((int)input + 0x3d) == '(') {\n        if (size == NULL) {\n            result = 1;\n        }\n        else if (flag == 0) {\n            result = 1;\n        }\n        else if (*(char *)(input + 0xf) == '\\x01') {\n            result = 2;\n        }\n        else {\n            *(undefined *)(input + 0xf) = 1;\n            ptr = *input;\n            if ((*ptr & 1) == 0) {\n                *ptr = *ptr | 1;\n            }\n            **input = **input & 0xfffff7ff;\n            *(undefined *)((int)input + 0x3d) = 0x2a;\n            *(undefined *)((int)input + 0x3e) = 0x20;\n            result = 0;\n            input[0x10] = NULL;\n            input[9] = size;\n            *(short *)((int)input + 0x2a) = (short)flag;\n            input[0xb] = output;\n            *(undefined2 *)(input + 10) = *(undefined2 *)((int)input + 0x2a);\n            *(undefined *)(input + 0xf) = 0;\n            (*input)[1] = (*input)[1] | 0x700;\n        }\n    }\n    else {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ec",
            "calling": [
                "FUN_08003880"
            ],
            "imported": false,
            "current_name": "parse_input_080014ec"
        },
        "FUN_080048dc": {
            "renaming": {
                "FUN_080048dc": "insert_node_080048dc",
                "param_1": "root",
                "param_2": "key",
                "param_3": "left_child",
                "param_4": "right_child",
                "puVar1": "node_pointer",
                "piVar2": "temp_pointer",
                "extraout_r1": "new_node",
                "ppiVar3": "previous_node",
                "ppiVar4": "current_node",
                "ppiVar5": "root_node",
                "ppiVar6": "node_to_delete",
                "ppiVar7": "new_node_pointer",
                "bVar8": "is_last_node"
            },
            "code": "void insert_node_080048dc(int *root, int key, int left_child, int right_child) {\n  int **current_node = (int **)(root - 1);\n  if (key == 0) {\n    return;\n  }\n  if (*current_node == NULL) {\n    *current_node = (int *)malloc(12);\n    **current_node = key;\n    *(*current_node + 4) = left_child;\n    *(*current_node + 8) = right_child;\n    return;\n  }\n  int **previous_node = NULL;\n  while (current_node != NULL) {\n    previous_node = current_node;\n    if (key < **current_node) {\n      current_node = (int **)(*current_node + 4);\n    } else {\n      current_node = (int **)(*current_node + 8);\n    }\n  }\n  int *new_node = (int *)malloc(12);\n  *new_node = key;\n  *(new_node + 4) = left_child;\n  *(new_node + 8) = right_child;\n  if (key < **previous_node) {\n    *previous_node = new_node;\n  } else {\n    *(previous_node + 1) = new_node;\n  }\n}",
            "called": [
                "FUN_0800557c",
                "FUN_0800557e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048dc",
            "calling": [
                "FUN_080050d0",
                "FUN_080051ac"
            ],
            "imported": false,
            "current_name": "insert_node_080048dc"
        },
        "FUN_08003754": {
            "renaming": {
                "FUN_08003754": "execute_callback_08003754",
                "param_1": "arg1",
                "iVar1": "callback_ptr",
                "subtract_four_from_param_08003750": "subtract_four_from_param"
            },
            "code": "void execute_callback_08003754(int arg1) {\n  int callback_ptr = subtract_four_from_param_08003750();\n  if ((*(code **)(callback_ptr + 0x48) != (code *)0x0) && (*(char *)(arg1 + 0x18) == '\\x01')) {\n    (**(code **)(callback_ptr + 0x48))(callback_ptr,0);\n  }\n  return;\n}",
            "called": [
                "FUN_08003750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003754",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "execute_callback_08003754"
        },
        "FUN_08001578": {
            "renaming": {
                "FUN_08001578": "set_bit_and_flags_08001578",
                "param_1": "data_ptr",
                "puVar1": "data",
                "PTR_": "data_",
                "DAT_": "data_"
            },
            "code": "int set_bit_and_flags_08001578(uint **PTR_ptr) {\\n\\\n        uint *data = *PTR_ptr;\\n\\\n        if (*(char *)((int)PTR_ptr + 0x3d) != \" \") {\\n\\\n            return 2;\\n\\\n        }\\n\\\n        *(undefined *)((int)PTR_ptr + 0x3d) = 0x28;\\n\\\n        if ((*data & 1) == 0) {\\n\\\n            *data |= 1;\\n\\\n        }\\n\\\n        **PTR_ptr |= 0x400;\\n\\\n        (*PTR_ptr)[1] |= 0x300;\\n\\\n        return 0;\\n\\\n    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001578",
            "calling": [
                "FUN_08003900",
                "FUN_080038d0"
            ],
            "imported": false,
            "current_name": "set_bit_and_flags_08001578"
        },
        "FUN_08004844": {
            "renaming": {
                "FUN_08004844": "calculate_result_08004844",
                "param_1": "input_value",
                "param_2": "N/A",
                "DAT_0800485c": "global_flag",
                "CONCAT44": "N/A"
            },
            "code": "unsigned long long calculate_result_08004844(unsigned int input_value) {\n  if (DAT_0800485c != 0) {\n    return CONCAT44(input_value, 2);\n  }\n  return (unsigned long long)input_value << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004844",
            "calling": [
                "FUN_080047fe"
            ],
            "imported": false,
            "current_name": "calculate_result_08004844"
        },
        "FUN_0800318c": {
            "renaming": {
                "FUN_0800318c": "get_data_at_index_0800318c",
                "param_1": "index",
                "DAT_080031d0": "data_0",
                "DAT_080031d4": "data_2",
                "DAT_080031d8": "data_3",
                "DAT_080031dc": "data_4",
                "DAT_080031e0": "data_5",
                "DAT_080031e4": "data_6",
                "DAT_080031e8": "data_7",
                "DAT_080031ec": "data_8",
                "DAT_080031f0": "data_9",
                "DAT_080031f4": "data_10",
                "DAT_080031f8": "data_1"
            },
            "code": "int get_data_at_index_0800318c(int index) {\n    switch(index) {\n        case 0:\n            return DAT_080031d0;\n        case 1:\n            return DAT_080031f8;\n        case 2:\n            return DAT_080031d4;\n        case 3:\n            return DAT_080031d8;\n        case 4:\n            return DAT_080031dc;\n        case 5:\n            return DAT_080031e0;\n        case 6:\n            return DAT_080031e4;\n        case 7:\n            return DAT_080031e8;\n        case 8:\n            return DAT_080031ec;\n        case 9:\n            return DAT_080031f0;\n        case 10:\n            return DAT_080031f4;\n        default:\n            return 0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800318c",
            "calling": [
                "FUN_080041bc"
            ],
            "imported": false,
            "current_name": "get_data_at_index_0800318c"
        },
        "FUN_080047d0": {
            "renaming": {
                "FUN_080047d0": "check_and_run_program_if_needed_080047d0",
                "iVar1": "binary_digit_count",
                "get_binary_digit_count_08004678": "get_binary_digit_count",
                "PTR_DAT_080047ec": "program_status",
                "run_or_continue_program_080047c0": "run_or_continue_program"
            },
            "code": "void check_and_run_program_if_needed_080047d0()\n{\n  int binary_digit_count = get_binary_digit_count_08004678();\n  int* PTR_DAT_080047ec = PTR_DAT_080047ec + binary_digit_count * 0x14 + 0xc;\n  if (*PTR_DAT_080047ec != 0) {\n    run_or_continue_program();\n  }\n  return;\n}",
            "called": [
                "FUN_08004678",
                "FUN_080047c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047d0",
            "calling": [
                "FUN_080011a4"
            ],
            "imported": false,
            "current_name": "check_and_run_program_if_needed_080047d0"
        },
        "FUN_080040f8": {
            "renaming": {
                "FUN_080040f8": "run_infinite_loop_080040f8"
            },
            "code": "void run_infinite_loop_080040f8(void)\n{\n  while( true ) {\n    // Do nothing block with infinite loop\n  }\n}",
            "called": [
                "FUN_080040f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040f8",
            "calling": [
                "FUN_080040f8",
                "FUN_080051ac"
            ],
            "imported": false,
            "current_name": "run_infinite_loop_080040f8"
        },
        "FUN_0800500c": {
            "renaming": {
                "FUN_0800500c": "find_and_set_offset_0800500c",
                "param_1": "result",
                "param_2": "input",
                "puVar1": "data_pointer",
                "iVar2": "offset"
            },
            "code": "void find_and_set_offset_0800500c(int *result, undefined4 input) {\n  undefined *data_pointer;\n  int offset;\n  data_pointer = PTR_DAT_08005028;\n  *(undefined4 *)PTR_DAT_08005028 = 0;\n  offset = findOffset_08004094(input);\n  if ((offset == -1) && (*(int *)data_pointer != 0)) {\n    *result = *(int *)data_pointer;\n  }\n  return;\n}",
            "called": [
                "FUN_08004094"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800500c",
            "calling": [
                "FUN_08004978"
            ],
            "imported": false,
            "current_name": "find_and_set_offset_0800500c"
        },
        "FUN_080023b4": {
            "renaming": {
                "FUN_080023b4": "calculate_result_080023b4",
                "in_r3": "input_parameter",
                "uVar1": "data",
                "uVar2": "temp",
                "value": "result",
                "flag": "flag",
                "divisor": "divisor"
            },
            "code": "uint calculate_result_080023b4(void)\n{\n  uint result;\n  uint data = *(uint *)(DAT_0800247c + 8);\n  uint flag = data & 0xc;\n  if (flag == 4) {\n    result = DAT_08002484;\n  }\n  else if (flag != 8) {\n    result = DAT_08002480;\n  }\n  else {\n    uint value = *(uint *)(DAT_0800247c + 4) & 0x3f;\n    if ((*(uint *)(DAT_0800247c + 4) & 0x400000) == 0) {\n      uint temp = (uint)(*(int *)(DAT_0800247c + 4) << 0x11) >> 0x17;\n      value = get_result_080002d0(temp * 16000000, (((uint)(temp * 0x20 < temp) * -0x3f - (uint)(temp * 0x7c0 < temp * 0x1f)) * 8 + (uint)CARRY4(temp * 0x3d08,temp)) * 0x400 | temp * 0x3d09 >> 0x16, value, 0, in_r3);\n    }\n    else {\n      uint temp = (uint)(*(int *)(DAT_0800247c + 4) << 0x11) >> 0x17;\n      value = get_result_080002d0(temp * 8000000, (((uint)(temp * 0x20 < temp) * -0x3f - (uint)(temp * 0x7c0 < temp * 0x1f)) * 8 + (uint)CARRY4(temp * 0x3d08,temp)) * 0x200, value, 0, in_r3);\n    }\n    uint divisor = ((((uint)(*(int *)(DAT_0800247c + 4) << 0xe) >> 0x1e) + 1) * 2);\n    result = value / divisor;\n  }\n  return result;\n}",
            "called": [
                "FUN_080002d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080023b4",
            "calling": [
                "FUN_08002488"
            ],
            "imported": false,
            "current_name": "calculate_result_080023b4"
        },
        "FUN_080011a4": {
            "renaming": {
                "FUN_080011a4": "update_and_run_program_if_needed_080011a4",
                "param_1": "parameter",
                "DAT_080011bc": "data_pointer",
                "PTR_uint_4": "uint_pointer"
            },
            "code": "void update_and_run_program_if_needed_080011a4(uint parameter)\n{\n  uint* DAT_080011bc = (uint*)(DAT_080011bc + 0x14);\n  if ((*DAT_080011bc & parameter) != 0) {\n    *DAT_080011bc = parameter;\n    check_and_run_program_if_needed_080047d0();\n  }\n  return;\n}",
            "called": [
                "FUN_080047d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011a4",
            "calling": [],
            "imported": false,
            "current_name": "update_and_run_program_if_needed_080011a4"
        },
        "FUN_08001e68": {
            "renaming": {
                "FUN_08001e68": "process_input_08001e68",
                "param_1": "input_data",
                "puVar2": "data_ptr",
                "uVar3": "flag1",
                "uVar4": "flag2",
                "DAT_08001f38": "FLAG_MASK_1",
                "0x100": "FLAG_MASK_2",
                "0x10200": "FLAG_MASK_2",
                "0x10400": "FLAG_MASK_3",
                "0x10800": "FLAG_MASK_4",
                "cVar1": "c",
                "process_input_08001684": "process_input_part1",
                "0x3d": "char_pos",
                "0x3e": "next_char_pos",
                "0x2a": "short_pos",
                "0xc": "uint_pos"
            },
            "code": "void process_input_08001e68(uint **input_data){\n    uint *data_ptr = *input_data;\n    uint flag1 = data_ptr[5];\n    uint flag2 = data_ptr[1];\n    if (((flag1 & DAT_08001f38) != 0) && ((flag2 & 0x100) != 0)) {\n        input_data[16] = (uint *)((uint)input_data[16] | FLAG_1);\n        data_ptr[5] = 0xfffffeff;\n    }\n    if (((flag1 & FLAG_MASK_2) != 0) && ((flag2 & 0x100) != 0)) {\n        input_data[16] = (uint *)((uint)input_data[16] | FLAG_2);\n        (*input_data)[5] = 0xfffffdff;\n    }\n    if (((flag1 & FLAG_MASK_3) != 0) && ((flag2 & 0x100) != 0)) {\n        char c = *(char *)((int)input_data + 0x3d);\n        if (((*(char *)((int)input_data + 0x3e) == ' ') && (*(short *)((int)input_data + 0x2a) == 0)) && (((c == '!' || (c == ')')) || ((c == '(' && (input_data[0xc] == (uint *)0x21)))))) {\n            process_input_08001e68_08001684(input_data);\n        }\n        else {\n            input_data[16] = (uint *)((uint)input_data[16] | FLAG_3);\n            if (*(char *)((int)input_data + 0x3e) == '\\x10') {\n                **input_data = **input_data | 0x200;\n            }\n            (*input_data)[5] = 0xfffffbff;\n        }\n    }\n    if (((flag1 & FLAG_MASK_4) != 0) && ((flag2 & 0x100) != 0)) {\n        input_data[16] = (uint *)((uint)input_data[16] | FLAG_4);\n        (*input_data)[5] = 0xfffff7ff;\n    }\n    if (input_data[16] != (uint *)0x0) {\n        process_input_08001e68_08001ab0(input_data);\n    }\n    return;\n}",
            "called": [
                "FUN_08001684",
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e68",
            "calling": [],
            "imported": false,
            "current_name": "process_input_08001e68"
        },
        "FUN_080019a0": {
            "renaming": {
                "FUN_080019a0": "process_data_080019a0",
                "param_1": "data",
                "puVar1": "data_ptr",
                "DAT_08002a": "data_value",
                "PTR_08002c24": "do_nothing_08001902",
                "PTR_080012b0": "do_nothing_080015b8"
            },
            "code": "int process_data_080019a0(uint **data)\n{\n    uint *data_ptr;\n    short DAT_08002a = *(short *)((int)data + 0x2a);\n\n    if (DAT_08002a == 4) {\n        (*data)[1] &= 0xfffffbff;\n        data_ptr = data[9];\n        data[9] = (uint *)((int)data_ptr + 1);\n        *(char *)data_ptr = (char)(*data)[4];\n        *(short *)((int)data + 0x2a) = DAT_08002a - 1;\n    }\n    else if (DAT_08002a == 3) {\n        (*data)[1] &= 0xfffffbff;\n        **data &= 0xfffffbff;\n        data_ptr = data[9];\n        data[9] = (uint *)((int)data_ptr + 1);\n        *(char *)data_ptr = (char)(*data)[4];\n        *(short *)((int)data + 0x2a) = DAT_08002a - 1;\n    }\n    else if (DAT_08002a == 2) {\n        if ((int)data[0xb] - 1U < 2) {\n            **data &= 0xfffffbff;\n            **data |= 0x100;\n        }\n        else {\n            **data |= 0x200;\n        }\n        data_ptr = data[9];\n        data[9] = (uint *)((int)data_ptr + 1);\n        *(char *)data_ptr = (char)(*data)[4];\n        *(short *)((int)data + 0x2a) = DAT_08002a - 1;\n        data_ptr = data[9];\n        data[9] = (uint *)((int)data_ptr + 1);\n        *(char *)data_ptr = (char)(*data)[4];\n        *(short *)((int)data + 0x2a) = DAT_08002a - 1;\n        (*data)[1] &= 0xfffffcff;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        data[0xc] = (uint *)0x0;\n        if (*(char *)((int)data + 0x3e) == '@') {\n            *(undefined *)((int)data + 0x3e) = 0;\n            PTR_08002c24();\n        }\n        else {\n            *(undefined *)((int)data + 0x3e) = 0;\n            PTR_080012b0();\n        }\n    }\n    else {\n        data_ptr = data[9];\n        data[9] = (uint *)((int)data_ptr + 1);\n        *(char *)data_ptr = (char)(*data)[4];\n        *(short *)((int)data + 0x2a) = DAT_08002a - 1;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08001902",
                "FUN_080015b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019a0",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_data_080019a0"
        },
        "FUN_08003f24": {
            "renaming": {
                "FUN_08003f24": "execute_function_if_index_below_10_08003f24",
                "uVar1": "index",
                "PTR_DAT_08003f40": "function_pointer_array",
                "PTR_DAT_08003f44": "parameter_array",
                "code": "function_pointer",
                "undefined4": "uint",
                "**": "*",
                "*": "",
                "()": "",
                "+": "_array +",
                "*(uint *)(parameter_array + index * 4)": "parameter",
                "*(void (**)(uint))(function_pointer_array + index * 4)": "function_pointer"
            },
            "code": "void execute_function_if_index_below_10_08003f24(void)\n{\n  uint index = find_index();\n  if (index < 10) {\n    void (*function_pointer)(uint) = *(void (**)(uint))(PTR_DAT_08003f40 + index * 4);\n    uint parameter = *(uint *)(PTR_DAT_08003f44 + index * 4);\n    function_pointer(parameter);\n  }\n  return;\n}",
            "called": [
                "FUN_08003f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f24",
            "calling": [
                "FUN_08002f66"
            ],
            "imported": false,
            "current_name": "execute_function_if_index_below_10_08003f24"
        },
        "FUN_080046b4": {
            "renaming": {
                "FUN_080046b4": "calculate_results_and_swap_params_080046b4",
                "param_1": "input",
                "param_2": "limit",
                "param_3": "data1",
                "param_4": "data2",
                "puVar1": "ptr"
            },
            "code": "void calculate_results_and_swap_params_080046b4(int input, int limit, int* data1, int* data2)\n{\n    int* ptr = data1;\n    if (input != 1)\n    {\n        return;\n    }\n    if (limit == 0xffff)\n    {\n        *data1 = 6;\n        *(ptr + 3) = 0;\n        ptr[5] = 7;\n        *(ptr + 8) = 0;\n        ptr[10] = 8;\n        *(ptr + 13) = 0;\n        ptr[15] = 9;\n        *(ptr + 18) = 0;\n        ptr[20] = 10;\n        *(ptr + 23) = 0;\n        ptr[25] = 23;\n        *(ptr + 28) = 0;\n        ptr[30] = 23;\n        *(ptr + 33) = 0;\n        ptr[35] = 23;\n        *(ptr + 38) = 0;\n        ptr[40] = 23;\n        *(ptr + 43) = 0;\n        ptr[45] = 23;\n        *(ptr + 48) = 0;\n        ptr[50] = 40;\n        *(ptr + 53) = 0;\n        ptr[55] = 40;\n        *(ptr + 58) = 0;\n        ptr[60] = 40;\n        *(ptr + 63) = 0;\n        ptr[65] = 40;\n        *(ptr + 68) = 0;\n        ptr[70] = 40;\n        *(ptr + 73) = 0;\n        ptr[75] = 40;\n        *(ptr + 78) = 0;\n        calculate_result_and_swap_params_080047fe(0, PTR_LAB_0800468c_1_0800475c, data2, ptr, data2);\n    }\n    return;\n}",
            "called": [
                "FUN_080047fe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b4",
            "calling": [],
            "imported": false,
            "current_name": "calculate_results_and_swap_params_080046b4"
        },
        "FUN_0800160c": {
            "renaming": {
                "FUN_0800160c": "do_nothing_0800160c"
            },
            "code": "\nvoid do_nothing_0800160c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160c",
            "calling": [
                "FUN_08001bfc",
                "FUN_0800160e"
            ],
            "imported": false,
            "current_name": "do_nothing_0800160c"
        },
        "FUN_0800160e": {
            "renaming": {
                "FUN_0800160e": "add_to_buffer_0800160e",
                "param_1": "buffer_ptr",
                "cVar1": "last_char",
                "puVar2": "buffer",
                "do_nothing_0800160c": "do_nothing"
            },
            "code": "int add_to_buffer_0800160e(int *buffer_ptr)\n{\n    char last_char = *(char *)((int)buffer_ptr + 0x3d);\n    if (*(short *)((int)buffer_ptr + 0x2a) != 0) {\n        undefined *buffer = (undefined *)buffer_ptr[9];\n        buffer_ptr[9] = (int)(buffer + 1);\n        *buffer = (char)*(undefined4 *)(*buffer_ptr + 0x10);\n        *(short *)((int)buffer_ptr + 0x2a) = *(short *)((int)buffer_ptr + 0x2a) - 1;\n        if ((*(short *)((int)buffer_ptr + 0x2a) == 0) && (last_char == '*')) {\n            *(uint *)(*buffer_ptr + 4) = *(uint *)(*buffer_ptr + 4) & 0xfffffbff;\n            buffer_ptr[0xc] = 0x22;\n            *(undefined *)((int)buffer_ptr + 0x3d) = 0x28;\n            do_nothing();\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_0800160c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800160e",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "add_to_buffer_0800160e"
        },
        "FUN_0800293e": {
            "renaming": {
                "FUN_0800293e": "do_nothing_0800293e"
            },
            "code": "\nvoid do_nothing_0800293e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800293e",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_0800293e"
        },
        "FUN_08000e18": {
            "renaming": {
                "FUN_08000e18": "update_data_08000e18",
                "PTR_DAT_08000e2c": "data_byte_ptr",
                "PTR_DAT_08000e28": "data_ptr_location"
            },
            "code": "void update_data_08000e18() {\n    uint8_t byte_value = *PTR_DAT_08000e2c;\n    uint32_t* data_ptr = (uint32_t*)PTR_DAT_08000e28;\n    *data_ptr += byte_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e18",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "update_data_08000e18"
        },
        "FUN_08003486": {
            "renaming": {
                "FUN_08003486": "update_data_flag_08003486",
                "param_1": "flag",
                "param_2": "bit_mask",
                "param_3": "param_2",
                "local_24": "bit_value",
                "local_18": "local_18",
                "local_20": "local_20",
                "local_1c": "local_1c",
                "uVar1": "flag_value",
                "set_flag_080031fc": "set_flag_value",
                "update_data_08000fb4": "update_data"
            },
            "code": "void update_data_flag_08003486(uint8_t flag, uint16_t bit_mask, uint32_t param_2, uint32_t param_3) {\n  uint8_t flag_value = set_flag_080031fc(flag);\n  uint16_t bit_value = 1 << (bit_mask & 0xf) & 0xffff;\n  uint32_t local_18 = 2;\n  uint32_t local_20 = param_2;\n  uint32_t local_1c = param_3;\n  update_data_08000fb4(local_18, &bit_value, flag_value);\n  return;\n}",
            "called": [
                "FUN_08000fb4",
                "FUN_080031fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003486",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "update_data_flag_08003486"
        },
        "FUN_08005662": {
            "renaming": {
                "FUN_08005662": "process_and_update_input_08005662",
                "param_1": "input",
                "param_2": "data",
                "iVar1": "processed_input",
                "uVar2": "updated_flags",
                "bVar3": "input_processing_failed"
            },
            "code": "void process_and_update_input_08005662(int input, int* data)\n{\n  int processed_input = process_input(input, *(short *)(data + 0xe));\n  bool input_processing_failed = processed_input == -1;\n  ushort updated_flags;\n  if (input_processing_failed) {\n    updated_flags = *(ushort *)(data + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(data + 0x54) = processed_input;\n    updated_flags = *(ushort *)(data + 0xc) | 0x1000;\n  }\n  if (input_processing_failed) {\n    *(ushort *)(data + 0xc) = updated_flags;\n  }\n  else {\n    *(ushort *)(data + 0xc) = updated_flags;\n  }\n  return;\n}",
            "called": [
                "FUN_08005718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005662",
            "calling": [],
            "imported": false,
            "current_name": "process_and_update_input_08005662"
        },
        "FUN_080042ac": {
            "renaming": {
                "FUN_080042ac": "validate_input_and_update_080042ac",
                "param_1": "input_param",
                "iVar1": "validation_result",
                "uVar2": "updated_index",
                "local_9": "input_value"
            },
            "code": "void validate_input_and_update_080042ac(int input_param) {\n  int validation_result;\n  ushort updated_index;\n  undefined input_value;\n\n  validation_result = validate_and_get_input(input_param, &input_value);\n  if ((validation_result == 0) &&\n     (updated_index = *(short *)(input_param + 100) + 1U & 0x3f, updated_index != *(ushort *)(input_param + 0x66))) {\n    *(undefined *)(*(int *)(input_param + 0x60) + (uint)*(ushort *)(input_param + 100)) = input_value;\n    *(ushort *)(input_param + 100) = updated_index;\n  }\n  return;\n}",
            "called": [
                "FUN_08003e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042ac",
            "calling": [],
            "imported": false,
            "current_name": "validate_input_and_update_080042ac"
        },
        "FUN_08001864": {
            "renaming": {
                "FUN_08001864": "process_input_08001864",
                "param_1": "input",
                "puVar1": "input_ptr"
            },
            "code": "uint process_input_08001864(uint **input)\n{\n  uint *input_ptr;\n  input_ptr = input[11];\n  if (*(char *)((int)input + 61) == '!') {\n    if (*(short *)((int)input + 42) == 0) {\n      if (((input_ptr == (uint *)0x4) || (input_ptr == (uint *)0x8)) || (input_ptr == (uint *)0xffff0000)) {\n        (*input)[1] = (*input)[1] & 0xfffff8ff;\n        **input = **input | 0x200;\n        input[12] = (uint *)0x0;\n        *(undefined *)((int)input + 61) = 0x20;\n        if (*(char *)((int)input + 62) == '@') {\n          *(undefined *)((int)input + 62) = 0;\n          do_nothing_08001718();\n        }\n        else {\n          *(undefined *)((int)input + 62) = 0;\n          do_nothing_080015b6();\n        }\n      }\n      else {\n        (*input)[1] = (*input)[1] & 0xfffff8ff;\n        input[12] = (uint *)0x11;\n        *(undefined *)((int)input + 62) = 0;\n        *(undefined *)((int)input + 61) = 0x20;\n        do_nothing_080015b6();\n      }\n    }\n    else {\n      input_ptr = input[9];\n      input[9] = (uint *)((int)input_ptr + 1);\n      (*input)[4] = (uint)*(byte *)input_ptr;\n      *(short *)((int)input + 42) = *(short *)((int)input + 42) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001864",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_input_08001864"
        },
        "FUN_08000f2c": {
            "renaming": {
                "FUN_08000f2c": "set_flag_if_param_is_4_08000f2c",
                "param_1": "param",
                "DAT_08000f48": "flag"
            },
            "code": "void set_flag_if_param_is_4_08000f2c(int param) {\n  if (param != 4) {\n    *DAT_08000f48 = *DAT_08000f48 & 0xfffffffb;\n    return;\n  }\n  *DAT_08000f48 = *DAT_08000f48 | 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f2c",
            "calling": [
                "FUN_08000c8c"
            ],
            "imported": false,
            "current_name": "set_flag_if_param_is_4_08000f2c"
        },
        "FUN_08000ec4": {
            "renaming": {
                "FUN_08000ec4": "set_bit_at_position_08000ec4",
                "param_1": "position",
                "DAT_08000edc": "data_start_ptr"
            },
            "code": "void set_bit_at_position_08000ec4(uint position) {\n  if (position >= 0) {\n    int* data_ptr = (int *)(DAT_08000edc + (position >> 5) * 4);\n    int bit_position = position & 0x1f;\n    int bit_mask = 1 << bit_position;\n    *data_ptr = bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ec4",
            "calling": [
                "FUN_08003e54",
                "FUN_08003eac"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_08000ec4"
        },
        "FUN_08004338": {
            "renaming": {
                "FUN_08004338": "calculate_checksum_if_data_available_08004338",
                "DAT_0800435c": "data_available",
                "PTR_DAT_08004360": "data",
                "calculate_checksum_08004240": "calculate_checksum"
            },
            "code": "void calculate_checksum_if_data_available_08004338(void)\n{\n  if (DAT_0800435c != 0) {\n    calculate_checksum_08004240(PTR_DAT_08004360);\n  }\n  return;\n}",
            "called": [
                "FUN_08004240"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004338",
            "calling": [
                "FUN_08004658"
            ],
            "imported": false,
            "current_name": "calculate_checksum_if_data_available_08004338"
        },
        "FUN_080005e0": {
            "renaming": {
                "FUN_080005e0": "trigger_system_interrupt_080005e0",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void trigger_system_interrupt_080005e0(void)\n{\n  int interrupt_number = 0x3f;\n  software_interrupt(interrupt_number);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e0",
            "calling": [
                "FUN_080005e4"
            ],
            "imported": false,
            "current_name": "trigger_system_interrupt_080005e0"
        },
        "FUN_080005e4": {
            "renaming": {
                "FUN_080005e4": "handle_system_interrupts_080005e4",
                "param_1": "interrupt_type",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uVar1": "result"
            },
            "code": "int handle_system_interrupts_080005e4(int interrupt_type, int param1, int param2, int param3, int param4) {\n  if (*(int *)PTR_DAT_080005fc != 0) {\n    return 0;\n  }\n  int result = trigger_system_interrupt(interrupt_type, param1, 0, 0, param4);\n  return result;\n}",
            "called": [
                "FUN_080005e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e4",
            "calling": [
                "FUN_08000c4c"
            ],
            "imported": false,
            "current_name": "handle_system_interrupts_080005e4"
        },
        "FUN_0800076c": {
            "renaming": {
                "FUN_0800076c": "calculate_and_update_crc_0800076c",
                "param_1": "data_ptr",
                "param_2": "data_len",
                "param_3": "crc_offset",
                "param_4": "crc_value",
                "uVar1": "calculated_crc",
                "iVar2": "offset",
                "uVar3": "data_index"
            },
            "code": "void calculate_and_update_crc_0800076c(int **data_ptr, int data_len, int crc_offset, int crc_value) {\n  int data_index = (uint)*(byte *)((int)data_ptr + data_len);\n  int calculated_crc = calculate_crc16_ccitt(data_ptr, data_index, crc_offset, crc_value, crc_value);\n  *(char *)((int)data_ptr + data_index + 9) = (char)(calculated_crc >> 8);\n  data_index = (data_index + 1) & 0xff;\n  *(char *)((int)data_ptr + data_index + 9) = (char)calculated_crc;\n  *(char *)((int)data_ptr + data_len) = (char)data_index + 1;\n  if (data_ptr[0][5] < 4) {\n    (**(code **)(*data_ptr)[4])(*data_ptr, (int)data_ptr + 9, *(undefined *)((int)data_ptr + data_len));\n  }\n  if (data_ptr[0][6] > 1) {\n    decode_data(data_ptr[0][6], 1);\n  }\n  if (data_ptr[0][5] < 4) {\n    while ((**(code **)(*data_ptr)[0xc])() >= 0) {}\n  }\n  *(undefined *)((int)data_ptr + data_len) = 0;\n  int offset = get_value_and_return() + (uint)*(ushort *)((int)data_ptr + 0x56);\n  data_ptr[0x17] = (int *)offset;\n  *(short *)((int)data_ptr + 0x52) = *(short *)((int)data_ptr + 0x52) + 1;\n}\n",
            "called": [
                "FUN_08000728",
                "FUN_08004204",
                "FUN_080041bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800076c",
            "calling": [
                "FUN_08000a7a",
                "FUN_080008e2",
                "FUN_08000a4e",
                "FUN_08000b04",
                "FUN_08000b54",
                "FUN_08000a00",
                "FUN_08000998"
            ],
            "imported": false,
            "current_name": "calculate_and_update_crc_0800076c"
        },
        "FUN_080015b6": {
            "renaming": {
                "FUN_080015b6": "do_nothing_080015b6"
            },
            "code": "\nvoid do_nothing_080015b6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b6",
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "imported": false,
            "current_name": "do_nothing_080015b6"
        },
        "FUN_08004460": {
            "renaming": {
                "FUN_08004460": "set_value_at_index_08004460",
                "param_1": "array_index",
                "param_2": "value_index",
                "uVar1": "value"
            },
            "code": "void set_value_at_index_08004460(int array_index, uint value_index) {\n  undefined2 value;\n  if (value_index < 0x60) {\n    value = *(undefined2 *)(PTR_DAT_08004478 + value_index * 2);\n  }\n  else {\n    value = 0xffff;\n  }\n  *(undefined2 *)(array_index + 300) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004460",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "set_value_at_index_08004460"
        },
        "FUN_080015b8": {
            "renaming": {
                "FUN_080015b8": "do_nothing_080015b8"
            },
            "code": "\nvoid do_nothing_080015b8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b8",
            "calling": [
                "FUN_080019a0",
                "FUN_08001904"
            ],
            "imported": false,
            "current_name": "do_nothing_080015b8"
        },
        "FUN_08001198": {
            "renaming": {
                "FUN_08001198": "set_value_at_address_08001198",
                "param_1": "address",
                "param_2": "value",
                "param_3": "shift",
                "*(int *)(param_1 + 0x18)": "value_at_address"
            },
            "code": "void set_value_at_address_08001198(int address, int value, int shift) {\n  if (shift == 0) {\n    *(int *)(address + 0x18) = value << 0x10;\n    return;\n  }\n  *(int *)(address + 0x18) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001198",
            "calling": [
                "FUN_080034b6"
            ],
            "imported": false,
            "current_name": "set_value_at_address_08001198"
        },
        "FUN_08003138": {
            "renaming": {
                "FUN_08003138": "get_bit_08003138",
                "param_1": "value",
                "param_2": "bit_index",
                "PTR_": "ptr",
                "DAT_": "shifted_value"
            },
            "code": "uint get_bit_08003138(uint value, int bit_index)\n{\n    uint* PTR_ = (uint*)(bit_index + ((value << 0x18) >> 0x1c) * 4);\n    uint DAT_ = *PTR_ >> (value & 0xf);\n    return DAT_ & 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003138",
            "calling": [
                "FUN_080041bc",
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "get_bit_08003138"
        },
        "FUN_08000300": {
            "renaming": {
                "FUN_08000300": "calculate_division_and_modulo_08000300",
                "param_1": "dividend_low",
                "param_2": "dividend_high",
                "param_3": "divisor_low",
                "param_4": "divisor_high",
                "param_5": "remainder",
                "uVar1": "result_low",
                "puVar2": "result_high",
                "puVar4": "quotient",
                "uVar3": "temp",
                "uVar5": "temp2",
                "uVar6": "temp3",
                "uVar7": "temp4",
                "uVar8": "temp5",
                "uVar9": "temp6",
                "uVar10": "temp7",
                "uVar11": "temp8",
                "uVar12": "temp9",
                "bVar13": "carry_flag"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong calculate_division_and_modulo_08000300(uint dividend_low,uint dividend_high,uint divisor_low,uint divisor_high,uint *remainder)\n\n{\n  ulonglong result_low;\n  uint *result_high;\n  uint temp;\n  uint *quotient;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  uint temp9;\n  bool carry_flag;\n  \n  if (divisor_high == 0) {\n    if (dividend_high < divisor_low) {\n      temp9 = count_leading_zeroes(divisor_low);\n      if (temp9 != 0) {\n        divisor_low = divisor_low << (temp9 & 0xff);\n        dividend_high = dividend_low >> (0x20 - temp9 & 0xff) | dividend_high << (temp9 & 0xff);\n        dividend_low = dividend_low << (temp9 & 0xff);\n      }\n      temp7 = divisor_low >> 0x10;\n      temp5 = dividend_high / temp7;\n      temp4 = dividend_low >> 0x10 | (dividend_high - temp7 * temp5) * 0x10000;\n      temp3 = temp5 * (divisor_low & 0xffff);\n      temp2 = temp5;\n      if (temp4 <= temp3 && temp3 - temp4 != 0) {\n        carry_flag = CARRY4(temp4,divisor_low);\n        temp4 = temp4 + divisor_low;\n        temp2 = temp5 - 1;\n        if ((carry_flag == false) && (temp4 <= temp3 && temp3 - temp4 != 0)) {\n          temp2 = temp5 - 2;\n          temp4 = temp4 + divisor_low;\n        }\n      }\n      temp5 = (temp4 - temp3) / temp7;\n      temp4 = dividend_low & 0xffff | ((temp4 - temp3) - temp7 * temp5) * 0x10000;\n      temp7 = temp5 * (divisor_low & 0xffff);\n      temp3 = temp5;\n      if (temp4 <= temp7 && temp7 - temp4 != 0) {\n        carry_flag = CARRY4(temp4,divisor_low);\n        temp4 = temp4 + divisor_low;\n        temp3 = temp5 - 1;\n        if ((carry_flag == false) && (temp4 <= temp7 && temp7 - temp4 != 0)) {\n          temp3 = temp5 - 2;\n          temp4 = temp4 + divisor_low;\n        }\n      }\n      temp4 = temp4 - temp7;\n      result_high = (uint *)(temp3 | temp2 << 0x10);\n      quotient = (uint *)0x0;\n    }\n    else {\n      if (divisor_low == 0) {\n        divisor_low = 1 / 0;\n      }\n      temp9 = count_leading_zeroes(divisor_low);\n      if (temp9 == 0) {\n        dividend_high = dividend_high - divisor_low;\n        temp4 = divisor_low >> 0x10;\n        temp8 = divisor_low & 0xffff;\n        quotient = (uint *)0x1;\n      }\n      else {\n        divisor_low = divisor_low << (temp9 & 0xff);\n        temp4 = divisor_low >> 0x10;\n        temp2 = dividend_high >> (0x20 - temp9 & 0xff);\n        temp6 = dividend_low >> (0x20 - temp9 & 0xff) | dividend_high << (temp9 & 0xff);\n        temp3 = temp2 / temp4;\n        temp8 = divisor_low & 0xffff;\n        temp7 = temp6 >> 0x10 | (temp2 - temp4 * temp3) * 0x10000;\n        temp5 = temp3 * temp8;\n        dividend_low = dividend_low << (temp9 & 0xff);\n        temp2 = temp3;\n        if (temp7 <= temp5 && temp5 - temp7 != 0) {\n          carry_flag = CARRY4(temp7,divisor_low);\n          temp7 = temp7 + divisor_low;\n          temp2 = temp3 - 1;\n          if ((carry_flag == false) && (temp7 <= temp5 && temp5 - temp7 != 0)) {\n            temp2 = temp3 - 2;\n            temp7 = temp7 + divisor_low;\n          }\n        }\n        temp = (temp7 - temp5) / temp4;\n        dividend_high = temp6 & 0xffff | ((temp7 - temp5) - temp4 * temp) * 0x10000;\n        temp5 = temp * temp8;\n        temp3 = temp;\n        if (dividend_high <= temp5 && temp5 - dividend_high != 0) {\n          carry_flag = CARRY4(dividend_high,divisor_low);\n          dividend_high = dividend_high + divisor_low;\n          temp3 = temp - 1;\n          if ((carry_flag == false) && (dividend_high <= temp5 && temp5 - dividend_high != 0)) {\n            temp3 = temp - 2;\n            dividend_high = dividend_high + divisor_low;\n          }\n        }\n        dividend_high = dividend_high - temp5;\n        quotient = (uint *)(temp3 | temp2 << 0x10);\n      }\n      temp7 = dividend_high / temp4;\n      temp5 = dividend_low >> 0x10 | (dividend_high - temp4 * temp7) * 0x10000;\n      temp3 = temp8 * temp7;\n      temp2 = temp7;\n      if (temp5 <= temp3 && temp3 - temp5 != 0) {\n        carry_flag = CARRY4(temp5,divisor_low);\n        temp5 = temp5 + divisor_low;\n        temp2 = temp7 - 1;\n        if ((carry_flag == false) && (temp5 <= temp3 && temp3 - temp5 != 0)) {\n          temp2 = temp7 - 2;\n          temp5 = temp5 + divisor_low;\n        }\n      }\n      temp7 = (temp5 - temp3) / temp4;\n      temp4 = dividend_low & 0xffff | ((temp5 - temp3) - temp4 * temp7) * 0x10000;\n      temp8 = temp8 * temp7;\n      temp3 = temp7;\n      if (temp4 <= temp8 && temp8 - temp4 != 0) {\n        carry_flag = CARRY4(temp4,divisor_low);\n        temp4 = temp4 + divisor_low;\n        temp3 = temp7 - 1;\n        if ((carry_flag == false) && (temp4 <= temp8 && temp8 - temp4 != 0)) {\n          temp3 = temp7 - 2;\n          temp4 = temp4 + divisor_low;\n        }\n      }\n      temp4 = temp4 - temp8;\n      result_high = (uint *)(temp3 | temp2 << 0x10);\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = temp4 >> (temp9 & 0xff);\n      remainder[1] = 0;\n      return CONCAT44(quotient,result_high);\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    result_high = remainder;\n    quotient = remainder;\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend_low;\n      remainder[1] = dividend_high;\n      return 0;\n    }\n  }\n  else {\n    quotient = (uint *)count_leading_zeroes(divisor_high);\n    if (quotient != (uint *)0x0) {\n      temp5 = 0x20 - (int)quotient;\n      temp2 = divisor_low >> (temp5 & 0xff) | divisor_high << ((uint)quotient & 0xff);\n      temp6 = temp2 >> 0x10;\n      temp9 = dividend_high >> (temp5 & 0xff);\n      temp8 = dividend_low >> (temp5 & 0xff) | dividend_high << ((uint)quotient & 0xff);\n      temp7 = temp9 / temp6;\n      temp4 = temp8 >> 0x10 | (temp9 - temp6 * temp7) * 0x10000;\n      temp3 = temp7 * (temp2 & 0xffff);\n      divisor_low = divisor_low << ((uint)quotient & 0xff);\n      dividend_low = dividend_low << ((uint)quotient & 0xff);\n      temp9 = temp7;\n      if (temp4 <= temp3 && temp3 - temp4 != 0) {\n        carry_flag = CARRY4(temp4,temp2);\n        temp4 = temp4 + temp2;\n        temp9 = temp7 - 1;\n        if ((carry_flag == false) && (temp4 <= temp3 && temp3 - temp4 != 0)) {\n          temp9 = temp7 - 2;\n          temp4 = temp4 + temp2;\n        }\n      }\n      temp7 = (temp4 - temp3) / temp6;\n      temp4 = temp8 & 0xffff | ((temp4 - temp3) - temp6 * temp7) * 0x10000;\n      temp6 = temp7 * (temp2 & 0xffff);\n      temp3 = temp7;\n      if (temp4 <= temp6 && temp6 - temp4 != 0) {\n        carry_flag = CARRY4(temp4,temp2);\n        temp4 = temp4 + temp2;\n        temp3 = temp7 - 1;\n        if ((carry_flag == false) && (temp4 <= temp6 && temp6 - temp4 != 0)) {\n          temp3 = temp7 - 2;\n          temp4 = temp4 + temp2;\n        }\n      }\n      temp3 = temp3 | temp9 << 0x10;\n      result_low = (ulonglong)temp3 * (ulonglong)divisor_low;\n      if (CONCAT44(temp4 - temp6,dividend_low) < result_low) {\n        result_low = result_low - CONCAT44(temp2,divisor_low);\n        temp3 = temp3 - 1;\n      }\n      if (remainder != (uint *)0x0) {\n        temp9 = ((temp4 - temp6) - (int)(result_low >> 0x20)) - (uint)(dividend_low < (uint)result_low);\n        *remainder = temp9 << (temp5 & 0xff) | dividend_low - (uint)result_low >> ((uint)quotient & 0xff);\n        remainder[1] = temp9 >> ((uint)quotient & 0xff);\n      }\n      return (ulonglong)temp3;\n    }\n    if ((divisor_high < dividend_high) || (result_high = quotient, divisor_low <= dividend_low)) {\n      carry_flag = dividend_low < divisor_low;\n      dividend_low = dividend_low - divisor_low;\n      dividend_high = (dividend_high - divisor_high) - (uint)carry_flag;\n      result_high = (uint *)0x1;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend_low;\n      remainder[1] = dividend_high;\n      return ZEXT48(result_high);\n    }\n  }\n  return CONCAT44(quotient,result_high);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000300",
            "calling": [
                "FUN_080002d0"
            ],
            "imported": false,
            "current_name": "calculate_division_and_modulo_08000300"
        },
        "FUN_08002848": {
            "renaming": {
                "FUN_08002848": "set_bit_08002848",
                "param_1": "bit_field",
                "param_2": "bit_index",
                "param_3": "bit_value",
                "*(uint *)(param_1 + 0x20)": "(*bit_field)",
                "uint": "uint32_t"
            },
            "code": "void set_bit_08002848(uint32_t* bit_field, uint8_t bit_index, uint8_t bit_value)\n{\n  uint32_t mask = ~(1u << (bit_index & 0xff));\n  *bit_field &= mask;\n  *bit_field |= bit_value << (bit_index & 0xff);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "FUN_08002864"
            ],
            "imported": false,
            "current_name": "set_bit_08002848"
        },
        "FUN_0800312c": {
            "renaming": {
                "FUN_0800312c": "combine_bytes_0800312c",
                "param_1": "address",
                "*(byte *)(param_1 + 0x3a)": "byte1",
                "*(byte *)(param_1 + 0x39)": "byte2"
            },
            "code": "byte combine_bytes_0800312c(int address)\n{\n  byte byte1 = *(byte *)(address + 0x3a);\n  byte byte2 = *(byte *)(address + 0x39);\n  return byte1 | byte2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800312c",
            "calling": [
                "FUN_08003dd0",
                "FUN_08003df4"
            ],
            "imported": false,
            "current_name": "combine_bytes_0800312c"
        },
        "FUN_080028f0": {
            "renaming": {
                "FUN_080028f0": "clear_bit_and_check_if_empty_080028f0",
                "param_1": "bit_array",
                "param_2": "bit_index",
                "puVar1": "array_ptr"
            },
            "code": "int clear_bit_and_check_if_empty_080028f0(uint **bit_array, uint bit_index) {\n  set_bit(*bit_array, bit_index, 0);\n  uint *array_ptr = *bit_array;\n  if (((array_ptr[8] & 0x1111) == 0) && ((array_ptr[8] & 0x444) == 0)) {\n    array_ptr[17] = array_ptr[17] & 0xffff7fff;\n  }\n  array_ptr = *bit_array;\n  if (((array_ptr[8] & 0x1111) == 0) && ((array_ptr[8] & 0x444) == 0)) {\n    *array_ptr = *array_ptr & 0xfffffffe;\n  }\n  return 0;\n}",
            "called": [
                "FUN_080028d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028f0",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "clear_bit_and_check_if_empty_080028f0"
        },
        "FUN_08000e30": {
            "renaming": {
                "FUN_08000e30": "get_value_from_pointer_08000e30",
                "PTR_DAT_08000e38": "pointer_value"
            },
            "code": "int get_value_from_pointer_08000e30() {\n  int* PTR_DAT_08000e38 = (int*) PTR_DAT_08000e38;\n  return *PTR_DAT_08000e38;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e30",
            "calling": [
                "FUN_08002488",
                "FUN_0800346c",
                "FUN_08001f9c",
                "FUN_08003d18",
                "FUN_0800201c",
                "FUN_08002dd0",
                "FUN_08002d0c"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08000e30"
        },
        "FUN_08000f56": {
            "renaming": {
                "FUN_08000f56": "initialize_device_08000f56",
                "param_1": "device_address",
                "PTR_080033c8": "clear_bit_in_address",
                "DAT_08000f5d": "2",
                "DAT_08000f61": "0",
                "DAT_08000f6a": "0"
            },
            "code": "int initialize_device_08000f56(int device_address)\n{\n    if (device_address != DAT_DAT_08000f6a8DAT_08000f6aDAT_08000f6aDAT_08000f6af61) {\n        *(unsigned char *)(device_address + 4) = DAT_08000f5d;\n        PTR_DAT_DAT_08000f6a8DAT_08000f6aDAT_08000f6aDAT_08000f6af618DAT_DAT_08000f6a8DAT_08000f6aDAT_08000f6aDAT_08000f6af61DAT_DAT_08000f6a8DAT_08000f6aDAT_08000f6aDAT_08000f6af6133c8();\n        *(unsigned int *)(device_address + 16) = DAT_DAT_08000f6a8DAT_08000f6aDAT_08000f6aDAT_08000f6af61;\n        *(unsigned char *)(device_address + 4) = DAT_DAT_08000f6a8DAT_08000f6aDAT_08000f6aDAT_08000f6af61;\n        *(unsigned char *)(device_address + 5) = DAT_DAT_08000f6a8DAT_08000f6aDAT_08000f6aDAT_08000f6af61;\n        return DAT_DAT_08000f6a8DAT_08000f6aDAT_08000f6aDAT_08000f6af61;\n    }\n    return 1;\n}",
            "called": [
                "FUN_080033c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f56",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "initialize_device_08000f56"
        },
        "FUN_0800295c": {
            "renaming": {
                "FUN_0800295c": "process_data_0800295c",
                "param_1": "data",
                "sVar1": "counter",
                "pbVar2": "byte_ptr",
                "first_char": "first_char",
                "segment": "segment",
                "ptr": "ptr",
                "value": "value"
            },
            "code": "int process_data_0800295c(int *data) {\n    char first_char = *(char *)((int)data + 0x39);\n    if (first_char != '!') {\n        return 2;\n    }\n    \n    int segment = data[2];\n    int *ptr = (int *)*data;\n    \n    if (segment == 0x1000) {\n        uint16_t value = *(uint16_t *)data[8] & 0x1ff;\n        if (data[4] == 0) {\n            data[8] += 2;\n        }\n        else {\n            data[8] += 1;\n        }\n        \n        *(uint *)(ptr + 4) = value;\n    }\n    else {\n        uint8_t value = *(uint8_t *)data[8];\n        data[8]++;\n        \n        *(uint *)(ptr + 4) = (uint)value;\n    }\n    \n    short counter = *(short *)((int)data + 0x26) - 1;\n    *(short *)((int)data + 0x26) = counter;\n    \n    if (counter == 0) {\n        *(uint *)(ptr + 0xc) &= 0xffffff7f;\n        *(uint *)(ptr + 0xc) |= 0x40;\n        return 0;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800295c",
            "calling": [
                "FUN_08002ffc"
            ],
            "imported": false,
            "current_name": "process_data_0800295c"
        },
        "FUN_08003380": {
            "renaming": {
                "FUN_08003380": "find_value_08003380",
                "param_1": "value",
                "param_2": "data",
                "param_3": "size",
                "param_4": "start",
                "<original_variable_name_1>": "end",
                "iVar1": "index",
                "PTR_DAT_08003398": "data"
            },
            "code": "int find_value_08003380(int value, int* PTR_DAT_08003398, int size, int start, int end) {\n  int index = find_value_08003380_or_negative_one(value, PTR_DAT_08003398, size, start, end);\n  if ((index << 0xc) >> 0x1b != 2) {\n    return 0;\n  }\n  return 0x10;\n}",
            "called": [
                "FUN_0800354a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003380",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "find_value_08003380"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "checkAndUpdateDeviceStatus_08004110",
                "param_1": "deviceIndex",
                "param_2": "dataFlag",
                "param_3": "updateFlag",
                "param_4": "deviceDataArray",
                "iVar1": "bitStatus",
                "puVar2": "deviceDataPtr",
                "iVar3": "deviceStatus"
            },
            "code": "void checkAndUpdateDeviceStatus_08004110(uint8_t deviceIndex, uint8_t dataFlag, uint8_t updateFlag, uint8_t* deviceDataArray) {\n  int16_t deviceStatus = -1;\n  uint8_t* deviceDataPtr = deviceDataArray;\n  if (deviceIndex < 0x60) {\n    deviceStatus = *(int16_t *)(PTR_DAT_080041a8 + deviceIndex * 2);\n    deviceDataPtr = PTR_DAT_080041a8;\n  }\n  if (deviceStatus != -1) {\n    int8_t bitStatus = getDeviceBitStatus(deviceStatus, PTR_DAT_080041ac, updateFlag, deviceDataPtr, deviceDataArray);\n    if (bitStatus != 0) {\n      if (!isDeviceInitialized(deviceStatus)) {\n        initializeDevice(deviceStatus);\n      }\n      else if (isDeviceValid(deviceStatus)) {\n        updateDeviceBits(deviceStatus);\n      }\n      updateBitStatus(deviceStatus, PTR_DAT_080041ac);\n    }\n    updateDataFlag(deviceStatus, dataFlag, updateFlag);\n    setBitInArray(deviceStatus, PTR_DAT_080041b8);\n  }\n}\n",
            "called": [
                "FUN_080033d8",
                "FUN_0800355e",
                "FUN_0800314e",
                "FUN_08003486",
                "FUN_08003414",
                "FUN_0800316c",
                "FUN_08003138"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "FUN_08000600"
            ],
            "imported": false,
            "current_name": "checkAndUpdateDeviceStatus_08004110"
        },
        "FUN_08000ee0": {
            "renaming": {
                "FUN_08000ee0": "check_input_value_08000ee0",
                "param_1": "input_value",
                "puVar1": "data_ptr"
            },
            "code": "int check_input_value_08000ee0(unsigned int input_value) {\n  unsigned int *data_ptr;\n  data_ptr = DAT_08000f04;\n  if (input_value - 1U < 0x1000000) {\n    DAT_08000f04[1] = input_value - 1U;\n    *(unsigned char *)(DAT_08000f08 + 0x23) = 0xf0;\n    data_ptr[2] = 0;\n    *data_ptr = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ee0",
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98"
            ],
            "imported": false,
            "current_name": "check_input_value_08000ee0"
        },
        "FUN_080015ba": {
            "renaming": {
                "FUN_080015ba": "do_nothing_080015ba"
            },
            "code": "\nvoid do_nothing_080015ba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015ba",
            "calling": [
                "FUN_080015bc",
                "FUN_08001684"
            ],
            "imported": false,
            "current_name": "do_nothing_080015ba"
        },
        "FUN_080015bc": {
            "renaming": {
                "FUN_080015bc": "process_data_080015bc",
                "param_1": "data",
                "cVar1": "closing_parenthesis",
                "pbVar2": "byte_ptr"
            },
            "code": "int process_data_080015bc(int *data) {\n  char closing_parenthesis;\n  byte *byte_ptr;\n  \n  closing_parenthesis = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    byte_ptr = (byte *)data[9];\n    data[9] = (int)(byte_ptr + 1);\n    *(uint *)(*data + 0x10) = (uint)*byte_ptr;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (closing_parenthesis == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      do_nothing();\n    }\n    return 0;\n  }\n  return 0;\n}",
            "called": [
                "FUN_080015ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015bc",
            "calling": [
                "FUN_08001d00"
            ],
            "imported": false,
            "current_name": "process_data_080015bc"
        },
        "FUN_08000f4c": {
            "renaming": {
                "FUN_08000f4c": "do_nothing_08000f4c"
            },
            "code": "\nvoid do_nothing_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4c",
            "calling": [
                "FUN_08000f4e"
            ],
            "imported": false,
            "current_name": "do_nothing_08000f4c"
        },
        "FUN_08000f4e": {
            "renaming": {
                "FUN_08000f4e": "do_nothing_and_return_08000f4e",
                "do_nothing_08000f4c": "do_nothing"
            },
            "code": "void do_nothing_and_return_08000f4e(void)\n{\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08000f4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f4e",
            "calling": [
                "FUN_08003476"
            ],
            "imported": false,
            "current_name": "do_nothing_and_return_08000f4e"
        },
        "FUN_0800066c": {
            "renaming": {
                "FUN_0800066c": "set_data_at_address_0800066c",
                "param_1": "address",
                "param_2": "data",
                "param_3": "limit",
                "param_4": "filler",
                "*(undefined *)(param_1 + 4)": "*(char *)(address + 4)",
                "*(char *)(param_1 + 5)": "*(char *)(address + 5)",
                "*(undefined *)(param_1 + 6)": "*(char *)(address + 6)",
                "*(undefined2 *)(param_1 + 0x56)": "*(short *)(address + 0x56)"
            },
            "code": "void set_data_at_address_0800066c(int address, char data, int limit, char filler) {\n  *(char *)(address + 4) = data;\n  if (3 < limit) {\n    limit = 0;\n  }\n  *(char *)(address + 5) = (char)limit;\n  *(char *)(address + 6) = filler;\n  *(short *)(address + 0x56) = 1000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800066c",
            "calling": [
                "FUN_08000682"
            ],
            "imported": false,
            "current_name": "set_data_at_address_0800066c"
        },
        "FUN_080042e8": {
            "renaming": {
                "FUN_080042e8": "flag_update_080042e8",
                "param_1": "flag_address",
                "param_2": "flag_value",
                "bVar1": "flag_byte",
                "bVar2": "flag_byte_masked",
                "iVar3": "flag_index"
            },
            "code": "int flag_update_080042e8(int flag_address, unsigned char flag_value) {\n    *(unsigned char *)(flag_address + 0x10) = 1;\n    int flag_index = *(unsigned short *)(flag_address + 0x140) + 1;\n    unsigned char flag_byte = (unsigned char)flag_index;\n    unsigned char flag_byte_masked = flag_byte & 0x7f;\n    if (flag_index == 0) {\n        flag_byte_masked = -(-flag_byte & 0x7f);\n    }\n    do {\n    } while (*(unsigned short *)(flag_address + 0x142) == (unsigned short)flag_byte_masked);\n    *(unsigned char *)(*(int *)(flag_address + 0x13c) + (unsigned int)*(unsigned short *)(flag_address + 0x140)) = flag_value;\n    *(unsigned short *)(flag_address + 0x140) = (unsigned short)flag_byte_masked;\n    int is_valid = is_valid_flag_08003df4(flag_address + 0xd4);\n    if (is_valid == 0) {\n        update_data_08003eac(flag_address + 0xd4, PTR_LAB_0800420c_1_08004334);\n    }\n    return 1;\n}",
            "called": [
                "FUN_08003eac",
                "FUN_08003df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042e8",
            "calling": [],
            "imported": false,
            "current_name": "flag_update_080042e8"
        },
        "FUN_080038d0": {
            "renaming": {
                "FUN_080038d0": "process_input_and_set_flags_080038d0",
                "param_1": "input",
                "iVar1": "input_subtracted_four"
            },
            "code": "void process_input_and_set_flags_080038d0(undefined4 input) {\n  int input_subtracted_four = subtract_four_from_input();\n  if (((*(code **)(input_subtracted_four + 0x60) != (code *)0x0) && (*(char *)(input_subtracted_four + 0x5e) == '\\x01')) && (*(char *)(input_subtracted_four + 0x2c) != ' ')) {\n    (**(code **)(input_subtracted_four + 0x60))(input_subtracted_four + 0x68);\n  }\n  set_bit_and_flags(input);\n  return;\n}",
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038d0",
            "calling": [
                "FUN_08001684",
                "FUN_08001ab0",
                "FUN_08001bfc"
            ],
            "imported": false,
            "current_name": "process_input_and_set_flags_080038d0"
        },
        "FUN_0800410c": {
            "renaming": {
                "FUN_0800410c": "return_one_0800410c",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int return_one_0800410c(void)\n{\n    int result = 1;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800410c",
            "calling": [
                "thunk_FUN_0800410c"
            ],
            "imported": false,
            "current_name": "return_one_0800410c"
        },
        "FUN_0800260c": {
            "renaming": {
                "FUN_0800260c": "get_shifted_value_from_pointer_0800260c",
                "uVar1": "shifted_value",
                "get_value_from_pointer_080025e0": "get_value_from_pointer",
                "PTR_DAT_08002628": "shift_amounts",
                "DAT_08002624": "data_pointer"
            },
            "code": "uint get_shifted_value_from_pointer_0800260c(void)\n{\n  uint shifted_value = get_value_from_pointer_080025e0();\n  uint shift_amount = (uint)(*(int *)(DAT_08002624 + 8) << 0x10) >> 0x1d;\n  return shifted_value >> shift_amount;\n}",
            "called": [
                "FUN_080025e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800260c",
            "calling": [
                "FUN_080029c8"
            ],
            "imported": false,
            "current_name": "get_shifted_value_from_pointer_0800260c"
        },
        "FUN_08004240": {
            "renaming": {
                "FUN_08004240": "calculate_checksum_08004240",
                "param_1": "buffer_address",
                "*(short *)(param_1 + 0x138)": "*(ushort *)(buffer_address + 0x138)",
                "*(short *)(param_1 + 0x13a)": "*(ushort *)(buffer_address + 0x13a)"
            },
            "code": "ushort calculate_checksum_08004240(int buffer_address) {\n    ushort checksum = (*(ushort *)(buffer_address + 0x138) + 0x40) - *(ushort *)(buffer_address + 0x13a) & 0x3f;\n    return checksum;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004240",
            "calling": [
                "FUN_08004338"
            ],
            "imported": false,
            "current_name": "calculate_checksum_08004240"
        },
        "FUN_080026c8": {
            "renaming": {
                "FUN_080026c8": "do_nothing_080026c8"
            },
            "code": "\nvoid do_nothing_080026c8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026c8",
            "calling": [
                "FUN_080026ce"
            ],
            "imported": false,
            "current_name": "do_nothing_080026c8"
        },
        "FUN_080041bc": {
            "renaming": {
                "FUN_080041bc": "decode_data_080041bc",
                "param_1": "index",
                "param_2": "value",
                "param_3": "mask",
                "param_4": "data",
                "uVar4": "bit_mask",
                "puVar3": "data",
                "iVar1": "bit_index",
                "uVar2": "value",
                "get_bit_08003138": "get_bit",
                "get_data_at_index_0800318c": "get_data_at_index",
                "set_value_at_address_if_zero_080034b6": "set_value_at_address_if_zero"
            },
            "code": "void decode_data_080041bc(uint index, undefined4 value, undefined4 mask, undefined *data)\n{\n  int bit_index;\n  uint bit_mask;\n  uint data_index;\n  if (index < 0x60) {\n    data_index = (uint)*(short *)(PTR_DAT_080041fc + index * 2);\n    bit_mask = data_index;\n    data = PTR_DAT_080041fc;\n  }\n  else {\n    data_index = 0xffffffff;\n    bit_mask = data_index;\n  }\n  if ((bit_mask != 0xffffffff) && (bit_index = get_bit_08003138(bit_mask, PTR_DAT_08004200, mask, data, data), bit_index != 0)) {\n    value = get_data_at_index((bit_mask << 0x18) >> 0x1c);\n    set_value_at_address_if_zero(value, 1 << (bit_mask & 0xf) & 0xffff, mask);\n  }\n  return;\n}",
            "called": [
                "FUN_080034b6",
                "FUN_08003138",
                "FUN_0800318c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041bc",
            "calling": [
                "FUN_08000600",
                "FUN_080006b4",
                "FUN_0800076c"
            ],
            "imported": false,
            "current_name": "decode_data_080041bc"
        },
        "FUN_08004364": {
            "renaming": {
                "FUN_08004364": "initialize_data_structures_08004364",
                "param_1": "data_structure_ptr",
                "PTR_": "",
                "DAT_": "",
                "starting_address": "starting_address",
                "ending_address": "ending_address"
            },
            "code": "void initialize_data_structures_08004364(int data_structure_ptr)\n{\n    int* starting_address = data_structure_ptr + 0x134;\n    int* ending_address = data_structure_ptr + 0x13c;\n    *(starting_address) = data_structure_ptr + 0x11;\n    *(ending_address) = data_structure_ptr + 0x51;\n    *(short*)(data_structure_ptr + 0x138) = 0;\n    *(short*)(data_structure_ptr + 0x13a) = 0;\n    *(short*)(data_structure_ptr + 0x140) = 0;\n    *(short*)(data_structure_ptr + 0x142) = 0;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004364",
            "calling": [
                "FUN_0800447c"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_08004364"
        },
        "FUN_08000682": {
            "renaming": {
                "FUN_08000682": "set_data_and_return_param_08000682",
                "param_1": "data"
            },
            "code": "void set_data_and_return_param_08000682(void* data){\n  set_data_at_address_0800066c(data);\n  return data;\n}",
            "called": [
                "FUN_0800066c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000682",
            "calling": [
                "FUN_08000690"
            ],
            "imported": false,
            "current_name": "set_data_and_return_param_08000682"
        },
        "FUN_08000e3c": {
            "renaming": {
                "FUN_08000e3c": "set_uint_at_address_08000e3c",
                "param_1": "value",
                "DAT_08000e5c": "PTR_DATA",
                "PTR_DATA": "PTR_DATA",
                "uint": "unsigned int",
                "current_value": "current_value",
                "new_value": "new_value",
                "ptr": "ptr",
                "*ptr": "value_at_address",
                "value_at_address": "value_at_address",
                "address": "address"
            },
            "code": "void set_uint_at_address_08000e3c(uint address, uint value) {\n    uint* ptr = (uint*)(DAT_08000e5c + 0xc);\n    uint current_value = *ptr;\n    uint new_value = (value & 7) << 8 | (current_value & 0xf8ff) | 0x5fa0000;\n    *ptr = new_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e3c",
            "calling": [
                "FUN_08000de4",
                "FUN_08004648"
            ],
            "imported": false,
            "current_name": "set_uint_at_address_08000e3c"
        },
        "FUN_08002864": {
            "renaming": {
                "FUN_08002864": "clear_bit_and_set_flag_08002864",
                "param_1": "bit_array",
                "param_2": "bit_index",
                "puVar2": "array_ptr",
                "bVar1": "is_dat_d0"
            },
            "code": "uint32_t clear_bit_and_set_flag_08002864(uint32_t **bit_array, uint32_t bit_index)\\n\\\n{\\n\\\n    bool is_dat_d0 = false;\\n\\\n    uint32_t *array_ptr = *bit_array;\\n\\\n    \\n\\\n    set_bit(array_ptr, bit_index, 0);\\n\\\n    \\n\\\n    if (array_ptr == DAT_080028d0 || array_ptr == DAT_080028d0 + 0x100)\\n\\\n    {\\n\\\n        is_dat_d0 = true;\\n\\\n    }\\n\\\n    \\n\\\n    if (is_dat_d0 && ((array_ptr[8] & 0x1111) == 0) && ((array_ptr[8] & 0x444) == 0))\\n\\\n    {\\n\\\n        array_ptr[0x11] &= 0xffff7fff;\\n\\\n    }\\n\\\n    \\n\\\n    if (((array_ptr[8] & 0x1111) == 0) && ((array_ptr[8] & 0x444) == 0))\\n\\\n    {\\n\\\n        *array_ptr &= 0xfffffffe;\\n\\\n    }\\n\\\n    \\n\\\n    *((bool *)((int)bit_array + 0x39)) = true;\\n\\\n    return 0;\\n\\\n}",
            "called": [
                "FUN_08002848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002864",
            "calling": [
                "FUN_08003414"
            ],
            "imported": false,
            "current_name": "clear_bit_and_set_flag_08002864"
        },
        "FUN_0800532c": {
            "renaming": {
                "FUN_0800532c": "initialize_params_0800532c",
                "param_1": "params",
                "param_2": "param_2",
                "param_3": "param_3",
                "puVar1": "ptr"
            },
            "code": "void initialize_params_0800532c(undefined4 *params, undefined2 param_2, undefined2 param_3) {\n  params[0] = 0;\n  params[1] = 0;\n  params[2] = 0;\n  *(undefined2 *)(params + 3) = param_2;\n  params[25] = 0;\n  *(undefined2 *)((int)params + 0xe) = param_3;\n  params[4] = 0;\n  params[5] = 0;\n  params[6] = 0;\n  fill_array_with_value_080048cc(params + 23, 0, 8);\n  params[9] = DAT_08005364;\n  params[10] = PTR_process_data_0800562a_1_08005368;\n  params[11] = PTR_process_and_update_input_08005662_1_0800536c;\n  undefined *ptr = PTR_LAB_08005686_1_08005370;\n  params[8] = params;\n  params[12] = ptr;\n}\n",
            "called": [
                "FUN_080048cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800532c",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "initialize_params_0800532c"
        },
        "FUN_0800314e": {
            "renaming": {
                "FUN_0800314e": "set_bit_in_array_0800314e",
                "param_1": "bit_index",
                "param_2": "array",
                "uVar1": "index",
                "PTR_": "ptr",
                "DAT_": "uint"
            },
            "code": "void set_bit_in_array_0800314e(DAT_ bit_index, int* array){\n  DAT_ index = (bit_index << 0x18) >> 0x1c;\n  DAT_* PTR_ = (DAT_*)(array + index * 4);\n  *PTR_ = *PTR_ | 1 << (bit_index & 0xf);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800314e",
            "calling": [
                "FUN_08004110"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_0800314e"
        },
        "FUN_0800447c": {
            "renaming": {
                "FUN_0800447c": "initialize_data_structures_0800447c",
                "param_1": "data_structure",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "uVar1": "short_value1",
                "PTR_PTR_FUN_080042e8_1_080044c8": "function_pointer",
                "PTR_DAT_080044cc": "special_data_structure",
                "PTR_DAT_080044d0": "short_data_structure1",
                "PTR_DAT_080044d4": "short_data_structure2"
            },
            "code": "undefined4 *initialize_data_structures_0800447c(undefined4 *data_structure,undefined4 value1,undefined4 value2,undefined4 value3)\n{\n  data_structure[1] = 0;\n  data_structure[2] = 1000;\n  *data_structure = PTR_PTR_FUN_080042e8_1_080044c8;\n  if (data_structure == PTR_DAT_080044cc) {\n    set_value(data_structure,0x4c,value2,PTR_DAT_080044cc,value3);\n    set_value_at_index(data_structure,0x4d);\n  }\n  else {\n    undefined2 short_value1 = find_short_if_not_zero(value1,PTR_DAT_080044d0);\n    *(undefined2 *)((int)data_structure + 0x12e) = short_value1;\n    undefined2 short_value2 = find_short_if_not_zero(value1,PTR_DAT_080044d4);\n    *(undefined2 *)(data_structure + 0x4b) = short_value2;\n  }\n  initialize_data_structures_0800447c_08004364(data_structure);\n  return data_structure;\n}",
            "called": [
                "FUN_08004444",
                "FUN_08004460",
                "FUN_08004364",
                "FUN_0800351e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800447c",
            "calling": [
                "FUN_080044d8"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_0800447c"
        },
        "FUN_08004808": {
            "renaming": {
                "FUN_08004808": "process_data_and_run_loop_08004808",
                "param_1": "assertion_failed_file",
                "param_2": "param_2",
                "param_3": "data",
                "param_4": "loop_count",
                "uVar1": "memory_address",
                "puVar2": "function_name",
                "uVar3": "process_result",
                "uVar4": "param_4"
            },
            "code": "void process_data_and_run_loop_08004808(undefined4 assertion_failed_file, undefined4 param_2, undefined *data, undefined4 param_4)\n{\n  undefined4 uVar1;\n  undefined *function_name;\n  undefined8 uVar3;\n  undefined4 loop_count;\n  \n  uVar1 = *(undefined4 *)(*(int *)PTR_PTR_DAT_08004834 + 0xc);\n  function_name = PTR_s___function__08004838;\n  loop_count = param_4;\n  if (data == (undefined *)0x0) goto LAB_0800482c;\n  do {\n    process_data_08004860(uVar1,assertion_failed_file,param_4,param_1,param_2,function_name,data,loop_count);\n    uVar3 = process_input_and_run_infinite_loop_080051ac();\n    param_2 = (undefined4)((ulonglong)uVar3 >> 0x20);\n    uVar1 = (undefined4)uVar3;\nLAB_0800482c:\n    data = PTR_s__08004840;\n    function_name = PTR_s__08004840;\n  } while( true );\n}",
            "called": [
                "FUN_080051ac",
                "FUN_08004860"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004808",
            "calling": [
                "FUN_08004388"
            ],
            "imported": false,
            "current_name": "process_data_and_run_loop_08004808"
        },
        "FUN_08000f72": {
            "renaming": {
                "FUN_08000f72": "unset_bit_08000f72",
                "param_1": "data",
                "param_2": "bit_position",
                "**param_1": "*data",
                "*(undefined *)(param_1 + 1)": "*(char *)(data + 1)"
            },
            "code": "int unset_bit_08000f72(uint **data, uint bit_position) {\n    **data &= ~(1 << (bit_position & 0xff));\n    *(char *)(data + 1) = 1;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f72",
            "calling": [
                "FUN_080033d8"
            ],
            "imported": false,
            "current_name": "unset_bit_08000f72"
        },
        "FUN_08001d00": {
            "renaming": {
                "FUN_08001d00": "process_input_08001d00",
                "param_1": "input_data",
                "iVar1": "input_value",
                "uVar2": "mode_flags",
                "uVar3": "data_flags",
                "uVar4": "buffer_flags"
            },
            "code": "void process_input_08001d00(int *input_data) {\n  int input_value = *input_data;\n  uint mode_flags = *(uint *)(input_value + 0x14);\n  uint data_flags = *(uint *)(input_value + 4);\n  uint buffer_flags = *(uint *)(input_value + 0x18);\n  char input_char = *(char *)((int)input_data + 0x3e);\n  \n  if (input_char == '\\x10' || input_char == '@') {\n    if ((mode_flags & 0x10001) == 0 || (data_flags & 0x200) == 0) {\n      if ((0x80 & mode_flags) == 0 || (data_flags & 0x200) == 0) {\n        if ((0x40 & mode_flags) != 0 && (data_flags & 0x200) != 0) {\n          process_input_08001d00_08001256(input_data);\n        }\n      }\n      else {\n        set_param_value_0800124a(input_data);\n      }\n    }\n    else {\n      determine_mode_080011c0(input_data);\n    }\n    if ((0x20 & buffer_flags) == 0) {\n      if ((0x100 & mode_flags) != 0 && (data_flags & 0x400) != 0 && (0x4000 & mode_flags) == 0) {\n        update_data_08001904(input_data);\n        return;\n      }\n      if ((0x4000 & mode_flags) != 0 && (data_flags & 0x200) != 0) {\n        process_data_080019a0(input_data);\n        return;\n      }\n    }\n    else {\n      if ((0x200 & mode_flags) != 0 && (data_flags & 0x400) != 0 && (0x4000 & mode_flags) == 0) {\n        process_input_08001d00_0800171a(input_data);\n        return;\n      }\n      if ((0x4000 & mode_flags) != 0 && (data_flags & 0x200) != 0) {\n        process_input_08001d00_08001864(input_data);\n        return;\n      }\n    }\n  }\n  else {\n    if ((0x40 & mode_flags) != 0 && (data_flags & 0x200) != 0) {\n      process_input_08001d00_0800165a();\n      return;\n    }\n    if ((0x20 & mode_flags) != 0 && (data_flags & 0x200) != 0) {\n      process_input_08001d00_08001bfc(input_data);\n      return;\n    }\n    if ((0x20 & buffer_flags) == 0) {\n      if ((0x100 & mode_flags) != 0 && (data_flags & 0x400) != 0 && (0x4000 & mode_flags) == 0) {\n        add_to_buffer_0800160e(input_data);\n        return;\n      }\n      if ((0x4000 & mode_flags) != 0 && (data_flags & 0x200) != 0) {\n        increment_char_in_array_08001440(input_data);\n      }\n    }\n    else {\n      if ((0x200 & mode_flags) != 0 && (data_flags & 0x400) != 0 && (0x4000 & mode_flags) == 0) {\n        process_data_080015bc(input_data);\n        return;\n      }\n      if ((0x4000 & mode_flags) != 0 && (data_flags & 0x200) != 0) {\n        increment_value_if_not_zero_08001420(input_data);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_080011c0",
                "FUN_0800124a",
                "FUN_0800171a",
                "FUN_08001bfc",
                "FUN_08001904",
                "FUN_080015bc",
                "FUN_08001256",
                "FUN_08001420",
                "FUN_08001440",
                "FUN_080019a0",
                "FUN_0800160e",
                "FUN_08001864",
                "FUN_0800165a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001d00",
            "calling": [],
            "imported": false,
            "current_name": "process_input_08001d00"
        }
    },
    "used_tokens": 195176,
    "layers": [
        [
            "FUN_08003dd0",
            "FUN_080034f4",
            "FUN_0800573c",
            "FUN_080056d4",
            "FUN_080007f0",
            "FUN_08003df4",
            "FUN_08003900",
            "FUN_080055d0",
            "FUN_080056f8",
            "FUN_08004560",
            "FUN_08003476",
            "FUN_0800346c",
            "FUN_08003880",
            "FUN_080025ec",
            "FUN_08002d0c",
            "FUN_0800351e",
            "FUN_080034b6",
            "FUN_08003eac",
            "FUN_0800376e",
            "FUN_08000d98",
            "FUN_0800340c",
            "FUN_08001f9c",
            "FUN_080045c8",
            "FUN_0800354a",
            "FUN_0800262c",
            "FUN_08003f00",
            "FUN_08001440",
            "FUN_080001ac",
            "FUN_080040e4",
            "FUN_080048dc",
            "FUN_08003754",
            "FUN_08004844",
            "FUN_0800318c",
            "FUN_0800500c",
            "FUN_080023b4",
            "FUN_080019a0",
            "FUN_08003486",
            "FUN_08001864",
            "FUN_08004338",
            "FUN_080005e4",
            "FUN_080028f0",
            "FUN_08000f56",
            "FUN_080038d0",
            "FUN_0800260c",
            "FUN_08000682",
            "FUN_08002864",
            "FUN_0800532c"
        ],
        [
            "FUN_08003e54",
            "FUN_08002488",
            "FUN_08003cc8",
            "FUN_080054b4",
            "FUN_08004204",
            "FUN_08004978",
            "FUN_08003e18",
            "FUN_08002dd0",
            "FUN_08004622",
            "FUN_08005718",
            "FUN_08003f48",
            "FUN_08001ab0",
            "FUN_08005608",
            "FUN_0800268e",
            "FUN_080047fe",
            "FUN_08000690",
            "FUN_08000de4",
            "FUN_080026ce",
            "FUN_0800339c",
            "FUN_0800165a",
            "FUN_080051ac",
            "FUN_08001684",
            "FUN_08003f24",
            "FUN_08003380",
            "FUN_080042e8",
            "FUN_080041bc",
            "FUN_0800447c"
        ],
        [
            "FUN_080006b4",
            "FUN_08000c8c",
            "FUN_080033d8",
            "FUN_08001bfc",
            "FUN_080044d8",
            "FUN_08002f4c",
            "FUN_08002f66",
            "FUN_08003414",
            "FUN_08004638",
            "FUN_0800377c",
            "FUN_08003d18",
            "FUN_080054fc",
            "FUN_08005374",
            "FUN_08001e68",
            "FUN_080046b4",
            "FUN_08005662",
            "FUN_080042ac",
            "FUN_0800076c",
            "FUN_08004808"
        ],
        [
            "FUN_08000a4e",
            "FUN_08000998",
            "FUN_08000a7a",
            "FUN_080040ec",
            "FUN_08002ffc",
            "FUN_080008e2",
            "FUN_080034ce",
            "FUN_08000b04",
            "FUN_08004388",
            "FUN_08000a00",
            "FUN_08004110",
            "FUN_08001d00"
        ],
        [
            "FUN_0800562a",
            "FUN_08000b54",
            "FUN_08000d8e",
            "FUN_08000600"
        ],
        [
            "FUN_08000c4c",
            "FUN_08000c64",
            "FUN_08004648"
        ],
        [
            "FUN_08004658"
        ],
        [
            "FUN_08000d3c"
        ],
        [
            "FUN_08005760"
        ],
        [
            "FUN_080047c0"
        ],
        [
            "FUN_080047d0"
        ],
        [
            "FUN_080011a4"
        ],
        [
            "FUN_08004fdc",
            "FUN_08005400",
            "FUN_080050d0",
            "FUN_080052cc"
        ],
        [
            "FUN_080053a0"
        ],
        [
            "FUN_08004a34"
        ],
        [
            "FUN_08004a60"
        ],
        [
            "FUN_080029c8",
            "FUN_0800201c",
            "FUN_08003978",
            "FUN_08004d9c",
            "FUN_08000300"
        ],
        [
            "FUN_08004a84"
        ]
    ],
    "locked_functions": []
}