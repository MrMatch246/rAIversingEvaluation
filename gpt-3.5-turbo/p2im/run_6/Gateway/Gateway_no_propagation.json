{
    "functions": {
        "FUN_08007246": {
            "renaming": {
                "FUN_08007246": "initialize_game_08007246",
                "FUN_08003748": "setup_graphics",
                "FUN_08004046": "load_assets",
                "do_nothing_08007244": "do_nothing"
            },
            "code": "void initialize_game_08007246(void)\n{\n  setup_graphics();\n  load_assets();\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08004046",
                "FUN_08003748",
                "FUN_08007244"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007246",
            "calling": [],
            "imported": false,
            "current_name": "initialize_game_08007246"
        },
        "FUN_0800a042": {
            "renaming": {
                "FUN_0800a042": "process_data_0800a042",
                "param_1": "output_array",
                "param_2": "input_array",
                "param_3": "param_1",
                "param_4": "param_2",
                "sVar1": "short_value",
                "puVar2": "ptr_to_data",
                "iVar3": "result",
                "unaff_r4": "unused_var_1",
                "unaff_r5": "unused_var_2",
                "in_lr": "unused_var_3"
            },
            "code": "\nvoid process_data_0800a042(int *output_array,int input_array,undefined4 param_1,undefined4 param_2)\n\n{\n  short short_value;\n  undefined *ptr_to_data;\n  int result;\n  undefined4 unused_var_1;\n  undefined4 unused_var_2;\n  undefined4 unused_var_3;\n  \n  if ((int)((uint)*(ushort *)(input_array + 0xc) << 0x17) < 0) {\n    FUN_0800a130(output_array,(int)*(short *)(input_array + 0xe),0,2);\n  }\n  *(ushort *)(input_array + 0xc) = *(ushort *)(input_array + 0xc) & 0xefff;\n  ptr_to_data = PTR_DAT_0800a0c8;\n  short_value = *(short *)(input_array + 0xe);\n  *(undefined4 *)PTR_DAT_0800a0c8 = 0;\n  result = FUN_0800885c((int)short_value,param_1,param_2,param_2,param_2,unused_var_1,unused_var_2,unused_var_3);\n  if ((result == -1) && (*(int *)ptr_to_data != 0)) {\n    *output_array = *(int *)ptr_to_data;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800a130",
                "FUN_0800885c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a042",
            "calling": [],
            "imported": false,
            "current_name": "process_data_0800a042"
        },
        "FUN_08008694": {
            "renaming": {
                "FUN_08008694": "update_data_08008694",
                "param_1": "data_ptr",
                "param_2": "new_value",
                "bVar1": "index"
            },
            "code": "\nvoid update_data_08008694(int data_ptr,undefined4 new_value)\n\n{\n  byte index;\n  \n  if (data_ptr != 0) {\n    index = *(byte *)(data_ptr + 0x44);\n    *(undefined4 *)(PTR_DAT_080086dc + (uint)index * 4) = new_value;\n    *(int *)(PTR_DAT_080086e0 + (uint)index * 4) = data_ptr;\n    FUN_08003f30((int)*(char *)(data_ptr + 0x5a),0,2);\n    FUN_08003f94((int)*(char *)(data_ptr + 0x5a));\n    FUN_0800688e(*(undefined4 *)(PTR_DAT_080086e4 + (uint)*(byte *)(data_ptr + 0x44) * 4),\n                 *(int *)(data_ptr + 100) + (uint)*(ushort *)(data_ptr + 0x6a),1);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08003f94",
                "FUN_08003f30",
                "FUN_0800688e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008694",
            "calling": [],
            "imported": false,
            "current_name": "update_data_08008694"
        },
        "FUN_08002ce0": {
            "renaming": {
                "FUN_08002ce0": "initialize_variables_08002ce0",
                "param_1": "base_address",
                "iVar1": "offset"
            },
            "code": "\nint initialize_variables_08002ce0(int base_address)\n\n{\n  int offset;\n  \n  FUN_0800314e(base_address + 0x40);\n  offset = base_address + 0x44;\n  FUN_080032bc(offset,base_address,0x40);\n  *(undefined *)(base_address + 0xc4) = 0;\n  *(undefined4 *)(base_address + 200) = 0;\n  *(undefined *)(base_address + 0x1f8) = 0;\n  FUN_08003306(offset,0xe0,PTR_FUN_08002c2c_1_08002d90,0);\n  FUN_08003306(offset,0x90,PTR_LAB_08002c40_1_08002d94,0);\n  FUN_08003306(offset,0xc0,PTR_LAB_08002c7c_1_08002d98,0);\n  FUN_08003306(offset,0xd0,PTR_LAB_08002c90_1_08002d9c,0);\n  FUN_08003306(offset,0xf4,PTR_LAB_08002c54_1_08002da0,0);\n  FUN_08003306(offset,0xf5,PTR_LAB_08002c68_1_08002da4,0);\n  FUN_08003366(offset,0x71,PTR_LAB_08002ca4_1_08002da8,0);\n  FUN_08003370(offset,0xf0,PTR_LAB_08002cb8_1_08002dac,0);\n  FUN_08003346(offset,0x79,PTR_LAB_08002e1a_1_08002db0,base_address);\n  FUN_08003350(offset,0xf9,PTR_LAB_08002dea_1_08002db4,base_address);\n  FUN_08003350(offset,0xff,PTR_LAB_08002cd0_1_08002db8,0);\n  return base_address;\n}\n\n",
            "called": [
                "FUN_08003366",
                "FUN_080032bc",
                "FUN_08003346",
                "FUN_08003370",
                "FUN_08003306",
                "FUN_08003350",
                "FUN_0800314e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ce0",
            "calling": [
                "FUN_08002dbc"
            ],
            "imported": false,
            "current_name": "initialize_variables_08002ce0"
        },
        "FUN_08005188": {
            "renaming": {
                "FUN_08005188": "process_data_08005188",
                "param_1": "data_ptr",
                "iVar1": "data_value",
                "uVar2": "data_value_2",
                "uVar3": "data_value_3",
                "uVar4": "data_value_4"
            },
            "code": "\nvoid process_data_08005188(int *data_ptr)\n\n{\n  int data_value;\n  uint data_value_2;\n  uint data_value_3;\n  uint data_value_4;\n  \n  data_value = *data_ptr;\n  data_value_4 = *(uint *)(data_value + 0x18);\n  data_value_2 = *(uint *)(data_value + 0x14);\n  data_value_3 = *(uint *)(data_value + 4);\n  if ((*(char *)((int)data_ptr + 0x3e) == '\\x10') || (*(char *)((int)data_ptr + 0x3e) == '@')) {\n    if (((data_value_2 & 0x10001) == 0) || ((data_value_3 & 0x200) == 0)) {\n      if (((DAT_080052e8 & data_value_2) == 0) || ((data_value_3 & 0x200) == 0)) {\n        if (((DAT_080052d4 & data_value_2) != 0) && ((data_value_3 & 0x200) != 0)) {\n          FUN_080043a2(data_ptr);\n        }\n      }\n      else {\n        FUN_08004396(data_ptr);\n      }\n    }\n    else {\n      FUN_0800430c(data_ptr);\n    }\n    if ((DAT_080052dc & data_value_4) == 0) {\n      if ((((DAT_080052ec & data_value_2) != 0) && ((data_value_3 & 0x400) != 0)) && ((DAT_080052e4 & data_value_2) == 0)\n         ) {\n        FUN_08004d6c(data_ptr);\n        return;\n      }\n      if (((DAT_080052e4 & data_value_2) != 0) && ((data_value_3 & 0x200) != 0)) {\n        FUN_08004e3c(data_ptr);\n        return;\n      }\n    }\n    else {\n      if ((((DAT_080052e0 & data_value_2) != 0) && ((data_value_3 & 0x400) != 0)) && ((DAT_080052e4 & data_value_2) == 0)\n         ) {\n        FUN_08004b82(data_ptr);\n        return;\n      }\n      if (((DAT_080052e4 & data_value_2) != 0) && ((data_value_3 & 0x200) != 0)) {\n        FUN_08004ccc(data_ptr);\n        return;\n      }\n    }\n  }\n  else {\n    if (((DAT_080052d4 & data_value_2) != 0) && ((data_value_3 & 0x200) != 0)) {\n      FUN_08004ac2();\n      return;\n    }\n    if (((DAT_080052d8 & data_value_2) != 0) && ((data_value_3 & 0x200) != 0)) {\n      FUN_08005084(data_ptr);\n      return;\n    }\n    if ((DAT_080052dc & data_value_4) == 0) {\n      if ((((DAT_080052ec & data_value_2) != 0) && ((data_value_3 & 0x400) != 0)) && ((DAT_080052e4 & data_value_2) == 0)\n         ) {\n        FUN_08004a76(data_ptr);\n        return;\n      }\n      if (((DAT_080052e4 & data_value_2) != 0) && ((data_value_3 & 0x200) != 0)) {\n        FUN_0800459c(data_ptr);\n      }\n    }\n    else {\n      if ((((DAT_080052e0 & data_value_2) != 0) && ((data_value_3 & 0x400) != 0)) && ((DAT_080052e4 & data_value_2) == 0)\n         ) {\n        FUN_08004a24(data_ptr);\n        return;\n      }\n      if (((DAT_080052e4 & data_value_2) != 0) && ((data_value_3 & 0x200) != 0)) {\n        FUN_0800457c(data_ptr);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08004396",
                "FUN_08004d6c",
                "FUN_08004a24",
                "FUN_080043a2",
                "FUN_0800457c",
                "FUN_08004ac2",
                "FUN_0800459c",
                "FUN_08005084",
                "FUN_08004b82",
                "FUN_08004ccc",
                "FUN_08004a76",
                "FUN_08004e3c",
                "FUN_0800430c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005188",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08005188"
        },
        "FUN_08007244": {
            "renaming": {
                "FUN_08007244": "do_nothing_08007244"
            },
            "code": "\nvoid do_nothing_08007244(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007244",
            "calling": [
                "FUN_08007246"
            ],
            "imported": false,
            "current_name": "do_nothing_08007244"
        },
        "FUN_08009db0": {
            "renaming": {
                "FUN_08009db0": "find_available_slot_08009db0",
                "param_1": "error_code",
                "param_2": "unknown_param_2",
                "param_3": "unknown_param_3",
                "param_4": "unknown_param_4",
                "piVar1": "current_slot",
                "piVar2": "current_slot_data",
                "iVar3": "data_structure",
                "ppiVar4": "next_data_structure"
            },
            "code": "\nint * find_available_slot_08009db0(undefined4 *error_code,undefined4 unknown_param_2,undefined4 unknown_param_3,undefined4 unknown_param_4)\n\n{\n  int *current_slot;\n  int *current_slot_data;\n  int data_structure;\n  int **next_data_structure;\n  \n  data_structure = *(int *)PTR_PTR_DAT_08009e24;\n  if (*(int *)(data_structure + 0x18) == 0) {\n    FUN_08009d50(data_structure);\n  }\n  next_data_structure = (int **)(data_structure + 0x48);\n  do {\n    current_slot_data = next_data_structure[2];\n    current_slot = next_data_structure[1];\n    while (current_slot = (int *)((int)current_slot + -1), -1 < (int)current_slot) {\n      if (*(short *)(current_slot_data + 3) == 0) {\n        *(undefined2 *)((int)current_slot_data + 0xe) = 0xffff;\n        current_slot_data[0x19] = 0;\n        *(undefined2 *)(current_slot_data + 3) = 1;\n        *current_slot_data = 0;\n        current_slot_data[2] = 0;\n        current_slot_data[1] = 0;\n        current_slot_data[4] = 0;\n        current_slot_data[5] = 0;\n        current_slot_data[6] = 0;\n        FUN_080091c6(current_slot_data + 0x17,0,8,1,unknown_param_4);\n        current_slot_data[0xd] = 0;\n        current_slot_data[0xe] = 0;\n        current_slot_data[0x12] = 0;\n        current_slot_data[0x13] = 0;\n        return current_slot_data;\n      }\n      current_slot_data = current_slot_data + 0x1a;\n    }\n    if (*next_data_structure == (int *)0x0) {\n      current_slot = (int *)FUN_08009d24(error_code,4);\n      *next_data_structure = current_slot;\n      if (current_slot == (int *)0x0) {\n        *error_code = 0xc;\n        return (int *)0x0;\n      }\n    }\n    next_data_structure = (int **)*next_data_structure;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_08009d24",
                "FUN_08009d50",
                "FUN_080091c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009db0",
            "calling": [
                "FUN_08009d50"
            ],
            "imported": false,
            "current_name": "find_available_slot_08009db0"
        },
        "FUN_08002c2c": {
            "renaming": {
                "FUN_08002c2c": "execute_function_08002c2c",
                "param_1": "unused_param",
                "param_2": "input_param_1",
                "param_3": "input_param_2",
                "param_4": "input_param_3",
                "pcVar1": "function_pointer"
            },
            "code": "\nvoid execute_function_08002c2c(undefined4 unused_param,undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3)\n\n{\n  code *function_pointer;\n  \n  function_pointer = *(code **)PTR_DAT_08002c3c;\n  if (function_pointer != (code *)0x0) {\n    (*function_pointer)(input_param_1,input_param_2,input_param_2,function_pointer,input_param_3);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c2c",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_08002c2c"
        },
        "FUN_08001bf8": {
            "renaming": {
                "FUN_08001bf8": "execute_data_processing_08001bf8",
                "param_1": "data_pointer",
                "param_2": "unused_param",
                "param_3": "input_1",
                "param_4": "input_2"
            },
            "code": "\nvoid execute_data_processing_08001bf8(undefined4 data_pointer,undefined4 unused_param,undefined4 input_1,undefined4 input_2)\n\n{\n  FUN_0800288c(PTR_DAT_08001c04,data_pointer,input_1,input_2,input_2);\n  return;\n}\n\n",
            "called": [
                "FUN_0800288c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001bf8",
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "execute_data_processing_08001bf8"
        },
        "FUN_080072f0": {
            "renaming": {
                "FUN_080072f0": "execute_function_080072f0",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4"
            },
            "code": "\nvoid execute_function_080072f0(undefined4 input_param_1,undefined2 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  FUN_080042d4(input_param_1,input_param_2,input_param_3,input_param_4,input_param_4);\n  return;\n}\n\n",
            "called": [
                "FUN_080042d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072f0",
            "calling": [
                "FUN_08008a6c"
            ],
            "imported": false,
            "current_name": "execute_function_080072f0"
        },
        "FUN_08000178": {
            "renaming": {
                "FUN_08000178": "get_string_length_08000178",
                "param_1": "input_string",
                "pcVar2": "string_length",
                "pcVar3": "current_character"
            },
            "code": "\nchar * get_string_length_08000178(char *input_string)\n\n{\n  char cVar1;\n  char *string_length;\n  char *current_character;\n  \n  current_character = input_string;\n  do {\n    string_length = current_character + 1;\n    cVar1 = *current_character;\n    current_character = string_length;\n  } while (cVar1 != '\\0');\n  return string_length + (-1 - (int)input_string);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000178",
            "calling": [
                "FUN_08002e44",
                "FUN_08008e7c",
                "FUN_080032a2"
            ],
            "imported": false,
            "current_name": "get_string_length_08000178"
        },
        "FUN_080069ec": {
            "renaming": {
                "FUN_080069ec": "process_data_080069ec",
                "param_1": "data_array",
                "iVar1": "result",
                "uVar2": "second_data_value",
                "puVar3": "first_data_pointer",
                "uVar4": "bitwise_check",
                "uVar5": "first_data_value",
                "param_1[0xf]": "flag_pointer",
                "param_1[0xd]": "callback_pointer",
                "do_nothing_0800877c": "do_nothing"
            },
            "code": "\nvoid process_data_080069ec(uint **data_array)\n\n{\n  int result;\n  uint second_data_value;\n  uint *first_data_pointer;\n  uint bitwise_check;\n  uint first_data_value;\n  \n  first_data_pointer = *data_array;\n  first_data_value = *first_data_pointer;\n  second_data_value = first_data_pointer[3];\n  if ((((first_data_value & 0xf) == 0) && ((first_data_value & 0x20) != 0)) && ((second_data_value & 0x20) != 0)) {\n    FUN_0800694c(data_array);\n    return;\n  }\n  if (((first_data_value & 0xf) == 0) || ((bitwise_check = first_data_pointer[5] & 1, bitwise_check == 0 && ((second_data_value & 0x120) == 0)))) {\n    if (((first_data_value & 0x80) != 0) && ((second_data_value & 0x80) != 0)) {\n      FUN_080064cc(data_array);\n      return;\n    }\n    if (((first_data_value & 0x40) != 0) && ((second_data_value & 0x40) != 0)) {\n      FUN_08006932(data_array);\n    }\n  }\n  else {\n    if (((first_data_value & 1) != 0) && ((second_data_value & 0x100) != 0)) {\n      flag_pointer = (uint *)((uint)flag_pointer | 1);\n    }\n    if (((first_data_value & 4) != 0) && (bitwise_check != 0)) {\n      flag_pointer = (uint *)((uint)flag_pointer | 2);\n    }\n    if (((first_data_value & 2) != 0) && (bitwise_check != 0)) {\n      flag_pointer = (uint *)((uint)flag_pointer | 4);\n    }\n    if (((first_data_value & 8) != 0) && (bitwise_check != 0)) {\n      flag_pointer = (uint *)((uint)flag_pointer | 8);\n    }\n    if (flag_pointer != (uint *)0x0) {\n      if (((first_data_value & 0x20) != 0) && ((second_data_value & 0x20) != 0)) {\n        FUN_0800694c(data_array);\n      }\n      if ((((uint)flag_pointer & 8) == 0) && (((*data_array)[5] & 0x40) == 0)) {\n        do_nothing_0800877c(data_array);\n        flag_pointer = (uint *)0x0;\n        return;\n      }\n      FUN_080064b0(data_array);\n      first_data_pointer = *data_array;\n      if ((first_data_pointer[5] & 0x40) == 0) {\n        do_nothing_0800877c(data_array);\n        return;\n      }\n      first_data_pointer[5] = first_data_pointer[5] & 0xffffffbf;\n      if (callback_pointer == (uint *)0x0) {\n        do_nothing_0800877c(data_array);\n        return;\n      }\n      callback_pointer[0xd] = (uint)PTR_LAB_08006b0c_1_08006b08;\n      result = FUN_08004050(callback_pointer);\n      if (result != 0) {\n        (*(code *)callback_pointer[0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08006932",
                "FUN_08004050",
                "FUN_0800877c",
                "FUN_0800694c",
                "FUN_080064b0",
                "FUN_080064cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069ec",
            "calling": [],
            "imported": false,
            "current_name": "process_data_080069ec"
        },
        "FUN_0800a168": {
            "renaming": {
                "FUN_0800a168": "check_and_assign_value_0800a168",
                "param_1": "output_value",
                "param_2": "input_value_1",
                "param_3": "input_value_2",
                "param_4": "input_value_3",
                "puVar1": "pointer_to_memory",
                "iVar2": "function_result"
            },
            "code": "\nvoid check_and_assign_value_0800a168(int *output_value,undefined4 input_value_1,undefined4 input_value_2,undefined4 input_value_3)\n\n{\n  undefined *pointer_to_memory;\n  int function_result;\n  \n  pointer_to_memory = PTR_DAT_0800a188;\n  *(undefined4 *)PTR_DAT_0800a188 = 0;\n  function_result = FUN_08008858(input_value_1,input_value_2,input_value_3,input_value_3,input_value_3);\n  if ((function_result == -1) && (*(int *)pointer_to_memory != 0)) {\n    *output_value = *(int *)pointer_to_memory;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08008858"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a168",
            "calling": [
                "FUN_0800a020"
            ],
            "imported": false,
            "current_name": "check_and_assign_value_0800a168"
        },
        "FUN_080067ac": {
            "renaming": {
                "FUN_080067ac": "process_data_080067ac",
                "param_1": "data_ptr",
                "param_2": "data_array",
                "param_3": "data_length",
                "uVar1": "result",
                "iVar2": "return_value"
            },
            "code": "\nint process_data_080067ac(int *data_ptr,ushort *data_array,int data_length,undefined4 param_4)\n\n{\n  undefined4 result;\n  int return_value;\n  \n  if (*(char *)((int)data_ptr + 0x39) == ' ') {\n    if (data_array == (ushort *)0x0) {\n      return_value = 1;\n    }\n    else if (data_length == 0) {\n      return_value = 1;\n    }\n    else if (*(char *)(data_ptr + 0xe) == '\\x01') {\n      return_value = 2;\n    }\n    else {\n      *(undefined *)(data_ptr + 0xe) = 1;\n      data_ptr[0xf] = 0;\n      *(undefined *)((int)data_ptr + 0x39) = 0x21;\n      result = FUN_08003760();\n      *(short *)(data_ptr + 9) = (short)data_length;\n      *(short *)((int)data_ptr + 0x26) = (short)data_length;\n      while (*(short *)((int)data_ptr + 0x26) != 0) {\n        *(short *)((int)data_ptr + 0x26) = *(short *)((int)data_ptr + 0x26) + -1;\n        if (data_ptr[2] == 0x1000) {\n          return_value = FUN_080066e8(data_ptr,0x80,0,result,param_4);\n          if (return_value != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = *data_array & 0x1ff;\n          if (data_ptr[4] == 0) {\n            data_array = data_array + 1;\n          }\n          else {\n            data_array = (ushort *)((int)data_array + 1);\n          }\n        }\n        else {\n          return_value = FUN_080066e8(data_ptr,0x80,0,result,param_4);\n          if (return_value != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = (uint)*(byte *)data_array;\n          data_array = (ushort *)((int)data_array + 1);\n        }\n      }\n      return_value = FUN_080066e8(data_ptr,0x40,0,result,param_4);\n      if (return_value == 0) {\n        *(undefined *)((int)data_ptr + 0x39) = 0x20;\n        *(undefined *)(data_ptr + 0xe) = 0;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}\n\n",
            "called": [
                "FUN_08003760",
                "FUN_080066e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080067ac",
            "calling": [
                "FUN_08008500"
            ],
            "imported": false,
            "current_name": "process_data_080067ac"
        },
        "FUN_0800735a": {
            "renaming": {
                "FUN_0800735a": "find_value_in_array_0800735a",
                "param_1": "search_value",
                "param_2": "array_ptr"
            },
            "code": "\nundefined4 find_value_in_array_0800735a(int search_value,char *array_ptr)\n\n{\n  while( true ) {\n    if (*array_ptr == -1) {\n      return 0xffffffff;\n    }\n    if (*array_ptr == search_value) break;\n    array_ptr = array_ptr + 0xc;\n  }\n  return *(undefined4 *)(array_ptr + 8);\n}\n\n",
            "called": [
                "FUN_0800735a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800735a",
            "calling": [
                "FUN_08007376",
                "FUN_0800735a"
            ],
            "imported": false,
            "current_name": "find_value_in_array_0800735a"
        },
        "FUN_08008c20": {
            "renaming": {
                "FUN_08008c20": "initialize_struct_08008c20",
                "param_1": "struct_ptr"
            },
            "code": "\nvoid initialize_struct_08008c20(int struct_ptr)\n\n{\n  *(int *)(struct_ptr + 0x130) = struct_ptr + 0x11;\n  *(undefined2 *)(struct_ptr + 0x134) = 0;\n  *(undefined2 *)(struct_ptr + 0x136) = 0;\n  *(int *)(struct_ptr + 0x138) = struct_ptr + 0x51;\n  *(undefined2 *)(struct_ptr + 0x13c) = 0;\n  *(undefined2 *)(struct_ptr + 0x13e) = 0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c20",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "initialize_struct_08008c20"
        },
        "FUN_08000a64": {
            "renaming": {
                "FUN_08000a64": "process_data_08000a64",
                "iVar1": "result",
                "uVar2": "counter"
            },
            "code": "\nvoid process_data_08000a64(void)\n\n{\n  int result;\n  uint counter;\n  \n  for (counter = 0; counter < 0x3c; counter = counter + 1 & 0xff) {\n    if (counter < 0x3c) {\n      if (PTR_DAT_08000ad8[counter] == -1) {\n        result = 0;\n      }\n      else {\n        result = FUN_080036ac();\n        if (result == 0) {\n          result = 0;\n        }\n        else {\n          result = FUN_080036ac((int)(char)PTR_DAT_08000ad8[counter]);\n          if (result == 1) {\n            result = 0;\n          }\n          else {\n            result = FUN_0800738a((int)(char)PTR_DAT_08000ad8[counter],PTR_DAT_08000adc);\n            if (result == 0) {\n              result = FUN_0800738a((int)(char)PTR_DAT_08000ad8[counter],PTR_DAT_08000ae0);\n            }\n          }\n        }\n      }\n    }\n    else {\n      result = 0;\n    }\n    if (result != 0) {\n      FUN_080005f8(counter,6);\n    }\n  }\n  *PTR_DAT_08000ae4 = 1;\n  FUN_08002a26(PTR_DAT_08000ae8);\n  return;\n}\n\n",
            "called": [
                "FUN_080036ac",
                "FUN_08002a26",
                "FUN_0800738a",
                "FUN_080005f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a64",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "process_data_08000a64"
        },
        "FUN_0800723c": {
            "renaming": {
                "FUN_0800723c": "initialize_application_0800723c"
            },
            "code": "\nvoid initialize_application_0800723c(void)\n\n{\n  FUN_08003760();\n  return;\n}\n\n",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800723c",
            "calling": [
                "FUN_08008abc"
            ],
            "imported": false,
            "current_name": "initialize_application_0800723c"
        },
        "FUN_080043a2": {
            "renaming": {
                "FUN_080043a2": "process_data_080043a2",
                "param_1": "data_array",
                "puVar1": "pointer_var",
                "param_1[0x14]": "array_ptr",
                "uint": "unsigned_int",
                "puVar1[1]": "pointer_var_1",
                "param_1[0xc]": "array_ptr_1"
            },
            "code": "\nundefined4 process_data_080043a2(unsigned_int **data_array)\n\n{\n  unsigned_int *pointer_var;\n  \n  pointer_var = data_array[0xb];\n  if ((*(char *)((int)data_array + 0x3d) == '\\\"') &&\n     ((array_ptr != (unsigned_int *)0x0 || (*(char *)((int)data_array + 0x3e) != '@')))) {\n    if ((array_ptr == (unsigned_int *)0x0) && (data_array[4] == (unsigned_int *)0xc000)) {\n      **data_array = **data_array | 0x100;\n      array_ptr = (unsigned_int *)((int)array_ptr + 1);\n    }\n    else {\n      if (*(short *)((int)data_array + 0x2a) == 0) {\n        **data_array = **data_array | 0x200;\n      }\n      else if (*(short *)((int)data_array + 0x2a) == 1) {\n        if (pointer_var == (unsigned_int *)0xffff0000) {\n          **data_array = **data_array & 0xfffffbff;\n          pointer_var = *data_array;\n          if ((pointer_var_1 & 0x800) == 0) {\n            *pointer_var = *pointer_var | 0x200;\n          }\n          else {\n            *pointer_var = *pointer_var & 0xfffffbff;\n          }\n        }\n        else if (((pointer_var == (unsigned_int *)0x4) || (pointer_var == (unsigned_int *)0x8)) ||\n                (array_ptr_1 == (unsigned_int *)0x12)) {\n          **data_array = **data_array & 0xfffffbff;\n          **data_array = **data_array | 0x200;\n        }\n        else if (data_array[0xb] == (unsigned_int *)0x2) {\n          **data_array = **data_array | 0x400;\n        }\n        else {\n          **data_array = **data_array & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)data_array + 0x2a) == 2) {\n        if (data_array[0xb] == (unsigned_int *)0x2) {\n          **data_array = **data_array | 0x400;\n        }\n        else {\n          **data_array = **data_array | 0x800;\n          **data_array = **data_array & 0xfffffbff;\n        }\n        pointer_var = *data_array;\n        if ((pointer_var_1 & 0x800) != 0) {\n          pointer_var_1 = pointer_var_1 | 0x1000;\n        }\n      }\n      else {\n        **data_array = **data_array | 0x400;\n        pointer_var = *data_array;\n        if ((pointer_var_1 & 0x800) != 0) {\n          pointer_var_1 = pointer_var_1 | 0x1000;\n        }\n      }\n      array_ptr = (unsigned_int *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043a2",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_data_080043a2"
        },
        "FUN_0800694c": {
            "renaming": {
                "FUN_0800694c": "process_data_0800694c",
                "param_1": "data_ptr",
                "pbVar1": "byte_ptr",
                "sVar2": "counter",
                "puVar3": "undefined_ptr"
            },
            "code": "\nundefined4 process_data_0800694c(int *data_ptr)\n\n{\n  byte *byte_ptr;\n  short counter;\n  undefined *undefined_ptr;\n  \n  if (*(char *)((int)data_ptr + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (data_ptr[2] == 0x1000) {\n    if (data_ptr[4] == 0) {\n      *(ushort *)data_ptr[10] = (ushort)((uint)(*(int *)(*data_ptr + 4) << 0x17) >> 0x17);\n      data_ptr[10] = data_ptr[10] + 2;\n    }\n    else {\n      *(ushort *)data_ptr[10] = (ushort)*(undefined4 *)(*data_ptr + 4) & 0xff;\n      data_ptr[10] = data_ptr[10] + 1;\n    }\n  }\n  else if (data_ptr[4] == 0) {\n    undefined_ptr = (undefined *)data_ptr[10];\n    data_ptr[10] = (int)(undefined_ptr + 1);\n    *undefined_ptr = (char)*(undefined4 *)(*data_ptr + 4);\n  }\n  else {\n    byte_ptr = (byte *)data_ptr[10];\n    data_ptr[10] = (int)(byte_ptr + 1);\n    *byte_ptr = (byte)*(undefined4 *)(*data_ptr + 4) & 0x7f;\n  }\n  counter = *(short *)((int)data_ptr + 0x2e) + -1;\n  *(short *)((int)data_ptr + 0x2e) = counter;\n  if (counter != 0) {\n    return 0;\n  }\n  *(uint *)(*data_ptr + 0xc) = *(uint *)(*data_ptr + 0xc) & 0xffffffdf;\n  *(uint *)(*data_ptr + 0xc) = *(uint *)(*data_ptr + 0xc) & 0xfffffeff;\n  *(uint *)(*data_ptr + 0x14) = *(uint *)(*data_ptr + 0x14) & 0xfffffffe;\n  *(undefined *)((int)data_ptr + 0x3a) = 0x20;\n  FUN_0800870c();\n  return 0;\n}\n\n",
            "called": [
                "FUN_0800870c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800694c",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "process_data_0800694c"
        },
        "FUN_08006280": {
            "renaming": {
                "FUN_08006280": "set_flags_and_bits_08006280",
                "param_1": "ptr_to_uint_ptr",
                "param_2": "flag_value",
                "puVar1": "ptr_to_uint"
            },
            "code": "\nundefined4 set_flags_and_bits_08006280(uint **ptr_to_uint_ptr,undefined4 flag_value)\n\n{\n  uint *ptr_to_uint;\n  \n  switch(flag_value) {\n  case 0:\n    (*ptr_to_uint_ptr)[3] = (*ptr_to_uint_ptr)[3] | 2;\n    break;\n  case 4:\n    (*ptr_to_uint_ptr)[3] = (*ptr_to_uint_ptr)[3] | 4;\n    break;\n  case 8:\n    (*ptr_to_uint_ptr)[3] = (*ptr_to_uint_ptr)[3] | 8;\n    break;\n  case 0xc:\n    (*ptr_to_uint_ptr)[3] = (*ptr_to_uint_ptr)[3] | 0x10;\n  }\n  FUN_08006262(*ptr_to_uint_ptr,flag_value,1);\n  ptr_to_uint = *ptr_to_uint_ptr;\n  if (ptr_to_uint == DAT_080062f0) {\n    ptr_to_uint[0x11] = ptr_to_uint[0x11] | 0x8000;\n  }\n  **ptr_to_uint_ptr = **ptr_to_uint_ptr | 1;\n  return 0;\n}\n\n",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006280",
            "calling": [
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "set_flags_and_bits_08006280"
        },
        "FUN_08007258": {
            "renaming": {
                "FUN_08007258": "improved_function_08007258",
                "param_1": "input_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "uVar1": "result",
                "local_20": "bit_mask",
                "local_1c": "second_var",
                "local_18": "third_var",
                "local_14": "fourth_var"
            },
            "code": "\nvoid improved_function_08007258(uint input_param,undefined4 second_param,undefined4 third_param)\n\n{\n  undefined4 result;\n  uint bit_mask;\n  undefined4 second_var;\n  undefined4 third_var;\n  undefined4 fourth_var;\n  \n  result = FUN_08006bb8((input_param << 0x18) >> 0x1c);\n  bit_mask = 1 << (input_param & 0xf) & 0xffff;\n  fourth_var = 3;\n  *(uint *)(DAT_080072d0 + 0x18) = *(uint *)(DAT_080072d0 + 0x18) | 1;\n  if ((input_param - 0xd & 0xff) < 2) {\n    *(uint *)(DAT_080072d4 + 4) = *(uint *)(DAT_080072d4 + 4) & 0xf8ffffff | 0x4000000;\n  }\n  if (((input_param == 0xf) || (input_param == 0x13)) || (input_param == 0x14)) {\n    *(uint *)(DAT_080072d4 + 4) = *(uint *)(DAT_080072d4 + 4) & 0xf8ffffff | 0x2000000;\n  }\n  second_var = second_param;\n  third_var = third_param;\n  FUN_080040e8(result,&bit_mask);\n  return;\n}\n\n",
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007258",
            "calling": [
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "improved_function_08007258"
        },
        "FUN_0800a0ec": {
            "renaming": {
                "FUN_0800a0ec": "initialize_and_set_param_0800a0ec",
                "param_1": "result",
                "param_2": "input_1",
                "param_3": "input_2",
                "param_4": "input_3",
                "puVar1": "pointer",
                "iVar2": "function_result"
            },
            "code": "\nvoid initialize_and_set_param_0800a0ec(int *result,undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  undefined *pointer;\n  int function_result;\n  \n  pointer = PTR_DAT_0800a10c;\n  *(undefined4 *)PTR_DAT_0800a10c = 0;\n  function_result = FUN_08008846(input_1,input_2,input_2,0,input_3);\n  if ((function_result == -1) && (*(int *)pointer != 0)) {\n    *result = *(int *)pointer;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08008846"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a0ec",
            "calling": [
                "FUN_08009e64"
            ],
            "imported": false,
            "current_name": "initialize_and_set_param_0800a0ec"
        },
        "FUN_08008df8": {
            "renaming": {
                "FUN_08008df8": "initialize_pointer_08008df8",
                "param_1": "pointer",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "value_3",
                "param_5": "value_4"
            },
            "code": "\nvoid initialize_pointer_08008df8(undefined4 *pointer,undefined value_1,undefined value_2,undefined value_3,\n                 undefined value_4)\n\n{\n  *pointer = PTR_PTR_LAB_08008dbe_1_08008e10;\n  *(undefined *)(pointer + 1) = value_1;\n  *(undefined *)((int)pointer + 5) = value_2;\n  *(undefined *)((int)pointer + 6) = value_3;\n  *(undefined *)((int)pointer + 7) = value_4;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008df8",
            "calling": [
                "FUN_08008e14"
            ],
            "imported": false,
            "current_name": "initialize_pointer_08008df8"
        },
        "FUN_08009f4a": {
            "renaming": {
                "FUN_08009f4a": "do_nothing_08009f4a"
            },
            "code": "\nvoid do_nothing_08009f4a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f4a",
            "calling": [
                "FUN_080091d8",
                "FUN_08009270"
            ],
            "imported": false,
            "current_name": "do_nothing_08009f4a"
        },
        "FUN_08006c7c": {
            "renaming": {
                "FUN_08006c7c": "decode_value_08006c7c",
                "param_1": "input_value",
                "param_2": "unused_param",
                "param_3": "unused_param_2",
                "param_4": "unused_param_3",
                "iVar1": "result",
                "uVar2": "shifted_value"
            },
            "code": "\nundefined4 decode_value_08006c7c(undefined4 input_value,undefined4 unused_param,undefined4 unused_param_2,undefined4 unused_param_3)\n\n{\n  int result;\n  uint shifted_value;\n  \n  result = FUN_08007376(input_value,PTR_DAT_08006ca4,unused_param_2,unused_param_3,unused_param_3);\n  shifted_value = (uint)(result << 0xc) >> 0x1b;\n  if (shifted_value == 3) {\n    return 8;\n  }\n  if (shifted_value != 4) {\n    if (shifted_value != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "called": [
                "FUN_08007376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c7c",
            "calling": [
                "FUN_080071e4",
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "decode_value_08006c7c"
        },
        "FUN_08006b5c": {
            "renaming": {
                "FUN_08006b5c": "update_bit_in_array_08006b5c",
                "param_1": "bit_position",
                "param_2": "array_address",
                "uVar1": "array_index"
            },
            "code": "\nvoid update_bit_in_array_08006b5c(uint bit_position,int array_address)\n\n{\n  uint array_index;\n  \n  array_index = (bit_position << 0x18) >> 0x1c;\n  *(uint *)(array_address + array_index * 4) = *(uint *)(array_address + array_index * 4) & ~(1 << (bit_position & 0xf));\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b5c",
            "calling": [
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "update_bit_in_array_08006b5c"
        },
        "FUN_08007376": {
            "renaming": {
                "FUN_08007376": "check_parameter_08007376",
                "param_1": "input_param",
                "uVar1": "result"
            },
            "code": "\nundefined4 check_parameter_08007376(int input_param)\n\n{\n  undefined4 result;\n  \n  if (input_param == -1) {\n    return 0xffffffff;\n  }\n  result = FUN_0800735a();\n  return result;\n}\n\n",
            "called": [
                "FUN_0800735a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007376",
            "calling": [
                "FUN_08006e68",
                "FUN_080071e4",
                "FUN_08007118",
                "FUN_08008078",
                "FUN_080077b0",
                "FUN_08006c7c",
                "FUN_08006c60"
            ],
            "imported": false,
            "current_name": "check_parameter_08007376"
        },
        "FUN_08000188": {
            "renaming": {
                "FUN_08000188": "sendSoftwareInterrupt_08000188"
            },
            "code": "\nvoid sendSoftwareInterrupt_08000188(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000188",
            "calling": [
                "FUN_0800018c"
            ],
            "imported": false,
            "current_name": "sendSoftwareInterrupt_08000188"
        },
        "FUN_08004f3c": {
            "renaming": {
                "FUN_08004f3c": "process_data_08004f3c",
                "param_1": "data",
                "iVar1": "result",
                "puVar2": "pointer_2",
                "puVar3": "pointer_3"
            },
            "code": "\nvoid process_data_08004f3c(uint **data)\n\n{\n  int result;\n  uint *pointer_2;\n  uint *pointer_3;\n  \n  if (*(byte *)((int)data + 0x3d) - 0x29 < 2) {\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)data + 0x3d) != '`') && (((*data)[1] & 0x800) == 0)) {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n    }\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3e) = 0;\n  }\n  **data = **data & 0xfffff7ff;\n  pointer_3 = *data;\n  if ((pointer_3[1] & 0x800) == 0) {\n    if (*(char *)((int)data + 0x3d) == '`') {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      data[0x10] = (uint *)0x0;\n      if ((pointer_3[5] & 0x40) != 0) {\n        pointer_2 = data[9];\n        data[9] = (uint *)((int)pointer_2 + 1);\n        *(char *)pointer_2 = (char)pointer_3[4];\n      }\n      **data = **data & 0xfffffffe;\n      do_nothing_08004f3a(data);\n    }\n    else {\n      if ((pointer_3[5] & 0x40) != 0) {\n        pointer_2 = data[9];\n        data[9] = (uint *)((int)pointer_2 + 1);\n        *(char *)pointer_2 = (char)pointer_3[4];\n      }\n      FUN_08008020(data);\n    }\n  }\n  else {\n    pointer_3[1] = pointer_3[1] & 0xfffff7ff;\n    if (*(char *)((int)data[0xd] + 0x21) == '\\x01') {\n      data[0xe][0xd] = (uint)PTR_LAB_080053cc_1_0800507c;\n      result = FUN_08004050(data[0xe]);\n      if (result != 0) {\n        if (((*data)[5] & 0x40) != 0) {\n          pointer_3 = data[9];\n          data[9] = (uint *)((int)pointer_3 + 1);\n          *(char *)pointer_3 = (char)(*data)[4];\n        }\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xe][0xd])();\n      }\n    }\n    else {\n      data[0xd][0xd] = (uint)PTR_LAB_080053cc_1_0800507c;\n      result = FUN_08004050(data[0xd]);\n      if (result != 0) {\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xd][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)data + 0x3d) == '(') && (((uint)data[0x10] & 4) != 0)) {\n    data[0xb] = DAT_08005080;\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    FUN_08007ff0(data);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08004050",
                "FUN_08007ff0",
                "FUN_08004f3a",
                "FUN_08008020"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [
                "FUN_08005084",
                "FUN_080052f0"
            ],
            "imported": false,
            "current_name": "process_data_08004f3c"
        },
        "FUN_080033cc": {
            "renaming": {
                "FUN_080033cc": "process_input_080033cc",
                "param_1": "input_data",
                "param_2": "unused_param_1",
                "param_3": "unused_param_2",
                "param_4": "unused_param_3",
                "pcVar3": "input_str",
                "cVar1": "first_char",
                "iVar2": "index"
            },
            "code": "\nvoid process_input_080033cc(int input_data,undefined4 unused_param_1,undefined4 unused_param_2,undefined4 unused_param_3)\n\n{\n  char first_char;\n  int index;\n  char *input_str;\n  \n  input_str = *(char **)(input_data + 4);\n  first_char = *input_str;\n  if (first_char == 'q') {\n    if (*(int *)(input_data + 0x68) != 0) {\n      index = FUN_080033a8(input_data,*(int *)(input_data + 0x18) + -1,input_str + 1,input_str,unused_param_3);\n      FUN_08003376(input_data,0,index + 1);\n      (**(code **)(input_data + 0x68))(*(undefined4 *)(input_data + 0x40),*(int *)(input_data + 4) + 1);\n      return;\n    }\n  }\n  else if (first_char == 'y') {\n    if (*(code **)(input_data + 0x70) != (code *)0x0) {\n      if (*(uint *)(input_data + 0x18) < 3) {\n        (**(code **)(input_data + 0x70))(*(undefined4 *)(input_data + 0x34),0,0);\n        return;\n      }\n      index = FUN_080033a8(input_data,*(uint *)(input_data + 0x18) - 3,input_str + 3,input_str,unused_param_3);\n      FUN_08003376(input_data,0,index + 3);\n      index = *(int *)(input_data + 4);\n      (**(code **)(input_data + 0x70))\n                (*(undefined4 *)(input_data + 0x34),*(undefined *)(index + 1),*(undefined *)(index + 2)\n                 ,index + 3);\n      return;\n    }\n  }\n  else if (*(code **)(input_data + 0x6c) != (code *)0x0) {\n    (**(code **)(input_data + 0x6c))\n              (*(undefined4 *)(input_data + 0x44),first_char,*(int *)(input_data + 0x18) + -1,input_str + 1);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080033a8",
                "FUN_08003376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033cc",
            "calling": [
                "FUN_08003474"
            ],
            "imported": false,
            "current_name": "process_input_080033cc"
        },
        "FUN_08003de4": {
            "renaming": {
                "FUN_08003de4": "check_status_08003de4",
                "param_1": "input",
                "iVar1": "result"
            },
            "code": "\nint check_status_08003de4(int input)\n\n{\n  int result;\n  \n  if (*(char *)(input + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(input + 0x24) = 1;\n  result = FUN_08003b8c();\n  if (result == 0) {\n    *(uint *)(input + 0x28) = *(uint *)(input + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(input + 0x24) = 0;\n  return result;\n}\n\n",
            "called": [
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003de4",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "check_status_08003de4"
        },
        "FUN_08004f3a": {
            "renaming": {
                "FUN_08004f3a": "do_nothing_08004f3a"
            },
            "code": "\nvoid do_nothing_08004f3a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3a",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": false,
            "current_name": "do_nothing_08004f3a"
        },
        "FUN_08000500": {
            "renaming": {
                "FUN_08000500": "attach_servo_08000500",
                "param_1": "servo_id",
                "param_2": "pin_num",
                "param_3": "degree",
                "param_4": "unused",
                "bVar1": "num_attached_servos",
                "bVar2": "last_detached"
            },
            "code": "\nvoid attach_servo_08000500(int servo_id,int pin_num,int degree,undefined4 unused)\n\n{\n  byte num_attached_servos;\n  byte last_detached;\n  \n  num_attached_servos = *PTR_DAT_0800056c;\n  if (0xb < num_attached_servos) {\n    FUN_08002f14(PTR_DAT_08000584,PTR_s_Max_servos_attached_08000580,degree,unused,unused);\n    return;\n  }\n  last_detached = *PTR_DAT_08000570;\n  if (last_detached == 0) {\n    PTR_DAT_08000578[servo_id] = num_attached_servos;\n    *PTR_DAT_0800056c = num_attached_servos + 1;\n  }\n  else {\n    PTR_DAT_08000578[servo_id] = PTR_DAT_08000574[last_detached - 1];\n    *PTR_DAT_08000570 = last_detached - 1;\n  }\n  if ((0 < pin_num) && (0 < degree)) {\n    FUN_080025ac(PTR_DAT_0800057c + (uint)(byte)PTR_DAT_08000578[servo_id] * 3,servo_id,pin_num,\n                 degree);\n    return;\n  }\n  FUN_08002634(PTR_DAT_0800057c + (uint)(byte)PTR_DAT_08000578[servo_id] * 3,servo_id);\n  return;\n}\n\n",
            "called": [
                "FUN_080025ac",
                "FUN_08002f14",
                "FUN_08002634"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000500",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "attach_servo_08000500"
        },
        "FUN_08009d24": {
            "renaming": {
                "FUN_08009d24": "allocate_memory_08009d24",
                "param_1": "memory_address",
                "param_2": "number_of_blocks",
                "puVar1": "allocated_memory_address",
                "iVar2": "offset"
            },
            "code": "\nundefined4 * allocate_memory_08009d24(undefined4 memory_address,int number_of_blocks)\n\n{\n  undefined4 *allocated_memory_address;\n  int offset;\n  \n  offset = (number_of_blocks + -1) * 0x68;\n  allocated_memory_address = (undefined4 *)FUN_08009270(memory_address,offset + 0x74);\n  if (allocated_memory_address != (undefined4 *)0x0) {\n    *allocated_memory_address = 0;\n    allocated_memory_address[1] = number_of_blocks;\n    allocated_memory_address[2] = allocated_memory_address + 3;\n    FUN_080091c6(allocated_memory_address + 3,0,offset + 0x68);\n  }\n  return allocated_memory_address;\n}\n\n",
            "called": [
                "FUN_080091c6",
                "FUN_08009270"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009d24",
            "calling": [
                "FUN_08009db0"
            ],
            "imported": false,
            "current_name": "allocate_memory_08009d24"
        },
        "FUN_0800344a": {
            "renaming": {
                "FUN_0800344a": "initialize_data_0800344a",
                "param_1": "data_ptr",
                "uVar1": "iterator"
            },
            "code": "\nvoid initialize_data_0800344a(int data_ptr)\n\n{\n  uint iterator;\n  \n  *(undefined4 *)(data_ptr + 0x10) = 0;\n  *(undefined *)(data_ptr + 0xc) = 0;\n  *(undefined *)(data_ptr + 0xd) = 0;\n  for (iterator = 0; iterator < *(uint *)(data_ptr + 8); iterator = iterator + 1) {\n    *(undefined *)(*(int *)(data_ptr + 4) + iterator) = 0;\n  }\n  *(undefined *)(data_ptr + 0x14) = 0;\n  *(undefined4 *)(data_ptr + 0x18) = 0;\n  if (*(code **)(data_ptr + 0x78) != (code *)0x0) {\n    (**(code **)(data_ptr + 0x78))(*(undefined4 *)(data_ptr + 0x48));\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800344a",
            "calling": [
                "FUN_08003474"
            ],
            "imported": false,
            "current_name": "initialize_data_0800344a"
        },
        "FUN_080071e4": {
            "renaming": {
                "FUN_080071e4": "process_input_080071e4",
                "param_1": "input_data",
                "local_50": "result_array",
                "uVar2": "value_mask"
            },
            "code": "\nvoid process_input_080071e4(undefined4 input_data)\n\n{\n  int iVar1;\n  uint value_mask;\n  int result_array [17];\n  \n  result_array[0] = FUN_08007320(input_data,PTR_DAT_08007238);\n  if ((result_array[0] != 0) &&\n     ((((iVar1 = FUN_08006c7c(input_data), iVar1 == 0 || (iVar1 == 4)) || (iVar1 == 8)) ||\n      ((iVar1 == 0xc || (iVar1 == 0x18)))))) {\n    value_mask = FUN_08007376(input_data,PTR_DAT_08007238);\n    if ((value_mask & 0x100000) == 0) {\n      FUN_080063c0(result_array,iVar1);\n    }\n    else {\n      FUN_08006460(result_array,iVar1);\n    }\n    FUN_08005e2e(result_array);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007376",
                "FUN_08007320",
                "FUN_08005e2e",
                "FUN_08006c7c",
                "FUN_08006460",
                "FUN_080063c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080071e4",
            "calling": [
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "process_input_080071e4"
        },
        "FUN_08008e72": {
            "renaming": {
                "FUN_08008e72": "execute_function_08008e72",
                "param_1": "function_pointer"
            },
            "code": "\nvoid execute_function_08008e72(undefined4 *function_pointer)\n\n{\n  (**(code **)*function_pointer)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e72",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_08008e72"
        },
        "FUN_080022f8": {
            "renaming": {
                "FUN_080022f8": "process_data_080022f8",
                "bVar1": "is_valid",
                "iVar2": "result",
                "uVar3": "value",
                "uVar4": "index_1",
                "uVar5": "index_2"
            },
            "code": "\nvoid process_data_080022f8(void)\n\n{\n  bool is_valid;\n  int result;\n  undefined4 value;\n  uint index_1;\n  uint index_2;\n  \n  FUN_08000ef8();\n  while (result = FUN_08002ec4(PTR_DAT_080023e0), result != 0) {\n    FUN_08002ed2(PTR_DAT_080023e0);\n  }\n  result = FUNC_08008abc();\n  *(int *)PTR_DAT_080023e4 = result;\n  if (*(uint *)PTR_DAT_080023ec < (uint)(result - *(int *)PTR_DAT_080023e8)) {\n    *(uint *)PTR_DAT_080023e8 = *(int *)PTR_DAT_080023e8 + *(uint *)PTR_DAT_080023ec;\n    for (index_1 = 0; index_1 < 0x3c; index_1 = index_1 + 1 & 0xff) {\n      index_2 = index_1 - 0x2e & 0xff;\n      if (index_2 < 0xe) {\n        if (index_1 < 0x3c) {\n          result = (int)(char)PTR_DAT_080023f4[index_1];\n        }\n        else {\n          result = -1;\n        }\n        result = FUN_080036ac(result);\n        if (result == 0) {\n          is_valid = false;\n        }\n        else {\n          if (index_1 < 0x3c) {\n            result = (int)(char)PTR_DAT_080023f4[index_1];\n          }\n          else {\n            result = -1;\n          }\n          result = FUN_080036ac(result);\n          if (result == 1) {\n            is_valid = false;\n          }\n          else {\n            result = FUN_08002fa0(PTR_DAT_080023e0,index_1);\n            if (result == 2) {\n              is_valid = true;\n            }\n            else {\n              is_valid = false;\n            }\n          }\n        }\n      }\n      else {\n        is_valid = false;\n      }\n      if ((is_valid) && ((*(int *)PTR_DAT_080023f0 >> index_2 & 1U) != 0)) {\n        value = FUN_08008880(index_2);\n        FUN_08002ef2(PTR_DAT_080023e0,index_2,value);\n      }\n    }\n    if (-1 < (char)*PTR_DAT_080023f8) {\n      for (index_1 = 0; (int)index_1 < (char)*PTR_DAT_080023f8 + 1; index_1 = index_1 + 1 & 0xff) {\n        result = index_1 * 0xc;\n        FUN_08001c18(PTR_DAT_080023fc[result],*(undefined4 *)(PTR_DAT_080023fc + result + 4),\n                     PTR_DAT_080023fc[result + 8],PTR_DAT_080023fc[result + 9]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08002ed2",
                "FUN_08008abc",
                "FUN_080036ac",
                "FUN_08001c18",
                "FUN_08000ef8",
                "FUN_08002ef2",
                "FUN_08002ec4",
                "FUN_08002fa0",
                "FUN_08008880"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080022f8",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "process_data_080022f8"
        },
        "FUN_080072fa": {
            "renaming": {
                "FUN_080072fa": "initialize_program_080072fa"
            },
            "code": "\nvoid initialize_program_080072fa(void)\n\n{\n  FUN_08003724();\n  FUN_080035b8();\n  return;\n}\n\n",
            "called": [
                "FUN_08003724",
                "FUN_080035b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072fa",
            "calling": [
                "FUN_080036a2"
            ],
            "imported": false,
            "current_name": "initialize_program_080072fa"
        },
        "FUN_08005084": {
            "renaming": {
                "FUN_08005084": "process_input_08005084",
                "param_1": "input_ptr",
                "cVar1": "first_char",
                "puVar2": "input_ptr_copy",
                "puVar3": "input_ptr_copy_2",
                "do_nothing_08004a74": "handle_quotes"
            },
            "code": "\nundefined4 process_input_08005084(uint **input_ptr)\n\n{\n  char first_char;\n  uint *input_ptr_copy;\n  uint *input_ptr_copy_2;\n  \n  first_char = *(char *)((int)input_ptr + 0x3d);\n  (*input_ptr)[1] = (*input_ptr)[1] & 0xfffff8ff;\n  **input_ptr = **input_ptr | 1;\n  **input_ptr = **input_ptr & 0xfffffbff;\n  input_ptr_copy = *input_ptr;\n  if ((input_ptr_copy[1] & 0x800) != 0) {\n    if ((*(char *)((int)input_ptr + 0x3d) == '\\\"') || (*(char *)((int)input_ptr + 0x3d) == '*')) {\n      *(short *)((int)input_ptr + 0x2a) = (short)*(undefined4 *)(*input_ptr[0xe] + 4);\n    }\n    else {\n      *(short *)((int)input_ptr + 0x2a) = (short)*(undefined4 *)(*input_ptr[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)input_ptr + 0x2a) != 0) {\n    if ((input_ptr_copy[5] & 4) != 0) {\n      input_ptr_copy_2 = input_ptr[9];\n      input_ptr[9] = (uint *)((int)input_ptr_copy_2 + 1);\n      *(char *)input_ptr_copy_2 = (char)input_ptr_copy[4];\n      *(short *)((int)input_ptr + 0x2a) = *(short *)((int)input_ptr + 0x2a) + -1;\n    }\n    if (((*input_ptr)[5] & 0x40) != 0) {\n      input_ptr_copy = input_ptr[9];\n      input_ptr[9] = (uint *)((int)input_ptr_copy + 1);\n      *(char *)input_ptr_copy = (char)(*input_ptr)[4];\n      *(short *)((int)input_ptr + 0x2a) = *(short *)((int)input_ptr + 0x2a) + -1;\n    }\n    input_ptr[0x10] = (uint *)((uint)input_ptr[0x10] | 4);\n  }\n  if (input_ptr[0x10] == (uint *)0x0) {\n    if (((first_char == '(') || (first_char == '*')) || (first_char == ')')) {\n      input_ptr[0xb] = DAT_08005184;\n      input_ptr[0xc] = (uint *)0x0;\n      *(undefined *)((int)input_ptr + 0x3d) = 0x20;\n      *(undefined *)((int)input_ptr + 0x3e) = 0;\n      FUN_08007ff0();\n    }\n    else if ((input_ptr[0xc] == (uint *)0x22) || (first_char == '\\\"')) {\n      input_ptr[0xc] = (uint *)0x0;\n      *(undefined *)((int)input_ptr + 0x3d) = 0x20;\n      *(undefined *)((int)input_ptr + 0x3e) = 0;\n      do_nothing_08004a74();\n    }\n  }\n  else {\n    FUN_08004f3c();\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_08007ff0",
                "FUN_08004a74",
                "FUN_08004f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005084",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_08005084"
        },
        "FUN_0800291c": {
            "renaming": {
                "FUN_0800291c": "initialize_parameters_0800291c",
                "param_1": "parameters",
                "puVar1": "pointer_to_data",
                "param_1[1]": "second_parameter",
                "param_1[2]": "third_parameter"
            },
            "code": "\nvoid initialize_parameters_0800291c(undefined4 *parameters)\n\n{\n  undefined *pointer_to_data;\n  \n  second_parameter = 0;\n  third_parameter = 1000;\n  *parameters = PTR_PTR_FUN_0800288c_1_08002940;\n  pointer_to_data = PTR_DAT_08002944;\n  *(undefined *)(parameters + 0x1b) = PTR_DAT_08002944[0xe];\n  *(undefined *)((int)parameters + 0x6d) = pointer_to_data[0xf];\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800291c",
            "calling": [
                "FUN_08002948"
            ],
            "imported": false,
            "current_name": "initialize_parameters_0800291c"
        },
        "FUN_08002ac0": {
            "renaming": {
                "FUN_08002ac0": "execute_function_with_params_08002ac0",
                "param_1": "function_address",
                "param_2": "unused_param",
                "param_3": "param_1",
                "param_4": "param_2"
            },
            "code": "\nvoid execute_function_with_params_08002ac0(undefined4 function_address,undefined4 unused_param,undefined4 param_1,undefined4 param_2)\n\n{\n  FUN_08002a58(function_address,1,param_1,param_2,param_2);\n  return;\n}\n\n",
            "called": [
                "FUN_08002a58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ac0",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_08002ac0"
        },
        "FUN_08003346": {
            "renaming": {
                "FUN_08003346": "update_data_08003346",
                "param_1": "data_ptr",
                "param_2": "flag",
                "param_3": "new_value_1",
                "param_4": "new_value_2"
            },
            "code": "\nvoid update_data_08003346(int data_ptr,int flag,undefined4 new_value_1,undefined4 new_value_2)\n\n{\n  if (flag == 0x79) {\n    *(undefined4 *)(data_ptr + 0x70) = new_value_1;\n    *(undefined4 *)(data_ptr + 0x34) = new_value_2;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003346",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "update_data_08003346"
        },
        "FUN_080032bc": {
            "renaming": {
                "FUN_080032bc": "initialize_data_structure_080032bc",
                "param_1": "data_structure",
                "param_2": "value_1",
                "param_3": "value_2",
                "uVar1": "leading_zeroes_count"
            },
            "code": "\nvoid initialize_data_structure_080032bc(undefined *data_structure,undefined4 value_1,undefined4 value_2)\n\n{\n  uint leading_zeroes_count;\n  \n  *(undefined4 *)(data_structure + 4) = value_1;\n  *(undefined4 *)(data_structure + 8) = value_2;\n  data_structure[0xc] = 0;\n  data_structure[0xd] = 0;\n  *(undefined4 *)(data_structure + 0x10) = 0;\n  data_structure[0x14] = 0;\n  *(undefined4 *)(data_structure + 0x18) = 0;\n  *(undefined4 *)(data_structure + 0x1c) = 0;\n  *(undefined4 *)(data_structure + 0x20) = 0;\n  *(undefined4 *)(data_structure + 0x24) = 0;\n  *(undefined4 *)(data_structure + 0x28) = 0;\n  *(undefined4 *)(data_structure + 0x2c) = 0;\n  *(undefined4 *)(data_structure + 0x30) = 0;\n  *(undefined4 *)(data_structure + 0x34) = 0;\n  *(undefined4 *)(data_structure + 0x38) = 0;\n  *(undefined4 *)(data_structure + 0x3c) = 0;\n  *(undefined4 *)(data_structure + 0x40) = 0;\n  *(undefined4 *)(data_structure + 0x44) = 0;\n  *(undefined4 *)(data_structure + 0x48) = 0;\n  *(undefined4 *)(data_structure + 0x4c) = 0;\n  *(undefined4 *)(data_structure + 0x50) = 0;\n  *(undefined4 *)(data_structure + 0x54) = 0;\n  *(undefined4 *)(data_structure + 0x58) = 0;\n  *(undefined4 *)(data_structure + 0x5c) = 0;\n  *(undefined4 *)(data_structure + 0x60) = 0;\n  *(undefined4 *)(data_structure + 100) = 0;\n  *(undefined4 *)(data_structure + 0x68) = 0;\n  *(undefined4 *)(data_structure + 0x6c) = 0;\n  *(undefined4 *)(data_structure + 0x70) = 0;\n  *(undefined4 *)(data_structure + 0x74) = 0;\n  *(undefined4 *)(data_structure + 0x78) = 0;\n  leading_zeroes_count = count_leading_zeroes(value_1);\n  *data_structure = (char)(leading_zeroes_count >> 5);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032bc",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_080032bc"
        },
        "FUN_08003106": {
            "renaming": {
                "FUN_08003106": "execute_function_08003106",
                "param_1": "function_pointer",
                "param_2": "parameter_1",
                "param_3": "parameter_2",
                "param_4": "parameter_3",
                "puVar1": "function_address"
            },
            "code": "\nvoid execute_function_08003106(undefined4 *function_pointer,undefined4 parameter_1,undefined4 parameter_2,undefined4 parameter_3)\n\n{\n  undefined4 *function_address;\n  \n  function_address = (undefined4 *)*function_pointer;\n  if (function_address != (undefined4 *)0x0) {\n    (**(code **)*function_address)(function_address,0xf0);\n    (***(code ***)(undefined4 *)*function_pointer)((undefined4 *)*function_pointer,0x6f);\n    (***(code ***)(undefined4 *)*function_pointer)((undefined4 *)*function_pointer,parameter_1);\n    FUN_0800307a(function_pointer,parameter_2,parameter_3,parameter_2);\n    (***(code ***)(undefined4 *)*function_pointer)((undefined4 *)*function_pointer,0xf7);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003106",
            "calling": [
                "FUN_08003158"
            ],
            "imported": false,
            "current_name": "execute_function_08003106"
        },
        "FUN_080077b0": {
            "renaming": {
                "FUN_080077b0": "initialize_i2_c_080077b0",
                "param_1": "config",
                "param_2": "pin1",
                "param_3": "pin2",
                "puVar1": "ptr",
                "iVar2": "value1",
                "iVar3": "value2",
                "uVar4": "result",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "uVar7": "temp3",
                "uVar8": "temp4",
                "piVar9": "ptr2",
                "local_38": "mask1",
                "local_34": "mask2",
                "local_30": "mask3",
                "local_2c": "mask4"
            },
            "code": "\nvoid initializeI2C_080077b0(int *config,int pin1,int pin2,int param_4,undefined param_5)\n\n{\n  undefined *ptr;\n  int value1;\n  int value2;\n  undefined4 result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  int *ptr2;\n  uint mask1;\n  uint mask2;\n  uint mask3;\n  undefined4 mask4;\n  \n  if (config != (int *)0x0) {\n    ptr2 = config + 1;\n    value1 = FUN_08007320((int)*(char *)(config + 0x16),PTR_DAT_08007a74);\n    value2 = FUN_08007320((int)*(char *)((int)config + 0x59),PTR_DAT_08007a78);\n    if ((value1 == 0) || (value2 == 0)) {\n      FUN_080098d8(PTR_s_ERROR__at_least_one_I2C_pin_has_n_08007a88);\n    }\n    else {\n      value2 = FUN_080073ae(value1,value2);\n      *config = value2;\n      value1 = DAT_08007a7c;\n      if (value2 == 0) {\n        FUN_080098d8(PTR_s_ERROR__I2C_pins_mismatch_08007a8c);\n      }\n      else {\n        if (value2 == DAT_08007a7c) {\n          *(uint *)(DAT_08007a7c + 0x1bc1c) = *(uint *)(DAT_08007a7c + 0x1bc1c) | 0x200000;\n          *(uint *)(value1 + 0x1bc10) = *(uint *)(value1 + 0x1bc10) | 0x200000;\n          *(uint *)(value1 + 0x1bc10) = *(uint *)(value1 + 0x1bc10) & 0xffdfffff;\n          *(undefined *)((int)config + 0x5a) = 0x1f;\n          *(undefined *)((int)config + 0x5b) = 0x20;\n          *(int **)PTR_DAT_08007a90 = ptr2;\n        }\n        value1 = DAT_08007a80;\n        if (*config == DAT_08007a80) {\n          *(uint *)(DAT_08007a80 + 0x1b81c) = *(uint *)(DAT_08007a80 + 0x1b81c) | 0x400000;\n          *(uint *)(value1 + 0x1b810) = *(uint *)(value1 + 0x1b810) | 0x400000;\n          *(uint *)(value1 + 0x1b810) = *(uint *)(value1 + 0x1b810) & 0xffbfffff;\n          *(undefined *)((int)config + 0x5a) = 0x21;\n          *(undefined *)((int)config + 0x5b) = 0x22;\n          *(int **)(PTR_DAT_08007a90 + 4) = ptr2;\n        }\n        result = FUN_08006bb8((uint)((int)*(char *)((int)config + 0x59) << 0x18) >> 0x1c);\n        ptr = PTR_DAT_08007a78;\n        mask1 = 1 << ((int)*(char *)((int)config + 0x59) & 0xfU) & 0xffff;\n        temp1 = FUN_08007376((int)*(char *)((int)config + 0x59),PTR_DAT_08007a78);\n        temp2 = FUN_08007376((int)*(char *)((int)config + 0x59),ptr);\n        mask2 = (temp1 >> 3 & 1) << 4 | temp2 & 7;\n        mask4 = 3;\n        value1 = FUN_08007376((int)*(char *)((int)config + 0x59),ptr);\n        mask3 = (uint)(value1 << 0x1a) >> 0x1e;\n        value2 = FUN_08007376((int)*(char *)((int)config + 0x59),ptr);\n        value1 = DAT_08007a84;\n        temp3 = *(uint *)(DAT_08007a84 + 0x18) | 1;\n        *(uint *)(DAT_08007a84 + 0x18) = temp3;\n        temp2 = DAT_08007d4c;\n        temp1 = DAT_08007a94;\n        temp4 = *(uint *)(value1 + 0x18) & 1;\n        switch((uint)(value2 << 0x11) >> 0x19) {\n        case 1:\n          temp4 = *(uint *)(DAT_08007a94 + 4) | 0x7000001;\n          *(uint *)(DAT_08007a94 + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 2:\n          temp4 = *(uint *)(DAT_08007a94 + 4) & 0xfffffffe | 0x7000000;\n          *(uint *)(DAT_08007a94 + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 3:\n          temp4 = *(uint *)(DAT_08007a94 + 4) | 0x7000002;\n          *(uint *)(DAT_08007a94 + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 4:\n          temp4 = *(uint *)(DAT_08007a94 + 4) & 0xfffffffd | 0x7000000;\n          *(uint *)(DAT_08007a94 + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 5:\n          temp4 = *(uint *)(DAT_08007a94 + 4) | 0x7000004;\n          *(uint *)(DAT_08007a94 + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 6:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffb | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 7:\n          temp4 = *(uint *)(DAT_08007d4c + 4) | 0x7000008;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 8:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xfffffff7 | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 9:\n          temp4 = *(uint *)(DAT_08007d4c + 4) | 0x7000030;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 10:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000010;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0xb:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0xc:\n          temp4 = *(uint *)(DAT_08007d4c + 4) | 0x70000c0;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0xd:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xffffff3f | 0x7000040;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0xe:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xffffff3f | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0xf:\n          temp4 = *(uint *)(DAT_08007d4c + 4) | 0x7000300;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x10:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000200;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x11:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000100;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x12:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x13:\n          temp4 = *(uint *)(DAT_08007d4c + 4) | 0x7000c00;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x14:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xfffff3ff | 0x7000800;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x15:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xfffff3ff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x16:\n          temp4 = *(uint *)(DAT_08007d4c + 4) | 0x7001000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x17:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xffffefff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x1b:\n          temp4 = *(uint *)(DAT_08007d4c + 4) | 0x7008000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x1c:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xffff7fff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x21:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x22:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x1000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x23:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x2000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x24:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x4000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n        }\n        FUN_080040e8(result,&mask1,temp3,temp4);\n        result = FUN_08006bb8((uint)((int)*(char *)(config + 0x16) << 0x18) >> 0x1c);\n        ptr = PTR_DAT_08007a74;\n        mask1 = 1 << ((int)*(char *)(config + 0x16) & 0xfU) & 0xffff;\n        temp1 = FUN_08007376((int)*(char *)(config + 0x16),PTR_DAT_08007a74);\n        temp2 = FUN_08007376((int)*(char *)(config + 0x16),ptr);\n        mask2 = (temp1 >> 3 & 1) << 4 | temp2 & 7;\n        mask4 = 3;\n        value1 = FUN_08007376((int)*(char *)(config + 0x16),ptr);\n        mask3 = (uint)(value1 << 0x1a) >> 0x1e;\n        value2 = FUN_08007376((int)*(char *)(config + 0x16),ptr);\n        value1 = DAT_08007a84;\n        temp3 = *(uint *)(DAT_08007a84 + 0x18) | 1;\n        *(uint *)(DAT_08007a84 + 0x18) = temp3;\n        temp2 = DAT_08007e70;\n        temp1 = DAT_08007d4c;\n        temp4 = *(uint *)(value1 + 0x18) & 1;\n        switch((uint)(value2 << 0x11) >> 0x19) {\n        case 1:\n          temp4 = *(uint *)(DAT_08007d4c + 4) | 0x7000001;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 2:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffe | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 3:\n          temp4 = *(uint *)(DAT_08007d4c + 4) | 0x7000002;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 4:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffd | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 5:\n          temp4 = *(uint *)(DAT_08007d4c + 4) | 0x7000004;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 6:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffb | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 7:\n          temp4 = *(uint *)(DAT_08007d4c + 4) | 0x7000008;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 8:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xfffffff7 | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 9:\n          temp4 = *(uint *)(DAT_08007d4c + 4) | 0x7000030;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 10:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000010;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 0xb:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 0xc:\n          temp4 = *(uint *)(DAT_08007d4c + 4) | 0x70000c0;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 0xd:\n          temp4 = *(uint *)(DAT_08007e70 + 4) & 0xffffff3f | 0x7000040;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0xe:\n          temp4 = *(uint *)(DAT_08007e70 + 4) & 0xffffff3f | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0xf:\n          temp4 = *(uint *)(DAT_08007e70 + 4) | 0x7000300;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x10:\n          temp4 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000200;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x11:\n          temp4 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000100;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x12:\n          temp4 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x13:\n          temp4 = *(uint *)(DAT_08007e70 + 4) | 0x7000c00;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x14:\n          temp4 = *(uint *)(DAT_08007e70 + 4) & 0xfffff3ff | 0x7000800;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x15:\n          temp4 = *(uint *)(DAT_08007e70 + 4) & 0xfffff3ff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x16:\n          temp4 = *(uint *)(DAT_08007e70 + 4) | 0x7001000;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x17:\n          temp4 = *(uint *)(DAT_08007e70 + 4) & 0xffffefff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x1b:\n          temp4 = *(uint *)(DAT_08007e70 + 4) | 0x7008000;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x1c:\n          temp4 = *(uint *)(DAT_08007e70 + 4) & 0xffff7fff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x21:\n          temp4 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x22:\n          temp4 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x1000000;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x23:\n          temp4 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x2000000;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x24:\n          temp4 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x4000000;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n        }\n        FUN_080040e8(result,&mask1,temp3,temp4);\n        config[1] = *config;\n        config[2] = pin1;\n        config[3] = 0;\n        config[4] = param_4;\n        config[7] = 0xff;\n        config[5] = pin2;\n        config[6] = 0;\n        config[8] = 0;\n        config[9] = 0;\n        *(undefined *)((int)config + 0x41) = 0;\n        FUN_08003f30((int)*(char *)((int)config + 0x5a),0,1);\n        FUN_08003f94((int)*(char *)((int)config + 0x5a));\n        FUN_08003f30((int)*(char *)((int)config + 0x5b),0,1);\n        FUN_08003f94((int)*(char *)((int)config + 0x5b));\n        FUN_080045c0(ptr2);\n        *(undefined *)((int)config + 0x5d) = param_5;\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007376",
                "FUN_080098d8",
                "FUN_08007320",
                "FUN_080073ae",
                "FUN_080045c0",
                "FUN_08003f30",
                "FUN_08003f94",
                "FUN_08006bb8",
                "FUN_080040e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080077b0",
            "calling": [
                "FUN_08002968"
            ],
            "imported": false,
            "current_name": "initialize_i2_c_080077b0"
        },
        "FUN_08007708": {
            "renaming": {
                "FUN_08007708": "run_main_function_08007708"
            },
            "code": "\nvoid run_main_function_08007708(void)\n\n{\n  FUN_08007438();\n  return;\n}\n\n",
            "called": [
                "FUN_08007438"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007708",
            "calling": [
                "FUN_08006060"
            ],
            "imported": false,
            "current_name": "run_main_function_08007708"
        },
        "FUN_0800018c": {
            "renaming": {
                "FUN_0800018c": "check_and_execute_0800018c",
                "param_1": "input",
                "param_2": "unused",
                "param_3": "unused",
                "param_4": "flag",
                "uVar1": "result"
            },
            "code": "\nundefined4 check_and_execute_0800018c(undefined4 input,undefined4 unused,undefined4 unused,undefined4 flag)\n\n{\n  undefined4 result;\n  \n  if (*(int *)PTR_DAT_080001a4 != 0) {\n    return 0;\n  }\n  result = FUN_08000188(1,input,0,0,flag);\n  return result;\n}\n\n",
            "called": [
                "FUN_08000188"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800018c",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "check_and_execute_0800018c"
        },
        "FUN_08003f94": {
            "renaming": {
                "FUN_08003f94": "set_bit_at_index_08003f94",
                "param_1": "index"
            },
            "code": "\nvoid set_bit_at_index_08003f94(uint index)\n\n{\n  if (-1 < (int)index) {\n    *(int *)(DAT_08003fac + (index >> 5) * 4) = 1 << (index & 0x1f);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f94",
            "calling": [
                "FUN_080077b0",
                "FUN_08007648",
                "FUN_08008694",
                "FUN_0800863c"
            ],
            "imported": false,
            "current_name": "set_bit_at_index_08003f94"
        },
        "FUN_08008c44": {
            "renaming": {
                "FUN_08008c44": "configure_device_08008c44",
                "param_1": "device_address",
                "param_2": "device_type",
                "param_3": "device_config",
                "bVar1": "config_bits",
                "iVar2": "num_config_bits_set",
                "UNRECOVERED_JUMPTABLE": "function_table",
                "extraout_r1": "function_index",
                "uRam08008cf0": "device_type_config",
                "uRam08008cfc": "function_arguments",
                "uRam08008cf8": "function_argument_size",
                "uRam08008cf4": "function_return_value",
                "uRam0000012d": "function_result",
                "stack0x00000148": "function_stack"
            },
            "code": "\nvoid configure_device_08008c44(int device_address,undefined4 device_type,byte device_config)\n\n{\n  uint function_index;\n  byte config_bits;\n  int num_config_bits_set;\n  code *function_table;\n  \n  *(undefined4 *)(device_address + 0x11c) = device_type;\n  *(byte *)(device_address + 0x140) = device_config;\n  config_bits = device_config & 7;\n  if (config_bits == 4) {\n    num_config_bits_set = 7;\n  }\n  else if (config_bits == 6) {\n    num_config_bits_set = 8;\n  }\n  else if (config_bits == 2) {\n    num_config_bits_set = 6;\n  }\n  else {\n    num_config_bits_set = 0;\n  }\n  if ((device_config & 0x30) == 0x30) {\n    *(undefined4 *)(device_address + 0x128) = 0x600;\n    num_config_bits_set = num_config_bits_set + 1;\n  }\n  else if ((device_config & 0x20) == 0) {\n    *(undefined4 *)(device_address + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(device_address + 0x128) = 0x400;\n    num_config_bits_set = num_config_bits_set + 1;\n  }\n  if ((device_config & 8) == 0) {\n    *(undefined4 *)(device_address + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(device_address + 0x124) = 0x2000;\n  }\n  if (num_config_bits_set == 8) {\n    *(undefined4 *)(device_address + 0x120) = 0;\n  }\n  else if (num_config_bits_set == 9) {\n    *(undefined4 *)(device_address + 0x120) = 0x1000;\n  }\n  else {\n    num_config_bits_set = 0;\n  }\n  if (num_config_bits_set != 0) {\n    FUN_08008078(device_address + 0xd4);\n    FUN_0800863c(device_address + 0xd4,device_type_config);\n    return;\n  }\n  function_table = (code *)0x8008cee;\n  FUN_080090cc(function_arguments,299,function_argument_size,function_return_value);\n  if (function_index < 0x3c) {\n    function_result = PTR_DAT_08008d14[function_index];\n  }\n  else {\n    function_result = 0xff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*function_table)(0,function_index,&function_stack);\n  return;\n}\n\n",
            "called": [
                "FUN_08008078",
                "FUN_080090cc",
                "FUN_0800863c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c44",
            "calling": [
                "FUN_08003048"
            ],
            "imported": false,
            "current_name": "configure_device_08008c44"
        },
        "FUN_08002a26": {
            "renaming": {
                "FUN_08002a26": "print_with_padding_08002a26",
                "param_1": "str",
                "param_2": "padding_length",
                "param_3": "output_file",
                "param_4": "error_file"
            },
            "code": "\nvoid print_with_padding_08002a26(undefined4 str,undefined4 padding_length,undefined4 output_file,undefined4 error_file)\n\n{\n  FUN_08002a1c(str,0x33,output_file,error_file,error_file);\n  return;\n}\n\n",
            "called": [
                "FUN_08002a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a26",
            "calling": [
                "FUN_08000a64"
            ],
            "imported": false,
            "current_name": "print_with_padding_08002a26"
        },
        "FUN_0800430c": {
            "renaming": {
                "FUN_0800430c": "improved_function_0800430c",
                "param_1": "input_array",
                "param_1[0x14]": "value_at_index_20",
                "param_1[0x11]": "value_at_index_17"
            },
            "code": "\nundefined4 improved_function_0800430c(int *input_array)\n\n{\n  if (*(char *)((int)input_array + 0x3e) == '@') {\n    if (value_at_index_20 == 0) {\n      *(uint *)(*input_array + 0x10) = value_at_index_17 & 0xfe;\n    }\n    else {\n      *(uint *)(*input_array + 0x10) = value_at_index_17 & 0xffU | 1;\n    }\n  }\n  else if (input_array[4] == 0x4000) {\n    if (*(char *)((int)input_array + 0x3d) == '!') {\n      *(uint *)(*input_array + 0x10) = value_at_index_17 & 0xfe;\n    }\n    else {\n      *(uint *)(*input_array + 0x10) = value_at_index_17 & 0xffU | 1;\n    }\n  }\n  else if (value_at_index_20 == 0) {\n    *(uint *)(*input_array + 0x10) = (uint)(value_at_index_17 << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (value_at_index_20 == 1) {\n    *(uint *)(*input_array + 0x10) = (uint)(value_at_index_17 << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800430c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "improved_function_0800430c"
        },
        "FUN_08006060": {
            "renaming": {
                "FUN_08006060": "check_and_update_status_08006060",
                "param_1": "arg_list"
            },
            "code": "\nundefined4 check_and_update_status_08006060(undefined4 *arg_list)\n\n{\n  if (arg_list != (undefined4 *)0x0) {\n    if (*(char *)((int)arg_list + 0x3d) == '\\0') {\n      *(undefined *)(arg_list + 0xf) = 0;\n      FUN_08007708();\n    }\n    *(undefined *)((int)arg_list + 0x3d) = 2;\n    FUN_08005fe8(*arg_list,arg_list + 1);\n    *(undefined *)((int)arg_list + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_08007708",
                "FUN_08005fe8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006060",
            "calling": [
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "check_and_update_status_08006060"
        },
        "FUN_08003350": {
            "renaming": {
                "FUN_08003350": "set_parameters_08003350",
                "param_1": "device_address",
                "param_2": "parameter_id",
                "param_3": "parameter_value_1",
                "param_4": "parameter_value_2"
            },
            "code": "\nvoid set_parameters_08003350(int device_address,int parameter_id,undefined4 parameter_value_1,undefined4 parameter_value_2)\n\n{\n  if (parameter_id == 0xf9) {\n    *(undefined4 *)(device_address + 0x74) = parameter_value_1;\n    *(undefined4 *)(device_address + 0x38) = parameter_value_2;\n    return;\n  }\n  if (parameter_id != 0xff) {\n    return;\n  }\n  *(undefined4 *)(device_address + 0x78) = parameter_value_1;\n  *(undefined4 *)(device_address + 0x48) = parameter_value_2;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003350",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_parameters_08003350"
        },
        "FUN_08009698": {
            "renaming": {
                "FUN_08009698": "parse_and_print_08009698",
                "param_1": "file_pointer",
                "param_2": "format_string",
                "param_3": "width",
                "param_4": "print_function",
                "param_5": "print_args",
                "bVar1": "format_char",
                "iVar2": "result",
                "puVar3": "print_arg",
                "iVar4": "print_result",
                "puVar5": "hex_digits",
                "uVar6": "base",
                "ppuVar7": "print_arg_ptr",
                "uVar8": "format_flags",
                "uVar9": "print_width",
                "puVar10": "print_str",
                "puVar11": "format_str",
                "local_24": "print_count"
            },
            "code": "\nuint parse_and_print_08009698(undefined4 file_pointer,uint *format_string,undefined4 width,code *print_function,uint **print_args)\n\n{\n  byte format_char;\n  int result;\n  uint *print_arg;\n  int print_result;\n  undefined *hex_digits;\n  uint base;\n  uint **print_arg_ptr;\n  uint format_flags;\n  uint print_width;\n  undefined *print_str;\n  undefined *format_str;\n  uint print_count [2];\n  \n  format_char = *(byte *)(format_string + 6);\n  format_str = (undefined *)((int)format_string + 0x43);\n  if (format_char != 0x6e) {\n    if (format_char < 0x6f) {\n      if (format_char != 99) {\n        if (format_char < 100) {\n          if (format_char == 0) goto LAB_08009852;\n          if (format_char != 0x58) goto LAB_080096c8;\n          *(undefined *)((int)format_string + 0x45) = 0x58;\n          hex_digits = PTR_s_0123456789ABCDEF_080098d4;\nLAB_080097e2:\n          base = *format_string;\n          print_arg = *print_args;\n          *print_args = print_arg + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            format_flags = (uint)*(ushort *)print_arg;\n          }\n          else {\n            format_flags = *print_arg;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *format_string = base | 0x20;\n          }\n          if (format_flags == 0) {\n            *format_string = *format_string & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_08009778:\n          *(undefined *)((int)format_string + 0x43) = 0;\n        }\n        else {\n          if ((format_char != 100) && (format_char != 0x69)) goto LAB_080096c8;\n          format_flags = *format_string;\n          print_arg = *print_args;\n          if ((format_flags & 0x80) == 0) {\n            *print_args = print_arg + 1;\n            if ((format_flags & 0x40) == 0) goto LAB_080096e8;\n            format_flags = (uint)(short)*(ushort *)print_arg;\n          }\n          else {\n            *print_args = print_arg + 1;\nLAB_080096e8:\n            format_flags = *print_arg;\n          }\n          if ((int)format_flags < 0) {\n            format_flags = -format_flags;\n            *(undefined *)((int)format_string + 0x43) = 0x2d;\n          }\n          base = 10;\n          hex_digits = PTR_s_0123456789ABCDEF_080098d4;\n        }\n        print_width = format_string[1];\n        format_string[2] = print_width;\n        print_str = format_str;\n        if ((int)print_width < 0) {\n          if (format_flags != 0) goto LAB_08009816;\nLAB_080098c4:\n          *(undefined *)((int)format_string + 0x42) = *hex_digits;\n          print_str = (undefined *)((int)format_string + 0x42);\n        }\n        else {\n          *format_string = *format_string & 0xfffffffb;\n          if (format_flags == 0) {\n            if (print_width != 0) goto LAB_080098c4;\n          }\n          else {\nLAB_08009816:\n            do {\n              print_width = format_flags / base;\n              print_str = print_str + -1;\n              *print_str = hex_digits[format_flags - base * print_width];\n              format_flags = print_width;\n            } while (print_width != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*format_string << 0x1f) < 0)) && ((int)format_string[1] <= (int)format_string[4]))\n        {\n          print_str[-1] = 0x30;\n          print_str = print_str + -1;\n        }\n        format_string[4] = (int)format_str - (int)print_str;\n        format_str = print_str;\n        goto LAB_080097be;\n      }\n      print_arg = *print_args;\n      *print_args = print_arg + 1;\n      *(char *)((int)format_string + 0x42) = (char)*print_arg;\nLAB_08009728:\n      format_str = (undefined *)((int)format_string + 0x42);\n      format_flags = 1;\n    }\n    else {\n      if (format_char != 0x73) {\n        if (format_char < 0x74) {\n          if (format_char == 0x6f) {\nLAB_0800974e:\n            format_flags = *format_string;\n            print_arg = *print_args;\n            if ((format_flags & 0x80) == 0) {\n              *print_args = print_arg + 1;\n              if ((format_flags & 0x40) == 0) goto LAB_0800975c;\n              format_flags = (uint)*(ushort *)print_arg;\n            }\n            else {\n              *print_args = print_arg + 1;\nLAB_0800975c:\n              format_flags = *print_arg;\n            }\n            hex_digits = PTR_s_0123456789ABCDEF_080098d4;\n            if (format_char == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            goto LAB_08009778;\n          }\n          if (format_char == 0x70) {\n            *format_string = *format_string | 0x20;\nLAB_0800970e:\n            hex_digits = PTR_s_0123456789abcdef_080098d0;\n            *(undefined *)((int)format_string + 0x45) = 0x78;\n            goto LAB_080097e2;\n          }\n        }\n        else {\n          if (format_char == 0x75) goto LAB_0800974e;\n          if (format_char == 0x78) goto LAB_0800970e;\n        }\nLAB_080096c8:\n        *(byte *)((int)format_string + 0x42) = format_char;\n        goto LAB_08009728;\n      }\n      print_arg = *print_args;\n      *print_args = print_arg + 1;\n      format_str = (undefined *)*print_arg;\n      result = FUN_08009f2c(format_str,0,format_string[1]);\n      if (result != 0) {\n        format_string[1] = result - (int)format_str;\n      }\n      format_flags = format_string[1];\n    }\n    format_string[4] = format_flags;\n    *(undefined *)((int)format_string + 0x43) = 0;\n    goto LAB_080097be;\n  }\n  format_flags = *format_string;\n  print_arg_ptr = (uint **)*print_args;\n  base = format_string[5];\n  if ((format_flags & 0x80) == 0) {\n    *print_args = (uint *)(print_arg_ptr + 1);\n    print_arg = *print_arg_ptr;\n    if ((format_flags & 0x40) == 0) goto LAB_0800983e;\n    *(short *)print_arg = (short)base;\n  }\n  else {\n    *print_args = (uint *)(print_arg_ptr + 1);\n    print_arg = *print_arg_ptr;\nLAB_0800983e:\n    *print_arg = base;\n  }\nLAB_08009852:\n  format_string[4] = 0;\nLAB_080097be:\n  result = FUN_080095a8(file_pointer,format_string,print_count,width,print_function);\n  if ((result == -1) || (result = (*print_function)(file_pointer,width,format_str,format_string[4]), result == -1)) {\nLAB_080097d2:\n    format_flags = 0xffffffff;\n  }\n  else {\n    if ((int)(*format_string << 0x1e) < 0) {\n      for (result = 0; result < (int)(format_string[3] - print_count[0]); result = result + 1) {\n        print_result = (*print_function)(file_pointer,width,(int)format_string + 0x19,1);\n        if (print_result == -1) goto LAB_080097d2;\n      }\n    }\n    format_flags = format_string[3];\n    if ((int)format_string[3] < (int)print_count[0]) {\n      format_flags = print_count[0];\n    }\n  }\n  return format_flags;\n}\n\n",
            "called": [
                "FUN_08009f2c",
                "FUN_080095a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009698",
            "calling": [
                "FUN_0800937c"
            ],
            "imported": false,
            "current_name": "parse_and_print_08009698"
        },
        "FUN_08006186": {
            "renaming": {
                "FUN_08006186": "update_flags_08006186",
                "param_1": "arg_list",
                "param_2": "data_ptr",
                "param_3": "flag_type"
            },
            "code": "\nundefined4 update_flags_08006186(int *arg_list,int data_ptr,undefined4 flag_type)\n\n{\n  if (*(char *)(arg_list + 0xf) != '\\x01') {\n    *(undefined *)(arg_list + 0xf) = 1;\n    *(undefined *)((int)arg_list + 0x3d) = 2;\n    switch(flag_type) {\n    case 0:\n      FUN_08005cec(*arg_list);\n      *(uint *)(*arg_list + 0x18) = *(uint *)(*arg_list + 0x18) | 8;\n      *(uint *)(*arg_list + 0x18) = *(uint *)(*arg_list + 0x18) & 0xfffffffb;\n      *(uint *)(*arg_list + 0x18) = *(uint *)(*arg_list + 0x18) | *(uint *)(data_ptr + 0x10);\n      break;\n    case 4:\n      FUN_080060c4(*arg_list);\n      *(uint *)(*arg_list + 0x18) = *(uint *)(*arg_list + 0x18) | 0x800;\n      *(uint *)(*arg_list + 0x18) = *(uint *)(*arg_list + 0x18) & 0xfffffbff;\n      *(uint *)(*arg_list + 0x18) = *(uint *)(*arg_list + 0x18) | *(int *)(data_ptr + 0x10) << 8;\n      break;\n    case 8:\n      FUN_08005d48(*arg_list);\n      *(uint *)(*arg_list + 0x1c) = *(uint *)(*arg_list + 0x1c) | 8;\n      *(uint *)(*arg_list + 0x1c) = *(uint *)(*arg_list + 0x1c) & 0xfffffffb;\n      *(uint *)(*arg_list + 0x1c) = *(uint *)(*arg_list + 0x1c) | *(uint *)(data_ptr + 0x10);\n      break;\n    case 0xc:\n      FUN_08005dac(*arg_list);\n      *(uint *)(*arg_list + 0x1c) = *(uint *)(*arg_list + 0x1c) | 0x800;\n      *(uint *)(*arg_list + 0x1c) = *(uint *)(*arg_list + 0x1c) & 0xfffffbff;\n      *(uint *)(*arg_list + 0x1c) = *(uint *)(*arg_list + 0x1c) | *(int *)(data_ptr + 0x10) << 8;\n    }\n    *(undefined *)((int)arg_list + 0x3d) = 1;\n    *(undefined *)(arg_list + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "called": [
                "FUN_08005dac",
                "FUN_080060c4",
                "FUN_08005cec",
                "FUN_08005d48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006186",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "update_flags_08006186"
        },
        "FUN_08007710": {
            "renaming": {
                "FUN_08007710": "execute_function_08007710"
            },
            "code": "\nvoid execute_function_08007710(void)\n\n{\n  FUN_080074e0();\n  return;\n}\n\n",
            "called": [
                "FUN_080074e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007710",
            "calling": [
                "FUN_08005df4"
            ],
            "imported": false,
            "current_name": "execute_function_08007710"
        },
        "FUN_08003474": {
            "renaming": {
                "FUN_08003474": "process_data_08003474",
                "param_1": "data_pointer",
                "param_2": "data_value",
                "bVar1": "byte_value"
            },
            "code": "\nvoid process_data_08003474(int data_pointer,uint data_value)\n\n{\n  byte byte_value;\n  \n  if (*(char *)(data_pointer + 0x14) != '\\0') {\n    if (data_value != 0xf7) {\n      FUN_08003376(data_pointer,data_value,*(undefined4 *)(data_pointer + 0x18));\n      *(int *)(data_pointer + 0x18) = *(int *)(data_pointer + 0x18) + 1;\n      return;\n    }\n    *(undefined *)(data_pointer + 0x14) = 0;\n    FUN_080033cc();\n    return;\n  }\n  if ((*(int *)(data_pointer + 0x10) == 0) || (0x7f < (int)data_value)) {\n    if ((int)data_value < 0xf0) {\n      *(byte *)(data_pointer + 0xd) = (byte)data_value & 0xf;\n      data_value = data_value & 0xf0;\n    }\n    if (data_value == 0xf0) {\n      *(undefined *)(data_pointer + 0x14) = 1;\n      *(undefined4 *)(data_pointer + 0x18) = 0;\n      return;\n    }\n    if (data_value < 0xf1) {\n      if (data_value != 0xc0) {\n        if (data_value < 0xc1) {\n          if (data_value != 0x90) {\n            return;\n          }\n        }\n        else {\n          if (data_value == 0xd0) goto LAB_0800359c;\n          if (data_value != 0xe0) {\n            return;\n          }\n        }\nLAB_08003586:\n        *(undefined4 *)(data_pointer + 0x10) = 2;\n        *(char *)(data_pointer + 0xc) = (char)data_value;\n        return;\n      }\nLAB_0800359c:\n      *(undefined4 *)(data_pointer + 0x10) = 1;\n      *(char *)(data_pointer + 0xc) = (char)data_value;\n      return;\n    }\n    if (data_value != 0xf9) {\n      if (0xf9 < data_value) {\n        if (data_value == 0xff) {\n          FUN_0800344a(data_pointer);\n          return;\n        }\n        return;\n      }\n      if (1 < data_value - 0xf4) {\n        return;\n      }\n      goto LAB_08003586;\n    }\n    if (*(code **)(data_pointer + 0x74) != (code *)0x0) {\n      (**(code **)(data_pointer + 0x74))(*(undefined4 *)(data_pointer + 0x38));\n    }\n  }\n  else {\n    *(int *)(data_pointer + 0x10) = *(int *)(data_pointer + 0x10) + -1;\n    FUN_08003376();\n    if ((*(int *)(data_pointer + 0x10) == 0) && (byte_value = *(byte *)(data_pointer + 0xc), byte_value != 0)) {\n      if (byte_value == 0xd0) {\n        if (*(code **)(data_pointer + 0x58) != (code *)0x0) {\n          (**(code **)(data_pointer + 0x58))\n                    (*(undefined4 *)(data_pointer + 0x28),*(undefined *)(data_pointer + 0xd),\n                     **(undefined **)(data_pointer + 4));\n        }\n      }\n      else if (byte_value < 0xd1) {\n        if (byte_value == 0x90) {\n          if (*(code **)(data_pointer + 0x50) != (code *)0x0) {\n            (**(code **)(data_pointer + 0x50))\n                      (*(undefined4 *)(data_pointer + 0x20),*(undefined *)(data_pointer + 0xd),\n                       (uint)(*(byte **)(data_pointer + 4))[1] + (uint)**(byte **)(data_pointer + 4) * 0x80);\n          }\n        }\n        else if ((byte_value == 0xc0) && (*(code **)(data_pointer + 0x54) != (code *)0x0)) {\n          (**(code **)(data_pointer + 0x54))\n                    (*(undefined4 *)(data_pointer + 0x24),*(undefined *)(data_pointer + 0xd),\n                     **(undefined **)(data_pointer + 4));\n        }\n      }\n      else if (byte_value == 0xf4) {\n        if (*(code **)(data_pointer + 0x5c) != (code *)0x0) {\n          (**(code **)(data_pointer + 0x5c))\n                    (*(undefined4 *)(data_pointer + 0x2c),(*(undefined **)(data_pointer + 4))[1],\n                     **(undefined **)(data_pointer + 4));\n        }\n      }\n      else if (byte_value == 0xf5) {\n        if (*(code **)(data_pointer + 0x60) != (code *)0x0) {\n          (**(code **)(data_pointer + 0x60))\n                    (*(undefined4 *)(data_pointer + 0x30),(*(undefined **)(data_pointer + 4))[1],\n                     **(undefined **)(data_pointer + 4));\n        }\n      }\n      else if ((byte_value == 0xe0) && (*(code **)(data_pointer + 0x4c) != (code *)0x0)) {\n        (**(code **)(data_pointer + 0x4c))\n                  (*(undefined4 *)(data_pointer + 0x1c),*(undefined *)(data_pointer + 0xd),\n                   (uint)(*(byte **)(data_pointer + 4))[1] + (uint)**(byte **)(data_pointer + 4) * 0x80);\n      }\n      *(undefined *)(data_pointer + 0xc) = 0;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800344a",
                "FUN_080033cc",
                "FUN_08003376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003474",
            "calling": [
                "FUN_08002ed2"
            ],
            "imported": false,
            "current_name": "process_data_08003474"
        },
        "FUN_08006b7c": {
            "renaming": {
                "FUN_08006b7c": "get_dat_value_08006b7c",
                "param_1": "input_index"
            },
            "code": "\nundefined4 get_dat_value_08006b7c(undefined4 input_index)\n\n{\n  switch(input_index) {\n  case 0:\n    return DAT_08006ba4;\n  case 1:\n    return DAT_08006bb4;\n  case 2:\n    return DAT_08006ba8;\n  case 3:\n    return DAT_08006bac;\n  case 4:\n    return DAT_08006bb0;\n  default:\n    return 0;\n  }\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b7c",
            "calling": [
                "FUN_08008a6c",
                "FUN_08008a24"
            ],
            "imported": false,
            "current_name": "get_dat_value_08006b7c"
        },
        "FUN_08008e7c": {
            "renaming": {
                "FUN_08008e7c": "convert_base_08008e7c",
                "param_1": "num_ptr",
                "param_2": "value",
                "param_3": "base",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "buffer_ptr",
                "cVar1": "digit",
                "local_15": "buffer"
            },
            "code": "\nundefined4 convert_base_08008e7c(int *num_ptr,uint value,uint base)\n\n{\n  char digit;\n  undefined4 result;\n  uint remainder;\n  uint quotient;\n  char *buffer_ptr;\n  char buffer [9];\n  \n  buffer[1] = 0;\n  if ((int)base < 2) {\n    base = 10;\n  }\n  buffer_ptr = buffer + 1;\n  do {\n    quotient = value / base;\n    remainder = (value & 0xff) - (quotient * base & 0xff) & 0xff;\n    buffer_ptr = buffer_ptr + -1;\n    digit = (char)remainder;\n    if (remainder < 10) {\n      digit = digit + '0';\n    }\n    else {\n      digit = digit + '7';\n    }\n    *buffer_ptr = digit;\n    value = quotient;\n  } while (quotient != 0);\n  if (buffer_ptr == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    result = FUN_08000178(buffer_ptr);\n    result = (**(code **)(*num_ptr + 4))(num_ptr,buffer_ptr,result);\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e7c",
            "calling": [
                "FUN_08008ed6"
            ],
            "imported": false,
            "current_name": "convert_base_08008e7c"
        },
        "FUN_08003aa0": {
            "renaming": {
                "FUN_08003aa0": "improved_function_08003aa0",
                "param_1": "param",
                "iVar1": "result",
                "puVar2": "ptr"
            },
            "code": "\nint improved_function_08003aa0(undefined4 *param)\n\n{\n  int result;\n  undefined4 *ptr;\n  \n  if (*(char *)(param + 9) != '\\x01') {\n    *(undefined *)(param + 9) = 1;\n    result = FUN_08003a20();\n    if (result == 0) {\n      param[10] = param[10] & 0xfffffcfe | 0x100;\n      ptr = (undefined4 *)*param;\n      if ((ptr == DAT_08003b84) && ((DAT_08003b84[-0xff] & 0xf0000) != 0)) {\n        param[10] = param[10] | 0x100000;\n        if ((*(uint *)(DAT_08003b88 + 4) & 0x400) != 0) {\n          param[10] = param[10] & 0xffffcfff | 0x1000;\n        }\n      }\n      else {\n        param[10] = param[10] & 0xffefffff;\n        if ((ptr[1] & 0x400) != 0) {\n          param[10] = param[10] & 0xffffcfff | 0x1000;\n        }\n      }\n      if ((param[10] & 0x1000) == 0) {\n        param[0xb] = 0;\n      }\n      else {\n        param[0xb] = param[0xb] & 0xfffffff9;\n      }\n      *(undefined *)(param + 9) = 0;\n      *ptr = 0xfffffffd;\n      param = (undefined4 *)*param;\n      if (((param[2] & 0xe0000) == 0xe0000) &&\n         ((param != DAT_08003b84 || ((DAT_08003b84[-0xff] & 0xf0000) == 0)))) {\n        param[2] = param[2] | 0x500000;\n      }\n      else {\n        param[2] = param[2] | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(param + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}\n\n",
            "called": [
                "FUN_08003a20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003aa0",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "improved_function_08003aa0"
        },
        "FUN_08003ce8": {
            "renaming": {
                "FUN_08003ce8": "process_data_08003ce8",
                "param_1": "data_ptr",
                "iVar1": "result",
                "param_1[0xb]": "data_ptr_b",
                "param_1[10]": "data_ptr_10"
            },
            "code": "\nint process_data_08003ce8(int *data_ptr)\n\n{\n  int result;\n  \n  if (data_ptr == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    data_ptr_10 = data_ptr_10 | 2;\n    result = FUN_08003b8c();\n    if (result == 0) {\n      *(undefined4 *)*data_ptr = 0xffffffe0;\n      *(uint *)(*data_ptr + 4) = DAT_08003ddc & *(uint *)(*data_ptr + 4);\n      *(uint *)(*data_ptr + 8) = DAT_08003de0 & *(uint *)(*data_ptr + 8);\n      *(uint *)(*data_ptr + 0xc) = *(uint *)(*data_ptr + 0xc) & 0xff000000;\n      *(uint *)(*data_ptr + 0x10) = *(uint *)(*data_ptr + 0x10) & 0xc0000000;\n      *(uint *)(*data_ptr + 0x14) = *(uint *)(*data_ptr + 0x14) & 0xfffff000;\n      *(uint *)(*data_ptr + 0x18) = *(uint *)(*data_ptr + 0x18) & 0xfffff000;\n      *(uint *)(*data_ptr + 0x1c) = *(uint *)(*data_ptr + 0x1c) & 0xfffff000;\n      *(uint *)(*data_ptr + 0x20) = *(uint *)(*data_ptr + 0x20) & 0xfffff000;\n      *(uint *)(*data_ptr + 0x24) = *(uint *)(*data_ptr + 0x24) & 0xfffff000;\n      *(uint *)(*data_ptr + 0x28) = *(uint *)(*data_ptr + 0x28) & 0xfffff000;\n      *(uint *)(*data_ptr + 0x2c) = *(uint *)(*data_ptr + 0x2c) & 0xff000000;\n      *(uint *)(*data_ptr + 0x2c) = *(uint *)(*data_ptr + 0x2c) & 0xff000000;\n      *(uint *)(*data_ptr + 0x30) = *(uint *)(*data_ptr + 0x30) & 0xc0000000;\n      *(uint *)(*data_ptr + 0x34) = *(uint *)(*data_ptr + 0x34) & 0xc0000000;\n      *(uint *)(*data_ptr + 0x38) = *(uint *)(*data_ptr + 0x38) & 0xffc00000;\n      *(uint *)(*data_ptr + 0x38) = *(uint *)(*data_ptr + 0x38) & 0xffc00000;\n      FUN_08006d24(data_ptr);\n      data_ptr_b = 0;\n      data_ptr_10 = 0;\n    }\n    *(undefined *)(data_ptr + 9) = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_08006d24",
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ce8",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "process_data_08003ce8"
        },
        "FUN_08005fe8": {
            "renaming": {
                "FUN_08005fe8": "update_data_08005fe8",
                "param_1": "data_ptr",
                "param_2": "new_data",
                "uVar1": "data_value"
            },
            "code": "\nvoid update_data_08005fe8(uint *data_ptr,uint *new_data)\n\n{\n  uint data_value;\n  \n  data_value = *data_ptr;\n  if ((((data_ptr == DAT_0800605c) || (data_ptr == (uint *)0x40000000)) ||\n      (data_ptr == DAT_0800605c + -0x4a00)) || (data_ptr == DAT_0800605c + -0x4900)) {\n    data_value = data_value & 0xffffff8f | new_data[1];\n  }\n  if (((data_ptr == DAT_0800605c) || (data_ptr == (uint *)0x40000000)) ||\n     ((data_ptr == DAT_0800605c + -0x4a00 || (data_ptr == DAT_0800605c + -0x4900)))) {\n    data_value = data_value & 0xfffffcff | new_data[3];\n  }\n  *data_ptr = data_value & 0xffffff7f | new_data[5];\n  data_ptr[0xb] = new_data[2];\n  data_ptr[10] = *new_data;\n  if (data_ptr == DAT_0800605c) {\n    data_ptr[0xc] = new_data[4];\n  }\n  data_ptr[5] = 1;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fe8",
            "calling": [
                "FUN_08006060",
                "FUN_08006092"
            ],
            "imported": false,
            "current_name": "update_data_08005fe8"
        },
        "FUN_08008804": {
            "renaming": {
                "FUN_08008804": "get_offset_08008804",
                "param_1": "base_addr",
                "iVar1": "offset",
                "puVar2": "addr_ptr",
                "&stack0x00000000": "stack_bottom"
            },
            "code": "\nint get_offset_08008804(int base_addr)\n\n{\n  int offset;\n  undefined *addr_ptr;\n  \n  if (*(int *)PTR_DAT_08008834 == 0) {\n    *(undefined **)PTR_DAT_08008834 = PTR_DAT_08008838;\n  }\n  offset = *(int *)PTR_DAT_08008834;\n  addr_ptr = (undefined *)(base_addr + offset);\n  if (addr_ptr <= stack_bottom) {\n    *(undefined **)PTR_DAT_08008834 = addr_ptr;\n    return offset;\n  }\n  *(undefined4 *)PTR_DAT_0800883c = 0xc;\n  return -1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008804",
            "calling": [
                "FUN_08009918"
            ],
            "imported": false,
            "current_name": "get_offset_08008804"
        },
        "FUN_0800738a": {
            "renaming": {
                "FUN_0800738a": "compare_values_0800738a",
                "param_1": "value_1",
                "param_2": "value_2"
            },
            "code": "\nundefined4 compare_values_0800738a(int value_1,char *value_2)\n\n{\n  if (value_1 == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*value_2 == -1) {\n      return 0;\n    }\n    if (value_1 == *value_2) break;\n    value_2 = value_2 + 0xc;\n  }\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800738a",
            "calling": [
                "FUN_080088e0",
                "FUN_08008990",
                "FUN_08001cd0",
                "FUN_08000a64",
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "imported": false,
            "current_name": "compare_values_0800738a"
        },
        "FUN_08004e3c": {
            "renaming": {
                "FUN_08004e3c": "process_data_08004e3c",
                "param_1": "data_ptr",
                "puVar1": "ptr",
                "param_1[0xb]": "ptr_b",
                "param_1[9]": "ptr_9",
                "param_1[0xc]": "ptr_c"
            },
            "code": "\nundefined4 process_data_08004e3c(uint **data_ptr)\n\n{\n  uint *ptr;\n  \n  ptr = ptr_b;\n  if (*(short *)((int)data_ptr + 0x2a) == 3) {\n    if (((ptr == (uint *)0x4) || (ptr == (uint *)0x8)) || (ptr == (uint *)0xffff0000)) {\n      **data_ptr = **data_ptr & 0xfffffbff;\n    }\n    ptr = ptr_9;\n    ptr_9 = (uint *)((int)ptr + 1);\n    *(char *)ptr = (char)(*data_ptr)[4];\n    *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) + -1;\n  }\n  else if (*(short *)((int)data_ptr + 0x2a) == 2) {\n    if (((ptr == (uint *)0x4) || (ptr == (uint *)0x8)) || (ptr == (uint *)0xffff0000)) {\n      (*data_ptr)[1] = (*data_ptr)[1] & 0xfffffcff;\n      **data_ptr = **data_ptr | 0x200;\n    }\n    else {\n      if (ptr == (uint *)0x2) {\n        **data_ptr = **data_ptr | 0x400;\n      }\n      else {\n        **data_ptr = **data_ptr & 0xfffffbff;\n      }\n      (*data_ptr)[1] = (*data_ptr)[1] & 0xfffffcff;\n    }\n    ptr = ptr_9;\n    ptr_9 = (uint *)((int)ptr + 1);\n    *(char *)ptr = (char)(*data_ptr)[4];\n    *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) + -1;\n    ptr = ptr_9;\n    ptr_9 = (uint *)((int)ptr + 1);\n    *(char *)ptr = (char)(*data_ptr)[4];\n    *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) + -1;\n    *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n    ptr_c = (uint *)0x0;\n    if (*(char *)((int)data_ptr + 0x3e) == '@') {\n      *(undefined *)((int)data_ptr + 0x3e) = 0;\n      do_nothing_08004d6a();\n    }\n    else {\n      *(undefined *)((int)data_ptr + 0x3e) = 0;\n      do_nothing_08004a20();\n    }\n  }\n  else {\n    ptr = ptr_9;\n    ptr_9 = (uint *)((int)ptr + 1);\n    *(char *)ptr = (char)(*data_ptr)[4];\n    *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e3c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_data_08004e3c"
        },
        "FUN_080091a0": {
            "renaming": {
                "FUN_080091a0": "execute_function_080091a0",
                "param_1": "argument"
            },
            "code": "\nvoid execute_function_080091a0(undefined4 argument)\n\n{\n  FUN_080091d8(*(undefined4 *)PTR_PTR_DAT_080091ac,argument);\n  return;\n}\n\n",
            "called": [
                "FUN_080091d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091a0",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "execute_function_080091a0"
        },
        "FUN_08002a1c": {
            "renaming": {
                "FUN_08002a1c": "execute_function_08002a1c",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "output_param"
            },
            "code": "\nvoid execute_function_08002a1c(undefined4 input_param_1,undefined input_param_2,undefined4 input_param_3,undefined4 output_param)\n\n{\n  FUN_08002968(input_param_1,input_param_2,input_param_3,output_param,output_param);\n  return;\n}\n\n",
            "called": [
                "FUN_08002968"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a1c",
            "calling": [
                "FUN_08002a26"
            ],
            "imported": false,
            "current_name": "execute_function_08002a1c"
        },
        "FUN_08007718": {
            "renaming": {
                "FUN_08007718": "subtract_four_08007718",
                "param_1": "input_num"
            },
            "code": "\nint subtract_four_08007718(int input_num)\n\n{\n  return input_num + -4;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007718",
            "calling": [
                "FUN_0800771c",
                "FUN_08007736"
            ],
            "imported": false,
            "current_name": "subtract_four_08007718"
        },
        "FUN_08002948": {
            "renaming": {
                "FUN_08002948": "check_param_08002948",
                "param_1": "param_value",
                "param_2": "param_flag"
            },
            "code": "\nvoid check_param_08002948(int param_value,int param_flag)\n\n{\n  if (param_value != 1) {\n    return;\n  }\n  if (param_flag == 0xffff) {\n    FUN_0800291c(PTR_DAT_08002964);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800291c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002948",
            "calling": [
                "FUN_08002c1e"
            ],
            "imported": false,
            "current_name": "check_param_08002948"
        },
        "FUN_08009e64": {
            "renaming": {
                "FUN_08009e64": "check_file_permissions_08009e64",
                "param_1": "file_path",
                "param_2": "file_header",
                "param_3": "permission_flags",
                "param_4": "file_type",
                "iVar1": "permission_check_result",
                "uVar2": "permission_value",
                "auStack_4c": "stack_variable",
                "local_48": "file_header_value"
            },
            "code": "\nundefined4 check_file_permissions_08009e64(undefined4 file_path,int file_header,undefined4 *permission_flags,uint *file_type)\n\n{\n  int permission_check_result;\n  undefined4 permission_value;\n  undefined stack_variable [4];\n  uint file_header_value;\n  \n  if ((*(short *)(file_header + 0xe) < 0) ||\n     (permission_check_result = FUN_0800a0ec(file_path,(int)*(short *)(file_header + 0xe),stack_variable), permission_check_result < 0)) {\n    *file_type = 0;\n    if ((int)((uint)*(ushort *)(file_header + 0xc) << 0x18) < 0) {\n      permission_value = 0x40;\n      goto LAB_08009ea4;\n    }\n  }\n  else {\n    *file_type = (uint)((file_header_value & 0xf000) == 0x2000);\n  }\n  permission_value = 0x400;\nLAB_08009ea4:\n  *permission_flags = permission_value;\n  return 0;\n}\n\n",
            "called": [
                "FUN_0800a0ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e64",
            "calling": [
                "FUN_08009eac"
            ],
            "imported": false,
            "current_name": "check_file_permissions_08009e64"
        },
        "FUN_08002acc": {
            "renaming": {
                "FUN_08002acc": "resize_buffer_08002acc",
                "param_1": "new_size",
                "param_2": "unused",
                "param_3": "buffer_pointer",
                "param_4": "unused",
                "puVar1": "data_pointer",
                "iVar2": "result",
                "uVar3": "new_size_byte"
            },
            "code": "\nvoid resize_buffer_08002acc(uint new_size,undefined4 unused,undefined4 buffer_pointer,undefined4 unused)\n\n{\n  undefined *data_pointer;\n  int result;\n  undefined new_size_byte;\n  \n  data_pointer = PTR_DAT_08002afc;\n  if ((byte)*PTR_DAT_08002af8 < new_size) {\n    if (new_size < 0x20) {\n      new_size = 0x20;\n    }\n    result = FUN_08009908(*(undefined4 *)PTR_DAT_08002afc,new_size,buffer_pointer,\n                         (uint)(byte)*PTR_DAT_08002af8,unused);\n    *(int *)data_pointer = result;\n    if (result == 0) {\n      new_size_byte = 0;\n    }\n    else {\n      new_size_byte = (undefined)new_size;\n    }\n    *PTR_DAT_08002af8 = new_size_byte;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08009908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002acc",
            "calling": [
                "FUN_08002b68"
            ],
            "imported": false,
            "current_name": "resize_buffer_08002acc"
        },
        "FUN_08002a30": {
            "renaming": {
                "FUN_08002a30": "initialize_data_08002a30",
                "param_1": "status",
                "param_2": "value"
            },
            "code": "\nvoid initialize_data_08002a30(undefined4 status,int value)\n\n{\n  *PTR_DAT_08002a48 = 1;\n  *PTR_DAT_08002a4c = (char)(value << 1);\n  *PTR_DAT_08002a50 = 0;\n  *PTR_DAT_08002a54 = 0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a30",
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_08002b68"
            ],
            "imported": false,
            "current_name": "initialize_data_08002a30"
        },
        "FUN_0800932c": {
            "renaming": {
                "FUN_0800932c": "process_input_0800932c",
                "param_1": "input_data",
                "param_2": "byte_value",
                "param_3": "byte_array",
                "iVar1": "temp_int_1",
                "pbVar2": "temp_byte_1",
                "pbVar3": "temp_byte_2",
                "uVar4": "return_value"
            },
            "code": "\nuint process_input_0800932c(int input_data,byte byte_value,byte **byte_array)\n\n{\n  int temp_int_1;\n  byte *temp_byte_1;\n  byte *temp_byte_2;\n  uint return_value;\n  \n  temp_byte_1 = byte_array[2] + -1;\n  byte_array[2] = temp_byte_1;\n  if ((-1 < (int)temp_byte_1) ||\n     (((int)byte_array[6] <= (int)temp_byte_1 && (temp_byte_1 = (byte *)(uint)byte_value, temp_byte_1 != (byte *)0xa))))\n  {\n    temp_byte_1 = *byte_array;\n    *byte_array = temp_byte_1 + 1;\n    *temp_byte_1 = byte_value;\n    return (uint)byte_value;\n  }\n  if ((input_data != 0) && (*(int *)(input_data + 0x18) == 0)) {\n    FUN_08009d50();\n  }\n  if (byte_array == (byte **)PTR_DAT_08009a74) {\n    byte_array = *(byte ***)(input_data + 4);\n  }\n  else if (byte_array == (byte **)PTR_DAT_08009a78) {\n    byte_array = *(byte ***)(input_data + 8);\n  }\n  else if (byte_array == (byte **)PTR_DAT_08009a7c) {\n    byte_array = *(byte ***)(input_data + 0xc);\n  }\n  byte_array[2] = byte_array[6];\n  temp_byte_2 = (byte *)(uint)*(ushort *)(byte_array + 3);\n  temp_int_1 = (int)temp_byte_2 << 0x1c;\n  if (((temp_int_1 < 0) && (temp_byte_2 = byte_array[4], temp_byte_2 != (byte *)0x0)) ||\n     (temp_int_1 = FUN_08009a80(input_data,byte_array,temp_int_1,temp_byte_2,temp_byte_1), temp_int_1 == 0)) {\n    return_value = (uint)byte_value;\n    temp_int_1 = (int)*byte_array - (int)byte_array[4];\n    if ((temp_int_1 < (int)byte_array[5]) || (temp_int_1 = FUN_08009c7c(input_data,byte_array), temp_int_1 == 0)) {\n      byte_array[2] = byte_array[2] + -1;\n      temp_byte_1 = *byte_array;\n      *byte_array = temp_byte_1 + 1;\n      *temp_byte_1 = byte_value;\n      if ((byte *)(temp_int_1 + 1) != byte_array[5]) {\n        if (-1 < (int)((uint)*(ushort *)(byte_array + 3) << 0x1f)) {\n          return return_value;\n        }\n        if (return_value != 10) {\n          return return_value;\n        }\n      }\n      temp_int_1 = FUN_08009c7c(input_data,byte_array);\n      if (temp_int_1 == 0) {\n        return return_value;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "FUN_08009c7c",
                "FUN_08009d50",
                "FUN_08009a80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800932c",
            "calling": [
                "FUN_08009358"
            ],
            "imported": false,
            "current_name": "process_input_0800932c"
        },
        "FUN_0800322c": {
            "renaming": {
                "FUN_0800322c": "execute_commands_0800322c",
                "param_1": "command_list",
                "param_2": "arg_1",
                "param_3": "arg_2",
                "puVar1": "current_command"
            },
            "code": "\nvoid execute_commands_0800322c(undefined4 *command_list,undefined4 arg_1,undefined4 arg_2)\n\n{\n  undefined4 *current_command;\n  \n  current_command = (undefined4 *)*command_list;\n  if (current_command != (undefined4 *)0x0) {\n    (**(code **)*current_command)(current_command,0xf9);\n    (***(code ***)(undefined4 *)*command_list)((undefined4 *)*command_list,arg_1);\n    (***(code ***)(undefined4 *)*command_list)((undefined4 *)*command_list,arg_2);\n    return;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800322c",
            "calling": [
                "FUN_08002ddc"
            ],
            "imported": false,
            "current_name": "execute_commands_0800322c"
        },
        "FUN_080099a4": {
            "renaming": {
                "FUN_080099a4": "find_substring_080099a4",
                "param_1": "string",
                "param_2": "substring",
                "pcVar1": "current_char",
                "pcVar2": "string_char",
                "pcVar3": "substring_char"
            },
            "code": "\nchar * find_substring_080099a4(char *string,char *substring)\n\n{\n  char *current_char;\n  char *string_char;\n  char *substring_char;\n  \n  if (*string == '\\0') {\n    if (*substring != '\\0') {\n      string = (char *)0x0;\n    }\n    return string;\n  }\n  do {\n    current_char = string;\n    if (*current_char == '\\0') {\n      return (char *)0x0;\n    }\n    substring_char = substring + -1;\n    string_char = current_char + -1;\n    do {\n      substring_char = substring_char + 1;\n      if (*substring_char == '\\0') {\n        return current_char;\n      }\n      string_char = string_char + 1;\n      string = current_char + 1;\n    } while (*string_char == *substring_char);\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080099a4",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "find_substring_080099a4"
        },
        "FUN_08005a1c": {
            "renaming": {
                "FUN_08005a1c": "get_pointer_value_08005a1c"
            },
            "code": "\nundefined4 get_pointer_value_08005a1c(void)\n\n{\n  return *(undefined4 *)PTR_DAT_08005a24;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a1c",
            "calling": [
                "FUN_08005a28",
                "FUN_08005a48",
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "get_pointer_value_08005a1c"
        },
        "FUN_08001cd0": {
            "renaming": {
                "FUN_08001cd0": "FUNC_08001cd0"
            },
            "code": "\nvoid FUNC_08001cd0(undefined4 param_1,int param_2,byte *param_3,undefined4 param_4)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte bVar3;\n  undefined *puVar4;\n  undefined *puVar5;\n  undefined4 uVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  int iVar10;\n  char cVar11;\n  uint uVar12;\n  uint uVar13;\n  int iVar14;\n  bool bVar15;\n  \n  puVar5 = PTR_DAT_080022e8;\n  puVar4 = PTR_DAT_08002044;\n  switch(param_1) {\n  case 0x69:\n    FUN_08002f1e(PTR_DAT_080022e8,0xf0);\n    FUN_08002f1e(puVar5,0x6a);\n    for (uVar12 = 0; uVar12 < 0x3c; uVar12 = uVar12 + 1 & 0xff) {\n      uVar13 = uVar12 - 0x2e & 0xff;\n      if (uVar13 < 0xe) {\n        if (uVar12 < 0x3c) {\n          iVar9 = (int)(char)PTR_DAT_080022e4[uVar12];\n        }\n        else {\n          iVar9 = -1;\n        }\n        iVar9 = FUN_080036ac(iVar9);\n        if (iVar9 == 0) {\n          uVar13 = 0x7f;\n        }\n        else {\n          if (uVar12 < 0x3c) {\n            iVar9 = (int)(char)PTR_DAT_080022e4[uVar12];\n          }\n          else {\n            iVar9 = -1;\n          }\n          iVar9 = FUN_080036ac(iVar9);\n          if (iVar9 == 1) {\n            uVar13 = 0x7f;\n          }\n        }\n      }\n      else {\n        uVar13 = 0x7f;\n      }\n      FUN_08002f1e(PTR_DAT_080022e8,uVar13);\n    }\n    FUN_08002f1e(PTR_DAT_080022e8,0xf7);\n    break;\n  case 0x6b:\n    FUN_08002f1e(PTR_DAT_08002044,0xf0);\n    FUN_08002f1e(puVar4,0x6c);\n    for (uVar12 = 0; uVar12 < 0x3c; uVar12 = uVar12 + 1 & 0xff) {\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = FUN_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = FUN_080036ac((int)(char)PTR_DAT_08002060[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_08002044;\n      if (bVar15) {\n        FUN_08002f1e(PTR_DAT_08002044,0);\n        FUN_08002f1e(puVar4,1);\n        FUN_08002f1e(puVar4,0xb);\n        FUN_08002f1e(puVar4,1);\n        FUN_08002f1e(puVar4,1);\n        FUN_08002f1e(puVar4,1);\n      }\n      if ((uVar12 - 0x2e & 0xff) < 0xe) {\n        if (uVar12 < 0x3c) {\n          iVar9 = (int)(char)PTR_DAT_08002060[uVar12];\n        }\n        else {\n          iVar9 = -1;\n        }\n        iVar9 = FUN_080036ac(iVar9);\n        if (iVar9 == 0) {\n          bVar15 = false;\n        }\n        else {\n          if (uVar12 < 0x3c) {\n            iVar9 = (int)(char)PTR_DAT_08002060[uVar12];\n          }\n          else {\n            iVar9 = -1;\n          }\n          iVar9 = FUN_080036ac(iVar9);\n          if (iVar9 == 1) {\n            bVar15 = false;\n          }\n          else {\n            bVar15 = true;\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (bVar15) {\n        FUN_08002f1e(PTR_DAT_080022e8,2);\n        FUN_08002f1e(puVar4,10);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          iVar9 = 0;\n        }\n        else {\n          iVar9 = FUN_080036ac();\n          if (iVar9 == 0) {\n            iVar9 = 0;\n          }\n          else {\n            iVar9 = FUN_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              iVar9 = 0;\n            }\n            else {\n              iVar9 = FUN_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022ec);\n            }\n          }\n        }\n      }\n      else {\n        iVar9 = 0;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (iVar9 != 0) {\n        FUN_08002f1e(PTR_DAT_080022e8,3);\n        FUN_08002f1e(puVar4,8);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = FUN_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = FUN_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (bVar15) {\n        FUN_08002f1e(PTR_DAT_080022e8,4);\n        FUN_08002f1e(puVar4,0xe);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          iVar9 = 0;\n        }\n        else {\n          iVar9 = FUN_080036ac();\n          if (iVar9 == 0) {\n            iVar9 = 0;\n          }\n          else {\n            iVar9 = FUN_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              iVar9 = 0;\n            }\n            else {\n              iVar9 = FUN_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022f0);\n              if (iVar9 == 0) {\n                iVar9 = FUN_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022f4);\n              }\n            }\n          }\n        }\n      }\n      else {\n        iVar9 = 0;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (iVar9 != 0) {\n        FUN_08002f1e(PTR_DAT_080022e8,6);\n        FUN_08002f1e(puVar4,1);\n      }\n      FUN_08002f1e(PTR_DAT_080022e8,0x7f);\n    }\n    FUN_08002f1e(PTR_DAT_080022e8,0xf7);\n    return;\n  case 0x6d:\n    if (param_2 != 0) {\n      bVar1 = *param_3;\n      FUN_08002f1e(PTR_DAT_080022e8,0xf0);\n      FUN_08002f1e(puVar5,0x6e);\n      FUN_08002f1e(puVar5,bVar1);\n      if (bVar1 < 0x3c) {\n        uVar6 = FUN_08002fa0(puVar5,bVar1);\n        FUN_08002f1e(puVar5,uVar6);\n        uVar12 = FUN_08002fba(puVar5,bVar1);\n        FUN_08002f1e(puVar5,uVar12 & 0x7f);\n        uVar12 = FUN_08002fba(puVar5,bVar1);\n        if ((uVar12 & 0xff80) != 0) {\n          iVar9 = FUN_08002fba(puVar5,bVar1);\n          FUN_08002f1e(puVar5,(uint)(iVar9 << 0x12) >> 0x19);\n        }\n        uVar12 = FUN_08002fba(PTR_DAT_080022e8,bVar1);\n        puVar4 = PTR_DAT_080022e8;\n        if ((uVar12 & 0xc000) != 0) {\n          iVar9 = FUN_08002fba(PTR_DAT_080022e8,bVar1);\n          FUN_08002f1e(puVar4,(uint)(iVar9 << 0xb) >> 0x19);\n        }\n      }\n      FUN_08002f1e(PTR_DAT_080022e8,0xf7);\n      return;\n    }\n    break;\n  case 0x6f:\n    if (1 < param_2) {\n      uVar12 = (uint)param_3[1];\n      if (2 < param_2) {\n        uVar12 = uVar12 | (uint)param_3[2] << 7;\n      }\n      if (3 < param_2) {\n        uVar12 = uVar12 | (uint)param_3[3] << 0xe;\n      }\n      FUN_08000214(*param_3,uVar12);\n      return;\n    }\n    break;\n  case 0x70:\n    if (4 < param_2) {\n      uVar12 = (uint)*param_3;\n      bVar1 = param_3[1];\n      bVar7 = param_3[2];\n      bVar2 = param_3[3];\n      bVar3 = param_3[4];\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_08002060[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = FUN_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = FUN_080036ac((int)(char)PTR_DAT_08002060[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      if (bVar15) {\n        if ((byte)PTR_DAT_08002064[uVar12] < 0xc) {\n          iVar9 = FUN_080026f8(PTR_DAT_08002068 + (uint)(byte)PTR_DAT_08002064[uVar12] * 3);\n        }\n        else {\n          iVar9 = 0;\n        }\n        if (iVar9 != 0) {\n          FUN_08000588(uVar12);\n        }\n        FUN_08000500(uVar12,(uint)bVar1 + (uint)bVar7 * 0x80,(uint)bVar2 + (uint)bVar3 * 0x80);\n        FUN_080005f8(uVar12,4);\n        return;\n      }\n    }\n    break;\n  case 0x76:\n    bVar1 = param_3[1];\n    bVar7 = bVar1 & 0x18;\n    if ((bVar1 & 0x20) != 0) {\n      FUN_08002f14(PTR_DAT_08002044,PTR_s_10_bit_addressing_not_supported_08002040,bVar7,bVar1,\n                   param_4);\n      return;\n    }\n    bVar2 = *param_3;\n    bVar15 = (bVar1 & 0x40) == 0;\n    if (bVar7 < 0x19) {\n      switch(bVar7) {\n      case 0:\n        FUN_08002a30(PTR_DAT_08002048,bVar2);\n        for (uVar12 = 2; (int)uVar12 < param_2; uVar12 = uVar12 + 2 & 0xff) {\n          FUN_08001bf8(param_3[uVar12 + 1] * -0x80 + param_3[uVar12]);\n        }\n        FUN_08002ac0(PTR_DAT_08002048);\n        return;\n      case 8:\n        if (param_2 == 6) {\n          iVar9 = (uint)param_3[2] + (uint)param_3[3] * 0x80;\n          cVar8 = param_3[4] + param_3[5] * -0x80;\n        }\n        else {\n          cVar8 = param_3[2] + param_3[3] * -0x80;\n          iVar9 = -1;\n        }\n        FUN_08001c18(bVar2,iVar9,cVar8);\n        return;\n      case 0x10:\n        cVar8 = *PTR_DAT_0800204c;\n        if (cVar8 + 1 < 8) {\n          if (param_2 == 6) {\n            iVar9 = (uint)param_3[2] + (uint)param_3[3] * 0x80;\n            cVar11 = param_3[4] + param_3[5] * -0x80;\n          }\n          else {\n            cVar11 = param_3[2] + param_3[3] * -0x80;\n            iVar9 = -1;\n          }\n          *PTR_DAT_0800204c = cVar8 + '\\x01';\n          puVar4 = PTR_DAT_08002050;\n          iVar10 = (char)(cVar8 + '\\x01') * 0xc;\n          PTR_DAT_08002050[iVar10] = bVar2;\n          *(int *)(puVar4 + iVar10 + 4) = iVar9;\n          puVar4[iVar10 + 8] = cVar11;\n          puVar4[iVar10 + 9] = bVar15;\n          return;\n        }\n        FUN_08002f14(PTR_DAT_08002044,PTR_s_too_many_queries_08002054,(int)cVar8,bVar15,param_4);\n        return;\n      case 0x18:\n        cVar8 = *PTR_DAT_0800204c;\n        if (cVar8 < 1) {\n          *PTR_DAT_0800204c = 0xff;\n          return;\n        }\n      }\n      for (uVar12 = 0; iVar9 = cVar8 + 1, (int)uVar12 < iVar9; uVar12 = uVar12 + 1 & 0xff) {\n        if (bVar2 == PTR_DAT_08002050[uVar12 * 0xc]) goto LAB_08001e66;\n      }\n      uVar12 = 0;\nLAB_08001e66:\n      for (; puVar4 = PTR_DAT_08002050, (int)uVar12 < iVar9; uVar12 = uVar12 + 1 & 0xff) {\n        if (uVar12 < 8) {\n          iVar10 = (uVar12 + 1) * 0xc;\n          iVar14 = uVar12 * 0xc;\n          PTR_DAT_08002050[iVar14] = PTR_DAT_08002050[iVar10];\n          *(undefined4 *)(puVar4 + iVar14 + 4) = *(undefined4 *)(puVar4 + iVar10 + 4);\n          puVar4[iVar14 + 8] = puVar4[iVar10 + 8];\n          puVar4[iVar14 + 9] = puVar4[iVar10 + 9];\n        }\n      }\n      *PTR_DAT_0800204c = cVar8 + -1;\n      return;\n    }\n    break;\n  case 0x78:\n    iVar9 = (uint)*param_3 + (uint)param_3[1] * 0x80;\n    if ((1 < param_2) && (iVar9 != 0)) {\n      *(int *)PTR_DAT_08002058 = iVar9;\n    }\n    if (*PTR_DAT_0800205c == '\\0') {\n      FUN_08000a64();\n      return;\n    }\n    break;\n  case 0x7a:\n    if ((1 < param_2) &&\n       (iVar9 = (uint)*param_3 + (uint)param_3[1] * 0x80, *(int *)PTR_DAT_0800206c = iVar9,\n       iVar9 == 0)) {\n      *(undefined4 *)PTR_DAT_0800206c = 1;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08000500",
                "FUN_08002ac0",
                "FUN_08001c18",
                "FUN_08002fba",
                "FUN_08002fa0",
                "FUN_08002f14",
                "FUN_080036ac",
                "FUN_0800738a",
                "FUN_08002f1e",
                "FUN_080026f8",
                "FUN_08000a64",
                "FUN_08002a30",
                "FUN_08001bf8",
                "FUN_08000588",
                "FUN_08000214",
                "FUN_080005f8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001cd0",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08001cd0"
        },
        "FUN_08003760": {
            "renaming": {
                "FUN_08003760": "get_data_pointer_08003760"
            },
            "code": "\nundefined4 get_data_pointer_08003760(void)\n\n{\n  return *(undefined4 *)PTR_DAT_08003768;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003760",
            "calling": [
                "FUN_08003b8c",
                "FUN_08003e20",
                "FUN_080066e8",
                "FUN_08008500",
                "FUN_080058d2",
                "FUN_08003a20",
                "FUN_0800723c",
                "FUN_0800376c",
                "FUN_080067ac",
                "FUN_08007f0e",
                "FUN_08005460",
                "FUN_08005aa4",
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "get_data_pointer_08003760"
        },
        "FUN_08007320": {
            "renaming": {
                "FUN_08007320": "check_param_08007320",
                "param_1": "input_param",
                "uVar1": "result"
            },
            "code": "\nundefined4 check_param_08007320(int input_param)\n\n{\n  undefined4 result;\n  \n  if (input_param != -1) {\n    result = FUN_08007306();\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_08007306"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007320",
            "calling": [
                "FUN_080071e4",
                "FUN_08007118",
                "FUN_08008078",
                "FUN_080077b0",
                "FUN_08008500",
                "FUN_080084b0",
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "check_param_08007320"
        },
        "FUN_08000be8": {
            "renaming": {
                "FUN_08000be8": "update_data_08000be8",
                "param_1": "index",
                "param_2": "mask",
                "param_3": "flag",
                "param_4": "data",
                "puVar1": "ptr1",
                "puVar2": "ptr2"
            },
            "code": "\nvoid update_data_08000be8(int index,uint mask,int flag,undefined4 data)\n\n{\n  undefined *ptr1;\n  undefined *ptr2;\n  \n  ptr2 = (undefined *)((byte)PTR_DAT_08000c0c[index] & mask);\n  ptr1 = PTR_DAT_08000c0c;\n  if ((flag != 0) ||\n     (ptr1 = (undefined *)(uint)(byte)PTR_DAT_08000c10[index], ptr2 != ptr1)) {\n    FUN_08002efe(PTR_DAT_08000c14,index,ptr2,ptr1,data);\n    PTR_DAT_08000c10[index] = (char)ptr2;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08002efe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000be8",
            "calling": [
                "FUN_08000ef8"
            ],
            "imported": false,
            "current_name": "update_data_08000be8"
        },
        "FUN_08003fd8": {
            "renaming": {
                "FUN_08003fd8": "check_param_08003fd8",
                "param_1": "input_param",
                "puVar1": "data_ptr"
            },
            "code": "\nundefined4 check_param_08003fd8(int input_param)\n\n{\n  undefined4 *data_ptr;\n  \n  data_ptr = DAT_08003ffc;\n  if (input_param - 1U < 0x1000000) {\n    DAT_08003ffc[1] = input_param - 1U;\n    *(undefined *)(DAT_08004000 + 0x23) = 0xf0;\n    data_ptr[2] = 0;\n    *data_ptr = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fd8",
            "calling": [
                "FUN_080036d8",
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "check_param_08003fd8"
        },
        "FUN_0800307a": {
            "renaming": {
                "FUN_0800307a": "encode_varint_0800307a",
                "param_1": "stream",
                "param_2": "data_len",
                "param_3": "data",
                "param_4": "max_len",
                "uVar1": "value",
                "uVar2": "shift",
                "uVar3": "encoded_len",
                "uVar4": "i"
            },
            "code": "\nvoid encode_varint_0800307a(undefined4 *stream,uint data_len,byte *data,uint max_len)\n\n{\n  uint value;\n  uint shift;\n  uint encoded_len;\n  uint i;\n  \n  value = (uint)*data;\n  if (max_len == 0) {\n    max_len = 0xffffffff;\n  }\n  i = 0;\n  shift = 0;\n  encoded_len = 0;\n  while ((i < data_len && (encoded_len < max_len))) {\n    (***(code ***)(undefined4 *)*stream)\n              ((undefined4 *)*stream,((uint)data[i] << (shift & 0xff) | value) & 0x7f);\n    value = (int)(uint)data[i] >> (7 - shift & 0xff) & 0xff;\n    shift = shift + 1;\n    while ((encoded_len = encoded_len + 1, 6 < shift && (encoded_len < max_len))) {\n      (***(code ***)(undefined4 *)*stream)((undefined4 *)*stream,value & 0x7f);\n      value = value >> 7;\n      shift = shift - 7;\n    }\n    i = i + 1;\n  }\n  if ((shift != 0) && (encoded_len < max_len)) {\n    (***(code ***)(undefined4 *)*stream)((undefined4 *)*stream,(1 << (shift & 0xff)) - 1U & value)\n    ;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800307a",
            "calling": [
                "FUN_0800319e",
                "FUN_08003106",
                "FUN_080031ce",
                "FUN_08003158",
                "FUN_0800325a"
            ],
            "imported": false,
            "current_name": "encode_varint_0800307a"
        },
        "FUN_08004b80": {
            "renaming": {
                "FUN_08004b80": "do_nothing_08004b80"
            },
            "code": "\nvoid do_nothing_08004b80(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b80",
            "calling": [
                "FUN_08004b82",
                "FUN_08004ccc"
            ],
            "imported": false,
            "current_name": "do_nothing_08004b80"
        },
        "FUN_0800319e": {
            "renaming": {
                "FUN_0800319e": "execute_function_0800319e",
                "param_1": "function_pointer",
                "param_2": "flags",
                "param_3": "input_value",
                "puVar1": "function_address",
                "local_a": "output_value"
            },
            "code": "\nvoid execute_function_0800319e(undefined4 *function_pointer,uint flags,undefined2 input_value)\n\n{\n  undefined4 *function_address;\n  undefined2 output_value;\n  \n  function_address = (undefined4 *)*function_pointer;\n  if (function_address != (undefined4 *)0x0) {\n    output_value = input_value;\n    (**(code **)*function_address)(function_address,flags & 0xf | 0x90);\n    FUN_0800307a(function_pointer,2,&output_value);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800319e",
            "calling": [
                "FUN_08002efe"
            ],
            "imported": false,
            "current_name": "execute_function_0800319e"
        },
        "FUN_08008d00": {
            "renaming": {
                "FUN_08008d00": "set_color_08008d00",
                "param_1": "color_buffer",
                "param_2": "color_index",
                "uVar1": "color_value",
                "UNRECOVERED_JUMPTABLE": "color_function"
            },
            "code": "\nvoid set_color_08008d00(int color_buffer,uint color_index)\n\n{\n  undefined color_value;\n  code *color_function;\n  \n  if (color_index < 0x3c) {\n    color_value = PTR_DAT_08008d14[color_index];\n  }\n  else {\n    color_value = 0xff;\n  }\n  *(undefined *)(color_buffer + 0x12d) = color_value;\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*color_function)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d00",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "set_color_08008d00"
        },
        "FUN_08009190": {
            "renaming": {
                "FUN_08009190": "FUNC_08009190"
            },
            "code": "\nvoid FUNC_08009190(undefined4 param_1)\n\n{\n  FUN_08009270(*(undefined4 *)PTR_PTR_DAT_0800919c,param_1);\n  return;\n}\n\n",
            "called": [
                "FUN_08009270"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009190",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "FUNC_08009190"
        },
        "FUN_08004b82": {
            "renaming": {
                "FUN_08004b82": "improved_function_08004b82",
                "param_1": "parameter_1",
                "cVar1": "char_variable",
                "puVar2": "pointer_variable"
            },
            "code": "\nundefined4 improved_function_08004b82(uint **parameter_1)\n\n{\n  char char_variable;\n  uint *pointer_variable;\n  \n  char_variable = *(char *)((int)parameter_1 + 0x3d);\n  pointer_variable = parameter_1[0xb];\n  if ((*(short *)(parameter_1 + 10) == 0) && (char_variable == '!')) {\n    if ((pointer_variable == (uint *)0x4) || ((pointer_variable == (uint *)0x8 || (pointer_variable == (uint *)0xffff0000)))) {\n      (*parameter_1)[1] = (*parameter_1)[1] & 0xfffff8ff;\n      **parameter_1 = **parameter_1 | 0x200;\n      parameter_1[0xc] = (uint *)0x0;\n      *(undefined *)((int)parameter_1 + 0x3d) = 0x20;\n      if (*(char *)((int)parameter_1 + 0x3e) == '@') {\n        *(undefined *)((int)parameter_1 + 0x3e) = 0;\n        do_nothing_08004b80();\n      }\n      else {\n        *(undefined *)((int)parameter_1 + 0x3e) = 0;\n        do_nothing_08004a1e();\n      }\n    }\n    else {\n      (*parameter_1)[1] = (*parameter_1)[1] & 0xfffff8ff;\n      parameter_1[0xc] = (uint *)0x11;\n      *(undefined *)((int)parameter_1 + 0x3e) = 0;\n      *(undefined *)((int)parameter_1 + 0x3d) = 0x20;\n      do_nothing_08004a1e();\n    }\n  }\n  else if ((char_variable == '!') || ((*(char *)((int)parameter_1 + 0x3e) == '@' && (char_variable == '\\\"')))) {\n    if (*(short *)((int)parameter_1 + 0x2a) == 0) {\n      (*parameter_1)[1] = (*parameter_1)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)parameter_1 + 0x3e) == '@') {\n      if (parameter_1[0x14] == (uint *)0x0) {\n        if (parameter_1[0x13] == (uint *)0x1) {\n          (*parameter_1)[4] = (uint)parameter_1[0x12] & 0xff;\n          parameter_1[0x14] = (uint *)((int)parameter_1[0x14] + 2);\n        }\n        else {\n          (*parameter_1)[4] = (uint)((int)parameter_1[0x12] << 0x10) >> 0x18;\n          parameter_1[0x14] = (uint *)((int)parameter_1[0x14] + 1);\n        }\n      }\n      else if (parameter_1[0x14] == (uint *)0x1) {\n        (*parameter_1)[4] = (uint)parameter_1[0x12] & 0xff;\n        parameter_1[0x14] = (uint *)((int)parameter_1[0x14] + 1);\n      }\n      else if (parameter_1[0x14] == (uint *)0x2) {\n        if (*(char *)((int)parameter_1 + 0x3d) == '\\\"') {\n          **parameter_1 = **parameter_1 | 0x100;\n        }\n        else if (*(char *)((int)parameter_1 + 0x3d) == '!') {\n          pointer_variable = parameter_1[9];\n          parameter_1[9] = (uint *)((int)pointer_variable + 1);\n          (*parameter_1)[4] = (uint)*(byte *)pointer_variable;\n          *(short *)((int)parameter_1 + 0x2a) = *(short *)((int)parameter_1 + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      pointer_variable = parameter_1[9];\n      parameter_1[9] = (uint *)((int)pointer_variable + 1);\n      (*parameter_1)[4] = (uint)*(byte *)pointer_variable;\n      *(short *)((int)parameter_1 + 0x2a) = *(short *)((int)parameter_1 + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_08004b80",
                "FUN_08004a1e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b82",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "improved_function_08004b82"
        },
        "FUN_0800997e": {
            "renaming": {
                "FUN_0800997e": "find_last_occurrence_0800997e",
                "param_1": "string",
                "param_2": "string_length",
                "param_3": "target_char",
                "param_4": "unused_param",
                "iVar1": "current_index",
                "iVar2": "last_index"
            },
            "code": "\nint find_last_occurrence_0800997e(int string,int string_length,undefined4 target_char,undefined4 unused_param)\n\n{\n  int current_index;\n  int last_index;\n  \n  if (string_length != 0) {\n    last_index = 0;\n    while (current_index = FUN_08009938(string,string_length,target_char,string,unused_param), current_index != 0) {\n      string = current_index + 1;\n      last_index = current_index;\n    }\n    return last_index;\n  }\n  last_index = FUN_08009938();\n  return last_index;\n}\n\n",
            "called": [
                "FUN_08009938"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800997e",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "find_last_occurrence_0800997e"
        },
        "FUN_08002dbc": {
            "renaming": {
                "FUN_08002dbc": "check_param_08002dbc",
                "param_1": "input_value",
                "param_2": "flag_value"
            },
            "code": "\nvoid check_param_08002dbc(int input_value,int flag_value)\n\n{\n  if (input_value != 1) {\n    return;\n  }\n  if (flag_value == 0xffff) {\n    FUN_08002ce0(PTR_DAT_08002dd8);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08002ce0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002dbc",
            "calling": [],
            "imported": false,
            "current_name": "check_param_08002dbc"
        },
        "FUN_08002e44": {
            "renaming": {
                "FUN_08002e44": "parse_path_08002e44",
                "param_1": "output_buffer",
                "param_2": "input_path",
                "param_3": "undefined_byte_1",
                "param_4": "undefined_byte_2",
                "bVar1": "buffer_length",
                "cVar2": "first_char",
                "iVar3": "first_slash_index",
                "iVar4": "last_slash_index",
                "puVar5": "buffer_pointer"
            },
            "code": "\nvoid parse_path_08002e44(int output_buffer,int input_path,undefined undefined_byte_1,undefined undefined_byte_2)\n\n{\n  byte buffer_length;\n  char first_char;\n  int first_slash_index;\n  int last_slash_index;\n  undefined *buffer_pointer;\n  \n  first_slash_index = FUN_080099a4(input_path,PTR_s__cpp_08002ec0);\n  last_slash_index = FUN_0800997e(input_path,0x2f);\n  if (last_slash_index == 0) {\n    last_slash_index = FUN_0800997e(input_path,0x5c);\n  }\n  if (last_slash_index != 0) {\n    input_path = last_slash_index + 1;\n  }\n  if (first_slash_index == 0) {\n    first_char = FUN_08000178(input_path);\n    *(char *)(output_buffer + 0xc4) = first_char + '\\x02';\n  }\n  else {\n    *(char *)(output_buffer + 0xc4) = ((char)first_slash_index - (char)input_path) + '\\x02';\n  }\n  FUN_080091a0(*(undefined4 *)(output_buffer + 200));\n  buffer_length = *(byte *)(output_buffer + 0xc4);\n  buffer_pointer = (undefined *)FUNC_08009190(buffer_length + 1);\n  *(undefined **)(output_buffer + 200) = buffer_pointer;\n  buffer_pointer[buffer_length] = 0;\n  *buffer_pointer = undefined_byte_1;\n  buffer_pointer[1] = undefined_byte_2;\n  FUN_08009954(buffer_pointer + 2,input_path,*(byte *)(output_buffer + 0xc4) - 2);\n  return;\n}\n\n",
            "called": [
                "FUN_080091a0",
                "FUN_0800997e",
                "FUN_080099a4",
                "FUN_08009954",
                "FUN_08009190",
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e44",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "parse_path_08002e44"
        },
        "FUN_0800242c": {
            "renaming": {
                "FUN_0800242c": "send_data_0800242c",
                "param_1": "data",
                "param_2": "length",
                "param_3": "timeout",
                "param_4": "callback"
            },
            "code": "\nvoid send_data_0800242c(undefined4 data,undefined4 length,undefined4 timeout,undefined4 callback)\n\n{\n  FUN_08007648(data,60000,0x5dc,PTR_LAB_08002444_1_08002440,callback);\n  return;\n}\n\n",
            "called": [
                "FUN_08007648"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800242c",
            "calling": [
                "FUN_080025ac"
            ],
            "imported": false,
            "current_name": "send_data_0800242c"
        },
        "FUN_080058d2": {
            "renaming": {
                "FUN_080058d2": "execute_command_080058d2",
                "param_1": "command_flags",
                "param_2": "command_index",
                "puVar1": "command_table",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "uVar4": "result"
            },
            "code": "\nundefined4 execute_command_080058d2(uint *command_flags,uint command_index)\n\n{\n  uint *command_table;\n  int start_time;\n  int current_time;\n  uint result;\n  \n  if ((*command_flags & 2) != 0) {\n    DAT_08005a10[1] = DAT_08005a10[1] & 0xffffff0f | command_flags[2];\n  }\n  if ((*command_flags & 1) != 0) {\n    result = command_flags[1];\n    if (result == 1) {\n      if ((*DAT_08005a10 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((result != 2) && ((*DAT_08005a10 & 2) == 0)) {\n      return 1;\n    }\n    DAT_08005a10[1] = result | DAT_08005a10[1] & 0xfffffffc;\n    start_time = FUN_08003760();\n    if (command_flags[1] == 1) {\n      while ((DAT_08005a10[1] & 0xc) != 4) {\n        current_time = FUN_08003760();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (command_flags[1] == 2) {\n      while ((DAT_08005a10[1] & 0xc) != 8) {\n        current_time = FUN_08003760();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((DAT_08005a10[1] & 0xc) != 0) {\n        current_time = FUN_08003760();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  command_table = DAT_08005a0c;\n  if ((command_index < (*DAT_08005a0c & 7)) &&\n     (*DAT_08005a0c = *DAT_08005a0c & 0xfffffff8 | command_index, command_index != (*command_table & 7))) {\n    return 1;\n  }\n  if ((*command_flags & 4) != 0) {\n    DAT_08005a10[1] = DAT_08005a10[1] & 0xfffff8ff | command_flags[3];\n  }\n  if ((*command_flags & 8) != 0) {\n    DAT_08005a10[1] = DAT_08005a10[1] & 0xffffc7ff | command_flags[4] << 3;\n  }\n  result = FUN_08005840();\n  *(uint *)PTR_DAT_08005a18 = result >> PTR_DAT_08005a14[(DAT_08005a10[1] << 0x18) >> 0x1c];\n  FUN_080036d8(0xf);\n  return 0;\n}\n\n",
            "called": [
                "FUN_08003760",
                "FUN_080036d8",
                "FUN_08005840"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058d2",
            "calling": [
                "FUN_080058ac"
            ],
            "imported": false,
            "current_name": "execute_command_080058d2"
        },
        "FUN_08002c00": {
            "renaming": {
                "FUN_08002c00": "execute_application_08002c00"
            },
            "code": "\nvoid execute_application_08002c00(void)\n\n{\n  FUN_08002b68();\n  return;\n}\n\n",
            "called": [
                "FUN_08002b68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c00",
            "calling": [
                "FUN_08002c14"
            ],
            "imported": false,
            "current_name": "execute_application_08002c00"
        },
        "FUN_08003f30": {
            "renaming": {
                "FUN_08003f30": "write_bits_to_memory_08003f30",
                "param_1": "address",
                "param_2": "bits_to_write",
                "param_3": "memory_value",
                "uVar1": "shift_amount",
                "uVar2": "remaining_bits"
            },
            "code": "\nvoid write_bits_to_memory_08003f30(uint address,uint bits_to_write,uint memory_value)\n\n{\n  uint shift_amount;\n  uint remaining_bits;\n  \n  shift_amount = (uint)(*(int *)(DAT_08003f8c + 0xc) << 0x15) >> 0x1d;\n  remaining_bits = 7 - shift_amount;\n  if (3 < remaining_bits) {\n    remaining_bits = 4;\n  }\n  if (shift_amount + 4 < 7) {\n    shift_amount = 0;\n  }\n  else {\n    shift_amount = shift_amount - 3;\n  }\n  shift_amount = (bits_to_write & (1 << (remaining_bits & 0xff)) - 1U) << (shift_amount & 0xff) |\n          (1 << (shift_amount & 0xff)) - 1U & memory_value;\n  if ((int)address < 0) {\n    *(char *)(DAT_08003f90 + (address & 0xf)) = (char)(shift_amount << 4);\n  }\n  else {\n    *(char *)(address + 0xe000e400) = (char)(shift_amount << 4);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f30",
            "calling": [
                "FUN_080036d8",
                "FUN_080077b0",
                "FUN_08007648",
                "FUN_08008694",
                "FUN_0800863c",
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "write_bits_to_memory_08003f30"
        },
        "FUN_08007f78": {
            "renaming": {
                "FUN_08007f78": "subtract_four_from_parameter_08007f78",
                "param_1": "input_number",
                "return": "result"
            },
            "code": "\nint subtract_four_from_parameter_08007f78(int input_number)\n\n{\n  result input_number + -4;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f78",
            "calling": [
                "FUN_08007ff0",
                "FUN_08008020",
                "FUN_08007fa0"
            ],
            "imported": false,
            "current_name": "subtract_four_from_parameter_08007f78"
        },
        "FUN_08006b28": {
            "renaming": {
                "FUN_08006b28": "get_bit_value_08006b28",
                "param_1": "bit_position",
                "param_2": "data_pointer"
            },
            "code": "\nuint get_bit_value_08006b28(uint bit_position,int data_pointer)\n\n{\n  return *(uint *)(data_pointer + ((bit_position << 0x18) >> 0x1c) * 4) >> (bit_position & 0xf) & 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b28",
            "calling": [
                "FUN_080088e0",
                "FUN_08008a6c",
                "FUN_08008990",
                "FUN_08008a24"
            ],
            "imported": false,
            "current_name": "get_bit_value_08006b28"
        },
        "FUN_080085dc": {
            "renaming": {
                "FUN_080085dc": "check_flag_080085dc",
                "param_1": "flag_ptr",
                "uVar1": "result",
                "byte": "offset"
            },
            "code": "\nbool check_flag_080085dc(int flag_ptr)\n\n{\n  uint result;\n  \n  result = FUN_08006b1c(*(undefined4 *)(PTR_DAT_080085fc + (uint)*(offset *)(flag_ptr + 0x44) * 4));\n  return (result & 0x21) == 0x21;\n}\n\n",
            "called": [
                "FUN_08006b1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080085dc",
            "calling": [],
            "imported": false,
            "current_name": "check_flag_080085dc"
        },
        "FUN_08006b1c": {
            "renaming": {
                "FUN_08006b1c": "combine_bytes_08006b1c",
                "param_1": "input_address"
            },
            "code": "\nbyte combine_bytes_08006b1c(int input_address)\n\n{\n  return *(byte *)(input_address + 0x3a) | *(byte *)(input_address + 0x39);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b1c",
            "calling": [
                "FUN_080085dc",
                "FUN_080085b8"
            ],
            "imported": false,
            "current_name": "combine_bytes_08006b1c"
        },
        "FUN_08008ed6": {
            "renaming": {
                "FUN_08008ed6": "execute_command_08008ed6",
                "param_1": "command_address",
                "param_2": "command_data",
                "param_3": "command_length",
                "param_4": "command_parameter"
            },
            "code": "\nvoid execute_command_08008ed6(undefined4 *command_address,uint command_data,uint command_length,undefined4 command_parameter)\n\n{\n  if (command_length != 0) {\n    FUN_08008e7c(command_address,command_data,command_length & 0xff);\n    return;\n  }\n  (**(code **)*command_address)(command_address,command_data & 0xff,0,*(code **)*command_address,command_parameter);\n  return;\n}\n\n",
            "called": [
                "FUN_08008e7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ed6",
            "calling": [
                "FUN_08008eec"
            ],
            "imported": false,
            "current_name": "execute_command_08008ed6"
        },
        "FUN_0800a130": {
            "renaming": {
                "FUN_0800a130": "initialize_and_copy_0800a130",
                "param_1": "output_array",
                "param_2": "input_value_1",
                "param_3": "input_value_2",
                "param_4": "input_value_3",
                "puVar1": "pointer_to_initialized_memory",
                "iVar2": "return_value"
            },
            "code": "\nvoid initialize_and_copy_0800a130(int *output_array,undefined4 input_value_1,undefined4 input_value_2,undefined4 input_value_3)\n\n{\n  undefined *pointer_to_initialized_memory;\n  int return_value;\n  \n  pointer_to_initialized_memory = PTR_DAT_0800a150;\n  *(undefined4 *)PTR_DAT_0800a150 = 0;\n  return_value = FUN_08008854(input_value_1,input_value_2,input_value_3,input_value_3,input_value_3);\n  if ((return_value == -1) && (*(int *)pointer_to_initialized_memory != 0)) {\n    *output_array = *(int *)pointer_to_initialized_memory;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08008854"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a130",
            "calling": [
                "FUN_0800a042",
                "FUN_0800a07a"
            ],
            "imported": false,
            "current_name": "initialize_and_copy_0800a130"
        },
        "FUN_08008f3c": {
            "renaming": {
                "FUN_08008f3c": "count_bits_08008f3c",
                "param_1": "num",
                "cVar1": "num_bits"
            },
            "code": "\nchar count_bits_08008f3c(uint num)\n\n{\n  char num_bits;\n  \n  num_bits = '\\0';\n  for (; num != 1; num = num >> 1) {\n    num_bits = num_bits + '\\x01';\n  }\n  return num_bits;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f3c",
            "calling": [
                "FUN_08009094"
            ],
            "imported": false,
            "current_name": "count_bits_08008f3c"
        },
        "FUN_08002ef2": {
            "renaming": {
                "FUN_08002ef2": "copy_data_to_new_location_08002ef2",
                "param_1": "source_address",
                "param_2": "destination_address",
                "param_3": "data_type",
                "param_4": "data_length"
            },
            "code": "\nvoid copy_data_to_new_location_08002ef2(int source_address,undefined4 destination_address,undefined2 data_type,undefined4 data_length)\n\n{\n  FUN_08003158(source_address + 0x40,destination_address,data_type,data_length,data_length);\n  return;\n}\n\n",
            "called": [
                "FUN_08003158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ef2",
            "calling": [
                "FUN_080022f8",
                "FUN_08000488"
            ],
            "imported": false,
            "current_name": "copy_data_to_new_location_08002ef2"
        },
        "FUN_08007332": {
            "renaming": {
                "FUN_08007332": "find_character_by_id_08007332",
                "param_1": "char_id",
                "param_2": "character_list"
            },
            "code": "\nint find_character_by_id_08007332(int char_id,char *character_list)\n\n{\n  while( true ) {\n    if (*(int *)(character_list + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(character_list + 4) == char_id) break;\n    character_list = character_list + 0xc;\n  }\n  return (int)*character_list;\n}\n\n",
            "called": [
                "FUN_08007332"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007332",
            "calling": [
                "FUN_08007332",
                "FUN_0800734a"
            ],
            "imported": false,
            "current_name": "find_character_by_id_08007332"
        },
        "FUN_08006128": {
            "renaming": {
                "FUN_08006128": "improved_function_08006128",
                "param_1": "array_pointer"
            },
            "code": "\nundefined4 improved_function_08006128(undefined4 *array_pointer,undefined4 param_2,undefined4 param_3)\n\n{\n  if (*(char *)(array_pointer + 0xf) != '\\x01') {\n    *(undefined *)(array_pointer + 0xf) = 1;\n    *(undefined *)((int)array_pointer + 0x3d) = 2;\n    switch(param_3) {\n    case 0:\n      FUN_08005cec(*array_pointer);\n      break;\n    case 4:\n      FUN_080060c4(*array_pointer);\n      break;\n    case 8:\n      FUN_08005d48(*array_pointer);\n      break;\n    case 0xc:\n      FUN_08005dac(*array_pointer);\n    }\n    *(undefined *)((int)array_pointer + 0x3d) = 1;\n    *(undefined *)(array_pointer + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "called": [
                "FUN_08005dac",
                "FUN_080060c4",
                "FUN_08005cec",
                "FUN_08005d48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006128",
            "calling": [
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "improved_function_08006128"
        },
        "FUN_08003658": {
            "renaming": {
                "FUN_08003658": "initialize_memory_08003658",
                "iVar1": "index",
                "puVar2": "ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "\nvoid initialize_memory_08003658(void)\n\n{\n  int index;\n  undefined4 *ptr;\n  code *jump_table;\n  \n  for (index = 0; ptr = (undefined4 *)PTR_DAT_08003698,\n      PTR_DAT_08003690 + index < PTR_DAT_08003694; index = index + 4) {\n    *(undefined4 *)(PTR_DAT_08003690 + index) = *(undefined4 *)(DAT_0800368c + index);\n  }\n  for (; ptr < PTR_DAT_0800369c; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  FUN_080073ec();\n  FUN_08009148();\n  jump_table = (code *)0x800368a;\n  FUN_08008f1c();\n                    /* WARNING: Could not recover jumptable at 0x0800368a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "called": [
                "FUN_080073ec",
                "FUN_08009148",
                "FUN_08008f1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003658",
            "calling": [],
            "imported": false,
            "current_name": "initialize_memory_08003658"
        },
        "FUN_08009a80": {
            "renaming": {
                "FUN_08009a80": "check_data_validity_08009a80",
                "param_1": "output_status",
                "param_2": "input_data",
                "uVar1": "data_length",
                "uVar2": "data_flags",
                "iVar3": "data_ptr"
            },
            "code": "\nuint check_data_validity_08009a80(undefined4 *output_status,undefined4 *input_data)\n\n{\n  uint data_length;\n  ushort data_flags;\n  int data_ptr;\n  \n  data_ptr = *(int *)PTR_PTR_DAT_08009b4c;\n  if ((data_ptr != 0) && (*(int *)(data_ptr + 0x18) == 0)) {\n    FUN_08009d50(data_ptr);\n  }\n  if (input_data == (undefined4 *)PTR_DAT_08009b50) {\n    input_data = *(undefined4 **)(data_ptr + 4);\n  }\n  else if (input_data == (undefined4 *)PTR_DAT_08009b54) {\n    input_data = *(undefined4 **)(data_ptr + 8);\n  }\n  else if (input_data == (undefined4 *)PTR_DAT_08009b58) {\n    input_data = *(undefined4 **)(data_ptr + 0xc);\n  }\n  data_flags = *(ushort *)(input_data + 3);\n  data_length = (uint)data_flags;\n  if (-1 < (int)(data_length << 0x1c)) {\n    if (-1 < (int)(data_length << 0x1b)) {\n      *output_status = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(data_length << 0x1d) < 0) {\n      if ((undefined4 *)input_data[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input_data[0xd] != input_data + 0x11) {\n          FUN_080091d8(output_status);\n        }\n        input_data[0xd] = 0;\n      }\n      *(ushort *)(input_data + 3) = *(ushort *)(input_data + 3) & 0xffdb;\n      input_data[1] = 0;\n      *input_data = input_data[4];\n    }\n    *(ushort *)(input_data + 3) = *(ushort *)(input_data + 3) | 8;\n  }\n  if ((input_data[4] == 0) && ((*(ushort *)(input_data + 3) & 0x280) != 0x200)) {\n    FUN_08009eac(output_status,input_data);\n  }\n  data_flags = *(ushort *)(input_data + 3);\n  data_length = data_flags & 1;\n  if ((data_flags & 1) == 0) {\n    if (-1 < (int)((uint)data_flags << 0x1e)) {\n      data_length = input_data[5];\n    }\n    input_data[2] = data_length;\n  }\n  else {\n    input_data[2] = 0;\n    input_data[6] = -input_data[5];\n  }\n  if (input_data[4] == 0) {\n    data_flags = *(ushort *)(input_data + 3);\n    data_length = (int)(short)data_flags & 0x80;\n    if (data_length != 0) {\nLAB_08009ab0:\n      *(ushort *)(input_data + 3) = data_flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    data_length = 0;\n  }\n  return data_length;\n}\n\n",
            "called": [
                "FUN_08009eac",
                "FUN_08009d50",
                "FUN_080091d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009a80",
            "calling": [
                "FUN_0800937c",
                "FUN_0800932c"
            ],
            "imported": false,
            "current_name": "check_data_validity_08009a80"
        },
        "FUN_08004a74": {
            "renaming": {
                "FUN_08004a74": "do_nothing_08004a74"
            },
            "code": "\nvoid do_nothing_08004a74(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a74",
            "calling": [
                "FUN_08005084",
                "FUN_08004a76"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a74"
        },
        "FUN_080062f4": {
            "renaming": {
                "FUN_080062f4": "set_bits_and_clear_flags_080062f4",
                "param_1": "ptr_to_uint_ptr",
                "param_2": "bit_mask",
                "puVar1": "uint_ptr"
            },
            "code": "\nundefined4 set_bits_and_clear_flags_080062f4(uint **ptr_to_uint_ptr,undefined4 bit_mask)\n\n{\n  uint *uint_ptr;\n  \n  switch(bit_mask) {\n  case 0:\n    (*ptr_to_uint_ptr)[3] = (*ptr_to_uint_ptr)[3] & 0xfffffffd;\n    break;\n  case 4:\n    (*ptr_to_uint_ptr)[3] = (*ptr_to_uint_ptr)[3] & 0xfffffffb;\n    break;\n  case 8:\n    (*ptr_to_uint_ptr)[3] = (*ptr_to_uint_ptr)[3] & 0xfffffff7;\n    break;\n  case 0xc:\n    (*ptr_to_uint_ptr)[3] = (*ptr_to_uint_ptr)[3] & 0xffffffef;\n  }\n  FUN_08006262(*ptr_to_uint_ptr,bit_mask,0);\n  uint_ptr = *ptr_to_uint_ptr;\n  if (((uint_ptr == DAT_0800638c) && ((uint_ptr[8] & 0x1111) == 0)) && ((uint_ptr[8] & 0x444) == 0)) {\n    uint_ptr[0x11] = uint_ptr[0x11] & 0xffff7fff;\n  }\n  uint_ptr = *ptr_to_uint_ptr;\n  if (((uint_ptr[8] & 0x1111) == 0) && ((uint_ptr[8] & 0x444) == 0)) {\n    *uint_ptr = *uint_ptr & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080062f4",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": false,
            "current_name": "set_bits_and_clear_flags_080062f4"
        },
        "FUN_080073e8": {
            "renaming": {
                "FUN_080073e8": "wait_for_infinite_080073e8"
            },
            "code": "\nvoid wait_for_infinite_080073e8(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "FUN_080073e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073e8",
            "calling": [
                "FUN_080073e8",
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "wait_for_infinite_080073e8"
        },
        "FUN_08004a76": {
            "renaming": {
                "FUN_08004a76": "process_data_08004a76",
                "param_1": "data_array",
                "cVar1": "first_char",
                "puVar2": "ptr",
                "do_nothing_08004a74": "do_nothing"
            },
            "code": "\nundefined4 process_data_08004a76(int *data_array)\n\n{\n  char first_char;\n  undefined *ptr;\n  \n  first_char = *(char *)((int)data_array + 0x3d);\n  if (*(short *)((int)data_array + 0x2a) != 0) {\n    ptr = (undefined *)data_array[9];\n    data_array[9] = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*data_array + 0x10);\n    *(short *)((int)data_array + 0x2a) = *(short *)((int)data_array + 0x2a) + -1;\n    if ((*(short *)((int)data_array + 0x2a) == 0) && (first_char == '*')) {\n      *(uint *)(*data_array + 4) = *(uint *)(*data_array + 4) & 0xfffffbff;\n      data_array[0xc] = 0x22;\n      *(undefined *)((int)data_array + 0x3d) = 0x28;\n      do_nothing_08004a74();\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_08004a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a76",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_data_08004a76"
        },
        "FUN_0800877c": {
            "renaming": {
                "FUN_0800877c": "do_nothing_0800877c"
            },
            "code": "\nvoid do_nothing_0800877c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800877c",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "do_nothing_0800877c"
        },
        "FUN_0800267c": {
            "renaming": {
                "FUN_0800267c": "update_array_0800267c",
                "param_1": "byte_array",
                "param_2": "array_length",
                "iVar1": "index"
            },
            "code": "\nvoid update_array_0800267c(byte *byte_array,int array_length)\n\n{\n  int index;\n  \n  if (*byte_array < 0xc) {\n    index = (0x88 - (char)byte_array[1]) * 4;\n    if ((index - array_length == 0 || index < array_length) &&\n       (index = (600 - (char)byte_array[2]) * 4,\n       array_length == index || array_length + (600 - (char)byte_array[2]) * -4 < 0 != SBORROW4(array_length,index)))\n    {\n      index = array_length;\n    }\n    *(int *)(PTR_DAT_080026ac + (uint)*byte_array * 8 + 4) = index;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800267c",
            "calling": [
                "FUN_080026b0"
            ],
            "imported": false,
            "current_name": "update_array_0800267c"
        },
        "FUN_080047f4": {
            "renaming": {
                "FUN_080047f4": "FUNC_080047f4"
            },
            "code": "\nundefined4 FUNC_080047f4(uint **param_1,uint *param_2,uint *param_3,undefined2 param_4)\n\n{\n  undefined4 uVar1;\n  uint *puVar2;\n  int local_c;\n  \n  if (*(char *)((int)param_1 + 0x3d) == ' ') {\n    local_c = (uint)((ulonglong)DAT_080048c0 * (ulonglong)(*(uint *)PTR_DAT_080048bc >> 3) >> 0x28)\n              * 0x19;\n    do {\n      if (local_c == 0) {\n        param_1[0xc] = (uint *)0x0;\n        *(undefined *)((int)param_1 + 0x3d) = 0x20;\n        *(undefined *)(param_1 + 0xf) = 0;\n        return 3;\n      }\n      puVar2 = *param_1;\n      local_c = local_c + -1;\n    } while ((puVar2[6] & 2) != 0);\n    if (*(char *)(param_1 + 0xf) == '\\x01') {\n      uVar1 = 2;\n    }\n    else {\n      *(undefined *)(param_1 + 0xf) = 1;\n      if ((*puVar2 & 1) == 0) {\n        *puVar2 = *puVar2 | 1;\n      }\n      **param_1 = **param_1 & 0xfffff7ff;\n      *(undefined *)((int)param_1 + 0x3d) = 0x22;\n      *(undefined *)((int)param_1 + 0x3e) = 0x10;\n      uVar1 = 0;\n      param_1[0x10] = (uint *)0x0;\n      param_1[9] = param_3;\n      *(undefined2 *)((int)param_1 + 0x2a) = param_4;\n      param_1[0xb] = DAT_080048c4;\n      *(undefined2 *)(param_1 + 10) = *(undefined2 *)((int)param_1 + 0x2a);\n      param_1[0x11] = param_2;\n      **param_1 = **param_1 | 0x400;\n      **param_1 = **param_1 | 0x100;\n      *(undefined *)(param_1 + 0xf) = 0;\n      (*param_1)[1] = (*param_1)[1] | 0x700;\n    }\n  }\n  else {\n    uVar1 = 2;\n  }\n  return uVar1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080047f4",
            "calling": [
                "FUN_08007f0e"
            ],
            "imported": false,
            "current_name": "FUNC_080047f4"
        },
        "FUN_0800376c": {
            "renaming": {
                "FUN_0800376c": "calculate_status_0800376c",
                "param_1": "status_data",
                "param_2": "max_time",
                "iVar1": "start_time",
                "uVar2": "elapsed_time",
                "iVar3": "time_diff",
                "uVar4": "result",
                "puVar5": "status_flags",
                "uVar6": "clock_speed",
                "local_1c": "counter",
                "LAB_0800387e": "exit_label"
            },
            "code": "\nundefined4 calculate_status_0800376c(uint **status_data,uint max_time)\n\n{\n  int start_time;\n  uint elapsed_time;\n  int time_diff;\n  undefined4 result;\n  uint *status_flags;\n  uint clock_speed;\n  uint counter;\n  \n  counter = 0;\n  start_time = FUN_08003760();\n  status_flags = *status_data;\n  if ((status_flags[2] & 0x100) == 0) {\n    if (((status_flags[1] & 0x100) == 0) && ((status_flags[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**status_data & 2) != 0) goto exit_label;\n      } while ((max_time == 0xffffffff) ||\n              ((max_time != 0 && (time_diff = FUN_08003760(), (uint)(time_diff - start_time) <= max_time))));\n      status_data[10] = (uint *)((uint)status_data[10] | 4);\n      *(undefined *)(status_data + 9) = 0;\n      result = 3;\n    }\n    else {\n      clock_speed = *(uint *)PTR_DAT_080038c8;\n      elapsed_time = FUN_08005bb8(2);\n      status_flags = *status_data;\n      if (((status_flags[4] & DAT_080038cc) == 0) && ((status_flags[3] & DAT_080038cc + 0xdc000000) == 0)) {\n        if ((status_flags[4] & DAT_080038d0) == 0) {\n          if ((status_flags[3] & DAT_080038d4) == 0) {\n            time_diff = 0x14;\n          }\n          else {\n            time_diff = 0x29;\n          }\n        }\n        else {\n          time_diff = 0x29;\n        }\n      }\n      else if (((status_flags[4] & DAT_080038d0) == 0) && ((status_flags[3] & DAT_080038d0 + 0xee000000) == 0))\n      {\n        time_diff = 0x54;\n      }\n      else if ((DAT_080038d8 & status_flags[4]) == 0) {\n        if ((DAT_080038d8 & status_flags[3]) == 0) {\n          time_diff = 0x54;\n        }\n        else {\n          time_diff = 0xfc;\n        }\n      }\n      else {\n        time_diff = 0xfc;\n      }\n      elapsed_time = (clock_speed / elapsed_time) * time_diff;\n      for (; counter <= elapsed_time && elapsed_time - counter != 0; counter = counter + 1) {\n        if ((max_time != 0xffffffff) &&\n           ((max_time == 0 || (time_diff = FUN_08003760(), max_time < (uint)(time_diff - start_time))))) {\n          status_data[10] = (uint *)((uint)status_data[10] | 4);\n          *(undefined *)(status_data + 9) = 0;\n          return 3;\n        }\n      }\nexit_label:\n      **status_data = 0xffffffed;\n      status_data[10] = (uint *)((uint)status_data[10] | 0x200);\n      if (((*status_data)[2] & 0xe0000) == 0xe0000) {\n        if (status_data[3] == (uint *)0x0) {\n          status_data[10] = (uint *)((uint)status_data[10] & 0xfffffeff);\n          if (((uint)status_data[10] & 0x1000) == 0) {\n            status_data[10] = (uint *)((uint)status_data[10] | 1);\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    status_data[10] = (uint *)((uint)status_data[10] | 0x20);\n    *(undefined *)(status_data + 9) = 0;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_08003760",
                "FUN_08005bb8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800376c",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "calculate_status_0800376c"
        },
        "FUN_08003e20": {
            "renaming": {
                "FUN_08003e20": "process_data_08003e20",
                "param_1": "data_array",
                "iVar1": "result",
                "uVar2": "divisor",
                "iVar3": "start_time",
                "iVar4": "current_time",
                "uVar5": "total_time",
                "local_14": "loop_counter"
            },
            "code": "\nint process_data_08003e20(int *data_array)\n\n{\n  int result;\n  uint divisor;\n  int start_time;\n  int current_time;\n  uint total_time;\n  int loop_counter;\n  \n  if (*(char *)(data_array + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data_array + 9) = 1;\n  result = FUN_08003b8c();\n  if (result == 0) {\n    data_array[10] = data_array[10] & 0xffffeefdU | 2;\n    total_time = *(uint *)PTR_DAT_08003f08;\n    divisor = FUN_08005bb8(2);\n    for (loop_counter = total_time / divisor << 1; loop_counter != 0; loop_counter = loop_counter + -1) {\n    }\n    FUN_08003a20(data_array);\n    *(uint *)(*data_array + 8) = *(uint *)(*data_array + 8) | 8;\n    start_time = FUN_08003760();\n    while (current_time = *data_array, (*(uint *)(current_time + 8) & 8) != 0) {\n      current_time = FUN_08003760();\n      if (10 < (uint)(current_time - start_time)) {\n        data_array[10] = data_array[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data_array + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(current_time + 8) = *(uint *)(current_time + 8) | 4;\n    start_time = FUN_08003760();\n    while ((*(uint *)(*data_array + 8) & 4) != 0) {\n      current_time = FUN_08003760();\n      if (10 < (uint)(current_time - start_time)) {\n        data_array[10] = data_array[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data_array + 9) = 0;\n        return 1;\n      }\n    }\n    data_array[10] = data_array[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(data_array + 9) = 0;\n  return result;\n}\n\n",
            "called": [
                "FUN_08003760",
                "FUN_08003b8c",
                "FUN_08005bb8",
                "FUN_08003a20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e20",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "process_data_08003e20"
        },
        "FUN_08005a48": {
            "renaming": {
                "FUN_08005a48": "shift_uint_by_ptr_dat_08005a48",
                "uVar1": "result"
            },
            "code": "\nuint shift_uint_by_ptr_dat_08005a48(void)\n\n{\n  uint result;\n  \n  result = FUN_08005a1c();\n  return result >> PTR_DAT_08005a64[(uint)(*(int *)(DAT_08005a60 + 4) << 0x12) >> 0x1d];\n}\n\n",
            "called": [
                "FUN_08005a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a48",
            "calling": [
                "FUN_08005bb8",
                "FUN_08006538",
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "shift_uint_by_ptr_dat_08005a48"
        },
        "FUN_080033a8": {
            "renaming": {
                "FUN_080033a8": "copy_and_shift_bits_080033a8",
                "param_1": "input_byte_size",
                "param_2": "input_array_size",
                "param_3": "input_array",
                "bVar1": "current_byte",
                "iVar2": "output_index",
                "uVar3": "input_index"
            },
            "code": "\nvoid copy_and_shift_bits_080033a8(undefined4 input_byte_size,uint input_array_size,int input_array)\n\n{\n  byte current_byte;\n  int output_index;\n  uint input_index;\n  \n  output_index = 0;\n  for (input_index = 0; input_index < input_array_size; input_index = input_index + 2) {\n    current_byte = *(byte *)(input_array + input_index);\n    *(byte *)(input_array + output_index) = current_byte;\n    *(byte *)(input_array + output_index) = *(char *)(input_array + input_index + 1) << 7 | current_byte;\n    output_index = output_index + 1;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033a8",
            "calling": [
                "FUN_080033cc"
            ],
            "imported": false,
            "current_name": "copy_and_shift_bits_080033a8"
        },
        "FUN_08002c14": {
            "renaming": {
                "FUN_08002c14": "execute_08002c14_08002c14"
            },
            "code": "\nvoid execute_08002c14_08002c14(void)\n\n{\n  FUN_08002c00();\n  return;\n}\n\n",
            "called": [
                "FUN_08002c00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c14",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "execute_08002c14_08002c14"
        },
        "FUN_08008d18": {
            "renaming": {
                "FUN_08008d18": "set_value_at_offset_08008d18",
                "param_1": "base_address",
                "param_2": "index",
                "uVar1": "value"
            },
            "code": "\nvoid set_value_at_offset_08008d18(int base_address,uint index)\n\n{\n  undefined value;\n  \n  if (index < 0x3c) {\n    value = PTR_DAT_08008d2c[index];\n  }\n  else {\n    value = 0xff;\n  }\n  *(undefined *)(base_address + 300) = value;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d18",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_08008d18"
        },
        "FUN_08009084": {
            "renaming": {
                "FUN_08009084": "execute_function_or_fallback_08009084",
                "param_1": "function_pointer",
                "iVar1": "index"
            },
            "code": "\nvoid execute_function_or_fallback_08009084(int function_pointer)\n\n{\n  int index;\n  \n  if (*(int *)(function_pointer + 8) != 0) {\n    (**(code **)(function_pointer + 0xc))();\n    return;\n  }\n  FUN_0800a18c();\n  index = FUN_08008f3c();\n  if (*(int *)(PTR_DAT_080090b0 + index * 0x14 + 0xc) != 0) {\n    execute_function_or_fallback_08009084();\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800a18c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009084",
            "calling": [
                "FUN_08009094"
            ],
            "imported": false,
            "current_name": "execute_function_or_fallback_08009084"
        },
        "FUN_0800a020": {
            "renaming": {
                "FUN_0800a020": "update_value_0800a020",
                "param_1": "data_buffer",
                "param_2": "data_info",
                "iVar1": "offset",
                "uVar2": "new_value",
                "bVar3": "is_valid_offset"
            },
            "code": "\nvoid update_value_0800a020(undefined4 data_buffer,int data_info)\n\n{\n  int offset;\n  uint new_value;\n  bool is_valid_offset;\n  \n  offset = FUN_0800a168(data_buffer,(int)*(short *)(data_info + 0xe));\n  is_valid_offset = -1 < offset;\n  if (is_valid_offset) {\n    new_value = *(int *)(data_info + 0x54) + offset;\n  }\n  else {\n    new_value = *(ushort *)(data_info + 0xc) & 0xffffefff;\n  }\n  if (is_valid_offset) {\n    *(uint *)(data_info + 0x54) = new_value;\n  }\n  if (!is_valid_offset) {\n    *(short *)(data_info + 0xc) = (short)new_value;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800a168"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a020",
            "calling": [],
            "imported": false,
            "current_name": "update_value_0800a020"
        },
        "FUN_08005840": {
            "renaming": {
                "FUN_08005840": "calculate_uint_value_08005840",
                "local_1c": "some_value",
                "abStack_18": "byte_array",
                "uStack_14": "first_value",
                "uStack_10": "second_value",
                "uStack_c": "third_value",
                "uVar1": "result_uint",
                "uVar2": "some_uint"
            },
            "code": "\nuint calculate_uint_value_08005840(void)\n\n{\n  uint result_uint;\n  uint some_uint;\n  undefined2 some_value;\n  byte byte_array [4];\n  undefined4 first_value;\n  undefined4 second_value;\n  undefined4 third_value;\n  \n  third_value = *(undefined4 *)(PTR_DAT_0800589c + 8);\n  second_value = *(undefined4 *)(PTR_DAT_0800589c + 4);\n  first_value = *(undefined4 *)PTR_DAT_0800589c;\n  some_value = *(undefined2 *)(PTR_DAT_0800589c + 0x10);\n  some_uint = *(uint *)(DAT_080058a0 + 4);\n  result_uint = DAT_080058a8;\n  if ((some_uint & 0xc) == 8) {\n    if ((some_uint & 0x10000) == 0) {\n      result_uint = DAT_080058a4 * (uint)byte_array[(some_uint << 10) >> 0x1c];\n    }\n    else {\n      result_uint = (DAT_080058a8 * byte_array[(some_uint << 10) >> 0x1c]) /\n              (uint)*(byte *)((int)&some_value - ((*(int *)(DAT_080058a0 + 4) << 0xe) >> 0x1f));\n    }\n  }\n  return result_uint;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005840",
            "calling": [
                "FUN_080058d2"
            ],
            "imported": false,
            "current_name": "calculate_uint_value_08005840"
        },
        "FUN_08007f7c": {
            "renaming": {
                "FUN_08007f7c": "update_param_08007f7c",
                "param_1": "param1",
                "param_2": "param2"
            },
            "code": "\nvoid update_param_08007f7c(int param1,int param2)\n\n{\n  if (param1 != 0) {\n    if (param2 != 0) {\n      *(int *)(param1 + 0x60) = param2;\n      FUN_080049e0(param1 + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080049e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f7c",
            "calling": [
                "FUN_08002968"
            ],
            "imported": false,
            "current_name": "update_param_08007f7c"
        },
        "FUN_08006d80": {
            "renaming": {
                "FUN_08006d80": "parse_input_08006d80",
                "param_1": "input",
                "local_46": "result",
                "local_44": "input_length",
                "local_40": "valid_input",
                "local_3c": "valid_input2",
                "local_38": "input_buffer",
                "local_34": "unused1",
                "local_30": "unused2",
                "local_2c": "unused3",
                "local_28": "unused4",
                "local_24": "unused5",
                "local_20": "unused6",
                "local_1c": "unused7",
                "local_10": "unused8"
            },
            "code": "\nundefined2 parse_input_08006d80(undefined4 input)\n\n{\n  int iVar1;\n  uint uVar2;\n  undefined2 result;\n  uint input_length;\n  undefined4 valid_input;\n  undefined4 valid_input2;\n  int input_buffer;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  undefined4 unused4;\n  undefined4 unused5;\n  undefined4 unused6;\n  undefined4 unused7;\n  undefined4 unused8;\n  \n  FUN_080091c6(&input_buffer,0,0x30);\n  input_length = 0;\n  valid_input = 0;\n  valid_input2 = 0;\n  result = 0;\n  input_buffer = FUN_08007320(input,PTR_DAT_08006e60);\n  if (input_buffer == 0) {\n    result = 0;\n  }\n  else {\n    unused1 = 0;\n    unused2 = 0;\n    unused3 = 0;\n    unused5 = 0;\n    unused7 = 0xe0000;\n    unused8 = 0;\n    unused4 = 1;\n    unused6 = 0;\n    *PTR_DAT_08006e64 = (char)input;\n    iVar1 = FUN_08003bd8(&input_buffer);\n    if (iVar1 == 0) {\n      input_length = FUN_08006c60(input);\n      if (input_length < 0x12) {\n        valid_input = 1;\n        valid_input2 = 2;\n        iVar1 = FUN_080038e4(&input_buffer,&input_length);\n        if (iVar1 == 0) {\n          iVar1 = FUN_08003e20(&input_buffer);\n          if (iVar1 == 0) {\n            iVar1 = FUN_08003aa0(&input_buffer);\n            if (iVar1 == 0) {\n              iVar1 = FUN_0800376c(&input_buffer,10);\n              if (iVar1 == 0) {\n                uVar2 = FUN_08003a1c(&input_buffer);\n                if ((uVar2 & 0x200) != 0) {\n                  result = FUN_080038dc(&input_buffer);\n                }\n                iVar1 = FUN_08003de4(&input_buffer);\n                if (iVar1 == 0) {\n                  iVar1 = FUN_08003ce8(&input_buffer);\n                  if (iVar1 != 0) {\n                    result = 0;\n                  }\n                }\n                else {\n                  result = 0;\n                }\n              }\n              else {\n                result = 0;\n              }\n            }\n            else {\n              result = 0;\n            }\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_0800376c",
                "FUN_08003aa0",
                "FUN_08007320",
                "FUN_08003e20",
                "FUN_08003bd8",
                "FUN_080038dc",
                "FUN_08003de4",
                "FUN_080038e4",
                "FUN_080091c6",
                "FUN_08003a1c",
                "FUN_08006c60",
                "FUN_08003ce8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d80",
            "calling": [
                "FUN_08008880"
            ],
            "imported": false,
            "current_name": "parse_input_08006d80"
        },
        "FUN_08006c60": {
            "renaming": {
                "FUN_08006c60": "calculate_shifted_integer_08006c60",
                "param_1": "input_integer",
                "param_2": "unused_parameter",
                "param_3": "unused_parameter",
                "param_4": "unused_parameter",
                "iVar1": "shifted_integer",
                "uVar2": "result"
            },
            "code": "\nuint calculate_shifted_integer_08006c60(undefined4 input_integer,undefined4 unused_parameter,undefined4 unused_parameter,undefined4 unused_parameter)\n\n{\n  int shifted_integer;\n  uint result;\n  \n  shifted_integer = FUN_08007376(input_integer,PTR_DAT_08006c78,unused_parameter,unused_parameter,unused_parameter);\n  result = (uint)(shifted_integer << 0xc) >> 0x1b;\n  if (0x10 < result - 1) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_08007376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c60",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "calculate_shifted_integer_08006c60"
        },
        "FUN_08003306": {
            "renaming": {
                "FUN_08003306": "set_values_08003306",
                "param_1": "obj_ptr",
                "param_2": "value_type",
                "param_3": "value",
                "param_4": "extra_value"
            },
            "code": "\nvoid set_values_08003306(int obj_ptr,uint value_type,undefined4 value,undefined4 extra_value)\n\n{\n  if (value_type == 0xd0) {\n    *(undefined4 *)(obj_ptr + 0x58) = value;\n    *(undefined4 *)(obj_ptr + 0x28) = extra_value;\n    return;\n  }\n  if (0xd0 < value_type) {\n    if (value_type == 0xf4) {\n      *(undefined4 *)(obj_ptr + 0x5c) = value;\n      *(undefined4 *)(obj_ptr + 0x2c) = extra_value;\n      return;\n    }\n    if (value_type == 0xf5) {\n      *(undefined4 *)(obj_ptr + 0x60) = value;\n      *(undefined4 *)(obj_ptr + 0x30) = extra_value;\n    }\n    else if (value_type == 0xe0) {\n      *(undefined4 *)(obj_ptr + 0x4c) = value;\n      *(undefined4 *)(obj_ptr + 0x1c) = extra_value;\n      return;\n    }\n    return;\n  }\n  if (value_type == 0x90) {\n    *(undefined4 *)(obj_ptr + 0x50) = value;\n    *(undefined4 *)(obj_ptr + 0x20) = extra_value;\n    return;\n  }\n  if (value_type == 0xc0) {\n    *(undefined4 *)(obj_ptr + 0x54) = value;\n    *(undefined4 *)(obj_ptr + 0x24) = extra_value;\n    return;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003306",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_values_08003306"
        },
        "FUN_08002578": {
            "renaming": {
                "FUN_08002578": "initialize_application_08002578"
            },
            "code": "\nvoid initialize_application_08002578(void)\n\n{\n  FUN_080076e0();\n  return;\n}\n\n",
            "called": [
                "FUN_080076e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002578",
            "calling": [
                "FUN_08002644"
            ],
            "imported": false,
            "current_name": "initialize_application_08002578"
        },
        "FUN_08006932": {
            "renaming": {
                "FUN_08006932": "set_flag_08006932",
                "param_1": "input_array"
            },
            "code": "\nundefined4 set_flag_08006932(int *input_array)\n\n{\n  *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) & 0xffffffbf;\n  *(undefined *)((int)input_array + 0x39) = 0x20;\n  FUN_08008730();\n  return 0;\n}\n\n",
            "called": [
                "FUN_08008730"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006932",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "set_flag_08006932"
        },
        "FUN_080060c4": {
            "renaming": {
                "FUN_080060c4": "update_parameters_080060c4",
                "param_1": "parameter_address",
                "param_2": "parameter_values",
                "uVar1": "updated_value_1",
                "uVar2": "updated_value_2",
                "iVar3": "input_value",
                "param_2[2]": "shifted_value_1",
                "param_2[3]": "shifted_value_2",
                "param_2[5]": "shifted_value_3",
                "param_2[6]": "shifted_value_4"
            },
            "code": "\nvoid update_parameters_080060c4(int parameter_address,int *parameter_values)\n\n{\n  uint updated_value_1;\n  uint updated_value_2;\n  int input_value;\n  \n  *(uint *)(parameter_address + 0x20) = *(uint *)(parameter_address + 0x20) & 0xffffffef;\n  updated_value_2 = *(uint *)(parameter_address + 4);\n  input_value = *parameter_values;\n  updated_value_1 = *(uint *)(parameter_address + 0x20) & 0xffffffdf | shifted_value_1 << 4;\n  if (parameter_address == DAT_08006124) {\n    updated_value_1 = (updated_value_1 & 0xffffff7f | shifted_value_2 << 4) & 0xffffffbf;\n    updated_value_2 = updated_value_2 & 0xfffff3ff | shifted_value_3 << 2 | shifted_value_4 << 2;\n  }\n  *(uint *)(parameter_address + 4) = updated_value_2;\n  *(uint *)(parameter_address + 0x18) = *(uint *)(parameter_address + 0x18) & 0xffff8cff | input_value << 8;\n  *(int *)(parameter_address + 0x38) = parameter_values[1];\n  *(uint *)(parameter_address + 0x20) = updated_value_1;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060c4",
            "calling": [
                "FUN_08006186",
                "FUN_08006128"
            ],
            "imported": false,
            "current_name": "update_parameters_080060c4"
        },
        "FUN_08009eac": {
            "renaming": {
                "FUN_08009eac": "process_data_08009eac",
                "param_1": "data_ptr",
                "param_2": "data_array",
                "uVar1": "result",
                "iVar2": "status",
                "local_18": "data_len",
                "local_14": "data_ptr_array"
            },
            "code": "\nvoid process_data_08009eac(int data_ptr,int *data_array)\n\n{\n  ushort result;\n  int status;\n  int data_len;\n  int *data_ptr_array;\n  \n  if (-1 < (int)((uint)*(ushort *)(data_array + 3) << 0x1e)) {\n    data_len = data_ptr;\n    data_ptr_array = data_array;\n    result = FUN_08009e64(data_ptr,data_array,&data_len,&data_ptr_array);\n    status = FUN_08009270(data_ptr,data_len);\n    if (status != 0) {\n      *(undefined **)(data_ptr + 0x28) = PTR_LAB_08009cd0_1_08009f28;\n      *data_array = status;\n      *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) | 0x80;\n      data_array[4] = status;\n      data_array[5] = data_len;\n      if ((data_ptr_array != (int *)0x0) &&\n         (status = FUN_0800a110(data_ptr,(int)*(short *)((int)data_array + 0xe)), status != 0)) {\n        *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(data_array + 3) = result | *(ushort *)(data_array + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(data_array + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) & 0xfffc | 2;\n  }\n  *data_array = (int)data_array + 0x47;\n  data_array[4] = (int)data_array + 0x47;\n  data_array[5] = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_08009e64",
                "FUN_08009270",
                "FUN_0800a110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009eac",
            "calling": [
                "FUN_08009a80"
            ],
            "imported": false,
            "current_name": "process_data_08009eac"
        },
        "FUN_080072d8": {
            "renaming": {
                "FUN_080072d8": "improved_function_080072d8",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "condition",
                "param_4": "input_3"
            },
            "code": "\nvoid improved_function_080072d8(undefined4 input_1,undefined2 input_2,int condition,undefined4 input_3)\n\n{\n  if (condition == 0) {\n    FUNC_080042e2(input_1,input_2,0,input_3,input_3);\n    return;\n  }\n  FUNC_080042e2(input_1,input_2,1,input_3,input_3);\n  return;\n}\n\n",
            "called": [
                "FUN_080042e2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072d8",
            "calling": [
                "FUN_08008a24"
            ],
            "imported": false,
            "current_name": "improved_function_080072d8"
        },
        "FUN_080045c0": {
            "renaming": {
                "FUN_080045c0": "calculate_values_080045c0",
                "param_1": "parameters",
                "bVar1": "is_valid",
                "uVar2": "random_value",
                "puVar3": "parameter_1",
                "uVar4": "result"
            },
            "code": "\nundefined4 calculate_values_080045c0(uint **parameters)\n\n{\n  bool is_valid;\n  uint random_value;\n  uint *parameter_1;\n  uint result;\n  \n  if (parameters == (uint **)0x0) {\n    return 1;\n  }\n  if (*(char *)((int)parameters + 0x3d) == '\\0') {\n    *(undefined *)(parameters + 0xf) = 0;\n    do_nothing_080045bc();\n  }\n  *(undefined *)((int)parameters + 0x3d) = 0x24;\n  **parameters = **parameters & 0xfffffffe;\n  random_value = FUN_08005a28();\n  if (DAT_08004714 < parameters[1]) {\n    is_valid = random_value <= DAT_08004720;\n  }\n  else if (DAT_08004718 < random_value) {\n    is_valid = false;\n  }\n  else {\n    is_valid = true;\n  }\n  if (is_valid) {\n    return 1;\n  }\n  result = (uint)((ulonglong)DAT_0800471c * (ulonglong)random_value >> 0x32);\n  (*parameters)[1] = result;\n  if (DAT_08004714 < parameters[1]) {\n    result = (uint)((ulonglong)DAT_08004724 * (ulonglong)(result * 300) >> 0x26);\n  }\n  (*parameters)[8] = result + 1;\n  parameter_1 = parameters[1];\n  if (DAT_08004714 < parameter_1) {\n    if (parameters[2] == (uint *)0x0) {\n      result = count_leading_zeroes((random_value - 1) / (uint)((int)parameter_1 * 3) + 1 & 0xfff);\n    }\n    else {\n      result = count_leading_zeroes((random_value - 1) / (uint)((int)parameter_1 * 0x19) + 1 & 0xfff);\n    }\n    if (result >> 5 == 0) {\n      if (parameters[2] == (uint *)0x0) {\n        random_value = (random_value - 1) / (uint)((int)parameter_1 * 3) + 1 & 0xfff | 0x8000;\n      }\n      else {\n        random_value = (random_value - 1) / (uint)((int)parameter_1 * 0x19) + 1 & 0xfff | 0xc000;\n      }\n    }\n    else {\n      random_value = 1;\n    }\n  }\n  else {\n    random_value = (random_value - 1) / (uint)((int)parameter_1 << 1) + 1 & 0xfff;\n    if (random_value < 4) {\n      random_value = 4;\n    }\n  }\n  (*parameters)[7] = random_value;\n  **parameters = (uint)parameters[7] | (uint)parameters[8];\n  (*parameters)[2] = (uint)parameters[4] | (uint)parameters[3];\n  (*parameters)[3] = (uint)parameters[5] | (uint)parameters[6];\n  **parameters = **parameters | 1;\n  parameters[0x10] = (uint *)0x0;\n  *(undefined *)((int)parameters + 0x3d) = 0x20;\n  parameters[0xc] = (uint *)0x0;\n  *(undefined *)((int)parameters + 0x3e) = 0;\n  return 0;\n}\n\n",
            "called": [
                "FUN_08005a28",
                "FUN_080045bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045c0",
            "calling": [
                "FUN_080077b0"
            ],
            "imported": false,
            "current_name": "calculate_values_080045c0"
        },
        "FUN_08007e74": {
            "renaming": {
                "FUN_08007e74": "check_input_validity_08007e74",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "initial_value",
                "iVar2": "current_value",
                "uVar3": "difference",
                "iVar4": "result",
                "iVar5": "temp_value",
                "uVar6": "temp_param4"
            },
            "code": "\nint check_input_validity_08007e74(int input,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int initial_value;\n  int current_value;\n  uint difference;\n  int result;\n  int temp_value;\n  undefined4 temp_param4;\n  \n  temp_param4 = param4;\n  initial_value = FUN_08003760();\n  difference = 0;\n  result = 2;\n  do {\n    temp_value = input + 4;\n    current_value = FUN_08004728(temp_value,param2,param3,param4,temp_param4);\n    if (current_value == 0) {\n      result = 0;\n      while ((current_value = FUN_0800542a(temp_value), current_value != 0x20 && (result == 0))) {\n        current_value = FUN_08003760();\n        difference = current_value - initial_value;\n        if (difference < 0x65) {\n          current_value = FUN_08005430(temp_value);\n          if (current_value != 0) {\n            result = 2;\n          }\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    current_value = FUN_08005430(temp_value);\n  } while ((current_value == 4) && (difference < 100));\n  return result;\n}\n\n",
            "called": [
                "FUN_08004728",
                "FUN_08003760",
                "FUN_08005430",
                "FUN_0800542a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e74",
            "calling": [
                "FUN_08002a58"
            ],
            "imported": false,
            "current_name": "check_input_validity_08007e74"
        },
        "FUN_08002efe": {
            "renaming": {
                "FUN_08002efe": "improved_function_08002efe",
                "param_1": "input_value",
                "param_2": "unused_param",
                "param_3": "unused_param_2",
                "param_4": "unused_param_3"
            },
            "code": "\nvoid improved_function_08002efe(int input_value,undefined4 unused_param,undefined2 unused_param_2,undefined4 unused_param_3)\n\n{\n  FUN_0800319e(input_value + 0x40,unused_param,unused_param_2,unused_param_3,unused_param_3);\n  return;\n}\n\n",
            "called": [
                "FUN_0800319e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efe",
            "calling": [
                "FUN_08000be8"
            ],
            "imported": false,
            "current_name": "improved_function_08002efe"
        },
        "FUN_08002f84": {
            "renaming": {
                "FUN_08002f84": "store_value_if_param2_is_255_08002f84",
                "param_1": "unused_param",
                "param_2": "value_to_check",
                "param_3": "value_to_store"
            },
            "code": "\nvoid store_value_if_param2_is_255_08002f84(undefined4 unused_param,int value_to_check,undefined4 value_to_store)\n\n{\n  if (value_to_check == 0xff) {\n    *(undefined4 *)PTR_DAT_08002f90 = value_to_store;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f84",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "store_value_if_param2_is_255_08002f84"
        },
        "FUN_08002ddc": {
            "renaming": {
                "FUN_08002ddc": "initialize_values_08002ddc",
                "param_1": "start_address",
                "param_2": "unused_param_1",
                "param_3": "unused_param_2",
                "param_4": "value_to_set"
            },
            "code": "\nvoid initialize_values_08002ddc(int start_address,undefined4 unused_param_1,undefined4 unused_param_2,undefined4 value_to_set)\n\n{\n  FUN_0800322c(start_address + 0x40,2,5,value_to_set,value_to_set);\n  return;\n}\n\n",
            "called": [
                "FUN_0800322c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ddc",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": false,
            "current_name": "initialize_values_08002ddc"
        },
        "FUN_08009094": {
            "renaming": {
                "FUN_08009094": "check_and_call_function_08009094",
                "iVar1": "result"
            },
            "code": "\nvoid check_and_call_function_08009094(void)\n\n{\n  int result;\n  \n  result = FUN_08008f3c();\n  if (*(int *)(PTR_DAT_080090b0 + result * 0x14 + 0xc) != 0) {\n    FUN_08009084();\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08009084",
                "FUN_08008f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009094",
            "calling": [
                "FUN_080042f0"
            ],
            "imported": false,
            "current_name": "check_and_call_function_08009094"
        },
        "FUN_08009f2c": {
            "renaming": {
                "FUN_08009f2c": "find_character_08009f2c",
                "param_1": "string",
                "param_2": "character",
                "param_3": "string_length",
                "pcVar1": "current_character",
                "pcVar2": "previous_character"
            },
            "code": "\nchar * find_character_08009f2c(char *string,char character,int string_length)\n\n{\n  char *current_character;\n  char *previous_character;\n  \n  current_character = string;\n  do {\n    previous_character = current_character;\n    if (previous_character == string + string_length) {\n      return (char *)0x0;\n    }\n    current_character = previous_character + 1;\n  } while (*previous_character != character);\n  return previous_character;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f2c",
            "calling": [
                "FUN_08009698",
                "FUN_0800937c"
            ],
            "imported": false,
            "current_name": "find_character_08009f2c"
        },
        "FUN_0800a154": {
            "renaming": {
                "FUN_0800a154": "calculate_offset_0800a154",
                "param_1": "undefined_param",
                "param_2": "offset",
                "iVar1": "new_offset"
            },
            "code": "\nint calculate_offset_0800a154(undefined4 undefined_param,int offset)\n\n{\n  int new_offset;\n  \n  new_offset = *(int *)(offset + -4) + -4;\n  if (*(int *)(offset + -4) < 0) {\n    new_offset = new_offset + *(int *)(offset + new_offset);\n  }\n  return new_offset;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a154",
            "calling": [
                "FUN_08009908"
            ],
            "imported": false,
            "current_name": "calculate_offset_0800a154"
        },
        "FUN_08002580": {
            "renaming": {
                "FUN_08002580": "increment_byte_and_set_08002580",
                "param_1": "output_byte",
                "bVar1": "byte_value"
            },
            "code": "\nvoid increment_byte_and_set_08002580(byte *output_byte)\n\n{\n  byte byte_value;\n  \n  byte_value = *PTR_DAT_080025a4;\n  if (0xb < byte_value) {\n    *output_byte = 0xff;\n    return;\n  }\n  *PTR_DAT_080025a4 = byte_value + 1;\n  *output_byte = byte_value;\n  *(undefined4 *)(PTR_DAT_080025a8 + (uint)byte_value * 8 + 4) = 0x5dc;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002580",
            "calling": [
                "FUN_080004d4"
            ],
            "imported": false,
            "current_name": "increment_byte_and_set_08002580"
        },
        "FUN_08007f8e": {
            "renaming": {
                "FUN_08007f8e": "update_param_with_value_08007f8e",
                "param_1": "param_pointer",
                "param_2": "new_value"
            },
            "code": "\nvoid update_param_with_value_08007f8e(int param_pointer,int new_value)\n\n{\n  if (param_pointer != 0) {\n    if (new_value != 0) {\n      *(int *)(param_pointer + 100) = new_value;\n      FUN_080049e0(param_pointer + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080049e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f8e",
            "calling": [
                "FUN_08002968"
            ],
            "imported": false,
            "current_name": "update_param_with_value_08007f8e"
        },
        "FUN_08006b3e": {
            "renaming": {
                "FUN_08006b3e": "set_bit_08006b3e",
                "param_1": "bit_position",
                "param_2": "array_address",
                "uVar1": "shifted_position"
            },
            "code": "\nvoid set_bit_08006b3e(uint bit_position,int array_address)\n\n{\n  uint shifted_position;\n  \n  shifted_position = (bit_position << 0x18) >> 0x1c;\n  *(uint *)(array_address + shifted_position * 4) = *(uint *)(array_address + shifted_position * 4) | 1 << (bit_position & 0xf);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b3e",
            "calling": [
                "FUN_080088e0",
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "set_bit_08006b3e"
        },
        "FUN_08006262": {
            "renaming": {
                "FUN_08006262": "update_bits_at_position_08006262",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "new_value"
            },
            "code": "\nvoid update_bits_at_position_08006262(int base_address,uint bit_position,int new_value)\n\n{\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & ~(1 << (bit_position & 0xff));\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) | new_value << (bit_position & 0xff);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006262",
            "calling": [
                "FUN_08006280",
                "FUN_080062f4",
                "FUN_08006390",
                "FUN_080063c0"
            ],
            "imported": false,
            "current_name": "update_bits_at_position_08006262"
        },
        "FUN_08007110": {
            "renaming": {
                "FUN_08007110": "initialize_application_08007110"
            },
            "code": "\nvoid initialize_application_08007110(void)\n\n{\n  FUN_080074e0();\n  return;\n}\n\n",
            "called": [
                "FUN_080074e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007110",
            "calling": [
                "FUN_08005e2e"
            ],
            "imported": false,
            "current_name": "initialize_application_08007110"
        },
        "FUN_08007594": {
            "renaming": {
                "FUN_08007594": "check_parameter_value_08007594",
                "param_1": "parameter_value"
            },
            "code": "\nundefined4 check_parameter_value_08007594(uint parameter_value)\n\n{\n  if (parameter_value == 0xffffffff) {\n    return 0;\n  }\n  if (parameter_value == DAT_080075d0) {\n    return 1;\n  }\n  if (DAT_080075d0 < parameter_value) {\n    if (parameter_value == DAT_080075d4) {\n      return 1;\n    }\n    if (parameter_value == DAT_080075d4 + 0x12400) {\n      return 2;\n    }\n  }\n  else if (parameter_value == 0x40000000) {\n    return 1;\n  }\n  FUN_080098d8(PTR_s_TIM__Unknown_timer_instance_080075d8);\n  return 0;\n}\n\n",
            "called": [
                "FUN_080098d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007594",
            "calling": [
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "check_parameter_value_08007594"
        },
        "FUN_080073ec": {
            "renaming": {
                "FUN_080073ec": "update_flags_and_values_080073ec",
                "puVar1": "pointer_to_flags_and_values"
            },
            "code": "\nvoid update_flags_and_values_080073ec(void)\n\n{\n  uint *pointer_to_flags_and_values;\n  \n  pointer_to_flags_and_values = DAT_0800742c;\n  *DAT_0800742c = *DAT_0800742c | 1;\n  pointer_to_flags_and_values[1] = DAT_08007430 & pointer_to_flags_and_values[1];\n  *pointer_to_flags_and_values = *pointer_to_flags_and_values & 0xfef6ffff;\n  *pointer_to_flags_and_values = *pointer_to_flags_and_values & 0xfffbffff;\n  pointer_to_flags_and_values[1] = pointer_to_flags_and_values[1] & 0xff80ffff;\n  pointer_to_flags_and_values[2] = 0x9f0000;\n  *(undefined4 *)(DAT_08007434 + 8) = 0x8000000;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073ec",
            "calling": [
                "FUN_08003658"
            ],
            "imported": false,
            "current_name": "update_flags_and_values_080073ec"
        },
        "FUN_08008ef4": {
            "renaming": {
                "FUN_08008ef4": "calculate_new_value_08008ef4",
                "param_1": "start_value",
                "param_2": "previous_value",
                "param_3": "final_value",
                "param_4": "min_value",
                "param_5": "max_value",
                "uint": "unsigned_integer",
                "return": "new_value"
            },
            "code": "\nint calculate_new_value_08008ef4(int start_value,int previous_value,int final_value,int min_value,int max_value)\n\n{\n  new_value (unsigned_integer)((max_value - min_value) * (start_value - previous_value)) / (unsigned_integer)(final_value - previous_value) + min_value;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ef4",
            "calling": [
                "FUN_080026b0"
            ],
            "imported": false,
            "current_name": "calculate_new_value_08008ef4"
        },
        "FUN_08002df6": {
            "renaming": {
                "FUN_08002df6": "improved_function_08002df6",
                "param_1": "input_parameter",
                "puVar1": "ptr_to_data"
            },
            "code": "\nvoid improved_function_08002df6(int input_parameter)\n\n{\n  undefined *ptr_to_data;\n  \n  if (*(byte *)(input_parameter + 0xc4) == 0) {\n    return;\n  }\n  ptr_to_data = *(undefined **)(input_parameter + 200);\n  FUN_080031ce(input_parameter + 0x40,*ptr_to_data,ptr_to_data[1],*(byte *)(input_parameter + 0xc4) - 2,ptr_to_data + 2);\n  return;\n}\n\n",
            "called": [
                "FUN_080031ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002df6",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": false,
            "current_name": "improved_function_08002df6"
        },
        "FUN_080045bc": {
            "renaming": {
                "FUN_080045bc": "do_nothing_080045bc"
            },
            "code": "\nvoid do_nothing_080045bc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045bc",
            "calling": [
                "FUN_080045c0"
            ],
            "imported": false,
            "current_name": "do_nothing_080045bc"
        },
        "FUN_08007118": {
            "renaming": {
                "FUN_08007118": "process_data_08007118",
                "param_1": "input_data",
                "param_2": "divisor",
                "local_74": "var_1",
                "local_70": "var_2",
                "local_6c": "var_3",
                "local_68": "var_4",
                "local_64": "var_5",
                "local_60": "var_6",
                "local_5c": "var_7",
                "local_58": "data_buffer",
                "local_54": "var_8",
                "local_50": "var_9",
                "local_4c": "var_10",
                "local_48": "var_11",
                "local_44": "var_12",
                "local_1b": "var_13"
            },
            "code": "\nvoid process_data_08007118(undefined4 input_data,uint divisor,int param_3,undefined4 param_4,char param_5)\n\n{\n  uint uVar1;\n  int iVar2;\n  int iVar3;\n  undefined4 var_1;\n  undefined4 var_2;\n  undefined4 var_3;\n  undefined4 var_4;\n  undefined4 var_5;\n  undefined4 var_6;\n  undefined4 var_7;\n  int data_buffer;\n  int var_8;\n  undefined4 var_9;\n  int var_10;\n  undefined4 var_11;\n  undefined4 var_12;\n  undefined var_13;\n  \n  FUN_080091c6(&data_buffer,0,0x40);\n  var_1 = 0;\n  var_2 = 0;\n  var_3 = 0;\n  var_4 = 0;\n  var_5 = 0;\n  var_6 = 0;\n  var_7 = 0;\n  data_buffer = FUN_08007320(input_data,PTR_DAT_080071dc);\n  if (data_buffer != 0) {\n    uVar1 = FUN_080075dc();\n    var_8 = uVar1 / divisor - 1;\n    var_10 = param_3 + -1;\n    var_11 = 0;\n    var_9 = 0;\n    var_12 = 0;\n    var_13 = 0;\n    if (param_5 == '\\x01') {\n      *PTR_DAT_080071e0 = (char)input_data;\n      iVar2 = FUN_08006092(&data_buffer);\n      if (iVar2 != 0) {\n        return;\n      }\n    }\n    iVar2 = FUN_08006c7c(input_data);\n    if ((((iVar2 == 0) || (iVar2 == 4)) || (iVar2 == 8)) || ((iVar2 == 0xc || (iVar2 == 0x18)))) {\n      var_1 = 0x60;\n      var_3 = 0;\n      var_5 = 0;\n      var_4 = 0;\n      var_7 = 0;\n      var_6 = 0;\n      var_2 = param_4;\n      iVar3 = FUN_08006186(&data_buffer,&var_1,iVar2);\n      if (iVar3 == 0) {\n        uVar1 = FUN_08007376(input_data,PTR_DAT_080071dc);\n        if ((uVar1 & 0x100000) == 0) {\n          FUN_08006390(&data_buffer,iVar2);\n        }\n        else {\n          FUN_0800643c(&data_buffer,iVar2);\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007376",
                "FUN_08007320",
                "FUN_08006186",
                "FUN_0800643c",
                "FUN_08006390",
                "FUN_08006c7c",
                "FUN_080091c6",
                "FUN_08006092",
                "FUN_080075dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007118",
            "calling": [
                "FUN_080088e0"
            ],
            "imported": false,
            "current_name": "process_data_08007118"
        },
        "FUN_08009fe8": {
            "renaming": {
                "FUN_08009fe8": "execute_function_08009fe8",
                "param_1": "function_index",
                "puVar1": "undefined_pointer",
                "uVar2": "result",
                "piVar3": "function_pointers",
                "iVar4": "index",
                "pcVar5": "function_pointer",
                "unaff_r4": "unused_register_4",
                "unaff_r5": "unused_register_5",
                "in_lr": "unused_register_lr",
                "puVar6": "function_pointers_ptr"
            },
            "code": "\nint execute_function_08009fe8(uint function_index)\n\n{\n  undefined *undefined_pointer;\n  undefined4 result;\n  int *function_pointers;\n  int index;\n  code *function_pointer;\n  undefined4 unused_register_4;\n  undefined4 unused_register_5;\n  undefined4 unused_register_lr;\n  undefined *function_pointers_ptr;\n  \n  function_pointers = *(int **)PTR_PTR_DAT_08009ff4;\n  if (0x1f < function_index) {\n    *function_pointers = 0x16;\n    return -1;\n  }\n  index = function_pointers[0x11];\n  if ((index != 0) && (function_pointer = *(code **)(index + function_index * 4), function_pointer != (code *)0x0)) {\n    if (function_pointer != (code *)0x1) {\n      if (function_pointer == (code *)0xffffffff) {\n        *function_pointers = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(index + function_index * 4) = 0;\n      (*function_pointer)(function_index);\n    }\n    return 0;\n  }\n  function_pointers_ptr = PTR_PTR_DAT_08009ff4;\n  result = thunk_FUN_0800887c(function_pointers);\n  undefined_pointer = PTR_DAT_0800a018;\n  *(undefined4 *)PTR_DAT_0800a018 = 0;\n  index = FUN_0800886c(result,function_index,function_index,0,function_pointers_ptr,unused_register_4,unused_register_5,unused_register_lr);\n  if ((index == -1) && (*(int *)undefined_pointer != 0)) {\n    *function_pointers = *(int *)undefined_pointer;\n  }\n  return index;\n}\n\n",
            "called": [
                "FUN_0800886c",
                "thunk_FUN_0800887c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009fe8",
            "calling": [
                "FUN_08009b5c"
            ],
            "imported": false,
            "current_name": "execute_function_08009fe8"
        },
        "FUN_08002c1e": {
            "renaming": {
                "FUN_08002c1e": "initialize_data_08002c1e",
                "param_1": "data_size",
                "param_2": "max_data_size",
                "param_3": "data_ptr",
                "param_4": "data_buffer"
            },
            "code": "\nvoid initialize_data_08002c1e(undefined4 data_size,undefined4 max_data_size,undefined4 data_ptr,undefined4 data_buffer)\n\n{\n  FUN_08002948(1,0xffff,data_ptr,data_buffer,data_buffer);\n  return;\n}\n\n",
            "called": [
                "FUN_08002948"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c1e",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_08002c1e"
        },
        "FUN_08005a68": {
            "renaming": {
                "FUN_08005a68": "initialize_params_08005a68",
                "param_1": "output_params",
                "param_2": "input_params",
                "iVar1": "data_address"
            },
            "code": "\nvoid initialize_params_08005a68(undefined4 *output_params,uint *input_params)\n\n{\n  int data_address;\n  \n  *output_params = 0xf;\n  data_address = DAT_08005a9c;\n  output_params[1] = *(uint *)(DAT_08005a9c + 4) & 3;\n  output_params[2] = *(uint *)(data_address + 4) & 0xf0;\n  output_params[3] = *(uint *)(data_address + 4) & 0x700;\n  output_params[4] = *(uint *)(data_address + 4) >> 3 & 0x700;\n  *input_params = *DAT_08005aa0 & 7;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "initialize_params_08005a68"
        },
        "FUN_08008f78": {
            "renaming": {
                "FUN_08008f78": "initialize_data_08008f78",
                "param_1": "is_initialization_needed",
                "param_2": "initialization_value",
                "param_3": "unused_parameter_1",
                "param_4": "unused_parameter_2",
                "puVar1": "data_pointer"
            },
            "code": "\nvoid initialize_data_08008f78(int is_initialization_needed,int initialization_value,undefined4 unused_parameter_1,undefined4 unused_parameter_2)\n\n{\n  undefined *data_pointer;\n  \n  data_pointer = PTR_DAT_08009018;\n  if (is_initialization_needed != 1) {\n    return;\n  }\n  if (initialization_value == 0xffff) {\n    *PTR_DAT_08009018 = 6;\n    *(undefined4 *)(data_pointer + 0xc) = 0;\n    data_pointer[0x14] = 7;\n    *(undefined4 *)(data_pointer + 0x20) = 0;\n    data_pointer[0x28] = 8;\n    *(undefined4 *)(data_pointer + 0x34) = 0;\n    data_pointer[0x3c] = 9;\n    *(undefined4 *)(data_pointer + 0x48) = 0;\n    data_pointer[0x50] = 10;\n    *(undefined4 *)(data_pointer + 0x5c) = 0;\n    data_pointer[100] = 0x17;\n    *(undefined4 *)(data_pointer + 0x70) = 0;\n    data_pointer[0x78] = 0x17;\n    *(undefined4 *)(data_pointer + 0x84) = 0;\n    data_pointer[0x8c] = 0x17;\n    *(undefined4 *)(data_pointer + 0x98) = 0;\n    data_pointer[0xa0] = 0x17;\n    *(undefined4 *)(data_pointer + 0xac) = 0;\n    data_pointer[0xb4] = 0x17;\n    *(undefined4 *)(data_pointer + 0xc0) = 0;\n    data_pointer[200] = 0x28;\n    *(undefined4 *)(data_pointer + 0xd4) = 0;\n    data_pointer[0xdc] = 0x28;\n    *(undefined4 *)(data_pointer + 0xe8) = 0;\n    data_pointer[0xf0] = 0x28;\n    *(undefined4 *)(data_pointer + 0xfc) = 0;\n    data_pointer[0x104] = 0x28;\n    *(undefined4 *)(data_pointer + 0x110) = 0;\n    data_pointer[0x118] = 0x28;\n    *(undefined4 *)(data_pointer + 0x124) = 0;\n    data_pointer[300] = 0x28;\n    *(undefined4 *)(data_pointer + 0x138) = 0;\n    FUN_080090c2(0,PTR_LAB_08008f50_1_08009020,PTR_DAT_0800901c,data_pointer,unused_parameter_2);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080090c2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f78",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_08008f78"
        },
        "FUN_08008d30": {
            "renaming": {
                "FUN_08008d30": "initialize_pointer_08008d30",
                "param_1": "pointer",
                "param_2": "value",
                "param_3": "size",
                "param_4": "unknown"
            },
            "code": "\nundefined4 *\ninitialize_pointer_08008d30(undefined4 *pointer,undefined4 value,undefined4 size,undefined4 unknown)\n\n{\n  undefined uVar1;\n  \n  pointer[1] = 0;\n  pointer[2] = 1000;\n  *pointer = PTR_PTR_LAB_08008ba4_1_08008d7c;\n  if (pointer == (undefined4 *)PTR_DAT_08008d80) {\n    FUN_08008d00(pointer,0,size,PTR_DAT_08008d80,unknown);\n    FUN_08008d18(pointer,1);\n  }\n  else {\n    uVar1 = FUN_0800734a(value,PTR_DAT_08008d84);\n    *(undefined *)((int)pointer + 0x12d) = uVar1;\n    uVar1 = FUN_0800734a(value,PTR_DAT_08008d88);\n    *(undefined *)(pointer + 0x4b) = uVar1;\n  }\n  FUN_08008c20(pointer);\n  return pointer;\n}\n\n",
            "called": [
                "FUN_08008d00",
                "FUN_0800734a",
                "FUN_08008c20",
                "FUN_08008d18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d30",
            "calling": [
                "FUN_08008d8c"
            ],
            "imported": false,
            "current_name": "initialize_pointer_08008d30"
        },
        "FUN_08002f94": {
            "renaming": {
                "FUN_08002f94": "store_param_to_pointer_08002f94",
                "param_1": "unused_param",
                "param_2": "unused_param",
                "param_3": "value_to_store"
            },
            "code": "\nvoid store_param_to_pointer_08002f94(undefined4 unused_param,undefined4 unused_param,undefined4 value_to_store)\n\n{\n  *(undefined4 *)PTR_DAT_08002f9c = value_to_store;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f94",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "store_param_to_pointer_08002f94"
        },
        "FUN_0800734a": {
            "renaming": {
                "FUN_0800734a": "check_parameter_0800734a",
                "param_1": "input_param",
                "uVar1": "result"
            },
            "code": "\nundefined4 check_parameter_0800734a(int input_param)\n\n{\n  undefined4 result;\n  \n  if (input_param != 0) {\n    result = FUN_08007332();\n    return result;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "FUN_08007332"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800734a",
            "calling": [
                "FUN_080084b0",
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "check_parameter_0800734a"
        },
        "FUN_08000aec": {
            "renaming": {
                "FUN_08000aec": "initialize_and_reset_08000aec",
                "bVar1": "is_condition_met",
                "iVar2": "result",
                "uVar3": "counter"
            },
            "code": "\nvoid initialize_and_reset_08000aec(void)\n\n{\n  bool is_condition_met;\n  int result;\n  uint counter;\n  \n  *PTR_DAT_08000bc0 = 1;\n  if (*PTR_DAT_08000bc4 != '\\0') {\n    FUN_080005e0();\n  }\n  for (counter = 0; counter < 5; counter = counter + 1 & 0xff) {\n    PTR_DAT_08000bc8[counter] = 0;\n    PTR_DAT_08000bcc[counter] = 0;\n    PTR_DAT_08000bd0[counter] = 0;\n  }\n  for (counter = 0; counter < 0x3c; counter = counter + 1 & 0xff) {\n    if ((counter - 0x2e & 0xff) < 0xe) {\n      if (counter < 0x3c) {\n        result = (int)(char)PTR_DAT_08000bd4[counter];\n      }\n      else {\n        result = -1;\n      }\n      result = FUN_080036ac(result);\n      if (result == 0) {\n        is_condition_met = false;\n      }\n      else {\n        if (counter < 0x3c) {\n          result = (int)(char)PTR_DAT_08000bd4[counter];\n        }\n        else {\n          result = -1;\n        }\n        result = FUN_080036ac(result);\n        if (result == 1) {\n          is_condition_met = false;\n        }\n        else {\n          is_condition_met = true;\n        }\n      }\n    }\n    else {\n      is_condition_met = false;\n    }\n    if (is_condition_met) {\n      FUN_080005f8(counter,2);\n    }\n    else {\n      if (counter < 0x3c) {\n        if (((PTR_DAT_08000bd4[counter] != -1) && (result = FUN_080036ac(), result != 0)) &&\n           (result = FUN_080036ac((int)(char)PTR_DAT_08000bd4[counter]), result != 1)) {\n          is_condition_met = true;\n        }\n      }\n      if (is_condition_met) {\n        FUN_080005f8(counter,1);\n      }\n    }\n    PTR_DAT_08000bd8[counter] = 0xff;\n  }\n  *(undefined4 *)PTR_DAT_08000bdc = 0;\n  *PTR_DAT_08000be0 = 0;\n  *PTR_DAT_08000be4 = 0;\n  *PTR_DAT_08000bc0 = 0;\n  return;\n}\n\n",
            "called": [
                "FUN_080036ac",
                "FUN_080005e0",
                "FUN_080005f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aec",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "initialize_and_reset_08000aec"
        },
        "FUN_08008eec": {
            "renaming": {
                "FUN_08008eec": "run_startup_routines_08008eec"
            },
            "code": "\nvoid run_startup_routines_08008eec(void)\n\n{\n  FUN_08008ed6();\n  return;\n}\n\n",
            "called": [
                "FUN_08008ed6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008eec",
            "calling": [],
            "imported": false,
            "current_name": "run_startup_routines_08008eec"
        },
        "FUN_080068d6": {
            "renaming": {
                "FUN_080068d6": "validate_input_080068d6",
                "param_1": "input_array",
                "param_2": "input_length",
                "param_3": "input_value",
                "param_1[10]": "input_array[10]",
                "param_1[0xf]": "input_array[15]"
            },
            "code": "\nundefined4 validate_input_080068d6(int *input_array,int input_length,int input_value)\n\n{\n  if (*(char *)((int)input_array + 0x3a) != ' ') {\n    return 2;\n  }\n  if (input_length == 0) {\n    return 1;\n  }\n  if (input_value == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    input_array[10] = input_length;\n    *(short *)(input_array + 0xb) = (short)input_value;\n    *(short *)((int)input_array + 0x2e) = (short)input_value;\n    input_array[15] = 0;\n    *(undefined *)((int)input_array + 0x3a) = 0x22;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x100;\n    *(uint *)(*input_array + 0x14) = *(uint *)(*input_array + 0x14) | 1;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080068d6",
            "calling": [
                "FUN_0800863c",
                "FUN_08008600"
            ],
            "imported": false,
            "current_name": "validate_input_080068d6"
        },
        "FUN_080032a2": {
            "renaming": {
                "FUN_080032a2": "send_data_080032a2",
                "param_1": "socket_fd",
                "param_2": "data",
                "param_3": "len",
                "param_4": "flags",
                "uVar1": "converted_data"
            },
            "code": "\nvoid send_data_080032a2(undefined4 socket_fd,undefined4 data,undefined4 len,undefined4 flags)\n\n{\n  undefined4 converted_data;\n  \n  converted_data = FUN_08000178(data);\n  FUN_0800325a(socket_fd,0x71,converted_data,data,flags);\n  return;\n}\n\n",
            "called": [
                "FUN_08000178",
                "FUN_0800325a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032a2",
            "calling": [
                "FUN_08002f14"
            ],
            "imported": false,
            "current_name": "send_data_080032a2"
        },
        "FUN_08001b48": {
            "renaming": {
                "FUN_08001b48": "initialize_device_08001b48"
            },
            "code": "\nvoid initialize_device_08001b48(void)\n\n{\n  undefined *puVar1;\n  \n  puVar1 = PTR_DAT_08001bc0;\n  FUN_08002e44(PTR_DAT_08001bc0,PTR_s__home_bo_p2im_p2im_real_firmware_08001bc4,2,5);\n  FUN_08002f2c(puVar1,0xe0,PTR_FUN_08000214_1_08001bc8);\n  FUN_08002f2c(puVar1,0x90,PTR_LAB_080002ec_1_08001bcc);\n  FUN_08002f2c(puVar1,0xc0,DAT_08001bd0);\n  FUN_08002f2c(puVar1,0xd0,PTR_LAB_08000c18_1_08001bd4);\n  FUN_08002f2c(puVar1,0xf4,DAT_08001bd8);\n  FUN_08002f2c(puVar1,0xf5,PTR_LAB_080001a8_1_08001bdc);\n  FUN_08002f94(puVar1,0xf0,PTR_FUNC_08001cd0_1_08001be0);\n  FUN_08002f84(puVar1,0xff,DAT_08001be4);\n  FUN_08003048(puVar1,0xe100);\n  FUN_08000aec();\n  FUN_0800018c(0);\n  return;\n}\n\n",
            "called": [
                "FUN_08002f94",
                "FUN_08000aec",
                "FUN_08002e44",
                "FUN_08003048",
                "FUN_08002f84",
                "FUN_08002f2c",
                "FUN_0800018c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b48",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "initialize_device_08001b48"
        },
        "FUN_08006390": {
            "renaming": {
                "FUN_08006390": "improve_and_readability_08006390",
                "param_1": "pointer_array",
                "param_2": "value",
                "puVar1": "pointer"
            },
            "code": "\nundefined4 improve_and_readability_08006390(uint **pointer_array,undefined4 value)\n\n{\n  uint *pointer;\n  \n  FUN_08006262(*pointer_array,value,1);\n  pointer = *pointer_array;\n  if (pointer == DAT_080063bc) {\n    pointer[0x11] = pointer[0x11] | 0x8000;\n  }\n  **pointer_array = **pointer_array | 1;\n  return 0;\n}\n\n",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006390",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "improve_and_readability_08006390"
        },
        "FUN_08009f48": {
            "renaming": {
                "FUN_08009f48": "do_nothing_08009f48"
            },
            "code": "\nvoid do_nothing_08009f48(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f48",
            "calling": [
                "FUN_080091d8",
                "FUN_08009270"
            ],
            "imported": false,
            "current_name": "do_nothing_08009f48"
        },
        "FUN_08004d6a": {
            "renaming": {
                "FUN_08004d6a": "do_nothing_08004d6a"
            },
            "code": "\nvoid do_nothing_08004d6a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d6a",
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "imported": false,
            "current_name": "do_nothing_08004d6a"
        },
        "FUN_08008730": {
            "renaming": {
                "FUN_08008730": "execute_random_function_08008730",
                "uVar1": "random_number",
                "iVar2": "function_result",
                "iVar3": "function_parameter"
            },
            "code": "\nvoid execute_random_function_08008730(void)\n\n{\n  uint random_number;\n  int function_result;\n  int function_parameter;\n  \n  random_number = FUN_080086e8();\n  function_parameter = *(int *)(PTR_DAT_08008770 + random_number * 4);\n  if ((random_number < 5) && (function_result = (**(code **)(PTR_DAT_08008774 + random_number * 4))(function_parameter), function_result != -1)) {\n    FUN_0800688e(*(undefined4 *)(PTR_DAT_08008778 + (uint)*(byte *)(function_parameter + 0x44) * 4),\n                 *(int *)(function_parameter + 100) + (uint)*(ushort *)(function_parameter + 0x6a),1);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080086e8",
                "FUN_0800688e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008730",
            "calling": [
                "FUN_08006932"
            ],
            "imported": false,
            "current_name": "execute_random_function_08008730"
        },
        "FUN_08005df4": {
            "renaming": {
                "FUN_08005df4": "improved_function_08005df4",
                "param_1": "param_array",
                "puVar1": "pointer_to_param_array",
                "puVar1[8]": "param_array_element_8"
            },
            "code": "\nvoid improved_function_08005df4(uint **param_array)\n\n{\n  uint *pointer_to_param_array;\n  \n  *(undefined *)((int)param_array + 0x3d) = 2;\n  pointer_to_param_array = *param_array;\n  if ((param_array_element_8 & 0x1111) == 0) {\n    if ((param_array_element_8 & 0x444) == 0) {\n      *pointer_to_param_array = *pointer_to_param_array & 0xfffffffe;\n    }\n  }\n  FUN_08007710(param_array);\n  *(undefined *)((int)param_array + 0x3d) = 0;\n  *(undefined *)(param_array + 0xf) = 0;\n  return;\n}\n\n",
            "called": [
                "FUN_08007710"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005df4",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": false,
            "current_name": "improved_function_08005df4"
        },
        "FUN_08009148": {
            "renaming": {
                "FUN_08009148": "execute_functions_08009148",
                "puVar1": "function_pointer_array",
                "iVar2": "function_pointer_array_length",
                "iVar3": "index",
                "do_nothing_0800a424": "do_nothing"
            },
            "code": "\nvoid execute_functions_08009148(void)\n\n{\n  undefined *function_pointer_array;\n  int function_pointer_array_length;\n  int index;\n  \n  function_pointer_array = PTR_DAT_08009180;\n  function_pointer_array_length = (int)PTR_DAT_08009184 - (int)PTR_DAT_08009180;\n  for (index = 0; index != function_pointer_array_length >> 2; index = index + 1) {\n    (**(code **)(function_pointer_array + index * 4))();\n  }\n  do_nothing_0800a424();\n  function_pointer_array = PTR_DAT_08009188;\n  function_pointer_array_length = (int)PTR_DAT_0800918c - (int)PTR_DAT_08009188;\n  for (index = 0; index != function_pointer_array_length >> 2; index = index + 1) {\n    (**(code **)(function_pointer_array + index * 4))();\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800a424",
                "FUN_08008f0e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009148",
            "calling": [
                "FUN_08003658"
            ],
            "imported": false,
            "current_name": "execute_functions_08009148"
        },
        "FUN_08005460": {
            "renaming": {
                "FUN_08005460": "check_status_08005460",
                "param_1": "status_flags",
                "puVar1": "global_var_1",
                "puVar2": "global_var_2",
                "iVar3": "start_time",
                "iVar4": "current_time",
                "uVar5": "result",
                "uVar6": "status_flag",
                "bVar7": "bool_flag"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined4 check_status_08005460(uint *status_flags)\n\n{\n  uint *global_var_1;\n  uint *global_var_2;\n  int start_time;\n  int current_time;\n  undefined4 result;\n  uint status_flag;\n  bool bool_flag;\n  \n  global_var_1 = DAT_08005720;\n  if ((*status_flags & 1) != 0) {\n    if (((DAT_08005720[1] & 0xc) == 4) ||\n       (((DAT_08005720[1] & 0xc) == 8 && ((DAT_08005720[1] & 0x10000) != 0)))) {\n      if (((*DAT_08005720 & 0x20000) != 0) && (status_flags[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      status_flag = status_flags[1];\n      if (status_flag == 0x10000) {\n        *DAT_08005720 = *DAT_08005720 | 0x10000;\n      }\n      else if (status_flag == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (status_flag == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        *DAT_08005720 = *DAT_08005720 & 0xfffeffff;\n        *global_var_1 = *global_var_1 & 0xfffbffff;\n      }\n      if (status_flags[1] == 0) {\n        start_time = FUN_08003760();\n        while ((*DAT_08005720 & 0x20000) != 0) {\n          current_time = FUN_08003760();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        start_time = FUN_08003760();\n        while ((*DAT_08005720 & 0x20000) == 0) {\n          current_time = FUN_08003760();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*status_flags & 2) != 0) {\n    if (((DAT_08005720[1] & 0xc) == 0) ||\n       (((DAT_08005720[1] & 0xc) == 8 && ((DAT_08005720[1] & 0x10000) == 0)))) {\n      if (((*DAT_08005720 & 2) != 0) && (status_flags[4] != 1)) {\n        return 1;\n      }\n      *DAT_08005720 = *DAT_08005720 & 0xffffff07 | status_flags[5] << 3;\n    }\n    else if (status_flags[4] == 0) {\n      *DAT_08005724 = 0;\n      start_time = FUN_08003760();\n      while ((*DAT_08005720 & 2) != 0) {\n        current_time = FUN_08003760();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005724 = 1;\n      start_time = FUN_08003760();\n      while ((*DAT_08005720 & 2) == 0) {\n        current_time = FUN_08003760();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      *DAT_08005720 = *DAT_08005720 & 0xffffff07 | status_flags[5] << 3;\n    }\n  }\n  if ((*status_flags & 8) != 0) {\n    if (status_flags[6] == 0) {\n      *DAT_08005728 = 0;\n      start_time = FUN_08003760();\n      while ((DAT_08005720[9] & 2) != 0) {\n        current_time = FUN_08003760();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005728 = 1;\n      start_time = FUN_08003760();\n      while ((DAT_08005720[9] & 2) == 0) {\n        current_time = FUN_08003760();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      FUN_08005434(1);\n    }\n  }\n  if ((*status_flags & 4) != 0) {\n    bool_flag = (DAT_08005720[7] & 0x10000000) == 0;\n    if (bool_flag) {\n      DAT_08005720[7] = DAT_08005720[7] | 0x10000000;\n    }\n    if ((*DAT_0800572c & 0x100) == 0) {\n      *DAT_0800572c = *DAT_0800572c | 0x100;\n      start_time = FUN_08003760();\n      while ((*DAT_0800572c & 0x100) == 0) {\n        current_time = FUN_08003760();\n        if (100 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    global_var_2 = DAT_08005838;\n    global_var_1 = DAT_08005720;\n    status_flag = status_flags[3];\n    if (status_flag == 1) {\n      DAT_08005720[8] = DAT_08005720[8] | 1;\n    }\n    else if (status_flag == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (status_flag == 5) {\n      DAT_08005838[8] = DAT_08005838[8] | 4;\n      global_var_2[8] = global_var_2[8] | 1;\n    }\n    else {\n      DAT_08005720[8] = DAT_08005720[8] & 0xfffffffe;\n      global_var_1[8] = global_var_1[8] & 0xfffffffb;\n    }\n    if (status_flags[3] == 0) {\n      start_time = FUN_08003760();\n      while ((DAT_08005838[8] & 2) != 0) {\n        current_time = FUN_08003760();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      start_time = FUN_08003760();\n      while ((DAT_08005720[8] & 2) == 0) {\n        current_time = FUN_08003760();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    if (bool_flag) {\n      DAT_08005838[7] = DAT_08005838[7] & 0xefffffff;\n    }\n  }\n  if (status_flags[7] == 0) {\n    result = 0;\n  }\n  else if ((DAT_08005838[1] & 0xc) == 8) {\n    result = 1;\n  }\n  else if (status_flags[7] == 2) {\n    *DAT_0800583c = 0;\n    start_time = FUN_08003760();\n    do {\n      if ((*DAT_08005838 & 0x2000000) == 0) {\n        if (status_flags[8] == 0x10000) {\n          DAT_08005838[1] = DAT_08005838[1] & 0xfffdffff | status_flags[2];\n        }\n        DAT_08005838[1] = DAT_08005838[1] & 0xffc2ffff | status_flags[8] | status_flags[9];\n        *DAT_0800583c = 1;\n        start_time = FUN_08003760();\n        do {\n          if ((*DAT_08005838 & 0x2000000) != 0) {\n            return 0;\n          }\n          current_time = FUN_08003760();\n        } while ((uint)(current_time - start_time) < 3);\n        return 3;\n      }\n      current_time = FUN_08003760();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  else {\n    *DAT_0800583c = 0;\n    start_time = FUN_08003760();\n    do {\n      if ((*DAT_08005838 & 0x2000000) == 0) {\n        return 0;\n      }\n      current_time = FUN_08003760();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_08003760",
                "FUN_08005434"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005460",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "check_status_08005460"
        },
        "FUN_08008854": {
            "renaming": {
                "FUN_08008854": "get_default_value_08008854"
            },
            "code": "\nundefined4 get_default_value_08008854(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008854",
            "calling": [
                "FUN_0800a130"
            ],
            "imported": false,
            "current_name": "get_default_value_08008854"
        },
        "FUN_080064cc": {
            "renaming": {
                "FUN_080064cc": "parse_input_080064cc",
                "param_1": "input",
                "param_1[2]": "second_param",
                "param_1[4]": "flag",
                "param_1[8]": "pointer"
            },
            "code": "\nundefined4 parse_input_080064cc(int *input)\n\n{\n  short sVar1;\n  byte *pbVar2;\n  \n  if (*(char *)((int)input + 0x39) != '!') {\n    return 2;\n  }\n  if (second_param == 0x1000) {\n    *(uint *)(*input + 4) = *(ushort *)pointer & 0x1ff;\n    if (flag == 0) {\n      pointer = pointer + 2;\n    }\n    else {\n      pointer = pointer + 1;\n    }\n  }\n  else {\n    pbVar2 = (byte *)pointer;\n    pointer = (int)(pbVar2 + 1);\n    *(uint *)(*input + 4) = (uint)*pbVar2;\n  }\n  sVar1 = *(short *)((int)input + 0x26) + -1;\n  *(short *)((int)input + 0x26) = sVar1;\n  if (sVar1 == 0) {\n    *(uint *)(*input + 0xc) = *(uint *)(*input + 0xc) & 0xffffff7f;\n    *(uint *)(*input + 0xc) = *(uint *)(*input + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064cc",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "parse_input_080064cc"
        },
        "FUN_08004d6c": {
            "renaming": {
                "FUN_08004d6c": "improved_function_name_08004d6c",
                "param_1": "improved_parameter_name",
                "puVar1": "improved_variable_name"
            },
            "code": "\nundefined4 improved_function_name_08004d6c(uint **improved_parameter_name)\n\n{\n  uint *improved_variable_name;\n  \n  if (*(char *)((int)improved_parameter_name + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)improved_parameter_name + 0x2a) < 4) {\n      if (*(ushort *)((int)improved_parameter_name + 0x2a) - 2 < 2) {\n        if (improved_parameter_name[0xb] == (uint *)0x2) {\n          **improved_parameter_name = **improved_parameter_name | 0x400;\n        }\n        else {\n          **improved_parameter_name = **improved_parameter_name & 0xfffffbff;\n          **improved_parameter_name = **improved_parameter_name | 0x800;\n        }\n        (*improved_parameter_name)[1] = (*improved_parameter_name)[1] & 0xfffffbff;\n      }\n      else {\n        if (improved_parameter_name[0xb] == (uint *)0x2) {\n          **improved_parameter_name = **improved_parameter_name | 0x400;\n        }\n        else {\n          **improved_parameter_name = **improved_parameter_name & 0xfffffbff;\n        }\n        (*improved_parameter_name)[1] = (*improved_parameter_name)[1] & 0xfffff8ff;\n        improved_variable_name = improved_parameter_name[9];\n        improved_parameter_name[9] = (uint *)((int)improved_variable_name + 1);\n        *(char *)improved_variable_name = (char)(*improved_parameter_name)[4];\n        *(short *)((int)improved_parameter_name + 0x2a) = *(short *)((int)improved_parameter_name + 0x2a) + -1;\n        *(undefined *)((int)improved_parameter_name + 0x3d) = 0x20;\n        improved_parameter_name[0xc] = (uint *)0x0;\n        if (*(char *)((int)improved_parameter_name + 0x3e) == '@') {\n          *(undefined *)((int)improved_parameter_name + 0x3e) = 0;\n          do_nothing_08004d6a();\n        }\n        else {\n          *(undefined *)((int)improved_parameter_name + 0x3e) = 0;\n          do_nothing_08004a20();\n        }\n      }\n    }\n    else {\n      improved_variable_name = improved_parameter_name[9];\n      improved_parameter_name[9] = (uint *)((int)improved_variable_name + 1);\n      *(char *)improved_variable_name = (char)(*improved_parameter_name)[4];\n      *(short *)((int)improved_parameter_name + 0x2a) = *(short *)((int)improved_parameter_name + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d6c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "improved_function_name_08004d6c"
        },
        "FUN_08004ac2": {
            "renaming": {
                "FUN_08004ac2": "process_data_08004ac2",
                "param_1": "data_ptr",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "result",
                "uVar2": "flags"
            },
            "code": "\nundefined4 process_data_08004ac2(int *data_ptr,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  undefined2 result;\n  uint flags;\n  \n  flags = *(uint *)(*data_ptr + 0x18);\n  if ((flags & 0x80) == 0) {\n    result = *(undefined2 *)(data_ptr + 3);\n  }\n  else {\n    result = *(undefined2 *)(data_ptr + 6);\n  }\n  FUN_08007fa0(data_ptr,(*(uint *)(*data_ptr + 0x18) & 4) == 0,result,flags,arg4);\n  return 0;\n}\n\n",
            "called": [
                "FUN_08007fa0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ac2",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_data_08004ac2"
        },
        "FUN_08008850": {
            "renaming": {
                "FUN_08008850": "get_default_value_08008850"
            },
            "code": "\nundefined4 get_default_value_08008850(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008850",
            "calling": [
                "FUN_0800a110"
            ],
            "imported": false,
            "current_name": "get_default_value_08008850"
        },
        "FUN_08006ca8": {
            "renaming": {
                "FUN_08006ca8": "process_data_08006ca8",
                "param_1": "data_ptr",
                "param_2": "param",
                "puVar1": "pointer",
                "iVar2": "data_offset",
                "uVar3": "result",
                "uVar4": "flag",
                "uVar5": "data_value",
                "local_18": "bit_mask",
                "local_14": "value_1",
                "local_10": "value_2"
            },
            "code": "\nvoid process_data_08006ca8(uint *data_ptr,undefined4 param)\n\n{\n  undefined *pointer;\n  int data_offset;\n  undefined4 result;\n  uint flag;\n  uint data_value;\n  uint bit_mask;\n  undefined4 value_1;\n  undefined4 value_2;\n  \n  data_offset = DAT_08006d20;\n  data_value = *data_ptr;\n  if (data_value == DAT_08006d14) {\n    flag = *(uint *)(DAT_08006d20 + 0x18) | 0x200;\n    *(uint *)(DAT_08006d20 + 0x18) = flag;\n    data_value = *(uint *)(data_offset + 0x18) & 0x200;\n  }\n  else {\n    flag = DAT_08006d18;\n    if (data_value == DAT_08006d18) {\n      flag = *(uint *)(DAT_08006d20 + 0x18) | 0x400;\n      *(uint *)(DAT_08006d20 + 0x18) = flag;\n      data_value = *(uint *)(data_offset + 0x18) & 0x400;\n    }\n  }\n  pointer = PTR_DAT_08006d1c;\n  result = FUN_08006bb8((uint)((int)(char)*PTR_DAT_08006d1c << 0x18) >> 0x1c,param,flag,data_value);\n  bit_mask = 1 << ((byte)*pointer & 0xf) & 0xffff;\n  value_1 = 3;\n  value_2 = 0;\n  FUN_080040e8(result,&bit_mask);\n  return;\n}\n\n",
            "called": [
                "FUN_08006bb8",
                "FUN_080040e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ca8",
            "calling": [
                "FUN_08003bd8"
            ],
            "imported": false,
            "current_name": "process_data_08006ca8"
        },
        "FUN_08002fc2": {
            "renaming": {
                "FUN_08002fc2": "write_to_memory_08002fc2",
                "param_1": "base_address",
                "param_2": "offset",
                "param_3": "value"
            },
            "code": "\nvoid write_to_memory_08002fc2(int base_address,int offset,undefined4 value)\n\n{\n  *(undefined4 *)(base_address + (offset + 0x42) * 4) = value;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fc2",
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "imported": false,
            "current_name": "write_to_memory_08002fc2"
        },
        "FUN_08008afa": {
            "renaming": {
                "FUN_08008afa": "calculate_offset_08008afa",
                "param_1": "base_address",
                "&": "bitwise_and"
            },
            "code": "\nushort calculate_offset_08008afa(int base_address)\n\n{\n  return (*(short *)(base_address + 0x134) + 0x40) - *(short *)(base_address + 0x136) bitwise_and 0x3f;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008afa",
            "calling": [
                "FUN_08008bf4"
            ],
            "imported": false,
            "current_name": "calculate_offset_08008afa"
        },
        "FUN_08003048": {
            "renaming": {
                "FUN_08003048": "improved_function_08003048",
                "param_1": "first_parameter",
                "param_2": "second_parameter",
                "param_3": "third_parameter",
                "param_4": "fourth_parameter",
                "puVar1": "pointer_variable"
            },
            "code": "\nvoid improved_function_08003048(undefined4 first_parameter,undefined4 second_parameter,undefined4 third_parameter,undefined4 fourth_parameter)\n\n{\n  undefined *pointer_variable;\n  \n  pointer_variable = PTR_DAT_08003068;\n  FUN_08008c44(PTR_DAT_08003068,second_parameter,6,fourth_parameter,fourth_parameter);\n  FUN_08003002(first_parameter);\n  FUN_08002e26(first_parameter,pointer_variable);\n  return;\n}\n\n",
            "called": [
                "FUN_08003002",
                "FUN_08002e26",
                "FUN_08008c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003048",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "improved_function_08003048"
        },
        "FUN_0800937c": {
            "renaming": {
                "FUN_0800937c": "parse_format_string_0800937c",
                "param_1": "format_string",
                "param_2": "arg_pointer",
                "param_3": "output_buffer",
                "param_4": "arg_list",
                "puVar1": "ptr_to_s",
                "iVar2": "result",
                "piVar3": "arg_count",
                "bVar4": "is_number",
                "pbVar5": "format_iterator",
                "pbVar6": "current_format_char",
                "unaff_r9": "saved_arg_count",
                "iVar7": "temp_result",
                "local_8c": "arg_count",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "length_modifier",
                "local_7c": "width",
                "local_74": "output_length",
                "local_70": "current_char",
                "local_6f": "space_char",
                "local_6e": "sign_char",
                "local_45": "alternate_form",
                "local_30": "conversion_type"
            },
            "code": "\nint parse_format_string_0800937c(int format_string,undefined *arg_pointer,byte *output_buffer,int *arg_list)\n\n{\n  undefined *ptr_to_s;\n  int result;\n  int *arg_count;\n  bool is_number;\n  byte *format_iterator;\n  byte *current_format_char;\n  int saved_arg_count;\n  int temp_result;\n  int *arg_count;\n  uint flags;\n  int precision;\n  undefined4 length_modifier;\n  int width;\n  int output_length;\n  byte current_char;\n  undefined space_char;\n  undefined sign_char;\n  undefined alternate_form;\n  undefined4 conversion_type;\n  \n  arg_count = arg_list;\n  if ((format_string != 0) && (*(int *)(format_string + 0x18) == 0)) {\n    FUN_08009d50();\n  }\n  if (arg_pointer == PTR_DAT_08009588) {\n    arg_pointer = *(undefined **)(format_string + 4);\n  }\n  else if (arg_pointer == PTR_DAT_08009590) {\n    arg_pointer = *(undefined **)(format_string + 8);\n  }\n  else if (arg_pointer == PTR_DAT_08009594) {\n    arg_pointer = *(undefined **)(format_string + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(arg_pointer + 0xc) << 0x1c)) || (*(int *)(arg_pointer + 0x10) == 0)) &&\n     (temp_result = FUN_08009a80(format_string,arg_pointer), temp_result != 0)) {\n    return -1;\n  }\n  output_length = 0;\n  space_char = 0x20;\n  sign_char = 0x30;\n  format_iterator = output_buffer;\nLAB_080093be:\n  current_format_char = format_iterator;\n  if (*current_format_char != 0) goto LAB_08009474;\n  goto LAB_080093c8;\nLAB_08009474:\n  format_iterator = current_format_char + 1;\n  if (*current_format_char != 0x25) goto LAB_080093be;\nLAB_080093c8:\n  temp_result = (int)current_format_char - (int)output_buffer;\n  if (temp_result != 0) {\n    result = FUN_08009358(format_string,arg_pointer,output_buffer,temp_result);\n    if (result == -1) {\nLAB_08009568:\n      if ((int)((uint)*(ushort *)(arg_pointer + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return output_length;\n    }\n    output_length = output_length + temp_result;\n  }\n  if (*current_format_char == 0) goto LAB_08009568;\n  flags = 0;\n  width = 0;\n  precision = -1;\n  length_modifier = 0;\n  alternate_form = 0;\n  conversion_type = 0;\n  format_iterator = current_format_char + 1;\n  while( true ) {\n    temp_result = FUN_08009f2c(PTR_s___0__0800958c,*format_iterator);\n    ptr_to_s = PTR_DAT_08009598;\n    output_buffer = format_iterator + 1;\n    if (temp_result == 0) break;\n    flags = 1 << (temp_result - (int)PTR_s___0__0800958c & 0xffU) | flags;\n    format_iterator = output_buffer;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    alternate_form = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    alternate_form = 0x2b;\n  }\n  if (*format_iterator == 0x2a) {\n    arg_count = arg_count + 1;\n    temp_result = *arg_count;\n    arg_count = arg_count;\n    if (-1 < temp_result) goto LAB_08009498;\n    width = -temp_result;\n    flags = flags | 2;\n  }\n  else {\n    is_number = false;\n    temp_result = width;\n    output_buffer = format_iterator;\n    while( true ) {\n      if (9 < *output_buffer - 0x30) break;\n      temp_result = temp_result * 10 + (*output_buffer - 0x30);\n      is_number = true;\n      output_buffer = output_buffer + 1;\n    }\n    if (is_number) {\nLAB_08009498:\n      width = temp_result;\n    }\n  }\n  if (*output_buffer == 0x2e) {\n    if (output_buffer[1] == 0x2a) {\n      output_buffer = output_buffer + 2;\n      arg_count = arg_count + 1;\n      precision = *arg_count;\n      arg_count = arg_count;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      is_number = false;\n      temp_result = 0;\n      precision = 0;\n      while( true ) {\n        output_buffer = output_buffer + 1;\n        if (9 < *output_buffer - 0x30) break;\n        temp_result = temp_result * 10 + (*output_buffer - 0x30);\n        is_number = true;\n      }\n      if (is_number) {\n        precision = temp_result;\n      }\n    }\n  }\n  temp_result = FUN_08009f2c(PTR_DAT_08009598,*output_buffer,3);\n  if (temp_result != 0) {\n    output_buffer = output_buffer + 1;\n    flags = flags | 0x40 << (temp_result - (int)ptr_to_s & 0xffU);\n  }\n  current_char = *output_buffer;\n  output_buffer = output_buffer + 1;\n  temp_result = FUN_08009f2c(PTR_s_efgEFG_0800959c,current_char,6);\n  if (temp_result == 0) {\n    temp_result = FUN_08009698(format_string,&flags,arg_pointer,DAT_080095a4,&arg_count);\n  }\n  else {\n    temp_result = format_string;\n    if (DAT_080095a0 == 0) {\n      arg_count = (int *)(((int)arg_count + 7U & 0xfffffff8) + 8);\n      temp_result = saved_arg_count;\n      goto LAB_0800951a;\n    }\n  }\n  if (temp_result == -1) goto LAB_08009568;\nLAB_0800951a:\n  output_length = output_length + temp_result;\n  format_iterator = output_buffer;\n  saved_arg_count = temp_result;\n  goto LAB_080093be;\n}\n\n",
            "called": [
                "FUN_08009698",
                "FUN_08009d50",
                "FUN_08009f2c",
                "FUN_08009358",
                "FUN_08009a80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800937c",
            "calling": [
                "FUN_080098d8",
                "FUN_08009124"
            ],
            "imported": false,
            "current_name": "parse_format_string_0800937c"
        },
        "FUN_08000214": {
            "renaming": {
                "FUN_08000214": "process_data_08000214",
                "param_1": "data_index",
                "param_2": "output_param",
                "param_3": "input_param_1",
                "param_4": "input_param_2",
                "bVar1": "is_valid",
                "iVar2": "result"
            },
            "code": "\nvoid process_data_08000214(uint data_index,undefined4 output_param,undefined4 input_param_1,undefined4 input_param_2)\n\n{\n  bool is_valid;\n  int result;\n  \n  if (0x3b < (int)data_index) {\n    return;\n  }\n  result = FUN_08002fa0(PTR_DAT_080002d8,data_index,input_param_1,input_param_2,input_param_2);\n  if (result == 3) {\n    if (data_index < 0x3c) {\n      if (PTR_DAT_080002dc[data_index] == -1) {\n        result = 0;\n      }\n      else {\n        result = FUN_080036ac();\n        if (result == 0) {\n          result = 0;\n        }\n        else {\n          result = FUN_080036ac((int)(char)PTR_DAT_080002dc[data_index]);\n          if (result == 1) {\n            result = 0;\n          }\n          else {\n            result = FUN_0800738a((int)(char)PTR_DAT_080002dc[data_index],PTR_DAT_080002e8);\n          }\n        }\n      }\n    }\n    else {\n      result = 0;\n    }\n    if (result != 0) {\n      FUN_080088e0(data_index,output_param);\n    }\n    FUN_08002fc2(PTR_DAT_080002d8,data_index,output_param);\n  }\n  else if (result == 4) {\n    if (data_index < 0x3c) {\n      if (PTR_DAT_080002dc[data_index] == -1) {\n        is_valid = false;\n      }\n      else {\n        result = FUN_080036ac();\n        if (result == 0) {\n          is_valid = false;\n        }\n        else {\n          result = FUN_080036ac((int)(char)PTR_DAT_080002dc[data_index]);\n          if (result == 1) {\n            is_valid = false;\n          }\n          else {\n            is_valid = true;\n          }\n        }\n      }\n    }\n    else {\n      is_valid = false;\n    }\n    if (is_valid) {\n      FUN_080026b0(PTR_DAT_080002e4 + (uint)(byte)PTR_DAT_080002e0[data_index] * 3,output_param);\n    }\n    FUN_08002fc2(PTR_DAT_080002d8,data_index,output_param);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800021a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000214",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "process_data_08000214"
        },
        "FUN_08003724": {
            "renaming": {
                "FUN_08003724": "set_flag_and_call_functions_08003724",
                "do_nothing_080036d4": "do_nothing",
                "undefined4": "int"
            },
            "code": "\nint set_flag_and_call_functions_08003724(void)\n\n{\n  *DAT_08003744 = *DAT_08003744 | 0x10;\n  FUN_08003f0c(3);\n  FUN_080036d8(0xf);\n  do_nothing_080036d4();\n  return 0;\n}\n\n",
            "called": [
                "FUN_080036d8",
                "FUN_08003f0c",
                "FUN_080036d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003724",
            "calling": [
                "FUN_080072fa"
            ],
            "imported": false,
            "current_name": "set_flag_and_call_functions_08003724"
        },
        "FUN_080038dc": {
            "renaming": {
                "FUN_080038dc": "get_offset_value_080038dc",
                "param_1": "input_pointer"
            },
            "code": "\nundefined4 get_offset_value_080038dc(int *input_pointer)\n\n{\n  return *(undefined4 *)(*input_pointer + 0x4c);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038dc",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "get_offset_value_080038dc"
        },
        "FUN_080025ac": {
            "renaming": {
                "FUN_080025ac": "process_data_080025ac",
                "param_1": "data_array",
                "param_2": "input_value",
                "param_3": "value_1",
                "param_4": "value_2",
                "uVar1": "updated_value_1",
                "uVar2": "updated_value_2",
                "uVar3": "updated_value_3",
                "iVar4": "temp_value"
            },
            "code": "\nbyte process_data_080025ac(byte *data_array,uint input_value,int value_1,int value_2)\n\n{\n  uint updated_value_1;\n  uint updated_value_2;\n  uint updated_value_3;\n  int temp_value;\n  \n  if (*data_array < 0xc) {\n    FUN_08008990(input_value,1,value_1,*data_array,value_2);\n    updated_value_2 = (uint)*data_array;\n    updated_value_1 = (byte)PTR_DAT_08002628[updated_value_2 * 8] & 0xffffffc0 | input_value & 0x3f;\n    PTR_DAT_08002628[updated_value_2 * 8] = (char)updated_value_1;\n    temp_value = -value_1 + 0x220;\n    if (temp_value < 0) {\n      temp_value = -value_1 + 0x223;\n    }\n    data_array[1] = (byte)((uint)(temp_value << 0x16) >> 0x18);\n    temp_value = -value_2 + 0x960;\n    if (temp_value < 0) {\n      temp_value = -value_2 + 0x963;\n    }\n    data_array[2] = (byte)((uint)(temp_value << 0x16) >> 0x18);\n    updated_value_3 = (uint)((ulonglong)DAT_0800262c * (ulonglong)*data_array >> 0x23);\n    temp_value = FUN_08002400(updated_value_3,updated_value_1,updated_value_2,(int)((ulonglong)DAT_0800262c * (ulonglong)*data_array));\n    if (temp_value == 0) {\n      PTR_DAT_08002630[0x44] = (char)updated_value_3;\n      FUN_0800242c();\n    }\n    PTR_DAT_08002628[(uint)*data_array * 8] = PTR_DAT_08002628[(uint)*data_array * 8] | 0x40;\n  }\n  return *data_array;\n}\n\n",
            "called": [
                "FUN_08008990",
                "FUN_08002400",
                "FUN_0800242c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025ac",
            "calling": [
                "FUN_08000500",
                "FUN_08002634"
            ],
            "imported": false,
            "current_name": "process_data_080025ac"
        },
        "FUN_08002634": {
            "renaming": {
                "FUN_08002634": "initialize_data_08002634",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "constant_1",
                "param_4": "constant_2"
            },
            "code": "\nvoid initialize_data_08002634(undefined4 data_1,undefined4 data_2,undefined4 constant_1,undefined4 constant_2)\n\n{\n  FUN_080025ac(data_1,data_2,0x220,0x960,constant_2);\n  return;\n}\n\n",
            "called": [
                "FUN_080025ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002634",
            "calling": [
                "FUN_08000500"
            ],
            "imported": false,
            "current_name": "initialize_data_08002634"
        },
        "FUN_08002f0a": {
            "renaming": {
                "FUN_08002f0a": "initialize_buffer_08002f0a",
                "param_1": "buffer_start"
            },
            "code": "\nvoid initialize_buffer_08002f0a(int buffer_start)\n\n{\n  FUN_0800325a(buffer_start + 0x40);\n  return;\n}\n\n",
            "called": [
                "FUN_0800325a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f0a",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "initialize_buffer_08002f0a"
        },
        "FUN_08005bb8": {
            "renaming": {
                "FUN_08005bb8": "calculate_output_value_08005bb8",
                "param_1": "input_value",
                "uVar1": "output_value",
                "local_24": "multiplier",
                "abStack_20": "multiplier_array",
                "uStack_1c": "constant_1",
                "uStack_18": "constant_2",
                "uStack_14": "constant_3"
            },
            "code": "\nuint calculate_output_value_08005bb8(int input_value)\n\n{\n  uint output_value;\n  undefined2 multiplier;\n  byte multiplier_array [4];\n  undefined4 constant_1;\n  undefined4 constant_2;\n  undefined4 constant_3;\n  \n  constant_3 = *(undefined4 *)(PTR_DAT_08005ca0 + 8);\n  constant_2 = *(undefined4 *)(PTR_DAT_08005ca0 + 4);\n  constant_1 = *(undefined4 *)PTR_DAT_08005ca0;\n  multiplier = *(undefined2 *)(PTR_DAT_08005ca0 + 0x10);\n  if (input_value == 2) {\n    output_value = FUN_08005a48();\n    output_value = output_value / ((((DAT_08005ca4[1] << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input_value == 0x10) {\n    if ((*DAT_08005ca4 & 0x1000000) == 0) {\n      output_value = 0;\n    }\n    else {\n      output_value = DAT_08005cb0;\n      if ((DAT_08005ca4[1] & 0x10000) != 0) {\n        output_value = DAT_08005ca8 / *(byte *)((int)&multiplier - ((int)(DAT_08005ca4[1] << 0xe) >> 0x1f));\n      }\n      output_value = output_value * multiplier_array[(DAT_08005ca4[1] << 10) >> 0x1c];\n      if ((DAT_08005ca4[1] & 0x400000) == 0) {\n        output_value = (uint)((ulonglong)DAT_08005cac * (ulonglong)(output_value * 2) >> 0x21);\n      }\n    }\n  }\n  else if (input_value == 1) {\n    if ((DAT_08005ca4[8] & 0x302) == 0x102) {\n      output_value = 0x8000;\n    }\n    else {\n      output_value = DAT_08005ca4[8] & 0x300;\n      if ((output_value == 0x200) && ((DAT_08005ca4[9] & 2) != 0)) {\n        output_value = 32000;\n      }\n      else if (output_value == 0x300) {\n        if ((*DAT_08005ca4 & 0x20000) == 0) {\n          output_value = 0;\n        }\n        else {\n          output_value = 0xf424;\n        }\n      }\n      else {\n        output_value = 0;\n      }\n    }\n  }\n  else {\n    output_value = 0;\n  }\n  return output_value;\n}\n\n",
            "called": [
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bb8",
            "calling": [
                "FUN_0800376c",
                "FUN_08003e20"
            ],
            "imported": false,
            "current_name": "calculate_output_value_08005bb8"
        },
        "FUN_08007648": {
            "renaming": {
                "FUN_08007648": "initialize_parameters_08007648",
                "param_1": "parameters",
                "param_2": "value_2",
                "param_3": "value_3",
                "param_4": "value_4",
                "cVar1": "character",
                "uVar2": "result",
                "iVar3": "return_value",
                "puVar4": "pointer",
                "local_34": "local_variable_1",
                "local_30": "local_variable_2",
                "local_2c": "local_variable_3",
                "local_28": "local_variable_4",
                "local_24": "local_variable_5",
                "local_20": "local_variable_6",
                "local_1c": "local_variable_7"
            },
            "code": "\nvoid initialize_parameters_08007648(undefined4 *parameters,undefined4 value_2,undefined4 value_3,undefined4 value_4)\n\n{\n  char character;\n  uint result;\n  int return_value;\n  undefined4 *pointer;\n  undefined4 local_variable_1;\n  undefined4 local_variable_2;\n  undefined4 local_variable_3;\n  undefined4 local_variable_4;\n  undefined4 local_variable_5;\n  undefined4 local_variable_6;\n  undefined4 local_variable_7;\n  \n  local_variable_1 = 0;\n  local_variable_2 = 0;\n  local_variable_3 = 0;\n  local_variable_4 = 0;\n  local_variable_5 = 0;\n  local_variable_6 = 0;\n  local_variable_7 = 0;\n  pointer = parameters + 1;\n  *parameters = 0x40000000;\n  parameters[1] = 0x40000000;\n  parameters[4] = value_2;\n  result = FUN_080075dc();\n  parameters[2] = (uint)((ulonglong)DAT_080076dc * (ulonglong)result >> 0x32) - 1;\n  parameters[5] = 0;\n  parameters[3] = 0;\n  parameters[6] = 0;\n  parameters[0x13] = value_4;\n  local_variable_1 = 0;\n  local_variable_3 = 0;\n  local_variable_5 = 0;\n  local_variable_4 = 0;\n  local_variable_6 = 0;\n  local_variable_7 = 0;\n  local_variable_2 = value_3;\n  character = FUN_08007544(*parameters);\n  FUN_08003f30((int)character,0xe,0);\n  character = FUN_08007544(*parameters);\n  FUN_08003f94((int)character);\n  return_value = FUN_08006060(pointer);\n  if ((return_value == 0) && (return_value = FUN_08006128(pointer,&local_variable_1,0), return_value == 0)) {\n    FUN_08006280(pointer,0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08006280",
                "FUN_08007544",
                "FUN_08006060",
                "FUN_08003f94",
                "FUN_08003f30",
                "FUN_080075dc",
                "FUN_08006128"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007648",
            "calling": [
                "FUN_0800242c"
            ],
            "imported": false,
            "current_name": "initialize_parameters_08007648"
        },
        "FUN_08008858": {
            "renaming": {
                "FUN_08008858": "initialize_08008858"
            },
            "code": "\nundefined4 initialize_08008858(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008858",
            "calling": [
                "FUN_0800a168"
            ],
            "imported": false,
            "current_name": "initialize_08008858"
        },
        "FUN_08004a20": {
            "renaming": {
                "FUN_08004a20": "do_nothing_08004a20"
            },
            "code": "\nvoid do_nothing_08004a20(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a20",
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a20"
        },
        "FUN_080063c0": {
            "renaming": {
                "FUN_080063c0": "improve_and_set_flags_080063c0",
                "param_1": "ptr_to_uint_ptr",
                "param_2": "flag_value",
                "puVar1": "ptr_to_uint"
            },
            "code": "\nundefined4 improve_and_set_flags_080063c0(uint **ptr_to_uint_ptr,undefined4 flag_value)\n\n{\n  uint *ptr_to_uint;\n  \n  FUN_08006262(*ptr_to_uint_ptr,flag_value,0);\n  ptr_to_uint = *ptr_to_uint_ptr;\n  if (((ptr_to_uint == DAT_0800641c) && ((ptr_to_uint[8] & 0x1111) == 0)) && ((ptr_to_uint[8] & 0x444) == 0)) {\n    ptr_to_uint[0x11] = ptr_to_uint[0x11] & 0xffff7fff;\n  }\n  ptr_to_uint = *ptr_to_uint_ptr;\n  if (((ptr_to_uint[8] & 0x1111) == 0) && ((ptr_to_uint[8] & 0x444) == 0)) {\n    *ptr_to_uint = *ptr_to_uint & 0xfffffffe;\n  }\n  *(undefined *)((int)ptr_to_uint_ptr + 0x3d) = 1;\n  return 0;\n}\n\n",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080063c0",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": false,
            "current_name": "improve_and_set_flags_080063c0"
        },
        "FUN_08004a24": {
            "renaming": {
                "FUN_08004a24": "decode_data_08004a24",
                "param_1": "data_ptr",
                "cVar1": "closing_parenthesis",
                "pbVar2": "byte_ptr",
                "param_1[9]": "byte_array",
                "param_1[0xc]": "some_other_value"
            },
            "code": "\nundefined4 decode_data_08004a24(int *data_ptr)\n\n{\n  char closing_parenthesis;\n  byte *byte_ptr;\n  \n  closing_parenthesis = *(char *)((int)data_ptr + 0x3d);\n  if (*(short *)((int)data_ptr + 0x2a) != 0) {\n    byte_ptr = (byte *)byte_array;\n    byte_array = (int)(byte_ptr + 1);\n    *(uint *)(*data_ptr + 0x10) = (uint)*byte_ptr;\n    *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) + -1;\n    if ((*(short *)((int)data_ptr + 0x2a) == 0) && (closing_parenthesis == ')')) {\n      *(uint *)(*data_ptr + 4) = *(uint *)(*data_ptr + 4) & 0xfffffbff;\n      some_other_value = 0x21;\n      *(undefined *)((int)data_ptr + 0x3d) = 0x28;\n      do_nothing_08004a22();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_08004a22"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a24",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "decode_data_08004a24"
        },
        "FUN_08004a22": {
            "renaming": {
                "FUN_08004a22": "do_nothing_08004a22"
            },
            "code": "\nvoid do_nothing_08004a22(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a22",
            "calling": [
                "FUN_08004a24",
                "FUN_08004aec"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a22"
        },
        "FUN_08002fba": {
            "renaming": {
                "FUN_08002fba": "get_value_at_index_plus_offset_08002fba",
                "param_1": "array_ptr",
                "param_2": "index"
            },
            "code": "\nundefined4 get_value_at_index_plus_offset_08002fba(int array_ptr,int index)\n\n{\n  return *(undefined4 *)(array_ptr + (index + 0x42) * 4);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fba",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "get_value_at_index_plus_offset_08002fba"
        },
        "FUN_080090cc": {
            "renaming": {
                "FUN_080090cc": "assert_file_content_080090cc",
                "param_1": "assertion_type",
                "param_2": "assertion_value",
                "param_3": "file_content",
                "param_4": "file_size",
                "uVar1": "assertion_failure_offset",
                "puVar2": "assertion_failure_message",
                "uVar3": "current_time",
                "uVar4": "assertion_failure_line"
            },
            "code": "\nvoid assert_file_content_080090cc(undefined4 assertion_type,undefined4 assertion_value,undefined *file_content,undefined4 file_size)\n\n{\n  undefined4 assertion_failure_offset;\n  undefined *assertion_failure_message;\n  undefined8 current_time;\n  undefined4 assertion_failure_line;\n  \n  assertion_failure_offset = *(undefined4 *)(*(int *)PTR_PTR_DAT_080090f8 + 0xc);\n  assertion_failure_message = PTR_s___function__080090fc;\n  assertion_failure_line = file_size;\n  if (file_content == (undefined *)0x0) goto LAB_080090f0;\n  do {\n    FUN_08009124(assertion_failure_offset,PTR_s_assertion___s__failed__file___s__08009100,file_size,assertion_type,assertion_value,\n                 assertion_failure_message,file_content,assertion_failure_line);\n    current_time = FUN_08009b5c();\n    assertion_value = (undefined4)((ulonglong)current_time >> 0x20);\n    assertion_failure_offset = (undefined4)current_time;\nLAB_080090f0:\n    file_content = PTR_s__08009104;\n    assertion_failure_message = PTR_s__08009104;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_08009b5c",
                "FUN_08009124"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090cc",
            "calling": [
                "FUN_08008c44"
            ],
            "imported": false,
            "current_name": "assert_file_content_080090cc"
        },
        "FUN_080049e0": {
            "renaming": {
                "FUN_080049e0": "improve_code_080049e0",
                "param_1": "ptr_param",
                "puVar1": "ptr_var"
            },
            "code": "\nundefined4 improve_code_080049e0(uint **ptr_param)\n\n{\n  uint *ptr_var;\n  \n  if (*(char *)((int)ptr_param + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)ptr_param + 0x3d) = 0x28;\n  ptr_var = *ptr_param;\n  if ((*ptr_var & 1) == 0) {\n    *ptr_var = *ptr_var | 1;\n  }\n  **ptr_param = **ptr_param | 0x400;\n  (*ptr_param)[1] = (*ptr_param)[1] | 0x300;\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049e0",
            "calling": [
                "FUN_08007f7c",
                "FUN_08007ff0",
                "FUN_08007f8e",
                "FUN_08008020"
            ],
            "imported": false,
            "current_name": "improve_code_080049e0"
        },
        "FUN_08006d24": {
            "renaming": {
                "FUN_08006d24": "update_flags_08006d24",
                "param_1": "flag_ptr",
                "iVar1": "data_copy"
            },
            "code": "\nvoid update_flags_08006d24(int *flag_ptr)\n\n{\n  int data_copy;\n  \n  data_copy = DAT_08006d7c;\n  if (*flag_ptr != DAT_08006d74) {\n    if (*flag_ptr == DAT_08006d78) {\n      *(uint *)(DAT_08006d7c + 0xc) = *(uint *)(DAT_08006d7c + 0xc) | 0x400;\n      *(uint *)(data_copy + 0xc) = *(uint *)(data_copy + 0xc) & 0xfffffbff;\n      *(uint *)(data_copy + 0x18) = *(uint *)(data_copy + 0x18) & 0xfffffbff;\n      *(uint *)(data_copy + 0x18) = *(uint *)(data_copy + 0x18) & 0xfffffbff;\n    }\n    return;\n  }\n  *(uint *)(DAT_08006d7c + 0xc) = *(uint *)(DAT_08006d7c + 0xc) | 0x200;\n  *(uint *)(data_copy + 0xc) = *(uint *)(data_copy + 0xc) & 0xfffffdff;\n  *(uint *)(data_copy + 0x18) = *(uint *)(data_copy + 0x18) & 0xfffffdff;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d24",
            "calling": [
                "FUN_08003ce8"
            ],
            "imported": false,
            "current_name": "update_flags_08006d24"
        },
        "FUN_080098d8": {
            "renaming": {
                "FUN_080098d8": "execute_function_080098d8",
                "param_1": "input_param",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "iVar1": "pointer_to_data",
                "uVar2": "input_param_copy",
                "uStack_c": "input_param2_copy",
                "uStack_8": "input_param3_copy",
                "uStack_4": "input_param4_copy"
            },
            "code": "\nvoid execute_function_080098d8(undefined4 input_param,undefined4 input_param2,undefined4 input_param3,undefined4 input_param4)\n\n{\n  int pointer_to_data;\n  undefined4 input_param_copy;\n  undefined4 input_param2_copy;\n  undefined4 input_param3_copy;\n  undefined4 input_param4_copy;\n  \n  pointer_to_data = *(int *)PTR_PTR_DAT_08009904;\n  input_param_copy = input_param;\n  input_param2_copy = input_param2;\n  input_param3_copy = input_param3;\n  input_param4_copy = input_param4;\n  if ((pointer_to_data != 0) && (*(int *)(pointer_to_data + 0x18) == 0)) {\n    FUN_08009d50(pointer_to_data);\n  }\n  FUN_0800937c(pointer_to_data,*(undefined4 *)(pointer_to_data + 8),input_param,&input_param2_copy,input_param_copy,&input_param2_copy);\n  return;\n}\n\n",
            "called": [
                "FUN_08009d50",
                "FUN_0800937c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098d8",
            "calling": [
                "FUN_08007544",
                "FUN_08007594",
                "FUN_08008078",
                "FUN_080077b0",
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "execute_function_080098d8"
        },
        "FUN_08009270": {
            "renaming": {
                "FUN_08009270": "allocate_memory_block_08009270",
                "param_1": "memory_block_ptr",
                "param_2": "requested_size",
                "puVar1": "unused_ptr",
                "uVar2": "result",
                "puVar3": "current_block_ptr",
                "iVar4": "difference",
                "puVar5": "previous_block_ptr",
                "uVar6": "block_size_difference",
                "puVar7": "block_to_use_ptr",
                "uVar8": "allocated_size"
            },
            "code": "\nuint allocate_memory_block_08009270(undefined4 *memory_block_ptr,uint requested_size)\n\n{\n  undefined *unused_ptr;\n  undefined4 result;\n  uint *current_block_ptr;\n  int difference;\n  uint *previous_block_ptr;\n  uint block_size_difference;\n  uint *block_to_use_ptr;\n  uint allocated_size;\n  \n  allocated_size = (requested_size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < requested_size)) {\n    *memory_block_ptr = 0xc;\n  }\n  else {\n    do_nothing_08009f48();\n    unused_ptr = PTR_DAT_08009328;\n    current_block_ptr = *(uint **)PTR_DAT_08009324;\n    block_to_use_ptr = *(uint **)PTR_DAT_08009324;\n    while (previous_block_ptr = current_block_ptr, previous_block_ptr != (uint *)0x0) {\n      block_size_difference = *previous_block_ptr - allocated_size;\n      if (-1 < (int)block_size_difference) {\n        if (block_size_difference < 0xc) {\n          if (block_to_use_ptr == previous_block_ptr) {\n            allocated_size = block_to_use_ptr[1];\n            *(uint *)PTR_DAT_08009324 = allocated_size;\n          }\n          else {\n            allocated_size = previous_block_ptr[1];\n          }\n          if (block_to_use_ptr != previous_block_ptr) {\n            block_to_use_ptr[1] = allocated_size;\n            block_to_use_ptr = previous_block_ptr;\n          }\n        }\n        else {\n          *previous_block_ptr = block_size_difference;\n          *(uint *)((int)previous_block_ptr + block_size_difference) = allocated_size;\n          block_to_use_ptr = (uint *)((int)previous_block_ptr + block_size_difference);\n        }\n        goto LAB_080092d4;\n      }\n      block_to_use_ptr = previous_block_ptr;\n      current_block_ptr = (uint *)previous_block_ptr[1];\n    }\n    if (*(int *)PTR_DAT_08009328 == 0) {\n      result = FUN_08009918(memory_block_ptr);\n      *(undefined4 *)unused_ptr = result;\n    }\n    current_block_ptr = (uint *)FUN_08009918(memory_block_ptr,allocated_size);\n    if ((current_block_ptr != (uint *)0xffffffff) &&\n       ((block_to_use_ptr = (uint *)((int)current_block_ptr + 3U & 0xfffffffc), current_block_ptr == block_to_use_ptr ||\n        (difference = FUN_08009918(memory_block_ptr,(int)block_to_use_ptr - (int)current_block_ptr), difference != -1)))) {\n      *block_to_use_ptr = allocated_size;\nLAB_080092d4:\n      do_nothing_08009f4a(memory_block_ptr);\n      allocated_size = (int)block_to_use_ptr + 0xbU & 0xfffffff8;\n      difference = allocated_size - (int)(block_to_use_ptr + 1);\n      if (difference != 0) {\n        *(int *)((int)block_to_use_ptr + difference) = -difference;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *memory_block_ptr = 0xc;\n    do_nothing_08009f4a(memory_block_ptr);\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_08009918",
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009270",
            "calling": [
                "FUN_08009d24",
                "FUN_08009eac",
                "FUN_08009908",
                "FUN_08009190"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08009270"
        },
        "FUN_08005e6c": {
            "renaming": {
                "FUN_08005e6c": "do_nothing_08005e6c"
            },
            "code": "\nvoid do_nothing_08005e6c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6c",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e6c"
        },
        "FUN_08008500": {
            "renaming": {
                "FUN_08008500": "check_valid_input_08008500",
                "param_1": "input_value",
                "param_2": "input_length",
                "cVar1": "char_value",
                "iVar2": "initial_time",
                "iVar3": "result",
                "uVar4": "index"
            },
            "code": "\nuint check_valid_input_08008500(undefined4 input_value,uint input_length)\n\n{\n  char char_value;\n  int initial_time;\n  int result;\n  uint index;\n  \n  initial_time = FUN_08003760();\n  char_value = PTR_DAT_080085a8[1];\n  result = FUN_08007320((int)char_value,PTR_DAT_080085ac);\n  if (result == 0) {\n    return 0;\n  }\n  index = 0;\n  while ((index < 5 &&\n         ((*(int *)(PTR_DAT_080085b0 + index * 4) == 0 ||\n          (result = FUN_08007320((int)char_value,PTR_DAT_080085ac),\n          **(int **)(PTR_DAT_080085b0 + index * 4) != result))))) {\n    index = index + 1 & 0xff;\n  }\n  if (4 < index) {\n    if ((4 < (byte)PTR_DAT_080085b4[0x44]) && (FUN_080084b0(), 4 < (byte)PTR_DAT_080085b4[0x44])) {\n      return 0;\n    }\n    index = (uint)(byte)PTR_DAT_080085b4[0x44];\n  }\n  do {\n    result = FUN_080067ac(*(undefined4 *)(PTR_DAT_080085b0 + index * 4),input_value,input_length & 0xffff,1000\n                        );\n    if (result == 0) {\n      return input_length;\n    }\n    result = FUN_08003760();\n  } while ((uint)(result - initial_time) < 1000);\n  return 0;\n}\n\n",
            "called": [
                "FUN_08003760",
                "FUN_08007320",
                "FUN_080067ac",
                "FUN_080084b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008500",
            "calling": [
                "FUN_0800885c"
            ],
            "imported": false,
            "current_name": "check_valid_input_08008500"
        },
        "FUN_080048c8": {
            "renaming": {
                "FUN_080048c8": "validate_input_080048c8",
                "param_1": "input_ptr",
                "param_2": "data_ptr",
                "param_3": "data_size",
                "param_4": "output_ptr",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "code": "\nundefined4 validate_input_080048c8(uint **input_ptr,uint *data_ptr,int data_size,uint *output_ptr)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)input_ptr + 0x3d) == '(') {\n    if (data_ptr == (uint *)0x0) {\n      result = 1;\n    }\n    else if (data_size == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_ptr + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_ptr + 0xf) = 1;\n      ptr = *input_ptr;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **input_ptr = **input_ptr & 0xfffff7ff;\n      *(undefined *)((int)input_ptr + 0x3d) = 0x29;\n      *(undefined *)((int)input_ptr + 0x3e) = 0x20;\n      result = 0;\n      input_ptr[0x10] = (uint *)0x0;\n      input_ptr[9] = data_ptr;\n      *(short *)((int)input_ptr + 0x2a) = (short)data_size;\n      input_ptr[0xb] = output_ptr;\n      *(undefined2 *)(input_ptr + 10) = *(undefined2 *)((int)input_ptr + 0x2a);\n      *(undefined *)(input_ptr + 0xf) = 0;\n      (*input_ptr)[1] = (*input_ptr)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048c8",
            "calling": [
                "FUN_08007fa0"
            ],
            "imported": false,
            "current_name": "validate_input_080048c8"
        },
        "FUN_08009954": {
            "renaming": {
                "FUN_08009954": "copy_string_08009954",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "n",
                "cVar1": "current_char",
                "iVar2": "remaining_chars",
                "pcVar3": "dest_ptr"
            },
            "code": "\nvoid copy_string_08009954(char *dest,char *src,int n)\n\n{\n  char current_char;\n  int remaining_chars;\n  char *dest_ptr;\n  \n  do {\n    dest_ptr = dest;\n    remaining_chars = n;\n    if (remaining_chars == 0) {\n      return;\n    }\n    current_char = *src;\n    dest = dest_ptr + 1;\n    *dest_ptr = current_char;\n    src = src + 1;\n    n = remaining_chars + -1;\n  } while (current_char != '\\0');\n  for (; dest != dest_ptr + remaining_chars; dest = dest + 1) {\n    *dest = '\\0';\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009954",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "copy_string_08009954"
        },
        "FUN_08005aa4": {
            "renaming": {
                "FUN_08005aa4": "update_config_settings_08005aa4",
                "param_1": "config_settings",
                "puVar1": "flag_ptr",
                "iVar2": "index",
                "iVar3": "elapsed_time",
                "uVar4": "mask",
                "bVar5": "flag"
            },
            "code": "\nundefined4 update_config_settings_08005aa4(uint *config_settings)\n\n{\n  undefined4 *flag_ptr;\n  int index;\n  int elapsed_time;\n  uint mask;\n  bool flag;\n  \n  if ((*config_settings & 1) != 0) {\n    flag = (*(uint *)(DAT_08005bac + 0x1c) & 0x10000000) == 0;\n    if (flag) {\n      *(uint *)(DAT_08005bac + 0x1c) = *(uint *)(DAT_08005bac + 0x1c) | 0x10000000;\n    }\n    if ((*DAT_08005bb0 & 0x100) == 0) {\n      *DAT_08005bb0 = *DAT_08005bb0 | 0x100;\n      index = FUN_08003760();\n      while ((*DAT_08005bb0 & 0x100) == 0) {\n        elapsed_time = FUN_08003760();\n        if (100 < (uint)(elapsed_time - index)) {\n          return 3;\n        }\n      }\n    }\n    flag_ptr = DAT_08005bb4;\n    index = DAT_08005bac;\n    mask = *(uint *)(DAT_08005bac + 0x20) & 0x300;\n    if ((mask != 0) && (mask != (config_settings[1] & 0x300))) {\n      mask = *(uint *)(DAT_08005bac + 0x20);\n      *DAT_08005bb4 = 1;\n      *flag_ptr = 0;\n      *(uint *)(index + 0x20) = mask & 0xfffffcff;\n      if ((mask & 1) != 0) {\n        index = FUN_08003760();\n        while ((*(uint *)(DAT_08005bac + 0x20) & 2) == 0) {\n          elapsed_time = FUN_08003760();\n          if (5000 < (uint)(elapsed_time - index)) {\n            return 3;\n          }\n        }\n      }\n    }\n    index = DAT_08005bac;\n    *(uint *)(DAT_08005bac + 0x20) = *(uint *)(DAT_08005bac + 0x20) & 0xfffffcff | config_settings[1];\n    if (flag) {\n      *(uint *)(index + 0x1c) = *(uint *)(index + 0x1c) & 0xefffffff;\n    }\n  }\n  if ((*config_settings & 2) != 0) {\n    *(uint *)(DAT_08005bac + 4) = *(uint *)(DAT_08005bac + 4) & 0xffff3fff | config_settings[2];\n  }\n  if ((*config_settings & 0x10) != 0) {\n    *(uint *)(DAT_08005bac + 4) = *(uint *)(DAT_08005bac + 4) & 0xffbfffff | config_settings[3];\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005aa4",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "update_config_settings_08005aa4"
        },
        "FUN_08005e6e": {
            "renaming": {
                "FUN_08005e6e": "check_flags_and_execute_08005e6e",
                "param_1": "input_array",
                "iVar1": "array_element_value",
                "do_nothing_08005e6a": "execute_case_1",
                "do_nothing_08005e68": "execute_case_2",
                "do_nothing_080064ae": "execute_case_5",
                "do_nothing_08005e6c": "execute_case_6",
                "do_nothing_080064ac": "execute_case_7"
            },
            "code": "\nvoid check_flags_and_execute_08005e6e(int *input_array)\n\n{\n  int array_element_value;\n  \n  array_element_value = *input_array;\n  if (((*(uint *)(array_element_value + 0x10) & 2) != 0) && ((*(uint *)(array_element_value + 0xc) & 2) != 0)) {\n    *(undefined4 *)(array_element_value + 0x10) = 0xfffffffd;\n    *(undefined *)(input_array + 7) = 1;\n    if ((*(uint *)(*input_array + 0x18) & 3) == 0) {\n      FUN_0800771c();\n      do_nothing_08005e6a(input_array);\n    }\n    else {\n      do_nothing_08005e68();\n    }\n    *(undefined *)(input_array + 7) = 0;\n  }\n  array_element_value = *input_array;\n  if (((*(uint *)(array_element_value + 0x10) & 4) != 0) && ((*(uint *)(array_element_value + 0xc) & 4) != 0)) {\n    *(undefined4 *)(array_element_value + 0x10) = 0xfffffffb;\n    *(undefined *)(input_array + 7) = 2;\n    if ((*(uint *)(*input_array + 0x18) & 0x300) == 0) {\n      FUN_0800771c(input_array);\n      do_nothing_08005e6a(input_array);\n    }\n    else {\n      do_nothing_08005e68(input_array);\n    }\n    *(undefined *)(input_array + 7) = 0;\n  }\n  array_element_value = *input_array;\n  if (((*(uint *)(array_element_value + 0x10) & 8) != 0) && ((*(uint *)(array_element_value + 0xc) & 8) != 0)) {\n    *(undefined4 *)(array_element_value + 0x10) = 0xfffffff7;\n    *(undefined *)(input_array + 7) = 4;\n    if ((*(uint *)(*input_array + 0x1c) & 3) == 0) {\n      FUN_0800771c(input_array);\n      do_nothing_08005e6a(input_array);\n    }\n    else {\n      do_nothing_08005e68(input_array);\n    }\n    *(undefined *)(input_array + 7) = 0;\n  }\n  array_element_value = *input_array;\n  if (((*(uint *)(array_element_value + 0x10) & 0x10) != 0) && ((*(uint *)(array_element_value + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(array_element_value + 0x10) = 0xffffffef;\n    *(undefined *)(input_array + 7) = 8;\n    if ((*(uint *)(*input_array + 0x1c) & 0x300) == 0) {\n      FUN_0800771c(input_array);\n      do_nothing_08005e6a(input_array);\n    }\n    else {\n      do_nothing_08005e68(input_array);\n    }\n    *(undefined *)(input_array + 7) = 0;\n  }\n  array_element_value = *input_array;\n  if (((*(uint *)(array_element_value + 0x10) & 1) != 0) && ((*(uint *)(array_element_value + 0xc) & 1) != 0)) {\n    *(undefined4 *)(array_element_value + 0x10) = 0xfffffffe;\n    FUN_08007736(input_array);\n  }\n  array_element_value = *input_array;\n  if (((*(uint *)(array_element_value + 0x10) & 0x80) != 0) && ((*(uint *)(array_element_value + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(array_element_value + 0x10) = 0xffffff7f;\n    do_nothing_080064ae(input_array);\n  }\n  array_element_value = *input_array;\n  if (((*(uint *)(array_element_value + 0x10) & 0x40) != 0) && ((*(uint *)(array_element_value + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(array_element_value + 0x10) = 0xffffffbf;\n    do_nothing_08005e6c(input_array);\n  }\n  array_element_value = *input_array;\n  if (((*(uint *)(array_element_value + 0x10) & 0x20) != 0) && ((*(uint *)(array_element_value + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(array_element_value + 0x10) = 0xffffffdf;\n    do_nothing_080064ac(input_array);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08005e6c",
                "FUN_0800771c",
                "FUN_08005e6a",
                "FUN_08005e68",
                "FUN_080064ae",
                "FUN_08007736",
                "FUN_080064ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6e",
            "calling": [],
            "imported": false,
            "current_name": "check_flags_and_execute_08005e6e"
        },
        "FUN_08004024": {
            "renaming": {
                "FUN_08004024": "set_flag_08004024",
                "param_1": "flag_value"
            },
            "code": "\nvoid set_flag_08004024(int flag_value)\n\n{\n  if (flag_value != 4) {\n    *DAT_08004040 = *DAT_08004040 & 0xfffffffb;\n    return;\n  }\n  *DAT_08004040 = *DAT_08004040 | 4;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004024",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "set_flag_08004024"
        },
        "FUN_08005e6a": {
            "renaming": {
                "FUN_08005e6a": "do_nothing_08005e6a"
            },
            "code": "\nvoid do_nothing_08005e6a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6a",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e6a"
        },
        "FUN_08002400": {
            "renaming": {
                "FUN_08002400": "check_for_bit_set_08002400",
                "param_1": "input_value",
                "uVar1": "counter"
            },
            "code": "\nundefined4 check_for_bit_set_08002400(int input_value)\n\n{\n  uint counter;\n  \n  counter = 0;\n  while( true ) {\n    if (0xb < counter) {\n      return 0;\n    }\n    if ((PTR_DAT_08002428[(input_value * 0xc + counter) * 8] & 0x40) != 0) break;\n    counter = counter + 1 & 0xff;\n  }\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002400",
            "calling": [
                "FUN_08002644",
                "FUN_080025ac"
            ],
            "imported": false,
            "current_name": "check_for_bit_set_08002400"
        },
        "FUN_08004a1e": {
            "renaming": {
                "FUN_08004a1e": "do_nothing_08004a1e"
            },
            "code": "\nvoid do_nothing_08004a1e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a1e",
            "calling": [
                "FUN_08004b82",
                "FUN_08004ccc"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a1e"
        },
        "FUN_08000588": {
            "renaming": {
                "FUN_08000588": "process_character_08000588",
                "param_1": "index",
                "cVar1": "current_char",
                "cVar2": "target_char",
                "puVar3": "char_array"
            },
            "code": "\nvoid process_character_08000588(int index)\n\n{\n  char current_char;\n  char target_char;\n  undefined *char_array;\n  \n  char_array = PTR_DAT_080005cc;\n  FUN_08002644(PTR_DAT_080005d0 + (uint)(byte)PTR_DAT_080005cc[index] * 3);\n  target_char = char_array[index];\n  current_char = *PTR_DAT_080005d4;\n  if ((target_char == current_char) && (current_char != '\\0')) {\n    *PTR_DAT_080005d4 = current_char + -1;\n  }\n  else if (current_char != '\\0') {\n    current_char = *PTR_DAT_080005d8;\n    *PTR_DAT_080005d8 = current_char + 1U;\n    PTR_DAT_080005dc[(byte)(current_char + 1U) - 1] = target_char;\n  }\n  PTR_DAT_080005cc[index] = 0xff;\n  return;\n}\n\n",
            "called": [
                "FUN_08002644"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000588",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "process_character_08000588"
        },
        "FUN_08002644": {
            "renaming": {
                "FUN_08002644": "process_byte_08002644",
                "param_1": "input_byte",
                "bVar1": "modified_byte",
                "uVar2": "byte_value",
                "iVar3": "result"
            },
            "code": "\nvoid process_byte_08002644(byte *input_byte,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  byte modified_byte;\n  uint byte_value;\n  int result;\n  \n  byte_value = (uint)*input_byte;\n  modified_byte = PTR_DAT_08002670[byte_value * 8];\n  PTR_DAT_08002670[byte_value * 8] = modified_byte & 0xbf;\n  result = FUN_08002400((uint)((ulonglong)DAT_08002674 * (ulonglong)byte_value >> 0x23),param_2,\n                       modified_byte & 0xbf,(int)((ulonglong)DAT_08002674 * (ulonglong)byte_value),param_4);\n  if (result == 0) {\n    FUN_08002578(PTR_DAT_08002678);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08002578",
                "FUN_08002400"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002644",
            "calling": [
                "FUN_08000588"
            ],
            "imported": false,
            "current_name": "process_byte_08002644"
        },
        "FUN_08008868": {
            "renaming": {
                "FUN_08008868": "wait_forever_08008868"
            },
            "code": "\nvoid wait_forever_08008868(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "FUN_08008868"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008868",
            "calling": [
                "FUN_08009b5c",
                "FUN_08008868"
            ],
            "imported": false,
            "current_name": "wait_forever_08008868"
        },
        "FUN_080036ac": {
            "renaming": {
                "FUN_080036ac": "check_parameter_value_080036ac",
                "param_1": "input_value",
                "uVar1": "result"
            },
            "code": "\nuint check_parameter_value_080036ac(int input_value)\n\n{\n  uint result;\n  \n  if ((uint)(input_value << 0x18) >> 0x1c < 5) {\n    for (result = 0; (result < 0x3c && (input_value != (char)PTR_DAT_080036d0[result])); result = result + 1)\n    {\n    }\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036ac",
            "calling": [
                "FUN_080022f8",
                "FUN_08000aec",
                "FUN_08000ef8",
                "FUN_08001cd0",
                "FUN_08000a64",
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "imported": false,
            "current_name": "check_parameter_value_080036ac"
        },
        "FUN_08002f1e": {
            "renaming": {
                "FUN_08002f1e": "execute_function_pointer_08002f1e",
                "param_1": "function_pointer_address"
            },
            "code": "\nvoid execute_function_pointer_08002f1e(int function_pointer_address)\n\n{\n  (**(code **)**(undefined4 **)(function_pointer_address + 0xc0))();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f1e",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "execute_function_pointer_08002f1e"
        },
        "FUN_0800885c": {
            "renaming": {
                "FUN_0800885c": "execute_function_0800885c",
                "param_1": "argument_1",
                "param_2": "argument_2",
                "param_3": "argument_3",
                "param_4": "argument_4"
            },
            "code": "\nvoid execute_function_0800885c(undefined4 argument_1,undefined4 argument_2,undefined4 argument_3,undefined4 argument_4)\n\n{\n  FUN_08008500(argument_2,argument_3,argument_3,argument_4,argument_4);\n  return;\n}\n\n",
            "called": [
                "FUN_08008500"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800885c",
            "calling": [
                "FUN_0800a042"
            ],
            "imported": false,
            "current_name": "execute_function_0800885c"
        },
        "FUN_0800643c": {
            "renaming": {
                "FUN_0800643c": "set_bit_and_enable_interrupts_0800643c",
                "param_1": "ptr_to_uint_ptr",
                "param_2": "value_to_set"
            },
            "code": "\nundefined4 set_bit_and_enable_interrupts_0800643c(uint **ptr_to_uint_ptr,undefined4 value_to_set)\n\n{\n  FUN_08006420(*ptr_to_uint_ptr,value_to_set,4);\n  (*ptr_to_uint_ptr)[0x11] = (*ptr_to_uint_ptr)[0x11] | 0x8000;\n  **ptr_to_uint_ptr = **ptr_to_uint_ptr | 1;\n  return 0;\n}\n\n",
            "called": [
                "FUN_08006420"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800643c",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "set_bit_and_enable_interrupts_0800643c"
        },
        "FUN_08002fca": {
            "renaming": {
                "FUN_08002fca": "print_alternating_bits_08002fca",
                "param_1": "unused_param",
                "param_2": "output_stream",
                "param_3": "num_bits",
                "param_4": "bit_0",
                "param_5": "bit_1",
                "uVar1": "bit_counter"
            },
            "code": "\nvoid print_alternating_bits_08002fca(undefined4 unused_param,undefined4 output_stream,int num_bits,undefined4 bit_0,\n                 undefined4 bit_1)\n\n{\n  uint bit_counter;\n  \n  for (bit_counter = 0; (int)bit_counter < num_bits; bit_counter = bit_counter + 1 & 0xff) {\n    do_nothing_08008ac4(bit_1);\n    FUN_08008a24(output_stream,1);\n    do_nothing_08008ac4(bit_0);\n    FUN_08008a24(output_stream,0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08008ac4",
                "FUN_08008a24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fca",
            "calling": [
                "FUN_08003002"
            ],
            "imported": false,
            "current_name": "print_alternating_bits_08002fca"
        },
        "FUN_08009c7c": {
            "renaming": {
                "FUN_08009c7c": "process_data_08009c7c",
                "param_1": "data_array",
                "param_2": "param_array",
                "uVar1": "return_value",
                "iVar2": "param_size",
                "piVar3": "sub_param_array",
                "uVar4": "ushort_value",
                "uVar5": "flag_value",
                "iVar6": "temp_value",
                "unaff_r4": "unused_register4",
                "unaff_r5": "unused_register5",
                "pcVar7": "callback_function",
                "iVar8": "loop_count",
                "uVar9": "temp_uint_value",
                "UNRECOVERED_JUMPTABLE_00": "error_handler",
                "bVar10": "bool_value"
            },
            "code": "\nundefined4 process_data_08009c7c(uint *data_array,int *param_array)\n\n{\n  undefined4 return_value;\n  int param_size;\n  int *sub_param_array;\n  uint ushort_value;\n  ushort flag_value;\n  int temp_value;\n  undefined4 unused_register4;\n  undefined4 unused_register5;\n  code *callback_function;\n  int loop_count;\n  uint temp_uint_value;\n  code *error_handler;\n  bool bool_value;\n  \n  if (param_array[4] != 0) {\n    if ((data_array != (uint *)0x0) && (data_array[6] == 0)) {\n      FUN_08009d50();\n    }\n    if (param_array == (int *)PTR_DAT_08009cc4) {\n      param_array = (int *)data_array[1];\n    }\n    else if (param_array == (int *)PTR_DAT_08009cc8) {\n      param_array = (int *)data_array[2];\n    }\n    else if (param_array == (int *)PTR_DAT_08009ccc) {\n      param_array = (int *)data_array[3];\n    }\n    if (*(short *)(param_array + 3) != 0) {\n      flag_value = *(ushort *)(param_array + 3);\n      ushort_value = (uint)flag_value;\n      if ((int)(ushort_value << 0x1c) < 0) {\n        param_size = param_array[4];\n        if (param_size != 0) {\n          temp_value = ushort_value << 0x1e;\n          bool_value = temp_value != 0;\n          if (bool_value) {\n            temp_value = 0;\n          }\n          loop_count = *param_array;\n          if (!bool_value) {\n            temp_value = param_array[5];\n          }\n          *param_array = param_size;\n          param_array[2] = temp_value;\n          for (loop_count = loop_count - param_size; 0 < loop_count; loop_count = loop_count - temp_value) {\n            temp_value = (*(code *)param_array[10])(data_array,param_array[8],param_size,loop_count,unused_register4,unused_register5);\n            if (temp_value < 1) {\n              flag_value = *(ushort *)(param_array + 3);\n              goto LAB_08009c62;\n            }\n            param_size = param_size + temp_value;\n          }\n        }\n      }\n      else if (((0 < param_array[1]) || (0 < param_array[0x10])) &&\n              (callback_function = (code *)param_array[0xb], callback_function != (code *)0x0)) {\n        temp_uint_value = *data_array;\n        *data_array = 0;\n        if ((flag_value & 0x1000) == 0) {\n          param_size = (*callback_function)(data_array,param_array[8],ushort_value & 0x1000,1);\n          if ((param_size == -1) && (ushort_value = *data_array, ushort_value != 0)) {\n            if ((ushort_value != 0x1d) && (ushort_value != 0x16)) {\n              *(ushort *)(param_array + 3) = *(ushort *)(param_array + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              return_value = (*error_handler)();\n              return return_value;\n            }\n            *data_array = temp_uint_value;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          param_size = param_array[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_array + 3) << 0x1d) < 0) &&\n           (param_size = param_size - param_array[1], param_array[0xd] != 0)) {\n          param_size = param_size - param_array[0x10];\n        }\n        param_size = (*(code *)param_array[0xb])(data_array,param_array[8],param_size,0);\n        flag_value = *(ushort *)(param_array + 3);\n        if ((param_size == -1) &&\n           ((0x1d < *data_array || (-1 < (int)((DAT_08009c78 >> (*data_array & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(param_array + 3) = flag_value | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          return_value = (*error_handler)(0xffffffff);\n          return return_value;\n        }\n        param_array[1] = 0;\n        *param_array = param_array[4];\n        if (((int)((uint)flag_value << 0x13) < 0) && ((param_size != -1 || (*data_array == 0)))) {\n          param_array[0x15] = param_size;\n        }\n        sub_param_array = (int *)param_array[0xd];\n        *data_array = temp_uint_value;\n        if (sub_param_array != (int *)0x0) {\n          if (sub_param_array != param_array + 0x11) {\n            FUN_080091d8(data_array);\n          }\n          param_array[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          return_value = (*error_handler)();\n          return return_value;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      return_value = (*error_handler)(0);\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009c7c",
            "calling": [
                "FUN_0800932c"
            ],
            "imported": false,
            "current_name": "process_data_08009c7c"
        },
        "FUN_08009b5c": {
            "renaming": {
                "FUN_08009b5c": "process_data_08009b5c",
                "puVar1": "data_pointer",
                "iVar2": "bytes_remaining",
                "piVar3": "data_info",
                "piVar4": "data_info_end",
                "uVar5": "data_info_flags",
                "uVar6": "data_info_flags_copy",
                "iVar7": "data_info_offset",
                "pcVar8": "data_info_handler",
                "iVar9": "data_info_length",
                "uVar10": "original_data_info_flags",
                "UNRECOVERED_JUMPTABLE_00": "error_handler",
                "bVar11": "flag",
                "uVar12": "data_info_and_pointer"
            },
            "code": "\nvoid process_data_08009b5c(void)\n\n{\n  uint *data_pointer;\n  int bytes_remaining;\n  int *data_info;\n  int *data_info_end;\n  uint data_info_flags;\n  ushort data_info_flags_copy;\n  int data_info_offset;\n  code *data_info_handler;\n  int data_info_length;\n  uint original_data_info_flags;\n  code *error_handler;\n  bool flag;\n  undefined8 data_info_and_pointer;\n  \n  FUN_08009fe8(6);\n  error_handler = (code *)0x8009b6b;\n  data_info_and_pointer = FUN_08008868(1);\n  data_info = (int *)((ulonglong)data_info_and_pointer >> 0x20);\n  data_pointer = (uint *)data_info_and_pointer;\n  data_info_flags_copy = *(ushort *)(data_info + 3);\n  data_info_flags = (uint)data_info_flags_copy;\n  if ((int)(data_info_flags << 0x1c) < 0) {\n    bytes_remaining = data_info[4];\n    if (bytes_remaining != 0) {\n      data_info_offset = data_info_flags << 0x1e;\n      flag = data_info_offset != 0;\n      if (flag) {\n        data_info_offset = 0;\n      }\n      data_info_length = *data_info;\n      if (!flag) {\n        data_info_offset = data_info[5];\n      }\n      *data_info = bytes_remaining;\n      data_info[2] = data_info_offset;\n      for (data_info_length = data_info_length - bytes_remaining; 0 < data_info_length; data_info_length = data_info_length - data_info_offset) {\n        data_info_offset = (*(code *)data_info[10])(data_pointer,data_info[8],bytes_remaining,data_info_length);\n        if (data_info_offset < 1) {\n          data_info_flags_copy = *(ushort *)(data_info + 3);\n          goto LAB_08009c62;\n        }\n        bytes_remaining = bytes_remaining + data_info_offset;\n      }\n    }\n  }\n  else if (((0 < data_info[1]) || (0 < data_info[0x10])) &&\n          (data_info_handler = (code *)data_info[0xb], data_info_handler != (code *)0x0)) {\n    original_data_info_flags = *data_pointer;\n    *data_pointer = 0;\n    if ((data_info_flags_copy & 0x1000) == 0) {\n      bytes_remaining = (*data_info_handler)(data_pointer,data_info[8],data_info_flags & 0x1000,1);\n      if ((bytes_remaining == -1) && (data_info_flags = *data_pointer, data_info_flags != 0)) {\n        if ((data_info_flags != 0x1d) && (data_info_flags != 0x16)) {\n          *(ushort *)(data_info + 3) = *(ushort *)(data_info + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*error_handler)();\n          return;\n        }\n        *data_pointer = original_data_info_flags;\n        goto LAB_08009b86;\n      }\n    }\n    else {\n      bytes_remaining = data_info[0x15];\n    }\n    if (((int)((uint)*(ushort *)(data_info + 3) << 0x1d) < 0) &&\n       (bytes_remaining = bytes_remaining - data_info[1], data_info[0xd] != 0)) {\n      bytes_remaining = bytes_remaining - data_info[0x10];\n    }\n    bytes_remaining = (*(code *)data_info[0xb])(data_pointer,data_info[8],bytes_remaining,0);\n    data_info_flags_copy = *(ushort *)(data_info + 3);\n    if ((bytes_remaining == -1) &&\n       ((0x1d < *data_pointer || (-1 < (int)((DAT_08009c78 >> (*data_pointer & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n      *(ushort *)(data_info + 3) = data_info_flags_copy | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*error_handler)(0xffffffff);\n      return;\n    }\n    data_info[1] = 0;\n    *data_info = data_info[4];\n    if (((int)((uint)data_info_flags_copy << 0x13) < 0) && ((bytes_remaining != -1 || (*data_pointer == 0)))) {\n      data_info[0x15] = bytes_remaining;\n    }\n    data_info_end = (int *)data_info[0xd];\n    *data_pointer = original_data_info_flags;\n    if (data_info_end != (int *)0x0) {\n      if (data_info_end != data_info + 0x11) {\n        FUN_080091d8(data_pointer);\n      }\n      data_info[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*error_handler)();\n      return;\n    }\n  }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*error_handler)(0);\n  return;\n}\n\n",
            "called": [
                "FUN_080091d8",
                "FUN_08008868",
                "FUN_08009fe8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009b5c",
            "calling": [
                "FUN_0800a18c",
                "FUN_080090cc"
            ],
            "imported": false,
            "current_name": "process_data_08009b5c"
        },
        "FUN_0800021a": {
            "renaming": {
                "FUN_0800021a": "process_data_0800021a",
                "param_1": "data_index",
                "param_2": "output_param",
                "param_3": "input_param_1",
                "param_4": "input_param_2",
                "bVar1": "is_valid",
                "iVar2": "result"
            },
            "code": "\nvoid process_data_0800021a(uint data_index,undefined4 output_param,undefined4 input_param_1,undefined4 input_param_2)\n\n{\n  bool is_valid;\n  int result;\n  \n  result = FUN_08002fa0(PTR_DAT_080002d8,data_index,input_param_1,input_param_2,input_param_2);\n  if (result == 3) {\n    if (data_index < 0x3c) {\n      if (PTR_DAT_080002dc[data_index] == -1) {\n        result = 0;\n      }\n      else {\n        result = FUN_080036ac();\n        if (result == 0) {\n          result = 0;\n        }\n        else {\n          result = FUN_080036ac((int)(char)PTR_DAT_080002dc[data_index]);\n          if (result == 1) {\n            result = 0;\n          }\n          else {\n            result = FUN_0800738a((int)(char)PTR_DAT_080002dc[data_index],PTR_DAT_080002e8);\n          }\n        }\n      }\n    }\n    else {\n      result = 0;\n    }\n    if (result != 0) {\n      FUN_080088e0(data_index,output_param);\n    }\n    FUN_08002fc2(PTR_DAT_080002d8,data_index,output_param);\n  }\n  else if (result == 4) {\n    if (data_index < 0x3c) {\n      if (PTR_DAT_080002dc[data_index] == -1) {\n        is_valid = false;\n      }\n      else {\n        result = FUN_080036ac();\n        if (result == 0) {\n          is_valid = false;\n        }\n        else {\n          result = FUN_080036ac((int)(char)PTR_DAT_080002dc[data_index]);\n          if (result == 1) {\n            is_valid = false;\n          }\n          else {\n            is_valid = true;\n          }\n        }\n      }\n    }\n    else {\n      is_valid = false;\n    }\n    if (is_valid) {\n      FUN_080026b0(PTR_DAT_080002e4 + (uint)(byte)PTR_DAT_080002e0[data_index] * 3,output_param);\n    }\n    FUN_08002fc2(PTR_DAT_080002d8,data_index,output_param);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08002fc2",
                "FUN_080026b0",
                "FUN_080036ac",
                "FUN_080088e0",
                "FUN_0800738a",
                "FUN_08002fa0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800021a",
            "calling": [
                "FUN_08000214"
            ],
            "imported": false,
            "current_name": "process_data_0800021a"
        },
        "FUN_08008a6c": {
            "renaming": {
                "FUN_08008a6c": "get_character_08008a6c",
                "param_1": "char_index",
                "cVar1": "result",
                "iVar2": "function_result",
                "uVar3": "shifted_value",
                "uVar4": "data_value"
            },
            "code": "\nchar get_character_08008a6c(uint char_index)\n\n{\n  char result;\n  int function_result;\n  undefined4 shifted_value;\n  uint data_value;\n  \n  if (char_index < 0x3c) {\n    data_value = (uint)(char)PTR_DAT_08008ab4[char_index];\n  }\n  else {\n    data_value = 0xffffffff;\n  }\n  if (data_value == 0xffffffff) {\n    result = '\\0';\n  }\n  else {\n    function_result = FUN_08006b28(data_value,PTR_DAT_08008ab8);\n    if (function_result == 0) {\n      result = '\\0';\n    }\n    else {\n      shifted_value = FUN_08006b7c((data_value << 0x18) >> 0x1c);\n      result = FUN_080072f0(shifted_value,1 << (data_value & 0xf) & 0xffff);\n    }\n  }\n  if (result != '\\0') {\n    result = '\\x01';\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_08006b28",
                "FUN_08006b7c",
                "FUN_080072f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a6c",
            "calling": [
                "FUN_08000ef8"
            ],
            "imported": false,
            "current_name": "get_character_08008a6c"
        },
        "FUN_080026f8": {
            "renaming": {
                "FUN_080026f8": "byte_to_unsigned_int_080026f8",
                "param_1": "byteArray",
                "uint": "unsignedInt"
            },
            "code": "\nunsignedInt byteToUnsignedInt_080026f8(byte *byteArray)\n\n{\n  return ((unsignedInt)(byte)PTR_DAT_08002708[(unsignedInt)*byteArray * 8] << 0x19) >> 0x1f;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026f8",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "byte_to_unsigned_int_080026f8"
        },
        "FUN_080085b8": {
            "renaming": {
                "FUN_080085b8": "is_flag_set_080085b8",
                "param_1": "flag_address",
                "uVar1": "flag_value"
            },
            "code": "\nbool is_flag_set_080085b8(int flag_address)\n\n{\n  uint flag_value;\n  \n  flag_value = FUN_08006b1c(*(undefined4 *)(PTR_DAT_080085d8 + (uint)*(byte *)(flag_address + 0x44) * 4));\n  return (flag_value & 0x22) == 0x22;\n}\n\n",
            "called": [
                "FUN_08006b1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080085b8",
            "calling": [
                "FUN_0800863c",
                "FUN_08008600"
            ],
            "imported": false,
            "current_name": "is_flag_set_080085b8"
        },
        "FUN_08001c08": {
            "renaming": {
                "FUN_08001c08": "get_data_08001c08",
                "uVar1": "result"
            },
            "code": "\nundefined get_data_08001c08(void)\n\n{\n  undefined result;\n  \n  result = FUN_08002720(PTR_DAT_08001c14);\n  return result;\n}\n\n",
            "called": [
                "FUN_08002720"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c08",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "get_data_08001c08"
        },
        "FUN_080075dc": {
            "renaming": {
                "FUN_080075dc": "check_clock_source_080075dc",
                "param_1": "clock_source",
                "uVar1": "var1",
                "iVar2": "result",
                "uVar3": "var2",
                "local_20": "var3",
                "local_1c": "var4",
                "local_18": "var5",
                "local_14": "var6",
                "local_10": "var7",
                "local_c": "var8"
            },
            "code": "\nint check_clock_source_080075dc(undefined4 clock_source)\n\n{\n  uint var1;\n  int result;\n  uint var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined4 var5;\n  undefined4 var6;\n  uint var7;\n  uint var8;\n  \n  var4 = 0;\n  var5 = 0;\n  var6 = 0;\n  var7 = 0;\n  var8 = 0;\n  var3 = 0;\n  FUN_08005a68(&var4,&var3);\n  result = FUN_08007594(clock_source);\n  var1 = var8;\n  var2 = var7;\n  if (result == 1) {\n    result = FUN_08005a28();\n  }\n  else if (result == 2) {\n    result = FUN_08005a48();\n    var2 = var1;\n  }\n  else {\n    FUN_080098d8(PTR_s_TIM__Unknown_clock_source_08007644);\n    result = 0;\n    var2 = 0;\n  }\n  if (var2 != 0x500) {\n    if (var2 < 0x501) {\n      if (var2 != 0x400) {\n        return result;\n      }\n    }\n    else if ((var2 != 0x600) && (var2 != 0x700)) {\n      return result;\n    }\n  }\n  return result << 1;\n}\n\n",
            "called": [
                "FUN_080098d8",
                "FUN_08007594",
                "FUN_08005a28",
                "FUN_08005a68",
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080075dc",
            "calling": [
                "FUN_08007118",
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "check_clock_source_080075dc"
        },
        "FUN_08007544": {
            "renaming": {
                "FUN_08007544": "check_memory_address_08007544",
                "param_1": "memory_address"
            },
            "code": "\nundefined4 check_memory_address_08007544(uint memory_address)\n\n{\n  if (memory_address == 0xffffffff) {\n    return 0;\n  }\n  if (memory_address == DAT_08007588) {\n    return 0x1d;\n  }\n  if (DAT_08007588 < memory_address) {\n    if (memory_address == DAT_0800758c) {\n      return 0x1e;\n    }\n    if (memory_address == DAT_0800758c + 0x12400) {\n      return 0x19;\n    }\n  }\n  else if (memory_address == 0x40000000) {\n    return 0x1c;\n  }\n  FUN_080098d8(PTR_s_TIM__Unknown_timer_IRQn_08007590);\n  return 0;\n}\n\n",
            "called": [
                "FUN_080098d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007544",
            "calling": [
                "FUN_080076e0",
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "check_memory_address_08007544"
        },
        "FUN_08007ff0": {
            "renaming": {
                "FUN_08007ff0": "execute_function_08007ff0",
                "param_1": "input_parameter",
                "iVar1": "function_result",
                "code": "function_pointer"
            },
            "code": "\nvoid execute_function_08007ff0(undefined4 input_parameter)\n\n{\n  int function_result;\n  \n  function_result = FUN_08007f78();\n  if (((*(function_pointer **)(function_result + 0x60) != (function_pointer *)0x0) && (*(char *)(function_result + 0x5c) == '\\x01')) &&\n     (*(char *)(function_result + 0x2c) != ' ')) {\n    (**(function_pointer **)(function_result + 0x60))(function_result + 0x68);\n  }\n  FUN_080049e0(input_parameter);\n  return;\n}\n\n",
            "called": [
                "FUN_080049e0",
                "FUN_08007f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ff0",
            "calling": [
                "FUN_08005084",
                "FUN_08004aec",
                "FUN_08004f3c"
            ],
            "imported": false,
            "current_name": "execute_function_08007ff0"
        },
        "FUN_08008990": {
            "renaming": {
                "FUN_08008990": "process_data_08008990",
                "param_1": "data_index",
                "param_2": "switch_case",
                "param_3": "data_length",
                "param_4": "data_ptr",
                "iVar1": "result",
                "puVar2": "data_array",
                "iVar3": "data_value"
            },
            "code": "\nvoid process_data_08008990(uint data_index,undefined4 switch_case,undefined4 data_length,undefined *data_ptr)\n\n{\n  int result;\n  undefined *data_array;\n  int data_value;\n  \n  if (data_index < 0x3c) {\n    data_value = (int)(char)PTR_DAT_08008a14[data_index];\n    data_array = PTR_DAT_08008a14;\n  }\n  else {\n    data_value = -1;\n    data_array = data_ptr;\n  }\n  if (data_value != -1) {\n    result = FUN_08006b28(data_value,PTR_DAT_08008a18,data_length,data_array,data_ptr);\n    if (result != 0) {\n      result = FUN_0800738a(data_value,PTR_DAT_08008a1c);\n      if (result != 0) {\n        FUN_080071e4(data_value);\n      }\n      FUN_08006b5c(data_value,PTR_DAT_08008a18);\n    }\n    switch(switch_case) {\n    case 0:\n      FUN_08007258(data_value,0);\n      break;\n    case 1:\n      FUN_08007258(data_value,1,0);\n      break;\n    case 2:\n      FUN_08007258(data_value,0,1);\n      break;\n    case 3:\n      FUN_08007258(data_value,0,2);\n    }\n    FUN_08006b3e(data_value,PTR_DAT_08008a20);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08006b28",
                "FUN_08006b3e",
                "FUN_080071e4",
                "FUN_08006b5c",
                "FUN_0800738a",
                "FUN_08007258"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008990",
            "calling": [
                "FUN_080088e0",
                "FUN_08003002",
                "FUN_080025ac",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "process_data_08008990"
        },
        "FUN_08008078": {
            "renaming": {
                "FUN_08008078": "configure_uart_pins_08008078",
                "param_1": "pin_config",
                "iVar1": "uart1_base_address",
                "iVar2": "uart0_base_address",
                "iVar3": "uart2_base_address",
                "iVar4": "selected_uart_base_address",
                "uVar5": "word_length_and_parity",
                "uVar6": "stop_bits_and_flow_control",
                "local_20": "pin_mask",
                "local_1c": "flow_control_bits",
                "local_18": "stop_bits",
                "local_14": "word_length"
            },
            "code": "\nvoid configure_uart_pins_08008078(int *pin_config)\n\n{\n  int uart1_base_address;\n  int uart0_base_address;\n  int uart2_base_address;\n  int selected_uart_base_address;\n  undefined4 word_length_and_parity;\n  uint stop_bits_and_flow_control;\n  uint pin_mask;\n  uint flow_control_bits;\n  uint stop_bits;\n  undefined4 word_length;\n  \n  if (pin_config != (int *)0x0) {\n    uart0_base_address = FUN_08007320((int)*(char *)(pin_config + 0x16),PTR_DAT_08008330);\n    uart2_base_address = FUN_08007320((int)*(char *)((int)pin_config + 0x59),PTR_DAT_08008334);\n    if ((uart2_base_address == 0) || (uart0_base_address == 0)) {\n      FUN_080098d8(PTR_s_ERROR__at_least_one_UART_pin_has_08008348,uart2_base_address);\n    }\n    else {\n      selected_uart_base_address = FUN_080073ae(uart0_base_address);\n      *pin_config = selected_uart_base_address;\n      uart1_base_address = DAT_08008340;\n      uart2_base_address = DAT_0800833c;\n      uart0_base_address = DAT_08008338;\n      if (selected_uart_base_address == 0) {\n        FUN_080098d8(PTR_s_ERROR__U_S_ART_pins_mismatch_0800834c);\n      }\n      else {\n        if (selected_uart_base_address == DAT_08008338) {\n          *(uint *)(DAT_08008338 + 0xd80c) = *(uint *)(DAT_08008338 + 0xd80c) | 0x4000;\n          *(uint *)(uart0_base_address + 0xd80c) = *(uint *)(uart0_base_address + 0xd80c) & 0xffffbfff;\n          *(uint *)(uart0_base_address + 0xd818) = *(uint *)(uart0_base_address + 0xd818) | 0x4000;\n          *(undefined *)(pin_config + 0x11) = 0;\n          *(undefined *)((int)pin_config + 0x5a) = 0x25;\n        }\n        else if (selected_uart_base_address == DAT_0800833c) {\n          *(uint *)(DAT_0800833c + 0x1cc10) = *(uint *)(DAT_0800833c + 0x1cc10) | 0x20000;\n          *(uint *)(uart2_base_address + 0x1cc10) = *(uint *)(uart2_base_address + 0x1cc10) & 0xfffdffff;\n          *(uint *)(uart2_base_address + 0x1cc1c) = *(uint *)(uart2_base_address + 0x1cc1c) | 0x20000;\n          *(undefined *)(pin_config + 0x11) = 1;\n          *(undefined *)((int)pin_config + 0x5a) = 0x26;\n        }\n        else if (selected_uart_base_address == DAT_08008340) {\n          *(uint *)(DAT_08008340 + 0x1c810) = *(uint *)(DAT_08008340 + 0x1c810) | 0x40000;\n          *(uint *)(uart1_base_address + 0x1c810) = *(uint *)(uart1_base_address + 0x1c810) & 0xfffbffff;\n          *(uint *)(uart1_base_address + 0x1c81c) = *(uint *)(uart1_base_address + 0x1c81c) | 0x40000;\n          *(undefined *)(pin_config + 0x11) = 2;\n          *(undefined *)((int)pin_config + 0x5a) = 0x27;\n        }\n        word_length_and_parity = FUN_08006bb8((uint)((int)*(char *)((int)pin_config + 0x59) << 0x18) >> 0x1c);\n        stop_bits_and_flow_control = FUN_08007376((int)*(char *)((int)pin_config + 0x59),PTR_DAT_08008334);\n        pin_mask = 1 << (*(byte *)((int)pin_config + 0x59) & 0xf) & 0xffff;\n        flow_control_bits = (stop_bits_and_flow_control >> 3 & 1) << 4 | stop_bits_and_flow_control & 7;\n        stop_bits = (stop_bits_and_flow_control << 0x1a) >> 0x1e;\n        *(uint *)(DAT_08008344 + 0x18) = *(uint *)(DAT_08008344 + 0x18) | 1;\n        switch((stop_bits_and_flow_control << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x4000000;\n        }\n        word_length = 3;\n        FUN_080040e8(word_length_and_parity,&pin_mask);\n        word_length_and_parity = FUN_08006bb8((uint)((int)*(char *)(pin_config + 0x16) << 0x18) >> 0x1c);\n        stop_bits_and_flow_control = FUN_08007376((int)*(char *)(pin_config + 0x16),PTR_DAT_08008330);\n        pin_mask = 1 << (*(byte *)(pin_config + 0x16) & 0xf) & 0xffff;\n        flow_control_bits = (stop_bits_and_flow_control >> 3 & 1) << 4 | stop_bits_and_flow_control & 7;\n        stop_bits = (stop_bits_and_flow_control << 0x1a) >> 0x1e;\n        FUN_080040e8(word_length_and_parity,&pin_mask);\n        *(int **)(PTR_DAT_08008354 + (uint)*(byte *)(pin_config + 0x11) * 4) = pin_config + 1;\n        pin_config[1] = *pin_config;\n        pin_config[2] = pin_config[0x12];\n        pin_config[3] = pin_config[0x13];\n        pin_config[4] = pin_config[0x14];\n        pin_config[5] = pin_config[0x15];\n        pin_config[6] = 0xc;\n        pin_config[7] = 0;\n        pin_config[8] = 0;\n        FUN_0800674e(pin_config + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007376",
                "FUN_08007320",
                "FUN_080098d8",
                "FUN_080073ae",
                "FUN_0800674e",
                "FUN_08006bb8",
                "FUN_080040e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008078",
            "calling": [
                "FUN_080084b0",
                "FUN_08008c44"
            ],
            "imported": false,
            "current_name": "configure_uart_pins_08008078"
        },
        "FUN_08004396": {
            "renaming": {
                "FUN_08004396": "set_param_value_08004396",
                "param_1": "param_array",
                "param_1[0x11]": "param_value_source"
            },
            "code": "\nundefined4 set_param_value_08004396(int *param_array)\n\n{\n  *(uint *)(*param_array + 0x10) = param_value_source & 0xff;\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004396",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "set_param_value_08004396"
        },
        "FUN_08003fb0": {
            "renaming": {
                "FUN_08003fb0": "set_bit_in_word_08003fb0",
                "param_1": "bit_position"
            },
            "code": "\nvoid set_bit_in_word_08003fb0(uint bit_position)\n\n{\n  if (-1 < (int)bit_position) {\n    *(int *)(DAT_08003fd4 + ((bit_position >> 5) + 0x20) * 4) = 1 << (bit_position & 0x1f);\n    DataSynchronizationBarrier(0xf);\n    InstructionSynchronizationBarrier(0xf);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fb0",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": false,
            "current_name": "set_bit_in_word_08003fb0"
        },
        "FUN_080052f0": {
            "renaming": {
                "FUN_080052f0": "update_status_080052f0",
                "param_1": "ptr_array",
                "puVar2": "ptr_value",
                "uVar3": "status_flags",
                "uVar4": "control_flags",
                "cVar1": "char_value"
            },
            "code": "\nvoid update_status_080052f0(uint **ptr_array)\n\n{\n  char char_value;\n  uint *ptr_value;\n  uint status_flags;\n  uint control_flags;\n  \n  ptr_value = *ptr_array;\n  status_flags = ptr_value[5];\n  control_flags = ptr_value[1];\n  if (((status_flags & DAT_080053c8) != 0) && ((control_flags & 0x100) != 0)) {\n    ptr_array[0x10] = (uint *)((uint)ptr_array[0x10] | 1);\n    ptr_value[5] = 0xfffffeff;\n    **ptr_array = **ptr_array | 0x8000;\n  }\n  if (((status_flags & 0x10200) != 0) && ((control_flags & 0x100) != 0)) {\n    ptr_array[0x10] = (uint *)((uint)ptr_array[0x10] | 2);\n    (*ptr_array)[5] = 0xfffffdff;\n  }\n  if (((status_flags & 0x10400) != 0) && ((control_flags & 0x100) != 0)) {\n    char_value = *(char *)((int)ptr_array + 0x3d);\n    if (((*(char *)((int)ptr_array + 0x3e) == ' ') && (*(short *)((int)ptr_array + 0x2a) == 0)) &&\n       (((char_value == '!' || (char_value == ')')) || ((char_value == '(' && (ptr_array[0xc] == (uint *)0x21)))))) {\n      FUN_08004aec(ptr_array);\n    }\n    else {\n      ptr_array[0x10] = (uint *)((uint)ptr_array[0x10] | 4);\n      if (*(char *)((int)ptr_array + 0x3e) == '\\x10') {\n        **ptr_array = **ptr_array | 0x200;\n      }\n      (*ptr_array)[5] = 0xfffffbff;\n    }\n  }\n  if (((status_flags & 0x10800) != 0) && ((control_flags & 0x100) != 0)) {\n    ptr_array[0x10] = (uint *)((uint)ptr_array[0x10] | 8);\n    (*ptr_array)[5] = 0xfffff7ff;\n  }\n  if (ptr_array[0x10] != (uint *)0x0) {\n    FUN_08004f3c(ptr_array);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08004aec",
                "FUN_08004f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052f0",
            "calling": [],
            "imported": false,
            "current_name": "update_status_080052f0"
        },
        "FUN_08008f0c": {
            "renaming": {
                "FUN_08008f0c": "do_nothing_08008f0c"
            },
            "code": "\nvoid do_nothing_08008f0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f0c",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "do_nothing_08008f0c"
        },
        "FUN_08002ec4": {
            "renaming": {
                "FUN_08002ec4": "execute_function_08002ec4",
                "param_1": "function_pointer"
            },
            "code": "\nvoid execute_function_08002ec4(int function_pointer)\n\n{\n  (**(code **)(**(int **)(function_pointer + 0xc0) + 8))();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ec4",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "execute_function_08002ec4"
        },
        "FUN_08007306": {
            "renaming": {
                "FUN_08007306": "find_value_in_array_08007306",
                "param_1": "target_value",
                "param_2": "array_ptr"
            },
            "code": "\nundefined4 find_value_in_array_08007306(int target_value,char *array_ptr)\n\n{\n  while( true ) {\n    if (*array_ptr == -1) {\n      return 0;\n    }\n    if (*array_ptr == target_value) break;\n    array_ptr = array_ptr + 0xc;\n  }\n  return *(undefined4 *)(array_ptr + 4);\n}\n\n",
            "called": [
                "FUN_08007306"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007306",
            "calling": [
                "FUN_08007320",
                "FUN_08007306"
            ],
            "imported": false,
            "current_name": "find_value_in_array_08007306"
        },
        "FUN_08008f0e": {
            "renaming": {
                "FUN_08008f0e": "initialize_system_08008f0e"
            },
            "code": "\nvoid initialize_system_08008f0e(void)\n\n{\n  FUN_08003f0c(3);\n  FUN_080036a2();\n  return;\n}\n\n",
            "called": [
                "FUN_080036a2",
                "FUN_08003f0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f0e",
            "calling": [
                "FUN_08009148"
            ],
            "imported": false,
            "current_name": "initialize_system_08008f0e"
        },
        "FUN_08002f2c": {
            "renaming": {
                "FUN_08002f2c": "update_data_08002f2c",
                "param_1": "unused",
                "param_2": "data_type",
                "param_3": "new_data"
            },
            "code": "\nvoid update_data_08002f2c(undefined4 unused,uint data_type,undefined4 new_data)\n\n{\n  if (data_type == 0xd0) {\n    *(undefined4 *)PTR_DAT_08002f78 = new_data;\n    return;\n  }\n  if (0xd0 < data_type) {\n    if (data_type == 0xf4) {\n      *(undefined4 *)PTR_DAT_08002f7c = new_data;\n      return;\n    }\n    if (data_type == 0xf5) {\n      *(undefined4 *)PTR_DAT_08002f80 = new_data;\n    }\n    else if (data_type == 0xe0) {\n      *(undefined4 *)PTR_DAT_08002f6c = new_data;\n      return;\n    }\n    return;\n  }\n  if (data_type == 0x90) {\n    *(undefined4 *)PTR_DAT_08002f74 = new_data;\n    return;\n  }\n  if (data_type == 0xc0) {\n    *(undefined4 *)PTR_DAT_08002f70 = new_data;\n    return;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f2c",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "update_data_08002f2c"
        },
        "FUN_08004954": {
            "renaming": {
                "FUN_08004954": "validate_input_08004954",
                "param_1": "input_ptr",
                "param_2": "input_data",
                "param_3": "input_size",
                "param_4": "output_data",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "code": "\nundefined4 validate_input_08004954(uint **input_ptr,uint *input_data,int input_size,uint *output_data)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)input_ptr + 0x3d) == '(') {\n    if (input_data == (uint *)0x0) {\n      result = 1;\n    }\n    else if (input_size == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_ptr + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_ptr + 0xf) = 1;\n      ptr = *input_ptr;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **input_ptr = **input_ptr & 0xfffff7ff;\n      *(undefined *)((int)input_ptr + 0x3d) = 0x2a;\n      *(undefined *)((int)input_ptr + 0x3e) = 0x20;\n      result = 0;\n      input_ptr[0x10] = (uint *)0x0;\n      input_ptr[9] = input_data;\n      *(short *)((int)input_ptr + 0x2a) = (short)input_size;\n      input_ptr[0xb] = output_data;\n      *(undefined2 *)(input_ptr + 10) = *(undefined2 *)((int)input_ptr + 0x2a);\n      *(undefined *)(input_ptr + 0xf) = 0;\n      (*input_ptr)[1] = (*input_ptr)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004954",
            "calling": [
                "FUN_08007fa0"
            ],
            "imported": false,
            "current_name": "validate_input_08004954"
        },
        "FUN_08005cec": {
            "renaming": {
                "FUN_08005cec": "update_values_08005cec",
                "param_1": "address",
                "param_2": "values",
                "uVar1": "updated_value_1",
                "uVar2": "updated_value_2",
                "uVar3": "updated_value_3"
            },
            "code": "\nvoid update_values_08005cec(int address,uint *values)\n\n{\n  uint updated_value_1;\n  uint updated_value_2;\n  uint updated_value_3;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xfffffffe;\n  updated_value_2 = *(uint *)(address + 4);\n  updated_value_3 = *values;\n  updated_value_1 = *(uint *)(address + 0x20) & 0xfffffffd | values[2];\n  if (address == DAT_08005d44) {\n    updated_value_1 = (updated_value_1 & 0xfffffff7 | values[3]) & 0xfffffffb;\n    updated_value_2 = updated_value_2 & 0xfffffcff | values[5] | values[6];\n  }\n  *(uint *)(address + 4) = updated_value_2;\n  *(uint *)(address + 0x18) = *(uint *)(address + 0x18) & 0xffffff8c | updated_value_3;\n  *(uint *)(address + 0x34) = values[1];\n  *(uint *)(address + 0x20) = updated_value_1;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cec",
            "calling": [
                "FUN_08006186",
                "FUN_08006128"
            ],
            "imported": false,
            "current_name": "update_values_08005cec"
        },
        "FUN_0800886c": {
            "renaming": {
                "FUN_0800886c": "set_pointer_to_22_0800886c"
            },
            "code": "\nundefined4 set_pointer_to_22_0800886c(void)\n\n{\n  *(undefined4 *)PTR_DAT_08008878 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800886c",
            "calling": [
                "FUN_08009fe8"
            ],
            "imported": false,
            "current_name": "set_pointer_to_22_0800886c"
        },
        "FUN_08003748": {
            "renaming": {
                "FUN_08003748": "update_pointer_value_08003748"
            },
            "code": "\nvoid update_pointer_value_08003748(void)\n\n{\n  *(uint *)PTR_DAT_08003758 = (uint)(byte)*PTR_DAT_0800375c + *(int *)PTR_DAT_08003758;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003748",
            "calling": [
                "FUN_08007246"
            ],
            "imported": false,
            "current_name": "update_pointer_value_08003748"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "update_bits_080040e8",
                "param_1": "bits_to_update",
                "param_2": "bitmask",
                "puVar1": "bits_ptr",
                "uVar2": "var2",
                "uVar3": "bit",
                "uVar4": "bitmask_result",
                "uVar5": "bit_index",
                "uVar6": "var6",
                "uVar7": "bits_to_set",
                "iVar8": "bit_offset",
                "uVar9": "var9",
                "iVar10": "var10"
            },
            "code": "\nvoid update_bits_080040e8(uint *bits_to_update,uint *bitmask)\n\n{\n  uint *bits_ptr;\n  uint var2;\n  uint bit;\n  uint bitmask_result;\n  uint bit_index;\n  uint var6;\n  uint bits_to_set;\n  int bit_offset;\n  uint var9;\n  int var10;\n  \n  bits_to_set = 0;\n  bit_index = 0;\n  do {\n    if (0xf < bit_index) {\n      return;\n    }\n    bit = 1 << (bit_index & 0xff);\n    bitmask_result = *bitmask & bit;\n    if (bit == bitmask_result) {\n      var6 = bitmask[1];\n      if (var6 == 0x12) {\n        bits_to_set = bitmask[3] + 0xc;\n      }\n      else if (var6 < 0x13) {\n        if (var6 == 2) {\n          bits_to_set = bitmask[3] + 8;\n        }\n        else if (var6 < 3) {\n          if (var6 == 0) goto LAB_0800423a;\n          if (var6 == 1) {\n            bits_to_set = bitmask[3];\n          }\n        }\n        else if (var6 == 3) {\n          bits_to_set = 0;\n        }\n        else if (var6 == 0x11) {\n          bits_to_set = bitmask[3] + 4;\n        }\n      }\n      else {\n        if (var6 != DAT_080042c8) {\n          if (DAT_080042c8 < var6) {\n            if (var6 == DAT_080042cc) goto LAB_0800423a;\n            var9 = DAT_080042cc + 0x10000;\n            var2 = DAT_080042cc;\n          }\n          else {\n            var9 = DAT_080042c8 - 0x100000;\n            var2 = DAT_080042c8;\n          }\n          if ((var6 != var9) && (var6 != var2 - 0xf0000)) goto LAB_080040fe;\n        }\nLAB_0800423a:\n        if (bitmask[2] == 0) {\n          bits_to_set = 4;\n        }\n        else if (bitmask[2] == 1) {\n          bits_to_update[4] = bit;\n          bits_to_set = 8;\n        }\n        else {\n          bits_to_update[5] = bit;\n          bits_to_set = 8;\n        }\n      }\nLAB_080040fe:\n      bit = bit_index;\n      bits_ptr = bits_to_update;\n      if (0xff < bitmask_result) {\n        bit = bit_index - 8;\n        bits_ptr = bits_to_update + 1;\n      }\n      *bits_ptr = *bits_ptr & ~(0xf << (bit << 2 & 0xff)) | bits_to_set << (bit << 2 & 0xff);\n      if ((bitmask[1] & 0x10000000) != 0) {\n        *(uint *)(DAT_080042bc + 0x18) = *(uint *)(DAT_080042bc + 0x18) | 1;\n        bit_offset = (bit_index & 3) << 2;\n        if (bits_to_update == DAT_080042d0) {\n          var10 = 0;\n        }\n        else if (bits_to_update == DAT_080042d0 + 0x100) {\n          var10 = 1;\n        }\n        else if (bits_to_update == DAT_080042d0 + 0x200) {\n          var10 = 2;\n        }\n        else if (bits_to_update == DAT_080042d0 + 0x300) {\n          var10 = 3;\n        }\n        else {\n          var10 = 4;\n        }\n        *(uint *)(DAT_080042c0 + ((bit_index >> 2) + 2) * 4) =\n             *(uint *)(DAT_080042c0 + ((bit_index >> 2) + 2) * 4) & ~(0xf << bit_offset) | var10 << bit_offset;\n        if ((bitmask[1] & 0x10000) == 0) {\n          *DAT_080042c4 = *DAT_080042c4 & ~bitmask_result;\n        }\n        else {\n          *DAT_080042c4 = *DAT_080042c4 | bitmask_result;\n        }\n        if ((bitmask[1] & 0x20000) == 0) {\n          DAT_080042c4[1] = DAT_080042c4[1] & ~bitmask_result;\n        }\n        else {\n          DAT_080042c4[1] = DAT_080042c4[1] | bitmask_result;\n        }\n        if ((bitmask[1] & 0x100000) == 0) {\n          DAT_080042c4[2] = DAT_080042c4[2] & ~bitmask_result;\n        }\n        else {\n          DAT_080042c4[2] = DAT_080042c4[2] | bitmask_result;\n        }\n        if ((bitmask[1] & 0x200000) == 0) {\n          DAT_080042c4[3] = DAT_080042c4[3] & ~bitmask_result;\n        }\n        else {\n          DAT_080042c4[3] = bitmask_result | DAT_080042c4[3];\n        }\n      }\n    }\n    bit_index = bit_index + 1;\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "FUN_08006e68",
                "FUN_08006ca8",
                "FUN_08008078",
                "FUN_08007258",
                "FUN_080077b0"
            ],
            "imported": false,
            "current_name": "update_bits_080040e8"
        },
        "FUN_080036d4": {
            "renaming": {
                "FUN_080036d4": "do_nothing_080036d4"
            },
            "code": "\nvoid do_nothing_080036d4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036d4",
            "calling": [
                "FUN_08003724"
            ],
            "imported": false,
            "current_name": "do_nothing_080036d4"
        },
        "FUN_0800288c": {
            "renaming": {
                "FUN_0800288c": "process_data_0800288c",
                "param_1": "data_buffer",
                "param_2": "data",
                "puVar1": "ptr1",
                "iVar2": "result",
                "uVar3": "return_value",
                "cVar4": "char_value",
                "uVar5": "undefined_value",
                "uVar6": "byte_value",
                "local_11": "data_byte"
            },
            "code": "\nundefined4 process_data_0800288c(int data_buffer,undefined data)\n\n{\n  undefined *ptr1;\n  int result;\n  undefined4 return_value;\n  char char_value;\n  undefined undefined_value;\n  uint byte_value;\n  undefined data_byte;\n  \n  ptr1 = PTR_DAT_08002914;\n  data_byte = data;\n  if (*PTR_DAT_08002908 == '\\0') {\n    result = FUN_08007ede(data_buffer + 0x14,&data_byte,1);\n    if (result == 0) {\n      return_value = 1;\n    }\n    else {\n      return_value = 0;\n    }\n  }\n  else {\n    byte_value = (byte)*PTR_DAT_0800290c + 1;\n    if ((byte)*PTR_DAT_08002910 < byte_value) {\n      if (byte_value < 0x20) {\n        byte_value = 0x20;\n      }\n      result = FUN_08009908(*(undefined4 *)PTR_DAT_08002914,byte_value);\n      *(int *)ptr1 = result;\n      if (result == 0) {\n        undefined_value = 0;\n      }\n      else {\n        undefined_value = (undefined)byte_value;\n      }\n      *PTR_DAT_08002910 = undefined_value;\n    }\n    ptr1 = PTR_DAT_08002918;\n    if (*(int *)PTR_DAT_08002914 == 0) {\n      *(undefined4 *)(data_buffer + 4) = 1;\n      return_value = 0;\n    }\n    else {\n      *(undefined *)(*(int *)PTR_DAT_08002914 + (uint)(byte)*PTR_DAT_08002918) = data_byte;\n      char_value = *ptr1 + '\\x01';\n      *ptr1 = char_value;\n      *PTR_DAT_0800290c = char_value;\n      return_value = 1;\n    }\n  }\n  return return_value;\n}\n\n",
            "called": [
                "FUN_08007ede",
                "FUN_08009908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800288c",
            "calling": [
                "FUN_08001bf8"
            ],
            "imported": false,
            "current_name": "process_data_0800288c"
        },
        "FUN_0800010c": {
            "renaming": {
                "FUN_0800010c": "check_and_set_flag_0800010c",
                "param_1": "input_pointer"
            },
            "code": "\nundefined * check_and_set_flag_0800010c(undefined *input_pointer)\n\n{\n  if (*PTR_DAT_08000124 == '\\0') {\n    if (DAT_08000128 != 0) {\n      input_pointer = PTR_FUN_0800012c;\n    }\n    *PTR_DAT_08000124 = 1;\n  }\n  return input_pointer;\n}\n\n",
            "called": [
                "FUN_0800a424"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800010c",
            "calling": [],
            "imported": false,
            "current_name": "check_and_set_flag_0800010c"
        },
        "FUN_08002e26": {
            "renaming": {
                "FUN_08002e26": "update_data_08002e26",
                "param_1": "data_ptr",
                "param_2": "new_value"
            },
            "code": "\nvoid update_data_08002e26(int data_ptr,undefined4 new_value)\n\n{\n  *(undefined4 *)(data_ptr + 0xc0) = new_value;\n  FUN_08003154(data_ptr + 0x40);\n  FUN_08002ddc(data_ptr);\n  FUN_08002df6(data_ptr);\n  return;\n}\n\n",
            "called": [
                "FUN_08003154",
                "FUN_08002ddc",
                "FUN_08002df6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e26",
            "calling": [
                "FUN_08003048"
            ],
            "imported": false,
            "current_name": "update_data_08002e26"
        },
        "FUN_080036d8": {
            "renaming": {
                "FUN_080036d8": "set_value_080036d8",
                "param_1": "new_value",
                "iVar1": "result"
            },
            "code": "\nundefined4 set_value_080036d8(uint new_value)\n\n{\n  int result;\n  \n  result = FUN_08003fd8(*(uint *)PTR_DAT_0800371c / (1000 / (byte)*PTR_DAT_08003718));\n  if (result != 0) {\n    return 1;\n  }\n  if (0xf < new_value) {\n    return 1;\n  }\n  FUN_08003f30(0xffffffff,new_value,0);\n  *(uint *)PTR_DAT_08003720 = new_value;\n  return 0;\n}\n\n",
            "called": [
                "FUN_08003fd8",
                "FUN_08003f30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036d8",
            "calling": [
                "FUN_08003724",
                "FUN_080058d2"
            ],
            "imported": false,
            "current_name": "set_value_080036d8"
        },
        "FUN_08006e68": {
            "renaming": {
                "FUN_08006e68": "process_data_08006e68",
                "param_1": "input_data",
                "puVar1": "data_pointer",
                "iVar2": "data_index",
                "uVar3": "processed_data",
                "local_20": "bit_mask",
                "local_1c": "constant_2",
                "local_18": "constant_0",
                "local_14": "constant_3"
            },
            "code": "\nvoid process_data_08006e68(undefined4 input_data)\n\n{\n  undefined *data_pointer;\n  int data_index;\n  undefined4 processed_data;\n  uint bit_mask;\n  undefined4 constant_2;\n  undefined4 constant_0;\n  undefined4 constant_3;\n  \n  data_pointer = PTR_DAT_08007100;\n  data_index = FUN_08007376((int)(char)*PTR_DAT_08007100,PTR_DAT_08007104);\n  FUN_08007438(input_data);\n  processed_data = FUN_08006bb8((uint)((int)(char)*data_pointer << 0x18) >> 0x1c);\n  constant_2 = 2;\n  constant_0 = 0;\n  constant_3 = 3;\n  *(uint *)(DAT_08007108 + 0x18) = *(uint *)(DAT_08007108 + 0x18) | 1;\n  switch((uint)(data_index << 0x11) >> 0x19) {\n  case 1:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000001;\n    break;\n  case 2:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffe | 0x7000000;\n    break;\n  case 3:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000002;\n    break;\n  case 4:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffd | 0x7000000;\n    break;\n  case 5:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000004;\n    break;\n  case 6:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffb | 0x7000000;\n    break;\n  case 7:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000008;\n    break;\n  case 8:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffff7 | 0x7000000;\n    break;\n  case 9:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000030;\n    break;\n  case 10:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffffcf | 0x7000010;\n    break;\n  case 0xb:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffffcf | 0x7000000;\n    break;\n  case 0xc:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x70000c0;\n    break;\n  case 0xd:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffff3f | 0x7000040;\n    break;\n  case 0xe:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffff3f | 0x7000000;\n    break;\n  case 0xf:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000300;\n    break;\n  case 0x10:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000200;\n    break;\n  case 0x11:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000100;\n    break;\n  case 0x12:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000000;\n    break;\n  case 0x13:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000c00;\n    break;\n  case 0x14:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffff3ff | 0x7000800;\n    break;\n  case 0x15:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffff3ff | 0x7000000;\n    break;\n  case 0x16:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7001000;\n    break;\n  case 0x17:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffefff | 0x7000000;\n    break;\n  case 0x1b:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7008000;\n    break;\n  case 0x1c:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffff7fff | 0x7000000;\n    break;\n  case 0x21:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff;\n    break;\n  case 0x22:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x1000000;\n    break;\n  case 0x23:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x2000000;\n    break;\n  case 0x24:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x4000000;\n  }\n  bit_mask = 1 << ((byte)*PTR_DAT_08007100 & 0xf) & 0xffff;\n  FUN_080040e8(processed_data,&bit_mask);\n  return;\n}\n\n",
            "called": [
                "FUN_08007376",
                "FUN_08007438",
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e68",
            "calling": [
                "FUN_08006092"
            ],
            "imported": false,
            "current_name": "process_data_08006e68"
        },
        "FUN_080086e8": {
            "renaming": {
                "FUN_080086e8": "find_index_080086e8",
                "param_1": "search_value",
                "uVar1": "index"
            },
            "code": "\nuint find_index_080086e8(int search_value)\n\n{\n  uint index;\n  \n  if (search_value == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (4 < index) {\n        return index;\n      }\n      if (search_value == *(int *)(PTR_DAT_08008708 + index * 4)) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080086e8",
            "calling": [
                "FUN_08008730",
                "FUN_0800870c"
            ],
            "imported": false,
            "current_name": "find_index_080086e8"
        },
        "FUN_0800a110": {
            "renaming": {
                "FUN_0800a110": "process_input_0800a110",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "ptr_data",
                "iVar2": "result"
            },
            "code": "\nvoid process_input_0800a110(int *output,undefined4 input)\n\n{\n  undefined *ptr_data;\n  int result;\n  \n  ptr_data = PTR_DAT_0800a12c;\n  *(undefined4 *)PTR_DAT_0800a12c = 0;\n  result = FUN_08008850(input);\n  if ((result == -1) && (*(int *)ptr_data != 0)) {\n    *output = *(int *)ptr_data;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08008850"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a110",
            "calling": [
                "FUN_08009eac"
            ],
            "imported": false,
            "current_name": "process_input_0800a110"
        },
        "FUN_08003b8c": {
            "renaming": {
                "FUN_08003b8c": "check_and_update_08003b8c",
                "param_1": "input_arr",
                "iVar1": "counter_1",
                "iVar2": "counter_2",
                "param_1[10]": "output_flag_1",
                "param_1[0xb]": "output_flag_2"
            },
            "code": "\nundefined4 check_and_update_08003b8c(int *input_arr)\n\n{\n  int counter_1;\n  int counter_2;\n  \n  counter_2 = *input_arr;\n  if ((*(uint *)(counter_2 + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(counter_2 + 8) = *(uint *)(counter_2 + 8) & 0xfffffffe;\n  counter_2 = FUN_08003760();\n  do {\n    if ((*(uint *)(*input_arr + 8) & 1) == 0) {\n      return 0;\n    }\n    counter_1 = FUN_08003760();\n  } while ((uint)(counter_1 - counter_2) < 3);\n  output_flag_1 = output_flag_1 | 0x10;\n  output_flag_2 = output_flag_2 | 1;\n  return 1;\n}\n\n",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003b8c",
            "calling": [
                "FUN_08003e20",
                "FUN_08003bd8",
                "FUN_08003de4",
                "FUN_08003ce8"
            ],
            "imported": false,
            "current_name": "check_and_update_08003b8c"
        },
        "FUN_080035b8": {
            "renaming": {
                "FUN_080035b8": "initialize_components_080035b8",
                "local_30": "component_ids",
                "local_20": "component_count",
                "local_1c": "component_size",
                "local_14": "component_version",
                "local_10": "component_revision",
                "local_c": "component_flags",
                "iVar1": "result",
                "local_44": "gpio_pin",
                "local_40": "gpio_mode",
                "local_3c": "gpio_pull",
                "local_38": "gpio_speed",
                "local_34": "gpio_alternate",
                "local_54": "spi_config",
                "local_4c": "spi_mode",
                "uVar2": "spi_frequency"
            },
            "code": "\nvoid initialize_components_080035b8(void)\n\n{\n  int result;\n  uint spi_frequency;\n  undefined4 spi_config [2];\n  undefined4 spi_mode;\n  undefined4 gpio_pin;\n  undefined4 gpio_mode;\n  undefined4 gpio_pull;\n  undefined4 gpio_speed;\n  undefined4 gpio_alternate;\n  undefined4 component_ids [4];\n  undefined4 component_count;\n  undefined4 component_size;\n  undefined4 component_version;\n  undefined4 component_revision;\n  undefined4 component_flags;\n  \n  component_ids[0] = 2;\n  component_count = 1;\n  component_size = 0x10;\n  component_version = 2;\n  component_revision = 0;\n  component_flags = 0x380000;\n  result = FUN_08005460(component_ids);\n  if (result != 0) {\n    FUN_080073e8(PTR_s__home_bo__arduino15_packages_STM_08003654,0x88);\n  }\n  gpio_pin = 0xf;\n  gpio_mode = 2;\n  gpio_pull = 0;\n  gpio_speed = 0x400;\n  gpio_alternate = 0;\n  result = FUN_080058ac(&gpio_pin);\n  if (result != 0) {\n    FUN_080073e8(PTR_s__home_bo__arduino15_packages_STM_08003654,0x95);\n  }\n  spi_config[0] = 2;\n  spi_mode = 0x8000;\n  result = FUN_08005aa4(spi_config);\n  if (result != 0) {\n    FUN_080073e8(PTR_s__home_bo__arduino15_packages_STM_08003654,0x9c);\n  }\n  spi_frequency = FUN_08005a1c();\n  FUN_08003fd8((uint)((ulonglong)DAT_08003650 * (ulonglong)spi_frequency >> 0x26));\n  FUN_08004024(4);\n  FUN_08003f30(0xffffffff,0);\n  return;\n}\n\n",
            "called": [
                "FUN_080073e8",
                "FUN_08005a1c",
                "FUN_08004024",
                "FUN_08003fd8",
                "FUN_080058ac",
                "FUN_08005460",
                "FUN_08003f30",
                "FUN_08005aa4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035b8",
            "calling": [
                "FUN_080072fa"
            ],
            "imported": false,
            "current_name": "initialize_components_080035b8"
        },
        "FUN_08001c18": {
            "renaming": {
                "FUN_08001c18": "process_i2c_data_08001c18",
                "param_1": "device_address",
                "param_2": "expected_data_length",
                "param_3": "received_data_length",
                "param_4": "output_buffer",
                "puVar1": "data_pointer",
                "uVar2": "received_byte",
                "iVar3": "i",
                "iVar4": "bytes_received",
                "bVar5": "data_available"
            },
            "code": "\nvoid process_i2c_data_08001c18(undefined4 device_address,uint expected_data_length,int received_data_length,undefined4 output_buffer)\n\n{\n  undefined *data_pointer;\n  undefined received_byte;\n  int i;\n  int bytes_received;\n  bool data_available;\n  \n  data_pointer = PTR_DAT_08001cbc;\n  if (expected_data_length == 0xffffffff) {\n    expected_data_length = 0;\n  }\n  else {\n    FUN_08002a30(PTR_DAT_08001cbc,device_address);\n    FUN_08001bf8(expected_data_length & 0xff);\n    FUN_08002a58(data_pointer,output_buffer);\n  }\n  data_pointer = PTR_DAT_08001cbc;\n  FUN_08002c14(PTR_DAT_08001cbc,device_address,received_data_length);\n  i = FUN_0800270c(data_pointer);\n  if (received_data_length < i) {\n    FUN_08002f14(PTR_DAT_08001cc4,PTR_s_I2C__Too_many_bytes_received_08001cc0);\n  }\n  else {\n    i = FUN_0800270c(PTR_DAT_08001cbc);\n    if (i < received_data_length) {\n      FUN_08002f14(PTR_DAT_08001cc4,PTR_s_I2C__Too_few_bytes_received_08001ccc);\n    }\n  }\n  data_pointer = PTR_DAT_08001cc8;\n  *PTR_DAT_08001cc8 = (char)device_address;\n  data_pointer[1] = (char)expected_data_length;\n  i = 0;\n  while( true ) {\n    if (i < received_data_length) {\n      bytes_received = FUN_0800270c(PTR_DAT_08001cbc);\n      if (bytes_received == 0) {\n        data_available = false;\n      }\n      else {\n        data_available = true;\n      }\n    }\n    else {\n      data_available = false;\n    }\n    if (!data_available) break;\n    received_byte = FUN_08001c08();\n    PTR_DAT_08001cc8[i + 2] = received_byte;\n    i = i + 1;\n  }\n  FUN_08002f0a(PTR_DAT_08001cc4,0x77,received_data_length + 2U & 0xff,PTR_DAT_08001cc8);\n  return;\n}\n\n",
            "called": [
                "FUN_08002f0a",
                "FUN_08001c08",
                "FUN_08002a58",
                "FUN_0800270c",
                "FUN_08001bf8",
                "FUN_08002a30",
                "FUN_08002c14",
                "FUN_08002f14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c18",
            "calling": [
                "FUN_080022f8",
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "process_i2c_data_08001c18"
        },
        "FUN_08006460": {
            "renaming": {
                "FUN_08006460": "improve_and_update_08006460",
                "param_1": "ptr_to_uint_array",
                "param_2": "uint_param",
                "puVar1": "ptr_to_uint",
                "puVar1[8]": "uint_array_element_8",
                "puVar1[0x11]": "uint_array_element_0x11"
            },
            "code": "\nundefined4 improve_and_update_08006460(uint **ptr_to_uint_array,undefined4 uint_param)\n\n{\n  uint *ptr_to_uint;\n  \n  FUN_08006420(*ptr_to_uint_array,uint_param,0);\n  ptr_to_uint = *ptr_to_uint_array;\n  if (((uint_array_element_8 & 0x1111) == 0) && ((uint_array_element_8 & 0x444) == 0)) {\n    uint_array_element_0x11 = uint_array_element_0x11 & 0xffff7fff;\n  }\n  ptr_to_uint = *ptr_to_uint_array;\n  if (((uint_array_element_8 & 0x1111) == 0) && ((uint_array_element_8 & 0x444) == 0)) {\n    *ptr_to_uint = *ptr_to_uint & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_08006420"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006460",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": false,
            "current_name": "improve_and_update_08006460"
        },
        "FUN_08004046": {
            "renaming": {
                "FUN_08004046": "do_nothing_08004046",
                "do_nothing_08004044": "do_nothing_helper"
            },
            "code": "\nvoid do_nothing_08004046(void)\n\n{\n  do_nothing_08004046_08004044();\n  return;\n}\n\n",
            "called": [
                "FUN_08004044"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004046",
            "calling": [
                "FUN_08007246"
            ],
            "imported": false,
            "current_name": "do_nothing_08004046"
        },
        "FUN_08008880": {
            "renaming": {
                "FUN_08008880": "improved_function_08008880",
                "param_1": "input_value",
                "bVar1": "is_input_valid",
                "cVar2": "char_value",
                "uVar3": "result",
                "uVar4": "shift_amount"
            },
            "code": "\nuint improved_function_08008880(uint input_value)\n\n{\n  bool is_input_valid;\n  char char_value;\n  uint result;\n  uint shift_amount;\n  \n  if (input_value < 0xe) {\n    if (input_value + 0x2e < 0x3c) {\n      is_input_valid = true;\n    }\n    else {\n      is_input_valid = false;\n    }\n  }\n  else {\n    is_input_valid = input_value < 0x3c;\n  }\n  if (is_input_valid) {\n    if (input_value < 0xe) {\n      input_value = input_value + 0x2e;\n    }\n    char_value = PTR_DAT_080088d8[input_value];\n  }\n  else {\n    char_value = -1;\n  }\n  if (char_value == -1) {\n    result = 0;\n  }\n  else {\n    result = FUN_08006d80();\n    shift_amount = *(uint *)PTR_DAT_080088dc;\n    if (shift_amount != 0xc) {\n      if (shift_amount < 0xc) {\n        return result >> (0xc - shift_amount & 0xff);\n      }\n      return result << (shift_amount - 0xc & 0xff);\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_08006d80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008880",
            "calling": [
                "FUN_080022f8",
                "FUN_08000488"
            ],
            "imported": false,
            "current_name": "improved_function_08008880"
        },
        "FUN_08004044": {
            "renaming": {
                "FUN_08004044": "do_nothing_08004044"
            },
            "code": "\nvoid do_nothing_08004044(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004044",
            "calling": [
                "FUN_08004046"
            ],
            "imported": false,
            "current_name": "do_nothing_08004044"
        },
        "FUN_08002ed2": {
            "renaming": {
                "FUN_08002ed2": "process_param_1_08002ed2",
                "param_1": "input_data",
                "uVar1": "result",
                "code": "func_ptr"
            },
            "code": "\nvoid process_param_1_08002ed2(int input_data)\n\n{\n  uint result;\n  \n  result = (**(func_ptr **)(**(int **)(input_data + 0xc0) + 0xc))();\n  if (result != 0xffffffff) {\n    FUN_08003474(input_data + 0x44,result & 0xff);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08003474"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ed2",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "process_param_1_08002ed2"
        },
        "FUN_080073ae": {
            "renaming": {
                "FUN_080073ae": "compare_and_return_nonzero_080073ae",
                "param_1": "value_1",
                "param_2": "value_2"
            },
            "code": "\nint compare_and_return_nonzero_080073ae(int value_1,int value_2)\n\n{\n  if (value_1 != value_2) {\n    if (value_1 == 0) {\n      return value_2;\n    }\n    if (value_2 == 0) {\n      return value_1;\n    }\n    value_1 = 0;\n  }\n  return value_1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073ae",
            "calling": [
                "FUN_08008078",
                "FUN_080077b0"
            ],
            "imported": false,
            "current_name": "compare_and_return_nonzero_080073ae"
        },
        "FUN_08000488": {
            "renaming": {
                "FUN_08000488": "set_bit_08000488",
                "param_1": "bit_position",
                "param_2": "bit_value",
                "uVar1": "random_number"
            },
            "code": "\nvoid set_bit_08000488(uint bit_position,int bit_value)\n\n{\n  undefined4 random_number;\n  \n  if ((int)bit_position < 0xe) {\n    if (bit_value == 0) {\n      *(uint *)PTR_DAT_080004c8 = *(uint *)PTR_DAT_080004c8 & ~(1 << (bit_position & 0xff));\n      return;\n    }\n    *(uint *)PTR_DAT_080004c8 = 1 << (bit_position & 0xff) | *(uint *)PTR_DAT_080004c8;\n    if (*PTR_DAT_080004cc == '\\0') {\n      random_number = FUN_08008880();\n      FUN_08002ef2(PTR_DAT_080004d0,bit_position,random_number);\n      return;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08002ef2",
                "FUN_08008880"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000488",
            "calling": [
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "set_bit_08000488"
        },
        "FUN_08003f0c": {
            "renaming": {
                "FUN_08003f0c": "update_register_08003f0c",
                "param_1": "input_value"
            },
            "code": "\nvoid update_register_08003f0c(uint input_value)\n\n{\n  *(uint *)(DAT_08003f2c + 0xc) =\n       (input_value & 7) << 8 | *(uint *)(DAT_08003f2c + 0xc) & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f0c",
            "calling": [
                "FUN_08003724",
                "FUN_08008f0e"
            ],
            "imported": false,
            "current_name": "update_register_08003f0c"
        },
        "FUN_08008f1c": {
            "renaming": {
                "FUN_08008f1c": "do_infinite_loop_08008f1c",
                "do_nothing_08008f0c": "do_nothing"
            },
            "code": "\nvoid do_infinite_loop_08008f1c(void)\n\n{\n  do_nothing_08008f0c();\n  FUN_08001b48();\n  do {\n    do {\n      FUN_080022f8();\n    } while (DAT_08008f38 == 0);\n    FUN_08008bf4();\n  } while( true );\n}\n\n",
            "called": [
                "FUN_080022f8",
                "FUN_08001b48",
                "FUN_08008f0c",
                "FUN_08008bf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f1c",
            "calling": [
                "FUN_08003658"
            ],
            "imported": false,
            "current_name": "do_infinite_loop_08008f1c"
        },
        "FUN_080058ac": {
            "renaming": {
                "FUN_080058ac": "process_data_080058ac",
                "param_1": "data_array",
                "param_2": "data_size",
                "puVar1": "ptr_data",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "uVar4": "temp_var"
            },
            "code": "\nundefined4 process_data_080058ac(uint *data_array,uint data_size)\n\n{\n  uint *ptr_data;\n  int start_time;\n  int current_time;\n  uint temp_var;\n  \n  ptr_data = DAT_08005a0c;\n  if (((*DAT_08005a0c & 7) < data_size) &&\n     (*DAT_08005a0c = *DAT_08005a0c & 0xfffffff8 | data_size, data_size != (*ptr_data & 7))) {\n    return 1;\n  }\n  if ((*data_array & 2) != 0) {\n    DAT_08005a10[1] = DAT_08005a10[1] & 0xffffff0f | data_array[2];\n  }\n  if ((*data_array & 1) != 0) {\n    temp_var = data_array[1];\n    if (temp_var == 1) {\n      if ((*DAT_08005a10 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((temp_var != 2) && ((*DAT_08005a10 & 2) == 0)) {\n      return 1;\n    }\n    DAT_08005a10[1] = temp_var | DAT_08005a10[1] & 0xfffffffc;\n    start_time = FUN_08003760();\n    if (data_array[1] == 1) {\n      while ((DAT_08005a10[1] & 0xc) != 4) {\n        current_time = FUN_08003760();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (data_array[1] == 2) {\n      while ((DAT_08005a10[1] & 0xc) != 8) {\n        current_time = FUN_08003760();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((DAT_08005a10[1] & 0xc) != 0) {\n        current_time = FUN_08003760();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  ptr_data = DAT_08005a0c;\n  if ((data_size < (*DAT_08005a0c & 7)) &&\n     (*DAT_08005a0c = *DAT_08005a0c & 0xfffffff8 | data_size, data_size != (*ptr_data & 7))) {\n    return 1;\n  }\n  if ((*data_array & 4) != 0) {\n    DAT_08005a10[1] = DAT_08005a10[1] & 0xfffff8ff | data_array[3];\n  }\n  if ((*data_array & 8) != 0) {\n    DAT_08005a10[1] = DAT_08005a10[1] & 0xffffc7ff | data_array[4] << 3;\n  }\n  temp_var = FUN_08005840();\n  *(uint *)PTR_DAT_08005a18 = temp_var >> PTR_DAT_08005a14[(DAT_08005a10[1] << 0x18) >> 0x1c];\n  FUN_080036d8(0xf);\n  return 0;\n}\n\n",
            "called": [
                "FUN_080058d2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058ac",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "process_data_080058ac"
        },
        "FUN_08006bb8": {
            "renaming": {
                "FUN_08006bb8": "set_flag_value_08006bb8",
                "param_1": "flag_index",
                "uVar1": "return_value"
            },
            "code": "\nundefined4 set_flag_value_08006bb8(undefined4 flag_index)\n\n{\n  undefined4 return_value;\n  \n  switch(flag_index) {\n  case 0:\n    *(uint *)(DAT_08006c48 + 0x18) = *(uint *)(DAT_08006c48 + 0x18) | 4;\n    return_value = DAT_08006c4c;\n    break;\n  case 1:\n    *(uint *)(DAT_08006c48 + 0x18) = *(uint *)(DAT_08006c48 + 0x18) | 8;\n    return_value = DAT_08006c50;\n    break;\n  case 2:\n    *(uint *)(DAT_08006c48 + 0x18) = *(uint *)(DAT_08006c48 + 0x18) | 0x10;\n    return_value = DAT_08006c54;\n    break;\n  case 3:\n    *(uint *)(DAT_08006c48 + 0x18) = *(uint *)(DAT_08006c48 + 0x18) | 0x20;\n    return_value = DAT_08006c58;\n    break;\n  case 4:\n    *(uint *)(DAT_08006c48 + 0x18) = *(uint *)(DAT_08006c48 + 0x18) | 0x40;\n    return_value = DAT_08006c5c;\n    break;\n  default:\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006bb8",
            "calling": [
                "FUN_08006e68",
                "FUN_08006ca8",
                "FUN_08008078",
                "FUN_08007258",
                "FUN_080077b0"
            ],
            "imported": false,
            "current_name": "set_flag_value_08006bb8"
        },
        "FUN_08007438": {
            "renaming": {
                "FUN_08007438": "update_global_flags_08007438",
                "param_1": "value"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid update_global_flags_08007438(int *value)\n\n{\n  if (*value == DAT_080074d0) {\n    *(uint *)(DAT_080074d0 + 0xe418) = *(uint *)(DAT_080074d0 + 0xe418) | 0x800;\n    *(int **)PTR_DAT_080074dc = value;\n  }\n  if (*value == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n    *(int **)(PTR_DAT_080074dc + 4) = value;\n  }\n  if (*value == DAT_080074d4) {\n    *(uint *)(DAT_080074d4 + 0x20c1c) = *(uint *)(DAT_080074d4 + 0x20c1c) | 2;\n    *(int **)(PTR_DAT_080074dc + 8) = value;\n  }\n  if (*value == DAT_080074d8) {\n    *(uint *)(DAT_080074d8 + 0x2081c) = *(uint *)(DAT_080074d8 + 0x2081c) | 4;\n    *(int **)(PTR_DAT_080074dc + 0xc) = value;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007438",
            "calling": [
                "FUN_08006e68",
                "FUN_08007708"
            ],
            "imported": false,
            "current_name": "update_global_flags_08007438"
        },
        "FUN_08004aec": {
            "renaming": {
                "FUN_08004aec": "improve_and_validate_input_08004aec",
                "param_1": "input_params",
                "param_1[0xb]": "input_ptr_b",
                "param_1[0xc]": "input_ptr_c"
            },
            "code": "\nundefined4 improve_and_validate_input_08004aec(uint **input_params)\n\n{\n  if (((input_ptr_b == (uint *)0x4) || (input_ptr_b == (uint *)0x8)) &&\n     (*(char *)((int)input_params + 0x3d) == '(')) {\n    input_ptr_b = DAT_08004b7c;\n    (*input_params)[1] = (*input_params)[1] & 0xfffff8ff;\n    (*input_params)[5] = 0xfffffbff;\n    **input_params = **input_params & 0xfffffbff;\n    input_ptr_c = (uint *)0x0;\n    *(undefined *)((int)input_params + 0x3d) = 0x20;\n    *(undefined *)((int)input_params + 0x3e) = 0;\n    FUN_08007ff0();\n  }\n  else if (*(char *)((int)input_params + 0x3d) == '!') {\n    input_ptr_b = DAT_08004b7c;\n    input_ptr_c = (uint *)0x21;\n    *(undefined *)((int)input_params + 0x3d) = 0x20;\n    *(undefined *)((int)input_params + 0x3e) = 0;\n    (*input_params)[1] = (*input_params)[1] & 0xfffff8ff;\n    (*input_params)[5] = 0xfffffbff;\n    **input_params = **input_params & 0xfffffbff;\n    do_nothing_08004a22();\n  }\n  else {\n    (*input_params)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_08007ff0",
                "FUN_08004a22"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004aec",
            "calling": [
                "FUN_080052f0"
            ],
            "imported": false,
            "current_name": "improve_and_validate_input_08004aec"
        },
        "FUN_0800887c": {
            "renaming": {
                "FUN_0800887c": "get_result_0800887c"
            },
            "code": "\nundefined4 get_result_0800887c(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800887c",
            "calling": [
                "thunk_FUN_0800887c"
            ],
            "imported": false,
            "current_name": "get_result_0800887c"
        },
        "FUN_08004728": {
            "renaming": {
                "FUN_08004728": "FUNC_08004728"
            },
            "code": "\nundefined4 FUNC_08004728(uint **param_1,uint *param_2,uint *param_3,undefined2 param_4)\n\n{\n  undefined4 uVar1;\n  uint *puVar2;\n  int local_c;\n  \n  if (*(char *)((int)param_1 + 0x3d) == ' ') {\n    local_c = (uint)((ulonglong)DAT_080047ec * (ulonglong)(*(uint *)PTR_DAT_080047e8 >> 3) >> 0x28)\n              * 0x19;\n    do {\n      if (local_c == 0) {\n        param_1[0xc] = (uint *)0x0;\n        *(undefined *)((int)param_1 + 0x3d) = 0x20;\n        *(undefined *)(param_1 + 0xf) = 0;\n        return 3;\n      }\n      puVar2 = *param_1;\n      local_c = local_c + -1;\n    } while ((puVar2[6] & 2) != 0);\n    if (*(char *)(param_1 + 0xf) == '\\x01') {\n      uVar1 = 2;\n    }\n    else {\n      *(undefined *)(param_1 + 0xf) = 1;\n      if ((*puVar2 & 1) == 0) {\n        *puVar2 = *puVar2 | 1;\n      }\n      **param_1 = **param_1 & 0xfffff7ff;\n      *(undefined *)((int)param_1 + 0x3d) = 0x21;\n      *(undefined *)((int)param_1 + 0x3e) = 0x10;\n      uVar1 = 0;\n      param_1[0x10] = (uint *)0x0;\n      param_1[9] = param_3;\n      *(undefined2 *)((int)param_1 + 0x2a) = param_4;\n      param_1[0xb] = DAT_080047f0;\n      *(undefined2 *)(param_1 + 10) = *(undefined2 *)((int)param_1 + 0x2a);\n      param_1[0x11] = param_2;\n      **param_1 = **param_1 | 0x100;\n      *(undefined *)(param_1 + 0xf) = 0;\n      (*param_1)[1] = (*param_1)[1] | 0x700;\n    }\n  }\n  else {\n    uVar1 = 2;\n  }\n  return uVar1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004728",
            "calling": [
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "FUNC_08004728"
        },
        "FUN_08007ede": {
            "renaming": {
                "FUN_08007ede": "copy_data_08007ede",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "uVar1": "i"
            },
            "code": "\nundefined4 copy_data_08007ede(int dest,int src,uint size)\n\n{\n  uint i;\n  \n  if (0x20 < size) {\n    return 2;\n  }\n  for (i = 0; i < size; i = i + 1 & 0xff) {\n    *(undefined *)(dest + i + 0x68) = *(undefined *)(src + i);\n    *(char *)(dest + 0x88) = *(char *)(dest + 0x88) + '\\x01';\n  }\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ede",
            "calling": [
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "imported": false,
            "current_name": "copy_data_08007ede"
        },
        "FUN_0800863c": {
            "renaming": {
                "FUN_0800863c": "update_data_0800863c",
                "param_1": "data_ptr",
                "param_2": "new_value",
                "param_3": "unused_param",
                "param_4": "additional_data",
                "iVar1": "success",
                "uVar2": "index"
            },
            "code": "\nvoid update_data_0800863c(int data_ptr,undefined4 new_value,undefined4 unused_param,undefined4 additional_data)\n\n{\n  int success;\n  uint index;\n  \n  if (data_ptr != 0) {\n    success = FUN_080085b8();\n    if (success == 0) {\n      index = (uint)*(byte *)(data_ptr + 0x44);\n      *(undefined4 *)(PTR_DAT_08008688 + index * 4) = new_value;\n      *(int *)(PTR_DAT_0800868c + index * 4) = data_ptr;\n      FUN_08003f30((int)*(char *)(data_ptr + 0x5a),0,1,index,additional_data);\n      FUN_08003f94((int)*(char *)(data_ptr + 0x5a));\n      FUN_080068d6(*(undefined4 *)(PTR_DAT_08008690 + (uint)*(byte *)(data_ptr + 0x44) * 4),\n                   data_ptr + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08003f94",
                "FUN_08003f30",
                "FUN_080068d6",
                "FUN_080085b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800863c",
            "calling": [
                "FUN_08008c44"
            ],
            "imported": false,
            "current_name": "update_data_0800863c"
        },
        "thunk_FUN_0800887c": {
            "renaming": {
                "thunk_FUN_0800887c": "check_system_status_thunk_0800887c"
            },
            "code": "\nundefined4 check_system_status_thunk_0800887c(void)\n\n{\n  return 1;\n}\n\n",
            "called": [
                "FUN_0800887c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a01c",
            "calling": [
                "FUN_08009fe8"
            ],
            "imported": false,
            "current_name": "check_system_status_thunk_0800887c"
        },
        "FUN_080074e0": {
            "renaming": {
                "FUN_080074e0": "update_flags_080074e0",
                "param_1": "flag_value"
            },
            "code": "\nvoid update_flags_080074e0(int *flag_value)\n\n{\n  if (*flag_value == DAT_08007534) {\n    *(uint *)(DAT_08007540 + 0x18) = *(uint *)(DAT_08007540 + 0x18) & 0xfffff7ff;\n  }\n  if (*flag_value == 0x40000000) {\n    *(uint *)(DAT_08007540 + 0x1c) = *(uint *)(DAT_08007540 + 0x1c) & 0xfffffffe;\n  }\n  if (*flag_value == DAT_08007538) {\n    *(uint *)(DAT_08007540 + 0x1c) = *(uint *)(DAT_08007540 + 0x1c) & 0xfffffffd;\n  }\n  if (*flag_value == DAT_0800753c) {\n    *(uint *)(DAT_08007540 + 0x1c) = *(uint *)(DAT_08007540 + 0x1c) & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080074e0",
            "calling": [
                "FUN_08007710",
                "FUN_08007110"
            ],
            "imported": false,
            "current_name": "update_flags_080074e0"
        },
        "FUN_080073c0": {
            "renaming": {
                "FUN_080073c0": "execute_code_function_080073c0",
                "code": "code_type"
            },
            "code": "\nvoid execute_code_function_080073c0(void)\n\n{\n  if (*(code_type **)PTR_DAT_080073d0 != (code_type *)0x0) {\n    (**(code_type **)PTR_DAT_080073d0)(*(undefined4 *)PTR_DAT_080073d4);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073c0",
            "calling": [
                "FUN_08005cb4"
            ],
            "imported": false,
            "current_name": "execute_code_function_080073c0"
        },
        "FUN_080084b0": {
            "renaming": {
                "FUN_080084b0": "improved_function_080084b0",
                "cVar1": "character",
                "puVar2": "undefined_pointer",
                "uVar3": "undefined_value",
                "iVar4": "integer",
                "uVar5": "undefined_value_2"
            },
            "code": "\nvoid improved_function_080084b0(void)\n\n{\n  char character;\n  undefined *undefined_pointer;\n  undefined undefined_value;\n  int integer;\n  undefined4 undefined_value_2;\n  \n  character = PTR_DAT_080084f0[1];\n  integer = FUN_08007320((int)character,PTR_DAT_080084f4);\n  if (integer != 0) {\n    undefined_value_2 = FUN_08007320((int)character,PTR_DAT_080084f4);\n    undefined_value = FUN_0800734a(undefined_value_2,PTR_DAT_080084f8);\n    undefined_pointer = PTR_DAT_080084fc;\n    PTR_DAT_080084fc[0x59] = undefined_value;\n    undefined_pointer[0x58] = character;\n    *(undefined4 *)(undefined_pointer + 0x48) = 0x2580;\n    *(undefined4 *)(undefined_pointer + 0x54) = 0;\n    *(undefined4 *)(undefined_pointer + 0x4c) = 0;\n    *(undefined4 *)(undefined_pointer + 0x50) = 0;\n    FUN_08008078(undefined_pointer);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007320",
                "FUN_08008078",
                "FUN_0800734a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080084b0",
            "calling": [
                "FUN_08008500"
            ],
            "imported": false,
            "current_name": "improved_function_080084b0"
        },
        "FUN_08004050": {
            "renaming": {
                "FUN_08004050": "improved_code_08004050",
                "param_1": "pointer_array",
                "uVar1": "return_value",
                "puVar2": "pointer",
                "param_1[0xd]": "function_pointer"
            },
            "code": "\nundefined4 improved_code_08004050(uint **pointer_array)\n\n{\n  undefined4 return_value;\n  uint *pointer;\n  \n  if (*(char *)((int)pointer_array + 0x21) != '\\x02') {\n    pointer_array[0xe] = (uint *)0x4;\n    return 1;\n  }\n  **pointer_array = **pointer_array & 0xfffffff1;\n  **pointer_array = **pointer_array & 0xfffffffe;\n  pointer = *pointer_array;\n  if (pointer == DAT_080040e0) {\n    return_value = 1;\n  }\n  else if (pointer == DAT_080040e0 + 5) {\n    return_value = 0x10;\n  }\n  else if (pointer == DAT_080040e0 + 10) {\n    return_value = 0x100;\n  }\n  else if (pointer == DAT_080040e0 + 0xf) {\n    return_value = 0x1000;\n  }\n  else if (pointer == DAT_080040e0 + 0x14) {\n    return_value = 0x10000;\n  }\n  else if (pointer == DAT_080040e0 + 0x19) {\n    return_value = 0x100000;\n  }\n  else {\n    return_value = 0x1000000;\n  }\n  *(undefined4 *)(DAT_080040e4 + 4) = return_value;\n  *(undefined *)((int)pointer_array + 0x21) = 1;\n  *(undefined *)(pointer_array + 8) = 0;\n  if (function_pointer != (uint *)0x0) {\n    (*(code *)function_pointer)();\n    return 0;\n  }\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004050",
            "calling": [
                "FUN_08004f3c",
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "improved_code_08004050"
        },
        "FUN_08008e14": {
            "renaming": {
                "FUN_08008e14": "check_parameters_08008e14",
                "param_1": "is_true",
                "param_2": "is_max"
            },
            "code": "\nvoid check_parameters_08008e14(int is_true,int is_max)\n\n{\n  if ((is_true == 1) && (is_max == 0xffff)) {\n    FUN_08008df8(PTR_DAT_08008e3c,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08008df8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e14",
            "calling": [],
            "imported": false,
            "current_name": "check_parameters_08008e14"
        },
        "FUN_08005a28": {
            "renaming": {
                "FUN_08005a28": "calculate_shifted_value_08005a28",
                "uVar1": "shifted_value"
            },
            "code": "\nuint calculate_shifted_value_08005a28(void)\n\n{\n  uint shifted_value;\n  \n  shifted_value = FUN_08005a1c();\n  return shifted_value >> PTR_DAT_08005a44[(uint)(*(int *)(DAT_08005a40 + 4) << 0x15) >> 0x1d];\n}\n\n",
            "called": [
                "FUN_08005a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a28",
            "calling": [
                "FUN_080045c0",
                "FUN_08006538",
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08005a28"
        },
        "FUN_080095a8": {
            "renaming": {
                "FUN_080095a8": "print_formatted_string_080095a8",
                "param_1": "output_stream",
                "param_2": "format_specifier",
                "param_3": "num_characters_written",
                "param_4": "arg_list",
                "param_5": "output_function",
                "iVar1": "write_result",
                "uVar2": "min_field_width",
                "uVar3": "num_padding_chars",
                "bVar4": "has_left_padding"
            },
            "code": "\nundefined4\nprint_formatted_string_080095a8(undefined4 output_stream,uint *format_specifier,uint *num_characters_written,undefined4 arg_list,code *output_function)\n\n{\n  int write_result;\n  uint min_field_width;\n  uint num_padding_chars;\n  bool has_left_padding;\n  \n  min_field_width = format_specifier[4];\n  if ((int)format_specifier[4] < (int)format_specifier[2]) {\n    min_field_width = format_specifier[2];\n  }\n  *num_characters_written = min_field_width;\n  if (*(char *)((int)format_specifier + 0x43) != '\\0') {\n    *num_characters_written = min_field_width + 1;\n  }\n  if ((int)(*format_specifier << 0x1a) < 0) {\n    *num_characters_written = *num_characters_written + 2;\n  }\n  min_field_width = *format_specifier & 6;\n  if (min_field_width == 0) {\n    for (; (int)min_field_width < (int)(format_specifier[3] - *num_characters_written); min_field_width = min_field_width + 1) {\n      write_result = (*output_function)(output_stream,arg_list,(int)format_specifier + 0x19,1);\n      if (write_result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  min_field_width = (uint)*(byte *)((int)format_specifier + 0x43);\n  if (min_field_width != 0) {\n    min_field_width = 1;\n  }\n  num_padding_chars = min_field_width;\n  if ((int)(*format_specifier << 0x1a) < 0) {\n    *(undefined *)((int)format_specifier + min_field_width + 0x43) = 0x30;\n    num_padding_chars = min_field_width + 2;\n    *(undefined *)((int)format_specifier + min_field_width + 0x44) = *(undefined *)((int)format_specifier + 0x45);\n  }\n  write_result = (*output_function)(output_stream,arg_list,(int)format_specifier + 0x43,num_padding_chars);\n  if (write_result != -1) {\n    min_field_width = format_specifier[3];\n    has_left_padding = (*format_specifier & 6) != 4;\n    if (has_left_padding) {\n      min_field_width = 0;\n    }\n    num_padding_chars = 0;\n    if (!has_left_padding) {\n      min_field_width = min_field_width - *num_characters_written;\n    }\n    if (!has_left_padding) {\n      min_field_width = min_field_width & ~((int)min_field_width >> 0x1f);\n    }\n    if ((int)format_specifier[4] < (int)format_specifier[2]) {\n      min_field_width = min_field_width + (format_specifier[2] - format_specifier[4]);\n    }\n    while( true ) {\n      if (min_field_width == num_padding_chars) {\n        return 0;\n      }\n      write_result = (*output_function)(output_stream,arg_list,(int)format_specifier + 0x1a,1);\n      if (write_result == -1) break;\n      num_padding_chars = num_padding_chars + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080095a8",
            "calling": [
                "FUN_08009698"
            ],
            "imported": false,
            "current_name": "print_formatted_string_080095a8"
        },
        "FUN_08003002": {
            "renaming": {
                "FUN_08003002": "check_and_execute_08003002",
                "param_1": "input_ptr",
                "do_nothing_08008ac4": "wait_for_task_completion"
            },
            "code": "\nvoid check_and_execute_08003002(int input_ptr)\n\n{\n  if (*(char *)(input_ptr + 0x1f8) != '\\0') {\n    return;\n  }\n  FUN_08008990(0xd,1);\n  FUN_08002fca(input_ptr,0xd,2,0x28,0xd2);\n  do_nothing_08008ac4(0xfa);\n  FUN_08002fca(input_ptr,0xd,5,0x28,0xd2);\n  do_nothing_08008ac4(0x7d);\n  return;\n}\n\n",
            "called": [
                "FUN_08008ac4",
                "FUN_08008990",
                "FUN_08002fca"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003002",
            "calling": [
                "FUN_08003048"
            ],
            "imported": false,
            "current_name": "check_and_execute_08003002"
        },
        "FUN_08008ac4": {
            "renaming": {
                "FUN_08008ac4": "do_nothing_08008ac4"
            },
            "code": "\nvoid do_nothing_08008ac4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ac4",
            "calling": [
                "FUN_08003002",
                "FUN_08002fca"
            ],
            "imported": false,
            "current_name": "do_nothing_08008ac4"
        },
        "FUN_08003bd8": {
            "renaming": {
                "FUN_08003bd8": "check_parameters_08003bd8",
                "param_1": "params",
                "iVar1": "result",
                "uVar2": "var1",
                "uVar3": "var2"
            },
            "code": "\nundefined4 check_parameters_08003bd8(int *params)\n\n{\n  int result;\n  uint var1;\n  uint var2;\n  \n  if (params == (int *)0x0) {\n    return 1;\n  }\n  if (params[10] == 0) {\n    params[0xb] = 0;\n    *(undefined *)(params + 9) = 0;\n    FUN_08006ca8();\n  }\n  result = FUN_08003b8c(params);\n  var2 = params[10] & 0x10;\n  if ((var2 == 0) && (result == 0)) {\n    params[10] = params[10] & 0xffffeefdU | 2;\n    var1 = params[1] | params[7] | params[3] << 1;\n    if (params[2] == 0x100) {\n      var2 = 0x100;\n    }\n    else if (params[2] == 1) {\n      var2 = 0x100;\n    }\n    if (params[5] == 1) {\n      if (params[3] == 0) {\n        var2 = var2 | (params[6] + -1) * 0x2000 | 0x800;\n      }\n      else {\n        params[10] = params[10] | 0x20;\n        params[0xb] = params[0xb] | 1;\n      }\n    }\n    *(uint *)(*params + 4) = var2 | *(uint *)(*params + 4) & 0xffff16ff;\n    *(uint *)(*params + 8) = DAT_08003ce0 & *(uint *)(*params + 8) | var1;\n    if ((params[2] == 0x100) || (params[2] == 1)) {\n      var2 = (params[4] + -1) * 0x100000;\n    }\n    else {\n      var2 = 0;\n    }\n    *(uint *)(*params + 0x2c) = var2 | *(uint *)(*params + 0x2c) & 0xff0fffff;\n    if (var1 != (DAT_08003ce4 & *(uint *)(*params + 8))) {\n      params[10] = params[10] & 0xffffffedU | 0x10;\n      params[0xb] = params[0xb] | 1;\n      return 1;\n    }\n    params[0xb] = 0;\n    params[10] = params[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n  params[10] = params[10] | 0x10;\n  return 1;\n}\n\n",
            "called": [
                "FUN_08003b8c",
                "FUN_08006ca8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003bd8",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "check_parameters_08003bd8"
        },
        "FUN_08009d50": {
            "renaming": {
                "FUN_08009d50": "initialize_data_08009d50",
                "param_1": "data_ptr",
                "uVar1": "result",
                "iVar2": "compare_ptr",
                "bVar3": "is_same_ptr"
            },
            "code": "\nvoid initialize_data_08009d50(int data_ptr)\n\n{\n  undefined4 result;\n  int compare_ptr;\n  bool is_same_ptr;\n  \n  if (*(int *)(data_ptr + 0x18) == 0) {\n    *(undefined4 *)(data_ptr + 0x48) = 0;\n    *(undefined4 *)(data_ptr + 0x4c) = 0;\n    *(undefined4 *)(data_ptr + 0x50) = 0;\n    compare_ptr = *(int *)PTR_PTR_DAT_08009da8;\n    *(undefined **)(data_ptr + 0x28) = PTR_LAB_08009cd0_1_08009dac;\n    is_same_ptr = data_ptr == compare_ptr;\n    if (is_same_ptr) {\n      compare_ptr = 1;\n    }\n    if (is_same_ptr) {\n      *(int *)(data_ptr + 0x18) = compare_ptr;\n    }\n    result = FUN_08009db0();\n    *(undefined4 *)(data_ptr + 4) = result;\n    result = FUN_08009db0(data_ptr);\n    *(undefined4 *)(data_ptr + 8) = result;\n    result = FUN_08009db0(data_ptr);\n    *(undefined4 *)(data_ptr + 0xc) = result;\n    FUN_08009cdc(*(undefined4 *)(data_ptr + 4),4,0);\n    FUN_08009cdc(*(undefined4 *)(data_ptr + 8),9,1);\n    FUN_08009cdc(*(undefined4 *)(data_ptr + 0xc),0x12,2);\n    *(undefined4 *)(data_ptr + 0x18) = 1;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08009cdc",
                "FUN_08009db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009d50",
            "calling": [
                "FUN_080098d8",
                "FUN_08009c7c",
                "FUN_0800937c",
                "FUN_0800932c",
                "FUN_08009a80",
                "FUN_08009db0"
            ],
            "imported": false,
            "current_name": "initialize_data_08009d50"
        },
        "FUN_08003366": {
            "renaming": {
                "FUN_08003366": "update_data_08003366",
                "param_1": "data_ptr",
                "param_2": "flag",
                "param_3": "new_value_1",
                "param_4": "new_value_2"
            },
            "code": "\nvoid update_data_08003366(int data_ptr,int flag,undefined4 new_value_1,undefined4 new_value_2)\n\n{\n  if (flag == 0x71) {\n    *(undefined4 *)(data_ptr + 0x68) = new_value_1;\n    *(undefined4 *)(data_ptr + 0x40) = new_value_2;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003366",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "update_data_08003366"
        },
        "FUN_080091b0": {
            "renaming": {
                "FUN_080091b0": "copy_array_080091b0",
                "param_1": "array_start_index",
                "param_2": "source_array",
                "param_3": "array_length",
                "puVar1": "destination_end_address",
                "puVar2": "destination_current_address"
            },
            "code": "\nvoid copy_array_080091b0(int array_start_index,undefined *source_array,int array_length)\n\n{\n  undefined *destination_end_address;\n  undefined *destination_current_address;\n  \n  destination_current_address = (undefined *)(array_start_index + -1);\n  destination_end_address = source_array + array_length;\n  for (; source_array != destination_end_address; source_array = source_array + 1) {\n    destination_current_address = destination_current_address + 1;\n    *destination_current_address = *source_array;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091b0",
            "calling": [
                "FUN_080027f0",
                "FUN_08009908"
            ],
            "imported": false,
            "current_name": "copy_array_080091b0"
        },
        "FUN_08009108": {
            "renaming": {
                "FUN_08009108": "convert_to_64bit_08009108",
                "param_1": "input_32bit",
                "param_2": "input_64bit",
                "CONCAT44": "combine_64bit",
                "ulonglong": "unsigned_long_long"
            },
            "code": "\nlonglong convert_to_64bit_08009108(undefined4 input_32bit,uint input_64bit)\n\n{\n  if (DAT_08009120 != 0) {\n    return combine_64bit(input_32bit,2);\n  }\n  return (unsigned_long_long)input_64bit << 0x20;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009108",
            "calling": [
                "FUN_080090c2"
            ],
            "imported": false,
            "current_name": "convert_to_64bit_08009108"
        },
        "FUN_0800a18c": {
            "renaming": {
                "FUN_0800a18c": "execute_and_set_flags_0800a18c",
                "UNRECOVERED_JUMPTABLE": "execute_and_set_flags_address"
            },
            "code": "\nvoid execute_and_set_flags_0800a18c(void)\n\n{\n  code *execute_and_set_flags_0800a18c_address;\n  \n  execute_and_set_flags_0800a18c_address = execute_and_set_flags_0800a18c;\n  FUN_08009b5c();\n  if (-1 < *(int *)PTR_DAT_0800a228 << 0x1f) {\n    *(undefined4 *)PTR_DAT_0800a228 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_0800a22c << 0x1f) {\n    *(undefined4 *)PTR_DAT_0800a22c = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_0800a230 << 0x1f) {\n    *(undefined4 *)PTR_DAT_0800a230 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_0800a234 << 0x1f) {\n    *(undefined4 *)PTR_DAT_0800a234 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_0800a238 << 0x1f) {\n    *(undefined4 *)PTR_DAT_0800a238 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_0800a23c << 0x1f) {\n    *(undefined4 *)PTR_DAT_0800a23c = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_0800a240 << 0x1f) {\n    *(undefined4 *)PTR_DAT_0800a240 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_0800a244 << 0x1f) {\n    *(undefined4 *)PTR_DAT_0800a244 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_0800a248 << 0x1f) {\n    *(undefined4 *)PTR_DAT_0800a248 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_0800a24c << 0x1f) {\n    *(undefined4 *)PTR_DAT_0800a24c = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_0800a250 << 0x1f) {\n    *(undefined4 *)PTR_DAT_0800a250 = 1;\n  }\n  if (-1 < *(int *)PTR_DAT_0800a254 << 0x1f) {\n    *(undefined4 *)PTR_DAT_0800a254 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x0800a224. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*execute_and_set_flags_0800a18c_address)();\n  return;\n}\n\n",
            "called": [
                "FUN_08009b5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a18c",
            "calling": [
                "FUN_08009084"
            ],
            "imported": false,
            "current_name": "execute_and_set_flags_0800a18c"
        },
        "FUN_08009908": {
            "renaming": {
                "FUN_08009908": "calculate_result_08009908",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "constant_value",
                "uVar2": "result",
                "uVar3": "temp_result"
            },
            "code": "\nuint calculate_result_08009908(uint dividend,uint divisor)\n\n{\n  undefined4 constant_value;\n  uint result;\n  uint temp_result;\n  \n  constant_value = *(undefined4 *)PTR_PTR_DAT_08009914;\n  if (dividend != 0) {\n    if (divisor == 0) {\n      FUN_080091d8();\n      result = divisor;\n    }\n    else {\n      temp_result = FUN_0800a154();\n      result = dividend;\n      if ((temp_result < divisor) && (result = FUN_08009270(constant_value,divisor), result != 0)) {\n        FUN_080091b0(result,dividend,divisor);\n        FUN_080091d8(constant_value,dividend);\n      }\n    }\n    return result;\n  }\n  result = FUN_08009270(constant_value,divisor,divisor,PTR_PTR_DAT_08009914);\n  return result;\n}\n\n",
            "called": [
                "FUN_080091d8",
                "FUN_080091b0",
                "FUN_08009270",
                "FUN_0800a154"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009908",
            "calling": [
                "FUN_08002acc",
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "imported": false,
            "current_name": "calculate_result_08009908"
        },
        "FUN_08008a24": {
            "renaming": {
                "FUN_08008a24": "process_data_08008a24",
                "param_1": "index",
                "param_2": "output",
                "param_3": "input",
                "param_4": "data",
                "iVar1": "result",
                "uVar2": "shifted_value",
                "puVar3": "lookup_table",
                "uVar4": "lookup_value"
            },
            "code": "\nvoid process_data_08008a24(uint index,undefined4 output,undefined4 input,undefined *data)\n\n{\n  int result;\n  undefined4 shifted_value;\n  undefined *lookup_table;\n  uint lookup_value;\n  \n  if (index < 0x3c) {\n    lookup_value = (uint)(char)PTR_DAT_08008a64[index];\n    lookup_table = PTR_DAT_08008a64;\n  }\n  else {\n    lookup_value = 0xffffffff;\n    lookup_table = data;\n  }\n  if ((lookup_value != 0xffffffff) &&\n     (result = FUN_08006b28(lookup_value,PTR_DAT_08008a68,input,lookup_table,data), result != 0)) {\n    shifted_value = FUN_08006b7c((lookup_value << 0x18) >> 0x1c);\n    FUN_080072d8(shifted_value,1 << (lookup_value & 0xf) & 0xffff,output);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08006b28",
                "FUN_08006b7c",
                "FUN_080072d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a24",
            "calling": [
                "FUN_080088e0",
                "FUN_08002fca",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "process_data_08008a24"
        },
        "FUN_08008abc": {
            "renaming": {
                "FUN_08008abc": "FUNC_08008abc"
            },
            "code": "\nvoid FUNC_08008abc(void)\n\n{\n  FUN_0800723c();\n  return;\n}\n\n",
            "called": [
                "FUN_0800723c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008abc",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "FUNC_08008abc"
        },
        "FUN_08002b68": {
            "renaming": {
                "FUN_08002b68": "reverse_and_improve_08002b68",
                "param_1": "output_array",
                "param_2": "input_length",
                "param_3": "input_data",
                "param_4": "shift_amount",
                "param_5": "mask",
                "uVar2": "mask_as_uint",
                "uVar3": "shift_amount_as_uint",
                "iVar1": "result"
            },
            "code": "\nundefined4\nreverse_and_improve_08002b68(undefined4 *output_array,uint input_length,undefined4 input_data,uint shift_amount,byte mask)\n\n{\n  int result;\n  uint mask_as_uint;\n  uint shift_amount_as_uint;\n  \n  mask_as_uint = (uint)mask;\n  if (*(char *)((int)output_array + 0x11) == '\\0') {\n    return 0;\n  }\n  shift_amount_as_uint = shift_amount;\n  FUN_08002acc(input_data);\n  if (*(int *)PTR_DAT_08002bf4 != 0) {\n    if (mask_as_uint != 0) {\n      FUN_08002a30(output_array,input_length);\n      if (3 < mask_as_uint) {\n        mask_as_uint = 3;\n      }\n      while( true ) {\n        if (mask_as_uint == 0) break;\n        (**(code **)*output_array)(output_array,shift_amount >> ((mask_as_uint - 1 & 0x1f) << 3) & 0xff);\n        mask_as_uint = mask_as_uint - 1 & 0xff;\n      }\n      FUN_08002a58(output_array,0);\n    }\n    result = FUN_08007f0e(output_array + 5,(input_length & 0x7f) << 1,*(undefined4 *)PTR_DAT_08002bf4,input_data,\n                         shift_amount_as_uint);\n    if (result != 0) {\n      input_data = 0;\n    }\n    *PTR_DAT_08002bf8 = 0;\n    *PTR_DAT_08002bfc = (char)input_data;\n    return input_data;\n  }\n  output_array[1] = 1;\n  return 0;\n}\n\n",
            "called": [
                "FUN_08007f0e",
                "FUN_08002acc",
                "FUN_08002a58",
                "FUN_08002a30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b68",
            "calling": [
                "FUN_08002c00"
            ],
            "imported": false,
            "current_name": "reverse_and_improve_08002b68"
        },
        "FUN_080005e0": {
            "renaming": {
                "FUN_080005e0": "clear_memory_080005e0"
            },
            "code": "\nvoid clear_memory_080005e0(void)\n\n{\n  *PTR_DAT_080005f0 = 0;\n  *PTR_DAT_080005f4 = 0xff;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e0",
            "calling": [
                "FUN_08000aec",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "clear_memory_080005e0"
        },
        "FUN_08008020": {
            "renaming": {
                "FUN_08008020": "check_and_call_function_08008020",
                "param_1": "input_parameter",
                "iVar1": "result_of_previous_function_call"
            },
            "code": "\nvoid check_and_call_function_08008020(undefined4 input_parameter)\n\n{\n  int result_of_previous_function_call;\n  \n  result_of_previous_function_call = FUN_08007f78();\n  if (*(char *)(result_of_previous_function_call + 0x5d) == '\\0') {\n    FUN_080049e0(input_parameter);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080049e0",
                "FUN_08007f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008020",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": false,
            "current_name": "check_and_call_function_08008020"
        },
        "FUN_0800674c": {
            "renaming": {
                "FUN_0800674c": "do_nothing_0800674c"
            },
            "code": "\nvoid do_nothing_0800674c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800674c",
            "calling": [
                "FUN_0800674e"
            ],
            "imported": false,
            "current_name": "do_nothing_0800674c"
        },
        "FUN_08005dac": {
            "renaming": {
                "FUN_08005dac": "update_data_08005dac",
                "param_1": "data_address",
                "param_2": "data_values",
                "uVar1": "data_value_1",
                "iVar2": "data_value_2",
                "iVar3": "data_value_3"
            },
            "code": "\nvoid update_data_08005dac(int data_address,int *data_values)\n\n{\n  uint data_value_1;\n  int data_value_2;\n  int data_value_3;\n  \n  *(uint *)(data_address + 0x20) = *(uint *)(data_address + 0x20) & 0xffffefff;\n  data_value_1 = *(uint *)(data_address + 4);\n  data_value_2 = *data_values;\n  data_value_3 = data_values[2];\n  if (data_address == DAT_08005df0) {\n    data_value_1 = data_value_1 & 0xffffbfff | data_values[5] << 6;\n  }\n  *(uint *)(data_address + 4) = data_value_1;\n  *(uint *)(data_address + 0x1c) = *(uint *)(data_address + 0x1c) & 0xffff8cff | data_value_2 << 8;\n  *(int *)(data_address + 0x40) = data_values[1];\n  *(uint *)(data_address + 0x20) = *(uint *)(data_address + 0x20) & 0xffffdfff | data_value_3 << 0xc;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005dac",
            "calling": [
                "FUN_08006186",
                "FUN_08006128"
            ],
            "imported": false,
            "current_name": "update_data_08005dac"
        },
        "FUN_0800674e": {
            "renaming": {
                "FUN_0800674e": "improved_function_name_0800674e",
                "param_1": "input_array",
                "param_1[0xf]": "input_array_at_index_15"
            },
            "code": "\nundefined4 improved_function_name_0800674e(int *input_array)\n\n{\n  if (input_array != (int *)0x0) {\n    if (*(char *)((int)input_array + 0x39) == '\\0') {\n      *(undefined *)(input_array + 0xe) = 0;\n      do_nothing_0800674c();\n    }\n    *(undefined *)((int)input_array + 0x39) = 0x24;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) & 0xffffdfff;\n    FUN_08006538(input_array);\n    *(uint *)(*input_array + 0x10) = *(uint *)(*input_array + 0x10) & 0xffffb7ff;\n    *(uint *)(*input_array + 0x14) = *(uint *)(*input_array + 0x14) & 0xffffffd5;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x2000;\n    input_array_at_index_15 = 0;\n    *(undefined *)((int)input_array + 0x39) = 0x20;\n    *(undefined *)((int)input_array + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_08006538",
                "FUN_0800674c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800674e",
            "calling": [
                "FUN_08008078"
            ],
            "imported": false,
            "current_name": "improved_function_name_0800674e"
        },
        "FUN_0800771c": {
            "renaming": {
                "FUN_0800771c": "execute_callback_if_param_set_0800771c",
                "param_1": "callback_data",
                "iVar1": "callback_handler"
            },
            "code": "\nvoid execute_callback_if_param_set_0800771c(int callback_data)\n\n{\n  int callback_handler;\n  \n  callback_handler = FUN_08007718();\n  if ((*(code **)(callback_handler + 0x4c) != (code *)0x0) && (*(char *)(callback_data + 0x1c) == '\\x01')) {\n    (**(code **)(callback_handler + 0x4c))(callback_handler,0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800771c",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "execute_callback_if_param_set_0800771c"
        },
        "FUN_080066e8": {
            "renaming": {
                "FUN_080066e8": "check_params_080066e8",
                "param_1": "ptr_param_list",
                "param_2": "param_flags",
                "param_3": "expected_result",
                "param_5": "max_value",
                "iVar1": "result"
            },
            "code": "\nundefined4 check_params_080066e8(uint **ptr_param_list,uint param_flags,uint expected_result,int param_4,uint max_value)\n\n{\n  int result;\n  \n  do {\n    if (((param_flags & ~**ptr_param_list) == 0) != expected_result) {\n      return 0;\n    }\n  } while ((max_value == 0xffffffff) ||\n          ((max_value != 0 && (result = FUN_08003760(), (uint)(result - param_4) <= max_value))));\n  (*ptr_param_list)[3] = (*ptr_param_list)[3] & 0xfffffe5f;\n  (*ptr_param_list)[5] = (*ptr_param_list)[5] & 0xfffffffe;\n  *(undefined *)((int)ptr_param_list + 0x39) = 0x20;\n  *(undefined *)((int)ptr_param_list + 0x3a) = 0x20;\n  *(undefined *)(ptr_param_list + 0xe) = 0;\n  return 3;\n}\n\n",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080066e8",
            "calling": [
                "FUN_080067ac"
            ],
            "imported": false,
            "current_name": "check_params_080066e8"
        },
        "FUN_08009358": {
            "renaming": {
                "FUN_08009358": "process_data_08009358",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "data_ptr",
                "param_4": "data_len",
                "puVar2": "end_ptr",
                "iVar1": "result",
                "iVar3": "index"
            },
            "code": "\nint process_data_08009358(undefined4 input_1,undefined4 input_2,undefined *data_ptr,int data_len)\n\n{\n  int result;\n  undefined *end_ptr;\n  int index;\n  \n  end_ptr = data_ptr + data_len;\n  index = data_len;\n  do {\n    if (data_ptr == end_ptr) {\n      return 0;\n    }\n    result = FUN_0800932c(input_1,*data_ptr,input_2,data_len,index);\n    data_len = result + 1;\n    data_ptr = data_ptr + 1;\n  } while (data_len != 0);\n  return result;\n}\n\n",
            "called": [
                "FUN_0800932c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009358",
            "calling": [
                "FUN_0800937c"
            ],
            "imported": false,
            "current_name": "process_data_08009358"
        },
        "FUN_0800270c": {
            "renaming": {
                "FUN_0800270c": "calculate_difference_0800270c"
            },
            "code": "\nint calculate_difference_0800270c(void)\n\n{\n  return (uint)(byte)*PTR_DAT_08002718 - (uint)(byte)*PTR_DAT_0800271c;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800270c",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "calculate_difference_0800270c"
        },
        "FUN_08003370": {
            "renaming": {
                "FUN_08003370": "set_values_08003370",
                "param_1": "obj_ptr",
                "param_2": "unused",
                "param_3": "value1",
                "param_4": "value2"
            },
            "code": "\nvoid set_values_08003370(int obj_ptr,undefined4 unused,undefined4 value1,undefined4 value2)\n\n{\n  *(undefined4 *)(obj_ptr + 0x6c) = value1;\n  *(undefined4 *)(obj_ptr + 0x44) = value2;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003370",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_values_08003370"
        },
        "FUN_08007fa0": {
            "renaming": {
                "FUN_08007fa0": "process_input_08007fa0",
                "param_1": "input_array",
                "param_2": "is_valid",
                "param_3": "expected_value",
                "param_4": "unused_parameter",
                "iVar1": "output_value"
            },
            "code": "\nvoid process_input_08007fa0(int input_array,int is_valid,int expected_value,undefined4 unused_parameter)\n\n{\n  int output_value;\n  \n  output_value = FUN_08007f78();\n  if (expected_value == *(int *)(input_array + 0xc)) {\n    if (is_valid == 0) {\n      *(undefined *)(output_value + 0x88) = 0;\n      *(undefined *)(output_value + 0x5c) = 0;\n      if (*(code **)(output_value + 100) != (code *)0x0) {\n        (**(code **)(output_value + 100))();\n      }\n      FUN_080048c8(input_array,output_value + 0x68,*(undefined *)(output_value + 0x88),8);\n      return;\n    }\n    *(undefined *)(output_value + 0x5c) = 1;\n    FUN_08004954(input_array,output_value + 0x68,0x20,8,unused_parameter);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080048c8",
                "FUN_08007f78",
                "FUN_08004954"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007fa0",
            "calling": [
                "FUN_08004ac2"
            ],
            "imported": false,
            "current_name": "process_input_08007fa0"
        },
        "FUN_08003376": {
            "renaming": {
                "FUN_08003376": "update_data_08003376",
                "param_1": "data_ptr",
                "param_2": "new_value",
                "param_3": "index",
                "bVar1": "is_updated"
            },
            "code": "\nvoid update_data_08003376(undefined *data_ptr,undefined new_value,uint index)\n\n{\n  bool is_updated;\n  \n  if (index < *(uint *)(data_ptr + 8)) {\n    is_updated = false;\n  }\n  else {\n    is_updated = true;\n    if (*(code **)(data_ptr + 100) != (code *)0x0) {\n      *data_ptr = 1;\n      (**(code **)(data_ptr + 100))(*(undefined4 *)(data_ptr + 0x3c));\n      if (index < *(uint *)(data_ptr + 8)) {\n        is_updated = false;\n      }\n      else {\n        is_updated = true;\n      }\n    }\n  }\n  if (!is_updated) {\n    *(undefined *)(*(int *)(data_ptr + 4) + index) = new_value;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003376",
            "calling": [
                "FUN_080033cc",
                "FUN_08003474"
            ],
            "imported": false,
            "current_name": "update_data_08003376"
        },
        "FUN_08008bf4": {
            "renaming": {
                "FUN_08008bf4": "check_and_call_function_08008bf4"
            },
            "code": "\nvoid check_and_call_function_08008bf4(void)\n\n{\n  if (DAT_08008c18 != 0) {\n    FUN_08008afa(PTR_DAT_08008c1c);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08008afa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008bf4",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "check_and_call_function_08008bf4"
        },
        "FUN_08005430": {
            "renaming": {
                "FUN_08005430": "get_value_at_offset_08005430"
            },
            "code": "\nundefined4 get_value_at_offset_08005430(int param_1)\n\n{\n  return *(undefined4 *)(param_1 + 0x40);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005430",
            "calling": [
                "FUN_08007f0e",
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08005430"
        },
        "FUN_08002720": {
            "renaming": {
                "FUN_08002720": "get_next_byte_08002720",
                "(uint)bVar1": "current_byte_value"
            },
            "code": "\nuint get_next_byte_08002720(void)\n\n{\n  byte bVar1;\n  byte bVar2;\n  \n  bVar1 = *PTR_DAT_08002740;\n  if (current_byte_value < (uint)(byte)*PTR_DAT_08002744) {\n    bVar2 = *(byte *)(*(int *)PTR_DAT_08002748 + current_byte_value);\n    *PTR_DAT_08002740 = bVar1 + 1;\n    return (uint)bVar2;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002720",
            "calling": [
                "FUN_08001c08"
            ],
            "imported": false,
            "current_name": "get_next_byte_08002720"
        },
        "FUN_080031ce": {
            "renaming": {
                "FUN_080031ce": "execute_function_080031ce",
                "param_1": "function_pointer",
                "param_2": "arg_1",
                "param_3": "arg_2",
                "param_4": "arg_count",
                "param_5": "arg_offset",
                "puVar1": "function_pointer_value",
                "uVar2": "arg_index"
            },
            "code": "\nvoid execute_function_080031ce(undefined4 *function_pointer,undefined4 arg_1,undefined4 arg_2,uint arg_count,int arg_offset\n                 )\n\n{\n  undefined4 *function_pointer_value;\n  uint arg_index;\n  \n  function_pointer_value = (undefined4 *)*function_pointer;\n  if (function_pointer_value != (undefined4 *)0x0) {\n    (**(code **)*function_pointer_value)(function_pointer_value,0xf0,arg_2,*(code **)*function_pointer_value,arg_count);\n    (***(code ***)(undefined4 *)*function_pointer)((undefined4 *)*function_pointer,0x79);\n    (***(code ***)(undefined4 *)*function_pointer)((undefined4 *)*function_pointer,arg_1);\n    (***(code ***)(undefined4 *)*function_pointer)((undefined4 *)*function_pointer,arg_2);\n    for (arg_index = 0; arg_index < arg_count; arg_index = arg_index + 1) {\n      FUN_0800307a(function_pointer,1,arg_offset + arg_index,0);\n    }\n    (***(code ***)(undefined4 *)*function_pointer)((undefined4 *)*function_pointer,0xf7);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080031ce",
            "calling": [
                "FUN_08002df6"
            ],
            "imported": false,
            "current_name": "execute_function_080031ce"
        },
        "FUN_08009918": {
            "renaming": {
                "FUN_08009918": "initialize_value_08009918",
                "param_1": "output_value",
                "param_2": "input_value",
                "puVar1": "pointer_to_value",
                "iVar2": "function_result"
            },
            "code": "\nvoid initialize_value_08009918(int *output_value,undefined4 input_value)\n\n{\n  undefined *pointer_to_value;\n  int function_result;\n  \n  pointer_to_value = PTR_DAT_08009934;\n  *(undefined4 *)PTR_DAT_08009934 = 0;\n  function_result = FUN_08008804(input_value);\n  if ((function_result == -1) && (*(int *)pointer_to_value != 0)) {\n    *output_value = *(int *)pointer_to_value;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08008804"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009918",
            "calling": [
                "FUN_08009270"
            ],
            "imported": false,
            "current_name": "initialize_value_08009918"
        },
        "FUN_08005434": {
            "renaming": {
                "FUN_08005434": "count_down_08005434",
                "param_1": "input_num",
                "local_4": "result",
                "bVar1": "is_not_zero"
            },
            "code": "\nvoid count_down_08005434(int input_num)\n\n{\n  bool is_not_zero;\n  int result;\n  \n  result = input_num * (uint)((ulonglong)DAT_0800545c * (ulonglong)*(uint *)PTR_DAT_08005458 >> 0x29)\n  ;\n  do {\n    is_not_zero = result != 0;\n    result = result + -1;\n  } while (is_not_zero);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005434",
            "calling": [
                "FUN_08005460"
            ],
            "imported": false,
            "current_name": "count_down_08005434"
        },
        "FUN_08005e2e": {
            "renaming": {
                "FUN_08005e2e": "update_and_reset_flags_08005e2e",
                "param_1": "param_pointer",
                "puVar1": "pointer_value",
                "puVar1[8]": "array_value"
            },
            "code": "\nvoid update_and_reset_flags_08005e2e(uint **param_pointer)\n\n{\n  uint *pointer_value;\n  \n  *(undefined *)((int)param_pointer + 0x3d) = 2;\n  pointer_value = *param_pointer;\n  if ((array_value & 0x1111) == 0) {\n    if ((array_value & 0x444) == 0) {\n      *pointer_value = *pointer_value & 0xfffffffe;\n    }\n  }\n  FUN_08007110(param_pointer);\n  *(undefined *)((int)param_pointer + 0x3d) = 0;\n  *(undefined *)(param_pointer + 0xf) = 0;\n  return;\n}\n\n",
            "called": [
                "FUN_08007110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e2e",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": false,
            "current_name": "update_and_reset_flags_08005e2e"
        },
        "FUN_08007736": {
            "renaming": {
                "FUN_08007736": "execute_function_08007736",
                "iVar1": "result"
            },
            "code": "\nvoid execute_function_08007736(void)\n\n{\n  int result;\n  \n  result = FUN_08007718();\n  if (*(code **)(result + 0x48) != (code *)0x0) {\n    (**(code **)(result + 0x48))();\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007736",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "execute_function_08007736"
        },
        "FUN_08002968": {
            "renaming": {
                "FUN_08002968": "initialize_data_structures_08002968",
                "param_1": "data_structures_address",
                "param_2": "flag",
                "iVar1": "shifted_flag_value",
                "iVar2": "data_structure_offset"
            },
            "code": "\nvoid initialize_data_structures_08002968(int data_structures_address,uint flag)\n\n{\n  int shifted_flag_value;\n  int data_structure_offset;\n  \n  *PTR_DAT_080029ec = 0;\n  *PTR_DAT_080029f0 = 0;\n  if (*(int *)PTR_DAT_080029f4 != 0) {\n    FUN_080091c6(*(int *)PTR_DAT_080029f4,0,*PTR_DAT_080029f8);\n  }\n  *PTR_DAT_080029fc = 0;\n  *PTR_DAT_08002a00 = 0;\n  if (*(int *)PTR_DAT_08002a04 != 0) {\n    FUN_080091c6(*(int *)PTR_DAT_08002a04,0,*PTR_DAT_08002a08);\n  }\n  *PTR_DAT_08002a0c = 0;\n  shifted_flag_value = (flag & 0x7f) << 1;\n  *(char *)(data_structures_address + 0x10) = (char)shifted_flag_value;\n  if (flag == 0x33) {\n    *(undefined *)(data_structures_address + 0x11) = 1;\n  }\n  else {\n    *(undefined *)(data_structures_address + 0x11) = 0;\n  }\n  data_structure_offset = data_structures_address + 0x14;\n  FUN_080077b0(data_structure_offset,DAT_08002a10,0x4000,shifted_flag_value,*(undefined *)(data_structures_address + 0x11));\n  if (*(char *)(data_structures_address + 0x11) == '\\0') {\n    FUN_08007f8e(data_structure_offset,PTR_LAB_08002774_1_08002a14);\n    FUN_08007f7c(data_structure_offset,PTR_LAB_08002b00_1_08002a18);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007f7c",
                "FUN_08007f8e",
                "FUN_080077b0",
                "FUN_080091c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002968",
            "calling": [
                "FUN_08002a1c"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_08002968"
        },
        "FUN_08004ccc": {
            "renaming": {
                "FUN_08004ccc": "process_input_08004ccc",
                "param_1": "input_data",
                "puVar1": "selected_value",
                "param_1[0xc]": "output_data",
                "do_nothing_08004b80()": "perform_action_1",
                "do_nothing_08004a1e()": "perform_action_2"
            },
            "code": "\nundefined4 process_input_08004ccc(uint **input_data)\n\n{\n  uint *selected_value;\n  \n  selected_value = input_data[0xb];\n  if (*(char *)((int)input_data + 0x3d) == '!') {\n    if (*(short *)((int)input_data + 0x2a) == 0) {\n      if (((selected_value == (uint *)0x4) || (selected_value == (uint *)0x8)) || (selected_value == (uint *)0xffff0000)) {\n        (*input_data)[1] = (*input_data)[1] & 0xfffff8ff;\n        **input_data = **input_data | 0x200;\n        output_data = (uint *)0x0;\n        *(undefined *)((int)input_data + 0x3d) = 0x20;\n        if (*(char *)((int)input_data + 0x3e) == '@') {\n          *(undefined *)((int)input_data + 0x3e) = 0;\n          perform_action_1;\n        }\n        else {\n          *(undefined *)((int)input_data + 0x3e) = 0;\n          perform_action_2;\n        }\n      }\n      else {\n        (*input_data)[1] = (*input_data)[1] & 0xfffff8ff;\n        output_data = (uint *)0x11;\n        *(undefined *)((int)input_data + 0x3e) = 0;\n        *(undefined *)((int)input_data + 0x3d) = 0x20;\n        perform_action_2;\n      }\n    }\n    else {\n      selected_value = input_data[9];\n      input_data[9] = (uint *)((int)selected_value + 1);\n      (*input_data)[4] = (uint)*(byte *)selected_value;\n      *(short *)((int)input_data + 0x2a) = *(short *)((int)input_data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_08004b80",
                "FUN_08004a1e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ccc",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_08004ccc"
        },
        "FUN_080042d4": {
            "renaming": {
                "FUN_080042d4": "check_param_080042d4",
                "param_1": "input_value",
                "param_2": "flag",
                "return": "result"
            },
            "code": "\nundefined4 check_param_080042d4(int input_value,uint flag)\n\n{\n  if ((flag & *(uint *)(input_value + 8)) == 0) {\n    result 0;\n  }\n  result 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042d4",
            "calling": [
                "FUN_080072f0"
            ],
            "imported": false,
            "current_name": "check_param_080042d4"
        },
        "FUN_0800542a": {
            "renaming": {
                "FUN_0800542a": "get_byte_at_offset_0800542a",
                "param_1": "data_pointer"
            },
            "code": "\nundefined get_byte_at_offset_0800542a(int data_pointer)\n\n{\n  return *(undefined *)(data_pointer + 0x3d);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800542a",
            "calling": [
                "FUN_08007f0e",
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "get_byte_at_offset_0800542a"
        },
        "FUN_0800457c": {
            "renaming": {
                "FUN_0800457c": "process_data_0800457c",
                "param_1": "data_array",
                "pbVar1": "byte_pointer",
                "param_1[9]": "byte_array"
            },
            "code": "\nundefined4 process_data_0800457c(int *data_array)\n\n{\n  byte *byte_pointer;\n  \n  if (*(short *)((int)data_array + 0x2a) != 0) {\n    byte_pointer = (byte *)byte_array;\n    byte_array = (int)(byte_pointer + 1);\n    *(uint *)(*data_array + 0x10) = (uint)*byte_pointer;\n    *(short *)((int)data_array + 0x2a) = *(short *)((int)data_array + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800457c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_data_0800457c"
        },
        "FUN_080091c6": {
            "renaming": {
                "FUN_080091c6": "set_memory_080091c6",
                "param_1": "memory_start",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "memory_end"
            },
            "code": "\nvoid set_memory_080091c6(undefined *memory_start,undefined value,int size)\n\n{\n  undefined *memory_end;\n  \n  memory_end = memory_start + size;\n  for (; memory_start != memory_end; memory_start = memory_start + 1) {\n    *memory_start = value;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091c6",
            "calling": [
                "FUN_08009cdc",
                "FUN_08009d24",
                "FUN_08007118",
                "FUN_08002a58",
                "FUN_08002968",
                "FUN_08006d80",
                "FUN_08009db0"
            ],
            "imported": false,
            "current_name": "set_memory_080091c6"
        },
        "FUN_0800a07a": {
            "renaming": {
                "FUN_0800a07a": "process_param_0800a07a",
                "param_1": "input_param",
                "param_2": "param_array",
                "iVar1": "result",
                "uVar2": "flag",
                "bVar3": "is_error"
            },
            "code": "\nvoid process_param_0800a07a(undefined4 input_param,int param_array)\n\n{\n  int result;\n  ushort flag;\n  bool is_error;\n  \n  result = FUN_0800a130(input_param,(int)*(short *)(param_array + 0xe));\n  is_error = result == -1;\n  if (is_error) {\n    flag = *(ushort *)(param_array + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(param_array + 0x54) = result;\n    flag = *(ushort *)(param_array + 0xc) | 0x1000;\n  }\n  if (is_error) {\n    *(ushort *)(param_array + 0xc) = flag;\n  }\n  if (!is_error) {\n    *(ushort *)(param_array + 0xc) = flag;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800a130"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a07a",
            "calling": [],
            "imported": false,
            "current_name": "process_param_0800a07a"
        },
        "FUN_08003a20": {
            "renaming": {
                "FUN_08003a20": "improved_function_08003a20",
                "param_1": "array_ptr",
                "param_2": "value",
                "local_14": "loop_counter",
                "iVar1": "result_1",
                "uVar2": "result_2",
                "iVar3": "array_ptr_value"
            },
            "code": "\nundefined4 improved_function_08003a20(int *array_ptr,undefined4 value)\n\n{\n  int result_1;\n  undefined4 result_2;\n  int array_ptr_value;\n  uint loop_counter;\n  \n  array_ptr_value = *array_ptr;\n  if ((*(uint *)(array_ptr_value + 8) & 1) == 0) {\n    *(uint *)(array_ptr_value + 8) = *(uint *)(array_ptr_value + 8) | 1;\n    for (loop_counter = (uint)((ulonglong)DAT_08003a9c * (ulonglong)*(uint *)PTR_DAT_08003a98 >> 0x32);\n        loop_counter != 0; loop_counter = loop_counter - 1) {\n    }\n    array_ptr_value = FUN_08003760(array_ptr,value,\n                         (int)((ulonglong)DAT_08003a9c * (ulonglong)*(uint *)PTR_DAT_08003a98));\n    do {\n      if ((*(uint *)(*array_ptr + 8) & 1) != 0) {\n        return 0;\n      }\n      result_1 = FUN_08003760();\n    } while ((uint)(result_1 - array_ptr_value) < 3);\n    array_ptr[10] = array_ptr[10] | 0x10;\n    array_ptr[0xb] = array_ptr[0xb] | 1;\n    *(undefined *)(array_ptr + 9) = 0;\n    result_2 = 1;\n  }\n  else {\n    result_2 = 0;\n  }\n  return result_2;\n}\n\n",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a20",
            "calling": [
                "FUN_08003aa0",
                "FUN_08003e20"
            ],
            "imported": false,
            "current_name": "improved_function_08003a20"
        },
        "FUN_080064b0": {
            "renaming": {
                "FUN_080064b0": "set_bits_and_value_080064b0",
                "param_1": "ptr"
            },
            "code": "\nvoid set_bits_and_value_080064b0(int *ptr)\n\n{\n  *(uint *)(*ptr + 0xc) = *(uint *)(*ptr + 0xc) & 0xfffffedf;\n  *(uint *)(*ptr + 0x14) = *(uint *)(*ptr + 0x14) & 0xfffffffe;\n  *(undefined *)((int)ptr + 0x3a) = 0x20;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064b0",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "set_bits_and_value_080064b0"
        },
        "FUN_08009cdc": {
            "renaming": {
                "FUN_08009cdc": "initialize_data_struct_08009cdc",
                "param_1": "data_struct_ptr",
                "param_2": "initial_value_1",
                "param_3": "initial_value_2",
                "uVar1": "constant_value",
                "param_1[1]": "data_struct_field_2",
                "param_1[2]": "data_struct_field_3",
                "param_1[0x19]": "data_struct_field_5",
                "param_1[4]": "data_struct_field_7",
                "param_1[5]": "data_struct_field_8",
                "param_1[6]": "data_struct_field_9",
                "param_1[8]": "data_struct_field_18",
                "param_1[9]": "data_struct_field_19",
                "param_1[10]": "data_struct_field_20",
                "param_1[0xb]": "data_struct_field_21",
                "param_1[0xc]": "data_struct_field_22"
            },
            "code": "\nvoid initialize_data_struct_08009cdc(undefined4 *data_struct_ptr,undefined2 initial_value_1,undefined2 initial_value_2)\n\n{\n  undefined4 constant_value;\n  \n  *data_struct_ptr = 0;\n  data_struct_field_2 = 0;\n  data_struct_field_3 = 0;\n  *(undefined2 *)(data_struct_ptr + 3) = initial_value_1;\n  data_struct_field_5 = 0;\n  *(undefined2 *)((int)data_struct_ptr + 0xe) = initial_value_2;\n  data_struct_field_7 = 0;\n  data_struct_field_8 = 0;\n  data_struct_field_9 = 0;\n  FUN_080091c6(data_struct_ptr + 0x17,0,8);\n  constant_value = DAT_08009d14;\n  data_struct_field_18 = data_struct_ptr;\n  data_struct_field_19 = constant_value;\n  data_struct_field_20 = PTR_FUN_0800a042_1_08009d18;\n  data_struct_field_21 = PTR_FUN_0800a07a_1_08009d1c;\n  data_struct_field_22 = PTR_LAB_0800a09e_1_08009d20;\n  return;\n}\n\n",
            "called": [
                "FUN_080091c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009cdc",
            "calling": [
                "FUN_08009d50"
            ],
            "imported": false,
            "current_name": "initialize_data_struct_08009cdc"
        },
        "FUN_08002a58": {
            "renaming": {
                "FUN_08002a58": "check_value_08002a58",
                "param_1": "input_value",
                "iVar1": "result",
                "uVar2": "return_value"
            },
            "code": "\nundefined4 check_value_08002a58(int input_value)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  if (*(char *)(input_value + 0x11) == '\\0') {\n    return_value = 4;\n  }\n  else {\n    result = FUN_08007e74(input_value + 0x14,*PTR_DAT_08002ab0,*(undefined4 *)PTR_DAT_08002aac,\n                         *PTR_DAT_08002aa8);\n    if (result == 0) {\n      return_value = 0;\n    }\n    else if (result == 1) {\n      return_value = 1;\n    }\n    else {\n      return_value = 4;\n    }\n    if (*(int *)PTR_DAT_08002aac != 0) {\n      FUN_080091c6(*(int *)PTR_DAT_08002aac,0,*PTR_DAT_08002ab4);\n    }\n    *PTR_DAT_08002ab8 = 0;\n    *PTR_DAT_08002aa8 = 0;\n    *PTR_DAT_08002abc = 0;\n  }\n  return return_value;\n}\n\n",
            "called": [
                "FUN_080091c6",
                "FUN_08007e74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a58",
            "calling": [
                "FUN_08002ac0",
                "FUN_08001c18",
                "FUN_08002b68"
            ],
            "imported": false,
            "current_name": "check_value_08002a58"
        },
        "FUN_080026b0": {
            "renaming": {
                "FUN_080026b0": "improved_function_080026b0",
                "param_1": "input_param",
                "param_2": "input_value"
            },
            "code": "\nvoid improved_function_080026b0(int input_param,int input_value)\n\n{\n  if (input_value < 0x220) {\n    if (input_value < 0) {\n      input_value = 0;\n    }\n    else if (0xb4 < input_value) {\n      input_value = 0xb4;\n    }\n    input_value = FUN_08008ef4(input_value,0,0xb4,(0x88 - *(char *)(input_param + 1)) * 4,\n                           (600 - *(char *)(input_param + 2)) * 4);\n  }\n  FUN_0800267c(input_param,input_value);\n  return;\n}\n\n",
            "called": [
                "FUN_08008ef4",
                "FUN_0800267c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026b0",
            "calling": [
                "FUN_0800021a"
            ],
            "imported": false,
            "current_name": "improved_function_080026b0"
        },
        "FUN_08006092": {
            "renaming": {
                "FUN_08006092": "check_and_update_status_08006092",
                "param_1": "data_ptr"
            },
            "code": "\nundefined4 check_and_update_status_08006092(undefined4 *data_ptr)\n\n{\n  if (data_ptr != (undefined4 *)0x0) {\n    if (*(char *)((int)data_ptr + 0x3d) == '\\0') {\n      *(undefined *)(data_ptr + 0xf) = 0;\n      FUN_08006e68();\n    }\n    *(undefined *)((int)data_ptr + 0x3d) = 2;\n    FUN_08005fe8(*data_ptr,data_ptr + 1);\n    *(undefined *)((int)data_ptr + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_08006e68",
                "FUN_08005fe8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006092",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "check_and_update_status_08006092"
        },
        "FUN_08008d8c": {
            "renaming": {
                "FUN_08008d8c": "handle_input_08008d8c",
                "param_1": "input_type",
                "param_2": "input_value",
                "param_3": "input_data_1",
                "param_4": "input_data_2"
            },
            "code": "\nvoid handle_input_08008d8c(int input_type,int input_value,undefined4 input_data_1,undefined4 input_data_2)\n\n{\n  if (input_type != 1) {\n    return;\n  }\n  if (input_value == 0xffff) {\n    FUN_08008d30(PTR_DAT_08008dac,DAT_08008da8,input_data_1,0xffff,input_data_2);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08008d30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d8c",
            "calling": [],
            "imported": false,
            "current_name": "handle_input_08008d8c"
        },
        "FUN_080004d4": {
            "renaming": {
                "FUN_080004d4": "process_input_080004d4",
                "param_1": "input_flag",
                "param_2": "input_value",
                "puVar2": "data_pointer",
                "iVar1": "loop_counter"
            },
            "code": "\nvoid process_input_080004d4(int input_flag,int input_value)\n\n{\n  int loop_counter;\n  undefined *data_pointer;\n  \n  if (input_flag != 1) {\n    return;\n  }\n  if (input_value == 0xffff) {\n    data_pointer = PTR_DAT_080004fc;\n    for (loop_counter = 0xb; -1 < loop_counter; loop_counter = loop_counter + -1) {\n      FUN_08002580(data_pointer);\n      data_pointer = data_pointer + 3;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08002580"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004d4",
            "calling": [],
            "imported": false,
            "current_name": "process_input_080004d4"
        },
        "FUN_080005f8": {
            "renaming": {
                "FUN_080005f8": "pin_mode_handler_080005f8",
                "param_1": "pin_number",
                "param_2": "mode",
                "puVar1": "ptr",
                "iVar2": "result",
                "cVar3": "char_result",
                "bVar4": "bool_result",
                "uVar5": "temp"
            },
            "code": "\nvoid pin_mode_handler_080005f8(uint pin_number,int mode)\n\n{\n  undefined *ptr;\n  int result;\n  char char_result;\n  bool bool_result;\n  uint temp;\n  \n  result = FUN_08002fa0(PTR_DAT_08000874,pin_number);\n  if (result != 0x7f) {\n    result = FUN_08002fa0(PTR_DAT_08000874,pin_number);\n    if (result == 6) {\n      char_result = *PTR_DAT_0800087c;\n      if (char_result == '\\0') {\n        char_result = '\\0';\n      }\n      else if (mode == 6) {\n        char_result = '\\0';\n      }\n    }\n    else {\n      char_result = '\\0';\n    }\n    if (char_result != '\\0') {\n      FUN_080005e0();\n    }\n    if (pin_number < 0x3c) {\n      if (PTR_DAT_08000878[pin_number] == -1) {\n        bool_result = false;\n      }\n      else {\n        result = FUN_080036ac();\n        if (result == 0) {\n          bool_result = false;\n        }\n        else {\n          result = FUN_080036ac((int)(char)PTR_DAT_08000878[pin_number]);\n          if (result == 1) {\n            bool_result = false;\n          }\n          else if (mode == 4) {\n            bool_result = false;\n          }\n          else {\n            bool_result = true;\n          }\n        }\n      }\n    }\n    else {\n      bool_result = false;\n    }\n    if (bool_result) {\n      if ((byte)PTR_DAT_08000880[pin_number] < 0xc) {\n        result = FUN_080026f8(PTR_DAT_08000884 + (uint)(byte)PTR_DAT_08000880[pin_number] * 3);\n      }\n      else {\n        result = 0;\n      }\n      if (result != 0) {\n        FUN_08000588(pin_number);\n      }\n    }\n    temp = pin_number - 0x2e & 0xff;\n    if (temp < 0xe) {\n      if (pin_number < 0x3c) {\n        result = (int)(char)PTR_DAT_08000878[pin_number];\n      }\n      else {\n        result = -1;\n      }\n      result = FUN_080036ac(result);\n      if (result == 0) {\n        bool_result = false;\n      }\n      else {\n        if (pin_number < 0x3c) {\n          result = (int)(char)PTR_DAT_08000878[pin_number];\n        }\n        else {\n          result = -1;\n        }\n        result = FUN_080036ac(result);\n        if (result == 1) {\n          bool_result = false;\n        }\n        else {\n          bool_result = true;\n        }\n      }\n    }\n    else {\n      bool_result = false;\n    }\n    if (bool_result) {\n      FUN_08000488(temp,mode == 2);\n    }\n    if (pin_number < 0x3c) {\n      if (PTR_DAT_08000878[pin_number] == -1) {\n        bool_result = false;\n      }\n      else {\n        result = FUN_080036ac();\n        if (result == 0) {\n          bool_result = false;\n        }\n        else {\n          result = FUN_080036ac((int)(char)PTR_DAT_08000878[pin_number]);\n          if (result == 1) {\n            bool_result = false;\n          }\n          else {\n            bool_result = true;\n          }\n        }\n      }\n    }\n    else {\n      bool_result = false;\n    }\n    if (bool_result) {\n      if ((mode == 0) || (mode == 0xb)) {\n        PTR_DAT_08000888[pin_number >> 3] = PTR_DAT_08000888[pin_number >> 3] | (byte)(1 << (pin_number & 7))\n        ;\n      }\n      else {\n        PTR_DAT_08000888[pin_number >> 3] =\n             PTR_DAT_08000888[pin_number >> 3] & ~(byte)(1 << (pin_number & 7));\n      }\n    }\n    FUN_08002fc2(PTR_DAT_08000874,pin_number,0);\n    switch(mode) {\n    case 0:\n      if (pin_number < 0x3c) {\n        if (PTR_DAT_08000878[pin_number] == -1) {\n          bool_result = false;\n        }\n        else {\n          result = FUN_080036ac();\n          if (result == 0) {\n            bool_result = false;\n          }\n          else {\n            result = FUN_080036ac((int)(char)PTR_DAT_08000878[pin_number]);\n            if (result == 1) {\n              bool_result = false;\n            }\n            else {\n              bool_result = true;\n            }\n          }\n        }\n      }\n      else {\n        bool_result = false;\n      }\n      if (bool_result) {\n        FUN_08008990(pin_number,0);\n        FUN_08002fa8(PTR_DAT_08000874,pin_number,0);\n        return;\n      }\n      break;\n    case 1:\n      if (pin_number < 0x3c) {\n        if (PTR_DAT_08000a48[pin_number] == -1) {\n          bool_result = false;\n        }\n        else {\n          result = FUN_080036ac();\n          if (result == 0) {\n            bool_result = false;\n          }\n          else {\n            result = FUN_080036ac((int)(char)PTR_DAT_08000a48[pin_number]);\n            if (result == 1) {\n              bool_result = false;\n            }\n            else {\n              bool_result = true;\n            }\n          }\n        }\n      }\n      else {\n        bool_result = false;\n      }\n      if (bool_result) {\n        result = FUN_08002fa0(PTR_DAT_08000a44,pin_number);\n        if (result == 3) {\n          FUN_08008a24(pin_number,0);\n        }\n        FUN_08008990(pin_number,1);\n        FUN_08002fa8(PTR_DAT_08000a44,pin_number,1);\n        return;\n      }\n      break;\n    case 2:\n      if (temp < 0xe) {\n        if (pin_number < 0x3c) {\n          result = (int)(char)PTR_DAT_08000878[pin_number];\n        }\n        else {\n          result = -1;\n        }\n        result = FUN_080036ac(result);\n        if (result == 0) {\n          bool_result = false;\n        }\n        else {\n          if (pin_number < 0x3c) {\n            result = (int)(char)PTR_DAT_08000878[pin_number];\n          }\n          else {\n            result = -1;\n          }\n          result = FUN_080036ac(result);\n          if (result == 1) {\n            bool_result = false;\n          }\n          else {\n            bool_result = true;\n          }\n        }\n      }\n      else {\n        bool_result = false;\n      }\n      if (bool_result) {\n        if (pin_number < 0x3c) {\n          if (PTR_DAT_08000878[pin_number] == -1) {\n            bool_result = false;\n          }\n          else {\n            result = FUN_080036ac();\n            if (result == 0) {\n              bool_result = false;\n            }\n            else {\n              result = FUN_080036ac((int)(char)PTR_DAT_08000878[pin_number]);\n              if (result == 1) {\n                bool_result = false;\n              }\n            }\n          }\n        }\n        else {\n          bool_result = false;\n        }\n        if (bool_result) {\n          FUN_08008990(pin_number,0);\n        }\n        FUN_08002fa8(PTR_DAT_08000874,pin_number,2);\n        return;\n      }\n      break;\n    case 3:\n      if (pin_number < 0x3c) {\n        if (PTR_DAT_08000a48[pin_number] == -1) {\n          result = 0;\n        }\n        else {\n          result = FUN_080036ac();\n          if (result == 0) {\n            result = 0;\n          }\n          else {\n            result = FUN_080036ac((int)(char)PTR_DAT_08000a48[pin_number]);\n            if (result == 1) {\n              result = 0;\n            }\n            else {\n              result = FUN_0800738a((int)(char)PTR_DAT_08000a48[pin_number],PTR_DAT_08000a4c);\n            }\n          }\n        }\n      }\n      else {\n        result = 0;\n      }\n      if (result != 0) {\n        FUN_08008990(pin_number,1);\n        FUN_080088e0(pin_number,0);\n        FUN_08002fa8(PTR_DAT_08000a44,pin_number,3);\n        return;\n      }\n      break;\n    case 4:\n      if (pin_number < 0x3c) {\n        if (PTR_DAT_08000a48[pin_number] == -1) {\n          bool_result = false;\n        }\n        else {\n          result = FUN_080036ac();\n          if (result == 0) {\n            bool_result = false;\n          }\n          else {\n            result = FUN_080036ac((int)(char)PTR_DAT_08000a48[pin_number]);\n            if (result == 1) {\n              bool_result = false;\n            }\n            else {\n              bool_result = true;\n            }\n          }\n        }\n      }\n      else {\n        bool_result = false;\n      }\n      if (bool_result) {\n        FUN_08002fa8(PTR_DAT_08000a44,pin_number,4);\n        if (((byte)PTR_DAT_08000a50[pin_number] != 0xff) &&\n           (result = FUN_080026f8(PTR_DAT_08000a54 + (uint)(byte)PTR_DAT_08000a50[pin_number] * 3),\n           result != 0)) {\n          bool_result = false;\n        }\n        if (bool_result) {\n          FUN_08000500(pin_number,0xffffffff);\n          return;\n        }\n      }\n      break;\n    default:\n      FUN_08002f14(PTR_DAT_08000a44,PTR_s_Unknown_pin_mode_08000a60);\n      break;\n    case 6:\n      if (pin_number < 0x3c) {\n        if (PTR_DAT_08000a48[pin_number] == -1) {\n          result = 0;\n        }\n        else {\n          result = FUN_080036ac();\n          if (result == 0) {\n            result = 0;\n          }\n          else {\n            result = FUN_080036ac((int)(char)PTR_DAT_08000a48[pin_number]);\n            if (result == 1) {\n              result = 0;\n            }\n            else {\n              result = FUN_0800738a((int)(char)PTR_DAT_08000a48[pin_number],PTR_DAT_08000a58);\n              if (result == 0) {\n                result = FUN_0800738a((int)(char)PTR_DAT_08000a48[pin_number],PTR_DAT_08000a5c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        result = 0;\n      }\n      if (result != 0) {\n        FUN_08002fa8(PTR_DAT_08000a44,pin_number,6);\n        return;\n      }\n      break;\n    case 10:\n      break;\n    case 0xb:\n      if (pin_number < 0x3c) {\n        if (PTR_DAT_08000878[pin_number] == -1) {\n          bool_result = false;\n        }\n        else {\n          result = FUN_080036ac();\n          if (result == 0) {\n            bool_result = false;\n          }\n          else {\n            result = FUN_080036ac((int)(char)PTR_DAT_08000878[pin_number]);\n            if (result == 1) {\n              bool_result = false;\n            }\n            else {\n              bool_result = true;\n            }\n          }\n        }\n      }\n      else {\n        bool_result = false;\n      }\n      if (bool_result) {\n        FUN_08008990(pin_number,2);\n        ptr = PTR_DAT_08000a44;\n        FUN_08002fa8(PTR_DAT_08000a44,pin_number,0xb);\n        FUN_08002fc2(ptr,pin_number,1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08000500",
                "FUN_08002fa0",
                "FUN_08002fa8",
                "FUN_08002f14",
                "FUN_08000488",
                "FUN_08008a24",
                "FUN_08002fc2",
                "FUN_080036ac",
                "FUN_080088e0",
                "FUN_0800738a",
                "FUN_080026f8",
                "FUN_08008990",
                "FUN_08000588",
                "FUN_080005e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005f8",
            "calling": [
                "FUN_08000aec",
                "FUN_08001cd0",
                "FUN_08000a64"
            ],
            "imported": false,
            "current_name": "pin_mode_handler_080005f8"
        },
        "FUN_08009124": {
            "renaming": {
                "FUN_08009124": "execute_function_08009124",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "output_param_1",
                "param_4": "output_param_2",
                "uStack_8": "temp_output_param_1",
                "uStack_4": "temp_output_param_2"
            },
            "code": "\nvoid execute_function_08009124(undefined4 input_param_1,undefined4 input_param_2,undefined4 output_param_1,undefined4 output_param_2)\n\n{\n  undefined4 temp_output_param_1;\n  undefined4 temp_output_param_2;\n  \n  temp_output_param_1 = output_param_1;\n  temp_output_param_2 = output_param_2;\n  FUN_0800937c(*(undefined4 *)PTR_PTR_DAT_08009144,input_param_1,input_param_2,&temp_output_param_1,input_param_1,&temp_output_param_1);\n  return;\n}\n\n",
            "called": [
                "FUN_0800937c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009124",
            "calling": [
                "FUN_080090cc"
            ],
            "imported": false,
            "current_name": "execute_function_08009124"
        },
        "FUN_08002fa0": {
            "renaming": {
                "FUN_08002fa0": "get_value_from_offset_08002fa0",
                "param_1": "offset",
                "param_2": "base_address"
            },
            "code": "\nundefined get_value_from_offset_08002fa0(int offset,int base_address)\n\n{\n  return *(undefined *)(base_address + offset + 0xcc);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fa0",
            "calling": [
                "FUN_080022f8",
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "imported": false,
            "current_name": "get_value_from_offset_08002fa0"
        },
        "FUN_080064ae": {
            "renaming": {
                "FUN_080064ae": "do_nothing_080064ae"
            },
            "code": "\nvoid do_nothing_080064ae(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ae",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_080064ae"
        },
        "FUN_0800a424": {
            "renaming": {
                "FUN_0800a424": "do_nothing_0800a424"
            },
            "code": "\nvoid do_nothing_0800a424(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a424",
            "calling": [
                "FUN_08009148",
                "FUN_0800010c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800a424"
        },
        "FUN_08003a1c": {
            "renaming": {
                "FUN_08003a1c": "get_value_at_offset_08003a1c",
                "param_1": "base_address"
            },
            "code": "\nundefined4 get_value_at_offset_08003a1c(int base_address)\n\n{\n  return *(undefined4 *)(base_address + 0x28);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a1c",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08003a1c"
        },
        "FUN_080064ac": {
            "renaming": {
                "FUN_080064ac": "do_nothing_080064ac"
            },
            "code": "\nvoid do_nothing_080064ac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ac",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_080064ac"
        },
        "FUN_08005cb4": {
            "renaming": {
                "FUN_08005cb4": "check_and_set_flag_08005cb4",
                "param_1": "ptr_to_flag"
            },
            "code": "\nvoid check_and_set_flag_08005cb4(uint **ptr_to_flag)\n\n{\n  if (((**ptr_to_flag & 2) != 0) && (((*ptr_to_flag)[1] & 2) != 0)) {\n    FUN_080073c0();\n    (*ptr_to_flag)[1] = 0xfffffffd;\n  }\n  *(undefined4 *)(DAT_08005ce8 + 0x14) = 0x20000;\n  *(undefined *)((int)ptr_to_flag + 0x11) = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_080073c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cb4",
            "calling": [],
            "imported": false,
            "current_name": "check_and_set_flag_08005cb4"
        },
        "FUN_08007744": {
            "renaming": {
                "FUN_08007744": "get_value_at_offset_08007744",
                "param_1": "arg_offset"
            },
            "code": "\nundefined4 get_value_at_offset_08007744(int arg_offset)\n\n{\n  return *(undefined4 *)(*(int *)(arg_offset + 4) + 0x24);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007744",
            "calling": [],
            "imported": false,
            "current_name": "get_value_at_offset_08007744"
        },
        "FUN_08006538": {
            "renaming": {
                "FUN_08006538": "calculate_values_08006538",
                "param_1": "input_array",
                "uVar1": "multiplier",
                "uVar2": "constant",
                "iVar3": "value_1",
                "iVar4": "value_2",
                "iVar5": "value_3",
                "iVar6": "value_4",
                "iVar7": "value_5",
                "iVar8": "value_6",
                "iVar9": "value_7",
                "iVar10": "value_8",
                "iVar11": "value_9",
                "iVar12": "array_address"
            },
            "code": "\nvoid calculate_values_08006538(int *input_array)\n\n{\n  ulonglong multiplier;\n  uint constant;\n  int value_1;\n  int value_2;\n  int value_3;\n  int value_4;\n  int value_5;\n  int value_6;\n  int value_7;\n  int value_8;\n  int value_9;\n  int array_address;\n  \n  *(uint *)(*input_array + 0x10) = *(uint *)(*input_array + 0x10) & 0xffffcfff | input_array[3];\n  *(uint *)(*input_array + 0xc) =\n       input_array[2] | input_array[4] | input_array[5] | *(uint *)(*input_array + 0xc) & 0xffffe9f3;\n  *(uint *)(*input_array + 0x14) = *(uint *)(*input_array + 0x14) & 0xfffffcff | input_array[6];\n  array_address = *input_array;\n  if (array_address != DAT_080066e0) {\n    value_1 = FUN_08005a28();\n    constant = DAT_080066e4;\n    value_6 = input_array[1];\n    multiplier = (ulonglong)DAT_080066e4;\n    value_2 = FUN_08005a28();\n    value_7 = input_array[1];\n    value_3 = FUN_08005a28();\n    value_8 = input_array[1];\n    value_4 = FUN_08005a28();\n    value_9 = input_array[1];\n    value_5 = FUN_08005a28();\n    *(uint *)(array_address + 8) =\n         ((uint)((int)((ulonglong)constant *\n                       (ulonglong)\n                       (((uint)(value_4 * 0x19) / (uint)(value_9 << 2) +\n                        (uint)((ulonglong)constant *\n                               ((ulonglong)(uint)(value_5 * 0x19) / (ulonglong)(uint)(input_array[1] << 2)\n                               ) >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n         ((uint)((ulonglong)constant *\n                 (ulonglong)\n                 (((uint)(value_2 * 0x19) / (uint)(value_7 << 2) +\n                  (uint)((ulonglong)constant *\n                         ((ulonglong)(uint)(value_3 * 0x19) / (ulonglong)(uint)(value_8 << 2)) >> 0x25)\n                  * -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n         (uint)(multiplier * ((ulonglong)(uint)(value_1 * 0x19) / (ulonglong)(uint)(value_6 << 2)) >> 0x25) *\n         0x10;\n    return;\n  }\n  value_1 = FUN_08005a48();\n  constant = DAT_080066e4;\n  value_6 = input_array[1];\n  multiplier = (ulonglong)DAT_080066e4;\n  value_2 = FUN_08005a48();\n  value_7 = input_array[1];\n  value_3 = FUN_08005a48();\n  value_8 = input_array[1];\n  value_4 = FUN_08005a48();\n  value_9 = input_array[1];\n  value_5 = FUN_08005a48();\n  *(uint *)(array_address + 8) =\n       ((uint)((int)((ulonglong)constant *\n                     (ulonglong)\n                     (((uint)(value_4 * 0x19) / (uint)(value_9 << 2) +\n                      (uint)((ulonglong)constant *\n                             ((ulonglong)(uint)(value_5 * 0x19) / (ulonglong)(uint)(input_array[1] << 2))\n                            >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) +\n       ((uint)((ulonglong)constant *\n               (ulonglong)\n               (((uint)(value_2 * 0x19) / (uint)(value_7 << 2) +\n                (uint)((ulonglong)constant *\n                       ((ulonglong)(uint)(value_3 * 0x19) / (ulonglong)(uint)(value_8 << 2)) >> 0x25) *\n                -100) * 0x10 + 0x32) >> 0x25) & 0xf0) +\n       (uint)(multiplier * ((ulonglong)(uint)(value_1 * 0x19) / (ulonglong)(uint)(value_6 << 2)) >> 0x25) *\n       0x10;\n  return;\n}\n\n",
            "called": [
                "FUN_08005a28",
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006538",
            "calling": [
                "FUN_0800674e"
            ],
            "imported": false,
            "current_name": "calculate_values_08006538"
        },
        "FUN_080042e2": {
            "renaming": {
                "FUN_080042e2": "FUNC_080042e2"
            },
            "code": "\nvoid FUNC_080042e2(int param_1,int param_2,int param_3)\n\n{\n  if (param_3 == 0) {\n    *(int *)(param_1 + 0x10) = param_2 << 0x10;\n    return;\n  }\n  *(int *)(param_1 + 0x10) = param_2;\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080042e2",
            "calling": [
                "FUN_080072d8"
            ],
            "imported": false,
            "current_name": "FUNC_080042e2"
        },
        "FUN_08002fa8": {
            "renaming": {
                "FUN_08002fa8": "update_memory_if_not_elf_header_08002fa8",
                "param_1": "memory_address",
                "param_2": "offset",
                "param_3": "new_value"
            },
            "code": "\nvoid update_memory_if_not_elf_header_08002fa8(int memory_address,int offset,undefined new_value)\n\n{\n  if (*(char *)(memory_address + offset + 0xcc) != '\\x7f') {\n    *(undefined *)(memory_address + offset + 0xcc) = new_value;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fa8",
            "calling": [
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "update_memory_if_not_elf_header_08002fa8"
        },
        "FUN_0800325a": {
            "renaming": {
                "FUN_0800325a": "execute_command_0800325a",
                "param_1": "command_ptr",
                "param_2": "command_type",
                "param_3": "num_commands",
                "param_4": "command_offset",
                "puVar1": "command_func_ptr",
                "uVar2": "command_index"
            },
            "code": "\nvoid execute_command_0800325a(undefined4 *command_ptr,undefined4 command_type,uint num_commands,int command_offset)\n\n{\n  undefined4 *command_func_ptr;\n  uint command_index;\n  \n  command_func_ptr = (undefined4 *)*command_ptr;\n  if (command_func_ptr != (undefined4 *)0x0) {\n    (**(code **)*command_func_ptr)(command_func_ptr,0xf0);\n    (***(code ***)(undefined4 *)*command_ptr)((undefined4 *)*command_ptr,command_type);\n    for (command_index = 0; command_index < num_commands; command_index = command_index + 1) {\n      FUN_0800307a(command_ptr,1,command_offset + command_index,0);\n    }\n    (***(code ***)(undefined4 *)*command_ptr)((undefined4 *)*command_ptr,0xf7);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800325a",
            "calling": [
                "FUN_08002f0a",
                "FUN_080032a2"
            ],
            "imported": false,
            "current_name": "execute_command_0800325a"
        },
        "FUN_080091d8": {
            "renaming": {
                "FUN_080091d8": "insert_node_080091d8",
                "param_1": "root",
                "param_2": "size",
                "param_3": "data",
                "param_4": "unused",
                "puVar1": "ptr_to_list_head",
                "extraout_r1": "new_node",
                "ppiVar2": "prev_node",
                "ppiVar3": "next_node",
                "piVar4": "node_size",
                "ppiVar5": "curr_node",
                "ppiVar6": "prev_curr_node",
                "ppiVar7": "new_node"
            },
            "code": "\nvoid insert_node_080091d8(undefined4 *root,int size,undefined4 data,undefined4 unused)\n\n{\n  undefined *ptr_to_list_head;\n  int **new_node;\n  int **prev_node;\n  int **next_node;\n  int *node_size;\n  int **curr_node;\n  int **prev_curr_node;\n  int **new_node;\n  \n  if (size == 0) {\n    return;\n  }\n  new_node = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    new_node = (int **)((int)new_node + *(int *)(size + -4));\n  }\n  do_nothing_08009f48();\n  ptr_to_list_head = PTR_DAT_0800926c;\n  curr_node = *(int ***)PTR_DAT_0800926c;\n  if (curr_node == (int **)0x0) {\n    new_node[1] = (int *)0x0;\n    *(int ***)ptr_to_list_head = new_node;\n    prev_node = new_node;\n    next_node = (int **)ptr_to_list_head;\n  }\n  else if (new_node < curr_node) {\n    prev_node = (int **)*new_node;\n    next_node = (int **)((int)new_node + (int)prev_node);\n    if (curr_node == next_node) {\n      node_size = *curr_node;\n      curr_node = (int **)curr_node[1];\n      next_node = (int **)((int)node_size + (int)prev_node);\n      *new_node = (int *)next_node;\n    }\n    new_node[1] = (int *)curr_node;\n    *(int ***)ptr_to_list_head = new_node;\n  }\n  else {\n    do {\n      prev_curr_node = curr_node;\n      next_node = (int **)prev_curr_node[1];\n      if (next_node == (int **)0x0) break;\n      curr_node = next_node;\n    } while (next_node <= new_node);\n    prev_node = (int **)*prev_curr_node;\n    if ((int **)((int)prev_curr_node + (int)prev_node) == new_node) {\n      prev_node = (int **)((int)prev_node + (int)*new_node);\n      *prev_curr_node = (int *)prev_node;\n      if (next_node == (int **)((int)prev_curr_node + (int)prev_node)) {\n        node_size = *next_node;\n        next_node = (int **)next_node[1];\n        prev_node = (int **)((int)prev_node + (int)node_size);\n        *prev_curr_node = (int *)prev_node;\n        prev_curr_node[1] = (int *)next_node;\n      }\n    }\n    else if (new_node < (int **)((int)prev_curr_node + (int)prev_node)) {\n      *root = 0xc;\n    }\n    else {\n      prev_node = (int **)((int)new_node + (int)*new_node);\n      if (next_node == prev_node) {\n        node_size = *next_node;\n        next_node = (int **)next_node[1];\n        prev_node = (int **)((int)node_size + (int)*new_node);\n        *new_node = (int *)prev_node;\n      }\n      new_node[1] = (int *)next_node;\n      prev_curr_node[1] = (int *)new_node;\n    }\n  }\n  do_nothing_08009f4a(root,prev_node,next_node,unused);\n  return;\n}\n\n",
            "called": [
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091d8",
            "calling": [
                "FUN_08009b5c",
                "FUN_080091a0",
                "FUN_08009a80",
                "FUN_08009908"
            ],
            "imported": false,
            "current_name": "insert_node_080091d8"
        },
        "FUN_0800688e": {
            "renaming": {
                "FUN_0800688e": "validate_input_0800688e",
                "param_1": "input_array",
                "param_2": "input_int_1",
                "param_3": "input_int_2",
                "param_1[8]": "input_array[8]",
                "param_1[0xf]": "input_array[0xf]"
            },
            "code": "\nundefined4 validate_input_0800688e(int *input_array,int input_int_1,int input_int_2)\n\n{\n  if (*(char *)((int)input_array + 0x39) != ' ') {\n    return 2;\n  }\n  if (input_int_1 == 0) {\n    return 1;\n  }\n  if (input_int_2 == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    input_array[8] = input_int_1;\n    *(short *)(input_array + 9) = (short)input_int_2;\n    *(short *)((int)input_array + 0x26) = (short)input_int_2;\n    input_array[0xf] = 0;\n    *(undefined *)((int)input_array + 0x39) = 0x21;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800688e",
            "calling": [
                "FUN_08008730",
                "FUN_08008694"
            ],
            "imported": false,
            "current_name": "validate_input_0800688e"
        },
        "FUN_080088e0": {
            "renaming": {
                "FUN_080088e0": "process_input_080088e0",
                "param_1": "input_index",
                "param_2": "input_value",
                "iVar1": "function_result",
                "uVar2": "shift_value",
                "iVar3": "data_index"
            },
            "code": "\nvoid process_input_080088e0(uint input_index,uint input_value)\n\n{\n  int function_result;\n  uint shift_value;\n  int data_index;\n  \n  if (input_index < 0x3c) {\n    data_index = (int)(char)PTR_DAT_0800897c[input_index];\n  }\n  else {\n    data_index = -1;\n  }\n  if (data_index != -1) {\n    function_result = FUN_0800738a(data_index,PTR_DAT_08008980);\n    if (function_result == 0) {\n      FUN_08008990(input_index,1);\n      shift_value = *(uint *)PTR_DAT_08008988;\n      if (shift_value != 8) {\n        if (shift_value < 9) {\n          input_value = input_value << (8 - shift_value & 0xff);\n        }\n        else {\n          input_value = input_value >> (shift_value - 8 & 0xff);\n        }\n      }\n      if (input_value < 0x80) {\n        FUN_08008a24(input_index,0);\n      }\n      else {\n        FUN_08008a24(input_index,1);\n      }\n    }\n    else {\n      function_result = FUN_08006b28(data_index,PTR_DAT_08008984);\n      if (function_result == 0) {\n        FUN_08006b3e(data_index,PTR_DAT_08008984);\n      }\n      shift_value = *(uint *)PTR_DAT_08008988;\n      if (shift_value != 8) {\n        if (shift_value < 9) {\n          input_value = input_value << (8 - shift_value & 0xff);\n        }\n        else {\n          input_value = input_value >> (shift_value - 8 & 0xff);\n        }\n      }\n      FUN_08007118(data_index,DAT_0800898c,0xff,input_value,function_result == 0);\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08006b28",
                "FUN_08006b3e",
                "FUN_0800738a",
                "FUN_08007118",
                "FUN_08008990",
                "FUN_08008a24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080088e0",
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "imported": false,
            "current_name": "process_input_080088e0"
        },
        "FUN_08008b66": {
            "renaming": {
                "FUN_08008b66": "update_data_08008b66",
                "param_1": "data_ptr",
                "iVar1": "result",
                "uVar2": "new_index",
                "local_9": "new_value"
            },
            "code": "\nvoid update_data_08008b66(int data_ptr)\n\n{\n  int result;\n  ushort new_index;\n  undefined new_value;\n  \n  result = FUN_08008600(data_ptr,&new_value);\n  if ((result == 0) &&\n     (new_index = *(short *)(data_ptr + 0x60) + 1U & 0x3f, new_index != *(ushort *)(data_ptr + 0x62))) {\n    *(undefined *)(*(int *)(data_ptr + 0x5c) + (uint)*(ushort *)(data_ptr + 0x60)) = new_value;\n    *(ushort *)(data_ptr + 0x60) = new_index;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08008600"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b66",
            "calling": [],
            "imported": false,
            "current_name": "update_data_08008b66"
        },
        "FUN_0800870c": {
            "renaming": {
                "FUN_0800870c": "execute_function_based_on_u_var1_0800870c",
                "uVar1": "function_index"
            },
            "code": "\nvoid execute_function_based_on_uVar1_0800870c(void)\n\n{\n  uint function_index;\n  \n  function_index = FUN_080086e8();\n  if (function_index < 5) {\n    (**(code **)(PTR_DAT_08008728 + function_index * 4))(*(undefined4 *)(PTR_DAT_0800872c + function_index * 4));\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080086e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800870c",
            "calling": [
                "FUN_0800694c"
            ],
            "imported": false,
            "current_name": "execute_function_based_on_u_var1_0800870c"
        },
        "FUN_08008840": {
            "renaming": {
                "FUN_08008840": "get_error_code_08008840"
            },
            "code": "\nundefined4 get_error_code_08008840(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008840",
            "calling": [],
            "imported": false,
            "current_name": "get_error_code_08008840"
        },
        "FUN_08008600": {
            "renaming": {
                "FUN_08008600": "copy_data_to_buffer_08008600",
                "param_1": "source_address",
                "param_2": "destination_buffer",
                "param_3": "buffer_size",
                "param_4": "data_type_size",
                "iVar1": "copy_status"
            },
            "code": "\nundefined4 copy_data_to_buffer_08008600(int source_address,undefined *destination_buffer,undefined4 buffer_size,undefined4 data_type_size)\n\n{\n  int copy_status;\n  \n  if (source_address == 0) {\n    return 0xffffffff;\n  }\n  copy_status = FUN_080085b8();\n  if (copy_status == 0) {\n    *destination_buffer = *(undefined *)(source_address + 0x45);\n    FUN_080068d6(*(undefined4 *)(PTR_DAT_08008638 + (uint)*(byte *)(source_address + 0x44) * 4),\n                 source_address + 0x45,1,PTR_DAT_08008638,data_type_size);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "FUN_080068d6",
                "FUN_080085b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008600",
            "calling": [
                "FUN_08008b66"
            ],
            "imported": false,
            "current_name": "copy_data_to_buffer_08008600"
        },
        "FUN_08003154": {
            "renaming": {
                "FUN_08003154": "assign_value_08003154",
                "param_1": "output_ptr",
                "param_2": "input_value"
            },
            "code": "\nvoid assign_value_08003154(undefined4 *output_ptr,undefined4 input_value)\n\n{\n  *output_ptr = input_value;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003154",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": false,
            "current_name": "assign_value_08003154"
        },
        "FUN_08006420": {
            "renaming": {
                "FUN_08006420": "update_bits_08006420",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "new_value",
                "&": "bitwise_NOT"
            },
            "code": "\nvoid update_bits_08006420(int base_address,uint bit_position,int new_value)\n\n{\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) bitwise_NOT ~(4 << (bit_position bitwise_NOT 0xff));\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) | new_value << (bit_position bitwise_NOT 0xff);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006420",
            "calling": [
                "FUN_0800643c",
                "FUN_08006460"
            ],
            "imported": false,
            "current_name": "update_bits_08006420"
        },
        "FUN_08007750": {
            "renaming": {
                "FUN_08007750": "write_to_array_08007750",
                "param_1": "array_ptr",
                "param_2": "index",
                "param_3": "value"
            },
            "code": "\nvoid write_to_array_08007750(int array_ptr,int index,undefined4 value)\n\n{\n  *(undefined4 *)(*(int *)(array_ptr + 4) + 0x34 + index * 4) = value;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007750",
            "calling": [],
            "imported": false,
            "current_name": "write_to_array_08007750"
        },
        "FUN_08009938": {
            "renaming": {
                "FUN_08009938": "find_character_in_string_08009938",
                "param_1": "string_to_search",
                "param_2": "character_to_find",
                "pcVar1": "current_character"
            },
            "code": "\nchar * find_character_in_string_08009938(char *string_to_search,char character_to_find)\n\n{\n  char *current_character;\n  \n  do {\n    current_character = string_to_search;\n    if (*current_character == '\\0') {\n      if (character_to_find != '\\0') {\n        current_character = (char *)0x0;\n      }\n      return current_character;\n    }\n    string_to_search = current_character + 1;\n  } while (character_to_find != *current_character);\n  return current_character;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009938",
            "calling": [
                "FUN_0800997e"
            ],
            "imported": false,
            "current_name": "find_character_in_string_08009938"
        },
        "FUN_08007f0e": {
            "renaming": {
                "FUN_08007f0e": "check_input_08007f0e",
                "param_1": "input_array",
                "iVar1": "start_value",
                "iVar2": "current_value",
                "uVar3": "difference",
                "iVar4": "result",
                "iVar5": "array_index",
                "uVar6": "last_param"
            },
            "code": "\nint check_input_08007f0e(int input_array,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int start_value;\n  int current_value;\n  uint difference;\n  int result;\n  int array_index;\n  undefined4 last_param;\n  \n  last_param = param_4;\n  start_value = FUN_08003760();\n  difference = 0;\n  result = 2;\n  do {\n    array_index = input_array + 4;\n    current_value = FUNC_080047f4(array_index,param_2,param_3,param_4,last_param);\n    if (current_value == 0) {\n      result = 0;\n      while ((current_value = FUN_0800542a(array_index), current_value != 0x20 && (result == 0))) {\n        current_value = FUN_08003760();\n        difference = current_value - start_value;\n        if (difference < 0x65) {\n          current_value = FUN_08005430(array_index);\n          if (current_value != 0) {\n            result = 2;\n          }\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    current_value = FUN_08005430(array_index);\n  } while ((current_value == 4) && (difference < 100));\n  return result;\n}\n\n",
            "called": [
                "FUN_080047f4",
                "FUN_08003760",
                "FUN_08005430",
                "FUN_0800542a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f0e",
            "calling": [
                "FUN_08002b68"
            ],
            "imported": false,
            "current_name": "check_input_08007f0e"
        },
        "FUN_08004004": {
            "renaming": {
                "FUN_08004004": "set_bit_at_position_08004004",
                "param_1": "bit_position",
                "int": "integer"
            },
            "code": "\nvoid set_bit_at_position_08004004(uinteger bit_position)\n\n{\n  if (-1 < (integer)bit_position) {\n    *(integer *)(DAT_08004020 + ((bit_position >> 5) + 0x60) * 4) = 1 << (bit_position & 0x1f);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004004",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_at_position_08004004"
        },
        "FUN_08003158": {
            "renaming": {
                "FUN_08003158": "send_message_08003158",
                "param_1": "message_buffer",
                "param_2": "message_length",
                "param_3": "message_type",
                "puVar1": "message_handler",
                "local_a": "modified_message_type"
            },
            "code": "\nvoid send_message_08003158(undefined4 *message_buffer,uint message_length,ushort message_type)\n\n{\n  undefined4 *message_handler;\n  ushort modified_message_type;\n  \n  message_handler = (undefined4 *)*message_buffer;\n  if (message_handler != (undefined4 *)0x0) {\n    modified_message_type = message_type;\n    if (((int)message_length < 0x10) && (message_type < 0x4000)) {\n      (**(code **)*message_handler)(message_handler,message_length | 0xe0);\n      FUN_0800307a(message_buffer,2,&modified_message_type);\n    }\n    else {\n      FUN_08003106(message_buffer,message_length,2,&modified_message_type);\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08003106",
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003158",
            "calling": [
                "FUN_08002ef2"
            ],
            "imported": false,
            "current_name": "send_message_08003158"
        },
        "FUN_080090c2": {
            "renaming": {
                "FUN_080090c2": "swap_arguments_080090c2",
                "param_1": "first_argument",
                "param_2": "second_argument"
            },
            "code": "\nvoid swap_arguments_080090c2(undefined4 first_argument,undefined4 second_argument)\n\n{\n  FUN_08009108(second_argument,first_argument);\n  return;\n}\n\n",
            "called": [
                "FUN_08009108"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090c2",
            "calling": [
                "FUN_08008f78"
            ],
            "imported": false,
            "current_name": "swap_arguments_080090c2"
        },
        "FUN_08000ef8": {
            "renaming": {
                "FUN_08000ef8": "process_flags_08000ef8",
                "bVar1": "flagByte",
                "iVar2": "result",
                "bVar3": "isTrue",
                "bVar4": "flagResult"
            },
            "code": "\nvoid processFlags_08000ef8(void)\n\n{\n  byte flagByte;\n  int result;\n  bool isTrue;\n  byte flagResult;\n  \n  if (*PTR_DAT_08001188 != '\\0') {\n    flagByte = *PTR_DAT_0800118c;\n    if (*PTR_DAT_08001190 == -1) {\n      flagResult = 0;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        flagResult = 0;\n      }\n      else {\n        result = FUN_080036ac((int)(char)*PTR_DAT_08001190);\n        if (result == 1) {\n          flagResult = 0;\n        }\n        else if ((flagByte & 1) == 0) {\n          flagResult = 0;\n        }\n        else {\n          result = FUN_08008a6c(0);\n          if (result == 0) {\n            flagResult = 0;\n          }\n          else {\n            flagResult = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001190[1] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001190[1]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 2) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(1);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 2;\n    }\n    if (PTR_DAT_08001190[2] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001190[2]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 4) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(2);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 4;\n    }\n    if (PTR_DAT_08001190[3] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001190[3]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 8) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(3);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 8;\n    }\n    if (PTR_DAT_08001190[4] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001190[4]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 0x10) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(4);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 0x10;\n    }\n    if (PTR_DAT_08001190[5] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001190[5]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 0x20) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(5);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 0x20;\n    }\n    if (PTR_DAT_08001190[6] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001190[6]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 0x40) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(6);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 0x40;\n    }\n    if (PTR_DAT_08001190[7] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001190[7]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 0x80) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(7);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 0x80;\n    }\n    FUN_08000be8(0,flagResult);\n  }\n  if (PTR_DAT_08001188[1] != '\\0') {\n    flagByte = PTR_DAT_0800118c[1];\n    if (PTR_DAT_08001190[8] == -1) {\n      flagResult = 0;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        flagResult = 0;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001424[8]);\n        if (result == 1) {\n          flagResult = 0;\n        }\n        else if ((flagByte & 1) == 0) {\n          flagResult = 0;\n        }\n        else {\n          result = FUN_08008a6c(8);\n          if (result == 0) {\n            flagResult = 0;\n          }\n          else {\n            flagResult = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001424[9] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001424[9]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 2) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(9);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 2;\n    }\n    if (PTR_DAT_08001424[10] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001424[10]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 4) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(10);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 4;\n    }\n    if (PTR_DAT_08001424[0xb] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001424[0xb]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 8) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(0xb);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 8;\n    }\n    if (PTR_DAT_08001424[0xc] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001424[0xc]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 0x10) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(0xc);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 0x10;\n    }\n    if (PTR_DAT_08001424[0xd] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001424[0xd]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 0x20) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(0xd);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 0x20;\n    }\n    if (PTR_DAT_08001424[0xe] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001424[0xe]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 0x40) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(0xe);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 0x40;\n    }\n    if (PTR_DAT_08001424[0xf] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001424[0xf]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 0x80) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(0xf);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 0x80;\n    }\n    FUN_08000be8(1,flagResult,0);\n  }\n  if (PTR_DAT_08001428[2] != '\\0') {\n    flagByte = PTR_DAT_0800142c[2];\n    if (PTR_DAT_08001424[0x10] == -1) {\n      flagResult = 0;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        flagResult = 0;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001424[0x10]);\n        if (result == 1) {\n          flagResult = 0;\n        }\n        else if ((flagByte & 1) == 0) {\n          flagResult = 0;\n        }\n        else {\n          result = FUN_08008a6c(0x10);\n          if (result == 0) {\n            flagResult = 0;\n          }\n          else {\n            flagResult = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_080016c4[0x11] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x11]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 2) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(0x11);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 2;\n    }\n    if (PTR_DAT_080016c4[0x12] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x12]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 4) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(0x12);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 4;\n    }\n    if (PTR_DAT_080016c4[0x13] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x13]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 8) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(0x13);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 8;\n    }\n    if (PTR_DAT_080016c4[0x14] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x14]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 0x10) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(0x14);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 0x10;\n    }\n    if (PTR_DAT_080016c4[0x15] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x15]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 0x20) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(0x15);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 0x20;\n    }\n    if (PTR_DAT_080016c4[0x16] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x16]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 0x40) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(0x16);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 0x40;\n    }\n    if (PTR_DAT_080016c4[0x17] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x17]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 0x80) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(0x17);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 0x80;\n    }\n    FUN_08000be8(2,flagResult,0);\n  }\n  if (PTR_DAT_080016c8[3] != '\\0') {\n    flagByte = PTR_DAT_080016cc[3];\n    if (PTR_DAT_080016c4[0x18] == -1) {\n      flagResult = 0;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        flagResult = 0;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x18]);\n        if (result == 1) {\n          flagResult = 0;\n        }\n        else if ((flagByte & 1) == 0) {\n          flagResult = 0;\n        }\n        else {\n          result = FUN_08008a6c(0x18);\n          if (result == 0) {\n            flagResult = 0;\n          }\n          else {\n            flagResult = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_080016c4[0x19] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001960[0x19]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 2) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(0x19);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 2;\n    }\n    if (PTR_DAT_08001960[0x1a] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1a]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 4) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(0x1a);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 4;\n    }\n    if (PTR_DAT_08001960[0x1b] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1b]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 8) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(0x1b);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 8;\n    }\n    if (PTR_DAT_08001960[0x1c] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1c]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 0x10) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(0x1c);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 0x10;\n    }\n    if (PTR_DAT_08001960[0x1d] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1d]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 0x20) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(0x1d);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 0x20;\n    }\n    if (PTR_DAT_08001960[0x1e] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1e]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 0x40) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(0x1e);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 0x40;\n    }\n    if (PTR_DAT_08001960[0x1f] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1f]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 0x80) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(0x1f);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 0x80;\n    }\n    FUN_08000be8(3,flagResult,0);\n  }\n  if (PTR_DAT_08001964[4] != '\\0') {\n    flagByte = PTR_DAT_08001968[4];\n    if (PTR_DAT_08001960[0x20] == -1) {\n      flagResult = 0;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        flagResult = 0;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001960[0x20]);\n        if (result == 1) {\n          flagResult = 0;\n        }\n        else if ((flagByte & 1) == 0) {\n          flagResult = 0;\n        }\n        else {\n          result = FUN_08008a6c(0x20);\n          if (result == 0) {\n            flagResult = 0;\n          }\n          else {\n            flagResult = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001960[0x21] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001960[0x21]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 2) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(0x21);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 2;\n    }\n    if (PTR_DAT_08001b44[0x22] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x22]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 4) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(0x22);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 4;\n    }\n    if (PTR_DAT_08001b44[0x23] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x23]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 8) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(0x23);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 8;\n    }\n    if (PTR_DAT_08001b44[0x24] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x24]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 0x10) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(0x24);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 0x10;\n    }\n    if (PTR_DAT_08001b44[0x25] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x25]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 0x20) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(0x25);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 0x20;\n    }\n    if (PTR_DAT_08001b44[0x26] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x26]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 0x40) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(0x26);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 0x40;\n    }\n    if (PTR_DAT_08001b44[0x27] == -1) {\n      isTrue = false;\n    }\n    else {\n      result = FUN_080036ac();\n      if (result == 0) {\n        isTrue = false;\n      }\n      else {\n        result = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x27]);\n        if (result == 1) {\n          isTrue = false;\n        }\n        else if ((flagByte & 0x80) == 0) {\n          isTrue = false;\n        }\n        else {\n          result = FUN_08008a6c(0x27);\n          if (result == 0) {\n            isTrue = false;\n          }\n          else {\n            isTrue = true;\n          }\n        }\n      }\n    }\n    if (isTrue) {\n      flagResult = flagResult | 0x80;\n    }\n    FUN_08000be8(4,flagResult,0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080036ac",
                "FUN_08000be8",
                "FUN_08008a6c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ef8",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "process_flags_08000ef8"
        },
        "FUN_08008846": {
            "renaming": {
                "FUN_08008846": "set_memory_protection_08008846",
                "param_1": "address",
                "param_2": "protection"
            },
            "code": "\nundefined4 set_memory_protection_08008846(undefined4 address,int protection)\n\n{\n  *(undefined4 *)(protection + 4) = 0x2000;\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008846",
            "calling": [
                "FUN_0800a0ec"
            ],
            "imported": false,
            "current_name": "set_memory_protection_08008846"
        },
        "FUN_0800a430": {
            "renaming": {
                "FUN_0800a430": "do_nothing_0800a430"
            },
            "code": "\nvoid do_nothing_0800a430(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a430",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_0800a430"
        },
        "FUN_0800459c": {
            "renaming": {
                "FUN_0800459c": "update_data_0800459c",
                "param_1": "data_ptr",
                "puVar1": "data_byte_ptr"
            },
            "code": "\nundefined4 update_data_0800459c(int *data_ptr)\n\n{\n  undefined *data_byte_ptr;\n  \n  if (*(short *)((int)data_ptr + 0x2a) != 0) {\n    data_byte_ptr = (undefined *)data_ptr[9];\n    data_ptr[9] = (int)(data_byte_ptr + 1);\n    *data_byte_ptr = (char)*(undefined4 *)(*data_ptr + 0x10);\n    *(short *)((int)data_ptr + 0x2a) = *(short *)((int)data_ptr + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800459c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "update_data_0800459c"
        },
        "FUN_0800774a": {
            "renaming": {
                "FUN_0800774a": "set_param_value_0800774a",
                "param_1": "param_struct_ptr",
                "param_2": "new_value",
                "return": "void"
            },
            "code": "\nvoid set_param_value_0800774a(int param_struct_ptr,undefined4 new_value)\n\n{\n  *(undefined4 *)(*(int *)(param_struct_ptr + 4) + 0x24) = new_value;\n  void;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800774a",
            "calling": [],
            "imported": false,
            "current_name": "set_param_value_0800774a"
        },
        "FUN_080042f0": {
            "renaming": {
                "FUN_080042f0": "update_param_if_flag_set_080042f0",
                "param_1": "param"
            },
            "code": "\nvoid update_param_if_flag_set_080042f0(uint param)\n\n{\n  if ((*(uint *)(DAT_08004308 + 0x14) & param) != 0) {\n    *(uint *)(DAT_08004308 + 0x14) = param;\n    FUN_08009094();\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08009094"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042f0",
            "calling": [],
            "imported": false,
            "current_name": "update_param_if_flag_set_080042f0"
        },
        "FUN_080027f0": {
            "renaming": {
                "FUN_080027f0": "improved_function_080027f0",
                "param_1": "input_parameter",
                "param_2": "second_parameter",
                "param_3": "third_parameter",
                "cVar1": "char_value",
                "puVar2": "pointer_variable",
                "iVar3": "int_value",
                "uVar4": "unsigned_value",
                "uVar5": "new_unsigned_value"
            },
            "code": "\nuint improved_function_080027f0(int input_parameter,undefined4 second_parameter,uint third_parameter)\n\n{\n  char char_value;\n  undefined *pointer_variable;\n  int int_value;\n  undefined unsigned_value;\n  uint new_unsigned_value;\n  \n  pointer_variable = PTR_DAT_08002884;\n  if (*PTR_DAT_08002878 == '\\0') {\n    int_value = FUN_08007ede(input_parameter + 0x14,second_parameter,third_parameter & 0xffff);\n    if (int_value != 0) {\n      return 0;\n    }\n    return third_parameter;\n  }\n  new_unsigned_value = (byte)*PTR_DAT_0800287c + third_parameter;\n  if ((byte)*PTR_DAT_08002880 < new_unsigned_value) {\n    if (new_unsigned_value < 0x20) {\n      new_unsigned_value = 0x20;\n    }\n    int_value = FUN_08009908(*(undefined4 *)PTR_DAT_08002884,new_unsigned_value);\n    *(int *)pointer_variable = int_value;\n    if (int_value == 0) {\n      unsigned_value = 0;\n    }\n    else {\n      unsigned_value = (undefined)new_unsigned_value;\n    }\n    *PTR_DAT_08002880 = unsigned_value;\n  }\n  pointer_variable = PTR_DAT_08002888;\n  if (*(int *)PTR_DAT_08002884 != 0) {\n    FUN_080091b0((uint)(byte)*PTR_DAT_08002888 + *(int *)PTR_DAT_08002884,second_parameter,third_parameter);\n    char_value = *pointer_variable + (char)third_parameter;\n    *pointer_variable = char_value;\n    *PTR_DAT_0800287c = char_value;\n    return third_parameter;\n  }\n  *(undefined4 *)(input_parameter + 4) = 1;\n  return 0;\n}\n\n",
            "called": [
                "FUN_08007ede",
                "FUN_080091b0",
                "FUN_08009908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080027f0",
            "calling": [],
            "imported": false,
            "current_name": "improved_function_080027f0"
        },
        "FUN_0800314e": {
            "renaming": {
                "FUN_0800314e": "set_param_to_zero_0800314e",
                "param_1": "param"
            },
            "code": "\nvoid set_param_to_zero_0800314e(undefined4 *param)\n\n{\n  *param = 0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800314e",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_param_to_zero_0800314e"
        },
        "FUN_080076e0": {
            "renaming": {
                "FUN_080076e0": "initialize_param1_080076e0",
                "param_1": "param_array",
                "cVar1": "char_val",
                "iVar2": "int_val"
            },
            "code": "\nvoid initialize_param1_080076e0(undefined4 *param_array)\n\n{\n  char char_val;\n  int int_val;\n  \n  param_array[0x13] = 0;\n  char_val = FUN_08007544(*param_array);\n  FUN_08003fb0((int)char_val);\n  int_val = FUN_08005df4(param_array + 1);\n  if (int_val == 0) {\n    FUN_080062f4(param_array + 1,0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007544",
                "FUN_080062f4",
                "FUN_08003fb0",
                "FUN_08005df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080076e0",
            "calling": [
                "FUN_08002578"
            ],
            "imported": false,
            "current_name": "initialize_param1_080076e0"
        },
        "FUN_08002f14": {
            "renaming": {
                "FUN_08002f14": "initialize_buffer_08002f14",
                "param_1": "buffer_address"
            },
            "code": "\nvoid initialize_buffer_08002f14(int buffer_address)\n\n{\n  FUN_080032a2(buffer_address + 0x40);\n  return;\n}\n\n",
            "called": [
                "FUN_080032a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f14",
            "calling": [
                "FUN_08000500",
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "initialize_buffer_08002f14"
        },
        "FUN_080036a2": {
            "renaming": {
                "FUN_080036a2": "execute_setup_080036a2"
            },
            "code": "\nvoid execute_setup_080036a2(void)\n\n{\n  FUN_080072fa();\n  return;\n}\n\n",
            "called": [
                "FUN_080072fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036a2",
            "calling": [
                "FUN_08008f0e"
            ],
            "imported": false,
            "current_name": "execute_setup_080036a2"
        },
        "FUN_080038e4": {
            "renaming": {
                "FUN_080038e4": "improved_function_080038e4",
                "param_1": "int_array",
                "param_2": "uint_array",
                "uVar1": "result",
                "uVar2": "shift_value",
                "iVar3": "int_value",
                "local_c": "loop_counter"
            },
            "code": "\nundefined4 improved_function_080038e4(int *int_array,uint *uint_array)\n\n{\n  undefined4 result;\n  uint shift_value;\n  int int_value;\n  int loop_counter;\n  \n  if (*(char *)(int_array + 9) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(int_array + 9) = 1;\n    shift_value = uint_array[1];\n    if (shift_value < 7) {\n      shift_value = shift_value * 5 - 5;\n      *(uint *)(*int_array + 0x34) =\n           *uint_array << (shift_value & 0xff) | *(uint *)(*int_array + 0x34) & ~(0x1f << (shift_value & 0xff));\n    }\n    else if (shift_value < 0xd) {\n      shift_value = shift_value * 5 - 0x23;\n      *(uint *)(*int_array + 0x30) =\n           *uint_array << (shift_value & 0xff) | *(uint *)(*int_array + 0x30) & ~(0x1f << (shift_value & 0xff));\n    }\n    else {\n      shift_value = shift_value * 5 - 0x41;\n      *(uint *)(*int_array + 0x2c) =\n           *uint_array << (shift_value & 0xff) | *(uint *)(*int_array + 0x2c) & ~(0x1f << (shift_value & 0xff));\n    }\n    shift_value = *uint_array;\n    if (shift_value < 10) {\n      *(uint *)(*int_array + 0x10) =\n           uint_array[2] << (shift_value * 3 & 0xff) |\n           *(uint *)(*int_array + 0x10) & ~(7 << (shift_value * 3 & 0xff));\n    }\n    else {\n      shift_value = shift_value * 3 - 0x1e;\n      *(uint *)(*int_array + 0xc) =\n           uint_array[2] << (shift_value & 0xff) | *(uint *)(*int_array + 0xc) & ~(7 << (shift_value & 0xff));\n    }\n    if (*uint_array - 0x10 < 2) {\n      int_value = *int_array;\n      if (int_value == DAT_08003a10) {\n        if ((*(uint *)(int_value + 8) & 0x800000) == 0) {\n          *(uint *)(int_value + 8) = *(uint *)(int_value + 8) | 0x800000;\n          if (*uint_array == 0x10) {\n            for (loop_counter = (uint)((ulonglong)DAT_08003a18 * (ulonglong)*(uint *)PTR_DAT_08003a14 >>\n                                 0x32) * 10; loop_counter != 0; loop_counter = loop_counter + -1) {\n            }\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        int_array[10] = int_array[10] | 0x20;\n        result = 1;\n      }\n    }\n    else {\n      result = 0;\n    }\n    *(undefined *)(int_array + 9) = 0;\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038e4",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "improved_function_080038e4"
        },
        "FUN_08005e68": {
            "renaming": {
                "FUN_08005e68": "do_nothing_08005e68"
            },
            "code": "\nvoid do_nothing_08005e68(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e68",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e68"
        },
        "FUN_08005d48": {
            "renaming": {
                "FUN_08005d48": "update_data_08005d48",
                "param_1": "data_ptr",
                "param_2": "input_data",
                "uVar1": "updated_value_1",
                "uVar2": "updated_value_2",
                "uVar3": "updated_value_3"
            },
            "code": "\nvoid update_data_08005d48(int data_ptr,uint *input_data)\n\n{\n  uint updated_value_1;\n  uint updated_value_2;\n  uint updated_value_3;\n  \n  *(uint *)(data_ptr + 0x20) = *(uint *)(data_ptr + 0x20) & 0xfffffeff;\n  updated_value_2 = *(uint *)(data_ptr + 4);\n  updated_value_3 = *input_data;\n  updated_value_1 = *(uint *)(data_ptr + 0x20) & 0xfffffdff | input_data[2] << 8;\n  if (data_ptr == DAT_08005da8) {\n    updated_value_1 = (updated_value_1 & 0xfffff7ff | input_data[3] << 8) & 0xfffffbff;\n    updated_value_2 = updated_value_2 & 0xffffcfff | input_data[5] << 4 | input_data[6] << 4;\n  }\n  *(uint *)(data_ptr + 4) = updated_value_2;\n  *(uint *)(data_ptr + 0x1c) = *(uint *)(data_ptr + 0x1c) & 0xffffff8c | updated_value_3;\n  *(uint *)(data_ptr + 0x3c) = input_data[1];\n  *(uint *)(data_ptr + 0x20) = updated_value_1;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d48",
            "calling": [
                "FUN_08006186",
                "FUN_08006128"
            ],
            "imported": false,
            "current_name": "update_data_08005d48"
        }
    },
    "used_tokens": 234189,
    "layers": [
        [
            "FUN_0800a042",
            "FUN_08008694",
            "FUN_08002ce0",
            "FUN_08005188",
            "FUN_08009db0",
            "FUN_08002c2c",
            "FUN_08001bf8",
            "FUN_080072f0",
            "FUN_08000178",
            "FUN_080069ec",
            "FUN_0800a168",
            "FUN_080067ac",
            "FUN_0800735a",
            "FUN_08008c20",
            "FUN_08000a64",
            "FUN_0800723c",
            "FUN_080043a2",
            "FUN_0800694c",
            "FUN_08006280",
            "FUN_08007258",
            "FUN_0800a0ec",
            "FUN_08008df8",
            "FUN_08006c7c",
            "FUN_08006b5c",
            "FUN_08007376",
            "FUN_08000188",
            "FUN_08004f3c",
            "FUN_080033cc",
            "FUN_08003de4",
            "FUN_08000500",
            "FUN_08009d24",
            "FUN_0800344a",
            "FUN_080071e4",
            "FUN_08008e72",
            "FUN_080022f8",
            "FUN_080072fa",
            "FUN_08005084",
            "FUN_0800291c",
            "FUN_08002ac0",
            "FUN_08003346",
            "FUN_080032bc",
            "FUN_08003106",
            "FUN_08007708",
            "FUN_0800018c",
            "FUN_08003f94",
            "FUN_08008c44",
            "FUN_08002a26",
            "FUN_0800430c",
            "FUN_08006060",
            "FUN_08003350",
            "FUN_08006186",
            "FUN_08007710",
            "FUN_08003474",
            "FUN_08006b7c",
            "FUN_08008e7c",
            "FUN_08003aa0",
            "FUN_08003ce8",
            "FUN_08005fe8",
            "FUN_08008804",
            "FUN_0800738a",
            "FUN_08004e3c",
            "FUN_080091a0",
            "FUN_08002a1c",
            "FUN_08007718",
            "FUN_08002948",
            "FUN_08009e64",
            "FUN_08002acc",
            "FUN_08002a30",
            "FUN_0800932c",
            "FUN_0800322c",
            "FUN_080099a4",
            "FUN_08005a1c",
            "FUN_08003760",
            "FUN_08007320",
            "FUN_08000be8",
            "FUN_08003fd8",
            "FUN_0800307a",
            "FUN_0800319e",
            "FUN_08008d00",
            "FUN_08009190",
            "FUN_08004b82",
            "FUN_0800997e",
            "FUN_08002dbc",
            "FUN_08002e44",
            "FUN_0800242c",
            "FUN_080058d2",
            "FUN_08002c00",
            "FUN_08003f30",
            "FUN_08007f78",
            "FUN_08006b28",
            "FUN_080085dc",
            "FUN_08006b1c",
            "FUN_08008ed6",
            "FUN_0800a130",
            "FUN_08008f3c",
            "FUN_08002ef2",
            "FUN_08007332",
            "FUN_08006128",
            "FUN_08003658",
            "FUN_08009a80",
            "FUN_080062f4",
            "FUN_080073e8",
            "FUN_08004a76",
            "FUN_0800267c",
            "FUN_080047f4",
            "FUN_0800376c",
            "FUN_08003e20",
            "FUN_08005a48",
            "FUN_080033a8",
            "FUN_08002c14",
            "FUN_08008d18",
            "FUN_08009084",
            "FUN_0800a020",
            "FUN_08005840",
            "FUN_08007f7c",
            "FUN_08006d80",
            "FUN_08006c60",
            "FUN_08003306",
            "FUN_08002578",
            "FUN_08006932",
            "FUN_080060c4",
            "FUN_08009eac",
            "FUN_080072d8",
            "FUN_080045c0",
            "FUN_08007e74",
            "FUN_08002efe",
            "FUN_08002f84",
            "FUN_08002ddc",
            "FUN_08009094",
            "FUN_08009f2c",
            "FUN_0800a154",
            "FUN_08002580",
            "FUN_08007f8e",
            "FUN_08006b3e",
            "FUN_08006262",
            "FUN_08007110",
            "FUN_08007594",
            "FUN_080073ec",
            "FUN_08008ef4",
            "FUN_08002df6",
            "FUN_08007118",
            "FUN_08009fe8",
            "FUN_08002c1e",
            "FUN_08005a68",
            "FUN_08008f78",
            "FUN_08008d30",
            "FUN_08002f94",
            "FUN_0800734a",
            "FUN_08000aec",
            "FUN_08008eec",
            "FUN_080068d6",
            "FUN_080032a2",
            "FUN_08001b48",
            "FUN_08006390",
            "FUN_08008730",
            "FUN_08005df4",
            "FUN_08009148",
            "FUN_08008854",
            "FUN_080064cc",
            "FUN_08004d6c",
            "FUN_08004ac2",
            "FUN_08008850",
            "FUN_08006ca8",
            "FUN_08002fc2",
            "FUN_08008afa",
            "FUN_08003048",
            "FUN_0800937c",
            "FUN_08000214",
            "FUN_08003724",
            "FUN_080038dc",
            "FUN_080025ac",
            "FUN_08002634",
            "FUN_08002f0a",
            "FUN_08005bb8",
            "FUN_08007648",
            "FUN_08008858",
            "FUN_080063c0",
            "FUN_08004a24",
            "FUN_08002fba",
            "FUN_080090cc",
            "FUN_080049e0",
            "FUN_08006d24",
            "FUN_080098d8",
            "FUN_08009270",
            "FUN_08008500",
            "FUN_080048c8",
            "FUN_08009954",
            "FUN_08005aa4",
            "FUN_08005e6e",
            "FUN_08004024",
            "FUN_08002400",
            "FUN_08000588",
            "FUN_08002644",
            "FUN_08008868",
            "FUN_080036ac",
            "FUN_08002f1e",
            "FUN_0800885c",
            "FUN_0800643c",
            "FUN_08002fca",
            "FUN_08009c7c",
            "FUN_08009b5c",
            "FUN_0800021a",
            "FUN_08008a6c",
            "FUN_080026f8",
            "FUN_080085b8",
            "FUN_08001c08",
            "FUN_080075dc",
            "FUN_08007544",
            "FUN_08007ff0",
            "FUN_08008990",
            "FUN_08004396",
            "FUN_08003fb0",
            "FUN_080052f0",
            "FUN_08002ec4",
            "FUN_08007306",
            "FUN_08008f0e",
            "FUN_08002f2c",
            "FUN_08004954",
            "FUN_08005cec",
            "FUN_0800886c",
            "FUN_08003748",
            "FUN_080040e8",
            "FUN_0800288c",
            "FUN_0800010c",
            "FUN_08002e26",
            "FUN_080036d8",
            "FUN_08006e68",
            "FUN_080086e8",
            "FUN_0800a110",
            "FUN_08003b8c",
            "FUN_080035b8",
            "FUN_08001c18",
            "FUN_08006460",
            "FUN_08004046",
            "FUN_08008880",
            "FUN_08002ed2",
            "FUN_080073ae",
            "FUN_08000488",
            "FUN_08003f0c",
            "FUN_08008f1c",
            "FUN_080058ac",
            "FUN_08006bb8",
            "FUN_08007438",
            "FUN_08004aec",
            "FUN_0800887c",
            "FUN_08004728",
            "FUN_08007ede",
            "FUN_0800863c",
            "thunk_FUN_0800887c",
            "FUN_080074e0",
            "FUN_080073c0",
            "FUN_080084b0",
            "FUN_08004050",
            "FUN_08008e14",
            "FUN_08005a28",
            "FUN_080095a8",
            "FUN_08003002",
            "FUN_08003bd8",
            "FUN_08009d50",
            "FUN_08003366",
            "FUN_080091b0",
            "FUN_08009108",
            "FUN_0800a18c",
            "FUN_08009908",
            "FUN_08008a24",
            "FUN_08008abc",
            "FUN_08002b68",
            "FUN_080005e0",
            "FUN_08008020",
            "FUN_08005dac",
            "FUN_0800674e",
            "FUN_0800771c",
            "FUN_080066e8",
            "FUN_08009358",
            "FUN_0800270c",
            "FUN_08003370",
            "FUN_08007fa0",
            "FUN_08003376",
            "FUN_08008bf4",
            "FUN_08005430",
            "FUN_08002720",
            "FUN_080031ce",
            "FUN_08009918",
            "FUN_08005434",
            "FUN_08005e2e",
            "FUN_08007736",
            "FUN_08002968",
            "FUN_08004ccc",
            "FUN_080042d4",
            "FUN_0800542a",
            "FUN_0800457c",
            "FUN_080091c6",
            "FUN_0800a07a",
            "FUN_08003a20",
            "FUN_080064b0",
            "FUN_08009cdc",
            "FUN_08002a58",
            "FUN_080026b0",
            "FUN_08006092",
            "FUN_08008d8c",
            "FUN_080004d4",
            "FUN_08009124",
            "FUN_08002fa0",
            "FUN_08003a1c",
            "FUN_08005cb4",
            "FUN_08007744",
            "FUN_08006538",
            "FUN_080042e2",
            "FUN_08002fa8",
            "FUN_0800325a",
            "FUN_080091d8",
            "FUN_0800688e",
            "FUN_080088e0",
            "FUN_08008b66",
            "FUN_0800870c",
            "FUN_08008840",
            "FUN_08008600",
            "FUN_08003154",
            "FUN_08006420",
            "FUN_08007750",
            "FUN_08009938",
            "FUN_08007f0e",
            "FUN_08004004",
            "FUN_08003158",
            "FUN_080090c2",
            "FUN_08008846",
            "FUN_0800459c",
            "FUN_0800774a",
            "FUN_080042f0",
            "FUN_080027f0",
            "FUN_0800314e",
            "FUN_080076e0",
            "FUN_08002f14",
            "FUN_080036a2",
            "FUN_080038e4",
            "FUN_08005d48"
        ],
        [
            "FUN_080077b0",
            "FUN_08009698",
            "FUN_08001cd0",
            "FUN_08005460",
            "FUN_08008078",
            "FUN_080005f8",
            "FUN_08000ef8"
        ]
    ],
    "locked_functions": []
}