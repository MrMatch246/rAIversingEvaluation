{
    "functions": {
        "FUN_08007246": {
            "renaming": {
                "FUN_08007246": "update_and_return_08007246",
                "update_value_08003748": "update_value",
                "do_nothing_and_return_08004046": "do_nothing_and_return",
                "do_nothing_08007244": "do_nothing"
            },
            "code": "void update_and_return_08007246(void)\n{\n  update_value();\n  do_nothing_and_return();\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08007244",
                "FUN_08004046",
                "FUN_08003748"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007246",
            "calling": [],
            "imported": false,
            "current_name": "update_and_return_08007246"
        },
        "FUN_0800a042": {
            "renaming": {
                "FUN_0800a042": "process_input_0800a042",
                "param_1": "output_buffer",
                "param_2": "input_buffer_address",
                "param_3": "unused_param1",
                "param_4": "unused_param2",
                "unaff_r4": "unaffected_register_4",
                "unaff_r5": "unaffected_register_5",
                "in_lr": "link_register",
                "puVar2": "pointer",
                "iVar3": "process_result",
                "sVar1": "input_length"
            },
            "code": "void process_input_0800a042(int *output_buffer, int input_buffer_address, undefined4 unused_param1, undefined4 unused_param2)\n{\n    short input_length = *(short *)(input_buffer_address + 0xe);\n    if ((int)((uint)*(ushort *)(input_buffer_address + 0xc) << 0x17) < 0) {\n        process_data(output_buffer, input_length, 0, 2);\n    }\n    *(ushort *)(input_buffer_address + 0xc) = *(ushort *)(input_buffer_address + 0xc) & 0xefff;\n    undefined *ptr = PTR_DAT_0800a0c8;\n    *(undefined4 *)PTR_DAT_0800a0c8 = 0;\n    int process_result = process_input_0800a042_wrapper_0800885c((int)input_length, unused_param1, unused_param2, unused_param2, unused_param2, unaff_r4, unaff_r5, in_lr);\n    if ((process_result == -1) && (*(int *)ptr != 0)) {\n        *output_buffer = *(int *)ptr;\n    }\n    return;\n}",
            "called": [
                "FUN_0800a130",
                "FUN_0800885c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a042",
            "calling": [],
            "imported": false,
            "current_name": "process_input_0800a042"
        },
        "FUN_08008694": {
            "renaming": {
                "FUN_08008694": "store_input_data_08008694",
                "param_1": "data_address",
                "param_2": "input_data",
                "bVar1": "data_index",
                "PTR_DAT_080086dc": "data_store_pointer",
                "PTR_DAT_080086e0": "data_index_pointer",
                "decode_and_store_bits_08003f30": "decode_and_store_bits",
                "set_bit_at_position_08003f94": "set_bit_at_position",
                "validate_input_0800688e": "validate_input",
                "*(byte *)(param_1 + 0x44)": "*(byte *)(data_address + 0x44)",
                "*(undefined4 *)(PTR_DAT_080086dc + (uint)bVar1 * 4)": "*(undefined4 *)(data_store_pointer + (uint)data_index * 4)",
                "*(int *)(PTR_DAT_080086e0 + (uint)bVar1 * 4)": "*(int *)(data_index_pointer + (uint)data_index * 4)",
                "*(char *)(param_1 + 0x5a)": "*(char *)(data_address + 0x5a)",
                "*(undefined4 *)(PTR_DAT_080086e4 + (uint)*(byte *)(param_1 + 0x44) * 4)": "*(undefined4 *)(validation_data_pointer + (uint)*(byte *)(data_address + 0x44) * 4)",
                "*(int *)(param_1 + 100) + (uint)*(ushort *)(param_1 + 0x6a)": "*(int *)(data_address + 100) + (uint)*(ushort *)(data_address + 0x6a)"
            },
            "code": "void store_input_data_08008694(int data_address, int input_data) {\n  if (data_address != 0) {\n    byte data_index = *(byte *)(data_address + 0x44);\n    *(undefined4 *)(PTR_DAT_080086dc + (uint)bVar1 * 4) = input_data;\n    *(int *)(PTR_DAT_080086e0 + (uint)bVar1 * 4) = data_address;\n    decode_and_store_bits((int)*(char *)(data_address + 0x5a));\n    set_bit_at_position((int)*(char *)(data_address + 0x5a));\n    validate_input(*(undefined4 *)(PTR_DAT_080086e4 + (uint)*(byte *)(param_1 + 0x44) * 4), *(int *)(data_address + 100) + (uint)*(ushort *)(data_address + 0x6a), 1);\n  }\n}",
            "called": [
                "FUN_0800688e",
                "FUN_08003f30",
                "FUN_08003f94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008694",
            "calling": [],
            "imported": false,
            "current_name": "store_input_data_08008694"
        },
        "FUN_08002ce0": {
            "renaming": {
                "FUN_08002ce0": "initialize_and_set_values_08002ce0",
                "param_1": "input_param",
                "iVar1": "data_struct_offset",
                "set_param_to_zero_0800314e": "set_parameter_to_zero",
                "initialize_data_struct_080032bc": "initialize_data_struct",
                "PTR_execute_function_if_not_null_08002c2c_1_08002d90": "PTR_execute_function_if_not_null_08002c2c_1_08002d90",
                "PTR_LAB_08002c40_1_08002d94": "PTR_LAB_08002c40_1_08002d94",
                "PTR_LAB_08002c7c_1_08002d98": "PTR_LAB_08002c7c_1_08002d98",
                "PTR_LAB_08002c90_1_08002d9c": "PTR_LAB_08002c90_1_08002d9c",
                "PTR_LAB_08002c54_1_08002da0": "PTR_LAB_08002c54_1_08002da0",
                "PTR_LAB_08002c68_1_08002da4": "PTR_LAB_08002c68_1_08002da4",
                "PTR_LAB_08002ca4_1_08002da8": "PTR_LAB_08002ca4_1_08002da8",
                "PTR_LAB_08002cb8_1_08002dac": "PTR_LAB_08002cb8_1_08002dac",
                "update_values_if_condition_met_08003346": "update_values_if_condition_met",
                "update_parameters_08003350": "update_parameters"
            },
            "code": "int initialize_and_set_values_08002ce0(int input_param)\n{\n  int data_struct_offset = input_param + 0x44;\n  set_parameter_to_zero(input_param + 0x40);\n  initialize_data_struct(data_struct_offset, input_param, 0x40);\n  *(undefined *)(input_param + 0xc4) = 0;\n  *(undefined4 *)(input_param + 200) = 0;\n  *(undefined *)(input_param + 0x1f8) = 0;\n  set_values(data_struct_offset, 0xe0, PTR_execute_function_if_not_null_08002c2c_1_08002d90, 0);\n  set_values(data_struct_offset, 0x90, PTR_LAB_08002c40_1_08002d94, 0);\n  set_values(data_struct_offset, 0xc0, PTR_LAB_08002c7c_1_08002d98, 0);\n  set_values(data_struct_offset, 0xd0, PTR_LAB_08002c90_1_08002d9c, 0);\n  set_values(data_struct_offset, 0xf4, PTR_LAB_08002c54_1_08002da0, 0);\n  set_values(data_struct_offset, 0xf5, PTR_LAB_08002c68_1_08002da4, 0);\n  set_data(data_struct_offset, 0x71, PTR_LAB_08002ca4_1_08002da8, 0);\n  set_values(data_struct_offset, 0xf0, PTR_LAB_08002cb8_1_08002dac, 0);\n  update_values_if_condition_met(data_struct_offset, 0x79, PTR_LAB_08002e1a_1_08002db0, input_param);\n  update_parameters(data_struct_offset, 0xf9, PTR_LAB_08002dea_1_08002db4, input_param);\n  update_parameters(data_struct_offset, 0xff, PTR_LAB_08002cd0_1_08002db8, 0);\n  return input_param;\n}",
            "called": [
                "FUN_08003306",
                "FUN_08003350",
                "FUN_08003366",
                "FUN_080032bc",
                "FUN_08003346",
                "FUN_08003370",
                "FUN_0800314e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ce0",
            "calling": [
                "FUN_08002dbc"
            ],
            "imported": false,
            "current_name": "initialize_and_set_values_08002ce0"
        },
        "FUN_08005188": {
            "renaming": {
                "FUN_08005188": "process_input_08005188",
                "param_1": "input_data",
                "iVar1": "input_data_address",
                "uVar2": "value_at_offset_2",
                "uVar3": "value_at_offset_3",
                "uVar4": "value_at_offset_1",
                "DAT_080052d4": "global_variable_2",
                "DAT_080052d8": "global_variable_7",
                "DAT_080052dc": "global_variable_3",
                "DAT_080052e0": "global_variable_6",
                "DAT_080052e4": "global_variable_5",
                "DAT_080052e8": "global_variable_1",
                "DAT_080052ec": "global_variable_4",
                "process_input_080043a2": "process_input_1",
                "set_value_at_offset_08004396": "set_value_at_offset",
                "get_status_0800430c": "get_status",
                "modify_bits_according_to_condition_08004d6c": "modify_bits_according_to_condition",
                "process_input_08004e3c": "process_input_2",
                "process_input_08004ac2": "process_input_4",
                "execute_parser_08005084": "execute_parser",
                "add_character_to_buffer_08004a76": "add_character_to_buffer",
                "increment_and_store_0800459c": "increment_and_store",
                "process_input_08004a24": "process_input_5",
                "process_input_08004ccc": "process_input_3",
                "read_byte_from_array_0800457c": "read_byte_from_array"
            },
            "code": "void process_input_08005188(int *input_data)\n{\n  int input_data_address = *input_data;\n  uint value_at_offset_1 = *(uint *)(input_data_address + 0x18);\n  uint value_at_offset_2 = *(uint *)(input_data_address + 0x14);\n  uint value_at_offset_3 = *(uint *)(input_data_address + 4);\n  \n  if ((*(char *)((int)input_data + 0x3e) == '\\x10') || (*(char *)((int)input_data + 0x3e) == '@')) {\n    if (((value_at_offset_2 & 0x10001) == 0) || ((value_at_offset_3 & 0x200) == 0)) {\n      if (((DAT_080052e8 & value_at_offset_2) == 0) || ((value_at_offset_3 & 0x200) == 0)) {\n        if (((DAT_080052d4 & value_at_offset_2) != 0) && ((value_at_offset_3 & 0x200) != 0)) {\n          process_input_08005188_080043a2(input_data);\n        }\n      }\n      else {\n        set_value_at_offset_08004396(input_data);\n      }\n    }\n    else {\n      get_status_0800430c(input_data);\n    }\n    if ((DAT_080052dc & value_at_offset_1) == 0) {\n      if ((((DAT_080052ec & value_at_offset_2) != 0) && ((value_at_offset_3 & 0x400) != 0)) && ((DAT_080052e4 & value_at_offset_2) == 0)\n         ) {\n        modify_bits_according_to_condition_08004d6c(input_data);\n        return;\n      }\n      if (((DAT_080052e4 & value_at_offset_2) != 0) && ((value_at_offset_3 & 0x200) != 0)) {\n        process_input_08005188_08004e3c(input_data);\n        return;\n      }\n    }\n    else {\n      if ((((DAT_080052e0 & value_at_offset_2) != 0) && ((value_at_offset_3 & 0x400) != 0)) && ((DAT_080052e4 & value_at_offset_2) == 0)\n         ) {\n        parse_input(input_data);\n        return;\n      }\n      if (((DAT_080052e4 & value_at_offset_2) != 0) && ((value_at_offset_3 & 0x200) != 0)) {\n        process_input_08005188_08004ccc(input_data);\n        return;\n      }\n    }\n  }\n  else {\n    if (((DAT_080052d4 & value_at_offset_2) != 0) && ((value_at_offset_3 & 0x200) != 0)) {\n      process_input_08005188_08004ac2();\n      return;\n    }\n    if (((DAT_080052d8 & value_at_offset_2) != 0) && ((value_at_offset_3 & 0x200) != 0)) {\n      execute_parser_08005084(input_data);\n      return;\n    }\n    if ((DAT_080052dc & value_at_offset_1) == 0) {\n      if ((((DAT_080052ec & value_at_offset_2) != 0) && ((value_at_offset_3 & 0x400) != 0)) && ((DAT_080052e4 & value_at_offset_2) == 0)\n         ) {\n        add_character_to_buffer_08004a76(input_data);\n        return;\n      }\n      if (((DAT_080052e4 & value_at_offset_2) != 0) && ((value_at_offset_3 & 0x200) != 0)) {\n        increment_and_store_0800459c(input_data);\n      }\n    }\n    else {\n      if ((((DAT_080052e0 & value_at_offset_2) != 0) && ((value_at_offset_3 & 0x400) != 0)) && ((DAT_080052e4 & value_at_offset_2) == 0)\n         ) {\n        process_input_08005188_08004a24(input_data);\n        return;\n      }\n      if (((DAT_080052e4 & value_at_offset_2) != 0) && ((value_at_offset_3 & 0x200) != 0)) {\n        read_byte_from_array_0800457c(input_data);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08004ccc",
                "FUN_0800457c",
                "FUN_08004d6c",
                "FUN_08004396",
                "FUN_08005084",
                "FUN_0800459c",
                "FUN_08004ac2",
                "FUN_08004b82",
                "FUN_08004a76",
                "FUN_08004a24",
                "FUN_0800430c",
                "FUN_08004e3c",
                "FUN_080043a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005188",
            "calling": [],
            "imported": false,
            "current_name": "process_input_08005188"
        },
        "FUN_08007244": {
            "renaming": {
                "FUN_08007244": "do_nothing_08007244"
            },
            "code": "\nvoid do_nothing_08007244(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007244",
            "calling": [
                "FUN_08007246"
            ],
            "imported": false,
            "current_name": "do_nothing_08007244"
        },
        "FUN_08009db0": {
            "renaming": {
                "FUN_08009db0": "find_available_block_08009db0",
                "param_1": "error_code",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "block_end",
                "piVar2": "block_ptr",
                "iVar3": "current_block",
                "ppiVar4": "block_list"
            },
            "code": "int* find_available_block_08009db0(undefined4* error_code, undefined4 param2, undefined4 param3, undefined4 param4) {\n    int* current_block = *(int**)PTR_PTR_DAT_08009e24;\n    if (*(int*)(current_block + 0x18) == 0) {\n        initialize_blocks(current_block);\n    }\n    int** block_list = (int**)(current_block + 0x48);\n    while (true) {\n        int* block_ptr = block_list[2];\n        int* block_end = block_list[1];\n        while (block_end = (int*)((int)block_end - 1), -1 < (int)block_end) {\n            if (*(short*)(block_ptr + 3) == 0) {\n                *(undefined2*)((int)block_ptr + 0xe) = 0xffff;\n                block_ptr[0x19] = 0;\n                *(undefined2*)(block_ptr + 3) = 1;\n                *block_ptr = 0;\n                block_ptr[2] = 0;\n                block_ptr[1] = 0;\n                block_ptr[4] = 0;\n                block_ptr[5] = 0;\n                block_ptr[6] = 0;\n                copy_value_to_memory(block_ptr + 0x17, 0, 8, 1, param4);\n                block_ptr[0xd] = 0;\n                block_ptr[0xe] = 0;\n                block_ptr[0x12] = 0;\n                block_ptr[0x13] = 0;\n                return block_ptr;\n            }\n            block_ptr += 0x1a;\n        }\n        if (*block_list == (int*)0x0) {\n            int* new_block = allocate_and_initialize_blocks(error_code, 4);\n            *block_list = new_block;\n            if (new_block == (int*)0x0) {\n                *error_code = 0xc;\n                return (int*)0x0;\n            }\n        }\n        block_list = (int**)*block_list;\n    }\n}\n",
            "called": [
                "FUN_08009d24",
                "FUN_080091c6",
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009db0",
            "calling": [
                "FUN_08009d50"
            ],
            "imported": false,
            "current_name": "find_available_block_08009db0",
            "code_backup": "\nint * FUN_08009db0(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int iVar3;\n  int **ppiVar4;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08009e24;\n  if (*(int *)(iVar3 + 0x18) == 0) {\n    FUN_08009d50(iVar3);\n  }\n  ppiVar4 = (int **)(iVar3 + 0x48);\n  do {\n    piVar2 = ppiVar4[2];\n    piVar1 = ppiVar4[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        copy_value_to_memory_080091c6(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar4 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_blocks_08009d24(param_1,4);\n      *ppiVar4 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar4 = (int **)*ppiVar4;\n  } while( true );\n}\n\n"
        },
        "FUN_08002c2c": {
            "renaming": {
                "FUN_08002c2c": "execute_function_if_not_null_08002c2c",
                "param_1": "function_pointer",
                "param_2": "param_1",
                "param_3": "param_2",
                "param_4": "param_3",
                "pcVar1": "function",
                "PTR_DAT_08002c3c": "function_pointer_pointer"
            },
            "code": "void execute_function_if_not_null_08002c2c(code* function_pointer, int param_1, int param_2, int param_3, int param_4) {\n  code* function = *(code**)PTR_DAT_08002c3c;\n  if (function != (code*)0x0) {\n    (*function_pointer)(param_1, param_2, param_3, function, param_4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c2c",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_if_not_null_08002c2c"
        },
        "FUN_08001bf8": {
            "renaming": {
                "FUN_08001bf8": "copy_char_to_buffer_wrapper_08001bf8",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "param_4": "num1",
                "param_5": "num2",
                "copy_char_to_buffer_0800288c": "copy_char_to_buffer"
            },
            "code": "void copy_char_to_buffer_wrapper_08001bf8(char* dest, char* src, size_t size, int num1, int num2) {\n  copy_char_to_buffer(dest, src, size, num1, num2);\n  return;\n}",
            "called": [
                "FUN_0800288c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001bf8",
            "calling": [
                "FUN_08001cd0",
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "copy_char_to_buffer_wrapper_08001bf8"
        },
        "FUN_080072f0": {
            "renaming": {
                "FUN_080072f0": "check_if_param2_bit_set_in_param1_080072f0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "code": "void check_if_param2_bit_set_in_param1_080072f0(uint32_t* param1, uint16_t* param2, uint32_t* param3, uint32_t* param4) {\n    check_if_param2_bit_set_in_param1_080072f0_080042d4(param1, param2, param3, param4, param4);\n    return;\n}",
            "called": [
                "FUN_080042d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072f0",
            "calling": [
                "FUN_08008a6c"
            ],
            "imported": false,
            "current_name": "check_if_param2_bit_set_in_param1_080072f0"
        },
        "FUN_08000178": {
            "renaming": {
                "FUN_08000178": "get_string_end_08000178",
                "param_1": "input_string",
                "pcVar2": "current_position",
                "pcVar3": "current_char_position",
                "cVar1": "current_char"
            },
            "code": "char* get_string_end_08000178(char* input_string) {\n  char current_char;\n  char* current_position = input_string;\n  do {\n    current_position++;\n    current_char = *current_position;\n  } while (current_char != '\\0');\n  return current_position + (-1 - (int)input_string);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000178",
            "calling": [
                "FUN_080032a2",
                "FUN_08002e44",
                "FUN_08008e7c"
            ],
            "imported": false,
            "current_name": "get_string_end_08000178"
        },
        "FUN_080069ec": {
            "renaming": {
                "FUN_080069ec": "process_input_flags_080069ec",
                "param_1": "input_data",
                "iVar1": "result",
                "uVar2": "flag2",
                "puVar3": "data",
                "uVar4": "flag5",
                "uVar5": "flag1",
                "process_data_0800694c": "process_data",
                "process_data_080064cc": "process_input_data",
                "set_input_flag_08006932": "set_input_flag",
                "do_nothing_0800877c": "do_nothing",
                "set_flags_080064b0": "set_flags",
                "calculate_value_08004050": "calculate_value",
                "PTR_LAB_08006b0c_1_08006b08": "PTR_LAB"
            },
            "code": "void process_input_flags_080069ec(uint **input_data)\n{\n  uint *data = *input_data;\n  uint flag1 = data[0];\n  uint flag2 = data[3];\n  if ((((flag1 & 0xf) == 0) && ((flag1 & 0x20) != 0)) && ((flag2 & 0x20) != 0))) {\n    process_data(input_data);\n    return;\n  }\n  if (((flag1 & 0xf) == 0) || ((data[5] & 1) == 0 && ((flag2 & 0x120) == 0)))) {\n    if (((flag1 & 0x80) != 0) && ((flag2 & 0x80) != 0))) {\n      process_input_data(input_data);\n      return;\n    }\n    if (((flag1 & 0x40) != 0) && ((flag2 & 0x40) != 0))) {\n      set_input_flag(input_data);\n    }\n  }\n  else {\n    if (((flag1 & 1) != 0) && ((flag2 & 0x100) != 0))) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 1);\n    }\n    if (((flag1 & 4) != 0) && (data[5] & 1) != 0)) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 2);\n    }\n    if (((flag1 & 2) != 0) && (data[5] & 1) != 0)) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 4);\n    }\n    if (((flag1 & 8) != 0) && (data[5] & 1) != 0)) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 8);\n    }\n    if (input_data[0xf] != (uint *)0x0) {\n      if (((flag1 & 0x20) != 0) && ((flag2 & 0x20) != 0))) {\n        process_data(input_data);\n      }\n      if ((((uint)input_data[0xf] & 8) == 0) && (((*input_data)[5] & 0x40) == 0))) {\n        do_nothing(input_data);\n        input_data[0xf] = (uint *)0x0;\n        return;\n      }\n      set_flags(input_data);\n      uint *data = *input_data;\n      if ((data[5] & 0x40) == 0) {\n        do_nothing(input_data);\n        return;\n      }\n      data[5] = data[5] & 0xffffffbf;\n      if (input_data[0xd] == (uint *)0x0) {\n        do_nothing(input_data);\n        return;\n      }\n      input_data[0xd][0xd] = (uint)PTR_LAB_08006b0c_1_08006b08_08006b0c_1_08006b08;\n      int result = calculate_value(input_data[0xd]);\n      if (result != 0) {\n        (*(code *)input_data[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_0800694c",
                "FUN_080064cc",
                "FUN_08006932",
                "FUN_080064b0",
                "FUN_08004050",
                "FUN_0800877c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069ec",
            "calling": [],
            "imported": false,
            "current_name": "process_input_flags_080069ec"
        },
        "FUN_0800a168": {
            "renaming": {
                "FUN_0800a168": "check_for_error_0800a168",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "error_ptr",
                "iVar2": "return_value"
            },
            "code": "void check_for_error_0800a168(int *result, undefined4 param_2, undefined4 param_3, undefined4 param_4) {\n  undefined *error_ptr;\n  int return_value;\n  error_ptr = PTR_DAT_0800a188;\n  *(undefined4 *)PTR_DAT_0800a188 = 0;\n  return_value = return_zero_08008858(param_2, param_3, param_4, param_4, param_4);\n  if ((return_value == -1) && (*(int *)error_ptr != 0)) {\n    *result = *(int *)error_ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08008858"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a168",
            "calling": [
                "FUN_0800a020"
            ],
            "imported": false,
            "current_name": "check_for_error_0800a168"
        },
        "FUN_080067ac": {
            "renaming": {
                "FUN_080067ac": "process_input_080067ac",
                "param_1": "input_buffer",
                "param_2": "data_buffer",
                "param_3": "data_length",
                "param_4": "param_4",
                "uVar1": "value_from_pointer",
                "iVar2": "result"
            },
            "code": "int process_input_080067ac(int *input_buffer, ushort *data_buffer, int data_length, undefined4 param_4) {\n  undefined4 uVar1;\n  int result;\n  \n  if (*(char *)((int)input_buffer + 0x39) == ' ') {\n    if (data_buffer == (ushort *)0x0) {\n      result = 1;\n    }\n    else if (data_length == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_buffer + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_buffer + 0xe) = 1;\n      input_buffer[0xf] = 0;\n      *(undefined *)((int)input_buffer + 0x39) = 0x21;\n      uVar1 = get_value_from_pointer_08003760();\n      *(short *)(input_buffer + 9) = (short)data_length;\n      *(short *)((int)input_buffer + 0x26) = (short)data_length;\n      while (*(short *)((int)input_buffer + 0x26) != 0) {\n        *(short *)((int)input_buffer + 0x26) = *(short *)((int)input_buffer + 0x26) + -1;\n        if (input_buffer[2] == 0x1000) {\n          result = check_parameters(input_buffer,0x80,0,uVar1,param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*input_buffer + 4) = *data_buffer & 0x1ff;\n          if (input_buffer[4] == 0) {\n            data_buffer = data_buffer + 1;\n          }\n          else {\n            data_buffer = (ushort *)((int)data_buffer + 1);\n          }\n        }\n        else {\n          result = check_parameters(input_buffer,0x80,0,uVar1,param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*input_buffer + 4) = (uint)*(byte *)data_buffer;\n          data_buffer = (ushort *)((int)data_buffer + 1);\n        }\n      }\n      result = check_parameters(input_buffer,0x40,0,uVar1,param_4);\n      if (result == 0) {\n        *(undefined *)((int)input_buffer + 0x39) = 0x20;\n        *(undefined *)(input_buffer + 0xe) = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [
                "FUN_08003760",
                "FUN_080066e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080067ac",
            "calling": [
                "FUN_08008500"
            ],
            "imported": false,
            "current_name": "process_input_080067ac"
        },
        "FUN_0800735a": {
            "renaming": {
                "FUN_0800735a": "find_character_in_string_0800735a",
                "param_1": "character",
                "param_2": "string",
                "*param_2": "*string",
                "0xffffffff": "NOT_FOUND",
                "*(undefined4 *)(param_2 + 8)": "found_index"
            },
            "code": "unsigned int find_character_in_string_0800735a(int character, char *string)\n{\n    while(true)\n    {\n        if(*string == -1)\n        {\n            return 0xffffffff;\n        }\n        if(*string == character)\n        {\n            break;\n        }\n        string += 0xc;\n    }\n    return *(unsigned int *)(string + 8);\n}",
            "called": [
                "FUN_0800735a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800735a",
            "calling": [
                "FUN_08007376",
                "FUN_0800735a"
            ],
            "imported": false,
            "current_name": "find_character_in_string_0800735a"
        },
        "FUN_08008c20": {
            "renaming": {
                "FUN_08008c20": "initialize_struct_08008c20",
                "param_1": "struct_ptr",
                "PTR_": "value_",
                "DAT_": "data_"
            },
            "code": "void initialize_struct_08008c20(int struct_ptr) {\n    int* PTR_1 = (int*)(struct_ptr + 0x130);\n    *PTR_1 = struct_ptr + 0x11;\n    short* PTR_2 = (short*)(struct_ptr + 0x134);\n    *PTR_2 = 0;\n    short* PTR_3 = (short*)(struct_ptr + 0x136);\n    *PTR_3 = 0;\n    int* PTR_4 = (int*)(struct_ptr + 0x138);\n    *PTR_4 = struct_ptr + 0x51;\n    short* PTR_5 = (short*)(struct_ptr + 0x13c);\n    *PTR_5 = 0;\n    short* PTR_6 = (short*)(struct_ptr + 0x13e);\n    *PTR_6 = 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c20",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "initialize_struct_08008c20"
        },
        "FUN_08000a64": {
            "renaming": {
                "FUN_08000a64": "check_and_execute_commands_08000a64",
                "iVar1": "command_index",
                "uVar2": "index",
                "PTR_DAT_08000ad8": "command_list",
                "PTR_DAT_08000adc": "command_list_1",
                "PTR_DAT_08000ae0": "command_list_2",
                "is_valid_command": "is_valid_command_character",
                "is_invalid_command": "is_invalid_command_character",
                "is_command_in_list_1": "is_command_in_list",
                "is_command_in_list_2": "is_command_in_list",
                "execute_command": "execute_command",
                "PTR_DAT_08000ae4": "parameter_1",
                "initialize_parameters_and_return_08002a26": "initialize_parameters_and_return"
            },
            "code": "void check_and_execute_commands_08000a64()\n{\n  int command_index;\n  uint index;\n  for (index = 0; index < 60; index++) {\n    if (PTR_DAT_08000ad8[index] == -1) {\n      command_index = 0;\n    }\n    else {\n      int is_valid_command = is_valid_command_character(PTR_DAT_08000ad8[index]);\n      if (is_valid_command == 0) {\n        command_index = 0;\n      }\n      else {\n        int is_invalid_command = is_invalid_command_character(PTR_DAT_08000ad8[index]);\n        if (is_invalid_command == 1) {\n          command_index = 0;\n        }\n        else {\n          int is_command_in_list_1 = is_command_in_list(PTR_DAT_08000ad8[index], PTR_DAT_08000adc);\n          if (is_command_in_list_1 == 0) {\n            int is_command_in_list_2 = is_command_in_list(PTR_DAT_08000ad8[index], PTR_DAT_08000ae0);\n            if (is_command_in_list_2 == 0) {\n              command_index = 0;\n            }\n          }\n        }\n      }\n    }\n    if (command_index != 0) {\n      execute_command(index, 6);\n    }\n  }\n  *PTR_DAT_08000ae4 = 1;\n  initialize_parameters_and_return_08002a26(PTR_DAT_08000ae8);\n  return;\n}",
            "called": [
                "FUN_080036ac",
                "FUN_0800738a",
                "FUN_08002a26",
                "FUN_080005f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a64",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "check_and_execute_commands_08000a64"
        },
        "FUN_0800723c": {
            "renaming": {
                "FUN_0800723c": "get_value_from_pointer_and_return_0800723c",
                "get_value_from_pointer_08003760": "get_value_from_pointer"
            },
            "code": "void get_value_from_pointer_and_return_0800723c(void)\n{\n  get_value_from_pointer();\n  return;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800723c",
            "calling": [
                "FUN_08008abc"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_and_return_0800723c"
        },
        "FUN_080043a2": {
            "renaming": {
                "FUN_080043a2": "process_input_080043a2",
                "param_1": "input",
                "puVar1": "data"
            },
            "code": "uint32_t process_input_080043a2(uint32_t **input)\n{\n    uint32_t *data = input[11];\n    if (input[20] != NULL || input[13] != '@')\n    {\n        if (input[20] == NULL && input[4] == 49152)\n        {\n            **input |= 256;\n            input[20]++;\n        }\n        else\n        {\n            switch (*(uint16_t *)((int)input + 42))\n            {\n            case 0:\n                **input |= 512;\n                break;\n            case 1:\n                if (data == (uint32_t *)-65536)\n                {\n                    **input &= 4294966783;\n                    uint32_t *ptr = *input;\n                    if ((ptr[1] & 2048) == 0)\n                    {\n                        *ptr |= 512;\n                    }\n                    else\n                    {\n                        *ptr &= 4294966783;\n                    }\n                }\n                else if (data == (uint32_t *)4 || data == (uint32_t *)8 || input[12] == (uint32_t *)18)\n                {\n                    **input &= 4294966783;\n                    **input |= 512;\n                }\n                else if (input[11] == (uint32_t *)2)\n                {\n                    **input |= 1024;\n                }\n                else\n                {\n                    **input &= 4294966783;\n                }\n                break;\n            case 2:\n                if (input[11] == (uint32_t *)2)\n                {\n                    **input |= 1024;\n                }\n                else\n                {\n                    **input |= 2048;\n                    **input &= 4294966783;\n                }\n                uint32_t *ptr = *input;\n                if ((ptr[1] & 2048) != 0)\n                {\n                    ptr[1] |= 4096;\n                }\n                break;\n            default:\n                **input |= 1024;\n                uint32_t *ptr = *input;\n                if ((ptr[1] & 2048) != 0)\n                {\n                    ptr[1] |= 4096;\n                }\n                break;\n            }\n            input[20] = NULL;\n        }\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043a2",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_080043a2"
        },
        "FUN_0800694c": {
            "renaming": {
                "FUN_0800694c": "process_data_0800694c",
                "param_1": "data",
                "pbVar1": "byte_pointer",
                "sVar2": "count",
                "puVar3": "ushort_pointer",
                "first_char": "first_char",
                "data_type": "data_type",
                "data_value": "data_value",
                "data_pointer": "data_pointer",
                "data_pointer2": "data_pointer2",
                "byte_pointer": "byte_pointer",
                "ushort_pointer": "ushort_pointer",
                "count": "count"
            },
            "code": "int process_data_0800694c(int *data)\n{\n    char first_char = *(char *)((int)data + 0x3a);\n    if (first_char != '\"') {\n        return 2;\n    }\n    int data_type = data[2];\n    int data_value = *(int *)(*data + 4);\n    int *data_pointer = (int *)(*data + 0xc);\n    int *data_pointer2 = (int *)(*data + 0x14);\n    byte *byte_pointer;\n    ushort *ushort_pointer;\n    if (data[4] == 0) {\n        if (data_type == 0x1000) {\n            ushort_pointer = (ushort *)data[10];\n            *ushort_pointer = (ushort)((uint)(data_value << 0x17) >> 0x17);\n            data[10] += 2;\n        }\n        else {\n            byte_pointer = (byte *)data[10];\n            *byte_pointer = (byte)data_value;\n            data[10]++;\n        }\n    }\n    else {\n        if (data_type == 0x1000) {\n            ushort_pointer = (ushort *)data[10];\n            *ushort_pointer = (ushort)data_value & 0xff;\n            data[10]++;\n        }\n        else {\n            byte_pointer = (byte *)data[10];\n            *byte_pointer = (byte)data_value & 0x7f;\n            data[10]++;\n        }\n    }\n    short count = *(short *)((int)data + 0x2e) - 1;\n    *(short *)((int)data + 0x2e) = count;\n    if (count != 0) {\n        return 0;\n    }\n    *data_pointer &= 0xffffffdf;\n    *data_pointer &= 0xfffffeff;\n    *data_pointer2 &= 0xfffffffe;\n    *(char *)((int)data + 0x3a) = ' ';\n    execute_function_if_value_less_than_five_0800870c();\n    return 0;\n}",
            "called": [
                "FUN_0800870c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800694c",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "process_data_0800694c"
        },
        "FUN_08006280": {
            "renaming": {
                "FUN_08006280": "set_register_bits_08006280",
                "param_1": "register_ptr",
                "param_2": "bit_position",
                "puVar1": "register",
                "DAT_080062f0": "PTR_DAT_080062f0"
            },
            "code": "int set_register_bits_08006280(uint **register_ptr, uint bit_position)\n{\n    uint *register = *register_ptr;\n    switch(bit_position) {\n        case 0:\n            register[3] |= 2;\n            break;\n        case 4:\n            register[3] |= 4;\n            break;\n        case 8:\n            register[3] |= 8;\n            break;\n        case 0xc:\n            register[3] |= 0x10;\n    }\n    set_bit_in_register_08006262(*register_ptr, bit_position, 1);\n    if (register == DAT_080062f0) {\n        register[0x11] |= 0x8000;\n    }\n    **register_ptr |= 1;\n    return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006280",
            "calling": [
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "set_register_bits_08006280"
        },
        "FUN_08007258": {
            "renaming": {
                "FUN_08007258": "decode_and_set_flag_08007258",
                "param_1": "flag",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "flag_val",
                "local_20": "bit_mask",
                "local_14": "constant_val",
                "DAT_080072d0": "ptr_dat_1",
                "DAT_080072d4": "ptr_dat_2"
            },
            "code": "void decode_and_set_flag_08007258(uint32_t flag, uint32_t param2, uint32_t param3)\n{\n  uint32_t flag_val = set_flag_value(flag);\n  uint32_t bit_mask = 1 << (flag & 0xf) & 0xffff;\n  uint32_t constant_val = 3;\n  *(uint32_t *)(DAT_080072d0 + 0x18) |= 1;\n  if ((flag - 0xd & 0xff) < 2) {\n    *(uint32_t *)(DAT_080072d4 + 4) &= 0xf8ffffff;\n    *(uint32_t *)(DAT_080072d4 + 4) |= 0x4000000;\n  }\n  if (((flag == 0xf) || (flag == 0x13)) || (flag == 0x14)) {\n    *(uint32_t *)(DAT_080072d4 + 4) &= 0xf8ffffff;\n    *(uint32_t *)(DAT_080072d4 + 4) |= 0x2000000;\n  }\n  uint32_t param_array[1] = {bit_mask};\n  decode(param_array, flag_val, param2, param3);\n}",
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007258",
            "calling": [
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "decode_and_set_flag_08007258"
        },
        "FUN_0800a0ec": {
            "renaming": {
                "FUN_0800a0ec": "set_memory_flags_0800a0ec",
                "param_1": "result",
                "param_2": "start_address",
                "param_3": "end_address",
                "param_4": "flag_value",
                "puVar1": "data_pointer",
                "iVar2": "set_memory_result"
            },
            "code": "void set_memory_flags_0800a0ec(int *result, int start_address, int end_address, int flag_value, int page_size) {\n    undefined *data_pointer;\n    int set_memory_result;\n    data_pointer = PTR_DAT_0800a10c;\n    *(int *)PTR_DAT_0800a10c = 0;\n    set_memory_result = set_memory_flags_0800a0ec_08008846(start_address, end_address, end_address, flag_value, page_size);\n    if (set_memory_result == -1 && *(int *)data_pointer != 0) {\n        *result = *(int *)data_pointer;\n    }\n    return;\n}",
            "called": [
                "FUN_08008846"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a0ec",
            "calling": [
                "FUN_08009e64"
            ],
            "imported": false,
            "current_name": "set_memory_flags_0800a0ec"
        },
        "FUN_08008df8": {
            "renaming": {
                "FUN_08008df8": "initialize_data_08008df8",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "code": "void initialize_data_08008df8(undefined4 *data, undefined value1, undefined value2, undefined value3, undefined value4)\n{\n  *data = data_pointer;\n  *(undefined *)(data + 1) = value1;\n  *(undefined *)((int)data + 5) = value2;\n  *(undefined *)((int)data + 6) = value3;\n  *(undefined *)((int)data + 7) = value4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008df8",
            "calling": [
                "FUN_08008e14"
            ],
            "imported": false,
            "current_name": "initialize_data_08008df8"
        },
        "FUN_08009f4a": {
            "renaming": {
                "FUN_08009f4a": "do_nothing_08009f4a"
            },
            "code": "\nvoid do_nothing_08009f4a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f4a",
            "calling": [
                "FUN_080091d8",
                "FUN_08009270"
            ],
            "imported": false,
            "current_name": "do_nothing_08009f4a"
        },
        "FUN_08006c7c": {
            "renaming": {
                "FUN_08006c7c": "find_character_index_08006c7c",
                "param_1": "character",
                "param_2": "string",
                "param_3": "string_length",
                "param_4": "start_index",
                "<iVar1>": "index",
                "<uVar2>": "shifted_index"
            },
            "code": "int find_character_index_08006c7c(char character, char *string, int string_length, int start_index, int end_index) {\n    int index = find_character_or_negative_one_08007376(character, string, string_length, start_index, end_index);\n    int shifted_index = (index << 0xc) >> 0x1b;\n    if (shifted_index == 3) {\n        return 8;\n    }\n    if (shifted_index != 4) {\n        if (shifted_index != 2) {\n            return 0;\n        }\n        return 4;\n    }\n    return 0xc;\n}",
            "called": [
                "FUN_08007376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c7c",
            "calling": [
                "FUN_080071e4",
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "find_character_index_08006c7c"
        },
        "FUN_08006b5c": {
            "renaming": {
                "FUN_08006b5c": "update_uint_in_array_08006b5c",
                "param_1": "value_to_update",
                "param_2": "array_address",
                "uVar1": "index",
                "PTR_": "",
                "DAT_": "",
                "*(uint *)": "*",
                "&": "",
                "mask": "mask"
            },
            "code": "void update_uint_in_array_08006b5c(uint value_to_update, int array_address){\n    uint index = (value_to_update << 0x18) >> 0x1c;\n    uint* array_ptr = (uint*)(array_address + index * 4);\n    uint mask = ~(1 << (value_to_update & 0xf));\n    *array_ptr = *array_ptr & mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b5c",
            "calling": [
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "update_uint_in_array_08006b5c"
        },
        "FUN_08007376": {
            "renaming": {
                "FUN_08007376": "find_character_or_negative_one_08007376",
                "param_1": "character_to_find",
                "uVar1": "result",
                "find_character_in_string_0800735a": "find_character_in_string"
            },
            "code": "int find_character_or_negative_one_08007376(int character_to_find)\n{\n  int result;\n  if (character_to_find == -1) {\n    result = -1;\n  }\n  else {\n    result = find_character_in_string();\n  }\n  return result;\n}",
            "called": [
                "FUN_0800735a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007376",
            "calling": [
                "FUN_080077b0",
                "FUN_080071e4",
                "FUN_08008078",
                "FUN_08006e68",
                "FUN_08006c7c",
                "FUN_08006c60",
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "find_character_or_negative_one_08007376"
        },
        "FUN_08000188": {
            "renaming": {
                "FUN_08000188": "trigger_system_interrupt_08000188"
            },
            "code": "void trigger_system_interrupt_08000188(void)\n{\n  software_interrupt(0x3f);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000188",
            "calling": [
                "FUN_0800018c"
            ],
            "imported": false,
            "current_name": "trigger_system_interrupt_08000188"
        },
        "FUN_08004f3c": {
            "renaming": {
                "FUN_08004f3c": "decode_08004f3c",
                "param_1": "input",
                "iVar1": "flag_value",
                "puVar2": "ptr2",
                "puVar3": "ptr1",
                "DAT_08005080": "data_1",
                "PTR_LAB_080053cc_1_0800507c": "function_1"
            },
            "code": "void decode_08004f3c(uint **input)\n{\n    int flag_value;\n    uint *ptr1, *ptr2;\n\n    if (input[0x3d] - 0x29 < 2) {\n        input[0xc] = NULL;\n        input[0x3d] = 0x28;\n    }\n    else {\n        if ((input[0x3d] != '`') && ((input[0][1] & 0x800) == 0)) {\n            input[0x3d] = 0x20;\n        }\n        input[0xc] = NULL;\n        input[0x3e] = 0;\n    }\n\n    **input &= 0xfffff7ff;\n    ptr1 = *input;\n\n    if ((ptr1[1] & 0x800) == 0) {\n        if (input[0x3d] == '`') {\n            input[0x3d] = 0x20;\n            input[0x10] = NULL;\n            if ((ptr1[5] & 0x40) != 0) {\n                ptr2 = input[9];\n                input[9] = (uint *)((int)ptr2 + 1);\n                *(char *)ptr2 = (char)ptr1[4];\n            }\n            **input &= 0xfffffffe;\n            do_nothing(input);\n        }\n        else {\n            if ((ptr1[5] & 0x40) != 0) {\n                ptr2 = input[9];\n                input[9] = (uint *)((int)ptr2 + 1);\n                *(char *)ptr2 = (char)ptr1[4];\n            }\n            check_and_set_flag(input);\n        }\n    }\n    else {\n        ptr1[1] &= 0xfffff7ff;\n        if (input[0xd][0x21] == '\\x01') {\n            input[0xe][0xd] = (uint)PTR_LAB_080053cc_1_0800507c;\n            flag_value = calculate_value(input[0xe]);\n            if (flag_value != 0) {\n                if ((input[0][5] & 0x40) != 0) {\n                    ptr1 = input[9];\n                    input[9] = (uint *)((int)ptr1 + 1);\n                    *(char *)ptr1 = (char)(*input)[4];\n                }\n                **input &= 0xfffffffe;\n                input[0x3d] = 0x20;\n                (*(code *)input[0xe][0xd])();\n            }\n        }\n        else {\n            input[0xd][0xd] = (uint)PTR_LAB_080053cc_1_0800507c;\n            flag_value = calculate_value(input[0xd]);\n            if (flag_value != 0) {\n                **input &= 0xfffffffe;\n                input[0x3d] = 0x20;\n                (*(code *)input[0xd][0xd])();\n            }\n        }\n    }\n\n    if ((input[0x3d] == '(') && ((uint)input[0x10] & 4) != 0) {\n        input[0xb] = DAT_08005080;\n        input[0xc] = NULL;\n        input[0x3d] = 0x20;\n        input[0x3e] = 0;\n        execute_subroutine(input);\n    }\n}\n",
            "called": [
                "FUN_08007ff0",
                "FUN_08008020",
                "FUN_08004f3a",
                "FUN_08004050"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [
                "FUN_080052f0",
                "FUN_08005084"
            ],
            "imported": false,
            "current_name": "decode_08004f3c"
        },
        "FUN_080033cc": {
            "renaming": {
                "FUN_080033cc": "process_input_080033cc",
                "param_1": "input_length",
                "param_2": "input",
                "param_3": "output",
                "param_4": "output_length",
                "pcVar3": "current_position",
                "cVar1": "current_char",
                "iVar2": "bytes_copied"
            },
            "code": "void process_input_080033cc(int input_length, int* input, int* output, int output_length)\n{\n    char current_char = *(char*)(input);\n    char* current_position = (char*)(input+1);\n    if (current_char == 'q') {\n        if (*(int*)(input + 0x68) != 0) {\n            int bytes_copied = copy_and_shift_bits(input, *(int*)(input + 0x18) - 1, current_position, current_position-1, output_length);\n            check_and_set_max_value(input, 0, bytes_copied + 1);\n            (**(code **)(input + 0x68))(*(int*)(input + 0x40), *(int*)(input) + 1);\n            return;\n        }\n    }\n    else if (current_char == 'y') {\n        if (*(code **)(input + 0x70) != (code *)0x0) {\n            if (*(uint *)(input + 0x18) < 3) {\n                (**(code **)(input + 0x70))(*(int*)(input + 0x34), 0, 0);\n                return;\n            }\n            int bytes_copied = copy_and_shift_bits(input, *(uint *)(input + 0x18) - 3, current_position + 2, current_position-1, output_length);\n            check_and_set_max_value(input, 0, bytes_copied + 3);\n            int current_position_int = *(int*)(input);\n            (**(code **)(input + 0x70))(*(int*)(input + 0x34),*(char*)(current_position_int + 1),*(char*)(current_position_int + 2),current_position_int + 3);\n            return;\n        }\n    }\n    else if (*(code **)(input + 0x6c) != (code *)0x0) {\n        (**(code **)(input + 0x6c))(*(int*)(input + 0x44), current_char, *(int*)(input + 0x18) - 1, current_position);\n    }\n    return;\n}",
            "called": [
                "FUN_080033a8",
                "FUN_08003376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033cc",
            "calling": [
                "FUN_08003474"
            ],
            "imported": false,
            "current_name": "process_input_080033cc"
        },
        "FUN_08003de4": {
            "renaming": {
                "FUN_08003de4": "check_and_update_status_08003de4",
                "param_1": "status",
                "iVar1": "result",
                "check_and_update_08003b8c": "check_and_update_flags"
            },
            "code": "int check_and_update_status_08003de4(int status)\n{\n  int result;\n  if (*(char *)(status + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(status + 0x24) = 1;\n  result = check_and_update_flags();\n  if (result == 0) {\n    *(uint *)(status + 0x28) = *(uint *)(status + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(status + 0x24) = 0;\n  return result;\n}",
            "called": [
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003de4",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "check_and_update_status_08003de4"
        },
        "FUN_08004f3a": {
            "renaming": {
                "FUN_08004f3a": "do_nothing_08004f3a"
            },
            "code": "\nvoid do_nothing_08004f3a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3a",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": false,
            "current_name": "do_nothing_08004f3a"
        },
        "FUN_08000500": {
            "renaming": {
                "FUN_08000500": "decode_servo_info_08000500",
                "param_1": "servo_index",
                "param_2": "is_printing",
                "param_3": "string_length",
                "param_4": "undefined4_param",
                "bVar1": "max_servos",
                "PTR_DAT_0800056c": "servo_count_ptr",
                "PTR_DAT_08000584": "max_servos_msg_ptr",
                "PTR_s_Max_servos_attached_08000580": "max_servos_attached_msg_ptr",
                "bVar2": "last_servo_index",
                "PTR_DAT_08000570": "last_servo_ptr",
                "PTR_DAT_08000578": "servo_info",
                "PTR_DAT_08000574": "last_servo_values",
                "decode_character_080025ac": "decode_character",
                "PTR_DAT_0800057c": "servo_data_ptr",
                "decode_and_print_string_08002634": "decode_and_print_string"
            },
            "code": "void decode_servo_info_08000500(int servo_index, int is_printing, int string_length, undefined4 param_4)\n{\n  byte max_servos = *PTR_DAT_0800056c;\n  if (max_servos > 11) {\n    send_encoded_string_08002f14(PTR_DAT_08000584, PTR_s_Max_servos_attached_08000580, string_length, param_4, param_4);\n    return;\n  }\n  byte last_servo_index = *PTR_DAT_08000570;\n  if (last_servo_index == 0) {\n    PTR_DAT_08000578[servo_index] = max_servos;\n    *PTR_DAT_0800056c = max_servos + 1;\n  }\n  else {\n    PTR_DAT_08000578[servo_index] = PTR_DAT_08000574[last_servo_index - 1];\n    *PTR_DAT_08000570 = last_servo_index - 1;\n  }\n  if ((is_printing > 0) && (string_length > 0)) {\n    decode_character_080025ac(PTR_DAT_0800057c + (uint)(byte)PTR_DAT_08000578[servo_index] * 3, servo_index, is_printing, string_length);\n    return;\n  }\n  decode_and_print_string_08002634(PTR_DAT_0800057c + (uint)(byte)PTR_DAT_08000578[servo_index] * 3, servo_index);\n  return;\n}",
            "called": [
                "FUN_08002f14",
                "FUN_080025ac",
                "FUN_08002634"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000500",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "decode_servo_info_08000500"
        },
        "FUN_08009d24": {
            "renaming": {
                "FUN_08009d24": "allocate_and_initialize_blocks_08009d24",
                "param_1": "memory_block",
                "param_2": "num_blocks",
                "puVar1": "block_ptr",
                "iVar2": "block_size",
                "allocate_memory_block_08009270": "allocate_memory_block",
                "copy_value_to_memory_080091c6": "initialize_block_values"
            },
            "code": "undefined4 * allocate_and_initialize_blocks_08009d24(undefined4 memory_block, int num_blocks) {\n  undefined4 *block_ptr;\n  int block_size = (num_blocks - 1) * BLOCK_SIZE;\n  block_ptr = (undefined4 *)allocate_memory_block_08009270(memory_block, block_size + HEADER_SIZE);\n  if (block_ptr != (undefined4 *)0x0) {\n    *block_ptr = 0;\n    block_ptr[1] = num_blocks;\n    block_ptr[2] = block_ptr + 3;\n    initialize_block_values(block_ptr + 3, 0, block_size);\n  }\n  return block_ptr;\n}\n",
            "called": [
                "FUN_08009270",
                "FUN_080091c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009d24",
            "calling": [
                "FUN_08009db0"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_blocks_08009d24"
        },
        "FUN_0800344a": {
            "renaming": {
                "FUN_0800344a": "clear_data_structure_0800344a",
                "param_1": "data_structure_ptr",
                "uVar1": "i",
                "PTR_": "no change",
                "DAT_": "no change"
            },
            "code": "\nvoid clear_data_structure_0800344a(int data_structure_ptr)\n{\n  uint32_t i;\n  \n  *(uint32_t *)(data_structure_ptr + 0x10) = 0;\n  *(uint8_t *)(data_structure_ptr + 0xc) = 0;\n  *(uint8_t *)(data_structure_ptr + 0xd) = 0;\n  for (i = 0; i < *(uint32_t *)(data_structure_ptr + 8); i++) {\n    *(uint8_t *)(*(int *)(data_structure_ptr + 4) + i) = 0;\n  }\n  *(uint8_t *)(data_structure_ptr + 0x14) = 0;\n  *(uint32_t *)(data_structure_ptr + 0x18) = 0;\n  if (*(code **)(data_structure_ptr + 0x78) != (code *)0x0) {\n    (**(code **)(data_structure_ptr + 0x78))(*(uint32_t *)(data_structure_ptr + 0x48));\n  }\n  return;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800344a",
            "calling": [
                "FUN_08003474"
            ],
            "imported": false,
            "current_name": "clear_data_structure_0800344a"
        },
        "FUN_080071e4": {
            "renaming": {
                "FUN_080071e4": "update_character_status_080071e4",
                "param_1": "character_id",
                "local_50": "character_status",
                "PTR_DAT_08007238": "CHARACTER_LIST",
                "check_param_08007320": "check_character_exists",
                "find_character_index_08006c7c": "find_character_index",
                "find_character_or_negative_one_08007376": "find_character_flags",
                "set_bit_and_update_080063c0": "set_character_bit_and_update_status",
                "set_bit_and_check_if_reset_08006460": "set_character_bit_and_check_if_reset",
                "update_bits_08005e2e": "update_character_status_bits"
            },
            "code": "void update_character_status_080071e4(int character_id) {\n  int index;\n  uint flags;\n  int character_status[17];\n  character_status[0] = check_character_exists(character_id, PTR_DAT_08007238);\n  if ((character_status[0] != 0) && (((index = find_character_index(character_id), index == 0 || (index == 4)) || (index == 8)) || ((index == 0xc || (index == 0x18)))))) {\n    flags = find_character_flags(character_id, PTR_DAT_08007238);\n    if ((flags & 0x100000) == 0) {\n      set_character_bit_and_update_status(character_status, index);\n    }\n    else {\n      set_character_bit_and_check_if_reset(character_status, index);\n    }\n    update_character_status_080071e4_bits(character_status);\n  }\n  return;\n}",
            "called": [
                "FUN_08007376",
                "FUN_08006460",
                "FUN_080063c0",
                "FUN_08007320",
                "FUN_08005e2e",
                "FUN_08006c7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080071e4",
            "calling": [
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "update_character_status_080071e4"
        },
        "FUN_08008e72": {
            "renaming": {
                "FUN_08008e72": "execute_function_pointer_08008e72",
                "param_1": "function_pointer"
            },
            "code": "void execute_function_pointer_08008e72(void* function_pointer) {\n  (**(void (**)(void))function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e72",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_pointer_08008e72"
        },
        "FUN_080022f8": {
            "renaming": {
                "FUN_080022f8": "process_data_080022f8",
                "bVar1": "is_valid_character",
                "iVar2": "character_value",
                "uVar3": "permissions",
                "uVar4": "index_1",
                "uVar5": "index_2"
            },
            "code": "void process_data_080022f8() {\n  bool is_valid_character;\n  int character_value;\n  undefined4 permissions;\n  uint index_1;\n  uint index_2;\n  process_input_08000ef8();\n  while (character_value = call_function_from_pointer_08002ec4(PTR_DAT_080023e0), character_value != 0) {\n    process_input_08002ed2(PTR_DAT_080023e0);\n  }\n  character_value = get_value_and_return_08008abc();\n  *(int *)PTR_DAT_080023e4 = character_value;\n  if (*(uint *)PTR_DAT_080023ec < (uint)(character_value - *(int *)PTR_DAT_080023e8)) {\n    *(uint *)PTR_DAT_080023e8 = *(int *)PTR_DAT_080023e8 + *(uint *)PTR_DAT_080023ec;\n    for (index_1 = 0; index_1 < 0x3c; index_1 = index_1 + 1 & 0xff) {\n      index_2 = index_1 - 0x2e & 0xff;\n      if (index_2 < 0xe) {\n        if (index_1 < 0x3c) {\n          character_value = (int)(char)PTR_DAT_080023f4[index_1];\n        }\n        else {\n          character_value = -1;\n        }\n        character_value = check_character_in_array_080036ac(character_value);\n        if (character_value == 0) {\n          is_valid_character = false;\n        }\n        else {\n          if (index_1 < 0x3c) {\n            character_value = (int)(char)PTR_DAT_080023f4[index_1];\n          }\n          else {\n            character_value = -1;\n          }\n          character_value = check_character_in_array_080036ac(character_value);\n          if (character_value == 1) {\n            is_valid_character = false;\n          }\n          else {\n            character_value = get_value_at_offset_08002fa0(PTR_DAT_080023e0,index_1);\n            if (character_value == 2) {\n              is_valid_character = true;\n            }\n            else {\n              is_valid_character = false;\n            }\n          }\n        }\n      }\n      else {\n        is_valid_character = false;\n      }\n      if ((is_valid_character) && ((*(int *)PTR_DAT_080023f0 >> index_2 & 1U) != 0)) {\n        permissions = get_permissions_08008880(index_2);\n        encode_data_08002ef2(PTR_DAT_080023e0,index_2,permissions);\n      }\n    }\n    if (-1 < (char)*PTR_DAT_080023f8) {\n      for (index_1 = 0; (int)index_1 < (char)*PTR_DAT_080023f8 + 1; index_1 = index_1 + 1 & 0xff) {\n        character_value = index_1 * 0xc;\n        process_i2c_input_08001c18(PTR_DAT_080023fc[character_value],*(undefined4 *)(PTR_DAT_080023fc + character_value + 4),PTR_DAT_080023fc[character_value + 8],PTR_DAT_080023fc[character_value + 9]);\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002fa0",
                "FUN_08002ec4",
                "FUN_080036ac",
                "FUN_08001c18",
                "FUN_08000ef8",
                "FUN_08008880",
                "FUN_08008abc",
                "FUN_08002ed2",
                "FUN_08002ef2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080022f8",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "process_data_080022f8"
        },
        "FUN_080072fa": {
            "renaming": {
                "FUN_080072fa": "initialize_device_and_enable_data_updates_080072fa",
                "enable_data_updates_08003724": "enable_data_updates",
                "initialize_device_080035b8": "initialize_device"
            },
            "code": "void initialize_device_and_enable_data_updates_080072fa(void)\n{\n  enable_data_updates();\n  initialize_device();\n  return;\n}",
            "called": [
                "FUN_080035b8",
                "FUN_08003724"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072fa",
            "calling": [
                "FUN_080036a2"
            ],
            "imported": false,
            "current_name": "initialize_device_and_enable_data_updates_080072fa"
        },
        "FUN_08005084": {
            "renaming": {
                "FUN_08005084": "execute_parser_08005084",
                "param_1": "parser_context",
                "cVar1": "current_char",
                "puVar2": "parser_ptr",
                "puVar3": "output_ptr"
            },
            "code": "uint execute_parser_08005084(uint **parser_context) {\n    char current_char = *(char *)((int)parser_context + 0x3d);\n    (*parser_context)[1] &= 0xfffff8ff;\n    **parser_context |= 1;\n    **parser_context &= 0xfffffbff;\n    uint *parser_ptr = *parser_context;\n    if ((parser_ptr[1] & 0x800) != 0) {\n        if ((current_char == '\"') || (current_char == '*')) {\n            *(short *)((int)parser_context + 0x2a) = (short)*(undefined4 *)(*parser_context[0xe] + 4);\n        }\n        else {\n            *(short *)((int)parser_context + 0x2a) = (short)*(undefined4 *)(*parser_context[0xd] + 4);\n        }\n    }\n    if (*(short *)((int)parser_context + 0x2a) != 0) {\n        if ((parser_ptr[5] & 4) != 0) {\n            uint *output_ptr = parser_context[9];\n            parser_context[9] = (uint *)((int)output_ptr + 1);\n            *(char *)output_ptr = (char)parser_ptr[4];\n            *(short *)((int)parser_context + 0x2a) = *(short *)((int)parser_context + 0x2a) + -1;\n        }\n        if (((*parser_context)[5] & 0x40) != 0) {\n            parser_ptr = parser_context[9];\n            parser_context[9] = (uint *)((int)parser_ptr + 1);\n            *(char *)parser_ptr = (char)(*parser_context)[4];\n            *(short *)((int)parser_context + 0x2a) = *(short *)((int)parser_context + 0x2a) + -1;\n        }\n        parser_context[0x10] = (uint *)((uint)parser_context[0x10] | 4);\n    }\n    if (parser_context[0x10] == (uint *)0x0) {\n        if (((current_char == '(') || (current_char == '*')) || (current_char == ')')) {\n            parser_context[0xb] = DAT_08005184;\n            parser_context[0xc] = (uint *)0x0;\n            *(undefined *)((int)parser_context + 0x3d) = 0x20;\n            *(undefined *)((int)parser_context + 0x3e) = 0;\n            execute_subroutine_and_set_flags_08007ff0();\n        }\n        else if ((parser_context[0xc] == (uint *)0x22) || (current_char == '\"')) {\n            parser_context[0xc] = (uint *)0x0;\n            *(undefined *)((int)parser_context + 0x3d) = 0x20;\n            *(undefined *)((int)parser_context + 0x3e) = 0;\n            do_nothing_08004a74();\n        }\n    }\n    else {\n        decode_08004f3c();\n    }\n    return 0;\n}",
            "called": [
                "FUN_08007ff0",
                "FUN_08004a74",
                "FUN_08004f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005084",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "execute_parser_08005084"
        },
        "FUN_0800291c": {
            "renaming": {
                "FUN_0800291c": "set_default_values_0800291c",
                "param_1": "config",
                "PTR_PTR_FUN_0800288c_1_08002940": "pointer_to_function",
                "PTR_DAT_08002944": "data_pointer"
            },
            "code": "void set_default_values_0800291c(undefined4 *config)\n{\n  undefined *pointer_to_data;\n  config[1] = 0;\n  config[2] = 1000;\n  *config = PTR_PTR_copy_char_to_buffer_0800288c_1_08002940;\n  pointer_to_data = PTR_DAT_08002944;\n  *(undefined *)(config + 0x1b) = PTR_DAT_08002944[0xe];\n  *(undefined *)((int)config + 0x6d) = pointer_to_data[0xf];\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800291c",
            "calling": [
                "FUN_08002948"
            ],
            "imported": false,
            "current_name": "set_default_values_0800291c"
        },
        "FUN_08002ac0": {
            "renaming": {
                "FUN_08002ac0": "validate_input_and_return_08002ac0",
                "param_1": "input",
                "param_2": "lower_bound",
                "param_3": "upper_bound",
                "param_4": "error_code",
                "DAT_08004cfc": "error_message",
                "check_input_08002a58": "check_input_bounds"
            },
            "code": "void validate_input_and_return_08002ac0(){\n\tcheck_input_bounds(input, lower_bound, upper_bound, error_code, DAT_08004cfc);\n\treturn;\n}",
            "called": [
                "FUN_08002a58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ac0",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "validate_input_and_return_08002ac0"
        },
        "FUN_08003346": {
            "renaming": {
                "FUN_08003346": "update_values_if_condition_met_08003346",
                "param_1": "data_address",
                "param_2": "value",
                "param_3": "new_value_1",
                "param_4": "new_value_2",
                "*(undefined4 *)(param_1 + 0x70)": "*(undefined4 *)(data_address + 112)",
                "*(undefined4 *)(param_1 + 0x34)": "*(undefined4 *)(data_address + 52)"
            },
            "code": "void update_values_if_condition_met_08003346(int data_address, int value, undefined4 new_value_1, undefined4 new_value_2) {\n  if (value == 121) {\n    *(undefined4 *)(data_address + 112) = new_value_1;\n    *(undefined4 *)(data_address + 52) = new_value_2;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003346",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "update_values_if_condition_met_08003346"
        },
        "FUN_080032bc": {
            "renaming": {
                "FUN_080032bc": "initialize_data_struct_080032bc",
                "param_1": "data_struct",
                "param_2": "param_2",
                "param_3": "param_3",
                "uVar1": "leading_zeroes_count",
                "PTR_": "int_ptr",
                "DAT_": "data"
            },
            "code": "void initialize_data_struct_080032bc(void* DAT__struct, int param_2, int param_3) {\n    uint leading_zeroes_count;\n    int* PTR_ = (int*)DAT__struct;\n    PTR_[1] = param_2;\n    PTR_[2] = param_3;\n    for(int i = 3; i < 32; i++) {\n        PTR_[i] = 0;\n    }\n    leading_zeroes_count = count_leading_zeroes(param_2);\n    PTR_[0] = (char)(leading_zeroes_count >> 5);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032bc",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "initialize_data_struct_080032bc"
        },
        "FUN_08003106": {
            "renaming": {
                "FUN_08003106": "decode_and_encode_data_08003106",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "encoding_param",
                "param_4": "decoding_param",
                "puVar1": "func_ptr"
            },
            "code": "void decode_and_encode_data_08003106(undefined4 *data_ptr, undefined4 data_size, undefined4 encoding_param, undefined4 decoding_param)\n{\n    undefined4 *func_ptr;\n  \n    func_ptr = (undefined4 *)*data_ptr;\n    if (func_ptr != (undefined4 *)0x0) {\n        (**(code **)*func_ptr)(func_ptr, 0xf0);\n        (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr, 0x6f);\n        (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr, encoding_param);\n        encode_data_0800307a(data_ptr, data_size, decoding_param, data_size);\n        (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr, 0xf7);\n    }\n    return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003106",
            "calling": [
                "FUN_08003158"
            ],
            "imported": false,
            "current_name": "decode_and_encode_data_08003106"
        },
        "FUN_080077b0": {
            "renaming": {
                "FUN_080077b0": "decode_and_process_data_080077b0",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4",
                "puVar1": "pointer1",
                "iVar2": "variable1",
                "iVar3": "variable2",
                "uVar4": "result",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "uVar7": "temp3",
                "uVar8": "temp4",
                "piVar9": "pointer2",
                "local_38": "local_var1",
                "local_34": "local_var2",
                "local_30": "local_var3",
                "local_2c": "local_var4"
            },
            "code": "\nvoid decode_and_process_data_080077b0(int *data,int value1,int value2,int value3,undefined value4)\n\n{\n  undefined *pointer1;\n  int variable1;\n  int variable2;\n  undefined4 result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  int *pointer2;\n  uint local_var1;\n  uint local_var2;\n  uint local_var3;\n  undefined4 local_var4;\n  \n  if (data != (int *)0x0) {\n    pointer2 = data + 1;\n    variable1 = check_param_08007320((int)*(char *)(data + 0x16),PTR_DAT_08007a74);\n    variable2 = check_param_08007320((int)*(char *)((int)data + 0x59),PTR_DAT_08007a78);\n    if ((variable1 == 0) || (variable2 == 0)) {\n      process_data_080098d8(PTR_s_ERROR__at_least_one_I2C_pin_has_n_08007a88);\n    }\n    else {\n      variable2 = compare_and_return_080073ae(variable1,variable2);\n      *data = variable2;\n      variable1 = DAT_08007a7c;\n      if (variable2 == 0) {\n        process_data_080098d8(PTR_s_ERROR__I2C_pins_mismatch_08007a8c);\n      }\n      else {\n        if (variable2 == DAT_08007a7c) {\n          *(uint *)(DAT_08007a7c + 0x1bc1c) = *(uint *)(DAT_08007a7c + 0x1bc1c) | 0x200000;\n          *(uint *)(variable1 + 0x1bc10) = *(uint *)(variable1 + 0x1bc10) | 0x200000;\n          *(uint *)(variable1 + 0x1bc10) = *(uint *)(variable1 + 0x1bc10) & 0xffdfffff;\n          *(undefined *)((int)data + 0x5a) = 0x1f;\n          *(undefined *)((int)data + 0x5b) = 0x20;\n          *(int **)PTR_DAT_08007a90 = pointer2;\n        }\n        variable1 = DAT_08007a80;\n        if (*data == DAT_08007a80) {\n          *(uint *)(DAT_08007a80 + 0x1b81c) = *(uint *)(DAT_08007a80 + 0x1b81c) | 0x400000;\n          *(uint *)(variable1 + 0x1b810) = *(uint *)(variable1 + 0x1b810) | 0x400000;\n          *(uint *)(variable1 + 0x1b810) = *(uint *)(variable1 + 0x1b810) & 0xffbfffff;\n          *(undefined *)((int)data + 0x5a) = 0x21;\n          *(undefined *)((int)data + 0x5b) = 0x22;\n          *(int **)(PTR_DAT_08007a90 + 4) = pointer2;\n        }\n        result = set_flag_08006bb8((uint)((int)*(char *)((int)data + 0x59) << 0x18) >> 0x1c);\n        pointer1 = PTR_DAT_08007a78;\n        local_var1 = 1 << ((int)*(char *)((int)data + 0x59) & 0xfU) & 0xffff;\n        temp1 = find_character_or_negative_one_08007376((int)*(char *)((int)data + 0x59),PTR_DAT_08007a78);\n        temp2 = find_character_or_negative_one_08007376((int)*(char *)((int)data + 0x59),pointer1);\n        local_var2 = (temp1 >> 3 & 1) << 4 | temp2 & 7;\n        local_var4 = 3;\n        variable1 = find_character_or_negative_one_08007376((int)*(char *)((int)data + 0x59),pointer1);\n        local_var3 = (uint)(variable1 << 0x1a) >> 0x1e;\n        variable2 = find_character_or_negative_one_08007376((int)*(char *)((int)data + 0x59),pointer1);\n        variable1 = DAT_08007a84;\n        temp3 = *(uint *)(DAT_08007a84 + 0x18) | 1;\n        *(uint *)(DAT_08007a84 + 0x18) = temp3;\n        temp2 = DAT_08007d4c;\n        temp1 = DAT_08007a94;\n        temp4 = *(uint *)(variable1 + 0x18) & 1;\n        switch((uint)(variable2 << 0x11) >> 0x19) {\n        case 1:\n          temp4 = *(uint *)(DAT_08007a94 + 4) | 0x7000001;\n          *(uint *)(DAT_08007a94 + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 2:\n          temp4 = *(uint *)(DAT_08007a94 + 4) & 0xfffffffe | 0x7000000;\n          *(uint *)(DAT_08007a94 + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 3:\n          temp4 = *(uint *)(DAT_08007a94 + 4) | 0x7000002;\n          *(uint *)(DAT_08007a94 + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 4:\n          temp4 = *(uint *)(DAT_08007a94 + 4) & 0xfffffffd | 0x7000000;\n          *(uint *)(DAT_08007a94 + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 5:\n          temp4 = *(uint *)(DAT_08007a94 + 4) | 0x7000004;\n          *(uint *)(DAT_08007a94 + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 6:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffb | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 7:\n          temp4 = *(uint *)(DAT_08007d4c + 4) | 0x7000008;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 8:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xfffffff7 | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 9:\n          temp4 = *(uint *)(DAT_08007d4c + 4) | 0x7000030;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 10:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000010;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0xb:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0xc:\n          temp4 = *(uint *)(DAT_08007d4c + 4) | 0x70000c0;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0xd:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xffffff3f | 0x7000040;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0xe:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xffffff3f | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0xf:\n          temp4 = *(uint *)(DAT_08007d4c + 4) | 0x7000300;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x10:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000200;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x11:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000100;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x12:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x13:\n          temp4 = *(uint *)(DAT_08007d4c + 4) | 0x7000c00;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x14:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xfffff3ff | 0x7000800;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x15:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xfffff3ff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x16:\n          temp4 = *(uint *)(DAT_08007d4c + 4) | 0x7001000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x17:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xffffefff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x1b:\n          temp4 = *(uint *)(DAT_08007d4c + 4) | 0x7008000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x1c:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xffff7fff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x21:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x22:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x1000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x23:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x2000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x24:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x4000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp2;\n        }\n        decode_080040e8(result,&local_var1,temp3,temp4);\n        result = set_flag_08006bb8((uint)((int)*(char *)(data + 0x16) << 0x18) >> 0x1c);\n        pointer1 = PTR_DAT_08007a74;\n        local_var1 = 1 << ((int)*(char *)(data + 0x16) & 0xfU) & 0xffff;\n        temp1 = find_character_or_negative_one_08007376((int)*(char *)(data + 0x16),PTR_DAT_08007a74);\n        temp2 = find_character_or_negative_one_08007376((int)*(char *)(data + 0x16),pointer1);\n        local_var2 = (temp1 >> 3 & 1) << 4 | temp2 & 7;\n        local_var4 = 3;\n        variable1 = find_character_or_negative_one_08007376((int)*(char *)(data + 0x16),pointer1);\n        local_var3 = (uint)(variable1 << 0x1a) >> 0x1e;\n        variable2 = find_character_or_negative_one_08007376((int)*(char *)(data + 0x16),pointer1);\n        variable1 = DAT_08007a84;\n        temp3 = *(uint *)(DAT_08007a84 + 0x18) | 1;\n        *(uint *)(DAT_08007a84 + 0x18) = temp3;\n        temp2 = DAT_08007e70;\n        temp1 = DAT_08007d4c;\n        temp4 = *(uint *)(variable1 + 0x18) & 1;\n        switch((uint)(variable2 << 0x11) >> 0x19) {\n        case 1:\n          temp4 = *(uint *)(DAT_08007d4c + 4) | 0x7000001;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 2:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffe | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 3:\n          temp4 = *(uint *)(DAT_08007d4c + 4) | 0x7000002;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 4:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffd | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 5:\n          temp4 = *(uint *)(DAT_08007d4c + 4) | 0x7000004;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 6:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffb | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 7:\n          temp4 = *(uint *)(DAT_08007d4c + 4) | 0x7000008;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 8:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xfffffff7 | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 9:\n          temp4 = *(uint *)(DAT_08007d4c + 4) | 0x7000030;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 10:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000010;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 0xb:\n          temp4 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 0xc:\n          temp4 = *(uint *)(DAT_08007d4c + 4) | 0x70000c0;\n          *(uint *)(DAT_08007d4c + 4) = temp4;\n          temp3 = temp1;\n          break;\n        case 0xd:\n          temp4 = *(uint *)(DAT_08007e70 + 4) & 0xffffff3f | 0x7000040;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0xe:\n          temp4 = *(uint *)(DAT_08007e70 + 4) & 0xffffff3f | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0xf:\n          temp4 = *(uint *)(DAT_08007e70 + 4) | 0x7000300;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x10:\n          temp4 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000200;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x11:\n          temp4 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000100;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x12:\n          temp4 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x13:\n          temp4 = *(uint *)(DAT_08007e70 + 4) | 0x7000c00;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x14:\n          temp4 = *(uint *)(DAT_08007e70 + 4) & 0xfffff3ff | 0x7000800;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x15:\n          temp4 = *(uint *)(DAT_08007e70 + 4) & 0xfffff3ff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x16:\n          temp4 = *(uint *)(DAT_08007e70 + 4) | 0x7001000;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x17:\n          temp4 = *(uint *)(DAT_08007e70 + 4) & 0xffffefff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x1b:\n          temp4 = *(uint *)(DAT_08007e70 + 4) | 0x7008000;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x1c:\n          temp4 = *(uint *)(DAT_08007e70 + 4) & 0xffff7fff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x21:\n          temp4 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x22:\n          temp4 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x1000000;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x23:\n          temp4 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x2000000;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n          break;\n        case 0x24:\n          temp4 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x4000000;\n          *(uint *)(DAT_08007e70 + 4) = temp4;\n          temp3 = temp2;\n        }\n        decode_080040e8(result,&local_var1,temp3,temp4);\n        data[1] = *data;\n        data[2] = value1;\n        data[3] = 0;\n        data[4] = value3;\n        data[7] = 0xff;\n        data[5] = value2;\n        data[6] = 0;\n        data[8] = 0;\n        data[9] = 0;\n        *(undefined *)((int)data + 0x41) = 0;\n        decode_and_store_bits_08003f30((int)*(char *)((int)data + 0x5a),0,1);\n        set_bit_at_position_08003f94((int)*(char *)((int)data + 0x5a));\n        decode_and_store_bits_08003f30((int)*(char *)((int)data + 0x5b),0,1);\n        set_bit_at_position_08003f94((int)*(char *)((int)data + 0x5b));\n        calculate_result_080045c0(pointer2);\n        *(undefined *)((int)data + 0x5d) = value4;\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007376",
                "FUN_080098d8",
                "FUN_080045c0",
                "FUN_080040e8",
                "FUN_08007320",
                "FUN_08006bb8",
                "FUN_080073ae",
                "FUN_08003f30",
                "FUN_08003f94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080077b0",
            "calling": [
                "FUN_08002968"
            ],
            "imported": false,
            "current_name": "decode_and_process_data_080077b0"
        },
        "FUN_08007708": {
            "renaming": {
                "FUN_08007708": "set_flags_based_on_param_08007708"
            },
            "code": "void set_flags_based_on_param_08007708(){\n  set_flags_based_on_param_08007708_08007438();\n  return;\n}",
            "called": [
                "FUN_08007438"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007708",
            "calling": [
                "FUN_08006060"
            ],
            "imported": false,
            "current_name": "set_flags_based_on_param_08007708"
        },
        "FUN_0800018c": {
            "renaming": {
                "FUN_0800018c": "handle_system_interrupt_0800018c",
                "param_1": "interrupt_param_1",
                "param_2": "interrupt_param_2",
                "param_3": "interrupt_param_3",
                "param_4": "interrupt_param_4",
                "uVar1": "result",
                "PTR_DAT_080001a4": "interrupt_type_ptr",
                "trigger_system_interrupt_08000188": "trigger_system_interrupt"
            },
            "code": "int handle_system_interrupt_0800018c(int interrupt_type, int param_1, int param_2, int param_3, int param_4) {\n  int result = 0;\n  if (*PTR_DAT_080001a4 != 0) {\n    return result;\n  }\n  result = trigger_system_interrupt(interrupt_type, param_1, 0, 0, param_4);\n  return result;\n}",
            "called": [
                "FUN_08000188"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800018c",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "handle_system_interrupt_0800018c"
        },
        "FUN_08003f94": {
            "renaming": {
                "FUN_08003f94": "set_bit_at_position_08003f94",
                "param_1": "position",
                "DAT_08003fac": "data_array"
            },
            "code": "void set_bit_at_position_08003f94(uint position) {\n  if (position >= 0) {\n    *(int *)(DAT_08003fac + (position >> 5) * 4) = 1 << (position & 0x1f);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f94",
            "calling": [
                "FUN_080077b0",
                "FUN_08008694",
                "FUN_0800863c",
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_08003f94"
        },
        "FUN_08008c44": {
            "renaming": {
                "FUN_08008c44": "decode_and_process_data_08008c44",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "flags",
                "bVar1": "flag_bits",
                "iVar2": "num_bits",
                "UNRECOVERED_JUMPTABLE": "jumptable",
                "PTR_DAT_08008d14": "jumptable",
                "extraout_r1": "data_size",
                "FUN_08008078": "decode_bits",
                "decode_and_store_bits_0800863c": "store_bits",
                "process_data_and_update_results_08009124_wrapper_080090cc": "update_results",
                "uRam08008cfc": "jumptable",
                "uRam08008cf8": "jumptable",
                "uRam08008cf4": "jumptable",
                "uRam08008cf0": "decoded_bits",
                "uRam0000012d": "jumptable_entry",
                "stack0x00000148": "stack"
            },
            "code": "void decode_and_process_data_08008c44(int data, int data_size, byte flags) {\n  int num_bits = 0;\n  if (flags & 7 == 4) {\n    num_bits = 7;\n  }\n  else if (flags & 7 == 6) {\n    num_bits = 8;\n  }\n  else if (flags & 7 == 2) {\n    num_bits = 6;\n  }\n  if ((flags & 0x30) == 0x30) {\n    set_bits(data, 0x600, 0x128);\n    num_bits++;\n  }\n  else if ((flags & 0x20) == 0) {\n    set_bits(data, 0, 0x128);\n  }\n  else {\n    set_bits(data, 0x400, 0x128);\n    num_bits++;\n  }\n  if ((flags & 8) == 0) {\n    set_bits(data, 0, 0x124);\n  }\n  else {\n    set_bits(data, 0x2000, 0x124);\n  }\n  if (num_bits == 8) {\n    set_bits(data, 0, 0x120);\n  }\n  else if (num_bits == 9) {\n    set_bits(data, 0x1000, 0x120);\n  }\n  else {\n    num_bits = 0;\n  }\n  if (num_bits != 0) {\n    process_uart_pins_08008078(data + 0xd4);\n    decode_and_store_bits_0800863c(data + 0xd4, decoded_bits);\n    return;\n  }\n  process_data_and_update_results_08009124_wrapper_080090cc(data);\n  if (data_size < 0x3c) {\n    PTR_DAT_08008d14_entry = PTR_DAT_08008d14[data_size];\n  }\n  else {\n    PTR_DAT_08008d14_entry = 0xff;\n  }\n  PTR_DAT_08008d14_entry(0, data_size, &stack);\n}\n",
            "called": [
                "FUN_08008078",
                "FUN_0800863c",
                "FUN_080090cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c44",
            "calling": [
                "FUN_08003048"
            ],
            "imported": false,
            "current_name": "decode_and_process_data_08008c44"
        },
        "FUN_08002a26": {
            "renaming": {
                "FUN_08002a26": "initialize_parameters_and_return_08002a26",
                "param_1": "array",
                "param_2": "size",
                "param_3": "threshold",
                "param_4": "output"
            },
            "code": "void initialize_parameters_and_return_08002a26(float* array, int size, float threshold, float* output){\n  initialize_parameters_and_return_08002a26_08002a1c(array, 0x33, threshold, output, output);\n  return;\n}",
            "called": [
                "FUN_08002a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a26",
            "calling": [
                "FUN_08000a64"
            ],
            "imported": false,
            "current_name": "initialize_parameters_and_return_08002a26"
        },
        "FUN_0800430c": {
            "renaming": {
                "FUN_0800430c": "get_status_0800430c",
                "param_1": "status_ptr",
                "*(char *)((int)param_1 + 0x3e)": "c1",
                "param_1[0x11]": "val1",
                "*param_1": "val2",
                "val1 & 0xffU": "val3",
                "(param_1[0x11] << 0x10) >> 0x17 & 6": "val4",
                "val3 | 1": "val5",
                "val4 | 0xf0": "val6",
                "val4 | 0xf1": "val7",
                "param_1[0x14]": "val8",
                "*(char *)((int)param_1 + 0x3d)": "c2"
            },
            "code": "uint8_t get_status_0800430c(uint32_t *status_ptr){\n    uint8_t status = 0;\n    char c1 = *((char *)status_ptr + 0x3e);\n    uint32_t val1 = status_ptr[0x11];\n    uint32_t val2 = *status_ptr;\n    uint32_t val3 = val1 & 0xffU;\n    uint32_t val4 = (val1 << 0x10) >> 0x17 & 6;\n    uint32_t val5 = val3 | 1;\n    uint32_t val6 = val4 | 0xf0;\n    uint32_t val7 = val4 | 0xf1;\n    uint32_t val8 = status_ptr[0x14];\n    char c2 = *((char *)status_ptr + 0x3d);\n\n    if (c1 == '@') {\n        if (status_ptr[0x14] == 0) {\n            *(uint32_t *)(val2 + 0x10) = val3 & 0xfe;\n        } else {\n            *(uint32_t *)(val2 + 0x10) = val5;\n        }\n    } else if (status_ptr[4] == 0x4000) {\n        if (c2 == '!') {\n            *(uint32_t *)(val2 + 0x10) = val3 & 0xfe;\n        } else {\n            *(uint32_t *)(val2 + 0x10) = val5;\n        }\n    } else if (val8 == 0) {\n        *(uint32_t *)(val2 + 0x10) = val6;\n    } else if (val8 == 1) {\n        *(uint32_t *)(val2 + 0x10) = val7;\n    }\n    return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800430c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "get_status_0800430c"
        },
        "FUN_08006060": {
            "renaming": {
                "FUN_08006060": "check_settings_and_update_08006060",
                "param_1": "settings",
                "PTR_": "",
                "DAT_": "",
                "undefined4": "int",
                "char": "char",
                "NULL": "NULL",
                "set_flags_based_on_param_08007708": "set_flags_based_on_param",
                "undefined": "undefined",
                "update_settings_08005fe8": "update_settings"
            },
            "code": "int check_settings_and_update_08006060(int *settings)\\n{\\n    if (settings != NULL) {\\n        if (*(char *)((int)settings + 0x3d) == \"\\0\") {\\n            *(undefined *)(settings + 0xf) = 0;\\n            set_flags_based_on_param_08007708();\\n        }\\n        *(undefined *)((int)settings + 0x3d) = 2;\\n        update_settings_08005fe8(*settings, settings + 1);\\n        *(undefined *)((int)settings + 0x3d) = 1;\\n        return 0;\\n    }\\n    return 1;\\n}",
            "called": [
                "FUN_08005fe8",
                "FUN_08007708"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006060",
            "calling": [
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "check_settings_and_update_08006060"
        },
        "FUN_08003350": {
            "renaming": {
                "FUN_08003350": "update_parameters_08003350",
                "param_1": "base_address",
                "param_2": "parameter_value",
                "param_3": "first_param",
                "param_4": "second_param",
                "*(undefined4 *)(param_1 + 0x74)": "*(undefined4 *)(base_address + 116)",
                "*(undefined4 *)(param_1 + 0x38)": "*(undefined4 *)(base_address + 56)",
                "*(undefined4 *)(param_1 + 0x78)": "*(undefined4 *)(base_address + 120)",
                "*(undefined4 *)(param_1 + 0x48)": "*(undefined4 *)(base_address + 72)"
            },
            "code": "void update_parameters_08003350(int base_address, int parameter_value, undefined4 first_param, undefined4 second_param) {\n  if (parameter_value == 249) {\n    *(undefined4 *)(base_address + 116) = first_param;\n    *(undefined4 *)(base_address + 56) = second_param;\n    return;\n  }\n  if (parameter_value != 255) {\n    return;\n  }\n  *(undefined4 *)(base_address + 120) = first_param;\n  *(undefined4 *)(base_address + 72) = second_param;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003350",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "update_parameters_08003350"
        },
        "FUN_08009698": {
            "renaming": {
                "FUN_08009698": "parse_and_format_08009698",
                "param_1": "input",
                "param_2": "format_specifier",
                "param_3": "arg_list_length",
                "param_4": "output_function",
                "param_5": "next_arg_ptr",
                "bVar1": "specifier_char",
                "iVar2": "result",
                "puVar3": "arg_ptr",
                "iVar4": "i",
                "puVar5": "hex_chars",
                "uVar6": "base",
                "ppuVar7": "next_arg_pptr",
                "uVar8": "flags",
                "uVar9": "arg_length",
                "puVar10": "arg_str_ptr",
                "puVar11": "arg_str_end",
                "local_24": "arg_str_length"
            },
            "code": "\nuint parse_and_format_08009698(undefined4 input,uint *format_specifier,undefined4 arg_list_length,code *output_function,uint **next_arg_ptr)\n\n{\n  byte specifier_char;\n  int result;\n  uint *arg_ptr;\n  int i;\n  undefined *hex_chars;\n  uint base;\n  uint **next_arg_pptr;\n  uint flags;\n  uint arg_length;\n  undefined *arg_str_ptr;\n  undefined *arg_str_end;\n  uint arg_str_length [2];\n  \n  specifier_char = *(byte *)(format_specifier + 6);\n  arg_str_end = (undefined *)((int)format_specifier + 0x43);\n  if (specifier_char != 0x6e) {\n    if (specifier_char < 0x6f) {\n      if (specifier_char != 99) {\n        if (specifier_char < 100) {\n          if (specifier_char == 0) goto LAB_08009852;\n          if (specifier_char != 0x58) goto LAB_080096c8;\n          *(undefined *)((int)format_specifier + 0x45) = 0x58;\n          hex_chars = PTR_s_0123456789ABCDEF_080098d4;\nLAB_080097e2:\n          base = *format_specifier;\n          arg_ptr = *next_arg_ptr;\n          *next_arg_ptr = arg_ptr + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            flags = (uint)*(ushort *)arg_ptr;\n          }\n          else {\n            flags = *arg_ptr;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *format_specifier = base | 0x20;\n          }\n          if (flags == 0) {\n            *format_specifier = *format_specifier & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_08009778:\n          *(undefined *)((int)format_specifier + 0x43) = 0;\n        }\n        else {\n          if ((specifier_char != 100) && (specifier_char != 0x69)) goto LAB_080096c8;\n          flags = *format_specifier;\n          arg_ptr = *next_arg_ptr;\n          if ((flags & 0x80) == 0) {\n            *next_arg_ptr = arg_ptr + 1;\n            if ((flags & 0x40) == 0) goto LAB_080096e8;\n            flags = (uint)(short)*(ushort *)arg_ptr;\n          }\n          else {\n            *next_arg_ptr = arg_ptr + 1;\nLAB_080096e8:\n            flags = *arg_ptr;\n          }\n          if ((int)flags < 0) {\n            flags = -flags;\n            *(undefined *)((int)format_specifier + 0x43) = 0x2d;\n          }\n          base = 10;\n          hex_chars = PTR_s_0123456789ABCDEF_080098d4;\n        }\n        arg_length = format_specifier[1];\n        format_specifier[2] = arg_length;\n        arg_str_ptr = arg_str_end;\n        if ((int)arg_length < 0) {\n          if (flags != 0) goto LAB_08009816;\nLAB_080098c4:\n          *(undefined *)((int)format_specifier + 0x42) = *hex_chars;\n          arg_str_ptr = (undefined *)((int)format_specifier + 0x42);\n        }\n        else {\n          *format_specifier = *format_specifier & 0xfffffffb;\n          if (flags == 0) {\n            if (arg_length != 0) goto LAB_080098c4;\n          }\n          else {\nLAB_08009816:\n            do {\n              arg_length = flags / base;\n              arg_str_ptr = arg_str_ptr + -1;\n              *arg_str_ptr = hex_chars[flags - base * arg_length];\n              flags = arg_length;\n            } while (arg_length != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*format_specifier << 0x1f) < 0)) && ((int)format_specifier[1] <= (int)format_specifier[4]))\n        {\n          arg_str_ptr[-1] = 0x30;\n          arg_str_ptr = arg_str_ptr + -1;\n        }\n        format_specifier[4] = (int)arg_str_end - (int)arg_str_ptr;\n        arg_str_end = arg_str_ptr;\n        goto LAB_080097be;\n      }\n      arg_ptr = *next_arg_ptr;\n      *next_arg_ptr = arg_ptr + 1;\n      *(char *)((int)format_specifier + 0x42) = (char)*arg_ptr;\nLAB_08009728:\n      arg_str_end = (undefined *)((int)format_specifier + 0x42);\n      flags = 1;\n    }\n    else {\n      if (specifier_char != 0x73) {\n        if (specifier_char < 0x74) {\n          if (specifier_char == 0x6f) {\nLAB_0800974e:\n            flags = *format_specifier;\n            arg_ptr = *next_arg_ptr;\n            if ((flags & 0x80) == 0) {\n              *next_arg_ptr = arg_ptr + 1;\n              if ((flags & 0x40) == 0) goto LAB_0800975c;\n              flags = (uint)*(ushort *)arg_ptr;\n            }\n            else {\n              *next_arg_ptr = arg_ptr + 1;\nLAB_0800975c:\n              flags = *arg_ptr;\n            }\n            hex_chars = PTR_s_0123456789ABCDEF_080098d4;\n            if (specifier_char == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            goto LAB_08009778;\n          }\n          if (specifier_char == 0x70) {\n            *format_specifier = *format_specifier | 0x20;\nLAB_0800970e:\n            hex_chars = PTR_s_0123456789abcdef_080098d0;\n            *(undefined *)((int)format_specifier + 0x45) = 0x78;\n            goto LAB_080097e2;\n          }\n        }\n        else {\n          if (specifier_char == 0x75) goto LAB_0800974e;\n          if (specifier_char == 0x78) goto LAB_0800970e;\n        }\nLAB_080096c8:\n        *(byte *)((int)format_specifier + 0x42) = specifier_char;\n        goto LAB_08009728;\n      }\n      arg_ptr = *next_arg_ptr;\n      *next_arg_ptr = arg_ptr + 1;\n      arg_str_end = (undefined *)*arg_ptr;\n      result = find_character_08009f2c(arg_str_end,0,format_specifier[1]);\n      if (result != 0) {\n        format_specifier[1] = result - (int)arg_str_end;\n      }\n      flags = format_specifier[1];\n    }\n    format_specifier[4] = flags;\n    *(undefined *)((int)format_specifier + 0x43) = 0;\n    goto LAB_080097be;\n  }\n  flags = *format_specifier;\n  next_arg_pptr = (uint **)*next_arg_ptr;\n  base = format_specifier[5];\n  if ((flags & 0x80) == 0) {\n    *next_arg_ptr = (uint *)(next_arg_pptr + 1);\n    arg_ptr = *next_arg_pptr;\n    if ((flags & 0x40) == 0) goto LAB_0800983e;\n    *(short *)arg_ptr = (short)base;\n  }\n  else {\n    *next_arg_ptr = (uint *)(next_arg_pptr + 1);\n    arg_ptr = *next_arg_pptr;\nLAB_0800983e:\n    *arg_ptr = base;\n  }\nLAB_08009852:\n  format_specifier[4] = 0;\nLAB_080097be:\n  result = calculate_length_080095a8(input,format_specifier,arg_str_length,arg_list_length,output_function);\n  if ((result == -1) || (result = (*output_function)(input,arg_list_length,arg_str_end,format_specifier[4]), result == -1)) {\nLAB_080097d2:\n    flags = 0xffffffff;\n  }\n  else {\n    if ((int)(*format_specifier << 0x1e) < 0) {\n      for (result = 0; result < (int)(format_specifier[3] - arg_str_length[0]); result = result + 1) {\n        i = (*output_function)(input,arg_list_length,(int)format_specifier + 0x19,1);\n        if (i == -1) goto LAB_080097d2;\n      }\n    }\n    flags = format_specifier[3];\n    if ((int)format_specifier[3] < (int)arg_str_length[0]) {\n      flags = arg_str_length[0];\n    }\n  }\n  return flags;\n}\n\n",
            "called": [
                "FUN_08009f2c",
                "FUN_080095a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009698",
            "calling": [
                "FUN_0800937c"
            ],
            "imported": false,
            "current_name": "parse_and_format_08009698"
        },
        "FUN_08006186": {
            "renaming": {
                "FUN_08006186": "update_data_struct_08006186",
                "param_1": "data_struct_ptr",
                "param_2": "param_2",
                "param_3": "update_type",
                "PTR_": "data_struct_ptr",
                "DAT_": "constant_data"
            },
            "code": "int update_data_struct_08006186(int *PTR_, int param_2, int update_type){\n  if (*(char *)(PTR_ + 0xf) != '\\x01') {\n    *(undefined *)(PTR_ + 0xf) = 1;\n    *(undefined *)((int)PTR_ + 0x3d) = 2;\n    switch(update_type) {\n      case 0:\n        update_flags(*PTR_);\n        *(uint *)(*PTR_ + 0x18) |= 8;\n        *(uint *)(*PTR_ + 0x18) &= 0xfffffffb;\n        *(uint *)(*PTR_ + 0x18) |= *(uint *)(param_2 + 0x10);\n        break;\n      case 4:\n        update_params(*PTR_);\n        *(uint *)(*PTR_ + 0x18) |= 0x800;\n        *(uint *)(*PTR_ + 0x18) &= 0xfffffbff;\n        *(uint *)(*PTR_ + 0x18) |= *(int *)(param_2 + 0x10) << 8;\n        break;\n      case 8:\n        update_data_struct_08006186(*PTR_);\n        *(uint *)(*PTR_ + 0x1c) |= 8;\n        *(uint *)(*PTR_ + 0x1c) &= 0xfffffffb;\n        *(uint *)(*PTR_ + 0x1c) |= *(uint *)(param_2 + 0x10);\n        break;\n      case 0xc:\n        update_data(*PTR_);\n        *(uint *)(*PTR_ + 0x1c) |= 0x800;\n        *(uint *)(*PTR_ + 0x1c) &= 0xfffffbff;\n        *(uint *)(*PTR_ + 0x1c) |= *(int *)(param_2 + 0x10) << 8;\n    }\n    *(undefined *)((int)PTR_ + 0x3d) = 1;\n    *(undefined *)(PTR_ + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}",
            "called": [
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec",
                "FUN_08005dac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006186",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "update_data_struct_08006186"
        },
        "FUN_08007710": {
            "renaming": {
                "FUN_08007710": "set_bit_and_return_08007710",
                "set_bit_080074e0": "set_bit"
            },
            "code": "void set_bit_and_return_08007710(void)\n{\n  set_bit();\n  return;\n}",
            "called": [
                "FUN_080074e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007710",
            "calling": [
                "FUN_08005df4"
            ],
            "imported": false,
            "current_name": "set_bit_and_return_08007710"
        },
        "FUN_08003474": {
            "renaming": {
                "FUN_08003474": "process_input_08003474",
                "param_1": "input_index",
                "param_2": "input_value",
                "bVar1": "byte_value"
            },
            "code": "void process_input_08003474(int input_index, uint input_value) {\n    byte byte_value;\n    if (*(char *)(input_index + 0x14) != '\\0') {\n        if (input_value != 0xf7) {\n            check_and_set_value_if_greater_than(input_index, input_value, *(undefined4 *)(input_index + 0x18));\n            *(int *)(input_index + 0x18) = *(int *)(input_index + 0x18) + 1;\n            return;\n        }\n        *(undefined *)(input_index + 0x14) = 0;\n        process_input_08003474_080033cc();\n        return;\n    }\n    if ((*(int *)(input_index + 0x10) == 0) || (0x7f < (int)input_value)) {\n        if ((int)input_value < 0xf0) {\n            *(byte *)(input_index + 0xd) = (byte)input_value & 0xf;\n            input_value = input_value & 0xf0;\n        }\n        if (input_value == 0xf0) {\n            *(undefined *)(input_index + 0x14) = 1;\n            *(undefined4 *)(input_index + 0x18) = 0;\n            return;\n        }\n        if (input_value < 0xf1) {\n            if (input_value != 0xc0) {\n                if (input_value < 0xc1) {\n                    if (input_value != 0x90) {\n                        return;\n                    }\n                }\n                else {\n                    if (input_value == 0xd0) goto LAB_0800359c;\n                    if (input_value != 0xe0) {\n                        return;\n                    }\n                }\nLAB_08003586:\n                *(undefined4 *)(input_index + 0x10) = 2;\n                *(char *)(input_index + 0xc) = (char)input_value;\n                return;\n            }\nLAB_0800359c:\n            *(undefined4 *)(input_index + 0x10) = 1;\n            *(char *)(input_index + 0xc) = (char)input_value;\n            return;\n        }\n        if (input_value != 0xf9) {\n            if (0xf9 < input_value) {\n                if (input_value == 0xff) {\n                    clear_data_structure(input_index);\n                    return;\n                }\n                return;\n            }\n            if (1 < input_value - 0xf4) {\n                return;\n            }\n            goto LAB_08003586;\n        }\n        if (*(code **)(input_index + 0x74) != (code *)0x0) {\n            (**(code **)(input_index + 0x74))(*(undefined4 *)(input_index + 0x38));\n        }\n    }\n    else {\n        *(int *)(input_index + 0x10) = *(int *)(input_index + 0x10) + -1;\n        check_and_set_value_if_greater_than(input_index);\n        if ((*(int *)(input_index + 0x10) == 0) && (byte_value = *(byte *)(input_index + 0xc), byte_value != 0)) {\n            if (byte_value == 0xd0) {\n                if (*(code **)(input_index + 0x58) != (code *)0x0) {\n                    (**(code **)(input_index + 0x58))(*(undefined4 *)(input_index + 0x28),*(undefined *)(input_index + 0xd),**(undefined **)(input_index + 4));\n                }\n            }\n            else if (byte_value < 0xd1) {\n                if (byte_value == 0x90) {\n                    if (*(code **)(input_index + 0x50) != (code *)0x0) {\n                        (**(code **)(input_index + 0x50))(*(undefined4 *)(input_index + 0x20),*(undefined *)(input_index + 0xd),(uint)(*(byte **)(input_index + 4))[1] + (uint)**(byte **)(input_index + 4) * 0x80);\n                    }\n                }\n                else if ((byte_value == 0xc0) && (*(code **)(input_index + 0x54) != (code *)0x0)) {\n                    (**(code **)(input_index + 0x54))(*(undefined4 *)(input_index + 0x24),*(undefined *)(input_index + 0xd),**(undefined **)(input_index + 4));\n                }\n            }\n            else if (byte_value == 0xf4) {\n                if (*(code **)(input_index + 0x5c) != (code *)0x0) {\n                    (**(code **)(input_index + 0x5c))(*(undefined4 *)(input_index + 0x2c),(*(undefined **)(input_index + 4))[1],**(undefined **)(input_index + 4));\n                }\n            }\n            else if (byte_value == 0xf5) {\n                if (*(code **)(input_index + 0x60) != (code *)0x0) {\n                    (**(code **)(input_index + 0x60))(*(undefined4 *)(input_index + 0x30),(*(undefined **)(input_index + 4))[1],**(undefined **)(input_index + 4));\n                }\n            }\n            else if ((byte_value == 0xe0) && (*(code **)(input_index + 0x4c) != (code *)0x0)) {\n                (**(code **)(input_index + 0x4c))(*(undefined4 *)(input_index + 0x1c),*(undefined *)(input_index + 0xd),(uint)(*(byte **)(input_index + 4))[1] + (uint)**(byte **)(input_index + 4) * 0x80);\n            }\n            *(undefined *)(input_index + 0xc) = 0;\n            return;\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_080033cc",
                "FUN_08003376",
                "FUN_0800344a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003474",
            "calling": [
                "FUN_08002ed2"
            ],
            "imported": false,
            "current_name": "process_input_08003474"
        },
        "FUN_08006b7c": {
            "renaming": {
                "FUN_08006b7c": "get_data_at_index_08006b7c",
                "param_1": "index",
                "DAT_08006ba4": "data_0",
                "DAT_08006bb4": "data_1",
                "DAT_08006ba8": "data_2",
                "DAT_08006bac": "data_3",
                "DAT_08006bb0": "data_4"
            },
            "code": "int get_data_at_index_08006b7c(int index) {\n  switch(index) {\n    case 0:\n      return DAT_08006ba4;\n    case 1:\n      return DAT_08006bb4;\n    case 2:\n      return DAT_08006ba8;\n    case 3:\n      return DAT_08006bac;\n    case 4:\n      return DAT_08006bb0;\n    default:\n      return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b7c",
            "calling": [
                "FUN_08008a6c",
                "FUN_08008a24"
            ],
            "imported": false,
            "current_name": "get_data_at_index_08006b7c"
        },
        "FUN_08008e7c": {
            "renaming": {
                "FUN_08008e7c": "convert_base_08008e7c",
                "param_1": "param_ptr",
                "param_2": "number",
                "param_3": "base",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "digit_ptr",
                "cVar1": "digit",
                "local_15": "reversed_digits"
            },
            "code": "undefined4 convert_base_08008e7c(int *param_ptr, uint number, uint base) {\n  char digit;\n  undefined4 result;\n  uint quotient;\n  uint remainder;\n  char reversed_digits[9];\n  \n  reversed_digits[1] = 0;\n  if ((int)base < 2) {\n    base = 10;\n  }\n  char *digit_ptr = reversed_digits + 1;\n  do {\n    quotient = number / base;\n    remainder = (number & 0xff) - (quotient * base & 0xff) & 0xff;\n    digit_ptr = digit_ptr + -1;\n    digit = (char)remainder;\n    if (remainder < 10) {\n      digit = digit + '0';\n    }\n    else {\n      digit = digit + '7';\n    }\n    *digit_ptr = digit;\n    number = quotient;\n  } while (quotient != 0);\n  if (digit_ptr == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    uint length = get_string_end_08000178(digit_ptr);\n    result = (**(code **)(*param_ptr + 4))(param_ptr,digit_ptr,length);\n  }\n  return result;\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e7c",
            "calling": [
                "FUN_08008ed6"
            ],
            "imported": false,
            "current_name": "convert_base_08008e7c"
        },
        "FUN_08003aa0": {
            "renaming": {
                "FUN_08003aa0": "set_flag_and_check_08003aa0",
                "param_1": "flag_ptr",
                "iVar1": "result",
                "puVar2": "ptr1",
                "DAT_08003b84": "PTR_DAT_08003b84",
                "DAT_08003b88": "PTR_DAT_08003b88"
            },
            "code": "int set_flag_and_check_08003aa0(int *flag_ptr) {\n  int result;\n  int *ptr1;\n  int *ptr2;\n  \n  if (*(char *)(flag_ptr + 9) != '\\x01') {\n    *(undefined *)(flag_ptr + 9) = 1;\n    result = set_bit_and_check_08003a20();\n    if (result == 0) {\n      flag_ptr[10] = flag_ptr[10] & 0xfffffcfe | 0x100;\n      ptr1 = (int *)*flag_ptr;\n      if ((ptr1 == DAT_08003b84) && ((DAT_08003b84[-0xff] & 0xf0000) != 0)) {\n        flag_ptr[10] = flag_ptr[10] | 0x100000;\n        if ((*(uint *)(DAT_08003b88 + 4) & 0x400) != 0) {\n          flag_ptr[10] = flag_ptr[10] & 0xffffcfff | 0x1000;\n        }\n      }\n      else {\n        flag_ptr[10] = flag_ptr[10] & 0xffefffff;\n        if ((ptr1[1] & 0x400) != 0) {\n          flag_ptr[10] = flag_ptr[10] & 0xffffcfff | 0x1000;\n        }\n      }\n      if ((flag_ptr[10] & 0x1000) == 0) {\n        flag_ptr[11] = 0;\n      }\n      else {\n        flag_ptr[11] = flag_ptr[11] & 0xfffffff9;\n      }\n      *(undefined *)(flag_ptr + 9) = 0;\n      *ptr1 = 0xfffffffd;\n      ptr2 = (int *)*flag_ptr;\n      if (((ptr2[2] & 0xe0000) == 0xe0000) &&\n         ((ptr2 != DAT_08003b84 || ((DAT_08003b84[-0xff] & 0xf0000) == 0)))) {\n        ptr2[2] = ptr2[2] | 0x500000;\n      }\n      else {\n        ptr2[2] = ptr2[2] | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(flag_ptr + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}",
            "called": [
                "FUN_08003a20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003aa0",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "set_flag_and_check_08003aa0"
        },
        "FUN_08003ce8": {
            "renaming": {
                "FUN_08003ce8": "update_permissions_08003ce8",
                "param_1": "permissions",
                "iVar1": "result"
            },
            "code": "int update_permissions_08003ce8(int *permissions)\n{\n  int result;\n  if (permissions == NULL) {\n    result = 1;\n  }\n  else {\n    permissions[10] |= 2;\n    result = check_and_update_08003b8c();\n    if (result == 0) {\n      *(int *)*permissions = -32;\n      *(unsigned int *)(*permissions + 4) &= DAT_08003ddc;\n      *(unsigned int *)(*permissions + 8) &= DAT_08003de0;\n      *(unsigned int *)(*permissions + 12) &= 0xff000000;\n      *(unsigned int *)(*permissions + 16) &= 0xc0000000;\n      *(unsigned int *)(*permissions + 20) &= 0xfffff000;\n      *(unsigned int *)(*permissions + 24) &= 0xfffff000;\n      *(unsigned int *)(*permissions + 28) &= 0xfffff000;\n      *(unsigned int *)(*permissions + 32) &= 0xfffff000;\n      *(unsigned int *)(*permissions + 36) &= 0xfffff000;\n      *(unsigned int *)(*permissions + 40) &= 0xfffff000;\n      *(unsigned int *)(*permissions + 44) &= 0xff000000;\n      *(unsigned int *)(*permissions + 48) &= 0xff000000;\n      *(unsigned int *)(*permissions + 52) &= 0xc0000000;\n      *(unsigned int *)(*permissions + 56) &= 0xc0000000;\n      *(unsigned int *)(*permissions + 60) &= 0xffc00000;\n      *(unsigned int *)(*permissions + 64) &= 0xffc00000;\n      set_permissions_08006d24(permissions);\n      permissions[11] = 0;\n      permissions[10] = 0;\n    }\n    *(char *)(permissions + 9) = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08006d24",
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ce8",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "update_permissions_08003ce8"
        },
        "FUN_08005fe8": {
            "renaming": {
                "FUN_08005fe8": "update_settings_08005fe8",
                "param_1": "settings_ptr",
                "param_2": "new_settings",
                "uVar1": "current_setting",
                "DAT_0800605c": "PTR_SPECIAL_SETTING_1",
                "0x40000000": "PTR_SPECIAL_SETTING_2"
            },
            "code": "void update_settings_08005fe8(uint *settings_ptr, uint *new_settings)\n{\n  uint current_setting = *settings_ptr;\n  bool is_special_setting = (settings_ptr == DAT_0800605c || settings_ptr == PTR_SPECIAL_SETTING_2 || settings_ptr == PTR_SPECIAL_SETTING_3 || settings_ptr == PTR_SPECIAL_SETTING_4);\n  if (is_special_setting)\n  {\n    current_setting = (current_setting & 0xffffff8f) | new_settings[1];\n  }\n  bool is_other_special_setting = (settings_ptr == DAT_0800605c || settings_ptr == PTR_SPECIAL_SETTING_2 || settings_ptr == PTR_SPECIAL_SETTING_3 || settings_ptr == PTR_SPECIAL_SETTING_4);\n  if (is_other_special_setting)\n  {\n    current_setting = (current_setting & 0xfffffcff) | new_settings[3];\n  }\n  *settings_ptr = (current_setting & 0xffffff7f) | new_settings[5];\n  settings_ptr[11] = new_settings[2];\n  settings_ptr[10] = *new_settings;\n  if (settings_ptr == DAT_0800605c)\n  {\n    settings_ptr[12] = new_settings[4];\n  }\n  settings_ptr[5] = 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fe8",
            "calling": [
                "FUN_08006092",
                "FUN_08006060"
            ],
            "imported": false,
            "current_name": "update_settings_08005fe8"
        },
        "FUN_08008804": {
            "renaming": {
                "FUN_08008804": "findOffset_08008804",
                "param_1": "offset",
                "iVar1": "currentOffset",
                "puVar2": "memoryPointer",
                "PTR_DAT_08008834": "globalPointer",
                "PTR_DAT_08008838": "initialPointer",
                "&stack0x00000000": "stackLimit",
                "PTR_DAT_0800883c": "errorPointer"
            },
            "code": "int findOffset_08008804(int offset)\n{\n  int currentOffset;\n  undefined *memoryPointer;\n  \n  if (*(int *)PTR_DAT_08008834 == 0) {\n    *(undefined **)PTR_DAT_08008834 = PTR_DAT_08008838;\n  }\n  currentOffset = *(int *)PTR_DAT_08008834;\n  memoryPointer = (undefined *)(offset + currentOffset);\n  if (memoryPointer <= &stack0x00000000) {\n    *(undefined **)PTR_DAT_08008834 = memoryPointer;\n    return currentOffset;\n  }\n  *(undefined4 *)PTR_DAT_0800883c = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008804",
            "calling": [
                "FUN_08009918"
            ],
            "imported": false,
            "current_name": "findOffset_08008804"
        },
        "FUN_0800738a": {
            "renaming": {
                "FUN_0800738a": "search_for_value_0800738a",
                "param_1": "value_to_find",
                "param_2": "array_of_values",
                "undefined4": "int"
            },
            "code": "int search_for_value_0800738a(int value_to_find, char* array_of_values) {\n    if (value_to_find == -1) {\n        return 0;\n    }\n    while( true ) {\n        if (*array_of_values == -1) {\n            return 0;\n        }\n        if (value_to_find == *array_of_values) {\n            break;\n        }\n        array_of_values += 0xc;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800738a",
            "calling": [
                "FUN_080088e0",
                "FUN_08008990",
                "FUN_08001cd0",
                "FUN_0800021a",
                "FUN_080005f8",
                "FUN_08000a64"
            ],
            "imported": false,
            "current_name": "search_for_value_0800738a"
        },
        "FUN_08004e3c": {
            "renaming": {
                "FUN_08004e3c": "process_input_08004e3c",
                "param_1": "input",
                "puVar1": "ptr1",
                "val": "val",
                "PTR_DAT_08004e3c_0000002a": "val",
                "PTR_DAT_08004e3c_0000003d": "flag",
                "PTR_DAT_08004e3c_0000003e": "char_flag",
                "PTR_DAT_08004e3c_0000000b": "ptr1",
                "PTR_DAT_08004e3c_00000009": "ptr2",
                "PTR_DAT_08004e3c_0000000c": "null_ptr"
            },
            "code": "uint32_t process_input_08004e3c(uint32_t **input)\\n\\\n{\\n\\\n  uint32_t *PTR_DAT_08004e3c_0000000b;\\n\\\n  uint32_t *PTR_DAT_08004e3c_00000009;\\n\\\n  uint16_t PTR_DAT_08004e3c_0000002a = *((uint16_t *)((int)input + 0x2a));\\n\\\n  \\n\\\n  if (PTR_DAT_08004e3c_0000002a == 3) {\\n\\\n    PTR_DAT_08004e3c_0000000b = input[0xb];\\n\\\n    if ((PTR_DAT_08004e3c_0000000b == (uint32_t *)0x4) || (PTR_DAT_08004e3c_0000000b == (uint32_t *)0x8) || (PTR_DAT_08004e3c_0000000b == (uint32_t *)0xffff0000)) {\\n\\\n      **input &= 0xfffffbff;\\n\\\n    }\\n\\\n    PTR_DAT_08004e3c_00000009 = input[9];\\n\\\n    input[9] = (uint32_t *)((int)PTR_DAT_08004e3c_00000009 + 1);\\n\\\n    *(char *)PTR_DAT_08004e3c_00000009 = (char)(*input)[4];\\n\\\n    PTR_DAT_08004e3c_0000002a--;\\n\\\n    *((uint16_t *)((int)input + 0x2a)) = PTR_DAT_08004e3c_0000002a;\\n\\\n  }\\n\\\n  else if (PTR_DAT_08004e3c_0000002a == 2) {\\n\\\n    PTR_DAT_08004e3c_0000000b = input[0xb];\\n\\\n    if ((PTR_DAT_08004e3c_0000000b == (uint32_t *)0x4) || (PTR_DAT_08004e3c_0000000b == (uint32_t *)0x8) || (PTR_DAT_08004e3c_0000000b == (uint32_t *)0xffff0000)) {\\n\\\n      (*input)[1] &= 0xfffffcff;\\n\\\n      **input |= 0x200;\\n\\\n    }\\n\\\n    else {\\n\\\n      if (PTR_DAT_08004e3c_0000000b == (uint32_t *)0x2) {\\n\\\n        **input |= 0x400;\\n\\\n      }\\n\\\n      else {\\n\\\n        **input &= 0xfffffbff;\\n\\\n      }\\n\\\n      (*input)[1] &= 0xfffffcff;\\n\\\n    }\\n\\\n    PTR_DAT_08004e3c_00000009 = input[9];\\n\\\n    input[9] = (uint32_t *)((int)PTR_DAT_08004e3c_00000009 + 1);\\n\\\n    *(char *)PTR_DAT_08004e3c_00000009 = (char)(*input)[4];\\n\\\n    PTR_DAT_08004e3c_0000002a--;\\n\\\n    *((uint16_t *)((int)input + 0x2a)) = PTR_DAT_08004e3c_0000002a;\\n\\\n    PTR_DAT_08004e3c_00000009 = input[9];\\n\\\n    input[9] = (uint32_t *)((int)PTR_DAT_08004e3c_00000009 + 1);\\n\\\n    *(char *)PTR_DAT_08004e3c_00000009 = (char)(*input)[4];\\n\\\n    PTR_DAT_08004e3c_0000002a--;\\n\\\n    *((uint16_t *)((int)input + 0x2a)) = PTR_DAT_08004e3c_0000002a;\\n\\\n    *(uint8_t *)((int)input + 0x3d) = 0x20;\\n\\\n    input[0xc] = (uint32_t *)0x0;\\n\\\n    if (*(char *)((int)input + 0x3e) == \"@\") {\\n\\\n      *(uint8_t *)((int)input + 0x3e) = 0;\\n\\\n      do_nothing_08004d6a();\\n\\\n    }\\n\\\n    else {\\n\\\n      *(uint8_t *)((int)input + 0x3e) = 0;\\n\\\n      do_nothing_08004a20();\\n\\\n    }\\n\\\n  }\\n\\\n  else {\\n\\\n    PTR_DAT_08004e3c_00000009 = input[9];\\n\\\n    input[9] = (uint32_t *)((int)PTR_DAT_08004e3c_00000009 + 1);\\n\\\n    *(char *)PTR_DAT_08004e3c_00000009 = (char)(*input)[4];\\n\\\n    PTR_DAT_08004e3c_0000002a--;\\n\\\n    *((uint16_t *)((int)input + 0x2a)) = PTR_DAT_08004e3c_0000002a;\\n\\\n  }\\n\\\n  return 0;\\n\\\n}",
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e3c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_08004e3c"
        },
        "FUN_080091a0": {
            "renaming": {
                "FUN_080091a0": "insert_node_at_head_080091a0",
                "param_1": "data",
                "PTR_PTR_DAT_080091ac": "head",
                "insert_node_080091d8": "insert_node"
            },
            "code": "void insert_node_at_head_080091a0(int* PTR_PTR_DAT_080091ac, int data){\n  insert_node(PTR_PTR_DAT_080091ac, data);\n  return;\n}",
            "called": [
                "FUN_080091d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091a0",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "insert_node_at_head_080091a0"
        },
        "FUN_08002a1c": {
            "renaming": {
                "FUN_08002a1c": "initialize_parameters_and_return_08002a1c",
                "param_1": "data",
                "param_2": "length",
                "param_3": "ptr1",
                "param_4": "ptr2"
            },
            "code": "void initialize_parameters_and_return_08002a1c(void* data, int length, void* ptr1, void* ptr2) {\n  initialize_parameters(data, length, ptr1, ptr2, ptr2);\n  return;\n}",
            "called": [
                "FUN_08002968"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a1c",
            "calling": [
                "FUN_08002a26"
            ],
            "imported": false,
            "current_name": "initialize_parameters_and_return_08002a1c"
        },
        "FUN_08007718": {
            "renaming": {
                "FUN_08007718": "subtract_four_08007718",
                "param_1": "num"
            },
            "code": "int subtract_four_08007718(int num) {\n\treturn num - 4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007718",
            "calling": [
                "FUN_0800771c",
                "FUN_08007736"
            ],
            "imported": false,
            "current_name": "subtract_four_08007718"
        },
        "FUN_08002948": {
            "renaming": {
                "FUN_08002948": "set_default_values_if_param1_is_1_08002948",
                "param_1": "param1",
                "param_2": "param2",
                "set_default_values_0800291c": "set_default_values",
                "PTR_DAT_08002964": "PTR_DAT_08002964"
            },
            "code": "void set_default_values_if_param1_is_1_08002948(int param1, int param2) {\n    if (param1 != 1) {\n        return;\n    }\n    if (param2 == 0xffff) {\n        set_default_values(PTR_DAT_08002964);\n    }\n    return;\n}",
            "called": [
                "FUN_0800291c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002948",
            "calling": [
                "FUN_08002c1e"
            ],
            "imported": false,
            "current_name": "set_default_values_if_param1_is_1_08002948"
        },
        "FUN_08009e64": {
            "renaming": {
                "FUN_08009e64": "check_memory_access_08009e64",
                "param_1": "starting_address",
                "param_2": "num_bytes_to_access",
                "param_3": "access_type",
                "param_4": "access_result",
                "iVar1": "set_memory_flags_result",
                "uVar2": "result",
                "auStack_4c": "access_flags",
                "local_48": "temp"
            },
            "code": "int check_memory_access_08009e64(uint32_t starting_address, int16_t num_bytes_to_access, uint32_t* access_type, uint32_t* access_result) {\n    int result = 0;\n    uint32_t access_flags = 0;\n    if (num_bytes_to_access < 0 || set_memory_flags(starting_address, (int)num_bytes_to_access, &access_flags) < 0) {\n        *access_result = 0;\n        if ((int)((uint)*(uint16_t *)(access_type + 0xc) << 0x18) < 0) {\n            result = 64;\n            goto LAB_08009ea4;\n        }\n    }\n    else {\n        *access_result = (uint32_t)((access_flags & 0xf000) == 0x2000);\n    }\n    result = 1024;\nLAB_08009ea4:\n    *access_type = result;\n    return 0;\n}",
            "called": [
                "FUN_0800a0ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e64",
            "calling": [
                "FUN_08009eac"
            ],
            "imported": false,
            "current_name": "check_memory_access_08009e64"
        },
        "FUN_08002acc": {
            "renaming": {
                "FUN_08002acc": "allocate_and_copy_data_to_buffer_08002acc",
                "param_1": "bufferSize",
                "param_2": "data",
                "param_3": "dataLength",
                "param_4": "currentDataLength",
                "puVar1": "bufferPtr",
                "iVar2": "allocatedSize",
                "uVar3": "bufferSizeByte"
            },
            "code": "void allocate_and_copy_data_to_buffer_08002acc(uint32_t bufferSize, uint32_t data, uint32_t dataLength, uint32_t currentDataLength) {\n  uint8_t* bufferPtr = bufferDataPtr;\n  if (*bufferLengthPtr < bufferSize) {\n    if (bufferSize < 0x20) {\n      bufferSize = 0x20;\n    }\n    uint32_t allocatedSize = allocate_and_copy_data_to_buffer_08002acc_08009908(*bufferDataPtr, bufferSize, dataLength, (uint8_t)*bufferLengthPtr, currentDataLength);\n    *bufferDataPtr = allocatedSize;\n    if (allocatedSize == 0) {\n      *bufferLengthPtr = 0;\n    }\n    else {\n      *bufferLengthPtr = (uint8_t)bufferSize;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08009908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002acc",
            "calling": [
                "FUN_08002b68"
            ],
            "imported": false,
            "current_name": "allocate_and_copy_data_to_buffer_08002acc"
        },
        "FUN_08002a30": {
            "renaming": {
                "FUN_08002a30": "initialize_flags_08002a30",
                "param_1": "flag_value",
                "param_2": "shift_value"
            },
            "code": "void initialize_flags_08002a30(int flag_value, int shift_value)\n{\n    *PTR_DAT_08002a48 = 1;\n    *PTR_DAT_08002a4c = (char)(shift_value << 1);\n    *PTR_DAT_08002a50 = 0;\n    *PTR_DAT_08002a54 = 0;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a30",
            "calling": [
                "FUN_08002b68",
                "FUN_08001cd0",
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "initialize_flags_08002a30"
        },
        "FUN_0800932c": {
            "renaming": {
                "FUN_0800932c": "process_data_0800932c",
                "param_1": "block",
                "param_2": "data",
                "param_3": "buffer",
                "iVar1": "buffer_diff",
                "pbVar2": "current_byte",
                "pbVar3": "data_pointer",
                "uVar4": "result"
            },
            "code": "uint process_data_0800932c(int block, byte data, byte **buffer) {\n  int buffer_offset = (int)(*buffer)[2] - 1;\n  (*buffer)[2] = (byte *)buffer_offset;\n  if (buffer_offset < -1 || ((int)(*buffer)[6] <= buffer_offset && (data != 10))) {\n    byte *current_byte = *buffer;\n    *buffer = current_byte + 1;\n    *current_byte = data;\n    return (uint)data;\n  }\n  if (block != 0 && *(int *)(block + 0x18) == 0) {\n    initialize_block();\n  }\n  if (buffer == (byte **)PTR_DAT_08009a74) {\n    buffer = *(byte ***)(block + 4);\n  }\n  else if (buffer == (byte **)PTR_DAT_08009a78) {\n    buffer = *(byte ***)(block + 8);\n  }\n  else if (buffer == (byte **)PTR_DAT_08009a7c) {\n    buffer = *(byte ***)(block + 0xc);\n  }\n  (*buffer)[2] = (*buffer)[6];\n  byte *data_pointer = (byte *)(uint)*(ushort *)(*buffer + 3);\n  int data_shift = (int)data_pointer << 0x1c;\n  if ((data_shift < 0 && (*buffer)[4] != (byte *)0x0) || process_data_0800932c_block(block, buffer, data_shift, (*buffer)[4], current_byte) == 0) {\n    uint result = (uint)data;\n    int buffer_diff = (int)*buffer - (int)(*buffer)[4];\n    if (buffer_diff < (int)(*buffer)[5] || process_data_0800932c_block(block, buffer) == 0) {\n      (*buffer)[2] = (byte *)buffer_offset;\n      byte *current_byte = *buffer;\n      *buffer = current_byte + 1;\n      *current_byte = data;\n      if ((*buffer + buffer_diff + 1) != (*buffer)[5]) {\n        if ((uint)*(ushort *)(*buffer + 3) << 0x1f < 0) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      if (process_data_0800932c_block(block, buffer) == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "FUN_08009c7c",
                "FUN_08009a80",
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800932c",
            "calling": [
                "FUN_08009358"
            ],
            "imported": false,
            "current_name": "process_data_0800932c"
        },
        "FUN_0800322c": {
            "renaming": {
                "FUN_0800322c": "process_data_0800322c",
                "param_1": "data_ptr",
                "param_2": "size",
                "param_3": "offset",
                "puVar1": "function_ptr"
            },
            "code": "void process_data_0800322c(int *data_ptr, int size, int offset)\n{\n    int *function_ptr;\n    function_ptr = (int *)*data_ptr;\n    if (function_ptr != (int *)0x0) {\n        (**(void (**)(int *, int)) *function_ptr)(function_ptr, 0xf9);\n        (***(void (***)(int *))((int *)*data_ptr))( (int *)*data_ptr, size);\n        (***(void (***)(int *))((int *)*data_ptr))( (int *)*data_ptr, offset);\n        return;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800322c",
            "calling": [
                "FUN_08002ddc"
            ],
            "imported": false,
            "current_name": "process_data_0800322c"
        },
        "FUN_080099a4": {
            "renaming": {
                "FUN_080099a4": "find_substring_080099a4",
                "param_1": "str",
                "param_2": "substr",
                "pcVar1": "str_ptr",
                "pcVar2": "str_inner_ptr",
                "pcVar3": "substr_ptr",
                "*param_1": "*str",
                "*param_2": "*substr",
                "*pcVar1": "*str_ptr",
                "*pcVar2": "*str_inner_ptr",
                "*pcVar3": "*substr_ptr"
            },
            "code": "char* find_substring_080099a4(char* str, char* substr) {\n    char* str_ptr = str;\n    if (*str_ptr == \"\\0\") {\n        if (*substr != \"\\0\") {\n            str = NULL;\n        }\n        return str;\n    }\n    while (*str_ptr != \"\\0\") {\n        char* substr_ptr = substr;\n        char* str_inner_ptr = str_ptr;\n        while (*substr_ptr == *str_inner_ptr) {\n            substr_ptr++;\n            str_inner_ptr++;\n            if (*substr_ptr == \"\\0\") {\n                return str_ptr;\n            }\n        }\n        str_ptr++;\n    }\n    return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080099a4",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "find_substring_080099a4"
        },
        "FUN_08005a1c": {
            "renaming": {
                "FUN_08005a1c": "get_value_from_pointer_08005a1c",
                "PTR_DAT_08005a24": "pointer_to_value"
            },
            "code": "uint32_t get_value_from_pointer_08005a1c() {\n  uint32_t *PTR_DAT_08005a24 = PTR_DAT_08005a24;\n  return *PTR_DAT_08005a24;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a1c",
            "calling": [
                "FUN_080035b8",
                "FUN_08005a48",
                "FUN_08005a28"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08005a1c"
        },
        "FUN_08001cd0": {
            "renaming": {
                "FUN_08001cd0": "FUNC_08001cd0"
            },
            "code": "\nvoid FUNC_08001cd0(undefined4 param_1,int param_2,byte *param_3,undefined4 param_4)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte bVar3;\n  undefined *puVar4;\n  undefined *puVar5;\n  undefined4 uVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  int iVar10;\n  char cVar11;\n  uint uVar12;\n  uint uVar13;\n  int iVar14;\n  bool bVar15;\n  \n  puVar5 = PTR_DAT_080022e8;\n  puVar4 = PTR_DAT_08002044;\n  switch(param_1) {\n  case 0x69:\n    execute_function_at_address_08002f1e(PTR_DAT_080022e8,0xf0);\n    execute_function_at_address_08002f1e(puVar5,0x6a);\n    for (uVar12 = 0; uVar12 < 0x3c; uVar12 = uVar12 + 1 & 0xff) {\n      uVar13 = uVar12 - 0x2e & 0xff;\n      if (uVar13 < 0xe) {\n        if (uVar12 < 0x3c) {\n          iVar9 = (int)(char)PTR_DAT_080022e4[uVar12];\n        }\n        else {\n          iVar9 = -1;\n        }\n        iVar9 = check_character_in_array_080036ac(iVar9);\n        if (iVar9 == 0) {\n          uVar13 = 0x7f;\n        }\n        else {\n          if (uVar12 < 0x3c) {\n            iVar9 = (int)(char)PTR_DAT_080022e4[uVar12];\n          }\n          else {\n            iVar9 = -1;\n          }\n          iVar9 = check_character_in_array_080036ac(iVar9);\n          if (iVar9 == 1) {\n            uVar13 = 0x7f;\n          }\n        }\n      }\n      else {\n        uVar13 = 0x7f;\n      }\n      execute_function_at_address_08002f1e(PTR_DAT_080022e8,uVar13);\n    }\n    execute_function_at_address_08002f1e(PTR_DAT_080022e8,0xf7);\n    break;\n  case 0x6b:\n    execute_function_at_address_08002f1e(PTR_DAT_08002044,0xf0);\n    execute_function_at_address_08002f1e(puVar4,0x6c);\n    for (uVar12 = 0; uVar12 < 0x3c; uVar12 = uVar12 + 1 & 0xff) {\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = check_character_in_array_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = check_character_in_array_080036ac((int)(char)PTR_DAT_08002060[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_08002044;\n      if (bVar15) {\n        execute_function_at_address_08002f1e(PTR_DAT_08002044,0);\n        execute_function_at_address_08002f1e(puVar4,1);\n        execute_function_at_address_08002f1e(puVar4,0xb);\n        execute_function_at_address_08002f1e(puVar4,1);\n        execute_function_at_address_08002f1e(puVar4,1);\n        execute_function_at_address_08002f1e(puVar4,1);\n      }\n      if ((uVar12 - 0x2e & 0xff) < 0xe) {\n        if (uVar12 < 0x3c) {\n          iVar9 = (int)(char)PTR_DAT_08002060[uVar12];\n        }\n        else {\n          iVar9 = -1;\n        }\n        iVar9 = check_character_in_array_080036ac(iVar9);\n        if (iVar9 == 0) {\n          bVar15 = false;\n        }\n        else {\n          if (uVar12 < 0x3c) {\n            iVar9 = (int)(char)PTR_DAT_08002060[uVar12];\n          }\n          else {\n            iVar9 = -1;\n          }\n          iVar9 = check_character_in_array_080036ac(iVar9);\n          if (iVar9 == 1) {\n            bVar15 = false;\n          }\n          else {\n            bVar15 = true;\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (bVar15) {\n        execute_function_at_address_08002f1e(PTR_DAT_080022e8,2);\n        execute_function_at_address_08002f1e(puVar4,10);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          iVar9 = 0;\n        }\n        else {\n          iVar9 = check_character_in_array_080036ac();\n          if (iVar9 == 0) {\n            iVar9 = 0;\n          }\n          else {\n            iVar9 = check_character_in_array_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              iVar9 = 0;\n            }\n            else {\n              iVar9 = search_for_value_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022ec);\n            }\n          }\n        }\n      }\n      else {\n        iVar9 = 0;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (iVar9 != 0) {\n        execute_function_at_address_08002f1e(PTR_DAT_080022e8,3);\n        execute_function_at_address_08002f1e(puVar4,8);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = check_character_in_array_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = check_character_in_array_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (bVar15) {\n        execute_function_at_address_08002f1e(PTR_DAT_080022e8,4);\n        execute_function_at_address_08002f1e(puVar4,0xe);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          iVar9 = 0;\n        }\n        else {\n          iVar9 = check_character_in_array_080036ac();\n          if (iVar9 == 0) {\n            iVar9 = 0;\n          }\n          else {\n            iVar9 = check_character_in_array_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              iVar9 = 0;\n            }\n            else {\n              iVar9 = search_for_value_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022f0);\n              if (iVar9 == 0) {\n                iVar9 = search_for_value_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022f4);\n              }\n            }\n          }\n        }\n      }\n      else {\n        iVar9 = 0;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (iVar9 != 0) {\n        execute_function_at_address_08002f1e(PTR_DAT_080022e8,6);\n        execute_function_at_address_08002f1e(puVar4,1);\n      }\n      execute_function_at_address_08002f1e(PTR_DAT_080022e8,0x7f);\n    }\n    execute_function_at_address_08002f1e(PTR_DAT_080022e8,0xf7);\n    return;\n  case 0x6d:\n    if (param_2 != 0) {\n      bVar1 = *param_3;\n      execute_function_at_address_08002f1e(PTR_DAT_080022e8,0xf0);\n      execute_function_at_address_08002f1e(puVar5,0x6e);\n      execute_function_at_address_08002f1e(puVar5,bVar1);\n      if (bVar1 < 0x3c) {\n        uVar6 = get_value_at_offset_08002fa0(puVar5,bVar1);\n        execute_function_at_address_08002f1e(puVar5,uVar6);\n        uVar12 = get_value_at_offset_08002fba(puVar5,bVar1);\n        execute_function_at_address_08002f1e(puVar5,uVar12 & 0x7f);\n        uVar12 = get_value_at_offset_08002fba(puVar5,bVar1);\n        if ((uVar12 & 0xff80) != 0) {\n          iVar9 = get_value_at_offset_08002fba(puVar5,bVar1);\n          execute_function_at_address_08002f1e(puVar5,(uint)(iVar9 << 0x12) >> 0x19);\n        }\n        uVar12 = get_value_at_offset_08002fba(PTR_DAT_080022e8,bVar1);\n        puVar4 = PTR_DAT_080022e8;\n        if ((uVar12 & 0xc000) != 0) {\n          iVar9 = get_value_at_offset_08002fba(PTR_DAT_080022e8,bVar1);\n          execute_function_at_address_08002f1e(puVar4,(uint)(iVar9 << 0xb) >> 0x19);\n        }\n      }\n      execute_function_at_address_08002f1e(PTR_DAT_080022e8,0xf7);\n      return;\n    }\n    break;\n  case 0x6f:\n    if (1 < param_2) {\n      uVar12 = (uint)param_3[1];\n      if (2 < param_2) {\n        uVar12 = uVar12 | (uint)param_3[2] << 7;\n      }\n      if (3 < param_2) {\n        uVar12 = uVar12 | (uint)param_3[3] << 0xe;\n      }\n      decode_data_if_valid_index_08000214(*param_3,uVar12);\n      return;\n    }\n    break;\n  case 0x70:\n    if (4 < param_2) {\n      uVar12 = (uint)*param_3;\n      bVar1 = param_3[1];\n      bVar7 = param_3[2];\n      bVar2 = param_3[3];\n      bVar3 = param_3[4];\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_08002060[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = check_character_in_array_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = check_character_in_array_080036ac((int)(char)PTR_DAT_08002060[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      if (bVar15) {\n        if ((byte)PTR_DAT_08002064[uVar12] < 0xc) {\n          iVar9 = get_byte_from_ptr_dat_08002708_times_8_and_shift_left_080026f8(PTR_DAT_08002068 + (uint)(byte)PTR_DAT_08002064[uVar12] * 3);\n        }\n        else {\n          iVar9 = 0;\n        }\n        if (iVar9 != 0) {\n          process_response_and_update_flags_08000588(uVar12);\n        }\n        decode_servo_info_08000500(uVar12,(uint)bVar1 + (uint)bVar7 * 0x80,(uint)bVar2 + (uint)bVar3 * 0x80);\n        decode_and_update_pin_state_080005f8(uVar12,4);\n        return;\n      }\n    }\n    break;\n  case 0x76:\n    bVar1 = param_3[1];\n    bVar7 = bVar1 & 0x18;\n    if ((bVar1 & 0x20) != 0) {\n      send_encoded_string_08002f14(PTR_DAT_08002044,PTR_s_10_bit_addressing_not_supported_08002040,bVar7,bVar1,\n                   param_4);\n      return;\n    }\n    bVar2 = *param_3;\n    bVar15 = (bVar1 & 0x40) == 0;\n    if (bVar7 < 0x19) {\n      switch(bVar7) {\n      case 0:\n        initialize_flags_08002a30(PTR_DAT_08002048,bVar2);\n        for (uVar12 = 2; (int)uVar12 < param_2; uVar12 = uVar12 + 2 & 0xff) {\n          copy_char_to_buffer_wrapper_08001bf8(param_3[uVar12 + 1] * -0x80 + param_3[uVar12]);\n        }\n        validate_input_and_return_08002ac0(PTR_DAT_08002048);\n        return;\n      case 8:\n        if (param_2 == 6) {\n          iVar9 = (uint)param_3[2] + (uint)param_3[3] * 0x80;\n          cVar8 = param_3[4] + param_3[5] * -0x80;\n        }\n        else {\n          cVar8 = param_3[2] + param_3[3] * -0x80;\n          iVar9 = -1;\n        }\n        process_i2c_input_08001c18(bVar2,iVar9,cVar8);\n        return;\n      case 0x10:\n        cVar8 = *PTR_DAT_0800204c;\n        if (cVar8 + 1 < 8) {\n          if (param_2 == 6) {\n            iVar9 = (uint)param_3[2] + (uint)param_3[3] * 0x80;\n            cVar11 = param_3[4] + param_3[5] * -0x80;\n          }\n          else {\n            cVar11 = param_3[2] + param_3[3] * -0x80;\n            iVar9 = -1;\n          }\n          *PTR_DAT_0800204c = cVar8 + '\\x01';\n          puVar4 = PTR_DAT_08002050;\n          iVar10 = (char)(cVar8 + '\\x01') * 0xc;\n          PTR_DAT_08002050[iVar10] = bVar2;\n          *(int *)(puVar4 + iVar10 + 4) = iVar9;\n          puVar4[iVar10 + 8] = cVar11;\n          puVar4[iVar10 + 9] = bVar15;\n          return;\n        }\n        send_encoded_string_08002f14(PTR_DAT_08002044,PTR_s_too_many_queries_08002054,(int)cVar8,bVar15,param_4);\n        return;\n      case 0x18:\n        cVar8 = *PTR_DAT_0800204c;\n        if (cVar8 < 1) {\n          *PTR_DAT_0800204c = 0xff;\n          return;\n        }\n      }\n      for (uVar12 = 0; iVar9 = cVar8 + 1, (int)uVar12 < iVar9; uVar12 = uVar12 + 1 & 0xff) {\n        if (bVar2 == PTR_DAT_08002050[uVar12 * 0xc]) goto LAB_08001e66;\n      }\n      uVar12 = 0;\nLAB_08001e66:\n      for (; puVar4 = PTR_DAT_08002050, (int)uVar12 < iVar9; uVar12 = uVar12 + 1 & 0xff) {\n        if (uVar12 < 8) {\n          iVar10 = (uVar12 + 1) * 0xc;\n          iVar14 = uVar12 * 0xc;\n          PTR_DAT_08002050[iVar14] = PTR_DAT_08002050[iVar10];\n          *(undefined4 *)(puVar4 + iVar14 + 4) = *(undefined4 *)(puVar4 + iVar10 + 4);\n          puVar4[iVar14 + 8] = puVar4[iVar10 + 8];\n          puVar4[iVar14 + 9] = puVar4[iVar10 + 9];\n        }\n      }\n      *PTR_DAT_0800204c = cVar8 + -1;\n      return;\n    }\n    break;\n  case 0x78:\n    iVar9 = (uint)*param_3 + (uint)param_3[1] * 0x80;\n    if ((1 < param_2) && (iVar9 != 0)) {\n      *(int *)PTR_DAT_08002058 = iVar9;\n    }\n    if (*PTR_DAT_0800205c == '\\0') {\n      check_and_execute_commands_08000a64();\n      return;\n    }\n    break;\n  case 0x7a:\n    if ((1 < param_2) &&\n       (iVar9 = (uint)*param_3 + (uint)param_3[1] * 0x80, *(int *)PTR_DAT_0800206c = iVar9,\n       iVar9 == 0)) {\n      *(undefined4 *)PTR_DAT_0800206c = 1;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08002fba",
                "FUN_08002fa0",
                "FUN_080036ac",
                "FUN_08002ac0",
                "FUN_0800738a",
                "FUN_08002f1e",
                "FUN_080026f8",
                "FUN_08000588",
                "FUN_08000214",
                "FUN_08001bf8",
                "FUN_08002f14",
                "FUN_08000500",
                "FUN_08002a30",
                "FUN_08001c18",
                "FUN_08000a64",
                "FUN_080005f8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001cd0",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08001cd0"
        },
        "FUN_08003760": {
            "renaming": {
                "FUN_08003760": "get_value_from_pointer_08003760",
                "PTR_DAT_08003768": "PTR_DATA"
            },
            "code": "int get_value_from_pointer_08003760() {\n    int* value_pointer = (int*)PTR_DAT_08003768;\n    return *value_pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003760",
            "calling": [
                "FUN_08008500",
                "FUN_080058d2",
                "FUN_0800723c",
                "FUN_08007f0e",
                "FUN_080067ac",
                "FUN_08005460",
                "FUN_08007e74",
                "FUN_08003e20",
                "FUN_08003a20",
                "FUN_08005aa4",
                "FUN_0800376c",
                "FUN_08003b8c",
                "FUN_080066e8"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08003760"
        },
        "FUN_08007320": {
            "renaming": {
                "FUN_08007320": "check_param_08007320",
                "param_1": "input_param",
                "uVar1": "result",
                "find_param_08007306": "find_param"
            },
            "code": "int check_param_08007320(int input_param)\n{\n    int result = 0;\n    if (input_param != -1)\n    {\n        result = find_param();\n    }\n    return result;\n}",
            "called": [
                "FUN_08007306"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007320",
            "calling": [
                "FUN_080077b0",
                "FUN_08006d80",
                "FUN_08008500",
                "FUN_080084b0",
                "FUN_080071e4",
                "FUN_08008078",
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "check_param_08007320"
        },
        "FUN_08000be8": {
            "renaming": {
                "FUN_08000be8": "execute_function_08000be8",
                "param_1": "index",
                "param_2": "mask",
                "param_3": "value",
                "param_4": "param_4",
                "puVar1": "stored_value",
                "puVar2": "masked_value"
            },
            "code": "void execute_function_08000be8(int index, uint32_t mask, int value, uint32_t param_4)\n{\n  uint32_t masked_value = (uint32_t)PTR_DAT_08000c0c[index] & mask;\n  uint32_t stored_value = (uint32_t)(byte)PTR_DAT_08000c10[index];\n  if ((value != 0) || (masked_value != stored_value)) {\n    execute_function_08000be8_08002efe(PTR_DAT_08000c14, index, masked_value, stored_value, param_4);\n    PTR_DAT_08000c10[index] = (char)masked_value;\n  }\n  return;\n}",
            "called": [
                "FUN_08002efe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000be8",
            "calling": [
                "FUN_08000ef8"
            ],
            "imported": false,
            "current_name": "execute_function_08000be8"
        },
        "FUN_08003fd8": {
            "renaming": {
                "FUN_08003fd8": "check_input_08003fd8",
                "param_1": "input",
                "puVar1": "data_ptr",
                "DAT_08003ffc": "data_ptr",
                "DAT_08004000": "memory_ptr"
            },
            "code": "int check_input_08003fd8(unsigned int input) {\n    unsigned int *DAT_08003ffc = DAT_08003ffc;\n    if (input - 1U < 0x1000000) {\n        DAT_08003ffc[1] = input - 1U;\n        *(unsigned char *)(DAT_08004000 + 0x23) = 0xf0;\n        DAT_08003ffc[2] = 0;\n        *DAT_08003ffc = 7;\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fd8",
            "calling": [
                "FUN_080035b8",
                "FUN_080036d8"
            ],
            "imported": false,
            "current_name": "check_input_08003fd8"
        },
        "FUN_0800307a": {
            "renaming": {
                "FUN_0800307a": "encode_data_0800307a",
                "param_1": "function_pointer",
                "param_2": "data_length",
                "param_3": "data",
                "param_4": "max_data_length",
                "uVar1": "current_byte",
                "uVar2": "bit_index",
                "uVar3": "encoded_byte",
                "uVar4": "current_byte_index"
            },
            "code": "void encode_data_0800307a(uint32_t *function_pointer, uint32_t data_length, uint8_t *data, uint32_t max_data_length) {\n  uint32_t current_byte = (uint32_t)*data;\n  if (max_data_length == 0) {\n    max_data_length = 0xffffffff;\n  }\n  uint32_t current_byte_index = 0;\n  uint32_t bit_index = 0;\n  uint32_t encoded_byte = 0;\n  while ((current_byte_index < data_length && (encoded_byte < max_data_length))) {\n    (***(code ***)(uint32_t *)*function_pointer)((uint32_t *)*function_pointer,((uint32_t)data[current_byte_index] << (bit_index & 0xff) | current_byte) & 0x7f);\n    current_byte = (int)(uint32_t)data[current_byte_index] >> (7 - bit_index & 0xff) & 0xff;\n    bit_index++;\n    while ((encoded_byte = encoded_byte + 1, 6 < bit_index && (encoded_byte < max_data_length))) {\n      (***(code ***)(uint32_t *)*function_pointer)((uint32_t *)*function_pointer,current_byte & 0x7f);\n      current_byte = current_byte >> 7;\n      bit_index = bit_index - 7;\n    }\n    current_byte_index++;\n  }\n  if ((bit_index != 0) && (encoded_byte < max_data_length)) {\n    (***(code ***)(uint32_t *)*function_pointer)((uint32_t *)*function_pointer,(1 << (bit_index & 0xff)) - 1U & current_byte);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800307a",
            "calling": [
                "FUN_080031ce",
                "FUN_0800325a",
                "FUN_08003158",
                "FUN_08003106",
                "FUN_0800319e"
            ],
            "imported": false,
            "current_name": "encode_data_0800307a"
        },
        "FUN_08004b80": {
            "renaming": {
                "FUN_08004b80": "do_nothing_08004b80"
            },
            "code": "\nvoid do_nothing_08004b80(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b80",
            "calling": [
                "FUN_08004b82",
                "FUN_08004ccc"
            ],
            "imported": false,
            "current_name": "do_nothing_08004b80"
        },
        "FUN_0800319e": {
            "renaming": {
                "FUN_0800319e": "execute_function_with_data_0800319e",
                "param_1": "function_pointer",
                "param_2": "parameter",
                "param_3": "data",
                "puVar1": "ptr",
                "local_a": "encoded_data"
            },
            "code": "void execute_function_with_data_0800319e(void* function_pointer, uint32_t parameter, uint16_t data){\n    void* ptr = (void*)*function_pointer;\n    if (ptr != NULL){\n        (**(void (**)(void*, uint32_t))ptr)(function_pointer, parameter & 0xf | 0x90);\n        encode_data(&function_pointer, 2, &data);\n    }\n    return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800319e",
            "calling": [
                "FUN_08002efe"
            ],
            "imported": false,
            "current_name": "execute_function_with_data_0800319e"
        },
        "FUN_08008d00": {
            "renaming": {
                "<original_function_name>": "FUN_08008d00",
                "param_1": "index",
                "param_2": "value",
                "uVar1": "value_to_set",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "FUN_08008d00": "set_value_at_index_08008d00"
            },
            "code": "void set_value_at_index_08008d00(int index, uint value){\n                      undefined value_to_set;\n                      code *jump_table;\n                      if (value < 0x3c) {\n                        value_to_set = PTR_DAT_08008d14[value];\n                      }\n                      else {\n                        value_to_set = 0xff;\n                      }\n                      *(undefined *)(index + 0x12d) = value_to_set;\n                      (*jump_table)();\n                      return;\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d00",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "set_value_at_index_08008d00"
        },
        "FUN_08009190": {
            "renaming": {
                "FUN_08009190": "allocate_memory_block_08009190",
                "param_1": "block_size",
                "PTR_PTR_DAT_0800919c": "memory_pointer",
                "allocate_memory_block_08009270": "allocate_memory_block"
            },
            "code": "void allocate_memory_block_08009190(void* PTR_PTR_DAT_0800919c, int block_size) {\n  allocate_memory_block_08009190_08009270(*(void**)PTR_PTR_DAT_0800919c, block_size);\n  return;\n}",
            "called": [
                "FUN_08009270"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009190",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08009190"
        },
        "FUN_08004b82": {
            "renaming": {
                "FUN_08004b82": "parse_input_08004b82",
                "param_1": "input",
                "cVar1": "current_char",
                "puVar2": "ptr_to_b"
            },
            "code": "uint32_t parse_input_08004b82(uint32_t **input)\n{\n    char current_char = *(char *)((int)input + 0x3d);\n    uint32_t *ptr_to_b = input[0xb];\n    if ((*(short *)(input + 10) == 0) && (current_char == '!')) {\n        if ((ptr_to_b == (uint32_t *)0x4) || ((ptr_to_b == (uint32_t *)0x8 || (ptr_to_b == (uint32_t *)0xffff0000)))) {\n            (*input)[1] = (*input)[1] & 0xfffff8ff;\n            **input = **input | 0x200;\n            input[0xc] = (uint32_t *)0x0;\n            *(undefined *)((int)input + 0x3d) = 0x20;\n            if (*(char *)((int)input + 0x3e) == '@') {\n                *(undefined *)((int)input + 0x3e) = 0;\n                do_nothing_08004b80();\n            }\n            else {\n                *(undefined *)((int)input + 0x3e) = 0;\n                do_nothing_08004a1e();\n            }\n        }\n        else {\n            (*input)[1] = (*input)[1] & 0xfffff8ff;\n            input[0xc] = (uint32_t *)0x11;\n            *(undefined *)((int)input + 0x3e) = 0;\n            *(undefined *)((int)input + 0x3d) = 0x20;\n            do_nothing_08004a1e();\n        }\n    }\n    else if ((current_char == '!') || ((*(char *)((int)input + 0x3e) == '@' && (current_char == '\"')))) {\n        if (*(short *)((int)input + 0x2a) == 0) {\n            (*input)[1] = (*input)[1] & 0xfffffbff;\n        }\n        else if (*(char *)((int)input + 0x3e) == '@') {\n            if (input[0x14] == (uint32_t *)0x0) {\n                if (input[0x13] == (uint32_t *)0x1) {\n                    (*input)[4] = (uint32_t)input[0x12] & 0xff;\n                    input[0x14] = (uint32_t *)((int)input[0x14] + 2);\n                }\n                else {\n                    (*input)[4] = (uint32_t)((int)input[0x12] << 0x10) >> 0x18;\n                    input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n                }\n            }\n            else if (input[0x14] == (uint32_t *)0x1) {\n                (*input)[4] = (uint32_t)input[0x12] & 0xff;\n                input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n            }\n            else if (input[0x14] == (uint32_t *)0x2) {\n                if (*(char *)((int)input + 0x3d) == '\"') {\n                    **input = **input | 0x100;\n                }\n                else if (*(char *)((int)input + 0x3d) == '!') {\n                    uint32_t *ptr_to_9 = input[9];\n                    input[9] = (uint32_t *)((int)ptr_to_9 + 1);\n                    (*input)[4] = (uint32_t)*(byte *)ptr_to_9;\n                    *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n                }\n            }\n        }\n        else {\n            uint32_t *ptr_to_9 = input[9];\n            input[9] = (uint32_t *)((int)ptr_to_9 + 1);\n            (*input)[4] = (uint32_t)*(byte *)ptr_to_9;\n            *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004b80",
                "FUN_08004a1e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b82",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "parse_input_08004b82"
        },
        "FUN_0800997e": {
            "renaming": {
                "FUN_0800997e": "find_last_occurrence_of_character_in_string_0800997e",
                "param_1": "string_start_index",
                "param_2": "string_length",
                "param_3": "character",
                "param_4": "param_4",
                "iVar1": "current_index",
                "iVar2": "last_occurrence_index"
            },
            "code": "int find_last_occurrence_of_character_in_string_0800997e(int string_start_index, int string_length, char character, undefined4 param_4)\n{\n  int last_occurrence_index = -1;\n  if (string_length != 0) {\n    int current_index = 0;\n    while (current_index = find_character_in_string_08009938(string_start_index, string_length, character, string_start_index, param_4), current_index != 0) {\n      string_start_index = current_index + 1;\n      last_occurrence_index = current_index;\n    }\n    return last_occurrence_index;\n  }\n  last_occurrence_index = find_character_in_string_08009938();\n  return last_occurrence_index;\n}",
            "called": [
                "FUN_08009938"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800997e",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "find_last_occurrence_of_character_in_string_0800997e"
        },
        "FUN_08002dbc": {
            "renaming": {
                "FUN_08002dbc": "initialize_if_first_run_08002dbc",
                "param_1": "is_first_run",
                "param_2": "value",
                "initialize_and_set_values_08002ce0": "initialize_and_set_values",
                "PTR_DAT_08002dd8": "PTR_DAT_08002dd8"
            },
            "code": "void initialize_if_first_run_08002dbc(int is_first_run, int value) {\n  if (is_first_run != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    initialize_and_set_values(PTR_DAT_08002dd8);\n  }\n  return;\n}",
            "called": [
                "FUN_08002ce0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002dbc",
            "calling": [],
            "imported": false,
            "current_name": "initialize_if_first_run_08002dbc"
        },
        "FUN_08002e44": {
            "renaming": {
                "FUN_08002e44": "extract_file_name_08002e44",
                "param_1": "output_buffer",
                "param_2": "input_buffer",
                "iVar3": "substring_index",
                "iVar4": "last_slash_index",
                "puVar5": "output_buffer_ptr",
                "bVar1": "file_name_length",
                "cVar2": "file_name_start"
            },
            "code": "void extract_file_name_08002e44(int output_buffer, int input_buffer, undefined param_3, undefined param_4)\n{\n  byte file_name_length;\n  char* file_name_start;\n  int substring_index;\n  int last_slash_index;\n  undefined* output_buffer_ptr;\n  \n  substring_index = find_substring(input_buffer, \"cpp\");\n  last_slash_index = find_last_occurrence_of_character_in_string(input_buffer, '/');\n  if (last_slash_index == 0) {\n    last_slash_index = find_last_occurrence_of_character_in_string(input_buffer, '\\');\n  }\n  if (last_slash_index != 0) {\n    file_name_start = input_buffer + last_slash_index + 1;\n  }\n  if (substring_index == 0) {\n    file_name_length = get_string_end(file_name_start) + 2;\n  }\n  else {\n    file_name_length = (char)substring_index - (char)file_name_start + 2;\n  }\n  insert_node_at_head(output_buffer + 200);\n  output_buffer_ptr = allocate_memory_block(file_name_length + 1);\n  *(undefined**)(output_buffer + 200) = output_buffer_ptr;\n  output_buffer_ptr[file_name_length] = 0;\n  *output_buffer_ptr = param_3;\n  output_buffer_ptr[1] = param_4;\n  copy_string(output_buffer_ptr + 2, file_name_start, file_name_length - 2);\n  return;\n}",
            "called": [
                "FUN_080099a4",
                "FUN_08009190",
                "FUN_08009954",
                "FUN_080091a0",
                "FUN_08000178",
                "FUN_0800997e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e44",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "extract_file_name_08002e44"
        },
        "FUN_0800242c": {
            "renaming": {
                "FUN_0800242c": "initialize_device_settings_0800242c",
                "param_1": "device_id",
                "param_2": "timeout",
                "param_3": "rate",
                "param_4": "buffer_size",
                "PTR_LAB_08002444_1_08002440": "buffer",
                "initialize_device_settings_08007648": "initialize_device_settings_08007648"
            },
            "code": "void initialize_device_settings_0800242c(unsigned int device_id, unsigned int timeout, unsigned int rate, unsigned int *PTR_LAB_08002444_1_08002440, unsigned int PTR_LAB_08002444_1_08002440_size) {\n    initialize_device_settings_0800242c_08007648(device_id, timeout, rate, PTR_LAB_08002444_1_08002440, PTR_LAB_08002444_1_08002440_size);\n    return;\n}",
            "called": [
                "FUN_08007648"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800242c",
            "calling": [
                "FUN_080025ac"
            ],
            "imported": false,
            "current_name": "initialize_device_settings_0800242c"
        },
        "FUN_080058d2": {
            "renaming": {
                "FUN_080058d2": "process_input_080058d2",
                "param_1": "input_flags",
                "param_2": "input_length",
                "puVar1": "config2",
                "iVar2": "initial_time",
                "iVar3": "current_time",
                "uVar4": "input_type",
                "get_value_from_pointer_08003760": "get_current_time",
                "calculate_value_08005840": "calculate_value",
                "validate_input_080036d8": "validate_input"
            },
            "code": "int process_input_080058d2(uint *input_flags, uint input_length) {\n  uint *config = DAT_08005a10;\n  uint *config2 = DAT_08005a0c;\n  if ((*input_flags & 2) != 0) {\n    config[1] = (config[1] & 0xffffff0f) | input_flags[2];\n  }\n  if ((*input_flags & 1) != 0) {\n    uint input_type = input_flags[1];\n    if (input_type == 1) {\n      if ((*config & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((input_type != 2) && ((*config & 2) == 0)) {\n      return 1;\n    }\n    config[1] = input_type | (config[1] & 0xfffffffc);\n    int initial_time = get_initial_time();\n    if (input_type == 1) {\n      while ((config[1] & 0xc) != 4) {\n        int current_time = get_current_time();\n        if (5000 < (uint)(current_time - initial_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (input_type == 2) {\n      while ((config[1] & 0xc) != 8) {\n        int current_time = get_current_time();\n        if (5000 < (uint)(current_time - initial_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((config[1] & 0xc) != 0) {\n        int current_time = get_current_time();\n        if (5000 < (uint)(current_time - initial_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((input_length < (*config2 & 7)) && (*config2 = *config2 & 0xfffffff8 | input_length, input_length != (*config2 & 7))) {\n    return 1;\n  }\n  if ((*input_flags & 4) != 0) {\n    config[1] = (config[1] & 0xfffff8ff) | input_flags[3];\n  }\n  if ((*input_flags & 8) != 0) {\n    config[1] = (config[1] & 0xffffc7ff) | (input_flags[4] << 3);\n  }\n  uint calculated_value = calculate_value();\n  *(uint *)PTR_DAT_08005a18 = calculated_value >> PTR_DAT_08005a14[(config[1] << 0x18) >> 0x1c];\n  validate_input_080036d8(0xf);\n  return 0;\n}",
            "called": [
                "FUN_08005840",
                "FUN_08003760",
                "FUN_080036d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058d2",
            "calling": [
                "FUN_080058ac"
            ],
            "imported": false,
            "current_name": "process_input_080058d2"
        },
        "FUN_08002c00": {
            "renaming": {
                "FUN_08002c00": "process_input_and_check_08002c00"
            },
            "code": "void process_input_and_check_08002c00(void)\n{\n  process_input_and_check_08002c00_08002b68();\n  return;\n}",
            "called": [
                "FUN_08002b68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c00",
            "calling": [
                "FUN_08002c14"
            ],
            "imported": false,
            "current_name": "process_input_and_check_08002c00"
        },
        "FUN_08003f30": {
            "renaming": {
                "FUN_08003f30": "decode_and_store_bits_08003f30",
                "param_1": "bit_offset",
                "param_2": "bit_mask",
                "param_3": "data",
                "uVar1": "num_bits_to_shift",
                "uVar2": "num_bits_to_store",
                "bits_to_store": "bits_to_store"
            },
            "code": "void decode_and_store_bits_08003f30(uint bit_offset, uint bit_mask, uint data) {\n  uint num_bits_to_shift = (uint)(*(int *)(DAT_08003f8c + 0xc) << 0x15) >> 0x1d;\n  uint num_bits_to_store = 7 - num_bits_to_shift;\n  if (num_bits_to_store > 3) {\n    num_bits_to_store = 4;\n  }\n  if (num_bits_to_shift + 4 < 7) {\n    num_bits_to_shift = 0;\n  }\n  else {\n    num_bits_to_shift = num_bits_to_shift - 3;\n  }\n  uint bits_to_store = (bit_mask & (1 << (num_bits_to_store & 0xff)) - 1U) << (num_bits_to_shift & 0xff) | (1 << (num_bits_to_shift & 0xff)) - 1U & data;\n  if ((int)bit_offset < 0) {\n    *(char *)(DAT_08003f90 + (bit_offset & 0xf)) = (char)(bits_to_store << 4);\n  }\n  else {\n    *(char *)(bit_offset + 0xe000e400) = (char)(bits_to_store << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f30",
            "calling": [
                "FUN_080077b0",
                "FUN_080035b8",
                "FUN_08008694",
                "FUN_080036d8",
                "FUN_0800863c",
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "decode_and_store_bits_08003f30"
        },
        "FUN_08007f78": {
            "renaming": {
                "FUN_08007f78": "subtract_four_08007f78",
                "param_1": "input_num",
                "return": "result"
            },
            "code": "int subtract_four_08007f78(int input_num) {\n    int result = input_num - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f78",
            "calling": [
                "FUN_08007fa0",
                "FUN_08007ff0",
                "FUN_08008020"
            ],
            "imported": false,
            "current_name": "subtract_four_08007f78"
        },
        "FUN_08006b28": {
            "renaming": {
                "FUN_08006b28": "get_bit_08006b28",
                "param_1": "num",
                "param_2": "bit_index",
                "*": "ptr",
                "DAT_0804a000": "masked_num",
                "PTR_0804a008": "bit_value"
            },
            "code": "uint get_bit_08006b28(uint num, int bit_index){\n                      uint* ptr = (uint*)(bit_index + ((num << 0x18) >> 0x1c) * 4);\n                      uint DAT_0804a000 = num & 0xf;\n                      uint PTR_0804a008 = (*ptr >> DAT_0804a000) & 1;\n                      return PTR_0804a008;\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b28",
            "calling": [
                "FUN_080088e0",
                "FUN_08008990",
                "FUN_08008a6c",
                "FUN_08008a24"
            ],
            "imported": false,
            "current_name": "get_bit_08006b28"
        },
        "FUN_080085dc": {
            "renaming": {
                "FUN_080085dc": "is_valid_input_080085dc",
                "param_1": "input_index",
                "uVar1": "combined_bytes",
                "PTR_DAT_080085fc": "data_pointer",
                "byte": "byte_offset",
                "combine_bytes_at_offsets_08006b1c": "combine_bytes_at_offsets"
            },
            "code": "bool is_valid_input_080085dc(int input_index) {\n  uint16_t byte_offset = *(uint8_t *)(PTR_DAT_080085fc + (uint)*(byte *)(input_index + 0x44) * 4);\n  uint16_t combined_bytes = combine_bytes_at_offsets_08006b1c(byte_offset);\n  return (combined_bytes & 0x21) == 0x21;\n}",
            "called": [
                "FUN_08006b1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080085dc",
            "calling": [],
            "imported": false,
            "current_name": "is_valid_input_080085dc"
        },
        "FUN_08006b1c": {
            "renaming": {
                "FUN_08006b1c": "combine_bytes_at_offsets_08006b1c",
                "param_1": "struct_address",
                "*(byte *)(param_1 + 0x3a)": "byte_at_offset_3a",
                "*(byte *)(param_1 + 0x39)": "byte_at_offset_39"
            },
            "code": "byte combine_bytes_at_offsets_08006b1c(int struct_address)\n{\n    byte byte_at_offset_3a = *(byte *)(struct_address + 0x3a);\n    byte byte_at_offset_39 = *(byte *)(struct_address + 0x39);\n    return byte_at_offset_3a | byte_at_offset_39;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b1c",
            "calling": [
                "FUN_080085dc",
                "FUN_080085b8"
            ],
            "imported": false,
            "current_name": "combine_bytes_at_offsets_08006b1c"
        },
        "FUN_08008ed6": {
            "renaming": {
                "FUN_08008ed6": "convert_base_or_call_function_08008ed6",
                "param_1": "function_pointer",
                "param_2": "parameter_1",
                "param_3": "parameter_2",
                "param_4": "parameter_3"
            },
            "code": "void convert_base_or_call_function_08008ed6(undefined4 *function_pointer, uint parameter_1, uint parameter_2, undefined4 parameter_3)\n{\n  if (parameter_2 != 0) {\n    convert_base_08008e7c(function_pointer, parameter_1, parameter_2 & 0xff);\n    return;\n  }\n  (**(code **)*function_pointer)(function_pointer, parameter_1 & 0xff, 0, *(code **)*function_pointer, parameter_3);\n  return;\n}\n",
            "called": [
                "FUN_08008e7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ed6",
            "calling": [
                "FUN_08008eec"
            ],
            "imported": false,
            "current_name": "convert_base_or_call_function_08008ed6"
        },
        "FUN_0800a130": {
            "renaming": {
                "FUN_0800a130": "process_data_0800a130",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "puVar1": "data_ptr",
                "iVar2": "result"
            },
            "code": "void process_data_0800a130(int *output, undefined4 input1, undefined4 input2, undefined4 input3) {\n    undefined *data_ptr;\n    int result;\n    data_ptr = PTR_DAT_0800a150;\n    *(undefined4 *)PTR_DAT_0800a150 = 0;\n    result = return_zero_08008854(input1, input2, input3, input3, input3);\n    if ((result == -1) && (*(int *)data_ptr != 0)) {\n        *output = *(int *)data_ptr;\n    }\n    return;\n}",
            "called": [
                "FUN_08008854"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a130",
            "calling": [
                "FUN_0800a07a",
                "FUN_0800a042"
            ],
            "imported": false,
            "current_name": "process_data_0800a130"
        },
        "FUN_08008f3c": {
            "renaming": {
                "FUN_08008f3c": "find_highest_bit_position_08008f3c",
                "param_1": "number",
                "cVar1": "highest_bit_position"
            },
            "code": "char find_highest_bit_position_08008f3c(uint number) {\n  char highest_bit_position = 0;\n  while (number != 1) {\n    number = number >> 1;\n    highest_bit_position++;\n  }\n  return highest_bit_position;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f3c",
            "calling": [
                "FUN_08009094"
            ],
            "imported": false,
            "current_name": "find_highest_bit_position_08008f3c"
        },
        "FUN_08002ef2": {
            "renaming": {
                "FUN_08002ef2": "encode_data_08002ef2",
                "param_1": "data_start",
                "param_2": "data_length",
                "param_3": "key",
                "param_4": "output_buffer",
                "encode_or_decode_data_08003158": "encode_or_decode_data"
            },
            "code": "void encode_data_08002ef2(int data_start, int data_length, unsigned short key, int output_buffer) {\n  encode_or_decode_data(data_start + 0x40, data_length, key, output_buffer, output_buffer);\n  return;\n}",
            "called": [
                "FUN_08003158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ef2",
            "calling": [
                "FUN_080022f8",
                "FUN_08000488"
            ],
            "imported": false,
            "current_name": "encode_data_08002ef2"
        },
        "FUN_08007332": {
            "renaming": {
                "FUN_08007332": "find_value_by_key_08007332",
                "param_1": "key",
                "param_2": "data",
                "*(int *)(param_2 + 4)": "*(int *)(data + 4)",
                "return -1;": "return -1;",
                "param_2 = param_2 + 0xc;": "data = data + 0xc;",
                "(int)*param_2": "(int)*data"
            },
            "code": "int find_value_by_key_08007332(int key, char *data)\n{\n  while( true ) {\n    int current_key = *(int *)(data + 4);\n    if (current_key == 0) {\n      return -1;\n    }\n    if (current_key == key) break;\n    data = data + 0xc;\n  }\n  return (int)*data;\n}",
            "called": [
                "FUN_08007332"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007332",
            "calling": [
                "FUN_0800734a",
                "FUN_08007332"
            ],
            "imported": false,
            "current_name": "find_value_by_key_08007332"
        },
        "FUN_08006128": {
            "renaming": {
                "FUN_08006128": "update_data_structure_08006128",
                "param_1": "data",
                "param_2": "param_2",
                "param_3": "update_type",
                "*(char *)(param_1 + 0xf)": "*(char *)(data + 0xf)",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)((int)data + 0x3d)",
                "update_flags_08005cec": "update_flags",
                "update_params_080060c4": "update_parameters",
                "update_data_struct_08005d48": "update_data_structure",
                "update_data_08005dac": "update_data"
            },
            "code": "int update_data_structure_08006128(int *data, int param_2, int update_type) {\n    if (*(char *)(data + 0xf) != '\\x01') {\n        *(char *)(data + 0xf) = 1;\n        *(char *)((int)data + 0x3d) = 2;\n        switch (update_type) {\n            case 0:\n                update_flags(*data);\n                break;\n            case 4:\n                update_parameters(*data);\n                break;\n            case 8:\n                update_data_structure_08006128(*data);\n                break;\n            case 0xc:\n                update_data(*data);\n        }\n        *(char *)((int)data + 0x3d) = 1;\n        *(char *)(data + 0xf) = 0;\n        return 0;\n    }\n    return 2;\n}",
            "called": [
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec",
                "FUN_08005dac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006128",
            "calling": [
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "update_data_structure_08006128"
        },
        "FUN_08003658": {
            "renaming": {
                "FUN_08003658": "copy_and_clear_memory_08003658",
                "iVar1": "index",
                "puVar2": "destination",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "PTR_DAT_08003698": "destination_start",
                "PTR_DAT_08003690": "destination",
                "PTR_DAT_08003694": "destination_end",
                "DAT_0800368c": "source",
                "PTR_DAT_0800369c": "clearing_end"
            },
            "code": "void copy_and_clear_memory_08003658(void)\n{\n  int index = 0;\n  undefined4 *PTR_DAT_08003690 = (undefined4 *)PTR_DAT_08003690;\n  undefined4 *DAT_0800368c = (undefined4 *)DAT_0800368c;\n  while (PTR_DAT_08003690 < (undefined4 *)PTR_DAT_08003694)\n  {\n    *PTR_DAT_08003690 = *DAT_0800368c;\n    PTR_DAT_08003690++;\n    DAT_0800368c++;\n  }\n  while (PTR_DAT_08003690 < (undefined4 *)PTR_DAT_0800369c)\n  {\n    *PTR_DAT_08003690 = 0;\n    PTR_DAT_08003690++;\n  }\n  set_bit_and_clear_mask_080073ec();\n  execute_functions_08009148();\n  code *jump_table = (code *)0x800368a;\n  firmware_update_process_08008f1c();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_08008f1c",
                "FUN_08009148",
                "FUN_080073ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003658",
            "calling": [],
            "imported": false,
            "current_name": "copy_and_clear_memory_08003658"
        },
        "FUN_08009a80": {
            "renaming": {
                "FUN_08009a80": "process_data_08009a80",
                "*param_1": "*result",
                "*param_2": "*data",
                "uVar1": "value",
                "uVar2": "flags",
                "iVar3": "ptr",
                "PTR_PTR_DAT_08009b4c": "PTR_PTR_DATA",
                "PTR_DAT_08009b50": "PTR_DATA_1",
                "PTR_DAT_08009b54": "PTR_DATA_2",
                "PTR_DAT_08009b58": "PTR_DATA_3"
            },
            "code": "uint process_data_08009a80(undefined4 *result, undefined4 *data)\n{\n  uint value;\n  ushort flags;\n  int ptr;\n  ptr = *(int *)PTR_PTR_DAT_08009b4c;\n  if ((ptr != 0) && (*(int *)(ptr + 0x18) == 0)) {\n    initialize_block_08009d50(ptr);\n  }\n  if (data == (undefined4 *)PTR_DAT_08009b50) {\n    data = *(undefined4 **)(ptr + 4);\n  }\n  else if (data == (undefined4 *)PTR_DAT_08009b54) {\n    data = *(undefined4 **)(ptr + 8);\n  }\n  else if (data == (undefined4 *)PTR_DAT_08009b58) {\n    data = *(undefined4 **)(ptr + 0xc);\n  }\n  flags = *(ushort *)(data + 3);\n  value = (uint)flags;\n  if (-1 < (int)(value << 0x1c)) {\n    if (-1 < (int)(value << 0x1b)) {\n      *result = 9;\n      goto LAB_08009ab0;\n    }\n    if ((undefined4 *)data[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)data[0xd] != data + 0x11) {\n        insert_node(result);\n      }\n      data[0xd] = 0;\n    }\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xffdb;\n    data[1] = 0;\n    *data = data[4];\n  }\n  *(ushort *)(data + 3) = *(ushort *)(data + 3) | 8;\n  if ((data[4] == 0) && ((*(ushort *)(data + 3) & 0x280) != 0x200)) {\n    allocate_memory(result, data);\n  }\n  flags = *(ushort *)(data + 3);\n  value = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      value = data[5];\n    }\n    data[2] = value;\n  }\n  else {\n    data[2] = 0;\n    data[6] = -data[5];\n  }\n  if (data[4] == 0) {\n    flags = *(ushort *)(data + 3);\n    value = (int)(short)flags & 0x80;\n    if (value != 0) {\n      *(ushort *)(data + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    value = 0;\n  }\n  return value;\n}",
            "called": [
                "FUN_080091d8",
                "FUN_08009eac",
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009a80",
            "calling": [
                "FUN_0800937c",
                "FUN_0800932c"
            ],
            "imported": false,
            "current_name": "process_data_08009a80",
            "code_backup": "\nuint FUN_08009a80(undefined4 *param_1,undefined4 *param_2)\n\n{\n  uint uVar1;\n  ushort uVar2;\n  int iVar3;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08009b4c;\n  if ((iVar3 != 0) && (*(int *)(iVar3 + 0x18) == 0)) {\n    FUN_08009d50(iVar3);\n  }\n  if (param_2 == (undefined4 *)PTR_DAT_08009b50) {\n    param_2 = *(undefined4 **)(iVar3 + 4);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_08009b54) {\n    param_2 = *(undefined4 **)(iVar3 + 8);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_08009b58) {\n    param_2 = *(undefined4 **)(iVar3 + 0xc);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = (uint)uVar2;\n  if (-1 < (int)(uVar1 << 0x1c)) {\n    if (-1 < (int)(uVar1 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(uVar1 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          insert_node_080091d8(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_memory_08009eac(param_1,param_2);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = uVar2 & 1;\n  if ((uVar2 & 1) == 0) {\n    if (-1 < (int)((uint)uVar2 << 0x1e)) {\n      uVar1 = param_2[5];\n    }\n    param_2[2] = uVar1;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar2 = *(ushort *)(param_2 + 3);\n    uVar1 = (int)(short)uVar2 & 0x80;\n    if (uVar1 != 0) {\nLAB_08009ab0:\n      *(ushort *)(param_2 + 3) = uVar2 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar1 = 0;\n  }\n  return uVar1;\n}\n\n"
        },
        "FUN_08004a74": {
            "renaming": {
                "FUN_08004a74": "do_nothing_08004a74"
            },
            "code": "\nvoid do_nothing_08004a74(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a74",
            "calling": [
                "FUN_08004a76",
                "FUN_08005084"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a74"
        },
        "FUN_080062f4": {
            "renaming": {
                "FUN_080062f4": "set_bits_and_clear_flags_080062f4",
                "param_1": "bits",
                "param_2": "flag",
                "puVar1": "bit_array"
            },
            "code": "uint32_t set_bits_and_clear_flags_080062f4(uint32_t **bits, uint32_t flag) {\n  uint32_t *bit_array = *bits;\n  switch(flag) {\n    case 0:\n      bit_array[3] &= 0xfffffffd;\n      break;\n    case 4:\n      bit_array[3] &= 0xfffffffb;\n      break;\n    case 8:\n      bit_array[3] &= 0xfffffff7;\n      break;\n    case 0xc:\n      bit_array[3] &= 0xffffffef;\n  }\n  set_bit_in_register_08006262(bit_array, flag, 0);\n  if (((bit_array == PTR_DAT_0800638c) && ((bit_array[8] & 0x1111) == 0)) && ((bit_array[8] & 0x444) == 0)) {\n    bit_array[0x11] &= 0xffff7fff;\n  }\n  if (((bit_array[8] & 0x1111) == 0) && ((bit_array[8] & 0x444) == 0)) {\n    *bit_array &= 0xfffffffe;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080062f4",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": false,
            "current_name": "set_bits_and_clear_flags_080062f4"
        },
        "FUN_080073e8": {
            "renaming": {
                "FUN_080073e8": "wait_forever_080073e8"
            },
            "code": "void wait_forever_080073e8(void) {\n while(true) {\n // Do nothing block with infinite loop\n }\n}",
            "called": [
                "FUN_080073e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073e8",
            "calling": [
                "FUN_080035b8",
                "FUN_080073e8"
            ],
            "imported": false,
            "current_name": "wait_forever_080073e8"
        },
        "FUN_08004a76": {
            "renaming": {
                "FUN_08004a76": "add_character_to_buffer_08004a76",
                "param_1": "buffer_ptr",
                "puVar2": "buffer_data_ptr",
                "cVar1": "current_char"
            },
            "code": "int add_character_to_buffer_08004a76(int *buffer_ptr)\n{\n  char current_char;\n  undefined *buffer_data_ptr;\n  current_char = *(char *)((int)buffer_ptr + 0x3d);\n  if (*(short *)((int)buffer_ptr + 0x2a) != 0) {\n    buffer_data_ptr = (undefined *)buffer_ptr[9];\n    buffer_ptr[9] = (int)(buffer_data_ptr + 1);\n    *buffer_data_ptr = (char)*(undefined4 *)(*buffer_ptr + 0x10);\n    *(short *)((int)buffer_ptr + 0x2a) = *(short *)((int)buffer_ptr + 0x2a) + -1;\n    if ((*(short *)((int)buffer_ptr + 0x2a) == 0) && (current_char == '*')) {\n      *(uint *)(*buffer_ptr + 4) = *(uint *)(*buffer_ptr + 4) & 0xfffffbff;\n      buffer_ptr[0xc] = 0x22;\n      *(undefined *)((int)buffer_ptr + 0x3d) = 0x28;\n      do_nothing_08004a74();\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a76",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "add_character_to_buffer_08004a76"
        },
        "FUN_0800877c": {
            "renaming": {
                "FUN_0800877c": "do_nothing_0800877c"
            },
            "code": "\nvoid do_nothing_0800877c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800877c",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "do_nothing_0800877c"
        },
        "FUN_0800267c": {
            "renaming": {
                "FUN_0800267c": "calculate_value_0800267c",
                "param_1": "input_array",
                "param_2": "input_value",
                "iVar1": "calculated_value"
            },
            "code": "void calculate_value_0800267c(byte *input_array, int input_value) {\n  int calculated_value;\n  if (*input_array < 0xc) {\n    calculated_value = (0x88 - (char)input_array[1]) * 4;\n    if ((calculated_value - input_value == 0 || calculated_value < input_value) &&\n       (calculated_value = (600 - (char)input_array[2]) * 4,\n       input_value == calculated_value || input_value + (600 - (char)input_array[2]) * -4 < 0 != SBORROW4(input_value,calculated_value)))\n    {\n      calculated_value = input_value;\n    }\n    *(int *)(PTR_DAT_080026ac + (uint)*input_array * 8 + 4) = calculated_value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800267c",
            "calling": [
                "FUN_080026b0"
            ],
            "imported": false,
            "current_name": "calculate_value_0800267c"
        },
        "FUN_080047f4": {
            "renaming": {
                "FUN_080047f4": "process_input_080047f4",
                "param_1": "input_ptr",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "uVar1": "result",
                "puVar2": "current_ptr",
                "local_c": "counter"
            },
            "code": "int process_input_080047f4(uint **input_ptr, uint *input1, uint *input2, uint16_t input3) {\n  int result = 0;\n  uint *current_ptr;\n  int counter = 0;\n  if (*((*input_ptr) + 0x3d) == ' ') {\n    counter = (uint)((ulonglong)DAT_080048c0 * (ulonglong)(*(uint *)PTR_DAT_080048bc >> 3) >> 0x28) * 0x19;\n    do {\n      if (counter == 0) {\n        (*input_ptr)[0xc] = (uint *)0x0;\n        *((*input_ptr) + 0x3d) = 0x20;\n        *((*input_ptr) + 0xf) = 0;\n        result = 3;\n        break;\n      }\n      current_ptr = *input_ptr;\n      counter--;\n    } while ((current_ptr[6] & 2) != 0);\n    if (*((*input_ptr) + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *((*input_ptr) + 0xf) = 1;\n      if ((*current_ptr & 1) == 0) {\n        *current_ptr = *current_ptr | 1;\n      }\n      **input_ptr = **input_ptr & 0xfffff7ff;\n      *((*input_ptr) + 0x3d) = 0x22;\n      *((*input_ptr) + 0x3e) = 0x10;\n      (*input_ptr)[0x10] = (uint *)0x0;\n      (*input_ptr)[9] = input2;\n      *((*input_ptr) + 0x2a) = input3;\n      (*input_ptr)[0xb] = DAT_080048c4;\n      *((*input_ptr) + 10) = *((uint16_t *)((*input_ptr) + 0x2a));\n      (*input_ptr)[0x11] = input1;\n      **input_ptr = **input_ptr | 0x400;\n      **input_ptr = **input_ptr | 0x100;\n      *((*input_ptr) + 0xf) = 0;\n      (*input_ptr)[1] = (*input_ptr)[1] | 0x700;\n      result = 0;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f4",
            "calling": [
                "FUN_08007f0e"
            ],
            "imported": false,
            "current_name": "process_input_080047f4"
        },
        "FUN_0800376c": {
            "renaming": {
                "FUN_0800376c": "calculate_0800376c",
                "param_1": "ptr",
                "param_2": "param",
                "iVar1": "initialVal",
                "uVar2": "calculateValue",
                "iVar3": "iVar3",
                "puVar5": "ptrVal",
                "uVar6": "uVar6",
                "local_1c": "localCount"
            },
            "code": "int calculate_0800376c(uint **ptr, uint param){\n  int initialVal = getInitialValue();\n  uint *ptrVal = *ptr;\n  if ((ptrVal[2] & 0x100) == 0){\n    if (((ptrVal[1] & 0x100) == 0) && ((ptrVal[0xb] & 0xf00000) == 0)){\n      do {\n        if ((**ptr & 2) != 0) goto exit;\n      } while ((param == 0xffffffff) || ((param != 0 && (int)(getInitialValue() - initialVal) <= param)));\n      ptr[10] = (uint *)((uint)ptr[10] | 4);\n      *(undefined *)(ptr + 9) = 0;\n      return 3;\n    }\n    else {\n      uint uVar6 = *(uint *)PTR_DAT_080038c8;\n      uint uVar2 = calculate_0800376cValue(2);\n      ptrVal = *ptr;\n      if (((ptrVal[4] & DAT_080038cc) == 0) && ((ptrVal[3] & DAT_080038cc + 0xdc000000) == 0)){\n        if ((ptrVal[4] & DAT_080038d0) == 0){\n          if ((ptrVal[3] & DAT_080038d4) == 0){\n            iVar3 = 0x14;\n          }\n          else {\n            iVar3 = 0x29;\n          }\n        }\n        else {\n          iVar3 = 0x29;\n        }\n      }\n      else if (((ptrVal[4] & DAT_080038d0) == 0) && ((ptrVal[3] & DAT_080038d0 + 0xee000000) == 0)){\n        iVar3 = 0x54;\n      }\n      else if ((DAT_080038d8 & ptrVal[4]) == 0){\n        if ((DAT_080038d8 & ptrVal[3]) == 0){\n          iVar3 = 0x54;\n        }\n        else {\n          iVar3 = 0xfc;\n        }\n      }\n      else {\n        iVar3 = 0xfc;\n      }\n      uVar2 = (uVar6 / uVar2) * iVar3;\n      for (; localCount <= uVar2 && uVar2 - localCount != 0; localCount = localCount + 1) {\n        if ((param != 0xffffffff) && ((param == 0 || (int)(param - (int)getInitialValue()) < 0))){\n          ptr[10] = (uint *)((uint)ptr[10] | 4);\n          *(undefined *)(ptr + 9) = 0;\n          return 3;\n        }\n      }\n  exit:\n      **ptr = 0xffffffed;\n      ptr[10] = (uint *)((uint)ptr[10] | 0x200);\n      if (((*ptr)[2] & 0xe0000) == 0xe0000){\n        if (ptr[3] == (uint *)0x0){\n          ptr[10] = (uint *)((uint)ptr[10] & 0xfffffeff);\n          if (((uint)ptr[10] & 0x1000) == 0){\n            ptr[10] = (uint *)((uint)ptr[10] | 1);\n            return 0;\n          }\n          else {\n            return 0;\n          }\n        }\n        else {\n          return 0;\n        }\n      }\n      else {\n        return 0;\n      }\n    }\n  }\n  else {\n    ptr[10] = (uint *)((uint)ptr[10] | 0x20);\n    *(undefined *)(ptr + 9) = 0;\n    return 1;\n  }\n}",
            "called": [
                "FUN_08005bb8",
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800376c",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "calculate_0800376c"
        },
        "FUN_08003e20": {
            "renaming": {
                "FUN_08003e20": "check_and_update_08003e20",
                "param_1": "params",
                "iVar1": "result",
                "uVar2": "quotient",
                "iVar3": "start_time",
                "iVar4": "current_time",
                "uVar5": "divisor",
                "local_14": "is_set"
            },
            "code": "int check_and_update_08003e20(int *params) {\n  int result;\n  uint quotient;\n  int start_time;\n  int current_time;\n  uint divisor;\n  int is_set;\n  if (*(char *)(params + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(params + 9) = 1;\n  result = check_and_update_08003e20_08003b8c();\n  if (result == 0) {\n    params[10] = (params[10] & 0xffffeefdU) | 2;\n    divisor = *(uint *)PTR_DAT_08003f08;\n    quotient = calculate_value_08005bb8(2);\n    for (start_time = divisor / quotient << 1; start_time != 0; start_time = start_time - 1) {\n    }\n    set_bit_and_check_08003a20(params);\n    *(uint *)(*params + 8) = *(uint *)(*params + 8) | 8;\n    start_time = get_value_from_pointer_08003760();\n    while (is_set = *params, (*(uint *)(is_set + 8) & 8) != 0) {\n      current_time = get_value_from_pointer_08003760();\n      if (10 < (uint)(current_time - start_time)) {\n        params[10] = (params[10] & 0xffffffedU) | 0x10;\n        *(undefined *)(params + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(current_time + 8) = *(uint *)(current_time + 8) | 4;\n    start_time = get_value_from_pointer_08003760();\n    while ((*(uint *)(*params + 8) & 4) != 0) {\n      current_time = get_value_from_pointer_08003760();\n      if (10 < (uint)(current_time - start_time)) {\n        params[10] = (params[10] & 0xffffffedU) | 0x10;\n        *(undefined *)(params + 9) = 0;\n        return 1;\n      }\n    }\n    params[10] = (params[10] & 0xfffffffcU) | 1;\n  }\n  *(undefined *)(params + 9) = 0;\n  return result;\n}",
            "called": [
                "FUN_08005bb8",
                "FUN_08003760",
                "FUN_08003a20",
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e20",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "check_and_update_08003e20"
        },
        "FUN_08005a48": {
            "renaming": {
                "FUN_08005a48": "get_shifted_value_08005a48",
                "uVar1": "shifted_value",
                "get_value_from_pointer_08005a1c": "get_value",
                "PTR_DAT_08005a64": "pointer_array",
                "DAT_08005a60": "data_pointer"
            },
            "code": "uint get_shifted_value_08005a48() {\n  uint value = get_value();\n  uint index = *(int *)(DAT_08005a60 + 4) << 0x12;\n  uint shifted_index = index >> 0x1d;\n  uint shifted_value = value >> PTR_DAT_08005a64[shifted_index];\n  return shifted_value;\n}",
            "called": [
                "FUN_08005a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a48",
            "calling": [
                "FUN_08006538",
                "FUN_08005bb8",
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "get_shifted_value_08005a48"
        },
        "FUN_080033a8": {
            "renaming": {
                "FUN_080033a8": "copy_and_shift_bits_080033a8",
                "param_1": "dest",
                "param_2": "size",
                "param_3": "src",
                "iVar2": "i",
                "uVar3": "j",
                "bVar1": "b"
            },
            "code": "void copy_and_shift_bits_080033a8(uint8_t* dest, const uint8_t* src, uint32_t size)\n{\n    uint32_t i = 0;\n    for (uint32_t j = 0; j < size; j += 2)\n    {\n        uint8_t b = src[j];\n        dest[i] = b;\n        dest[i] = (src[j + 1] << 7) | b;\n        i++;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033a8",
            "calling": [
                "FUN_080033cc"
            ],
            "imported": false,
            "current_name": "copy_and_shift_bits_080033a8"
        },
        "FUN_08002c14": {
            "renaming": {
                "FUN_08002c14": "process_input_and_check_08002c14",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void process_input_and_check_08002c14(void)\n{\n  process_input_and_check_08002c14_08002c00();\n  return;\n}",
            "called": [
                "FUN_08002c00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c14",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "process_input_and_check_08002c14"
        },
        "FUN_08008d18": {
            "renaming": {
                "FUN_08008d18": "set_byte_at_offset_08008d18",
                "param_1": "offset",
                "param_2": "value",
                "uVar1": "byte_value"
            },
            "code": "void set_byte_at_offset_08008d18(int offset, uint8_t value) {\n  uint8_t byte_value;\n  if (value < 0x3c) {\n    byte_value = PTR_DAT_08008d2c[value];\n  }\n  else {\n    byte_value = 0xff;\n  }\n  *(uint8_t *)(offset + 300) = byte_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d18",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "set_byte_at_offset_08008d18"
        },
        "FUN_08009084": {
            "renaming": {
                "FUN_08009084": "process_data_08009084",
                "param_1": "data",
                "iVar1": "highest_bit_position",
                "process_and_wait_for_data_0800a18c": "process_and_wait_for_data",
                "find_highest_bit_position_08008f3c": "find_highest_bit_position"
            },
            "code": "void process_data_08009084(int data)\n{\n  int highest_bit_position;\n  if (*(int *)(data + 8) != 0) {\n    (**(code **)(data + 0xc))();\n    return;\n  }\n  process_and_wait_for_data();\n  highest_bit_position = find_highest_bit_position_08008f3c();\n  if (*(int *)(PTR_DAT_080090b0 + highest_bit_position * 0x14 + 0xc) != 0) {\n    process_data_08009084();\n  }\n  return;\n}",
            "called": [
                "FUN_0800a18c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009084",
            "calling": [
                "FUN_08009094"
            ],
            "imported": false,
            "current_name": "process_data_08009084"
        },
        "FUN_0800a020": {
            "renaming": {
                "FUN_0800a020": "calculate_new_value_0800a020",
                "param_1": "value",
                "param_2": "data",
                "iVar1": "error_code",
                "uVar2": "new_value",
                "bVar3": "has_error"
            },
            "code": "void calculate_new_value_0800a020(undefined4 value, int data)\n{\n  int error_code;\n  uint new_value;\n  bool has_error;\n  \n  error_code = check_for_error(value, (int)*(short *)(data + 0xe));\n  has_error = error_code < 0;\n  if (has_error) {\n    new_value = *(int *)(data + 0x54) + error_code;\n  }\n  else {\n    new_value = *(ushort *)(data + 0xc) & 0xffffefff;\n  }\n  if (has_error) {\n    *(uint *)(data + 0x54) = new_value;\n  }\n  if (!has_error) {\n    *(short *)(data + 0xc) = (short)new_value;\n  }\n  return;\n}",
            "called": [
                "FUN_0800a168"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a020",
            "calling": [],
            "imported": false,
            "current_name": "calculate_new_value_0800a020"
        },
        "FUN_08005840": {
            "renaming": {
                "FUN_08005840": "calculate_value_08005840",
                "uVar1": "value",
                "uVar2": "flag",
                "local_1c": "local_var",
                "abStack_18": "stack_var"
            },
            "code": "uint calculate_value_08005840(void)\n{\n  uint value;\n  uint flag;\n  int16_t local_var;\n  byte stack_var[4];\n  undefined4 uStack_c;\n  undefined4 uStack_10;\n  undefined4 uStack_14;\n  \n  uStack_c = *(undefined4 *)(PTR_DAT_0800589c + 8);\n  uStack_10 = *(undefined4 *)(PTR_DAT_0800589c + 4);\n  uStack_14 = *(undefined4 *)PTR_DAT_0800589c;\n  local_var = *(int16_t *)(PTR_DAT_0800589c + 0x10);\n  flag = *(uint *)(DAT_080058a0 + 4);\n  value = DAT_080058a8;\n  if ((flag & 0xc) == 8) {\n    if ((flag & 0x10000) == 0) {\n      value = DAT_080058a4 * (uint)stack_var[(flag << 10) >> 0x1c];\n    }\n    else {\n      value = (DAT_080058a8 * stack_var[(flag << 10) >> 0x1c]) / (uint)*(byte *)((int)&local_var - ((flag << 0xe) >> 0x1f));\n    }\n  }\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005840",
            "calling": [
                "FUN_080058d2"
            ],
            "imported": false,
            "current_name": "calculate_value_08005840"
        },
        "FUN_08007f7c": {
            "renaming": {
                "FUN_08007f7c": "set_parameter_08007f7c",
                "param_1": "parameter_address",
                "param_2": "parameter_value",
                "set_bit_and_flags_080049e0": "set_flag"
            },
            "code": "void set_parameter_08007f7c(int parameter_address, int parameter_value) {\n  if (parameter_address != 0) {\n    if (parameter_value != 0) {\n      *(int *)(parameter_address + 0x60) = parameter_value;\n      set_flag(parameter_address + 4);\n    }\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_080049e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f7c",
            "calling": [
                "FUN_08002968"
            ],
            "imported": false,
            "current_name": "set_parameter_08007f7c"
        },
        "FUN_08006d80": {
            "renaming": {
                "FUN_08006d80": "check_and_update_permissions_08006d80",
                "param_1": "input",
                "local_46": "result",
                "local_44": "character_index",
                "local_40": "flag",
                "local_3c": "calculated_value",
                "local_38": "input_copy",
                "local_34": "value_at_offset",
                "local_30": "status",
                "local_2c": "permissions_updated",
                "local_28": "PTR_DAT_08006e64",
                "local_24": "check_and_update_result",
                "local_20": "check_param_result",
                "local_1c": "PTR_DAT_08006e60",
                "local_10": "10"
            },
            "code": "int check_and_update_permissions_08006d80(int input){\n    int result = 0;\n    int character_index = 0;\n    int flag = 0;\n    int calculated_value = 0;\n    int value_at_offset = 0;\n    int status = 0;\n    int permissions_updated = 0;\n    int input_copy[12];\n    memset(input_copy, 0, sizeof(input_copy));\n    int* input_pointer = input_copy;\n    copy_value_to_memory(input_pointer, 0, 0x30);\n    int check_param_result = check_param(input, PTR_DAT_08006e60);\n    if (check_param_result != 0) {\n        *PTR_DAT_08006e64 = (char)input;\n        int check_and_update_result = check_and_update(input_pointer);\n        if (check_and_update_result == 0) {\n            character_index = find_character_index(input);\n            if (character_index < 0x12) {\n                flag = set_flag_and_check(input_pointer);\n                if (flag == 0) {\n                    calculated_value = calculate(input_pointer, 10);\n                    if (calculated_value == 0) {\n                        value_at_offset = get_value_at_offset(input_pointer);\n                        if ((value_at_offset & 0x200) != 0) {\n                            result = get_value_from_offset(input_pointer);\n                        }\n                        status = check_and_update_status(input_pointer);\n                        if (status == 0) {\n                            permissions_updated = update_permissions(input_pointer);\n                            if (permissions_updated == 0) {\n                                result = 0;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return result;\n}",
            "called": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_080038dc",
                "FUN_080091c6",
                "FUN_080038e4",
                "FUN_08003a1c",
                "FUN_08007320",
                "FUN_08003e20",
                "FUN_08003aa0",
                "FUN_0800376c",
                "FUN_08006c60",
                "FUN_08003bd8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d80",
            "calling": [
                "FUN_08008880"
            ],
            "imported": false,
            "current_name": "check_and_update_permissions_08006d80"
        },
        "FUN_08006c60": {
            "renaming": {
                "FUN_08006c60": "find_character_index_08006c60",
                "param_1": "character",
                "param_2": "max_index",
                "param_3": "start_index",
                "param_4": "end_index",
                "iVar1": "character_index",
                "uVar2": "index"
            },
            "code": "uint find_character_index_08006c60(char character, uint max_index, int start_index, int end_index) {\n  int character_index = find_character_or_negative_one(character, PTR_DAT_08006c78, start_index, end_index, end_index);\n  uint index = (uint)(character_index << 0xc) >> 0x1b;\n  if (index > max_index) {\n    index = 0;\n  }\n  return index;\n}",
            "called": [
                "FUN_08007376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c60",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "find_character_index_08006c60"
        },
        "FUN_08003306": {
            "renaming": {
                "FUN_08003306": "set_values_08003306",
                "param_1": "struct_ptr",
                "param_2": "value_type",
                "param_3": "value1",
                "param_4": "value2",
                "*(undefined4 *)(param_1 + 0x58)": "*(uint32_t *)(struct_ptr + 0x58)",
                "*(undefined4 *)(param_1 + 0x28)": "*(uint32_t *)(struct_ptr + 0x28)",
                "*(undefined4 *)(param_1 + 0x5c)": "*(uint32_t *)(struct_ptr + 0x5c)",
                "*(undefined4 *)(param_1 + 0x2c)": "*(uint32_t *)(struct_ptr + 0x2c)",
                "*(undefined4 *)(param_1 + 0x60)": "*(uint32_t *)(struct_ptr + 0x60)",
                "*(undefined4 *)(param_1 + 0x30)": "*(uint32_t *)(struct_ptr + 0x30)",
                "*(undefined4 *)(param_1 + 0x4c)": "*(uint32_t *)(struct_ptr + 0x4c)",
                "*(undefined4 *)(param_1 + 0x1c)": "*(uint32_t *)(struct_ptr + 0x1c)",
                "*(undefined4 *)(param_1 + 0x50)": "*(uint32_t *)(struct_ptr + 0x50)",
                "*(undefined4 *)(param_1 + 0x20)": "*(uint32_t *)(struct_ptr + 0x20)",
                "*(undefined4 *)(param_1 + 0x54)": "*(uint32_t *)(struct_ptr + 0x54)",
                "*(undefined4 *)(param_1 + 0x24)": "*(uint32_t *)(struct_ptr + 0x24)"
            },
            "code": "void set_values_08003306(int struct_ptr, uint8_t value_type, uint32_t value1, uint32_t value2)\n{\n    switch(value_type)\n    {\n        case 0x90:\n            *(uint32_t *)(struct_ptr + 0x50) = value1;\n            *(uint32_t *)(struct_ptr + 0x20) = value2;\n            break;\n        case 0xc0:\n            *(uint32_t *)(struct_ptr + 0x54) = value1;\n            *(uint32_t *)(struct_ptr + 0x24) = value2;\n            break;\n        case 0xd0:\n            *(uint32_t *)(struct_ptr + 0x58) = value1;\n            *(uint32_t *)(struct_ptr + 0x28) = value2;\n            break;\n        case 0xe0:\n            *(uint32_t *)(struct_ptr + 0x4c) = value1;\n            *(uint32_t *)(struct_ptr + 0x1c) = value2;\n            break;\n        case 0xf4:\n            *(uint32_t *)(struct_ptr + 0x5c) = value1;\n            *(uint32_t *)(struct_ptr + 0x2c) = value2;\n            break;\n        case 0xf5:\n            *(uint32_t *)(struct_ptr + 0x60) = value1;\n            *(uint32_t *)(struct_ptr + 0x30) = value2;\n            break;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003306",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_values_08003306"
        },
        "FUN_08002578": {
            "renaming": {
                "FUN_08002578": "process_server_response_08002578",
                "process_response_080076e0": "process_response"
            },
            "code": "void process_server_response_08002578(void)\n{\n  process_response();\n  return;\n}",
            "called": [
                "FUN_080076e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002578",
            "calling": [
                "FUN_08002644"
            ],
            "imported": false,
            "current_name": "process_server_response_08002578"
        },
        "FUN_08006932": {
            "renaming": {
                "FUN_08006932": "set_input_flag_08006932",
                "param_1": "input_ptr",
                "*param_1": "*input_ptr",
                "uint": "unsigned int",
                "*(uint *)(*param_1 + 0xc)": "*input",
                "*(undefined *)((int)param_1 + 0x39)": "*flag",
                "find_and_validate_input_08008730": "find_and_validate_input"
            },
            "code": "int set_input_flag_08006932(int *input_ptr) {\n    uint *input = (uint *)(*input_ptr + 0xc);\n    *input &= 0xffffffbf;\n    char *flag = (char *)((int)input_ptr + 0x39);\n    *flag = ' ';\n    find_and_validate_input();\n    return 0;\n}",
            "called": [
                "FUN_08008730"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006932",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "set_input_flag_08006932"
        },
        "FUN_080060c4": {
            "renaming": {
                "FUN_080060c4": "update_params_080060c4",
                "param_1": "base_address",
                "param_2": "params",
                "uVar1": "updated_mask1",
                "uVar2": "updated_mask2",
                "iVar3": "param0",
                "mask1": "0xffffffef",
                "mask2": "0xfffff3ff",
                "mask3": "0xffffffdf",
                "mask4": "0xffffff7f",
                "param2_shifted": "params[2] << 4",
                "param3_shifted": "params[3] << 4",
                "param5_shifted": "params[5] << 2",
                "param6_shifted": "params[6] << 2"
            },
            "code": "void update_params_080060c4(int base_address, int *params) {\n  uint mask1 = 0xffffffef;\n  uint mask2 = 0xfffff3ff;\n  uint mask3 = 0xffffffdf;\n  uint mask4 = 0xffffff7f;\n  uint param2_shifted = params[2] << 4;\n  uint param3_shifted = params[3] << 4;\n  uint param5_shifted = params[5] << 2;\n  uint param6_shifted = params[6] << 2;\n  uint updated_mask1 = (mask3 & *(uint *)(base_address + 0x20)) | param2_shifted;\n  uint updated_mask2 = mask2 & *(uint *)(base_address + 4) | param5_shifted | param6_shifted;\n  if (base_address == PTR_DAT_08006124) {\n    updated_mask1 = (updated_mask1 & mask4) | param3_shifted;\n    updated_mask1 &= 0xffffffbf;\n  }\n  *(uint *)(base_address + 0x20) = updated_mask1;\n  *(uint *)(base_address + 4) = updated_mask2;\n  *(uint *)(base_address + 0x18) = (*(uint *)(base_address + 0x18) & 0xffff8cff) | (params[0] << 8);\n  *(int *)(base_address + 0x38) = params[1];\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060c4",
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "imported": false,
            "current_name": "update_params_080060c4"
        },
        "FUN_08009eac": {
            "renaming": {
                "FUN_08009eac": "allocate_memory_08009eac",
                "param_1": "base_address",
                "param_2": "memory_block",
                "uVar1": "access_check_result",
                "iVar2": "allocated_memory_block",
                "local_18": "local_address",
                "local_14": "local_memory_block"
            },
            "code": "void allocate_memory_08009eac(int base_address, int *memory_block)\n{\n  ushort access_check_result;\n  int local_address;\n  int *local_memory_block;\n  \n  if (-1 < (int)((uint)*(ushort *)(memory_block + 3) << 0x1e)) {\n    local_address = base_address;\n    local_memory_block = memory_block;\n    access_check_result = check_memory_access(local_address, memory_block, &local_address, &local_memory_block);\n    int allocated_memory_block = allocate_memory_08009eac_block(base_address, local_address);\n    if (allocated_memory_block != 0) {\n      *(undefined **)(base_address + 0x28) = LAB_PTR_1_08009f28;\n      *memory_block = allocated_memory_block;\n      *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) | 0x80;\n      memory_block[4] = allocated_memory_block;\n      memory_block[5] = local_address;\n      if ((local_memory_block != (int *)0x0) && (check_return_value(base_address, (int)*(short *)((int)memory_block + 0xe)) != 0)) {\n        *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(memory_block + 3) = access_check_result | *(ushort *)(memory_block + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(memory_block + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) & 0xfffc | 2;\n  }\n  *memory_block = (int)memory_block + 0x47;\n  memory_block[4] = (int)memory_block + 0x47;\n  memory_block[5] = 1;\n  return;\n}",
            "called": [
                "FUN_08009270",
                "FUN_0800a110",
                "FUN_08009e64"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009eac",
            "calling": [
                "FUN_08009a80"
            ],
            "imported": false,
            "current_name": "allocate_memory_08009eac"
        },
        "FUN_080072d8": {
            "renaming": {
                "FUN_080072d8": "set_address_value_if_nonzero_080072d8",
                "param_1": "address",
                "param_2": "value",
                "param_3": "value_length",
                "param_4": "value_1",
                "<unnamed_variable>": "value_2"
            },
            "code": "void set_address_value_if_nonzero_080072d8(void* address, short* value, int value_length, void* value_1, void* value_2)\n{\n    if (value_length == 0)\n    {\n        set_value_at_address(address, value, 0, value_1, value_2);\n        return;\n    }\n    set_value_at_address(address, value, 1, value_1, value_2);\n    return;\n}",
            "called": [
                "FUN_080042e2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072d8",
            "calling": [
                "FUN_08008a24"
            ],
            "imported": false,
            "current_name": "set_address_value_if_nonzero_080072d8"
        },
        "FUN_080045c0": {
            "renaming": {
                "FUN_080045c0": "calculate_result_080045c0",
                "param_1": "parameters",
                "bVar1": "is_less_than_max",
                "uVar2": "random_value",
                "puVar3": "pointer_1",
                "uVar4": "quotient",
                "DAT_08004714": "MAX_VALUE_1",
                "DAT_08004718": "MAX_VALUE_2",
                "DAT_0800471c": "CONSTANT_VALUE_1",
                "DAT_08004720": "CONSTANT_VALUE_2",
                "DAT_08004724": "CONSTANT_VALUE_3"
            },
            "code": "int calculate_result_080045c0(uint **parameters)\\n{\\n    bool is_less_than_max;\\n    uint random_value, quotient, temp_value;\\n    uint *pointer_1, *pointer_2;\\n    \\n    if (parameters == NULL) {\\n        return 1;\\n    }\\n    \\n    if (*(char *)((int)parameters + 0x3d) == \"\\0\") {\\n        *(undefined *)(parameters + 0xf) = 0;\\n        do_nothing_080045bc();\\n    }\\n    \\n    *(undefined *)((int)parameters + 0x3d) = 0x24;\\n    **parameters = **parameters & 0xfffffffe;\\n    random_value = get_shifted_value_08005a28();\\n    \\n    if (DAT_08004714 < parameters[1]) {\\n        is_less_than_max = random_value <= DAT_08004720;\\n    }\\n    else if (DAT_08004718 < random_value) {\\n        is_less_than_max = false;\\n    }\\n    else {\\n        is_less_than_max = true;\\n    }\\n    \\n    if (is_less_than_max) {\\n        return 1;\\n    }\\n    \\n    quotient = (uint)((ulonglong)DAT_0800471c * (ulonglong)random_value >> 0x32);\\n    (*parameters)[1] = quotient;\\n    \\n    if (DAT_08004714 < parameters[1]) {\\n        temp_value = (uint)((ulonglong)DAT_08004724 * (ulonglong)(quotient * 300) >> 0x26);\\n    }\\n    \\n    (*parameters)[8] = temp_value + 1;\\n    pointer_1 = parameters[1];\\n    \\n    if (DAT_08004714 < pointer_1) {\\n        if (parameters[2] == NULL) {\\n            temp_value = count_leading_zeroes((random_value - 1) / (uint)((int)pointer_1 * 3) + 1 & 0xfff);\\n        }\\n        else {\\n            temp_value = count_leading_zeroes((random_value - 1) / (uint)((int)pointer_1 * 0x19) + 1 & 0xfff);\\n        }\\n        \\n        if (temp_value >> 5 == 0) {\\n            if (parameters[2] == NULL) {\\n                random_value = (random_value - 1) / (uint)((int)pointer_1 * 3) + 1 & 0xfff | 0x8000;\\n            }\\n            else {\\n                random_value = (random_value - 1) / (uint)((int)pointer_1 * 0x19) + 1 & 0xfff | 0xc000;\\n            }\\n        }\\n        else {\\n            random_value = 1;\\n        }\\n    }\\n    else {\\n        random_value = (random_value - 1) / (uint)((int)pointer_1 << 1) + 1 & 0xfff;\\n        if (random_value < 4) {\\n            random_value = 4;\\n        }\\n    }\\n    \\n    (*parameters)[7] = random_value;\\n    **parameters = (uint)parameters[7] | (uint)parameters[8];\\n    (*parameters)[2] = (uint)parameters[4] | (uint)parameters[3];\\n    (*parameters)[3] = (uint)parameters[5] | (uint)parameters[6];\\n    **parameters = **parameters | 1;\\n    parameters[0x10] = NULL;\\n    *(undefined *)((int)parameters + 0x3d) = 0x20;\\n    parameters[0xc] = NULL;\\n    *(undefined *)((int)parameters + 0x3e) = 0;\\n    return 0;\\n}",
            "called": [
                "FUN_080045bc",
                "FUN_08005a28"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045c0",
            "calling": [
                "FUN_080077b0"
            ],
            "imported": false,
            "current_name": "calculate_result_080045c0"
        },
        "FUN_08007e74": {
            "renaming": {
                "FUN_08007e74": "check_string_08007e74",
                "param_1": "str",
                "param_2": "len",
                "param_3": "val1",
                "param_4": "val2",
                "iVar1": "start_val",
                "iVar2": "init_res",
                "uVar3": "diff",
                "iVar4": "check_res",
                "iVar5": "str_ptr",
                "uVar6": "val2"
            },
            "code": "int check_string_08007e74(int str, int len, int val1, int val2)\n{\n    int start_val = get_value_from_pointer();\n    uint diff = 0;\n    int check_res = 2;\n    do {\n        int str_ptr = str + 4;\n        int init_res = initialize(str_ptr, len, val1, val2);\n        if (init_res == 0) {\n            check_res = 0;\n            int curr_val = get_value_at_offset(str_ptr);\n            while (curr_val != 0x20 && check_res == 0) {\n                int ptr_val = get_value_from_pointer();\n                diff = ptr_val - start_val;\n                if (diff < 0x65) {\n                    int str_val = get_value_at_offset(str_ptr + 4);\n                    if (str_val != 0) {\n                        check_res = 2;\n                    }\n                }\n                else {\n                    check_res = 1;\n                }\n                curr_val = get_value_at_offset(str_ptr);\n            }\n        }\n        curr_val = get_value_at_offset(str_ptr + 4);\n    } while (curr_val == 4 && diff < 100);\n    return check_res;\n}",
            "called": [
                "FUN_08004728",
                "FUN_08003760",
                "FUN_08005430",
                "FUN_0800542a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e74",
            "calling": [
                "FUN_08002a58"
            ],
            "imported": false,
            "current_name": "check_string_08007e74"
        },
        "FUN_08002efe": {
            "renaming": {
                "FUN_08002efe": "execute_function_08002efe",
                "param_1": "data_offset",
                "param_2": "data_size",
                "param_3": "data",
                "param_4": "param1",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void execute_function_08002efe(int data_offset, int data_size, char* data, int param1, int param2) {\n\texecute_with_data(data_offset + 0x40, data_size, data, param1, param2);\n\treturn;\n}",
            "called": [
                "FUN_0800319e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efe",
            "calling": [
                "FUN_08000be8"
            ],
            "imported": false,
            "current_name": "execute_function_08002efe"
        },
        "FUN_08002f84": {
            "renaming": {
                "FUN_08002f84": "store_value_if_param_is_255_08002f84",
                "param_1": "address_to_store",
                "param_2": "parameter_value",
                "param_3": "data_to_store"
            },
            "code": "void store_value_if_param_is_255_08002f84(undefined4 address_to_store, int parameter_value, undefined4 data_to_store){\n  if (parameter_value == 0xff) {\n    *(undefined4 *)address_to_store = data_to_store;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f84",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "store_value_if_param_is_255_08002f84"
        },
        "FUN_08002ddc": {
            "renaming": {
                "FUN_08002ddc": "process_data_with_offset_08002ddc",
                "param_1": "data_offset",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "process_data_0800322c": "process_data"
            },
            "code": "void process_data_with_offset_08002ddc(int data_offset, int arg1, int arg2, undefined4 arg3)\n{\n  process_data(data_offset + 0x40, arg1, arg2, arg3, arg3);\n  return;\n}",
            "called": [
                "FUN_0800322c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ddc",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": false,
            "current_name": "process_data_with_offset_08002ddc"
        },
        "FUN_08009094": {
            "renaming": {
                "FUN_08009094": "check_data_and_process_if_needed_08009094",
                "iVar1": "highest_bit_position",
                "find_highest_bit_position_08008f3c": "find_highest_bit_position",
                "PTR_DAT_080090b0": "data_ptr",
                "process_data_08009084": "process_data"
            },
            "code": "void check_data_and_process_if_needed_08009094(void)\n{\n    int highest_bit_position = find_highest_bit_position_08008f3c();\n    int* PTR_DAT_080090b0 = PTR_DAT_080090b0 + highest_bit_position * 0x14 + 0xc;\n    if (*PTR_DAT_080090b0 != 0) {\n        process_data();\n    }\n    return;\n}",
            "called": [
                "FUN_08009084",
                "FUN_08008f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009094",
            "calling": [
                "FUN_080042f0"
            ],
            "imported": false,
            "current_name": "check_data_and_process_if_needed_08009094"
        },
        "FUN_08009f2c": {
            "renaming": {
                "FUN_08009f2c": "find_character_08009f2c",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "current_char"
            },
            "code": "char *find_character_08009f2c(char *string, char character, int length) {\n  char *current_char = string;\n  while (current_char != string + length) {\n    if (*current_char == character) {\n      return current_char;\n    }\n    current_char++;\n  }\n  return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f2c",
            "calling": [
                "FUN_0800937c",
                "FUN_08009698"
            ],
            "imported": false,
            "current_name": "find_character_08009f2c"
        },
        "FUN_0800a154": {
            "renaming": {
                "FUN_0800a154": "calculate_value_0800a154",
                "param_1": "start_value",
                "param_2": "data",
                "iVar1": "offset"
            },
            "code": "int calculate_value_0800a154(int start_value, int* data) {\n  int offset = *(data - 1) - 4;\n  if (*(data - 1) < 0) {\n    offset += *(data + offset);\n  }\n  return offset;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a154",
            "calling": [
                "FUN_08009908"
            ],
            "imported": false,
            "current_name": "calculate_value_0800a154"
        },
        "FUN_08002580": {
            "renaming": {
                "FUN_08002580": "increment_byte_and_set_08002580",
                "*param_1": "*value",
                "byte bVar1": "byte current_value",
                "bVar1": "current_value"
            },
            "code": "void increment_byte_and_set_08002580(byte *value)\n{\n  byte current_value = *PTR_DAT_080025a4;\n  if (current_value > 11) {\n    *value = 0xff;\n    return;\n  }\n  *PTR_DAT_080025a4 = current_value + 1;\n  *value = current_value;\n  *(undefined4 *)(PTR_DAT_080025a8 + (uint)current_value * 8 + 4) = 0x5dc;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002580",
            "calling": [
                "FUN_080004d4"
            ],
            "imported": false,
            "current_name": "increment_byte_and_set_08002580"
        },
        "FUN_08007f8e": {
            "renaming": {
                "FUN_08007f8e": "set_param_value_08007f8e",
                "param_1": "param_address",
                "param_2": "param_value",
                "*(int *)(param_1 + 100)": "*(int *)(param_address + 100)",
                "set_bit_and_flags_080049e0": "set_parameter_flag"
            },
            "code": "void set_param_value_08007f8e(int param_address, int param_value)\n{\n  if (param_address != 0) {\n    if (param_value != 0) {\n      *(int *)(param_address + 100) = param_value;\n      set_parameter_flag(param_address + 4);\n    }\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_080049e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f8e",
            "calling": [
                "FUN_08002968"
            ],
            "imported": false,
            "current_name": "set_param_value_08007f8e"
        },
        "FUN_08006b3e": {
            "renaming": {
                "FUN_08006b3e": "set_bit_in_array_08006b3e",
                "param_1": "bit_index",
                "param_2": "array",
                "uVar1": "index_to_access",
                "*(uint *)(param_2 + uVar1 * 4)": "array_element",
                "1 << (param_1 & 0xf)": "bit_mask"
            },
            "code": "void set_bit_in_array_08006b3e(uint bit_index, int* array){\n  uint index_to_access = (bit_index << 0x18) >> 0x1c;\n  uint* array_element = (uint*)(array + index_to_access * 4);\n  *array_element = *array_element | 1 << (bit_index & 0xf);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b3e",
            "calling": [
                "FUN_080088e0",
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_08006b3e"
        },
        "FUN_08006262": {
            "renaming": {
                "FUN_08006262": "set_bit_in_register_08006262",
                "param_1": "register_ptr",
                "param_2": "bit_position",
                "param_3": "bit_value",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void set_bit_in_register_08006262(uint32_t *register_ptr, uint8_t bit_position, uint8_t bit_value) {\n    uint32_t mask = ~(1 << (bit_position & 0xff));\n    uint32_t bits_to_set = bit_value << (bit_position & 0xff);\n    *register_ptr = (*register_ptr & mask) | bits_to_set;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006262",
            "calling": [
                "FUN_08006280",
                "FUN_080062f4",
                "FUN_080063c0",
                "FUN_08006390"
            ],
            "imported": false,
            "current_name": "set_bit_in_register_08006262"
        },
        "FUN_08007110": {
            "renaming": {
                "FUN_08007110": "set_bit_and_return_08007110"
            },
            "code": "void set_bit_and_return_08007110(void)\n{\n  set_bit();\n  return;\n}",
            "called": [
                "FUN_080074e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007110",
            "calling": [
                "FUN_08005e2e"
            ],
            "imported": false,
            "current_name": "set_bit_and_return_08007110"
        },
        "FUN_08007594": {
            "renaming": {
                "FUN_08007594": "check_timer_08007594",
                "param_1": "timer_value",
                "DAT_080075d0": "timer_start",
                "DAT_080075d4": "timer_end",
                "PTR_s_TIM__Unknown_timer_instance_080075d8": "timer_instance"
            },
            "code": "int check_timer_08007594(uint32_t timer_value) {\n  if (timer_value == UINT32_MAX) {\n    return 0;\n  }\n  if (timer_value == DAT_080075d0) {\n    return 1;\n  }\n  if (DAT_080075d0 < timer_value) {\n    if (timer_value == DAT_080075d4) {\n      return 1;\n    }\n    if (timer_value == DAT_080075d4 + 0x12400) {\n      return 2;\n    }\n  }\n  else if (timer_value == 0x40000000) {\n    return 1;\n  }\n  process_data(PTR_s_TIM__Unknown_PTR_s_TIM__Unknown_timer_instance_080075d8_080075d8);\n  return 0;\n}",
            "called": [
                "FUN_080098d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007594",
            "calling": [
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "check_timer_08007594"
        },
        "FUN_080073ec": {
            "renaming": {
                "FUN_080073ec": "set_bit_and_clear_mask_080073ec",
                "puVar1": "data_ptr"
            },
            "code": "void set_bit_and_clear_mask_080073ec(uint *data_ptr) {\n  data_ptr[0] |= 0x00010000;\n  data_ptr[1] &= 0xFFFF80FF & DAT_08007430;\n  data_ptr[0] &= 0xFEF6FFFF & 0xFFFBFFFF;\n  data_ptr[1] &= 0xFF80FFFF;\n  data_ptr[2] = 0x009F0000;\n  *(uint *)(DAT_08007434 + 8) = 0x08000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073ec",
            "calling": [
                "FUN_08003658"
            ],
            "imported": false,
            "current_name": "set_bit_and_clear_mask_080073ec"
        },
        "FUN_08008ef4": {
            "renaming": {
                "FUN_08008ef4": "calculate_new_value_08008ef4",
                "param_1": "current_value",
                "param_2": "start_value",
                "param_3": "end_value",
                "param_4": "start_range",
                "param_5": "end_range",
                "uint": "unsigned int"
            },
            "code": "int calculate_new_value_08008ef4(int current_value, int start_value, int end_value, int start_range, int end_range) {\n    int range_diff = end_range - start_range;\n    int value_diff = end_value - start_value;\n    int current_range_diff = current_value - start_value;\n    return ((current_range_diff * value_diff) / range_diff) + start_range;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ef4",
            "calling": [
                "FUN_080026b0"
            ],
            "imported": false,
            "current_name": "calculate_new_value_08008ef4"
        },
        "FUN_08002df6": {
            "renaming": {
                "FUN_08002df6": "encode_data_from_pointer_08002df6",
                "param_1": "ptr_param",
                "puVar1": "data_ptr",
                "DAT_080004c4": "data_length"
            },
            "code": "void encode_data_from_pointer_08002df6(int ptr_param)\n{\n  if (*(byte *)(ptr_param + 0xc4) == 0) {\n    return;\n  }\n  undefined *data_ptr = *(undefined **)(ptr_param + 200);\n  int DAT_080004c4 = *(byte *)(ptr_param + 0xc4) - 2;\n  encode_data_080031ce(ptr_param + 0x40, *data_ptr, data_ptr[1], DAT_080004c4, data_ptr + 2);\n  return;\n}",
            "called": [
                "FUN_080031ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002df6",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": false,
            "current_name": "encode_data_from_pointer_08002df6"
        },
        "FUN_080045bc": {
            "renaming": {
                "FUN_080045bc": "do_nothing_080045bc"
            },
            "code": "\nvoid do_nothing_080045bc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045bc",
            "calling": [
                "FUN_080045c0"
            ],
            "imported": false,
            "current_name": "do_nothing_080045bc"
        },
        "FUN_08007118": {
            "renaming": {
                "FUN_08007118": "process_input_and_update_state_08007118",
                "param_1": "input_value",
                "param_2": "clock_frequency",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5",
                "local_74": "data_struct_values[0]",
                "local_70": "data_struct_values[1]",
                "local_6c": "data_struct_values[2]",
                "local_68": "data_struct_values[3]",
                "local_64": "data_struct_values[4]",
                "local_60": "data_struct_values[5]",
                "local_5c": "input_characters[0]",
                "local_58": "input_characters[1]",
                "local_54": "input_characters[2]",
                "local_50": "input_characters[3]",
                "local_4c": "input_characters[4]",
                "local_48": "input_characters[5]",
                "local_44": "clock_cycles",
                "local_1b": "is_valid_input"
            },
            "code": "void process_input_and_update_state_08007118(int input_value, uint32_t clock_frequency, int param_3, int param_4, char param_5)\n{\n  uint32_t clock_cycles;\n  int character_index;\n  int update_status;\n  uint32_t character_or_negative_one;\n  uint32_t bit_check_result;\n  uint32_t bit_set_result;\n  uint32_t data_struct_values[6] = {0x60, 0, 0, 0, 0, 0};\n  int data_struct_index;\n  uint32_t input_characters[6] = {0x0, 0x4, 0x8, 0xc, 0x18, 0};\n\n  int is_valid_input = check_input_value(input_value, VALID_INPUT_VALUES);\n\n  if (is_valid_input) {\n    clock_cycles = get_clock_cycles(clock_frequency);\n    character_index = find_character_index(input_value);\n    if (character_index != -1) {\n      if (param_5 == '\\x01') {\n        set_input_value(input_value);\n        update_status = update_settings();\n        if (update_status != 0) {\n          return;\n        }\n      }\n      data_struct_index = get_data_struct_index(character_index, data_struct_values);\n      if (data_struct_index != -1) {\n        bit_check_result = check_bit(data_struct_index);\n        if (bit_check_result == 0) {\n          bit_set_result = set_bit(data_struct_index);\n          if (bit_set_result == 0) {\n            character_or_negative_one = find_character_or_negative_one(input_value, VALID_INPUT_VALUES);\n            if ((character_or_negative_one & 0x100000) == 0) {\n              update_register(character_index);\n            }\n            else {\n              update_array(character_index);\n            }\n          }\n        }\n      }\n    }\n  }\n}",
            "called": [
                "FUN_08007376",
                "FUN_08006092",
                "FUN_080091c6",
                "FUN_08006186",
                "FUN_08007320",
                "FUN_0800643c",
                "FUN_08006390",
                "FUN_080075dc",
                "FUN_08006c7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007118",
            "calling": [
                "FUN_080088e0"
            ],
            "imported": false,
            "current_name": "process_input_and_update_state_08007118"
        },
        "FUN_08009fe8": {
            "renaming": {
                "FUN_08009fe8": "process_data_08009fe8",
                "param_1": "data_value",
                "puVar1": "temp_ptr",
                "uVar2": "result",
                "piVar3": "data_ptr",
                "iVar4": "set_value_result",
                "pcVar5": "func_ptr",
                "unaff_r4": "data_pointer_ptr_copy",
                "unaff_r5": "unused_register",
                "in_lr": "unused_register",
                "puVar6": "data_pointer_ptr",
                "PTR_PTR_DAT_08009ff4": "data_pointer_ptr_ptr",
                "PTR_DAT_0800a018": "result_ptr"
            },
            "code": "int process_data_08009fe8(uint data_value) {\n  int* data_ptr = *(int **)data_pointer_ptr;\n  if (data_value > 31) {\n    *data_ptr = 22;\n    return -1;\n  }\n  int func_ptr = data_ptr[17];\n  if ((func_ptr != 0) && (*(code **)(func_ptr + data_value * 4) != (code *)0x0)) {\n    if (*(code **)(func_ptr + data_value * 4) != (code *)0x1) {\n      if (*(code **)(func_ptr + data_value * 4) == (code *)0xffffffff) {\n        *data_ptr = 22;\n        return 1;\n      }\n      *(undefined4 *)(func_ptr + data_value * 4) = 0;\n      (*(code **)(func_ptr + data_value * 4))(data_value);\n    }\n    return 0;\n  }\n  undefined *data_pointer_ptr_copy = data_pointer_ptr;\n  undefined4 result = get_return_value(data_ptr);\n  undefined *temp_ptr = PTR_DAT_0800a018;\n  *(undefined4 *)PTR_DAT_0800a018 = 0;\n  int set_value_result = set_value_to_22(result, data_value, data_value, 0, data_pointer_ptr_copy, unaff_r4, unaff_r5, in_lr);\n  if ((set_value_result == -1) && (*(int *)temp_ptr != 0)) {\n    *data_ptr = *(int *)temp_ptr;\n  }\n  return set_value_result;\n}",
            "called": [
                "thunk_FUN_0800887c",
                "FUN_0800886c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009fe8",
            "calling": [
                "FUN_08009b5c"
            ],
            "imported": false,
            "current_name": "process_data_08009fe8"
        },
        "FUN_08002c1e": {
            "renaming": {
                "FUN_08002c1e": "set_default_values_if_param1_is_1_08002c1e",
                "param_1": "should_set_default_values",
                "param_2": "max_value",
                "param_3": "param_3",
                "param_4": "param_4",
                "set_default_values_if_param1_is_1_08002948": "set_default_values",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void set_default_values_if_param1_is_1_08002c1e(int should_set_default_values, int max_value, int param_3, int param_4, int param_5) {\n  if (should_set_default_values == 1) {\n    set_default_values(max_value, param_3, param_4, param_5);\n  }\n}\n",
            "called": [
                "FUN_08002948"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c1e",
            "calling": [],
            "imported": false,
            "current_name": "set_default_values_if_param1_is_1_08002c1e"
        },
        "FUN_08005a68": {
            "renaming": {
                "FUN_08005a68": "initialize_data_08005a68",
                "param_1": "output_data",
                "param_2": "input_data",
                "iVar1": "input_data_val",
                "*param_1": "output_data[0]",
                "param_1[1]": "output_data[1]",
                "param_1[2]": "output_data[2]",
                "param_1[3]": "output_data[3]",
                "param_1[4]": "output_data[4]",
                "*param_2": "*input_data",
                "*DAT_08005aa0": "input_data[0]"
            },
            "code": "void initialize_data_08005a68(uint8_t *output_data, uint32_t *input_data)\n{\n  output_data[0] = 0xf;\n  uint32_t *input_data_ptr = &input_data[1];\n  uint32_t input_data_val = *input_data_ptr;\n  output_data[1] = input_data_val & 3;\n  output_data[2] = input_data_val & 0xf0;\n  output_data[3] = input_data_val & 0x700;\n  output_data[4] = input_data_val >> 3 & 0x700;\n  *output_data = *DAT_08005aa0 & 7;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "initialize_data_08005a68"
        },
        "FUN_08008f78": {
            "renaming": {
                "FUN_08008f78": "initialize_values_if_param2_is_0xffff_08008f78",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "data_pointer"
            },
            "code": "void initialize_values_if_param2_is_0xffff_08008f78(int param1, int param2, undefined4 param3, undefined4 param4) {\n  undefined *data_pointer;\n  data_pointer = PTR_DAT_08009018;\n  if (param1 != 1) {\n    return;\n  }\n  if (param2 == 0xffff) {\n    *PTR_DAT_08009018 = 6;\n    *(undefined4 *)(data_pointer + 0xc) = 0;\n    data_pointer[0x14] = 7;\n    *(undefined4 *)(data_pointer + 0x20) = 0;\n    data_pointer[0x28] = 8;\n    *(undefined4 *)(data_pointer + 0x34) = 0;\n    data_pointer[0x3c] = 9;\n    *(undefined4 *)(data_pointer + 0x48) = 0;\n    data_pointer[0x50] = 10;\n    *(undefined4 *)(data_pointer + 0x5c) = 0;\n    data_pointer[100] = 0x17;\n    *(undefined4 *)(data_pointer + 0x70) = 0;\n    data_pointer[0x78] = 0x17;\n    *(undefined4 *)(data_pointer + 0x84) = 0;\n    data_pointer[0x8c] = 0x17;\n    *(undefined4 *)(data_pointer + 0x98) = 0;\n    data_pointer[0xa0] = 0x17;\n    *(undefined4 *)(data_pointer + 0xac) = 0;\n    data_pointer[0xb4] = 0x17;\n    *(undefined4 *)(data_pointer + 0xc0) = 0;\n    data_pointer[200] = 0x28;\n    *(undefined4 *)(data_pointer + 0xd4) = 0;\n    data_pointer[0xdc] = 0x28;\n    *(undefined4 *)(data_pointer + 0xe8) = 0;\n    data_pointer[0xf0] = 0x28;\n    *(undefined4 *)(data_pointer + 0xfc) = 0;\n    data_pointer[0x104] = 0x28;\n    *(undefined4 *)(data_pointer + 0x110) = 0;\n    data_pointer[0x118] = 0x28;\n    *(undefined4 *)(data_pointer + 0x124) = 0;\n    data_pointer[300] = 0x28;\n    *(undefined4 *)(data_pointer + 0x138) = 0;\n    determine_result_and_swap_args_080090c2(0, PTR_LAB_08008f50_1_08009020, PTR_DAT_0800901c, data_pointer, param4);\n  }\n  return;\n}",
            "called": [
                "FUN_080090c2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f78",
            "calling": [],
            "imported": false,
            "current_name": "initialize_values_if_param2_is_0xffff_08008f78"
        },
        "FUN_08008d30": {
            "renaming": {
                "FUN_08008d30": "initialize_params_08008d30",
                "param_1": "params",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "PTR_PTR_LAB_08008ba4_1_08008d7c": "global_ptr_1",
                "PTR_DAT_08008d80": "global_ptr_2",
                "PTR_DAT_08008d84": "global_ptr_3",
                "PTR_DAT_08008d88": "global_ptr_4",
                "set_value_at_index_08008d00": "set_value_at_index",
                "set_byte_at_offset_08008d18": "set_byte_at_offset",
                "getValueByKey_0800734a": "get_value_by_key",
                "initialize_struct_08008c20": "initialize_struct"
            },
            "code": "undefined4* initialize_params_08008d30(undefined4* params, undefined4 arg2, undefined4 arg3, undefined4 arg4)\n{\n  params[1] = 0;\n  params[2] = 1000;\n  *params = PTR_PTR_LAB_08008ba4_1_08008d7c;\n  if (params == PTR_DAT_08008d80) {\n    set_value_at_index(params, 0, arg3, PTR_DAT_08008d80, arg4);\n    set_byte_at_offset(params, 1);\n  }\n  else {\n    undefined byte1 = get_value_by_key(arg2, PTR_DAT_08008d84);\n    *(undefined *)((int)params + 0x12d) = byte1;\n    undefined byte2 = get_value_by_key(arg2, PTR_DAT_08008d88);\n    *(undefined *)(params + 0x4b) = byte2;\n  }\n  initialize_struct(params);\n  return params;\n}",
            "called": [
                "FUN_08008d18",
                "FUN_08008d00",
                "FUN_0800734a",
                "FUN_08008c20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d30",
            "calling": [
                "FUN_08008d8c"
            ],
            "imported": false,
            "current_name": "initialize_params_08008d30"
        },
        "FUN_08002f94": {
            "renaming": {
                "FUN_08002f94": "store_param_in_pointer_08002f94",
                "param_1": "pointer_location",
                "param_2": "unused_parameter",
                "param_3": "parameter_value",
                "PTR_DAT_08002f9c": "pointer_location"
            },
            "code": "void store_param_in_pointer_08002f94(void* PTR_DAT_08002f9c, int parameter_value) {\n  *(int*)PTR_DAT_08002f9c = parameter_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f94",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "store_param_in_pointer_08002f94"
        },
        "FUN_0800734a": {
            "renaming": {
                "FUN_0800734a": "getValueByKey_0800734a",
                "param_1": "key",
                "uVar1": "value",
                "find_value_by_key_08007332": "findValueByKey"
            },
            "code": "int getValueByKey_0800734a(int key) {\n  int value;\n  if (key != 0) {\n    value = findValueByKey();\n    return value;\n  }\n  return -1;\n}",
            "called": [
                "FUN_08007332"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800734a",
            "calling": [
                "FUN_080084b0",
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "getValueByKey_0800734a"
        },
        "FUN_08000aec": {
            "renaming": {
                "FUN_08000aec": "check_and_clear_memory_08000aec",
                "bVar1": "character_found",
                "iVar2": "character_index",
                "uVar3": "index",
                "PTR_DAT_08000bc0": "pointer_1",
                "PTR_DAT_08000bc4": "pointer_2",
                "clear_memory_080005e0": "clear_memory",
                "PTR_DAT_08000bc8": "pointer_3",
                "PTR_DAT_08000bcc": "pointer_4",
                "PTR_DAT_08000bd0": "pointer_5",
                "PTR_DAT_08000bd4": "pointer_6",
                "check_character_in_array_080036ac": "check_character_in_array",
                "PTR_DAT_08000bd8": "pointer_7",
                "PTR_DAT_08000bdc": "pointer_8",
                "PTR_DAT_08000be0": "pointer_9",
                "PTR_DAT_08000be4": "pointer_10"
            },
            "code": "void check_and_clear_memory_08000aec(void)\\n{\\n    bool character_found = false;\\n    int character_index;\\n    uint index;\\n\\n    *PTR_DAT_08000bc0 = 1;\\n    if (*PTR_DAT_08000bc4 != \"\\0\") {\\n        clear_memory();\\n    }\\n    for (index = 0; index < 5; index++) {\\n        PTR_DAT_08000bc8[index] = 0;\\n        PTR_DAT_08000bcc[index] = 0;\\n        PTR_DAT_08000bd0[index] = 0;\\n    }\\n    for (index = 0; index < 0x3c; index++) {\\n        if ((index - 0x2e & 0xff) < 0xe) {\\n            if (index < 0x3c) {\\n                character_index = (int)(char)PTR_DAT_08000bd4[index];\\n            }\\n            else {\\n                character_index = -1;\\n            }\\n            character_index = check_character_in_array(character_index);\\n            if (character_index == 0) {\\n                character_found = false;\\n            }\\n            else {\\n                if (index < 0x3c) {\\n                    character_index = (int)(char)PTR_DAT_08000bd4[index];\\n                }\\n                else {\\n                    character_index = -1;\\n                }\\n                character_index = check_character_in_array(character_index);\\n                if (character_index == 1) {\\n                    character_found = false;\\n                }\\n                else {\\n                    character_found = true;\\n                }\\n            }\\n        }\\n        else {\\n            character_found = false;\\n        }\\n        if (character_found) {\\n            set_value_at_index(index, 2);\\n        }\\n        else {\\n            if (index < 0x3c) {\\n                if (((PTR_DAT_08000bd4[index] != -1) && (character_index = check_character_in_array(), character_index != 0)) &&\\n                   (character_index = check_character_in_array((int)(char)PTR_DAT_08000bd4[index]), character_index != 1)) {\\n                    character_found = true;\\n                }\\n            }\\n            if (character_found) {\\n                set_value_at_index(index, 1);\\n            }\\n        }\\n        PTR_DAT_08000bd8[index] = 0xff;\\n    }\\n    *(undefined4 *)PTR_DAT_08000bdc = 0;\\n    *PTR_DAT_08000be0 = 0;\\n    *PTR_DAT_08000be4 = 0;\\n    *PTR_DAT_08000bc0 = 0;\\n    return;\\n}",
            "called": [
                "FUN_080036ac",
                "FUN_080005e0",
                "FUN_080005f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aec",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "check_and_clear_memory_08000aec"
        },
        "FUN_08008eec": {
            "renaming": {
                "FUN_08008eec": "convert_base_or_call_function_08008eec",
                "convert_base_or_call_function_08008ed6": "convert_base"
            },
            "code": "void convert_base_or_call_function_08008eec(void)\n{\n  //Call function to convert base\n  convert_base();\n  return;\n}",
            "called": [
                "FUN_08008ed6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008eec",
            "calling": [],
            "imported": false,
            "current_name": "convert_base_or_call_function_08008eec"
        },
        "FUN_080068d6": {
            "renaming": {
                "FUN_080068d6": "validate_input_080068d6",
                "param_1": "input_array",
                "param_2": "array_length",
                "param_3": "input_value",
                "*(char *)((int)param_1 + 0x3a)": "input_array[10]",
                "*(char *)(param_1 + 0xe)": "input_array[14]",
                "*(short *)(param_1 + 0xb)": "input_array[11]",
                "*(short *)((int)param_1 + 0x2e)": "input_array[12]",
                "param_1[10]": "input_array[10]",
                "param_1[0xf]": "input_array[15]",
                "*(undefined *)((int)param_1 + 0x3a)": "input_array[39]",
                "*(undefined *)(param_1 + 0xe)": "input_array[14]",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*input_array + 12)",
                "*(uint *)(*param_1 + 0x14)": "*(uint *)(*input_array + 20)"
            },
            "code": "int validate_input_080068d6(int *input_array, int array_length, int input_value)\n{\n    if (input_array[10] != ' ')\n    {\n        return 2;\n    }\n    if (array_length == 0)\n    {\n        return 1;\n    }\n    if (input_value == 0)\n    {\n        return 1;\n    }\n    if (input_array[14] != 1)\n    {\n        input_array[10] = array_length;\n        input_array[11] = (short)input_value;\n        input_array[14] = 0;\n        input_array[15] = 0;\n        input_array[16] = 0;\n        input_array[17] = 0;\n        input_array[18] = 0;\n        input_array[19] = 0;\n        input_array[20] = 0;\n        input_array[21] = 0;\n        input_array[22] = 0;\n        input_array[23] = 0;\n        input_array[24] = 0;\n        input_array[25] = 0;\n        input_array[26] = 0;\n        input_array[27] = 0;\n        input_array[28] = 0;\n        input_array[29] = 0;\n        input_array[30] = 0;\n        input_array[31] = 0;\n        input_array[32] = 0;\n        input_array[33] = 0;\n        input_array[34] = 0;\n        input_array[35] = 0;\n        input_array[36] = 0;\n        input_array[37] = 0;\n        input_array[38] = 0;\n        input_array[39] = 0x22;\n        input_array[14] = 0;\n        *(uint *)(*input_array + 12) |= 0x100;\n        *(uint *)(*input_array + 20) |= 1;\n        *(uint *)(*input_array + 12) |= 0x20;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080068d6",
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "imported": false,
            "current_name": "validate_input_080068d6"
        },
        "FUN_080032a2": {
            "renaming": {
                "FUN_080032a2": "encode_and_send_string_data_080032a2",
                "param_1": "data",
                "param_2": "string",
                "param_3": "length",
                "param_4": "param",
                "uVar1": "string_end",
                "get_string_end_08000178": "get_string_end",
                "encode_and_send_data_0800325a": "encode_and_send_data"
            },
            "code": "void encode_and_send_string_data_080032a2(void* data, int code, int length, void* string, void* param){\n  int string_end = get_string_end(string);\n  encode_and_send_data(data, code, string_end, string, param);\n  return;\n}",
            "called": [
                "FUN_0800325a",
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032a2",
            "calling": [
                "FUN_08002f14"
            ],
            "imported": false,
            "current_name": "encode_and_send_string_data_080032a2"
        },
        "FUN_08001b48": {
            "renaming": {
                "FUN_08001b48": "extract_and_update_firmware_08001b48",
                "PTR_DAT_08001bc0": "firmware_data_ptr",
                "PTR_s__home_bo_p2im_p2im_real_firmware_08001bc4": "firmware_file_path",
                "PTR_FUN_08000214_1_08001bc8": "function_1_address",
                "PTR_LAB_080002ec_1_08001bcc": "label_1_address",
                "DAT_08001bd0": "data_1",
                "PTR_LAB_08000c18_1_08001bd4": "label_2_address",
                "DAT_08001bd8": "data_2",
                "PTR_LAB_080001a8_1_08001bdc": "label_3_address",
                "PTR_FUN_08001cd0_1_08001be0": "function_2_address",
                "DAT_08001be4": "data_3"
            },
            "code": "void extract_and_update_firmware_08001b48(void)\n{\n  undefined *firmware_address;\n  firmware_address = PTR_DAT_08001bc0;\n  extract_file_name(PTR_DAT_08001bc0, PTR_s__home_bo_p2im_p2im_real_firmware_08001bc4, 2, 5);\n  update_data_if_match(firmware_address, 0xe0, PTR_decode_data_if_valid_index_08000214_1_08001bc8);\n  update_data_if_match(firmware_address, 0x90, PTR_LAB_080002ec_1_08001bcc);\n  update_data_if_match(firmware_address, 0xc0, DAT_08001bd0);\n  update_data_if_match(firmware_address, 0xd0, PTR_LAB_08000c18_1_08001bd4);\n  update_data_if_match(firmware_address, 0xf4, DAT_08001bd8);\n  update_data_if_match(firmware_address, 0xf5, PTR_LAB_080001a8_1_08001bdc);\n  store_param_in_pointer(firmware_address, 0xf0, PTR_FUNC_08001cd0_1_08001be0);\n  store_value_if_param_is_255(firmware_address, 0xff, DAT_08001be4);\n  process_and_copy_data(firmware_address, 0xe100);\n  check_and_clear_memory();\n  handle_system_interrupt(0);\n  return;\n}",
            "called": [
                "FUN_08000aec",
                "FUN_08002f94",
                "FUN_08002f2c",
                "FUN_08002f84",
                "FUN_0800018c",
                "FUN_08003048",
                "FUN_08002e44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b48",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "extract_and_update_firmware_08001b48"
        },
        "FUN_08006390": {
            "renaming": {
                "FUN_08006390": "set_bit_and_update_register_08006390",
                "param_1": "register_ptr",
                "param_2": "bit_index",
                "puVar1": "register",
                "DAT_080063bc": "last_register_ptr"
            },
            "code": "int set_bit_and_update_register_08006390(uint **register_ptr, unsigned int bit_index)\n{\n  uint *register = *register_ptr;\n  set_bit_in_register(register, bit_index, 1);\n  if (register == DAT_080063bc) {\n    register[17] |= 0x8000;\n  }\n  **register_ptr |= 1;\n  return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006390",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "set_bit_and_update_register_08006390"
        },
        "FUN_08009f48": {
            "renaming": {
                "FUN_08009f48": "do_nothing_08009f48"
            },
            "code": "\nvoid do_nothing_08009f48(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f48",
            "calling": [
                "FUN_080091d8",
                "FUN_08009270"
            ],
            "imported": false,
            "current_name": "do_nothing_08009f48"
        },
        "FUN_08004d6a": {
            "renaming": {
                "FUN_08004d6a": "do_nothing_08004d6a"
            },
            "code": "\nvoid do_nothing_08004d6a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d6a",
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "imported": false,
            "current_name": "do_nothing_08004d6a"
        },
        "FUN_08008730": {
            "renaming": {
                "FUN_08008730": "find_and_validate_input_08008730",
                "uVar1": "value_index",
                "iVar2": "input_validator_result",
                "iVar3": "value_ptr"
            },
            "code": "void find_and_validate_input_08008730(void)\n{\n  uint value_index = find_index_of_value();\n  int value_ptr = *(int *)(PTR_DAT_08008770 + value_index * 4);\n  if ((value_index < 5) && (input_validator(*(int *)(PTR_DAT_08008774 + value_index * 4), value_ptr) != -1)) {\n    validate_input(*(undefined4 *)(PTR_DAT_08008778 + (uint)*(byte *)(value_ptr + 0x44) * 4), *(int *)(value_ptr + 100) + (uint)*(ushort *)(value_ptr + 0x6a), 1);\n  }\n  return;\n}",
            "called": [
                "FUN_080086e8",
                "FUN_0800688e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008730",
            "calling": [
                "FUN_08006932"
            ],
            "imported": false,
            "current_name": "find_and_validate_input_08008730"
        },
        "FUN_08005df4": {
            "renaming": {
                "FUN_08005df4": "set_bit_and_return_08005df4",
                "param_1": "params",
                "puVar1": "param",
                "*(undefined *)((int)param_1 + 0x3d)": "*(undefined *)((int)params + 0x3d)",
                "*(undefined *)(param_1 + 0xf)": "*(undefined *)(params + 0xf)"
            },
            "code": "void set_bit_and_return_08005df4(uint **params){\n    uint *param = *params;\n    bool is_bit_set = (param[8] & 0x1111) == 0;\n    bool is_second_bit_set = (param[8] & 0x444) == 0;\n    if (is_bit_set) {\n        if (is_second_bit_set) {\n            return;\n        }\n        *param &= 0xfffffffe;\n    }\n    set_bit_and_return_08005df4_08007710(params);\n    *(undefined *)((int)params + 0x3d) = 0;\n    *(undefined *)(params + 0xf) = 0;\n}",
            "called": [
                "FUN_08007710"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005df4",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": false,
            "current_name": "set_bit_and_return_08005df4"
        },
        "FUN_08009148": {
            "renaming": {
                "FUN_08009148": "execute_functions_08009148",
                "puVar1": "function_pointer_array",
                "iVar2": "function_pointer_array_size",
                "iVar3": "i"
            },
            "code": "void execute_functions_08009148(void)\n{\n  undefined *function_pointer_array = PTR_DAT_08009180;\n  int function_pointer_array_size = (int)PTR_DAT_08009184 - (int)PTR_DAT_08009180;\n  for (int i = 0; i < function_pointer_array_size / 4; i++) {\n    (**(code **)(function_pointer_array + i * 4))();\n  }\n  do_nothing_0800a424();\n  function_pointer_array = PTR_DAT_08009188;\n  function_pointer_array_size = (int)PTR_DAT_0800918c - (int)PTR_DAT_08009188;\n  for (int i = 0; i < function_pointer_array_size / 4; i++) {\n    (**(code **)(function_pointer_array + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_0800a424",
                "FUN_08008f0e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009148",
            "calling": [
                "FUN_08003658"
            ],
            "imported": false,
            "current_name": "execute_functions_08009148"
        },
        "FUN_08005460": {
            "renaming": {
                "FUN_08005460": "check_parameters_08005460",
                "param_1": "parameters",
                "puVar1": "pointer1",
                "puVar2": "pointer2",
                "iVar3": "value1",
                "iVar4": "value2",
                "uVar5": "result",
                "uVar6": "value",
                "bVar7": "flag"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined4 check_parameters_08005460(uint *parameters)\n\n{\n  uint *pointer1;\n  uint *pointer2;\n  int value1;\n  int value2;\n  undefined4 result;\n  uint value;\n  bool flag;\n  \n  pointer1 = DAT_08005720;\n  if ((*parameters & 1) != 0) {\n    if (((DAT_08005720[1] & 0xc) == 4) ||\n       (((DAT_08005720[1] & 0xc) == 8 && ((DAT_08005720[1] & 0x10000) != 0)))) {\n      if (((*DAT_08005720 & 0x20000) != 0) && (parameters[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      value = parameters[1];\n      if (value == 0x10000) {\n        *DAT_08005720 = *DAT_08005720 | 0x10000;\n      }\n      else if (value == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (value == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        *DAT_08005720 = *DAT_08005720 & 0xfffeffff;\n        *pointer1 = *pointer1 & 0xfffbffff;\n      }\n      if (parameters[1] == 0) {\n        value1 = get_value_from_pointer_08003760();\n        while ((*DAT_08005720 & 0x20000) != 0) {\n          value2 = get_value_from_pointer_08003760();\n          if (100 < (uint)(value2 - value1)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        value1 = get_value_from_pointer_08003760();\n        while ((*DAT_08005720 & 0x20000) == 0) {\n          value2 = get_value_from_pointer_08003760();\n          if (100 < (uint)(value2 - value1)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*parameters & 2) != 0) {\n    if (((DAT_08005720[1] & 0xc) == 0) ||\n       (((DAT_08005720[1] & 0xc) == 8 && ((DAT_08005720[1] & 0x10000) == 0)))) {\n      if (((*DAT_08005720 & 2) != 0) && (parameters[4] != 1)) {\n        return 1;\n      }\n      *DAT_08005720 = *DAT_08005720 & 0xffffff07 | parameters[5] << 3;\n    }\n    else if (parameters[4] == 0) {\n      *DAT_08005724 = 0;\n      value1 = get_value_from_pointer_08003760();\n      while ((*DAT_08005720 & 2) != 0) {\n        value2 = get_value_from_pointer_08003760();\n        if (2 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005724 = 1;\n      value1 = get_value_from_pointer_08003760();\n      while ((*DAT_08005720 & 2) == 0) {\n        value2 = get_value_from_pointer_08003760();\n        if (2 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n      *DAT_08005720 = *DAT_08005720 & 0xffffff07 | parameters[5] << 3;\n    }\n  }\n  if ((*parameters & 8) != 0) {\n    if (parameters[6] == 0) {\n      *DAT_08005728 = 0;\n      value1 = get_value_from_pointer_08003760();\n      while ((DAT_08005720[9] & 2) != 0) {\n        value2 = get_value_from_pointer_08003760();\n        if (2 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005728 = 1;\n      value1 = get_value_from_pointer_08003760();\n      while ((DAT_08005720[9] & 2) == 0) {\n        value2 = get_value_from_pointer_08003760();\n        if (2 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n      calculate_and_decrement_08005434(1);\n    }\n  }\n  if ((*parameters & 4) != 0) {\n    flag = (DAT_08005720[7] & 0x10000000) == 0;\n    if (flag) {\n      DAT_08005720[7] = DAT_08005720[7] | 0x10000000;\n    }\n    if ((*DAT_0800572c & 0x100) == 0) {\n      *DAT_0800572c = *DAT_0800572c | 0x100;\n      value1 = get_value_from_pointer_08003760();\n      while ((*DAT_0800572c & 0x100) == 0) {\n        value2 = get_value_from_pointer_08003760();\n        if (100 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n    }\n    pointer2 = DAT_08005838;\n    pointer1 = DAT_08005720;\n    value = parameters[3];\n    if (value == 1) {\n      DAT_08005720[8] = DAT_08005720[8] | 1;\n    }\n    else if (value == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (value == 5) {\n      DAT_08005838[8] = DAT_08005838[8] | 4;\n      pointer2[8] = pointer2[8] | 1;\n    }\n    else {\n      DAT_08005720[8] = DAT_08005720[8] & 0xfffffffe;\n      pointer1[8] = pointer1[8] & 0xfffffffb;\n    }\n    if (parameters[3] == 0) {\n      value1 = get_value_from_pointer_08003760();\n      while ((DAT_08005838[8] & 2) != 0) {\n        value2 = get_value_from_pointer_08003760();\n        if (5000 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      value1 = get_value_from_pointer_08003760();\n      while ((DAT_08005720[8] & 2) == 0) {\n        value2 = get_value_from_pointer_08003760();\n        if (5000 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n    }\n    if (flag) {\n      DAT_08005838[7] = DAT_08005838[7] & 0xefffffff;\n    }\n  }\n  if (parameters[7] == 0) {\n    result = 0;\n  }\n  else if ((DAT_08005838[1] & 0xc) == 8) {\n    result = 1;\n  }\n  else if (parameters[7] == 2) {\n    *DAT_0800583c = 0;\n    value1 = get_value_from_pointer_08003760();\n    do {\n      if ((*DAT_08005838 & 0x2000000) == 0) {\n        if (parameters[8] == 0x10000) {\n          DAT_08005838[1] = DAT_08005838[1] & 0xfffdffff | parameters[2];\n        }\n        DAT_08005838[1] = DAT_08005838[1] & 0xffc2ffff | parameters[8] | parameters[9];\n        *DAT_0800583c = 1;\n        value1 = get_value_from_pointer_08003760();\n        do {\n          if ((*DAT_08005838 & 0x2000000) != 0) {\n            return 0;\n          }\n          value2 = get_value_from_pointer_08003760();\n        } while ((uint)(value2 - value1) < 3);\n        return 3;\n      }\n      value2 = get_value_from_pointer_08003760();\n    } while ((uint)(value2 - value1) < 3);\n    result = 3;\n  }\n  else {\n    *DAT_0800583c = 0;\n    value1 = get_value_from_pointer_08003760();\n    do {\n      if ((*DAT_08005838 & 0x2000000) == 0) {\n        return 0;\n      }\n      value2 = get_value_from_pointer_08003760();\n    } while ((uint)(value2 - value1) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_08005434",
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005460",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "check_parameters_08005460"
        },
        "FUN_08008854": {
            "renaming": {
                "FUN_08008854": "return_zero_08008854"
            },
            "code": "int return_zero_08008854() {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008854",
            "calling": [
                "FUN_0800a130"
            ],
            "imported": false,
            "current_name": "return_zero_08008854"
        },
        "FUN_080064cc": {
            "renaming": {
                "FUN_080064cc": "process_data_080064cc",
                "param_1": "data",
                "pbVar2": "byte_ptr",
                "sVar1": "counter",
                "*pbVar2": "*byte_ptr",
                "*param_1": "*data",
                "PTR_DAT_0804a008": "data_ptr",
                "PTR_DAT_0804a004": "byte_ptr",
                "PTR_DAT_0804a00c": "data_ptr",
                "PTR_DAT_0804a010": "counter"
            },
            "code": "int process_data_080064cc(int *data)\n{\n    char first_char = *(char *)((int)data + 0x39);\n    if (first_char != '!') {\n        return 2;\n    }\n    int data_type = data[2];\n    int *PTR_DAT_0804a008 = (int *)(*data + 4);\n    if (data_type == 0x1000) {\n        *PTR_DAT_0804a008 = *(unsigned short *)data[8] & 0x1ff;\n        if (data[4] == 0) {\n            data[8] += 2;\n        }\n        else {\n            data[8] += 1;\n        }\n    }\n    else {\n        unsigned char *PTR_DAT_0804a004 = (unsigned char *)data[8];\n        data[8] = (int)(PTR_DAT_0804a004 + 1);\n        *PTR_DAT_0804a008 = (unsigned int)*PTR_DAT_0804a004;\n    }\n    short PTR_DAT_0804a010 = *(short *)((int)data + 0x26) - 1;\n    *(short *)((int)data + 0x26) = PTR_DAT_0804a010;\n    if (PTR_DAT_0804a010 == 0) {\n        *PTR_DAT_0804a008 &= 0xffffff7f;\n        *PTR_DAT_0804a008 |= 0x40;\n        return 0;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064cc",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "process_data_080064cc"
        },
        "FUN_08004d6c": {
            "renaming": {
                "FUN_08004d6c": "modify_bits_according_to_condition_08004d6c",
                "param_1": "param",
                "puVar1": "ptr1",
                "condition": "condition",
                "length": "length"
            },
            "code": "uint32_t modify_bits_according_to_condition_08004d6c(uint32_t **param_1){\n  uint32_t *ptr1;\n  uint32_t condition = *(char *)((int)param_1 + 0x3d);\n  uint32_t length = *(ushort *)((int)param_1 + 0x2a);\n\n  if (condition == '\"') {\n    if (length < 4) {\n      if (length - 2 < 2) {\n        if (param_1[0xb] == (uint32_t *)0x2) {\n          **param_1 |= 0x400;\n        }\n        else {\n          **param_1 &= 0xfffffbff;\n          **param_1 |= 0x800;\n        }\n        (*param_1)[1] &= 0xfffffbff;\n      }\n      else {\n        if (param_1[0xb] == (uint32_t *)0x2) {\n          **param_1 |= 0x400;\n        }\n        else {\n          **param_1 &= 0xfffffbff;\n        }\n        (*param_1)[1] &= 0xfffff8ff;\n        ptr1 = param_1[9];\n        param_1[9] = (uint32_t *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)(*param_1)[4];\n        *(short *)((int)param_1 + 0x2a) -= 1;\n        *(undefined *)((int)param_1 + 0x3d) = 0x20;\n        param_1[0xc] = (uint32_t *)0x0;\n        if (*(char *)((int)param_1 + 0x3e) == '@') {\n          *(undefined *)((int)param_1 + 0x3e) = 0;\n          do_nothing_08004d6a();\n        }\n        else {\n          *(undefined *)((int)param_1 + 0x3e) = 0;\n          do_nothing_08004a20();\n        }\n      }\n    }\n    else {\n      ptr1 = param_1[9];\n      param_1[9] = (uint32_t *)((int)ptr1 + 1);\n      *(char *)ptr1 = (char)(*param_1)[4];\n      *(short *)((int)param_1 + 0x2a) -= 1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d6c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "modify_bits_according_to_condition_08004d6c"
        },
        "FUN_08004ac2": {
            "renaming": {
                "FUN_08004ac2": "process_input_08004ac2",
                "param_1": "input_data_ptr",
                "param_2": "input_flag",
                "param_3": "input_value",
                "param_4": "input_mask",
                "uVar1": "data_value",
                "uVar2": "data_mask"
            },
            "code": "int process_input_08004ac2(int *input_data_ptr, int input_flag, int input_value, int input_mask, int input_param) {\n    int data_value = 0;\n    int data_mask = *(int *)(*input_data_ptr + 0x18);\n    if ((data_mask & 0x80) == 0) {\n        data_value = *(int *)(input_data_ptr + 3);\n    }\n    else {\n        data_value = *(int *)(input_data_ptr + 6);\n    }\n    process_input_08004ac2_08007fa0(input_data_ptr, (data_mask & 4) == 0, data_value, data_mask, input_param);\n    return 0;\n}",
            "called": [
                "FUN_08007fa0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ac2",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_08004ac2"
        },
        "FUN_08008850": {
            "renaming": {
                "FUN_08008850": "return_one_08008850",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int return_one_08008850() {\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008850",
            "calling": [
                "FUN_0800a110"
            ],
            "imported": false,
            "current_name": "return_one_08008850"
        },
        "FUN_08006ca8": {
            "renaming": {
                "FUN_08006ca8": "decode_and_set_flag_08006ca8",
                "param_1": "flag",
                "param_2": "flag_value",
                "iVar2": "current_flag",
                "uVar5": "flag_param",
                "uVar4": "flag_or/flag_or_else",
                "puVar1": "flag_ptr",
                "uVar3": "flag_set",
                "local_18": "local_flag",
                "local_14": "unused_var",
                "local_10": "unused_var"
            },
            "code": "void decode_and_set_flag_08006ca8(uint *flag, uint flag_value)\n{\n  uint current_flag = DAT_08006d20;\n  uint flag_param = *flag;\n  if (flag_param == DAT_08006d14) {\n    uint flag_or = *(uint *)(DAT_08006d20 + 0x18) | 0x200;\n    *(uint *)(DAT_08006d20 + 0x18) = flag_or;\n    flag_param = *(uint *)(current_flag + 0x18) & 0x200;\n  }\n  else {\n    uint flag_else = DAT_08006d18;\n    if (flag_param == DAT_08006d18) {\n      uint flag_or_else = *(uint *)(DAT_08006d20 + 0x18) | 0x400;\n      *(uint *)(DAT_08006d20 + 0x18) = flag_or_else;\n      flag_param = *(uint *)(current_flag + 0x18) & 0x400;\n    }\n  }\n  undefined *flag_ptr = PTR_DAT_08006d1c;\n  uint flag_set = set_flag_08006bb8((uint)((int)(char)*PTR_DAT_08006d1c << 0x18) >> 0x1c,flag_value,flag_param,*(uint *)(current_flag + 0x18));\n  uint local_flag = 1 << ((byte)*flag_ptr & 0xf) & 0xffff;\n  undefined4 local_14 = 3;\n  undefined4 local_10 = 0;\n  decode_080040e8(flag_set,&local_flag);\n  return;\n}",
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ca8",
            "calling": [
                "FUN_08003bd8"
            ],
            "imported": false,
            "current_name": "decode_and_set_flag_08006ca8"
        },
        "FUN_08002fc2": {
            "renaming": {
                "FUN_08002fc2": "store_value_at_offset_08002fc2",
                "param_1": "base_address",
                "param_2": "offset",
                "param_3": "value"
            },
            "code": "void store_value_at_offset_08002fc2(int base_address, int offset, int value)\n{\n  int* address = (int*)(base_address + (offset + 0x42) * 4);\n  *address = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fc2",
            "calling": [
                "FUN_0800021a",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "store_value_at_offset_08002fc2"
        },
        "FUN_08008afa": {
            "renaming": {
                "FUN_08008afa": "calculate_value_at_offset_08008afa",
                "param_1": "address",
                "*(short *)(param_1 + 0x134)": "first_value",
                "*(short *)(param_1 + 0x136)": "second_value",
                "result": "result"
            },
            "code": "ushort calculate_value_at_offset_08008afa(int address)\n{\n    short first_value = *(short *)(address + 0x134);\n    short second_value = *(short *)(address + 0x136);\n    short result = (first_value + 0x40) - second_value;\n    return result & 0x3f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008afa",
            "calling": [
                "FUN_08008bf4"
            ],
            "imported": false,
            "current_name": "calculate_value_at_offset_08008afa"
        },
        "FUN_08003048": {
            "renaming": {
                "FUN_08003048": "process_and_copy_data_08003048",
                "param_1": "source_data",
                "param_2": "dest_data",
                "param_3": "data_size",
                "param_4": "param_4",
                "puVar1": "source_ptr"
            },
            "code": "void process_and_copy_data_08003048(void* source_data, void* dest_data, size_t data_size, int param_4)\n{\n  void *source_ptr = PTR_DAT_08003068;\n  decode_and_process_data_08008c44(source_ptr, dest_data, data_size, param_4, param_4);\n  process_data_08003002(source_data);\n  copy_and_encode_data_08002e26(source_data, source_ptr);\n  return;\n}",
            "called": [
                "FUN_08003002",
                "FUN_08008c44",
                "FUN_08002e26"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003048",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "process_and_copy_data_08003048"
        },
        "FUN_0800937c": {
            "renaming": {
                "FUN_0800937c": "process_data_0800937c",
                "param_1": "block_pointer",
                "param_2": "data_pointer",
                "param_3": "format_string",
                "param_4": "result",
                "puVar1": "ptr_var1",
                "iVar2": "result_code",
                "piVar3": "int_pointer",
                "bVar4": "bool_var",
                "pbVar5": "byte_pointer_1",
                "pbVar6": "byte_pointer_2",
                "unaff_r9": "unused_register",
                "iVar7": "int_var",
                "local_8c": "result_pointer",
                "local_88": "flag",
                "local_84": "precision",
                "local_80": "width",
                "local_7c": "arg_index",
                "local_74": "bytes_written",
                "local_70": "specifier",
                "local_6f": "space",
                "local_6e": "plus",
                "local_45": "prefix",
                "local_30": "length_modifier"
            },
            "code": "\nint process_data_0800937c(int block_pointer,undefined *data_pointer,byte *format_string,int *result)\n\n{\n  undefined *ptr_var1;\n  int result_code;\n  int *int_pointer;\n  bool bool_var;\n  byte *byte_pointer_1;\n  byte *byte_pointer_2;\n  int unused_register;\n  int int_var;\n  int *result_pointer;\n  uint flag;\n  int precision;\n  undefined4 width;\n  int arg_index;\n  int bytes_written;\n  byte specifier;\n  undefined space;\n  undefined plus;\n  undefined prefix;\n  undefined4 length_modifier;\n  \n  result_pointer = result;\n  if ((block_pointer != 0) && (*(int *)(block_pointer + 0x18) == 0)) {\n    initialize_block_08009d50();\n  }\n  if (data_pointer == PTR_DAT_08009588) {\n    data_pointer = *(undefined **)(block_pointer + 4);\n  }\n  else if (data_pointer == PTR_DAT_08009590) {\n    data_pointer = *(undefined **)(block_pointer + 8);\n  }\n  else if (data_pointer == PTR_DAT_08009594) {\n    data_pointer = *(undefined **)(block_pointer + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(data_pointer + 0xc) << 0x1c)) || (*(int *)(data_pointer + 0x10) == 0)) &&\n     (int_var = process_data_0800937c_08009a80(block_pointer,data_pointer), int_var != 0)) {\n    return -1;\n  }\n  bytes_written = 0;\n  space = 0x20;\n  plus = 0x30;\n  byte_pointer_1 = format_string;\nLAB_080093be:\n  byte_pointer_2 = byte_pointer_1;\n  if (*byte_pointer_2 != 0) goto LAB_08009474;\n  goto LAB_080093c8;\nLAB_08009474:\n  byte_pointer_1 = byte_pointer_2 + 1;\n  if (*byte_pointer_2 != 0x25) goto LAB_080093be;\nLAB_080093c8:\n  int_var = (int)byte_pointer_2 - (int)format_string;\n  if (int_var != 0) {\n    result_code = process_and_increment_data_08009358(block_pointer,data_pointer,format_string,int_var);\n    if (result_code == -1) {\nLAB_08009568:\n      if ((int)((uint)*(ushort *)(data_pointer + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return bytes_written;\n    }\n    bytes_written = bytes_written + int_var;\n  }\n  if (*byte_pointer_2 == 0) goto LAB_08009568;\n  flag = 0;\n  arg_index = 0;\n  precision = -1;\n  width = 0;\n  prefix = 0;\n  length_modifier = 0;\n  byte_pointer_1 = byte_pointer_2 + 1;\n  while( true ) {\n    int_var = find_character_08009f2c(PTR_s___0__0800958c,*byte_pointer_1);\n    ptr_var1 = PTR_DAT_08009598;\n    format_string = byte_pointer_1 + 1;\n    if (int_var == 0) break;\n    flag = 1 << (int_var - (int)PTR_s___0__0800958c & 0xffU) | flag;\n    byte_pointer_1 = format_string;\n  }\n  if ((int)(flag << 0x1b) < 0) {\n    prefix = 0x20;\n  }\n  if ((int)(flag << 0x1c) < 0) {\n    prefix = 0x2b;\n  }\n  if (*byte_pointer_1 == 0x2a) {\n    int_pointer = result_pointer + 1;\n    int_var = *result_pointer;\n    result_pointer = int_pointer;\n    if (-1 < int_var) goto LAB_08009498;\n    arg_index = -int_var;\n    flag = flag | 2;\n  }\n  else {\n    bool_var = false;\n    int_var = arg_index;\n    format_string = byte_pointer_1;\n    while( true ) {\n      if (9 < *format_string - 0x30) break;\n      int_var = int_var * 10 + (*format_string - 0x30);\n      bool_var = true;\n      format_string = format_string + 1;\n    }\n    if (bool_var) {\nLAB_08009498:\n      arg_index = int_var;\n    }\n  }\n  if (*format_string == 0x2e) {\n    if (format_string[1] == 0x2a) {\n      format_string = format_string + 2;\n      int_pointer = result_pointer + 1;\n      precision = *result_pointer;\n      result_pointer = int_pointer;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      bool_var = false;\n      int_var = 0;\n      precision = 0;\n      while( true ) {\n        format_string = format_string + 1;\n        if (9 < *format_string - 0x30) break;\n        int_var = int_var * 10 + (*format_string - 0x30);\n        bool_var = true;\n      }\n      if (bool_var) {\n        precision = int_var;\n      }\n    }\n  }\n  int_var = find_character_08009f2c(PTR_DAT_08009598,*format_string,3);\n  if (int_var != 0) {\n    format_string = format_string + 1;\n    flag = flag | 0x40 << (int_var - (int)ptr_var1 & 0xffU);\n  }\n  specifier = *format_string;\n  format_string = format_string + 1;\n  int_var = find_character_08009f2c(PTR_s_efgEFG_0800959c,specifier,6);\n  if (int_var == 0) {\n    int_var = parse_and_format_08009698(block_pointer,&flag,data_pointer,DAT_080095a4,&result_pointer);\n  }\n  else {\n    int_var = block_pointer;\n    if (DAT_080095a0 == 0) {\n      result_pointer = (int *)(((int)result_pointer + 7U & 0xfffffff8) + 8);\n      int_var = unused_register;\n      goto LAB_0800951a;\n    }\n  }\n  if (int_var == -1) goto LAB_08009568;\nLAB_0800951a:\n  bytes_written = bytes_written + int_var;\n  byte_pointer_1 = format_string;\n  unused_register = int_var;\n  goto LAB_080093be;\n}\n\n",
            "called": [
                "FUN_08009f2c",
                "FUN_08009698",
                "FUN_08009358",
                "FUN_08009a80",
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800937c",
            "calling": [
                "FUN_080098d8",
                "FUN_08009124"
            ],
            "imported": false,
            "current_name": "process_data_0800937c"
        },
        "FUN_08000214": {
            "renaming": {
                "FUN_08000214": "decode_data_if_valid_index_08000214",
                "param_1": "index",
                "param_2": "data",
                "param_3": "unused",
                "param_4": "unused",
                "iVar2": "value",
                "bVar1": "valid",
                "PTR_DAT_080002d8": "data_pointer",
                "PTR_DAT_080002dc": "character_array",
                "PTR_DAT_080002e8": "search_array",
                "PTR_DAT_080002e0": "byte_array",
                "PTR_DAT_080002e4": "calculate_array",
                "get_value_at_offset_08002fa0": "get_value_at_offset",
                "check_character_in_array_080036ac": "check_character_in_array",
                "search_for_value_0800738a": "search_for_value",
                "decode_data_080088e0": "decode_data",
                "store_value_at_offset_08002fc2": "store_value_at_offset",
                "calculate_and_set_value_080026b0": "calculate_and_set_value"
            },
            "code": "void decode_data_if_valid_index_08000214(uint8_t index, uint32_t data) {\n  if (index > 59) {\n    return;\n  }\n  uint8_t value = PTR_DAT_080002dc[index];\n  if (get_value_at_offset_08002fa0(PTR_DAT_080002d8, index, 0, 0, 0) == 3) {\n    if (index < 60) {\n      if (value == (uint8_t)-1) {\n        return;\n      }\n      else {\n        bool valid = check_character_in_array_080036ac((int)(char)value);\n        if (!valid) {\n          return;\n        }\n        else {\n          bool found = search_for_value_0800738a((int)(char)value, PTR_DAT_080002e8);\n          if (!found) {\n            return;\n          }\n        }\n      }\n    }\n    decode_data_080088e0(index, data);\n    store_value_at_offset_08002fc2(PTR_DAT_080002d8, index, data);\n  }\n  else if (get_value_at_offset_08002fa0(PTR_DAT_080002d8, index, 0, 0, 0) == 4) {\n    if (index < 60) {\n      if (value == (uint8_t)-1) {\n        return;\n      }\n      else {\n        bool valid = check_character_in_array_080036ac((int)(char)value);\n        if (!valid) {\n          return;\n        }\n        else {\n          bool found = true;\n          calculate_and_set_value_080026b0(PTR_DAT_080002e4 + (uint)(byte)PTR_DAT_080002e0[index] * 3, data);\n        }\n      }\n    }\n    store_value_at_offset_08002fc2(PTR_DAT_080002d8, index, data);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_0800021a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000214",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "decode_data_if_valid_index_08000214"
        },
        "FUN_08003724": {
            "renaming": {
                "FUN_08003724": "enable_data_updates_08003724",
                "PTR_DAT_08003744": "data_ptr",
                "update_data_08003f0c": "update_data",
                "validate_input_080036d8": "validate_input",
                "do_nothing_080036d4": "do_nothing"
            },
            "code": "int enable_flag = 0x10;\n\nvoid enable_data_updates_08003724(void)\n{\n  *PTR_DAT_08003744 = *PTR_DAT_08003744 | enable_flag;\n  update_data(3);\n  validate_input(0xf);\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08003f0c",
                "FUN_080036d8",
                "FUN_080036d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003724",
            "calling": [
                "FUN_080072fa"
            ],
            "imported": false,
            "current_name": "enable_data_updates_08003724"
        },
        "FUN_080038dc": {
            "renaming": {
                "FUN_080038dc": "get_value_from_offset_080038dc",
                "param_1": "data",
                "*param_1": "pointer_to_data",
                "*(undefined4 *)(*param_1 + 0x4c)": "*pointer_to_data",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int get_value_from_offset_080038dc(int *data)\n{\n    int offset = 0x4c;\n    int *pointer_to_data = (int *)(*data + offset);\n    return *pointer_to_data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038dc",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "get_value_from_offset_080038dc"
        },
        "FUN_080025ac": {
            "renaming": {
                "FUN_080025ac": "decode_character_080025ac",
                "*param_1": "input",
                "param_2": "flags",
                "param_3": "offset1",
                "param_4": "offset2",
                "uVar1": "mask",
                "uVar2": "index",
                "uVar3": "shifted_offset1",
                "iVar4": "array_index"
            },
            "code": "byte decode_character_080025ac(byte *input, uint flags, int offset1, int offset2)\n{\n  uint index;\n  uint mask;\n  uint shifted_offset1;\n  uint shifted_offset2;\n  int array_index;\n  \n  if (*input < 0xc) {\n    decode_character_080025ac_flags(flags, 1, offset1, *input, offset2);\n    index = (uint)*input;\n    mask = (byte)PTR_DAT_08002628[index * 8] & 0xffffffc0 | flags & 0x3f;\n    PTR_DAT_08002628[index * 8] = (char)mask;\n    shifted_offset1 = -offset1 + 0x220;\n    if (shifted_offset1 < 0) {\n      shifted_offset1 = -offset1 + 0x223;\n    }\n    input[1] = (byte)((uint)(shifted_offset1 << 0x16) >> 0x18);\n    shifted_offset2 = -offset2 + 0x960;\n    if (shifted_offset2 < 0) {\n      shifted_offset2 = -offset2 + 0x963;\n    }\n    input[2] = (byte)((uint)(shifted_offset2 << 0x16) >> 0x18);\n    array_index = check_if_bit_set_in_array((uint)((ulonglong)DAT_0800262c * (ulonglong)*input >> 0x23), mask, index, (int)((ulonglong)DAT_0800262c * (ulonglong)*input));\n    if (array_index == 0) {\n      PTR_DAT_08002630[0x44] = (char)((ulonglong)DAT_0800262c * (ulonglong)*input >> 0x23);\n      initialize_device_settings();\n    }\n    PTR_DAT_08002628[(uint)*input * 8] = PTR_DAT_08002628[(uint)*input * 8] | 0x40;\n  }\n  return *input;\n}",
            "called": [
                "FUN_0800242c",
                "FUN_08008990",
                "FUN_08002400"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025ac",
            "calling": [
                "FUN_08000500",
                "FUN_08002634"
            ],
            "imported": false,
            "current_name": "decode_character_080025ac"
        },
        "FUN_08002634": {
            "renaming": {
                "FUN_08002634": "decode_and_print_string_08002634",
                "param_1": "str",
                "param_2": "length",
                "param_3": "start_index",
                "param_4": "end_index",
                "decode_character_080025ac": "decode_character",
                "0x220": "start_index",
                "0x960": "end_index",
                "output_buffer": "output_buffer"
            },
            "code": "void decode_and_print_string_08002634(undefined4 str, undefined4 length, undefined4 start_index, undefined4 end_index, undefined4 output_buffer) {\n  decode_character(str, length, start_index, end_index, output_buffer);\n  return;\n}",
            "called": [
                "FUN_080025ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002634",
            "calling": [
                "FUN_08000500"
            ],
            "imported": false,
            "current_name": "decode_and_print_string_08002634"
        },
        "FUN_08002f0a": {
            "renaming": {
                "FUN_08002f0a": "send_encoded_data_08002f0a",
                "param_1": "data",
                "encode_and_send_data_0800325a": "encode_and_send_data"
            },
            "code": "void send_encoded_data_08002f0a(int data)\n{\n    int encoded_data = data + 0x40;\n    encode_and_send_data(encoded_data);\n    return;\n}",
            "called": [
                "FUN_0800325a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f0a",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "send_encoded_data_08002f0a"
        },
        "FUN_08005bb8": {
            "renaming": {
                "FUN_08005bb8": "calculate_value_08005bb8",
                "param_1": "input",
                "uVar1": "result",
                "local_24": "local_value",
                "abStack_20": "stack_array",
                "uStack_1c": "stack_var_1",
                "uStack_18": "stack_var_2",
                "uStack_14": "stack_var_3"
            },
            "code": "uint calculate_value_08005bb8(int input) {\n  uint result;\n  undefined2 local_value;\n  byte stack_array[4];\n  undefined4 stack_var_1;\n  undefined4 stack_var_2;\n  undefined4 stack_var_3;\n  stack_var_3 = *(undefined4 *)(PTR_DAT_08005ca0 + 8);\n  stack_var_2 = *(undefined4 *)(PTR_DAT_08005ca0 + 4);\n  stack_var_1 = *(undefined4 *)PTR_DAT_08005ca0;\n  local_value = *(undefined2 *)(PTR_DAT_08005ca0 + 0x10);\n  if (input == 2) {\n    result = get_shifted_value_08005a48();\n    result = result / ((((DAT_08005ca4[1] << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input == 0x10) {\n    if ((*DAT_08005ca4 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      result = DAT_08005cb0;\n      if ((DAT_08005ca4[1] & 0x10000) != 0) {\n        result = DAT_08005ca8 / *(byte *)((int)&local_value - ((int)(DAT_08005ca4[1] << 0xe) >> 0x1f));\n      }\n      result = result * stack_array[(DAT_08005ca4[1] << 10) >> 0x1c];\n      if ((DAT_08005ca4[1] & 0x400000) == 0) {\n        result = (uint)((ulonglong)DAT_08005cac * (ulonglong)(result * 2) >> 0x21);\n      }\n    }\n  }\n  else if (input == 1) {\n    if ((DAT_08005ca4[8] & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else {\n      result = DAT_08005ca4[8] & 0x300;\n      if ((result == 0x200) && ((DAT_08005ca4[9] & 2) != 0)) {\n        result = 32000;\n      }\n      else if (result == 0x300) {\n        if ((*DAT_08005ca4 & 0x20000) == 0) {\n          result = 0;\n        }\n        else {\n          result = 0xf424;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bb8",
            "calling": [
                "FUN_08003e20",
                "FUN_0800376c"
            ],
            "imported": false,
            "current_name": "calculate_value_08005bb8"
        },
        "FUN_08007648": {
            "renaming": {
                "FUN_08007648": "initialize_device_settings_08007648",
                "param_1": "device_settings",
                "param_2": "clock_source",
                "param_3": "response_timeout",
                "param_4": "device_id",
                "cVar1": "response_bit",
                "uVar2": "clock_cycles",
                "iVar3": "update_result",
                "puVar4": "device_settings_ptr",
                "local_34": "response_bit_value",
                "local_30": "response_value",
                "local_2c": "zero_value_1",
                "local_28": "zero_value_2",
                "local_24": "zero_value_3",
                "local_20": "zero_value_4",
                "local_1c": "zero_value_5",
                "DAT_080076dc": "CLOCK_MULTIPLIER",
                "check_clock_source_080075dc": "check_clock_source",
                "determine_response_08007544": "determine_response_value",
                "decode_and_store_bits_08003f30": "decode_and_store_bits",
                "set_bit_at_position_08003f94": "set_bit_at_position",
                "check_settings_and_update_08006060": "check_settings_and_update",
                "update_data_structure_08006128": "update_data_structure",
                "set_register_bits_08006280": "set_register_bits",
                "PTR_080076dc": "CLOCK_MULTIPLIER",
                "PTR_080076e0": "DEVICE_SETTINGS_INITIAL_VALUE"
            },
            "code": "void initialize_device_settings_08007648(uint32_t *device_settings, uint32_t clock_source, uint32_t response_timeout, uint32_t device_id) {\n  uint32_t response_bit;\n  uint32_t response_value;\n  uint32_t clock_cycles;\n  uint32_t *device_settings_ptr;\n  uint32_t zero_value = 0;\n  \n  response_bit = 0xe;\n  response_value = determine_response_value(*device_settings);\n  decode_and_store_bits_08003f30(response_value, response_bit, zero_value);\n  response_value = determine_response_value(*device_settings);\n  set_bit_at_position_08003f94(response_value);\n  \n  clock_cycles = check_clock_source();\n  device_settings[2] = (uint32_t)(((uint64_t)DAT_080076dc * (uint64_t)clock_cycles) >> 0x32) - 1;\n  \n  device_settings[0] = PTR_080076e0;\n  device_settings[1] = PTR_080076e0;\n  device_settings[4] = clock_source;\n  device_settings[5] = zero_value;\n  device_settings[3] = zero_value;\n  device_settings[6] = zero_value;\n  device_settings[19] = device_id;\n  \n  device_settings_ptr = device_settings + 1;\n  \n  if ((check_settings_and_update_08006060(device_settings_ptr) == 0) && (update_data_structure_08006128(device_settings_ptr, &response_bit, zero_value) == 0)) {\n    set_register_bits_08006280(device_settings_ptr, zero_value);\n  }\n}",
            "called": [
                "FUN_08006128",
                "FUN_08006280",
                "FUN_08007544",
                "FUN_08003f30",
                "FUN_080075dc",
                "FUN_08003f94",
                "FUN_08006060"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007648",
            "calling": [
                "FUN_0800242c"
            ],
            "imported": false,
            "current_name": "initialize_device_settings_08007648"
        },
        "FUN_08008858": {
            "renaming": {
                "FUN_08008858": "return_zero_08008858"
            },
            "code": "int return_zero_08008858() {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008858",
            "calling": [
                "FUN_0800a168"
            ],
            "imported": false,
            "current_name": "return_zero_08008858"
        },
        "FUN_08004a20": {
            "renaming": {
                "FUN_08004a20": "do_nothing_08004a20"
            },
            "code": "\nvoid do_nothing_08004a20(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a20",
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a20"
        },
        "FUN_080063c0": {
            "renaming": {
                "FUN_080063c0": "set_bit_and_update_080063c0",
                "param_1": "data",
                "param_2": "bit_to_set",
                "puVar1": "data_ptr",
                "DAT_0800641c": "PTR_DAT_0800641c"
            },
            "code": "uint32_t set_bit_and_update_080063c0(uint32_t **data, uint32_t bit_to_set)\\n\\\n{\\n\\\n    uint32_t *data_ptr = *data;\\n\\\n    set_bit_in_register_08006262(data_ptr, bit_to_set, 0);\\n\\\n    if (((data_ptr == DAT_0800641c) && ((data_ptr[8] & 0x1111) == 0)) && ((data_ptr[8] & 0x444) == 0)) {\\n\\\n        data_ptr[17] &= 0xffff7fff;\\n\\\n    }\\n\\\n    if (((data_ptr[8] & 0x1111) == 0) && ((data_ptr[8] & 0x444) == 0)) {\\n\\\n        *data_ptr &= 0xfffffffe;\\n\\\n    }\\n\\\n    *(uint8_t *)((int)data + 0x3d) = 1;\\n\\\n    return 0;\\n\\\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080063c0",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": false,
            "current_name": "set_bit_and_update_080063c0"
        },
        "FUN_08004a24": {
            "renaming": {
                "FUN_08004a24": "process_input_08004a24",
                "param_1": "input_array",
                "cVar1": "closing_parenthesis",
                "pbVar2": "byte_array"
            },
            "code": "int process_input_08004a24(int *input_array) {\n  char closing_parenthesis = *(char *)((int)input_array + 0x3d);\n  if (*(short *)((int)input_array + 0x2a) != 0) {\n    byte *byte_array = (byte *)input_array[9];\n    input_array[9] = (int)(byte_array + 1);\n    *(uint *)(*input_array + 0x10) = (uint)*byte_array;\n    *(short *)((int)input_array + 0x2a) = *(short *)((int)input_array + 0x2a) - 1;\n    if ((*(short *)((int)input_array + 0x2a) == 0) && (closing_parenthesis == ')')) {\n      *(uint *)(*input_array + 4) = *(uint *)(*input_array + 4) & 0xfffffbff;\n      input_array[0xc] = 0x21;\n      *(undefined *)((int)input_array + 0x3d) = 0x28;\n      do_nothing_08004a22();\n    }\n    return 0;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a22"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a24",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_08004a24"
        },
        "FUN_08004a22": {
            "renaming": {
                "FUN_08004a22": "do_nothing_08004a22"
            },
            "code": "\nvoid do_nothing_08004a22(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a22",
            "calling": [
                "FUN_08004aec",
                "FUN_08004a24"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a22"
        },
        "FUN_08002fba": {
            "renaming": {
                "FUN_08002fba": "get_value_at_offset_08002fba",
                "param_1": "base_address",
                "param_2": "offset",
                "undefined4": "int",
                "*": "",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int get_value_at_offset_08002fba(int base_address, int offset) {\n    int value_address = base_address + (offset + 0x42) * sizeof(int);\n    return *(int *)(value_address);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fba",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08002fba"
        },
        "FUN_080090cc": {
            "renaming": {
                "FUN_080090cc": "process_data_and_update_results_08009124_wrapper_080090cc",
                "param_1": "mem_address",
                "param_2": "assertion_failed_file",
                "param_3": "param_3",
                "param_4": "data_size",
                "uVar1": "mem_address2",
                "puVar2": "function_name2",
                "uVar3": "process_data_and_wait_08009b5c_result"
            },
            "code": "void process_data_and_update_results_08009124_wrapper_080090cc(undefined4 mem_address, undefined *assertion_failed_file, undefined4 param_3, undefined4 param_1, undefined4 param_2, undefined *function_name, undefined *data, undefined4 data_size)\n{\n  undefined4 mem_address2 = *(undefined4 *)(*(int *)PTR_PTR_DAT_080090f8 + 0xc);\n  undefined *function_name2 = PTR_s___function__080090fc;\n  if (data == (undefined *)0x0) goto LAB_080090f0;\n  do {\n    process_data_and_update_results_08009124(mem_address2, assertion_failed_file, param_3, param_1, param_2, function_name2, data, data_size);\n    undefined8 uVar3 = process_data_and_wait_08009b5c();\n    param_2 = (undefined4)((ulonglong)uVar3 >> 0x20);\n    mem_address2 = (undefined4)uVar3;\n  } while( true );\n\nLAB_080090f0:\n  data = PTR_s__08009104;\n  function_name2 = PTR_s__08009104;\n}",
            "called": [
                "FUN_08009b5c",
                "FUN_08009124"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090cc",
            "calling": [
                "FUN_08008c44"
            ],
            "imported": false,
            "current_name": "process_data_and_update_results_08009124_wrapper_080090cc"
        },
        "FUN_080049e0": {
            "renaming": {
                "FUN_080049e0": "set_bit_and_flags_080049e0",
                "param_1": "pointer_to_pointer",
                "puVar1": "pointer"
            },
            "code": "int set_bit_and_flags_080049e0(uint **pointer_to_pointer){\n  uint *pointer = *pointer_to_pointer;\n  if (*(char *)((int)pointer_to_pointer + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)pointer_to_pointer + 0x3d) = '(';\n  if ((*pointer & 1) == 0) {\n    *pointer = *pointer | 1;\n  }\n  **pointer_to_pointer = **pointer_to_pointer | 0x400;\n  (*pointer_to_pointer)[1] = (*pointer_to_pointer)[1] | 0x300;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049e0",
            "calling": [
                "FUN_08007ff0",
                "FUN_08007f7c",
                "FUN_08008020",
                "FUN_08007f8e"
            ],
            "imported": false,
            "current_name": "set_bit_and_flags_080049e0"
        },
        "FUN_08006d24": {
            "renaming": {
                "FUN_08006d24": "set_permissions_08006d24",
                "param_1": "permission_value",
                "iVar1": "current_permission"
            },
            "code": "void set_permissions_08006d24(int *permission_value)\n{\n  int current_permission = DAT_08006d7c;\n  if (*permission_value != DAT_08006d74) {\n    if (*permission_value == DAT_08006d78) {\n      *(uint *)(DAT_08006d7c + 0xc) |= 0x400;\n      *(uint *)(current_permission + 0xc) &= 0xfffffbff;\n      *(uint *)(current_permission + 0x18) &= 0xfffffbff;\n      *(uint *)(current_permission + 0x18) &= 0xfffffbff;\n    }\n    return;\n  }\n  *(uint *)(DAT_08006d7c + 0xc) |= 0x200;\n  *(uint *)(current_permission + 0xc) &= 0xfffffdff;\n  *(uint *)(current_permission + 0x18) &= 0xfffffdff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d24",
            "calling": [
                "FUN_08003ce8"
            ],
            "imported": false,
            "current_name": "set_permissions_08006d24"
        },
        "FUN_080098d8": {
            "renaming": {
                "FUN_080098d8": "process_data_080098d8",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "param_4": "data_4",
                "iVar1": "ptr",
                "uVar2": "var_1",
                "uStack_c": "var_2",
                "uStack_8": "var_3",
                "uStack_4": "var_4",
                "PTR_PTR_DAT_08009904": "PTR_DATA"
            },
            "code": "void process_data_080098d8(undefined4 data_1, undefined4 data_2, undefined4 data_3, undefined4 data_4) {\n  int ptr = *(int *)PTR_PTR_DAT_08009904;\n  undefined4 var_1 = data_1;\n  undefined4 var_2 = data_2;\n  undefined4 var_3 = data_3;\n  undefined4 var_4 = data_4;\n  if ((ptr != 0) && (*(int *)(ptr + 0x18) == 0)) {\n    cleanup(ptr);\n  }\n  do_something(ptr, *(undefined4 *)(ptr + 8), data_1, &var_2, var_1, &var_2);\n  return;\n}",
            "called": [
                "FUN_0800937c",
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098d8",
            "calling": [
                "FUN_080077b0",
                "FUN_08007544",
                "FUN_08007594",
                "FUN_08008078",
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "process_data_080098d8",
            "code_backup": "\nvoid FUN_080098d8(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  iVar1 = *(int *)PTR_PTR_DAT_08009904;\n  uVar2 = param_1;\n  uStack_c = param_2;\n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  if ((iVar1 != 0) && (*(int *)(iVar1 + 0x18) == 0)) {\n    FUN_08009d50(iVar1);\n  }\n  FUN_0800937c(iVar1,*(undefined4 *)(iVar1 + 8),param_1,&uStack_c,uVar2,&uStack_c);\n  return;\n}\n\n"
        },
        "FUN_08009270": {
            "renaming": {
                "FUN_08009270": "allocate_memory_block_08009270",
                "param_1": "out_block_address",
                "param_2": "requested_size",
                "puVar1": "unused_pointer",
                "uVar2": "new_block_address",
                "puVar3": "block_list",
                "iVar4": "remaining_space",
                "puVar5": "current_block",
                "uVar6": "free_space",
                "puVar7": "previous_block",
                "uVar8": "aligned_size"
            },
            "code": "uint allocate_memory_block_08009270(undefined4 *out_block_address, uint requested_size) {\n  uint aligned_size = (requested_size + 3 & 0xfffffffc) + 8;\n  if (aligned_size < 0xc) {\n    aligned_size = 0xc;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < requested_size)) {\n    *out_block_address = 0xc;\n  }\n  else {\n    do_nothing_08009f48();\n    uint *block_list = *(uint **)PTR_DAT_08009324;\n    uint *previous_block = *(uint **)PTR_DAT_08009324;\n    while (uint *current_block = block_list, current_block != (uint *)0x0) {\n      uint free_space = *current_block - aligned_size;\n      if (-1 < (int)free_space) {\n        if (free_space < 0xc) {\n          if (previous_block == current_block) {\n            uint next_block = previous_block[1];\n            *(uint *)PTR_DAT_08009324 = next_block;\n          }\n          else {\n            uint next_block = current_block[1];\n          }\n          if (previous_block != current_block) {\n            previous_block[1] = next_block;\n            previous_block = current_block;\n          }\n        }\n        else {\n          *current_block = free_space;\n          *(uint *)((int)current_block + free_space) = aligned_size;\n          previous_block = (uint *)((int)current_block + free_space);\n        }\n        do_nothing_08009f4a(out_block_address);\n        uint aligned_block_address = (int)previous_block + 0xbU & 0xfffffff8;\n        int remaining_space = aligned_block_address - (int)(previous_block + 1);\n        if (remaining_space != 0) {\n          *(int *)((int)previous_block + remaining_space) = -remaining_space;\n          return aligned_block_address;\n        }\n        return aligned_block_address;\n      }\n      previous_block = current_block;\n      block_list = (uint *)current_block[1];\n    }\n    if (*(int *)PTR_DAT_08009328 == 0) {\n      uint new_block_address = find_and_set_offset_08009918(out_block_address);\n      *(undefined4 *)PTR_DAT_08009328 = new_block_address;\n    }\n    uint *new_block = (uint *)find_and_set_offset_08009918(out_block_address, aligned_size);\n    if ((new_block != (uint *)0xffffffff) && ((previous_block = (uint *)((int)new_block + 3U & 0xfffffffc), new_block == previous_block || (remaining_space = find_and_set_offset_08009918(out_block_address,(int)previous_block - (int)new_block), remaining_space != -1)))) {\n      *previous_block = aligned_size;\n      do_nothing_08009f4a(out_block_address);\n      uint aligned_block_address = (int)previous_block + 0xbU & 0xfffffff8;\n      int remaining_space = aligned_block_address - (int)(previous_block + 1);\n      if (remaining_space != 0) {\n        *(int *)((int)previous_block + remaining_space) = -remaining_space;\n        return aligned_block_address;\n      }\n      return aligned_block_address;\n    }\n    *out_block_address = 0xc;\n    do_nothing_08009f4a(out_block_address);\n  }\n  return 0;\n}",
            "called": [
                "FUN_08009f48",
                "FUN_08009f4a",
                "FUN_08009918"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009270",
            "calling": [
                "FUN_08009d24",
                "FUN_08009190",
                "FUN_08009908",
                "FUN_08009eac"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08009270"
        },
        "FUN_08005e6c": {
            "renaming": {
                "FUN_08005e6c": "do_nothing_08005e6c"
            },
            "code": "\nvoid do_nothing_08005e6c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6c",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e6c"
        },
        "FUN_08008500": {
            "renaming": {
                "FUN_08008500": "process_input_08008500",
                "param_1": "pointer",
                "param_2": "param",
                "cVar1": "character",
                "iVar2": "start_value",
                "iVar3": "check_result",
                "uVar4": "index",
                "PTR_DAT_080085a8": "array_of_characters",
                "check_param_08007320": "check_input",
                "PTR_DAT_080085ac": "array_pointer",
                "PTR_DAT_080085b0": "array_of_pointers",
                "*(int *)(PTR_DAT_080085b0 + uVar4 * 4)": "*(int *)(array_of_pointers + index * 4)",
                "PTR_DAT_080085b4": "array_of_bytes",
                "process_param_080084b0": "process_param",
                "get_value_from_pointer_08003760": "get_start_value",
                "process_input_080067ac": "process_input"
            },
            "code": "uint process_input_08008500(uint pointer, uint param, uint value, uint timeout)\n{\n  int start_value = get_start_value();\n  char character = second_character_in_array;\n  int check_result = check_input(character, PTR_DAT_080085ac);\n  if (check_result == 0) {\n    return 0;\n  }\n  uint index = 0;\n  while ((index < 5 && ((*(int *)(PTR_DAT_080085b0 + uVar4 * 4) == 0 || (check_result = check_input(character, PTR_DAT_080085ac), **(int **)(PTR_DAT_080085b0 + index * 4) != check_result))))) {\n    index = index + 1 & 0xff;\n  }\n  if (4 < index) {\n    if ((4 < (byte)PTR_DAT_080085b4[0x44]) && (process_param(), 4 < (byte)PTR_DAT_080085b4[0x44])) {\n      return 0;\n    }\n    index = (uint)(byte)PTR_DAT_080085b4[0x44];\n  }\n  do {\n    check_result = process_input_08008500(*(undefined4 *)(PTR_DAT_080085b0 + index * 4), pointer, value & 0xffff, timeout);\n    if (check_result == 0) {\n      return param;\n    }\n    check_result = get_start_value();\n  } while ((uint)(check_result - start_value) < timeout);\n  return 0;\n}",
            "called": [
                "FUN_080067ac",
                "FUN_080084b0",
                "FUN_08007320",
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008500",
            "calling": [
                "FUN_0800885c"
            ],
            "imported": false,
            "current_name": "process_input_08008500"
        },
        "FUN_080048c8": {
            "renaming": {
                "FUN_080048c8": "process_data_080048c8",
                "param_1": "data_ptr",
                "param_2": "data",
                "param_3": "data_size",
                "param_4": "extra_data",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "code": "int process_data_080048c8(uint **data_ptr, uint *data, int data_size, uint *extra_data) {\n  int result;\n  uint *ptr;\n  if (*(char *)((int)data_ptr + 0x3d) == '(') {\n    if (data == NULL) {\n      result = 1;\n    }\n    else if (data_size == 0) {\n      result = 1;\n    }\n    else if (*(char *)(data_ptr + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data_ptr + 0xf) = 1;\n      ptr = *data_ptr;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **data_ptr = **data_ptr & 0xfffff7ff;\n      *(undefined *)((int)data_ptr + 0x3d) = 0x29;\n      *(undefined *)((int)data_ptr + 0x3e) = 0x20;\n      result = 0;\n      data_ptr[0x10] = NULL;\n      data_ptr[9] = data;\n      *(short *)((int)data_ptr + 0x2a) = (short)data_size;\n      data_ptr[0xb] = extra_data;\n      *(undefined2 *)(data_ptr + 10) = *(undefined2 *)((int)data_ptr + 0x2a);\n      *(undefined *)(data_ptr + 0xf) = 0;\n      (*data_ptr)[1] = (*data_ptr)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048c8",
            "calling": [
                "FUN_08007fa0"
            ],
            "imported": false,
            "current_name": "process_data_080048c8"
        },
        "FUN_08009954": {
            "renaming": {
                "FUN_08009954": "copy_string_08009954",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "max_length",
                "cVar1": "current_char",
                "iVar2": "remaining_length",
                "pcVar3": "dest_ptr"
            },
            "code": "void copy_string_08009954(char *source, char *destination, int max_length) {\n  char current_char;\n  int remaining_length;\n  char *dest_ptr;\n  \n  do {\n    dest_ptr = source;\n    remaining_length = max_length;\n    if (remaining_length == 0) {\n      return;\n    }\n    current_char = *destination;\n    source = dest_ptr + 1;\n    *dest_ptr = current_char;\n    destination = destination + 1;\n    max_length = remaining_length - 1;\n  } while (current_char != '\\0');\n  for (; source != dest_ptr + remaining_length; source = source + 1) {\n    *source = '\\0';\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009954",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "copy_string_08009954"
        },
        "FUN_08005aa4": {
            "renaming": {
                "FUN_08005aa4": "set_configuration_08005aa4",
                "param_1": "config",
                "puVar1": "config_ptr",
                "iVar2": "config_addr",
                "iVar3": "curr_time",
                "uVar4": "config_val",
                "bVar5": "is_bit_set"
            },
            "code": "int set_configuration_08005aa4(uint *config)\n{\n  bool is_flag_set = (*config & 1) != 0;\n  if (is_flag_set) {\n    bool is_bit_set = (*(uint *)(PTR_DAT_08005bac + 0x1c) & 0x10000000) == 0;\n    if (is_bit_set) {\n      *(uint *)(PTR_DAT_08005bac + 0x1c) |= 0x10000000;\n    }\n    if ((*PTR_DAT_08005bb0 & 0x100) == 0) {\n      *PTR_DAT_08005bb0 |= 0x100;\n      int start_time = get_current_time();\n      while ((*PTR_DAT_08005bb0 & 0x100) == 0) {\n        int curr_time = get_current_time();\n        if (100 < (uint)(curr_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    uint *config_ptr = PTR_DAT_08005bb4;\n    int config_addr = PTR_DAT_08005bac;\n    uint config_val = *(uint *)(PTR_DAT_08005bac + 0x20) & 0x300;\n    if ((config_val != 0) && (config_val != (config[1] & 0x300))) {\n      config_val = *(uint *)(PTR_DAT_08005bac + 0x20);\n      *config_ptr = 1;\n      *config_ptr = 0;\n      *(uint *)(config_addr + 0x20) = config_val & 0xfffffcff;\n      if ((config_val & 1) != 0) {\n        int start_time = get_current_time();\n        while ((*(uint *)(PTR_DAT_08005bac + 0x20) & 2) == 0) {\n          int curr_time = get_current_time();\n          if (5000 < (uint)(curr_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n    int config_addr = PTR_DAT_08005bac;\n    *(uint *)(PTR_DAT_08005bac + 0x20) = *(uint *)(PTR_DAT_08005bac + 0x20) & 0xfffffcff | config[1];\n    if (is_bit_set) {\n      *(uint *)(config_addr + 0x1c) &= 0xefffffff;\n    }\n  }\n  if ((*config & 2) != 0) {\n    *(uint *)(PTR_DAT_08005bac + 4) = *(uint *)(PTR_DAT_08005bac + 4) & 0xffff3fff | config[2];\n  }\n  if ((*config & 0x10) != 0) {\n    *(uint *)(PTR_DAT_08005bac + 4) = *(uint *)(PTR_DAT_08005bac + 4) & 0xffbfffff | config[3];\n  }\n  return 0;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005aa4",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "set_configuration_08005aa4"
        },
        "FUN_08005e6e": {
            "renaming": {
                "FUN_08005e6e": "execute_flags_08005e6e",
                "param_1": "params",
                "iVar1": "param_ptr",
                "flag1": "flag1",
                "flag2": "flag2"
            },
            "code": "void execute_flags_08005e6e(int *params)\n{\n    int param_ptr = *params;\n    uint flag1 = *(uint *)(param_ptr + 0xc);\n    uint flag2 = *(uint *)(param_ptr + 0x10);\n\n    if ((flag2 & 2) && (flag1 & 2))\n    {\n        *(undefined4 *)(param_ptr + 0x10) = 0xfffffffd;\n        *(undefined *)(params + 7) = 1;\n\n        if ((*(uint *)(*params + 0x18) & 3) == 0)\n        {\n            execute_callback_if_flag_set_0800771c();\n            do_nothing_08005e6a(params);\n        }\n        else\n        {\n            do_nothing_08005e68();\n        }\n\n        *(undefined *)(params + 7) = 0;\n    }\n\n    if ((flag2 & 4) && (flag1 & 4))\n    {\n        *(undefined4 *)(param_ptr + 0x10) = 0xfffffffb;\n        *(undefined *)(params + 7) = 2;\n\n        if ((*(uint *)(*params + 0x18) & 0x300) == 0)\n        {\n            execute_callback_if_flag_set_0800771c(params);\n            do_nothing_08005e6a(params);\n        }\n        else\n        {\n            do_nothing_08005e68(params);\n        }\n\n        *(undefined *)(params + 7) = 0;\n    }\n\n    if ((flag2 & 8) && (flag1 & 8))\n    {\n        *(undefined4 *)(param_ptr + 0x10) = 0xfffffff7;\n        *(undefined *)(params + 7) = 4;\n\n        if ((*(uint *)(*params + 0x1c) & 3) == 0)\n        {\n            execute_callback_if_flag_set_0800771c(params);\n            do_nothing_08005e6a(params);\n        }\n        else\n        {\n            do_nothing_08005e68(params);\n        }\n\n        *(undefined *)(params + 7) = 0;\n    }\n\n    if ((flag2 & 0x10) && (flag1 & 0x10))\n    {\n        *(undefined4 *)(param_ptr + 0x10) = 0xffffffef;\n        *(undefined *)(params + 7) = 8;\n\n        if ((*(uint *)(*params + 0x1c) & 0x300) == 0)\n        {\n            execute_callback_if_flag_set_0800771c(params);\n            do_nothing_08005e6a(params);\n        }\n        else\n        {\n            do_nothing_08005e68(params);\n        }\n\n        *(undefined *)(params + 7) = 0;\n    }\n\n    if ((flag2 & 1) && (flag1 & 1))\n    {\n        *(undefined4 *)(param_ptr + 0x10) = 0xfffffffe;\n        execute_subtract_four_and_call_08007736(params);\n    }\n\n    if ((flag2 & 0x80) && (flag1 & 0x80))\n    {\n        *(undefined4 *)(param_ptr + 0x10) = 0xffffff7f;\n        do_nothing_080064ae(params);\n    }\n\n    if ((flag2 & 0x40) && (flag1 & 0x40))\n    {\n        *(undefined4 *)(param_ptr + 0x10) = 0xffffffbf;\n        do_nothing_08005e6c(params);\n    }\n\n    if ((flag2 & 0x20) && (flag1 & 0x20))\n    {\n        *(undefined4 *)(param_ptr + 0x10) = 0xffffffdf;\n        do_nothing_080064ac(params);\n    }\n}\n",
            "called": [
                "FUN_08005e6c",
                "FUN_080064ac",
                "FUN_0800771c",
                "FUN_080064ae",
                "FUN_08007736",
                "FUN_08005e6a",
                "FUN_08005e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6e",
            "calling": [],
            "imported": false,
            "current_name": "execute_flags_08005e6e"
        },
        "FUN_08004024": {
            "renaming": {
                "FUN_08004024": "set_flag_if_four_08004024",
                "param_1": "input_value",
                "*DAT_08004040": "flag_ptr"
            },
            "code": "void set_flag_if_four_08004024(int input_value)\n{\n    if (input_value == 4)\n    {\n        *DAT_08004040 |= 4;\n    }\n    else\n    {\n        *DAT_08004040 &= 0xfffffffb;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004024",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "set_flag_if_four_08004024"
        },
        "FUN_08005e6a": {
            "renaming": {
                "FUN_08005e6a": "do_nothing_08005e6a"
            },
            "code": "\nvoid do_nothing_08005e6a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6a",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e6a"
        },
        "FUN_08002400": {
            "renaming": {
                "FUN_08002400": "check_if_bit_set_in_array_08002400",
                "param_1": "index",
                "uVar1": "bit_index"
            },
            "code": "int check_if_bit_set_in_array_08002400(int index)\n{\n    int bit_index = 0;\n    while (bit_index <= 0xb)\n    {\n        if ((PTR_DAT_08002428[(index * 0xc + bit_index) * 8] & 0x40) != 0)\n        {\n            return 1;\n        }\n        bit_index++;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002400",
            "calling": [
                "FUN_08002644",
                "FUN_080025ac"
            ],
            "imported": false,
            "current_name": "check_if_bit_set_in_array_08002400"
        },
        "FUN_08004a1e": {
            "renaming": {
                "FUN_08004a1e": "do_nothing_08004a1e"
            },
            "code": "\nvoid do_nothing_08004a1e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a1e",
            "calling": [
                "FUN_08004b82",
                "FUN_08004ccc"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a1e"
        },
        "FUN_08000588": {
            "renaming": {
                "FUN_08000588": "process_response_and_update_flags_08000588",
                "param_1": "response_index",
                "cVar1": "expected_response_char",
                "cVar2": "current_response_char",
                "puVar3": "PTR_RESPONSE_CHARS",
                "PTR_DAT_080005cc": "PTR_RESPONSE_CHARS",
                "PTR_DAT_080005d0": "PTR_RESPONSE_STRINGS",
                "PTR_DAT_080005d4": "PTR_EXPECTED_RESPONSE_CHAR",
                "PTR_DAT_080005d8": "PTR_NEXT_AVAILABLE_CHAR_INDEX",
                "PTR_DAT_080005dc": "PTR_AVAILABLE_CHARS"
            },
            "code": "void process_response_and_update_flags_08000588(int response_index) {\n    char current_response_char = PTR_DAT_080005cc[response_index];\n    char expected_response_char = *PTR_DAT_080005d4;\n    if (current_response_char == expected_response_char && expected_response_char != '\\0') {\n        *PTR_DAT_080005d4 = expected_response_char - 1;\n    }\n    else if (expected_response_char != '\\0') {\n        char next_available_char_index = *PTR_DAT_080005d8;\n        *PTR_DAT_080005d8 = next_available_char_index + 1;\n        PTR_DAT_080005dc[next_available_char_index] = current_response_char;\n    }\n    PTR_DAT_080005cc[response_index] = 0xff;\n    return;\n}",
            "called": [
                "FUN_08002644"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000588",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "process_response_and_update_flags_08000588"
        },
        "FUN_08002644": {
            "renaming": {
                "FUN_08002644": "process_server_response_08002644",
                "param_1": "request_data",
                "param_2": "request_length",
                "param_3": "response_length",
                "param_4": "response_code",
                "uVar2": "request_type",
                "bVar1": "request_header",
                "iVar3": "is_bit_set"
            },
            "code": "void process_server_response_08002644(byte *request_data, uint32_t request_length, uint32_t response_length, uint32_t response_code)\n{\n  uint32_t request_type = (uint32_t)*request_data;\n  byte request_header = PTR_DAT_08002670[request_type * 8];\n  PTR_DAT_08002670[request_type * 8] = request_header & 0xbf;\n  int32_t is_bit_set = check_if_bit_set_in_array_08002400((uint32_t)((uint64_t)DAT_08002674 * (uint64_t)request_type >> 0x23), request_length, request_header & 0xbf, (int32_t)((uint64_t)DAT_08002674 * (uint64_t)request_type), response_code);\n  if (is_bit_set == 0) {\n    process_server_response_08002644_08002578(PTR_DAT_08002678);\n  }\n  return;\n}",
            "called": [
                "FUN_08002400",
                "FUN_08002578"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002644",
            "calling": [
                "FUN_08000588"
            ],
            "imported": false,
            "current_name": "process_server_response_08002644"
        },
        "FUN_08008868": {
            "renaming": {
                "FUN_08008868": "wait_forever_08008868"
            },
            "code": "void wait_forever_08008868(void)\n{\n  while( true )\n  {\n    // Do nothing\n  }\n}",
            "called": [
                "FUN_08008868"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008868",
            "calling": [
                "FUN_08009b5c",
                "FUN_08008868"
            ],
            "imported": false,
            "current_name": "wait_forever_08008868"
        },
        "FUN_080036ac": {
            "renaming": {
                "FUN_080036ac": "check_character_in_array_080036ac",
                "param_1": "character_to_check",
                "uVar1": "index"
            },
            "code": "uint check_character_in_array_080036ac(int character_to_check) {\n  uint index = 0;\n  if ((uint)(character_to_check << 0x18) >> 0x1c < 5) {\n    for (index = 0; (index < 0x3c && (character_to_check != (char)PTR_DAT_080036d0[index])); index++) {\n    }\n  }\n  else {\n    index = 0xffffffff;\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036ac",
            "calling": [
                "FUN_08000aec",
                "FUN_08001cd0",
                "FUN_08000ef8",
                "FUN_080022f8",
                "FUN_0800021a",
                "FUN_080005f8",
                "FUN_08000a64"
            ],
            "imported": false,
            "current_name": "check_character_in_array_080036ac"
        },
        "FUN_08002f1e": {
            "renaming": {
                "FUN_08002f1e": "execute_function_at_address_08002f1e",
                "param_1": "address"
            },
            "code": "void execute_function_at_address_08002f1e(int address)\n{\n  (**(code **)**(undefined4 **)(address + 0xc0))();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f1e",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "execute_function_at_address_08002f1e"
        },
        "FUN_0800885c": {
            "renaming": {
                "FUN_0800885c": "process_input_wrapper_0800885c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "process_input_08008500": "process_input"
            },
            "code": "void process_input_wrapper_0800885c(undefined4 input_1, undefined4 input_2, undefined4 input_3, undefined4 input_4)\n{\n  process_input(input_2, input_3, input_3, input_4, input_4);\n  return;\n}",
            "called": [
                "FUN_08008500"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800885c",
            "calling": [
                "FUN_0800a042"
            ],
            "imported": false,
            "current_name": "process_input_wrapper_0800885c"
        },
        "FUN_0800643c": {
            "renaming": {
                "FUN_0800643c": "set_bit_and_update_array_0800643c",
                "param_1": "array",
                "param_2": "bit_index",
                "set_bit_in_uint_array_08006420": "set_bit_in_uint_array",
                "**param_1": "array_value",
                "0x11": "array_index",
                "undefined4": "uint",
                "return": "void"
            },
            "code": "void set_bit_and_update_array_0800643c(uint** array, uint bit_index, uint array_size) {\n  set_bit_in_uint_array(*array, bit_index, array_size);\n  (*array)[17] |= 0x8000;\n  **array |= 1;\n}",
            "called": [
                "FUN_08006420"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800643c",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "set_bit_and_update_array_0800643c"
        },
        "FUN_08002fca": {
            "renaming": {
                "FUN_08002fca": "decode_and_process_data_08002fca",
                "param_1": "data",
                "param_2": "buffer",
                "param_3": "data_length",
                "param_4": "param_4",
                "param_5": "param_5",
                "uVar1": "index",
                "decode_data_08008a24": "decode_data",
                "do_nothing_08008ac4": "do_nothing"
            },
            "code": "void decode_and_process_data_08002fca(uint8_t* data, uint8_t* buffer, int data_length, uint8_t* param_4, uint8_t* param_5) {\n    uint8_t index = 0;\n    for (index = 0; index < data_length; index++) {\n        do_nothing(param_5);\n        decode_data(buffer, 1);\n        do_nothing(param_4);\n        decode_data(buffer, 0);\n    }\n    return;\n}",
            "called": [
                "FUN_08008ac4",
                "FUN_08008a24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fca",
            "calling": [
                "FUN_08003002"
            ],
            "imported": false,
            "current_name": "decode_and_process_data_08002fca"
        },
        "FUN_08009c7c": {
            "renaming": {
                "FUN_08009c7c": "process_data_08009c7c",
                "param_1": "data",
                "param_2": "params",
                "uVar1": "result",
                "iVar2": "data_size",
                "piVar3": "param_ptr",
                "uVar4": "param_flag",
                "uVar5": "block_size",
                "iVar6": "block_offset",
                "unaff_r4": "process_block",
                "unaff_r5": "handle_error",
                "pcVar7": "process_block",
                "iVar8": "block_size",
                "uVar9": "param_value",
                "UNRECOVERED_JUMPTABLE_00": "handle_error",
                "bVar10": "is_error"
            },
            "code": "uint32_t process_data_08009c7c(uint32_t *data, int *params)\n{\n    uint32_t result = 0;\n    int *param_ptr;\n    uint32_t param_value;\n    uint16_t param_flag;\n    int data_size;\n    int block_size;\n    int block_offset;\n    uint32_t (*process_block)(uint32_t *, uint32_t, int, int, uint32_t, uint32_t);\n    uint32_t (*handle_error)(uint32_t);\n    bool is_error;\n    \n    if (params[4] != 0) {\n        if ((data != NULL) && (data[6] == 0)) {\n            handle_error = handle_data_error;\n            result = handle_error(0);\n            return result;\n        }\n        \n        if (params == PTR_DAT_08009cc4) {\n            param_ptr = (int *)data[1];\n        }\n        else if (params == PTR_DAT_08009cc8) {\n            param_ptr = (int *)data[2];\n        }\n        else if (params == PTR_DAT_08009ccc) {\n            param_ptr = (int *)data[3];\n        }\n        \n        param_flag = *(uint16_t *)(param_ptr + 3);\n        data_size = params[4];\n        block_offset = 0;\n        \n        if (param_flag != 0) {\n            block_size = (int)param_flag;\n            if ((int)(block_size << 0x1c) < 0) {\n                block_size <<= 0x1e;\n                is_error = block_size == 0;\n                if (is_error) {\n                    block_size = 0;\n                }\n                \n                process_block = (uint32_t (*)(uint32_t *, uint32_t, int, int, uint32_t, uint32_t))(param_ptr[10]);\n                if (!is_error) {\n                    block_size = param_ptr[5];\n                }\n                \n                param_ptr[2] = block_size;\n                param_ptr[0] = data_size;\n                \n                for (block_offset = block_offset - block_size; block_offset < data_size; block_offset -= block_size) {\n                    block_size = process_block(data, param_ptr[8], param_ptr[2], block_offset, 0, 0);\n                    if (block_size < 1) {\n                        result = handle_error(0);\n                        return result;\n                    }\n                    data_size += block_size;\n                }\n            }\n            else if (((params[1] > 0) || (params[0x10] > 0)) && (param_ptr[0xb] != NULL)) {\n                process_block = (uint32_t (*)(uint32_t *, uint32_t, int, int, uint32_t, uint32_t))(param_ptr[0xb]);\n                param_value = data[0];\n                data[0] = 0;\n                \n                if ((param_flag & 0x1000) == 0) {\n                    block_size = process_block(data, param_ptr[8], param_flag & 0x1000, 1, 0, 0);\n                    if ((block_size == -1) && (data[0] != 0)) {\n                        if ((data[0] != 0x1d) && (data[0] != 0x16)) {\n                            param_flag |= 0x40;\n                            result = handle_error(0xffffffff);\n                            return result;\n                        }\n                        data[0] = param_value;\n                        goto LAB_08009b86;\n                    }\n                }\n                else {\n                    block_size = param_ptr[0x15];\n                }\n                \n                if (((int)((uint)param_flag << 0x1d) < 0) && (param_ptr[1] > 0) && (param_ptr[0xd] != 0)) {\n                    block_size -= param_ptr[1];\n                    if (param_ptr[0xd] != (int *)(param_ptr + 0x11)) {\n                        insert_node_080091d8(data);\n                    }\n                    param_ptr[0xd] = 0;\n                    result = handle_error(UNRECOVERED_JUMPTABLE_00());\n                    return result;\n                }\n                \n                block_size = process_block(data, param_ptr[8], block_size - param_ptr[1], 0, 0, 0);\n                param_flag = *(uint16_t *)(param_ptr + 3);\n                if ((block_size == -1) && ((data[0] > 0x1d) || (-1 < (int)((DAT_08009c78 >> (data[0] & 0xff)) << 0x1f)) || (param_flag & 0x2000))) {\n                    param_flag |= 0x40;\n                    result = handle_error(0xffffffff);\n                    return result;\n                }\n                \n                param_ptr[1] = 0;\n                param_ptr[0] = params[4];\n                \n                if (((int)((uint)param_flag << 0x13) < 0) && ((block_size != -1) || (data[0] == 0))) {\n                    param_ptr[0x15] = block_size;\n                }\n                \n                param_ptr[0xd] = 0;\n                data[0] = param_value;\n            }\n        }\n    }\n    \nLAB_08009b86:\n    result = UNRECOVERED_JUMPTABLE_00()(0);\n    return result;\n}",
            "called": [
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009c7c",
            "calling": [
                "FUN_0800932c"
            ],
            "imported": false,
            "current_name": "process_data_08009c7c",
            "code_backup": "\nundefined4 FUN_08009c7c(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUN_08009d50();\n    }\n    if (param_2 == (int *)PTR_DAT_08009cc4) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)PTR_DAT_08009cc8) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)PTR_DAT_08009ccc) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08009c62;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((DAT_08009c78 >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            insert_node_080091d8(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_08009b5c": {
            "renaming": {
                "FUN_08009b5c": "process_data_and_wait_08009b5c",
                "puVar1": "data_ptr",
                "iVar2": "data_size",
                "piVar3": "ptr1",
                "piVar4": "ptr2",
                "uVar5": "data_value",
                "uVar6": "data_flag",
                "iVar7": "temp_value",
                "pcVar8": "function_ptr",
                "iVar9": "temp_var",
                "uVar10": "temp_flag",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar11": "flag",
                "uVar12": "undefined_var"
            },
            "code": "void process_data_and_wait_08009b5c(void)\n{\n  uint *data_ptr;\n  int data_size;\n  int *ptr1;\n  int *ptr2;\n  uint data_value;\n  ushort data_flag;\n  int temp_value;\n  code *function_ptr;\n  int temp_var;\n  uint temp_flag;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool flag;\n  undefined8 uVar12;\n  process_data_08009fe8(6);\n  UNRECOVERED_JUMPTABLE_00 = (code *)0x8009b6b;\n  uVar12 = wait_forever_08008868(1);\n  ptr1 = (int *)((ulonglong)uVar12 >> 0x20);\n  data_ptr = (uint *)uVar12;\n  data_flag = *(ushort *)(ptr1 + 3);\n  data_value = (uint)data_flag;\n  if ((int)(data_value << 0x1c) < 0) {\n    temp_var = ptr1[4];\n    if (temp_var != 0) {\n      temp_value = data_value << 0x1e;\n      flag = temp_value != 0;\n      if (flag) {\n        temp_value = 0;\n      }\n      data_size = *ptr1;\n      if (!flag) {\n        temp_value = ptr1[5];\n      }\n      *ptr1 = temp_var;\n      ptr1[2] = temp_value;\n      for (data_size = data_size - temp_var; 0 < data_size; data_size = data_size - temp_value) {\n        temp_value = (*(code *)ptr1[10])(data_ptr,ptr1[8],temp_var,data_size);\n        if (temp_value < 1) {\n          data_flag = *(ushort *)(ptr1 + 3);\n          goto LAB_08009c62;\n        }\n        temp_var = temp_var + temp_value;\n      }\n    }\n  }\n  else if (((0 < ptr1[1]) || (0 < ptr1[0x10])) &&\n          (function_ptr = (code *)ptr1[0xb], function_ptr != (code *)0x0)) {\n    temp_flag = *data_ptr;\n    *data_ptr = 0;\n    if ((data_flag & 0x1000) == 0) {\n      temp_var = (*function_ptr)(data_ptr,ptr1[8],data_value & 0x1000,1);\n      if ((temp_var == -1) && (data_value = *data_ptr, data_value != 0)) {\n        if ((data_value != 0x1d) && (data_value != 0x16)) {\n          *(ushort *)(ptr1 + 3) = *(ushort *)(ptr1 + 3) | 0x40;\n          (*UNRECOVERED_JUMPTABLE_00)();\n          return;\n        }\n        *data_ptr = temp_flag;\n        goto LAB_08009b86;\n      }\n    }\n    else {\n      temp_var = ptr1[0x15];\n    }\n    if (((int)((uint)*(ushort *)(ptr1 + 3) << 0x1d) < 0) &&\n       (temp_var = temp_var - ptr1[1], ptr1[0xd] != 0)) {\n      temp_var = temp_var - ptr1[0x10];\n    }\n    temp_var = (*(code *)ptr1[0xb])(data_ptr,ptr1[8],temp_var,0);\n    data_flag = *(ushort *)(ptr1 + 3);\n    if ((temp_var == -1) &&\n       ((0x1d < *data_ptr || (-1 < (int)((DAT_08009c78 >> (*data_ptr & 0xff)) << 0x1f))))) {\n      *(ushort *)(ptr1 + 3) = data_flag | 0x40;\n      (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n      return;\n    }\n    ptr1[1] = 0;\n    *ptr1 = ptr1[4];\n    if (((int)((uint)data_flag << 0x13) < 0) && ((temp_var != -1 || (*data_ptr == 0)))) {\n      ptr1[0x15] = temp_var;\n    }\n    ptr2 = (int *)ptr1[0xd];\n    *data_ptr = temp_flag;\n    if (ptr2 != (int *)0x0) {\n      if (ptr2 != ptr1 + 0x11) {\n        insert_node_080091d8(data_ptr);\n      }\n      ptr1[0xd] = 0;\n      (*UNRECOVERED_JUMPTABLE_00)();\n      return;\n    }\n  }\nLAB_08009b86:\n  (*UNRECOVERED_JUMPTABLE_00)(0);\n  return;\n}\n",
            "called": [
                "FUN_080091d8",
                "FUN_08008868",
                "FUN_08009fe8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009b5c",
            "calling": [
                "FUN_0800a18c",
                "FUN_080090cc"
            ],
            "imported": false,
            "current_name": "process_data_and_wait_08009b5c"
        },
        "FUN_0800021a": {
            "renaming": {
                "FUN_0800021a": "decode_and_store_data_0800021a",
                "param_1": "data_index",
                "param_2": "value",
                "param_3": "data_array",
                "param_4": "char_array",
                "bVar1": "is_valid",
                "iVar2": "check_result",
                "PTR_DAT_080002d8": "PTR_DATA_ARRAY",
                "PTR_DAT_080002dc": "PTR_DATA_ARRAY_2",
                "PTR_DAT_080002e0": "PTR_DATA_ARRAY_3",
                "PTR_DAT_080002e4": "PTR_DATA_ARRAY_4",
                "get_value_at_offset_08002fa0": "get_value_at_offset",
                "check_character_in_array_080036ac": "check_character_in_array",
                "search_for_value_0800738a": "search_for_value",
                "decode_data_080088e0": "decode_data",
                "store_value_at_offset_08002fc2": "store_value_at_offset",
                "bool": "bool",
                "int": "int",
                "undefined4": "uint32_t",
                "undefined4*": "uint32_t*",
                "undefined1*": "uint8_t*",
                "uint": "uint32_t",
                "uint8_t": "uint8_t",
                "uint32_t": "uint32_t"
            },
            "code": "void decode_and_store_data_0800021a(uint8_t data_index, uint32_t value, uint32_t* data_array, uint8_t* char_array) {\n  bool is_valid = false;\n  int check_result = get_value_at_offset_08002fa0(PTR_DAT_080002d8, data_index, sizeof(uint32_t), sizeof(uint32_t), sizeof(uint32_t));\n  if (check_result == 3) {\n    if (data_index < 60) {\n      int char_value = char_array[data_index];\n      if (char_value == -1) {\n        is_valid = true;\n      }\n      else {\n        int check_result_2 = check_character_in_array_080036ac(char_value);\n        if (check_result_2 == 0) {\n          is_valid = false;\n        }\n        else {\n          int check_result_3 = check_character_in_array_080036ac(char_value);\n          if (check_result_3 == 1) {\n            is_valid = false;\n          }\n          else {\n            is_valid = (search_for_value_0800738a(char_value, PTR_DAT_080002dc) == 0);\n          }\n        }\n      }\n    }\n    if (is_valid) {\n      decode_data(data_index, value);\n    }\n    store_value_at_offset_08002fc2(PTR_DAT_080002d8, data_index, value);\n  }\n  else if (check_result == 4) {\n    if (data_index < 60) {\n      int char_value = char_array[data_index];\n      if (char_value != -1) {\n        int check_result_2 = check_character_in_array_080036ac(char_value);\n        if (check_result_2 != 0) {\n          int check_result_3 = check_character_in_array_080036ac(char_value);\n          if (check_result_3 != 1) {\n            calculate_and_set_value(PTR_DAT_080002e0 + char_array[data_index] * 3, value);\n          }\n        }\n      }\n    }\n    store_value_at_offset_08002fc2(PTR_DAT_080002d8, data_index, value);\n  }\n}\n",
            "called": [
                "FUN_080088e0",
                "FUN_08002fc2",
                "FUN_08002fa0",
                "FUN_080036ac",
                "FUN_0800738a",
                "FUN_080026b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800021a",
            "calling": [
                "FUN_08000214"
            ],
            "imported": false,
            "current_name": "decode_and_store_data_0800021a"
        },
        "FUN_08008a6c": {
            "renaming": {
                "FUN_08008a6c": "check_bit_set_08008a6c",
                "param_1": "bit_index",
                "cVar1": "result",
                "iVar2": "bit_is_set",
                "uVar3": "data_index",
                "uVar4": "data_value",
                "PTR_DAT_08008ab4": "data_array",
                "PTR_DAT_08008ab8": "bit_array",
                "get_bit_08006b28": "get_bit",
                "get_data_at_index_08006b7c": "get_data_at_index",
                "check_if_param2_bit_set_in_param1_080072f0": "check_if_bit_set"
            },
            "code": "char check_bit_set_08008a6c(uint bit_index)\n{\n    char result;\n    int bit_is_set;\n    uint data_index;\n    uint data_value;\n    uint bit_mask;\n    if (bit_index < 60)\n    {\n        data_value = (uint)(char)PTR_DAT_08008ab4[bit_index];\n    }\n    else\n    {\n        data_value = 0xffffffff;\n    }\n    if (data_value == 0xffffffff)\n    {\n        result = 0;\n    }\n    else\n    {\n        bit_is_set = get_bit_08006b28(data_value, PTR_DAT_08008ab8);\n        if (bit_is_set == 0)\n        {\n            result = 0;\n        }\n        else\n        {\n            data_index = (data_value << 0x18) >> 0x1c;\n            bit_mask = 1 << (data_value & 0xf) & 0xffff;\n            result = check_if_bit_set(data_index, bit_mask);\n        }\n    }\n    if (result != 0)\n    {\n        result = 1;\n    }\n    return result;\n}",
            "called": [
                "FUN_08006b7c",
                "FUN_08006b28",
                "FUN_080072f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a6c",
            "calling": [
                "FUN_08000ef8"
            ],
            "imported": false,
            "current_name": "check_bit_set_08008a6c"
        },
        "FUN_080026f8": {
            "renaming": {
                "FUN_080026f8": "get_byte_from_ptr_dat_08002708_times_8_and_shift_left_080026f8",
                "*param_1": "*input_byte"
            },
            "code": "uint get_byte_from_ptr_dat_08002708_times_8_and_shift_left_080026f8(byte *input_byte) {\n    uint index = (uint)*input_byte * 8;\n    uint result = (uint)(byte)PTR_DAT_08002708[index] << 0x19;\n    return result >> 0x1f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026f8",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "get_byte_from_ptr_dat_08002708_times_8_and_shift_left_080026f8"
        },
        "FUN_080085b8": {
            "renaming": {
                "FUN_080085b8": "is_flag_set_at_offset_080085b8",
                "param_1": "offset",
                "uVar1": "combined_bytes"
            },
            "code": "bool is_flag_set_at_offset_080085b8(uint8_t offset)\n{\n    uint32_t combined_bytes = combine_bytes_at_offsets(PTR_DAT_080085d8 + (uint32_t)*(byte *)(offset + 0x44) * 4);\n    return (combined_bytes & 0x22) == 0x22;\n}",
            "called": [
                "FUN_08006b1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080085b8",
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "imported": false,
            "current_name": "is_flag_set_at_offset_080085b8"
        },
        "FUN_08001c08": {
            "renaming": {
                "FUN_08001c08": "get_first_byte_from_array_08001c08",
                "uVar1": "first_byte",
                "PTR_DAT_08001c14": "PTR_FIRST_ARRAY",
                "get_byte_from_array_08002720": "get_byte_from_array"
            },
            "code": "unsigned char get_first_byte_from_array_08001c08(void)\n{\n  unsigned char first_byte = get_byte_from_array(PTR_DAT_08001c14);\n  return first_byte;\n}",
            "called": [
                "FUN_08002720"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c08",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "get_first_byte_from_array_08001c08"
        },
        "FUN_080075dc": {
            "renaming": {
                "FUN_080075dc": "check_clock_source_080075dc",
                "param_1": "clock_source",
                "uVar1": "local_var1",
                "iVar2": "shifted_value",
                "uVar3": "local_var3",
                "local_20": "local_var5",
                "local_1c": "local_var4",
                "local_18": "unused_local_var1",
                "local_14": "unused_local_var2",
                "local_10": "unused_local_var3",
                "local_c": "unused_local_var4",
                "initialize_data_08005a68": "initialize_data",
                "check_timer_08007594": "check_timer",
                "get_shifted_value_08005a28": "get_shifted_value1",
                "get_shifted_value_08005a48": "get_shifted_value2",
                "process_data_080098d8": "process_data",
                "PTR_s_TIM__Unknown_clock_source_08007644": "&s_TIM__Unknown_clock_source_08007644"
            },
            "code": "int check_clock_source_080075dc(uint8_t clock_source) {\n  uint32_t local_var1;\n  int32_t shifted_value;\n  uint32_t local_var3;\n  uint32_t local_var4;\n  uint32_t local_var5;\n  local_var3 = 0;\n  local_var4 = 0;\n  local_var5 = 0;\n  local_var1 = 0;\n  shifted_value = 0;\n  initialize_data_08005a68(&local_var4,&local_var1);\n  int32_t timer_check = check_timer(clock_source);\n  if (timer_check == 1) {\n    shifted_value = get_shifted_value_08005a28();\n  }\n  else if (timer_check == 2) {\n    shifted_value = get_shifted_value_08005a48();\n    local_var3 = local_var5;\n  }\n  else {\n    process_data(PTR_s_TIM__Unknown_clock_source_08007644);\n    shifted_value = 0;\n    local_var3 = 0;\n  }\n  if (local_var3 != 0x500) {\n    if (local_var3 < 0x501) {\n      if (local_var3 != 0x400) {\n        return shifted_value;\n      }\n    }\n    else if ((local_var3 != 0x600) && (local_var3 != 0x700)) {\n      return shifted_value;\n    }\n  }\n  return shifted_value << 1;\n}",
            "called": [
                "FUN_080098d8",
                "FUN_08007594",
                "FUN_08005a68",
                "FUN_08005a28",
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080075dc",
            "calling": [
                "FUN_08007118",
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "check_clock_source_080075dc"
        },
        "FUN_08007544": {
            "renaming": {
                "FUN_08007544": "determine_response_08007544",
                "param_1": "input_num",
                "DAT_08007588": "unknown_constant",
                "DAT_0800758c": "another_unknown_constant",
                "PTR_s_TIM__Unknown_timer_IRQn_08007590": "timer_interrupt_pointer"
            },
            "code": "uint32_t determine_response_08007544(uint32_t input_num) {\n  if (input_num == 0xffffffff) {\n    return 0;\n  }\n  if (input_num == DAT_08007588) {\n    return 29;\n  }\n  if (DAT_08007588 < input_num) {\n    if (input_num == DAT_0800758c) {\n      return 30;\n    }\n    if (input_num == DAT_0800758c + 0x12400) {\n      return 25;\n    }\n  }\n  else if (input_num == 0x40000000) {\n    return 28;\n  }\n  process_data(PTR_s_TIM__Unknown_timer_IRQn_08007590);\n  return 0;\n}",
            "called": [
                "FUN_080098d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007544",
            "calling": [
                "FUN_080076e0",
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "determine_response_08007544"
        },
        "FUN_08007ff0": {
            "renaming": {
                "FUN_08007ff0": "execute_subroutine_and_set_flags_08007ff0",
                "param_1": "param",
                "iVar1": "subroutine_result",
                "subtract_four_08007f78": "subtract_four",
                "*(code **)(iVar1 + 0x60)": "subroutine_ptr",
                "*(char *)(iVar1 + 0x5c)": "char_ptr1",
                "*(char *)(iVar1 + 0x2c)": "char_ptr2",
                "(code *)0x0": "(code*)0x0",
                "(subroutine_ptr != (code *)0x0)": "(subroutine_ptr != (code*)0x0)",
                "(*char_ptr1 == '\\x01')": "(*char_ptr1 == '\\x01')",
                "(*char_ptr2 != ' ')": "(*char_ptr2 != ' ')",
                "(**(code **)(iVar1 + 0x60))(iVar1 + 0x68)": "(*subroutine_ptr)(subroutine_result + 0x68)",
                "set_bit_and_flags_080049e0": "set_bit_and_flags"
            },
            "code": "void execute_subroutine_and_set_flags_08007ff0(int param){\n    int subroutine_result = subtract_four();\n    code* subroutine_ptr = *(code**)(subroutine_result + 0x60);\n    char* char_ptr1 = (char*)(subroutine_result + 0x5c);\n    char* char_ptr2 = (char*)(subroutine_result + 0x2c);\n    if ((subroutine_ptr != (code*)0x0) && (*char_ptr1 == '\\x01') && (*char_ptr2 != ' ')){\n        (*subroutine_ptr)(subroutine_result + 0x68);\n    }\n    set_bit_and_flags(param);\n}",
            "called": [
                "FUN_080049e0",
                "FUN_08007f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ff0",
            "calling": [
                "FUN_08004aec",
                "FUN_08004f3c",
                "FUN_08005084"
            ],
            "imported": false,
            "current_name": "execute_subroutine_and_set_flags_08007ff0"
        },
        "FUN_08008990": {
            "renaming": {
                "FUN_08008990": "decode_character_flags_08008990",
                "param_1": "character_index",
                "param_2": "flag_type",
                "param_3": "flag_value",
                "param_4": "character_data",
                "iVar1": "bit_index",
                "puVar2": "character_data_pointer",
                "iVar3": "character_data_index",
                "PTR_DAT_08008a14": "character_flags_data",
                "PTR_DAT_08008a18": "character_status_data",
                "PTR_DAT_08008a1c": "value_data",
                "PTR_DAT_08008a20": "bit_data",
                "get_bit_08006b28": "get_bit_index",
                "search_for_value_0800738a": "search_for_value",
                "update_character_status_080071e4": "update_character_status",
                "update_uint_in_array_08006b5c": "update_uint_in_array",
                "decode_and_set_flag_08007258": "decode_and_set_flag",
                "set_bit_in_array_08006b3e": "set_bit_in_array"
            },
            "code": "void decode_character_flags_08008990(uint character_index, uint flag_type, uint flag_value, undefined *character_data) {\n  int character_data_index;\n  undefined *character_data_pointer;\n  int bit_index;\n\n  if (character_index < 0x3c) {\n    character_data_index = (int)(char)character_data[character_index];\n    character_data_pointer = character_data;\n  }\n  else {\n    character_data_index = -1;\n    character_data_pointer = character_data;\n  }\n  if (character_data_index != -1) {\n    bit_index = get_bit_08006b28(character_data_index, PTR_DAT_08008a14, flag_value, character_data_pointer, character_data);\n    if (bit_index != 0) {\n      int value_index = search_for_value_0800738a(character_data_index, PTR_DAT_08008a14);\n      if (value_index != 0) {\n        update_character_status_080071e4(character_data_index);\n      }\n      update_uint_in_array_08006b5c(character_data_index, PTR_DAT_08008a14);\n    }\n    switch(flag_type) {\n    case 0:\n      decode_and_set_flag_08007258(character_data_index, 0);\n      break;\n    case 1:\n      decode_and_set_flag_08007258(character_data_index, 1, 0);\n      break;\n    case 2:\n      decode_and_set_flag_08007258(character_data_index, 0, 1);\n      break;\n    case 3:\n      decode_and_set_flag_08007258(character_data_index, 0, 2);\n    }\n    set_bit_in_array_08006b3e(character_data_index, PTR_DAT_08008a18);\n  }\n  return;\n}",
            "called": [
                "FUN_08006b3e",
                "FUN_08007258",
                "FUN_08006b28",
                "FUN_0800738a",
                "FUN_080071e4",
                "FUN_08006b5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008990",
            "calling": [
                "FUN_080088e0",
                "FUN_08003002",
                "FUN_080025ac",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "decode_character_flags_08008990"
        },
        "FUN_08008078": {
            "renaming": {
                "FUN_08008078": "process_uart_pins_08008078",
                "param_1": "uart_pins",
                "iVar1": "uart_pin_1",
                "iVar2": "uart_pin_2",
                "iVar3": "uart_pin_3",
                "iVar4": "selected_uart_pin",
                "uVar5": "flag_value",
                "uVar6": "character_value",
                "local_20": "bit_mask",
                "local_1c": "bit_shifted_value",
                "local_18": "shifted_value",
                "local_14": "uart_pin_type"
            },
            "code": "\nvoid process_uart_pins_08008078(int *uart_pins)\n\n{\n  int uart_pin_1;\n  int uart_pin_2;\n  int uart_pin_3;\n  int selected_uart_pin;\n  undefined4 flag_value;\n  uint character_value;\n  uint bit_mask;\n  uint bit_shifted_value;\n  uint shifted_value;\n  undefined4 uart_pin_type;\n  \n  if (uart_pins != (int *)0x0) {\n    uart_pin_2 = check_param_08007320((int)*(char *)(uart_pins + 0x16),PTR_DAT_08008330);\n    uart_pin_3 = check_param_08007320((int)*(char *)((int)uart_pins + 0x59),PTR_DAT_08008334);\n    if ((uart_pin_3 == 0) || (uart_pin_2 == 0)) {\n      process_data_080098d8(PTR_s_ERROR__at_least_one_UART_pin_has_08008348,uart_pin_3);\n    }\n    else {\n      selected_uart_pin = compare_and_return_080073ae(uart_pin_2);\n      *uart_pins = selected_uart_pin;\n      uart_pin_1 = DAT_08008340;\n      uart_pin_3 = DAT_0800833c;\n      uart_pin_2 = DAT_08008338;\n      if (selected_uart_pin == 0) {\n        process_data_080098d8(PTR_s_ERROR__U_S_ART_pins_mismatch_0800834c);\n      }\n      else {\n        if (selected_uart_pin == DAT_08008338) {\n          *(uint *)(DAT_08008338 + 0xd80c) = *(uint *)(DAT_08008338 + 0xd80c) | 0x4000;\n          *(uint *)(uart_pin_2 + 0xd80c) = *(uint *)(uart_pin_2 + 0xd80c) & 0xffffbfff;\n          *(uint *)(uart_pin_2 + 0xd818) = *(uint *)(uart_pin_2 + 0xd818) | 0x4000;\n          *(undefined *)(uart_pins + 0x11) = 0;\n          *(undefined *)((int)uart_pins + 0x5a) = 0x25;\n        }\n        else if (selected_uart_pin == DAT_0800833c) {\n          *(uint *)(DAT_0800833c + 0x1cc10) = *(uint *)(DAT_0800833c + 0x1cc10) | 0x20000;\n          *(uint *)(uart_pin_3 + 0x1cc10) = *(uint *)(uart_pin_3 + 0x1cc10) & 0xfffdffff;\n          *(uint *)(uart_pin_3 + 0x1cc1c) = *(uint *)(uart_pin_3 + 0x1cc1c) | 0x20000;\n          *(undefined *)(uart_pins + 0x11) = 1;\n          *(undefined *)((int)uart_pins + 0x5a) = 0x26;\n        }\n        else if (selected_uart_pin == DAT_08008340) {\n          *(uint *)(DAT_08008340 + 0x1c810) = *(uint *)(DAT_08008340 + 0x1c810) | 0x40000;\n          *(uint *)(uart_pin_1 + 0x1c810) = *(uint *)(uart_pin_1 + 0x1c810) & 0xfffbffff;\n          *(uint *)(uart_pin_1 + 0x1c81c) = *(uint *)(uart_pin_1 + 0x1c81c) | 0x40000;\n          *(undefined *)(uart_pins + 0x11) = 2;\n          *(undefined *)((int)uart_pins + 0x5a) = 0x27;\n        }\n        flag_value = set_flag_08006bb8((uint)((int)*(char *)((int)uart_pins + 0x59) << 0x18) >> 0x1c);\n        character_value = find_character_or_negative_one_08007376((int)*(char *)((int)uart_pins + 0x59),PTR_DAT_08008334);\n        bit_mask = 1 << (*(byte *)((int)uart_pins + 0x59) & 0xf) & 0xffff;\n        bit_shifted_value = (character_value >> 3 & 1) << 4 | character_value & 7;\n        shifted_value = (character_value << 0x1a) >> 0x1e;\n        *(uint *)(DAT_08008344 + 0x18) = *(uint *)(DAT_08008344 + 0x18) | 1;\n        switch((character_value << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x4000000;\n        }\n        uart_pin_type = 3;\n        decode_080040e8(flag_value,&bit_mask);\n        flag_value = set_flag_08006bb8((uint)((int)*(char *)(uart_pins + 0x16) << 0x18) >> 0x1c);\n        character_value = find_character_or_negative_one_08007376((int)*(char *)(uart_pins + 0x16),PTR_DAT_08008330);\n        bit_mask = 1 << (*(byte *)(uart_pins + 0x16) & 0xf) & 0xffff;\n        bit_shifted_value = (character_value >> 3 & 1) << 4 | character_value & 7;\n        shifted_value = (character_value << 0x1a) >> 0x1e;\n        decode_080040e8(flag_value,&bit_mask);\n        *(int **)(PTR_DAT_08008354 + (uint)*(byte *)(uart_pins + 0x11) * 4) = uart_pins + 1;\n        uart_pins[1] = *uart_pins;\n        uart_pins[2] = uart_pins[0x12];\n        uart_pins[3] = uart_pins[0x13];\n        uart_pins[4] = uart_pins[0x14];\n        uart_pins[5] = uart_pins[0x15];\n        uart_pins[6] = 0xc;\n        uart_pins[7] = 0;\n        uart_pins[8] = 0;\n        validate_input_0800674e(uart_pins + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007376",
                "FUN_080098d8",
                "FUN_080040e8",
                "FUN_08007320",
                "FUN_08006bb8",
                "FUN_080073ae",
                "FUN_0800674e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008078",
            "calling": [
                "FUN_080084b0",
                "FUN_08008c44"
            ],
            "imported": false,
            "current_name": "process_uart_pins_08008078"
        },
        "FUN_08004396": {
            "renaming": {
                "FUN_08004396": "set_value_at_offset_08004396",
                "param_1": "pointer_to_value"
            },
            "code": "int set_value_at_offset_08004396(int *pointer_to_value)\n{\n    int offset = 0x10;\n    int value_to_set = pointer_to_value[0x11] & 0xff;\n    *(uint *)(*pointer_to_value + offset) = value_to_set;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004396",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_08004396"
        },
        "FUN_08003fb0": {
            "renaming": {
                "FUN_08003fb0": "set_bit_in_array_08003fb0",
                "param_1": "index",
                "DAT_08003fd4": "array_ptr"
            },
            "code": "void set_bit_in_array_08003fb0(uint index)\n{\n    if (index >= 0) {\n        int array_index = (index >> 5) + 0x20;\n        int bit_index = index & 0x1f;\n        int* DAT_08003fd4 = (int*)(DAT_08003fd4 + array_index * 4);\n        *DAT_08003fd4 = 1 << bit_index;\n        DataSynchronizationBarrier(0xf);\n        InstructionSynchronizationBarrier(0xf);\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fb0",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_08003fb0"
        },
        "FUN_080052f0": {
            "renaming": {
                "FUN_080052f0": "process_flags_080052f0",
                "param_1": "flags",
                "puVar2": "flag_values",
                "uVar3": "flag_a",
                "uVar4": "flag_b",
                "DAT_080053c8": "FLAG_C",
                "execute_command_08004aec": "execute_command",
                "cVar1": "c",
                "PTR_00000021": "(uint *)0x21",
                "decode_08004f3c": "decode",
                "0x100": "FLAG_B",
                "0x10200": "FLAG_E",
                "0x10400": "FLAG_F",
                "0x10800": "FLAG_H",
                "0x10": "flag_index",
                "*(char *)((int)param_1 + 0x3d)": "c",
                "*(char *)((int)param_1 + 0x3e)": "d",
                "*(short *)((int)param_1 + 0x2a)": "e",
                "**param_1": "f",
                "**flags": "f",
                "(*param_1)[5]": "g",
                "(*flags)[5]": "g",
                "FLAG_D": "0x8000",
                "FLAG_G": "0x200"
            },
            "code": "void process_flags_080052f0(uint **flags)\n{\n    uint *flag_values = *flags;\n    uint flag_a = flag_values[5];\n    uint flag_b = flag_values[1];\n\n    if (((flag_a & DAT_080053c8) != 0) && ((flag_b & 0x100) != 0))\n    {\n        flags[0x10] = (uint *)((uint)flags[0x10] | 1);\n        flag_values[5] = 0xfffffeff;\n        **flags = **flags | FLAG_D;\n    }\n\n    if (((flag_a & FLAG_E) != 0) && ((flag_b & 0x100) != 0))\n    {\n        flags[0x10] = (uint *)((uint)flags[0x10] | 2);\n        (*flags)[5] = 0xfffffdff;\n    }\n\n    if (((flag_a & FLAG_F) != 0) && ((flag_b & 0x100) != 0))\n    {\n        char c = *(char *)((int)flags + 0x3d);\n        if (((*(char *)((int)flags + 0x3e) == ' ') && (*(short *)((int)flags + 0x2a) == 0)) && (((c == '!' || (c == ')')) || ((c == '(' && (flags[0xc] == PTR_00000021))))))\n        {\n            execute_command(flags);\n        }\n        else\n        {\n            flags[0x10] = (uint *)((uint)flags[0x10] | 4);\n            if (*(char *)((int)flags + 0x3e) == '\\x10')\n            {\n                **flags = **flags | FLAG_G;\n            }\n            (*flags)[5] = 0xfffffbff;\n        }\n    }\n\n    if (((flag_a & FLAG_H) != 0) && ((flag_b & 0x100) != 0))\n    {\n        flags[0x10] = (uint *)((uint)flags[0x10] | 8);\n        (*flags)[5] = 0xfffff7ff;\n    }\n\n    if (flags[0x10] != (uint *)0x0)\n    {\n        decode(flags);\n    }\n}\n",
            "called": [
                "FUN_08004aec",
                "FUN_08004f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052f0",
            "calling": [],
            "imported": false,
            "current_name": "process_flags_080052f0"
        },
        "FUN_08008f0c": {
            "renaming": {
                "FUN_08008f0c": "do_nothing_08008f0c"
            },
            "code": "\nvoid do_nothing_08008f0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f0c",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "do_nothing_08008f0c"
        },
        "FUN_08002ec4": {
            "renaming": {
                "FUN_08002ec4": "call_function_from_pointer_08002ec4",
                "param_1": "param",
                "**(int **)(param_1 + 0xc0)": "pointer_to_function_pointer",
                "function_ptr": "pointer_to_function",
                "(*function_ptr)()": "call_function"
            },
            "code": "void call_function_from_pointer_08002ec4(int param)\n{\n  void (*function_ptr)() = *(void (**)(void))(**(int **)(param + 0xc0) + 8);\n  (*function_ptr)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ec4",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "call_function_from_pointer_08002ec4"
        },
        "FUN_08007306": {
            "renaming": {
                "FUN_08007306": "find_param_08007306",
                "param_1": "target",
                "param_2": "str",
                "*param_2": "*str",
                "DAT_080491a0": "0xc",
                "PTR_080491a4": "*(int *)(str + 4)"
            },
            "code": "int find_param_08007306(int target, char *str){\n  while(true){\n    if(*str == -1){\n      return 0;\n    }\n    if(*str == target){\n      break;\n    }\n    str += DAT_080491a0;\n  }\n  return PTR_080491a4;\n}",
            "called": [
                "FUN_08007306"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007306",
            "calling": [
                "FUN_08007320",
                "FUN_08007306"
            ],
            "imported": false,
            "current_name": "find_param_08007306"
        },
        "FUN_08008f0e": {
            "renaming": {
                "FUN_08008f0e": "update_and_enable_data_08008f0e",
                "update_data_08003f0c": "update_data",
                "initialize_and_enable_data_updates_080036a2": "initialize_and_enable_data_updates"
            },
            "code": "void update_and_enable_data_08008f0e(void)\n{\n  update_data_08003f0c(3);\n  initialize_and_enable_data_updates_080036a2();\n  return;\n}",
            "called": [
                "FUN_080036a2",
                "FUN_08003f0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f0e",
            "calling": [
                "FUN_08009148"
            ],
            "imported": false,
            "current_name": "update_and_enable_data_08008f0e"
        },
        "FUN_08002f2c": {
            "renaming": {
                "FUN_08002f2c": "update_data_at_address_if_match_08002f2c",
                "param_1": "value_to_match",
                "param_2": "address_to_update",
                "param_3": "new_value"
            },
            "code": "void update_data_at_address_if_match_08002f2c(uint value_to_match, uint address_to_update, uint new_value)\n{\n  if (value_to_match == 0xd0) {\n    *(uint *)PTR_DAT_08002f78 = new_value;\n    return;\n  }\n  if (value_to_match > 0xd0) {\n    if (value_to_match == 0xf4) {\n      *(uint *)PTR_DAT_08002f7c = new_value;\n      return;\n    }\n    if (value_to_match == 0xf5) {\n      *(uint *)PTR_DAT_08002f80 = new_value;\n    }\n    else if (value_to_match == 0xe0) {\n      *(uint *)PTR_DAT_08002f6c = new_value;\n      return;\n    }\n    return;\n  }\n  if (value_to_match == 0x90) {\n    *(uint *)PTR_DAT_08002f74 = new_value;\n    return;\n  }\n  if (value_to_match == 0xc0) {\n    *(uint *)PTR_DAT_08002f70 = new_value;\n    return;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f2c",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "update_data_at_address_if_match_08002f2c"
        },
        "FUN_08004954": {
            "renaming": {
                "FUN_08004954": "validate_input_08004954",
                "param_1": "input_ptr",
                "param_2": "input_data",
                "param_3": "input_len",
                "param_4": "output_ptr",
                "uVar1": "return_value",
                "puVar2": "ptr"
            },
            "code": "int validate_input_08004954(uint **input_ptr, uint *input_data, int input_len, uint *output_ptr){\n    int return_value;\n    uint *ptr;\n    \n    if (*(char *)((int)input_ptr + 0x3d) == '(') {\n        if (input_data == NULL) {\n            return_value = 1;\n        }\n        else if (input_len == 0) {\n            return_value = 1;\n        }\n        else if (*(char *)(input_ptr + 0xf) == '\\x01') {\n            return_value = 2;\n        }\n        else {\n            *(undefined *)(input_ptr + 0xf) = 1;\n            ptr = *input_ptr;\n            if ((*ptr & 1) == 0) {\n                *ptr = *ptr | 1;\n            }\n            **input_ptr = **input_ptr & 0xfffff7ff;\n            *(undefined *)((int)input_ptr + 0x3d) = 0x2a;\n            *(undefined *)((int)input_ptr + 0x3e) = 0x20;\n            return_value = 0;\n            input_ptr[0x10] = NULL;\n            input_ptr[9] = input_data;\n            *(short *)((int)input_ptr + 0x2a) = (short)input_len;\n            input_ptr[0xb] = output_ptr;\n            *(undefined2 *)(input_ptr + 10) = *(undefined2 *)((int)input_ptr + 0x2a);\n            *(undefined *)(input_ptr + 0xf) = 0;\n            (*input_ptr)[1] = (*input_ptr)[1] | 0x700;\n        }\n    }\n    else {\n        return_value = 2;\n    }\n    return return_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004954",
            "calling": [
                "FUN_08007fa0"
            ],
            "imported": false,
            "current_name": "validate_input_08004954"
        },
        "FUN_08005cec": {
            "renaming": {
                "FUN_08005cec": "update_flags_08005cec",
                "param_1": "flag_value",
                "param_2": "flag_array",
                "uVar1": "new_flags",
                "uVar2": "flag_index",
                "uVar3": "current_flags"
            },
            "code": "void update_flags_08005cec(int flag_value, uint *flag_array)\n{\n  uint new_flags;\n  uint current_flags;\n  uint flag_index;\n\n  // Clear the least significant bit of the current flags\n  current_flags = *(uint *)(flag_value + 0x20) & 0xfffffffe;\n\n  // Update the flags based on the input array\n  flag_index = *(uint *)(flag_value + 4);\n  new_flags = *flag_array;\n  current_flags = (current_flags & 0xfffffffd) | flag_array[2];\n  if (flag_value == DAT_08005d44) {\n    current_flags = (current_flags & 0xfffffff7 | flag_array[3]) & 0xfffffffb;\n    flag_index = flag_index & 0xfffffcff | flag_array[5] | flag_array[6];\n  }\n\n  // Update the flag values\n  *(uint *)(flag_value + 4) = flag_index;\n  *(uint *)(flag_value + 0x18) = *(uint *)(flag_value + 0x18) & 0xffffff8c | new_flags;\n  *(uint *)(flag_value + 0x34) = flag_array[1];\n  *(uint *)(flag_value + 0x20) = current_flags;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cec",
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "imported": false,
            "current_name": "update_flags_08005cec"
        },
        "FUN_0800886c": {
            "renaming": {
                "FUN_0800886c": "set_value_to_22_0800886c",
                "PTR_DAT_08008878": "ptr_to_value"
            },
            "code": "void set_value_to_22_0800886c(void)\n{\n    int *PTR_DAT_08008878 = (int*)PTR_DAT_08008878;\n    *PTR_DAT_08008878 = 22;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800886c",
            "calling": [
                "FUN_08009fe8"
            ],
            "imported": false,
            "current_name": "set_value_to_22_0800886c"
        },
        "FUN_08003748": {
            "renaming": {
                "FUN_08003748": "update_value_08003748",
                "PTR_DAT_08003758": "value_ptr",
                "PTR_DAT_0800375c": "byte_ptr"
            },
            "code": "void update_value_08003748(void)\n{\n  uint8_t* PTR_DAT_0800375c = (uint8_t*)PTR_DAT_0800375c;\n  int* int_ptr = (int*)PTR_DAT_08003758;\n  uint32_t value = (uint32_t)(*PTR_DAT_0800375c) + (*int_ptr);\n  *(uint32_t *)PTR_DAT_08003758 = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003748",
            "calling": [
                "FUN_08007246"
            ],
            "imported": false,
            "current_name": "update_value_08003748"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "decode_080040e8",
                "param_1": "bits",
                "param_2": "params",
                "puVar1": "bit_ptr",
                "uVar2": "decoded_index",
                "uVar3": "bit_mask",
                "uVar4": "temp_bits",
                "uVar5": "bit_index",
                "uVar6": "param_value",
                "uVar7": "decoded_value",
                "uVar9": "decoded_index",
                "iVar8": "i",
                "iVar10": "i",
                "DAT_080042c8": "decoded_value",
                "DAT_080042cc": "decoded_index",
                "temp_bits": "temp_bits",
                "temp_params": "temp_params",
                "decoded_value": "decoded_value",
                "decoded_index": "decoded_index",
                "bit_index": "bit_index",
                "bit_mask": "bit_mask",
                "bit_ptr": "bit_ptr",
                "param_value": "param_value",
                "params": "params",
                "bits": "bits"
            },
            "code": "void decode_080040e8(uint *bits, uint *params) {\n  uint *bit_ptr;\n  uint bit_mask;\n  uint bit_index;\n  uint param_value;\n  uint DAT_080042c8;\n  uint DAT_080042cc;\n  int i;\n  uint temp_bits;\n  uint temp_params;\n\n  DAT_080042c8 = 0;\n  bit_mask = 0;\n  for (bit_index = 0; bit_index <= 0xf; bit_index++) {\n    if (bit_index > 0xf) {\n      return;\n    }\n    bit_mask = 1 << (bit_index & 0xff);\n    temp_bits = *params & bit_mask;\n    if (bit_mask == temp_bits) {\n      temp_params = params[1];\n      if (temp_params == 0x12) {\n        DAT_080042c8 = params[3] + 0xc;\n      }\n      else if (temp_params < 0x13) {\n        if (temp_params == 2) {\n          DAT_080042c8 = params[3] + 8;\n        }\n        else if (temp_params < 3) {\n          if (temp_params == 0) goto LAB_0800423a;\n          if (temp_params == 1) {\n            DAT_080042c8 = params[3];\n          }\n        }\n        else if (temp_params == 3) {\n          DAT_080042c8 = 0;\n        }\n        else if (temp_params == 0x11) {\n          DAT_080042c8 = params[3] + 4;\n        }\n      }\n      else {\n        if (temp_params != DAT_080042c8) {\n          if (DAT_080042c8 < temp_params) {\n            if (temp_params == DAT_080042cc) goto LAB_0800423a;\n            DAT_080042cc = DAT_080042cc + 0x10000;\n            DAT_080042c8 = DAT_080042cc;\n          }\n          else {\n            DAT_080042cc = DAT_080042c8 - 0x100000;\n            DAT_080042c8 = DAT_080042c8;\n          }\n          if ((temp_params != DAT_080042cc) && (temp_params != DAT_080042c8 - 0xf0000)) goto LAB_080040fe;\n        }\n      }\nLAB_0800423a:\n      if (params[2] == 0) {\n        DAT_080042c8 = 4;\n      }\n      else if (params[2] == 1) {\n        bits[4] = bit_mask;\n        DAT_080042c8 = 8;\n      }\n      else {\n        bits[5] = bit_mask;\n        DAT_080042c8 = 8;\n      }\nLAB_080040fe:\n      bit_index = bit_index;\n      bit_ptr = bits;\n      if (0xff < temp_bits) {\n        bit_index = bit_index - 8;\n        bit_ptr = bits + 1;\n      }\n      *bit_ptr = *bit_ptr & ~(0xf << (bit_index << 2 & 0xff)) | DAT_080042c8 << (bit_index << 2 & 0xff);\n      if ((params[1] & 0x10000000) != 0) {\n        *(uint *)(DAT_080042bc + 0x18) = *(uint *)(DAT_080042bc + 0x18) | 1;\n        i = (bit_index & 3) << 2;\n        if (bits == DAT_080042d0) {\n          i = 0;\n        }\n        else if (bits == DAT_080042d0 + 0x100) {\n          i = 1;\n        }\n        else if (bits == DAT_080042d0 + 0x200) {\n          i = 2;\n        }\n        else if (bits == DAT_080042d0 + 0x300) {\n          i = 3;\n        }\n        else {\n          i = 4;\n        }\n        *(uint *)(DAT_080042c0 + ((bit_index >> 2) + 2) * 4) = *(uint *)(DAT_080042c0 + ((bit_index >> 2) + 2) * 4) & ~(0xf << i) | i << i;\n        if ((params[1] & 0x10000) == 0) {\n          *DAT_080042c4 = *DAT_080042c4 & ~temp_bits;\n        }\n        else {\n          *DAT_080042c4 = *DAT_080042c4 | temp_bits;\n        }\n        if ((params[1] & 0x20000) == 0) {\n          DAT_080042c4[1] = DAT_080042c4[1] & ~temp_bits;\n        }\n        else {\n          DAT_080042c4[1] = DAT_080042c4[1] | temp_bits;\n        }\n        if ((params[1] & 0x100000) == 0) {\n          DAT_080042c4[2] = DAT_080042c4[2] & ~temp_bits;\n        }\n        else {\n          DAT_080042c4[2] = DAT_080042c4[2] | temp_bits;\n        }\n        if ((params[1] & 0x200000) == 0) {\n          DAT_080042c4[3] = DAT_080042c4[3] & ~temp_bits;\n        }\n        else {\n          DAT_080042c4[3] = temp_bits | DAT_080042c4[3];\n        }\n      }\n    }\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "FUN_08007258",
                "FUN_080077b0",
                "FUN_08006ca8",
                "FUN_08008078",
                "FUN_08006e68"
            ],
            "imported": false,
            "current_name": "decode_080040e8"
        },
        "FUN_080036d4": {
            "renaming": {
                "FUN_080036d4": "do_nothing_080036d4"
            },
            "code": "\nvoid do_nothing_080036d4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036d4",
            "calling": [
                "FUN_08003724"
            ],
            "imported": false,
            "current_name": "do_nothing_080036d4"
        },
        "FUN_0800288c": {
            "renaming": {
                "FUN_0800288c": "copy_char_to_buffer_0800288c",
                "param_1": "buffer_address",
                "param_2": "char_to_copy",
                "puVar1": "buffer_pointer",
                "iVar2": "result",
                "uVar3": "result",
                "cVar4": "new_buffer_count",
                "uVar5": "new_buffer_size",
                "uVar6": "new_buffer_size",
                "local_11": "char_to_copy",
                "PTR_DAT_08002914": "buffer_pointer",
                "PTR_DAT_08002918": "buffer_data_pointer",
                "PTR_DAT_0800290c": "buffer_count_pointer",
                "PTR_DAT_08002910": "buffer_size_pointer",
                "PTR_DAT_08002908": "buffer_initialized_pointer",
                "copy_data_to_buffer_08007ede": "copy_data_to_buffer",
                "allocate_and_copy_data_to_buffer_08009908": "allocate_and_copy_data_to_buffer"
            },
            "code": "int copy_char_to_buffer_0800288c(int buffer_address, char char_to_copy){\n    int result = 0;\n    int* PTR_DAT_08002914 = PTR_DAT_08002914;\n    char* PTR_DAT_08002918 = PTR_DAT_08002918;\n    char* PTR_DAT_0800290c = PTR_DAT_0800290c;\n    char* PTR_DAT_08002910 = PTR_DAT_08002910;\n    char* PTR_DAT_08002908 = PTR_DAT_08002908;\n    char* buffer_data = (char*)*(int*)PTR_DAT_08002914;\n    char buffer_size = (char)*PTR_DAT_08002910;\n    if (*PTR_DAT_08002908 == \"\\0\") {\n        result = copy_data_to_buffer_08007ede(buffer_address + 0x14, &char_to_copy, 1);\n        if (result == 0) {\n            result = 1;\n        }\n        else {\n            result = 0;\n        }\n    }\n    else {\n        char new_buffer_size = (char)(*PTR_DAT_0800290c + 1);\n        if ((char)*PTR_DAT_08002910 < new_buffer_size) {\n            if (new_buffer_size < 0x20) {\n                new_buffer_size = 0x20;\n            }\n            int buffer_allocation_result = allocate_and_copy_data_to_buffer_08009908(*(int*)PTR_DAT_08002914, new_buffer_size);\n            *(int*)PTR_DAT_08002914 = buffer_allocation_result;\n            if (buffer_allocation_result == 0) {\n                result = 0;\n            }\n            else {\n                *PTR_DAT_08002910 = new_buffer_size;\n                result = 1;\n            }\n        }\n        if (*(int*)PTR_DAT_08002914 == 0) {\n            *(int*)(buffer_address + 4) = 1;\n            result = 0;\n        }\n        else {\n            buffer_data[(char)*PTR_DAT_0800290c] = char_to_copy;\n            *PTR_DAT_0800290c += 1;\n            *PTR_DAT_08002910 = *PTR_DAT_0800290c;\n            result = 1;\n        }\n    }\n    return result;\n}",
            "called": [
                "FUN_08007ede",
                "FUN_08009908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800288c",
            "calling": [
                "FUN_08001bf8"
            ],
            "imported": false,
            "current_name": "copy_char_to_buffer_0800288c"
        },
        "FUN_0800010c": {
            "renaming": {
                "FUN_0800010c": "initialize_param_if_not_empty_0800010c",
                "param_1": "param_ptr",
                "*PTR_DAT_08000124": "is_initialized_ptr",
                "DAT_08000128": "some_data",
                "PTR_FUN_0800012c": "initialized_param_ptr"
            },
            "code": "undefined * initialize_param_if_not_empty_0800010c(undefined *param_ptr) {\n  if (**PTR_DAT_08000124 == '\\0') {\n    if (DAT_08000128 != 0) {\n      param_ptr = PTR_FUN_0800012c;\n    }\n    **PTR_DAT_08000124 = 1;\n  }\n  return param_ptr;\n}",
            "called": [
                "FUN_0800a424"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800010c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_param_if_not_empty_0800010c"
        },
        "FUN_08002e26": {
            "renaming": {
                "FUN_08002e26": "copy_and_encode_data_08002e26",
                "param_1": "data_ptr",
                "param_2": "data_value",
                "copy_value_to_pointer_08003154": "copy_data_values",
                "process_data_with_offset_08002ddc": "process_data",
                "encode_data_from_pointer_08002df6": "encode_data"
            },
            "code": "void copy_and_encode_data_08002e26(int data_ptr, int data_value){\n  *(int *)(data_ptr + 0xc0) = data_value;\n  copy_data_values(data_ptr + 0x40);\n  process_data(data_ptr);\n  encode_data(data_ptr);\n  return;\n}",
            "called": [
                "FUN_08003154",
                "FUN_08002ddc",
                "FUN_08002df6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e26",
            "calling": [
                "FUN_08003048"
            ],
            "imported": false,
            "current_name": "copy_and_encode_data_08002e26"
        },
        "FUN_080036d8": {
            "renaming": {
                "FUN_080036d8": "validate_input_080036d8",
                "param_1": "input_value",
                "iVar1": "input_check_result",
                "divisor": "divisor",
                "PTR_DAT_0800371c": "ptr_data_1",
                "PTR_DAT_08003718": "ptr_data_2",
                "check_input_08003fd8": "check_input",
                "decode_and_store_bits_08003f30": "decode_and_store_bits",
                "PTR_DAT_08003720": "ptr_data_3"
            },
            "code": "int validate_input_080036d8(uint input_value) {\n    uint divisor = *(uint *)PTR_DAT_0800371c / (1000 / (byte)*PTR_DAT_08003718);\n    int input_check_result = check_input_08003fd8(divisor);\n    if (input_check_result != 0) {\n        return 1;\n    }\n    if (input_value > 0xf) {\n        return 1;\n    }\n    decode_and_store_bits_08003f30(0xffffffff, input_value, 0);\n    *(uint *)PTR_DAT_08003720 = input_value;\n    return 0;\n}",
            "called": [
                "FUN_08003fd8",
                "FUN_08003f30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036d8",
            "calling": [
                "FUN_08003724",
                "FUN_080058d2"
            ],
            "imported": false,
            "current_name": "validate_input_080036d8"
        },
        "FUN_08006e68": {
            "renaming": {
                "FUN_08006e68": "decode_and_set_flags_08006e68",
                "param_1": "input",
                "puVar1": "data_pointer",
                "iVar2": "char_index",
                "uVar3": "flag",
                "local_20": "bit_mask",
                "local_1c": "constant_2",
                "local_18": "constant_0",
                "local_14": "constant_3"
            },
            "code": "\nvoid decode_and_set_flags_08006e68(undefined4 input)\n\n{\n  undefined *data_pointer;\n  int char_index;\n  undefined4 flag;\n  uint bit_mask;\n  undefined4 constant_2;\n  undefined4 constant_0;\n  undefined4 constant_3;\n  \n  data_pointer = PTR_DAT_08007100;\n  char_index = find_character_or_negative_one_08007376((int)(char)*PTR_DAT_08007100,PTR_DAT_08007104);\n  set_flags_based_on_param_08007438(input);\n  flag = set_flag_08006bb8((uint)((int)(char)*data_pointer << 0x18) >> 0x1c);\n  constant_2 = 2;\n  constant_0 = 0;\n  constant_3 = 3;\n  *(uint *)(DAT_08007108 + 0x18) = *(uint *)(DAT_08007108 + 0x18) | 1;\n  switch((uint)(char_index << 0x11) >> 0x19) {\n  case 1:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000001;\n    break;\n  case 2:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffe | 0x7000000;\n    break;\n  case 3:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000002;\n    break;\n  case 4:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffd | 0x7000000;\n    break;\n  case 5:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000004;\n    break;\n  case 6:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffb | 0x7000000;\n    break;\n  case 7:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000008;\n    break;\n  case 8:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffff7 | 0x7000000;\n    break;\n  case 9:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000030;\n    break;\n  case 10:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffffcf | 0x7000010;\n    break;\n  case 0xb:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffffcf | 0x7000000;\n    break;\n  case 0xc:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x70000c0;\n    break;\n  case 0xd:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffff3f | 0x7000040;\n    break;\n  case 0xe:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffff3f | 0x7000000;\n    break;\n  case 0xf:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000300;\n    break;\n  case 0x10:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000200;\n    break;\n  case 0x11:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000100;\n    break;\n  case 0x12:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000000;\n    break;\n  case 0x13:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000c00;\n    break;\n  case 0x14:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffff3ff | 0x7000800;\n    break;\n  case 0x15:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffff3ff | 0x7000000;\n    break;\n  case 0x16:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7001000;\n    break;\n  case 0x17:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffefff | 0x7000000;\n    break;\n  case 0x1b:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7008000;\n    break;\n  case 0x1c:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffff7fff | 0x7000000;\n    break;\n  case 0x21:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff;\n    break;\n  case 0x22:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x1000000;\n    break;\n  case 0x23:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x2000000;\n    break;\n  case 0x24:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x4000000;\n  }\n  bit_mask = 1 << ((byte)*PTR_DAT_08007100 & 0xf) & 0xffff;\n  decode_080040e8(flag,&bit_mask);\n  return;\n}\n\n",
            "called": [
                "FUN_08007376",
                "FUN_080040e8",
                "FUN_08006bb8",
                "FUN_08007438"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e68",
            "calling": [
                "FUN_08006092"
            ],
            "imported": false,
            "current_name": "decode_and_set_flags_08006e68"
        },
        "FUN_080086e8": {
            "renaming": {
                "FUN_080086e8": "find_index_of_value_080086e8",
                "param_1": "value_to_find",
                "uVar1": "index"
            },
            "code": "uint find_index_of_value_080086e8(int value_to_find) {\n  uint index = 0;\n  if (value_to_find == 0) {\n    index = 5;\n  }\n  else {\n    while (index < 5) {\n      if (value_to_find == *(int *)(PTR_DAT_08008708 + index * 4)) {\n        return index;\n      }\n      index++;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080086e8",
            "calling": [
                "FUN_0800870c",
                "FUN_08008730"
            ],
            "imported": false,
            "current_name": "find_index_of_value_080086e8"
        },
        "FUN_0800a110": {
            "renaming": {
                "FUN_0800a110": "check_return_value_0800a110",
                "param_1": "result",
                "param_2": "input",
                "puVar1": "ptr",
                "iVar2": "return_val"
            },
            "code": "void check_return_value_0800a110(int *result, undefined4 input) {\n    undefined *ptr = PTR_DAT_0800a12c;\n    *(undefined4 *)PTR_DAT_0800a12c = 0;\n    int return_val = return_one_08008850(input);\n    if (return_val == -1 && *(int *)ptr != 0) {\n        *result = *(int *)ptr;\n    }\n    return;\n}",
            "called": [
                "FUN_08008850"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a110",
            "calling": [
                "FUN_08009eac"
            ],
            "imported": false,
            "current_name": "check_return_value_0800a110"
        },
        "FUN_08003b8c": {
            "renaming": {
                "FUN_08003b8c": "check_and_update_08003b8c",
                "param_1": "pointer_array",
                "iVar1": "current_value",
                "iVar2": "current_pointer",
                "get_value_from_pointer_08003760": "get_current_value",
                "get_initial_value": "get_initial_value"
            },
            "code": "int check_and_update_08003b8c(int *pointer_array){\n                      int current_pointer = *pointer_array;\n                      if ((*(uint *)(current_pointer + 8) & 1) == 0) {\n                        return 0;\n                      }\n                      *(uint *)(current_pointer + 8) = *(uint *)(current_pointer + 8) & 0xfffffffe;\n                      int initial_value = get_initial_value();\n                      do {\n                        if ((*(uint *)(*pointer_array + 8) & 1) == 0) {\n                          return 0;\n                        }\n                        int current_value = get_current_value();\n                      } while ((uint)(current_value - initial_value) < 3);\n                      pointer_array[10] = pointer_array[10] | 0x10;\n                      pointer_array[0xb] = pointer_array[0xb] | 1;\n                      return 1;\n                    }",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003b8c",
            "calling": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_08003e20",
                "FUN_08003bd8"
            ],
            "imported": false,
            "current_name": "check_and_update_08003b8c"
        },
        "FUN_080035b8": {
            "renaming": {
                "FUN_080035b8": "initialize_device_080035b8",
                "local_54": "configuration",
                "local_4c": "configuration_1",
                "local_44": "input",
                "local_40": "input_1",
                "local_3c": "input_2",
                "local_38": "input_3",
                "local_34": "input_4",
                "local_30": "flags",
                "local_20": "mask",
                "local_1c": "shift",
                "local_14": "unused",
                "local_10": "unused_1",
                "local_c": "unused_2",
                "PTR_s__home_bo__arduino15_packages_STM_08003654": "wait_message",
                "DAT_08003650": "constant"
            },
            "code": "void initialize_device_080035b8()\n{\n  int result;\n  uint value;\n  uint32_t configuration[2];\n  uint32_t input[4];\n  uint32_t flags = 0;\n  uint32_t mask = 0xffffffff;\n  uint32_t shift = 0;\n  configuration[0] = 2;\n  configuration[1] = 0x8000;\n  input[0] = 0xf;\n  input[1] = 2;\n  input[2] = 0;\n  input[3] = 0x400;\n  result = initialize_device_080035b8_08005460(configuration);\n  if (result != 0) {\n    wait_forever(PTR_s__home_bo__arduino15_packages_STM_08003654,0x88);\n  }\n  result = validate_and_calculate_080058ac(input);\n  if (result != 0) {\n    wait_forever(PTR_s__home_bo__arduino15_packages_STM_08003654,0x95);\n  }\n  result = set_configuration_08005aa4(configuration);\n  if (result != 0) {\n    wait_forever(PTR_s__home_bo__arduino15_packages_STM_08003654,0x9c);\n  }\n  value = get_value_from_pointer_08005a1c();\n  check_input((uint)((ulonglong)DAT_08003650 * (ulonglong)value >> 0x26));\n  set_flag_if_four(flags, 4);\n  decode_and_store_bits(mask, shift);\n}",
            "called": [
                "FUN_08005460",
                "FUN_08003fd8",
                "FUN_08005a1c",
                "FUN_080058ac",
                "FUN_08004024",
                "FUN_08005aa4",
                "FUN_08003f30",
                "FUN_080073e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035b8",
            "calling": [
                "FUN_080072fa"
            ],
            "imported": false,
            "current_name": "initialize_device_080035b8"
        },
        "FUN_08001c18": {
            "renaming": {
                "FUN_08001c18": "process_i2c_input_08001c18",
                "param_1": "device_address",
                "param_2": "input_length",
                "param_3": "expected_output_length",
                "param_4": "output_buffer",
                "puVar1": "buffer_pointer",
                "uVar2": "byte",
                "iVar3": "received_length",
                "iVar4": "remaining_length",
                "bVar5": "is_buffer_not_empty",
                "PTR_DAT_08001cbc": "I2C_INPUT_BUFFER",
                "PTR_DAT_08001cc4": "I2C_OUTPUT_BUFFER",
                "PTR_DAT_08001cc8": "output_buffer"
            },
            "code": "void process_i2c_input_08001c18(uint8_t device_address, uint8_t input_length, int expected_output_length, uint8_t* PTR_DAT_08001cc8)\n{\n  uint8_t* input_buffer = PTR_DAT_08001cbc;\n  if (input_length != 0xff)\n  {\n    initialize_flags(input_buffer, device_address);\n    copy_char_to_buffer_wrapper(input_length & 0xff);\n    check_input(input_buffer, PTR_DAT_08001cc8);\n  }\n  process_input_and_check(input_buffer, device_address, expected_output_length);\n  int received_length = calculate_difference_between_two_pointers(PTR_DAT_08001cbc);\n  if (expected_output_length < received_length)\n  {\n    send_encoded_string(PTR_DAT_08001cc4, I2C_TOO_MANY_BYTES_RECEIVED);\n  }\n  else\n  {\n    int remaining_length = calculate_difference_between_two_pointers(PTR_DAT_08001cbc);\n    if (remaining_length < expected_output_length)\n    {\n      send_encoded_string(PTR_DAT_08001cc4, I2C_TOO_FEW_BYTES_RECEIVED);\n    }\n  }\n  PTR_DAT_08001cc8[0] = device_address;\n  PTR_DAT_08001cc8[1] = input_length;\n  for (int i = 0; i < expected_output_length; i++)\n  {\n    if (calculate_difference_between_two_pointers(PTR_DAT_08001cbc) == 0)\n    {\n      break;\n    }\n    uint8_t byte = get_first_byte_from_array();\n    PTR_DAT_08001cc8[i + 2] = byte;\n  }\n  send_encoded_data(PTR_DAT_08001cc4, 0x77, expected_output_length + 2U & 0xff, PTR_DAT_08001cc8);\n}\n",
            "called": [
                "FUN_0800270c",
                "FUN_08001bf8",
                "FUN_08002f0a",
                "FUN_08002f14",
                "FUN_08001c08",
                "FUN_08002a58",
                "FUN_08002a30",
                "FUN_08002c14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c18",
            "calling": [
                "FUN_08001cd0",
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "process_i2c_input_08001c18"
        },
        "FUN_08006460": {
            "renaming": {
                "FUN_08006460": "set_bit_and_check_if_reset_08006460",
                "param_1": "bit_array",
                "param_2": "bit_index",
                "puVar1": "array_ptr"
            },
            "code": "uint set_bit_and_check_if_reset_08006460(uint **bit_array, uint bit_index)\n{\n    uint *array_ptr = *bit_array;\n    set_bit_in_uint_array_08006420(array_ptr, bit_index, 0);\n    if (((array_ptr[8] & 0x1111) == 0) && ((array_ptr[8] & 0x444) == 0)) {\n        array_ptr[17] &= 0xffff7fff;\n    }\n    array_ptr = *bit_array;\n    if (((array_ptr[8] & 0x1111) == 0) && ((array_ptr[8] & 0x444) == 0)) {\n        *array_ptr &= 0xfffffffe;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08006420"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006460",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": false,
            "current_name": "set_bit_and_check_if_reset_08006460"
        },
        "FUN_08004046": {
            "renaming": {
                "FUN_08004046": "do_nothing_and_return_08004046",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "void do_nothing_and_return_08004046(void)\n{\n  do_nothing_08004044();\n  return;\n}",
            "called": [
                "FUN_08004044"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004046",
            "calling": [
                "FUN_08007246"
            ],
            "imported": false,
            "current_name": "do_nothing_and_return_08004046"
        },
        "FUN_08008880": {
            "renaming": {
                "FUN_08008880": "get_permissions_08008880",
                "param_1": "permission_level",
                "bVar1": "is_valid_perm_level",
                "cVar2": "permission_value",
                "uVar3": "permissions",
                "uVar4": "shift_amount",
                "PTR_DAT_080088d8": "permission_data",
                "PTR_DAT_080088dc": "permission_data_shift_amount"
            },
            "code": "uint get_permissions_08008880(uint permission_level) {\n  bool is_valid_perm_level;\n  char permission_value;\n  uint permissions;\n  uint shift_amount;\n\n  if (permission_level < 14) {\n    is_valid_perm_level = (permission_level + 46) < 60;\n  }\n  else {\n    is_valid_perm_level = permission_level < 60;\n  }\n\n  if (is_valid_perm_level) {\n    if (permission_level < 14) {\n      permission_level += 46;\n    }\n    permission_value = PTR_DAT_080088d8[permission_level];\n  }\n  else {\n    permission_value = -1;\n  }\n\n  if (permission_value == -1) {\n    permissions = 0;\n  }\n  else {\n    permissions = check_and_update_permissions();\n    shift_amount = *(uint *)PTR_DAT_080088dc;\n    if (shift_amount != 12) {\n      if (shift_amount < 12) {\n        permissions >>= (12 - shift_amount);\n      }\n      else {\n        permissions <<= (shift_amount - 12);\n      }\n    }\n  }\n\n  return permissions;\n}",
            "called": [
                "FUN_08006d80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008880",
            "calling": [
                "FUN_080022f8",
                "FUN_08000488"
            ],
            "imported": false,
            "current_name": "get_permissions_08008880"
        },
        "FUN_08004044": {
            "renaming": {
                "FUN_08004044": "do_nothing_08004044"
            },
            "code": "\nvoid do_nothing_08004044(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004044",
            "calling": [
                "FUN_08004046"
            ],
            "imported": false,
            "current_name": "do_nothing_08004044"
        },
        "FUN_08002ed2": {
            "renaming": {
                "FUN_08002ed2": "process_input_08002ed2",
                "param_1": "param",
                "uVar1": "input_val",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "void process_input_08002ed2(uint32_t param)\n{\n  uint32_t input_val;\n  code** code_ptr = *(code ***)(*(int **)(param + 0xc0) + 0xc);\n  input_val = (**code_ptr)();\n  if (input_val != 0xffffffff) {\n    process_input_08002ed2_08003474(param + 0x44, input_val & 0xff);\n  }\n  return;\n}",
            "called": [
                "FUN_08003474"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ed2",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "process_input_08002ed2"
        },
        "FUN_080073ae": {
            "renaming": {
                "FUN_080073ae": "compare_and_return_080073ae",
                "param_1": "value1",
                "param_2": "value2"
            },
            "code": "int compare_and_return_080073ae(int value1, int value2) {\n    if (value1 != value2) {\n        if (value1 == 0) {\n            return value2;\n        }\n        if (value2 == 0) {\n            return value1;\n        }\n        value1 = 0;\n    }\n    return value1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073ae",
            "calling": [
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "imported": false,
            "current_name": "compare_and_return_080073ae"
        },
        "FUN_08000488": {
            "renaming": {
                "FUN_08000488": "set_bit_08000488",
                "param_1": "bit_index",
                "param_2": "set_bit",
                "uVar1": "permissions",
                "PTR_DAT_080004c8": "data_ptr",
                "PTR_DAT_080004cc": "flag_ptr",
                "PTR_DAT_080004d0": "encoded_data_ptr"
            },
            "code": "void set_bit_08000488(uint bit_index, int set_bit_08000488){\\n  uint* PTR_DAT_080004c8 = (uint*)PTR_DAT_080004c8;\\n  if(bit_index < 0xe){\\n    if(set_bit_08000488 == 0){\\n      *PTR_DAT_080004c8 &= ~(1 << (bit_index & 0xff));\\n      return;\\n    }\\n    *PTR_DAT_080004c8 |= 1 << (bit_index & 0xff);\\n    if(*PTR_DAT_080004cc == \"\\0\"){\\n      uint permissions = get_permissions_08008880();\\n      encode_data_08002ef2(PTR_DAT_080004d0, bit_index, permissions);\\n      return;\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08008880",
                "FUN_08002ef2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000488",
            "calling": [
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "set_bit_08000488"
        },
        "FUN_08003f0c": {
            "renaming": {
                "FUN_08003f0c": "update_data_08003f0c",
                "param_1": "input_value",
                "DAT_08003f2c": "data_ptr",
                "* (uint *) (DAT_08003f2c + 0xc)": "current_data",
                "updated_data": "updated_data"
            },
            "code": "void update_data_08003f0c(uint8_t input_value)\n{\n    uint32_t *DAT_08003f2c = (uint32_t *)(DAT_08003f2c + 0xc);\n    uint32_t * (uint *) (DAT_08003f2c + 0xc) = *DAT_08003f2c;\n    uint32_t updated_data = (input_value & 7) << 8 | (* (uint *) (DAT_08003f2c + 0xc) & 0xf8ff) | 0x5fa0000;\n    *DAT_08003f2c = updated_data;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f0c",
            "calling": [
                "FUN_08003724",
                "FUN_08008f0e"
            ],
            "imported": false,
            "current_name": "update_data_08003f0c"
        },
        "FUN_08008f1c": {
            "renaming": {
                "FUN_08008f1c": "firmware_update_process_08008f1c",
                "extract_and_update_firmware_08001b48": "extract_and_update_firmware",
                "process_data_080022f8": "process_data",
                "calculate_value_if_not_zero_08008bf4": "calculate_value_if_data_not_zero"
            },
            "code": "void firmware_update_process_08008f1c(void)\n{\n  do_nothing();\n  extract_and_update_firmware();\n  while(true)\n  {\n    while (data_available())\n    {\n      process_data();\n    }\n    calculate_value_if_not_zero_08008bf4();\n  }\n}",
            "called": [
                "FUN_08008bf4",
                "FUN_08001b48",
                "FUN_08008f0c",
                "FUN_080022f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f1c",
            "calling": [
                "FUN_08003658"
            ],
            "imported": false,
            "current_name": "firmware_update_process_08008f1c"
        },
        "FUN_080058ac": {
            "renaming": {
                "FUN_080058ac": "validate_and_calculate_080058ac",
                "param_1": "input_values",
                "param_2": "input_length",
                "puVar1": "memory_pointer",
                "iVar2": "time_diff",
                "iVar3": "initial_time",
                "uVar4": "calculated_value",
                "DAT_08005a0c": "initial_memory_pointer",
                "DAT_08005a10": "shared_memory",
                "PTR_DAT_08005a14": "shared_memory_shift",
                "PTR_DAT_08005a18": "shared_memory_location"
            },
            "code": "int validate_and_calculate_080058ac(uint *input_values, uint input_length)\n{\n  uint *memory_pointer;\n  int time_diff;\n  int initial_time;\n  uint calculated_value;\n  \n  memory_pointer = DAT_08005a0c;\n  if (((*DAT_08005a0c & 7) < input_length) &&\n     (*DAT_08005a0c = *DAT_08005a0c & 0xfffffff8 | input_length, input_length != (*memory_pointer & 7))) {\n    return 1;\n  }\n  if ((*input_values & 2) != 0) {\n    DAT_08005a10[1] = DAT_08005a10[1] & 0xffffff0f | input_values[2];\n  }\n  if ((*input_values & 1) != 0) {\n    uint input_value_1 = input_values[1];\n    if (input_value_1 == 1) {\n      if ((*DAT_08005a10 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((input_value_1 != 2) && ((*DAT_08005a10 & 2) == 0)) {\n      return 1;\n    }\n    DAT_08005a10[1] = input_value_1 | DAT_08005a10[1] & 0xfffffffc;\n    initial_time = get_current_time();\n    if (input_values[1] == 1) {\n      while ((DAT_08005a10[1] & 0xc) != 4) {\n        time_diff = get_current_time() - initial_time;\n        if (5000 < (uint)time_diff) {\n          return 3;\n        }\n      }\n    }\n    else if (input_values[1] == 2) {\n      while ((DAT_08005a10[1] & 0xc) != 8) {\n        time_diff = get_current_time() - initial_time;\n        if (5000 < (uint)time_diff) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((DAT_08005a10[1] & 0xc) != 0) {\n        time_diff = get_current_time() - initial_time;\n        if (5000 < (uint)time_diff) {\n          return 3;\n        }\n      }\n    }\n  }\n  memory_pointer = DAT_08005a0c;\n  if ((input_length < (*DAT_08005a0c & 7)) &&\n     (*DAT_08005a0c = *DAT_08005a0c & 0xfffffff8 | input_length, input_length != (*memory_pointer & 7))) {\n    return 1;\n  }\n  if ((*input_values & 4) != 0) {\n    DAT_08005a10[1] = DAT_08005a10[1] & 0xfffff8ff | input_values[3];\n  }\n  if ((*input_values & 8) != 0) {\n    DAT_08005a10[1] = DAT_08005a10[1] & 0xffffc7ff | input_values[4] << 3;\n  }\n  calculated_value = calculate_value();\n  *(uint *)PTR_DAT_08005a18 = calculated_value >> PTR_DAT_08005a14[(DAT_08005a10[1] << 0x18) >> 0x1c];\n  validate_input(0xf);\n  return 0;\n}",
            "called": [
                "FUN_080058d2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058ac",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "validate_and_calculate_080058ac"
        },
        "FUN_08006bb8": {
            "renaming": {
                "FUN_08006bb8": "set_flag_08006bb8",
                "param_1": "flag",
                "uVar1": "return_value",
                "DAT_08006c48": "flag_base_address",
                "DAT_08006c4c": "return_value_0",
                "DAT_08006c50": "return_value_1",
                "DAT_08006c54": "return_value_2",
                "DAT_08006c58": "return_value_3",
                "DAT_08006c5c": "return_value_4"
            },
            "code": "uint32_t set_flag_08006bb8(uint32_t flag) {\n    uint32_t* flag_ptr = (uint32_t*)(DAT_08006c48 + 0x18);\n    switch(flag) {\n        case 0:\n            *flag_ptr |= 0x4;\n            return DAT_08006c4c;\n        case 1:\n            *flag_ptr |= 0x8;\n            return DAT_08006c50;\n        case 2:\n            *flag_ptr |= 0x10;\n            return DAT_08006c54;\n        case 3:\n            *flag_ptr |= 0x20;\n            return DAT_08006c58;\n        case 4:\n            *flag_ptr |= 0x40;\n            return DAT_08006c5c;\n        default:\n            return 0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006bb8",
            "calling": [
                "FUN_08007258",
                "FUN_080077b0",
                "FUN_08006ca8",
                "FUN_08008078",
                "FUN_08006e68"
            ],
            "imported": false,
            "current_name": "set_flag_08006bb8"
        },
        "FUN_08007438": {
            "renaming": {
                "FUN_08007438": "set_flags_based_on_param_08007438",
                "param_1": "param",
                "*param_1": "*param",
                "DAT_080074d0": "global_var1",
                "DAT_080074dc": "global_var2",
                "0x40000000": "global_var3",
                "DAT_080074d4": "global_var4",
                "DAT_080074d8": "global_var5",
                "_DAT_4002101c": "global_var3"
            },
            "code": "void set_flags_based_on_param_08007438(int *param)\n{\n    int flag1 = 0x800;\n    int flag2 = 1;\n    int flag3 = 2;\n    int flag4 = 4;\n\n    if (*param == DAT_080074d0) {\n        *(uint *)(DAT_080074d0 + 0xe418) |= flag1;\n        *(int **)DAT_080074dc = param;\n    }\n\n    if (*param == 0x40000000) {\n        _DAT_4002101c |= flag2;\n        *(int **)(DAT_080074dc + 4) = param;\n    }\n\n    if (*param == DAT_080074d4) {\n        *(uint *)(DAT_080074d4 + 0x20c1c) |= flag3;\n        *(int **)(DAT_080074dc + 8) = param;\n    }\n\n    if (*param == DAT_080074d8) {\n        *(uint *)(DAT_080074d8 + 0x2081c) |= flag4;\n        *(int **)(DAT_080074dc + 0xc) = param;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007438",
            "calling": [
                "FUN_08006e68",
                "FUN_08007708"
            ],
            "imported": false,
            "current_name": "set_flags_based_on_param_08007438"
        },
        "FUN_08004aec": {
            "renaming": {
                "FUN_08004aec": "execute_command_08004aec",
                "param_1": "command_data",
                "param_1[0xb]": "command_type",
                "param_1[0xc]": "command_status",
                "*(char *)((int)param_1 + 0x3d)": "first_char",
                "DAT_08004b7c": "PTR_DAT_08004b7c",
                "(*param_1)[1]": "command_data_1",
                "(*param_1)[5]": "command_data_5",
                "**param_1": "command_data_value"
            },
            "code": "int execute_command_08004aec(uint **command_data) {\n    uint *command_type = command_data[0xb];\n    char first_char = *(char *)((int)command_data + 0x3d);\n    if ((command_type == (uint *)0x4 || command_type == (uint *)0x8) && first_char == '(') {\n        command_data[0xb] = DAT_08004b7c;\n        (*command_data)[1] &= 0xfffff8ff;\n        (*command_data)[5] = 0xfffffbff;\n        **command_data &= 0xfffffbff;\n        command_data[0xc] = (uint *)0x0;\n        *(char *)((int)command_data + 0x3d) = ' ';\n        *(char *)((int)command_data + 0x3e) = '\\0';\n        execute_subroutine_and_set_flags_08007ff0();\n    } else if (first_char == '!') {\n        command_data[0xb] = DAT_08004b7c;\n        command_data[0xc] = (uint *)0x21;\n        *(char *)((int)command_data + 0x3d) = ' ';\n        *(char *)((int)command_data + 0x3e) = '\\0';\n        (*command_data)[1] &= 0xfffff8ff;\n        (*command_data)[5] = 0xfffffbff;\n        **command_data &= 0xfffffbff;\n        do_nothing_08004a22();\n    } else {\n        (*command_data)[5] = 0xfffffbff;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08007ff0",
                "FUN_08004a22"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004aec",
            "calling": [
                "FUN_080052f0"
            ],
            "imported": false,
            "current_name": "execute_command_08004aec"
        },
        "FUN_0800887c": {
            "renaming": {
                "FUN_0800887c": "returnOne_0800887c"
            },
            "code": "int returnOne_0800887c() {\n    int one = 1;\n    return one;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800887c",
            "calling": [
                "thunk_FUN_0800887c"
            ],
            "imported": false,
            "current_name": "returnOne_0800887c"
        },
        "FUN_08004728": {
            "renaming": {
                "FUN_08004728": "initialize_08004728",
                "param_1": "input",
                "param_2": "data1",
                "param_3": "data2",
                "param_4": "flag",
                "uVar1": "result",
                "puVar2": "ptr",
                "local_c": "count"
            },
            "code": "uint32_t initialize_08004728(uint32_t **input, uint32_t *data1, uint32_t *data2, uint16_t flag)\n{\n    uint32_t result;\n    uint32_t *ptr;\n    int count = 0;\n    if ((*input)[0x3d] == ' ')\n    {\n        count = (uint32_t)((uint64_t)DAT_080047ec * (uint64_t)((*PTR_DAT_080047e8) >> 3) >> 0x28) * 0x19;\n        do\n        {\n            if (count == 0)\n            {\n                input[0xc] = NULL;\n                (*input)[0x3d] = 0x20;\n                input[0xf] = 0;\n                return 3;\n            }\n            ptr = *input;\n            count--;\n        } while ((ptr[6] & 2) != 0);\n        if ((*input)[0xf] == 1)\n        {\n            result = 2;\n        }\n        else\n        {\n            input[0xf] = 1;\n            if ((*ptr & 1) == 0)\n            {\n                *ptr = *ptr | 1;\n            }\n            **input = **input & 0xfffff7ff;\n            (*input)[0x3d] = 0x21;\n            (*input)[0x3e] = 0x10;\n            result = 0;\n            input[0x10] = NULL;\n            input[9] = data2;\n            (*input)[0xb] = DAT_080047f0;\n            (*input)[10] = flag;\n            input[0x11] = data1;\n            **input = **input | 0x100;\n            input[0xf] = 0;\n            (*input)[1] = (*input)[1] | 0x700;\n        }\n    }\n    else\n    {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004728",
            "calling": [
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "initialize_08004728"
        },
        "FUN_08007ede": {
            "renaming": {
                "FUN_08007ede": "copy_data_to_buffer_08007ede",
                "param_1": "buffer_address",
                "param_2": "data_address",
                "param_3": "data_length",
                "uVar1": "i"
            },
            "code": "int copy_data_to_buffer_08007ede(int buffer_address, int data_address, uint data_length) {\n  uint i;\n  if (data_length > 32) {\n    return 2;\n  }\n  for (i = 0; i < data_length; i++) {\n    *(char *)(buffer_address + i + 0x68) = *(char *)(data_address + i);\n    *(char *)(buffer_address + 0x88) = *(char *)(buffer_address + 0x88) + 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ede",
            "calling": [
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "imported": false,
            "current_name": "copy_data_to_buffer_08007ede"
        },
        "FUN_0800863c": {
            "renaming": {
                "FUN_0800863c": "decode_and_store_bits_0800863c",
                "param_1": "input",
                "param_2": "output",
                "param_3": "output_length",
                "param_4": "validation",
                "iVar1": "is_flag_set",
                "uVar2": "position"
            },
            "code": "void decode_and_store_bits_0800863c(uint8_t *input, uint8_t *output, uint8_t output_length, uint8_t index, uint8_t *validation) {\n  if (input != NULL) {\n    int is_flag_set = check_flag();\n    if (is_flag_set == 0) {\n      uint8_t position = *(input + 0x44);\n      *(output + position * 4) = *input;\n      *(uint8_t *)(output + position * 4 + 1) = index;\n      decode_and_store_bits_0800863c_08003f30(*(input + 0x5a), 0, 1, position, validation);\n      set_bit_at_position_08003f94(*(input + 0x5a));\n      validate_input(*(uint32_t *)(validation + position * 4), input + 0x45, 1);\n    }\n  }\n}",
            "called": [
                "FUN_080068d6",
                "FUN_080085b8",
                "FUN_08003f30",
                "FUN_08003f94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800863c",
            "calling": [
                "FUN_08008c44"
            ],
            "imported": false,
            "current_name": "decode_and_store_bits_0800863c"
        },
        "thunk_FUN_0800887c": {
            "renaming": {
                "thunk_FUN_0800887c": "get_default_value_thunk_0800887c"
            },
            "code": "int get_default_value_thunk_0800887c(void)\n{\n    return 1;\n}",
            "called": [
                "FUN_0800887c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a01c",
            "calling": [
                "FUN_08009fe8"
            ],
            "imported": false,
            "current_name": "get_default_value_thunk_0800887c"
        },
        "FUN_080074e0": {
            "renaming": {
                "FUN_080074e0": "set_bit_080074e0",
                "param_1": "bit_array",
                "DAT_08007534": "TARGET_BIT",
                "DAT_08007540": "BIT_ARRAY_START",
                "DAT_08007538": "BIT_31",
                "DAT_0800753c": "BIT_32",
                "uint": "uint32_t"
            },
            "code": "void set_bit_080074e0(uint32_t *bit_array){\n                    if (*bit_array == DAT_08007534) {\n                        *(uint32_t *)(DAT_08007540 + 0x18) &= ~(1 << 11);\n                    }\n                    if (*bit_array == BIT_30) {\n                        *(uint32_t *)(DAT_08007540 + 0x1c) &= ~(1 << 0);\n                    }\n                    if (*bit_array == DAT_08007538) {\n                        *(uint32_t *)(DAT_08007540 + 0x1c) &= ~(1 << 1);\n                    }\n                    if (*bit_array == DAT_0800753c) {\n                        *(uint32_t *)(DAT_08007540 + 0x1c) &= ~(1 << 2);\n                    }\n                    return;\n                }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080074e0",
            "calling": [
                "FUN_08007110",
                "FUN_08007710"
            ],
            "imported": false,
            "current_name": "set_bit_080074e0"
        },
        "FUN_080073c0": {
            "renaming": {
                "FUN_080073c0": "execute_code_if_pointer_not_null_080073c0",
                "PTR_DAT_080073d0": "pointer_to_data",
                "PTR_DAT_080073d4": "pointer_to_data_2",
                "code": "code_pointer"
            },
            "code": "void execute_code_if_pointer_not_null_080073c0(void)\n{\n  code* pointer_to_code = *(code**)PTR_DAT_080073d0;\n  if (pointer_to_code != NULL)\n  {\n    (*pointer_to_code)(*(undefined4*)PTR_DAT_080073d4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073c0",
            "calling": [
                "FUN_08005cb4"
            ],
            "imported": false,
            "current_name": "execute_code_if_pointer_not_null_080073c0"
        },
        "FUN_080084b0": {
            "renaming": {
                "FUN_080084b0": "process_param_080084b0",
                "PTR_DAT_080084f0": "parameter_array",
                "PTR_DAT_080084f4": "param_array",
                "PTR_DAT_080084f8": "value_array",
                "PTR_DAT_080084fc": "array_pointer",
                "check_param_08007320": "check_param",
                "getValueByKey_0800734a": "get_value_by_key",
                "cVar1": "param_char",
                "iVar4": "param_check",
                "uVar5": "param_value",
                "uVar3": "param_val"
            },
            "code": "void process_param_080084b0() {\n  char param_char = PTR_DAT_080084f0[1];\n  int param_check = check_param(param_char, PTR_DAT_080084f4);\n  if (param_check != 0) {\n    int param_value = check_param(param_char, PTR_DAT_080084f4);\n    undefined param_val = get_value_by_key(param_value, PTR_DAT_080084f8);\n    undefined *ptr_array = PTR_DAT_080084fc;\n    PTR_DAT_080084fc[0x59] = param_val;\n    ptr_array[0x58] = param_char;\n    *(undefined4 *)(ptr_array + 0x48) = 0x2580;\n    *(undefined4 *)(ptr_array + 0x54) = 0;\n    *(undefined4 *)(ptr_array + 0x4c) = 0;\n    *(undefined4 *)(ptr_array + 0x50) = 0;\n    execute_function(ptr_array);\n  }\n  return;\n}",
            "called": [
                "FUN_0800734a",
                "FUN_08007320",
                "FUN_08008078"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080084b0",
            "calling": [
                "FUN_08008500"
            ],
            "imported": false,
            "current_name": "process_param_080084b0"
        },
        "FUN_08004050": {
            "renaming": {
                "FUN_08004050": "calculate_value_08004050",
                "param_1": "param_array",
                "uVar1": "value",
                "puVar2": "ptr"
            },
            "code": "uint32_t calculate_value_08004050(uint32_t **param_array)\n{\n    uint32_t value;\n    uint32_t *ptr;\n\n    if (*(char *)((int)param_array + 0x21) != '\\x02') {\n        param_array[0xe] = (uint32_t *)0x4;\n        return 1;\n    }\n\n    **param_array &= 0xfffffff1;\n    **param_array &= 0xfffffffe;\n    ptr = *param_array;\n\n    if (ptr == PTR_DAT_080040e0) {\n        value = 1;\n    }\n    else if (ptr == PTR_DAT_080040e0 + 5) {\n        value = 0x10;\n    }\n    else if (ptr == PTR_DAT_080040e0 + 10) {\n        value = 0x100;\n    }\n    else if (ptr == PTR_DAT_080040e0 + 0xf) {\n        value = 0x1000;\n    }\n    else if (ptr == PTR_DAT_080040e0 + 0x14) {\n        value = 0x10000;\n    }\n    else if (ptr == PTR_DAT_080040e0 + 0x19) {\n        value = 0x100000;\n    }\n    else {\n        value = 0x1000000;\n    }\n\n    *(uint32_t *)(PTR_DAT_080040e4 + 4) = value;\n    *(char *)((int)param_array + 0x21) = 1;\n    *(uint32_t *)(param_array + 8) = 0;\n\n    if (param_array[0xd] != (uint32_t *)0x0) {\n        (*(void (*)())param_array[0xd])();\n        return 0;\n    }\n\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004050",
            "calling": [
                "FUN_08004f3c",
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "calculate_value_08004050"
        },
        "FUN_08008e14": {
            "renaming": {
                "FUN_08008e14": "initialize_data_if_first_time_08008e14",
                "param_1": "num1",
                "param_2": "num2",
                "initialize_data_08008df8": "initialize_data"
            },
            "code": "void initialize_data_if_first_time_08008e14(int num1, int num2)\n{\n    if ((num1 == 1) && (num2 == 0xffff))\n    {\n        initialize_data(PTR_DAT_08008e3c, 0, 0, 0, 0);\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_08008df8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e14",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_if_first_time_08008e14"
        },
        "FUN_08005a28": {
            "renaming": {
                "FUN_08005a28": "get_shifted_value_08005a28",
                "uVar1": "value",
                "get_value_from_pointer_08005a1c": "get_value_from_pointer",
                "PTR_DAT_08005a44": "pointer_array",
                "DAT_08005a40": "data"
            },
            "code": "uint get_shifted_value_08005a28() {\n  uint value = get_value_from_pointer();\n  uint shifted_index = (*(int *)(DAT_08005a40 + 4) << 21) >> 29;\n  uint shifted_value = value >> PTR_DAT_08005a44[shifted_index];\n  return shifted_value;\n}",
            "called": [
                "FUN_08005a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a28",
            "calling": [
                "FUN_08006538",
                "FUN_080045c0",
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "get_shifted_value_08005a28"
        },
        "FUN_080095a8": {
            "renaming": {
                "FUN_080095a8": "calculate_length_080095a8",
                "param_1": "input_length",
                "param_2": "input_array",
                "param_3": "output_length",
                "param_4": "unused_param",
                "param_5": "output_function",
                "iVar1": "result",
                "uVar2": "max_length",
                "uVar3": "is_length_defined",
                "bVar4": "is_array_empty",
                "i": "length",
                "*param_2": "*input_array",
                "*param_3": "*output_length"
            },
            "code": "uint32_t calculate_length_080095a8(uint32_t input_length, uint32_t *input_array, uint32_t *output_length, uint32_t unused_param, function_pointer_t output_function) {\\n    uint32_t max_length = input_array[4];\\n    if (max_length < input_array[2]) {\\n        max_length = input_array[2];\\n    }\\n    *output_length = max_length;\\n    if (*(char *)((int)input_array + 0x43) != \"\\0\") {\\n        *output_length = max_length + 1;\\n    }\\n    if ((int)(*input_array << 0x1a) < 0) {\\n        *output_length += 2;\\n    }\\n    uint32_t i = *input_array & 6;\\n    if (i == 0) {\\n        for (; (int)i < (int)(input_array[3] - *output_length); i++) {\\n            int result = output_function(input_length, unused_param, (int)input_array + 0x19, 1);\\n            if (result == -1) {\\n                return 0xffffffff;\\n            }\\n        }\\n    }\\n    uint32_t is_length_defined = (uint32_t)*(byte *)((int)input_array + 0x43);\\n    if (is_length_defined != 0) {\\n        is_length_defined = 1;\\n    }\\n    uint32_t length = is_length_defined;\\n    if ((int)(*input_array << 0x1a) < 0) {\\n        *(undefined *)((int)input_array + is_length_defined + 0x43) = 0x30;\\n        length = is_length_defined + 2;\\n        *(undefined *)((int)input_array + is_length_defined + 0x44) = *(undefined *)((int)input_array + 0x45);\\n    }\\n    int result = output_function(input_length, unused_param, (int)input_array + 0x43, length);\\n    if (result != -1) {\\n        uint32_t array_length = input_array[3];\\n        bool is_array_empty = (*input_array & 6) != 4;\\n        if (is_array_empty) {\\n            array_length = 0;\\n        }\\n        uint32_t remaining_length = 0;\\n        if (!is_array_empty) {\\n            array_length = array_length - *output_length;\\n        }\\n        if (!is_array_empty) {\\n            array_length = array_length & ~((int)array_length >> 0x1f);\\n        }\\n        if (max_length < input_array[2]) {\\n            array_length = array_length + (input_array[2] - input_array[4]);\\n        }\\n        while (true) {\\n            if (array_length == remaining_length) {\\n                return 0;\\n            }\\n            int result = output_function(input_length, unused_param, (int)input_array + 0x1a, 1);\\n            if (result == -1) {\\n                break;\\n            }\\n            remaining_length++;\\n        }\\n    }\\n    return 0xffffffff;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080095a8",
            "calling": [
                "FUN_08009698"
            ],
            "imported": false,
            "current_name": "calculate_length_080095a8"
        },
        "FUN_08003002": {
            "renaming": {
                "FUN_08003002": "process_data_08003002",
                "param_1": "data_address",
                "decode_character_flags_08008990": "decode_character_flags",
                "decode_and_process_data_08002fca": "decode_and_process_data",
                "do_nothing_08008ac4": "do_nothing"
            },
            "code": "void process_data_08003002(int data_address)\n{\n  char* character_flags = (char*)(data_address + 0x1f8);\n  if (*character_flags != '\\0') {\n    return;\n  }\n  decode_character_flags(0xd, 1);\n  decode_and_process_data_08003002_08002fca(data_address, 0xd, 2, 0x28, 0xd2);\n  do_nothing_08008ac4(0xfa);\n  decode_and_process_data_08003002_08002fca(data_address, 0xd, 5, 0x28, 0xd2);\n  do_nothing_08008ac4(0x7d);\n  return;\n}",
            "called": [
                "FUN_08008ac4",
                "FUN_08008990",
                "FUN_08002fca"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003002",
            "calling": [
                "FUN_08003048"
            ],
            "imported": false,
            "current_name": "process_data_08003002"
        },
        "FUN_08008ac4": {
            "renaming": {
                "FUN_08008ac4": "do_nothing_08008ac4"
            },
            "code": "\nvoid do_nothing_08008ac4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ac4",
            "calling": [
                "FUN_08003002",
                "FUN_08002fca"
            ],
            "imported": false,
            "current_name": "do_nothing_08008ac4"
        },
        "FUN_08003bd8": {
            "renaming": {
                "FUN_08003bd8": "checkAndUpdate_08003bd8",
                "param_1": "params",
                "iVar1": "result",
                "uVar2": "flag1",
                "uVar3": "flag2"
            },
            "code": "int checkAndUpdate_08003bd8(int *params) {\n  int result;\n  uint flag1;\n  uint flag2;\n  if (params == NULL) {\n    return 1;\n  }\n  if (params[10] == 0) {\n    params[11] = 0;\n    *(undefined *)(params + 9) = 0;\n    decodeAndSetFlag();\n  }\n  result = checkAndUpdate_08003bd8Internal(params);\n  flag2 = params[10] & 0x10;\n  if ((flag2 == 0) && (result == 0)) {\n    params[10] = params[10] & 0xffffeefdU | 2;\n    flag1 = params[1] | params[7] | params[3] << 1;\n    if (params[2] == 0x100 || params[2] == 1) {\n      flag2 = 0x100;\n    }\n    else {\n      flag2 = 0;\n    }\n    if (params[5] == 1) {\n      if (params[3] == 0) {\n        flag2 |= (params[6] - 1) * 0x2000 | 0x800;\n      }\n      else {\n        params[10] |= 0x20;\n        params[11] |= 1;\n      }\n    }\n    *(uint *)(*params + 4) = flag2 | *(uint *)(*params + 4) & 0xffff16ff;\n    *(uint *)(*params + 8) = DAT_08003ce0 & *(uint *)(*params + 8) | flag1;\n    if (params[2] == 0x100 || params[2] == 1) {\n      flag2 = (params[4] - 1) * 0x100000;\n    }\n    else {\n      flag2 = 0;\n    }\n    *(uint *)(*params + 0x2c) = flag2 | *(uint *)(*params + 0x2c) & 0xff0fffff;\n    if (flag1 != (DAT_08003ce4 & *(uint *)(*params + 8))) {\n      params[10] = params[10] & 0xffffffedU | 0x10;\n      params[11] |= 1;\n      return 1;\n    }\n    params[11] = 0;\n    params[10] = params[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n  params[10] |= 0x10;\n  return 1;\n}\n",
            "called": [
                "FUN_08006ca8",
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003bd8",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "checkAndUpdate_08003bd8"
        },
        "FUN_08009d50": {
            "renaming": {
                "FUN_08009d50": "initialize_block_08009d50",
                "param_1": "block_address",
                "uVar1": "result",
                "iVar2": "current_block_address",
                "bVar3": "is_current_block_address",
                "PTR_PTR_DAT_08009da8": "PTR_08009da8",
                "PTR_LAB_08009cd0_1_08009dac": "LAB_1_08009dac",
                "find_available_block_08009db0": "find_available_block",
                "initialize_struct_08009cdc": "initialize_struct"
            },
            "code": "void initialize_block_08009d50(int block_address)\n{\n    // Check if block is already initialized\n    if (*(int *)(block_address + 0x18) != 0) {\n        return;\n    }\n    // Initialize block\n    *(undefined4 *)(block_address + 0x48) = 0;\n    *(undefined4 *)(block_address + 0x4c) = 0;\n    *(undefined4 *)(block_address + 0x50) = 0;\n    *(undefined **)(block_address + 0x28) = PTR_LAB_08009cd0_1_08009dac;\n    if (block_address == PTR_PTR_DAT_08009da8) {\n        *(int *)(block_address + 0x18) = 1;\n    }\n    else {\n        *(int *)(block_address + 0x18) = 0;\n    }\n    // Initialize sub-blocks\n    int sub_block_address = find_available_block();\n    *(undefined4 *)(block_address + 4) = sub_block_address;\n    initialize_struct_08009cdc(sub_block_address, 4, 0);\n    sub_block_address = find_available_block();\n    *(undefined4 *)(block_address + 8) = sub_block_address;\n    initialize_struct_08009cdc(sub_block_address, 9, 1);\n    sub_block_address = find_available_block();\n    *(undefined4 *)(block_address + 0xc) = sub_block_address;\n    initialize_struct_08009cdc(sub_block_address, 0x12, 2);\n    *(int *)(block_address + 0x18) = 1;\n}\n",
            "called": [
                "FUN_08009cdc",
                "FUN_08009db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009d50",
            "calling": [
                "FUN_0800937c",
                "FUN_080098d8",
                "FUN_08009c7c",
                "FUN_0800932c",
                "FUN_08009a80",
                "FUN_08009db0"
            ],
            "imported": false,
            "current_name": "initialize_block_08009d50"
        },
        "FUN_08003366": {
            "renaming": {
                "FUN_08003366": "set_data_08003366",
                "param_1": "data_address",
                "param_2": "data_value",
                "param_3": "param_3",
                "param_4": "param_4"
            },
            "code": "void set_data_08003366(int data_address, int data_value, undefined4 param_3, undefined4 param_4)\n{\n  if (data_value == 113) {\n    *(undefined4 *)(data_address + 104) = param_3;\n    *(undefined4 *)(data_address + 64) = param_4;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003366",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_data_08003366"
        },
        "FUN_080091b0": {
            "renaming": {
                "FUN_080091b0": "copy_data_to_buffer_080091b0",
                "param_1": "buffer_start_index",
                "param_2": "data",
                "param_3": "data_length",
                "puVar1": "data_ptr",
                "puVar2": "buffer_ptr"
            },
            "code": "void copy_data_to_buffer_080091b0(int buffer_start_index, undefined *data, int data_length) {\n  undefined *buffer_ptr;\n  undefined *data_ptr;\n  buffer_ptr = (undefined *)(buffer_start_index - 1);\n  data_ptr = data + data_length;\n  for (; data != data_ptr; data++) {\n    buffer_ptr++;\n    *buffer_ptr = *data;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091b0",
            "calling": [
                "FUN_08009908",
                "FUN_080027f0"
            ],
            "imported": false,
            "current_name": "copy_data_to_buffer_080091b0"
        },
        "FUN_08009108": {
            "renaming": {
                "FUN_08009108": "determine_result_08009108",
                "param_1": "flag",
                "param_2": "value",
                "DAT_08009120": "data"
            },
            "code": "longlong determine_result_08009108(uint32_t flag, uint32_t value)\n{\n  if (DAT_08009120 != 0) {\n    return CONCAT44(flag, 2);\n  }\n  return (ulonglong)value << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009108",
            "calling": [
                "FUN_080090c2"
            ],
            "imported": false,
            "current_name": "determine_result_08009108"
        },
        "FUN_0800a18c": {
            "renaming": {
                "FUN_0800a18c": "process_and_wait_for_data_0800a18c",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "PTR_DAT_0800a228": "value_ptr_1",
                "PTR_DAT_0800a22c": "value_ptr_2",
                "PTR_DAT_0800a230": "value_ptr_3",
                "PTR_DAT_0800a234": "value_ptr_4",
                "PTR_DAT_0800a238": "value_ptr_5",
                "PTR_DAT_0800a23c": "value_ptr_6",
                "PTR_DAT_0800a240": "value_ptr_7",
                "PTR_DAT_0800a244": "value_ptr_8",
                "PTR_DAT_0800a248": "value_ptr_9",
                "PTR_DAT_0800a24c": "value_ptr_10",
                "PTR_DAT_0800a250": "value_ptr_11",
                "PTR_DAT_0800a254": "value_ptr_12"
            },
            "code": "void process_and_wait_for_data_0800a18c(void)\n{\n  code *jump_table;\n  jump_table = process_and_wait_for_data_0800a18c;\n  set_flag_if_negative(PTR_DAT_0800a228);\n  set_flag_if_negative(PTR_DAT_0800a22c);\n  set_flag_if_negative(PTR_DAT_0800a230);\n  set_flag_if_negative(PTR_DAT_0800a234);\n  set_flag_if_negative(PTR_DAT_0800a238);\n  set_flag_if_negative(PTR_DAT_0800a23c);\n  set_flag_if_negative(PTR_DAT_0800a240);\n  set_flag_if_negative(PTR_DAT_0800a244);\n  set_flag_if_negative(PTR_DAT_0800a248);\n  set_flag_if_negative(PTR_DAT_0800a24c);\n  set_flag_if_negative(PTR_DAT_0800a250);\n  set_flag_if_negative(PTR_DAT_0800a254);\n  (*jump_table)();\n  return;\n}\n\nvoid set_flag_if_negative(int* value_ptr)\n{\n  if(*value_ptr < 0)\n  {\n    *value_ptr = 1;\n  }\n}\n",
            "called": [
                "FUN_08009b5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a18c",
            "calling": [
                "FUN_08009084"
            ],
            "imported": false,
            "current_name": "process_and_wait_for_data_0800a18c"
        },
        "FUN_08009908": {
            "renaming": {
                "FUN_08009908": "allocate_and_copy_data_to_buffer_08009908",
                "param_1": "data",
                "param_2": "size",
                "uVar1": "allocation_size",
                "uVar2": "allocated_address",
                "uVar3": "calculated_value"
            },
            "code": "uint allocate_and_copy_data_to_buffer_08009908(uint data, uint size)\n{\n  undefined4 allocation_size;\n  uint allocated_address;\n  uint calculated_value;\n  \n  allocation_size = *(undefined4 *)PTR_PTR_DAT_08009914;\n  if (data != 0) {\n    if (size == 0) {\n      insert_node_080091d8();\n      allocated_address = size;\n    }\n    else {\n      calculated_value = calculate_value_0800a154();\n      allocated_address = data;\n      if ((calculated_value < size) && (allocated_address = allocate_memory_block_08009270(allocation_size,size), allocated_address != 0)) {\n        copy_data_to_buffer_080091b0(allocated_address,data,size);\n        insert_node_080091d8(allocation_size,data);\n      }\n    }\n    return allocated_address;\n  }\n  allocated_address = allocate_memory_block_08009270(allocation_size,size,size,PTR_PTR_DAT_08009914);\n  return allocated_address;\n}",
            "called": [
                "FUN_080091d8",
                "FUN_0800a154",
                "FUN_08009270",
                "FUN_080091b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009908",
            "calling": [
                "FUN_08002acc",
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "imported": false,
            "current_name": "allocate_and_copy_data_to_buffer_08009908"
        },
        "FUN_08008a24": {
            "renaming": {
                "FUN_08008a24": "decode_data_08008a24",
                "param_1": "data_index",
                "param_2": "address_value",
                "param_3": "bit_index",
                "param_4": "data_buffer",
                "uVar2": "data_value",
                "puVar3": "data_ptr",
                "uVar4": "bit_mask",
                "iVar1": "bit_value",
                "get_bit_08006b28": "get_bit_value",
                "get_data_at_index_08006b7c": "get_data_at_index",
                "set_address_value_if_nonzero_080072d8": "set_address_value_if_nonzero",
                "PTR_DAT_08008a64": "data_mask",
                "PTR_DAT_08008a68": "bit_data"
            },
            "code": "void decode_data_08008a24(uint data_index, uint bit_index, uint address_value, undefined *data_buffer) {\n  uint data_value;\n  uint bit_mask;\n  undefined *data_ptr;\n  if (data_index < 0x3c) {\n    bit_mask = (uint)(char)PTR_DAT_08008a64[data_index];\n    data_ptr = PTR_DAT_08008a64;\n  }\n  else {\n    bit_mask = 0xffffffff;\n    data_ptr = data_buffer;\n  }\n  if ((bit_mask != 0xffffffff) && get_bit_value(bit_mask, PTR_DAT_08008a68, bit_index, data_ptr, data_buffer)) {\n    data_value = get_data_at_index((bit_mask << 0x18) >> 0x1c);\n    set_address_value_if_nonzero(data_value, 1 << (bit_mask & 0xf) & 0xffff, address_value);\n  }\n  return;\n}",
            "called": [
                "FUN_08006b7c",
                "FUN_08006b28",
                "FUN_080072d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a24",
            "calling": [
                "FUN_080088e0",
                "FUN_080005f8",
                "FUN_08002fca"
            ],
            "imported": false,
            "current_name": "decode_data_08008a24"
        },
        "FUN_08008abc": {
            "renaming": {
                "FUN_08008abc": "get_value_and_return_08008abc"
            },
            "code": "void get_value_and_return_08008abc(){\n    get_value_from_pointer_and_return_0800723c();\n    return;\n}",
            "called": [
                "FUN_0800723c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008abc",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "get_value_and_return_08008abc"
        },
        "FUN_08002b68": {
            "renaming": {
                "FUN_08002b68": "process_input_and_check_08002b68",
                "param_1": "buffer",
                "param_2": "buffer_size",
                "param_3": "data",
                "param_4": "data_size",
                "param_5": "flags",
                "iVar1": "result",
                "uVar2": "num_flags",
                "uVar3": "unused",
                "allocate_and_copy_data_to_buffer_08002acc": "allocate_and_copy_data_to_buffer",
                "PTR_DAT_08002bf4": "ptr_data_1",
                "initialize_flags_08002a30": "initialize_flags",
                "check_input_08002a58": "check_input",
                "process_input_and_check_08007f0e": "process_input_and_check_08007f0e",
                "PTR_DAT_08002bf8": "ptr_data_2",
                "PTR_DAT_08002bfc": "ptr_data_3"
            },
            "code": "int process_input_and_check_08002b68(uint32_t *buffer, uint32_t buffer_size, uint32_t data, uint32_t data_size, uint8_t flags) {\n  int result = 0;\n  uint8_t num_flags = flags;\n  if (buffer[4] == 0) {\n    return 0;\n  }\n  allocate_and_copy_data_to_buffer_08002acc(data);\n  if (*(int *)PTR_DAT_08002bf4 != 0) {\n    if (num_flags != 0) {\n      initialize_flags_08002a30(buffer, buffer_size);\n      if (num_flags > 3) {\n        num_flags = 3;\n      }\n      while(num_flags > 0) {\n        (**(code **)*buffer)(buffer,data_size >> ((num_flags - 1 & 0x1f) << 3) & 0xff);\n        num_flags--;\n      }\n      check_input_08002a58(buffer,0);\n    }\n    result = process_input_and_check_08002b68_08007f0e(buffer + 5,(buffer_size & 0x7f) << 1,*(undefined4 *)PTR_DAT_08002bf4,data,data_size);\n    if (result != 0) {\n      data_size = 0;\n    }\n    *PTR_DAT_08002bf8 = 0;\n    *PTR_DAT_08002bfc = (char)data_size;\n    return data_size;\n  }\n  buffer[1] = 1;\n  return 0;\n}\n",
            "called": [
                "FUN_08007f0e",
                "FUN_08002acc",
                "FUN_08002a30",
                "FUN_08002a58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b68",
            "calling": [
                "FUN_08002c00"
            ],
            "imported": false,
            "current_name": "process_input_and_check_08002b68"
        },
        "FUN_080005e0": {
            "renaming": {
                "FUN_080005e0": "clear_memory_080005e0",
                "PTR_DAT_080005f0": "memory_start",
                "PTR_DAT_080005f4": "memory_end"
            },
            "code": "void clear_memory_080005e0(void)\n{\n    *PTR_DAT_080005f0 = 0;\n    *PTR_DAT_080005f4 = 255;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e0",
            "calling": [
                "FUN_08000aec",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "clear_memory_080005e0"
        },
        "FUN_08008020": {
            "renaming": {
                "FUN_08008020": "check_and_set_flag_for_subtract_four_08008020",
                "param_1": "param",
                "iVar1": "subtract_four_result",
                "subtract_four_08007f78": "subtract_four",
                "set_bit_and_flags_080049e0": "set_bit_and_flags"
            },
            "code": "void check_and_set_flag_for_subtract_four_08008020(int param)\n{\n  int subtract_four_result;\n  subtract_four_result = subtract_four();\n  if (*(char *)(subtract_four_result + 0x5d) == \"\\0\") {\n    set_bit_and_flags(param);\n  }\n  return;\n}",
            "called": [
                "FUN_080049e0",
                "FUN_08007f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008020",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": false,
            "current_name": "check_and_set_flag_for_subtract_four_08008020"
        },
        "FUN_0800674c": {
            "renaming": {
                "FUN_0800674c": "do_nothing_0800674c"
            },
            "code": "\nvoid do_nothing_0800674c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800674c",
            "calling": [
                "FUN_0800674e"
            ],
            "imported": false,
            "current_name": "do_nothing_0800674c"
        },
        "FUN_08005dac": {
            "renaming": {
                "FUN_08005dac": "update_data_08005dac",
                "param_1": "data_address",
                "param_2": "data_array",
                "uVar1": "data_1",
                "iVar2": "data_2",
                "iVar3": "data_3"
            },
            "code": "void update_data_08005dac(int data_address, int *data_array){\n    uint data_1 = *(uint *)(data_address + 0x04);\n    int data_2 = *data_array;\n    int data_3 = data_array[2];\n    if (data_address == DAT_08005df0) {\n        data_1 = data_1 & 0xffffbfff | data_array[5] << 6;\n    }\n    *(uint *)(data_address + 0x04) = data_1;\n    *(uint *)(data_address + 0x1c) = *(uint *)(data_address + 0x1c) & 0xffff8cff | data_2 << 8;\n    *(int *)(data_address + 0x40) = data_array[1];\n    *(uint *)(data_address + 0x20) = *(uint *)(data_address + 0x20) & 0xffffdfff | data_3 << 0xc;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005dac",
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "imported": false,
            "current_name": "update_data_08005dac"
        },
        "FUN_0800674e": {
            "renaming": {
                "FUN_0800674e": "validate_input_0800674e",
                "param_1": "input_array",
                "*(char *)((int)param_1 + 0x39)": "input_array[9]",
                "*(undefined *)(param_1 + 0xe)": "input_array[14]",
                "do_nothing_0800674c": "do_nothing",
                "*(undefined *)((int)param_1 + 0x39)": "input_array[9]",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(input_array[0] + 0xc)",
                "calculate_values_08006538": "calculate_values",
                "*(uint *)(*param_1 + 0x10)": "*(uint *)(input_array[0] + 0x10)",
                "*(uint *)(*param_1 + 0x14)": "*(uint *)(input_array[0] + 0x14)",
                "param_1[0xf]": "input_array[15]",
                "*(undefined *)((int)param_1 + 0x3a)": "input_array[10]"
            },
            "code": "int validate_input_0800674e(int *input_array)\n{\n    if (input_array != NULL) {\n        if (input_array[9] == 0) {\n            input_array[14] = 0;\n            do_nothing();\n        }\n        input_array[9] = 0x24;\n        *(uint *)(input_array[0] + 0xc) &= 0xffffdfff;\n        calculate_values(input_array);\n        *(uint *)(input_array[0] + 0x10) &= 0xffffb7ff;\n        *(uint *)(input_array[0] + 0x14) &= 0xffffffd5;\n        *(uint *)(input_array[0] + 0xc) |= 0x2000;\n        input_array[15] = 0;\n        input_array[9] = 0x20;\n        input_array[10] = 0x20;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08006538",
                "FUN_0800674c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800674e",
            "calling": [
                "FUN_08008078"
            ],
            "imported": false,
            "current_name": "validate_input_0800674e"
        },
        "FUN_0800771c": {
            "renaming": {
                "FUN_0800771c": "execute_callback_if_flag_set_0800771c",
                "param_1": "flag",
                "iVar1": "callback_ptr",
                "subtract_four_08007718": "subtract_four",
                "code": "code_ptr",
                "callback_func_ptr": "callback_ptr",
                "flag_value": "flag_val"
            },
            "code": "void execute_callback_if_flag_set_0800771c(int flag) {\n  int callback_ptr = subtract_four();\n  code* callback_func_ptr = *(code**)(callback_ptr + 0x4c);\n  char flag_value = *(char*)(flag + 0x1c);\n  if (callback_func_ptr != nullptr && flag_value == 1) {\n    (*callback_func_ptr)(callback_ptr, 0);\n  }\n  return;\n}",
            "called": [
                "FUN_08007718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800771c",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "execute_callback_if_flag_set_0800771c"
        },
        "FUN_080066e8": {
            "renaming": {
                "FUN_080066e8": "check_parameters_080066e8",
                "param_1": "parameter_list",
                "param_2": "parameter_value_1",
                "param_3": "parameter_value_2",
                "param_4": "parameter_value_3",
                "param_5": "parameter_value_4",
                "iVar1": "get_value"
            },
            "code": "int check_parameters_080066e8(uint **parameter_list, uint parameter_value_1, bool parameter_value_2, int parameter_value_3, uint parameter_value_4) {\n  int return_value = 3;\n  int get_value;\n  while ((parameter_value_4 == 0xffffffff) || ((parameter_value_4 != 0) && ((get_value = get_value_from_pointer_08003760()) - parameter_value_3 <= parameter_value_4))) {\n    if (((parameter_value_1 & ~**parameter_list) == 0) != parameter_value_2) {\n      return_value = 0;\n      break;\n    }\n    (*parameter_list)[3] &= 0xfffffe5f;\n    (*parameter_list)[5] &= 0xfffffffe;\n    *((char *)parameter_list + 0x39) = ' ';\n    *((char *)parameter_list + 0x3a) = ' ';\n    *(parameter_list + 0xe) = 0;\n  }\n  return return_value;\n}\n",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080066e8",
            "calling": [
                "FUN_080067ac"
            ],
            "imported": false,
            "current_name": "check_parameters_080066e8"
        },
        "FUN_08009358": {
            "renaming": {
                "FUN_08009358": "process_and_increment_data_08009358",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "data",
                "param_4": "data_length",
                "iVar1": "processed_data",
                "puVar2": "end_of_data",
                "iVar3": "processed_data_count"
            },
            "code": "int process_and_increment_data_08009358(int param1, int param2, char *data, int data_length) {\n  int processed_data_count = 0;\n  char *current_data = data;\n  while (processed_data_count != data_length) {\n    if (current_data == data + data_length) {\n      return 0;\n    }\n    int processed_data = process_data(param1, *current_data, param2, data_length, processed_data_count);\n    processed_data_count = processed_data + 1;\n    current_data = current_data + 1;\n  }\n  return processed_data_count;\n}",
            "called": [
                "FUN_0800932c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009358",
            "calling": [
                "FUN_0800937c"
            ],
            "imported": false,
            "current_name": "process_and_increment_data_08009358"
        },
        "FUN_0800270c": {
            "renaming": {
                "FUN_0800270c": "calculate_difference_between_two_pointers_0800270c",
                "PTR_DAT_08002718": "pointer_to_dat_1",
                "PTR_DAT_0800271c": "pointer_to_dat_2"
            },
            "code": "int calculate_difference_between_two_pointers_0800270c(void)\n{\n  uint32_t first_value = (uint32_t)(byte)*PTR_DAT_08002718;\n  uint32_t second_value = (uint32_t)(byte)*PTR_DAT_0800271c;\n  uint32_t difference = first_value - second_value;\n  return difference;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800270c",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "calculate_difference_between_two_pointers_0800270c"
        },
        "FUN_08003370": {
            "renaming": {
                "FUN_08003370": "set_values_08003370",
                "param_1": "obj_addr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "*(undefined4 *)(param_1 + 0x6c)": "*(int *)(obj_addr + 0x6c)",
                "*(undefined4 *)(param_1 + 0x44)": "*(int *)(obj_addr + 0x44)"
            },
            "code": "void set_values_08003370(int obj_addr, int value1, int value2, int value3){\n  *(int *)(obj_addr + 0x6c) = value2;\n  *(int *)(obj_addr + 0x44) = value3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003370",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_values_08003370"
        },
        "FUN_08007fa0": {
            "renaming": {
                "FUN_08007fa0": "process_input_08007fa0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result",
                "subtract_four_08007f78": "subtract_four",
                "process_data_080048c8": "process_data",
                "validate_input_08004954": "validate_input"
            },
            "code": "void process_input_08007fa0(int input1, int input2, int input3, undefined4 input4)\n{\n  int result;\n  \n  result = subtract_four();\n  if (input3 == *(int *)(input1 + 0xc)) {\n    if (input2 == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5c) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      process_data(input1, result + 0x68, *(undefined *)(result + 0x88), 8);\n      return;\n    }\n    *(undefined *)(result + 0x5c) = 1;\n    validate_input(input1, result + 0x68, 0x20, 8, input4);\n  }\n  return;\n}",
            "called": [
                "FUN_08007f78",
                "FUN_08004954",
                "FUN_080048c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007fa0",
            "calling": [
                "FUN_08004ac2"
            ],
            "imported": false,
            "current_name": "process_input_08007fa0"
        },
        "FUN_08003376": {
            "renaming": {
                "FUN_08003376": "check_and_set_value_if_greater_than_08003376",
                "param_1": "buffer",
                "param_2": "value",
                "param_3": "index",
                "bVar1": "is_greater_than"
            },
            "code": "void check_and_set_value_if_greater_than_08003376(uint8_t *buffer, uint8_t value, uint32_t index)\n{\n  bool is_greater_than;\n  \n  if (index < *(uint32_t *)(buffer + 8)) {\n    is_greater_than = false;\n  }\n  else {\n    is_greater_than = true;\n    if (*(code **)(buffer + 100) != (code *)0x0) {\n      *buffer = 1;\n      (**(code **)(buffer + 100))(*(uint32_t *)(buffer + 0x3c));\n      if (index < *(uint32_t *)(buffer + 8)) {\n        is_greater_than = false;\n      }\n      else {\n        is_greater_than = true;\n      }\n    }\n  }\n  if (!is_greater_than) {\n    *(uint8_t *)(*(int *)(buffer + 4) + index) = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003376",
            "calling": [
                "FUN_080033cc",
                "FUN_08003474"
            ],
            "imported": false,
            "current_name": "check_and_set_value_if_greater_than_08003376"
        },
        "FUN_08008bf4": {
            "renaming": {
                "FUN_08008bf4": "calculate_value_if_not_zero_08008bf4",
                "DAT_08008c18": "offset_value",
                "PTR_DAT_08008c1c": "offset_pointer",
                "calculate_value_at_offset_08008afa": "calculate_value_at_offset"
            },
            "code": "void calculate_value_if_not_zero_08008bf4(){\n  if (DAT_08008c18 != 0) {\n    calculate_value_at_offset(PTR_DAT_08008c1c);\n  }\n  return;\n}",
            "called": [
                "FUN_08008afa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008bf4",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "calculate_value_if_not_zero_08008bf4"
        },
        "FUN_08005430": {
            "renaming": {
                "FUN_08005430": "get_value_at_offset_08005430",
                "param_1": "base_address",
                "PTR_": "ptr_to_",
                "DAT_": "data_"
            },
            "code": "int get_value_at_offset_08005430(int base_address, int offset) {\n    int* PTR_value = (int*)(base_address + offset);\n    return *PTR_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005430",
            "calling": [
                "FUN_08007f0e",
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08005430"
        },
        "FUN_08002720": {
            "renaming": {
                "FUN_08002720": "get_byte_from_array_08002720",
                "PTR_DAT_08002740": "array_index_ptr",
                "PTR_DAT_08002744": "array_size_ptr",
                "*(byte *)(*(int *)PTR_DAT_08002748 + (uint)bVar1)": "*(byte *)(*(int *)array_ptr + index)",
                "bVar1": "index",
                "bVar2": "value"
            },
            "code": "uint get_byte_from_array_08002720(void)\n{\n  uint index = *PTR_DAT_08002740;\n  if (index < (uint)(byte)*PTR_DAT_08002744) {\n    byte value = *(byte *)(*(int *)PTR_DAT_08002748 + (uint)bVar1);\n    *PTR_DAT_08002740 = index + 1;\n    return (uint)value;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002720",
            "calling": [
                "FUN_08001c08"
            ],
            "imported": false,
            "current_name": "get_byte_from_array_08002720"
        },
        "FUN_080031ce": {
            "renaming": {
                "FUN_080031ce": "encode_data_080031ce",
                "param_1": "data_ptr",
                "param_2": "encoding_type",
                "param_3": "encoding_param",
                "param_4": "data_length",
                "param_5": "extra_param",
                "puVar1": "function_ptr",
                "uVar2": "i"
            },
            "code": "void encode_data_080031ce(void* data_ptr, uint32_t data_length, uint32_t encoding_type, uint32_t encoding_param, int extra_param) {\n  void** function_ptr = (void**) *data_ptr;\n  if (function_ptr != NULL) {\n    void* encode_function = (void*) **function_ptr;\n    void* callback_function = (void*) ***function_ptr;\n    encode_function(function_ptr, encoding_type, encoding_param, callback_function, data_length);\n    callback_function(function_ptr, 0x79);\n    callback_function(function_ptr, encoding_type);\n    callback_function(function_ptr, encoding_param);\n    for (uint32_t i = 0; i < data_length; i++) {\n      encode_data_080031ce_0800307a(data_ptr, 1, extra_param + i, 0);\n    }\n    callback_function(function_ptr, 0xf7);\n  }\n}\n",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080031ce",
            "calling": [
                "FUN_08002df6"
            ],
            "imported": false,
            "current_name": "encode_data_080031ce"
        },
        "FUN_08009918": {
            "renaming": {
                "FUN_08009918": "find_and_set_offset_08009918",
                "param_1": "result",
                "param_2": "input",
                "puVar1": "data_pointer",
                "iVar2": "offset"
            },
            "code": "void find_and_set_offset_08009918(int *result, undefined4 input) {\n  undefined *data_pointer = PTR_DAT_08009934;\n  *(undefined4 *)PTR_DAT_08009934 = 0;\n  int offset = findOffset_08008804(input);\n  if (offset == -1 && *(int *)data_pointer != 0) {\n    *result = *(int *)data_pointer;\n  }\n  return;\n}",
            "called": [
                "FUN_08008804"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009918",
            "calling": [
                "FUN_08009270"
            ],
            "imported": false,
            "current_name": "find_and_set_offset_08009918"
        },
        "FUN_08005434": {
            "renaming": {
                "FUN_08005434": "calculate_and_decrement_08005434",
                "param_1": "input_value",
                "local_4": "result"
            },
            "code": "void calculate_and_decrement_08005434(int input_value) {\n  int result = input_value * (uint)((ulonglong)global_constant * (ulonglong)*(uint *)global_pointer >> 0x29);\n  do {\n    result--;\n  } while (result != 0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005434",
            "calling": [
                "FUN_08005460"
            ],
            "imported": false,
            "current_name": "calculate_and_decrement_08005434"
        },
        "FUN_08005e2e": {
            "renaming": {
                "FUN_08005e2e": "update_bits_08005e2e",
                "param_1": "bits_array",
                "puVar1": "bits",
                "PTR_DAT_08007110": "set_bit_and_return"
            },
            "code": "void update_bits_08005e2e(uint **bits_array)\n{\n  uint *bits = *bits_array;\n  *(undefined *)((int)bits_array + 0x3d) = 2;\n  if ((bits[8] & 0x1111) == 0) {\n    if ((bits[8] & 0x444) == 0) {\n      *bits = *bits & 0xfffffffe;\n    }\n  }\n  PTR_DAT_08007110(bits_array);\n  *(undefined *)((int)bits_array + 0x3d) = 0;\n  *(undefined *)(bits_array + 0xf) = 0;\n}\n",
            "called": [
                "FUN_08007110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e2e",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": false,
            "current_name": "update_bits_08005e2e"
        },
        "FUN_08007736": {
            "renaming": {
                "FUN_08007736": "execute_subtract_four_and_call_08007736",
                "iVar1": "subtracted_result",
                "subtract_four_08007718": "subtract_four",
                "*(code **)(subtracted_result + 0x48)": "function_pointer",
                "(code *)0x0": "null_pointer"
            },
            "code": "void execute_subtract_four_and_call_08007736(void)\n{\n  int subtracted_result = subtract_four();\n  if (*(code **)(subtracted_result + 0x48) != (code *)0x0) {\n    (**(code **)(subtracted_result + 0x48))();\n  }\n  return;\n}",
            "called": [
                "FUN_08007718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007736",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "execute_subtract_four_and_call_08007736"
        },
        "FUN_08002968": {
            "renaming": {
                "FUN_08002968": "initialize_parameters_08002968",
                "param_1": "mem_addr",
                "param_2": "param_value",
                "iVar1": "index_1",
                "iVar2": "index_2",
                "PTR_DAT_080029ec": "ptr_dat_080029ec",
                "PTR_DAT_080029f0": "ptr_dat_080029f0",
                "PTR_DAT_080029f4": "ptr_dat_080029f4",
                "PTR_DAT_080029f8": "ptr_dat_080029f8",
                "PTR_DAT_080029fc": "ptr_dat_080029fc",
                "PTR_DAT_08002a00": "ptr_dat_08002a00",
                "PTR_DAT_08002a04": "ptr_dat_08002a04",
                "PTR_DAT_08002a08": "ptr_dat_08002a08",
                "PTR_DAT_08002a0c": "ptr_dat_08002a0c"
            },
            "code": "void initialize_parameters_08002968(int mem_addr, uint32_t param_value) {\\n  int index_1;\\n  int index_2;\\n\\n  int* PTR_DAT_080029ec = 0;\\n  int* PTR_DAT_080029f0 = 0;\\n  int* PTR_DAT_080029f4 = 0;\\n  int* PTR_DAT_080029f8 = 0;\\n  int* PTR_DAT_080029fc = 0;\\n  int* PTR_DAT_08002a00 = 0;\\n  int* PTR_DAT_08002a04 = 0;\\n  int* PTR_DAT_08002a08 = 0;\\n  int* PTR_DAT_08002a0c = 0;\\n\\n  *PTR_DAT_080029ec = 0;\\n  *PTR_DAT_080029f0 = 0;\\n  if (*PTR_DAT_080029f4 != 0) {\\n    copy_value_to_memory_080091c6(*PTR_DAT_080029f4,0,*PTR_DAT_080029f8);\\n  }\\n  *PTR_DAT_080029fc = 0;\\n  *PTR_DAT_08002a00 = 0;\\n  if (*PTR_DAT_08002a04 != 0) {\\n    copy_value_to_memory_080091c6(*PTR_DAT_08002a04,0,*PTR_DAT_08002a08);\\n  }\\n  *PTR_DAT_08002a0c = 0;\\n  index_1 = (param_value & 0x7f) << 1;\\n  *(char *)(mem_addr + 0x10) = (char)index_1;\\n  if (param_value == 0x33) {\\n    *(undefined *)(mem_addr + 0x11) = 1;\\n  }\\n  else {\\n    *(undefined *)(mem_addr + 0x11) = 0;\\n  }\\n  index_2 = mem_addr + 0x14;\\n  decode_and_process_data_080077b0(index_2, PTR_LAB_08002a14, 0x4000, index_1, *(undefined *)(mem_addr + 0x11));\\n  if (*(char *)(mem_addr + 0x11) == \"\\0\") {\\n    set_param_value_08007f8e(index_2, PTR_LAB_08002774_1_08002a14);\\n    set_parameter_08007f7c(index_2, PTR_LAB_08002b00_1_08002a18);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08007f7c",
                "FUN_080077b0",
                "FUN_080091c6",
                "FUN_08007f8e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002968",
            "calling": [
                "FUN_08002a1c"
            ],
            "imported": false,
            "current_name": "initialize_parameters_08002968"
        },
        "FUN_08004ccc": {
            "renaming": {
                "FUN_08004ccc": "process_input_08004ccc",
                "param_1": "input",
                "puVar1": "flag_ptr",
                "DAT_08004d3d": "flag_char",
                "PTR_DAT_08004d2a": "byte_ptr",
                "PTR_DAT_08004d28": "counter_ptr"
            },
            "code": "uint32_t process_input_08004ccc(uint32_t **input)\n{\n  uint32_t *flag_ptr;\n  uint32_t *PTR_DAT_08004d2a;\n  uint32_t *PTR_DAT_08004d28;\n  uint32_t DAT_08004d3d;\n\n  flag_ptr = input[11];\n  DAT_08004d3d = *(char *)((int)input + 0x3d);\n  if (DAT_08004d3d == '!') {\n    PTR_DAT_08004d2a = input[9];\n    PTR_DAT_08004d28 = input[10];\n    if (*(short *)((int)input + 0x2a) == 0) {\n      if (((flag_ptr == (uint32_t *)0x4) || (flag_ptr == (uint32_t *)0x8)) || (flag_ptr == (uint32_t *)0xffff0000)) {\n        (*input)[1] = (*input)[1] & 0xfffff8ff;\n        **input = **input | 0x200;\n        input[12] = (uint32_t *)0x0;\n        *(char *)((int)input + 0x3d) = 0x20;\n        if (*(char *)((int)input + 0x3e) == '@') {\n          *(char *)((int)input + 0x3e) = 0;\n          do_nothing_08004b80();\n        }\n        else {\n          *(char *)((int)input + 0x3e) = 0;\n          do_nothing_08004a1e();\n        }\n      }\n      else {\n        (*input)[1] = (*input)[1] & 0xfffff8ff;\n        input[12] = (uint32_t *)0x11;\n        *(char *)((int)input + 0x3e) = 0;\n        *(char *)((int)input + 0x3d) = 0x20;\n        do_nothing_08004a1e();\n      }\n    }\n    else {\n      DAT_08004d3d = *(byte *)PTR_DAT_08004d2a;\n      input[9] = (uint32_t *)((int)PTR_DAT_08004d2a + 1);\n      (*input)[4] = DAT_08004d3d;\n      *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004b80",
                "FUN_08004a1e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ccc",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_08004ccc"
        },
        "FUN_080042d4": {
            "renaming": {
                "FUN_080042d4": "check_if_param2_bit_set_in_param1_080042d4",
                "param_1": "ptr_param1",
                "param_2": "param2",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int check_if_param2_bit_set_in_param1_080042d4(uint32_t* PTR_param1, uint32_t param2){\n  if ((param2 & *(uint32_t *)(PTR_param1 + 2)) == 0) {\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042d4",
            "calling": [
                "FUN_080072f0"
            ],
            "imported": false,
            "current_name": "check_if_param2_bit_set_in_param1_080042d4"
        },
        "FUN_0800542a": {
            "renaming": {
                "FUN_0800542a": "get_value_at_offset_0800542a",
                "param_1": "data",
                "*(undefined *)(param_1 + 0x3d)": "*(unsigned char*)(data + offset + 0x3d)"
            },
            "code": "unsigned char get_value_at_offset_0800542a(unsigned char* data, int offset){\n    return *(unsigned char*)(data + offset + 0x3d);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800542a",
            "calling": [
                "FUN_08007f0e",
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_0800542a"
        },
        "FUN_0800457c": {
            "renaming": {
                "FUN_0800457c": "read_byte_from_array_0800457c",
                "param_1": "array_ptr",
                "pbVar1": "ptr_to_byte_array",
                "ptr_to_array_index_42": "ptr_to_array_index_42",
                "ptr_to_array_index_0": "ptr_to_array_index_0",
                "byte_value": "byte_value"
            },
            "code": "int read_byte_from_array_0800457c(int *array_ptr) {\n  int *ptr_to_array_index_42 = (int *)((int)array_ptr + 0x2a);\n  if (*(short *)ptr_to_array_index_42 != 0) {\n    byte *ptr_to_byte_array = (byte *)array_ptr[9];\n    array_ptr[9] = (int)(ptr_to_byte_array + 1);\n    uint byte_value = (uint)*ptr_to_byte_array;\n    uint *ptr_to_array_index_0 = (uint *)(*array_ptr + 0x10);\n    *ptr_to_array_index_0 = byte_value;\n    *(short *)ptr_to_array_index_42 = *(short *)ptr_to_array_index_42 - 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800457c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "read_byte_from_array_0800457c"
        },
        "FUN_080091c6": {
            "renaming": {
                "FUN_080091c6": "copy_value_to_memory_080091c6",
                "param_1": "memory_location",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "end_location",
                "*param_1": "*(char *)memory_location"
            },
            "code": "void copy_value_to_memory_080091c6(void *memory_location, char value, int length){\n  void *end_location;\n  end_location = memory_location + length;\n  for (; memory_location != end_location; memory_location = memory_location + 1) {\n    *(char *)memory_location = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091c6",
            "calling": [
                "FUN_08006d80",
                "FUN_08009d24",
                "FUN_08009cdc",
                "FUN_08002a58",
                "FUN_08009db0",
                "FUN_08002968",
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "copy_value_to_memory_080091c6"
        },
        "FUN_0800a07a": {
            "renaming": {
                "FUN_0800a07a": "process_and_update_status_0800a07a",
                "param_1": "data",
                "param_2": "data_length",
                "iVar1": "processed_data",
                "uVar2": "status",
                "bVar3": "data_processing_failed"
            },
            "code": "void process_and_update_status_0800a07a(void* data, int data_length)\n{\n  int processed_data = process_data(data, *(short *)(data_length + 0xe));\n  bool data_processing_failed = processed_data == -1;\n  ushort status = *(ushort *)(data_length + 0xc);\n  if (data_processing_failed) {\n    status = status & 0xefff;\n  }\n  else {\n    *(int *)(data_length + 0x54) = processed_data;\n    status = status | 0x1000;\n  }\n  *(ushort *)(data_length + 0xc) = status;\n}",
            "called": [
                "FUN_0800a130"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a07a",
            "calling": [],
            "imported": false,
            "current_name": "process_and_update_status_0800a07a"
        },
        "FUN_08003a20": {
            "renaming": {
                "FUN_08003a20": "set_bit_and_check_08003a20",
                "param_1": "pointer_to_int",
                "param_2": "value",
                "iVar1": "value_after_getting",
                "iVar3": "current_value",
                "local_14": "i",
                "PTR_DAT_08003a98": "global_pointer_1",
                "DAT_08003a9c": "global_constant_1"
            },
            "code": "int set_bit_and_check_08003a20(int *pointer_to_int, uint value){\n  int current_value = *pointer_to_int;\n  if ((*(uint *)(current_value + 8) & 1) == 0) {\n    *(uint *)(current_value + 8) = *(uint *)(current_value + 8) | 1;\n    for (uint i = (uint)((ulonglong)DAT_08003a9c * (ulonglong)*(uint *)PTR_DAT_08003a98 >> 0x32); i != 0; i--);\n    int new_value = get_value_from_pointer_08003760(pointer_to_int, value, (int)((ulonglong)DAT_08003a9c * (ulonglong)*(uint *)PTR_DAT_08003a98));\n    do {\n      if ((*(uint *)(*pointer_to_int + 8) & 1) != 0) {\n        return 0;\n      }\n      int value_after_getting = get_value_from_pointer_08003760();\n    } while ((uint)(value_after_getting - new_value) < 3);\n    pointer_to_int[10] = pointer_to_int[10] | 0x10;\n    pointer_to_int[0xb] = pointer_to_int[0xb] | 1;\n    *(undefined *)(pointer_to_int + 9) = 0;\n    return 1;\n  }\n  else {\n    return 0;\n  }\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a20",
            "calling": [
                "FUN_08003e20",
                "FUN_08003aa0"
            ],
            "imported": false,
            "current_name": "set_bit_and_check_08003a20"
        },
        "FUN_080064b0": {
            "renaming": {
                "FUN_080064b0": "set_flags_080064b0",
                "param_1": "flags_ptr",
                "*param_1": "*flags_ptr",
                "PTR_": "PTR_",
                "DAT_": "DAT_",
                "uint": "unsigned int",
                "0xc": "12",
                "0x14": "20",
                "0xfffffedf": "4294967263",
                "0xfffffffe": "4294967294"
            },
            "code": "void set_flags_080064b0(int *flags_ptr)\n{\n    uint *flag1 = (uint *)(*flags_ptr + 0xc);\n    uint *flag2 = (uint *)(*flags_ptr + 0x14);\n    *flag1 = *flag1 & 0xfffffedf;\n    *flag2 = *flag2 & 0xfffffffe;\n    *(undefined *)((int)flags_ptr + 0x3a) = 0x20;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064b0",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "set_flags_080064b0"
        },
        "FUN_08009cdc": {
            "renaming": {
                "FUN_08009cdc": "initialize_struct_08009cdc",
                "param_1": "struct_ptr",
                "param_2": "value_1",
                "param_3": "value_2",
                "*param_1": "field_1",
                "param_1[1]": "field_2",
                "param_1[2]": "field_3",
                "*(undefined2 *)(param_1 + 3)": "field_4",
                "param_1[0x19]": "field_5",
                "*(undefined2 *)((int)param_1 + 0xe)": "field_6",
                "param_1[4]": "field_7",
                "param_1[5]": "field_8",
                "param_1[6]": "field_9",
                "copy_value_to_memory_080091c6(param_1 + 0x17,0,8)": "copy_value_to_memory(struct_ptr->field_10, 0, 8)",
                "uVar1": "DAT_08009d14",
                "param_1[8]": "field_11",
                "param_1[9]": "field_12",
                "param_1[10]": "field_13",
                "param_1[0xb]": "field_14",
                "param_1[0xc]": "field_15"
            },
            "code": "void initialize_struct_08009cdc(undefined4 *struct_ptr, undefined2 value_1, undefined2 value_2)\n{\n    struct_ptr->field_1 = 0;\n    struct_ptr->field_2 = 0;\n    struct_ptr->field_3 = 0;\n    struct_ptr->field_4 = value_1;\n    struct_ptr->field_5 = 0;\n    struct_ptr->field_6 = value_2;\n    struct_ptr->field_7 = 0;\n    struct_ptr->field_8 = 0;\n    struct_ptr->field_9 = 0;\n    copy_value_to_memory(struct_ptr->field_10, 0, 8);\n    struct_ptr->field_11 = struct_ptr;\n    struct_ptr->field_12 = DAT_08009d14;\n    struct_ptr->field_13 = PTR_process_input_0800a042_1_08009d18;\n    struct_ptr->field_14 = PTR_process_and_update_status_0800a07a_1_08009d1c;\n    struct_ptr->field_15 = PTR_LAB_0800a09e_1_08009d20;\n}\n",
            "called": [
                "FUN_080091c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009cdc",
            "calling": [
                "FUN_08009d50"
            ],
            "imported": false,
            "current_name": "initialize_struct_08009cdc"
        },
        "FUN_08002a58": {
            "renaming": {
                "FUN_08002a58": "check_input_08002a58",
                "param_1": "input_address",
                "iVar1": "string_check",
                "uVar2": "result",
                "PTR_DAT_08002ab0": "string_ptr_1",
                "PTR_DAT_08002aac": "int_ptr_1",
                "PTR_DAT_08002aa8": "int_ptr_2",
                "PTR_DAT_08002ab4": "string_ptr_2",
                "PTR_DAT_08002ab8": "int_ptr_3",
                "PTR_DAT_08002abc": "int_ptr_4"
            },
            "code": "int check_input_08002a58(int input_address) {\n    int result;\n    if (*(char *)(input_address + 0x11) == '\\0') {\n        result = 4;\n    }\n    else {\n        int string_check = check_string(input_address + 0x14, *PTR_DAT_08002ab0, *PTR_DAT_08002aac, *PTR_DAT_08002aa8);\n        if (string_check == 0) {\n            result = 0;\n        }\n        else if (string_check == 1) {\n            result = 1;\n        }\n        else {\n            result = 4;\n        }\n        if (*PTR_DAT_08002aac != 0) {\n            copy_value_to_memory(*PTR_DAT_08002aac, 0, *PTR_DAT_08002ab4);\n        }\n        *PTR_DAT_08002ab8 = 0;\n        *PTR_DAT_08002aa8 = 0;\n        *PTR_DAT_08002abc = 0;\n    }\n    return result;\n}",
            "called": [
                "FUN_080091c6",
                "FUN_08007e74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a58",
            "calling": [
                "FUN_08002b68",
                "FUN_08002ac0",
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "check_input_08002a58"
        },
        "FUN_080026b0": {
            "renaming": {
                "FUN_080026b0": "calculate_and_set_value_080026b0",
                "param_1": "object_address",
                "param_2": "new_value",
                "calculate_new_value_08008ef4": "calculate_new_value",
                "calculate_value_0800267c": "set_value"
            },
            "code": "void calculate_and_set_value_080026b0(int object_address, int new_value)\n{\n    if (new_value < 544)\n    {\n        if (new_value < 0)\n        {\n            new_value = 0;\n        }\n        else if (180 < new_value)\n        {\n            new_value = 180;\n        }\n        new_value = calculate_new_value(new_value, 0, 180, (136 - *(char *)(object_address + 1)) * 4, (600 - *(char *)(object_address + 2)) * 4);\n    }\n    set_value(object_address, new_value);\n    return;\n}",
            "called": [
                "FUN_0800267c",
                "FUN_08008ef4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026b0",
            "calling": [
                "FUN_0800021a"
            ],
            "imported": false,
            "current_name": "calculate_and_set_value_080026b0"
        },
        "FUN_08006092": {
            "renaming": {
                "FUN_08006092": "check_and_update_settings_08006092",
                "param_1": "settings",
                "FUN_08006e68": "initialize_settings",
                "update_settings_08005fe8": "update_settings"
            },
            "code": "int check_and_update_settings_08006092(undefined4 *settings)\\n{\\n    if (settings != (undefined4 *)0x0) {\\n        if (*(char *)((int)settings + 0x3d) == \"\\0\") {\\n            *(undefined *)(settings + 0xf) = 0;\\n            initialize_settings();\\n        }\\n        *(undefined *)((int)settings + 0x3d) = 2;\\n        update_settings(*settings, settings + 1);\\n        *(undefined *)((int)settings + 0x3d) = 1;\\n        return 0;\\n    }\\n    return 1;\\n}",
            "called": [
                "FUN_08005fe8",
                "FUN_08006e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006092",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "check_and_update_settings_08006092"
        },
        "FUN_08008d8c": {
            "renaming": {
                "FUN_08008d8c": "initialize_if_param1_is_1_08008d8c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "code": "void initialize_if_param1_is_1_08008d8c(int param1, int param2, undefined4 param3, undefined4 param4) {\n  if (param1 != 1) {\n    return;\n  }\n  if (param2 == 0xffff) {\n    initialize_params_08008d30(PTR_DAT_08008dac, DAT_08008da8, param3, 0xffff, param4);\n  }\n  return;\n}",
            "called": [
                "FUN_08008d30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d8c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_if_param1_is_1_08008d8c"
        },
        "FUN_080004d4": {
            "renaming": {
                "FUN_080004d4": "increment_bytes_and_set_080004d4",
                "param_1": "first_param",
                "param_2": "second_param",
                "iVar1": "counter",
                "puVar2": "byte_pointer"
            },
            "code": "void increment_bytes_and_set_080004d4(int first_param, int second_param)\n{\n  int counter;\n  undefined *byte_pointer;\n\n  if (first_param != 1) {\n    return;\n  }\n  if (second_param == 0xffff) {\n    byte_pointer = PTR_DAT_080004fc;\n    for (counter = 11; counter >= 0; counter--) {\n      increment_byte_and_set_08002580(byte_pointer);\n      byte_pointer += 3;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002580"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004d4",
            "calling": [],
            "imported": false,
            "current_name": "increment_bytes_and_set_080004d4"
        },
        "FUN_080005f8": {
            "renaming": {
                "FUN_080005f8": "decode_and_update_pin_state_080005f8",
                "param_1": "pin_offset",
                "param_2": "pin_mode",
                "puVar1": "ptr",
                "iVar2": "value",
                "cVar3": "char_value",
                "bVar4": "is_valid",
                "uVar5": "masked_offset"
            },
            "code": "\nvoid decode_and_update_pin_state_080005f8(uint pin_offset,int pin_mode)\n\n{\n  undefined *ptr;\n  int value;\n  char char_value;\n  bool is_valid;\n  uint masked_offset;\n  \n  value = get_value_at_offset_08002fa0(PTR_DAT_08000874,pin_offset);\n  if (value != 0x7f) {\n    value = get_value_at_offset_08002fa0(PTR_DAT_08000874,pin_offset);\n    if (value == 6) {\n      char_value = *PTR_DAT_0800087c;\n      if (char_value == '\\0') {\n        char_value = '\\0';\n      }\n      else if (pin_mode == 6) {\n        char_value = '\\0';\n      }\n    }\n    else {\n      char_value = '\\0';\n    }\n    if (char_value != '\\0') {\n      clear_memory_080005e0();\n    }\n    if (pin_offset < 0x3c) {\n      if (PTR_DAT_08000878[pin_offset] == -1) {\n        is_valid = false;\n      }\n      else {\n        value = check_character_in_array_080036ac();\n        if (value == 0) {\n          is_valid = false;\n        }\n        else {\n          value = check_character_in_array_080036ac((int)(char)PTR_DAT_08000878[pin_offset]);\n          if (value == 1) {\n            is_valid = false;\n          }\n          else if (pin_mode == 4) {\n            is_valid = false;\n          }\n          else {\n            is_valid = true;\n          }\n        }\n      }\n    }\n    else {\n      is_valid = false;\n    }\n    if (is_valid) {\n      if ((byte)PTR_DAT_08000880[pin_offset] < 0xc) {\n        value = get_byte_from_ptr_dat_08002708_times_8_and_shift_left_080026f8(PTR_DAT_08000884 + (uint)(byte)PTR_DAT_08000880[pin_offset] * 3);\n      }\n      else {\n        value = 0;\n      }\n      if (value != 0) {\n        process_response_and_update_flags_08000588(pin_offset);\n      }\n    }\n    masked_offset = pin_offset - 0x2e & 0xff;\n    if (masked_offset < 0xe) {\n      if (pin_offset < 0x3c) {\n        value = (int)(char)PTR_DAT_08000878[pin_offset];\n      }\n      else {\n        value = -1;\n      }\n      value = check_character_in_array_080036ac(value);\n      if (value == 0) {\n        is_valid = false;\n      }\n      else {\n        if (pin_offset < 0x3c) {\n          value = (int)(char)PTR_DAT_08000878[pin_offset];\n        }\n        else {\n          value = -1;\n        }\n        value = check_character_in_array_080036ac(value);\n        if (value == 1) {\n          is_valid = false;\n        }\n        else {\n          is_valid = true;\n        }\n      }\n    }\n    else {\n      is_valid = false;\n    }\n    if (is_valid) {\n      set_bit_08000488(masked_offset,pin_mode == 2);\n    }\n    if (pin_offset < 0x3c) {\n      if (PTR_DAT_08000878[pin_offset] == -1) {\n        is_valid = false;\n      }\n      else {\n        value = check_character_in_array_080036ac();\n        if (value == 0) {\n          is_valid = false;\n        }\n        else {\n          value = check_character_in_array_080036ac((int)(char)PTR_DAT_08000878[pin_offset]);\n          if (value == 1) {\n            is_valid = false;\n          }\n          else {\n            is_valid = true;\n          }\n        }\n      }\n    }\n    else {\n      is_valid = false;\n    }\n    if (is_valid) {\n      if ((pin_mode == 0) || (pin_mode == 0xb)) {\n        PTR_DAT_08000888[pin_offset >> 3] = PTR_DAT_08000888[pin_offset >> 3] | (byte)(1 << (pin_offset & 7))\n        ;\n      }\n      else {\n        PTR_DAT_08000888[pin_offset >> 3] =\n             PTR_DAT_08000888[pin_offset >> 3] & ~(byte)(1 << (pin_offset & 7));\n      }\n    }\n    store_value_at_offset_08002fc2(PTR_DAT_08000874,pin_offset,0);\n    switch(pin_mode) {\n    case 0:\n      if (pin_offset < 0x3c) {\n        if (PTR_DAT_08000878[pin_offset] == -1) {\n          is_valid = false;\n        }\n        else {\n          value = check_character_in_array_080036ac();\n          if (value == 0) {\n            is_valid = false;\n          }\n          else {\n            value = check_character_in_array_080036ac((int)(char)PTR_DAT_08000878[pin_offset]);\n            if (value == 1) {\n              is_valid = false;\n            }\n            else {\n              is_valid = true;\n            }\n          }\n        }\n      }\n      else {\n        is_valid = false;\n      }\n      if (is_valid) {\n        decode_character_flags_08008990(pin_offset,0);\n        check_and_set_char_at_offset_08002fa8(PTR_DAT_08000874,pin_offset,0);\n        return;\n      }\n      break;\n    case 1:\n      if (pin_offset < 0x3c) {\n        if (PTR_DAT_08000a48[pin_offset] == -1) {\n          is_valid = false;\n        }\n        else {\n          value = check_character_in_array_080036ac();\n          if (value == 0) {\n            is_valid = false;\n          }\n          else {\n            value = check_character_in_array_080036ac((int)(char)PTR_DAT_08000a48[pin_offset]);\n            if (value == 1) {\n              is_valid = false;\n            }\n            else {\n              is_valid = true;\n            }\n          }\n        }\n      }\n      else {\n        is_valid = false;\n      }\n      if (is_valid) {\n        value = get_value_at_offset_08002fa0(PTR_DAT_08000a44,pin_offset);\n        if (value == 3) {\n          decode_data_08008a24(pin_offset,0);\n        }\n        decode_character_flags_08008990(pin_offset,1);\n        check_and_set_char_at_offset_08002fa8(PTR_DAT_08000a44,pin_offset,1);\n        return;\n      }\n      break;\n    case 2:\n      if (masked_offset < 0xe) {\n        if (pin_offset < 0x3c) {\n          value = (int)(char)PTR_DAT_08000878[pin_offset];\n        }\n        else {\n          value = -1;\n        }\n        value = check_character_in_array_080036ac(value);\n        if (value == 0) {\n          is_valid = false;\n        }\n        else {\n          if (pin_offset < 0x3c) {\n            value = (int)(char)PTR_DAT_08000878[pin_offset];\n          }\n          else {\n            value = -1;\n          }\n          value = check_character_in_array_080036ac(value);\n          if (value == 1) {\n            is_valid = false;\n          }\n          else {\n            is_valid = true;\n          }\n        }\n      }\n      else {\n        is_valid = false;\n      }\n      if (is_valid) {\n        if (pin_offset < 0x3c) {\n          if (PTR_DAT_08000878[pin_offset] == -1) {\n            is_valid = false;\n          }\n          else {\n            value = check_character_in_array_080036ac();\n            if (value == 0) {\n              is_valid = false;\n            }\n            else {\n              value = check_character_in_array_080036ac((int)(char)PTR_DAT_08000878[pin_offset]);\n              if (value == 1) {\n                is_valid = false;\n              }\n            }\n          }\n        }\n        else {\n          is_valid = false;\n        }\n        if (is_valid) {\n          decode_character_flags_08008990(pin_offset,0);\n        }\n        check_and_set_char_at_offset_08002fa8(PTR_DAT_08000874,pin_offset,2);\n        return;\n      }\n      break;\n    case 3:\n      if (pin_offset < 0x3c) {\n        if (PTR_DAT_08000a48[pin_offset] == -1) {\n          value = 0;\n        }\n        else {\n          value = check_character_in_array_080036ac();\n          if (value == 0) {\n            value = 0;\n          }\n          else {\n            value = check_character_in_array_080036ac((int)(char)PTR_DAT_08000a48[pin_offset]);\n            if (value == 1) {\n              value = 0;\n            }\n            else {\n              value = search_for_value_0800738a((int)(char)PTR_DAT_08000a48[pin_offset],PTR_DAT_08000a4c);\n            }\n          }\n        }\n      }\n      else {\n        value = 0;\n      }\n      if (value != 0) {\n        decode_character_flags_08008990(pin_offset,1);\n        decode_data_080088e0(pin_offset,0);\n        check_and_set_char_at_offset_08002fa8(PTR_DAT_08000a44,pin_offset,3);\n        return;\n      }\n      break;\n    case 4:\n      if (pin_offset < 0x3c) {\n        if (PTR_DAT_08000a48[pin_offset] == -1) {\n          is_valid = false;\n        }\n        else {\n          value = check_character_in_array_080036ac();\n          if (value == 0) {\n            is_valid = false;\n          }\n          else {\n            value = check_character_in_array_080036ac((int)(char)PTR_DAT_08000a48[pin_offset]);\n            if (value == 1) {\n              is_valid = false;\n            }\n            else {\n              is_valid = true;\n            }\n          }\n        }\n      }\n      else {\n        is_valid = false;\n      }\n      if (is_valid) {\n        check_and_set_char_at_offset_08002fa8(PTR_DAT_08000a44,pin_offset,4);\n        if (((byte)PTR_DAT_08000a50[pin_offset] != 0xff) &&\n           (value = get_byte_from_ptr_dat_08002708_times_8_and_shift_left_080026f8(PTR_DAT_08000a54 + (uint)(byte)PTR_DAT_08000a50[pin_offset] * 3),\n           value != 0)) {\n          is_valid = false;\n        }\n        if (is_valid) {\n          decode_servo_info_08000500(pin_offset,0xffffffff);\n          return;\n        }\n      }\n      break;\n    default:\n      send_encoded_string_08002f14(PTR_DAT_08000a44,PTR_s_Unknown_pin_mode_08000a60);\n      break;\n    case 6:\n      if (pin_offset < 0x3c) {\n        if (PTR_DAT_08000a48[pin_offset] == -1) {\n          value = 0;\n        }\n        else {\n          value = check_character_in_array_080036ac();\n          if (value == 0) {\n            value = 0;\n          }\n          else {\n            value = check_character_in_array_080036ac((int)(char)PTR_DAT_08000a48[pin_offset]);\n            if (value == 1) {\n              value = 0;\n            }\n            else {\n              value = search_for_value_0800738a((int)(char)PTR_DAT_08000a48[pin_offset],PTR_DAT_08000a58);\n              if (value == 0) {\n                value = search_for_value_0800738a((int)(char)PTR_DAT_08000a48[pin_offset],PTR_DAT_08000a5c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        value = 0;\n      }\n      if (value != 0) {\n        check_and_set_char_at_offset_08002fa8(PTR_DAT_08000a44,pin_offset,6);\n        return;\n      }\n      break;\n    case 10:\n      break;\n    case 0xb:\n      if (pin_offset < 0x3c) {\n        if (PTR_DAT_08000878[pin_offset] == -1) {\n          is_valid = false;\n        }\n        else {\n          value = check_character_in_array_080036ac();\n          if (value == 0) {\n            is_valid = false;\n          }\n          else {\n            value = check_character_in_array_080036ac((int)(char)PTR_DAT_08000878[pin_offset]);\n            if (value == 1) {\n              is_valid = false;\n            }\n            else {\n              is_valid = true;\n            }\n          }\n        }\n      }\n      else {\n        is_valid = false;\n      }\n      if (is_valid) {\n        decode_character_flags_08008990(pin_offset,2);\n        ptr = PTR_DAT_08000a44;\n        check_and_set_char_at_offset_08002fa8(PTR_DAT_08000a44,pin_offset,0xb);\n        store_value_at_offset_08002fc2(ptr,pin_offset,1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080088e0",
                "FUN_08002fa0",
                "FUN_080036ac",
                "FUN_0800738a",
                "FUN_08008990",
                "FUN_080026f8",
                "FUN_08002fa8",
                "FUN_08000588",
                "FUN_08002fc2",
                "FUN_08002f14",
                "FUN_08000500",
                "FUN_080005e0",
                "FUN_08008a24",
                "FUN_08000488"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005f8",
            "calling": [
                "FUN_08000aec",
                "FUN_08001cd0",
                "FUN_08000a64"
            ],
            "imported": false,
            "current_name": "decode_and_update_pin_state_080005f8"
        },
        "FUN_08009124": {
            "renaming": {
                "FUN_08009124": "process_data_and_update_results_08009124",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "result1_ptr",
                "param_4": "result2_ptr",
                "uStack_8": "result1",
                "uStack_4": "result2",
                "PTR_PTR_DAT_08009144": "process_data"
            },
            "code": "void process_data_and_update_results_08009124(void* data_ptr, int data_size, int* result1_ptr, int* result2_ptr)\n{\n  int result1 = *result1_ptr;\n  int result2 = *result2_ptr;\n  PTR_PTR_DAT_08009144(data_ptr, data_size, &result1, &result2);\n  *result1_ptr = result1;\n  *result2_ptr = result2;\n}",
            "called": [
                "FUN_0800937c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009124",
            "calling": [
                "FUN_080090cc"
            ],
            "imported": false,
            "current_name": "process_data_and_update_results_08009124"
        },
        "FUN_08002fa0": {
            "renaming": {
                "FUN_08002fa0": "get_value_at_offset_08002fa0",
                "param_1": "offset",
                "param_2": "base_address",
                "PTR_": "",
                "DAT_": "",
                "*": "ptr",
                "undefined": "unsigned char",
                "return": ""
            },
            "code": "unsigned char get_value_at_offset_08002fa0(int offset, int base_address) {\n    unsigned char* ptr = (unsigned char*)(base_address + offset + 0xcc);\n    return *ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fa0",
            "calling": [
                "FUN_08001cd0",
                "FUN_080022f8",
                "FUN_0800021a",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08002fa0"
        },
        "FUN_080064ae": {
            "renaming": {
                "FUN_080064ae": "do_nothing_080064ae"
            },
            "code": "\nvoid do_nothing_080064ae(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ae",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_080064ae"
        },
        "FUN_0800a424": {
            "renaming": {
                "FUN_0800a424": "do_nothing_0800a424"
            },
            "code": "\nvoid do_nothing_0800a424(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a424",
            "calling": [
                "FUN_08009148",
                "FUN_0800010c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800a424"
        },
        "FUN_08003a1c": {
            "renaming": {
                "FUN_08003a1c": "get_value_at_offset_08003a1c",
                "param_1": "base_address",
                "*(undefined4 *)(param_1 + 0x28)": "value"
            },
            "code": "int get_value_at_offset_08003a1c(int base_address, int offset) {\n    int* value_pointer = (int*)(base_address + offset);\n    int value = *value_pointer;\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a1c",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08003a1c"
        },
        "FUN_080064ac": {
            "renaming": {
                "FUN_080064ac": "do_nothing_080064ac"
            },
            "code": "\nvoid do_nothing_080064ac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ac",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_080064ac"
        },
        "FUN_08005cb4": {
            "renaming": {
                "FUN_08005cb4": "execute_if_both_bits_set_08005cb4",
                "param_1": "pointer",
                "DAT_08005ce8": "memory_address"
            },
            "code": "void execute_if_both_bits_set_08005cb4(uint **pointer)\n{\n  if (((**pointer & 2) != 0) && (((*pointer)[1] & 2) != 0)) {\n    execute_code_if_pointer_not_null_080073c0();\n    (*pointer)[1] = 0xfffffffd;\n  }\n  *(undefined4 *)(DAT_08005ce8 + 0x14) = 0x20000;\n  *(undefined *)((int)pointer + 0x11) = 1;\n  return;\n}",
            "called": [
                "FUN_080073c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cb4",
            "calling": [],
            "imported": false,
            "current_name": "execute_if_both_bits_set_08005cb4"
        },
        "FUN_08007744": {
            "renaming": {
                "FUN_08007744": "get_value_from_pointer_08007744",
                "param_1": "pointer_address",
                "PTR_": "pointer_",
                "DAT_": "data_"
            },
            "code": "int get_value_from_pointer_08007744(int PTR_address) {\n    int* PTR_to_value = *(int*)(PTR_address + 4);\n    int offset_to_value = 0x24;\n    int value = *(int*)(PTR_to_value + offset_to_value);\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007744",
            "calling": [],
            "imported": false,
            "current_name": "get_value_from_pointer_08007744"
        },
        "FUN_08006538": {
            "renaming": {
                "FUN_08006538": "calculate_values_08006538",
                "*param_1": "*params",
                "uVar1": "var1",
                "uVar2": "var2",
                "iVar3": "var3",
                "iVar4": "var4",
                "iVar5": "var5",
                "iVar6": "var6",
                "iVar7": "var7",
                "iVar8": "var8",
                "iVar9": "var9",
                "iVar10": "var10",
                "iVar11": "var11",
                "iVar12": "var12",
                "DAT_080066e0": "DAT_080066e0",
                "DAT_080066e4": "DAT_080066e4"
            },
            "code": "void calculate_values_08006538(int *params)\n{\n  uint mask1 = 0xffffcfff;\n  uint mask2 = 0xffffe9f3;\n  uint mask3 = 0xfffffcff;\n  uint constant1 = 0x19;\n  uint constant2 = 0x10;\n  uint constant3 = 0x32;\n  uint constant4 = 0x25;\n  uint constant5 = 0x17;\n  uint constant6 = 0xf0;\n  uint param3 = params[3];\n  uint param2 = params[2] | params[4] | params[5] | (*(uint *)(*params + 0xc) & mask2);\n  uint param6 = params[6];\n  uint var1 = *(uint *)(*params + 0x10) & mask1 | param3;\n  uint var2 = *(uint *)(*params + 0x14) & mask3 | param6;\n  uint var3 = (uint)((ulonglong)DAT_080066e4 * (ulonglong)((uint)(get_shifted_value_08005a28() * constant1) / (uint)(params[1] << 2)) >> constant4) * constant2;\n  uint var4 = (uint)((ulonglong)DAT_080066e4 * (ulonglong)((uint)(get_shifted_value_08005a28() * constant1) / (uint)(params[1] << 2)) >> constant4) * constant2;\n  uint var5 = (uint)((ulonglong)DAT_080066e4 * (ulonglong)(((uint)(get_shifted_value_08005a28() * constant1) / (uint)(params[1] << 2)) + ((ulonglong)DAT_080066e4 * ((ulonglong)(uint)(get_shifted_value_08005a28() * constant1) / (ulonglong)(uint)(params[1] << 2)) >> constant4) * -100) * constant2 + constant3) >> constant5;\n  uint var6 = (uint)((ulonglong)DAT_080066e4 * (ulonglong)(((uint)(get_shifted_value_08005a28() * constant1) / (uint)(params[1] << 2)) + ((ulonglong)DAT_080066e4 * ((ulonglong)(uint)(get_shifted_value_08005a28() * constant1) / (ulonglong)(uint)(params[1] << 2)) >> constant4) * -100) * constant2 + constant3) >> constant5;\n  *(uint *)(*params + 8) = ((var1 * var5) >> constant5) + ((var2 * var6) & constant6) + var3 + var4;\n}\n",
            "called": [
                "FUN_08005a28",
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006538",
            "calling": [
                "FUN_0800674e"
            ],
            "imported": false,
            "current_name": "calculate_values_08006538"
        },
        "FUN_080042e2": {
            "renaming": {
                "FUN_080042e2": "set_value_at_address_080042e2",
                "param_1": "address",
                "param_2": "value",
                "param_3": "shift"
            },
            "code": "void set_value_at_address_080042e2(int address, int value, int shift) {\n    if (shift == 0) {\n        *(int *)(address + 0x10) = value << 0x10;\n        return;\n    }\n    *(int *)(address + 0x10) = value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042e2",
            "calling": [
                "FUN_080072d8"
            ],
            "imported": false,
            "current_name": "set_value_at_address_080042e2"
        },
        "FUN_08002fa8": {
            "renaming": {
                "FUN_08002fa8": "check_and_set_char_at_offset_08002fa8",
                "param_1": "base_address",
                "param_2": "offset",
                "param_3": "new_char",
                "*(char *)(param_1 + param_2 + 0xcc)": "*char_ptr",
                "*(undefined *)(param_1 + param_2 + 0xcc)": "*char_ptr",
                "undefined": "N/A"
            },
            "code": "void check_and_set_char_at_offset_08002fa8(int base_address, int offset, char new_char) {\n    char* char_ptr = (char*)(base_address + offset + 0xcc);\n    if (*char_ptr != '\\x7f') {\n        *char_ptr = new_char;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fa8",
            "calling": [
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "check_and_set_char_at_offset_08002fa8"
        },
        "FUN_0800325a": {
            "renaming": {
                "FUN_0800325a": "encode_and_send_data_0800325a",
                "param_1": "ptr_data",
                "param_2": "data_size",
                "param_3": "num_iterations",
                "param_4": "offset",
                "puVar1": "ptr_function",
                "uVar2": "i"
            },
            "code": "void encode_and_send_data_0800325a(undefined4 *ptr_data, undefined4 data_size, uint num_iterations, int offset) {\n  undefined4 *ptr_function = (undefined4 *)*ptr_data;\n  if (ptr_function != (undefined4 *)0x0) {\n    (**(code **)*ptr_function)(ptr_function,0xf0);\n    (***(code ***)(undefined4 *)*ptr_data)((undefined4 *)*ptr_data,data_size);\n    for (uint i = 0; i < num_iterations; i++) {\n      encode_data_0800307a(ptr_data,1,offset + i,0);\n    }\n    (***(code ***)(undefined4 *)*ptr_data)((undefined4 *)*ptr_data,0xf7);\n  }\n  return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800325a",
            "calling": [
                "FUN_080032a2",
                "FUN_08002f0a"
            ],
            "imported": false,
            "current_name": "encode_and_send_data_0800325a"
        },
        "FUN_080091d8": {
            "renaming": {
                "FUN_080091d8": "insert_node_080091d8",
                "param_1": "head",
                "param_2": "data",
                "param_3": "size",
                "param_4": "error_code",
                "puVar1": "ptr_to_head",
                "extraout_r1": "prev_node",
                "ppiVar2": "prev_node",
                "ppiVar3": "next_node",
                "piVar4": "data_ptr",
                "ppiVar5": "ptr_to_head",
                "ppiVar6": "prev_node",
                "ppiVar7": "current_node"
            },
            "code": "void insert_node_080091d8(int **head, int data, int size, int *error_code) {\n  if (size == 0) {\n    return;\n  }\n  int **current_node = (int **)(size - 4);\n  if (*(int *)(size - 4) < 0) {\n    current_node = (int **)((int)current_node + *(int *)(size - 4));\n  }\n  do_nothing_08009f48();\n  int **ptr_to_head = *(int ***)PTR_DAT_0800926c;\n  if (ptr_to_head == (int **)0x0) {\n    current_node[1] = (int *)0x0;\n    *(int ***)PTR_DAT_0800926c = current_node;\n    int **prev_node = head;\n    int **next_node = (int **)PTR_DAT_0800926c;\n  }\n  else if (current_node < ptr_to_head) {\n    int **prev_node = (int **)*current_node;\n    int **next_node = (int **)((int)current_node + (int)prev_node);\n    if (ptr_to_head == next_node) {\n      int *data_ptr = *ptr_to_head;\n      ptr_to_head = (int **)ptr_to_head[1];\n      next_node = (int **)((int)data_ptr + (int)prev_node);\n      *current_node = (int *)next_node;\n    }\n    current_node[1] = (int *)ptr_to_head;\n    *(int ***)PTR_DAT_0800926c = current_node;\n  }\n  else {\n    int **prev_node = ptr_to_head;\n    int **next_node = (int **)prev_node[1];\n    while (next_node != (int **)0x0 && next_node <= current_node) {\n      prev_node = next_node;\n      next_node = (int **)next_node[1];\n    }\n    if (current_node < (int **)((int)prev_node + (int)*prev_node)) {\n      *error_code = 0xc;\n    }\n    else if (next_node == (int **)((int)prev_node + (int)*prev_node)) {\n      int *data_ptr = *next_node;\n      next_node = (int **)next_node[1];\n      int **new_next_node = (int **)((int)data_ptr + (int)*prev_node);\n      *prev_node = (int *)new_next_node;\n      prev_node[1] = (int *)next_node;\n    }\n    else {\n      current_node[1] = (int *)next_node;\n      prev_node[1] = (int *)current_node;\n    }\n  }\n  do_nothing_08009f4a(error_code,prev_node,next_node,data);\n  return;\n}",
            "called": [
                "FUN_08009f48",
                "FUN_08009f4a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091d8",
            "calling": [
                "FUN_08009b5c",
                "FUN_08009908",
                "FUN_080091a0",
                "FUN_08009a80"
            ],
            "imported": false,
            "current_name": "insert_node_080091d8"
        },
        "FUN_0800688e": {
            "renaming": {
                "FUN_0800688e": "validate_input_0800688e",
                "param_1": "input_array",
                "param_2": "array_length",
                "param_3": "param_3",
                "*(char *)((int)param_1 + 0x39)": "input_array[9]",
                "*(char *)(param_1 + 0xe)": "input_array[14]",
                "param_1[8]": "input_array[8]",
                "*(short *)(param_1 + 9)": "input_array[9]",
                "*(short *)((int)param_1 + 0x26)": "input_array[11]",
                "param_1[0xf]": "input_array[15]",
                "*(undefined *)((int)param_1 + 0x39)": "input_array[9] = '!'",
                "*(undefined *)(param_1 + 0xe)": "input_array[14] = 0",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*input_array + 0xc)"
            },
            "code": "int validate_input_0800688e(int *input_array, int array_length, int param_3)\n{\n    if (input_array[9] != ' ')\n    {\n        return 2;\n    }\n    if (array_length == 0)\n    {\n        return 1;\n    }\n    if (param_3 == 0)\n    {\n        return 1;\n    }\n    if (input_array[14] != 1)\n    {\n        input_array[8] = array_length;\n        input_array[9] = (short)param_3;\n        input_array[11] = (short)param_3;\n        input_array[15] = 0;\n        input_array[9] = '!';\n        input_array[14] = 0;\n        *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x80;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800688e",
            "calling": [
                "FUN_08008694",
                "FUN_08008730"
            ],
            "imported": false,
            "current_name": "validate_input_0800688e"
        },
        "FUN_080088e0": {
            "renaming": {
                "FUN_080088e0": "decode_data_080088e0",
                "param_1": "character_index",
                "param_2": "input_value",
                "iVar1": "value_index",
                "uVar2": "shift_amount",
                "iVar3": "character_value",
                "PTR_DAT_0800897c": "character_flags",
                "PTR_DAT_08008980": "value_array",
                "decode_character_flags_08008990": "decode_character_flags",
                "PTR_DAT_08008988": "shift_amount_ptr",
                "decode_data_08008a24": "decode_data",
                "get_bit_08006b28": "get_bit",
                "PTR_DAT_08008984": "bit_array",
                "set_bit_in_array_08006b3e": "set_bit_in_array",
                "process_input_and_update_state_08007118": "process_input_and_update_state",
                "DAT_0800898c": "state_array"
            },
            "code": "void decode_data_080088e0(uint character_index, int is_greater_than_127) {\n  int character_value = -1;\n  if (character_index < 60) {\n    character_value = (int)(char)PTR_DAT_0800897c[character_index];\n  }\n  if (character_value != -1) {\n    int value_index = search_for_value(character_value, PTR_DAT_08008980);\n    if (value_index == 0) {\n      decode_PTR_DAT_0800897c(character_index, 1);\n      uint shift_amount = *(uint *)PTR_DAT_08008988;\n      if (shift_amount != 8) {\n        if (shift_amount < 9) {\n          input_value = input_value << (8 - shift_amount & 0xff);\n        }\n        else {\n          input_value = input_value >> (shift_amount - 8 & 0xff);\n        }\n      }\n      if (input_value < 0x80) {\n        decode_data_080088e0(character_index, 0);\n      }\n      else {\n        decode_data_080088e0(character_index, 1);\n      }\n    }\n    else {\n      int bit_value = get_bit_08006b28(character_value, PTR_DAT_08008984);\n      if (bit_value == 0) {\n        set_bit_in_array_08006b3e(character_value, PTR_DAT_08008984);\n      }\n      uint shift_amount = *(uint *)PTR_DAT_08008988;\n      if (shift_amount != 8) {\n        if (shift_amount < 9) {\n          input_value = input_value << (8 - shift_amount & 0xff);\n        }\n        else {\n          input_value = input_value >> (shift_amount - 8 & 0xff);\n        }\n      }\n      process_input_and_update_state(character_value, DAT_0800898c, 0xff, input_value, bit_value == 0);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08006b3e",
                "FUN_08006b28",
                "FUN_08008990",
                "FUN_0800738a",
                "FUN_08008a24",
                "FUN_08007118"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080088e0",
            "calling": [
                "FUN_0800021a",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "decode_data_080088e0"
        },
        "FUN_08008b66": {
            "renaming": {
                "FUN_08008b66": "validate_and_set_flag_08008b66",
                "param_1": "flag_value",
                "iVar1": "validation_result",
                "uVar2": "flag_index",
                "local_9": "flag_data"
            },
            "code": "void validate_and_set_flag_08008b66(int flag_value) {\n  int validation_result;\n  ushort flag_index;\n  undefined flag_data;\n  validation_result = validate_and_set_flag_08008b66_08008600(flag_value, &flag_data);\n  if ((validation_result == 0) && (flag_index = *(short *)(flag_value + 0x60) + 1U & 0x3f, flag_index != *(ushort *)(flag_value + 0x62))) {\n    *(undefined *)(*(int *)(flag_value + 0x5c) + (uint)*(ushort *)(flag_value + 0x60)) = flag_data;\n    *(ushort *)(flag_value + 0x60) = flag_index;\n  }\n  return;\n}",
            "called": [
                "FUN_08008600"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b66",
            "calling": [],
            "imported": false,
            "current_name": "validate_and_set_flag_08008b66"
        },
        "FUN_0800870c": {
            "renaming": {
                "FUN_0800870c": "execute_function_if_value_less_than_five_0800870c",
                "uVar1": "value_index",
                "find_index_of_value_080086e8": "find_index_of_value",
                "PTR_DAT_08008728": "function_pointers",
                "PTR_DAT_0800872c": "function_arguments"
            },
            "code": "void execute_function_if_value_less_than_five_0800870c(void)\n{\n  uint value_index;\n  value_index = find_index_of_value();\n  if (value_index < 5) {\n    (**(code **)(PTR_DAT_08008728 + value_index * 4))(*(undefined4 *)(PTR_DAT_0800872c + value_index * 4));\n  }\n  return;\n}",
            "called": [
                "FUN_080086e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800870c",
            "calling": [
                "FUN_0800694c"
            ],
            "imported": false,
            "current_name": "execute_function_if_value_less_than_five_0800870c"
        },
        "FUN_08008840": {
            "renaming": {
                "FUN_08008840": "get_error_code_08008840"
            },
            "code": "unsigned int get_error_code_08008840(void)\n{\n    return 0xFFFFFFFF;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008840",
            "calling": [],
            "imported": false,
            "current_name": "get_error_code_08008840"
        },
        "FUN_08008600": {
            "renaming": {
                "FUN_08008600": "validate_and_set_flag_08008600",
                "param_1": "input_length",
                "param_2": "input_string",
                "param_3": "flag_set",
                "param_4": "error_code",
                "*param_2": "input_string",
                "iVar1": "is_flag_set",
                "is_flag_set_at_offset_080085b8": "is_flag_set_at_offset",
                "input_char": "input_char_ptr",
                "input_byte": "input_byte_val",
                "PTR_DAT_08008638": "ptr_dat",
                "input_dat": "input_dat_val",
                "validate_input_080068d6": "validate_input"
            },
            "code": "int validate_and_set_flag_08008600(int input_length, char* input_string, int flag_set, int error_code) {\n  if (input_length == 0) {\n    return -1;\n  }\n  int is_flag_set = is_flag_set_at_offset_080085b8();\n  if (!is_flag_set) {\n    char* input_char = input_string + 0x45;\n    char input_byte = *(char*)(input_string + 0x44);\n    int* PTR_DAT_08008638 = (int*)PTR_DAT_08008638;\n    int input_dat = *(PTR_DAT_08008638 + (int)input_byte * 4);\n    validate_input_080068d6(input_dat, input_char, 1, PTR_DAT_08008638, error_code);\n    return 0;\n  }\n  return -1;\n}",
            "called": [
                "FUN_080068d6",
                "FUN_080085b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008600",
            "calling": [
                "FUN_08008b66"
            ],
            "imported": false,
            "current_name": "validate_and_set_flag_08008600"
        },
        "FUN_08003154": {
            "renaming": {
                "FUN_08003154": "copy_value_to_pointer_08003154",
                "param_1": "destination",
                "param_2": "value",
                "*param_1": "*destination"
            },
            "code": "void copy_value_to_pointer_08003154(int* destination, int value) {\n  *destination = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003154",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": false,
            "current_name": "copy_value_to_pointer_08003154"
        },
        "FUN_08006420": {
            "renaming": {
                "FUN_08006420": "set_bit_in_uint_array_08006420",
                "param_1": "array",
                "param_2": "index",
                "param_3": "value",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void set_bit_in_uint_array_08006420(uint* array, uint index, uint value){\n    uint mask = ~(4 << (index & 0xff));\n    uint masked_array_value = *(array + 0x20) & mask;\n    uint shifted_value = value << (index & 0xff);\n    uint new_array_value = masked_array_value | shifted_value;\n    *(array + 0x20) = new_array_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006420",
            "calling": [
                "FUN_08006460",
                "FUN_0800643c"
            ],
            "imported": false,
            "current_name": "set_bit_in_uint_array_08006420"
        },
        "FUN_08007750": {
            "renaming": {
                "FUN_08007750": "set_parameter_at_index_08007750",
                "param_1": "parameter_array_address",
                "param_2": "index",
                "param_3": "value",
                "*(*(int *)(param_1 + 4) + 0x34 + param_2 * 4)": "*parameter_address",
                "*(undefined4 *)(*(int *)(param_1 + 4) + 0x34 + param_2 * 4)": "*parameter_address",
                "*(int *)(param_1 + 4)": "array_pointer",
                "param_2 * 4": "offset",
                "0x34 + param_2 * 4": "offset",
                "*(undefined4 *)": "*",
                "undefined4": "int"
            },
            "code": "void set_parameter_at_index_08007750(int parameter_array_address, int index, int value)\n{\n  int* array_pointer = *(int*)(parameter_array_address + 4);\n  int offset = index * 4 + 0x34;\n  int* parameter_address = array_pointer + offset;\n  *parameter_address = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007750",
            "calling": [],
            "imported": false,
            "current_name": "set_parameter_at_index_08007750"
        },
        "FUN_08009938": {
            "renaming": {
                "FUN_08009938": "find_character_in_string_08009938",
                "param_1": "str",
                "param_2": "ch",
                "pcVar1": "found_char"
            },
            "code": "char* find_character_in_string_08009938(char* str, char ch) {\\n  char* found_char = NULL;\\n  while (*str != \"\\0\") {\\n    if (*str == ch) {\\n      found_char = str;\\n      break;\\n    }\\n    str++;\\n  }\\n  return found_char;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009938",
            "calling": [
                "FUN_0800997e"
            ],
            "imported": false,
            "current_name": "find_character_in_string_08009938"
        },
        "FUN_08007f0e": {
            "renaming": {
                "FUN_08007f0e": "process_input_and_check_08007f0e",
                "param_1": "input",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "iVar1": "base_value",
                "uVar3": "difference",
                "iVar4": "status",
                "iVar5": "input_address",
                "iVar2": "input_value",
                "uVar6": "param_4",
                "get_value_from_pointer_08003760": "get_value_from_pointer",
                "process_input_080047f4": "process_input",
                "get_value_at_offset_0800542a": "get_current_char",
                "get_value_at_offset_08005430": "get_second_input_value"
            },
            "code": "int process_input_and_check_08007f0e(int input, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  int base_value = get_value_from_pointer_08003760();\n  uint difference = 0;\n  int status = 2;\n  do {\n    int input_address = input + 4;\n    int input_value = process_input_080047f4(input_address, param_2, param_3, param_4, param_4);\n    if (input_value == 0) {\n      status = 0;\n      int current_char = get_value_at_offset_0800542a(input_address);\n      while (current_char != 0x20 && status == 0) {\n        int pointer_value = get_value_from_pointer_08003760();\n        difference = pointer_value - base_value;\n        if (difference < 0x65) {\n          int second_input_value = get_value_at_offset_08005430(input_address);\n          if (second_input_value != 0) {\n            status = 2;\n          }\n        }\n        else {\n          status = 1;\n        }\n        current_char = get_value_at_offset_0800542a(input_address);\n      }\n    }\n    input_value = get_value_at_offset_08005430(input_address);\n  } while (input_value == 4 && difference < 100);\n  return status;\n}",
            "called": [
                "FUN_080047f4",
                "FUN_08003760",
                "FUN_08005430",
                "FUN_0800542a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f0e",
            "calling": [
                "FUN_08002b68"
            ],
            "imported": false,
            "current_name": "process_input_and_check_08007f0e"
        },
        "FUN_08004004": {
            "renaming": {
                "FUN_08004004": "set_bit_at_index_08004004",
                "param_1": "index",
                "DAT_08004020": "byte_array",
                "uint": "unsigned int",
                "int": "signed int"
            },
            "code": "void set_bit_at_index_08004004(uint index){\n                        if (index >= 0) {\n                            uint byte_index = (index >> 5) + 0x60;\n                            uint* byte_address = (uint*)(DAT_08004020 + byte_index * 4);\n                            uint bit_index = index & 0x1f;\n                            uint bit_mask = 1 << bit_index;\n                            *byte_address = bit_mask;\n                        }\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004004",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_at_index_08004004"
        },
        "FUN_08003158": {
            "renaming": {
                "FUN_08003158": "encode_or_decode_data_08003158",
                "param_1": "data_ptr",
                "param_2": "data_len",
                "param_3": "data_value",
                "puVar1": "function_ptr",
                "local_a": "local_data_value",
                "encode_data_0800307a": "encode_data",
                "decode_and_encode_data_08003106": "decode_and_encode_data"
            },
            "code": "void encode_or_decode_data_08003158(undefined4 *data_ptr, uint data_len, ushort data_value)\n{\n    undefined4 *function_ptr;\n    ushort local_data_value;\n\n    function_ptr = (undefined4 *)*data_ptr;\n    if (function_ptr != (undefined4 *)0x0) {\n        local_data_value = data_value;\n        if (((int)data_len < 0x10) && (data_value < 0x4000)) {\n            (**(code **)*function_ptr)(function_ptr,data_len | 0xe0);\n            encode_data(data_ptr, 2, &local_data_value);\n        }\n        else {\n            decode_and_encode_data(data_ptr, data_len, 2, &local_data_value);\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_08003106",
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003158",
            "calling": [
                "FUN_08002ef2"
            ],
            "imported": false,
            "current_name": "encode_or_decode_data_08003158"
        },
        "FUN_080090c2": {
            "renaming": {
                "FUN_080090c2": "determine_result_and_swap_args_080090c2",
                "param_1": "arg1",
                "param_2": "arg2"
            },
            "code": "void determine_result_and_swap_args_080090c2(undefined4 arg1, undefined4 arg2)\n{\n  determine_result_08009108(arg2, arg1);\n  return;\n}",
            "called": [
                "FUN_08009108"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090c2",
            "calling": [
                "FUN_08008f78"
            ],
            "imported": false,
            "current_name": "determine_result_and_swap_args_080090c2"
        },
        "FUN_08000ef8": {
            "renaming": {
                "FUN_08000ef8": "process_input_08000ef8",
                "bVar1": "byteValue",
                "iVar2": "intValue",
                "bVar3": "boolValue",
                "bVar4": "result",
                "check_character_in_array_080036ac": "checkCharacterInArray",
                "check_bit_set_08008a6c": "checkBitSet",
                "execute_function_08000be8": "executeFunction"
            },
            "code": "\nvoid processInput_08000ef8(void)\n\n{\n  byte byteValue;\n  int intValue;\n  bool boolValue;\n  byte result;\n  \n  if (*PTR_DAT_08001188 != '\\0') {\n    byteValue = *PTR_DAT_0800118c;\n    if (*PTR_DAT_08001190 == -1) {\n      result = 0;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        result = 0;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)*PTR_DAT_08001190);\n        if (intValue == 1) {\n          result = 0;\n        }\n        else if ((byteValue & 1) == 0) {\n          result = 0;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0);\n          if (intValue == 0) {\n            result = 0;\n          }\n          else {\n            result = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001190[1] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001190[1]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 2) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(1);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 2;\n    }\n    if (PTR_DAT_08001190[2] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001190[2]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 4) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(2);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 4;\n    }\n    if (PTR_DAT_08001190[3] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001190[3]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 8) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(3);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 8;\n    }\n    if (PTR_DAT_08001190[4] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001190[4]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 0x10) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(4);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 0x10;\n    }\n    if (PTR_DAT_08001190[5] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001190[5]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 0x20) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(5);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 0x20;\n    }\n    if (PTR_DAT_08001190[6] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001190[6]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 0x40) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(6);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 0x40;\n    }\n    if (PTR_DAT_08001190[7] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001190[7]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 0x80) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(7);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 0x80;\n    }\n    execute_function_08000be8(0,result);\n  }\n  if (PTR_DAT_08001188[1] != '\\0') {\n    byteValue = PTR_DAT_0800118c[1];\n    if (PTR_DAT_08001190[8] == -1) {\n      result = 0;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        result = 0;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001424[8]);\n        if (intValue == 1) {\n          result = 0;\n        }\n        else if ((byteValue & 1) == 0) {\n          result = 0;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(8);\n          if (intValue == 0) {\n            result = 0;\n          }\n          else {\n            result = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001424[9] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001424[9]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 2) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(9);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 2;\n    }\n    if (PTR_DAT_08001424[10] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001424[10]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 4) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(10);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 4;\n    }\n    if (PTR_DAT_08001424[0xb] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001424[0xb]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 8) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0xb);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 8;\n    }\n    if (PTR_DAT_08001424[0xc] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001424[0xc]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 0x10) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0xc);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 0x10;\n    }\n    if (PTR_DAT_08001424[0xd] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001424[0xd]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 0x20) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0xd);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 0x20;\n    }\n    if (PTR_DAT_08001424[0xe] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001424[0xe]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 0x40) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0xe);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 0x40;\n    }\n    if (PTR_DAT_08001424[0xf] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001424[0xf]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 0x80) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0xf);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 0x80;\n    }\n    execute_function_08000be8(1,result,0);\n  }\n  if (PTR_DAT_08001428[2] != '\\0') {\n    byteValue = PTR_DAT_0800142c[2];\n    if (PTR_DAT_08001424[0x10] == -1) {\n      result = 0;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        result = 0;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001424[0x10]);\n        if (intValue == 1) {\n          result = 0;\n        }\n        else if ((byteValue & 1) == 0) {\n          result = 0;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0x10);\n          if (intValue == 0) {\n            result = 0;\n          }\n          else {\n            result = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_080016c4[0x11] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_080016c4[0x11]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 2) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0x11);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 2;\n    }\n    if (PTR_DAT_080016c4[0x12] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_080016c4[0x12]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 4) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0x12);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 4;\n    }\n    if (PTR_DAT_080016c4[0x13] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_080016c4[0x13]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 8) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0x13);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 8;\n    }\n    if (PTR_DAT_080016c4[0x14] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_080016c4[0x14]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 0x10) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0x14);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 0x10;\n    }\n    if (PTR_DAT_080016c4[0x15] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_080016c4[0x15]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 0x20) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0x15);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 0x20;\n    }\n    if (PTR_DAT_080016c4[0x16] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_080016c4[0x16]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 0x40) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0x16);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 0x40;\n    }\n    if (PTR_DAT_080016c4[0x17] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_080016c4[0x17]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 0x80) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0x17);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 0x80;\n    }\n    execute_function_08000be8(2,result,0);\n  }\n  if (PTR_DAT_080016c8[3] != '\\0') {\n    byteValue = PTR_DAT_080016cc[3];\n    if (PTR_DAT_080016c4[0x18] == -1) {\n      result = 0;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        result = 0;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_080016c4[0x18]);\n        if (intValue == 1) {\n          result = 0;\n        }\n        else if ((byteValue & 1) == 0) {\n          result = 0;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0x18);\n          if (intValue == 0) {\n            result = 0;\n          }\n          else {\n            result = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_080016c4[0x19] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001960[0x19]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 2) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0x19);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 2;\n    }\n    if (PTR_DAT_08001960[0x1a] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001960[0x1a]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 4) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0x1a);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 4;\n    }\n    if (PTR_DAT_08001960[0x1b] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001960[0x1b]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 8) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0x1b);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 8;\n    }\n    if (PTR_DAT_08001960[0x1c] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001960[0x1c]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 0x10) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0x1c);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 0x10;\n    }\n    if (PTR_DAT_08001960[0x1d] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001960[0x1d]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 0x20) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0x1d);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 0x20;\n    }\n    if (PTR_DAT_08001960[0x1e] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001960[0x1e]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 0x40) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0x1e);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 0x40;\n    }\n    if (PTR_DAT_08001960[0x1f] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001960[0x1f]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 0x80) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0x1f);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 0x80;\n    }\n    execute_function_08000be8(3,result,0);\n  }\n  if (PTR_DAT_08001964[4] != '\\0') {\n    byteValue = PTR_DAT_08001968[4];\n    if (PTR_DAT_08001960[0x20] == -1) {\n      result = 0;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        result = 0;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001960[0x20]);\n        if (intValue == 1) {\n          result = 0;\n        }\n        else if ((byteValue & 1) == 0) {\n          result = 0;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0x20);\n          if (intValue == 0) {\n            result = 0;\n          }\n          else {\n            result = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001960[0x21] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001960[0x21]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 2) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0x21);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 2;\n    }\n    if (PTR_DAT_08001b44[0x22] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001b44[0x22]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 4) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0x22);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 4;\n    }\n    if (PTR_DAT_08001b44[0x23] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001b44[0x23]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 8) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0x23);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 8;\n    }\n    if (PTR_DAT_08001b44[0x24] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001b44[0x24]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 0x10) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0x24);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 0x10;\n    }\n    if (PTR_DAT_08001b44[0x25] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001b44[0x25]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 0x20) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0x25);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 0x20;\n    }\n    if (PTR_DAT_08001b44[0x26] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001b44[0x26]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 0x40) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0x26);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 0x40;\n    }\n    if (PTR_DAT_08001b44[0x27] == -1) {\n      boolValue = false;\n    }\n    else {\n      intValue = check_character_in_array_080036ac();\n      if (intValue == 0) {\n        boolValue = false;\n      }\n      else {\n        intValue = check_character_in_array_080036ac((int)(char)PTR_DAT_08001b44[0x27]);\n        if (intValue == 1) {\n          boolValue = false;\n        }\n        else if ((byteValue & 0x80) == 0) {\n          boolValue = false;\n        }\n        else {\n          intValue = check_bit_set_08008a6c(0x27);\n          if (intValue == 0) {\n            boolValue = false;\n          }\n          else {\n            boolValue = true;\n          }\n        }\n      }\n    }\n    if (boolValue) {\n      result = result | 0x80;\n    }\n    execute_function_08000be8(4,result,0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080036ac",
                "FUN_08008a6c",
                "FUN_08000be8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ef8",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "process_input_08000ef8"
        },
        "FUN_08008846": {
            "renaming": {
                "FUN_08008846": "set_memory_flags_08008846",
                "param_1": "mem_address",
                "param_2": "flags",
                "PTR_": "mem_",
                "DAT_": "data_"
            },
            "code": "int set_memory_flags_08008846(int *PTR_address, int flags) {\n    *PTR_address |= flags;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008846",
            "calling": [
                "FUN_0800a0ec"
            ],
            "imported": false,
            "current_name": "set_memory_flags_08008846"
        },
        "FUN_0800a430": {
            "renaming": {
                "FUN_0800a430": "do_nothing_0800a430"
            },
            "code": "\nvoid do_nothing_0800a430(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a430",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_0800a430"
        },
        "FUN_0800459c": {
            "renaming": {
                "FUN_0800459c": "increment_and_store_0800459c",
                "param_1": "array",
                "puVar1": "dest_ptr",
                "short": "short",
                "int": "int",
                "undefined": "undefined",
                "char": "char"
            },
            "code": "int increment_and_store_0800459c(int *array) {\n  short *counter_ptr = (short *)((int)array + 0x2a);\n  if (*counter_ptr != 0) {\n    char *dest_ptr = (char *)array[9];\n    array[9] = (int)(dest_ptr + 1);\n    *dest_ptr = (char)*(int *)(*array + 0x10);\n    *counter_ptr = *counter_ptr - 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800459c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "increment_and_store_0800459c"
        },
        "FUN_0800774a": {
            "renaming": {
                "FUN_0800774a": "set_parameter_0800774a",
                "param_1": "object_ptr",
                "param_2": "parameter_value",
                "PTR_": "object_",
                "DAT_": "data_"
            },
            "code": "void set_parameter_0800774a(int PTR_ptr, int parameter_value) {\n    int* PTR_address_ptr = *(int *)(PTR_ptr + 4);\n    int* parameter_address_ptr = PTR_address_ptr + 9;\n    *parameter_address_ptr = parameter_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800774a",
            "calling": [],
            "imported": false,
            "current_name": "set_parameter_0800774a"
        },
        "FUN_080042f0": {
            "renaming": {
                "FUN_080042f0": "check_and_update_data_080042f0",
                "param_1": "data",
                "DAT_08004308": "data_ptr",
                "uint": "unsigned int"
            },
            "code": "void check_and_update_data_080042f0(uint data) {\n    uint* DAT_08004308 = (uint*)(DAT_08004308 + 0x14);\n    if((*DAT_08004308 & data) != 0) {\n        *DAT_08004308 = data;\n        check_data_and_process_if_needed_08009094();\n    }\n    return;\n}",
            "called": [
                "FUN_08009094"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042f0",
            "calling": [],
            "imported": false,
            "current_name": "check_and_update_data_080042f0"
        },
        "FUN_080027f0": {
            "renaming": {
                "FUN_080027f0": "copy_data_to_buffer_080027f0",
                "param_1": "buffer_offset",
                "param_2": "data",
                "param_3": "data_length",
                "cVar1": "current_char",
                "puVar2": "buffer_pointer",
                "iVar3": "allocation_result",
                "uVar4": "buffer_length",
                "uVar5": "updated_data_length"
            },
            "code": "uint copy_data_to_buffer_080027f0(int buffer_offset, undefined4 data, uint data_length) {\\n  char current_char;\\n  undefined *buffer_pointer;\\n  int allocation_result;\\n  undefined buffer_length;\\n  uint updated_data_length;\\n  \\n  buffer_pointer = PTR_DAT_08002884;\\n  if (*PTR_DAT_08002878 == \"\\0\") {\\n    allocation_result = copy_data_to_buffer_080027f0_08007ede(buffer_offset + 0x14, data, data_length & 0xffff);\\n    if (allocation_result != 0) {\\n      return 0;\\n    }\\n    return data_length;\\n  }\\n  updated_data_length = (byte)*PTR_DAT_0800287c + data_length;\\n  if ((byte)*PTR_DAT_08002880 < updated_data_length) {\\n    if (updated_data_length < 0x20) {\\n      updated_data_length = 0x20;\\n    }\\n    allocation_result = allocate_and_copy_data_to_buffer_080027f0_08009908(*(undefined4 *)PTR_DAT_08002884, updated_data_length);\\n    *(int *)buffer_pointer = allocation_result;\\n    if (allocation_result == 0) {\\n      buffer_length = 0;\\n    }\\n    else {\\n      buffer_length = (undefined)updated_data_length;\\n    }\\n    *PTR_DAT_08002880 = buffer_length;\\n  }\\n  buffer_pointer = PTR_DAT_08002888;\\n  if (*(int *)PTR_DAT_08002884 != 0) {\\n    copy_data_to_buffer_080027f0_080091b0((uint)(byte)*PTR_DAT_08002888 + *(int *)PTR_DAT_08002884, data, data_length);\\n    current_char = *buffer_pointer + (char)data_length;\\n    *buffer_pointer = current_char;\\n    *PTR_DAT_0800287c = current_char;\\n    return data_length;\\n  }\\n  *(undefined4 *)(buffer_offset + 4) = 1;\\n  return 0;\\n}",
            "called": [
                "FUN_08009908",
                "FUN_08007ede",
                "FUN_080091b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080027f0",
            "calling": [],
            "imported": false,
            "current_name": "copy_data_to_buffer_080027f0"
        },
        "FUN_0800314e": {
            "renaming": {
                "FUN_0800314e": "set_param_to_zero_0800314e",
                "param_1": "param"
            },
            "code": "void set_param_to_zero_0800314e(int *param){\n    *param = 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800314e",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_param_to_zero_0800314e"
        },
        "FUN_080076e0": {
            "renaming": {
                "FUN_080076e0": "process_response_080076e0",
                "*param_1": "process_data",
                "cVar1": "response_code",
                "iVar2": "bit_index",
                "determine_response_08007544": "determine_response",
                "set_bit_in_array_08003fb0": "set_bit_in_array",
                "set_bit_and_return_08005df4": "set_bit_and_return",
                "set_bits_and_clear_flags_080062f4": "set_bits_and_clear_flags"
            },
            "code": "void process_response_080076e0(undefined4 *process_data){\n  char response_code;\n  int bit_index;\n  process_data[0x13] = 0;\n  response_code = determine_response(process_data[0]);\n  set_bit_in_array_08003fb0(response_code);\n  bit_index = set_bit_and_return_08005df4(process_data + 1);\n  if (bit_index == 0) {\n    set_bits_and_clear_flags_080062f4(process_data + 1,0);\n  }\n  return;\n}",
            "called": [
                "FUN_080062f4",
                "FUN_08007544",
                "FUN_08005df4",
                "FUN_08003fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080076e0",
            "calling": [
                "FUN_08002578"
            ],
            "imported": false,
            "current_name": "process_response_080076e0"
        },
        "FUN_08002f14": {
            "renaming": {
                "FUN_08002f14": "send_encoded_string_08002f14",
                "param_1": "string_length",
                "encode_and_send_string_data_080032a2": "encode_and_send_string_data",
                "PTR_": "PTR_ (no change)",
                "DAT_": "DAT_ (no change)"
            },
            "code": "void send_encoded_string_08002f14(int string_length) {\n    int encoded_string_start = string_length + 0x40;\n    encode_and_send_string_data(encoded_string_start);\n    return;\n}",
            "called": [
                "FUN_080032a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f14",
            "calling": [
                "FUN_08001cd0",
                "FUN_08000500",
                "FUN_08001c18",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "send_encoded_string_08002f14"
        },
        "FUN_080036a2": {
            "renaming": {
                "FUN_080036a2": "initialize_and_enable_data_updates_080036a2"
            },
            "code": "void initialize_and_enable_data_updates_080036a2(void)\n{\n  initialize_device_and_enable_data_updates_080072fa();\n  return;\n}",
            "called": [
                "FUN_080072fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036a2",
            "calling": [
                "FUN_08008f0e"
            ],
            "imported": false,
            "current_name": "initialize_and_enable_data_updates_080036a2"
        },
        "FUN_080038e4": {
            "renaming": {
                "FUN_080038e4": "write_data_to_memory_080038e4",
                "param_1": "memory_address",
                "param_2": "data",
                "uVar1": "result",
                "uVar2": "data_index",
                "iVar3": "loop_counter",
                "local_c": "loop_limit",
                "mask": "mask",
                "bit_mask": "bit_mask",
                "memory_location": "memory_location",
                "shift_amount": "shift_amount",
                "data_value": "data_value"
            },
            "code": "int write_data_to_memory_080038e4(int *memory_address, uint *data)\\n\\\n{\\n\\\n    int result = 0;\\n\\\n    uint data_index = data[0];\\n\\\n    int *memory_location = memory_address;\\n\\\n    int loop_counter = 0;\\n\\\n    int shift_amount = 0;\\n\\\n    uint mask = 0x1f;\\n\\\n    uint loop_limit = 0;\\n\\\n    uint bit_mask = 7;\\n\\\n    uint data_value = 0;\\n\\\n\\\n    if (*(char *)(memory_location + 9) != \"\\x01\")\\n\\\n    {\\n\\\n        *(undefined *)(memory_location + 9) = 1;\\n\\\n\\\n        if (data_index < 7)\\n\\\n        {\\n\\\n            shift_amount = data_index * 5 - 5;\\n\\\n            mask = mask << (shift_amount & 0xff);\\n\\\n            *(uint *)(*memory_location + 0x34) =\\n\\\n                *data << (shift_amount & 0xff) | *(uint *)(*memory_location + 0x34) & ~mask;\\n\\\n        }\\n\\\n        else if (data_index < 0xd)\\n\\\n        {\\n\\\n            shift_amount = data_index * 5 - 0x23;\\n\\\n            mask = mask << (shift_amount & 0xff);\\n\\\n            *(uint *)(*memory_location + 0x30) =\\n\\\n                *data << (shift_amount & 0xff) | *(uint *)(*memory_location + 0x30) & ~mask;\\n\\\n        }\\n\\\n        else\\n\\\n        {\\n\\\n            shift_amount = data_index * 5 - 0x41;\\n\\\n            mask = mask << (shift_amount & 0xff);\\n\\\n            *(uint *)(*memory_location + 0x2c) =\\n\\\n                *data << (shift_amount & 0xff) | *(uint *)(*memory_location + 0x2c) & ~mask;\\n\\\n        }\\n\\\n\\\n        data_value = *data;\\n\\\n        if (data_value < 10)\\n\\\n        {\\n\\\n            bit_mask = bit_mask << (data_value * 3 & 0xff);\\n\\\n            *(uint *)(*memory_location + 0x10) =\\n\\\n                data[2] << (data_value * 3 & 0xff) |\\n\\\n                *(uint *)(*memory_location + 0x10) & ~bit_mask;\\n\\\n        }\\n\\\n        else\\n\\\n        {\\n\\\n            shift_amount = data_value * 3 - 0x1e;\\n\\\n            bit_mask = bit_mask << (shift_amount & 0xff);\\n\\\n            *(uint *)(*memory_location + 0xc) =\\n\\\n                data[2] << (shift_amount & 0xff) |\\n\\\n                *(uint *)(*memory_location + 0xc) & ~bit_mask;\\n\\\n        }\\n\\\n\\\n        if (*data - 0x10 < 2)\\n\\\n        {\\n\\\n            loop_limit = (uint)((ulonglong)DAT_08003a18 * (ulonglong)*((uint *)PTR_DAT_08003a14)) >> 0x32;\\n\\\n            loop_limit *= 10;\\n\\\n\\\n            if (*memory_location == DAT_08003a10)\\n\\\n            {\\n\\\n                if ((*(uint *)(*memory_location + 8) & 0x800000) == 0)\\n\\\n                {\\n\\\n                    *(uint *)(*memory_location + 8) |= 0x800000;\\n\\\n                    if (*data == 0x10)\\n\\\n                    {\\n\\\n                        for (loop_counter = loop_limit; loop_counter != 0; loop_counter--);\\n\\\n                        result = 0;\\n\\\n                    }\\n\\\n                    else\\n\\\n                    {\\n\\\n                        result = 0;\\n\\\n                    }\\n\\\n                }\\n\\\n                else\\n\\\n                {\\n\\\n                    result = 0;\\n\\\n                }\\n\\\n            }\\n\\\n            else\\n\\\n            {\\n\\\n                memory_address[10] |= 0x20;\\n\\\n                result = 1;\\n\\\n            }\\n\\\n        }\\n\\\n\\\n        *(undefined *)(memory_location + 9) = 0;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        result = 2;\\n\\\n    }\\n\\\n\\\n    return result;\\n\\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038e4",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "write_data_to_memory_080038e4"
        },
        "FUN_08005e68": {
            "renaming": {
                "FUN_08005e68": "do_nothing_08005e68"
            },
            "code": "\nvoid do_nothing_08005e68(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e68",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e68"
        },
        "FUN_08005d48": {
            "renaming": {
                "FUN_08005d48": "update_data_struct_08005d48",
                "param_1": "struct_address",
                "param_2": "new_data",
                "uVar1": "var1",
                "uVar2": "var2",
                "uVar3": "var3",
                "DAT_08005da8": "SPECIAL_STRUCT_ADDRESS",
                "mask1": "0xfffffeff",
                "mask2": "0xfffffdff",
                "mask3": "0xfffff7ff",
                "mask4": "0xfffffbff"
            },
            "code": "void update_data_struct_08005d48(int struct_address, uint *new_data) {\n  uint mask1 = 0xfffffeff;\n  uint mask2 = 0xfffffdff;\n  uint mask3 = 0xfffff7ff;\n  uint mask4 = 0xfffffbff;\n  uint var1 = *(uint *)(struct_address + 0x20);\n  uint var2 = *(uint *)(struct_address + 0x4);\n  uint var3 = *new_data;\n  uint var4 = new_data[2] << 8;\n  var1 = (var1 & mask1) | var4;\n  if (struct_address == DAT_08005da8) {\n    var1 = (var1 & mask2) | (new_data[3] << 8 & mask3);\n    var2 = (var2 & 0xffffcfff) | (new_data[5] << 4) | (new_data[6] << 4);\n  }\n  *(uint *)(struct_address + 0x4) = var2;\n  *(uint *)(struct_address + 0x1c) = (*(uint *)(struct_address + 0x1c) & 0xffffff8c) | var3;\n  *(uint *)(struct_address + 0x3c) = new_data[1];\n  *(uint *)(struct_address + 0x20) = var1;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d48",
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "imported": false,
            "current_name": "update_data_struct_08005d48"
        }
    },
    "used_tokens": 337066,
    "layers": [
        [
            "FUN_08002c2c",
            "FUN_08000178",
            "FUN_0800735a",
            "FUN_08008c20",
            "FUN_080043a2",
            "FUN_08008df8",
            "FUN_08006b5c",
            "FUN_08000188",
            "FUN_0800344a",
            "FUN_08008e72",
            "FUN_0800291c",
            "FUN_08003346",
            "FUN_080032bc",
            "FUN_08003f94",
            "FUN_0800430c",
            "FUN_08003350",
            "FUN_08006b7c",
            "FUN_08005fe8",
            "FUN_08008804",
            "FUN_0800738a",
            "FUN_08004e3c",
            "FUN_08007718",
            "FUN_08002a30",
            "FUN_0800322c",
            "FUN_080099a4",
            "FUN_08005a1c",
            "FUN_08003760",
            "FUN_08003fd8",
            "FUN_0800307a",
            "FUN_08008d00",
            "FUN_08004b82",
            "FUN_08003f30",
            "FUN_08007f78",
            "FUN_08006b28",
            "FUN_08006b1c",
            "FUN_08008f3c",
            "FUN_08007332",
            "FUN_080073e8",
            "FUN_08004a76",
            "FUN_0800267c",
            "FUN_080047f4",
            "FUN_080033a8",
            "FUN_08008d18",
            "FUN_08005840",
            "FUN_08003306",
            "FUN_080060c4",
            "FUN_08002f84",
            "FUN_08009f2c",
            "FUN_0800a154",
            "FUN_08002580",
            "FUN_08006b3e",
            "FUN_08006262",
            "FUN_080073ec",
            "FUN_08008ef4",
            "FUN_08005a68",
            "FUN_08002f94",
            "FUN_080068d6",
            "FUN_08009148",
            "FUN_08008854",
            "FUN_080064cc",
            "FUN_08004d6c",
            "FUN_08008850",
            "FUN_08002fc2",
            "FUN_08008afa",
            "FUN_080038dc",
            "FUN_08008858",
            "FUN_08004a24",
            "FUN_08002fba",
            "FUN_080049e0",
            "FUN_08006d24",
            "FUN_080048c8",
            "FUN_08009954",
            "FUN_08004024",
            "FUN_08002400",
            "FUN_08008868",
            "FUN_080036ac",
            "FUN_08002f1e",
            "FUN_080026f8",
            "FUN_08004396",
            "FUN_08003fb0",
            "FUN_08002ec4",
            "FUN_08007306",
            "FUN_08002f2c",
            "FUN_08004954",
            "FUN_08005cec",
            "FUN_0800886c",
            "FUN_08003748",
            "FUN_080040e8",
            "FUN_0800010c",
            "FUN_080086e8",
            "FUN_08004046",
            "FUN_080073ae",
            "FUN_08003f0c",
            "FUN_08006bb8",
            "FUN_08007438",
            "FUN_0800887c",
            "FUN_08004728",
            "FUN_08007ede",
            "thunk_FUN_0800887c",
            "FUN_080074e0",
            "FUN_080073c0",
            "FUN_08004050",
            "FUN_080095a8",
            "FUN_08003366",
            "FUN_080091b0",
            "FUN_08009108",
            "FUN_080005e0",
            "FUN_08005dac",
            "FUN_0800270c",
            "FUN_08003370",
            "FUN_08003376",
            "FUN_08005430",
            "FUN_08002720",
            "FUN_08005434",
            "FUN_08004ccc",
            "FUN_080042d4",
            "FUN_0800542a",
            "FUN_0800457c",
            "FUN_080091c6",
            "FUN_080064b0",
            "FUN_08009124",
            "FUN_08002fa0",
            "FUN_08003a1c",
            "FUN_08007744",
            "FUN_080042e2",
            "FUN_08002fa8",
            "FUN_080091d8",
            "FUN_0800688e",
            "FUN_08008840",
            "FUN_08003154",
            "FUN_08006420",
            "FUN_08007750",
            "FUN_08009938",
            "FUN_08004004",
            "FUN_08008846",
            "FUN_0800459c",
            "FUN_0800774a",
            "FUN_0800314e",
            "FUN_080038e4",
            "FUN_08005d48"
        ],
        [
            "FUN_08007246",
            "FUN_08008694",
            "FUN_08002ce0",
            "FUN_080072f0",
            "FUN_0800a168",
            "FUN_0800723c",
            "FUN_08006280",
            "FUN_08007258",
            "FUN_0800a0ec",
            "FUN_08007376",
            "FUN_080033cc",
            "FUN_08003106",
            "FUN_08007708",
            "FUN_0800018c",
            "FUN_08006186",
            "FUN_08007710",
            "FUN_08008e7c",
            "FUN_080091a0",
            "FUN_08002948",
            "FUN_08007320",
            "FUN_0800319e",
            "FUN_0800997e",
            "FUN_080085dc",
            "FUN_0800a130",
            "FUN_08006128",
            "FUN_080062f4",
            "FUN_08005a48",
            "FUN_08007f7c",
            "FUN_080072d8",
            "FUN_08007e74",
            "FUN_08002ddc",
            "FUN_08007f8e",
            "FUN_08007110",
            "FUN_08009fe8",
            "FUN_0800734a",
            "FUN_08000aec",
            "FUN_08006390",
            "FUN_08008730",
            "FUN_08006ca8",
            "FUN_080063c0",
            "FUN_08005aa4",
            "FUN_0800643c",
            "FUN_080085b8",
            "FUN_08001c08",
            "FUN_08007ff0",
            "FUN_080036d8",
            "FUN_0800a110",
            "FUN_08003b8c",
            "FUN_08006460",
            "FUN_08008e14",
            "FUN_08005a28",
            "FUN_08008020",
            "FUN_0800771c",
            "FUN_080066e8",
            "FUN_08007fa0",
            "FUN_08008bf4",
            "FUN_080031ce",
            "FUN_08009918",
            "FUN_08007736",
            "FUN_08003a20",
            "FUN_08009cdc",
            "FUN_080026b0",
            "FUN_08006092",
            "FUN_080004d4",
            "FUN_08005cb4",
            "FUN_0800325a",
            "FUN_0800870c",
            "FUN_08007f0e",
            "FUN_080090c2"
        ],
        [
            "FUN_080067ac",
            "FUN_0800694c",
            "FUN_08006c7c",
            "FUN_08004f3c",
            "FUN_08003de4",
            "FUN_08006060",
            "FUN_08003474",
            "FUN_08003aa0",
            "FUN_08003ce8",
            "FUN_08009e64",
            "FUN_08002dbc",
            "FUN_080058d2",
            "FUN_08008ed6",
            "FUN_0800a020",
            "FUN_08006c60",
            "FUN_08006932",
            "FUN_080045c0",
            "FUN_08002efe",
            "FUN_08002df6",
            "FUN_08002c1e",
            "FUN_08008f78",
            "FUN_08008d30",
            "FUN_080032a2",
            "FUN_08005df4",
            "FUN_08004ac2",
            "FUN_08003724",
            "FUN_08002f0a",
            "FUN_08005bb8",
            "FUN_08009270",
            "FUN_08005e6e",
            "FUN_08009b5c",
            "FUN_08008a6c",
            "FUN_080058ac",
            "FUN_08004aec",
            "FUN_0800863c",
            "FUN_080084b0",
            "FUN_08003bd8",
            "FUN_08008a24",
            "FUN_08008abc",
            "FUN_08005e2e",
            "FUN_08002968",
            "FUN_0800a07a",
            "FUN_08002a58",
            "FUN_08006538",
            "FUN_08008600",
            "FUN_08003158"
        ],
        [
            "FUN_080069ec",
            "FUN_08009d24",
            "FUN_080071e4",
            "FUN_08005084",
            "FUN_08002ac0",
            "FUN_08002a1c",
            "FUN_08000be8",
            "FUN_08009190",
            "FUN_08002ef2",
            "FUN_0800376c",
            "FUN_08003e20",
            "FUN_08009eac",
            "FUN_08008eec",
            "FUN_080090cc",
            "FUN_08008500",
            "FUN_08002fca",
            "FUN_080052f0",
            "FUN_08002e26",
            "FUN_080035b8",
            "FUN_08002ed2",
            "FUN_08009908",
            "FUN_0800674e",
            "FUN_08008d8c",
            "FUN_08008b66",
            "FUN_08002f14"
        ],
        [
            "FUN_0800a042",
            "FUN_08005188",
            "FUN_08000a64",
            "FUN_08008c44",
            "FUN_08006d80",
            "FUN_08008990",
            "FUN_08008f0e",
            "FUN_0800288c",
            "FUN_08002b68",
            "FUN_080027f0"
        ],
        [
            "FUN_08001bf8",
            "FUN_08002c00",
            "FUN_08008880",
            "FUN_08003002"
        ],
        [
            "FUN_08002c14",
            "FUN_08003048",
            "FUN_08000488"
        ],
        [
            "FUN_08001b48",
            "FUN_08001c18"
        ],
        [
            "FUN_080022f8"
        ],
        [
            "FUN_08008f1c"
        ],
        [
            "FUN_08003658"
        ],
        [
            "FUN_0800a18c"
        ],
        [
            "FUN_08009084"
        ],
        [
            "FUN_08009094"
        ],
        [
            "FUN_080042f0"
        ],
        [
            "FUN_08009db0",
            "FUN_08009a80",
            "FUN_080098d8",
            "FUN_08009c7c"
        ],
        [
            "FUN_08007594",
            "FUN_08007544",
            "FUN_08009d50"
        ],
        [
            "FUN_0800932c",
            "FUN_080075dc",
            "FUN_080076e0"
        ],
        [
            "FUN_08002578",
            "FUN_08007118",
            "FUN_08007648",
            "FUN_08009358"
        ],
        [
            "FUN_0800242c",
            "FUN_08002644",
            "FUN_080088e0"
        ],
        [
            "FUN_08000214",
            "FUN_080025ac",
            "FUN_08000588",
            "FUN_0800021a"
        ],
        [
            "FUN_08002634"
        ],
        [
            "FUN_08000500"
        ],
        [
            "FUN_080077b0",
            "FUN_08009698",
            "FUN_08005460",
            "FUN_08008078",
            "FUN_08006e68",
            "FUN_080005f8",
            "FUN_08000ef8"
        ],
        [
            "FUN_08001cd0",
            "FUN_0800937c"
        ]
    ],
    "locked_functions": []
}